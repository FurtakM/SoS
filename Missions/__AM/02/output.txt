// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10254 0 0
// PrepareRussianCommander ;
 172: CALL 11710 0 0
// PrepareSouthBase ;
 176: CALL 11793 0 0
// PrepareNorthBase ;
 180: CALL 12132 0 0
// PrepareOtherRussians ;
 184: CALL 12498 0 0
// PrepareHeroes ;
 188: CALL 10569 0 0
// PrepareLisSquad ;
 192: CALL 10897 0 0
// PrepareOtherAmericans ;
 196: CALL 11242 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3196
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 999
2050: PUSH
2051: LD_INT 999
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 1
2099: PUSH
2100: LD_EXP 2
2104: PUSH
2105: LD_EXP 3
2109: PUSH
2110: LD_EXP 4
2114: PUSH
2115: LD_EXP 5
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: DIFF
2127: ST_TO_ADDR
// PrepareDeadSoldiers ;
2128: CALL 11400 0 0
// spotCorpses = 1 ;
2132: LD_ADDR_EXP 32
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2140: LD_INT 70
2142: PPUSH
2143: CALL_OW 67
// InGameOn ;
2147: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2151: LD_INT 23
2153: PPUSH
2154: LD_INT 12
2156: PPUSH
2157: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_VAR 0 2
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PUSH
2175: LD_INT 2
2177: ARRAY
2178: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2179: LD_ADDR_VAR 0 1
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 21
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: LD_EXP 1
2217: PUSH
2218: LD_EXP 5
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: DIFF
2227: PUSH
2228: FOR_IN
2229: IFFALSE 2280
// if IsOK ( i ) then
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 302
2240: IFFALSE 2278
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: LD_VAR 0 2
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 299
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: ADD
2277: ST_TO_ADDR
2278: GO 2228
2280: POP
2281: POP
// for i = 2 to distanceTab do
2282: LD_ADDR_VAR 0 1
2286: PUSH
2287: DOUBLE
2288: LD_INT 2
2290: DEC
2291: ST_TO_ADDR
2292: LD_VAR 0 2
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2344
// if distanceTab [ i ] [ 2 ] < min then
2300: LD_VAR 0 2
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: PUSH
2311: LD_INT 2
2313: ARRAY
2314: PUSH
2315: LD_VAR 0 3
2319: LESS
2320: IFFALSE 2342
// min = distanceTab [ i ] [ 2 ] ;
2322: LD_ADDR_VAR 0 3
2326: PUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_VAR 0 1
2336: ARRAY
2337: PUSH
2338: LD_INT 2
2340: ARRAY
2341: ST_TO_ADDR
2342: GO 2297
2344: POP
2345: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2346: LD_ADDR_VAR 0 1
2350: PUSH
2351: LD_INT 22
2353: PUSH
2354: LD_INT 1
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 21
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 69
2379: PUSH
2380: LD_EXP 1
2384: PUSH
2385: EMPTY
2386: LIST
2387: DIFF
2388: PUSH
2389: FOR_IN
2390: IFFALSE 2460
// begin ComMoveToArea ( i , DeadCutscene ) ;
2392: LD_VAR 0 1
2396: PPUSH
2397: LD_INT 28
2399: PPUSH
2400: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2404: LD_EXP 1
2408: PPUSH
2409: LD_INT 30
2411: PPUSH
2412: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_INT 23
2423: PPUSH
2424: LD_INT 11
2426: PPUSH
2427: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2431: LD_EXP 1
2435: PPUSH
2436: LD_INT 23
2438: PPUSH
2439: LD_INT 11
2441: PPUSH
2442: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2446: LD_EXP 34
2450: PPUSH
2451: LD_INT 250
2453: PPUSH
2454: CALL_OW 234
// end ;
2458: GO 2389
2460: POP
2461: POP
// for i = 2 to distanceTab do
2462: LD_ADDR_VAR 0 1
2466: PUSH
2467: DOUBLE
2468: LD_INT 2
2470: DEC
2471: ST_TO_ADDR
2472: LD_VAR 0 2
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2864
// begin if distanceTab [ i ] [ 2 ] = min then
2480: LD_VAR 0 2
2484: PUSH
2485: LD_VAR 0 1
2489: ARRAY
2490: PUSH
2491: LD_INT 2
2493: ARRAY
2494: PUSH
2495: LD_VAR 0 3
2499: EQUAL
2500: IFFALSE 2862
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2502: LD_VAR 0 2
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PUSH
2513: LD_INT 1
2515: ARRAY
2516: PUSH
2517: LD_EXP 2
2521: EQUAL
2522: IFFALSE 2536
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2524: LD_EXP 2
2528: PPUSH
2529: LD_STRING DCorpses-Bobby-1
2531: PPUSH
2532: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_VAR 0 1
2545: ARRAY
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PUSH
2551: LD_EXP 3
2555: EQUAL
2556: IFFALSE 2570
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2558: LD_EXP 3
2562: PPUSH
2563: LD_STRING DCorpses-Cyrus-1
2565: PPUSH
2566: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2570: LD_VAR 0 2
2574: PUSH
2575: LD_VAR 0 1
2579: ARRAY
2580: PUSH
2581: LD_INT 1
2583: ARRAY
2584: PUSH
2585: LD_EXP 4
2589: EQUAL
2590: IFFALSE 2604
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2592: LD_EXP 4
2596: PPUSH
2597: LD_STRING DCorpses-Lisa-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 1
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-Sol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 1
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 2
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-FSol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 1
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-Sol1-1
2782: PPUSH
2783: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2787: LD_VAR 0 2
2791: PUSH
2792: LD_VAR 0 1
2796: ARRAY
2797: PUSH
2798: LD_INT 1
2800: ARRAY
2801: PUSH
2802: LD_VAR 0 4
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: EQUAL
2811: PUSH
2812: LD_VAR 0 4
2816: PUSH
2817: LD_INT 2
2819: ARRAY
2820: PPUSH
2821: CALL_OW 258
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: AND
2830: IFFALSE 2848
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2832: LD_VAR 0 4
2836: PUSH
2837: LD_INT 2
2839: ARRAY
2840: PPUSH
2841: LD_STRING DCorpses-FSol1-1
2843: PPUSH
2844: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2848: LD_EXP 34
2852: PPUSH
2853: LD_INT 150
2855: PPUSH
2856: CALL_OW 234
// break ;
2860: GO 2864
// end ; end ;
2862: GO 2477
2864: POP
2865: POP
// repeat wait ( 0 0$1 ) ;
2866: LD_INT 35
2868: PPUSH
2869: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2873: LD_ADDR_VAR 0 1
2877: PUSH
2878: LD_INT 22
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 1
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_EXP 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: DIFF
2915: PUSH
2916: FOR_IN
2917: IFFALSE 2987
// begin ComMoveToArea ( i , DeadCutscene ) ;
2919: LD_VAR 0 1
2923: PPUSH
2924: LD_INT 28
2926: PPUSH
2927: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2931: LD_EXP 1
2935: PPUSH
2936: LD_INT 30
2938: PPUSH
2939: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_INT 23
2950: PPUSH
2951: LD_INT 11
2953: PPUSH
2954: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_INT 23
2965: PPUSH
2966: LD_INT 11
2968: PPUSH
2969: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2973: LD_EXP 34
2977: PPUSH
2978: LD_INT 250
2980: PPUSH
2981: CALL_OW 234
// end ;
2985: GO 2916
2987: POP
2988: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2989: LD_EXP 1
2993: PPUSH
2994: LD_INT 30
2996: PPUSH
2997: CALL_OW 308
3001: IFFALSE 2866
// wait ( 0 0$1 ) ;
3003: LD_INT 35
3005: PPUSH
3006: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3010: LD_EXP 1
3014: PPUSH
3015: LD_STRING DCorpses-JMM-1
3017: PPUSH
3018: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3022: LD_EXP 34
3026: PPUSH
3027: LD_INT 100
3029: PPUSH
3030: CALL_OW 234
// if IsOK ( Khatam ) then
3034: LD_EXP 5
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3180
// begin repeat wait ( 0 0$1 ) ;
3045: LD_INT 35
3047: PPUSH
3048: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3066: LD_EXP 5
3070: PPUSH
3071: LD_EXP 34
3075: PPUSH
3076: CALL_OW 296
3080: PUSH
3081: LD_INT 2
3083: LESS
3084: IFFALSE 3045
// spotCorpses = 0 ;
3086: LD_ADDR_EXP 32
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3094: LD_EXP 34
3098: PPUSH
3099: LD_INT 10
3101: PPUSH
3102: CALL_OW 234
// wait ( 0 0$3 ) ;
3106: LD_INT 105
3108: PPUSH
3109: CALL_OW 67
// KillUnit ( DyingSold ) ;
3113: LD_EXP 34
3117: PPUSH
3118: CALL_OW 66
// wait ( 0 0$1 ) ;
3122: LD_INT 35
3124: PPUSH
3125: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3129: LD_EXP 1
3133: PUSH
3134: LD_EXP 5
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3147: LD_EXP 5
3151: PPUSH
3152: LD_EXP 1
3156: PPUSH
3157: CALL_OW 119
// wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3168: LD_EXP 5
3172: PPUSH
3173: LD_STRING DCorpses-Khat-1
3175: PPUSH
3176: CALL_OW 88
// end ; InGameOff ;
3180: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING DCorpses-JMM-2
3191: PPUSH
3192: CALL_OW 88
// end ;
3196: PPOPN 4
3198: END
// every 0 0$1 trigger spotCorpses = 1 do
3199: LD_EXP 32
3203: PUSH
3204: LD_INT 1
3206: EQUAL
3207: IFFALSE 3225
3209: GO 3211
3211: DISABLE
// begin enable ;
3212: ENABLE
// SetLives ( DyingSold , 10 ) ;
3213: LD_EXP 34
3217: PPUSH
3218: LD_INT 10
3220: PPUSH
3221: CALL_OW 234
// end ;
3225: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3226: LD_INT 8
3228: PPUSH
3229: LD_INT 22
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 70
3243: PUSH
3244: LD_INT 0
3246: GREATER
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PPUSH
3263: LD_EXP 7
3267: PPUSH
3268: CALL_OW 74
3272: PPUSH
3273: LD_EXP 7
3277: PPUSH
3278: CALL_OW 296
3282: PUSH
3283: LD_INT 13
3285: LESS
3286: OR
3287: IFFALSE 3484
3289: GO 3291
3291: DISABLE
3292: LD_INT 0
3294: PPUSH
// begin InGameOn ;
3295: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3299: LD_EXP 7
3303: PPUSH
3304: LD_INT 250
3306: PPUSH
3307: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3311: LD_EXP 6
3315: PPUSH
3316: LD_INT 1000
3318: PUSH
3319: LD_INT 800
3321: PUSH
3322: LD_INT 750
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: LD_OWVAR 67
3334: ARRAY
3335: PPUSH
3336: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 4
3345: PPUSH
3346: LD_INT 2
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3356: LD_EXP 6
3360: PUSH
3361: LD_EXP 7
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3374: LD_ADDR_VAR 0 1
3378: PUSH
3379: LD_INT 9
3381: PPUSH
3382: LD_INT 22
3384: PUSH
3385: LD_INT 3
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PPUSH
3392: CALL_OW 70
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3411
// ComFree ( i ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 139
3409: GO 3397
3411: POP
3412: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_INT 22
3420: PUSH
3421: LD_INT 4
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: CALL_OW 69
3432: PUSH
3433: FOR_IN
3434: IFFALSE 3447
// ComFree ( i ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 139
3445: GO 3433
3447: POP
3448: POP
// wait ( 0 0$1 ) ;
3449: LD_INT 35
3451: PPUSH
3452: CALL_OW 67
// InGameOff ;
3456: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3460: LD_EXP 6
3464: PPUSH
3465: LD_STRING DF-Sol1-1
3467: PPUSH
3468: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3472: LD_EXP 1
3476: PPUSH
3477: LD_STRING DF-JMM-1
3479: PPUSH
3480: CALL_OW 88
// end ;
3484: PPOPN 1
3486: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3487: LD_INT 19
3489: PPUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 3
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 70
3504: PUSH
3505: LD_INT 0
3507: EQUAL
3508: IFFALSE 3617
3510: GO 3512
3512: DISABLE
// begin if not IsDead ( Brian ) then
3513: LD_EXP 6
3517: PPUSH
3518: CALL_OW 301
3522: NOT
3523: IFFALSE 3537
// SetSide ( Brian , 1 ) ;
3525: LD_EXP 6
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 235
// if not IsDead ( Jerry ) then
3537: LD_EXP 7
3541: PPUSH
3542: CALL_OW 301
3546: NOT
3547: IFFALSE 3561
// SetSide ( Jerry , 1 ) ;
3549: LD_EXP 7
3553: PPUSH
3554: LD_INT 1
3556: PPUSH
3557: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3561: LD_INT 22
3563: PUSH
3564: LD_INT 1
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 25
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 69
3589: IFFALSE 3605
// Say ( JMM , DFa-JMM-1 ) else
3591: LD_EXP 1
3595: PPUSH
3596: LD_STRING DFa-JMM-1
3598: PPUSH
3599: CALL_OW 88
3603: GO 3617
// Say ( JMM , DFa-JMM-1a ) ;
3605: LD_EXP 1
3609: PPUSH
3610: LD_STRING DFa-JMM-1a
3612: PPUSH
3613: CALL_OW 88
// end ;
3617: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3618: LD_INT 19
3620: PPUSH
3621: LD_INT 22
3623: PUSH
3624: LD_INT 3
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PPUSH
3631: CALL_OW 70
3635: PUSH
3636: LD_INT 0
3638: EQUAL
3639: PUSH
3640: LD_EXP 6
3644: PPUSH
3645: CALL_OW 302
3649: NOT
3650: AND
3651: IFFALSE 3737
3653: GO 3655
3655: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3656: LD_INT 35
3658: PPUSH
3659: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3663: LD_EXP 6
3667: PPUSH
3668: CALL_OW 256
3672: PUSH
3673: LD_INT 250
3675: GREATER
3676: IFFALSE 3656
// Say ( Brian , DFb-Sol1-1 ) ;
3678: LD_EXP 6
3682: PPUSH
3683: LD_STRING DFb-Sol1-1
3685: PPUSH
3686: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3690: LD_EXP 6
3694: PPUSH
3695: LD_INT 78
3697: PPUSH
3698: LD_INT 74
3700: PPUSH
3701: CALL_OW 111
// if IsDead ( Jerry ) then
3705: LD_EXP 7
3709: PPUSH
3710: CALL_OW 301
3714: IFFALSE 3730
// Say ( Brian , DFb-Sol1-1a ) else
3716: LD_EXP 6
3720: PPUSH
3721: LD_STRING DFb-Sol1-1a
3723: PPUSH
3724: CALL_OW 88
3728: GO 3737
// SetAchievement ( ACH_JERRY ) ;
3730: LD_STRING ACH_JERRY
3732: PPUSH
3733: CALL_OW 543
// end ;
3737: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3738: LD_INT 22
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 21
3750: PUSH
3751: LD_INT 2
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PPUSH
3762: CALL_OW 69
3766: PUSH
3767: LD_INT 0
3769: EQUAL
3770: IFFALSE 3858
3772: GO 3774
3774: DISABLE
3775: LD_INT 0
3777: PPUSH
// begin enable ;
3778: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3779: LD_ADDR_VAR 0 1
3783: PUSH
3784: LD_INT 22
3786: PUSH
3787: LD_INT 3
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 21
3796: PUSH
3797: LD_INT 3
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 31
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: PPUSH
3819: CALL_OW 69
3823: PUSH
3824: FOR_IN
3825: IFFALSE 3856
// begin if See ( 1 , i ) then
3827: LD_INT 1
3829: PPUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: CALL_OW 292
3839: IFFALSE 3854
// begin disable ;
3841: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3842: LD_EXP 1
3846: PPUSH
3847: LD_STRING DX1-JMM-1
3849: PPUSH
3850: CALL_OW 88
// end ; end ;
3854: GO 3824
3856: POP
3857: POP
// end ;
3858: PPOPN 1
3860: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 11
3866: PPUSH
3867: CALL_OW 294
3871: IFFALSE 4130
3873: GO 3875
3875: DISABLE
3876: LD_INT 0
3878: PPUSH
3879: PPUSH
3880: PPUSH
// begin DialogueOn ;
3881: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3885: LD_INT 11
3887: PPUSH
3888: LD_INT 22
3890: PUSH
3891: LD_INT 3
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: LD_INT 21
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL_OW 70
3916: PUSH
3917: LD_INT 1
3919: ARRAY
3920: PPUSH
3921: LD_STRING DX3-Rus1-1
3923: PPUSH
3924: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3928: LD_EXP 1
3932: PPUSH
3933: LD_STRING DX3-JMM-1
3935: PPUSH
3936: CALL_OW 88
// DialogueOff ;
3940: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3944: LD_ADDR_VAR 0 1
3948: PUSH
3949: LD_INT 11
3951: PPUSH
3952: LD_INT 22
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 25
3964: PUSH
3965: LD_INT 1
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 70
3980: PUSH
3981: FOR_IN
3982: IFFALSE 4002
// southBaseDefenders = southBaseDefenders ^ i ;
3984: LD_ADDR_EXP 25
3988: PUSH
3989: LD_EXP 25
3993: PUSH
3994: LD_VAR 0 1
3998: ADD
3999: ST_TO_ADDR
4000: GO 3981
4002: POP
4003: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4004: LD_INT 175
4006: PUSH
4007: LD_INT 140
4009: PUSH
4010: LD_INT 105
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: LIST
4017: PUSH
4018: LD_OWVAR 67
4022: ARRAY
4023: PPUSH
4024: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: LD_INT 22
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 21
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 25
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: ST_TO_ADDR
// if not mech then
4073: LD_VAR 0 3
4077: NOT
4078: IFFALSE 4082
// exit ;
4080: GO 4130
// ComExitBuilding ( mech ) ;
4082: LD_VAR 0 3
4086: PPUSH
4087: CALL_OW 122
// wait ( 0 0$1 ) ;
4091: LD_INT 35
4093: PPUSH
4094: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4098: LD_VAR 0 3
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: PPUSH
4107: LD_INT 5
4109: PPUSH
4110: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4114: LD_VAR 0 3
4118: PUSH
4119: LD_INT 2
4121: ARRAY
4122: PPUSH
4123: LD_INT 4
4125: PPUSH
4126: CALL_OW 180
// end ;
4130: PPOPN 3
4132: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 5
4138: PPUSH
4139: CALL_OW 292
4143: PUSH
4144: LD_INT 1
4146: PPUSH
4147: LD_INT 4
4149: PPUSH
4150: CALL_OW 292
4154: OR
4155: IFFALSE 4239
4157: GO 4159
4159: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4160: LD_INT 5
4162: PUSH
4163: LD_INT 4
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PPUSH
4170: CALL_OW 85
// if IsOK ( Bobby ) then
4174: LD_EXP 2
4178: PPUSH
4179: CALL_OW 302
4183: IFFALSE 4219
// begin DialogueOn ;
4185: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4189: LD_EXP 2
4193: PPUSH
4194: LD_STRING DX2-Bobby-1
4196: PPUSH
4197: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4201: LD_EXP 1
4205: PPUSH
4206: LD_STRING DX2-JMM-1a
4208: PPUSH
4209: CALL_OW 88
// DialogueOff ;
4213: CALL_OW 7
// end else
4217: GO 4239
// begin DialogueOn ;
4219: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4223: LD_EXP 1
4227: PPUSH
4228: LD_STRING DX2-JMM-1
4230: PPUSH
4231: CALL_OW 88
// DialogueOff ;
4235: CALL_OW 7
// end ; end ;
4239: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4240: LD_INT 22
4242: PUSH
4243: LD_INT 1
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 23
4252: PUSH
4253: LD_INT 3
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 21
4262: PUSH
4263: LD_INT 2
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 34
4272: PUSH
4273: LD_INT 42
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 69
4290: IFFALSE 4711
4292: GO 4294
4294: DISABLE
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
4299: PPUSH
4300: PPUSH
4301: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4302: LD_ADDR_VAR 0 1
4306: PUSH
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 23
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 21
4329: PUSH
4330: LD_INT 2
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 34
4339: PUSH
4340: LD_INT 42
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 69
4357: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4358: LD_ADDR_VAR 0 3
4362: PUSH
4363: LD_INT 22
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 26
4385: PUSH
4386: LD_INT 1
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 69
4402: PUSH
4403: LD_EXP 1
4407: PUSH
4408: LD_EXP 3
4412: PUSH
4413: LD_EXP 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: DIFF
4423: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4424: LD_ADDR_VAR 0 4
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 26
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 4
4473: PUSH
4474: EMPTY
4475: LIST
4476: DIFF
4477: ST_TO_ADDR
// if not tmp then
4478: LD_VAR 0 1
4482: NOT
4483: IFFALSE 4487
// exit ;
4485: GO 4711
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_VAR 0 1
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: PPUSH
4501: CALL_OW 311
4505: ST_TO_ADDR
// if not speaker then
4506: LD_VAR 0 2
4510: NOT
4511: IFFALSE 4515
// exit ;
4513: GO 4711
// DialogueOn ;
4515: CALL_OW 6
// if speaker = JMM then
4519: LD_VAR 0 2
4523: PUSH
4524: LD_EXP 1
4528: EQUAL
4529: IFFALSE 4563
// begin if Lisa then
4531: LD_EXP 4
4535: IFFALSE 4549
// Say ( Lisa , DX2b-Lisa-1 ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_STRING DX2b-Lisa-1
4544: PPUSH
4545: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4549: LD_EXP 1
4553: PPUSH
4554: LD_STRING DX2b-JMM-1
4556: PPUSH
4557: CALL_OW 88
// end else
4561: GO 4707
// begin Say ( JMM , DX2a-JMM-1 ) ;
4563: LD_EXP 1
4567: PPUSH
4568: LD_STRING DX2a-JMM-1
4570: PPUSH
4571: CALL_OW 88
// if speaker = Bobby then
4575: LD_VAR 0 2
4579: PUSH
4580: LD_EXP 2
4584: EQUAL
4585: IFFALSE 4599
// Say ( Bobby , DX2a-Bobby-1 ) ;
4587: LD_EXP 2
4591: PPUSH
4592: LD_STRING DX2a-Bobby-1
4594: PPUSH
4595: CALL_OW 88
// if speaker = Cyrus then
4599: LD_VAR 0 2
4603: PUSH
4604: LD_EXP 3
4608: EQUAL
4609: IFFALSE 4623
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4611: LD_EXP 3
4615: PPUSH
4616: LD_STRING DX2a-Cyrus-1
4618: PPUSH
4619: CALL_OW 88
// if speaker = Lisa then
4623: LD_VAR 0 2
4627: PUSH
4628: LD_EXP 4
4632: EQUAL
4633: IFFALSE 4647
// Say ( Lisa , DX2a-Lisa-1 ) ;
4635: LD_EXP 4
4639: PPUSH
4640: LD_STRING DX2a-Lisa-1
4642: PPUSH
4643: CALL_OW 88
// if speaker in temp1 then
4647: LD_VAR 0 2
4651: PUSH
4652: LD_VAR 0 3
4656: IN
4657: IFFALSE 4671
// Say ( speaker , DX2a-Sol1-1 ) ;
4659: LD_VAR 0 2
4663: PPUSH
4664: LD_STRING DX2a-Sol1-1
4666: PPUSH
4667: CALL_OW 88
// if speaker in temp2 then
4671: LD_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: IN
4681: IFFALSE 4695
// Say ( speaker , DX2a-FSol1-1 ) ;
4683: LD_VAR 0 2
4687: PPUSH
4688: LD_STRING DX2a-FSol1-1
4690: PPUSH
4691: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4695: LD_EXP 1
4699: PPUSH
4700: LD_STRING DX2a-JMM-2
4702: PPUSH
4703: CALL_OW 88
// end ; DialogueOff ;
4707: CALL_OW 7
// end ;
4711: PPOPN 5
4713: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4714: LD_INT 1
4716: PPUSH
4717: CALL_OW 255
4721: PUSH
4722: LD_INT 1
4724: EQUAL
4725: PUSH
4726: LD_INT 10
4728: PPUSH
4729: CALL_OW 255
4733: PUSH
4734: LD_INT 1
4736: EQUAL
4737: OR
4738: IFFALSE 4798
4740: GO 4742
4742: DISABLE
// begin DialogueOn ;
4743: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4747: LD_EXP 1
4751: PPUSH
4752: LD_STRING D3-JMM-1
4754: PPUSH
4755: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4759: LD_EXP 9
4763: PPUSH
4764: LD_STRING D3-Pow-1
4766: PPUSH
4767: CALL_OW 94
// if IsOK ( Cyrus ) then
4771: LD_EXP 3
4775: PPUSH
4776: CALL_OW 302
4780: IFFALSE 4794
// Say ( Cyrus , D3-Cyrus-1 ) ;
4782: LD_EXP 3
4786: PPUSH
4787: LD_STRING D3-Cyrus-1
4789: PPUSH
4790: CALL_OW 88
// DialogueOff ;
4794: CALL_OW 7
// end ;
4798: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4799: LD_INT 1
4801: PPUSH
4802: CALL_OW 255
4806: PUSH
4807: LD_INT 1
4809: EQUAL
4810: PUSH
4811: LD_INT 10
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 1
4821: EQUAL
4822: AND
4823: IFFALSE 6206
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4833: LD_ADDR_VAR 0 2
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 21
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PPUSH
4862: CALL_OW 69
4866: ST_TO_ADDR
// if tmp then
4867: LD_VAR 0 2
4871: IFFALSE 4932
// begin for i in tmp do
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: LD_VAR 0 2
4882: PUSH
4883: FOR_IN
4884: IFFALSE 4930
// begin if IsInUnit ( i ) then
4886: LD_VAR 0 3
4890: PPUSH
4891: CALL_OW 310
4895: IFFALSE 4906
// ComExitBuilding ( i ) ;
4897: LD_VAR 0 3
4901: PPUSH
4902: CALL_OW 122
// wait ( 0 0$1 ) ;
4906: LD_INT 35
4908: PPUSH
4909: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_INT 54
4920: PPUSH
4921: LD_INT 17
4923: PPUSH
4924: CALL_OW 174
// end ;
4928: GO 4883
4930: POP
4931: POP
// end ; wait ( 0 0$03 ) ;
4932: LD_INT 105
4934: PPUSH
4935: CALL_OW 67
// DialogueOn ;
4939: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4943: LD_EXP 1
4947: PPUSH
4948: LD_STRING D3a-JMM-1
4950: PPUSH
4951: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4955: LD_EXP 9
4959: PPUSH
4960: LD_STRING D3a-Pow-1
4962: PPUSH
4963: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
4967: LD_EXP 1
4971: PPUSH
4972: LD_STRING D3a-JMM-2
4974: PPUSH
4975: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
4979: LD_EXP 9
4983: PPUSH
4984: LD_STRING D3a-Pow-2
4986: PPUSH
4987: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D3a-JMM-3
4998: PPUSH
4999: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5003: LD_EXP 9
5007: PPUSH
5008: LD_STRING D3a-Pow-3
5010: PPUSH
5011: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5015: LD_EXP 1
5019: PPUSH
5020: LD_STRING D3a-JMM-4
5022: PPUSH
5023: CALL_OW 88
// DialogueOff ;
5027: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5031: LD_STRING M2
5033: PPUSH
5034: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D3b-JMM-1
5045: PPUSH
5046: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5050: LD_INT 35
5052: PPUSH
5053: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5057: LD_INT 22
5059: PPUSH
5060: LD_INT 22
5062: PUSH
5063: LD_INT 1
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 25
5072: PUSH
5073: LD_INT 2
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 70
5088: PUSH
5089: LD_INT 22
5091: PUSH
5092: LD_INT 3
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 69
5117: NOT
5118: AND
5119: IFFALSE 5050
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5121: LD_ADDR_VAR 0 1
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_INT 1
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: LD_INT 23
5138: PUSH
5139: LD_INT 1
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 25
5148: PUSH
5149: LD_INT 2
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 50
5158: PUSH
5159: EMPTY
5160: LIST
5161: PUSH
5162: LD_INT 56
5164: PUSH
5165: EMPTY
5166: LIST
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 69
5179: PUSH
5180: LD_EXP 1
5184: PUSH
5185: LD_EXP 5
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: DIFF
5194: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5195: LD_INT 35
5197: PPUSH
5198: CALL_OW 67
// until temp > 0 ;
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 0
5209: GREATER
5210: IFFALSE 5121
// wait ( 0 0$5 ) ;
5212: LD_INT 175
5214: PPUSH
5215: CALL_OW 67
// PrepareRussianHeroes ;
5219: CALL 11557 0 0
// InGameOn ;
5223: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5227: LD_EXP 8
5231: PPUSH
5232: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5236: LD_EXP 1
5240: PUSH
5241: LD_VAR 0 1
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: LD_EXP 8
5258: PPUSH
5259: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5263: LD_EXP 8
5267: PPUSH
5268: LD_VAR 0 1
5272: PUSH
5273: LD_INT 1
5275: ARRAY
5276: PPUSH
5277: CALL_OW 119
// Wait ( 0 0$02 ) ;
5281: LD_INT 70
5283: PPUSH
5284: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5288: LD_EXP 8
5292: PPUSH
5293: LD_STRING D4-Mikh-1
5295: PPUSH
5296: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5300: LD_VAR 0 1
5304: PUSH
5305: LD_INT 1
5307: ARRAY
5308: PPUSH
5309: CALL_OW 258
5313: PUSH
5314: LD_INT 1
5316: EQUAL
5317: IFFALSE 5335
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5319: LD_VAR 0 1
5323: PUSH
5324: LD_INT 1
5326: ARRAY
5327: PPUSH
5328: LD_STRING D4-Sol1-1
5330: PPUSH
5331: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5335: LD_VAR 0 1
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: CALL_OW 258
5348: PUSH
5349: LD_INT 2
5351: EQUAL
5352: IFFALSE 5370
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 1
5361: ARRAY
5362: PPUSH
5363: LD_STRING D4-FSol1-1
5365: PPUSH
5366: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5370: LD_EXP 8
5374: PPUSH
5375: LD_STRING D4-Mikh-2
5377: PPUSH
5378: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5382: LD_VAR 0 1
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PPUSH
5391: CALL_OW 258
5395: PUSH
5396: LD_INT 1
5398: EQUAL
5399: IFFALSE 5417
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5401: LD_VAR 0 1
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_STRING D4-Sol1-2
5412: PPUSH
5413: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5417: LD_VAR 0 1
5421: PUSH
5422: LD_INT 1
5424: ARRAY
5425: PPUSH
5426: CALL_OW 258
5430: PUSH
5431: LD_INT 2
5433: EQUAL
5434: IFFALSE 5452
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5436: LD_VAR 0 1
5440: PUSH
5441: LD_INT 1
5443: ARRAY
5444: PPUSH
5445: LD_STRING D4-FSol1-2
5447: PPUSH
5448: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5452: LD_EXP 8
5456: PPUSH
5457: LD_STRING D4-Mikh-3
5459: PPUSH
5460: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5464: LD_VAR 0 1
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: CALL_OW 258
5477: PUSH
5478: LD_INT 1
5480: EQUAL
5481: IFFALSE 5499
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5483: LD_VAR 0 1
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: LD_STRING D4-Sol1-3
5494: PPUSH
5495: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5499: LD_VAR 0 1
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: CALL_OW 258
5512: PUSH
5513: LD_INT 2
5515: EQUAL
5516: IFFALSE 5534
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5518: LD_VAR 0 1
5522: PUSH
5523: LD_INT 1
5525: ARRAY
5526: PPUSH
5527: LD_STRING D4-FSol1-3
5529: PPUSH
5530: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5534: LD_EXP 8
5538: PPUSH
5539: LD_STRING D4-Mikh-4
5541: PPUSH
5542: CALL_OW 88
// case query ( Qs1 ) of 1 :
5546: LD_STRING Qs1
5548: PPUSH
5549: CALL_OW 97
5553: PUSH
5554: LD_INT 1
5556: DOUBLE
5557: EQUAL
5558: IFTRUE 5562
5560: GO 5597
5562: POP
// begin InGameOff ;
5563: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5567: LD_INT 1
5569: PPUSH
5570: LD_INT 6
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5583: LD_EXP 8
5587: PPUSH
5588: LD_INT 17
5590: PPUSH
5591: CALL_OW 113
// end ; 2 :
5595: GO 6190
5597: LD_INT 2
5599: DOUBLE
5600: EQUAL
5601: IFTRUE 5605
5603: GO 6155
5605: POP
// begin repeat wait ( 0 0$1 ) ;
5606: LD_INT 35
5608: PPUSH
5609: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5613: LD_VAR 0 1
5617: PUSH
5618: LD_INT 1
5620: ARRAY
5621: PPUSH
5622: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5626: LD_VAR 0 1
5630: PUSH
5631: LD_INT 1
5633: ARRAY
5634: PPUSH
5635: LD_EXP 1
5639: PPUSH
5640: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5644: LD_EXP 8
5648: PPUSH
5649: LD_EXP 1
5653: PPUSH
5654: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5658: LD_EXP 1
5662: PPUSH
5663: LD_EXP 8
5667: PPUSH
5668: CALL_OW 296
5672: PUSH
5673: LD_INT 5
5675: LESS
5676: IFFALSE 5606
// ComTurnUnit ( Mikhail , JMM ) ;
5678: LD_EXP 8
5682: PPUSH
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5692: LD_EXP 1
5696: PPUSH
5697: LD_STRING D4b-JMM-1
5699: PPUSH
5700: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5704: LD_EXP 8
5708: PPUSH
5709: LD_STRING D4b-Mikh-1
5711: PPUSH
5712: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5716: LD_EXP 1
5720: PPUSH
5721: LD_STRING D4b-JMM-2
5723: PPUSH
5724: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5728: LD_EXP 8
5732: PPUSH
5733: LD_STRING D4b-Mikh-2
5735: PPUSH
5736: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5740: LD_EXP 1
5744: PPUSH
5745: LD_STRING D4b-JMM-3
5747: PPUSH
5748: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5752: LD_EXP 8
5756: PPUSH
5757: LD_STRING D4b-Mikh-3
5759: PPUSH
5760: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5764: LD_EXP 1
5768: PPUSH
5769: LD_STRING D4b-JMM-4
5771: PPUSH
5772: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5776: LD_EXP 8
5780: PPUSH
5781: LD_STRING D4b-Mikh-4
5783: PPUSH
5784: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5788: LD_EXP 1
5792: PPUSH
5793: LD_STRING D4b-JMM-5
5795: PPUSH
5796: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5800: LD_EXP 8
5804: PPUSH
5805: LD_STRING D4b-Mikh-5
5807: PPUSH
5808: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5812: LD_EXP 1
5816: PPUSH
5817: LD_STRING D4b-JMM-6
5819: PPUSH
5820: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5824: LD_EXP 8
5828: PPUSH
5829: LD_STRING D4b-Mikh-6
5831: PPUSH
5832: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_STRING D4b-JMM-7
5843: PPUSH
5844: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5848: LD_EXP 8
5852: PPUSH
5853: LD_STRING D4b-Mikh-7
5855: PPUSH
5856: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5860: LD_VAR 0 1
5864: PUSH
5865: LD_INT 1
5867: ARRAY
5868: PPUSH
5869: CALL_OW 258
5873: PUSH
5874: LD_INT 1
5876: EQUAL
5877: IFFALSE 5895
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5879: LD_VAR 0 1
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: LD_STRING D4b-Sol1-7
5890: PPUSH
5891: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5895: LD_VAR 0 1
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: PPUSH
5904: CALL_OW 258
5908: PUSH
5909: LD_INT 2
5911: EQUAL
5912: IFFALSE 5930
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5914: LD_VAR 0 1
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: PPUSH
5923: LD_STRING D4b-FSol1-7
5925: PPUSH
5926: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5930: LD_EXP 1
5934: PPUSH
5935: LD_STRING D4b-JMM-8
5937: PPUSH
5938: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5942: LD_VAR 0 1
5946: PUSH
5947: LD_INT 1
5949: ARRAY
5950: PPUSH
5951: CALL_OW 258
5955: PUSH
5956: LD_INT 1
5958: EQUAL
5959: IFFALSE 5977
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5961: LD_VAR 0 1
5965: PUSH
5966: LD_INT 1
5968: ARRAY
5969: PPUSH
5970: LD_STRING D4b-Sol1-8
5972: PPUSH
5973: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5977: LD_VAR 0 1
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: CALL_OW 258
5990: PUSH
5991: LD_INT 2
5993: EQUAL
5994: IFFALSE 6012
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5996: LD_VAR 0 1
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: PPUSH
6005: LD_STRING D4b-FSol1-8
6007: PPUSH
6008: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6012: LD_EXP 1
6016: PPUSH
6017: LD_STRING D4b-JMM-9
6019: PPUSH
6020: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6024: LD_EXP 8
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6036: LD_ADDR_VAR 0 3
6040: PUSH
6041: LD_INT 22
6043: PUSH
6044: LD_INT 1
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: PUSH
6059: FOR_IN
6060: IFFALSE 6073
// ComFree ( i ) ;
6062: LD_VAR 0 3
6066: PPUSH
6067: CALL_OW 139
6071: GO 6059
6073: POP
6074: POP
// repeat wait ( 0 0$1 ) ;
6075: LD_INT 35
6077: PPUSH
6078: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6082: LD_EXP 8
6086: PPUSH
6087: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6091: LD_EXP 8
6095: PUSH
6096: LD_VAR 0 1
6100: PUSH
6101: LD_INT 1
6103: ARRAY
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6116: LD_EXP 8
6120: PPUSH
6121: CALL_OW 310
6125: IFFALSE 6075
// mikhailDepot = IsInUnit ( Mikhail ) ;
6127: LD_ADDR_EXP 23
6131: PUSH
6132: LD_EXP 8
6136: PPUSH
6137: CALL_OW 310
6141: ST_TO_ADDR
// InGameOff ;
6142: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6146: LD_STRING M3
6148: PPUSH
6149: CALL_OW 337
// end ; 3 :
6153: GO 6190
6155: LD_INT 3
6157: DOUBLE
6158: EQUAL
6159: IFTRUE 6163
6161: GO 6189
6163: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6164: LD_EXP 8
6168: PPUSH
6169: LD_INT 17
6171: PPUSH
6172: CALL_OW 113
// wait ( 0 0$3 ) ;
6176: LD_INT 105
6178: PPUSH
6179: CALL_OW 67
// InGameOff ;
6183: CALL_OW 9
// end ; end ;
6187: GO 6190
6189: POP
// PrepareTigers ;
6190: CALL 14407 0 0
// RussianTrap ;
6194: CALL 9953 0 0
// tigersRespawn = 1 ;
6198: LD_ADDR_EXP 30
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// end ;
6206: PPOPN 3
6208: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6209: LD_INT 1
6211: PPUSH
6212: CALL_OW 255
6216: PUSH
6217: LD_INT 1
6219: EQUAL
6220: PUSH
6221: LD_INT 10
6223: PPUSH
6224: CALL_OW 255
6228: PUSH
6229: LD_INT 1
6231: EQUAL
6232: AND
6233: PUSH
6234: LD_INT 1
6236: PPUSH
6237: CALL_OW 274
6241: PPUSH
6242: LD_INT 1
6244: PPUSH
6245: CALL_OW 275
6249: PUSH
6250: LD_INT 100
6252: GREATEREQUAL
6253: AND
6254: IFFALSE 6403
6256: GO 6258
6258: DISABLE
6259: LD_INT 0
6261: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6262: LD_INT 2100
6264: PPUSH
6265: LD_INT 4200
6267: PPUSH
6268: CALL_OW 12
6272: PUSH
6273: LD_INT 1050
6275: PLUS
6276: PPUSH
6277: CALL_OW 67
// PrepareCargoBays ;
6281: CALL 12690 0 0
// cargoRespawn = 1 ;
6285: LD_ADDR_EXP 28
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6293: LD_ADDR_VAR 0 1
6297: PUSH
6298: LD_EXP 15
6302: PUSH
6303: LD_EXP 16
6307: PUSH
6308: LD_EXP 17
6312: PUSH
6313: LD_EXP 18
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6324: LD_VAR 0 1
6328: PPUSH
6329: LD_INT 17
6331: PPUSH
6332: LD_INT 10
6334: PPUSH
6335: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6339: LD_VAR 0 1
6343: PPUSH
6344: LD_INT 36
6346: PPUSH
6347: LD_INT 13
6349: PPUSH
6350: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6354: LD_VAR 0 1
6358: PPUSH
6359: LD_INT 40
6361: PPUSH
6362: LD_INT 20
6364: PPUSH
6365: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: LD_INT 53
6376: PPUSH
6377: LD_INT 16
6379: PPUSH
6380: CALL_OW 171
// wait ( 0 0$5 ) ;
6384: LD_INT 175
6386: PPUSH
6387: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6391: LD_EXP 17
6395: PPUSH
6396: LD_STRING D5-Rus2-1
6398: PPUSH
6399: CALL_OW 88
// end ;
6403: PPOPN 1
6405: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6406: LD_EXP 28
6410: PUSH
6411: LD_INT 1
6413: EQUAL
6414: IFFALSE 6569
6416: GO 6418
6418: DISABLE
6419: LD_INT 0
6421: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_INT 22
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 21
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 34
6449: PUSH
6450: LD_INT 51
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: PPUSH
6462: CALL_OW 69
6466: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6467: LD_INT 105
6469: PPUSH
6470: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 60
6484: PUSH
6485: EMPTY
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 72
6496: PUSH
6497: LD_VAR 0 1
6501: PPUSH
6502: LD_INT 3
6504: PUSH
6505: LD_INT 24
6507: PUSH
6508: LD_INT 980
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 72
6523: OR
6524: IFFALSE 6467
// ComMoveXY ( cargos , 7 , 9 ) ;
6526: LD_VAR 0 1
6530: PPUSH
6531: LD_INT 7
6533: PPUSH
6534: LD_INT 9
6536: PPUSH
6537: CALL_OW 111
// cargoSee = 1 ;
6541: LD_ADDR_EXP 29
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// cargoEscape = 1 ;
6549: LD_ADDR_EXP 20
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6557: LD_EXP 17
6561: PPUSH
6562: LD_STRING D5-Rus2-1a
6564: PPUSH
6565: CALL_OW 88
// end ;
6569: PPOPN 1
6571: END
// every 0 0$1 trigger cargoEscape > 0 do
6572: LD_EXP 20
6576: PUSH
6577: LD_INT 0
6579: GREATER
6580: IFFALSE 6727
6582: GO 6584
6584: DISABLE
// begin enable ;
6585: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6586: LD_EXP 15
6590: PUSH
6591: LD_EXP 16
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PPUSH
6600: LD_INT 13
6602: PPUSH
6603: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6607: LD_EXP 15
6611: PPUSH
6612: LD_INT 13
6614: PPUSH
6615: CALL_OW 308
6619: PUSH
6620: LD_EXP 17
6624: PPUSH
6625: LD_INT 13
6627: PPUSH
6628: CALL_OW 308
6632: OR
6633: IFFALSE 6667
// begin RemoveUnit ( cargo1 ) ;
6635: LD_EXP 15
6639: PPUSH
6640: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6644: LD_EXP 17
6648: PPUSH
6649: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6653: LD_ADDR_EXP 20
6657: PUSH
6658: LD_EXP 20
6662: PUSH
6663: LD_INT 1
6665: PLUS
6666: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6667: LD_EXP 16
6671: PPUSH
6672: LD_INT 13
6674: PPUSH
6675: CALL_OW 308
6679: PUSH
6680: LD_EXP 18
6684: PPUSH
6685: LD_INT 13
6687: PPUSH
6688: CALL_OW 308
6692: OR
6693: IFFALSE 6727
// begin RemoveUnit ( cargo2 ) ;
6695: LD_EXP 16
6699: PPUSH
6700: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6704: LD_EXP 18
6708: PPUSH
6709: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6713: LD_ADDR_EXP 20
6717: PUSH
6718: LD_EXP 20
6722: PUSH
6723: LD_INT 1
6725: PLUS
6726: ST_TO_ADDR
// end ; end ;
6727: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6728: LD_EXP 20
6732: PUSH
6733: LD_INT 1
6735: GREATER
6736: IFFALSE 6893
6738: GO 6740
6740: DISABLE
6741: LD_INT 0
6743: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6744: LD_INT 4
6746: PPUSH
6747: LD_INT 1
6749: PPUSH
6750: LD_INT 1
6752: PPUSH
6753: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6757: LD_INT 31
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: CALL_OW 324
// if IsOK ( Jerry ) then
6770: LD_EXP 7
6774: PPUSH
6775: CALL_OW 302
6779: IFFALSE 6795
// Say ( Jerry , D5a-Sol1-1 ) else
6781: LD_EXP 7
6785: PPUSH
6786: LD_STRING D5a-Sol1-1
6788: PPUSH
6789: CALL_OW 88
6793: GO 6881
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6795: LD_ADDR_VAR 0 1
6799: PUSH
6800: LD_INT 22
6802: PUSH
6803: LD_INT 1
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 26
6812: PUSH
6813: LD_INT 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 69
6828: PUSH
6829: LD_EXP 1
6833: PUSH
6834: LD_EXP 2
6838: PUSH
6839: LD_EXP 3
6843: PUSH
6844: LD_EXP 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: DIFF
6855: ST_TO_ADDR
// if not speaker then
6856: LD_VAR 0 1
6860: NOT
6861: IFFALSE 6865
// exit ;
6863: GO 6893
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6865: LD_VAR 0 1
6869: PUSH
6870: LD_INT 1
6872: ARRAY
6873: PPUSH
6874: LD_STRING D5a-Sol1-1
6876: PPUSH
6877: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6881: LD_EXP 1
6885: PPUSH
6886: LD_STRING D5a-JMM-1
6888: PPUSH
6889: CALL_OW 88
// end ;
6893: PPOPN 1
6895: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 255
6903: PUSH
6904: LD_INT 3
6906: EQUAL
6907: PUSH
6908: LD_INT 1
6910: PPUSH
6911: CALL_OW 256
6915: PUSH
6916: LD_INT 1000
6918: LESS
6919: AND
6920: PUSH
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 255
6928: PUSH
6929: LD_INT 3
6931: EQUAL
6932: PUSH
6933: LD_INT 10
6935: PPUSH
6936: CALL_OW 256
6940: PUSH
6941: LD_INT 1000
6943: LESS
6944: AND
6945: OR
6946: IFFALSE 6963
6948: GO 6950
6950: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6951: LD_EXP 1
6955: PPUSH
6956: LD_STRING D8-JMM-1
6958: PPUSH
6959: CALL_OW 88
// end ;
6963: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6964: LD_EXP 8
6968: PPUSH
6969: CALL_OW 310
6973: PUSH
6974: LD_INT 1
6976: EQUAL
6977: PUSH
6978: LD_EXP 22
6982: PUSH
6983: LD_INT 3
6985: EQUAL
6986: NOT
6987: AND
6988: IFFALSE 7010
6990: GO 6992
6992: DISABLE
// begin mikhailInBase = 1 ;
6993: LD_ADDR_EXP 22
6997: PUSH
6998: LD_INT 1
7000: ST_TO_ADDR
// mikhailStatus = 1 ;
7001: LD_ADDR_EXP 21
7005: PUSH
7006: LD_INT 1
7008: ST_TO_ADDR
// enable ;
7009: ENABLE
// end ;
7010: END
// export function AskMikhail ; begin
7011: LD_INT 0
7013: PPUSH
// case query ( QMikh2 ) of 1 :
7014: LD_STRING QMikh2
7016: PPUSH
7017: CALL_OW 97
7021: PUSH
7022: LD_INT 1
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7097
7030: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7031: LD_INT 1
7033: PPUSH
7034: LD_INT 6
7036: PPUSH
7037: LD_INT 2
7039: PPUSH
7040: LD_INT 1
7042: PPUSH
7043: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7047: LD_EXP 8
7051: PPUSH
7052: LD_INT 6
7054: PPUSH
7055: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7059: LD_EXP 8
7063: PPUSH
7064: CALL_OW 122
// wait ( 0 0$1 ) ;
7068: LD_INT 35
7070: PPUSH
7071: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7075: LD_EXP 8
7079: PPUSH
7080: LD_INT 17
7082: PPUSH
7083: CALL_OW 113
// mikhailInbase = 0 ;
7087: LD_ADDR_EXP 22
7091: PUSH
7092: LD_INT 0
7094: ST_TO_ADDR
// end ; 2 :
7095: GO 7338
7097: LD_INT 2
7099: DOUBLE
7100: EQUAL
7101: IFTRUE 7105
7103: GO 7278
7105: POP
// begin mikhailInBase = 2 ;
7106: LD_ADDR_EXP 22
7110: PUSH
7111: LD_INT 2
7113: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7114: LD_EXP 8
7118: PPUSH
7119: LD_INT 6
7121: PPUSH
7122: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7126: LD_EXP 8
7130: PPUSH
7131: CALL_OW 122
// wait ( 0 0$1 ) ;
7135: LD_INT 35
7137: PPUSH
7138: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7142: LD_EXP 8
7146: PPUSH
7147: LD_EXP 8
7151: PPUSH
7152: CALL_OW 250
7156: PUSH
7157: LD_INT 2
7159: PLUS
7160: PPUSH
7161: LD_EXP 8
7165: PPUSH
7166: CALL_OW 251
7170: PUSH
7171: LD_INT 2
7173: PLUS
7174: PPUSH
7175: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7179: LD_EXP 8
7183: PPUSH
7184: LD_EXP 8
7188: PPUSH
7189: CALL_OW 250
7193: PUSH
7194: LD_INT 1
7196: PLUS
7197: PPUSH
7198: LD_EXP 8
7202: PPUSH
7203: CALL_OW 251
7207: PUSH
7208: LD_INT 2
7210: PLUS
7211: PPUSH
7212: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_EXP 8
7225: PPUSH
7226: CALL_OW 250
7230: PUSH
7231: LD_INT 2
7233: PLUS
7234: PPUSH
7235: LD_EXP 8
7239: PPUSH
7240: CALL_OW 251
7244: PPUSH
7245: CALL_OW 171
// wait ( 0 0$5 ) ;
7249: LD_INT 175
7251: PPUSH
7252: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7256: LD_EXP 8
7260: PPUSH
7261: LD_INT 25
7263: PPUSH
7264: CALL_OW 113
// mikhailInBase = 4 ;
7268: LD_ADDR_EXP 22
7272: PUSH
7273: LD_INT 4
7275: ST_TO_ADDR
// end ; 3 :
7276: GO 7338
7278: LD_INT 3
7280: DOUBLE
7281: EQUAL
7282: IFTRUE 7286
7284: GO 7337
7286: POP
// begin SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 3 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 3
7334: ST_TO_ADDR
// end ; end ;
7335: GO 7338
7337: POP
// end ;
7338: LD_VAR 0 1
7342: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7343: LD_EXP 8
7347: PPUSH
7348: LD_INT 25
7350: PPUSH
7351: CALL_OW 308
7355: PUSH
7356: LD_EXP 22
7360: PUSH
7361: LD_INT 4
7363: EQUAL
7364: AND
7365: IFFALSE 7469
7367: GO 7369
7369: DISABLE
// begin enable ;
7370: ENABLE
// mikhailInBase = 1 ;
7371: LD_ADDR_EXP 22
7375: PUSH
7376: LD_INT 1
7378: ST_TO_ADDR
// InGameOn ;
7379: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7383: LD_INT 1
7385: PPUSH
7386: LD_INT 6
7388: PPUSH
7389: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7393: LD_INT 35
7395: PPUSH
7396: CALL_OW 67
// if Carry ( Mikhail ) then
7400: LD_EXP 8
7404: PPUSH
7405: CALL_OW 281
7409: IFFALSE 7420
// ComUnload ( Mikhail ) ;
7411: LD_EXP 8
7415: PPUSH
7416: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7420: LD_EXP 8
7424: PPUSH
7425: LD_INT 1
7427: PPUSH
7428: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7432: LD_EXP 8
7436: PPUSH
7437: CALL_OW 310
7441: IFFALSE 7393
// SetSide ( dep1 , 1 ) ;
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 235
// InGameOff ;
7465: CALL_OW 9
// end ;
7469: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7470: LD_EXP 8
7474: PPUSH
7475: CALL_OW 310
7479: PUSH
7480: LD_EXP 22
7484: PUSH
7485: LD_INT 3
7487: EQUAL
7488: NOT
7489: AND
7490: IFFALSE 7625
7492: GO 7494
7494: DISABLE
// begin enable ;
7495: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7496: LD_INT 22
7498: PUSH
7499: LD_INT 1
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 21
7508: PUSH
7509: LD_INT 1
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 91
7518: PUSH
7519: LD_EXP 8
7523: PPUSH
7524: CALL_OW 310
7528: PUSH
7529: LD_INT 10
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: PPUSH
7542: CALL_OW 69
7546: PUSH
7547: LD_INT 1
7549: EQUAL
7550: IFFALSE 7625
// begin mikhailStatus = 4 ;
7552: LD_ADDR_EXP 21
7556: PUSH
7557: LD_INT 4
7559: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7560: LD_INT 1
7562: PPUSH
7563: LD_INT 6
7565: PPUSH
7566: LD_INT 2
7568: PPUSH
7569: LD_INT 1
7571: PPUSH
7572: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7576: LD_EXP 8
7580: PPUSH
7581: LD_INT 6
7583: PPUSH
7584: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7588: LD_EXP 8
7592: PPUSH
7593: CALL_OW 122
// wait ( 0 0$1 ) ;
7597: LD_INT 35
7599: PPUSH
7600: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7604: LD_EXP 8
7608: PPUSH
7609: LD_INT 17
7611: PPUSH
7612: CALL_OW 113
// mikhailStatus = 3 ;
7616: LD_ADDR_EXP 21
7620: PUSH
7621: LD_INT 3
7623: ST_TO_ADDR
// disable ;
7624: DISABLE
// end ; end ;
7625: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7626: LD_EXP 1
7630: PPUSH
7631: LD_EXP 23
7635: PPUSH
7636: CALL_OW 296
7640: PUSH
7641: LD_INT 5
7643: LESS
7644: PUSH
7645: LD_EXP 21
7649: PUSH
7650: LD_INT 3
7652: EQUAL
7653: AND
7654: PUSH
7655: LD_EXP 22
7659: PUSH
7660: LD_INT 3
7662: EQUAL
7663: NOT
7664: AND
7665: IFFALSE 7887
7667: GO 7669
7669: DISABLE
7670: LD_INT 0
7672: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7673: LD_ADDR_VAR 0 1
7677: PUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 21
7690: PUSH
7691: LD_INT 1
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 26
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: PUSH
7718: LD_EXP 1
7722: PUSH
7723: LD_EXP 5
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: DIFF
7732: ST_TO_ADDR
// DialogueOn ;
7733: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7737: LD_EXP 1
7741: PPUSH
7742: LD_STRING D7-JMM-1
7744: PPUSH
7745: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7749: LD_VAR 0 1
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: PPUSH
7758: LD_STRING D7-Sol1-1
7760: PPUSH
7761: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7765: LD_EXP 1
7769: PPUSH
7770: LD_STRING D7-JMM-2
7772: PPUSH
7773: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7777: LD_VAR 0 1
7781: PUSH
7782: LD_INT 1
7784: ARRAY
7785: PPUSH
7786: LD_STRING D7-Sol1-2
7788: PPUSH
7789: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7793: LD_EXP 1
7797: PPUSH
7798: LD_STRING D7-JMM-3
7800: PPUSH
7801: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7805: LD_VAR 0 1
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_STRING D7-Sol1-3
7816: PPUSH
7817: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7821: LD_EXP 3
7825: PPUSH
7826: CALL_OW 302
7830: PUSH
7831: LD_EXP 4
7835: PPUSH
7836: CALL_OW 302
7840: AND
7841: IFFALSE 7883
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7843: LD_EXP 3
7847: PPUSH
7848: LD_STRING D7-Cyrus-3
7850: PPUSH
7851: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7855: LD_VAR 0 1
7859: PUSH
7860: LD_INT 1
7862: ARRAY
7863: PPUSH
7864: LD_STRING D7-Sol1-4
7866: PPUSH
7867: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7871: LD_EXP 4
7875: PPUSH
7876: LD_STRING D7-Lisa-4
7878: PPUSH
7879: CALL_OW 88
// end ; DialogueOff ;
7883: CALL_OW 7
// end ;
7887: PPOPN 1
7889: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7890: LD_EXP 8
7894: PPUSH
7895: CALL_OW 303
7899: PUSH
7900: LD_EXP 21
7904: PUSH
7905: LD_INT 3
7907: EQUAL
7908: AND
7909: IFFALSE 7923
7911: GO 7913
7913: DISABLE
// begin enable ;
7914: ENABLE
// mikhailStatus = 2 ;
7915: LD_ADDR_EXP 21
7919: PUSH
7920: LD_INT 2
7922: ST_TO_ADDR
// end ;
7923: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7924: LD_EXP 8
7928: PPUSH
7929: LD_INT 17
7931: PPUSH
7932: CALL_OW 308
7936: PUSH
7937: LD_EXP 8
7941: PPUSH
7942: CALL_OW 255
7946: PUSH
7947: LD_INT 6
7949: EQUAL
7950: AND
7951: IFFALSE 7984
7953: GO 7955
7955: DISABLE
// begin if not mikhailInBase = 3 then
7956: LD_EXP 22
7960: PUSH
7961: LD_INT 3
7963: EQUAL
7964: NOT
7965: IFFALSE 7975
// mikhailStatus = 3 ;
7967: LD_ADDR_EXP 21
7971: PUSH
7972: LD_INT 3
7974: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7975: LD_EXP 8
7979: PPUSH
7980: CALL_OW 64
// end ;
7984: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7985: LD_EXP 21
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 255
8003: PUSH
8004: LD_INT 6
8006: EQUAL
8007: AND
8008: IFFALSE 8174
8010: GO 8012
8012: DISABLE
8013: LD_INT 0
8015: PPUSH
8016: PPUSH
// begin enable ;
8017: ENABLE
// if IsOk ( Mikhail ) then
8018: LD_EXP 8
8022: PPUSH
8023: CALL_OW 302
8027: IFFALSE 8174
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8029: LD_ADDR_VAR 0 2
8033: PUSH
8034: LD_EXP 8
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 1
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 21
8051: PUSH
8052: LD_INT 1
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PPUSH
8063: CALL_OW 69
8067: PPUSH
8068: CALL 10145 0 2
8072: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_EXP 8
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: LESS
8091: IFFALSE 8174
// begin if GetSex ( attacker ) = sex_male then
8093: LD_VAR 0 2
8097: PPUSH
8098: CALL_OW 258
8102: PUSH
8103: LD_INT 1
8105: EQUAL
8106: IFFALSE 8142
// begin disable ;
8108: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_STRING D7a-Sol1-1
8116: PPUSH
8117: CALL_OW 88
// wait ( 0 0$2 ) ;
8121: LD_INT 70
8123: PPUSH
8124: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8128: LD_VAR 0 2
8132: PPUSH
8133: LD_STRING D7a-Sol1-1a
8135: PPUSH
8136: CALL_OW 88
// end else
8140: GO 8174
// begin disable ;
8142: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8143: LD_VAR 0 2
8147: PPUSH
8148: LD_STRING D7a-FSol1-1
8150: PPUSH
8151: CALL_OW 88
// wait ( 0 0$2 ) ;
8155: LD_INT 70
8157: PPUSH
8158: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8162: LD_VAR 0 2
8166: PPUSH
8167: LD_STRING D7a-FSol1-1a
8169: PPUSH
8170: CALL_OW 88
// end ; end ; end ; end ;
8174: PPOPN 2
8176: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8177: LD_EXP 27
8181: PUSH
8182: LD_INT 1
8184: EQUAL
8185: PUSH
8186: LD_INT 22
8188: PPUSH
8189: LD_INT 22
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 21
8201: PUSH
8202: LD_INT 1
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 70
8217: PUSH
8218: LD_INT 2
8220: GREATER
8221: AND
8222: PUSH
8223: LD_INT 22
8225: PPUSH
8226: LD_INT 22
8228: PUSH
8229: LD_INT 1
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 1
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 59
8251: PUSH
8252: EMPTY
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PPUSH
8264: CALL_OW 70
8268: PUSH
8269: LD_INT 0
8271: EQUAL
8272: AND
8273: IFFALSE 8288
8275: GO 8277
8277: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8278: LD_INT 1
8280: PPUSH
8281: LD_INT 3
8283: PPUSH
8284: CALL_OW 235
// end ;
8288: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8289: LD_EXP 30
8293: PUSH
8294: LD_INT 1
8296: EQUAL
8297: PUSH
8298: LD_INT 22
8300: PUSH
8301: LD_INT 0
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: LD_INT 25
8310: PUSH
8311: LD_INT 14
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 69
8326: PUSH
8327: LD_INT 0
8329: EQUAL
8330: AND
8331: IFFALSE 8432
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
8339: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8340: LD_ADDR_VAR 0 2
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 23
8367: PUSH
8368: LD_INT 1
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 69
8384: ST_TO_ADDR
// for i in tmp do
8385: LD_ADDR_VAR 0 1
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: FOR_IN
8396: IFFALSE 8423
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8398: LD_VAR 0 1
8402: PPUSH
8403: LD_INT 1
8405: PPUSH
8406: LD_INT 4
8408: PPUSH
8409: CALL_OW 12
8413: PPUSH
8414: LD_INT 300
8416: PPUSH
8417: CALL_OW 492
8421: GO 8395
8423: POP
8424: POP
// SetAchievement ( ACH_TIGER ) ;
8425: LD_STRING ACH_TIGER
8427: PPUSH
8428: CALL_OW 543
// end ;
8432: PPOPN 2
8434: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8435: LD_INT 22
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 34
8447: PUSH
8448: LD_INT 51
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: PUSH
8464: LD_INT 2
8466: GREATEREQUAL
8467: IFFALSE 8479
8469: GO 8471
8471: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8472: LD_STRING ACH_CARGO
8474: PPUSH
8475: CALL_OW 543
8479: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8480: LD_INT 0
8482: PPUSH
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to count do
8486: LD_ADDR_VAR 0 8
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 6
8500: PUSH
8501: FOR_TO
8502: IFFALSE 8583
// begin uc_side = side ;
8504: LD_ADDR_OWVAR 20
8508: PUSH
8509: LD_VAR 0 1
8513: ST_TO_ADDR
// uc_nation = nation ;
8514: LD_ADDR_OWVAR 21
8518: PUSH
8519: LD_VAR 0 2
8523: ST_TO_ADDR
// hc_gallery =  ;
8524: LD_ADDR_OWVAR 33
8528: PUSH
8529: LD_STRING 
8531: ST_TO_ADDR
// hc_name =  ;
8532: LD_ADDR_OWVAR 26
8536: PUSH
8537: LD_STRING 
8539: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8540: LD_INT 0
8542: PPUSH
8543: LD_VAR 0 5
8547: PPUSH
8548: LD_VAR 0 4
8552: PPUSH
8553: CALL_OW 380
// un = CreateHuman ;
8557: LD_ADDR_VAR 0 10
8561: PUSH
8562: CALL_OW 44
8566: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8567: LD_VAR 0 10
8571: PPUSH
8572: LD_VAR 0 3
8576: PPUSH
8577: CALL_OW 52
// end ;
8581: GO 8501
8583: POP
8584: POP
// end ;
8585: LD_VAR 0 7
8589: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8590: LD_INT 0
8592: PPUSH
8593: PPUSH
8594: PPUSH
// uc_side := GetSide ( b ) ;
8595: LD_ADDR_OWVAR 20
8599: PUSH
8600: LD_VAR 0 2
8604: PPUSH
8605: CALL_OW 255
8609: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8610: LD_ADDR_OWVAR 21
8614: PUSH
8615: LD_VAR 0 2
8619: PPUSH
8620: CALL_OW 248
8624: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8625: LD_INT 0
8627: PPUSH
8628: LD_INT 1
8630: PPUSH
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 380
// un = CreateHuman ;
8640: LD_ADDR_VAR 0 4
8644: PUSH
8645: CALL_OW 44
8649: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8650: LD_ADDR_VAR 0 5
8654: PUSH
8655: LD_VAR 0 2
8659: PPUSH
8660: CALL_OW 254
8664: PUSH
8665: LD_INT 3
8667: MINUS
8668: ST_TO_ADDR
// if dir < 0 then
8669: LD_VAR 0 5
8673: PUSH
8674: LD_INT 0
8676: LESS
8677: IFFALSE 8693
// dir := 6 + dir ;
8679: LD_ADDR_VAR 0 5
8683: PUSH
8684: LD_INT 6
8686: PUSH
8687: LD_VAR 0 5
8691: PLUS
8692: ST_TO_ADDR
// SetDir ( un , dir ) ;
8693: LD_VAR 0 4
8697: PPUSH
8698: LD_VAR 0 5
8702: PPUSH
8703: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8707: LD_VAR 0 4
8711: PPUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: CALL_OW 52
// end ;
8721: LD_VAR 0 3
8725: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8726: LD_INT 0
8728: PPUSH
8729: PPUSH
8730: PPUSH
8731: PPUSH
8732: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8733: LD_ADDR_VAR 0 7
8737: PUSH
8738: LD_INT 22
8740: PUSH
8741: LD_VAR 0 1
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 25
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 24
8762: PUSH
8763: LD_INT 1000
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 69
8779: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8780: LD_ADDR_VAR 0 5
8784: PUSH
8785: LD_VAR 0 3
8789: PPUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 3
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: LD_INT 24
8817: PUSH
8818: LD_INT 1000
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: PPUSH
8837: CALL_OW 70
8841: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8842: LD_VAR 0 5
8846: PUSH
8847: LD_INT 0
8849: GREATER
8850: PUSH
8851: LD_VAR 0 7
8855: PUSH
8856: LD_INT 0
8858: GREATER
8859: AND
8860: IFFALSE 8926
// begin for i in engineerOk_list do
8862: LD_ADDR_VAR 0 6
8866: PUSH
8867: LD_VAR 0 7
8871: PUSH
8872: FOR_IN
8873: IFFALSE 8924
// begin for j in buildings_list do
8875: LD_ADDR_VAR 0 8
8879: PUSH
8880: LD_VAR 0 5
8884: PUSH
8885: FOR_IN
8886: IFFALSE 8920
// begin AddComExitBuilding ( i ) ;
8888: LD_VAR 0 6
8892: PPUSH
8893: CALL_OW 182
// wait ( 0 0$1 ) ;
8897: LD_INT 35
8899: PPUSH
8900: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8904: LD_VAR 0 6
8908: PPUSH
8909: LD_VAR 0 8
8913: PPUSH
8914: CALL_OW 190
// end ;
8918: GO 8885
8920: POP
8921: POP
// end ;
8922: GO 8872
8924: POP
8925: POP
// end ; if buildings_list = 0 then
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 0
8933: EQUAL
8934: IFFALSE 8967
// begin for i in engineerOK_list do
8936: LD_ADDR_VAR 0 6
8940: PUSH
8941: LD_VAR 0 7
8945: PUSH
8946: FOR_IN
8947: IFFALSE 8965
// begin ComEnterUnit ( i , building ) ;
8949: LD_VAR 0 6
8953: PPUSH
8954: LD_VAR 0 2
8958: PPUSH
8959: CALL_OW 120
// end ;
8963: GO 8946
8965: POP
8966: POP
// end ; end ;
8967: LD_VAR 0 4
8971: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8972: LD_INT 0
8974: PPUSH
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8979: LD_ADDR_VAR 0 6
8983: PUSH
8984: LD_INT 22
8986: PUSH
8987: LD_VAR 0 1
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 4
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 24
9008: PUSH
9009: LD_INT 250
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 69
9025: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9026: LD_ADDR_VAR 0 9
9030: PUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: LD_INT 22
9038: PUSH
9039: LD_VAR 0 1
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 21
9050: PUSH
9051: LD_INT 1
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 24
9063: PUSH
9064: LD_INT 650
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: PPUSH
9080: CALL_OW 70
9084: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9085: LD_VAR 0 9
9089: PUSH
9090: LD_INT 0
9092: GREATER
9093: PUSH
9094: LD_VAR 0 6
9098: PUSH
9099: LD_INT 0
9101: GREATER
9102: AND
9103: IFFALSE 9230
// begin for i = 1 to damageUnits do
9105: LD_ADDR_VAR 0 7
9109: PUSH
9110: DOUBLE
9111: LD_INT 1
9113: DEC
9114: ST_TO_ADDR
9115: LD_VAR 0 9
9119: PUSH
9120: FOR_TO
9121: IFFALSE 9145
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9123: LD_VAR 0 9
9127: PUSH
9128: LD_VAR 0 7
9132: ARRAY
9133: PPUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: CALL_OW 113
9143: GO 9120
9145: POP
9146: POP
// for i in sci_list do
9147: LD_ADDR_VAR 0 7
9151: PUSH
9152: LD_VAR 0 6
9156: PUSH
9157: FOR_IN
9158: IFFALSE 9226
// begin ComExitBuilding ( i ) ;
9160: LD_VAR 0 7
9164: PPUSH
9165: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9169: LD_ADDR_VAR 0 8
9173: PUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_VAR 0 1
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 70
9195: PUSH
9196: FOR_IN
9197: IFFALSE 9222
// begin AddComHeal ( i , j ) ;
9199: LD_VAR 0 7
9203: PPUSH
9204: LD_VAR 0 8
9208: PPUSH
9209: CALL_OW 188
// wait ( 1 1$0 ) ;
9213: LD_INT 2100
9215: PPUSH
9216: CALL_OW 67
// end ;
9220: GO 9196
9222: POP
9223: POP
// end ;
9224: GO 9157
9226: POP
9227: POP
// end else
9228: GO 9244
// begin AddComEnterUnit ( sci_list , build ) ;
9230: LD_VAR 0 6
9234: PPUSH
9235: LD_VAR 0 4
9239: PPUSH
9240: CALL_OW 180
// end ; end ;
9244: LD_VAR 0 5
9248: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9249: LD_INT 0
9251: PPUSH
9252: PPUSH
9253: PPUSH
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9259: LD_ADDR_VAR 0 7
9263: PUSH
9264: LD_VAR 0 3
9268: PPUSH
9269: LD_INT 22
9271: PUSH
9272: LD_VAR 0 1
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: LD_INT 21
9283: PUSH
9284: LD_INT 2
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 24
9293: PUSH
9294: LD_INT 550
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 34
9303: PUSH
9304: LD_INT 46
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PPUSH
9317: CALL_OW 70
9321: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9322: LD_ADDR_VAR 0 8
9326: PUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 22
9334: PUSH
9335: LD_VAR 0 1
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 21
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 34
9356: PUSH
9357: LD_INT 46
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 3
9366: PUSH
9367: LD_INT 24
9369: PUSH
9370: LD_INT 550
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PPUSH
9387: CALL_OW 70
9391: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9392: LD_ADDR_VAR 0 9
9396: PUSH
9397: LD_VAR 0 2
9401: PPUSH
9402: LD_INT 22
9404: PUSH
9405: LD_VAR 0 1
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 21
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 34
9426: PUSH
9427: LD_INT 46
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 24
9436: PUSH
9437: LD_INT 1000
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 58
9446: PUSH
9447: EMPTY
9448: LIST
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: ST_TO_ADDR
// for i in damageVehicle_list do
9462: LD_ADDR_VAR 0 5
9466: PUSH
9467: LD_VAR 0 8
9471: PUSH
9472: FOR_IN
9473: IFFALSE 9492
// mechanicInside_list = UnitsInside ( i ) ;
9475: LD_ADDR_VAR 0 10
9479: PUSH
9480: LD_VAR 0 5
9484: PPUSH
9485: CALL_OW 313
9489: ST_TO_ADDR
9490: GO 9472
9492: POP
9493: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9494: LD_ADDR_VAR 0 11
9498: PUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: LD_INT 22
9506: PUSH
9507: LD_VAR 0 1
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 25
9518: PUSH
9519: LD_INT 3
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 70
9534: ST_TO_ADDR
// if damageVehicle_list > 0 then
9535: LD_VAR 0 8
9539: PUSH
9540: LD_INT 0
9542: GREATER
9543: IFFALSE 9616
// begin for i in damageVehicle_list do
9545: LD_ADDR_VAR 0 5
9549: PUSH
9550: LD_VAR 0 8
9554: PUSH
9555: FOR_IN
9556: IFFALSE 9614
// begin for j in mechanicInside_list do
9558: LD_ADDR_VAR 0 6
9562: PUSH
9563: LD_VAR 0 10
9567: PUSH
9568: FOR_IN
9569: IFFALSE 9610
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_VAR 0 2
9580: PPUSH
9581: CALL_OW 113
// AddComExitVehicle ( j ) ;
9585: LD_VAR 0 6
9589: PPUSH
9590: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9594: LD_VAR 0 6
9598: PPUSH
9599: LD_VAR 0 5
9603: PPUSH
9604: CALL_OW 189
// end ;
9608: GO 9568
9610: POP
9611: POP
// end ;
9612: GO 9555
9614: POP
9615: POP
// end ; if emptyVehicle_list > 0 then
9616: LD_VAR 0 9
9620: PUSH
9621: LD_INT 0
9623: GREATER
9624: IFFALSE 9674
// begin for i in emptyVehicle_list do
9626: LD_ADDR_VAR 0 5
9630: PUSH
9631: LD_VAR 0 9
9635: PUSH
9636: FOR_IN
9637: IFFALSE 9672
// begin for j in mechanicOutside_list do
9639: LD_ADDR_VAR 0 6
9643: PUSH
9644: LD_VAR 0 11
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9668
// begin AddComEnterUnit ( j , i ) ;
9652: LD_VAR 0 6
9656: PPUSH
9657: LD_VAR 0 5
9661: PPUSH
9662: CALL_OW 180
// end ;
9666: GO 9649
9668: POP
9669: POP
// end ;
9670: GO 9636
9672: POP
9673: POP
// end ; if VehicleOK_list > 0 then
9674: LD_VAR 0 7
9678: PUSH
9679: LD_INT 0
9681: GREATER
9682: IFFALSE 9716
// begin for i in VehicleOK_list do
9684: LD_ADDR_VAR 0 5
9688: PUSH
9689: LD_VAR 0 7
9693: PUSH
9694: FOR_IN
9695: IFFALSE 9714
// ComAgressiveMove ( i , 110 , 29 ) ;
9697: LD_VAR 0 5
9701: PPUSH
9702: LD_INT 110
9704: PPUSH
9705: LD_INT 29
9707: PPUSH
9708: CALL_OW 114
9712: GO 9694
9714: POP
9715: POP
// end ; end ;
9716: LD_VAR 0 4
9720: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9721: LD_INT 0
9723: PPUSH
9724: PPUSH
9725: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 22
9733: PUSH
9734: LD_VAR 0 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 70
9779: PUSH
9780: LD_VAR 0 5
9784: GREATER
9785: IFFALSE 9917
// begin for i in defendersList do
9787: LD_ADDR_VAR 0 7
9791: PUSH
9792: LD_VAR 0 3
9796: PUSH
9797: FOR_IN
9798: IFFALSE 9913
// begin AddComExitBuilding ( i ) ;
9800: LD_VAR 0 7
9804: PPUSH
9805: CALL_OW 182
// wait ( 0 0$1 ) ;
9809: LD_INT 35
9811: PPUSH
9812: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 1
9825: PPUSH
9826: LD_INT 22
9828: PUSH
9829: LD_VAR 0 2
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: LD_INT 21
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PPUSH
9870: CALL_OW 70
9874: PUSH
9875: FOR_IN
9876: IFFALSE 9909
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9878: LD_VAR 0 7
9882: PPUSH
9883: LD_VAR 0 8
9887: PPUSH
9888: CALL_OW 250
9892: PPUSH
9893: LD_VAR 0 8
9897: PPUSH
9898: CALL_OW 251
9902: PPUSH
9903: CALL_OW 174
9907: GO 9875
9909: POP
9910: POP
// end ;
9911: GO 9797
9913: POP
9914: POP
// end else
9915: GO 9948
// begin for i in defendersList do
9917: LD_ADDR_VAR 0 7
9921: PUSH
9922: LD_VAR 0 3
9926: PUSH
9927: FOR_IN
9928: IFFALSE 9946
// ComEnterUnit ( i , build ) ;
9930: LD_VAR 0 7
9934: PPUSH
9935: LD_VAR 0 4
9939: PPUSH
9940: CALL_OW 120
9944: GO 9927
9946: POP
9947: POP
// end ; end ;
9948: LD_VAR 0 6
9952: RET
// export function RussianTrap ; var i ; begin
9953: LD_INT 0
9955: PPUSH
9956: PPUSH
// if GetSide ( Brian ) = 4 then
9957: LD_EXP 6
9961: PPUSH
9962: CALL_OW 255
9966: PUSH
9967: LD_INT 4
9969: EQUAL
9970: IFFALSE 9993
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9972: LD_EXP 6
9976: PUSH
9977: LD_EXP 7
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: LD_INT 0
9988: PPUSH
9989: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: LD_INT 21
10010: PUSH
10011: LD_INT 1
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 69
10026: PUSH
10027: FOR_IN
10028: IFFALSE 10138
// begin ComExitBuilding ( i ) ;
10030: LD_VAR 0 2
10034: PPUSH
10035: CALL_OW 122
// wait ( 0 0$1 ) ;
10039: LD_INT 35
10041: PPUSH
10042: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10046: LD_VAR 0 2
10050: PPUSH
10051: LD_INT 120
10053: PPUSH
10054: LD_INT 56
10056: PPUSH
10057: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10061: LD_VAR 0 2
10065: PPUSH
10066: LD_INT 111
10068: PPUSH
10069: LD_INT 37
10071: PPUSH
10072: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10076: LD_INT 33
10078: PPUSH
10079: CALL_OW 255
10083: PUSH
10084: LD_INT 3
10086: EQUAL
10087: PUSH
10088: LD_INT 33
10090: PPUSH
10091: CALL_OW 302
10095: AND
10096: IFFALSE 10112
// begin AddComEnterUnit ( i , arm2 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 180
// end else
10110: GO 10136
// begin AddComCrawl ( i ) ;
10112: LD_VAR 0 2
10116: PPUSH
10117: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10121: LD_VAR 0 2
10125: PPUSH
10126: LD_INT 109
10128: PPUSH
10129: LD_INT 30
10131: PPUSH
10132: CALL_OW 174
// end ; end ;
10136: GO 10027
10138: POP
10139: POP
// end ;
10140: LD_VAR 0 1
10144: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10145: LD_INT 0
10147: PPUSH
10148: PPUSH
10149: PPUSH
10150: PPUSH
10151: PPUSH
// nearest_dist = 1000 ;
10152: LD_ADDR_VAR 0 4
10156: PUSH
10157: LD_INT 1000
10159: ST_TO_ADDR
// nearest_un = un ;
10160: LD_ADDR_VAR 0 5
10164: PUSH
10165: LD_VAR 0 1
10169: ST_TO_ADDR
// for sold in units do
10170: LD_ADDR_VAR 0 6
10174: PUSH
10175: LD_VAR 0 2
10179: PUSH
10180: FOR_IN
10181: IFFALSE 10237
// begin dist = GetDistUnits ( un , sold ) ;
10183: LD_ADDR_VAR 0 7
10187: PUSH
10188: LD_VAR 0 1
10192: PPUSH
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 296
10202: ST_TO_ADDR
// if dist < nearest_dist then
10203: LD_VAR 0 7
10207: PUSH
10208: LD_VAR 0 4
10212: LESS
10213: IFFALSE 10235
// begin nearest_un = sold ;
10215: LD_ADDR_VAR 0 5
10219: PUSH
10220: LD_VAR 0 6
10224: ST_TO_ADDR
// nearest_dist = dist ;
10225: LD_ADDR_VAR 0 4
10229: PUSH
10230: LD_VAR 0 7
10234: ST_TO_ADDR
// end ; end ;
10235: GO 10180
10237: POP
10238: POP
// result := nearest_un ;
10239: LD_ADDR_VAR 0 3
10243: PUSH
10244: LD_VAR 0 5
10248: ST_TO_ADDR
// end ;
10249: LD_VAR 0 3
10253: RET
// export function PrepareDifficulty ; begin
10254: LD_INT 0
10256: PPUSH
// if Difficulty = 1 then
10257: LD_OWVAR 67
10261: PUSH
10262: LD_INT 1
10264: EQUAL
10265: IFFALSE 10328
// begin RemoveUnit ( brw2 ) ;
10267: LD_INT 9
10269: PPUSH
10270: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10274: LD_INT 30
10276: PPUSH
10277: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10281: LD_INT 52
10283: PPUSH
10284: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10288: LD_INT 63
10290: PPUSH
10291: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10295: LD_INT 5
10297: PUSH
10298: LD_INT 4
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PPUSH
10305: LD_INT 60
10307: PPUSH
10308: CALL_OW 240
// RuSoldMinLevel = 0 ;
10312: LD_ADDR_EXP 13
10316: PUSH
10317: LD_INT 0
10319: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10320: LD_ADDR_EXP 14
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ; if Difficulty = 2 then
10328: LD_OWVAR 67
10332: PUSH
10333: LD_INT 2
10335: EQUAL
10336: IFFALSE 10378
// begin RemoveUnit ( brw4 ) ;
10338: LD_INT 52
10340: PPUSH
10341: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10345: LD_INT 5
10347: PUSH
10348: LD_INT 4
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PPUSH
10355: LD_INT 50
10357: PPUSH
10358: CALL_OW 240
// RuSoldMinLevel = 1 ;
10362: LD_ADDR_EXP 13
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10370: LD_ADDR_EXP 14
10374: PUSH
10375: LD_INT 2
10377: ST_TO_ADDR
// end ; if Difficulty = 3 then
10378: LD_OWVAR 67
10382: PUSH
10383: LD_INT 3
10385: EQUAL
10386: IFFALSE 10421
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10388: LD_INT 5
10390: PUSH
10391: LD_INT 4
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: LD_INT 40
10400: PPUSH
10401: CALL_OW 240
// RuSoldMinLevel = 2 ;
10405: LD_ADDR_EXP 13
10409: PUSH
10410: LD_INT 2
10412: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10413: LD_ADDR_EXP 14
10417: PUSH
10418: LD_INT 3
10420: ST_TO_ADDR
// end ; end ;
10421: LD_VAR 0 1
10425: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10426: LD_INT 0
10428: PPUSH
10429: PPUSH
10430: PPUSH
// tmp = [ ] ;
10431: LD_ADDR_VAR 0 5
10435: PUSH
10436: EMPTY
10437: ST_TO_ADDR
// if not vehicles then
10438: LD_VAR 0 1
10442: NOT
10443: IFFALSE 10447
// exit ;
10445: GO 10564
// for i in vehicles do
10447: LD_ADDR_VAR 0 4
10451: PUSH
10452: LD_VAR 0 1
10456: PUSH
10457: FOR_IN
10458: IFFALSE 10548
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10460: LD_ADDR_VAR 0 5
10464: PUSH
10465: LD_VAR 0 5
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: LD_VAR 0 4
10477: PPUSH
10478: CALL_OW 265
10482: PUSH
10483: LD_VAR 0 4
10487: PPUSH
10488: CALL_OW 262
10492: PUSH
10493: LD_VAR 0 4
10497: PPUSH
10498: CALL_OW 263
10502: PUSH
10503: LD_VAR 0 4
10507: PPUSH
10508: CALL_OW 264
10512: PUSH
10513: LD_VAR 0 4
10517: PPUSH
10518: CALL_OW 261
10522: PUSH
10523: LD_VAR 0 4
10527: PPUSH
10528: CALL_OW 256
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PPUSH
10541: CALL_OW 2
10545: ST_TO_ADDR
// end ;
10546: GO 10457
10548: POP
10549: POP
// SaveVariable ( tmp , ident ) ;
10550: LD_VAR 0 5
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: CALL_OW 39
// end ; end_of_file
10564: LD_VAR 0 3
10568: RET
// export function PrepareHeroes ; var plive ; begin
10569: LD_INT 0
10571: PPUSH
10572: PPUSH
// uc_side = 1 ;
10573: LD_ADDR_OWVAR 20
10577: PUSH
10578: LD_INT 1
10580: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10581: LD_ADDR_EXP 1
10585: PUSH
10586: LD_STRING 01_JMM
10588: PPUSH
10589: CALL_OW 34
10593: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10594: LD_ADDR_VAR 0 2
10598: PUSH
10599: LD_STRING 01_JMMLifePoints_1
10601: PPUSH
10602: LD_INT 1000
10604: PPUSH
10605: CALL_OW 30
10609: ST_TO_ADDR
// if plive < 250 then
10610: LD_VAR 0 2
10614: PUSH
10615: LD_INT 250
10617: LESS
10618: IFFALSE 10628
// plive := 300 ;
10620: LD_ADDR_VAR 0 2
10624: PUSH
10625: LD_INT 300
10627: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10628: LD_EXP 1
10632: PPUSH
10633: LD_VAR 0 2
10637: PPUSH
10638: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10642: LD_ADDR_EXP 9
10646: PUSH
10647: LD_STRING Powell
10649: PPUSH
10650: CALL_OW 25
10654: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10655: LD_ADDR_EXP 2
10659: PUSH
10660: LD_STRING 01_Bobby
10662: PPUSH
10663: CALL_OW 34
10667: ST_TO_ADDR
// if Bobby then
10668: LD_EXP 2
10672: IFFALSE 10722
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_STRING 01_BobbyLifePoints_1
10681: PPUSH
10682: LD_INT 1000
10684: PPUSH
10685: CALL_OW 30
10689: ST_TO_ADDR
// if plive < 250 then
10690: LD_VAR 0 2
10694: PUSH
10695: LD_INT 250
10697: LESS
10698: IFFALSE 10708
// plive := 300 ;
10700: LD_ADDR_VAR 0 2
10704: PUSH
10705: LD_INT 300
10707: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10708: LD_EXP 2
10712: PPUSH
10713: LD_VAR 0 2
10717: PPUSH
10718: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10722: LD_ADDR_EXP 3
10726: PUSH
10727: LD_STRING 01_Cyrus
10729: PPUSH
10730: CALL_OW 34
10734: ST_TO_ADDR
// if Cyrus then
10735: LD_EXP 3
10739: IFFALSE 10789
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10741: LD_ADDR_VAR 0 2
10745: PUSH
10746: LD_STRING 01_CyrusLifePoints_1
10748: PPUSH
10749: LD_INT 1000
10751: PPUSH
10752: CALL_OW 30
10756: ST_TO_ADDR
// if plive < 250 then
10757: LD_VAR 0 2
10761: PUSH
10762: LD_INT 250
10764: LESS
10765: IFFALSE 10775
// plive := 300 ;
10767: LD_ADDR_VAR 0 2
10771: PUSH
10772: LD_INT 300
10774: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10775: LD_EXP 3
10779: PPUSH
10780: LD_VAR 0 2
10784: PPUSH
10785: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10789: LD_ADDR_EXP 5
10793: PUSH
10794: LD_STRING Khatam
10796: PPUSH
10797: CALL_OW 25
10801: ST_TO_ADDR
// uc_side = 4 ;
10802: LD_ADDR_OWVAR 20
10806: PUSH
10807: LD_INT 4
10809: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10810: LD_ADDR_EXP 4
10814: PUSH
10815: LD_STRING Lisa
10817: PPUSH
10818: CALL_OW 25
10822: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10823: LD_EXP 1
10827: PPUSH
10828: LD_INT 3
10830: PPUSH
10831: LD_INT 0
10833: PPUSH
10834: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10838: LD_EXP 2
10842: PPUSH
10843: LD_INT 3
10845: PPUSH
10846: LD_INT 0
10848: PPUSH
10849: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10853: LD_EXP 3
10857: PPUSH
10858: LD_INT 3
10860: PPUSH
10861: LD_INT 0
10863: PPUSH
10864: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10868: LD_EXP 4
10872: PPUSH
10873: LD_INT 5
10875: PPUSH
10876: LD_INT 0
10878: PPUSH
10879: CALL_OW 49
// ComCrawl ( Lisa ) ;
10883: LD_EXP 4
10887: PPUSH
10888: CALL_OW 137
// end ;
10892: LD_VAR 0 1
10896: RET
// export function PrepareLisSquad ; var i , un ; begin
10897: LD_INT 0
10899: PPUSH
10900: PPUSH
10901: PPUSH
// uc_side = 4 ;
10902: LD_ADDR_OWVAR 20
10906: PUSH
10907: LD_INT 4
10909: ST_TO_ADDR
// uc_nation = 1 ;
10910: LD_ADDR_OWVAR 21
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// hc_class := 2 ;
10918: LD_ADDR_OWVAR 28
10922: PUSH
10923: LD_INT 2
10925: ST_TO_ADDR
// hc_sex := sex_male ;
10926: LD_ADDR_OWVAR 27
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// hc_gallery :=  ;
10934: LD_ADDR_OWVAR 33
10938: PUSH
10939: LD_STRING 
10941: ST_TO_ADDR
// hc_name :=  ;
10942: LD_ADDR_OWVAR 26
10946: PUSH
10947: LD_STRING 
10949: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10950: LD_ADDR_OWVAR 30
10954: PUSH
10955: LD_INT 0
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: LD_INT 0
10963: PUSH
10964: LD_INT 0
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10973: LD_ADDR_OWVAR 31
10977: PUSH
10978: LD_INT 1
10980: PUSH
10981: LD_INT 2
10983: PUSH
10984: LD_INT 0
10986: PUSH
10987: LD_INT 0
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: ST_TO_ADDR
// un := CreateHuman ;
10996: LD_ADDR_VAR 0 3
11000: PUSH
11001: CALL_OW 44
11005: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11006: LD_VAR 0 3
11010: PPUSH
11011: LD_INT 6
11013: PPUSH
11014: LD_INT 0
11016: PPUSH
11017: CALL_OW 49
// hc_sex := sex_female ;
11021: LD_ADDR_OWVAR 27
11025: PUSH
11026: LD_INT 2
11028: ST_TO_ADDR
// hc_gallery :=  ;
11029: LD_ADDR_OWVAR 33
11033: PUSH
11034: LD_STRING 
11036: ST_TO_ADDR
// hc_name :=  ;
11037: LD_ADDR_OWVAR 26
11041: PUSH
11042: LD_STRING 
11044: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11045: LD_ADDR_OWVAR 30
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: LD_INT 0
11055: PUSH
11056: LD_INT 0
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11068: LD_ADDR_OWVAR 31
11072: PUSH
11073: LD_INT 0
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: LD_INT 0
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: ST_TO_ADDR
// un := CreateHuman ;
11091: LD_ADDR_VAR 0 3
11095: PUSH
11096: CALL_OW 44
11100: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 6
11108: PPUSH
11109: LD_INT 0
11111: PPUSH
11112: CALL_OW 49
// if not Bobby and not Cyrus then
11116: LD_EXP 2
11120: NOT
11121: PUSH
11122: LD_EXP 3
11126: NOT
11127: AND
11128: IFFALSE 11233
// begin hc_class := 1 ;
11130: LD_ADDR_OWVAR 28
11134: PUSH
11135: LD_INT 1
11137: ST_TO_ADDR
// hc_sex := sex_male ;
11138: LD_ADDR_OWVAR 27
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// hc_gallery :=  ;
11146: LD_ADDR_OWVAR 33
11150: PUSH
11151: LD_STRING 
11153: ST_TO_ADDR
// hc_name :=  ;
11154: LD_ADDR_OWVAR 26
11158: PUSH
11159: LD_STRING 
11161: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11162: LD_ADDR_OWVAR 30
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 3
11172: PUSH
11173: LD_INT 1
11175: PUSH
11176: LD_INT 0
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11185: LD_ADDR_OWVAR 31
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: LD_INT 0
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: ST_TO_ADDR
// un := CreateHuman ;
11208: LD_ADDR_VAR 0 3
11212: PUSH
11213: CALL_OW 44
11217: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 31
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 49
// end ; InitHc ;
11233: CALL_OW 19
// end ;
11237: LD_VAR 0 1
11241: RET
// export function PrepareOtherAmericans ; begin
11242: LD_INT 0
11244: PPUSH
// uc_side = 4 ;
11245: LD_ADDR_OWVAR 20
11249: PUSH
11250: LD_INT 4
11252: ST_TO_ADDR
// uc_nation = 1 ;
11253: LD_ADDR_OWVAR 21
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// hc_gallery =  ;
11261: LD_ADDR_OWVAR 33
11265: PUSH
11266: LD_STRING 
11268: ST_TO_ADDR
// hc_name = Tom Garvin ;
11269: LD_ADDR_OWVAR 26
11273: PUSH
11274: LD_STRING Tom Garvin
11276: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11277: LD_INT 1
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: LD_INT 2
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 380
// Brian = CreateHuman ;
11298: LD_ADDR_EXP 6
11302: PUSH
11303: CALL_OW 44
11307: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11308: LD_EXP 6
11312: PPUSH
11313: LD_INT 10
11315: PPUSH
11316: LD_INT 0
11318: PPUSH
11319: CALL_OW 49
// hc_name = Jerry White ;
11323: LD_ADDR_OWVAR 26
11327: PUSH
11328: LD_STRING Jerry White
11330: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11331: LD_INT 1
11333: PPUSH
11334: LD_INT 3
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: LD_INT 2
11342: PPUSH
11343: CALL_OW 12
11347: PPUSH
11348: CALL_OW 380
// Jerry = CreateHuman ;
11352: LD_ADDR_EXP 7
11356: PUSH
11357: CALL_OW 44
11361: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11362: LD_EXP 7
11366: PPUSH
11367: LD_INT 10
11369: PPUSH
11370: LD_INT 0
11372: PPUSH
11373: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11377: LD_EXP 6
11381: PUSH
11382: LD_EXP 7
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PPUSH
11391: CALL_OW 140
// end ;
11395: LD_VAR 0 1
11399: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11400: LD_INT 0
11402: PPUSH
11403: PPUSH
11404: PPUSH
// for i = 1 to 6 do
11405: LD_ADDR_VAR 0 2
11409: PUSH
11410: DOUBLE
11411: LD_INT 1
11413: DEC
11414: ST_TO_ADDR
11415: LD_INT 6
11417: PUSH
11418: FOR_TO
11419: IFFALSE 11513
// begin uc_side = 4 ;
11421: LD_ADDR_OWVAR 20
11425: PUSH
11426: LD_INT 4
11428: ST_TO_ADDR
// uc_nation = 1 ;
11429: LD_ADDR_OWVAR 21
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// hc_gallery =  ;
11437: LD_ADDR_OWVAR 33
11441: PUSH
11442: LD_STRING 
11444: ST_TO_ADDR
// hc_name =  ;
11445: LD_ADDR_OWVAR 26
11449: PUSH
11450: LD_STRING 
11452: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11453: LD_INT 0
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 4
11461: PPUSH
11462: CALL_OW 12
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 380
// un = CreateHuman ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: CALL_OW 44
11483: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11484: LD_VAR 0 3
11488: PPUSH
11489: LD_INT 16
11491: PPUSH
11492: LD_INT 0
11494: PPUSH
11495: CALL_OW 49
// SetLives ( un , 1 ) ;
11499: LD_VAR 0 3
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: CALL_OW 234
// end ;
11511: GO 11418
11513: POP
11514: POP
// DyingSold = CreateHuman ;
11515: LD_ADDR_EXP 34
11519: PUSH
11520: CALL_OW 44
11524: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11525: LD_EXP 34
11529: PPUSH
11530: LD_INT 16
11532: PPUSH
11533: LD_INT 0
11535: PPUSH
11536: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11540: LD_EXP 34
11544: PPUSH
11545: LD_INT 250
11547: PPUSH
11548: CALL_OW 234
// end ; end_of_file
11552: LD_VAR 0 1
11556: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11557: LD_INT 0
11559: PPUSH
11560: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11561: LD_ADDR_VAR 0 2
11565: PUSH
11566: LD_INT 22
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 23
11578: PUSH
11579: LD_INT 1
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 25
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 50
11598: PUSH
11599: EMPTY
11600: LIST
11601: PUSH
11602: LD_INT 56
11604: PUSH
11605: EMPTY
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PPUSH
11615: CALL_OW 69
11619: PUSH
11620: LD_EXP 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: DIFF
11628: ST_TO_ADDR
// uc_side = 6 ;
11629: LD_ADDR_OWVAR 20
11633: PUSH
11634: LD_INT 6
11636: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11637: LD_ADDR_EXP 8
11641: PUSH
11642: LD_STRING Mikhail
11644: PPUSH
11645: CALL_OW 25
11649: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11650: LD_EXP 8
11654: PPUSH
11655: LD_INT 3
11657: PPUSH
11658: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11662: LD_EXP 8
11666: PPUSH
11667: LD_VAR 0 2
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PPUSH
11676: CALL_OW 250
11680: PPUSH
11681: LD_VAR 0 2
11685: PUSH
11686: LD_INT 1
11688: ARRAY
11689: PPUSH
11690: CALL_OW 251
11694: PPUSH
11695: LD_INT 5
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 50
// end ;
11705: LD_VAR 0 1
11709: RET
// export function PrepareRussianCommander ; begin
11710: LD_INT 0
11712: PPUSH
// uc_side = 3 ;
11713: LD_ADDR_OWVAR 20
11717: PUSH
11718: LD_INT 3
11720: ST_TO_ADDR
// uc_nation = 3 ;
11721: LD_ADDR_OWVAR 21
11725: PUSH
11726: LD_INT 3
11728: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11729: LD_ADDR_EXP 19
11733: PUSH
11734: LD_STRING Natasza
11736: PPUSH
11737: CALL_OW 25
11741: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11742: LD_EXP 19
11746: PPUSH
11747: LD_INT 24
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11757: LD_EXP 19
11761: PPUSH
11762: LD_INT 56
11764: PPUSH
11765: LD_INT 16
11767: PPUSH
11768: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11772: LD_ADDR_EXP 24
11776: PUSH
11777: LD_EXP 24
11781: PUSH
11782: LD_EXP 19
11786: ADD
11787: ST_TO_ADDR
// end ;
11788: LD_VAR 0 1
11792: RET
// export function PrepareSouthBase ; var i , un ; begin
11793: LD_INT 0
11795: PPUSH
11796: PPUSH
11797: PPUSH
// for i = 1 to 2 do
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_INT 2
11810: PUSH
11811: FOR_TO
11812: IFFALSE 11921
// begin uc_side = 3 ;
11814: LD_ADDR_OWVAR 20
11818: PUSH
11819: LD_INT 3
11821: ST_TO_ADDR
// uc_nation = 3 ;
11822: LD_ADDR_OWVAR 21
11826: PUSH
11827: LD_INT 3
11829: ST_TO_ADDR
// hc_gallery =  ;
11830: LD_ADDR_OWVAR 33
11834: PUSH
11835: LD_STRING 
11837: ST_TO_ADDR
// hc_name =  ;
11838: LD_ADDR_OWVAR 26
11842: PUSH
11843: LD_STRING 
11845: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: LD_EXP 13
11856: PPUSH
11857: LD_EXP 14
11861: PPUSH
11862: CALL_OW 12
11866: PPUSH
11867: CALL_OW 380
// hc_importance = 0 ;
11871: LD_ADDR_OWVAR 32
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// un = CreateHuman ;
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: CALL_OW 44
11888: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 11
11896: PPUSH
11897: LD_INT 0
11899: PPUSH
11900: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 111
11911: PPUSH
11912: LD_INT 38
11914: PPUSH
11915: CALL_OW 118
// end ;
11919: GO 11811
11921: POP
11922: POP
// for i = 1 to Difficulty do
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: DOUBLE
11929: LD_INT 1
11931: DEC
11932: ST_TO_ADDR
11933: LD_OWVAR 67
11937: PUSH
11938: FOR_TO
11939: IFFALSE 12022
// begin uc_side = 3 ;
11941: LD_ADDR_OWVAR 20
11945: PUSH
11946: LD_INT 3
11948: ST_TO_ADDR
// uc_nation = 3 ;
11949: LD_ADDR_OWVAR 21
11953: PUSH
11954: LD_INT 3
11956: ST_TO_ADDR
// hc_gallery =  ;
11957: LD_ADDR_OWVAR 33
11961: PUSH
11962: LD_STRING 
11964: ST_TO_ADDR
// hc_name =  ;
11965: LD_ADDR_OWVAR 26
11969: PUSH
11970: LD_STRING 
11972: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11973: LD_INT 0
11975: PPUSH
11976: LD_INT 3
11978: PPUSH
11979: LD_EXP 13
11983: PPUSH
11984: LD_EXP 14
11988: PPUSH
11989: CALL_OW 12
11993: PPUSH
11994: CALL_OW 380
// un = CreateHuman ;
11998: LD_ADDR_VAR 0 3
12002: PUSH
12003: CALL_OW 44
12007: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12008: LD_VAR 0 3
12012: PPUSH
12013: LD_INT 10
12015: PPUSH
12016: CALL_OW 52
// end ;
12020: GO 11938
12022: POP
12023: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12024: LD_INT 3
12026: PPUSH
12027: LD_INT 3
12029: PPUSH
12030: LD_INT 33
12032: PPUSH
12033: LD_EXP 13
12037: PPUSH
12038: LD_EXP 14
12042: PPUSH
12043: CALL_OW 12
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: LD_INT 1
12053: PUSH
12054: LD_INT 1
12056: PPUSH
12057: LD_INT 2
12059: PPUSH
12060: CALL_OW 12
12064: PUSH
12065: LD_INT 1
12067: PPUSH
12068: LD_INT 2
12070: PPUSH
12071: CALL_OW 12
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_OWVAR 67
12085: ARRAY
12086: PPUSH
12087: CALL 8480 0 6
// for i in UnitsInside ( arm2 ) do
12091: LD_ADDR_VAR 0 2
12095: PUSH
12096: LD_INT 33
12098: PPUSH
12099: CALL_OW 313
12103: PUSH
12104: FOR_IN
12105: IFFALSE 12125
// southBaseDefenders = southBaseDefenders ^ i ;
12107: LD_ADDR_EXP 25
12111: PUSH
12112: LD_EXP 25
12116: PUSH
12117: LD_VAR 0 2
12121: ADD
12122: ST_TO_ADDR
12123: GO 12104
12125: POP
12126: POP
// end ;
12127: LD_VAR 0 1
12131: RET
// export function PrepareNorthBase ; var i , un ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_INT 1
12149: PPUSH
12150: LD_INT 2
12152: PPUSH
12153: CALL_OW 12
12157: PUSH
12158: LD_INT 2
12160: PPUSH
12161: LD_INT 3
12163: PPUSH
12164: CALL_OW 12
12168: PUSH
12169: LD_INT 3
12171: PPUSH
12172: LD_INT 4
12174: PPUSH
12175: CALL_OW 12
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: LD_OWVAR 67
12189: ARRAY
12190: PUSH
12191: FOR_TO
12192: IFFALSE 12278
// begin uc_side = 3 ;
12194: LD_ADDR_OWVAR 20
12198: PUSH
12199: LD_INT 3
12201: ST_TO_ADDR
// uc_nation = 3 ;
12202: LD_ADDR_OWVAR 21
12206: PUSH
12207: LD_INT 3
12209: ST_TO_ADDR
// hc_gallery =  ;
12210: LD_ADDR_OWVAR 33
12214: PUSH
12215: LD_STRING 
12217: ST_TO_ADDR
// hc_name =  ;
12218: LD_ADDR_OWVAR 26
12222: PUSH
12223: LD_STRING 
12225: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12226: LD_INT 0
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: LD_EXP 13
12236: PPUSH
12237: LD_EXP 14
12241: PPUSH
12242: CALL_OW 12
12246: PPUSH
12247: CALL_OW 380
// un = CreateHuman ;
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: CALL_OW 44
12260: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 14
12268: PPUSH
12269: LD_INT 0
12271: PPUSH
12272: CALL_OW 49
// end ;
12276: GO 12191
12278: POP
12279: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12280: LD_INT 3
12282: PPUSH
12283: LD_INT 3
12285: PPUSH
12286: LD_INT 2
12288: PPUSH
12289: LD_EXP 13
12293: PPUSH
12294: LD_EXP 14
12298: PPUSH
12299: CALL_OW 12
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 12
12317: PUSH
12318: LD_INT 1
12320: PPUSH
12321: LD_INT 3
12323: PPUSH
12324: CALL_OW 12
12328: PUSH
12329: LD_INT 1
12331: PPUSH
12332: LD_INT 3
12334: PPUSH
12335: CALL_OW 12
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: LD_OWVAR 67
12349: ARRAY
12350: PPUSH
12351: CALL 8480 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12355: LD_INT 3
12357: PPUSH
12358: LD_INT 3
12360: PPUSH
12361: LD_INT 23
12363: PPUSH
12364: LD_EXP 13
12368: PPUSH
12369: LD_EXP 14
12373: PPUSH
12374: CALL_OW 12
12378: PPUSH
12379: LD_INT 4
12381: PPUSH
12382: LD_INT 0
12384: PUSH
12385: LD_INT 1
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: LD_OWVAR 67
12400: ARRAY
12401: PPUSH
12402: CALL 8480 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12406: LD_INT 3
12408: PPUSH
12409: LD_INT 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: LD_EXP 13
12419: PPUSH
12420: LD_EXP 14
12424: PPUSH
12425: CALL_OW 12
12429: PPUSH
12430: LD_INT 2
12432: PPUSH
12433: LD_INT 1
12435: PUSH
12436: LD_INT 2
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_OWVAR 67
12451: ARRAY
12452: PPUSH
12453: CALL 8480 0 6
// for i in UnitsInside ( arm1 ) do
12457: LD_ADDR_VAR 0 2
12461: PUSH
12462: LD_INT 2
12464: PPUSH
12465: CALL_OW 313
12469: PUSH
12470: FOR_IN
12471: IFFALSE 12491
// northBaseDefenders = northBaseDefenders ^ i ;
12473: LD_ADDR_EXP 24
12477: PUSH
12478: LD_EXP 24
12482: PUSH
12483: LD_VAR 0 2
12487: ADD
12488: ST_TO_ADDR
12489: GO 12470
12491: POP
12492: POP
// end ;
12493: LD_VAR 0 1
12497: RET
// export function PrepareOtherRussians ; var i , un ; begin
12498: LD_INT 0
12500: PPUSH
12501: PPUSH
12502: PPUSH
// for i = 1 to 2 do
12503: LD_ADDR_VAR 0 2
12507: PUSH
12508: DOUBLE
12509: LD_INT 1
12511: DEC
12512: ST_TO_ADDR
12513: LD_INT 2
12515: PUSH
12516: FOR_TO
12517: IFFALSE 12618
// begin uc_side = 3 ;
12519: LD_ADDR_OWVAR 20
12523: PUSH
12524: LD_INT 3
12526: ST_TO_ADDR
// uc_nation = 3 ;
12527: LD_ADDR_OWVAR 21
12531: PUSH
12532: LD_INT 3
12534: ST_TO_ADDR
// hc_gallery =  ;
12535: LD_ADDR_OWVAR 33
12539: PUSH
12540: LD_STRING 
12542: ST_TO_ADDR
// hc_name =  ;
12543: LD_ADDR_OWVAR 26
12547: PUSH
12548: LD_STRING 
12550: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12551: LD_INT 0
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: LD_EXP 13
12561: PPUSH
12562: LD_EXP 14
12566: PPUSH
12567: CALL_OW 12
12571: PPUSH
12572: CALL_OW 380
// un = CreateHuman ;
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: CALL_OW 44
12585: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12586: LD_VAR 0 3
12590: PPUSH
12591: LD_INT 9
12593: PPUSH
12594: LD_INT 0
12596: PPUSH
12597: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12601: LD_VAR 0 3
12605: PPUSH
12606: LD_INT 80
12608: PPUSH
12609: LD_INT 73
12611: PPUSH
12612: CALL_OW 118
// end ;
12616: GO 12516
12618: POP
12619: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12620: LD_ADDR_VAR 0 2
12624: PUSH
12625: LD_INT 22
12627: PUSH
12628: LD_INT 3
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 30
12637: PUSH
12638: LD_INT 31
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: PUSH
12654: FOR_IN
12655: IFFALSE 12683
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12657: LD_EXP 13
12661: PPUSH
12662: LD_EXP 14
12666: PPUSH
12667: CALL_OW 12
12671: PPUSH
12672: LD_VAR 0 2
12676: PPUSH
12677: CALL 8590 0 2
12681: GO 12654
12683: POP
12684: POP
// end ;
12685: LD_VAR 0 1
12689: RET
// export function PrepareCargoBays ; begin
12690: LD_INT 0
12692: PPUSH
// uc_side = 3 ;
12693: LD_ADDR_OWVAR 20
12697: PUSH
12698: LD_INT 3
12700: ST_TO_ADDR
// uc_nation = 3 ;
12701: LD_ADDR_OWVAR 21
12705: PUSH
12706: LD_INT 3
12708: ST_TO_ADDR
// vc_engine = 1 ;
12709: LD_ADDR_OWVAR 39
12713: PUSH
12714: LD_INT 1
12716: ST_TO_ADDR
// vc_control = 1 ;
12717: LD_ADDR_OWVAR 38
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// vc_weapon = 51 ;
12725: LD_ADDR_OWVAR 40
12729: PUSH
12730: LD_INT 51
12732: ST_TO_ADDR
// vc_chassis = 22 ;
12733: LD_ADDR_OWVAR 37
12737: PUSH
12738: LD_INT 22
12740: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12741: LD_ADDR_EXP 15
12745: PUSH
12746: CALL_OW 45
12750: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12751: LD_ADDR_EXP 16
12755: PUSH
12756: CALL_OW 45
12760: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12761: LD_EXP 15
12765: PPUSH
12766: LD_INT 13
12768: PPUSH
12769: LD_INT 0
12771: PPUSH
12772: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12776: LD_EXP 16
12780: PPUSH
12781: LD_INT 13
12783: PPUSH
12784: LD_INT 0
12786: PPUSH
12787: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12791: LD_EXP 15
12795: PPUSH
12796: LD_INT 2
12798: PPUSH
12799: LD_INT 70
12801: PUSH
12802: LD_INT 50
12804: PUSH
12805: LD_INT 30
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: LD_OWVAR 67
12817: ARRAY
12818: PPUSH
12819: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12823: LD_EXP 16
12827: PPUSH
12828: LD_INT 2
12830: PPUSH
12831: LD_INT 70
12833: PUSH
12834: LD_INT 50
12836: PUSH
12837: LD_INT 30
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_OWVAR 67
12849: ARRAY
12850: PPUSH
12851: CALL_OW 291
// hc_gallery =  ;
12855: LD_ADDR_OWVAR 33
12859: PUSH
12860: LD_STRING 
12862: ST_TO_ADDR
// hc_name =  ;
12863: LD_ADDR_OWVAR 26
12867: PUSH
12868: LD_STRING 
12870: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12871: LD_INT 1
12873: PPUSH
12874: LD_INT 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_INT 2
12882: PPUSH
12883: CALL_OW 12
12887: PPUSH
12888: CALL_OW 380
// driver1 = CreateHuman ;
12892: LD_ADDR_EXP 17
12896: PUSH
12897: CALL_OW 44
12901: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12902: LD_EXP 17
12906: PPUSH
12907: LD_EXP 15
12911: PPUSH
12912: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12916: LD_ADDR_OWVAR 26
12920: PUSH
12921: LD_STRING Nikolai Andreyev
12923: ST_TO_ADDR
// driver2 = CreateHuman ;
12924: LD_ADDR_EXP 18
12928: PUSH
12929: CALL_OW 44
12933: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12934: LD_EXP 18
12938: PPUSH
12939: LD_EXP 16
12943: PPUSH
12944: CALL_OW 52
// end ;
12948: LD_VAR 0 1
12952: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12953: LD_INT 0
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
// uc_side = 3 ;
12962: LD_ADDR_OWVAR 20
12966: PUSH
12967: LD_INT 3
12969: ST_TO_ADDR
// uc_nation = 3 ;
12970: LD_ADDR_OWVAR 21
12974: PUSH
12975: LD_INT 3
12977: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12978: LD_ADDR_VAR 0 4
12982: PUSH
12983: DOUBLE
12984: LD_INT 1
12986: DEC
12987: ST_TO_ADDR
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 1
12995: PPUSH
12996: LD_INT 3
12998: PPUSH
12999: CALL_OW 12
13003: PLUS
13004: PUSH
13005: FOR_TO
13006: IFFALSE 13183
// begin vc_engine = 1 ;
13008: LD_ADDR_OWVAR 39
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// vc_control = 1 ;
13016: LD_ADDR_OWVAR 38
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// vc_weapon = 42 ;
13024: LD_ADDR_OWVAR 40
13028: PUSH
13029: LD_INT 42
13031: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13032: LD_ADDR_OWVAR 37
13036: PUSH
13037: LD_INT 21
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_INT 22
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: LD_OWVAR 67
13055: ARRAY
13056: ST_TO_ADDR
// veh = CreateVehicle ;
13057: LD_ADDR_VAR 0 5
13061: PUSH
13062: CALL_OW 45
13066: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13067: LD_VAR 0 5
13071: PPUSH
13072: LD_VAR 0 2
13076: PPUSH
13077: LD_INT 0
13079: PPUSH
13080: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13084: LD_ADDR_EXP 26
13088: PUSH
13089: LD_EXP 26
13093: PUSH
13094: LD_VAR 0 5
13098: ADD
13099: ST_TO_ADDR
// hc_gallery =  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name =  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13116: LD_INT 0
13118: PPUSH
13119: LD_INT 3
13121: PPUSH
13122: LD_EXP 13
13126: PPUSH
13127: LD_EXP 14
13131: PPUSH
13132: CALL_OW 12
13136: PPUSH
13137: CALL_OW 380
// un = CreateHuman ;
13141: LD_ADDR_VAR 0 6
13145: PUSH
13146: CALL_OW 44
13150: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13151: LD_VAR 0 6
13155: PPUSH
13156: LD_VAR 0 5
13160: PPUSH
13161: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13165: LD_ADDR_EXP 26
13169: PUSH
13170: LD_EXP 26
13174: PUSH
13175: LD_VAR 0 6
13179: ADD
13180: ST_TO_ADDR
// end ;
13181: GO 13005
13183: POP
13184: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13185: LD_INT 0
13187: PPUSH
13188: LD_INT 2
13190: PPUSH
13191: LD_EXP 13
13195: PPUSH
13196: LD_EXP 14
13200: PPUSH
13201: CALL_OW 12
13205: PPUSH
13206: CALL_OW 380
// un = CreateHuman ;
13210: LD_ADDR_VAR 0 6
13214: PUSH
13215: CALL_OW 44
13219: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13220: LD_ADDR_VAR 0 4
13224: PUSH
13225: DOUBLE
13226: LD_INT 1
13228: DEC
13229: ST_TO_ADDR
13230: LD_VAR 0 1
13234: PUSH
13235: LD_INT 2
13237: PUSH
13238: LD_INT 2
13240: MUL
13241: PLUS
13242: PUSH
13243: FOR_TO
13244: IFFALSE 13332
// begin hc_gallery =  ;
13246: LD_ADDR_OWVAR 33
13250: PUSH
13251: LD_STRING 
13253: ST_TO_ADDR
// hc_name =  ;
13254: LD_ADDR_OWVAR 26
13258: PUSH
13259: LD_STRING 
13261: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13262: LD_INT 1
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: LD_EXP 13
13272: PPUSH
13273: LD_EXP 14
13277: PPUSH
13278: CALL_OW 12
13282: PPUSH
13283: CALL_OW 380
// un = CreateHuman ;
13287: LD_ADDR_VAR 0 6
13291: PUSH
13292: CALL_OW 44
13296: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13297: LD_VAR 0 6
13301: PPUSH
13302: LD_VAR 0 2
13306: PPUSH
13307: LD_INT 0
13309: PPUSH
13310: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13314: LD_ADDR_EXP 26
13318: PUSH
13319: LD_EXP 26
13323: PUSH
13324: LD_VAR 0 6
13328: ADD
13329: ST_TO_ADDR
// end ;
13330: GO 13243
13332: POP
13333: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13334: LD_ADDR_VAR 0 7
13338: PUSH
13339: LD_INT 26
13341: PPUSH
13342: LD_INT 22
13344: PUSH
13345: LD_INT 3
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 21
13354: PUSH
13355: LD_INT 1
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 26
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: PPUSH
13377: CALL_OW 70
13381: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13382: LD_VAR 0 7
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: LD_STRING D9-Rus3-1
13393: PPUSH
13394: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13398: LD_VAR 0 7
13402: PUSH
13403: LD_INT 2
13405: ARRAY
13406: PPUSH
13407: LD_STRING D9-Russ-1
13409: PPUSH
13410: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13414: LD_INT 35
13416: PPUSH
13417: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13421: LD_ADDR_VAR 0 4
13425: PUSH
13426: LD_INT 26
13428: PPUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 3
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: PPUSH
13442: CALL_OW 70
13446: PUSH
13447: FOR_IN
13448: IFFALSE 13620
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13450: LD_ADDR_VAR 0 8
13454: PUSH
13455: LD_INT 22
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PPUSH
13470: LD_VAR 0 4
13474: PPUSH
13475: CALL_OW 74
13479: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13480: LD_ADDR_VAR 0 9
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 2
13497: PUSH
13498: LD_INT 59
13500: PUSH
13501: EMPTY
13502: LIST
13503: PUSH
13504: LD_INT 21
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 21
13516: PUSH
13517: LD_INT 2
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PPUSH
13542: LD_VAR 0 4
13546: PPUSH
13547: CALL_OW 74
13551: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13552: LD_VAR 0 4
13556: PPUSH
13557: LD_VAR 0 8
13561: PPUSH
13562: CALL_OW 296
13566: PUSH
13567: LD_INT 8
13569: PLUS
13570: PUSH
13571: LD_VAR 0 4
13575: PPUSH
13576: LD_VAR 0 9
13580: PPUSH
13581: CALL_OW 296
13585: LESS
13586: IFFALSE 13604
// begin ComAttackUnit ( i , target1 ) ;
13588: LD_VAR 0 4
13592: PPUSH
13593: LD_VAR 0 8
13597: PPUSH
13598: CALL_OW 115
// end else
13602: GO 13618
// begin ComAttackUnit ( i , target2 ) ;
13604: LD_VAR 0 4
13608: PPUSH
13609: LD_VAR 0 9
13613: PPUSH
13614: CALL_OW 115
// end ; end ;
13618: GO 13447
13620: POP
13621: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13622: LD_INT 26
13624: PPUSH
13625: LD_INT 22
13627: PUSH
13628: LD_INT 3
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 2
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 21
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 59
13660: PUSH
13661: EMPTY
13662: LIST
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 70
13678: PUSH
13679: LD_INT 0
13681: EQUAL
13682: IFFALSE 13414
// end ; end_of_file
13684: LD_VAR 0 3
13688: RET
// every 0 0$1 do
13689: GO 13691
13691: DISABLE
// begin enable ;
13692: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13693: LD_INT 3
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: LD_INT 22
13701: PPUSH
13702: CALL 8726 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13706: LD_INT 3
13708: PPUSH
13709: LD_INT 20
13711: PPUSH
13712: LD_INT 22
13714: PPUSH
13715: LD_INT 23
13717: PPUSH
13718: CALL 8972 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13722: LD_INT 3
13724: PPUSH
13725: LD_INT 21
13727: PPUSH
13728: LD_INT 23
13730: PPUSH
13731: CALL 9249 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13735: LD_INT 22
13737: PPUSH
13738: LD_INT 1
13740: PPUSH
13741: LD_EXP 24
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: LD_INT 3
13751: PPUSH
13752: CALL 9721 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13756: LD_INT 23
13758: PPUSH
13759: LD_INT 1
13761: PPUSH
13762: LD_EXP 25
13766: PPUSH
13767: LD_INT 33
13769: PPUSH
13770: LD_INT 1
13772: PPUSH
13773: CALL 9721 0 5
// end ; end_of_file
13777: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13778: LD_VAR 0 1
13782: PPUSH
13783: CALL_OW 266
13787: PUSH
13788: LD_INT 0
13790: EQUAL
13791: IFFALSE 13800
// YouLost ( DepotDestroyed ) ;
13793: LD_STRING DepotDestroyed
13795: PPUSH
13796: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL_OW 255
13809: PUSH
13810: LD_INT 1
13812: EQUAL
13813: PUSH
13814: LD_VAR 0 1
13818: PPUSH
13819: CALL_OW 247
13823: PUSH
13824: LD_INT 1
13826: EQUAL
13827: AND
13828: IFFALSE 13844
// deadsCounter = deadsCounter + 1 ;
13830: LD_ADDR_EXP 31
13834: PUSH
13835: LD_EXP 31
13839: PUSH
13840: LD_INT 1
13842: PLUS
13843: ST_TO_ADDR
// end ;
13844: PPOPN 1
13846: END
// on Command ( comandid ) do var i , j , tmp ;
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
13851: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13852: LD_ADDR_VAR 0 2
13856: PUSH
13857: LD_INT 22
13859: PUSH
13860: LD_INT 1
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 21
13869: PUSH
13870: LD_INT 2
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PPUSH
13881: CALL_OW 69
13885: PUSH
13886: FOR_IN
13887: IFFALSE 14012
// begin if GetTaskList ( i ) > 0 then
13889: LD_VAR 0 2
13893: PPUSH
13894: CALL_OW 437
13898: PUSH
13899: LD_INT 0
13901: GREATER
13902: IFFALSE 14010
// begin for j = 1 to GetTaskList ( i ) do
13904: LD_ADDR_VAR 0 3
13908: PUSH
13909: DOUBLE
13910: LD_INT 1
13912: DEC
13913: ST_TO_ADDR
13914: LD_VAR 0 2
13918: PPUSH
13919: CALL_OW 437
13923: PUSH
13924: FOR_TO
13925: IFFALSE 14008
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13927: LD_ADDR_VAR 0 4
13931: PUSH
13932: LD_VAR 0 2
13936: PPUSH
13937: CALL_OW 437
13941: PUSH
13942: LD_VAR 0 3
13946: ARRAY
13947: PUSH
13948: LD_INT 4
13950: ARRAY
13951: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13952: LD_VAR 0 4
13956: PPUSH
13957: CALL_OW 255
13961: PUSH
13962: LD_INT 3
13964: EQUAL
13965: PUSH
13966: LD_VAR 0 4
13970: PPUSH
13971: CALL_OW 247
13975: PUSH
13976: LD_INT 2
13978: EQUAL
13979: AND
13980: PUSH
13981: LD_VAR 0 4
13985: PPUSH
13986: CALL_OW 264
13990: PUSH
13991: LD_INT 51
13993: EQUAL
13994: AND
13995: IFFALSE 14006
// ComStop ( i ) ;
13997: LD_VAR 0 2
14001: PPUSH
14002: CALL_OW 141
// end ;
14006: GO 13924
14008: POP
14009: POP
// end ; end ;
14010: GO 13886
14012: POP
14013: POP
// end ;
14014: PPOPN 4
14016: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14017: LD_VAR 0 2
14021: PUSH
14022: LD_EXP 8
14026: EQUAL
14027: PUSH
14028: LD_EXP 21
14032: PUSH
14033: LD_INT 4
14035: NONEQUAL
14036: AND
14037: IFFALSE 14189
// begin if IsOk ( Mikhail ) then
14039: LD_EXP 8
14043: PPUSH
14044: CALL_OW 302
14048: IFFALSE 14056
// AskMikhail else
14050: CALL 7011 0 0
14054: GO 14189
// if IsOk ( lab1 ) then
14056: LD_INT 23
14058: PPUSH
14059: CALL_OW 302
14063: IFFALSE 14152
// begin InGameOn ;
14065: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14069: LD_EXP 8
14073: PPUSH
14074: LD_INT 6
14076: PPUSH
14077: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14081: LD_INT 23
14083: PPUSH
14084: LD_INT 6
14086: PPUSH
14087: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14091: LD_EXP 8
14095: PPUSH
14096: LD_INT 23
14098: PPUSH
14099: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14110: LD_EXP 8
14114: PPUSH
14115: CALL_OW 310
14119: PUSH
14120: LD_INT 23
14122: EQUAL
14123: PUSH
14124: LD_EXP 8
14128: PPUSH
14129: CALL_OW 301
14133: OR
14134: IFFALSE 14103
// SetSide ( lab1 , 1 ) ;
14136: LD_INT 23
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: CALL_OW 235
// InGameOff ;
14146: CALL_OW 9
// end else
14150: GO 14189
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14152: LD_INT 3
14154: PPUSH
14155: LD_INT 6
14157: PPUSH
14158: LD_INT 2
14160: PPUSH
14161: LD_INT 1
14163: PPUSH
14164: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14168: LD_EXP 8
14172: PPUSH
14173: LD_INT 6
14175: PPUSH
14176: CALL_OW 235
// ComHold ( Mikhail ) ;
14180: LD_EXP 8
14184: PPUSH
14185: CALL_OW 140
// end ; end ; end ;
14189: PPOPN 2
14191: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14192: LD_EXP 8
14196: PPUSH
14197: CALL_OW 257
14201: PUSH
14202: LD_INT 3
14204: NONEQUAL
14205: IFFALSE 14223
14207: GO 14209
14209: DISABLE
// begin enable ;
14210: ENABLE
// SetClass ( Mikhail , 3 ) ;
14211: LD_EXP 8
14215: PPUSH
14216: LD_INT 3
14218: PPUSH
14219: CALL_OW 336
// end ; end_of_file
14223: END
// every 0 0$1 trigger IsDead ( JMM ) do
14224: LD_EXP 1
14228: PPUSH
14229: CALL_OW 301
14233: IFFALSE 14245
14235: GO 14237
14237: DISABLE
// YouLost ( JMM ) ;
14238: LD_STRING JMM
14240: PPUSH
14241: CALL_OW 104
14245: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14246: LD_INT 22
14248: PUSH
14249: LD_INT 1
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 25
14268: PUSH
14269: LD_INT 2
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: PUSH
14286: LD_INT 0
14288: EQUAL
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_INT 4
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: LD_INT 2
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: PUSH
14330: LD_INT 0
14332: EQUAL
14333: AND
14334: PUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 255
14342: PUSH
14343: LD_INT 3
14345: EQUAL
14346: AND
14347: PUSH
14348: LD_INT 10
14350: PPUSH
14351: CALL_OW 255
14355: PUSH
14356: LD_INT 3
14358: EQUAL
14359: AND
14360: IFFALSE 14372
14362: GO 14364
14364: DISABLE
// YouLost ( Engineer ) ;
14365: LD_STRING Engineer
14367: PPUSH
14368: CALL_OW 104
14372: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 255
14380: PUSH
14381: LD_INT 3
14383: EQUAL
14384: PUSH
14385: LD_EXP 27
14389: PUSH
14390: LD_INT 1
14392: EQUAL
14393: AND
14394: IFFALSE 14406
14396: GO 14398
14398: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14399: LD_STRING DepotCaptured
14401: PPUSH
14402: CALL_OW 104
14406: END
// export function PrepareTigers ; var i , un ; begin
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
14411: PPUSH
// for i = 1 to Difficulty do
14412: LD_ADDR_VAR 0 2
14416: PUSH
14417: DOUBLE
14418: LD_INT 1
14420: DEC
14421: ST_TO_ADDR
14422: LD_OWVAR 67
14426: PUSH
14427: FOR_TO
14428: IFFALSE 14563
// begin hc_sex = sex_male ;
14430: LD_ADDR_OWVAR 27
14434: PUSH
14435: LD_INT 1
14437: ST_TO_ADDR
// uc_side = 0 ;
14438: LD_ADDR_OWVAR 20
14442: PUSH
14443: LD_INT 0
14445: ST_TO_ADDR
// uc_nation = nation_nature ;
14446: LD_ADDR_OWVAR 21
14450: PUSH
14451: LD_INT 0
14453: ST_TO_ADDR
// hc_class = class_tiger ;
14454: LD_ADDR_OWVAR 28
14458: PUSH
14459: LD_INT 14
14461: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14462: LD_ADDR_OWVAR 31
14466: PUSH
14467: LD_EXP 14
14471: PUSH
14472: LD_INT 0
14474: PUSH
14475: LD_INT 0
14477: PUSH
14478: LD_INT 0
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14487: LD_ADDR_OWVAR 35
14491: PUSH
14492: LD_INT 30
14494: PPUSH
14495: LD_INT 40
14497: PPUSH
14498: CALL_OW 12
14502: PUSH
14503: LD_INT 40
14505: PPUSH
14506: LD_INT 50
14508: PPUSH
14509: CALL_OW 12
14513: PUSH
14514: LD_INT 50
14516: PPUSH
14517: LD_INT 60
14519: PPUSH
14520: CALL_OW 12
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: PUSH
14530: LD_OWVAR 67
14534: ARRAY
14535: ST_TO_ADDR
// un = CreateHuman ;
14536: LD_ADDR_VAR 0 3
14540: PUSH
14541: CALL_OW 44
14545: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14546: LD_VAR 0 3
14550: PPUSH
14551: LD_INT 27
14553: PPUSH
14554: LD_INT 0
14556: PPUSH
14557: CALL_OW 49
// end ;
14561: GO 14427
14563: POP
14564: POP
// end ; end_of_file
14565: LD_VAR 0 1
14569: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 255
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: PUSH
14582: LD_INT 10
14584: PPUSH
14585: CALL_OW 255
14589: PUSH
14590: LD_INT 1
14592: EQUAL
14593: AND
14594: PUSH
14595: LD_EXP 20
14599: PUSH
14600: LD_INT 1
14602: EQUAL
14603: AND
14604: PUSH
14605: LD_INT 22
14607: PUSH
14608: LD_INT 3
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 21
14617: PUSH
14618: LD_INT 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 34
14627: PUSH
14628: LD_INT 51
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: LD_INT 58
14640: PUSH
14641: EMPTY
14642: LIST
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 69
14658: PUSH
14659: LD_INT 0
14661: EQUAL
14662: AND
14663: IFFALSE 14754
14665: GO 14667
14667: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14668: LD_INT 9450
14670: PUSH
14671: LD_INT 8400
14673: PUSH
14674: LD_INT 6300
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: LD_OWVAR 67
14686: ARRAY
14687: PPUSH
14688: CALL_OW 67
// if cargoEscape = 1 then
14692: LD_EXP 20
14696: PUSH
14697: LD_INT 1
14699: EQUAL
14700: IFFALSE 14754
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14702: LD_EXP 9
14706: PPUSH
14707: LD_STRING D6-Pow-1
14709: PPUSH
14710: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14714: LD_EXP 1
14718: PPUSH
14719: LD_STRING D6-JMM-1
14721: PPUSH
14722: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14726: LD_EXP 9
14730: PPUSH
14731: LD_STRING D6-Pow-2
14733: PPUSH
14734: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14738: LD_EXP 1
14742: PPUSH
14743: LD_STRING D6-JMM-2
14745: PPUSH
14746: CALL_OW 88
// FinishMission ;
14750: CALL 14962 0 0
// end ; end ;
14754: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14755: LD_INT 1
14757: PPUSH
14758: CALL_OW 255
14762: PUSH
14763: LD_INT 1
14765: EQUAL
14766: PUSH
14767: LD_INT 10
14769: PPUSH
14770: CALL_OW 255
14774: PUSH
14775: LD_INT 1
14777: EQUAL
14778: AND
14779: PUSH
14780: LD_EXP 20
14784: PUSH
14785: LD_INT 1
14787: GREATER
14788: AND
14789: IFFALSE 14856
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14797: LD_INT 11550
14799: PUSH
14800: LD_INT 10500
14802: PUSH
14803: LD_INT 9450
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PUSH
14811: LD_OWVAR 67
14815: ARRAY
14816: PPUSH
14817: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14821: LD_INT 1
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_OWVAR 67
14839: ARRAY
14840: PPUSH
14841: LD_INT 13
14843: PPUSH
14844: CALL 12953 0 2
// lastBattle = 1 ;
14848: LD_ADDR_EXP 27
14852: PUSH
14853: LD_INT 1
14855: ST_TO_ADDR
// end ;
14856: PPOPN 1
14858: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14859: LD_EXP 27
14863: PUSH
14864: LD_INT 1
14866: EQUAL
14867: PUSH
14868: LD_INT 26
14870: PPUSH
14871: LD_INT 22
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 21
14883: PUSH
14884: LD_INT 1
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 70
14899: PUSH
14900: LD_INT 0
14902: EQUAL
14903: AND
14904: IFFALSE 14961
14906: GO 14908
14908: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14909: LD_EXP 9
14913: PPUSH
14914: LD_STRING D6-Pow-1
14916: PPUSH
14917: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14921: LD_EXP 1
14925: PPUSH
14926: LD_STRING D6-JMM-1
14928: PPUSH
14929: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14933: LD_EXP 9
14937: PPUSH
14938: LD_STRING D6-Pow-2
14940: PPUSH
14941: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14945: LD_EXP 1
14949: PPUSH
14950: LD_STRING D6-JMM-2
14952: PPUSH
14953: CALL_OW 88
// FinishMission ;
14957: CALL 14962 0 0
// end ;
14961: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14962: LD_INT 0
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
// if tick <= 18 18$00 then
14969: LD_OWVAR 1
14973: PUSH
14974: LD_INT 37800
14976: LESSEQUAL
14977: IFFALSE 14986
// SetAchievement ( ACH_ASPEED_2 ) ;
14979: LD_STRING ACH_ASPEED_2
14981: PPUSH
14982: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 21
15003: PUSH
15004: LD_INT 2
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 24
15013: PUSH
15014: LD_INT 251
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: PPUSH
15026: CALL_OW 69
15030: ST_TO_ADDR
// if tmp then
15031: LD_VAR 0 2
15035: IFFALSE 15049
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15037: LD_VAR 0 2
15041: PPUSH
15042: LD_STRING 02_tanks_1
15044: PPUSH
15045: CALL 10426 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15049: LD_EXP 21
15053: PUSH
15054: LD_INT 1
15056: EQUAL
15057: PUSH
15058: LD_EXP 8
15062: PPUSH
15063: CALL_OW 300
15067: AND
15068: IFFALSE 15082
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15070: LD_EXP 21
15074: PPUSH
15075: LD_STRING 02_mikhailStatus_1
15077: PPUSH
15078: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 274
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 275
15097: PPUSH
15098: LD_STRING 02_resources_4
15100: PPUSH
15101: CALL_OW 39
// m1 := false ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_INT 0
15112: ST_TO_ADDR
// m2 := false ;
15113: LD_ADDR_VAR 0 4
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// m3 := false ;
15121: LD_ADDR_VAR 0 5
15125: PUSH
15126: LD_INT 0
15128: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 274
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 275
15144: PUSH
15145: LD_INT 200
15147: GREATEREQUAL
15148: IFFALSE 15170
// begin AddMedal ( Cans , 1 ) ;
15150: LD_STRING Cans
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 101
// m1 := true ;
15160: LD_ADDR_VAR 0 3
15164: PUSH
15165: LD_INT 1
15167: ST_TO_ADDR
// end else
15168: GO 15181
// begin AddMedal ( Cans , - 1 ) ;
15170: LD_STRING Cans
15172: PPUSH
15173: LD_INT 1
15175: NEG
15176: PPUSH
15177: CALL_OW 101
// end ; if deadsCounter < 2 then
15181: LD_EXP 31
15185: PUSH
15186: LD_INT 2
15188: LESS
15189: IFFALSE 15211
// begin AddMedal ( Deaths , 1 ) ;
15191: LD_STRING Deaths
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
// m2 := true ;
15201: LD_ADDR_VAR 0 4
15205: PUSH
15206: LD_INT 1
15208: ST_TO_ADDR
// end else
15209: GO 15222
// begin AddMedal ( Deaths , - 1 ) ;
15211: LD_STRING Deaths
15213: PPUSH
15214: LD_INT 1
15216: NEG
15217: PPUSH
15218: CALL_OW 101
// end ; if mikhailStatus = 0 then
15222: LD_EXP 21
15226: PUSH
15227: LD_INT 0
15229: EQUAL
15230: IFFALSE 15243
// AddMedal ( Prisoner , - 1 ) ;
15232: LD_STRING Prisoner
15234: PPUSH
15235: LD_INT 1
15237: NEG
15238: PPUSH
15239: CALL_OW 101
// if mikhailStatus = 1 then
15243: LD_EXP 21
15247: PUSH
15248: LD_INT 1
15250: EQUAL
15251: IFFALSE 15271
// begin AddMedal ( Prisoner , 1 ) ;
15253: LD_STRING Prisoner
15255: PPUSH
15256: LD_INT 1
15258: PPUSH
15259: CALL_OW 101
// m3 := true ;
15263: LD_ADDR_VAR 0 5
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15271: LD_EXP 21
15275: PUSH
15276: LD_INT 2
15278: EQUAL
15279: IFFALSE 15299
// begin AddMedal ( Prisoner , 2 ) ;
15281: LD_STRING Prisoner
15283: PPUSH
15284: LD_INT 2
15286: PPUSH
15287: CALL_OW 101
// m3 := true ;
15291: LD_ADDR_VAR 0 5
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15299: LD_EXP 21
15303: PUSH
15304: LD_INT 3
15306: EQUAL
15307: IFFALSE 15320
// AddMedal ( Prisoner , - 2 ) ;
15309: LD_STRING Prisoner
15311: PPUSH
15312: LD_INT 2
15314: NEG
15315: PPUSH
15316: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15320: LD_OWVAR 67
15324: PUSH
15325: LD_INT 3
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 3
15333: AND
15334: PUSH
15335: LD_VAR 0 4
15339: AND
15340: PUSH
15341: LD_VAR 0 5
15345: AND
15346: IFFALSE 15358
// SetAchievementEX ( ACH_AMER , 2 ) ;
15348: LD_STRING ACH_AMER
15350: PPUSH
15351: LD_INT 2
15353: PPUSH
15354: CALL_OW 564
// GiveMedals ( MAIN ) ;
15358: LD_STRING MAIN
15360: PPUSH
15361: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15365: LD_INT 22
15367: PUSH
15368: LD_INT 1
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 23
15377: PUSH
15378: LD_INT 1
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 21
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 69
15404: PPUSH
15405: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15409: LD_EXP 1
15413: PPUSH
15414: LD_EXP 33
15418: PUSH
15419: LD_STRING JMM
15421: STR
15422: PPUSH
15423: CALL_OW 38
// if IsOK ( Bobby ) then
15427: LD_EXP 2
15431: PPUSH
15432: CALL_OW 302
15436: IFFALSE 15456
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15438: LD_EXP 2
15442: PPUSH
15443: LD_EXP 33
15447: PUSH
15448: LD_STRING Bobby
15450: STR
15451: PPUSH
15452: CALL_OW 38
// if IsOK ( Cyrus ) then
15456: LD_EXP 3
15460: PPUSH
15461: CALL_OW 302
15465: IFFALSE 15485
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15467: LD_EXP 3
15471: PPUSH
15472: LD_EXP 33
15476: PUSH
15477: LD_STRING Cyrus
15479: STR
15480: PPUSH
15481: CALL_OW 38
// if IsOK ( Lisa ) then
15485: LD_EXP 4
15489: PPUSH
15490: CALL_OW 302
15494: IFFALSE 15514
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15496: LD_EXP 4
15500: PPUSH
15501: LD_EXP 33
15505: PUSH
15506: LD_STRING Lisa
15508: STR
15509: PPUSH
15510: CALL_OW 38
// if IsOK ( Khatam ) then
15514: LD_EXP 5
15518: PPUSH
15519: CALL_OW 302
15523: IFFALSE 15543
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15525: LD_EXP 5
15529: PPUSH
15530: LD_EXP 33
15534: PUSH
15535: LD_STRING Khatam
15537: STR
15538: PPUSH
15539: CALL_OW 38
// if IsOK ( Brian ) then
15543: LD_EXP 6
15547: PPUSH
15548: CALL_OW 302
15552: IFFALSE 15572
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15554: LD_EXP 6
15558: PPUSH
15559: LD_EXP 33
15563: PUSH
15564: LD_STRING Brian
15566: STR
15567: PPUSH
15568: CALL_OW 38
// if IsOk ( Jerry ) then
15572: LD_EXP 7
15576: PPUSH
15577: CALL_OW 302
15581: IFFALSE 15601
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15583: LD_EXP 7
15587: PPUSH
15588: LD_EXP 33
15592: PUSH
15593: LD_STRING Jerry
15595: STR
15596: PPUSH
15597: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15601: LD_EXP 21
15605: PUSH
15606: LD_INT 1
15608: EQUAL
15609: PUSH
15610: LD_EXP 8
15614: PPUSH
15615: CALL_OW 255
15619: PUSH
15620: LD_INT 1
15622: EQUAL
15623: AND
15624: PUSH
15625: LD_EXP 8
15629: PPUSH
15630: CALL_OW 302
15634: AND
15635: IFFALSE 15655
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15637: LD_EXP 8
15641: PPUSH
15642: LD_EXP 33
15646: PUSH
15647: LD_STRING Mikhail
15649: STR
15650: PPUSH
15651: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15655: LD_INT 50
15657: PUSH
15658: EMPTY
15659: LIST
15660: PUSH
15661: LD_INT 22
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 21
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: LIST
15685: PPUSH
15686: CALL_OW 69
15690: PUSH
15691: LD_EXP 1
15695: PUSH
15696: LD_EXP 2
15700: PUSH
15701: LD_EXP 3
15705: PUSH
15706: LD_EXP 4
15710: PUSH
15711: LD_EXP 5
15715: PUSH
15716: LD_EXP 6
15720: PUSH
15721: LD_EXP 7
15725: PUSH
15726: LD_EXP 8
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: DIFF
15741: PPUSH
15742: LD_STRING 02_other_survivors
15744: PPUSH
15745: CALL_OW 38
// YouWin ;
15749: CALL_OW 103
// end ; end_of_file
15753: LD_VAR 0 1
15757: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
15758: GO 15760
15760: DISABLE
// begin ru_radar := 98 ;
15761: LD_ADDR_EXP 35
15765: PUSH
15766: LD_INT 98
15768: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15769: LD_ADDR_EXP 36
15773: PUSH
15774: LD_INT 89
15776: ST_TO_ADDR
// us_hack := 99 ;
15777: LD_ADDR_EXP 37
15781: PUSH
15782: LD_INT 99
15784: ST_TO_ADDR
// us_artillery := 97 ;
15785: LD_ADDR_EXP 38
15789: PUSH
15790: LD_INT 97
15792: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15793: LD_ADDR_EXP 39
15797: PUSH
15798: LD_INT 91
15800: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
15801: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
15807: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL_OW 264
15817: PUSH
15818: LD_EXP 39
15822: EQUAL
15823: IFFALSE 15895
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15825: LD_INT 68
15827: PPUSH
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 255
15837: PPUSH
15838: CALL_OW 321
15842: PUSH
15843: LD_INT 2
15845: EQUAL
15846: IFFALSE 15858
// eff := 70 else
15848: LD_ADDR_VAR 0 6
15852: PUSH
15853: LD_INT 70
15855: ST_TO_ADDR
15856: GO 15866
// eff := 30 ;
15858: LD_ADDR_VAR 0 6
15862: PUSH
15863: LD_INT 30
15865: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 250
15875: PPUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 251
15885: PPUSH
15886: LD_VAR 0 6
15890: PPUSH
15891: CALL_OW 495
// end ; end ;
15895: LD_VAR 0 4
15899: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
15900: LD_INT 0
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
// if cmd = 124 then
15908: LD_VAR 0 1
15912: PUSH
15913: LD_INT 124
15915: EQUAL
15916: IFFALSE 16122
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
15918: LD_ADDR_VAR 0 5
15922: PUSH
15923: LD_INT 2
15925: PUSH
15926: LD_INT 34
15928: PUSH
15929: LD_INT 53
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 34
15938: PUSH
15939: LD_INT 14
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: ST_TO_ADDR
// if not tmp then
15956: LD_VAR 0 5
15960: NOT
15961: IFFALSE 15965
// exit ;
15963: GO 16122
// for i in tmp do
15965: LD_ADDR_VAR 0 3
15969: PUSH
15970: LD_VAR 0 5
15974: PUSH
15975: FOR_IN
15976: IFFALSE 16120
// begin taskList := GetTaskList ( i ) ;
15978: LD_ADDR_VAR 0 6
15982: PUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: CALL_OW 437
15992: ST_TO_ADDR
// if not taskList then
15993: LD_VAR 0 6
15997: NOT
15998: IFFALSE 16002
// continue ;
16000: GO 15975
// for j = 1 to taskList do
16002: LD_ADDR_VAR 0 4
16006: PUSH
16007: DOUBLE
16008: LD_INT 1
16010: DEC
16011: ST_TO_ADDR
16012: LD_VAR 0 6
16016: PUSH
16017: FOR_TO
16018: IFFALSE 16116
// if taskList [ j ] [ 1 ] = | then
16020: LD_VAR 0 6
16024: PUSH
16025: LD_VAR 0 4
16029: ARRAY
16030: PUSH
16031: LD_INT 1
16033: ARRAY
16034: PUSH
16035: LD_STRING |
16037: EQUAL
16038: IFFALSE 16114
// begin _taskList := Delete ( taskList , 1 ) ;
16040: LD_ADDR_VAR 0 7
16044: PUSH
16045: LD_VAR 0 6
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: CALL_OW 3
16057: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
16058: LD_VAR 0 3
16062: PPUSH
16063: LD_VAR 0 7
16067: PPUSH
16068: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
16072: LD_VAR 0 3
16076: PPUSH
16077: LD_VAR 0 6
16081: PUSH
16082: LD_VAR 0 4
16086: ARRAY
16087: PUSH
16088: LD_INT 2
16090: ARRAY
16091: PPUSH
16092: LD_VAR 0 6
16096: PUSH
16097: LD_VAR 0 4
16101: ARRAY
16102: PUSH
16103: LD_INT 3
16105: ARRAY
16106: PPUSH
16107: LD_INT 8
16109: PPUSH
16110: CALL 16127 0 4
// end ;
16114: GO 16017
16116: POP
16117: POP
// end ;
16118: GO 15975
16120: POP
16121: POP
// end ; end ;
16122: LD_VAR 0 2
16126: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16127: LD_INT 0
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16138: LD_VAR 0 1
16142: NOT
16143: PUSH
16144: LD_VAR 0 2
16148: PPUSH
16149: LD_VAR 0 3
16153: PPUSH
16154: CALL_OW 488
16158: NOT
16159: OR
16160: PUSH
16161: LD_VAR 0 4
16165: NOT
16166: OR
16167: IFFALSE 16171
// exit ;
16169: GO 16511
// list := [ ] ;
16171: LD_ADDR_VAR 0 13
16175: PUSH
16176: EMPTY
16177: ST_TO_ADDR
// if x - r < 0 then
16178: LD_VAR 0 2
16182: PUSH
16183: LD_VAR 0 4
16187: MINUS
16188: PUSH
16189: LD_INT 0
16191: LESS
16192: IFFALSE 16204
// min_x := 0 else
16194: LD_ADDR_VAR 0 7
16198: PUSH
16199: LD_INT 0
16201: ST_TO_ADDR
16202: GO 16220
// min_x := x - r ;
16204: LD_ADDR_VAR 0 7
16208: PUSH
16209: LD_VAR 0 2
16213: PUSH
16214: LD_VAR 0 4
16218: MINUS
16219: ST_TO_ADDR
// if y - r < 0 then
16220: LD_VAR 0 3
16224: PUSH
16225: LD_VAR 0 4
16229: MINUS
16230: PUSH
16231: LD_INT 0
16233: LESS
16234: IFFALSE 16246
// min_y := 0 else
16236: LD_ADDR_VAR 0 8
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
16244: GO 16262
// min_y := y - r ;
16246: LD_ADDR_VAR 0 8
16250: PUSH
16251: LD_VAR 0 3
16255: PUSH
16256: LD_VAR 0 4
16260: MINUS
16261: ST_TO_ADDR
// max_x := x + r ;
16262: LD_ADDR_VAR 0 9
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: LD_VAR 0 4
16276: PLUS
16277: ST_TO_ADDR
// max_y := y + r ;
16278: LD_ADDR_VAR 0 10
16282: PUSH
16283: LD_VAR 0 3
16287: PUSH
16288: LD_VAR 0 4
16292: PLUS
16293: ST_TO_ADDR
// for _x = min_x to max_x do
16294: LD_ADDR_VAR 0 11
16298: PUSH
16299: DOUBLE
16300: LD_VAR 0 7
16304: DEC
16305: ST_TO_ADDR
16306: LD_VAR 0 9
16310: PUSH
16311: FOR_TO
16312: IFFALSE 16429
// for _y = min_y to max_y do
16314: LD_ADDR_VAR 0 12
16318: PUSH
16319: DOUBLE
16320: LD_VAR 0 8
16324: DEC
16325: ST_TO_ADDR
16326: LD_VAR 0 10
16330: PUSH
16331: FOR_TO
16332: IFFALSE 16425
// begin if not ValidHex ( _x , _y ) then
16334: LD_VAR 0 11
16338: PPUSH
16339: LD_VAR 0 12
16343: PPUSH
16344: CALL_OW 488
16348: NOT
16349: IFFALSE 16353
// continue ;
16351: GO 16331
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16353: LD_VAR 0 11
16357: PPUSH
16358: LD_VAR 0 12
16362: PPUSH
16363: CALL_OW 351
16367: PUSH
16368: LD_VAR 0 11
16372: PPUSH
16373: LD_VAR 0 12
16377: PPUSH
16378: CALL_OW 554
16382: AND
16383: IFFALSE 16423
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16385: LD_ADDR_VAR 0 13
16389: PUSH
16390: LD_VAR 0 13
16394: PPUSH
16395: LD_VAR 0 13
16399: PUSH
16400: LD_INT 1
16402: PLUS
16403: PPUSH
16404: LD_VAR 0 11
16408: PUSH
16409: LD_VAR 0 12
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 2
16422: ST_TO_ADDR
// end ;
16423: GO 16331
16425: POP
16426: POP
16427: GO 16311
16429: POP
16430: POP
// if not list then
16431: LD_VAR 0 13
16435: NOT
16436: IFFALSE 16440
// exit ;
16438: GO 16511
// for i in list do
16440: LD_ADDR_VAR 0 6
16444: PUSH
16445: LD_VAR 0 13
16449: PUSH
16450: FOR_IN
16451: IFFALSE 16509
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16453: LD_VAR 0 1
16457: PPUSH
16458: LD_STRING M
16460: PUSH
16461: LD_VAR 0 6
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PUSH
16470: LD_VAR 0 6
16474: PUSH
16475: LD_INT 2
16477: ARRAY
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: PPUSH
16503: CALL_OW 447
16507: GO 16450
16509: POP
16510: POP
// end ;
16511: LD_VAR 0 5
16515: RET
