// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15305 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 77262 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 78481 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 37214 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 37214 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 37214 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 76616 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32486 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 255
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: IFFALSE 14742
// begin ComMoveXY ( driver , 6 , 10 ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 6
14673: PPUSH
14674: LD_INT 10
14676: PPUSH
14677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14681: LD_INT 35
14683: PPUSH
14684: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 6
14695: PPUSH
14696: LD_INT 10
14698: PPUSH
14699: CALL_OW 111
// if IsDead ( driver ) then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14716
// exit ;
14714: GO 14742
// until IsAt ( driver , 6 , 10 ) ;
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 6
14723: PPUSH
14724: LD_INT 10
14726: PPUSH
14727: CALL_OW 307
14731: IFFALSE 14681
// RemoveUnit ( driver ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 64
// end ; end ;
14742: PPOPN 4
14744: END
// on Command ( cmd ) do var i , j , tmp ;
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin SOS_Command ( cmd ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 32590 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14915
// begin if GetTaskList ( i ) then
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 437
14805: IFFALSE 14913
// begin for j = 1 to GetTaskList ( i ) do
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: DOUBLE
14813: LD_INT 1
14815: DEC
14816: ST_TO_ADDR
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 437
14826: PUSH
14827: FOR_TO
14828: IFFALSE 14911
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: CALL_OW 437
14844: PUSH
14845: LD_VAR 0 3
14849: ARRAY
14850: PUSH
14851: LD_INT 4
14853: ARRAY
14854: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14855: LD_VAR 0 4
14859: PPUSH
14860: CALL_OW 255
14864: PUSH
14865: LD_INT 3
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 4
14873: PPUSH
14874: CALL_OW 247
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: AND
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 51
14896: EQUAL
14897: AND
14898: IFFALSE 14909
// ComStop ( i ) ;
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 141
// end ;
14909: GO 14827
14911: POP
14912: POP
// end ; end ;
14913: GO 14793
14915: POP
14916: POP
// end ;
14917: PPOPN 4
14919: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_EXP 8
14929: EQUAL
14930: PUSH
14931: LD_EXP 21
14935: PUSH
14936: LD_INT 4
14938: NONEQUAL
14939: AND
14940: IFFALSE 15092
// begin if IsOk ( Mikhail ) then
14942: LD_EXP 8
14946: PPUSH
14947: CALL_OW 302
14951: IFFALSE 14959
// AskMikhail else
14953: CALL 7486 0 0
14957: GO 15092
// if IsOk ( llab1 ) then
14959: LD_INT 23
14961: PPUSH
14962: CALL_OW 302
14966: IFFALSE 15055
// begin InGameOn ;
14968: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14972: LD_EXP 8
14976: PPUSH
14977: LD_INT 6
14979: PPUSH
14980: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14984: LD_INT 23
14986: PPUSH
14987: LD_INT 6
14989: PPUSH
14990: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14994: LD_EXP 8
14998: PPUSH
14999: LD_INT 23
15001: PPUSH
15002: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15006: LD_INT 35
15008: PPUSH
15009: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15013: LD_EXP 8
15017: PPUSH
15018: CALL_OW 310
15022: PUSH
15023: LD_INT 23
15025: EQUAL
15026: PUSH
15027: LD_EXP 8
15031: PPUSH
15032: CALL_OW 301
15036: OR
15037: IFFALSE 15006
// SetSide ( llab1 , 1 ) ;
15039: LD_INT 23
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 235
// InGameOff ;
15049: CALL_OW 9
// end else
15053: GO 15092
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15055: LD_INT 3
15057: PPUSH
15058: LD_INT 6
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15071: LD_EXP 8
15075: PPUSH
15076: LD_INT 6
15078: PPUSH
15079: CALL_OW 235
// ComHold ( Mikhail ) ;
15083: LD_EXP 8
15087: PPUSH
15088: CALL_OW 140
// end ; end ; end ;
15092: PPOPN 2
15094: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL 32606 0 2
// end ;
15109: PPOPN 2
15111: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15112: LD_EXP 8
15116: PPUSH
15117: CALL_OW 257
15121: PUSH
15122: LD_INT 3
15124: NONEQUAL
15125: IFFALSE 15143
15127: GO 15129
15129: DISABLE
// begin enable ;
15130: ENABLE
// SetClass ( Mikhail , 3 ) ;
15131: LD_EXP 8
15135: PPUSH
15136: LD_INT 3
15138: PPUSH
15139: CALL_OW 336
// end ; end_of_file
15143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15144: LD_INT 22
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 4
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: PUSH
15228: LD_INT 0
15230: EQUAL
15231: AND
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: AND
15245: PUSH
15246: LD_INT 10
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_INT 3
15256: EQUAL
15257: AND
15258: IFFALSE 15270
15260: GO 15262
15262: DISABLE
// YouLost ( Engineer ) ;
15263: LD_STRING Engineer
15265: PPUSH
15266: CALL_OW 104
15270: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 3
15281: EQUAL
15282: PUSH
15283: LD_EXP 27
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15304
15294: GO 15296
15296: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15297: LD_STRING DepotCaptured
15299: PPUSH
15300: CALL_OW 104
15304: END
// export function PrepareTigers ; var i , un ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_INT 2
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: LD_INT 4
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_OWVAR 67
15342: ARRAY
15343: PUSH
15344: FOR_TO
15345: IFFALSE 15460
// begin uc_side := 0 ;
15347: LD_ADDR_OWVAR 20
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// uc_nation := nation_nature ;
15355: LD_ADDR_OWVAR 21
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// hc_sex := sex_male ;
15363: LD_ADDR_OWVAR 27
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// hc_class := class_tiger ;
15371: LD_ADDR_OWVAR 28
15375: PUSH
15376: LD_INT 14
15378: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15379: LD_ADDR_OWVAR 31
15383: PUSH
15384: LD_EXP 14
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 40
15414: PUSH
15415: LD_INT 45
15417: PUSH
15418: LD_INT 50
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: ST_TO_ADDR
// un = CreateHuman ;
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 27
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 49
// end ;
15458: GO 15344
15460: POP
15461: POP
// end ; end_of_file
15462: LD_VAR 0 1
15466: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 255
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: PUSH
15479: LD_INT 10
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_EXP 20
15496: PUSH
15497: LD_INT 1
15499: EQUAL
15500: AND
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 3
15534: PUSH
15535: LD_INT 58
15537: PUSH
15538: EMPTY
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PUSH
15556: LD_INT 0
15558: EQUAL
15559: AND
15560: IFFALSE 15651
15562: GO 15564
15564: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15565: LD_INT 9450
15567: PUSH
15568: LD_INT 8400
15570: PUSH
15571: LD_INT 6300
15573: PUSH
15574: LD_INT 6300
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: PUSH
15583: LD_OWVAR 67
15587: ARRAY
15588: PPUSH
15589: CALL_OW 67
// if cargoEscape then
15593: LD_EXP 20
15597: IFFALSE 15651
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15599: LD_EXP 9
15603: PPUSH
15604: LD_STRING D6-Pow-1
15606: PPUSH
15607: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15611: LD_EXP 1
15615: PPUSH
15616: LD_STRING D6-JMM-1
15618: PPUSH
15619: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15623: LD_EXP 9
15627: PPUSH
15628: LD_STRING D6-Pow-2
15630: PPUSH
15631: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_STRING D6-JMM-2
15642: PPUSH
15643: CALL_OW 88
// FinishMission ;
15647: CALL 15867 0 0
// end ; end ;
15651: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 255
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: PUSH
15664: LD_INT 10
15666: PPUSH
15667: CALL_OW 255
15671: PUSH
15672: LD_INT 1
15674: EQUAL
15675: AND
15676: PUSH
15677: LD_EXP 20
15681: PUSH
15682: LD_INT 1
15684: GREATER
15685: AND
15686: IFFALSE 15761
15688: GO 15690
15690: DISABLE
15691: LD_INT 0
15693: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15694: LD_INT 11550
15696: PUSH
15697: LD_INT 10500
15699: PUSH
15700: LD_INT 9450
15702: PUSH
15703: LD_INT 8400
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_OWVAR 67
15716: ARRAY
15717: PPUSH
15718: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: LD_OWVAR 67
15744: ARRAY
15745: PPUSH
15746: LD_INT 13
15748: PPUSH
15749: CALL 13342 0 2
// lastBattle = 1 ;
15753: LD_ADDR_EXP 27
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// end ;
15761: PPOPN 1
15763: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15764: LD_EXP 27
15768: PUSH
15769: LD_INT 1
15771: EQUAL
15772: PUSH
15773: LD_INT 26
15775: PPUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 70
15804: PUSH
15805: LD_INT 0
15807: EQUAL
15808: AND
15809: IFFALSE 15866
15811: GO 15813
15813: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15814: LD_EXP 9
15818: PPUSH
15819: LD_STRING D6-Pow-1
15821: PPUSH
15822: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15826: LD_EXP 1
15830: PPUSH
15831: LD_STRING D6-JMM-1
15833: PPUSH
15834: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15838: LD_EXP 9
15842: PPUSH
15843: LD_STRING D6-Pow-2
15845: PPUSH
15846: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15850: LD_EXP 1
15854: PPUSH
15855: LD_STRING D6-JMM-2
15857: PPUSH
15858: CALL_OW 88
// FinishMission ;
15862: CALL 15867 0 0
// end ;
15866: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// if tick <= 18 18$00 then
15874: LD_OWVAR 1
15878: PUSH
15879: LD_INT 37800
15881: LESSEQUAL
15882: IFFALSE 15891
// SetAchievement ( ACH_ASPEED_2 ) ;
15884: LD_STRING ACH_ASPEED_2
15886: PPUSH
15887: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 24
15918: PUSH
15919: LD_INT 251
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 69
15935: ST_TO_ADDR
// if tmp then
15936: LD_VAR 0 2
15940: IFFALSE 15954
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_STRING 02_tanks_1
15949: PPUSH
15950: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15954: LD_EXP 21
15958: PUSH
15959: LD_INT 1
15961: EQUAL
15962: PUSH
15963: LD_EXP 8
15967: PPUSH
15968: CALL_OW 300
15972: AND
15973: IFFALSE 15987
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15975: LD_EXP 21
15979: PPUSH
15980: LD_STRING 02_mikhailStatus_1
15982: PPUSH
15983: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 274
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 275
16002: PPUSH
16003: LD_STRING 02_resources_4
16005: PPUSH
16006: CALL_OW 39
// m1 := false ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// m2 := false ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// m3 := false ;
16026: LD_ADDR_VAR 0 5
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 274
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 275
16049: PUSH
16050: LD_INT 200
16052: GREATEREQUAL
16053: IFFALSE 16075
// begin AddMedal ( Cans , 1 ) ;
16055: LD_STRING Cans
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 101
// m1 := true ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// end else
16073: GO 16086
// begin AddMedal ( Cans , - 1 ) ;
16075: LD_STRING Cans
16077: PPUSH
16078: LD_INT 1
16080: NEG
16081: PPUSH
16082: CALL_OW 101
// end ; if deadsCounter < 2 then
16086: LD_EXP 31
16090: PUSH
16091: LD_INT 2
16093: LESS
16094: IFFALSE 16116
// begin AddMedal ( Deaths , 1 ) ;
16096: LD_STRING Deaths
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 101
// m2 := true ;
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end else
16114: GO 16127
// begin AddMedal ( Deaths , - 1 ) ;
16116: LD_STRING Deaths
16118: PPUSH
16119: LD_INT 1
16121: NEG
16122: PPUSH
16123: CALL_OW 101
// end ; if mikhailStatus = 0 then
16127: LD_EXP 21
16131: PUSH
16132: LD_INT 0
16134: EQUAL
16135: IFFALSE 16148
// AddMedal ( Prisoner , - 1 ) ;
16137: LD_STRING Prisoner
16139: PPUSH
16140: LD_INT 1
16142: NEG
16143: PPUSH
16144: CALL_OW 101
// if mikhailStatus = 1 then
16148: LD_EXP 21
16152: PUSH
16153: LD_INT 1
16155: EQUAL
16156: IFFALSE 16176
// begin AddMedal ( Prisoner , 1 ) ;
16158: LD_STRING Prisoner
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 101
// m3 := true ;
16168: LD_ADDR_VAR 0 5
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16176: LD_EXP 21
16180: PUSH
16181: LD_INT 2
16183: EQUAL
16184: IFFALSE 16204
// begin AddMedal ( Prisoner , 2 ) ;
16186: LD_STRING Prisoner
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 101
// m3 := true ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16204: LD_EXP 21
16208: PUSH
16209: LD_INT 3
16211: EQUAL
16212: IFFALSE 16225
// AddMedal ( Prisoner , - 2 ) ;
16214: LD_STRING Prisoner
16216: PPUSH
16217: LD_INT 2
16219: NEG
16220: PPUSH
16221: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: GREATEREQUAL
16233: PUSH
16234: LD_VAR 0 3
16238: AND
16239: PUSH
16240: LD_VAR 0 4
16244: AND
16245: PUSH
16246: LD_VAR 0 5
16250: AND
16251: IFFALSE 16263
// SetAchievementEX ( ACH_AMER , 2 ) ;
16253: LD_STRING ACH_AMER
16255: PPUSH
16256: LD_INT 2
16258: PPUSH
16259: CALL_OW 564
// GiveMedals ( MAIN ) ;
16263: LD_STRING MAIN
16265: PPUSH
16266: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: PPUSH
16310: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16314: LD_EXP 1
16318: PPUSH
16319: LD_EXP 33
16323: PUSH
16324: LD_STRING JMM
16326: STR
16327: PPUSH
16328: CALL_OW 38
// if IsOK ( Bobby ) then
16332: LD_EXP 2
16336: PPUSH
16337: CALL_OW 302
16341: IFFALSE 16361
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16343: LD_EXP 2
16347: PPUSH
16348: LD_EXP 33
16352: PUSH
16353: LD_STRING Bobby
16355: STR
16356: PPUSH
16357: CALL_OW 38
// if IsOK ( Cyrus ) then
16361: LD_EXP 3
16365: PPUSH
16366: CALL_OW 302
16370: IFFALSE 16390
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16372: LD_EXP 3
16376: PPUSH
16377: LD_EXP 33
16381: PUSH
16382: LD_STRING Cyrus
16384: STR
16385: PPUSH
16386: CALL_OW 38
// if IsOK ( Lisa ) then
16390: LD_EXP 4
16394: PPUSH
16395: CALL_OW 302
16399: IFFALSE 16426
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16401: LD_STRING enableBioCharacter(BIO_LISA)
16403: PPUSH
16404: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16408: LD_EXP 4
16412: PPUSH
16413: LD_EXP 33
16417: PUSH
16418: LD_STRING Lisa
16420: STR
16421: PPUSH
16422: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16426: LD_EXP 5
16430: PPUSH
16431: CALL_OW 302
16435: IFFALSE 16462
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16437: LD_STRING enableBioCharacter(BIO_KHAT)
16439: PPUSH
16440: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16444: LD_EXP 5
16448: PPUSH
16449: LD_EXP 33
16453: PUSH
16454: LD_STRING Khatam
16456: STR
16457: PPUSH
16458: CALL_OW 38
// end ; if IsOK ( Brian ) then
16462: LD_EXP 6
16466: PPUSH
16467: CALL_OW 302
16471: IFFALSE 16491
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16473: LD_EXP 6
16477: PPUSH
16478: LD_EXP 33
16482: PUSH
16483: LD_STRING Brian
16485: STR
16486: PPUSH
16487: CALL_OW 38
// if IsOk ( Jerry ) then
16491: LD_EXP 7
16495: PPUSH
16496: CALL_OW 302
16500: IFFALSE 16520
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16502: LD_EXP 7
16506: PPUSH
16507: LD_EXP 33
16511: PUSH
16512: LD_STRING Jerry
16514: STR
16515: PPUSH
16516: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16520: LD_EXP 21
16524: PUSH
16525: LD_INT 1
16527: EQUAL
16528: PUSH
16529: LD_EXP 8
16533: PPUSH
16534: CALL_OW 255
16538: PUSH
16539: LD_INT 1
16541: EQUAL
16542: AND
16543: PUSH
16544: LD_EXP 8
16548: PPUSH
16549: CALL_OW 302
16553: AND
16554: IFFALSE 16581
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16556: LD_STRING enableBioCharacter(BIO_MICH)
16558: PPUSH
16559: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16563: LD_EXP 8
16567: PPUSH
16568: LD_EXP 33
16572: PUSH
16573: LD_STRING Mikhail
16575: STR
16576: PPUSH
16577: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16581: LD_INT 50
16583: PUSH
16584: EMPTY
16585: LIST
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_EXP 1
16621: PUSH
16622: LD_EXP 2
16626: PUSH
16627: LD_EXP 3
16631: PUSH
16632: LD_EXP 4
16636: PUSH
16637: LD_EXP 5
16641: PUSH
16642: LD_EXP 6
16646: PUSH
16647: LD_EXP 7
16651: PUSH
16652: LD_EXP 8
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: DIFF
16667: PPUSH
16668: LD_STRING 02_other_survivors
16670: PPUSH
16671: CALL_OW 38
// YouWin ;
16675: CALL_OW 103
// end ; end_of_file end_of_file
16679: LD_VAR 0 1
16683: RET
// export globalGameSaveCounter ; every 0 0$1 do
16684: GO 16686
16686: DISABLE
// begin enable ;
16687: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16688: LD_STRING updateTimer(
16690: PUSH
16691: LD_OWVAR 1
16695: STR
16696: PUSH
16697: LD_STRING );
16699: STR
16700: PPUSH
16701: CALL_OW 559
// end ;
16705: END
// every 0 0$1 do
16706: GO 16708
16708: DISABLE
// begin globalGameSaveCounter := 0 ;
16709: LD_ADDR_EXP 36
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16717: LD_STRING setGameSaveCounter(0)
16719: PPUSH
16720: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16724: LD_STRING initStreamRollete();
16726: PPUSH
16727: CALL_OW 559
// InitStreamMode ;
16731: CALL 18057 0 0
// DefineStreamItems ( false ) ;
16735: LD_INT 0
16737: PPUSH
16738: CALL 18521 0 1
// end ;
16742: END
// export function SOS_MapStart ( ) ; begin
16743: LD_INT 0
16745: PPUSH
// if streamModeActive then
16746: LD_EXP 37
16750: IFFALSE 16759
// DefineStreamItems ( true ) ;
16752: LD_INT 1
16754: PPUSH
16755: CALL 18521 0 1
// UpdateLuaVariables ( ) ;
16759: CALL 16776 0 0
// UpdateFactoryWaypoints ( ) ;
16763: CALL 31390 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16767: CALL 31647 0 0
// end ;
16771: LD_VAR 0 1
16775: RET
// function UpdateLuaVariables ( ) ; begin
16776: LD_INT 0
16778: PPUSH
// if globalGameSaveCounter then
16779: LD_EXP 36
16783: IFFALSE 16817
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16785: LD_ADDR_EXP 36
16789: PUSH
16790: LD_EXP 36
16794: PPUSH
16795: CALL 76277 0 1
16799: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16800: LD_STRING setGameSaveCounter(
16802: PUSH
16803: LD_EXP 36
16807: STR
16808: PUSH
16809: LD_STRING )
16811: STR
16812: PPUSH
16813: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16817: LD_STRING setGameDifficulty(
16819: PUSH
16820: LD_OWVAR 67
16824: STR
16825: PUSH
16826: LD_STRING )
16828: STR
16829: PPUSH
16830: CALL_OW 559
// end ;
16834: LD_VAR 0 1
16838: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16839: LD_INT 0
16841: PPUSH
// if p2 = stream_mode then
16842: LD_VAR 0 2
16846: PUSH
16847: LD_INT 100
16849: EQUAL
16850: IFFALSE 17853
// begin if not StreamModeActive then
16852: LD_EXP 37
16856: NOT
16857: IFFALSE 16867
// StreamModeActive := true ;
16859: LD_ADDR_EXP 37
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 0 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 0
16874: EQUAL
16875: IFFALSE 16881
// InitStreamMode ;
16877: CALL 18057 0 0
// if p3 = 1 then
16881: LD_VAR 0 3
16885: PUSH
16886: LD_INT 1
16888: EQUAL
16889: IFFALSE 16899
// sRocket := true ;
16891: LD_ADDR_EXP 42
16895: PUSH
16896: LD_INT 1
16898: ST_TO_ADDR
// if p3 = 2 then
16899: LD_VAR 0 3
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: IFFALSE 16917
// sSpeed := true ;
16909: LD_ADDR_EXP 41
16913: PUSH
16914: LD_INT 1
16916: ST_TO_ADDR
// if p3 = 3 then
16917: LD_VAR 0 3
16921: PUSH
16922: LD_INT 3
16924: EQUAL
16925: IFFALSE 16935
// sEngine := true ;
16927: LD_ADDR_EXP 43
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
// if p3 = 4 then
16935: LD_VAR 0 3
16939: PUSH
16940: LD_INT 4
16942: EQUAL
16943: IFFALSE 16953
// sSpec := true ;
16945: LD_ADDR_EXP 40
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// if p3 = 5 then
16953: LD_VAR 0 3
16957: PUSH
16958: LD_INT 5
16960: EQUAL
16961: IFFALSE 16971
// sLevel := true ;
16963: LD_ADDR_EXP 44
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// if p3 = 6 then
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 6
16978: EQUAL
16979: IFFALSE 16989
// sArmoury := true ;
16981: LD_ADDR_EXP 45
16985: PUSH
16986: LD_INT 1
16988: ST_TO_ADDR
// if p3 = 7 then
16989: LD_VAR 0 3
16993: PUSH
16994: LD_INT 7
16996: EQUAL
16997: IFFALSE 17007
// sRadar := true ;
16999: LD_ADDR_EXP 46
17003: PUSH
17004: LD_INT 1
17006: ST_TO_ADDR
// if p3 = 8 then
17007: LD_VAR 0 3
17011: PUSH
17012: LD_INT 8
17014: EQUAL
17015: IFFALSE 17025
// sBunker := true ;
17017: LD_ADDR_EXP 47
17021: PUSH
17022: LD_INT 1
17024: ST_TO_ADDR
// if p3 = 9 then
17025: LD_VAR 0 3
17029: PUSH
17030: LD_INT 9
17032: EQUAL
17033: IFFALSE 17043
// sHack := true ;
17035: LD_ADDR_EXP 48
17039: PUSH
17040: LD_INT 1
17042: ST_TO_ADDR
// if p3 = 10 then
17043: LD_VAR 0 3
17047: PUSH
17048: LD_INT 10
17050: EQUAL
17051: IFFALSE 17061
// sFire := true ;
17053: LD_ADDR_EXP 49
17057: PUSH
17058: LD_INT 1
17060: ST_TO_ADDR
// if p3 = 11 then
17061: LD_VAR 0 3
17065: PUSH
17066: LD_INT 11
17068: EQUAL
17069: IFFALSE 17079
// sRefresh := true ;
17071: LD_ADDR_EXP 50
17075: PUSH
17076: LD_INT 1
17078: ST_TO_ADDR
// if p3 = 12 then
17079: LD_VAR 0 3
17083: PUSH
17084: LD_INT 12
17086: EQUAL
17087: IFFALSE 17097
// sExp := true ;
17089: LD_ADDR_EXP 51
17093: PUSH
17094: LD_INT 1
17096: ST_TO_ADDR
// if p3 = 13 then
17097: LD_VAR 0 3
17101: PUSH
17102: LD_INT 13
17104: EQUAL
17105: IFFALSE 17115
// sDepot := true ;
17107: LD_ADDR_EXP 52
17111: PUSH
17112: LD_INT 1
17114: ST_TO_ADDR
// if p3 = 14 then
17115: LD_VAR 0 3
17119: PUSH
17120: LD_INT 14
17122: EQUAL
17123: IFFALSE 17133
// sFlag := true ;
17125: LD_ADDR_EXP 53
17129: PUSH
17130: LD_INT 1
17132: ST_TO_ADDR
// if p3 = 15 then
17133: LD_VAR 0 3
17137: PUSH
17138: LD_INT 15
17140: EQUAL
17141: IFFALSE 17151
// sKamikadze := true ;
17143: LD_ADDR_EXP 61
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// if p3 = 16 then
17151: LD_VAR 0 3
17155: PUSH
17156: LD_INT 16
17158: EQUAL
17159: IFFALSE 17169
// sTroll := true ;
17161: LD_ADDR_EXP 62
17165: PUSH
17166: LD_INT 1
17168: ST_TO_ADDR
// if p3 = 17 then
17169: LD_VAR 0 3
17173: PUSH
17174: LD_INT 17
17176: EQUAL
17177: IFFALSE 17187
// sSlow := true ;
17179: LD_ADDR_EXP 63
17183: PUSH
17184: LD_INT 1
17186: ST_TO_ADDR
// if p3 = 18 then
17187: LD_VAR 0 3
17191: PUSH
17192: LD_INT 18
17194: EQUAL
17195: IFFALSE 17205
// sLack := true ;
17197: LD_ADDR_EXP 64
17201: PUSH
17202: LD_INT 1
17204: ST_TO_ADDR
// if p3 = 19 then
17205: LD_VAR 0 3
17209: PUSH
17210: LD_INT 19
17212: EQUAL
17213: IFFALSE 17223
// sTank := true ;
17215: LD_ADDR_EXP 66
17219: PUSH
17220: LD_INT 1
17222: ST_TO_ADDR
// if p3 = 20 then
17223: LD_VAR 0 3
17227: PUSH
17228: LD_INT 20
17230: EQUAL
17231: IFFALSE 17241
// sRemote := true ;
17233: LD_ADDR_EXP 67
17237: PUSH
17238: LD_INT 1
17240: ST_TO_ADDR
// if p3 = 21 then
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 21
17248: EQUAL
17249: IFFALSE 17259
// sPowell := true ;
17251: LD_ADDR_EXP 68
17255: PUSH
17256: LD_INT 1
17258: ST_TO_ADDR
// if p3 = 22 then
17259: LD_VAR 0 3
17263: PUSH
17264: LD_INT 22
17266: EQUAL
17267: IFFALSE 17277
// sTeleport := true ;
17269: LD_ADDR_EXP 71
17273: PUSH
17274: LD_INT 1
17276: ST_TO_ADDR
// if p3 = 23 then
17277: LD_VAR 0 3
17281: PUSH
17282: LD_INT 23
17284: EQUAL
17285: IFFALSE 17295
// sOilTower := true ;
17287: LD_ADDR_EXP 73
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// if p3 = 24 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_INT 24
17302: EQUAL
17303: IFFALSE 17313
// sShovel := true ;
17305: LD_ADDR_EXP 74
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// if p3 = 25 then
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 25
17320: EQUAL
17321: IFFALSE 17331
// sSheik := true ;
17323: LD_ADDR_EXP 75
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// if p3 = 26 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 26
17338: EQUAL
17339: IFFALSE 17349
// sEarthquake := true ;
17341: LD_ADDR_EXP 77
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// if p3 = 27 then
17349: LD_VAR 0 3
17353: PUSH
17354: LD_INT 27
17356: EQUAL
17357: IFFALSE 17367
// sAI := true ;
17359: LD_ADDR_EXP 78
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// if p3 = 28 then
17367: LD_VAR 0 3
17371: PUSH
17372: LD_INT 28
17374: EQUAL
17375: IFFALSE 17385
// sCargo := true ;
17377: LD_ADDR_EXP 81
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// if p3 = 29 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_INT 29
17392: EQUAL
17393: IFFALSE 17403
// sDLaser := true ;
17395: LD_ADDR_EXP 82
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// if p3 = 30 then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_INT 30
17410: EQUAL
17411: IFFALSE 17421
// sExchange := true ;
17413: LD_ADDR_EXP 83
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// if p3 = 31 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 31
17428: EQUAL
17429: IFFALSE 17439
// sFac := true ;
17431: LD_ADDR_EXP 84
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if p3 = 32 then
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 32
17446: EQUAL
17447: IFFALSE 17457
// sPower := true ;
17449: LD_ADDR_EXP 85
17453: PUSH
17454: LD_INT 1
17456: ST_TO_ADDR
// if p3 = 33 then
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 33
17464: EQUAL
17465: IFFALSE 17475
// sRandom := true ;
17467: LD_ADDR_EXP 86
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// if p3 = 34 then
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 34
17482: EQUAL
17483: IFFALSE 17493
// sShield := true ;
17485: LD_ADDR_EXP 87
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// if p3 = 35 then
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 35
17500: EQUAL
17501: IFFALSE 17511
// sTime := true ;
17503: LD_ADDR_EXP 88
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if p3 = 36 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 36
17518: EQUAL
17519: IFFALSE 17529
// sTools := true ;
17521: LD_ADDR_EXP 89
17525: PUSH
17526: LD_INT 1
17528: ST_TO_ADDR
// if p3 = 101 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_INT 101
17536: EQUAL
17537: IFFALSE 17547
// sSold := true ;
17539: LD_ADDR_EXP 54
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if p3 = 102 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 102
17554: EQUAL
17555: IFFALSE 17565
// sDiff := true ;
17557: LD_ADDR_EXP 55
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// if p3 = 103 then
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 103
17572: EQUAL
17573: IFFALSE 17583
// sFog := true ;
17575: LD_ADDR_EXP 58
17579: PUSH
17580: LD_INT 1
17582: ST_TO_ADDR
// if p3 = 104 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 104
17590: EQUAL
17591: IFFALSE 17601
// sReset := true ;
17593: LD_ADDR_EXP 59
17597: PUSH
17598: LD_INT 1
17600: ST_TO_ADDR
// if p3 = 105 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_INT 105
17608: EQUAL
17609: IFFALSE 17619
// sSun := true ;
17611: LD_ADDR_EXP 60
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// if p3 = 106 then
17619: LD_VAR 0 3
17623: PUSH
17624: LD_INT 106
17626: EQUAL
17627: IFFALSE 17637
// sTiger := true ;
17629: LD_ADDR_EXP 56
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// if p3 = 107 then
17637: LD_VAR 0 3
17641: PUSH
17642: LD_INT 107
17644: EQUAL
17645: IFFALSE 17655
// sBomb := true ;
17647: LD_ADDR_EXP 57
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// if p3 = 108 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 108
17662: EQUAL
17663: IFFALSE 17673
// sWound := true ;
17665: LD_ADDR_EXP 65
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// if p3 = 109 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 109
17680: EQUAL
17681: IFFALSE 17691
// sBetray := true ;
17683: LD_ADDR_EXP 69
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// if p3 = 110 then
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 110
17698: EQUAL
17699: IFFALSE 17709
// sContamin := true ;
17701: LD_ADDR_EXP 70
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// if p3 = 111 then
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 111
17716: EQUAL
17717: IFFALSE 17727
// sOil := true ;
17719: LD_ADDR_EXP 72
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// if p3 = 112 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 112
17734: EQUAL
17735: IFFALSE 17745
// sStu := true ;
17737: LD_ADDR_EXP 76
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// if p3 = 113 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 113
17752: EQUAL
17753: IFFALSE 17763
// sBazooka := true ;
17755: LD_ADDR_EXP 79
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
// if p3 = 114 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_INT 114
17770: EQUAL
17771: IFFALSE 17781
// sMortar := true ;
17773: LD_ADDR_EXP 80
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// if p3 = 115 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_INT 115
17788: EQUAL
17789: IFFALSE 17799
// sRanger := true ;
17791: LD_ADDR_EXP 90
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
// if p3 = 116 then
17799: LD_VAR 0 3
17803: PUSH
17804: LD_INT 116
17806: EQUAL
17807: IFFALSE 17817
// sComputer := true ;
17809: LD_ADDR_EXP 91
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// if p3 = 117 then
17817: LD_VAR 0 3
17821: PUSH
17822: LD_INT 117
17824: EQUAL
17825: IFFALSE 17835
// s30 := true ;
17827: LD_ADDR_EXP 92
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// if p3 = 118 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_INT 118
17842: EQUAL
17843: IFFALSE 17853
// s60 := true ;
17845: LD_ADDR_EXP 93
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// end ; if p2 = hack_mode then
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 101
17860: EQUAL
17861: IFFALSE 17989
// begin case p3 of 1 :
17863: LD_VAR 0 3
17867: PUSH
17868: LD_INT 1
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17883
17876: POP
// hHackUnlimitedResources ; 2 :
17877: CALL 30136 0 0
17881: GO 17989
17883: LD_INT 2
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17898
17891: POP
// hHackSetLevel10 ; 3 :
17892: CALL 30269 0 0
17896: GO 17989
17898: LD_INT 3
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17913
17906: POP
// hHackSetLevel10YourUnits ; 4 :
17907: CALL 30354 0 0
17911: GO 17989
17913: LD_INT 4
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 17928
17921: POP
// hHackInvincible ; 5 :
17922: CALL 30802 0 0
17926: GO 17989
17928: LD_INT 5
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17943
17936: POP
// hHackInvisible ; 6 :
17937: CALL 30913 0 0
17941: GO 17989
17943: LD_INT 6
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17958
17951: POP
// hHackChangeYourSide ; 7 :
17952: CALL 30970 0 0
17956: GO 17989
17958: LD_INT 7
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17973
17966: POP
// hHackChangeUnitSide ; 8 :
17967: CALL 31012 0 0
17971: GO 17989
17973: LD_INT 8
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17988
17981: POP
// hHackFog ; end ;
17982: CALL 31113 0 0
17986: GO 17989
17988: POP
// end ; if p2 = game_save_mode then
17989: LD_VAR 0 2
17993: PUSH
17994: LD_INT 102
17996: EQUAL
17997: IFFALSE 18052
// begin if p3 = 1 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18019
// globalGameSaveCounter := p4 ;
18009: LD_ADDR_EXP 36
18013: PUSH
18014: LD_VAR 0 4
18018: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 2
18026: EQUAL
18027: PUSH
18028: LD_EXP 36
18032: AND
18033: IFFALSE 18052
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18035: LD_STRING setGameSaveCounter(
18037: PUSH
18038: LD_EXP 36
18042: STR
18043: PUSH
18044: LD_STRING )
18046: STR
18047: PPUSH
18048: CALL_OW 559
// end ; end ;
18052: LD_VAR 0 7
18056: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18057: LD_INT 0
18059: PPUSH
// streamModeActive := false ;
18060: LD_ADDR_EXP 37
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// normalCounter := 36 ;
18068: LD_ADDR_EXP 38
18072: PUSH
18073: LD_INT 36
18075: ST_TO_ADDR
// hardcoreCounter := 18 ;
18076: LD_ADDR_EXP 39
18080: PUSH
18081: LD_INT 18
18083: ST_TO_ADDR
// sRocket := false ;
18084: LD_ADDR_EXP 42
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sSpeed := false ;
18092: LD_ADDR_EXP 41
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sEngine := false ;
18100: LD_ADDR_EXP 43
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sSpec := false ;
18108: LD_ADDR_EXP 40
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sLevel := false ;
18116: LD_ADDR_EXP 44
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sArmoury := false ;
18124: LD_ADDR_EXP 45
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sRadar := false ;
18132: LD_ADDR_EXP 46
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sBunker := false ;
18140: LD_ADDR_EXP 47
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sHack := false ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sFire := false ;
18156: LD_ADDR_EXP 49
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sRefresh := false ;
18164: LD_ADDR_EXP 50
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sExp := false ;
18172: LD_ADDR_EXP 51
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sDepot := false ;
18180: LD_ADDR_EXP 52
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sFlag := false ;
18188: LD_ADDR_EXP 53
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sKamikadze := false ;
18196: LD_ADDR_EXP 61
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sTroll := false ;
18204: LD_ADDR_EXP 62
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sSlow := false ;
18212: LD_ADDR_EXP 63
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sLack := false ;
18220: LD_ADDR_EXP 64
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sTank := false ;
18228: LD_ADDR_EXP 66
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sRemote := false ;
18236: LD_ADDR_EXP 67
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sPowell := false ;
18244: LD_ADDR_EXP 68
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sTeleport := false ;
18252: LD_ADDR_EXP 71
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sOilTower := false ;
18260: LD_ADDR_EXP 73
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sShovel := false ;
18268: LD_ADDR_EXP 74
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sSheik := false ;
18276: LD_ADDR_EXP 75
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sEarthquake := false ;
18284: LD_ADDR_EXP 77
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sAI := false ;
18292: LD_ADDR_EXP 78
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sCargo := false ;
18300: LD_ADDR_EXP 81
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sDLaser := false ;
18308: LD_ADDR_EXP 82
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sExchange := false ;
18316: LD_ADDR_EXP 83
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sFac := false ;
18324: LD_ADDR_EXP 84
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sPower := false ;
18332: LD_ADDR_EXP 85
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sRandom := false ;
18340: LD_ADDR_EXP 86
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sShield := false ;
18348: LD_ADDR_EXP 87
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sTime := false ;
18356: LD_ADDR_EXP 88
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sTools := false ;
18364: LD_ADDR_EXP 89
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sSold := false ;
18372: LD_ADDR_EXP 54
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sDiff := false ;
18380: LD_ADDR_EXP 55
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sFog := false ;
18388: LD_ADDR_EXP 58
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sReset := false ;
18396: LD_ADDR_EXP 59
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sSun := false ;
18404: LD_ADDR_EXP 60
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sTiger := false ;
18412: LD_ADDR_EXP 56
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sBomb := false ;
18420: LD_ADDR_EXP 57
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sWound := false ;
18428: LD_ADDR_EXP 65
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sBetray := false ;
18436: LD_ADDR_EXP 69
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sContamin := false ;
18444: LD_ADDR_EXP 70
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sOil := false ;
18452: LD_ADDR_EXP 72
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sStu := false ;
18460: LD_ADDR_EXP 76
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sBazooka := false ;
18468: LD_ADDR_EXP 79
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sMortar := false ;
18476: LD_ADDR_EXP 80
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sRanger := false ;
18484: LD_ADDR_EXP 90
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sComputer := false ;
18492: LD_ADDR_EXP 91
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// s30 := false ;
18500: LD_ADDR_EXP 92
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// s60 := false ;
18508: LD_ADDR_EXP 93
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// end ;
18516: LD_VAR 0 1
18520: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
// result := [ ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: EMPTY
18536: ST_TO_ADDR
// if campaign_id = 1 then
18537: LD_OWVAR 69
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: IFFALSE 21711
// begin case mission_number of 1 :
18547: LD_OWVAR 70
18551: PUSH
18552: LD_INT 1
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18636
18560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 23
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 101
18606: PUSH
18607: LD_INT 102
18609: PUSH
18610: LD_INT 106
18612: PUSH
18613: LD_INT 116
18615: PUSH
18616: LD_INT 117
18618: PUSH
18619: LD_INT 118
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 21709
18636: LD_INT 2
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18728
18644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 11
18658: PUSH
18659: LD_INT 12
18661: PUSH
18662: LD_INT 15
18664: PUSH
18665: LD_INT 16
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 26
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 108
18702: PUSH
18703: LD_INT 116
18705: PUSH
18706: LD_INT 117
18708: PUSH
18709: LD_INT 118
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: ST_TO_ADDR
18726: GO 21709
18728: LD_INT 3
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18824
18736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 4
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: LD_INT 11
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: LD_INT 15
18759: PUSH
18760: LD_INT 16
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_INT 26
18768: PUSH
18769: LD_INT 36
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 101
18786: PUSH
18787: LD_INT 102
18789: PUSH
18790: LD_INT 105
18792: PUSH
18793: LD_INT 106
18795: PUSH
18796: LD_INT 108
18798: PUSH
18799: LD_INT 116
18801: PUSH
18802: LD_INT 117
18804: PUSH
18805: LD_INT 118
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: ST_TO_ADDR
18822: GO 21709
18824: LD_INT 4
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18928
18832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: LD_INT 8
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 15
18858: PUSH
18859: LD_INT 16
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 23
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: LD_INT 36
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 101
18890: PUSH
18891: LD_INT 102
18893: PUSH
18894: LD_INT 105
18896: PUSH
18897: LD_INT 106
18899: PUSH
18900: LD_INT 108
18902: PUSH
18903: LD_INT 116
18905: PUSH
18906: LD_INT 117
18908: PUSH
18909: LD_INT 118
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 21709
18928: LD_INT 5
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19048
18936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 4
18947: PUSH
18948: LD_INT 5
18950: PUSH
18951: LD_INT 6
18953: PUSH
18954: LD_INT 8
18956: PUSH
18957: LD_INT 11
18959: PUSH
18960: LD_INT 12
18962: PUSH
18963: LD_INT 15
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_INT 23
18974: PUSH
18975: LD_INT 25
18977: PUSH
18978: LD_INT 26
18980: PUSH
18981: LD_INT 36
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 101
19002: PUSH
19003: LD_INT 102
19005: PUSH
19006: LD_INT 105
19008: PUSH
19009: LD_INT 106
19011: PUSH
19012: LD_INT 108
19014: PUSH
19015: LD_INT 109
19017: PUSH
19018: LD_INT 112
19020: PUSH
19021: LD_INT 116
19023: PUSH
19024: LD_INT 117
19026: PUSH
19027: LD_INT 118
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 21709
19048: LD_INT 6
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19188
19056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: LD_INT 6
19073: PUSH
19074: LD_INT 8
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 16
19088: PUSH
19089: LD_INT 20
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 26
19106: PUSH
19107: LD_INT 30
19109: PUSH
19110: LD_INT 31
19112: PUSH
19113: LD_INT 32
19115: PUSH
19116: LD_INT 36
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 101
19142: PUSH
19143: LD_INT 102
19145: PUSH
19146: LD_INT 105
19148: PUSH
19149: LD_INT 106
19151: PUSH
19152: LD_INT 108
19154: PUSH
19155: LD_INT 109
19157: PUSH
19158: LD_INT 112
19160: PUSH
19161: LD_INT 116
19163: PUSH
19164: LD_INT 117
19166: PUSH
19167: LD_INT 118
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: ST_TO_ADDR
19186: GO 21709
19188: LD_INT 7
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19308
19196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 4
19207: PUSH
19208: LD_INT 5
19210: PUSH
19211: LD_INT 7
19213: PUSH
19214: LD_INT 11
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: LD_INT 15
19222: PUSH
19223: LD_INT 16
19225: PUSH
19226: LD_INT 20
19228: PUSH
19229: LD_INT 21
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 23
19237: PUSH
19238: LD_INT 25
19240: PUSH
19241: LD_INT 26
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 101
19262: PUSH
19263: LD_INT 102
19265: PUSH
19266: LD_INT 103
19268: PUSH
19269: LD_INT 105
19271: PUSH
19272: LD_INT 106
19274: PUSH
19275: LD_INT 108
19277: PUSH
19278: LD_INT 112
19280: PUSH
19281: LD_INT 116
19283: PUSH
19284: LD_INT 117
19286: PUSH
19287: LD_INT 118
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: ST_TO_ADDR
19306: GO 21709
19308: LD_INT 8
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19456
19316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: LD_INT 5
19330: PUSH
19331: LD_INT 6
19333: PUSH
19334: LD_INT 7
19336: PUSH
19337: LD_INT 8
19339: PUSH
19340: LD_INT 11
19342: PUSH
19343: LD_INT 12
19345: PUSH
19346: LD_INT 15
19348: PUSH
19349: LD_INT 16
19351: PUSH
19352: LD_INT 20
19354: PUSH
19355: LD_INT 21
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_INT 23
19363: PUSH
19364: LD_INT 25
19366: PUSH
19367: LD_INT 26
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 31
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: LD_INT 36
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 101
19406: PUSH
19407: LD_INT 102
19409: PUSH
19410: LD_INT 103
19412: PUSH
19413: LD_INT 105
19415: PUSH
19416: LD_INT 106
19418: PUSH
19419: LD_INT 108
19421: PUSH
19422: LD_INT 109
19424: PUSH
19425: LD_INT 112
19427: PUSH
19428: LD_INT 116
19430: PUSH
19431: LD_INT 117
19433: PUSH
19434: LD_INT 118
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21709
19456: LD_INT 9
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19612
19464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 6
19481: PUSH
19482: LD_INT 7
19484: PUSH
19485: LD_INT 8
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 15
19496: PUSH
19497: LD_INT 16
19499: PUSH
19500: LD_INT 20
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 25
19514: PUSH
19515: LD_INT 26
19517: PUSH
19518: LD_INT 28
19520: PUSH
19521: LD_INT 30
19523: PUSH
19524: LD_INT 31
19526: PUSH
19527: LD_INT 32
19529: PUSH
19530: LD_INT 36
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 101
19558: PUSH
19559: LD_INT 102
19561: PUSH
19562: LD_INT 103
19564: PUSH
19565: LD_INT 105
19567: PUSH
19568: LD_INT 106
19570: PUSH
19571: LD_INT 108
19573: PUSH
19574: LD_INT 109
19576: PUSH
19577: LD_INT 112
19579: PUSH
19580: LD_INT 114
19582: PUSH
19583: LD_INT 116
19585: PUSH
19586: LD_INT 117
19588: PUSH
19589: LD_INT 118
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: ST_TO_ADDR
19610: GO 21709
19612: LD_INT 10
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19816
19620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 4
19631: PUSH
19632: LD_INT 5
19634: PUSH
19635: LD_INT 6
19637: PUSH
19638: LD_INT 7
19640: PUSH
19641: LD_INT 8
19643: PUSH
19644: LD_INT 9
19646: PUSH
19647: LD_INT 10
19649: PUSH
19650: LD_INT 11
19652: PUSH
19653: LD_INT 12
19655: PUSH
19656: LD_INT 13
19658: PUSH
19659: LD_INT 14
19661: PUSH
19662: LD_INT 15
19664: PUSH
19665: LD_INT 16
19667: PUSH
19668: LD_INT 17
19670: PUSH
19671: LD_INT 18
19673: PUSH
19674: LD_INT 19
19676: PUSH
19677: LD_INT 20
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 23
19688: PUSH
19689: LD_INT 24
19691: PUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 26
19697: PUSH
19698: LD_INT 28
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 31
19706: PUSH
19707: LD_INT 32
19709: PUSH
19710: LD_INT 36
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 101
19746: PUSH
19747: LD_INT 102
19749: PUSH
19750: LD_INT 103
19752: PUSH
19753: LD_INT 104
19755: PUSH
19756: LD_INT 105
19758: PUSH
19759: LD_INT 106
19761: PUSH
19762: LD_INT 107
19764: PUSH
19765: LD_INT 108
19767: PUSH
19768: LD_INT 109
19770: PUSH
19771: LD_INT 110
19773: PUSH
19774: LD_INT 111
19776: PUSH
19777: LD_INT 112
19779: PUSH
19780: LD_INT 114
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 21709
19816: LD_INT 11
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 20028
19824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 3
19835: PUSH
19836: LD_INT 4
19838: PUSH
19839: LD_INT 5
19841: PUSH
19842: LD_INT 6
19844: PUSH
19845: LD_INT 7
19847: PUSH
19848: LD_INT 8
19850: PUSH
19851: LD_INT 9
19853: PUSH
19854: LD_INT 10
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 13
19865: PUSH
19866: LD_INT 14
19868: PUSH
19869: LD_INT 15
19871: PUSH
19872: LD_INT 16
19874: PUSH
19875: LD_INT 17
19877: PUSH
19878: LD_INT 18
19880: PUSH
19881: LD_INT 19
19883: PUSH
19884: LD_INT 20
19886: PUSH
19887: LD_INT 21
19889: PUSH
19890: LD_INT 22
19892: PUSH
19893: LD_INT 23
19895: PUSH
19896: LD_INT 24
19898: PUSH
19899: LD_INT 25
19901: PUSH
19902: LD_INT 26
19904: PUSH
19905: LD_INT 28
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 31
19913: PUSH
19914: LD_INT 32
19916: PUSH
19917: LD_INT 34
19919: PUSH
19920: LD_INT 36
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 101
19958: PUSH
19959: LD_INT 102
19961: PUSH
19962: LD_INT 103
19964: PUSH
19965: LD_INT 104
19967: PUSH
19968: LD_INT 105
19970: PUSH
19971: LD_INT 106
19973: PUSH
19974: LD_INT 107
19976: PUSH
19977: LD_INT 108
19979: PUSH
19980: LD_INT 109
19982: PUSH
19983: LD_INT 110
19985: PUSH
19986: LD_INT 111
19988: PUSH
19989: LD_INT 112
19991: PUSH
19992: LD_INT 114
19994: PUSH
19995: LD_INT 116
19997: PUSH
19998: LD_INT 117
20000: PUSH
20001: LD_INT 118
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 21709
20028: LD_INT 12
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20256
20036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: LD_INT 4
20053: PUSH
20054: LD_INT 5
20056: PUSH
20057: LD_INT 6
20059: PUSH
20060: LD_INT 7
20062: PUSH
20063: LD_INT 8
20065: PUSH
20066: LD_INT 9
20068: PUSH
20069: LD_INT 10
20071: PUSH
20072: LD_INT 11
20074: PUSH
20075: LD_INT 12
20077: PUSH
20078: LD_INT 13
20080: PUSH
20081: LD_INT 14
20083: PUSH
20084: LD_INT 15
20086: PUSH
20087: LD_INT 16
20089: PUSH
20090: LD_INT 17
20092: PUSH
20093: LD_INT 18
20095: PUSH
20096: LD_INT 19
20098: PUSH
20099: LD_INT 20
20101: PUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_INT 23
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 25
20116: PUSH
20117: LD_INT 26
20119: PUSH
20120: LD_INT 27
20122: PUSH
20123: LD_INT 28
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 31
20131: PUSH
20132: LD_INT 32
20134: PUSH
20135: LD_INT 33
20137: PUSH
20138: LD_INT 34
20140: PUSH
20141: LD_INT 36
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 101
20182: PUSH
20183: LD_INT 102
20185: PUSH
20186: LD_INT 103
20188: PUSH
20189: LD_INT 104
20191: PUSH
20192: LD_INT 105
20194: PUSH
20195: LD_INT 106
20197: PUSH
20198: LD_INT 107
20200: PUSH
20201: LD_INT 108
20203: PUSH
20204: LD_INT 109
20206: PUSH
20207: LD_INT 110
20209: PUSH
20210: LD_INT 111
20212: PUSH
20213: LD_INT 112
20215: PUSH
20216: LD_INT 113
20218: PUSH
20219: LD_INT 114
20221: PUSH
20222: LD_INT 116
20224: PUSH
20225: LD_INT 117
20227: PUSH
20228: LD_INT 118
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 21709
20256: LD_INT 13
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20472
20264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: LD_INT 4
20281: PUSH
20282: LD_INT 5
20284: PUSH
20285: LD_INT 8
20287: PUSH
20288: LD_INT 9
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 14
20302: PUSH
20303: LD_INT 15
20305: PUSH
20306: LD_INT 16
20308: PUSH
20309: LD_INT 17
20311: PUSH
20312: LD_INT 18
20314: PUSH
20315: LD_INT 19
20317: PUSH
20318: LD_INT 20
20320: PUSH
20321: LD_INT 21
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_INT 23
20329: PUSH
20330: LD_INT 24
20332: PUSH
20333: LD_INT 25
20335: PUSH
20336: LD_INT 26
20338: PUSH
20339: LD_INT 27
20341: PUSH
20342: LD_INT 28
20344: PUSH
20345: LD_INT 30
20347: PUSH
20348: LD_INT 31
20350: PUSH
20351: LD_INT 32
20353: PUSH
20354: LD_INT 33
20356: PUSH
20357: LD_INT 34
20359: PUSH
20360: LD_INT 36
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 101
20398: PUSH
20399: LD_INT 102
20401: PUSH
20402: LD_INT 103
20404: PUSH
20405: LD_INT 104
20407: PUSH
20408: LD_INT 105
20410: PUSH
20411: LD_INT 106
20413: PUSH
20414: LD_INT 107
20416: PUSH
20417: LD_INT 108
20419: PUSH
20420: LD_INT 109
20422: PUSH
20423: LD_INT 110
20425: PUSH
20426: LD_INT 111
20428: PUSH
20429: LD_INT 112
20431: PUSH
20432: LD_INT 113
20434: PUSH
20435: LD_INT 114
20437: PUSH
20438: LD_INT 116
20440: PUSH
20441: LD_INT 117
20443: PUSH
20444: LD_INT 118
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 21709
20472: LD_INT 14
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20704
20480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: LD_INT 6
20503: PUSH
20504: LD_INT 7
20506: PUSH
20507: LD_INT 8
20509: PUSH
20510: LD_INT 9
20512: PUSH
20513: LD_INT 10
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 13
20524: PUSH
20525: LD_INT 14
20527: PUSH
20528: LD_INT 15
20530: PUSH
20531: LD_INT 16
20533: PUSH
20534: LD_INT 17
20536: PUSH
20537: LD_INT 18
20539: PUSH
20540: LD_INT 19
20542: PUSH
20543: LD_INT 20
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: LD_INT 25
20560: PUSH
20561: LD_INT 26
20563: PUSH
20564: LD_INT 27
20566: PUSH
20567: LD_INT 28
20569: PUSH
20570: LD_INT 29
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 33
20584: PUSH
20585: LD_INT 34
20587: PUSH
20588: LD_INT 36
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 101
20630: PUSH
20631: LD_INT 102
20633: PUSH
20634: LD_INT 103
20636: PUSH
20637: LD_INT 104
20639: PUSH
20640: LD_INT 105
20642: PUSH
20643: LD_INT 106
20645: PUSH
20646: LD_INT 107
20648: PUSH
20649: LD_INT 108
20651: PUSH
20652: LD_INT 109
20654: PUSH
20655: LD_INT 110
20657: PUSH
20658: LD_INT 111
20660: PUSH
20661: LD_INT 112
20663: PUSH
20664: LD_INT 113
20666: PUSH
20667: LD_INT 114
20669: PUSH
20670: LD_INT 116
20672: PUSH
20673: LD_INT 117
20675: PUSH
20676: LD_INT 118
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: ST_TO_ADDR
20702: GO 21709
20704: LD_INT 15
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20936
20712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 4
20729: PUSH
20730: LD_INT 5
20732: PUSH
20733: LD_INT 6
20735: PUSH
20736: LD_INT 7
20738: PUSH
20739: LD_INT 8
20741: PUSH
20742: LD_INT 9
20744: PUSH
20745: LD_INT 10
20747: PUSH
20748: LD_INT 11
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 13
20756: PUSH
20757: LD_INT 14
20759: PUSH
20760: LD_INT 15
20762: PUSH
20763: LD_INT 16
20765: PUSH
20766: LD_INT 17
20768: PUSH
20769: LD_INT 18
20771: PUSH
20772: LD_INT 19
20774: PUSH
20775: LD_INT 20
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_INT 23
20786: PUSH
20787: LD_INT 24
20789: PUSH
20790: LD_INT 25
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: LD_INT 27
20798: PUSH
20799: LD_INT 28
20801: PUSH
20802: LD_INT 29
20804: PUSH
20805: LD_INT 30
20807: PUSH
20808: LD_INT 31
20810: PUSH
20811: LD_INT 32
20813: PUSH
20814: LD_INT 33
20816: PUSH
20817: LD_INT 34
20819: PUSH
20820: LD_INT 36
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 103
20868: PUSH
20869: LD_INT 104
20871: PUSH
20872: LD_INT 105
20874: PUSH
20875: LD_INT 106
20877: PUSH
20878: LD_INT 107
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 110
20889: PUSH
20890: LD_INT 111
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 113
20898: PUSH
20899: LD_INT 114
20901: PUSH
20902: LD_INT 116
20904: PUSH
20905: LD_INT 117
20907: PUSH
20908: LD_INT 118
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: ST_TO_ADDR
20934: GO 21709
20936: LD_INT 16
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 21080
20944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20945: LD_ADDR_VAR 0 2
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 4
20955: PUSH
20956: LD_INT 5
20958: PUSH
20959: LD_INT 7
20961: PUSH
20962: LD_INT 11
20964: PUSH
20965: LD_INT 12
20967: PUSH
20968: LD_INT 15
20970: PUSH
20971: LD_INT 16
20973: PUSH
20974: LD_INT 20
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 23
20985: PUSH
20986: LD_INT 25
20988: PUSH
20989: LD_INT 26
20991: PUSH
20992: LD_INT 30
20994: PUSH
20995: LD_INT 31
20997: PUSH
20998: LD_INT 32
21000: PUSH
21001: LD_INT 33
21003: PUSH
21004: LD_INT 34
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 103
21036: PUSH
21037: LD_INT 106
21039: PUSH
21040: LD_INT 108
21042: PUSH
21043: LD_INT 112
21045: PUSH
21046: LD_INT 113
21048: PUSH
21049: LD_INT 114
21051: PUSH
21052: LD_INT 116
21054: PUSH
21055: LD_INT 117
21057: PUSH
21058: LD_INT 118
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: ST_TO_ADDR
21078: GO 21709
21080: LD_INT 17
21082: DOUBLE
21083: EQUAL
21084: IFTRUE 21088
21086: GO 21312
21088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21089: LD_ADDR_VAR 0 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: LD_INT 7
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 9
21120: PUSH
21121: LD_INT 10
21123: PUSH
21124: LD_INT 11
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: LD_INT 13
21132: PUSH
21133: LD_INT 14
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 17
21144: PUSH
21145: LD_INT 18
21147: PUSH
21148: LD_INT 19
21150: PUSH
21151: LD_INT 20
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 24
21165: PUSH
21166: LD_INT 25
21168: PUSH
21169: LD_INT 26
21171: PUSH
21172: LD_INT 27
21174: PUSH
21175: LD_INT 28
21177: PUSH
21178: LD_INT 29
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 31
21186: PUSH
21187: LD_INT 32
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 34
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 101
21238: PUSH
21239: LD_INT 102
21241: PUSH
21242: LD_INT 103
21244: PUSH
21245: LD_INT 104
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 107
21256: PUSH
21257: LD_INT 108
21259: PUSH
21260: LD_INT 109
21262: PUSH
21263: LD_INT 110
21265: PUSH
21266: LD_INT 111
21268: PUSH
21269: LD_INT 112
21271: PUSH
21272: LD_INT 113
21274: PUSH
21275: LD_INT 114
21277: PUSH
21278: LD_INT 116
21280: PUSH
21281: LD_INT 117
21283: PUSH
21284: LD_INT 118
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 21709
21312: LD_INT 18
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21468
21320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 7
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_INT 12
21343: PUSH
21344: LD_INT 15
21346: PUSH
21347: LD_INT 16
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 30
21370: PUSH
21371: LD_INT 31
21373: PUSH
21374: LD_INT 32
21376: PUSH
21377: LD_INT 33
21379: PUSH
21380: LD_INT 34
21382: PUSH
21383: LD_INT 35
21385: PUSH
21386: LD_INT 36
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 101
21414: PUSH
21415: LD_INT 102
21417: PUSH
21418: LD_INT 103
21420: PUSH
21421: LD_INT 106
21423: PUSH
21424: LD_INT 108
21426: PUSH
21427: LD_INT 112
21429: PUSH
21430: LD_INT 113
21432: PUSH
21433: LD_INT 114
21435: PUSH
21436: LD_INT 115
21438: PUSH
21439: LD_INT 116
21441: PUSH
21442: LD_INT 117
21444: PUSH
21445: LD_INT 118
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: ST_TO_ADDR
21466: GO 21709
21468: LD_INT 19
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21708
21476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 3
21490: PUSH
21491: LD_INT 4
21493: PUSH
21494: LD_INT 5
21496: PUSH
21497: LD_INT 6
21499: PUSH
21500: LD_INT 7
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: LD_INT 9
21508: PUSH
21509: LD_INT 10
21511: PUSH
21512: LD_INT 11
21514: PUSH
21515: LD_INT 12
21517: PUSH
21518: LD_INT 13
21520: PUSH
21521: LD_INT 14
21523: PUSH
21524: LD_INT 15
21526: PUSH
21527: LD_INT 16
21529: PUSH
21530: LD_INT 17
21532: PUSH
21533: LD_INT 18
21535: PUSH
21536: LD_INT 19
21538: PUSH
21539: LD_INT 20
21541: PUSH
21542: LD_INT 21
21544: PUSH
21545: LD_INT 22
21547: PUSH
21548: LD_INT 23
21550: PUSH
21551: LD_INT 24
21553: PUSH
21554: LD_INT 25
21556: PUSH
21557: LD_INT 26
21559: PUSH
21560: LD_INT 27
21562: PUSH
21563: LD_INT 28
21565: PUSH
21566: LD_INT 29
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 31
21574: PUSH
21575: LD_INT 32
21577: PUSH
21578: LD_INT 33
21580: PUSH
21581: LD_INT 34
21583: PUSH
21584: LD_INT 35
21586: PUSH
21587: LD_INT 36
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 101
21630: PUSH
21631: LD_INT 102
21633: PUSH
21634: LD_INT 103
21636: PUSH
21637: LD_INT 104
21639: PUSH
21640: LD_INT 105
21642: PUSH
21643: LD_INT 106
21645: PUSH
21646: LD_INT 107
21648: PUSH
21649: LD_INT 108
21651: PUSH
21652: LD_INT 109
21654: PUSH
21655: LD_INT 110
21657: PUSH
21658: LD_INT 111
21660: PUSH
21661: LD_INT 112
21663: PUSH
21664: LD_INT 113
21666: PUSH
21667: LD_INT 114
21669: PUSH
21670: LD_INT 115
21672: PUSH
21673: LD_INT 116
21675: PUSH
21676: LD_INT 117
21678: PUSH
21679: LD_INT 118
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: ST_TO_ADDR
21706: GO 21709
21708: POP
// end else
21709: GO 21940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 4
21727: PUSH
21728: LD_INT 5
21730: PUSH
21731: LD_INT 6
21733: PUSH
21734: LD_INT 7
21736: PUSH
21737: LD_INT 8
21739: PUSH
21740: LD_INT 9
21742: PUSH
21743: LD_INT 10
21745: PUSH
21746: LD_INT 11
21748: PUSH
21749: LD_INT 12
21751: PUSH
21752: LD_INT 13
21754: PUSH
21755: LD_INT 14
21757: PUSH
21758: LD_INT 15
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 17
21766: PUSH
21767: LD_INT 18
21769: PUSH
21770: LD_INT 19
21772: PUSH
21773: LD_INT 20
21775: PUSH
21776: LD_INT 21
21778: PUSH
21779: LD_INT 22
21781: PUSH
21782: LD_INT 23
21784: PUSH
21785: LD_INT 24
21787: PUSH
21788: LD_INT 25
21790: PUSH
21791: LD_INT 26
21793: PUSH
21794: LD_INT 27
21796: PUSH
21797: LD_INT 28
21799: PUSH
21800: LD_INT 29
21802: PUSH
21803: LD_INT 30
21805: PUSH
21806: LD_INT 31
21808: PUSH
21809: LD_INT 32
21811: PUSH
21812: LD_INT 33
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 35
21820: PUSH
21821: LD_INT 36
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 101
21864: PUSH
21865: LD_INT 102
21867: PUSH
21868: LD_INT 103
21870: PUSH
21871: LD_INT 104
21873: PUSH
21874: LD_INT 105
21876: PUSH
21877: LD_INT 106
21879: PUSH
21880: LD_INT 107
21882: PUSH
21883: LD_INT 108
21885: PUSH
21886: LD_INT 109
21888: PUSH
21889: LD_INT 110
21891: PUSH
21892: LD_INT 111
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 113
21900: PUSH
21901: LD_INT 114
21903: PUSH
21904: LD_INT 115
21906: PUSH
21907: LD_INT 116
21909: PUSH
21910: LD_INT 117
21912: PUSH
21913: LD_INT 118
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// if result then
21940: LD_VAR 0 2
21944: IFFALSE 22730
// begin normal :=  ;
21946: LD_ADDR_VAR 0 5
21950: PUSH
21951: LD_STRING 
21953: ST_TO_ADDR
// hardcore :=  ;
21954: LD_ADDR_VAR 0 6
21958: PUSH
21959: LD_STRING 
21961: ST_TO_ADDR
// active :=  ;
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: LD_STRING 
21969: ST_TO_ADDR
// for i = 1 to normalCounter do
21970: LD_ADDR_VAR 0 8
21974: PUSH
21975: DOUBLE
21976: LD_INT 1
21978: DEC
21979: ST_TO_ADDR
21980: LD_EXP 38
21984: PUSH
21985: FOR_TO
21986: IFFALSE 22087
// begin tmp := 0 ;
21988: LD_ADDR_VAR 0 3
21992: PUSH
21993: LD_STRING 0
21995: ST_TO_ADDR
// if result [ 1 ] then
21996: LD_VAR 0 2
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: IFFALSE 22069
// if result [ 1 ] [ 1 ] = i then
22006: LD_VAR 0 2
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: PUSH
22019: LD_VAR 0 8
22023: EQUAL
22024: IFFALSE 22069
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: LD_VAR 0 2
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 3
22055: PPUSH
22056: CALL_OW 1
22060: ST_TO_ADDR
// tmp := 1 ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_STRING 1
22068: ST_TO_ADDR
// end ; normal := normal & tmp ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_VAR 0 5
22078: PUSH
22079: LD_VAR 0 3
22083: STR
22084: ST_TO_ADDR
// end ;
22085: GO 21985
22087: POP
22088: POP
// for i = 1 to hardcoreCounter do
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: DOUBLE
22095: LD_INT 1
22097: DEC
22098: ST_TO_ADDR
22099: LD_EXP 39
22103: PUSH
22104: FOR_TO
22105: IFFALSE 22210
// begin tmp := 0 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_STRING 0
22114: ST_TO_ADDR
// if result [ 2 ] then
22115: LD_VAR 0 2
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: IFFALSE 22192
// if result [ 2 ] [ 1 ] = 100 + i then
22125: LD_VAR 0 2
22129: PUSH
22130: LD_INT 2
22132: ARRAY
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PUSH
22138: LD_INT 100
22140: PUSH
22141: LD_VAR 0 8
22145: PLUS
22146: EQUAL
22147: IFFALSE 22192
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22149: LD_ADDR_VAR 0 2
22153: PUSH
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_INT 2
22161: PPUSH
22162: LD_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: CALL_OW 3
22178: PPUSH
22179: CALL_OW 1
22183: ST_TO_ADDR
// tmp := 1 ;
22184: LD_ADDR_VAR 0 3
22188: PUSH
22189: LD_STRING 1
22191: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22192: LD_ADDR_VAR 0 6
22196: PUSH
22197: LD_VAR 0 6
22201: PUSH
22202: LD_VAR 0 3
22206: STR
22207: ST_TO_ADDR
// end ;
22208: GO 22104
22210: POP
22211: POP
// if isGameLoad then
22212: LD_VAR 0 1
22216: IFFALSE 22691
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22218: LD_ADDR_VAR 0 4
22222: PUSH
22223: LD_EXP 42
22227: PUSH
22228: LD_EXP 41
22232: PUSH
22233: LD_EXP 43
22237: PUSH
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 44
22247: PUSH
22248: LD_EXP 45
22252: PUSH
22253: LD_EXP 46
22257: PUSH
22258: LD_EXP 47
22262: PUSH
22263: LD_EXP 48
22267: PUSH
22268: LD_EXP 49
22272: PUSH
22273: LD_EXP 50
22277: PUSH
22278: LD_EXP 51
22282: PUSH
22283: LD_EXP 52
22287: PUSH
22288: LD_EXP 53
22292: PUSH
22293: LD_EXP 61
22297: PUSH
22298: LD_EXP 62
22302: PUSH
22303: LD_EXP 63
22307: PUSH
22308: LD_EXP 64
22312: PUSH
22313: LD_EXP 66
22317: PUSH
22318: LD_EXP 67
22322: PUSH
22323: LD_EXP 68
22327: PUSH
22328: LD_EXP 71
22332: PUSH
22333: LD_EXP 73
22337: PUSH
22338: LD_EXP 74
22342: PUSH
22343: LD_EXP 75
22347: PUSH
22348: LD_EXP 77
22352: PUSH
22353: LD_EXP 78
22357: PUSH
22358: LD_EXP 81
22362: PUSH
22363: LD_EXP 82
22367: PUSH
22368: LD_EXP 83
22372: PUSH
22373: LD_EXP 84
22377: PUSH
22378: LD_EXP 85
22382: PUSH
22383: LD_EXP 86
22387: PUSH
22388: LD_EXP 87
22392: PUSH
22393: LD_EXP 88
22397: PUSH
22398: LD_EXP 89
22402: PUSH
22403: LD_EXP 54
22407: PUSH
22408: LD_EXP 55
22412: PUSH
22413: LD_EXP 58
22417: PUSH
22418: LD_EXP 59
22422: PUSH
22423: LD_EXP 60
22427: PUSH
22428: LD_EXP 56
22432: PUSH
22433: LD_EXP 57
22437: PUSH
22438: LD_EXP 65
22442: PUSH
22443: LD_EXP 69
22447: PUSH
22448: LD_EXP 70
22452: PUSH
22453: LD_EXP 72
22457: PUSH
22458: LD_EXP 76
22462: PUSH
22463: LD_EXP 79
22467: PUSH
22468: LD_EXP 80
22472: PUSH
22473: LD_EXP 90
22477: PUSH
22478: LD_EXP 91
22482: PUSH
22483: LD_EXP 92
22487: PUSH
22488: LD_EXP 93
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// tmp :=  ;
22549: LD_ADDR_VAR 0 3
22553: PUSH
22554: LD_STRING 
22556: ST_TO_ADDR
// for i = 1 to normalCounter do
22557: LD_ADDR_VAR 0 8
22561: PUSH
22562: DOUBLE
22563: LD_INT 1
22565: DEC
22566: ST_TO_ADDR
22567: LD_EXP 38
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22609
// begin if flags [ i ] then
22575: LD_VAR 0 4
22579: PUSH
22580: LD_VAR 0 8
22584: ARRAY
22585: IFFALSE 22607
// tmp := tmp & i & ; ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: LD_VAR 0 3
22596: PUSH
22597: LD_VAR 0 8
22601: STR
22602: PUSH
22603: LD_STRING ;
22605: STR
22606: ST_TO_ADDR
// end ;
22607: GO 22572
22609: POP
22610: POP
// for i = 1 to hardcoreCounter do
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: DOUBLE
22617: LD_INT 1
22619: DEC
22620: ST_TO_ADDR
22621: LD_EXP 39
22625: PUSH
22626: FOR_TO
22627: IFFALSE 22673
// begin if flags [ normalCounter + i ] then
22629: LD_VAR 0 4
22633: PUSH
22634: LD_EXP 38
22638: PUSH
22639: LD_VAR 0 8
22643: PLUS
22644: ARRAY
22645: IFFALSE 22671
// tmp := tmp & ( 100 + i ) & ; ;
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 100
22659: PUSH
22660: LD_VAR 0 8
22664: PLUS
22665: STR
22666: PUSH
22667: LD_STRING ;
22669: STR
22670: ST_TO_ADDR
// end ;
22671: GO 22626
22673: POP
22674: POP
// if tmp then
22675: LD_VAR 0 3
22679: IFFALSE 22691
// active := tmp ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 3
22690: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22691: LD_STRING getStreamItemsFromMission("
22693: PUSH
22694: LD_VAR 0 5
22698: STR
22699: PUSH
22700: LD_STRING ","
22702: STR
22703: PUSH
22704: LD_VAR 0 6
22708: STR
22709: PUSH
22710: LD_STRING ","
22712: STR
22713: PUSH
22714: LD_VAR 0 7
22718: STR
22719: PUSH
22720: LD_STRING ")
22722: STR
22723: PPUSH
22724: CALL_OW 559
// end else
22728: GO 22737
// ToLua ( getStreamItemsFromMission("","","") ) ;
22730: LD_STRING getStreamItemsFromMission("","","")
22732: PPUSH
22733: CALL_OW 559
// end ;
22737: LD_VAR 0 2
22741: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22742: LD_EXP 37
22746: PUSH
22747: LD_EXP 42
22751: AND
22752: IFFALSE 22876
22754: GO 22756
22756: DISABLE
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// begin enable ;
22761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 34
22784: PUSH
22785: LD_INT 7
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 34
22794: PUSH
22795: LD_INT 45
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 34
22804: PUSH
22805: LD_INT 28
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 34
22814: PUSH
22815: LD_INT 47
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: ST_TO_ADDR
// if not tmp then
22838: LD_VAR 0 2
22842: NOT
22843: IFFALSE 22847
// exit ;
22845: GO 22876
// for i in tmp do
22847: LD_ADDR_VAR 0 1
22851: PUSH
22852: LD_VAR 0 2
22856: PUSH
22857: FOR_IN
22858: IFFALSE 22874
// begin SetLives ( i , 0 ) ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_INT 0
22867: PPUSH
22868: CALL_OW 234
// end ;
22872: GO 22857
22874: POP
22875: POP
// end ;
22876: PPOPN 2
22878: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22879: LD_EXP 37
22883: PUSH
22884: LD_EXP 43
22888: AND
22889: IFFALSE 22973
22891: GO 22893
22893: DISABLE
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// begin enable ;
22898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22973
// for i in tmp do
22944: LD_ADDR_VAR 0 1
22948: PUSH
22949: LD_VAR 0 2
22953: PUSH
22954: FOR_IN
22955: IFFALSE 22971
// begin SetLives ( i , 0 ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_INT 0
22964: PPUSH
22965: CALL_OW 234
// end ;
22969: GO 22954
22971: POP
22972: POP
// end ;
22973: PPOPN 2
22975: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22976: LD_EXP 37
22980: PUSH
22981: LD_EXP 40
22985: AND
22986: IFFALSE 23079
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
// begin enable ;
22994: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22995: LD_ADDR_VAR 0 1
22999: PUSH
23000: LD_INT 22
23002: PUSH
23003: LD_OWVAR 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 5
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 25
23027: PUSH
23028: LD_INT 9
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 8
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PPUSH
23055: CALL_OW 69
23059: PUSH
23060: FOR_IN
23061: IFFALSE 23077
// begin SetClass ( i , 1 ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 336
// end ;
23075: GO 23060
23077: POP
23078: POP
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23082: LD_EXP 37
23086: PUSH
23087: LD_EXP 41
23091: AND
23092: PUSH
23093: LD_OWVAR 65
23097: PUSH
23098: LD_INT 7
23100: LESS
23101: AND
23102: IFFALSE 23116
23104: GO 23106
23106: DISABLE
// begin enable ;
23107: ENABLE
// game_speed := 7 ;
23108: LD_ADDR_OWVAR 65
23112: PUSH
23113: LD_INT 7
23115: ST_TO_ADDR
// end ;
23116: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23117: LD_EXP 37
23121: PUSH
23122: LD_EXP 44
23126: AND
23127: IFFALSE 23329
23129: GO 23131
23131: DISABLE
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 81
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: ST_TO_ADDR
// if not tmp then
23173: LD_VAR 0 3
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23329
// if tmp > 5 then
23182: LD_VAR 0 3
23186: PUSH
23187: LD_INT 5
23189: GREATER
23190: IFFALSE 23202
// k := 5 else
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_INT 5
23199: ST_TO_ADDR
23200: GO 23212
// k := tmp ;
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: LD_VAR 0 3
23211: ST_TO_ADDR
// for i := 1 to k do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: DOUBLE
23218: LD_INT 1
23220: DEC
23221: ST_TO_ADDR
23222: LD_VAR 0 2
23226: PUSH
23227: FOR_TO
23228: IFFALSE 23327
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23230: LD_VAR 0 3
23234: PUSH
23235: LD_VAR 0 1
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 4
23248: MOD
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: PPUSH
23254: CALL_OW 259
23258: PUSH
23259: LD_INT 10
23261: LESS
23262: IFFALSE 23325
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23264: LD_VAR 0 3
23268: PUSH
23269: LD_VAR 0 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 4
23282: MOD
23283: PUSH
23284: LD_INT 1
23286: PLUS
23287: PPUSH
23288: LD_VAR 0 3
23292: PUSH
23293: LD_VAR 0 1
23297: ARRAY
23298: PPUSH
23299: LD_VAR 0 1
23303: PUSH
23304: LD_INT 4
23306: MOD
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: PPUSH
23312: CALL_OW 259
23316: PUSH
23317: LD_INT 1
23319: PLUS
23320: PPUSH
23321: CALL_OW 237
23325: GO 23227
23327: POP
23328: POP
// end ;
23329: PPOPN 3
23331: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23332: LD_EXP 37
23336: PUSH
23337: LD_EXP 45
23341: AND
23342: IFFALSE 23362
23344: GO 23346
23346: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23347: LD_INT 4
23349: PPUSH
23350: LD_OWVAR 2
23354: PPUSH
23355: LD_INT 0
23357: PPUSH
23358: CALL_OW 324
23362: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23363: LD_EXP 37
23367: PUSH
23368: LD_EXP 74
23372: AND
23373: IFFALSE 23393
23375: GO 23377
23377: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23378: LD_INT 19
23380: PPUSH
23381: LD_OWVAR 2
23385: PPUSH
23386: LD_INT 0
23388: PPUSH
23389: CALL_OW 324
23393: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23394: LD_EXP 37
23398: PUSH
23399: LD_EXP 46
23403: AND
23404: IFFALSE 23506
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
// begin enable ;
23413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 34
23436: PUSH
23437: LD_INT 11
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 34
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not tmp then
23468: LD_VAR 0 2
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23506
// for i in tmp do
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_VAR 0 2
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23504
// begin SetLives ( i , 0 ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: CALL_OW 234
// end ;
23502: GO 23487
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23509: LD_EXP 37
23513: PUSH
23514: LD_EXP 47
23518: AND
23519: IFFALSE 23539
23521: GO 23523
23523: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23524: LD_INT 32
23526: PPUSH
23527: LD_OWVAR 2
23531: PPUSH
23532: LD_INT 0
23534: PPUSH
23535: CALL_OW 324
23539: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23540: LD_EXP 37
23544: PUSH
23545: LD_EXP 48
23549: AND
23550: IFFALSE 23731
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
23559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23560: LD_ADDR_VAR 0 2
23564: PUSH
23565: LD_INT 22
23567: PUSH
23568: LD_OWVAR 2
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 33
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: ST_TO_ADDR
// if not tmp then
23596: LD_VAR 0 2
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 23731
// side := 0 ;
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// for i := 1 to 8 do
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_INT 8
23625: PUSH
23626: FOR_TO
23627: IFFALSE 23675
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23629: LD_OWVAR 2
23633: PUSH
23634: LD_VAR 0 1
23638: NONEQUAL
23639: PUSH
23640: LD_OWVAR 2
23644: PPUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 81
23654: PUSH
23655: LD_INT 2
23657: EQUAL
23658: AND
23659: IFFALSE 23673
// begin side := i ;
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: LD_VAR 0 1
23670: ST_TO_ADDR
// break ;
23671: GO 23675
// end ;
23673: GO 23626
23675: POP
23676: POP
// if not side then
23677: LD_VAR 0 3
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23731
// for i := 1 to tmp do
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_VAR 0 2
23700: PUSH
23701: FOR_TO
23702: IFFALSE 23729
// if Prob ( 60 ) then
23704: LD_INT 60
23706: PPUSH
23707: CALL_OW 13
23711: IFFALSE 23727
// SetSide ( i , side ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: CALL_OW 235
23727: GO 23701
23729: POP
23730: POP
// end ;
23731: PPOPN 3
23733: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23734: LD_EXP 37
23738: PUSH
23739: LD_EXP 50
23743: AND
23744: IFFALSE 23863
23746: GO 23748
23748: DISABLE
23749: LD_INT 0
23751: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_OWVAR 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: PUSH
23806: FOR_IN
23807: IFFALSE 23861
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 257
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: IN
23837: IFFALSE 23859
// SetClass ( un , rand ( 1 , 4 ) ) ;
23839: LD_VAR 0 1
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: LD_INT 4
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: CALL_OW 336
23859: GO 23806
23861: POP
23862: POP
// end ;
23863: PPOPN 1
23865: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23866: LD_EXP 37
23870: PUSH
23871: LD_EXP 49
23875: AND
23876: IFFALSE 23955
23878: GO 23880
23880: DISABLE
23881: LD_INT 0
23883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_OWVAR 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 21
23903: PUSH
23904: LD_INT 3
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 69
23919: ST_TO_ADDR
// if not tmp then
23920: LD_VAR 0 1
23924: NOT
23925: IFFALSE 23929
// exit ;
23927: GO 23955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23929: LD_VAR 0 1
23933: PUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 12
23946: ARRAY
23947: PPUSH
23948: LD_INT 100
23950: PPUSH
23951: CALL_OW 234
// end ;
23955: PPOPN 1
23957: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23958: LD_EXP 37
23962: PUSH
23963: LD_EXP 51
23967: AND
23968: IFFALSE 24066
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_OWVAR 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 21
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 69
24011: ST_TO_ADDR
// if not tmp then
24012: LD_VAR 0 1
24016: NOT
24017: IFFALSE 24021
// exit ;
24019: GO 24066
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24021: LD_VAR 0 1
24025: PUSH
24026: LD_INT 1
24028: PPUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 12
24038: ARRAY
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: LD_INT 4
24045: PPUSH
24046: CALL_OW 12
24050: PPUSH
24051: LD_INT 3000
24053: PPUSH
24054: LD_INT 9000
24056: PPUSH
24057: CALL_OW 12
24061: PPUSH
24062: CALL_OW 492
// end ;
24066: PPOPN 1
24068: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24069: LD_EXP 37
24073: PUSH
24074: LD_EXP 52
24078: AND
24079: IFFALSE 24099
24081: GO 24083
24083: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24084: LD_INT 1
24086: PPUSH
24087: LD_OWVAR 2
24091: PPUSH
24092: LD_INT 0
24094: PPUSH
24095: CALL_OW 324
24099: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24100: LD_EXP 37
24104: PUSH
24105: LD_EXP 53
24109: AND
24110: IFFALSE 24193
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_OWVAR 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 21
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PPUSH
24150: CALL_OW 69
24154: ST_TO_ADDR
// if not tmp then
24155: LD_VAR 0 2
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24193
// for i in tmp do
24164: LD_ADDR_VAR 0 1
24168: PUSH
24169: LD_VAR 0 2
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// SetBLevel ( i , 10 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 10
24184: PPUSH
24185: CALL_OW 241
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 2
24195: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24196: LD_EXP 37
24200: PUSH
24201: LD_EXP 54
24205: AND
24206: IFFALSE 24317
24208: GO 24210
24210: DISABLE
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_OWVAR 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 25
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PPUSH
24247: CALL_OW 69
24251: ST_TO_ADDR
// if not tmp then
24252: LD_VAR 0 3
24256: NOT
24257: IFFALSE 24261
// exit ;
24259: GO 24317
// un := tmp [ rand ( 1 , tmp ) ] ;
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL_OW 12
24283: ARRAY
24284: ST_TO_ADDR
// if Crawls ( un ) then
24285: LD_VAR 0 2
24289: PPUSH
24290: CALL_OW 318
24294: IFFALSE 24305
// ComWalk ( un ) ;
24296: LD_VAR 0 2
24300: PPUSH
24301: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24305: LD_VAR 0 2
24309: PPUSH
24310: LD_INT 5
24312: PPUSH
24313: CALL_OW 336
// end ;
24317: PPOPN 3
24319: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24320: LD_EXP 37
24324: PUSH
24325: LD_EXP 55
24329: AND
24330: PUSH
24331: LD_OWVAR 67
24335: PUSH
24336: LD_INT 4
24338: LESS
24339: AND
24340: IFFALSE 24359
24342: GO 24344
24344: DISABLE
// begin Difficulty := Difficulty + 1 ;
24345: LD_ADDR_OWVAR 67
24349: PUSH
24350: LD_OWVAR 67
24354: PUSH
24355: LD_INT 1
24357: PLUS
24358: ST_TO_ADDR
// end ;
24359: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24360: LD_EXP 37
24364: PUSH
24365: LD_EXP 56
24369: AND
24370: IFFALSE 24473
24372: GO 24374
24374: DISABLE
24375: LD_INT 0
24377: PPUSH
// begin for i := 1 to 5 do
24378: LD_ADDR_VAR 0 1
24382: PUSH
24383: DOUBLE
24384: LD_INT 1
24386: DEC
24387: ST_TO_ADDR
24388: LD_INT 5
24390: PUSH
24391: FOR_TO
24392: IFFALSE 24471
// begin uc_nation := nation_nature ;
24394: LD_ADDR_OWVAR 21
24398: PUSH
24399: LD_INT 0
24401: ST_TO_ADDR
// uc_side := 0 ;
24402: LD_ADDR_OWVAR 20
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24410: LD_ADDR_OWVAR 29
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 12
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// hc_agressivity := 20 ;
24425: LD_ADDR_OWVAR 35
24429: PUSH
24430: LD_INT 20
24432: ST_TO_ADDR
// hc_class := class_tiger ;
24433: LD_ADDR_OWVAR 28
24437: PUSH
24438: LD_INT 14
24440: ST_TO_ADDR
// hc_gallery :=  ;
24441: LD_ADDR_OWVAR 33
24445: PUSH
24446: LD_STRING 
24448: ST_TO_ADDR
// hc_name :=  ;
24449: LD_ADDR_OWVAR 26
24453: PUSH
24454: LD_STRING 
24456: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24457: CALL_OW 44
24461: PPUSH
24462: LD_INT 0
24464: PPUSH
24465: CALL_OW 51
// end ;
24469: GO 24391
24471: POP
24472: POP
// end ;
24473: PPOPN 1
24475: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24476: LD_EXP 37
24480: PUSH
24481: LD_EXP 57
24485: AND
24486: IFFALSE 24495
24488: GO 24490
24490: DISABLE
// StreamSibBomb ;
24491: CALL 24496 0 0
24495: END
// export function StreamSibBomb ; var i , x , y ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
// result := false ;
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_INT 0
24509: ST_TO_ADDR
// for i := 1 to 16 do
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: DOUBLE
24516: LD_INT 1
24518: DEC
24519: ST_TO_ADDR
24520: LD_INT 16
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24723
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24526: LD_ADDR_VAR 0 3
24530: PUSH
24531: LD_INT 10
24533: PUSH
24534: LD_INT 20
24536: PUSH
24537: LD_INT 30
24539: PUSH
24540: LD_INT 40
24542: PUSH
24543: LD_INT 50
24545: PUSH
24546: LD_INT 60
24548: PUSH
24549: LD_INT 70
24551: PUSH
24552: LD_INT 80
24554: PUSH
24555: LD_INT 90
24557: PUSH
24558: LD_INT 100
24560: PUSH
24561: LD_INT 110
24563: PUSH
24564: LD_INT 120
24566: PUSH
24567: LD_INT 130
24569: PUSH
24570: LD_INT 140
24572: PUSH
24573: LD_INT 150
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PPUSH
24596: LD_INT 15
24598: PPUSH
24599: CALL_OW 12
24603: ARRAY
24604: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24605: LD_ADDR_VAR 0 4
24609: PUSH
24610: LD_INT 10
24612: PUSH
24613: LD_INT 20
24615: PUSH
24616: LD_INT 30
24618: PUSH
24619: LD_INT 40
24621: PUSH
24622: LD_INT 50
24624: PUSH
24625: LD_INT 60
24627: PUSH
24628: LD_INT 70
24630: PUSH
24631: LD_INT 80
24633: PUSH
24634: LD_INT 90
24636: PUSH
24637: LD_INT 100
24639: PUSH
24640: LD_INT 110
24642: PUSH
24643: LD_INT 120
24645: PUSH
24646: LD_INT 130
24648: PUSH
24649: LD_INT 140
24651: PUSH
24652: LD_INT 150
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PPUSH
24675: LD_INT 15
24677: PPUSH
24678: CALL_OW 12
24682: ARRAY
24683: ST_TO_ADDR
// if ValidHex ( x , y ) then
24684: LD_VAR 0 3
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: CALL_OW 488
24698: IFFALSE 24721
// begin result := [ x , y ] ;
24700: LD_ADDR_VAR 0 1
24704: PUSH
24705: LD_VAR 0 3
24709: PUSH
24710: LD_VAR 0 4
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: ST_TO_ADDR
// break ;
24719: GO 24723
// end ; end ;
24721: GO 24523
24723: POP
24724: POP
// if result then
24725: LD_VAR 0 1
24729: IFFALSE 24789
// begin ToLua ( playSibBomb() ) ;
24731: LD_STRING playSibBomb()
24733: PPUSH
24734: CALL_OW 559
// wait ( 0 0$14 ) ;
24738: LD_INT 490
24740: PPUSH
24741: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: LD_VAR 0 1
24758: PUSH
24759: LD_INT 2
24761: ARRAY
24762: PPUSH
24763: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24767: LD_VAR 0 1
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 2
24783: ARRAY
24784: PPUSH
24785: CALL_OW 429
// end ; end ;
24789: LD_VAR 0 1
24793: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24794: LD_EXP 37
24798: PUSH
24799: LD_EXP 59
24803: AND
24804: IFFALSE 24816
24806: GO 24808
24808: DISABLE
// YouLost (  ) ;
24809: LD_STRING 
24811: PPUSH
24812: CALL_OW 104
24816: END
// every 0 0$1 trigger StreamModeActive and sFog do
24817: LD_EXP 37
24821: PUSH
24822: LD_EXP 58
24826: AND
24827: IFFALSE 24841
24829: GO 24831
24831: DISABLE
// FogOff ( your_side ) ;
24832: LD_OWVAR 2
24836: PPUSH
24837: CALL_OW 344
24841: END
// every 0 0$1 trigger StreamModeActive and sSun do
24842: LD_EXP 37
24846: PUSH
24847: LD_EXP 60
24851: AND
24852: IFFALSE 24880
24854: GO 24856
24856: DISABLE
// begin solar_recharge_percent := 0 ;
24857: LD_ADDR_OWVAR 79
24861: PUSH
24862: LD_INT 0
24864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24865: LD_INT 10500
24867: PPUSH
24868: CALL_OW 67
// solar_recharge_percent := 100 ;
24872: LD_ADDR_OWVAR 79
24876: PUSH
24877: LD_INT 100
24879: ST_TO_ADDR
// end ;
24880: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24881: LD_EXP 37
24885: PUSH
24886: LD_EXP 61
24890: AND
24891: IFFALSE 25130
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
24899: PPUSH
24900: PPUSH
// begin tmp := [ ] ;
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: EMPTY
24907: ST_TO_ADDR
// for i := 1 to 6 do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_INT 6
24920: PUSH
24921: FOR_TO
24922: IFFALSE 25027
// begin uc_nation := nation_nature ;
24924: LD_ADDR_OWVAR 21
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// uc_side := 0 ;
24932: LD_ADDR_OWVAR 20
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24940: LD_ADDR_OWVAR 29
24944: PUSH
24945: LD_INT 12
24947: PUSH
24948: LD_INT 12
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// hc_agressivity := 20 ;
24955: LD_ADDR_OWVAR 35
24959: PUSH
24960: LD_INT 20
24962: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24963: LD_ADDR_OWVAR 28
24967: PUSH
24968: LD_INT 17
24970: ST_TO_ADDR
// hc_gallery :=  ;
24971: LD_ADDR_OWVAR 33
24975: PUSH
24976: LD_STRING 
24978: ST_TO_ADDR
// hc_name :=  ;
24979: LD_ADDR_OWVAR 26
24983: PUSH
24984: LD_STRING 
24986: ST_TO_ADDR
// un := CreateHuman ;
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: CALL_OW 44
24996: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_INT 1
25004: PPUSH
25005: CALL_OW 51
// tmp := tmp ^ un ;
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_VAR 0 3
25018: PUSH
25019: LD_VAR 0 2
25023: ADD
25024: ST_TO_ADDR
// end ;
25025: GO 24921
25027: POP
25028: POP
// repeat wait ( 0 0$1 ) ;
25029: LD_INT 35
25031: PPUSH
25032: CALL_OW 67
// for un in tmp do
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25121
// begin if IsDead ( un ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 301
25058: IFFALSE 25078
// begin tmp := tmp diff un ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_VAR 0 2
25074: DIFF
25075: ST_TO_ADDR
// continue ;
25076: GO 25046
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25078: LD_VAR 0 2
25082: PPUSH
25083: LD_INT 3
25085: PUSH
25086: LD_INT 22
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 69
25104: PPUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: CALL_OW 74
25114: PPUSH
25115: CALL_OW 115
// end ;
25119: GO 25046
25121: POP
25122: POP
// until not tmp ;
25123: LD_VAR 0 3
25127: NOT
25128: IFFALSE 25029
// end ;
25130: PPOPN 3
25132: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25133: LD_EXP 37
25137: PUSH
25138: LD_EXP 62
25142: AND
25143: IFFALSE 25197
25145: GO 25147
25147: DISABLE
// begin ToLua ( displayTroll(); ) ;
25148: LD_STRING displayTroll();
25150: PPUSH
25151: CALL_OW 559
// wait ( 3 3$00 ) ;
25155: LD_INT 6300
25157: PPUSH
25158: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25162: LD_STRING hideTroll();
25164: PPUSH
25165: CALL_OW 559
// wait ( 1 1$00 ) ;
25169: LD_INT 2100
25171: PPUSH
25172: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25176: LD_STRING displayTroll();
25178: PPUSH
25179: CALL_OW 559
// wait ( 1 1$00 ) ;
25183: LD_INT 2100
25185: PPUSH
25186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25190: LD_STRING hideTroll();
25192: PPUSH
25193: CALL_OW 559
// end ;
25197: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25198: LD_EXP 37
25202: PUSH
25203: LD_EXP 63
25207: AND
25208: IFFALSE 25271
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
// begin p := 0 ;
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_INT 0
25223: ST_TO_ADDR
// repeat game_speed := 1 ;
25224: LD_ADDR_OWVAR 65
25228: PUSH
25229: LD_INT 1
25231: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25232: LD_INT 35
25234: PPUSH
25235: CALL_OW 67
// p := p + 1 ;
25239: LD_ADDR_VAR 0 1
25243: PUSH
25244: LD_VAR 0 1
25248: PUSH
25249: LD_INT 1
25251: PLUS
25252: ST_TO_ADDR
// until p >= 60 ;
25253: LD_VAR 0 1
25257: PUSH
25258: LD_INT 60
25260: GREATEREQUAL
25261: IFFALSE 25224
// game_speed := 4 ;
25263: LD_ADDR_OWVAR 65
25267: PUSH
25268: LD_INT 4
25270: ST_TO_ADDR
// end ;
25271: PPOPN 1
25273: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25274: LD_EXP 37
25278: PUSH
25279: LD_EXP 64
25283: AND
25284: IFFALSE 25430
25286: GO 25288
25288: DISABLE
25289: LD_INT 0
25291: PPUSH
25292: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25293: LD_ADDR_VAR 0 1
25297: PUSH
25298: LD_INT 22
25300: PUSH
25301: LD_OWVAR 2
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 30
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PPUSH
25342: CALL_OW 69
25346: ST_TO_ADDR
// if not depot then
25347: LD_VAR 0 1
25351: NOT
25352: IFFALSE 25356
// exit ;
25354: GO 25430
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25356: LD_ADDR_VAR 0 2
25360: PUSH
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 1
25368: PPUSH
25369: LD_VAR 0 1
25373: PPUSH
25374: CALL_OW 12
25378: ARRAY
25379: PPUSH
25380: CALL_OW 274
25384: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_INT 0
25395: PPUSH
25396: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25400: LD_VAR 0 2
25404: PPUSH
25405: LD_INT 2
25407: PPUSH
25408: LD_INT 0
25410: PPUSH
25411: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 0
25425: PPUSH
25426: CALL_OW 277
// end ;
25430: PPOPN 2
25432: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25433: LD_EXP 37
25437: PUSH
25438: LD_EXP 65
25442: AND
25443: IFFALSE 25540
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25451: LD_ADDR_VAR 0 1
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_OWVAR 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 69
25504: ST_TO_ADDR
// if not tmp then
25505: LD_VAR 0 1
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25514: LD_VAR 0 1
25518: PUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 12
25531: ARRAY
25532: PPUSH
25533: LD_INT 200
25535: PPUSH
25536: CALL_OW 234
// end ;
25540: PPOPN 1
25542: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25543: LD_EXP 37
25547: PUSH
25548: LD_EXP 66
25552: AND
25553: IFFALSE 25632
25555: GO 25557
25557: DISABLE
25558: LD_INT 0
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 1
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25606: LD_VAR 0 1
25610: PUSH
25611: LD_INT 1
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 12
25623: ARRAY
25624: PPUSH
25625: LD_INT 60
25627: PPUSH
25628: CALL_OW 234
// end ;
25632: PPOPN 1
25634: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25635: LD_EXP 37
25639: PUSH
25640: LD_EXP 67
25644: AND
25645: IFFALSE 25744
25647: GO 25649
25649: DISABLE
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
// begin enable ;
25654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 61
25674: PUSH
25675: EMPTY
25676: LIST
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: ST_TO_ADDR
// if not tmp then
25698: LD_VAR 0 1
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25744
// for i in tmp do
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: LD_VAR 0 1
25716: PUSH
25717: FOR_IN
25718: IFFALSE 25742
// if IsControledBy ( i ) then
25720: LD_VAR 0 2
25724: PPUSH
25725: CALL_OW 312
25729: IFFALSE 25740
// ComUnlink ( i ) ;
25731: LD_VAR 0 2
25735: PPUSH
25736: CALL_OW 136
25740: GO 25717
25742: POP
25743: POP
// end ;
25744: PPOPN 2
25746: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25747: LD_EXP 37
25751: PUSH
25752: LD_EXP 68
25756: AND
25757: IFFALSE 25897
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
// begin ToLua ( displayPowell(); ) ;
25766: LD_STRING displayPowell();
25768: PPUSH
25769: CALL_OW 559
// uc_side := 0 ;
25773: LD_ADDR_OWVAR 20
25777: PUSH
25778: LD_INT 0
25780: ST_TO_ADDR
// uc_nation := 2 ;
25781: LD_ADDR_OWVAR 21
25785: PUSH
25786: LD_INT 2
25788: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25789: LD_ADDR_OWVAR 37
25793: PUSH
25794: LD_INT 14
25796: ST_TO_ADDR
// vc_engine := engine_siberite ;
25797: LD_ADDR_OWVAR 39
25801: PUSH
25802: LD_INT 3
25804: ST_TO_ADDR
// vc_control := control_apeman ;
25805: LD_ADDR_OWVAR 38
25809: PUSH
25810: LD_INT 5
25812: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25813: LD_ADDR_OWVAR 40
25817: PUSH
25818: LD_INT 29
25820: ST_TO_ADDR
// un := CreateVehicle ;
25821: LD_ADDR_VAR 0 2
25825: PUSH
25826: CALL_OW 45
25830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25831: LD_VAR 0 2
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25843: LD_INT 35
25845: PPUSH
25846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PPUSH
25872: LD_VAR 0 2
25876: PPUSH
25877: CALL_OW 74
25881: PPUSH
25882: CALL_OW 115
// until IsDead ( un ) ;
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 301
25895: IFFALSE 25843
// end ;
25897: PPOPN 2
25899: END
// every 0 0$1 trigger StreamModeActive and sStu do
25900: LD_EXP 37
25904: PUSH
25905: LD_EXP 76
25909: AND
25910: IFFALSE 25926
25912: GO 25914
25914: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25915: LD_STRING displayStucuk();
25917: PPUSH
25918: CALL_OW 559
// ResetFog ;
25922: CALL_OW 335
// end ;
25926: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25927: LD_EXP 37
25931: PUSH
25932: LD_EXP 69
25936: AND
25937: IFFALSE 26078
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: LD_INT 22
25953: PUSH
25954: LD_OWVAR 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 21
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: ST_TO_ADDR
// if not tmp then
25982: LD_VAR 0 2
25986: NOT
25987: IFFALSE 25991
// exit ;
25989: GO 26078
// un := tmp [ rand ( 1 , tmp ) ] ;
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_VAR 0 2
26000: PUSH
26001: LD_INT 1
26003: PPUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: CALL_OW 12
26013: ARRAY
26014: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26015: LD_VAR 0 1
26019: PPUSH
26020: LD_INT 0
26022: PPUSH
26023: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26027: LD_VAR 0 1
26031: PPUSH
26032: LD_OWVAR 3
26036: PUSH
26037: LD_VAR 0 1
26041: DIFF
26042: PPUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 74
26052: PPUSH
26053: CALL_OW 115
// wait ( 0 0$20 ) ;
26057: LD_INT 700
26059: PPUSH
26060: CALL_OW 67
// SetSide ( un , your_side ) ;
26064: LD_VAR 0 1
26068: PPUSH
26069: LD_OWVAR 2
26073: PPUSH
26074: CALL_OW 235
// end ;
26078: PPOPN 2
26080: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26081: LD_EXP 37
26085: PUSH
26086: LD_EXP 70
26090: AND
26091: IFFALSE 26197
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 30
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 30
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: CALL_OW 69
26152: ST_TO_ADDR
// if not depot then
26153: LD_VAR 0 1
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26197
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26162: LD_VAR 0 1
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: CALL_OW 250
26175: PPUSH
26176: LD_VAR 0 1
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: PPUSH
26185: CALL_OW 251
26189: PPUSH
26190: LD_INT 70
26192: PPUSH
26193: CALL_OW 495
// end ;
26197: PPOPN 1
26199: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26200: LD_EXP 37
26204: PUSH
26205: LD_EXP 71
26209: AND
26210: IFFALSE 26421
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: ST_TO_ADDR
// if not tmp then
26258: LD_VAR 0 5
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26421
// for i in tmp do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_VAR 0 5
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26419
// begin d := rand ( 0 , 5 ) ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_INT 0
26287: PPUSH
26288: LD_INT 5
26290: PPUSH
26291: CALL_OW 12
26295: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 250
26310: PPUSH
26311: LD_VAR 0 4
26315: PPUSH
26316: LD_INT 3
26318: PPUSH
26319: LD_INT 12
26321: PPUSH
26322: CALL_OW 12
26326: PPUSH
26327: CALL_OW 272
26331: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 251
26346: PPUSH
26347: LD_VAR 0 4
26351: PPUSH
26352: LD_INT 3
26354: PPUSH
26355: LD_INT 12
26357: PPUSH
26358: CALL_OW 12
26362: PPUSH
26363: CALL_OW 273
26367: ST_TO_ADDR
// if ValidHex ( x , y ) then
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: CALL_OW 488
26382: IFFALSE 26417
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26384: LD_VAR 0 1
26388: PPUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: LD_INT 3
26401: PPUSH
26402: LD_INT 6
26404: PPUSH
26405: CALL_OW 12
26409: PPUSH
26410: LD_INT 1
26412: PPUSH
26413: CALL_OW 483
// end ;
26417: GO 26277
26419: POP
26420: POP
// end ;
26421: PPOPN 5
26423: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26424: LD_EXP 37
26428: PUSH
26429: LD_EXP 72
26433: AND
26434: IFFALSE 26528
26436: GO 26438
26438: DISABLE
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 32
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 21
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 69
26489: ST_TO_ADDR
// if not tmp then
26490: LD_VAR 0 2
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26528
// for i in tmp do
26499: LD_ADDR_VAR 0 1
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26526
// SetFuel ( i , 0 ) ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_INT 0
26519: PPUSH
26520: CALL_OW 240
26524: GO 26509
26526: POP
26527: POP
// end ;
26528: PPOPN 2
26530: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26531: LD_EXP 37
26535: PUSH
26536: LD_EXP 73
26540: AND
26541: IFFALSE 26607
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 30
26568: PUSH
26569: LD_INT 29
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 1
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26607
// DestroyUnit ( tmp [ 1 ] ) ;
26594: LD_VAR 0 1
26598: PUSH
26599: LD_INT 1
26601: ARRAY
26602: PPUSH
26603: CALL_OW 65
// end ;
26607: PPOPN 1
26609: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26610: LD_EXP 37
26614: PUSH
26615: LD_EXP 75
26619: AND
26620: IFFALSE 26749
26622: GO 26624
26624: DISABLE
26625: LD_INT 0
26627: PPUSH
// begin uc_side := 0 ;
26628: LD_ADDR_OWVAR 20
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// uc_nation := nation_arabian ;
26636: LD_ADDR_OWVAR 21
26640: PUSH
26641: LD_INT 2
26643: ST_TO_ADDR
// hc_gallery :=  ;
26644: LD_ADDR_OWVAR 33
26648: PUSH
26649: LD_STRING 
26651: ST_TO_ADDR
// hc_name :=  ;
26652: LD_ADDR_OWVAR 26
26656: PUSH
26657: LD_STRING 
26659: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26660: LD_INT 1
26662: PPUSH
26663: LD_INT 11
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 380
// un := CreateHuman ;
26673: LD_ADDR_VAR 0 1
26677: PUSH
26678: CALL_OW 44
26682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26683: LD_VAR 0 1
26687: PPUSH
26688: LD_INT 1
26690: PPUSH
26691: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26695: LD_INT 35
26697: PPUSH
26698: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_INT 22
26709: PUSH
26710: LD_OWVAR 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PPUSH
26719: CALL_OW 69
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 74
26733: PPUSH
26734: CALL_OW 115
// until IsDead ( un ) ;
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 301
26747: IFFALSE 26695
// end ;
26749: PPOPN 1
26751: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26752: LD_EXP 37
26756: PUSH
26757: LD_EXP 77
26761: AND
26762: IFFALSE 26774
26764: GO 26766
26766: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26767: LD_STRING earthquake(getX(game), 0, 32)
26769: PPUSH
26770: CALL_OW 559
26774: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26775: LD_EXP 37
26779: PUSH
26780: LD_EXP 78
26784: AND
26785: IFFALSE 26876
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin enable ;
26793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26794: LD_ADDR_VAR 0 1
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_OWVAR 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 33
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: ST_TO_ADDR
// if not tmp then
26841: LD_VAR 0 1
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 26876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26850: LD_VAR 0 1
26854: PUSH
26855: LD_INT 1
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 12
26867: ARRAY
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: CALL_OW 234
// end ;
26876: PPOPN 1
26878: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26879: LD_EXP 37
26883: PUSH
26884: LD_EXP 79
26888: AND
26889: IFFALSE 27030
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 25
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 3
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27030
// un := tmp [ rand ( 1 , tmp ) ] ;
26944: LD_ADDR_VAR 0 2
26948: PUSH
26949: LD_VAR 0 3
26953: PUSH
26954: LD_INT 1
26956: PPUSH
26957: LD_VAR 0 3
26961: PPUSH
26962: CALL_OW 12
26966: ARRAY
26967: ST_TO_ADDR
// if Crawls ( un ) then
26968: LD_VAR 0 2
26972: PPUSH
26973: CALL_OW 318
26977: IFFALSE 26988
// ComWalk ( un ) ;
26979: LD_VAR 0 2
26983: PPUSH
26984: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26988: LD_VAR 0 2
26992: PPUSH
26993: LD_INT 9
26995: PPUSH
26996: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27000: LD_INT 28
27002: PPUSH
27003: LD_OWVAR 2
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27015: LD_INT 29
27017: PPUSH
27018: LD_OWVAR 2
27022: PPUSH
27023: LD_INT 2
27025: PPUSH
27026: CALL_OW 322
// end ;
27030: PPOPN 3
27032: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27033: LD_EXP 37
27037: PUSH
27038: LD_EXP 80
27042: AND
27043: IFFALSE 27154
27045: GO 27047
27047: DISABLE
27048: LD_INT 0
27050: PPUSH
27051: PPUSH
27052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_OWVAR 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 25
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 69
27088: ST_TO_ADDR
// if not tmp then
27089: LD_VAR 0 3
27093: NOT
27094: IFFALSE 27098
// exit ;
27096: GO 27154
// un := tmp [ rand ( 1 , tmp ) ] ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_VAR 0 3
27107: PUSH
27108: LD_INT 1
27110: PPUSH
27111: LD_VAR 0 3
27115: PPUSH
27116: CALL_OW 12
27120: ARRAY
27121: ST_TO_ADDR
// if Crawls ( un ) then
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 318
27131: IFFALSE 27142
// ComWalk ( un ) ;
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_INT 8
27149: PPUSH
27150: CALL_OW 336
// end ;
27154: PPOPN 3
27156: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27157: LD_EXP 37
27161: PUSH
27162: LD_EXP 81
27166: AND
27167: IFFALSE 27311
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_OWVAR 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 21
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 34
27208: PUSH
27209: LD_INT 12
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 34
27218: PUSH
27219: LD_INT 51
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 34
27228: PUSH
27229: LD_INT 32
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 2
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27311
// for i in tmp do
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_VAR 0 2
27270: PUSH
27271: FOR_IN
27272: IFFALSE 27309
// if GetCargo ( i , mat_artifact ) = 0 then
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_INT 4
27281: PPUSH
27282: CALL_OW 289
27286: PUSH
27287: LD_INT 0
27289: EQUAL
27290: IFFALSE 27307
// SetCargo ( i , mat_siberit , 100 ) ;
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_INT 3
27299: PPUSH
27300: LD_INT 100
27302: PPUSH
27303: CALL_OW 290
27307: GO 27271
27309: POP
27310: POP
// end ;
27311: PPOPN 2
27313: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27314: LD_EXP 37
27318: PUSH
27319: LD_EXP 82
27323: AND
27324: IFFALSE 27507
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_OWVAR 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ST_TO_ADDR
// if not tmp then
27355: LD_VAR 0 2
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27507
// for i := 1 to 2 do
27364: LD_ADDR_VAR 0 1
27368: PUSH
27369: DOUBLE
27370: LD_INT 1
27372: DEC
27373: ST_TO_ADDR
27374: LD_INT 2
27376: PUSH
27377: FOR_TO
27378: IFFALSE 27505
// begin uc_side := your_side ;
27380: LD_ADDR_OWVAR 20
27384: PUSH
27385: LD_OWVAR 2
27389: ST_TO_ADDR
// uc_nation := nation_american ;
27390: LD_ADDR_OWVAR 21
27394: PUSH
27395: LD_INT 1
27397: ST_TO_ADDR
// vc_chassis := us_morphling ;
27398: LD_ADDR_OWVAR 37
27402: PUSH
27403: LD_INT 5
27405: ST_TO_ADDR
// vc_engine := engine_siberite ;
27406: LD_ADDR_OWVAR 39
27410: PUSH
27411: LD_INT 3
27413: ST_TO_ADDR
// vc_control := control_computer ;
27414: LD_ADDR_OWVAR 38
27418: PUSH
27419: LD_INT 3
27421: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27422: LD_ADDR_OWVAR 40
27426: PUSH
27427: LD_INT 10
27429: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: CALL_OW 310
27443: NOT
27444: IFFALSE 27491
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27446: CALL_OW 45
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_INT 1
27458: ARRAY
27459: PPUSH
27460: CALL_OW 250
27464: PPUSH
27465: LD_VAR 0 2
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: CALL_OW 251
27478: PPUSH
27479: LD_INT 12
27481: PPUSH
27482: LD_INT 1
27484: PPUSH
27485: CALL_OW 50
27489: GO 27503
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27491: CALL_OW 45
27495: PPUSH
27496: LD_INT 1
27498: PPUSH
27499: CALL_OW 51
// end ;
27503: GO 27377
27505: POP
27506: POP
// end ;
27507: PPOPN 2
27509: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27510: LD_EXP 37
27514: PUSH
27515: LD_EXP 83
27519: AND
27520: IFFALSE 27742
27522: GO 27524
27524: DISABLE
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27533: LD_ADDR_VAR 0 6
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 21
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: LD_INT 23
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: PPUSH
27582: CALL_OW 69
27586: ST_TO_ADDR
// if not tmp then
27587: LD_VAR 0 6
27591: NOT
27592: IFFALSE 27596
// exit ;
27594: GO 27742
// s1 := rand ( 1 , 4 ) ;
27596: LD_ADDR_VAR 0 2
27600: PUSH
27601: LD_INT 1
27603: PPUSH
27604: LD_INT 4
27606: PPUSH
27607: CALL_OW 12
27611: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_VAR 0 6
27621: PUSH
27622: LD_INT 1
27624: ARRAY
27625: PPUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 259
27635: ST_TO_ADDR
// if s1 = 1 then
27636: LD_VAR 0 2
27640: PUSH
27641: LD_INT 1
27643: EQUAL
27644: IFFALSE 27664
// s2 := rand ( 2 , 4 ) else
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 2
27653: PPUSH
27654: LD_INT 4
27656: PPUSH
27657: CALL_OW 12
27661: ST_TO_ADDR
27662: GO 27672
// s2 := 1 ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_INT 1
27671: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_VAR 0 6
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 3
27690: PPUSH
27691: CALL_OW 259
27695: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27696: LD_VAR 0 6
27700: PUSH
27701: LD_INT 1
27703: ARRAY
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 5
27714: PPUSH
27715: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27719: LD_VAR 0 6
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: LD_VAR 0 3
27732: PPUSH
27733: LD_VAR 0 4
27737: PPUSH
27738: CALL_OW 237
// end ;
27742: PPOPN 6
27744: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27745: LD_EXP 37
27749: PUSH
27750: LD_EXP 84
27754: AND
27755: IFFALSE 27834
27757: GO 27759
27759: DISABLE
27760: LD_INT 0
27762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_INT 22
27770: PUSH
27771: LD_OWVAR 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 30
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 69
27798: ST_TO_ADDR
// if not tmp then
27799: LD_VAR 0 1
27803: NOT
27804: IFFALSE 27808
// exit ;
27806: GO 27834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27808: LD_VAR 0 1
27812: PUSH
27813: LD_INT 1
27815: PPUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: CALL_OW 12
27825: ARRAY
27826: PPUSH
27827: LD_INT 1
27829: PPUSH
27830: CALL_OW 234
// end ;
27834: PPOPN 1
27836: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27837: LD_EXP 37
27841: PUSH
27842: LD_EXP 85
27846: AND
27847: IFFALSE 27959
27849: GO 27851
27851: DISABLE
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_OWVAR 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 27
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 26
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: LD_INT 28
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: ST_TO_ADDR
// if not tmp then
27921: LD_VAR 0 2
27925: NOT
27926: IFFALSE 27930
// exit ;
27928: GO 27959
// for i in tmp do
27930: LD_ADDR_VAR 0 1
27934: PUSH
27935: LD_VAR 0 2
27939: PUSH
27940: FOR_IN
27941: IFFALSE 27957
// SetLives ( i , 1 ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: CALL_OW 234
27955: GO 27940
27957: POP
27958: POP
// end ;
27959: PPOPN 2
27961: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27962: LD_EXP 37
27966: PUSH
27967: LD_EXP 86
27971: AND
27972: IFFALSE 28259
27974: GO 27976
27976: DISABLE
27977: LD_INT 0
27979: PPUSH
27980: PPUSH
27981: PPUSH
// begin i := rand ( 1 , 7 ) ;
27982: LD_ADDR_VAR 0 1
27986: PUSH
27987: LD_INT 1
27989: PPUSH
27990: LD_INT 7
27992: PPUSH
27993: CALL_OW 12
27997: ST_TO_ADDR
// case i of 1 :
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28021
28011: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28012: LD_STRING earthquake(getX(game), 0, 32)
28014: PPUSH
28015: CALL_OW 559
28019: GO 28259
28021: LD_INT 2
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28043
28029: POP
// begin ToLua ( displayStucuk(); ) ;
28030: LD_STRING displayStucuk();
28032: PPUSH
28033: CALL_OW 559
// ResetFog ;
28037: CALL_OW 335
// end ; 3 :
28041: GO 28259
28043: LD_INT 3
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28155
28051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 25
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PPUSH
28083: CALL_OW 69
28087: ST_TO_ADDR
// if not tmp then
28088: LD_VAR 0 2
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28259
// un := tmp [ rand ( 1 , tmp ) ] ;
28097: LD_ADDR_VAR 0 3
28101: PUSH
28102: LD_VAR 0 2
28106: PUSH
28107: LD_INT 1
28109: PPUSH
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 12
28119: ARRAY
28120: ST_TO_ADDR
// if Crawls ( un ) then
28121: LD_VAR 0 3
28125: PPUSH
28126: CALL_OW 318
28130: IFFALSE 28141
// ComWalk ( un ) ;
28132: LD_VAR 0 3
28136: PPUSH
28137: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28141: LD_VAR 0 3
28145: PPUSH
28146: LD_INT 8
28148: PPUSH
28149: CALL_OW 336
// end ; 4 :
28153: GO 28259
28155: LD_INT 4
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28237
28163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28164: LD_ADDR_VAR 0 2
28168: PUSH
28169: LD_INT 22
28171: PUSH
28172: LD_OWVAR 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 30
28183: PUSH
28184: LD_INT 29
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PPUSH
28195: CALL_OW 69
28199: ST_TO_ADDR
// if not tmp then
28200: LD_VAR 0 2
28204: NOT
28205: IFFALSE 28209
// exit ;
28207: GO 28259
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28209: LD_VAR 0 2
28213: PUSH
28214: LD_INT 1
28216: ARRAY
28217: PPUSH
28218: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28222: LD_VAR 0 2
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PPUSH
28231: CALL_OW 65
// end ; 5 .. 7 :
28235: GO 28259
28237: LD_INT 5
28239: DOUBLE
28240: GREATEREQUAL
28241: IFFALSE 28249
28243: LD_INT 7
28245: DOUBLE
28246: LESSEQUAL
28247: IFTRUE 28251
28249: GO 28258
28251: POP
// StreamSibBomb ; end ;
28252: CALL 24496 0 0
28256: GO 28259
28258: POP
// end ;
28259: PPOPN 3
28261: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28262: LD_EXP 37
28266: PUSH
28267: LD_EXP 87
28271: AND
28272: IFFALSE 28428
28274: GO 28276
28276: DISABLE
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
28281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28282: LD_ADDR_VAR 0 2
28286: PUSH
28287: LD_INT 81
28289: PUSH
28290: LD_OWVAR 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 21
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 21
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28428
// p := 0 ;
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28353: LD_INT 35
28355: PPUSH
28356: CALL_OW 67
// p := p + 1 ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 3
28369: PUSH
28370: LD_INT 1
28372: PLUS
28373: ST_TO_ADDR
// for i in tmp do
28374: LD_ADDR_VAR 0 1
28378: PUSH
28379: LD_VAR 0 2
28383: PUSH
28384: FOR_IN
28385: IFFALSE 28416
// if GetLives ( i ) < 1000 then
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 256
28396: PUSH
28397: LD_INT 1000
28399: LESS
28400: IFFALSE 28414
// SetLives ( i , 1000 ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: LD_INT 1000
28409: PPUSH
28410: CALL_OW 234
28414: GO 28384
28416: POP
28417: POP
// until p > 20 ;
28418: LD_VAR 0 3
28422: PUSH
28423: LD_INT 20
28425: GREATER
28426: IFFALSE 28353
// end ;
28428: PPOPN 3
28430: END
// every 0 0$1 trigger StreamModeActive and sTime do
28431: LD_EXP 37
28435: PUSH
28436: LD_EXP 88
28440: AND
28441: IFFALSE 28476
28443: GO 28445
28445: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28446: LD_INT 28
28448: PPUSH
28449: LD_OWVAR 2
28453: PPUSH
28454: LD_INT 2
28456: PPUSH
28457: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28461: LD_INT 30
28463: PPUSH
28464: LD_OWVAR 2
28468: PPUSH
28469: LD_INT 2
28471: PPUSH
28472: CALL_OW 322
// end ;
28476: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28477: LD_EXP 37
28481: PUSH
28482: LD_EXP 89
28486: AND
28487: IFFALSE 28608
28489: GO 28491
28491: DISABLE
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 22
28503: PUSH
28504: LD_OWVAR 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 23
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: PPUSH
28545: CALL_OW 69
28549: ST_TO_ADDR
// if not tmp then
28550: LD_VAR 0 2
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28608
// for i in tmp do
28559: LD_ADDR_VAR 0 1
28563: PUSH
28564: LD_VAR 0 2
28568: PUSH
28569: FOR_IN
28570: IFFALSE 28606
// begin if Crawls ( i ) then
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL_OW 318
28581: IFFALSE 28592
// ComWalk ( i ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 138
// SetClass ( i , 2 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 2
28599: PPUSH
28600: CALL_OW 336
// end ;
28604: GO 28569
28606: POP
28607: POP
// end ;
28608: PPOPN 2
28610: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28611: LD_EXP 37
28615: PUSH
28616: LD_EXP 90
28620: AND
28621: IFFALSE 28909
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28631: LD_OWVAR 2
28635: PPUSH
28636: LD_INT 9
28638: PPUSH
28639: LD_INT 1
28641: PPUSH
28642: LD_INT 1
28644: PPUSH
28645: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28649: LD_INT 9
28651: PPUSH
28652: LD_OWVAR 2
28656: PPUSH
28657: CALL_OW 343
// uc_side := 9 ;
28661: LD_ADDR_OWVAR 20
28665: PUSH
28666: LD_INT 9
28668: ST_TO_ADDR
// uc_nation := 2 ;
28669: LD_ADDR_OWVAR 21
28673: PUSH
28674: LD_INT 2
28676: ST_TO_ADDR
// hc_name := Dark Warrior ;
28677: LD_ADDR_OWVAR 26
28681: PUSH
28682: LD_STRING Dark Warrior
28684: ST_TO_ADDR
// hc_gallery :=  ;
28685: LD_ADDR_OWVAR 33
28689: PUSH
28690: LD_STRING 
28692: ST_TO_ADDR
// hc_noskilllimit := true ;
28693: LD_ADDR_OWVAR 76
28697: PUSH
28698: LD_INT 1
28700: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28701: LD_ADDR_OWVAR 31
28705: PUSH
28706: LD_INT 30
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 30
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// un := CreateHuman ;
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: CALL_OW 44
28733: ST_TO_ADDR
// hc_noskilllimit := false ;
28734: LD_ADDR_OWVAR 76
28738: PUSH
28739: LD_INT 0
28741: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28742: LD_VAR 0 3
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 51
// ToLua ( playRanger() ) ;
28754: LD_STRING playRanger()
28756: PPUSH
28757: CALL_OW 559
// p := 0 ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_INT 0
28768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28769: LD_INT 35
28771: PPUSH
28772: CALL_OW 67
// p := p + 1 ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_VAR 0 2
28785: PUSH
28786: LD_INT 1
28788: PLUS
28789: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 256
28799: PUSH
28800: LD_INT 1000
28802: LESS
28803: IFFALSE 28817
// SetLives ( un , 1000 ) ;
28805: LD_VAR 0 3
28809: PPUSH
28810: LD_INT 1000
28812: PPUSH
28813: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_INT 81
28824: PUSH
28825: LD_OWVAR 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 91
28836: PUSH
28837: LD_VAR 0 3
28841: PUSH
28842: LD_INT 30
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: PPUSH
28859: LD_VAR 0 3
28863: PPUSH
28864: CALL_OW 74
28868: PPUSH
28869: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28873: LD_VAR 0 2
28877: PUSH
28878: LD_INT 80
28880: GREATER
28881: PUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 301
28891: OR
28892: IFFALSE 28769
// if un then
28894: LD_VAR 0 3
28898: IFFALSE 28909
// RemoveUnit ( un ) ;
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 64
// end ;
28909: PPOPN 3
28911: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28912: LD_EXP 91
28916: IFFALSE 29032
28918: GO 28920
28920: DISABLE
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
28925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28926: LD_ADDR_VAR 0 2
28930: PUSH
28931: LD_INT 81
28933: PUSH
28934: LD_OWVAR 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 21
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28962: LD_STRING playComputer()
28964: PPUSH
28965: CALL_OW 559
// if not tmp then
28969: LD_VAR 0 2
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29032
// for i in tmp do
28978: LD_ADDR_VAR 0 1
28982: PUSH
28983: LD_VAR 0 2
28987: PUSH
28988: FOR_IN
28989: IFFALSE 29030
// for j := 1 to 4 do
28991: LD_ADDR_VAR 0 3
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_INT 4
29003: PUSH
29004: FOR_TO
29005: IFFALSE 29026
// SetSkill ( i , j , 10 ) ;
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_VAR 0 3
29016: PPUSH
29017: LD_INT 10
29019: PPUSH
29020: CALL_OW 237
29024: GO 29004
29026: POP
29027: POP
29028: GO 28988
29030: POP
29031: POP
// end ;
29032: PPOPN 3
29034: END
// every 0 0$1 trigger s30 do var i , tmp ;
29035: LD_EXP 92
29039: IFFALSE 29108
29041: GO 29043
29043: DISABLE
29044: LD_INT 0
29046: PPUSH
29047: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29048: LD_ADDR_VAR 0 2
29052: PUSH
29053: LD_INT 22
29055: PUSH
29056: LD_OWVAR 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29108
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29106
// SetLives ( i , 300 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_INT 300
29099: PPUSH
29100: CALL_OW 234
29104: GO 29089
29106: POP
29107: POP
// end ;
29108: PPOPN 2
29110: END
// every 0 0$1 trigger s60 do var i , tmp ;
29111: LD_EXP 93
29115: IFFALSE 29184
29117: GO 29119
29119: DISABLE
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 69
29145: ST_TO_ADDR
// if not tmp then
29146: LD_VAR 0 2
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29184
// for i in tmp do
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_VAR 0 2
29164: PUSH
29165: FOR_IN
29166: IFFALSE 29182
// SetLives ( i , 600 ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_INT 600
29175: PPUSH
29176: CALL_OW 234
29180: GO 29165
29182: POP
29183: POP
// end ;
29184: PPOPN 2
29186: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29187: LD_INT 0
29189: PPUSH
// case cmd of 301 :
29190: LD_VAR 0 1
29194: PUSH
29195: LD_INT 301
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29235
29203: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29204: LD_VAR 0 6
29208: PPUSH
29209: LD_VAR 0 7
29213: PPUSH
29214: LD_VAR 0 8
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: LD_VAR 0 5
29228: PPUSH
29229: CALL 30444 0 5
29233: GO 29356
29235: LD_INT 302
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29280
29243: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29244: LD_VAR 0 6
29248: PPUSH
29249: LD_VAR 0 7
29253: PPUSH
29254: LD_VAR 0 8
29258: PPUSH
29259: LD_VAR 0 9
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL 30535 0 6
29278: GO 29356
29280: LD_INT 303
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29325
29288: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29289: LD_VAR 0 6
29293: PPUSH
29294: LD_VAR 0 7
29298: PPUSH
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 29361 0 6
29323: GO 29356
29325: LD_INT 304
29327: DOUBLE
29328: EQUAL
29329: IFTRUE 29333
29331: GO 29355
29333: POP
// hHackTeleport ( unit , x , y ) ; end ;
29334: LD_VAR 0 2
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: LD_VAR 0 5
29348: PPUSH
29349: CALL 31128 0 3
29353: GO 29356
29355: POP
// end ;
29356: LD_VAR 0 12
29360: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29365: LD_VAR 0 1
29369: PUSH
29370: LD_INT 1
29372: LESS
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 3
29381: GREATER
29382: OR
29383: PUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: LD_VAR 0 6
29393: PPUSH
29394: CALL_OW 428
29398: OR
29399: IFFALSE 29403
// exit ;
29401: GO 30131
// uc_side := your_side ;
29403: LD_ADDR_OWVAR 20
29407: PUSH
29408: LD_OWVAR 2
29412: ST_TO_ADDR
// uc_nation := nation ;
29413: LD_ADDR_OWVAR 21
29417: PUSH
29418: LD_VAR 0 1
29422: ST_TO_ADDR
// bc_level = 1 ;
29423: LD_ADDR_OWVAR 43
29427: PUSH
29428: LD_INT 1
29430: ST_TO_ADDR
// case btype of 1 :
29431: LD_VAR 0 2
29435: PUSH
29436: LD_INT 1
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29455
29444: POP
// bc_type := b_depot ; 2 :
29445: LD_ADDR_OWVAR 42
29449: PUSH
29450: LD_INT 0
29452: ST_TO_ADDR
29453: GO 30075
29455: LD_INT 2
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29474
29463: POP
// bc_type := b_warehouse ; 3 :
29464: LD_ADDR_OWVAR 42
29468: PUSH
29469: LD_INT 1
29471: ST_TO_ADDR
29472: GO 30075
29474: LD_INT 3
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29493
29482: POP
// bc_type := b_lab ; 4 .. 9 :
29483: LD_ADDR_OWVAR 42
29487: PUSH
29488: LD_INT 6
29490: ST_TO_ADDR
29491: GO 30075
29493: LD_INT 4
29495: DOUBLE
29496: GREATEREQUAL
29497: IFFALSE 29505
29499: LD_INT 9
29501: DOUBLE
29502: LESSEQUAL
29503: IFTRUE 29507
29505: GO 29567
29507: POP
// begin bc_type := b_lab_half ;
29508: LD_ADDR_OWVAR 42
29512: PUSH
29513: LD_INT 7
29515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29516: LD_ADDR_OWVAR 44
29520: PUSH
29521: LD_INT 10
29523: PUSH
29524: LD_INT 11
29526: PUSH
29527: LD_INT 12
29529: PUSH
29530: LD_INT 15
29532: PUSH
29533: LD_INT 14
29535: PUSH
29536: LD_INT 13
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_VAR 0 2
29551: PUSH
29552: LD_INT 3
29554: MINUS
29555: ARRAY
29556: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29557: LD_ADDR_OWVAR 45
29561: PUSH
29562: LD_INT 9
29564: ST_TO_ADDR
// end ; 10 .. 13 :
29565: GO 30075
29567: LD_INT 10
29569: DOUBLE
29570: GREATEREQUAL
29571: IFFALSE 29579
29573: LD_INT 13
29575: DOUBLE
29576: LESSEQUAL
29577: IFTRUE 29581
29579: GO 29658
29581: POP
// begin bc_type := b_lab_full ;
29582: LD_ADDR_OWVAR 42
29586: PUSH
29587: LD_INT 8
29589: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29590: LD_ADDR_OWVAR 44
29594: PUSH
29595: LD_INT 10
29597: PUSH
29598: LD_INT 12
29600: PUSH
29601: LD_INT 14
29603: PUSH
29604: LD_INT 13
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: PUSH
29613: LD_VAR 0 2
29617: PUSH
29618: LD_INT 9
29620: MINUS
29621: ARRAY
29622: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29623: LD_ADDR_OWVAR 45
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 15
29633: PUSH
29634: LD_INT 12
29636: PUSH
29637: LD_INT 15
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: PUSH
29646: LD_VAR 0 2
29650: PUSH
29651: LD_INT 9
29653: MINUS
29654: ARRAY
29655: ST_TO_ADDR
// end ; 14 :
29656: GO 30075
29658: LD_INT 14
29660: DOUBLE
29661: EQUAL
29662: IFTRUE 29666
29664: GO 29677
29666: POP
// bc_type := b_workshop ; 15 :
29667: LD_ADDR_OWVAR 42
29671: PUSH
29672: LD_INT 2
29674: ST_TO_ADDR
29675: GO 30075
29677: LD_INT 15
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29696
29685: POP
// bc_type := b_factory ; 16 :
29686: LD_ADDR_OWVAR 42
29690: PUSH
29691: LD_INT 3
29693: ST_TO_ADDR
29694: GO 30075
29696: LD_INT 16
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29715
29704: POP
// bc_type := b_ext_gun ; 17 :
29705: LD_ADDR_OWVAR 42
29709: PUSH
29710: LD_INT 17
29712: ST_TO_ADDR
29713: GO 30075
29715: LD_INT 17
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29751
29723: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29724: LD_ADDR_OWVAR 42
29728: PUSH
29729: LD_INT 19
29731: PUSH
29732: LD_INT 23
29734: PUSH
29735: LD_INT 19
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: PUSH
29743: LD_VAR 0 1
29747: ARRAY
29748: ST_TO_ADDR
29749: GO 30075
29751: LD_INT 18
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29759
29757: GO 29770
29759: POP
// bc_type := b_ext_radar ; 19 :
29760: LD_ADDR_OWVAR 42
29764: PUSH
29765: LD_INT 20
29767: ST_TO_ADDR
29768: GO 30075
29770: LD_INT 19
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29789
29778: POP
// bc_type := b_ext_radio ; 20 :
29779: LD_ADDR_OWVAR 42
29783: PUSH
29784: LD_INT 22
29786: ST_TO_ADDR
29787: GO 30075
29789: LD_INT 20
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29797
29795: GO 29808
29797: POP
// bc_type := b_ext_siberium ; 21 :
29798: LD_ADDR_OWVAR 42
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
29806: GO 30075
29808: LD_INT 21
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29827
29816: POP
// bc_type := b_ext_computer ; 22 :
29817: LD_ADDR_OWVAR 42
29821: PUSH
29822: LD_INT 24
29824: ST_TO_ADDR
29825: GO 30075
29827: LD_INT 22
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29846
29835: POP
// bc_type := b_ext_track ; 23 :
29836: LD_ADDR_OWVAR 42
29840: PUSH
29841: LD_INT 16
29843: ST_TO_ADDR
29844: GO 30075
29846: LD_INT 23
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29865
29854: POP
// bc_type := b_ext_laser ; 24 :
29855: LD_ADDR_OWVAR 42
29859: PUSH
29860: LD_INT 25
29862: ST_TO_ADDR
29863: GO 30075
29865: LD_INT 24
29867: DOUBLE
29868: EQUAL
29869: IFTRUE 29873
29871: GO 29884
29873: POP
// bc_type := b_control_tower ; 25 :
29874: LD_ADDR_OWVAR 42
29878: PUSH
29879: LD_INT 36
29881: ST_TO_ADDR
29882: GO 30075
29884: LD_INT 25
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29903
29892: POP
// bc_type := b_breastwork ; 26 :
29893: LD_ADDR_OWVAR 42
29897: PUSH
29898: LD_INT 31
29900: ST_TO_ADDR
29901: GO 30075
29903: LD_INT 26
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29922
29911: POP
// bc_type := b_bunker ; 27 :
29912: LD_ADDR_OWVAR 42
29916: PUSH
29917: LD_INT 32
29919: ST_TO_ADDR
29920: GO 30075
29922: LD_INT 27
29924: DOUBLE
29925: EQUAL
29926: IFTRUE 29930
29928: GO 29941
29930: POP
// bc_type := b_turret ; 28 :
29931: LD_ADDR_OWVAR 42
29935: PUSH
29936: LD_INT 33
29938: ST_TO_ADDR
29939: GO 30075
29941: LD_INT 28
29943: DOUBLE
29944: EQUAL
29945: IFTRUE 29949
29947: GO 29960
29949: POP
// bc_type := b_armoury ; 29 :
29950: LD_ADDR_OWVAR 42
29954: PUSH
29955: LD_INT 4
29957: ST_TO_ADDR
29958: GO 30075
29960: LD_INT 29
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29979
29968: POP
// bc_type := b_barracks ; 30 :
29969: LD_ADDR_OWVAR 42
29973: PUSH
29974: LD_INT 5
29976: ST_TO_ADDR
29977: GO 30075
29979: LD_INT 30
29981: DOUBLE
29982: EQUAL
29983: IFTRUE 29987
29985: GO 29998
29987: POP
// bc_type := b_solar_power ; 31 :
29988: LD_ADDR_OWVAR 42
29992: PUSH
29993: LD_INT 27
29995: ST_TO_ADDR
29996: GO 30075
29998: LD_INT 31
30000: DOUBLE
30001: EQUAL
30002: IFTRUE 30006
30004: GO 30017
30006: POP
// bc_type := b_oil_power ; 32 :
30007: LD_ADDR_OWVAR 42
30011: PUSH
30012: LD_INT 26
30014: ST_TO_ADDR
30015: GO 30075
30017: LD_INT 32
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30036
30025: POP
// bc_type := b_siberite_power ; 33 :
30026: LD_ADDR_OWVAR 42
30030: PUSH
30031: LD_INT 28
30033: ST_TO_ADDR
30034: GO 30075
30036: LD_INT 33
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30055
30044: POP
// bc_type := b_oil_mine ; 34 :
30045: LD_ADDR_OWVAR 42
30049: PUSH
30050: LD_INT 29
30052: ST_TO_ADDR
30053: GO 30075
30055: LD_INT 34
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30074
30063: POP
// bc_type := b_siberite_mine ; end ;
30064: LD_ADDR_OWVAR 42
30068: PUSH
30069: LD_INT 30
30071: ST_TO_ADDR
30072: GO 30075
30074: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30075: LD_ADDR_VAR 0 8
30079: PUSH
30080: LD_VAR 0 5
30084: PPUSH
30085: LD_VAR 0 6
30089: PPUSH
30090: LD_VAR 0 3
30094: PPUSH
30095: CALL_OW 47
30099: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30100: LD_OWVAR 42
30104: PUSH
30105: LD_INT 32
30107: PUSH
30108: LD_INT 33
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: IN
30115: IFFALSE 30131
// PlaceWeaponTurret ( b , weapon ) ;
30117: LD_VAR 0 8
30121: PPUSH
30122: LD_VAR 0 4
30126: PPUSH
30127: CALL_OW 431
// end ;
30131: LD_VAR 0 7
30135: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30136: LD_INT 0
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30142: LD_ADDR_VAR 0 4
30146: PUSH
30147: LD_INT 22
30149: PUSH
30150: LD_OWVAR 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 69
30195: ST_TO_ADDR
// if not tmp then
30196: LD_VAR 0 4
30200: NOT
30201: IFFALSE 30205
// exit ;
30203: GO 30264
// for i in tmp do
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_VAR 0 4
30214: PUSH
30215: FOR_IN
30216: IFFALSE 30262
// for j = 1 to 3 do
30218: LD_ADDR_VAR 0 3
30222: PUSH
30223: DOUBLE
30224: LD_INT 1
30226: DEC
30227: ST_TO_ADDR
30228: LD_INT 3
30230: PUSH
30231: FOR_TO
30232: IFFALSE 30258
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30234: LD_VAR 0 2
30238: PPUSH
30239: CALL_OW 274
30243: PPUSH
30244: LD_VAR 0 3
30248: PPUSH
30249: LD_INT 99999
30251: PPUSH
30252: CALL_OW 277
30256: GO 30231
30258: POP
30259: POP
30260: GO 30215
30262: POP
30263: POP
// end ;
30264: LD_VAR 0 1
30268: RET
// export function hHackSetLevel10 ; var i , j ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30274: LD_ADDR_VAR 0 2
30278: PUSH
30279: LD_INT 21
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 69
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30347
// if IsSelected ( i ) then
30297: LD_VAR 0 2
30301: PPUSH
30302: CALL_OW 306
30306: IFFALSE 30345
// begin for j := 1 to 4 do
30308: LD_ADDR_VAR 0 3
30312: PUSH
30313: DOUBLE
30314: LD_INT 1
30316: DEC
30317: ST_TO_ADDR
30318: LD_INT 4
30320: PUSH
30321: FOR_TO
30322: IFFALSE 30343
// SetSkill ( i , j , 10 ) ;
30324: LD_VAR 0 2
30328: PPUSH
30329: LD_VAR 0 3
30333: PPUSH
30334: LD_INT 10
30336: PPUSH
30337: CALL_OW 237
30341: GO 30321
30343: POP
30344: POP
// end ;
30345: GO 30294
30347: POP
30348: POP
// end ;
30349: LD_VAR 0 1
30353: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30354: LD_INT 0
30356: PPUSH
30357: PPUSH
30358: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30359: LD_ADDR_VAR 0 2
30363: PUSH
30364: LD_INT 22
30366: PUSH
30367: LD_OWVAR 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 21
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 69
30394: PUSH
30395: FOR_IN
30396: IFFALSE 30437
// begin for j := 1 to 4 do
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: DOUBLE
30404: LD_INT 1
30406: DEC
30407: ST_TO_ADDR
30408: LD_INT 4
30410: PUSH
30411: FOR_TO
30412: IFFALSE 30433
// SetSkill ( i , j , 10 ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_INT 10
30426: PPUSH
30427: CALL_OW 237
30431: GO 30411
30433: POP
30434: POP
// end ;
30435: GO 30395
30437: POP
30438: POP
// end ;
30439: LD_VAR 0 1
30443: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30444: LD_INT 0
30446: PPUSH
// uc_side := your_side ;
30447: LD_ADDR_OWVAR 20
30451: PUSH
30452: LD_OWVAR 2
30456: ST_TO_ADDR
// uc_nation := nation ;
30457: LD_ADDR_OWVAR 21
30461: PUSH
30462: LD_VAR 0 1
30466: ST_TO_ADDR
// InitHc ;
30467: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30471: LD_INT 0
30473: PPUSH
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30488: LD_VAR 0 4
30492: PPUSH
30493: LD_VAR 0 5
30497: PPUSH
30498: CALL_OW 428
30502: PUSH
30503: LD_INT 0
30505: EQUAL
30506: IFFALSE 30530
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30508: CALL_OW 44
30512: PPUSH
30513: LD_VAR 0 4
30517: PPUSH
30518: LD_VAR 0 5
30522: PPUSH
30523: LD_INT 1
30525: PPUSH
30526: CALL_OW 48
// end ;
30530: LD_VAR 0 6
30534: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
// uc_side := your_side ;
30539: LD_ADDR_OWVAR 20
30543: PUSH
30544: LD_OWVAR 2
30548: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30549: LD_VAR 0 1
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: IN
30576: IFFALSE 30588
// uc_nation := nation_american else
30578: LD_ADDR_OWVAR 21
30582: PUSH
30583: LD_INT 1
30585: ST_TO_ADDR
30586: GO 30631
// if chassis in [ 11 , 12 , 13 , 14 ] then
30588: LD_VAR 0 1
30592: PUSH
30593: LD_INT 11
30595: PUSH
30596: LD_INT 12
30598: PUSH
30599: LD_INT 13
30601: PUSH
30602: LD_INT 14
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: IN
30611: IFFALSE 30623
// uc_nation := nation_arabian else
30613: LD_ADDR_OWVAR 21
30617: PUSH
30618: LD_INT 2
30620: ST_TO_ADDR
30621: GO 30631
// uc_nation := nation_russian ;
30623: LD_ADDR_OWVAR 21
30627: PUSH
30628: LD_INT 3
30630: ST_TO_ADDR
// vc_chassis := chassis ;
30631: LD_ADDR_OWVAR 37
30635: PUSH
30636: LD_VAR 0 1
30640: ST_TO_ADDR
// vc_engine := engine ;
30641: LD_ADDR_OWVAR 39
30645: PUSH
30646: LD_VAR 0 2
30650: ST_TO_ADDR
// vc_control := control ;
30651: LD_ADDR_OWVAR 38
30655: PUSH
30656: LD_VAR 0 3
30660: ST_TO_ADDR
// vc_weapon := weapon ;
30661: LD_ADDR_OWVAR 40
30665: PUSH
30666: LD_VAR 0 4
30670: ST_TO_ADDR
// un := CreateVehicle ;
30671: LD_ADDR_VAR 0 8
30675: PUSH
30676: CALL_OW 45
30680: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30681: LD_VAR 0 8
30685: PPUSH
30686: LD_INT 0
30688: PPUSH
30689: LD_INT 5
30691: PPUSH
30692: CALL_OW 12
30696: PPUSH
30697: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30701: LD_VAR 0 8
30705: PPUSH
30706: LD_VAR 0 5
30710: PPUSH
30711: LD_VAR 0 6
30715: PPUSH
30716: LD_INT 1
30718: PPUSH
30719: CALL_OW 48
// end ;
30723: LD_VAR 0 7
30727: RET
// export hInvincible ; every 1 do
30728: GO 30730
30730: DISABLE
// hInvincible := [ ] ;
30731: LD_ADDR_EXP 94
30735: PUSH
30736: EMPTY
30737: ST_TO_ADDR
30738: END
// every 10 do var i ;
30739: GO 30741
30741: DISABLE
30742: LD_INT 0
30744: PPUSH
// begin enable ;
30745: ENABLE
// if not hInvincible then
30746: LD_EXP 94
30750: NOT
30751: IFFALSE 30755
// exit ;
30753: GO 30799
// for i in hInvincible do
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_EXP 94
30764: PUSH
30765: FOR_IN
30766: IFFALSE 30797
// if GetLives ( i ) < 1000 then
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 256
30777: PUSH
30778: LD_INT 1000
30780: LESS
30781: IFFALSE 30795
// SetLives ( i , 1000 ) ;
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_INT 1000
30790: PPUSH
30791: CALL_OW 234
30795: GO 30765
30797: POP
30798: POP
// end ;
30799: PPOPN 1
30801: END
// export function hHackInvincible ; var i ; begin
30802: LD_INT 0
30804: PPUSH
30805: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30806: LD_ADDR_VAR 0 2
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 21
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 21
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: PPUSH
30839: CALL_OW 69
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30906
// if IsSelected ( i ) then
30847: LD_VAR 0 2
30851: PPUSH
30852: CALL_OW 306
30856: IFFALSE 30904
// begin if i in hInvincible then
30858: LD_VAR 0 2
30862: PUSH
30863: LD_EXP 94
30867: IN
30868: IFFALSE 30888
// hInvincible := hInvincible diff i else
30870: LD_ADDR_EXP 94
30874: PUSH
30875: LD_EXP 94
30879: PUSH
30880: LD_VAR 0 2
30884: DIFF
30885: ST_TO_ADDR
30886: GO 30904
// hInvincible := hInvincible union i ;
30888: LD_ADDR_EXP 94
30892: PUSH
30893: LD_EXP 94
30897: PUSH
30898: LD_VAR 0 2
30902: UNION
30903: ST_TO_ADDR
// end ;
30904: GO 30844
30906: POP
30907: POP
// end ;
30908: LD_VAR 0 1
30912: RET
// export function hHackInvisible ; var i , j ; begin
30913: LD_INT 0
30915: PPUSH
30916: PPUSH
30917: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30918: LD_ADDR_VAR 0 2
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: PUSH
30938: FOR_IN
30939: IFFALSE 30963
// if IsSelected ( i ) then
30941: LD_VAR 0 2
30945: PPUSH
30946: CALL_OW 306
30950: IFFALSE 30961
// ComForceInvisible ( i ) ;
30952: LD_VAR 0 2
30956: PPUSH
30957: CALL_OW 496
30961: GO 30938
30963: POP
30964: POP
// end ;
30965: LD_VAR 0 1
30969: RET
// export function hHackChangeYourSide ; begin
30970: LD_INT 0
30972: PPUSH
// if your_side = 8 then
30973: LD_OWVAR 2
30977: PUSH
30978: LD_INT 8
30980: EQUAL
30981: IFFALSE 30993
// your_side := 0 else
30983: LD_ADDR_OWVAR 2
30987: PUSH
30988: LD_INT 0
30990: ST_TO_ADDR
30991: GO 31007
// your_side := your_side + 1 ;
30993: LD_ADDR_OWVAR 2
30997: PUSH
30998: LD_OWVAR 2
31002: PUSH
31003: LD_INT 1
31005: PLUS
31006: ST_TO_ADDR
// end ;
31007: LD_VAR 0 1
31011: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31012: LD_INT 0
31014: PPUSH
31015: PPUSH
31016: PPUSH
// for i in all_units do
31017: LD_ADDR_VAR 0 2
31021: PUSH
31022: LD_OWVAR 3
31026: PUSH
31027: FOR_IN
31028: IFFALSE 31106
// if IsSelected ( i ) then
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 306
31039: IFFALSE 31104
// begin j := GetSide ( i ) ;
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL_OW 255
31055: ST_TO_ADDR
// if j = 8 then
31056: LD_VAR 0 3
31060: PUSH
31061: LD_INT 8
31063: EQUAL
31064: IFFALSE 31076
// j := 0 else
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
31074: GO 31090
// j := j + 1 ;
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_VAR 0 3
31085: PUSH
31086: LD_INT 1
31088: PLUS
31089: ST_TO_ADDR
// SetSide ( i , j ) ;
31090: LD_VAR 0 2
31094: PPUSH
31095: LD_VAR 0 3
31099: PPUSH
31100: CALL_OW 235
// end ;
31104: GO 31027
31106: POP
31107: POP
// end ;
31108: LD_VAR 0 1
31112: RET
// export function hHackFog ; begin
31113: LD_INT 0
31115: PPUSH
// FogOff ( true ) ;
31116: LD_INT 1
31118: PPUSH
31119: CALL_OW 344
// end ;
31123: LD_VAR 0 1
31127: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31128: LD_INT 0
31130: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31131: LD_VAR 0 1
31135: PPUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: LD_INT 1
31148: PPUSH
31149: LD_INT 1
31151: PPUSH
31152: CALL_OW 483
// CenterOnXY ( x , y ) ;
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 84
// end ;
31170: LD_VAR 0 4
31174: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31175: LD_INT 0
31177: PPUSH
31178: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31179: LD_VAR 0 1
31183: NOT
31184: PUSH
31185: LD_VAR 0 2
31189: PPUSH
31190: LD_VAR 0 3
31194: PPUSH
31195: CALL_OW 488
31199: NOT
31200: OR
31201: PUSH
31202: LD_VAR 0 1
31206: PPUSH
31207: CALL_OW 266
31211: PUSH
31212: LD_INT 3
31214: NONEQUAL
31215: PUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 247
31225: PUSH
31226: LD_INT 1
31228: EQUAL
31229: NOT
31230: AND
31231: OR
31232: IFFALSE 31236
// exit ;
31234: GO 31385
// if GetType ( factory ) = unit_human then
31236: LD_VAR 0 1
31240: PPUSH
31241: CALL_OW 247
31245: PUSH
31246: LD_INT 1
31248: EQUAL
31249: IFFALSE 31266
// factory := IsInUnit ( factory ) ;
31251: LD_ADDR_VAR 0 1
31255: PUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 310
31265: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 266
31275: PUSH
31276: LD_INT 3
31278: NONEQUAL
31279: IFFALSE 31283
// exit ;
31281: GO 31385
// if HexInfo ( x , y ) = factory then
31283: LD_VAR 0 2
31287: PPUSH
31288: LD_VAR 0 3
31292: PPUSH
31293: CALL_OW 428
31297: PUSH
31298: LD_VAR 0 1
31302: EQUAL
31303: IFFALSE 31330
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31305: LD_ADDR_EXP 95
31309: PUSH
31310: LD_EXP 95
31314: PPUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: LD_INT 0
31322: PPUSH
31323: CALL_OW 1
31327: ST_TO_ADDR
31328: GO 31381
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31330: LD_ADDR_EXP 95
31334: PUSH
31335: LD_EXP 95
31339: PPUSH
31340: LD_VAR 0 1
31344: PPUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 255
31354: PUSH
31355: LD_VAR 0 1
31359: PUSH
31360: LD_VAR 0 2
31364: PUSH
31365: LD_VAR 0 3
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: PPUSH
31376: CALL_OW 1
31380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31381: CALL 31390 0 0
// end ;
31385: LD_VAR 0 4
31389: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31395: LD_STRING resetFactoryWaypoint();
31397: PPUSH
31398: CALL_OW 559
// if factoryWaypoints then
31402: LD_EXP 95
31406: IFFALSE 31532
// begin list := PrepareArray ( factoryWaypoints ) ;
31408: LD_ADDR_VAR 0 3
31412: PUSH
31413: LD_EXP 95
31417: PPUSH
31418: CALL 78674 0 1
31422: ST_TO_ADDR
// for i := 1 to list do
31423: LD_ADDR_VAR 0 2
31427: PUSH
31428: DOUBLE
31429: LD_INT 1
31431: DEC
31432: ST_TO_ADDR
31433: LD_VAR 0 3
31437: PUSH
31438: FOR_TO
31439: IFFALSE 31530
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31441: LD_STRING setFactoryWaypointXY(
31443: PUSH
31444: LD_VAR 0 3
31448: PUSH
31449: LD_VAR 0 2
31453: ARRAY
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: STR
31459: PUSH
31460: LD_STRING ,
31462: STR
31463: PUSH
31464: LD_VAR 0 3
31468: PUSH
31469: LD_VAR 0 2
31473: ARRAY
31474: PUSH
31475: LD_INT 2
31477: ARRAY
31478: STR
31479: PUSH
31480: LD_STRING ,
31482: STR
31483: PUSH
31484: LD_VAR 0 3
31488: PUSH
31489: LD_VAR 0 2
31493: ARRAY
31494: PUSH
31495: LD_INT 3
31497: ARRAY
31498: STR
31499: PUSH
31500: LD_STRING ,
31502: STR
31503: PUSH
31504: LD_VAR 0 3
31508: PUSH
31509: LD_VAR 0 2
31513: ARRAY
31514: PUSH
31515: LD_INT 4
31517: ARRAY
31518: STR
31519: PUSH
31520: LD_STRING )
31522: STR
31523: PPUSH
31524: CALL_OW 559
31528: GO 31438
31530: POP
31531: POP
// end ; end ;
31532: LD_VAR 0 1
31536: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31537: LD_INT 0
31539: PPUSH
// if HexInfo ( x , y ) = warehouse then
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_VAR 0 3
31549: PPUSH
31550: CALL_OW 428
31554: PUSH
31555: LD_VAR 0 1
31559: EQUAL
31560: IFFALSE 31587
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31562: LD_ADDR_EXP 96
31566: PUSH
31567: LD_EXP 96
31571: PPUSH
31572: LD_VAR 0 1
31576: PPUSH
31577: LD_INT 0
31579: PPUSH
31580: CALL_OW 1
31584: ST_TO_ADDR
31585: GO 31638
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31587: LD_ADDR_EXP 96
31591: PUSH
31592: LD_EXP 96
31596: PPUSH
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 255
31611: PUSH
31612: LD_VAR 0 1
31616: PUSH
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 3
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: PPUSH
31633: CALL_OW 1
31637: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31638: CALL 31647 0 0
// end ;
31642: LD_VAR 0 4
31646: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
31651: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31652: LD_STRING resetWarehouseGatheringPoints();
31654: PPUSH
31655: CALL_OW 559
// if warehouseGatheringPoints then
31659: LD_EXP 96
31663: IFFALSE 31789
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31665: LD_ADDR_VAR 0 3
31669: PUSH
31670: LD_EXP 96
31674: PPUSH
31675: CALL 78674 0 1
31679: ST_TO_ADDR
// for i := 1 to list do
31680: LD_ADDR_VAR 0 2
31684: PUSH
31685: DOUBLE
31686: LD_INT 1
31688: DEC
31689: ST_TO_ADDR
31690: LD_VAR 0 3
31694: PUSH
31695: FOR_TO
31696: IFFALSE 31787
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31698: LD_STRING setWarehouseGatheringPointXY(
31700: PUSH
31701: LD_VAR 0 3
31705: PUSH
31706: LD_VAR 0 2
31710: ARRAY
31711: PUSH
31712: LD_INT 1
31714: ARRAY
31715: STR
31716: PUSH
31717: LD_STRING ,
31719: STR
31720: PUSH
31721: LD_VAR 0 3
31725: PUSH
31726: LD_VAR 0 2
31730: ARRAY
31731: PUSH
31732: LD_INT 2
31734: ARRAY
31735: STR
31736: PUSH
31737: LD_STRING ,
31739: STR
31740: PUSH
31741: LD_VAR 0 3
31745: PUSH
31746: LD_VAR 0 2
31750: ARRAY
31751: PUSH
31752: LD_INT 3
31754: ARRAY
31755: STR
31756: PUSH
31757: LD_STRING ,
31759: STR
31760: PUSH
31761: LD_VAR 0 3
31765: PUSH
31766: LD_VAR 0 2
31770: ARRAY
31771: PUSH
31772: LD_INT 4
31774: ARRAY
31775: STR
31776: PUSH
31777: LD_STRING )
31779: STR
31780: PPUSH
31781: CALL_OW 559
31785: GO 31695
31787: POP
31788: POP
// end ; end ;
31789: LD_VAR 0 1
31793: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31794: LD_EXP 96
31798: IFFALSE 32483
31800: GO 31802
31802: DISABLE
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
31811: PPUSH
31812: PPUSH
31813: PPUSH
// begin enable ;
31814: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: LD_EXP 96
31824: PPUSH
31825: CALL 78674 0 1
31829: ST_TO_ADDR
// if not list then
31830: LD_VAR 0 3
31834: NOT
31835: IFFALSE 31839
// exit ;
31837: GO 32483
// for i := 1 to list do
31839: LD_ADDR_VAR 0 1
31843: PUSH
31844: DOUBLE
31845: LD_INT 1
31847: DEC
31848: ST_TO_ADDR
31849: LD_VAR 0 3
31853: PUSH
31854: FOR_TO
31855: IFFALSE 32481
// begin depot := list [ i ] [ 2 ] ;
31857: LD_ADDR_VAR 0 8
31861: PUSH
31862: LD_VAR 0 3
31866: PUSH
31867: LD_VAR 0 1
31871: ARRAY
31872: PUSH
31873: LD_INT 2
31875: ARRAY
31876: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31877: LD_ADDR_VAR 0 5
31881: PUSH
31882: LD_VAR 0 3
31886: PUSH
31887: LD_VAR 0 1
31891: ARRAY
31892: PUSH
31893: LD_INT 1
31895: ARRAY
31896: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31897: LD_VAR 0 8
31901: PPUSH
31902: CALL_OW 301
31906: PUSH
31907: LD_VAR 0 5
31911: PUSH
31912: LD_VAR 0 8
31916: PPUSH
31917: CALL_OW 255
31921: NONEQUAL
31922: OR
31923: IFFALSE 31952
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31925: LD_ADDR_EXP 96
31929: PUSH
31930: LD_EXP 96
31934: PPUSH
31935: LD_VAR 0 8
31939: PPUSH
31940: LD_INT 0
31942: PPUSH
31943: CALL_OW 1
31947: ST_TO_ADDR
// exit ;
31948: POP
31949: POP
31950: GO 32483
// end ; x := list [ i ] [ 3 ] ;
31952: LD_ADDR_VAR 0 6
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 1
31966: ARRAY
31967: PUSH
31968: LD_INT 3
31970: ARRAY
31971: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31972: LD_ADDR_VAR 0 7
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_VAR 0 1
31986: ARRAY
31987: PUSH
31988: LD_INT 4
31990: ARRAY
31991: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_VAR 0 6
32001: PPUSH
32002: LD_VAR 0 7
32006: PPUSH
32007: LD_INT 16
32009: PPUSH
32010: CALL 77262 0 3
32014: ST_TO_ADDR
// if not cratesNearbyPoint then
32015: LD_VAR 0 9
32019: NOT
32020: IFFALSE 32026
// exit ;
32022: POP
32023: POP
32024: GO 32483
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32026: LD_ADDR_VAR 0 4
32030: PUSH
32031: LD_INT 22
32033: PUSH
32034: LD_VAR 0 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 60
32048: PUSH
32049: EMPTY
32050: LIST
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 91
32058: PUSH
32059: LD_VAR 0 8
32063: PUSH
32064: LD_INT 6
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 25
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 25
32087: PUSH
32088: LD_INT 16
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: PPUSH
32106: CALL_OW 69
32110: PUSH
32111: LD_VAR 0 8
32115: PPUSH
32116: CALL_OW 313
32120: PPUSH
32121: LD_INT 3
32123: PUSH
32124: LD_INT 60
32126: PUSH
32127: EMPTY
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 25
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 25
32149: PUSH
32150: LD_INT 16
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 72
32170: UNION
32171: ST_TO_ADDR
// if tmp then
32172: LD_VAR 0 4
32176: IFFALSE 32256
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: LD_VAR 0 4
32187: PPUSH
32188: LD_INT 3
32190: PPUSH
32191: CALL 75231 0 2
32195: ST_TO_ADDR
// for j in tmp do
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: FOR_IN
32207: IFFALSE 32250
// begin if IsInUnit ( j ) then
32209: LD_VAR 0 2
32213: PPUSH
32214: CALL_OW 310
32218: IFFALSE 32229
// ComExit ( j ) ;
32220: LD_VAR 0 2
32224: PPUSH
32225: CALL 75314 0 1
// AddComCollect ( j , x , y ) ;
32229: LD_VAR 0 2
32233: PPUSH
32234: LD_VAR 0 6
32238: PPUSH
32239: LD_VAR 0 7
32243: PPUSH
32244: CALL_OW 177
// end ;
32248: GO 32206
32250: POP
32251: POP
// exit ;
32252: POP
32253: POP
32254: GO 32483
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32256: LD_ADDR_VAR 0 4
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_VAR 0 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 91
32275: PUSH
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 8
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 34
32294: PUSH
32295: LD_INT 12
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 34
32304: PUSH
32305: LD_INT 51
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 34
32314: PUSH
32315: LD_INT 32
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 34
32324: PUSH
32325: LD_INT 89
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PPUSH
32344: CALL_OW 69
32348: ST_TO_ADDR
// if tmp then
32349: LD_VAR 0 4
32353: IFFALSE 32479
// begin for j in tmp do
32355: LD_ADDR_VAR 0 2
32359: PUSH
32360: LD_VAR 0 4
32364: PUSH
32365: FOR_IN
32366: IFFALSE 32477
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32368: LD_VAR 0 2
32372: PPUSH
32373: CALL_OW 262
32377: PUSH
32378: LD_INT 3
32380: EQUAL
32381: PUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: CALL_OW 261
32391: PUSH
32392: LD_INT 20
32394: GREATER
32395: OR
32396: PUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: CALL_OW 314
32406: NOT
32407: AND
32408: PUSH
32409: LD_VAR 0 2
32413: PPUSH
32414: CALL_OW 263
32418: PUSH
32419: LD_INT 1
32421: NONEQUAL
32422: PUSH
32423: LD_VAR 0 2
32427: PPUSH
32428: CALL_OW 311
32432: OR
32433: AND
32434: IFFALSE 32475
// begin ComCollect ( j , x , y ) ;
32436: LD_VAR 0 2
32440: PPUSH
32441: LD_VAR 0 6
32445: PPUSH
32446: LD_VAR 0 7
32450: PPUSH
32451: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32455: LD_VAR 0 2
32459: PPUSH
32460: LD_VAR 0 8
32464: PPUSH
32465: CALL_OW 172
// exit ;
32469: POP
32470: POP
32471: POP
32472: POP
32473: GO 32483
// end ;
32475: GO 32365
32477: POP
32478: POP
// end ; end ;
32479: GO 31854
32481: POP
32482: POP
// end ; end_of_file
32483: PPOPN 9
32485: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32486: LD_INT 0
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 264
32501: PUSH
32502: LD_INT 91
32504: EQUAL
32505: IFFALSE 32577
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32507: LD_INT 68
32509: PPUSH
32510: LD_VAR 0 1
32514: PPUSH
32515: CALL_OW 255
32519: PPUSH
32520: CALL_OW 321
32524: PUSH
32525: LD_INT 2
32527: EQUAL
32528: IFFALSE 32540
// eff := 70 else
32530: LD_ADDR_VAR 0 4
32534: PUSH
32535: LD_INT 70
32537: ST_TO_ADDR
32538: GO 32548
// eff := 30 ;
32540: LD_ADDR_VAR 0 4
32544: PUSH
32545: LD_INT 30
32547: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 250
32557: PPUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 251
32567: PPUSH
32568: LD_VAR 0 4
32572: PPUSH
32573: CALL_OW 495
// end ; end ;
32577: LD_VAR 0 2
32581: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32582: LD_INT 0
32584: PPUSH
// end ;
32585: LD_VAR 0 4
32589: RET
// export function SOS_Command ( cmd ) ; begin
32590: LD_INT 0
32592: PPUSH
// end ;
32593: LD_VAR 0 2
32597: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32598: LD_INT 0
32600: PPUSH
// end ;
32601: LD_VAR 0 6
32605: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
// if not vehicle or not factory then
32610: LD_VAR 0 1
32614: NOT
32615: PUSH
32616: LD_VAR 0 2
32620: NOT
32621: OR
32622: IFFALSE 32626
// exit ;
32624: GO 32857
// if factoryWaypoints >= factory then
32626: LD_EXP 95
32630: PUSH
32631: LD_VAR 0 2
32635: GREATEREQUAL
32636: IFFALSE 32857
// if factoryWaypoints [ factory ] then
32638: LD_EXP 95
32642: PUSH
32643: LD_VAR 0 2
32647: ARRAY
32648: IFFALSE 32857
// begin if GetControl ( vehicle ) = control_manual then
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 263
32659: PUSH
32660: LD_INT 1
32662: EQUAL
32663: IFFALSE 32744
// begin driver := IsDrivenBy ( vehicle ) ;
32665: LD_ADDR_VAR 0 4
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 311
32679: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32680: LD_VAR 0 4
32684: PPUSH
32685: LD_EXP 95
32689: PUSH
32690: LD_VAR 0 2
32694: ARRAY
32695: PUSH
32696: LD_INT 3
32698: ARRAY
32699: PPUSH
32700: LD_EXP 95
32704: PUSH
32705: LD_VAR 0 2
32709: ARRAY
32710: PUSH
32711: LD_INT 4
32713: ARRAY
32714: PPUSH
32715: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32719: LD_VAR 0 4
32723: PPUSH
32724: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_VAR 0 2
32737: PPUSH
32738: CALL_OW 180
// end else
32742: GO 32857
// if GetControl ( vehicle ) = control_remote then
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 263
32753: PUSH
32754: LD_INT 2
32756: EQUAL
32757: IFFALSE 32818
// begin wait ( 0 0$2 ) ;
32759: LD_INT 70
32761: PPUSH
32762: CALL_OW 67
// if Connect ( vehicle ) then
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL 45522 0 1
32775: IFFALSE 32816
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32777: LD_VAR 0 1
32781: PPUSH
32782: LD_EXP 95
32786: PUSH
32787: LD_VAR 0 2
32791: ARRAY
32792: PUSH
32793: LD_INT 3
32795: ARRAY
32796: PPUSH
32797: LD_EXP 95
32801: PUSH
32802: LD_VAR 0 2
32806: ARRAY
32807: PUSH
32808: LD_INT 4
32810: ARRAY
32811: PPUSH
32812: CALL_OW 171
// end else
32816: GO 32857
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32818: LD_VAR 0 1
32822: PPUSH
32823: LD_EXP 95
32827: PUSH
32828: LD_VAR 0 2
32832: ARRAY
32833: PUSH
32834: LD_INT 3
32836: ARRAY
32837: PPUSH
32838: LD_EXP 95
32842: PUSH
32843: LD_VAR 0 2
32847: ARRAY
32848: PUSH
32849: LD_INT 4
32851: ARRAY
32852: PPUSH
32853: CALL_OW 171
// end ; end ;
32857: LD_VAR 0 3
32861: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32862: LD_INT 0
32864: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32865: LD_VAR 0 1
32869: PUSH
32870: LD_INT 250
32872: EQUAL
32873: PUSH
32874: LD_VAR 0 2
32878: PPUSH
32879: CALL_OW 264
32883: PUSH
32884: LD_INT 81
32886: EQUAL
32887: AND
32888: IFFALSE 32909
// MinerPlaceMine ( unit , x , y ) ;
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 4
32899: PPUSH
32900: LD_VAR 0 5
32904: PPUSH
32905: CALL 35733 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32909: LD_VAR 0 1
32913: PUSH
32914: LD_INT 251
32916: EQUAL
32917: PUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: CALL_OW 264
32927: PUSH
32928: LD_INT 81
32930: EQUAL
32931: AND
32932: IFFALSE 32953
// MinerDetonateMine ( unit , x , y ) ;
32934: LD_VAR 0 2
32938: PPUSH
32939: LD_VAR 0 4
32943: PPUSH
32944: LD_VAR 0 5
32948: PPUSH
32949: CALL 36008 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32953: LD_VAR 0 1
32957: PUSH
32958: LD_INT 252
32960: EQUAL
32961: PUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: CALL_OW 264
32971: PUSH
32972: LD_INT 81
32974: EQUAL
32975: AND
32976: IFFALSE 32997
// MinerCreateMinefield ( unit , x , y ) ;
32978: LD_VAR 0 2
32982: PPUSH
32983: LD_VAR 0 4
32987: PPUSH
32988: LD_VAR 0 5
32992: PPUSH
32993: CALL 36425 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32997: LD_VAR 0 1
33001: PUSH
33002: LD_INT 253
33004: EQUAL
33005: PUSH
33006: LD_VAR 0 2
33010: PPUSH
33011: CALL_OW 257
33015: PUSH
33016: LD_INT 5
33018: EQUAL
33019: AND
33020: IFFALSE 33041
// ComBinocular ( unit , x , y ) ;
33022: LD_VAR 0 2
33026: PPUSH
33027: LD_VAR 0 4
33031: PPUSH
33032: LD_VAR 0 5
33036: PPUSH
33037: CALL 36794 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33041: LD_VAR 0 1
33045: PUSH
33046: LD_INT 254
33048: EQUAL
33049: PUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 264
33059: PUSH
33060: LD_INT 99
33062: EQUAL
33063: AND
33064: PUSH
33065: LD_VAR 0 3
33069: PPUSH
33070: CALL_OW 263
33074: PUSH
33075: LD_INT 3
33077: EQUAL
33078: AND
33079: IFFALSE 33095
// HackDestroyVehicle ( unit , selectedUnit ) ;
33081: LD_VAR 0 2
33085: PPUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL 35097 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33095: LD_VAR 0 1
33099: PUSH
33100: LD_INT 255
33102: EQUAL
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: CALL_OW 264
33113: PUSH
33114: LD_INT 14
33116: PUSH
33117: LD_INT 53
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: IN
33124: AND
33125: PUSH
33126: LD_VAR 0 4
33130: PPUSH
33131: LD_VAR 0 5
33135: PPUSH
33136: CALL_OW 488
33140: AND
33141: IFFALSE 33165
// CutTreeXYR ( unit , x , y , 12 ) ;
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 4
33152: PPUSH
33153: LD_VAR 0 5
33157: PPUSH
33158: LD_INT 12
33160: PPUSH
33161: CALL 33260 0 4
// if cmd = 256 then
33165: LD_VAR 0 1
33169: PUSH
33170: LD_INT 256
33172: EQUAL
33173: IFFALSE 33194
// SetFactoryWaypoint ( unit , x , y ) ;
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 4
33184: PPUSH
33185: LD_VAR 0 5
33189: PPUSH
33190: CALL 31175 0 3
// if cmd = 257 then
33194: LD_VAR 0 1
33198: PUSH
33199: LD_INT 257
33201: EQUAL
33202: IFFALSE 33223
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33204: LD_VAR 0 2
33208: PPUSH
33209: LD_VAR 0 4
33213: PPUSH
33214: LD_VAR 0 5
33218: PPUSH
33219: CALL 31537 0 3
// if cmd = 258 then
33223: LD_VAR 0 1
33227: PUSH
33228: LD_INT 258
33230: EQUAL
33231: IFFALSE 33255
// BurnTreeXYR ( unit , x , y , 8 ) ;
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 4
33242: PPUSH
33243: LD_VAR 0 5
33247: PPUSH
33248: LD_INT 8
33250: PPUSH
33251: CALL 33654 0 4
// end ;
33255: LD_VAR 0 6
33259: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33260: LD_INT 0
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 302
33280: NOT
33281: PUSH
33282: LD_VAR 0 2
33286: PPUSH
33287: LD_VAR 0 3
33291: PPUSH
33292: CALL_OW 488
33296: NOT
33297: OR
33298: PUSH
33299: LD_VAR 0 4
33303: NOT
33304: OR
33305: IFFALSE 33309
// exit ;
33307: GO 33649
// list := [ ] ;
33309: LD_ADDR_VAR 0 13
33313: PUSH
33314: EMPTY
33315: ST_TO_ADDR
// if x - r < 0 then
33316: LD_VAR 0 2
33320: PUSH
33321: LD_VAR 0 4
33325: MINUS
33326: PUSH
33327: LD_INT 0
33329: LESS
33330: IFFALSE 33342
// min_x := 0 else
33332: LD_ADDR_VAR 0 7
33336: PUSH
33337: LD_INT 0
33339: ST_TO_ADDR
33340: GO 33358
// min_x := x - r ;
33342: LD_ADDR_VAR 0 7
33346: PUSH
33347: LD_VAR 0 2
33351: PUSH
33352: LD_VAR 0 4
33356: MINUS
33357: ST_TO_ADDR
// if y - r < 0 then
33358: LD_VAR 0 3
33362: PUSH
33363: LD_VAR 0 4
33367: MINUS
33368: PUSH
33369: LD_INT 0
33371: LESS
33372: IFFALSE 33384
// min_y := 0 else
33374: LD_ADDR_VAR 0 8
33378: PUSH
33379: LD_INT 0
33381: ST_TO_ADDR
33382: GO 33400
// min_y := y - r ;
33384: LD_ADDR_VAR 0 8
33388: PUSH
33389: LD_VAR 0 3
33393: PUSH
33394: LD_VAR 0 4
33398: MINUS
33399: ST_TO_ADDR
// max_x := x + r ;
33400: LD_ADDR_VAR 0 9
33404: PUSH
33405: LD_VAR 0 2
33409: PUSH
33410: LD_VAR 0 4
33414: PLUS
33415: ST_TO_ADDR
// max_y := y + r ;
33416: LD_ADDR_VAR 0 10
33420: PUSH
33421: LD_VAR 0 3
33425: PUSH
33426: LD_VAR 0 4
33430: PLUS
33431: ST_TO_ADDR
// for _x = min_x to max_x do
33432: LD_ADDR_VAR 0 11
33436: PUSH
33437: DOUBLE
33438: LD_VAR 0 7
33442: DEC
33443: ST_TO_ADDR
33444: LD_VAR 0 9
33448: PUSH
33449: FOR_TO
33450: IFFALSE 33567
// for _y = min_y to max_y do
33452: LD_ADDR_VAR 0 12
33456: PUSH
33457: DOUBLE
33458: LD_VAR 0 8
33462: DEC
33463: ST_TO_ADDR
33464: LD_VAR 0 10
33468: PUSH
33469: FOR_TO
33470: IFFALSE 33563
// begin if not ValidHex ( _x , _y ) then
33472: LD_VAR 0 11
33476: PPUSH
33477: LD_VAR 0 12
33481: PPUSH
33482: CALL_OW 488
33486: NOT
33487: IFFALSE 33491
// continue ;
33489: GO 33469
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33491: LD_VAR 0 11
33495: PPUSH
33496: LD_VAR 0 12
33500: PPUSH
33501: CALL_OW 351
33505: PUSH
33506: LD_VAR 0 11
33510: PPUSH
33511: LD_VAR 0 12
33515: PPUSH
33516: CALL_OW 554
33520: AND
33521: IFFALSE 33561
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33523: LD_ADDR_VAR 0 13
33527: PUSH
33528: LD_VAR 0 13
33532: PPUSH
33533: LD_VAR 0 13
33537: PUSH
33538: LD_INT 1
33540: PLUS
33541: PPUSH
33542: LD_VAR 0 11
33546: PUSH
33547: LD_VAR 0 12
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PPUSH
33556: CALL_OW 2
33560: ST_TO_ADDR
// end ;
33561: GO 33469
33563: POP
33564: POP
33565: GO 33449
33567: POP
33568: POP
// if not list then
33569: LD_VAR 0 13
33573: NOT
33574: IFFALSE 33578
// exit ;
33576: GO 33649
// for i in list do
33578: LD_ADDR_VAR 0 6
33582: PUSH
33583: LD_VAR 0 13
33587: PUSH
33588: FOR_IN
33589: IFFALSE 33647
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33591: LD_VAR 0 1
33595: PPUSH
33596: LD_STRING M
33598: PUSH
33599: LD_VAR 0 6
33603: PUSH
33604: LD_INT 1
33606: ARRAY
33607: PUSH
33608: LD_VAR 0 6
33612: PUSH
33613: LD_INT 2
33615: ARRAY
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: PPUSH
33641: CALL_OW 447
33645: GO 33588
33647: POP
33648: POP
// end ;
33649: LD_VAR 0 5
33653: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33654: LD_INT 0
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
33664: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33665: LD_VAR 0 1
33669: PPUSH
33670: CALL_OW 302
33674: NOT
33675: PUSH
33676: LD_VAR 0 2
33680: PPUSH
33681: LD_VAR 0 3
33685: PPUSH
33686: CALL_OW 488
33690: NOT
33691: OR
33692: PUSH
33693: LD_VAR 0 4
33697: NOT
33698: OR
33699: IFFALSE 33703
// exit ;
33701: GO 34051
// list := [ ] ;
33703: LD_ADDR_VAR 0 13
33707: PUSH
33708: EMPTY
33709: ST_TO_ADDR
// if x - r < 0 then
33710: LD_VAR 0 2
33714: PUSH
33715: LD_VAR 0 4
33719: MINUS
33720: PUSH
33721: LD_INT 0
33723: LESS
33724: IFFALSE 33736
// min_x := 0 else
33726: LD_ADDR_VAR 0 7
33730: PUSH
33731: LD_INT 0
33733: ST_TO_ADDR
33734: GO 33752
// min_x := x - r ;
33736: LD_ADDR_VAR 0 7
33740: PUSH
33741: LD_VAR 0 2
33745: PUSH
33746: LD_VAR 0 4
33750: MINUS
33751: ST_TO_ADDR
// if y - r < 0 then
33752: LD_VAR 0 3
33756: PUSH
33757: LD_VAR 0 4
33761: MINUS
33762: PUSH
33763: LD_INT 0
33765: LESS
33766: IFFALSE 33778
// min_y := 0 else
33768: LD_ADDR_VAR 0 8
33772: PUSH
33773: LD_INT 0
33775: ST_TO_ADDR
33776: GO 33794
// min_y := y - r ;
33778: LD_ADDR_VAR 0 8
33782: PUSH
33783: LD_VAR 0 3
33787: PUSH
33788: LD_VAR 0 4
33792: MINUS
33793: ST_TO_ADDR
// max_x := x + r ;
33794: LD_ADDR_VAR 0 9
33798: PUSH
33799: LD_VAR 0 2
33803: PUSH
33804: LD_VAR 0 4
33808: PLUS
33809: ST_TO_ADDR
// max_y := y + r ;
33810: LD_ADDR_VAR 0 10
33814: PUSH
33815: LD_VAR 0 3
33819: PUSH
33820: LD_VAR 0 4
33824: PLUS
33825: ST_TO_ADDR
// for _x = min_x to max_x do
33826: LD_ADDR_VAR 0 11
33830: PUSH
33831: DOUBLE
33832: LD_VAR 0 7
33836: DEC
33837: ST_TO_ADDR
33838: LD_VAR 0 9
33842: PUSH
33843: FOR_TO
33844: IFFALSE 33961
// for _y = min_y to max_y do
33846: LD_ADDR_VAR 0 12
33850: PUSH
33851: DOUBLE
33852: LD_VAR 0 8
33856: DEC
33857: ST_TO_ADDR
33858: LD_VAR 0 10
33862: PUSH
33863: FOR_TO
33864: IFFALSE 33957
// begin if not ValidHex ( _x , _y ) then
33866: LD_VAR 0 11
33870: PPUSH
33871: LD_VAR 0 12
33875: PPUSH
33876: CALL_OW 488
33880: NOT
33881: IFFALSE 33885
// continue ;
33883: GO 33863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33885: LD_VAR 0 11
33889: PPUSH
33890: LD_VAR 0 12
33894: PPUSH
33895: CALL_OW 351
33899: PUSH
33900: LD_VAR 0 11
33904: PPUSH
33905: LD_VAR 0 12
33909: PPUSH
33910: CALL_OW 554
33914: AND
33915: IFFALSE 33955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33917: LD_ADDR_VAR 0 13
33921: PUSH
33922: LD_VAR 0 13
33926: PPUSH
33927: LD_VAR 0 13
33931: PUSH
33932: LD_INT 1
33934: PLUS
33935: PPUSH
33936: LD_VAR 0 11
33940: PUSH
33941: LD_VAR 0 12
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PPUSH
33950: CALL_OW 2
33954: ST_TO_ADDR
// end ;
33955: GO 33863
33957: POP
33958: POP
33959: GO 33843
33961: POP
33962: POP
// if not list then
33963: LD_VAR 0 13
33967: NOT
33968: IFFALSE 33972
// exit ;
33970: GO 34051
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33972: LD_ADDR_VAR 0 13
33976: PUSH
33977: LD_VAR 0 1
33981: PPUSH
33982: LD_VAR 0 13
33986: PPUSH
33987: LD_INT 1
33989: PPUSH
33990: LD_INT 1
33992: PPUSH
33993: CALL 42664 0 4
33997: ST_TO_ADDR
// ComStop ( flame ) ;
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 141
// for i in list do
34007: LD_ADDR_VAR 0 6
34011: PUSH
34012: LD_VAR 0 13
34016: PUSH
34017: FOR_IN
34018: IFFALSE 34049
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34020: LD_VAR 0 1
34024: PPUSH
34025: LD_VAR 0 6
34029: PUSH
34030: LD_INT 1
34032: ARRAY
34033: PPUSH
34034: LD_VAR 0 6
34038: PUSH
34039: LD_INT 2
34041: ARRAY
34042: PPUSH
34043: CALL_OW 176
34047: GO 34017
34049: POP
34050: POP
// end ;
34051: LD_VAR 0 5
34055: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34056: LD_EXP 98
34060: NOT
34061: IFFALSE 34111
34063: GO 34065
34065: DISABLE
// begin initHack := true ;
34066: LD_ADDR_EXP 98
34070: PUSH
34071: LD_INT 1
34073: ST_TO_ADDR
// hackTanks := [ ] ;
34074: LD_ADDR_EXP 99
34078: PUSH
34079: EMPTY
34080: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34081: LD_ADDR_EXP 100
34085: PUSH
34086: EMPTY
34087: ST_TO_ADDR
// hackLimit := 3 ;
34088: LD_ADDR_EXP 101
34092: PUSH
34093: LD_INT 3
34095: ST_TO_ADDR
// hackDist := 12 ;
34096: LD_ADDR_EXP 102
34100: PUSH
34101: LD_INT 12
34103: ST_TO_ADDR
// hackCounter := [ ] ;
34104: LD_ADDR_EXP 103
34108: PUSH
34109: EMPTY
34110: ST_TO_ADDR
// end ;
34111: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34112: LD_EXP 98
34116: PUSH
34117: LD_INT 34
34119: PUSH
34120: LD_INT 99
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PPUSH
34127: CALL_OW 69
34131: AND
34132: IFFALSE 34385
34134: GO 34136
34136: DISABLE
34137: LD_INT 0
34139: PPUSH
34140: PPUSH
// begin enable ;
34141: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34142: LD_ADDR_VAR 0 1
34146: PUSH
34147: LD_INT 34
34149: PUSH
34150: LD_INT 99
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PPUSH
34157: CALL_OW 69
34161: PUSH
34162: FOR_IN
34163: IFFALSE 34383
// begin if not i in hackTanks then
34165: LD_VAR 0 1
34169: PUSH
34170: LD_EXP 99
34174: IN
34175: NOT
34176: IFFALSE 34259
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34178: LD_ADDR_EXP 99
34182: PUSH
34183: LD_EXP 99
34187: PPUSH
34188: LD_EXP 99
34192: PUSH
34193: LD_INT 1
34195: PLUS
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 1
34206: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34207: LD_ADDR_EXP 100
34211: PUSH
34212: LD_EXP 100
34216: PPUSH
34217: LD_EXP 100
34221: PUSH
34222: LD_INT 1
34224: PLUS
34225: PPUSH
34226: EMPTY
34227: PPUSH
34228: CALL_OW 1
34232: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34233: LD_ADDR_EXP 103
34237: PUSH
34238: LD_EXP 103
34242: PPUSH
34243: LD_EXP 103
34247: PUSH
34248: LD_INT 1
34250: PLUS
34251: PPUSH
34252: EMPTY
34253: PPUSH
34254: CALL_OW 1
34258: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34259: LD_VAR 0 1
34263: PPUSH
34264: CALL_OW 302
34268: NOT
34269: IFFALSE 34282
// begin HackUnlinkAll ( i ) ;
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL 34388 0 1
// continue ;
34280: GO 34162
// end ; HackCheckCapturedStatus ( i ) ;
34282: LD_VAR 0 1
34286: PPUSH
34287: CALL 34831 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34291: LD_ADDR_VAR 0 2
34295: PUSH
34296: LD_INT 81
34298: PUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 255
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 33
34315: PUSH
34316: LD_INT 3
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 91
34325: PUSH
34326: LD_VAR 0 1
34330: PUSH
34331: LD_EXP 102
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 50
34343: PUSH
34344: EMPTY
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: PPUSH
34353: CALL_OW 69
34357: ST_TO_ADDR
// if not tmp then
34358: LD_VAR 0 2
34362: NOT
34363: IFFALSE 34367
// continue ;
34365: GO 34162
// HackLink ( i , tmp ) ;
34367: LD_VAR 0 1
34371: PPUSH
34372: LD_VAR 0 2
34376: PPUSH
34377: CALL 34524 0 2
// end ;
34381: GO 34162
34383: POP
34384: POP
// end ;
34385: PPOPN 2
34387: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34388: LD_INT 0
34390: PPUSH
34391: PPUSH
34392: PPUSH
// if not hack in hackTanks then
34393: LD_VAR 0 1
34397: PUSH
34398: LD_EXP 99
34402: IN
34403: NOT
34404: IFFALSE 34408
// exit ;
34406: GO 34519
// index := GetElementIndex ( hackTanks , hack ) ;
34408: LD_ADDR_VAR 0 4
34412: PUSH
34413: LD_EXP 99
34417: PPUSH
34418: LD_VAR 0 1
34422: PPUSH
34423: CALL 41961 0 2
34427: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34428: LD_EXP 100
34432: PUSH
34433: LD_VAR 0 4
34437: ARRAY
34438: IFFALSE 34519
// begin for i in hackTanksCaptured [ index ] do
34440: LD_ADDR_VAR 0 3
34444: PUSH
34445: LD_EXP 100
34449: PUSH
34450: LD_VAR 0 4
34454: ARRAY
34455: PUSH
34456: FOR_IN
34457: IFFALSE 34483
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34459: LD_VAR 0 3
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 3
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PPUSH
34477: CALL_OW 235
34481: GO 34456
34483: POP
34484: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34485: LD_ADDR_EXP 100
34489: PUSH
34490: LD_EXP 100
34494: PPUSH
34495: LD_VAR 0 4
34499: PPUSH
34500: EMPTY
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34507: LD_VAR 0 1
34511: PPUSH
34512: LD_INT 0
34514: PPUSH
34515: CALL_OW 505
// end ; end ;
34519: LD_VAR 0 2
34523: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34524: LD_INT 0
34526: PPUSH
34527: PPUSH
34528: PPUSH
// if not hack in hackTanks or not vehicles then
34529: LD_VAR 0 1
34533: PUSH
34534: LD_EXP 99
34538: IN
34539: NOT
34540: PUSH
34541: LD_VAR 0 2
34545: NOT
34546: OR
34547: IFFALSE 34551
// exit ;
34549: GO 34826
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34551: LD_ADDR_VAR 0 2
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_INT 1
34568: PPUSH
34569: LD_INT 1
34571: PPUSH
34572: CALL 42611 0 4
34576: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34577: LD_ADDR_VAR 0 5
34581: PUSH
34582: LD_EXP 99
34586: PPUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL 41961 0 2
34596: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34597: LD_EXP 100
34601: PUSH
34602: LD_VAR 0 5
34606: ARRAY
34607: PUSH
34608: LD_EXP 101
34612: LESS
34613: IFFALSE 34802
// begin for i := 1 to vehicles do
34615: LD_ADDR_VAR 0 4
34619: PUSH
34620: DOUBLE
34621: LD_INT 1
34623: DEC
34624: ST_TO_ADDR
34625: LD_VAR 0 2
34629: PUSH
34630: FOR_TO
34631: IFFALSE 34800
// begin if hackTanksCaptured [ index ] = hackLimit then
34633: LD_EXP 100
34637: PUSH
34638: LD_VAR 0 5
34642: ARRAY
34643: PUSH
34644: LD_EXP 101
34648: EQUAL
34649: IFFALSE 34653
// break ;
34651: GO 34800
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34653: LD_ADDR_EXP 103
34657: PUSH
34658: LD_EXP 103
34662: PPUSH
34663: LD_VAR 0 5
34667: PPUSH
34668: LD_EXP 103
34672: PUSH
34673: LD_VAR 0 5
34677: ARRAY
34678: PUSH
34679: LD_INT 1
34681: PLUS
34682: PPUSH
34683: CALL_OW 1
34687: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34688: LD_ADDR_EXP 100
34692: PUSH
34693: LD_EXP 100
34697: PPUSH
34698: LD_VAR 0 5
34702: PUSH
34703: LD_EXP 100
34707: PUSH
34708: LD_VAR 0 5
34712: ARRAY
34713: PUSH
34714: LD_INT 1
34716: PLUS
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PPUSH
34722: LD_VAR 0 2
34726: PUSH
34727: LD_VAR 0 4
34731: ARRAY
34732: PUSH
34733: LD_VAR 0 2
34737: PUSH
34738: LD_VAR 0 4
34742: ARRAY
34743: PPUSH
34744: CALL_OW 255
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PPUSH
34753: CALL 42176 0 3
34757: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34758: LD_VAR 0 2
34762: PUSH
34763: LD_VAR 0 4
34767: ARRAY
34768: PPUSH
34769: LD_VAR 0 1
34773: PPUSH
34774: CALL_OW 255
34778: PPUSH
34779: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34783: LD_VAR 0 2
34787: PUSH
34788: LD_VAR 0 4
34792: ARRAY
34793: PPUSH
34794: CALL_OW 141
// end ;
34798: GO 34630
34800: POP
34801: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34802: LD_VAR 0 1
34806: PPUSH
34807: LD_EXP 100
34811: PUSH
34812: LD_VAR 0 5
34816: ARRAY
34817: PUSH
34818: LD_INT 0
34820: PLUS
34821: PPUSH
34822: CALL_OW 505
// end ;
34826: LD_VAR 0 3
34830: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34831: LD_INT 0
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
// if not hack in hackTanks then
34837: LD_VAR 0 1
34841: PUSH
34842: LD_EXP 99
34846: IN
34847: NOT
34848: IFFALSE 34852
// exit ;
34850: GO 35092
// index := GetElementIndex ( hackTanks , hack ) ;
34852: LD_ADDR_VAR 0 4
34856: PUSH
34857: LD_EXP 99
34861: PPUSH
34862: LD_VAR 0 1
34866: PPUSH
34867: CALL 41961 0 2
34871: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34872: LD_ADDR_VAR 0 3
34876: PUSH
34877: DOUBLE
34878: LD_EXP 100
34882: PUSH
34883: LD_VAR 0 4
34887: ARRAY
34888: INC
34889: ST_TO_ADDR
34890: LD_INT 1
34892: PUSH
34893: FOR_DOWNTO
34894: IFFALSE 35066
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: LD_EXP 100
34905: PUSH
34906: LD_VAR 0 4
34910: ARRAY
34911: PUSH
34912: LD_VAR 0 3
34916: ARRAY
34917: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34918: LD_VAR 0 5
34922: PUSH
34923: LD_INT 1
34925: ARRAY
34926: PPUSH
34927: CALL_OW 302
34931: NOT
34932: PUSH
34933: LD_VAR 0 5
34937: PUSH
34938: LD_INT 1
34940: ARRAY
34941: PPUSH
34942: CALL_OW 255
34946: PUSH
34947: LD_VAR 0 1
34951: PPUSH
34952: CALL_OW 255
34956: NONEQUAL
34957: OR
34958: IFFALSE 35064
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34960: LD_VAR 0 5
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: PPUSH
34969: CALL_OW 305
34973: PUSH
34974: LD_VAR 0 5
34978: PUSH
34979: LD_INT 1
34981: ARRAY
34982: PPUSH
34983: CALL_OW 255
34987: PUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 255
34997: EQUAL
34998: AND
34999: IFFALSE 35023
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35001: LD_VAR 0 5
35005: PUSH
35006: LD_INT 1
35008: ARRAY
35009: PPUSH
35010: LD_VAR 0 5
35014: PUSH
35015: LD_INT 2
35017: ARRAY
35018: PPUSH
35019: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35023: LD_ADDR_EXP 100
35027: PUSH
35028: LD_EXP 100
35032: PPUSH
35033: LD_VAR 0 4
35037: PPUSH
35038: LD_EXP 100
35042: PUSH
35043: LD_VAR 0 4
35047: ARRAY
35048: PPUSH
35049: LD_VAR 0 3
35053: PPUSH
35054: CALL_OW 3
35058: PPUSH
35059: CALL_OW 1
35063: ST_TO_ADDR
// end ; end ;
35064: GO 34893
35066: POP
35067: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35068: LD_VAR 0 1
35072: PPUSH
35073: LD_EXP 100
35077: PUSH
35078: LD_VAR 0 4
35082: ARRAY
35083: PUSH
35084: LD_INT 0
35086: PLUS
35087: PPUSH
35088: CALL_OW 505
// end ;
35092: LD_VAR 0 2
35096: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35097: LD_INT 0
35099: PPUSH
35100: PPUSH
35101: PPUSH
35102: PPUSH
// if not hack in hackTanks then
35103: LD_VAR 0 1
35107: PUSH
35108: LD_EXP 99
35112: IN
35113: NOT
35114: IFFALSE 35118
// exit ;
35116: GO 35203
// index := GetElementIndex ( hackTanks , hack ) ;
35118: LD_ADDR_VAR 0 5
35122: PUSH
35123: LD_EXP 99
35127: PPUSH
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL 41961 0 2
35137: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35138: LD_ADDR_VAR 0 4
35142: PUSH
35143: DOUBLE
35144: LD_INT 1
35146: DEC
35147: ST_TO_ADDR
35148: LD_EXP 100
35152: PUSH
35153: LD_VAR 0 5
35157: ARRAY
35158: PUSH
35159: FOR_TO
35160: IFFALSE 35201
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35162: LD_EXP 100
35166: PUSH
35167: LD_VAR 0 5
35171: ARRAY
35172: PUSH
35173: LD_VAR 0 4
35177: ARRAY
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: PUSH
35183: LD_VAR 0 2
35187: EQUAL
35188: IFFALSE 35199
// KillUnit ( vehicle ) ;
35190: LD_VAR 0 2
35194: PPUSH
35195: CALL_OW 66
35199: GO 35159
35201: POP
35202: POP
// end ;
35203: LD_VAR 0 3
35207: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35208: LD_EXP 104
35212: NOT
35213: IFFALSE 35248
35215: GO 35217
35217: DISABLE
// begin initMiner := true ;
35218: LD_ADDR_EXP 104
35222: PUSH
35223: LD_INT 1
35225: ST_TO_ADDR
// minersList := [ ] ;
35226: LD_ADDR_EXP 105
35230: PUSH
35231: EMPTY
35232: ST_TO_ADDR
// minerMinesList := [ ] ;
35233: LD_ADDR_EXP 106
35237: PUSH
35238: EMPTY
35239: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35240: LD_ADDR_EXP 107
35244: PUSH
35245: LD_INT 5
35247: ST_TO_ADDR
// end ;
35248: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35249: LD_EXP 104
35253: PUSH
35254: LD_INT 34
35256: PUSH
35257: LD_INT 81
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PPUSH
35264: CALL_OW 69
35268: AND
35269: IFFALSE 35730
35271: GO 35273
35273: DISABLE
35274: LD_INT 0
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
// begin enable ;
35280: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35281: LD_ADDR_VAR 0 1
35285: PUSH
35286: LD_INT 34
35288: PUSH
35289: LD_INT 81
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PPUSH
35296: CALL_OW 69
35300: PUSH
35301: FOR_IN
35302: IFFALSE 35374
// begin if not i in minersList then
35304: LD_VAR 0 1
35308: PUSH
35309: LD_EXP 105
35313: IN
35314: NOT
35315: IFFALSE 35372
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35317: LD_ADDR_EXP 105
35321: PUSH
35322: LD_EXP 105
35326: PPUSH
35327: LD_EXP 105
35331: PUSH
35332: LD_INT 1
35334: PLUS
35335: PPUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 1
35345: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35346: LD_ADDR_EXP 106
35350: PUSH
35351: LD_EXP 106
35355: PPUSH
35356: LD_EXP 106
35360: PUSH
35361: LD_INT 1
35363: PLUS
35364: PPUSH
35365: EMPTY
35366: PPUSH
35367: CALL_OW 1
35371: ST_TO_ADDR
// end end ;
35372: GO 35301
35374: POP
35375: POP
// for i := minerMinesList downto 1 do
35376: LD_ADDR_VAR 0 1
35380: PUSH
35381: DOUBLE
35382: LD_EXP 106
35386: INC
35387: ST_TO_ADDR
35388: LD_INT 1
35390: PUSH
35391: FOR_DOWNTO
35392: IFFALSE 35728
// begin if IsLive ( minersList [ i ] ) then
35394: LD_EXP 105
35398: PUSH
35399: LD_VAR 0 1
35403: ARRAY
35404: PPUSH
35405: CALL_OW 300
35409: IFFALSE 35437
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35411: LD_EXP 105
35415: PUSH
35416: LD_VAR 0 1
35420: ARRAY
35421: PPUSH
35422: LD_EXP 106
35426: PUSH
35427: LD_VAR 0 1
35431: ARRAY
35432: PPUSH
35433: CALL_OW 505
// if not minerMinesList [ i ] then
35437: LD_EXP 106
35441: PUSH
35442: LD_VAR 0 1
35446: ARRAY
35447: NOT
35448: IFFALSE 35452
// continue ;
35450: GO 35391
// for j := minerMinesList [ i ] downto 1 do
35452: LD_ADDR_VAR 0 2
35456: PUSH
35457: DOUBLE
35458: LD_EXP 106
35462: PUSH
35463: LD_VAR 0 1
35467: ARRAY
35468: INC
35469: ST_TO_ADDR
35470: LD_INT 1
35472: PUSH
35473: FOR_DOWNTO
35474: IFFALSE 35724
// begin side := GetSide ( minersList [ i ] ) ;
35476: LD_ADDR_VAR 0 3
35480: PUSH
35481: LD_EXP 105
35485: PUSH
35486: LD_VAR 0 1
35490: ARRAY
35491: PPUSH
35492: CALL_OW 255
35496: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35497: LD_ADDR_VAR 0 4
35501: PUSH
35502: LD_EXP 106
35506: PUSH
35507: LD_VAR 0 1
35511: ARRAY
35512: PUSH
35513: LD_VAR 0 2
35517: ARRAY
35518: PUSH
35519: LD_INT 1
35521: ARRAY
35522: PPUSH
35523: LD_EXP 106
35527: PUSH
35528: LD_VAR 0 1
35532: ARRAY
35533: PUSH
35534: LD_VAR 0 2
35538: ARRAY
35539: PUSH
35540: LD_INT 2
35542: ARRAY
35543: PPUSH
35544: CALL_OW 428
35548: ST_TO_ADDR
// if not tmp then
35549: LD_VAR 0 4
35553: NOT
35554: IFFALSE 35558
// continue ;
35556: GO 35473
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35558: LD_VAR 0 4
35562: PUSH
35563: LD_INT 81
35565: PUSH
35566: LD_VAR 0 3
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PPUSH
35575: CALL_OW 69
35579: IN
35580: PUSH
35581: LD_EXP 106
35585: PUSH
35586: LD_VAR 0 1
35590: ARRAY
35591: PUSH
35592: LD_VAR 0 2
35596: ARRAY
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: LD_EXP 106
35606: PUSH
35607: LD_VAR 0 1
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 2
35617: ARRAY
35618: PUSH
35619: LD_INT 2
35621: ARRAY
35622: PPUSH
35623: CALL_OW 458
35627: AND
35628: IFFALSE 35722
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35630: LD_EXP 106
35634: PUSH
35635: LD_VAR 0 1
35639: ARRAY
35640: PUSH
35641: LD_VAR 0 2
35645: ARRAY
35646: PUSH
35647: LD_INT 1
35649: ARRAY
35650: PPUSH
35651: LD_EXP 106
35655: PUSH
35656: LD_VAR 0 1
35660: ARRAY
35661: PUSH
35662: LD_VAR 0 2
35666: ARRAY
35667: PUSH
35668: LD_INT 2
35670: ARRAY
35671: PPUSH
35672: LD_VAR 0 3
35676: PPUSH
35677: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35681: LD_ADDR_EXP 106
35685: PUSH
35686: LD_EXP 106
35690: PPUSH
35691: LD_VAR 0 1
35695: PPUSH
35696: LD_EXP 106
35700: PUSH
35701: LD_VAR 0 1
35705: ARRAY
35706: PPUSH
35707: LD_VAR 0 2
35711: PPUSH
35712: CALL_OW 3
35716: PPUSH
35717: CALL_OW 1
35721: ST_TO_ADDR
// end ; end ;
35722: GO 35473
35724: POP
35725: POP
// end ;
35726: GO 35391
35728: POP
35729: POP
// end ;
35730: PPOPN 4
35732: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35733: LD_INT 0
35735: PPUSH
35736: PPUSH
// result := false ;
35737: LD_ADDR_VAR 0 4
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL_OW 264
35754: PUSH
35755: LD_INT 81
35757: EQUAL
35758: NOT
35759: IFFALSE 35763
// exit ;
35761: GO 36003
// index := GetElementIndex ( minersList , unit ) ;
35763: LD_ADDR_VAR 0 5
35767: PUSH
35768: LD_EXP 105
35772: PPUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL 41961 0 2
35782: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35783: LD_EXP 106
35787: PUSH
35788: LD_VAR 0 5
35792: ARRAY
35793: PUSH
35794: LD_EXP 107
35798: GREATEREQUAL
35799: IFFALSE 35803
// exit ;
35801: GO 36003
// ComMoveXY ( unit , x , y ) ;
35803: LD_VAR 0 1
35807: PPUSH
35808: LD_VAR 0 2
35812: PPUSH
35813: LD_VAR 0 3
35817: PPUSH
35818: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35822: LD_INT 35
35824: PPUSH
35825: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35829: LD_VAR 0 1
35833: PPUSH
35834: LD_VAR 0 2
35838: PPUSH
35839: LD_VAR 0 3
35843: PPUSH
35844: CALL 73713 0 3
35848: NOT
35849: PUSH
35850: LD_VAR 0 1
35854: PPUSH
35855: CALL_OW 314
35859: AND
35860: IFFALSE 35864
// exit ;
35862: GO 36003
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35864: LD_VAR 0 2
35868: PPUSH
35869: LD_VAR 0 3
35873: PPUSH
35874: CALL_OW 428
35878: PUSH
35879: LD_VAR 0 1
35883: EQUAL
35884: PUSH
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 314
35894: NOT
35895: AND
35896: IFFALSE 35822
// PlaySoundXY ( x , y , PlantMine ) ;
35898: LD_VAR 0 2
35902: PPUSH
35903: LD_VAR 0 3
35907: PPUSH
35908: LD_STRING PlantMine
35910: PPUSH
35911: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35915: LD_VAR 0 2
35919: PPUSH
35920: LD_VAR 0 3
35924: PPUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 255
35934: PPUSH
35935: LD_INT 0
35937: PPUSH
35938: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35942: LD_ADDR_EXP 106
35946: PUSH
35947: LD_EXP 106
35951: PPUSH
35952: LD_VAR 0 5
35956: PUSH
35957: LD_EXP 106
35961: PUSH
35962: LD_VAR 0 5
35966: ARRAY
35967: PUSH
35968: LD_INT 1
35970: PLUS
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PPUSH
35976: LD_VAR 0 2
35980: PUSH
35981: LD_VAR 0 3
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PPUSH
35990: CALL 42176 0 3
35994: ST_TO_ADDR
// result := true ;
35995: LD_ADDR_VAR 0 4
35999: PUSH
36000: LD_INT 1
36002: ST_TO_ADDR
// end ;
36003: LD_VAR 0 4
36007: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36008: LD_INT 0
36010: PPUSH
36011: PPUSH
36012: PPUSH
// if not unit in minersList then
36013: LD_VAR 0 1
36017: PUSH
36018: LD_EXP 105
36022: IN
36023: NOT
36024: IFFALSE 36028
// exit ;
36026: GO 36420
// index := GetElementIndex ( minersList , unit ) ;
36028: LD_ADDR_VAR 0 6
36032: PUSH
36033: LD_EXP 105
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL 41961 0 2
36047: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36048: LD_ADDR_VAR 0 5
36052: PUSH
36053: DOUBLE
36054: LD_EXP 106
36058: PUSH
36059: LD_VAR 0 6
36063: ARRAY
36064: INC
36065: ST_TO_ADDR
36066: LD_INT 1
36068: PUSH
36069: FOR_DOWNTO
36070: IFFALSE 36231
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36072: LD_EXP 106
36076: PUSH
36077: LD_VAR 0 6
36081: ARRAY
36082: PUSH
36083: LD_VAR 0 5
36087: ARRAY
36088: PUSH
36089: LD_INT 1
36091: ARRAY
36092: PUSH
36093: LD_VAR 0 2
36097: EQUAL
36098: PUSH
36099: LD_EXP 106
36103: PUSH
36104: LD_VAR 0 6
36108: ARRAY
36109: PUSH
36110: LD_VAR 0 5
36114: ARRAY
36115: PUSH
36116: LD_INT 2
36118: ARRAY
36119: PUSH
36120: LD_VAR 0 3
36124: EQUAL
36125: AND
36126: IFFALSE 36229
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36128: LD_EXP 106
36132: PUSH
36133: LD_VAR 0 6
36137: ARRAY
36138: PUSH
36139: LD_VAR 0 5
36143: ARRAY
36144: PUSH
36145: LD_INT 1
36147: ARRAY
36148: PPUSH
36149: LD_EXP 106
36153: PUSH
36154: LD_VAR 0 6
36158: ARRAY
36159: PUSH
36160: LD_VAR 0 5
36164: ARRAY
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: PPUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 255
36179: PPUSH
36180: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36184: LD_ADDR_EXP 106
36188: PUSH
36189: LD_EXP 106
36193: PPUSH
36194: LD_VAR 0 6
36198: PPUSH
36199: LD_EXP 106
36203: PUSH
36204: LD_VAR 0 6
36208: ARRAY
36209: PPUSH
36210: LD_VAR 0 5
36214: PPUSH
36215: CALL_OW 3
36219: PPUSH
36220: CALL_OW 1
36224: ST_TO_ADDR
// exit ;
36225: POP
36226: POP
36227: GO 36420
// end ; end ;
36229: GO 36069
36231: POP
36232: POP
// for i := minerMinesList [ index ] downto 1 do
36233: LD_ADDR_VAR 0 5
36237: PUSH
36238: DOUBLE
36239: LD_EXP 106
36243: PUSH
36244: LD_VAR 0 6
36248: ARRAY
36249: INC
36250: ST_TO_ADDR
36251: LD_INT 1
36253: PUSH
36254: FOR_DOWNTO
36255: IFFALSE 36418
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36257: LD_EXP 106
36261: PUSH
36262: LD_VAR 0 6
36266: ARRAY
36267: PUSH
36268: LD_VAR 0 5
36272: ARRAY
36273: PUSH
36274: LD_INT 1
36276: ARRAY
36277: PPUSH
36278: LD_EXP 106
36282: PUSH
36283: LD_VAR 0 6
36287: ARRAY
36288: PUSH
36289: LD_VAR 0 5
36293: ARRAY
36294: PUSH
36295: LD_INT 2
36297: ARRAY
36298: PPUSH
36299: LD_VAR 0 2
36303: PPUSH
36304: LD_VAR 0 3
36308: PPUSH
36309: CALL_OW 298
36313: PUSH
36314: LD_INT 6
36316: LESS
36317: IFFALSE 36416
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36319: LD_EXP 106
36323: PUSH
36324: LD_VAR 0 6
36328: ARRAY
36329: PUSH
36330: LD_VAR 0 5
36334: ARRAY
36335: PUSH
36336: LD_INT 1
36338: ARRAY
36339: PPUSH
36340: LD_EXP 106
36344: PUSH
36345: LD_VAR 0 6
36349: ARRAY
36350: PUSH
36351: LD_VAR 0 5
36355: ARRAY
36356: PUSH
36357: LD_INT 2
36359: ARRAY
36360: PPUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 255
36370: PPUSH
36371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36375: LD_ADDR_EXP 106
36379: PUSH
36380: LD_EXP 106
36384: PPUSH
36385: LD_VAR 0 6
36389: PPUSH
36390: LD_EXP 106
36394: PUSH
36395: LD_VAR 0 6
36399: ARRAY
36400: PPUSH
36401: LD_VAR 0 5
36405: PPUSH
36406: CALL_OW 3
36410: PPUSH
36411: CALL_OW 1
36415: ST_TO_ADDR
// end ; end ;
36416: GO 36254
36418: POP
36419: POP
// end ;
36420: LD_VAR 0 4
36424: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36436: LD_VAR 0 1
36440: PPUSH
36441: CALL_OW 264
36445: PUSH
36446: LD_INT 81
36448: EQUAL
36449: NOT
36450: PUSH
36451: LD_VAR 0 1
36455: PUSH
36456: LD_EXP 105
36460: IN
36461: NOT
36462: OR
36463: IFFALSE 36467
// exit ;
36465: GO 36789
// index := GetElementIndex ( minersList , unit ) ;
36467: LD_ADDR_VAR 0 6
36471: PUSH
36472: LD_EXP 105
36476: PPUSH
36477: LD_VAR 0 1
36481: PPUSH
36482: CALL 41961 0 2
36486: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36487: LD_ADDR_VAR 0 8
36491: PUSH
36492: LD_EXP 107
36496: PUSH
36497: LD_EXP 106
36501: PUSH
36502: LD_VAR 0 6
36506: ARRAY
36507: MINUS
36508: ST_TO_ADDR
// if not minesFreeAmount then
36509: LD_VAR 0 8
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 36789
// tmp := [ ] ;
36518: LD_ADDR_VAR 0 7
36522: PUSH
36523: EMPTY
36524: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36525: LD_ADDR_VAR 0 5
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 8
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36736
// begin _d := rand ( 0 , 5 ) ;
36543: LD_ADDR_VAR 0 11
36547: PUSH
36548: LD_INT 0
36550: PPUSH
36551: LD_INT 5
36553: PPUSH
36554: CALL_OW 12
36558: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36559: LD_ADDR_VAR 0 12
36563: PUSH
36564: LD_INT 2
36566: PPUSH
36567: LD_INT 6
36569: PPUSH
36570: CALL_OW 12
36574: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_VAR 0 2
36584: PPUSH
36585: LD_VAR 0 11
36589: PPUSH
36590: LD_VAR 0 12
36594: PPUSH
36595: CALL_OW 272
36599: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36600: LD_ADDR_VAR 0 10
36604: PUSH
36605: LD_VAR 0 3
36609: PPUSH
36610: LD_VAR 0 11
36614: PPUSH
36615: LD_VAR 0 12
36619: PPUSH
36620: CALL_OW 273
36624: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36625: LD_VAR 0 9
36629: PPUSH
36630: LD_VAR 0 10
36634: PPUSH
36635: CALL_OW 488
36639: PUSH
36640: LD_VAR 0 9
36644: PUSH
36645: LD_VAR 0 10
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_VAR 0 7
36658: IN
36659: NOT
36660: AND
36661: PUSH
36662: LD_VAR 0 9
36666: PPUSH
36667: LD_VAR 0 10
36671: PPUSH
36672: CALL_OW 458
36676: NOT
36677: AND
36678: IFFALSE 36720
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36680: LD_ADDR_VAR 0 7
36684: PUSH
36685: LD_VAR 0 7
36689: PPUSH
36690: LD_VAR 0 7
36694: PUSH
36695: LD_INT 1
36697: PLUS
36698: PPUSH
36699: LD_VAR 0 9
36703: PUSH
36704: LD_VAR 0 10
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PPUSH
36713: CALL_OW 1
36717: ST_TO_ADDR
36718: GO 36734
// i := i - 1 ;
36720: LD_ADDR_VAR 0 5
36724: PUSH
36725: LD_VAR 0 5
36729: PUSH
36730: LD_INT 1
36732: MINUS
36733: ST_TO_ADDR
// end ;
36734: GO 36540
36736: POP
36737: POP
// for i in tmp do
36738: LD_ADDR_VAR 0 5
36742: PUSH
36743: LD_VAR 0 7
36747: PUSH
36748: FOR_IN
36749: IFFALSE 36787
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36751: LD_VAR 0 1
36755: PPUSH
36756: LD_VAR 0 5
36760: PUSH
36761: LD_INT 1
36763: ARRAY
36764: PPUSH
36765: LD_VAR 0 5
36769: PUSH
36770: LD_INT 2
36772: ARRAY
36773: PPUSH
36774: CALL 35733 0 3
36778: NOT
36779: IFFALSE 36785
// exit ;
36781: POP
36782: POP
36783: GO 36789
36785: GO 36748
36787: POP
36788: POP
// end ;
36789: LD_VAR 0 4
36793: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36794: LD_INT 0
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
// if not GetClass ( unit ) = class_sniper then
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 257
36812: PUSH
36813: LD_INT 5
36815: EQUAL
36816: NOT
36817: IFFALSE 36821
// exit ;
36819: GO 37209
// dist := 8 ;
36821: LD_ADDR_VAR 0 5
36825: PUSH
36826: LD_INT 8
36828: ST_TO_ADDR
// viewRange := 12 ;
36829: LD_ADDR_VAR 0 7
36833: PUSH
36834: LD_INT 12
36836: ST_TO_ADDR
// side := GetSide ( unit ) ;
36837: LD_ADDR_VAR 0 6
36841: PUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: CALL_OW 255
36851: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36852: LD_INT 61
36854: PPUSH
36855: LD_VAR 0 6
36859: PPUSH
36860: CALL_OW 321
36864: PUSH
36865: LD_INT 2
36867: EQUAL
36868: IFFALSE 36878
// viewRange := 16 ;
36870: LD_ADDR_VAR 0 7
36874: PUSH
36875: LD_INT 16
36877: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36878: LD_VAR 0 1
36882: PPUSH
36883: LD_VAR 0 2
36887: PPUSH
36888: LD_VAR 0 3
36892: PPUSH
36893: CALL_OW 297
36897: PUSH
36898: LD_VAR 0 5
36902: GREATER
36903: IFFALSE 36982
// begin ComMoveXY ( unit , x , y ) ;
36905: LD_VAR 0 1
36909: PPUSH
36910: LD_VAR 0 2
36914: PPUSH
36915: LD_VAR 0 3
36919: PPUSH
36920: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36924: LD_INT 35
36926: PPUSH
36927: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36931: LD_VAR 0 1
36935: PPUSH
36936: LD_VAR 0 2
36940: PPUSH
36941: LD_VAR 0 3
36945: PPUSH
36946: CALL 73713 0 3
36950: NOT
36951: IFFALSE 36955
// exit ;
36953: GO 37209
// until GetDistUnitXY ( unit , x , y ) < dist ;
36955: LD_VAR 0 1
36959: PPUSH
36960: LD_VAR 0 2
36964: PPUSH
36965: LD_VAR 0 3
36969: PPUSH
36970: CALL_OW 297
36974: PUSH
36975: LD_VAR 0 5
36979: LESS
36980: IFFALSE 36924
// end ; ComTurnXY ( unit , x , y ) ;
36982: LD_VAR 0 1
36986: PPUSH
36987: LD_VAR 0 2
36991: PPUSH
36992: LD_VAR 0 3
36996: PPUSH
36997: CALL_OW 118
// wait ( 5 ) ;
37001: LD_INT 5
37003: PPUSH
37004: CALL_OW 67
// _d := GetDir ( unit ) ;
37008: LD_ADDR_VAR 0 10
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 254
37022: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37023: LD_ADDR_VAR 0 8
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: CALL_OW 250
37037: PPUSH
37038: LD_VAR 0 10
37042: PPUSH
37043: LD_VAR 0 5
37047: PPUSH
37048: CALL_OW 272
37052: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37053: LD_ADDR_VAR 0 9
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 251
37067: PPUSH
37068: LD_VAR 0 10
37072: PPUSH
37073: LD_VAR 0 5
37077: PPUSH
37078: CALL_OW 273
37082: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37083: LD_VAR 0 8
37087: PPUSH
37088: LD_VAR 0 9
37092: PPUSH
37093: CALL_OW 488
37097: NOT
37098: IFFALSE 37102
// exit ;
37100: GO 37209
// ComAnimCustom ( unit , 1 ) ;
37102: LD_VAR 0 1
37106: PPUSH
37107: LD_INT 1
37109: PPUSH
37110: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37114: LD_VAR 0 8
37118: PPUSH
37119: LD_VAR 0 9
37123: PPUSH
37124: LD_VAR 0 6
37128: PPUSH
37129: LD_VAR 0 7
37133: PPUSH
37134: CALL_OW 330
// repeat wait ( 1 ) ;
37138: LD_INT 1
37140: PPUSH
37141: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 316
37154: PUSH
37155: LD_VAR 0 1
37159: PPUSH
37160: CALL_OW 314
37164: OR
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 302
37175: NOT
37176: OR
37177: PUSH
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 301
37187: OR
37188: IFFALSE 37138
// RemoveSeeing ( _x , _y , side ) ;
37190: LD_VAR 0 8
37194: PPUSH
37195: LD_VAR 0 9
37199: PPUSH
37200: LD_VAR 0 6
37204: PPUSH
37205: CALL_OW 331
// end ; end_of_file
37209: LD_VAR 0 4
37213: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37214: LD_INT 0
37216: PPUSH
37217: PPUSH
// if exist_mode then
37218: LD_VAR 0 2
37222: IFFALSE 37247
// unit := CreateCharacter ( prefix & ident ) else
37224: LD_ADDR_VAR 0 5
37228: PUSH
37229: LD_VAR 0 3
37233: PUSH
37234: LD_VAR 0 1
37238: STR
37239: PPUSH
37240: CALL_OW 34
37244: ST_TO_ADDR
37245: GO 37262
// unit := NewCharacter ( ident ) ;
37247: LD_ADDR_VAR 0 5
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: CALL_OW 25
37261: ST_TO_ADDR
// result := unit ;
37262: LD_ADDR_VAR 0 4
37266: PUSH
37267: LD_VAR 0 5
37271: ST_TO_ADDR
// end ;
37272: LD_VAR 0 4
37276: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37277: LD_INT 0
37279: PPUSH
37280: PPUSH
// if not side or not nation then
37281: LD_VAR 0 1
37285: NOT
37286: PUSH
37287: LD_VAR 0 2
37291: NOT
37292: OR
37293: IFFALSE 37297
// exit ;
37295: GO 38065
// case nation of nation_american :
37297: LD_VAR 0 2
37301: PUSH
37302: LD_INT 1
37304: DOUBLE
37305: EQUAL
37306: IFTRUE 37310
37308: GO 37524
37310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37311: LD_ADDR_VAR 0 4
37315: PUSH
37316: LD_INT 35
37318: PUSH
37319: LD_INT 45
37321: PUSH
37322: LD_INT 46
37324: PUSH
37325: LD_INT 47
37327: PUSH
37328: LD_INT 82
37330: PUSH
37331: LD_INT 83
37333: PUSH
37334: LD_INT 84
37336: PUSH
37337: LD_INT 85
37339: PUSH
37340: LD_INT 86
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 6
37351: PUSH
37352: LD_INT 15
37354: PUSH
37355: LD_INT 16
37357: PUSH
37358: LD_INT 7
37360: PUSH
37361: LD_INT 12
37363: PUSH
37364: LD_INT 13
37366: PUSH
37367: LD_INT 10
37369: PUSH
37370: LD_INT 14
37372: PUSH
37373: LD_INT 20
37375: PUSH
37376: LD_INT 21
37378: PUSH
37379: LD_INT 22
37381: PUSH
37382: LD_INT 25
37384: PUSH
37385: LD_INT 32
37387: PUSH
37388: LD_INT 27
37390: PUSH
37391: LD_INT 36
37393: PUSH
37394: LD_INT 69
37396: PUSH
37397: LD_INT 39
37399: PUSH
37400: LD_INT 34
37402: PUSH
37403: LD_INT 40
37405: PUSH
37406: LD_INT 48
37408: PUSH
37409: LD_INT 49
37411: PUSH
37412: LD_INT 50
37414: PUSH
37415: LD_INT 51
37417: PUSH
37418: LD_INT 52
37420: PUSH
37421: LD_INT 53
37423: PUSH
37424: LD_INT 54
37426: PUSH
37427: LD_INT 55
37429: PUSH
37430: LD_INT 56
37432: PUSH
37433: LD_INT 57
37435: PUSH
37436: LD_INT 58
37438: PUSH
37439: LD_INT 59
37441: PUSH
37442: LD_INT 60
37444: PUSH
37445: LD_INT 61
37447: PUSH
37448: LD_INT 62
37450: PUSH
37451: LD_INT 80
37453: PUSH
37454: LD_INT 82
37456: PUSH
37457: LD_INT 83
37459: PUSH
37460: LD_INT 84
37462: PUSH
37463: LD_INT 85
37465: PUSH
37466: LD_INT 86
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: ST_TO_ADDR
37522: GO 37989
37524: LD_INT 2
37526: DOUBLE
37527: EQUAL
37528: IFTRUE 37532
37530: GO 37758
37532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37533: LD_ADDR_VAR 0 4
37537: PUSH
37538: LD_INT 35
37540: PUSH
37541: LD_INT 45
37543: PUSH
37544: LD_INT 46
37546: PUSH
37547: LD_INT 47
37549: PUSH
37550: LD_INT 82
37552: PUSH
37553: LD_INT 83
37555: PUSH
37556: LD_INT 84
37558: PUSH
37559: LD_INT 85
37561: PUSH
37562: LD_INT 87
37564: PUSH
37565: LD_INT 70
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 11
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 4
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: LD_INT 6
37585: PUSH
37586: LD_INT 15
37588: PUSH
37589: LD_INT 18
37591: PUSH
37592: LD_INT 7
37594: PUSH
37595: LD_INT 17
37597: PUSH
37598: LD_INT 8
37600: PUSH
37601: LD_INT 20
37603: PUSH
37604: LD_INT 21
37606: PUSH
37607: LD_INT 22
37609: PUSH
37610: LD_INT 72
37612: PUSH
37613: LD_INT 26
37615: PUSH
37616: LD_INT 69
37618: PUSH
37619: LD_INT 39
37621: PUSH
37622: LD_INT 40
37624: PUSH
37625: LD_INT 41
37627: PUSH
37628: LD_INT 42
37630: PUSH
37631: LD_INT 43
37633: PUSH
37634: LD_INT 48
37636: PUSH
37637: LD_INT 49
37639: PUSH
37640: LD_INT 50
37642: PUSH
37643: LD_INT 51
37645: PUSH
37646: LD_INT 52
37648: PUSH
37649: LD_INT 53
37651: PUSH
37652: LD_INT 54
37654: PUSH
37655: LD_INT 55
37657: PUSH
37658: LD_INT 56
37660: PUSH
37661: LD_INT 60
37663: PUSH
37664: LD_INT 61
37666: PUSH
37667: LD_INT 62
37669: PUSH
37670: LD_INT 66
37672: PUSH
37673: LD_INT 67
37675: PUSH
37676: LD_INT 68
37678: PUSH
37679: LD_INT 81
37681: PUSH
37682: LD_INT 82
37684: PUSH
37685: LD_INT 83
37687: PUSH
37688: LD_INT 84
37690: PUSH
37691: LD_INT 85
37693: PUSH
37694: LD_INT 87
37696: PUSH
37697: LD_INT 88
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
37756: GO 37989
37758: LD_INT 3
37760: DOUBLE
37761: EQUAL
37762: IFTRUE 37766
37764: GO 37988
37766: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_INT 46
37774: PUSH
37775: LD_INT 47
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: LD_INT 82
37786: PUSH
37787: LD_INT 83
37789: PUSH
37790: LD_INT 84
37792: PUSH
37793: LD_INT 85
37795: PUSH
37796: LD_INT 86
37798: PUSH
37799: LD_INT 11
37801: PUSH
37802: LD_INT 9
37804: PUSH
37805: LD_INT 20
37807: PUSH
37808: LD_INT 19
37810: PUSH
37811: LD_INT 21
37813: PUSH
37814: LD_INT 24
37816: PUSH
37817: LD_INT 22
37819: PUSH
37820: LD_INT 25
37822: PUSH
37823: LD_INT 28
37825: PUSH
37826: LD_INT 29
37828: PUSH
37829: LD_INT 30
37831: PUSH
37832: LD_INT 31
37834: PUSH
37835: LD_INT 37
37837: PUSH
37838: LD_INT 38
37840: PUSH
37841: LD_INT 32
37843: PUSH
37844: LD_INT 27
37846: PUSH
37847: LD_INT 33
37849: PUSH
37850: LD_INT 69
37852: PUSH
37853: LD_INT 39
37855: PUSH
37856: LD_INT 34
37858: PUSH
37859: LD_INT 40
37861: PUSH
37862: LD_INT 71
37864: PUSH
37865: LD_INT 23
37867: PUSH
37868: LD_INT 44
37870: PUSH
37871: LD_INT 48
37873: PUSH
37874: LD_INT 49
37876: PUSH
37877: LD_INT 50
37879: PUSH
37880: LD_INT 51
37882: PUSH
37883: LD_INT 52
37885: PUSH
37886: LD_INT 53
37888: PUSH
37889: LD_INT 54
37891: PUSH
37892: LD_INT 55
37894: PUSH
37895: LD_INT 56
37897: PUSH
37898: LD_INT 57
37900: PUSH
37901: LD_INT 58
37903: PUSH
37904: LD_INT 59
37906: PUSH
37907: LD_INT 63
37909: PUSH
37910: LD_INT 64
37912: PUSH
37913: LD_INT 65
37915: PUSH
37916: LD_INT 82
37918: PUSH
37919: LD_INT 83
37921: PUSH
37922: LD_INT 84
37924: PUSH
37925: LD_INT 85
37927: PUSH
37928: LD_INT 86
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
37986: GO 37989
37988: POP
// if state > - 1 and state < 3 then
37989: LD_VAR 0 3
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: GREATER
37998: PUSH
37999: LD_VAR 0 3
38003: PUSH
38004: LD_INT 3
38006: LESS
38007: AND
38008: IFFALSE 38065
// for i in result do
38010: LD_ADDR_VAR 0 5
38014: PUSH
38015: LD_VAR 0 4
38019: PUSH
38020: FOR_IN
38021: IFFALSE 38063
// if GetTech ( i , side ) <> state then
38023: LD_VAR 0 5
38027: PPUSH
38028: LD_VAR 0 1
38032: PPUSH
38033: CALL_OW 321
38037: PUSH
38038: LD_VAR 0 3
38042: NONEQUAL
38043: IFFALSE 38061
// result := result diff i ;
38045: LD_ADDR_VAR 0 4
38049: PUSH
38050: LD_VAR 0 4
38054: PUSH
38055: LD_VAR 0 5
38059: DIFF
38060: ST_TO_ADDR
38061: GO 38020
38063: POP
38064: POP
// end ;
38065: LD_VAR 0 4
38069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38070: LD_INT 0
38072: PPUSH
38073: PPUSH
38074: PPUSH
// result := true ;
38075: LD_ADDR_VAR 0 3
38079: PUSH
38080: LD_INT 1
38082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38083: LD_ADDR_VAR 0 5
38087: PUSH
38088: LD_VAR 0 2
38092: PPUSH
38093: CALL_OW 480
38097: ST_TO_ADDR
// if not tmp then
38098: LD_VAR 0 5
38102: NOT
38103: IFFALSE 38107
// exit ;
38105: GO 38156
// for i in tmp do
38107: LD_ADDR_VAR 0 4
38111: PUSH
38112: LD_VAR 0 5
38116: PUSH
38117: FOR_IN
38118: IFFALSE 38154
// if GetTech ( i , side ) <> state_researched then
38120: LD_VAR 0 4
38124: PPUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 321
38134: PUSH
38135: LD_INT 2
38137: NONEQUAL
38138: IFFALSE 38152
// begin result := false ;
38140: LD_ADDR_VAR 0 3
38144: PUSH
38145: LD_INT 0
38147: ST_TO_ADDR
// exit ;
38148: POP
38149: POP
38150: GO 38156
// end ;
38152: GO 38117
38154: POP
38155: POP
// end ;
38156: LD_VAR 0 3
38160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38161: LD_INT 0
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
38173: PPUSH
38174: PPUSH
38175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38176: LD_VAR 0 1
38180: NOT
38181: PUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: CALL_OW 257
38191: PUSH
38192: LD_INT 9
38194: NONEQUAL
38195: OR
38196: IFFALSE 38200
// exit ;
38198: GO 38773
// side := GetSide ( unit ) ;
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 255
38214: ST_TO_ADDR
// tech_space := tech_spacanom ;
38215: LD_ADDR_VAR 0 12
38219: PUSH
38220: LD_INT 29
38222: ST_TO_ADDR
// tech_time := tech_taurad ;
38223: LD_ADDR_VAR 0 13
38227: PUSH
38228: LD_INT 28
38230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38231: LD_ADDR_VAR 0 11
38235: PUSH
38236: LD_VAR 0 1
38240: PPUSH
38241: CALL_OW 310
38245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38246: LD_VAR 0 11
38250: PPUSH
38251: CALL_OW 247
38255: PUSH
38256: LD_INT 2
38258: EQUAL
38259: IFFALSE 38263
// exit ;
38261: GO 38773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38263: LD_ADDR_VAR 0 8
38267: PUSH
38268: LD_INT 81
38270: PUSH
38271: LD_VAR 0 9
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: LD_INT 21
38285: PUSH
38286: LD_INT 3
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PPUSH
38301: CALL_OW 69
38305: ST_TO_ADDR
// if not tmp then
38306: LD_VAR 0 8
38310: NOT
38311: IFFALSE 38315
// exit ;
38313: GO 38773
// if in_unit then
38315: LD_VAR 0 11
38319: IFFALSE 38343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38321: LD_ADDR_VAR 0 10
38325: PUSH
38326: LD_VAR 0 8
38330: PPUSH
38331: LD_VAR 0 11
38335: PPUSH
38336: CALL_OW 74
38340: ST_TO_ADDR
38341: GO 38363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38343: LD_ADDR_VAR 0 10
38347: PUSH
38348: LD_VAR 0 8
38352: PPUSH
38353: LD_VAR 0 1
38357: PPUSH
38358: CALL_OW 74
38362: ST_TO_ADDR
// if not enemy then
38363: LD_VAR 0 10
38367: NOT
38368: IFFALSE 38372
// exit ;
38370: GO 38773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38372: LD_VAR 0 11
38376: PUSH
38377: LD_VAR 0 11
38381: PPUSH
38382: LD_VAR 0 10
38386: PPUSH
38387: CALL_OW 296
38391: PUSH
38392: LD_INT 13
38394: GREATER
38395: AND
38396: PUSH
38397: LD_VAR 0 1
38401: PPUSH
38402: LD_VAR 0 10
38406: PPUSH
38407: CALL_OW 296
38411: PUSH
38412: LD_INT 12
38414: GREATER
38415: OR
38416: IFFALSE 38420
// exit ;
38418: GO 38773
// missile := [ 1 ] ;
38420: LD_ADDR_VAR 0 14
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38431: LD_VAR 0 9
38435: PPUSH
38436: LD_VAR 0 12
38440: PPUSH
38441: CALL_OW 325
38445: IFFALSE 38474
// missile := Replace ( missile , missile + 1 , 2 ) ;
38447: LD_ADDR_VAR 0 14
38451: PUSH
38452: LD_VAR 0 14
38456: PPUSH
38457: LD_VAR 0 14
38461: PUSH
38462: LD_INT 1
38464: PLUS
38465: PPUSH
38466: LD_INT 2
38468: PPUSH
38469: CALL_OW 1
38473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38474: LD_VAR 0 9
38478: PPUSH
38479: LD_VAR 0 13
38483: PPUSH
38484: CALL_OW 325
38488: PUSH
38489: LD_VAR 0 10
38493: PPUSH
38494: CALL_OW 255
38498: PPUSH
38499: LD_VAR 0 13
38503: PPUSH
38504: CALL_OW 325
38508: NOT
38509: AND
38510: IFFALSE 38539
// missile := Replace ( missile , missile + 1 , 3 ) ;
38512: LD_ADDR_VAR 0 14
38516: PUSH
38517: LD_VAR 0 14
38521: PPUSH
38522: LD_VAR 0 14
38526: PUSH
38527: LD_INT 1
38529: PLUS
38530: PPUSH
38531: LD_INT 3
38533: PPUSH
38534: CALL_OW 1
38538: ST_TO_ADDR
// if missile < 2 then
38539: LD_VAR 0 14
38543: PUSH
38544: LD_INT 2
38546: LESS
38547: IFFALSE 38551
// exit ;
38549: GO 38773
// x := GetX ( enemy ) ;
38551: LD_ADDR_VAR 0 4
38555: PUSH
38556: LD_VAR 0 10
38560: PPUSH
38561: CALL_OW 250
38565: ST_TO_ADDR
// y := GetY ( enemy ) ;
38566: LD_ADDR_VAR 0 5
38570: PUSH
38571: LD_VAR 0 10
38575: PPUSH
38576: CALL_OW 251
38580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38581: LD_ADDR_VAR 0 6
38585: PUSH
38586: LD_VAR 0 4
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PPUSH
38595: LD_INT 1
38597: PPUSH
38598: CALL_OW 12
38602: PLUS
38603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38604: LD_ADDR_VAR 0 7
38608: PUSH
38609: LD_VAR 0 5
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PPUSH
38618: LD_INT 1
38620: PPUSH
38621: CALL_OW 12
38625: PLUS
38626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38627: LD_VAR 0 6
38631: PPUSH
38632: LD_VAR 0 7
38636: PPUSH
38637: CALL_OW 488
38641: NOT
38642: IFFALSE 38664
// begin _x := x ;
38644: LD_ADDR_VAR 0 6
38648: PUSH
38649: LD_VAR 0 4
38653: ST_TO_ADDR
// _y := y ;
38654: LD_ADDR_VAR 0 7
38658: PUSH
38659: LD_VAR 0 5
38663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38664: LD_ADDR_VAR 0 3
38668: PUSH
38669: LD_INT 1
38671: PPUSH
38672: LD_VAR 0 14
38676: PPUSH
38677: CALL_OW 12
38681: ST_TO_ADDR
// case i of 1 :
38682: LD_VAR 0 3
38686: PUSH
38687: LD_INT 1
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38712
38695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38696: LD_VAR 0 1
38700: PPUSH
38701: LD_VAR 0 10
38705: PPUSH
38706: CALL_OW 115
38710: GO 38773
38712: LD_INT 2
38714: DOUBLE
38715: EQUAL
38716: IFTRUE 38720
38718: GO 38742
38720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38721: LD_VAR 0 1
38725: PPUSH
38726: LD_VAR 0 6
38730: PPUSH
38731: LD_VAR 0 7
38735: PPUSH
38736: CALL_OW 153
38740: GO 38773
38742: LD_INT 3
38744: DOUBLE
38745: EQUAL
38746: IFTRUE 38750
38748: GO 38772
38750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38751: LD_VAR 0 1
38755: PPUSH
38756: LD_VAR 0 6
38760: PPUSH
38761: LD_VAR 0 7
38765: PPUSH
38766: CALL_OW 154
38770: GO 38773
38772: POP
// end ;
38773: LD_VAR 0 2
38777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38778: LD_INT 0
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
// if not unit or not building then
38786: LD_VAR 0 1
38790: NOT
38791: PUSH
38792: LD_VAR 0 2
38796: NOT
38797: OR
38798: IFFALSE 38802
// exit ;
38800: GO 38960
// x := GetX ( building ) ;
38802: LD_ADDR_VAR 0 5
38806: PUSH
38807: LD_VAR 0 2
38811: PPUSH
38812: CALL_OW 250
38816: ST_TO_ADDR
// y := GetY ( building ) ;
38817: LD_ADDR_VAR 0 6
38821: PUSH
38822: LD_VAR 0 2
38826: PPUSH
38827: CALL_OW 251
38831: ST_TO_ADDR
// for i = 0 to 5 do
38832: LD_ADDR_VAR 0 4
38836: PUSH
38837: DOUBLE
38838: LD_INT 0
38840: DEC
38841: ST_TO_ADDR
38842: LD_INT 5
38844: PUSH
38845: FOR_TO
38846: IFFALSE 38958
// begin _x := ShiftX ( x , i , 3 ) ;
38848: LD_ADDR_VAR 0 7
38852: PUSH
38853: LD_VAR 0 5
38857: PPUSH
38858: LD_VAR 0 4
38862: PPUSH
38863: LD_INT 3
38865: PPUSH
38866: CALL_OW 272
38870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38871: LD_ADDR_VAR 0 8
38875: PUSH
38876: LD_VAR 0 6
38880: PPUSH
38881: LD_VAR 0 4
38885: PPUSH
38886: LD_INT 3
38888: PPUSH
38889: CALL_OW 273
38893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38894: LD_VAR 0 7
38898: PPUSH
38899: LD_VAR 0 8
38903: PPUSH
38904: CALL_OW 488
38908: NOT
38909: IFFALSE 38913
// continue ;
38911: GO 38845
// if HexInfo ( _x , _y ) = 0 then
38913: LD_VAR 0 7
38917: PPUSH
38918: LD_VAR 0 8
38922: PPUSH
38923: CALL_OW 428
38927: PUSH
38928: LD_INT 0
38930: EQUAL
38931: IFFALSE 38956
// begin ComMoveXY ( unit , _x , _y ) ;
38933: LD_VAR 0 1
38937: PPUSH
38938: LD_VAR 0 7
38942: PPUSH
38943: LD_VAR 0 8
38947: PPUSH
38948: CALL_OW 111
// exit ;
38952: POP
38953: POP
38954: GO 38960
// end ; end ;
38956: GO 38845
38958: POP
38959: POP
// end ;
38960: LD_VAR 0 3
38964: RET
// export function ScanBase ( side , base_area ) ; begin
38965: LD_INT 0
38967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38968: LD_ADDR_VAR 0 3
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_INT 81
38980: PUSH
38981: LD_VAR 0 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PPUSH
38990: CALL_OW 70
38994: ST_TO_ADDR
// end ;
38995: LD_VAR 0 3
38999: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39000: LD_INT 0
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
// result := false ;
39006: LD_ADDR_VAR 0 2
39010: PUSH
39011: LD_INT 0
39013: ST_TO_ADDR
// side := GetSide ( unit ) ;
39014: LD_ADDR_VAR 0 3
39018: PUSH
39019: LD_VAR 0 1
39023: PPUSH
39024: CALL_OW 255
39028: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 248
39043: ST_TO_ADDR
// case nat of 1 :
39044: LD_VAR 0 4
39048: PUSH
39049: LD_INT 1
39051: DOUBLE
39052: EQUAL
39053: IFTRUE 39057
39055: GO 39068
39057: POP
// tech := tech_lassight ; 2 :
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: LD_INT 12
39065: ST_TO_ADDR
39066: GO 39107
39068: LD_INT 2
39070: DOUBLE
39071: EQUAL
39072: IFTRUE 39076
39074: GO 39087
39076: POP
// tech := tech_mortar ; 3 :
39077: LD_ADDR_VAR 0 5
39081: PUSH
39082: LD_INT 41
39084: ST_TO_ADDR
39085: GO 39107
39087: LD_INT 3
39089: DOUBLE
39090: EQUAL
39091: IFTRUE 39095
39093: GO 39106
39095: POP
// tech := tech_bazooka ; end ;
39096: LD_ADDR_VAR 0 5
39100: PUSH
39101: LD_INT 44
39103: ST_TO_ADDR
39104: GO 39107
39106: POP
// if Researched ( side , tech ) then
39107: LD_VAR 0 3
39111: PPUSH
39112: LD_VAR 0 5
39116: PPUSH
39117: CALL_OW 325
39121: IFFALSE 39148
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39123: LD_ADDR_VAR 0 2
39127: PUSH
39128: LD_INT 5
39130: PUSH
39131: LD_INT 8
39133: PUSH
39134: LD_INT 9
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: PUSH
39142: LD_VAR 0 4
39146: ARRAY
39147: ST_TO_ADDR
// end ;
39148: LD_VAR 0 2
39152: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39153: LD_INT 0
39155: PPUSH
39156: PPUSH
39157: PPUSH
// if not mines then
39158: LD_VAR 0 2
39162: NOT
39163: IFFALSE 39167
// exit ;
39165: GO 39311
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39167: LD_ADDR_VAR 0 5
39171: PUSH
39172: LD_INT 81
39174: PUSH
39175: LD_VAR 0 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 21
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PPUSH
39205: CALL_OW 69
39209: ST_TO_ADDR
// for i in mines do
39210: LD_ADDR_VAR 0 4
39214: PUSH
39215: LD_VAR 0 2
39219: PUSH
39220: FOR_IN
39221: IFFALSE 39309
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39223: LD_VAR 0 4
39227: PUSH
39228: LD_INT 1
39230: ARRAY
39231: PPUSH
39232: LD_VAR 0 4
39236: PUSH
39237: LD_INT 2
39239: ARRAY
39240: PPUSH
39241: CALL_OW 458
39245: NOT
39246: IFFALSE 39250
// continue ;
39248: GO 39220
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39250: LD_VAR 0 4
39254: PUSH
39255: LD_INT 1
39257: ARRAY
39258: PPUSH
39259: LD_VAR 0 4
39263: PUSH
39264: LD_INT 2
39266: ARRAY
39267: PPUSH
39268: CALL_OW 428
39272: PUSH
39273: LD_VAR 0 5
39277: IN
39278: IFFALSE 39307
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39280: LD_VAR 0 4
39284: PUSH
39285: LD_INT 1
39287: ARRAY
39288: PPUSH
39289: LD_VAR 0 4
39293: PUSH
39294: LD_INT 2
39296: ARRAY
39297: PPUSH
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 456
// end ;
39307: GO 39220
39309: POP
39310: POP
// end ;
39311: LD_VAR 0 3
39315: RET
// export function Count ( array ) ; begin
39316: LD_INT 0
39318: PPUSH
// result := array + 0 ;
39319: LD_ADDR_VAR 0 2
39323: PUSH
39324: LD_VAR 0 1
39328: PUSH
39329: LD_INT 0
39331: PLUS
39332: ST_TO_ADDR
// end ;
39333: LD_VAR 0 2
39337: RET
// export function IsEmpty ( building ) ; begin
39338: LD_INT 0
39340: PPUSH
// if not building then
39341: LD_VAR 0 1
39345: NOT
39346: IFFALSE 39350
// exit ;
39348: GO 39393
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39350: LD_ADDR_VAR 0 2
39354: PUSH
39355: LD_VAR 0 1
39359: PUSH
39360: LD_INT 22
39362: PUSH
39363: LD_VAR 0 1
39367: PPUSH
39368: CALL_OW 255
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 58
39379: PUSH
39380: EMPTY
39381: LIST
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PPUSH
39387: CALL_OW 69
39391: IN
39392: ST_TO_ADDR
// end ;
39393: LD_VAR 0 2
39397: RET
// export function IsNotFull ( building ) ; var places ; begin
39398: LD_INT 0
39400: PPUSH
39401: PPUSH
// if not building then
39402: LD_VAR 0 1
39406: NOT
39407: IFFALSE 39411
// exit ;
39409: GO 39439
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39411: LD_ADDR_VAR 0 2
39415: PUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 62
39426: PUSH
39427: EMPTY
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PPUSH
39434: CALL_OW 72
39438: ST_TO_ADDR
// end ;
39439: LD_VAR 0 2
39443: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39444: LD_INT 0
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
// tmp := [ ] ;
39450: LD_ADDR_VAR 0 3
39454: PUSH
39455: EMPTY
39456: ST_TO_ADDR
// list := [ ] ;
39457: LD_ADDR_VAR 0 5
39461: PUSH
39462: EMPTY
39463: ST_TO_ADDR
// for i = 16 to 25 do
39464: LD_ADDR_VAR 0 4
39468: PUSH
39469: DOUBLE
39470: LD_INT 16
39472: DEC
39473: ST_TO_ADDR
39474: LD_INT 25
39476: PUSH
39477: FOR_TO
39478: IFFALSE 39551
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_VAR 0 3
39489: PUSH
39490: LD_INT 22
39492: PUSH
39493: LD_VAR 0 1
39497: PPUSH
39498: CALL_OW 255
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 91
39509: PUSH
39510: LD_VAR 0 1
39514: PUSH
39515: LD_INT 6
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 30
39525: PUSH
39526: LD_VAR 0 4
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: PPUSH
39543: CALL_OW 69
39547: ADD
39548: ST_TO_ADDR
39549: GO 39477
39551: POP
39552: POP
// for i = 1 to tmp do
39553: LD_ADDR_VAR 0 4
39557: PUSH
39558: DOUBLE
39559: LD_INT 1
39561: DEC
39562: ST_TO_ADDR
39563: LD_VAR 0 3
39567: PUSH
39568: FOR_TO
39569: IFFALSE 39657
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39571: LD_ADDR_VAR 0 5
39575: PUSH
39576: LD_VAR 0 5
39580: PUSH
39581: LD_VAR 0 3
39585: PUSH
39586: LD_VAR 0 4
39590: ARRAY
39591: PPUSH
39592: CALL_OW 266
39596: PUSH
39597: LD_VAR 0 3
39601: PUSH
39602: LD_VAR 0 4
39606: ARRAY
39607: PPUSH
39608: CALL_OW 250
39612: PUSH
39613: LD_VAR 0 3
39617: PUSH
39618: LD_VAR 0 4
39622: ARRAY
39623: PPUSH
39624: CALL_OW 251
39628: PUSH
39629: LD_VAR 0 3
39633: PUSH
39634: LD_VAR 0 4
39638: ARRAY
39639: PPUSH
39640: CALL_OW 254
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: ADD
39654: ST_TO_ADDR
39655: GO 39568
39657: POP
39658: POP
// result := list ;
39659: LD_ADDR_VAR 0 2
39663: PUSH
39664: LD_VAR 0 5
39668: ST_TO_ADDR
// end ;
39669: LD_VAR 0 2
39673: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39674: LD_INT 0
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
// if not factory then
39683: LD_VAR 0 1
39687: NOT
39688: IFFALSE 39692
// exit ;
39690: GO 40285
// if control = control_apeman then
39692: LD_VAR 0 4
39696: PUSH
39697: LD_INT 5
39699: EQUAL
39700: IFFALSE 39809
// begin tmp := UnitsInside ( factory ) ;
39702: LD_ADDR_VAR 0 8
39706: PUSH
39707: LD_VAR 0 1
39711: PPUSH
39712: CALL_OW 313
39716: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39717: LD_VAR 0 8
39721: PPUSH
39722: LD_INT 25
39724: PUSH
39725: LD_INT 12
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PPUSH
39732: CALL_OW 72
39736: NOT
39737: IFFALSE 39747
// control := control_manual ;
39739: LD_ADDR_VAR 0 4
39743: PUSH
39744: LD_INT 1
39746: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39747: LD_ADDR_VAR 0 8
39751: PUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL 39444 0 1
39761: ST_TO_ADDR
// if tmp then
39762: LD_VAR 0 8
39766: IFFALSE 39809
// begin for i in tmp do
39768: LD_ADDR_VAR 0 7
39772: PUSH
39773: LD_VAR 0 8
39777: PUSH
39778: FOR_IN
39779: IFFALSE 39807
// if i [ 1 ] = b_ext_radio then
39781: LD_VAR 0 7
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PUSH
39790: LD_INT 22
39792: EQUAL
39793: IFFALSE 39805
// begin control := control_remote ;
39795: LD_ADDR_VAR 0 4
39799: PUSH
39800: LD_INT 2
39802: ST_TO_ADDR
// break ;
39803: GO 39807
// end ;
39805: GO 39778
39807: POP
39808: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39809: LD_VAR 0 1
39813: PPUSH
39814: LD_VAR 0 2
39818: PPUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: LD_VAR 0 4
39828: PPUSH
39829: LD_VAR 0 5
39833: PPUSH
39834: CALL_OW 448
39838: IFFALSE 39873
// begin result := [ chassis , engine , control , weapon ] ;
39840: LD_ADDR_VAR 0 6
39844: PUSH
39845: LD_VAR 0 2
39849: PUSH
39850: LD_VAR 0 3
39854: PUSH
39855: LD_VAR 0 4
39859: PUSH
39860: LD_VAR 0 5
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// exit ;
39871: GO 40285
// end ; _chassis := AvailableChassisList ( factory ) ;
39873: LD_ADDR_VAR 0 9
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 475
39887: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39888: LD_ADDR_VAR 0 11
39892: PUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 476
39902: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39903: LD_ADDR_VAR 0 12
39907: PUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 477
39917: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39918: LD_ADDR_VAR 0 10
39922: PUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 478
39932: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39933: LD_VAR 0 9
39937: NOT
39938: PUSH
39939: LD_VAR 0 11
39943: NOT
39944: OR
39945: PUSH
39946: LD_VAR 0 12
39950: NOT
39951: OR
39952: PUSH
39953: LD_VAR 0 10
39957: NOT
39958: OR
39959: IFFALSE 39994
// begin result := [ chassis , engine , control , weapon ] ;
39961: LD_ADDR_VAR 0 6
39965: PUSH
39966: LD_VAR 0 2
39970: PUSH
39971: LD_VAR 0 3
39975: PUSH
39976: LD_VAR 0 4
39980: PUSH
39981: LD_VAR 0 5
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// exit ;
39992: GO 40285
// end ; if not chassis in _chassis then
39994: LD_VAR 0 2
39998: PUSH
39999: LD_VAR 0 9
40003: IN
40004: NOT
40005: IFFALSE 40031
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40007: LD_ADDR_VAR 0 2
40011: PUSH
40012: LD_VAR 0 9
40016: PUSH
40017: LD_INT 1
40019: PPUSH
40020: LD_VAR 0 9
40024: PPUSH
40025: CALL_OW 12
40029: ARRAY
40030: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40031: LD_VAR 0 2
40035: PPUSH
40036: LD_VAR 0 3
40040: PPUSH
40041: CALL 40290 0 2
40045: NOT
40046: IFFALSE 40105
// repeat engine := _engine [ 1 ] ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_VAR 0 11
40057: PUSH
40058: LD_INT 1
40060: ARRAY
40061: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40062: LD_ADDR_VAR 0 11
40066: PUSH
40067: LD_VAR 0 11
40071: PPUSH
40072: LD_INT 1
40074: PPUSH
40075: CALL_OW 3
40079: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40080: LD_VAR 0 2
40084: PPUSH
40085: LD_VAR 0 3
40089: PPUSH
40090: CALL 40290 0 2
40094: PUSH
40095: LD_VAR 0 11
40099: PUSH
40100: EMPTY
40101: EQUAL
40102: OR
40103: IFFALSE 40048
// if not control in _control then
40105: LD_VAR 0 4
40109: PUSH
40110: LD_VAR 0 12
40114: IN
40115: NOT
40116: IFFALSE 40142
// control := _control [ rand ( 1 , _control ) ] ;
40118: LD_ADDR_VAR 0 4
40122: PUSH
40123: LD_VAR 0 12
40127: PUSH
40128: LD_INT 1
40130: PPUSH
40131: LD_VAR 0 12
40135: PPUSH
40136: CALL_OW 12
40140: ARRAY
40141: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40142: LD_VAR 0 2
40146: PPUSH
40147: LD_VAR 0 5
40151: PPUSH
40152: CALL 40510 0 2
40156: NOT
40157: IFFALSE 40216
// repeat weapon := _weapon [ 1 ] ;
40159: LD_ADDR_VAR 0 5
40163: PUSH
40164: LD_VAR 0 10
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40173: LD_ADDR_VAR 0 10
40177: PUSH
40178: LD_VAR 0 10
40182: PPUSH
40183: LD_INT 1
40185: PPUSH
40186: CALL_OW 3
40190: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40191: LD_VAR 0 2
40195: PPUSH
40196: LD_VAR 0 5
40200: PPUSH
40201: CALL 40510 0 2
40205: PUSH
40206: LD_VAR 0 10
40210: PUSH
40211: EMPTY
40212: EQUAL
40213: OR
40214: IFFALSE 40159
// result := [ ] ;
40216: LD_ADDR_VAR 0 6
40220: PUSH
40221: EMPTY
40222: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40223: LD_VAR 0 1
40227: PPUSH
40228: LD_VAR 0 2
40232: PPUSH
40233: LD_VAR 0 3
40237: PPUSH
40238: LD_VAR 0 4
40242: PPUSH
40243: LD_VAR 0 5
40247: PPUSH
40248: CALL_OW 448
40252: IFFALSE 40285
// result := [ chassis , engine , control , weapon ] ;
40254: LD_ADDR_VAR 0 6
40258: PUSH
40259: LD_VAR 0 2
40263: PUSH
40264: LD_VAR 0 3
40268: PUSH
40269: LD_VAR 0 4
40273: PUSH
40274: LD_VAR 0 5
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: ST_TO_ADDR
// end ;
40285: LD_VAR 0 6
40289: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40290: LD_INT 0
40292: PPUSH
// if not chassis or not engine then
40293: LD_VAR 0 1
40297: NOT
40298: PUSH
40299: LD_VAR 0 2
40303: NOT
40304: OR
40305: IFFALSE 40309
// exit ;
40307: GO 40505
// case engine of engine_solar :
40309: LD_VAR 0 2
40313: PUSH
40314: LD_INT 2
40316: DOUBLE
40317: EQUAL
40318: IFTRUE 40322
40320: GO 40360
40322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_INT 11
40330: PUSH
40331: LD_INT 12
40333: PUSH
40334: LD_INT 13
40336: PUSH
40337: LD_INT 14
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
40358: GO 40489
40360: LD_INT 1
40362: DOUBLE
40363: EQUAL
40364: IFTRUE 40368
40366: GO 40430
40368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40369: LD_ADDR_VAR 0 3
40373: PUSH
40374: LD_INT 11
40376: PUSH
40377: LD_INT 12
40379: PUSH
40380: LD_INT 13
40382: PUSH
40383: LD_INT 14
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: LD_INT 5
40400: PUSH
40401: LD_INT 21
40403: PUSH
40404: LD_INT 23
40406: PUSH
40407: LD_INT 22
40409: PUSH
40410: LD_INT 24
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: ST_TO_ADDR
40428: GO 40489
40430: LD_INT 3
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40488
40438: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40439: LD_ADDR_VAR 0 3
40443: PUSH
40444: LD_INT 13
40446: PUSH
40447: LD_INT 14
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: LD_INT 4
40458: PUSH
40459: LD_INT 5
40461: PUSH
40462: LD_INT 21
40464: PUSH
40465: LD_INT 22
40467: PUSH
40468: LD_INT 23
40470: PUSH
40471: LD_INT 24
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: ST_TO_ADDR
40486: GO 40489
40488: POP
// result := ( chassis in result ) ;
40489: LD_ADDR_VAR 0 3
40493: PUSH
40494: LD_VAR 0 1
40498: PUSH
40499: LD_VAR 0 3
40503: IN
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 3
40509: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40510: LD_INT 0
40512: PPUSH
// if not chassis or not weapon then
40513: LD_VAR 0 1
40517: NOT
40518: PUSH
40519: LD_VAR 0 2
40523: NOT
40524: OR
40525: IFFALSE 40529
// exit ;
40527: GO 41589
// case weapon of us_machine_gun :
40529: LD_VAR 0 2
40533: PUSH
40534: LD_INT 2
40536: DOUBLE
40537: EQUAL
40538: IFTRUE 40542
40540: GO 40572
40542: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40543: LD_ADDR_VAR 0 3
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 3
40556: PUSH
40557: LD_INT 4
40559: PUSH
40560: LD_INT 5
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
40570: GO 41573
40572: LD_INT 3
40574: DOUBLE
40575: EQUAL
40576: IFTRUE 40580
40578: GO 40610
40580: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40581: LD_ADDR_VAR 0 3
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: LD_INT 4
40597: PUSH
40598: LD_INT 5
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
40608: GO 41573
40610: LD_INT 11
40612: DOUBLE
40613: EQUAL
40614: IFTRUE 40618
40616: GO 40648
40618: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40619: LD_ADDR_VAR 0 3
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: LD_INT 3
40632: PUSH
40633: LD_INT 4
40635: PUSH
40636: LD_INT 5
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: ST_TO_ADDR
40646: GO 41573
40648: LD_INT 4
40650: DOUBLE
40651: EQUAL
40652: IFTRUE 40656
40654: GO 40682
40656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 3
40667: PUSH
40668: LD_INT 4
40670: PUSH
40671: LD_INT 5
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: ST_TO_ADDR
40680: GO 41573
40682: LD_INT 5
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40716
40690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 3
40701: PUSH
40702: LD_INT 4
40704: PUSH
40705: LD_INT 5
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
40714: GO 41573
40716: LD_INT 9
40718: DOUBLE
40719: EQUAL
40720: IFTRUE 40724
40722: GO 40750
40724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: LD_INT 4
40738: PUSH
40739: LD_INT 5
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: ST_TO_ADDR
40748: GO 41573
40750: LD_INT 7
40752: DOUBLE
40753: EQUAL
40754: IFTRUE 40758
40756: GO 40784
40758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40759: LD_ADDR_VAR 0 3
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: LD_INT 4
40772: PUSH
40773: LD_INT 5
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
40782: GO 41573
40784: LD_INT 12
40786: DOUBLE
40787: EQUAL
40788: IFTRUE 40792
40790: GO 40818
40792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40793: LD_ADDR_VAR 0 3
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 3
40803: PUSH
40804: LD_INT 4
40806: PUSH
40807: LD_INT 5
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
40816: GO 41573
40818: LD_INT 13
40820: DOUBLE
40821: EQUAL
40822: IFTRUE 40826
40824: GO 40852
40826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40827: LD_ADDR_VAR 0 3
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 3
40837: PUSH
40838: LD_INT 4
40840: PUSH
40841: LD_INT 5
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
40850: GO 41573
40852: LD_INT 14
40854: DOUBLE
40855: EQUAL
40856: IFTRUE 40860
40858: GO 40878
40860: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_INT 4
40868: PUSH
40869: LD_INT 5
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: ST_TO_ADDR
40876: GO 41573
40878: LD_INT 6
40880: DOUBLE
40881: EQUAL
40882: IFTRUE 40886
40884: GO 40904
40886: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: LD_INT 4
40894: PUSH
40895: LD_INT 5
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: ST_TO_ADDR
40902: GO 41573
40904: LD_INT 10
40906: DOUBLE
40907: EQUAL
40908: IFTRUE 40912
40910: GO 40930
40912: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: LD_INT 4
40920: PUSH
40921: LD_INT 5
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: ST_TO_ADDR
40928: GO 41573
40930: LD_INT 22
40932: DOUBLE
40933: EQUAL
40934: IFTRUE 40938
40936: GO 40964
40938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40939: LD_ADDR_VAR 0 3
40943: PUSH
40944: LD_INT 11
40946: PUSH
40947: LD_INT 12
40949: PUSH
40950: LD_INT 13
40952: PUSH
40953: LD_INT 14
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: ST_TO_ADDR
40962: GO 41573
40964: LD_INT 23
40966: DOUBLE
40967: EQUAL
40968: IFTRUE 40972
40970: GO 40998
40972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40973: LD_ADDR_VAR 0 3
40977: PUSH
40978: LD_INT 11
40980: PUSH
40981: LD_INT 12
40983: PUSH
40984: LD_INT 13
40986: PUSH
40987: LD_INT 14
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: ST_TO_ADDR
40996: GO 41573
40998: LD_INT 24
41000: DOUBLE
41001: EQUAL
41002: IFTRUE 41006
41004: GO 41032
41006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41007: LD_ADDR_VAR 0 3
41011: PUSH
41012: LD_INT 11
41014: PUSH
41015: LD_INT 12
41017: PUSH
41018: LD_INT 13
41020: PUSH
41021: LD_INT 14
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
41030: GO 41573
41032: LD_INT 30
41034: DOUBLE
41035: EQUAL
41036: IFTRUE 41040
41038: GO 41066
41040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_INT 11
41048: PUSH
41049: LD_INT 12
41051: PUSH
41052: LD_INT 13
41054: PUSH
41055: LD_INT 14
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
41064: GO 41573
41066: LD_INT 25
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41074
41072: GO 41092
41074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_INT 13
41082: PUSH
41083: LD_INT 14
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: ST_TO_ADDR
41090: GO 41573
41092: LD_INT 27
41094: DOUBLE
41095: EQUAL
41096: IFTRUE 41100
41098: GO 41118
41100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41101: LD_ADDR_VAR 0 3
41105: PUSH
41106: LD_INT 13
41108: PUSH
41109: LD_INT 14
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: ST_TO_ADDR
41116: GO 41573
41118: LD_INT 92
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41126
41124: GO 41152
41126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_INT 11
41134: PUSH
41135: LD_INT 12
41137: PUSH
41138: LD_INT 13
41140: PUSH
41141: LD_INT 14
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: ST_TO_ADDR
41150: GO 41573
41152: LD_INT 28
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41160
41158: GO 41178
41160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: LD_INT 13
41168: PUSH
41169: LD_INT 14
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: ST_TO_ADDR
41176: GO 41573
41178: LD_INT 29
41180: DOUBLE
41181: EQUAL
41182: IFTRUE 41186
41184: GO 41204
41186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41187: LD_ADDR_VAR 0 3
41191: PUSH
41192: LD_INT 13
41194: PUSH
41195: LD_INT 14
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: ST_TO_ADDR
41202: GO 41573
41204: LD_INT 31
41206: DOUBLE
41207: EQUAL
41208: IFTRUE 41212
41210: GO 41230
41212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41213: LD_ADDR_VAR 0 3
41217: PUSH
41218: LD_INT 13
41220: PUSH
41221: LD_INT 14
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: ST_TO_ADDR
41228: GO 41573
41230: LD_INT 26
41232: DOUBLE
41233: EQUAL
41234: IFTRUE 41238
41236: GO 41256
41238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_INT 13
41246: PUSH
41247: LD_INT 14
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: ST_TO_ADDR
41254: GO 41573
41256: LD_INT 42
41258: DOUBLE
41259: EQUAL
41260: IFTRUE 41264
41262: GO 41290
41264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41265: LD_ADDR_VAR 0 3
41269: PUSH
41270: LD_INT 21
41272: PUSH
41273: LD_INT 22
41275: PUSH
41276: LD_INT 23
41278: PUSH
41279: LD_INT 24
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: ST_TO_ADDR
41288: GO 41573
41290: LD_INT 43
41292: DOUBLE
41293: EQUAL
41294: IFTRUE 41298
41296: GO 41324
41298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_INT 21
41306: PUSH
41307: LD_INT 22
41309: PUSH
41310: LD_INT 23
41312: PUSH
41313: LD_INT 24
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
41322: GO 41573
41324: LD_INT 44
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41358
41332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 21
41340: PUSH
41341: LD_INT 22
41343: PUSH
41344: LD_INT 23
41346: PUSH
41347: LD_INT 24
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
41356: GO 41573
41358: LD_INT 45
41360: DOUBLE
41361: EQUAL
41362: IFTRUE 41366
41364: GO 41392
41366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_INT 21
41374: PUSH
41375: LD_INT 22
41377: PUSH
41378: LD_INT 23
41380: PUSH
41381: LD_INT 24
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: ST_TO_ADDR
41390: GO 41573
41392: LD_INT 49
41394: DOUBLE
41395: EQUAL
41396: IFTRUE 41400
41398: GO 41426
41400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41401: LD_ADDR_VAR 0 3
41405: PUSH
41406: LD_INT 21
41408: PUSH
41409: LD_INT 22
41411: PUSH
41412: LD_INT 23
41414: PUSH
41415: LD_INT 24
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
41424: GO 41573
41426: LD_INT 51
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41460
41434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_INT 21
41442: PUSH
41443: LD_INT 22
41445: PUSH
41446: LD_INT 23
41448: PUSH
41449: LD_INT 24
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
41458: GO 41573
41460: LD_INT 52
41462: DOUBLE
41463: EQUAL
41464: IFTRUE 41468
41466: GO 41494
41468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41469: LD_ADDR_VAR 0 3
41473: PUSH
41474: LD_INT 21
41476: PUSH
41477: LD_INT 22
41479: PUSH
41480: LD_INT 23
41482: PUSH
41483: LD_INT 24
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: ST_TO_ADDR
41492: GO 41573
41494: LD_INT 53
41496: DOUBLE
41497: EQUAL
41498: IFTRUE 41502
41500: GO 41520
41502: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_INT 23
41510: PUSH
41511: LD_INT 24
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: ST_TO_ADDR
41518: GO 41573
41520: LD_INT 46
41522: DOUBLE
41523: EQUAL
41524: IFTRUE 41528
41526: GO 41546
41528: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41529: LD_ADDR_VAR 0 3
41533: PUSH
41534: LD_INT 23
41536: PUSH
41537: LD_INT 24
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: ST_TO_ADDR
41544: GO 41573
41546: LD_INT 47
41548: DOUBLE
41549: EQUAL
41550: IFTRUE 41554
41552: GO 41572
41554: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41555: LD_ADDR_VAR 0 3
41559: PUSH
41560: LD_INT 23
41562: PUSH
41563: LD_INT 24
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: ST_TO_ADDR
41570: GO 41573
41572: POP
// result := ( chassis in result ) ;
41573: LD_ADDR_VAR 0 3
41577: PUSH
41578: LD_VAR 0 1
41582: PUSH
41583: LD_VAR 0 3
41587: IN
41588: ST_TO_ADDR
// end ;
41589: LD_VAR 0 3
41593: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41594: LD_INT 0
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
// result := array ;
41603: LD_ADDR_VAR 0 5
41607: PUSH
41608: LD_VAR 0 1
41612: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41613: LD_VAR 0 1
41617: NOT
41618: PUSH
41619: LD_VAR 0 2
41623: NOT
41624: OR
41625: PUSH
41626: LD_VAR 0 3
41630: NOT
41631: OR
41632: PUSH
41633: LD_VAR 0 2
41637: PUSH
41638: LD_VAR 0 1
41642: GREATER
41643: OR
41644: PUSH
41645: LD_VAR 0 3
41649: PUSH
41650: LD_VAR 0 1
41654: GREATER
41655: OR
41656: IFFALSE 41660
// exit ;
41658: GO 41956
// if direction then
41660: LD_VAR 0 4
41664: IFFALSE 41728
// begin d := 1 ;
41666: LD_ADDR_VAR 0 9
41670: PUSH
41671: LD_INT 1
41673: ST_TO_ADDR
// if i_from > i_to then
41674: LD_VAR 0 2
41678: PUSH
41679: LD_VAR 0 3
41683: GREATER
41684: IFFALSE 41710
// length := ( array - i_from ) + i_to else
41686: LD_ADDR_VAR 0 11
41690: PUSH
41691: LD_VAR 0 1
41695: PUSH
41696: LD_VAR 0 2
41700: MINUS
41701: PUSH
41702: LD_VAR 0 3
41706: PLUS
41707: ST_TO_ADDR
41708: GO 41726
// length := i_to - i_from ;
41710: LD_ADDR_VAR 0 11
41714: PUSH
41715: LD_VAR 0 3
41719: PUSH
41720: LD_VAR 0 2
41724: MINUS
41725: ST_TO_ADDR
// end else
41726: GO 41789
// begin d := - 1 ;
41728: LD_ADDR_VAR 0 9
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: ST_TO_ADDR
// if i_from > i_to then
41737: LD_VAR 0 2
41741: PUSH
41742: LD_VAR 0 3
41746: GREATER
41747: IFFALSE 41767
// length := i_from - i_to else
41749: LD_ADDR_VAR 0 11
41753: PUSH
41754: LD_VAR 0 2
41758: PUSH
41759: LD_VAR 0 3
41763: MINUS
41764: ST_TO_ADDR
41765: GO 41789
// length := ( array - i_to ) + i_from ;
41767: LD_ADDR_VAR 0 11
41771: PUSH
41772: LD_VAR 0 1
41776: PUSH
41777: LD_VAR 0 3
41781: MINUS
41782: PUSH
41783: LD_VAR 0 2
41787: PLUS
41788: ST_TO_ADDR
// end ; if not length then
41789: LD_VAR 0 11
41793: NOT
41794: IFFALSE 41798
// exit ;
41796: GO 41956
// tmp := array ;
41798: LD_ADDR_VAR 0 10
41802: PUSH
41803: LD_VAR 0 1
41807: ST_TO_ADDR
// for i = 1 to length do
41808: LD_ADDR_VAR 0 6
41812: PUSH
41813: DOUBLE
41814: LD_INT 1
41816: DEC
41817: ST_TO_ADDR
41818: LD_VAR 0 11
41822: PUSH
41823: FOR_TO
41824: IFFALSE 41944
// begin for j = 1 to array do
41826: LD_ADDR_VAR 0 7
41830: PUSH
41831: DOUBLE
41832: LD_INT 1
41834: DEC
41835: ST_TO_ADDR
41836: LD_VAR 0 1
41840: PUSH
41841: FOR_TO
41842: IFFALSE 41930
// begin k := j + d ;
41844: LD_ADDR_VAR 0 8
41848: PUSH
41849: LD_VAR 0 7
41853: PUSH
41854: LD_VAR 0 9
41858: PLUS
41859: ST_TO_ADDR
// if k > array then
41860: LD_VAR 0 8
41864: PUSH
41865: LD_VAR 0 1
41869: GREATER
41870: IFFALSE 41880
// k := 1 ;
41872: LD_ADDR_VAR 0 8
41876: PUSH
41877: LD_INT 1
41879: ST_TO_ADDR
// if not k then
41880: LD_VAR 0 8
41884: NOT
41885: IFFALSE 41897
// k := array ;
41887: LD_ADDR_VAR 0 8
41891: PUSH
41892: LD_VAR 0 1
41896: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41897: LD_ADDR_VAR 0 10
41901: PUSH
41902: LD_VAR 0 10
41906: PPUSH
41907: LD_VAR 0 8
41911: PPUSH
41912: LD_VAR 0 1
41916: PUSH
41917: LD_VAR 0 7
41921: ARRAY
41922: PPUSH
41923: CALL_OW 1
41927: ST_TO_ADDR
// end ;
41928: GO 41841
41930: POP
41931: POP
// array := tmp ;
41932: LD_ADDR_VAR 0 1
41936: PUSH
41937: LD_VAR 0 10
41941: ST_TO_ADDR
// end ;
41942: GO 41823
41944: POP
41945: POP
// result := array ;
41946: LD_ADDR_VAR 0 5
41950: PUSH
41951: LD_VAR 0 1
41955: ST_TO_ADDR
// end ;
41956: LD_VAR 0 5
41960: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
// result := 0 ;
41965: LD_ADDR_VAR 0 3
41969: PUSH
41970: LD_INT 0
41972: ST_TO_ADDR
// if not array or not value in array then
41973: LD_VAR 0 1
41977: NOT
41978: PUSH
41979: LD_VAR 0 2
41983: PUSH
41984: LD_VAR 0 1
41988: IN
41989: NOT
41990: OR
41991: IFFALSE 41995
// exit ;
41993: GO 42049
// for i = 1 to array do
41995: LD_ADDR_VAR 0 4
41999: PUSH
42000: DOUBLE
42001: LD_INT 1
42003: DEC
42004: ST_TO_ADDR
42005: LD_VAR 0 1
42009: PUSH
42010: FOR_TO
42011: IFFALSE 42047
// if value = array [ i ] then
42013: LD_VAR 0 2
42017: PUSH
42018: LD_VAR 0 1
42022: PUSH
42023: LD_VAR 0 4
42027: ARRAY
42028: EQUAL
42029: IFFALSE 42045
// begin result := i ;
42031: LD_ADDR_VAR 0 3
42035: PUSH
42036: LD_VAR 0 4
42040: ST_TO_ADDR
// exit ;
42041: POP
42042: POP
42043: GO 42049
// end ;
42045: GO 42010
42047: POP
42048: POP
// end ;
42049: LD_VAR 0 3
42053: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42054: LD_INT 0
42056: PPUSH
// vc_chassis := chassis ;
42057: LD_ADDR_OWVAR 37
42061: PUSH
42062: LD_VAR 0 1
42066: ST_TO_ADDR
// vc_engine := engine ;
42067: LD_ADDR_OWVAR 39
42071: PUSH
42072: LD_VAR 0 2
42076: ST_TO_ADDR
// vc_control := control ;
42077: LD_ADDR_OWVAR 38
42081: PUSH
42082: LD_VAR 0 3
42086: ST_TO_ADDR
// vc_weapon := weapon ;
42087: LD_ADDR_OWVAR 40
42091: PUSH
42092: LD_VAR 0 4
42096: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42097: LD_ADDR_OWVAR 41
42101: PUSH
42102: LD_VAR 0 5
42106: ST_TO_ADDR
// end ;
42107: LD_VAR 0 6
42111: RET
// export function WantPlant ( unit ) ; var task ; begin
42112: LD_INT 0
42114: PPUSH
42115: PPUSH
// result := false ;
42116: LD_ADDR_VAR 0 2
42120: PUSH
42121: LD_INT 0
42123: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_VAR 0 1
42133: PPUSH
42134: CALL_OW 437
42138: ST_TO_ADDR
// if task then
42139: LD_VAR 0 3
42143: IFFALSE 42171
// if task [ 1 ] [ 1 ] = p then
42145: LD_VAR 0 3
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: PUSH
42154: LD_INT 1
42156: ARRAY
42157: PUSH
42158: LD_STRING p
42160: EQUAL
42161: IFFALSE 42171
// result := true ;
42163: LD_ADDR_VAR 0 2
42167: PUSH
42168: LD_INT 1
42170: ST_TO_ADDR
// end ;
42171: LD_VAR 0 2
42175: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42176: LD_INT 0
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
// if pos < 1 then
42182: LD_VAR 0 2
42186: PUSH
42187: LD_INT 1
42189: LESS
42190: IFFALSE 42194
// exit ;
42192: GO 42497
// if pos = 1 then
42194: LD_VAR 0 2
42198: PUSH
42199: LD_INT 1
42201: EQUAL
42202: IFFALSE 42235
// result := Replace ( arr , pos [ 1 ] , value ) else
42204: LD_ADDR_VAR 0 4
42208: PUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: LD_VAR 0 2
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: PPUSH
42223: LD_VAR 0 3
42227: PPUSH
42228: CALL_OW 1
42232: ST_TO_ADDR
42233: GO 42497
// begin tmp := arr ;
42235: LD_ADDR_VAR 0 6
42239: PUSH
42240: LD_VAR 0 1
42244: ST_TO_ADDR
// s_arr := [ tmp ] ;
42245: LD_ADDR_VAR 0 7
42249: PUSH
42250: LD_VAR 0 6
42254: PUSH
42255: EMPTY
42256: LIST
42257: ST_TO_ADDR
// for i = 1 to pos - 1 do
42258: LD_ADDR_VAR 0 5
42262: PUSH
42263: DOUBLE
42264: LD_INT 1
42266: DEC
42267: ST_TO_ADDR
42268: LD_VAR 0 2
42272: PUSH
42273: LD_INT 1
42275: MINUS
42276: PUSH
42277: FOR_TO
42278: IFFALSE 42323
// begin tmp := tmp [ pos [ i ] ] ;
42280: LD_ADDR_VAR 0 6
42284: PUSH
42285: LD_VAR 0 6
42289: PUSH
42290: LD_VAR 0 2
42294: PUSH
42295: LD_VAR 0 5
42299: ARRAY
42300: ARRAY
42301: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42302: LD_ADDR_VAR 0 7
42306: PUSH
42307: LD_VAR 0 7
42311: PUSH
42312: LD_VAR 0 6
42316: PUSH
42317: EMPTY
42318: LIST
42319: ADD
42320: ST_TO_ADDR
// end ;
42321: GO 42277
42323: POP
42324: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42325: LD_ADDR_VAR 0 6
42329: PUSH
42330: LD_VAR 0 6
42334: PPUSH
42335: LD_VAR 0 2
42339: PUSH
42340: LD_VAR 0 2
42344: ARRAY
42345: PPUSH
42346: LD_VAR 0 3
42350: PPUSH
42351: CALL_OW 1
42355: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42356: LD_ADDR_VAR 0 7
42360: PUSH
42361: LD_VAR 0 7
42365: PPUSH
42366: LD_VAR 0 7
42370: PPUSH
42371: LD_VAR 0 6
42375: PPUSH
42376: CALL_OW 1
42380: ST_TO_ADDR
// for i = s_arr downto 2 do
42381: LD_ADDR_VAR 0 5
42385: PUSH
42386: DOUBLE
42387: LD_VAR 0 7
42391: INC
42392: ST_TO_ADDR
42393: LD_INT 2
42395: PUSH
42396: FOR_DOWNTO
42397: IFFALSE 42481
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42399: LD_ADDR_VAR 0 6
42403: PUSH
42404: LD_VAR 0 7
42408: PUSH
42409: LD_VAR 0 5
42413: PUSH
42414: LD_INT 1
42416: MINUS
42417: ARRAY
42418: PPUSH
42419: LD_VAR 0 2
42423: PUSH
42424: LD_VAR 0 5
42428: PUSH
42429: LD_INT 1
42431: MINUS
42432: ARRAY
42433: PPUSH
42434: LD_VAR 0 7
42438: PUSH
42439: LD_VAR 0 5
42443: ARRAY
42444: PPUSH
42445: CALL_OW 1
42449: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42450: LD_ADDR_VAR 0 7
42454: PUSH
42455: LD_VAR 0 7
42459: PPUSH
42460: LD_VAR 0 5
42464: PUSH
42465: LD_INT 1
42467: MINUS
42468: PPUSH
42469: LD_VAR 0 6
42473: PPUSH
42474: CALL_OW 1
42478: ST_TO_ADDR
// end ;
42479: GO 42396
42481: POP
42482: POP
// result := s_arr [ 1 ] ;
42483: LD_ADDR_VAR 0 4
42487: PUSH
42488: LD_VAR 0 7
42492: PUSH
42493: LD_INT 1
42495: ARRAY
42496: ST_TO_ADDR
// end ; end ;
42497: LD_VAR 0 4
42501: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42502: LD_INT 0
42504: PPUSH
42505: PPUSH
// if not list then
42506: LD_VAR 0 1
42510: NOT
42511: IFFALSE 42515
// exit ;
42513: GO 42606
// i := list [ pos1 ] ;
42515: LD_ADDR_VAR 0 5
42519: PUSH
42520: LD_VAR 0 1
42524: PUSH
42525: LD_VAR 0 2
42529: ARRAY
42530: ST_TO_ADDR
// if not i then
42531: LD_VAR 0 5
42535: NOT
42536: IFFALSE 42540
// exit ;
42538: GO 42606
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42540: LD_ADDR_VAR 0 1
42544: PUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: LD_VAR 0 2
42554: PPUSH
42555: LD_VAR 0 1
42559: PUSH
42560: LD_VAR 0 3
42564: ARRAY
42565: PPUSH
42566: CALL_OW 1
42570: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42571: LD_ADDR_VAR 0 1
42575: PUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: LD_VAR 0 3
42585: PPUSH
42586: LD_VAR 0 5
42590: PPUSH
42591: CALL_OW 1
42595: ST_TO_ADDR
// result := list ;
42596: LD_ADDR_VAR 0 4
42600: PUSH
42601: LD_VAR 0 1
42605: ST_TO_ADDR
// end ;
42606: LD_VAR 0 4
42610: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42611: LD_INT 0
42613: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42614: LD_ADDR_VAR 0 5
42618: PUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 250
42628: PPUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 251
42638: PPUSH
42639: LD_VAR 0 2
42643: PPUSH
42644: LD_VAR 0 3
42648: PPUSH
42649: LD_VAR 0 4
42653: PPUSH
42654: CALL 43032 0 5
42658: ST_TO_ADDR
// end ;
42659: LD_VAR 0 5
42663: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
42664: LD_INT 0
42666: PPUSH
42667: PPUSH
42668: PPUSH
42669: PPUSH
// if not list or not unit then
42670: LD_VAR 0 2
42674: NOT
42675: PUSH
42676: LD_VAR 0 1
42680: NOT
42681: OR
42682: IFFALSE 42686
// exit ;
42684: GO 43027
// result := [ ] ;
42686: LD_ADDR_VAR 0 5
42690: PUSH
42691: EMPTY
42692: ST_TO_ADDR
// for i in list do
42693: LD_ADDR_VAR 0 6
42697: PUSH
42698: LD_VAR 0 2
42702: PUSH
42703: FOR_IN
42704: IFFALSE 42922
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42706: LD_ADDR_VAR 0 8
42710: PUSH
42711: LD_VAR 0 1
42715: PPUSH
42716: LD_VAR 0 6
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: PPUSH
42725: LD_VAR 0 6
42729: PUSH
42730: LD_INT 2
42732: ARRAY
42733: PPUSH
42734: CALL_OW 297
42738: ST_TO_ADDR
// if not Count ( result ) then
42739: LD_VAR 0 5
42743: PPUSH
42744: CALL 39316 0 1
42748: NOT
42749: IFFALSE 42782
// begin result := Join ( result , [ i , tmp ] ) ;
42751: LD_ADDR_VAR 0 5
42755: PUSH
42756: LD_VAR 0 5
42760: PPUSH
42761: LD_VAR 0 6
42765: PUSH
42766: LD_VAR 0 8
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PPUSH
42775: CALL 74916 0 2
42779: ST_TO_ADDR
// continue ;
42780: GO 42703
// end ; if result [ result ] [ 2 ] <= tmp then
42782: LD_VAR 0 5
42786: PUSH
42787: LD_VAR 0 5
42791: ARRAY
42792: PUSH
42793: LD_INT 2
42795: ARRAY
42796: PUSH
42797: LD_VAR 0 8
42801: LESSEQUAL
42802: IFFALSE 42835
// result := Join ( result , [ i , tmp ] ) else
42804: LD_ADDR_VAR 0 5
42808: PUSH
42809: LD_VAR 0 5
42813: PPUSH
42814: LD_VAR 0 6
42818: PUSH
42819: LD_VAR 0 8
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PPUSH
42828: CALL 74916 0 2
42832: ST_TO_ADDR
42833: GO 42920
// begin for j := 1 to Count ( result ) do
42835: LD_ADDR_VAR 0 7
42839: PUSH
42840: DOUBLE
42841: LD_INT 1
42843: DEC
42844: ST_TO_ADDR
42845: LD_VAR 0 5
42849: PPUSH
42850: CALL 39316 0 1
42854: PUSH
42855: FOR_TO
42856: IFFALSE 42918
// begin if tmp < result [ j ] [ 2 ] then
42858: LD_VAR 0 8
42862: PUSH
42863: LD_VAR 0 5
42867: PUSH
42868: LD_VAR 0 7
42872: ARRAY
42873: PUSH
42874: LD_INT 2
42876: ARRAY
42877: LESS
42878: IFFALSE 42916
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42880: LD_ADDR_VAR 0 5
42884: PUSH
42885: LD_VAR 0 5
42889: PPUSH
42890: LD_VAR 0 7
42894: PPUSH
42895: LD_VAR 0 6
42899: PUSH
42900: LD_VAR 0 8
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PPUSH
42909: CALL_OW 2
42913: ST_TO_ADDR
// break ;
42914: GO 42918
// end ; end ;
42916: GO 42855
42918: POP
42919: POP
// end ; end ;
42920: GO 42703
42922: POP
42923: POP
// if result and not asc then
42924: LD_VAR 0 5
42928: PUSH
42929: LD_VAR 0 3
42933: NOT
42934: AND
42935: IFFALSE 42952
// result := ReverseArray ( result ) ;
42937: LD_ADDR_VAR 0 5
42941: PUSH
42942: LD_VAR 0 5
42946: PPUSH
42947: CALL 70192 0 1
42951: ST_TO_ADDR
// tmp := [ ] ;
42952: LD_ADDR_VAR 0 8
42956: PUSH
42957: EMPTY
42958: ST_TO_ADDR
// if mode then
42959: LD_VAR 0 4
42963: IFFALSE 43027
// begin for i := 1 to result do
42965: LD_ADDR_VAR 0 6
42969: PUSH
42970: DOUBLE
42971: LD_INT 1
42973: DEC
42974: ST_TO_ADDR
42975: LD_VAR 0 5
42979: PUSH
42980: FOR_TO
42981: IFFALSE 43015
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42983: LD_ADDR_VAR 0 8
42987: PUSH
42988: LD_VAR 0 8
42992: PPUSH
42993: LD_VAR 0 5
42997: PUSH
42998: LD_VAR 0 6
43002: ARRAY
43003: PUSH
43004: LD_INT 1
43006: ARRAY
43007: PPUSH
43008: CALL 74916 0 2
43012: ST_TO_ADDR
43013: GO 42980
43015: POP
43016: POP
// result := tmp ;
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: LD_VAR 0 8
43026: ST_TO_ADDR
// end ; end ;
43027: LD_VAR 0 5
43031: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43032: LD_INT 0
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
// if not list then
43038: LD_VAR 0 3
43042: NOT
43043: IFFALSE 43047
// exit ;
43045: GO 43435
// result := [ ] ;
43047: LD_ADDR_VAR 0 6
43051: PUSH
43052: EMPTY
43053: ST_TO_ADDR
// for i in list do
43054: LD_ADDR_VAR 0 7
43058: PUSH
43059: LD_VAR 0 3
43063: PUSH
43064: FOR_IN
43065: IFFALSE 43267
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43067: LD_ADDR_VAR 0 9
43071: PUSH
43072: LD_VAR 0 7
43076: PPUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: LD_VAR 0 2
43086: PPUSH
43087: CALL_OW 297
43091: ST_TO_ADDR
// if not result then
43092: LD_VAR 0 6
43096: NOT
43097: IFFALSE 43123
// result := [ [ i , tmp ] ] else
43099: LD_ADDR_VAR 0 6
43103: PUSH
43104: LD_VAR 0 7
43108: PUSH
43109: LD_VAR 0 9
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: ST_TO_ADDR
43121: GO 43265
// begin if result [ result ] [ 2 ] < tmp then
43123: LD_VAR 0 6
43127: PUSH
43128: LD_VAR 0 6
43132: ARRAY
43133: PUSH
43134: LD_INT 2
43136: ARRAY
43137: PUSH
43138: LD_VAR 0 9
43142: LESS
43143: IFFALSE 43185
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43145: LD_ADDR_VAR 0 6
43149: PUSH
43150: LD_VAR 0 6
43154: PPUSH
43155: LD_VAR 0 6
43159: PUSH
43160: LD_INT 1
43162: PLUS
43163: PPUSH
43164: LD_VAR 0 7
43168: PUSH
43169: LD_VAR 0 9
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PPUSH
43178: CALL_OW 2
43182: ST_TO_ADDR
43183: GO 43265
// for j = 1 to result do
43185: LD_ADDR_VAR 0 8
43189: PUSH
43190: DOUBLE
43191: LD_INT 1
43193: DEC
43194: ST_TO_ADDR
43195: LD_VAR 0 6
43199: PUSH
43200: FOR_TO
43201: IFFALSE 43263
// begin if tmp < result [ j ] [ 2 ] then
43203: LD_VAR 0 9
43207: PUSH
43208: LD_VAR 0 6
43212: PUSH
43213: LD_VAR 0 8
43217: ARRAY
43218: PUSH
43219: LD_INT 2
43221: ARRAY
43222: LESS
43223: IFFALSE 43261
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43225: LD_ADDR_VAR 0 6
43229: PUSH
43230: LD_VAR 0 6
43234: PPUSH
43235: LD_VAR 0 8
43239: PPUSH
43240: LD_VAR 0 7
43244: PUSH
43245: LD_VAR 0 9
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PPUSH
43254: CALL_OW 2
43258: ST_TO_ADDR
// break ;
43259: GO 43263
// end ; end ;
43261: GO 43200
43263: POP
43264: POP
// end ; end ;
43265: GO 43064
43267: POP
43268: POP
// if result and not asc then
43269: LD_VAR 0 6
43273: PUSH
43274: LD_VAR 0 4
43278: NOT
43279: AND
43280: IFFALSE 43355
// begin tmp := result ;
43282: LD_ADDR_VAR 0 9
43286: PUSH
43287: LD_VAR 0 6
43291: ST_TO_ADDR
// for i = tmp downto 1 do
43292: LD_ADDR_VAR 0 7
43296: PUSH
43297: DOUBLE
43298: LD_VAR 0 9
43302: INC
43303: ST_TO_ADDR
43304: LD_INT 1
43306: PUSH
43307: FOR_DOWNTO
43308: IFFALSE 43353
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43310: LD_ADDR_VAR 0 6
43314: PUSH
43315: LD_VAR 0 6
43319: PPUSH
43320: LD_VAR 0 9
43324: PUSH
43325: LD_VAR 0 7
43329: MINUS
43330: PUSH
43331: LD_INT 1
43333: PLUS
43334: PPUSH
43335: LD_VAR 0 9
43339: PUSH
43340: LD_VAR 0 7
43344: ARRAY
43345: PPUSH
43346: CALL_OW 1
43350: ST_TO_ADDR
43351: GO 43307
43353: POP
43354: POP
// end ; tmp := [ ] ;
43355: LD_ADDR_VAR 0 9
43359: PUSH
43360: EMPTY
43361: ST_TO_ADDR
// if mode then
43362: LD_VAR 0 5
43366: IFFALSE 43435
// begin for i = 1 to result do
43368: LD_ADDR_VAR 0 7
43372: PUSH
43373: DOUBLE
43374: LD_INT 1
43376: DEC
43377: ST_TO_ADDR
43378: LD_VAR 0 6
43382: PUSH
43383: FOR_TO
43384: IFFALSE 43423
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43386: LD_ADDR_VAR 0 9
43390: PUSH
43391: LD_VAR 0 9
43395: PPUSH
43396: LD_VAR 0 7
43400: PPUSH
43401: LD_VAR 0 6
43405: PUSH
43406: LD_VAR 0 7
43410: ARRAY
43411: PUSH
43412: LD_INT 1
43414: ARRAY
43415: PPUSH
43416: CALL_OW 1
43420: ST_TO_ADDR
43421: GO 43383
43423: POP
43424: POP
// result := tmp ;
43425: LD_ADDR_VAR 0 6
43429: PUSH
43430: LD_VAR 0 9
43434: ST_TO_ADDR
// end ; end ;
43435: LD_VAR 0 6
43439: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43440: LD_INT 0
43442: PPUSH
43443: PPUSH
43444: PPUSH
43445: PPUSH
43446: PPUSH
43447: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43448: LD_ADDR_VAR 0 5
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: EMPTY
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
// if not x or not y then
43470: LD_VAR 0 2
43474: NOT
43475: PUSH
43476: LD_VAR 0 3
43480: NOT
43481: OR
43482: IFFALSE 43486
// exit ;
43484: GO 45136
// if not range then
43486: LD_VAR 0 4
43490: NOT
43491: IFFALSE 43501
// range := 10 ;
43493: LD_ADDR_VAR 0 4
43497: PUSH
43498: LD_INT 10
43500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43501: LD_ADDR_VAR 0 8
43505: PUSH
43506: LD_INT 81
43508: PUSH
43509: LD_VAR 0 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 92
43520: PUSH
43521: LD_VAR 0 2
43525: PUSH
43526: LD_VAR 0 3
43530: PUSH
43531: LD_VAR 0 4
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: LD_INT 21
43547: PUSH
43548: LD_INT 3
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: PPUSH
43564: CALL_OW 69
43568: ST_TO_ADDR
// if not tmp then
43569: LD_VAR 0 8
43573: NOT
43574: IFFALSE 43578
// exit ;
43576: GO 45136
// for i in tmp do
43578: LD_ADDR_VAR 0 6
43582: PUSH
43583: LD_VAR 0 8
43587: PUSH
43588: FOR_IN
43589: IFFALSE 45111
// begin points := [ 0 , 0 , 0 ] ;
43591: LD_ADDR_VAR 0 9
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// bpoints := 1 ;
43610: LD_ADDR_VAR 0 10
43614: PUSH
43615: LD_INT 1
43617: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43618: LD_VAR 0 6
43622: PPUSH
43623: CALL_OW 247
43627: PUSH
43628: LD_INT 1
43630: DOUBLE
43631: EQUAL
43632: IFTRUE 43636
43634: GO 44214
43636: POP
// begin if GetClass ( i ) = 1 then
43637: LD_VAR 0 6
43641: PPUSH
43642: CALL_OW 257
43646: PUSH
43647: LD_INT 1
43649: EQUAL
43650: IFFALSE 43671
// points := [ 10 , 5 , 3 ] ;
43652: LD_ADDR_VAR 0 9
43656: PUSH
43657: LD_INT 10
43659: PUSH
43660: LD_INT 5
43662: PUSH
43663: LD_INT 3
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43671: LD_VAR 0 6
43675: PPUSH
43676: CALL_OW 257
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: LD_INT 4
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: IN
43695: IFFALSE 43716
// points := [ 3 , 2 , 1 ] ;
43697: LD_ADDR_VAR 0 9
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43716: LD_VAR 0 6
43720: PPUSH
43721: CALL_OW 257
43725: PUSH
43726: LD_INT 5
43728: EQUAL
43729: IFFALSE 43750
// points := [ 130 , 5 , 2 ] ;
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_INT 130
43738: PUSH
43739: LD_INT 5
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43750: LD_VAR 0 6
43754: PPUSH
43755: CALL_OW 257
43759: PUSH
43760: LD_INT 8
43762: EQUAL
43763: IFFALSE 43784
// points := [ 35 , 35 , 30 ] ;
43765: LD_ADDR_VAR 0 9
43769: PUSH
43770: LD_INT 35
43772: PUSH
43773: LD_INT 35
43775: PUSH
43776: LD_INT 30
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43784: LD_VAR 0 6
43788: PPUSH
43789: CALL_OW 257
43793: PUSH
43794: LD_INT 9
43796: EQUAL
43797: IFFALSE 43818
// points := [ 20 , 55 , 40 ] ;
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_INT 20
43806: PUSH
43807: LD_INT 55
43809: PUSH
43810: LD_INT 40
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43818: LD_VAR 0 6
43822: PPUSH
43823: CALL_OW 257
43827: PUSH
43828: LD_INT 12
43830: PUSH
43831: LD_INT 16
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: IN
43838: IFFALSE 43859
// points := [ 5 , 3 , 2 ] ;
43840: LD_ADDR_VAR 0 9
43844: PUSH
43845: LD_INT 5
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43859: LD_VAR 0 6
43863: PPUSH
43864: CALL_OW 257
43868: PUSH
43869: LD_INT 17
43871: EQUAL
43872: IFFALSE 43893
// points := [ 100 , 50 , 75 ] ;
43874: LD_ADDR_VAR 0 9
43878: PUSH
43879: LD_INT 100
43881: PUSH
43882: LD_INT 50
43884: PUSH
43885: LD_INT 75
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43893: LD_VAR 0 6
43897: PPUSH
43898: CALL_OW 257
43902: PUSH
43903: LD_INT 15
43905: EQUAL
43906: IFFALSE 43927
// points := [ 10 , 5 , 3 ] ;
43908: LD_ADDR_VAR 0 9
43912: PUSH
43913: LD_INT 10
43915: PUSH
43916: LD_INT 5
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43927: LD_VAR 0 6
43931: PPUSH
43932: CALL_OW 257
43936: PUSH
43937: LD_INT 14
43939: EQUAL
43940: IFFALSE 43961
// points := [ 10 , 0 , 0 ] ;
43942: LD_ADDR_VAR 0 9
43946: PUSH
43947: LD_INT 10
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43961: LD_VAR 0 6
43965: PPUSH
43966: CALL_OW 257
43970: PUSH
43971: LD_INT 11
43973: EQUAL
43974: IFFALSE 43995
// points := [ 30 , 10 , 5 ] ;
43976: LD_ADDR_VAR 0 9
43980: PUSH
43981: LD_INT 30
43983: PUSH
43984: LD_INT 10
43986: PUSH
43987: LD_INT 5
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43995: LD_VAR 0 1
43999: PPUSH
44000: LD_INT 5
44002: PPUSH
44003: CALL_OW 321
44007: PUSH
44008: LD_INT 2
44010: EQUAL
44011: IFFALSE 44028
// bpoints := bpoints * 1.8 ;
44013: LD_ADDR_VAR 0 10
44017: PUSH
44018: LD_VAR 0 10
44022: PUSH
44023: LD_REAL  1.80000000000000E+0000
44026: MUL
44027: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44028: LD_VAR 0 6
44032: PPUSH
44033: CALL_OW 257
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 3
44046: PUSH
44047: LD_INT 4
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: IN
44056: PUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: LD_INT 51
44064: PPUSH
44065: CALL_OW 321
44069: PUSH
44070: LD_INT 2
44072: EQUAL
44073: AND
44074: IFFALSE 44091
// bpoints := bpoints * 1.2 ;
44076: LD_ADDR_VAR 0 10
44080: PUSH
44081: LD_VAR 0 10
44085: PUSH
44086: LD_REAL  1.20000000000000E+0000
44089: MUL
44090: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 257
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: LD_INT 7
44106: PUSH
44107: LD_INT 9
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: IN
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: LD_INT 52
44123: PPUSH
44124: CALL_OW 321
44128: PUSH
44129: LD_INT 2
44131: EQUAL
44132: AND
44133: IFFALSE 44150
// bpoints := bpoints * 1.5 ;
44135: LD_ADDR_VAR 0 10
44139: PUSH
44140: LD_VAR 0 10
44144: PUSH
44145: LD_REAL  1.50000000000000E+0000
44148: MUL
44149: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44150: LD_VAR 0 1
44154: PPUSH
44155: LD_INT 66
44157: PPUSH
44158: CALL_OW 321
44162: PUSH
44163: LD_INT 2
44165: EQUAL
44166: IFFALSE 44183
// bpoints := bpoints * 1.1 ;
44168: LD_ADDR_VAR 0 10
44172: PUSH
44173: LD_VAR 0 10
44177: PUSH
44178: LD_REAL  1.10000000000000E+0000
44181: MUL
44182: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44183: LD_ADDR_VAR 0 10
44187: PUSH
44188: LD_VAR 0 10
44192: PUSH
44193: LD_VAR 0 6
44197: PPUSH
44198: LD_INT 1
44200: PPUSH
44201: CALL_OW 259
44205: PUSH
44206: LD_REAL  1.15000000000000E+0000
44209: MUL
44210: MUL
44211: ST_TO_ADDR
// end ; unit_vehicle :
44212: GO 45040
44214: LD_INT 2
44216: DOUBLE
44217: EQUAL
44218: IFTRUE 44222
44220: GO 45028
44222: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44223: LD_VAR 0 6
44227: PPUSH
44228: CALL_OW 264
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 42
44238: PUSH
44239: LD_INT 24
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: IN
44247: IFFALSE 44268
// points := [ 25 , 5 , 3 ] ;
44249: LD_ADDR_VAR 0 9
44253: PUSH
44254: LD_INT 25
44256: PUSH
44257: LD_INT 5
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44268: LD_VAR 0 6
44272: PPUSH
44273: CALL_OW 264
44277: PUSH
44278: LD_INT 4
44280: PUSH
44281: LD_INT 43
44283: PUSH
44284: LD_INT 25
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: IN
44292: IFFALSE 44313
// points := [ 40 , 15 , 5 ] ;
44294: LD_ADDR_VAR 0 9
44298: PUSH
44299: LD_INT 40
44301: PUSH
44302: LD_INT 15
44304: PUSH
44305: LD_INT 5
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44313: LD_VAR 0 6
44317: PPUSH
44318: CALL_OW 264
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 23
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: IN
44333: IFFALSE 44354
// points := [ 7 , 25 , 8 ] ;
44335: LD_ADDR_VAR 0 9
44339: PUSH
44340: LD_INT 7
44342: PUSH
44343: LD_INT 25
44345: PUSH
44346: LD_INT 8
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44354: LD_VAR 0 6
44358: PPUSH
44359: CALL_OW 264
44363: PUSH
44364: LD_INT 5
44366: PUSH
44367: LD_INT 27
44369: PUSH
44370: LD_INT 44
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: IN
44378: IFFALSE 44399
// points := [ 14 , 50 , 16 ] ;
44380: LD_ADDR_VAR 0 9
44384: PUSH
44385: LD_INT 14
44387: PUSH
44388: LD_INT 50
44390: PUSH
44391: LD_INT 16
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44399: LD_VAR 0 6
44403: PPUSH
44404: CALL_OW 264
44408: PUSH
44409: LD_INT 6
44411: PUSH
44412: LD_INT 46
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: IN
44419: IFFALSE 44440
// points := [ 32 , 120 , 70 ] ;
44421: LD_ADDR_VAR 0 9
44425: PUSH
44426: LD_INT 32
44428: PUSH
44429: LD_INT 120
44431: PUSH
44432: LD_INT 70
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44440: LD_VAR 0 6
44444: PPUSH
44445: CALL_OW 264
44449: PUSH
44450: LD_INT 7
44452: PUSH
44453: LD_INT 28
44455: PUSH
44456: LD_INT 45
44458: PUSH
44459: LD_INT 92
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: IN
44468: IFFALSE 44489
// points := [ 35 , 20 , 45 ] ;
44470: LD_ADDR_VAR 0 9
44474: PUSH
44475: LD_INT 35
44477: PUSH
44478: LD_INT 20
44480: PUSH
44481: LD_INT 45
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44489: LD_VAR 0 6
44493: PPUSH
44494: CALL_OW 264
44498: PUSH
44499: LD_INT 47
44501: PUSH
44502: EMPTY
44503: LIST
44504: IN
44505: IFFALSE 44526
// points := [ 67 , 45 , 75 ] ;
44507: LD_ADDR_VAR 0 9
44511: PUSH
44512: LD_INT 67
44514: PUSH
44515: LD_INT 45
44517: PUSH
44518: LD_INT 75
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44526: LD_VAR 0 6
44530: PPUSH
44531: CALL_OW 264
44535: PUSH
44536: LD_INT 26
44538: PUSH
44539: EMPTY
44540: LIST
44541: IN
44542: IFFALSE 44563
// points := [ 120 , 30 , 80 ] ;
44544: LD_ADDR_VAR 0 9
44548: PUSH
44549: LD_INT 120
44551: PUSH
44552: LD_INT 30
44554: PUSH
44555: LD_INT 80
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44563: LD_VAR 0 6
44567: PPUSH
44568: CALL_OW 264
44572: PUSH
44573: LD_INT 22
44575: PUSH
44576: EMPTY
44577: LIST
44578: IN
44579: IFFALSE 44600
// points := [ 40 , 1 , 1 ] ;
44581: LD_ADDR_VAR 0 9
44585: PUSH
44586: LD_INT 40
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44600: LD_VAR 0 6
44604: PPUSH
44605: CALL_OW 264
44609: PUSH
44610: LD_INT 29
44612: PUSH
44613: EMPTY
44614: LIST
44615: IN
44616: IFFALSE 44637
// points := [ 70 , 200 , 400 ] ;
44618: LD_ADDR_VAR 0 9
44622: PUSH
44623: LD_INT 70
44625: PUSH
44626: LD_INT 200
44628: PUSH
44629: LD_INT 400
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: LIST
44636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44637: LD_VAR 0 6
44641: PPUSH
44642: CALL_OW 264
44646: PUSH
44647: LD_INT 14
44649: PUSH
44650: LD_INT 53
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: IN
44657: IFFALSE 44678
// points := [ 40 , 10 , 20 ] ;
44659: LD_ADDR_VAR 0 9
44663: PUSH
44664: LD_INT 40
44666: PUSH
44667: LD_INT 10
44669: PUSH
44670: LD_INT 20
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44678: LD_VAR 0 6
44682: PPUSH
44683: CALL_OW 264
44687: PUSH
44688: LD_INT 9
44690: PUSH
44691: EMPTY
44692: LIST
44693: IN
44694: IFFALSE 44715
// points := [ 5 , 70 , 20 ] ;
44696: LD_ADDR_VAR 0 9
44700: PUSH
44701: LD_INT 5
44703: PUSH
44704: LD_INT 70
44706: PUSH
44707: LD_INT 20
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44715: LD_VAR 0 6
44719: PPUSH
44720: CALL_OW 264
44724: PUSH
44725: LD_INT 10
44727: PUSH
44728: EMPTY
44729: LIST
44730: IN
44731: IFFALSE 44752
// points := [ 35 , 110 , 70 ] ;
44733: LD_ADDR_VAR 0 9
44737: PUSH
44738: LD_INT 35
44740: PUSH
44741: LD_INT 110
44743: PUSH
44744: LD_INT 70
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44752: LD_VAR 0 6
44756: PPUSH
44757: CALL_OW 265
44761: PUSH
44762: LD_INT 25
44764: EQUAL
44765: IFFALSE 44786
// points := [ 80 , 65 , 100 ] ;
44767: LD_ADDR_VAR 0 9
44771: PUSH
44772: LD_INT 80
44774: PUSH
44775: LD_INT 65
44777: PUSH
44778: LD_INT 100
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44786: LD_VAR 0 6
44790: PPUSH
44791: CALL_OW 263
44795: PUSH
44796: LD_INT 1
44798: EQUAL
44799: IFFALSE 44834
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44801: LD_ADDR_VAR 0 10
44805: PUSH
44806: LD_VAR 0 10
44810: PUSH
44811: LD_VAR 0 6
44815: PPUSH
44816: CALL_OW 311
44820: PPUSH
44821: LD_INT 3
44823: PPUSH
44824: CALL_OW 259
44828: PUSH
44829: LD_INT 4
44831: MUL
44832: MUL
44833: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44834: LD_VAR 0 6
44838: PPUSH
44839: CALL_OW 263
44843: PUSH
44844: LD_INT 2
44846: EQUAL
44847: IFFALSE 44898
// begin j := IsControledBy ( i ) ;
44849: LD_ADDR_VAR 0 7
44853: PUSH
44854: LD_VAR 0 6
44858: PPUSH
44859: CALL_OW 312
44863: ST_TO_ADDR
// if j then
44864: LD_VAR 0 7
44868: IFFALSE 44898
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44870: LD_ADDR_VAR 0 10
44874: PUSH
44875: LD_VAR 0 10
44879: PUSH
44880: LD_VAR 0 7
44884: PPUSH
44885: LD_INT 3
44887: PPUSH
44888: CALL_OW 259
44892: PUSH
44893: LD_INT 3
44895: MUL
44896: MUL
44897: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44898: LD_VAR 0 6
44902: PPUSH
44903: CALL_OW 264
44907: PUSH
44908: LD_INT 5
44910: PUSH
44911: LD_INT 6
44913: PUSH
44914: LD_INT 46
44916: PUSH
44917: LD_INT 44
44919: PUSH
44920: LD_INT 47
44922: PUSH
44923: LD_INT 45
44925: PUSH
44926: LD_INT 28
44928: PUSH
44929: LD_INT 7
44931: PUSH
44932: LD_INT 27
44934: PUSH
44935: LD_INT 29
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: IN
44950: PUSH
44951: LD_VAR 0 1
44955: PPUSH
44956: LD_INT 52
44958: PPUSH
44959: CALL_OW 321
44963: PUSH
44964: LD_INT 2
44966: EQUAL
44967: AND
44968: IFFALSE 44985
// bpoints := bpoints * 1.2 ;
44970: LD_ADDR_VAR 0 10
44974: PUSH
44975: LD_VAR 0 10
44979: PUSH
44980: LD_REAL  1.20000000000000E+0000
44983: MUL
44984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44985: LD_VAR 0 6
44989: PPUSH
44990: CALL_OW 264
44994: PUSH
44995: LD_INT 6
44997: PUSH
44998: LD_INT 46
45000: PUSH
45001: LD_INT 47
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: IN
45009: IFFALSE 45026
// bpoints := bpoints * 1.2 ;
45011: LD_ADDR_VAR 0 10
45015: PUSH
45016: LD_VAR 0 10
45020: PUSH
45021: LD_REAL  1.20000000000000E+0000
45024: MUL
45025: ST_TO_ADDR
// end ; unit_building :
45026: GO 45040
45028: LD_INT 3
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45036
45034: GO 45039
45036: POP
// ; end ;
45037: GO 45040
45039: POP
// for j = 1 to 3 do
45040: LD_ADDR_VAR 0 7
45044: PUSH
45045: DOUBLE
45046: LD_INT 1
45048: DEC
45049: ST_TO_ADDR
45050: LD_INT 3
45052: PUSH
45053: FOR_TO
45054: IFFALSE 45107
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45056: LD_ADDR_VAR 0 5
45060: PUSH
45061: LD_VAR 0 5
45065: PPUSH
45066: LD_VAR 0 7
45070: PPUSH
45071: LD_VAR 0 5
45075: PUSH
45076: LD_VAR 0 7
45080: ARRAY
45081: PUSH
45082: LD_VAR 0 9
45086: PUSH
45087: LD_VAR 0 7
45091: ARRAY
45092: PUSH
45093: LD_VAR 0 10
45097: MUL
45098: PLUS
45099: PPUSH
45100: CALL_OW 1
45104: ST_TO_ADDR
45105: GO 45053
45107: POP
45108: POP
// end ;
45109: GO 43588
45111: POP
45112: POP
// result := Replace ( result , 4 , tmp ) ;
45113: LD_ADDR_VAR 0 5
45117: PUSH
45118: LD_VAR 0 5
45122: PPUSH
45123: LD_INT 4
45125: PPUSH
45126: LD_VAR 0 8
45130: PPUSH
45131: CALL_OW 1
45135: ST_TO_ADDR
// end ;
45136: LD_VAR 0 5
45140: RET
// export function DangerAtRange ( unit , range ) ; begin
45141: LD_INT 0
45143: PPUSH
// if not unit then
45144: LD_VAR 0 1
45148: NOT
45149: IFFALSE 45153
// exit ;
45151: GO 45198
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: CALL_OW 255
45167: PPUSH
45168: LD_VAR 0 1
45172: PPUSH
45173: CALL_OW 250
45177: PPUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: CALL_OW 251
45187: PPUSH
45188: LD_VAR 0 2
45192: PPUSH
45193: CALL 43440 0 4
45197: ST_TO_ADDR
// end ;
45198: LD_VAR 0 3
45202: RET
// export function DangerInArea ( side , area ) ; begin
45203: LD_INT 0
45205: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45206: LD_ADDR_VAR 0 3
45210: PUSH
45211: LD_VAR 0 2
45215: PPUSH
45216: LD_INT 81
45218: PUSH
45219: LD_VAR 0 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PPUSH
45228: CALL_OW 70
45232: ST_TO_ADDR
// end ;
45233: LD_VAR 0 3
45237: RET
// export function IsExtension ( b ) ; begin
45238: LD_INT 0
45240: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45241: LD_ADDR_VAR 0 2
45245: PUSH
45246: LD_VAR 0 1
45250: PUSH
45251: LD_INT 23
45253: PUSH
45254: LD_INT 20
45256: PUSH
45257: LD_INT 22
45259: PUSH
45260: LD_INT 17
45262: PUSH
45263: LD_INT 24
45265: PUSH
45266: LD_INT 21
45268: PUSH
45269: LD_INT 19
45271: PUSH
45272: LD_INT 16
45274: PUSH
45275: LD_INT 25
45277: PUSH
45278: LD_INT 18
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: IN
45293: ST_TO_ADDR
// end ;
45294: LD_VAR 0 2
45298: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45299: LD_INT 0
45301: PPUSH
45302: PPUSH
45303: PPUSH
// result := [ ] ;
45304: LD_ADDR_VAR 0 4
45308: PUSH
45309: EMPTY
45310: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45311: LD_ADDR_VAR 0 5
45315: PUSH
45316: LD_VAR 0 2
45320: PPUSH
45321: LD_INT 21
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PPUSH
45331: CALL_OW 70
45335: ST_TO_ADDR
// if not tmp then
45336: LD_VAR 0 5
45340: NOT
45341: IFFALSE 45345
// exit ;
45343: GO 45409
// if checkLink then
45345: LD_VAR 0 3
45349: IFFALSE 45399
// begin for i in tmp do
45351: LD_ADDR_VAR 0 6
45355: PUSH
45356: LD_VAR 0 5
45360: PUSH
45361: FOR_IN
45362: IFFALSE 45397
// if GetBase ( i ) <> base then
45364: LD_VAR 0 6
45368: PPUSH
45369: CALL_OW 274
45373: PUSH
45374: LD_VAR 0 1
45378: NONEQUAL
45379: IFFALSE 45395
// ComLinkToBase ( base , i ) ;
45381: LD_VAR 0 1
45385: PPUSH
45386: LD_VAR 0 6
45390: PPUSH
45391: CALL_OW 169
45395: GO 45361
45397: POP
45398: POP
// end ; result := tmp ;
45399: LD_ADDR_VAR 0 4
45403: PUSH
45404: LD_VAR 0 5
45408: ST_TO_ADDR
// end ;
45409: LD_VAR 0 4
45413: RET
// export function ComComplete ( units , b ) ; var i ; begin
45414: LD_INT 0
45416: PPUSH
45417: PPUSH
// if not units then
45418: LD_VAR 0 1
45422: NOT
45423: IFFALSE 45427
// exit ;
45425: GO 45517
// for i in units do
45427: LD_ADDR_VAR 0 4
45431: PUSH
45432: LD_VAR 0 1
45436: PUSH
45437: FOR_IN
45438: IFFALSE 45515
// if BuildingStatus ( b ) = bs_build then
45440: LD_VAR 0 2
45444: PPUSH
45445: CALL_OW 461
45449: PUSH
45450: LD_INT 1
45452: EQUAL
45453: IFFALSE 45513
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45455: LD_VAR 0 4
45459: PPUSH
45460: LD_STRING h
45462: PUSH
45463: LD_VAR 0 2
45467: PPUSH
45468: CALL_OW 250
45472: PUSH
45473: LD_VAR 0 2
45477: PPUSH
45478: CALL_OW 251
45482: PUSH
45483: LD_VAR 0 2
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: PPUSH
45509: CALL_OW 446
45513: GO 45437
45515: POP
45516: POP
// end ;
45517: LD_VAR 0 3
45521: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45522: LD_INT 0
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45530: LD_VAR 0 1
45534: NOT
45535: PUSH
45536: LD_VAR 0 1
45540: PPUSH
45541: CALL_OW 263
45545: PUSH
45546: LD_INT 2
45548: NONEQUAL
45549: OR
45550: IFFALSE 45554
// exit ;
45552: GO 45870
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45554: LD_ADDR_VAR 0 6
45558: PUSH
45559: LD_INT 22
45561: PUSH
45562: LD_VAR 0 1
45566: PPUSH
45567: CALL_OW 255
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 30
45581: PUSH
45582: LD_INT 36
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 34
45591: PUSH
45592: LD_INT 31
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PPUSH
45608: CALL_OW 69
45612: ST_TO_ADDR
// if not tmp then
45613: LD_VAR 0 6
45617: NOT
45618: IFFALSE 45622
// exit ;
45620: GO 45870
// result := [ ] ;
45622: LD_ADDR_VAR 0 2
45626: PUSH
45627: EMPTY
45628: ST_TO_ADDR
// for i in tmp do
45629: LD_ADDR_VAR 0 3
45633: PUSH
45634: LD_VAR 0 6
45638: PUSH
45639: FOR_IN
45640: IFFALSE 45711
// begin t := UnitsInside ( i ) ;
45642: LD_ADDR_VAR 0 4
45646: PUSH
45647: LD_VAR 0 3
45651: PPUSH
45652: CALL_OW 313
45656: ST_TO_ADDR
// if t then
45657: LD_VAR 0 4
45661: IFFALSE 45709
// for j in t do
45663: LD_ADDR_VAR 0 7
45667: PUSH
45668: LD_VAR 0 4
45672: PUSH
45673: FOR_IN
45674: IFFALSE 45707
// result := Replace ( result , result + 1 , j ) ;
45676: LD_ADDR_VAR 0 2
45680: PUSH
45681: LD_VAR 0 2
45685: PPUSH
45686: LD_VAR 0 2
45690: PUSH
45691: LD_INT 1
45693: PLUS
45694: PPUSH
45695: LD_VAR 0 7
45699: PPUSH
45700: CALL_OW 1
45704: ST_TO_ADDR
45705: GO 45673
45707: POP
45708: POP
// end ;
45709: GO 45639
45711: POP
45712: POP
// if not result then
45713: LD_VAR 0 2
45717: NOT
45718: IFFALSE 45722
// exit ;
45720: GO 45870
// mech := result [ 1 ] ;
45722: LD_ADDR_VAR 0 5
45726: PUSH
45727: LD_VAR 0 2
45731: PUSH
45732: LD_INT 1
45734: ARRAY
45735: ST_TO_ADDR
// if result > 1 then
45736: LD_VAR 0 2
45740: PUSH
45741: LD_INT 1
45743: GREATER
45744: IFFALSE 45856
// begin for i = 2 to result do
45746: LD_ADDR_VAR 0 3
45750: PUSH
45751: DOUBLE
45752: LD_INT 2
45754: DEC
45755: ST_TO_ADDR
45756: LD_VAR 0 2
45760: PUSH
45761: FOR_TO
45762: IFFALSE 45854
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45764: LD_ADDR_VAR 0 4
45768: PUSH
45769: LD_VAR 0 2
45773: PUSH
45774: LD_VAR 0 3
45778: ARRAY
45779: PPUSH
45780: LD_INT 3
45782: PPUSH
45783: CALL_OW 259
45787: PUSH
45788: LD_VAR 0 2
45792: PUSH
45793: LD_VAR 0 3
45797: ARRAY
45798: PPUSH
45799: CALL_OW 432
45803: MINUS
45804: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45805: LD_VAR 0 4
45809: PUSH
45810: LD_VAR 0 5
45814: PPUSH
45815: LD_INT 3
45817: PPUSH
45818: CALL_OW 259
45822: PUSH
45823: LD_VAR 0 5
45827: PPUSH
45828: CALL_OW 432
45832: MINUS
45833: GREATEREQUAL
45834: IFFALSE 45852
// mech := result [ i ] ;
45836: LD_ADDR_VAR 0 5
45840: PUSH
45841: LD_VAR 0 2
45845: PUSH
45846: LD_VAR 0 3
45850: ARRAY
45851: ST_TO_ADDR
// end ;
45852: GO 45761
45854: POP
45855: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45856: LD_VAR 0 1
45860: PPUSH
45861: LD_VAR 0 5
45865: PPUSH
45866: CALL_OW 135
// end ;
45870: LD_VAR 0 2
45874: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45875: LD_INT 0
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
// result := [ ] ;
45890: LD_ADDR_VAR 0 7
45894: PUSH
45895: EMPTY
45896: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45897: LD_VAR 0 1
45901: PPUSH
45902: CALL_OW 266
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: IN
45917: NOT
45918: IFFALSE 45922
// exit ;
45920: GO 47556
// if name then
45922: LD_VAR 0 3
45926: IFFALSE 45942
// SetBName ( base_dep , name ) ;
45928: LD_VAR 0 1
45932: PPUSH
45933: LD_VAR 0 3
45937: PPUSH
45938: CALL_OW 500
// base := GetBase ( base_dep ) ;
45942: LD_ADDR_VAR 0 15
45946: PUSH
45947: LD_VAR 0 1
45951: PPUSH
45952: CALL_OW 274
45956: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45957: LD_ADDR_VAR 0 16
45961: PUSH
45962: LD_VAR 0 1
45966: PPUSH
45967: CALL_OW 255
45971: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45972: LD_ADDR_VAR 0 17
45976: PUSH
45977: LD_VAR 0 1
45981: PPUSH
45982: CALL_OW 248
45986: ST_TO_ADDR
// if sources then
45987: LD_VAR 0 5
45991: IFFALSE 46038
// for i = 1 to 3 do
45993: LD_ADDR_VAR 0 8
45997: PUSH
45998: DOUBLE
45999: LD_INT 1
46001: DEC
46002: ST_TO_ADDR
46003: LD_INT 3
46005: PUSH
46006: FOR_TO
46007: IFFALSE 46036
// AddResourceType ( base , i , sources [ i ] ) ;
46009: LD_VAR 0 15
46013: PPUSH
46014: LD_VAR 0 8
46018: PPUSH
46019: LD_VAR 0 5
46023: PUSH
46024: LD_VAR 0 8
46028: ARRAY
46029: PPUSH
46030: CALL_OW 276
46034: GO 46006
46036: POP
46037: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46038: LD_ADDR_VAR 0 18
46042: PUSH
46043: LD_VAR 0 15
46047: PPUSH
46048: LD_VAR 0 2
46052: PPUSH
46053: LD_INT 1
46055: PPUSH
46056: CALL 45299 0 3
46060: ST_TO_ADDR
// InitHc ;
46061: CALL_OW 19
// InitUc ;
46065: CALL_OW 18
// uc_side := side ;
46069: LD_ADDR_OWVAR 20
46073: PUSH
46074: LD_VAR 0 16
46078: ST_TO_ADDR
// uc_nation := nation ;
46079: LD_ADDR_OWVAR 21
46083: PUSH
46084: LD_VAR 0 17
46088: ST_TO_ADDR
// if buildings then
46089: LD_VAR 0 18
46093: IFFALSE 47415
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46095: LD_ADDR_VAR 0 19
46099: PUSH
46100: LD_VAR 0 18
46104: PPUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 30
46110: PUSH
46111: LD_INT 29
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 30
46120: PUSH
46121: LD_INT 30
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: PPUSH
46133: CALL_OW 72
46137: ST_TO_ADDR
// if tmp then
46138: LD_VAR 0 19
46142: IFFALSE 46190
// for i in tmp do
46144: LD_ADDR_VAR 0 8
46148: PUSH
46149: LD_VAR 0 19
46153: PUSH
46154: FOR_IN
46155: IFFALSE 46188
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46157: LD_VAR 0 8
46161: PPUSH
46162: CALL_OW 250
46166: PPUSH
46167: LD_VAR 0 8
46171: PPUSH
46172: CALL_OW 251
46176: PPUSH
46177: LD_VAR 0 16
46181: PPUSH
46182: CALL_OW 441
46186: GO 46154
46188: POP
46189: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46190: LD_VAR 0 18
46194: PPUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 30
46200: PUSH
46201: LD_INT 32
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 30
46210: PUSH
46211: LD_INT 33
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: PPUSH
46223: CALL_OW 72
46227: IFFALSE 46315
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46229: LD_ADDR_VAR 0 8
46233: PUSH
46234: LD_VAR 0 18
46238: PPUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 30
46244: PUSH
46245: LD_INT 32
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 30
46254: PUSH
46255: LD_INT 33
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: PPUSH
46267: CALL_OW 72
46271: PUSH
46272: FOR_IN
46273: IFFALSE 46313
// begin if not GetBWeapon ( i ) then
46275: LD_VAR 0 8
46279: PPUSH
46280: CALL_OW 269
46284: NOT
46285: IFFALSE 46311
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46287: LD_VAR 0 8
46291: PPUSH
46292: LD_VAR 0 8
46296: PPUSH
46297: LD_VAR 0 2
46301: PPUSH
46302: CALL 47561 0 2
46306: PPUSH
46307: CALL_OW 431
// end ;
46311: GO 46272
46313: POP
46314: POP
// end ; for i = 1 to personel do
46315: LD_ADDR_VAR 0 8
46319: PUSH
46320: DOUBLE
46321: LD_INT 1
46323: DEC
46324: ST_TO_ADDR
46325: LD_VAR 0 6
46329: PUSH
46330: FOR_TO
46331: IFFALSE 47395
// begin if i > 4 then
46333: LD_VAR 0 8
46337: PUSH
46338: LD_INT 4
46340: GREATER
46341: IFFALSE 46345
// break ;
46343: GO 47395
// case i of 1 :
46345: LD_VAR 0 8
46349: PUSH
46350: LD_INT 1
46352: DOUBLE
46353: EQUAL
46354: IFTRUE 46358
46356: GO 46438
46358: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46359: LD_ADDR_VAR 0 12
46363: PUSH
46364: LD_VAR 0 18
46368: PPUSH
46369: LD_INT 22
46371: PUSH
46372: LD_VAR 0 16
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 58
46383: PUSH
46384: EMPTY
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: LD_INT 30
46392: PUSH
46393: LD_INT 32
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 30
46402: PUSH
46403: LD_INT 4
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 30
46412: PUSH
46413: LD_INT 5
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: PPUSH
46431: CALL_OW 72
46435: ST_TO_ADDR
46436: GO 46660
46438: LD_INT 2
46440: DOUBLE
46441: EQUAL
46442: IFTRUE 46446
46444: GO 46508
46446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46447: LD_ADDR_VAR 0 12
46451: PUSH
46452: LD_VAR 0 18
46456: PPUSH
46457: LD_INT 22
46459: PUSH
46460: LD_VAR 0 16
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 30
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 30
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PPUSH
46501: CALL_OW 72
46505: ST_TO_ADDR
46506: GO 46660
46508: LD_INT 3
46510: DOUBLE
46511: EQUAL
46512: IFTRUE 46516
46514: GO 46578
46516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46517: LD_ADDR_VAR 0 12
46521: PUSH
46522: LD_VAR 0 18
46526: PPUSH
46527: LD_INT 22
46529: PUSH
46530: LD_VAR 0 16
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 30
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 30
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PPUSH
46571: CALL_OW 72
46575: ST_TO_ADDR
46576: GO 46660
46578: LD_INT 4
46580: DOUBLE
46581: EQUAL
46582: IFTRUE 46586
46584: GO 46659
46586: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46587: LD_ADDR_VAR 0 12
46591: PUSH
46592: LD_VAR 0 18
46596: PPUSH
46597: LD_INT 22
46599: PUSH
46600: LD_VAR 0 16
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 30
46614: PUSH
46615: LD_INT 6
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 30
46624: PUSH
46625: LD_INT 7
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 30
46634: PUSH
46635: LD_INT 8
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PPUSH
46652: CALL_OW 72
46656: ST_TO_ADDR
46657: GO 46660
46659: POP
// if i = 1 then
46660: LD_VAR 0 8
46664: PUSH
46665: LD_INT 1
46667: EQUAL
46668: IFFALSE 46779
// begin tmp := [ ] ;
46670: LD_ADDR_VAR 0 19
46674: PUSH
46675: EMPTY
46676: ST_TO_ADDR
// for j in f do
46677: LD_ADDR_VAR 0 9
46681: PUSH
46682: LD_VAR 0 12
46686: PUSH
46687: FOR_IN
46688: IFFALSE 46761
// if GetBType ( j ) = b_bunker then
46690: LD_VAR 0 9
46694: PPUSH
46695: CALL_OW 266
46699: PUSH
46700: LD_INT 32
46702: EQUAL
46703: IFFALSE 46730
// tmp := Insert ( tmp , 1 , j ) else
46705: LD_ADDR_VAR 0 19
46709: PUSH
46710: LD_VAR 0 19
46714: PPUSH
46715: LD_INT 1
46717: PPUSH
46718: LD_VAR 0 9
46722: PPUSH
46723: CALL_OW 2
46727: ST_TO_ADDR
46728: GO 46759
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46730: LD_ADDR_VAR 0 19
46734: PUSH
46735: LD_VAR 0 19
46739: PPUSH
46740: LD_VAR 0 19
46744: PUSH
46745: LD_INT 1
46747: PLUS
46748: PPUSH
46749: LD_VAR 0 9
46753: PPUSH
46754: CALL_OW 2
46758: ST_TO_ADDR
46759: GO 46687
46761: POP
46762: POP
// if tmp then
46763: LD_VAR 0 19
46767: IFFALSE 46779
// f := tmp ;
46769: LD_ADDR_VAR 0 12
46773: PUSH
46774: LD_VAR 0 19
46778: ST_TO_ADDR
// end ; x := personel [ i ] ;
46779: LD_ADDR_VAR 0 13
46783: PUSH
46784: LD_VAR 0 6
46788: PUSH
46789: LD_VAR 0 8
46793: ARRAY
46794: ST_TO_ADDR
// if x = - 1 then
46795: LD_VAR 0 13
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: EQUAL
46804: IFFALSE 47013
// begin for j in f do
46806: LD_ADDR_VAR 0 9
46810: PUSH
46811: LD_VAR 0 12
46815: PUSH
46816: FOR_IN
46817: IFFALSE 47009
// repeat InitHc ;
46819: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46823: LD_VAR 0 9
46827: PPUSH
46828: CALL_OW 266
46832: PUSH
46833: LD_INT 5
46835: EQUAL
46836: IFFALSE 46906
// begin if UnitsInside ( j ) < 3 then
46838: LD_VAR 0 9
46842: PPUSH
46843: CALL_OW 313
46847: PUSH
46848: LD_INT 3
46850: LESS
46851: IFFALSE 46887
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46853: LD_INT 0
46855: PPUSH
46856: LD_INT 5
46858: PUSH
46859: LD_INT 8
46861: PUSH
46862: LD_INT 9
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: PUSH
46870: LD_VAR 0 17
46874: ARRAY
46875: PPUSH
46876: LD_VAR 0 4
46880: PPUSH
46881: CALL_OW 380
46885: GO 46904
// PrepareHuman ( false , i , skill ) ;
46887: LD_INT 0
46889: PPUSH
46890: LD_VAR 0 8
46894: PPUSH
46895: LD_VAR 0 4
46899: PPUSH
46900: CALL_OW 380
// end else
46904: GO 46923
// PrepareHuman ( false , i , skill ) ;
46906: LD_INT 0
46908: PPUSH
46909: LD_VAR 0 8
46913: PPUSH
46914: LD_VAR 0 4
46918: PPUSH
46919: CALL_OW 380
// un := CreateHuman ;
46923: LD_ADDR_VAR 0 14
46927: PUSH
46928: CALL_OW 44
46932: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46933: LD_ADDR_VAR 0 7
46937: PUSH
46938: LD_VAR 0 7
46942: PPUSH
46943: LD_INT 1
46945: PPUSH
46946: LD_VAR 0 14
46950: PPUSH
46951: CALL_OW 2
46955: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46956: LD_VAR 0 14
46960: PPUSH
46961: LD_VAR 0 9
46965: PPUSH
46966: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46970: LD_VAR 0 9
46974: PPUSH
46975: CALL_OW 313
46979: PUSH
46980: LD_INT 6
46982: EQUAL
46983: PUSH
46984: LD_VAR 0 9
46988: PPUSH
46989: CALL_OW 266
46993: PUSH
46994: LD_INT 32
46996: PUSH
46997: LD_INT 31
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: IN
47004: OR
47005: IFFALSE 46819
47007: GO 46816
47009: POP
47010: POP
// end else
47011: GO 47393
// for j = 1 to x do
47013: LD_ADDR_VAR 0 9
47017: PUSH
47018: DOUBLE
47019: LD_INT 1
47021: DEC
47022: ST_TO_ADDR
47023: LD_VAR 0 13
47027: PUSH
47028: FOR_TO
47029: IFFALSE 47391
// begin InitHc ;
47031: CALL_OW 19
// if not f then
47035: LD_VAR 0 12
47039: NOT
47040: IFFALSE 47129
// begin PrepareHuman ( false , i , skill ) ;
47042: LD_INT 0
47044: PPUSH
47045: LD_VAR 0 8
47049: PPUSH
47050: LD_VAR 0 4
47054: PPUSH
47055: CALL_OW 380
// un := CreateHuman ;
47059: LD_ADDR_VAR 0 14
47063: PUSH
47064: CALL_OW 44
47068: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47069: LD_ADDR_VAR 0 7
47073: PUSH
47074: LD_VAR 0 7
47078: PPUSH
47079: LD_INT 1
47081: PPUSH
47082: LD_VAR 0 14
47086: PPUSH
47087: CALL_OW 2
47091: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47092: LD_VAR 0 14
47096: PPUSH
47097: LD_VAR 0 1
47101: PPUSH
47102: CALL_OW 250
47106: PPUSH
47107: LD_VAR 0 1
47111: PPUSH
47112: CALL_OW 251
47116: PPUSH
47117: LD_INT 10
47119: PPUSH
47120: LD_INT 0
47122: PPUSH
47123: CALL_OW 50
// continue ;
47127: GO 47028
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47129: LD_VAR 0 12
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: PPUSH
47138: CALL_OW 313
47142: PUSH
47143: LD_VAR 0 12
47147: PUSH
47148: LD_INT 1
47150: ARRAY
47151: PPUSH
47152: CALL_OW 266
47156: PUSH
47157: LD_INT 32
47159: PUSH
47160: LD_INT 31
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: IN
47167: AND
47168: PUSH
47169: LD_VAR 0 12
47173: PUSH
47174: LD_INT 1
47176: ARRAY
47177: PPUSH
47178: CALL_OW 313
47182: PUSH
47183: LD_INT 6
47185: EQUAL
47186: OR
47187: IFFALSE 47207
// f := Delete ( f , 1 ) ;
47189: LD_ADDR_VAR 0 12
47193: PUSH
47194: LD_VAR 0 12
47198: PPUSH
47199: LD_INT 1
47201: PPUSH
47202: CALL_OW 3
47206: ST_TO_ADDR
// if not f then
47207: LD_VAR 0 12
47211: NOT
47212: IFFALSE 47230
// begin x := x + 2 ;
47214: LD_ADDR_VAR 0 13
47218: PUSH
47219: LD_VAR 0 13
47223: PUSH
47224: LD_INT 2
47226: PLUS
47227: ST_TO_ADDR
// continue ;
47228: GO 47028
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47230: LD_VAR 0 12
47234: PUSH
47235: LD_INT 1
47237: ARRAY
47238: PPUSH
47239: CALL_OW 266
47243: PUSH
47244: LD_INT 5
47246: EQUAL
47247: IFFALSE 47321
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47249: LD_VAR 0 12
47253: PUSH
47254: LD_INT 1
47256: ARRAY
47257: PPUSH
47258: CALL_OW 313
47262: PUSH
47263: LD_INT 3
47265: LESS
47266: IFFALSE 47302
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47268: LD_INT 0
47270: PPUSH
47271: LD_INT 5
47273: PUSH
47274: LD_INT 8
47276: PUSH
47277: LD_INT 9
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: PUSH
47285: LD_VAR 0 17
47289: ARRAY
47290: PPUSH
47291: LD_VAR 0 4
47295: PPUSH
47296: CALL_OW 380
47300: GO 47319
// PrepareHuman ( false , i , skill ) ;
47302: LD_INT 0
47304: PPUSH
47305: LD_VAR 0 8
47309: PPUSH
47310: LD_VAR 0 4
47314: PPUSH
47315: CALL_OW 380
// end else
47319: GO 47338
// PrepareHuman ( false , i , skill ) ;
47321: LD_INT 0
47323: PPUSH
47324: LD_VAR 0 8
47328: PPUSH
47329: LD_VAR 0 4
47333: PPUSH
47334: CALL_OW 380
// un := CreateHuman ;
47338: LD_ADDR_VAR 0 14
47342: PUSH
47343: CALL_OW 44
47347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47348: LD_ADDR_VAR 0 7
47352: PUSH
47353: LD_VAR 0 7
47357: PPUSH
47358: LD_INT 1
47360: PPUSH
47361: LD_VAR 0 14
47365: PPUSH
47366: CALL_OW 2
47370: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47371: LD_VAR 0 14
47375: PPUSH
47376: LD_VAR 0 12
47380: PUSH
47381: LD_INT 1
47383: ARRAY
47384: PPUSH
47385: CALL_OW 52
// end ;
47389: GO 47028
47391: POP
47392: POP
// end ;
47393: GO 46330
47395: POP
47396: POP
// result := result ^ buildings ;
47397: LD_ADDR_VAR 0 7
47401: PUSH
47402: LD_VAR 0 7
47406: PUSH
47407: LD_VAR 0 18
47411: ADD
47412: ST_TO_ADDR
// end else
47413: GO 47556
// begin for i = 1 to personel do
47415: LD_ADDR_VAR 0 8
47419: PUSH
47420: DOUBLE
47421: LD_INT 1
47423: DEC
47424: ST_TO_ADDR
47425: LD_VAR 0 6
47429: PUSH
47430: FOR_TO
47431: IFFALSE 47554
// begin if i > 4 then
47433: LD_VAR 0 8
47437: PUSH
47438: LD_INT 4
47440: GREATER
47441: IFFALSE 47445
// break ;
47443: GO 47554
// x := personel [ i ] ;
47445: LD_ADDR_VAR 0 13
47449: PUSH
47450: LD_VAR 0 6
47454: PUSH
47455: LD_VAR 0 8
47459: ARRAY
47460: ST_TO_ADDR
// if x = - 1 then
47461: LD_VAR 0 13
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: EQUAL
47470: IFFALSE 47474
// continue ;
47472: GO 47430
// PrepareHuman ( false , i , skill ) ;
47474: LD_INT 0
47476: PPUSH
47477: LD_VAR 0 8
47481: PPUSH
47482: LD_VAR 0 4
47486: PPUSH
47487: CALL_OW 380
// un := CreateHuman ;
47491: LD_ADDR_VAR 0 14
47495: PUSH
47496: CALL_OW 44
47500: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47501: LD_VAR 0 14
47505: PPUSH
47506: LD_VAR 0 1
47510: PPUSH
47511: CALL_OW 250
47515: PPUSH
47516: LD_VAR 0 1
47520: PPUSH
47521: CALL_OW 251
47525: PPUSH
47526: LD_INT 10
47528: PPUSH
47529: LD_INT 0
47531: PPUSH
47532: CALL_OW 50
// result := result ^ un ;
47536: LD_ADDR_VAR 0 7
47540: PUSH
47541: LD_VAR 0 7
47545: PUSH
47546: LD_VAR 0 14
47550: ADD
47551: ST_TO_ADDR
// end ;
47552: GO 47430
47554: POP
47555: POP
// end ; end ;
47556: LD_VAR 0 7
47560: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47561: LD_INT 0
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
// result := false ;
47579: LD_ADDR_VAR 0 3
47583: PUSH
47584: LD_INT 0
47586: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47587: LD_VAR 0 1
47591: NOT
47592: PUSH
47593: LD_VAR 0 1
47597: PPUSH
47598: CALL_OW 266
47602: PUSH
47603: LD_INT 32
47605: PUSH
47606: LD_INT 33
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: IN
47613: NOT
47614: OR
47615: IFFALSE 47619
// exit ;
47617: GO 48728
// nat := GetNation ( tower ) ;
47619: LD_ADDR_VAR 0 12
47623: PUSH
47624: LD_VAR 0 1
47628: PPUSH
47629: CALL_OW 248
47633: ST_TO_ADDR
// side := GetSide ( tower ) ;
47634: LD_ADDR_VAR 0 16
47638: PUSH
47639: LD_VAR 0 1
47643: PPUSH
47644: CALL_OW 255
47648: ST_TO_ADDR
// x := GetX ( tower ) ;
47649: LD_ADDR_VAR 0 10
47653: PUSH
47654: LD_VAR 0 1
47658: PPUSH
47659: CALL_OW 250
47663: ST_TO_ADDR
// y := GetY ( tower ) ;
47664: LD_ADDR_VAR 0 11
47668: PUSH
47669: LD_VAR 0 1
47673: PPUSH
47674: CALL_OW 251
47678: ST_TO_ADDR
// if not x or not y then
47679: LD_VAR 0 10
47683: NOT
47684: PUSH
47685: LD_VAR 0 11
47689: NOT
47690: OR
47691: IFFALSE 47695
// exit ;
47693: GO 48728
// weapon := 0 ;
47695: LD_ADDR_VAR 0 18
47699: PUSH
47700: LD_INT 0
47702: ST_TO_ADDR
// fac_list := [ ] ;
47703: LD_ADDR_VAR 0 17
47707: PUSH
47708: EMPTY
47709: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47710: LD_ADDR_VAR 0 6
47714: PUSH
47715: LD_VAR 0 1
47719: PPUSH
47720: CALL_OW 274
47724: PPUSH
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_INT 0
47732: PPUSH
47733: CALL 45299 0 3
47737: PPUSH
47738: LD_INT 30
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PPUSH
47748: CALL_OW 72
47752: ST_TO_ADDR
// if not factories then
47753: LD_VAR 0 6
47757: NOT
47758: IFFALSE 47762
// exit ;
47760: GO 48728
// for i in factories do
47762: LD_ADDR_VAR 0 8
47766: PUSH
47767: LD_VAR 0 6
47771: PUSH
47772: FOR_IN
47773: IFFALSE 47798
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47775: LD_ADDR_VAR 0 17
47779: PUSH
47780: LD_VAR 0 17
47784: PUSH
47785: LD_VAR 0 8
47789: PPUSH
47790: CALL_OW 478
47794: UNION
47795: ST_TO_ADDR
47796: GO 47772
47798: POP
47799: POP
// if not fac_list then
47800: LD_VAR 0 17
47804: NOT
47805: IFFALSE 47809
// exit ;
47807: GO 48728
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47809: LD_ADDR_VAR 0 5
47813: PUSH
47814: LD_INT 4
47816: PUSH
47817: LD_INT 5
47819: PUSH
47820: LD_INT 9
47822: PUSH
47823: LD_INT 10
47825: PUSH
47826: LD_INT 6
47828: PUSH
47829: LD_INT 7
47831: PUSH
47832: LD_INT 11
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 27
47846: PUSH
47847: LD_INT 28
47849: PUSH
47850: LD_INT 26
47852: PUSH
47853: LD_INT 30
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 43
47864: PUSH
47865: LD_INT 44
47867: PUSH
47868: LD_INT 46
47870: PUSH
47871: LD_INT 45
47873: PUSH
47874: LD_INT 47
47876: PUSH
47877: LD_INT 49
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: PUSH
47893: LD_VAR 0 12
47897: ARRAY
47898: ST_TO_ADDR
// list := list isect fac_list ;
47899: LD_ADDR_VAR 0 5
47903: PUSH
47904: LD_VAR 0 5
47908: PUSH
47909: LD_VAR 0 17
47913: ISECT
47914: ST_TO_ADDR
// if not list then
47915: LD_VAR 0 5
47919: NOT
47920: IFFALSE 47924
// exit ;
47922: GO 48728
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47924: LD_VAR 0 12
47928: PUSH
47929: LD_INT 3
47931: EQUAL
47932: PUSH
47933: LD_INT 49
47935: PUSH
47936: LD_VAR 0 5
47940: IN
47941: AND
47942: PUSH
47943: LD_INT 31
47945: PPUSH
47946: LD_VAR 0 16
47950: PPUSH
47951: CALL_OW 321
47955: PUSH
47956: LD_INT 2
47958: EQUAL
47959: AND
47960: IFFALSE 48020
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47962: LD_INT 22
47964: PUSH
47965: LD_VAR 0 16
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 35
47976: PUSH
47977: LD_INT 49
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 91
47986: PUSH
47987: LD_VAR 0 1
47991: PUSH
47992: LD_INT 10
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: PPUSH
48005: CALL_OW 69
48009: NOT
48010: IFFALSE 48020
// weapon := ru_time_lapser ;
48012: LD_ADDR_VAR 0 18
48016: PUSH
48017: LD_INT 49
48019: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48020: LD_VAR 0 12
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: IN
48035: PUSH
48036: LD_INT 11
48038: PUSH
48039: LD_VAR 0 5
48043: IN
48044: PUSH
48045: LD_INT 30
48047: PUSH
48048: LD_VAR 0 5
48052: IN
48053: OR
48054: AND
48055: PUSH
48056: LD_INT 6
48058: PPUSH
48059: LD_VAR 0 16
48063: PPUSH
48064: CALL_OW 321
48068: PUSH
48069: LD_INT 2
48071: EQUAL
48072: AND
48073: IFFALSE 48238
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48075: LD_INT 22
48077: PUSH
48078: LD_VAR 0 16
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 35
48092: PUSH
48093: LD_INT 11
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 35
48102: PUSH
48103: LD_INT 30
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 91
48117: PUSH
48118: LD_VAR 0 1
48122: PUSH
48123: LD_INT 18
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: PPUSH
48136: CALL_OW 69
48140: NOT
48141: PUSH
48142: LD_INT 22
48144: PUSH
48145: LD_VAR 0 16
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 30
48159: PUSH
48160: LD_INT 32
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 30
48169: PUSH
48170: LD_INT 33
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 91
48184: PUSH
48185: LD_VAR 0 1
48189: PUSH
48190: LD_INT 12
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: PPUSH
48206: CALL_OW 69
48210: PUSH
48211: LD_INT 2
48213: GREATER
48214: AND
48215: IFFALSE 48238
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48217: LD_ADDR_VAR 0 18
48221: PUSH
48222: LD_INT 11
48224: PUSH
48225: LD_INT 30
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_VAR 0 12
48236: ARRAY
48237: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48238: LD_VAR 0 18
48242: NOT
48243: PUSH
48244: LD_INT 40
48246: PPUSH
48247: LD_VAR 0 16
48251: PPUSH
48252: CALL_OW 321
48256: PUSH
48257: LD_INT 2
48259: EQUAL
48260: AND
48261: PUSH
48262: LD_INT 7
48264: PUSH
48265: LD_VAR 0 5
48269: IN
48270: PUSH
48271: LD_INT 28
48273: PUSH
48274: LD_VAR 0 5
48278: IN
48279: OR
48280: PUSH
48281: LD_INT 45
48283: PUSH
48284: LD_VAR 0 5
48288: IN
48289: OR
48290: AND
48291: IFFALSE 48545
// begin hex := GetHexInfo ( x , y ) ;
48293: LD_ADDR_VAR 0 4
48297: PUSH
48298: LD_VAR 0 10
48302: PPUSH
48303: LD_VAR 0 11
48307: PPUSH
48308: CALL_OW 546
48312: ST_TO_ADDR
// if hex [ 1 ] then
48313: LD_VAR 0 4
48317: PUSH
48318: LD_INT 1
48320: ARRAY
48321: IFFALSE 48325
// exit ;
48323: GO 48728
// height := hex [ 2 ] ;
48325: LD_ADDR_VAR 0 15
48329: PUSH
48330: LD_VAR 0 4
48334: PUSH
48335: LD_INT 2
48337: ARRAY
48338: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48339: LD_ADDR_VAR 0 14
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 5
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: ST_TO_ADDR
// for i in tmp do
48362: LD_ADDR_VAR 0 8
48366: PUSH
48367: LD_VAR 0 14
48371: PUSH
48372: FOR_IN
48373: IFFALSE 48543
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48375: LD_ADDR_VAR 0 9
48379: PUSH
48380: LD_VAR 0 10
48384: PPUSH
48385: LD_VAR 0 8
48389: PPUSH
48390: LD_INT 5
48392: PPUSH
48393: CALL_OW 272
48397: PUSH
48398: LD_VAR 0 11
48402: PPUSH
48403: LD_VAR 0 8
48407: PPUSH
48408: LD_INT 5
48410: PPUSH
48411: CALL_OW 273
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48420: LD_VAR 0 9
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: PPUSH
48429: LD_VAR 0 9
48433: PUSH
48434: LD_INT 2
48436: ARRAY
48437: PPUSH
48438: CALL_OW 488
48442: IFFALSE 48541
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48444: LD_ADDR_VAR 0 4
48448: PUSH
48449: LD_VAR 0 9
48453: PUSH
48454: LD_INT 1
48456: ARRAY
48457: PPUSH
48458: LD_VAR 0 9
48462: PUSH
48463: LD_INT 2
48465: ARRAY
48466: PPUSH
48467: CALL_OW 546
48471: ST_TO_ADDR
// if hex [ 1 ] then
48472: LD_VAR 0 4
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: IFFALSE 48484
// continue ;
48482: GO 48372
// h := hex [ 2 ] ;
48484: LD_ADDR_VAR 0 13
48488: PUSH
48489: LD_VAR 0 4
48493: PUSH
48494: LD_INT 2
48496: ARRAY
48497: ST_TO_ADDR
// if h + 7 < height then
48498: LD_VAR 0 13
48502: PUSH
48503: LD_INT 7
48505: PLUS
48506: PUSH
48507: LD_VAR 0 15
48511: LESS
48512: IFFALSE 48541
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48514: LD_ADDR_VAR 0 18
48518: PUSH
48519: LD_INT 7
48521: PUSH
48522: LD_INT 28
48524: PUSH
48525: LD_INT 45
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: PUSH
48533: LD_VAR 0 12
48537: ARRAY
48538: ST_TO_ADDR
// break ;
48539: GO 48543
// end ; end ; end ;
48541: GO 48372
48543: POP
48544: POP
// end ; if not weapon then
48545: LD_VAR 0 18
48549: NOT
48550: IFFALSE 48610
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48552: LD_ADDR_VAR 0 5
48556: PUSH
48557: LD_VAR 0 5
48561: PUSH
48562: LD_INT 11
48564: PUSH
48565: LD_INT 30
48567: PUSH
48568: LD_INT 49
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: DIFF
48576: ST_TO_ADDR
// if not list then
48577: LD_VAR 0 5
48581: NOT
48582: IFFALSE 48586
// exit ;
48584: GO 48728
// weapon := list [ rand ( 1 , list ) ] ;
48586: LD_ADDR_VAR 0 18
48590: PUSH
48591: LD_VAR 0 5
48595: PUSH
48596: LD_INT 1
48598: PPUSH
48599: LD_VAR 0 5
48603: PPUSH
48604: CALL_OW 12
48608: ARRAY
48609: ST_TO_ADDR
// end ; if weapon then
48610: LD_VAR 0 18
48614: IFFALSE 48728
// begin tmp := CostOfWeapon ( weapon ) ;
48616: LD_ADDR_VAR 0 14
48620: PUSH
48621: LD_VAR 0 18
48625: PPUSH
48626: CALL_OW 451
48630: ST_TO_ADDR
// j := GetBase ( tower ) ;
48631: LD_ADDR_VAR 0 9
48635: PUSH
48636: LD_VAR 0 1
48640: PPUSH
48641: CALL_OW 274
48645: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48646: LD_VAR 0 9
48650: PPUSH
48651: LD_INT 1
48653: PPUSH
48654: CALL_OW 275
48658: PUSH
48659: LD_VAR 0 14
48663: PUSH
48664: LD_INT 1
48666: ARRAY
48667: GREATEREQUAL
48668: PUSH
48669: LD_VAR 0 9
48673: PPUSH
48674: LD_INT 2
48676: PPUSH
48677: CALL_OW 275
48681: PUSH
48682: LD_VAR 0 14
48686: PUSH
48687: LD_INT 2
48689: ARRAY
48690: GREATEREQUAL
48691: AND
48692: PUSH
48693: LD_VAR 0 9
48697: PPUSH
48698: LD_INT 3
48700: PPUSH
48701: CALL_OW 275
48705: PUSH
48706: LD_VAR 0 14
48710: PUSH
48711: LD_INT 3
48713: ARRAY
48714: GREATEREQUAL
48715: AND
48716: IFFALSE 48728
// result := weapon ;
48718: LD_ADDR_VAR 0 3
48722: PUSH
48723: LD_VAR 0 18
48727: ST_TO_ADDR
// end ; end ;
48728: LD_VAR 0 3
48732: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48733: LD_INT 0
48735: PPUSH
48736: PPUSH
// result := true ;
48737: LD_ADDR_VAR 0 3
48741: PUSH
48742: LD_INT 1
48744: ST_TO_ADDR
// if array1 = array2 then
48745: LD_VAR 0 1
48749: PUSH
48750: LD_VAR 0 2
48754: EQUAL
48755: IFFALSE 48815
// begin for i = 1 to array1 do
48757: LD_ADDR_VAR 0 4
48761: PUSH
48762: DOUBLE
48763: LD_INT 1
48765: DEC
48766: ST_TO_ADDR
48767: LD_VAR 0 1
48771: PUSH
48772: FOR_TO
48773: IFFALSE 48811
// if array1 [ i ] <> array2 [ i ] then
48775: LD_VAR 0 1
48779: PUSH
48780: LD_VAR 0 4
48784: ARRAY
48785: PUSH
48786: LD_VAR 0 2
48790: PUSH
48791: LD_VAR 0 4
48795: ARRAY
48796: NONEQUAL
48797: IFFALSE 48809
// begin result := false ;
48799: LD_ADDR_VAR 0 3
48803: PUSH
48804: LD_INT 0
48806: ST_TO_ADDR
// break ;
48807: GO 48811
// end ;
48809: GO 48772
48811: POP
48812: POP
// end else
48813: GO 48823
// result := false ;
48815: LD_ADDR_VAR 0 3
48819: PUSH
48820: LD_INT 0
48822: ST_TO_ADDR
// end ;
48823: LD_VAR 0 3
48827: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48828: LD_INT 0
48830: PPUSH
48831: PPUSH
// if not array1 or not array2 then
48832: LD_VAR 0 1
48836: NOT
48837: PUSH
48838: LD_VAR 0 2
48842: NOT
48843: OR
48844: IFFALSE 48848
// exit ;
48846: GO 48912
// result := true ;
48848: LD_ADDR_VAR 0 3
48852: PUSH
48853: LD_INT 1
48855: ST_TO_ADDR
// for i = 1 to array1 do
48856: LD_ADDR_VAR 0 4
48860: PUSH
48861: DOUBLE
48862: LD_INT 1
48864: DEC
48865: ST_TO_ADDR
48866: LD_VAR 0 1
48870: PUSH
48871: FOR_TO
48872: IFFALSE 48910
// if array1 [ i ] <> array2 [ i ] then
48874: LD_VAR 0 1
48878: PUSH
48879: LD_VAR 0 4
48883: ARRAY
48884: PUSH
48885: LD_VAR 0 2
48889: PUSH
48890: LD_VAR 0 4
48894: ARRAY
48895: NONEQUAL
48896: IFFALSE 48908
// begin result := false ;
48898: LD_ADDR_VAR 0 3
48902: PUSH
48903: LD_INT 0
48905: ST_TO_ADDR
// break ;
48906: GO 48910
// end ;
48908: GO 48871
48910: POP
48911: POP
// end ;
48912: LD_VAR 0 3
48916: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48917: LD_INT 0
48919: PPUSH
48920: PPUSH
48921: PPUSH
// pom := GetBase ( fac ) ;
48922: LD_ADDR_VAR 0 5
48926: PUSH
48927: LD_VAR 0 1
48931: PPUSH
48932: CALL_OW 274
48936: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48937: LD_ADDR_VAR 0 4
48941: PUSH
48942: LD_VAR 0 2
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: PPUSH
48951: LD_VAR 0 2
48955: PUSH
48956: LD_INT 2
48958: ARRAY
48959: PPUSH
48960: LD_VAR 0 2
48964: PUSH
48965: LD_INT 3
48967: ARRAY
48968: PPUSH
48969: LD_VAR 0 2
48973: PUSH
48974: LD_INT 4
48976: ARRAY
48977: PPUSH
48978: CALL_OW 449
48982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48983: LD_ADDR_VAR 0 3
48987: PUSH
48988: LD_VAR 0 5
48992: PPUSH
48993: LD_INT 1
48995: PPUSH
48996: CALL_OW 275
49000: PUSH
49001: LD_VAR 0 4
49005: PUSH
49006: LD_INT 1
49008: ARRAY
49009: GREATEREQUAL
49010: PUSH
49011: LD_VAR 0 5
49015: PPUSH
49016: LD_INT 2
49018: PPUSH
49019: CALL_OW 275
49023: PUSH
49024: LD_VAR 0 4
49028: PUSH
49029: LD_INT 2
49031: ARRAY
49032: GREATEREQUAL
49033: AND
49034: PUSH
49035: LD_VAR 0 5
49039: PPUSH
49040: LD_INT 3
49042: PPUSH
49043: CALL_OW 275
49047: PUSH
49048: LD_VAR 0 4
49052: PUSH
49053: LD_INT 3
49055: ARRAY
49056: GREATEREQUAL
49057: AND
49058: ST_TO_ADDR
// end ;
49059: LD_VAR 0 3
49063: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49064: LD_INT 0
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
// pom := GetBase ( building ) ;
49070: LD_ADDR_VAR 0 3
49074: PUSH
49075: LD_VAR 0 1
49079: PPUSH
49080: CALL_OW 274
49084: ST_TO_ADDR
// if not pom then
49085: LD_VAR 0 3
49089: NOT
49090: IFFALSE 49094
// exit ;
49092: GO 49264
// btype := GetBType ( building ) ;
49094: LD_ADDR_VAR 0 5
49098: PUSH
49099: LD_VAR 0 1
49103: PPUSH
49104: CALL_OW 266
49108: ST_TO_ADDR
// if btype = b_armoury then
49109: LD_VAR 0 5
49113: PUSH
49114: LD_INT 4
49116: EQUAL
49117: IFFALSE 49127
// btype := b_barracks ;
49119: LD_ADDR_VAR 0 5
49123: PUSH
49124: LD_INT 5
49126: ST_TO_ADDR
// if btype = b_depot then
49127: LD_VAR 0 5
49131: PUSH
49132: LD_INT 0
49134: EQUAL
49135: IFFALSE 49145
// btype := b_warehouse ;
49137: LD_ADDR_VAR 0 5
49141: PUSH
49142: LD_INT 1
49144: ST_TO_ADDR
// if btype = b_workshop then
49145: LD_VAR 0 5
49149: PUSH
49150: LD_INT 2
49152: EQUAL
49153: IFFALSE 49163
// btype := b_factory ;
49155: LD_ADDR_VAR 0 5
49159: PUSH
49160: LD_INT 3
49162: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49163: LD_ADDR_VAR 0 4
49167: PUSH
49168: LD_VAR 0 5
49172: PPUSH
49173: LD_VAR 0 1
49177: PPUSH
49178: CALL_OW 248
49182: PPUSH
49183: CALL_OW 450
49187: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49188: LD_ADDR_VAR 0 2
49192: PUSH
49193: LD_VAR 0 3
49197: PPUSH
49198: LD_INT 1
49200: PPUSH
49201: CALL_OW 275
49205: PUSH
49206: LD_VAR 0 4
49210: PUSH
49211: LD_INT 1
49213: ARRAY
49214: GREATEREQUAL
49215: PUSH
49216: LD_VAR 0 3
49220: PPUSH
49221: LD_INT 2
49223: PPUSH
49224: CALL_OW 275
49228: PUSH
49229: LD_VAR 0 4
49233: PUSH
49234: LD_INT 2
49236: ARRAY
49237: GREATEREQUAL
49238: AND
49239: PUSH
49240: LD_VAR 0 3
49244: PPUSH
49245: LD_INT 3
49247: PPUSH
49248: CALL_OW 275
49252: PUSH
49253: LD_VAR 0 4
49257: PUSH
49258: LD_INT 3
49260: ARRAY
49261: GREATEREQUAL
49262: AND
49263: ST_TO_ADDR
// end ;
49264: LD_VAR 0 2
49268: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49269: LD_INT 0
49271: PPUSH
49272: PPUSH
49273: PPUSH
// pom := GetBase ( building ) ;
49274: LD_ADDR_VAR 0 4
49278: PUSH
49279: LD_VAR 0 1
49283: PPUSH
49284: CALL_OW 274
49288: ST_TO_ADDR
// if not pom then
49289: LD_VAR 0 4
49293: NOT
49294: IFFALSE 49298
// exit ;
49296: GO 49399
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49298: LD_ADDR_VAR 0 5
49302: PUSH
49303: LD_VAR 0 2
49307: PPUSH
49308: LD_VAR 0 1
49312: PPUSH
49313: CALL_OW 248
49317: PPUSH
49318: CALL_OW 450
49322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49323: LD_ADDR_VAR 0 3
49327: PUSH
49328: LD_VAR 0 4
49332: PPUSH
49333: LD_INT 1
49335: PPUSH
49336: CALL_OW 275
49340: PUSH
49341: LD_VAR 0 5
49345: PUSH
49346: LD_INT 1
49348: ARRAY
49349: GREATEREQUAL
49350: PUSH
49351: LD_VAR 0 4
49355: PPUSH
49356: LD_INT 2
49358: PPUSH
49359: CALL_OW 275
49363: PUSH
49364: LD_VAR 0 5
49368: PUSH
49369: LD_INT 2
49371: ARRAY
49372: GREATEREQUAL
49373: AND
49374: PUSH
49375: LD_VAR 0 4
49379: PPUSH
49380: LD_INT 3
49382: PPUSH
49383: CALL_OW 275
49387: PUSH
49388: LD_VAR 0 5
49392: PUSH
49393: LD_INT 3
49395: ARRAY
49396: GREATEREQUAL
49397: AND
49398: ST_TO_ADDR
// end ;
49399: LD_VAR 0 3
49403: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49404: LD_INT 0
49406: PPUSH
49407: PPUSH
49408: PPUSH
49409: PPUSH
49410: PPUSH
49411: PPUSH
49412: PPUSH
49413: PPUSH
49414: PPUSH
49415: PPUSH
49416: PPUSH
// result := false ;
49417: LD_ADDR_VAR 0 8
49421: PUSH
49422: LD_INT 0
49424: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49425: LD_VAR 0 5
49429: NOT
49430: PUSH
49431: LD_VAR 0 1
49435: NOT
49436: OR
49437: PUSH
49438: LD_VAR 0 2
49442: NOT
49443: OR
49444: PUSH
49445: LD_VAR 0 3
49449: NOT
49450: OR
49451: IFFALSE 49455
// exit ;
49453: GO 50269
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49455: LD_ADDR_VAR 0 14
49459: PUSH
49460: LD_VAR 0 1
49464: PPUSH
49465: LD_VAR 0 2
49469: PPUSH
49470: LD_VAR 0 3
49474: PPUSH
49475: LD_VAR 0 4
49479: PPUSH
49480: LD_VAR 0 5
49484: PUSH
49485: LD_INT 1
49487: ARRAY
49488: PPUSH
49489: CALL_OW 248
49493: PPUSH
49494: LD_INT 0
49496: PPUSH
49497: CALL 51522 0 6
49501: ST_TO_ADDR
// if not hexes then
49502: LD_VAR 0 14
49506: NOT
49507: IFFALSE 49511
// exit ;
49509: GO 50269
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49511: LD_ADDR_VAR 0 17
49515: PUSH
49516: LD_VAR 0 5
49520: PPUSH
49521: LD_INT 22
49523: PUSH
49524: LD_VAR 0 13
49528: PPUSH
49529: CALL_OW 255
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 30
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 30
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PPUSH
49570: CALL_OW 72
49574: ST_TO_ADDR
// for i = 1 to hexes do
49575: LD_ADDR_VAR 0 9
49579: PUSH
49580: DOUBLE
49581: LD_INT 1
49583: DEC
49584: ST_TO_ADDR
49585: LD_VAR 0 14
49589: PUSH
49590: FOR_TO
49591: IFFALSE 50267
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49593: LD_ADDR_VAR 0 13
49597: PUSH
49598: LD_VAR 0 14
49602: PUSH
49603: LD_VAR 0 9
49607: ARRAY
49608: PUSH
49609: LD_INT 1
49611: ARRAY
49612: PPUSH
49613: LD_VAR 0 14
49617: PUSH
49618: LD_VAR 0 9
49622: ARRAY
49623: PUSH
49624: LD_INT 2
49626: ARRAY
49627: PPUSH
49628: CALL_OW 428
49632: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49633: LD_VAR 0 14
49637: PUSH
49638: LD_VAR 0 9
49642: ARRAY
49643: PUSH
49644: LD_INT 1
49646: ARRAY
49647: PPUSH
49648: LD_VAR 0 14
49652: PUSH
49653: LD_VAR 0 9
49657: ARRAY
49658: PUSH
49659: LD_INT 2
49661: ARRAY
49662: PPUSH
49663: CALL_OW 351
49667: PUSH
49668: LD_VAR 0 14
49672: PUSH
49673: LD_VAR 0 9
49677: ARRAY
49678: PUSH
49679: LD_INT 1
49681: ARRAY
49682: PPUSH
49683: LD_VAR 0 14
49687: PUSH
49688: LD_VAR 0 9
49692: ARRAY
49693: PUSH
49694: LD_INT 2
49696: ARRAY
49697: PPUSH
49698: CALL_OW 488
49702: NOT
49703: OR
49704: PUSH
49705: LD_VAR 0 13
49709: PPUSH
49710: CALL_OW 247
49714: PUSH
49715: LD_INT 3
49717: EQUAL
49718: OR
49719: IFFALSE 49725
// exit ;
49721: POP
49722: POP
49723: GO 50269
// if not tmp then
49725: LD_VAR 0 13
49729: NOT
49730: IFFALSE 49734
// continue ;
49732: GO 49590
// result := true ;
49734: LD_ADDR_VAR 0 8
49738: PUSH
49739: LD_INT 1
49741: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49742: LD_VAR 0 6
49746: PUSH
49747: LD_VAR 0 13
49751: PPUSH
49752: CALL_OW 247
49756: PUSH
49757: LD_INT 2
49759: EQUAL
49760: AND
49761: PUSH
49762: LD_VAR 0 13
49766: PPUSH
49767: CALL_OW 263
49771: PUSH
49772: LD_INT 1
49774: EQUAL
49775: AND
49776: IFFALSE 49940
// begin if IsDrivenBy ( tmp ) then
49778: LD_VAR 0 13
49782: PPUSH
49783: CALL_OW 311
49787: IFFALSE 49791
// continue ;
49789: GO 49590
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49791: LD_VAR 0 6
49795: PPUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 60
49801: PUSH
49802: EMPTY
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: LD_INT 55
49814: PUSH
49815: EMPTY
49816: LIST
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PPUSH
49826: CALL_OW 72
49830: IFFALSE 49938
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49832: LD_ADDR_VAR 0 18
49836: PUSH
49837: LD_VAR 0 6
49841: PPUSH
49842: LD_INT 3
49844: PUSH
49845: LD_INT 60
49847: PUSH
49848: EMPTY
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: LD_INT 55
49860: PUSH
49861: EMPTY
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PPUSH
49872: CALL_OW 72
49876: PUSH
49877: LD_INT 1
49879: ARRAY
49880: ST_TO_ADDR
// if IsInUnit ( driver ) then
49881: LD_VAR 0 18
49885: PPUSH
49886: CALL_OW 310
49890: IFFALSE 49901
// ComExit ( driver ) ;
49892: LD_VAR 0 18
49896: PPUSH
49897: CALL 75314 0 1
// AddComEnterUnit ( driver , tmp ) ;
49901: LD_VAR 0 18
49905: PPUSH
49906: LD_VAR 0 13
49910: PPUSH
49911: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49915: LD_VAR 0 18
49919: PPUSH
49920: LD_VAR 0 7
49924: PPUSH
49925: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49929: LD_VAR 0 18
49933: PPUSH
49934: CALL_OW 181
// end ; continue ;
49938: GO 49590
// end ; if not cleaners or not tmp in cleaners then
49940: LD_VAR 0 6
49944: NOT
49945: PUSH
49946: LD_VAR 0 13
49950: PUSH
49951: LD_VAR 0 6
49955: IN
49956: NOT
49957: OR
49958: IFFALSE 50265
// begin if dep then
49960: LD_VAR 0 17
49964: IFFALSE 50100
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49966: LD_ADDR_VAR 0 16
49970: PUSH
49971: LD_VAR 0 17
49975: PUSH
49976: LD_INT 1
49978: ARRAY
49979: PPUSH
49980: CALL_OW 250
49984: PPUSH
49985: LD_VAR 0 17
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: PPUSH
49994: CALL_OW 254
49998: PPUSH
49999: LD_INT 5
50001: PPUSH
50002: CALL_OW 272
50006: PUSH
50007: LD_VAR 0 17
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: PPUSH
50016: CALL_OW 251
50020: PPUSH
50021: LD_VAR 0 17
50025: PUSH
50026: LD_INT 1
50028: ARRAY
50029: PPUSH
50030: CALL_OW 254
50034: PPUSH
50035: LD_INT 5
50037: PPUSH
50038: CALL_OW 273
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50047: LD_VAR 0 16
50051: PUSH
50052: LD_INT 1
50054: ARRAY
50055: PPUSH
50056: LD_VAR 0 16
50060: PUSH
50061: LD_INT 2
50063: ARRAY
50064: PPUSH
50065: CALL_OW 488
50069: IFFALSE 50100
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50071: LD_VAR 0 13
50075: PPUSH
50076: LD_VAR 0 16
50080: PUSH
50081: LD_INT 1
50083: ARRAY
50084: PPUSH
50085: LD_VAR 0 16
50089: PUSH
50090: LD_INT 2
50092: ARRAY
50093: PPUSH
50094: CALL_OW 111
// continue ;
50098: GO 49590
// end ; end ; r := GetDir ( tmp ) ;
50100: LD_ADDR_VAR 0 15
50104: PUSH
50105: LD_VAR 0 13
50109: PPUSH
50110: CALL_OW 254
50114: ST_TO_ADDR
// if r = 5 then
50115: LD_VAR 0 15
50119: PUSH
50120: LD_INT 5
50122: EQUAL
50123: IFFALSE 50133
// r := 0 ;
50125: LD_ADDR_VAR 0 15
50129: PUSH
50130: LD_INT 0
50132: ST_TO_ADDR
// for j = r to 5 do
50133: LD_ADDR_VAR 0 10
50137: PUSH
50138: DOUBLE
50139: LD_VAR 0 15
50143: DEC
50144: ST_TO_ADDR
50145: LD_INT 5
50147: PUSH
50148: FOR_TO
50149: IFFALSE 50263
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50151: LD_ADDR_VAR 0 11
50155: PUSH
50156: LD_VAR 0 13
50160: PPUSH
50161: CALL_OW 250
50165: PPUSH
50166: LD_VAR 0 10
50170: PPUSH
50171: LD_INT 2
50173: PPUSH
50174: CALL_OW 272
50178: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50179: LD_ADDR_VAR 0 12
50183: PUSH
50184: LD_VAR 0 13
50188: PPUSH
50189: CALL_OW 251
50193: PPUSH
50194: LD_VAR 0 10
50198: PPUSH
50199: LD_INT 2
50201: PPUSH
50202: CALL_OW 273
50206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50207: LD_VAR 0 11
50211: PPUSH
50212: LD_VAR 0 12
50216: PPUSH
50217: CALL_OW 488
50221: PUSH
50222: LD_VAR 0 11
50226: PPUSH
50227: LD_VAR 0 12
50231: PPUSH
50232: CALL_OW 428
50236: NOT
50237: AND
50238: IFFALSE 50261
// begin ComMoveXY ( tmp , _x , _y ) ;
50240: LD_VAR 0 13
50244: PPUSH
50245: LD_VAR 0 11
50249: PPUSH
50250: LD_VAR 0 12
50254: PPUSH
50255: CALL_OW 111
// break ;
50259: GO 50263
// end ; end ;
50261: GO 50148
50263: POP
50264: POP
// end ; end ;
50265: GO 49590
50267: POP
50268: POP
// end ;
50269: LD_VAR 0 8
50273: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50274: LD_INT 0
50276: PPUSH
// result := true ;
50277: LD_ADDR_VAR 0 3
50281: PUSH
50282: LD_INT 1
50284: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50285: LD_VAR 0 2
50289: PUSH
50290: LD_INT 24
50292: DOUBLE
50293: EQUAL
50294: IFTRUE 50304
50296: LD_INT 33
50298: DOUBLE
50299: EQUAL
50300: IFTRUE 50304
50302: GO 50329
50304: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50305: LD_ADDR_VAR 0 3
50309: PUSH
50310: LD_INT 32
50312: PPUSH
50313: LD_VAR 0 1
50317: PPUSH
50318: CALL_OW 321
50322: PUSH
50323: LD_INT 2
50325: EQUAL
50326: ST_TO_ADDR
50327: GO 50645
50329: LD_INT 20
50331: DOUBLE
50332: EQUAL
50333: IFTRUE 50337
50335: GO 50362
50337: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50338: LD_ADDR_VAR 0 3
50342: PUSH
50343: LD_INT 6
50345: PPUSH
50346: LD_VAR 0 1
50350: PPUSH
50351: CALL_OW 321
50355: PUSH
50356: LD_INT 2
50358: EQUAL
50359: ST_TO_ADDR
50360: GO 50645
50362: LD_INT 22
50364: DOUBLE
50365: EQUAL
50366: IFTRUE 50376
50368: LD_INT 36
50370: DOUBLE
50371: EQUAL
50372: IFTRUE 50376
50374: GO 50401
50376: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50377: LD_ADDR_VAR 0 3
50381: PUSH
50382: LD_INT 15
50384: PPUSH
50385: LD_VAR 0 1
50389: PPUSH
50390: CALL_OW 321
50394: PUSH
50395: LD_INT 2
50397: EQUAL
50398: ST_TO_ADDR
50399: GO 50645
50401: LD_INT 30
50403: DOUBLE
50404: EQUAL
50405: IFTRUE 50409
50407: GO 50434
50409: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50410: LD_ADDR_VAR 0 3
50414: PUSH
50415: LD_INT 20
50417: PPUSH
50418: LD_VAR 0 1
50422: PPUSH
50423: CALL_OW 321
50427: PUSH
50428: LD_INT 2
50430: EQUAL
50431: ST_TO_ADDR
50432: GO 50645
50434: LD_INT 28
50436: DOUBLE
50437: EQUAL
50438: IFTRUE 50448
50440: LD_INT 21
50442: DOUBLE
50443: EQUAL
50444: IFTRUE 50448
50446: GO 50473
50448: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50449: LD_ADDR_VAR 0 3
50453: PUSH
50454: LD_INT 21
50456: PPUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 321
50466: PUSH
50467: LD_INT 2
50469: EQUAL
50470: ST_TO_ADDR
50471: GO 50645
50473: LD_INT 16
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50481
50479: GO 50506
50481: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50482: LD_ADDR_VAR 0 3
50486: PUSH
50487: LD_INT 84
50489: PPUSH
50490: LD_VAR 0 1
50494: PPUSH
50495: CALL_OW 321
50499: PUSH
50500: LD_INT 2
50502: EQUAL
50503: ST_TO_ADDR
50504: GO 50645
50506: LD_INT 19
50508: DOUBLE
50509: EQUAL
50510: IFTRUE 50520
50512: LD_INT 23
50514: DOUBLE
50515: EQUAL
50516: IFTRUE 50520
50518: GO 50545
50520: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50521: LD_ADDR_VAR 0 3
50525: PUSH
50526: LD_INT 83
50528: PPUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: CALL_OW 321
50538: PUSH
50539: LD_INT 2
50541: EQUAL
50542: ST_TO_ADDR
50543: GO 50645
50545: LD_INT 17
50547: DOUBLE
50548: EQUAL
50549: IFTRUE 50553
50551: GO 50578
50553: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50554: LD_ADDR_VAR 0 3
50558: PUSH
50559: LD_INT 39
50561: PPUSH
50562: LD_VAR 0 1
50566: PPUSH
50567: CALL_OW 321
50571: PUSH
50572: LD_INT 2
50574: EQUAL
50575: ST_TO_ADDR
50576: GO 50645
50578: LD_INT 18
50580: DOUBLE
50581: EQUAL
50582: IFTRUE 50586
50584: GO 50611
50586: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50587: LD_ADDR_VAR 0 3
50591: PUSH
50592: LD_INT 40
50594: PPUSH
50595: LD_VAR 0 1
50599: PPUSH
50600: CALL_OW 321
50604: PUSH
50605: LD_INT 2
50607: EQUAL
50608: ST_TO_ADDR
50609: GO 50645
50611: LD_INT 27
50613: DOUBLE
50614: EQUAL
50615: IFTRUE 50619
50617: GO 50644
50619: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50620: LD_ADDR_VAR 0 3
50624: PUSH
50625: LD_INT 35
50627: PPUSH
50628: LD_VAR 0 1
50632: PPUSH
50633: CALL_OW 321
50637: PUSH
50638: LD_INT 2
50640: EQUAL
50641: ST_TO_ADDR
50642: GO 50645
50644: POP
// end ;
50645: LD_VAR 0 3
50649: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50650: LD_INT 0
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
// result := false ;
50663: LD_ADDR_VAR 0 6
50667: PUSH
50668: LD_INT 0
50670: ST_TO_ADDR
// if btype = b_depot then
50671: LD_VAR 0 2
50675: PUSH
50676: LD_INT 0
50678: EQUAL
50679: IFFALSE 50691
// begin result := true ;
50681: LD_ADDR_VAR 0 6
50685: PUSH
50686: LD_INT 1
50688: ST_TO_ADDR
// exit ;
50689: GO 51517
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50691: LD_VAR 0 1
50695: NOT
50696: PUSH
50697: LD_VAR 0 1
50701: PPUSH
50702: CALL_OW 266
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: IN
50717: NOT
50718: OR
50719: PUSH
50720: LD_VAR 0 2
50724: NOT
50725: OR
50726: PUSH
50727: LD_VAR 0 5
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: LD_INT 5
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: IN
50758: NOT
50759: OR
50760: PUSH
50761: LD_VAR 0 3
50765: PPUSH
50766: LD_VAR 0 4
50770: PPUSH
50771: CALL_OW 488
50775: NOT
50776: OR
50777: IFFALSE 50781
// exit ;
50779: GO 51517
// side := GetSide ( depot ) ;
50781: LD_ADDR_VAR 0 9
50785: PUSH
50786: LD_VAR 0 1
50790: PPUSH
50791: CALL_OW 255
50795: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50796: LD_VAR 0 9
50800: PPUSH
50801: LD_VAR 0 2
50805: PPUSH
50806: CALL 50274 0 2
50810: NOT
50811: IFFALSE 50815
// exit ;
50813: GO 51517
// pom := GetBase ( depot ) ;
50815: LD_ADDR_VAR 0 10
50819: PUSH
50820: LD_VAR 0 1
50824: PPUSH
50825: CALL_OW 274
50829: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50830: LD_ADDR_VAR 0 11
50834: PUSH
50835: LD_VAR 0 2
50839: PPUSH
50840: LD_VAR 0 1
50844: PPUSH
50845: CALL_OW 248
50849: PPUSH
50850: CALL_OW 450
50854: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50855: LD_VAR 0 10
50859: PPUSH
50860: LD_INT 1
50862: PPUSH
50863: CALL_OW 275
50867: PUSH
50868: LD_VAR 0 11
50872: PUSH
50873: LD_INT 1
50875: ARRAY
50876: GREATEREQUAL
50877: PUSH
50878: LD_VAR 0 10
50882: PPUSH
50883: LD_INT 2
50885: PPUSH
50886: CALL_OW 275
50890: PUSH
50891: LD_VAR 0 11
50895: PUSH
50896: LD_INT 2
50898: ARRAY
50899: GREATEREQUAL
50900: AND
50901: PUSH
50902: LD_VAR 0 10
50906: PPUSH
50907: LD_INT 3
50909: PPUSH
50910: CALL_OW 275
50914: PUSH
50915: LD_VAR 0 11
50919: PUSH
50920: LD_INT 3
50922: ARRAY
50923: GREATEREQUAL
50924: AND
50925: NOT
50926: IFFALSE 50930
// exit ;
50928: GO 51517
// if GetBType ( depot ) = b_depot then
50930: LD_VAR 0 1
50934: PPUSH
50935: CALL_OW 266
50939: PUSH
50940: LD_INT 0
50942: EQUAL
50943: IFFALSE 50955
// dist := 28 else
50945: LD_ADDR_VAR 0 14
50949: PUSH
50950: LD_INT 28
50952: ST_TO_ADDR
50953: GO 50963
// dist := 36 ;
50955: LD_ADDR_VAR 0 14
50959: PUSH
50960: LD_INT 36
50962: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50963: LD_VAR 0 1
50967: PPUSH
50968: LD_VAR 0 3
50972: PPUSH
50973: LD_VAR 0 4
50977: PPUSH
50978: CALL_OW 297
50982: PUSH
50983: LD_VAR 0 14
50987: GREATER
50988: IFFALSE 50992
// exit ;
50990: GO 51517
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50992: LD_ADDR_VAR 0 12
50996: PUSH
50997: LD_VAR 0 2
51001: PPUSH
51002: LD_VAR 0 3
51006: PPUSH
51007: LD_VAR 0 4
51011: PPUSH
51012: LD_VAR 0 5
51016: PPUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: CALL_OW 248
51026: PPUSH
51027: LD_INT 0
51029: PPUSH
51030: CALL 51522 0 6
51034: ST_TO_ADDR
// if not hexes then
51035: LD_VAR 0 12
51039: NOT
51040: IFFALSE 51044
// exit ;
51042: GO 51517
// hex := GetHexInfo ( x , y ) ;
51044: LD_ADDR_VAR 0 15
51048: PUSH
51049: LD_VAR 0 3
51053: PPUSH
51054: LD_VAR 0 4
51058: PPUSH
51059: CALL_OW 546
51063: ST_TO_ADDR
// if hex [ 1 ] then
51064: LD_VAR 0 15
51068: PUSH
51069: LD_INT 1
51071: ARRAY
51072: IFFALSE 51076
// exit ;
51074: GO 51517
// height := hex [ 2 ] ;
51076: LD_ADDR_VAR 0 13
51080: PUSH
51081: LD_VAR 0 15
51085: PUSH
51086: LD_INT 2
51088: ARRAY
51089: ST_TO_ADDR
// for i = 1 to hexes do
51090: LD_ADDR_VAR 0 7
51094: PUSH
51095: DOUBLE
51096: LD_INT 1
51098: DEC
51099: ST_TO_ADDR
51100: LD_VAR 0 12
51104: PUSH
51105: FOR_TO
51106: IFFALSE 51436
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51108: LD_VAR 0 12
51112: PUSH
51113: LD_VAR 0 7
51117: ARRAY
51118: PUSH
51119: LD_INT 1
51121: ARRAY
51122: PPUSH
51123: LD_VAR 0 12
51127: PUSH
51128: LD_VAR 0 7
51132: ARRAY
51133: PUSH
51134: LD_INT 2
51136: ARRAY
51137: PPUSH
51138: CALL_OW 488
51142: NOT
51143: PUSH
51144: LD_VAR 0 12
51148: PUSH
51149: LD_VAR 0 7
51153: ARRAY
51154: PUSH
51155: LD_INT 1
51157: ARRAY
51158: PPUSH
51159: LD_VAR 0 12
51163: PUSH
51164: LD_VAR 0 7
51168: ARRAY
51169: PUSH
51170: LD_INT 2
51172: ARRAY
51173: PPUSH
51174: CALL_OW 428
51178: PUSH
51179: LD_INT 0
51181: GREATER
51182: OR
51183: PUSH
51184: LD_VAR 0 12
51188: PUSH
51189: LD_VAR 0 7
51193: ARRAY
51194: PUSH
51195: LD_INT 1
51197: ARRAY
51198: PPUSH
51199: LD_VAR 0 12
51203: PUSH
51204: LD_VAR 0 7
51208: ARRAY
51209: PUSH
51210: LD_INT 2
51212: ARRAY
51213: PPUSH
51214: CALL_OW 351
51218: OR
51219: IFFALSE 51225
// exit ;
51221: POP
51222: POP
51223: GO 51517
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51225: LD_ADDR_VAR 0 8
51229: PUSH
51230: LD_VAR 0 12
51234: PUSH
51235: LD_VAR 0 7
51239: ARRAY
51240: PUSH
51241: LD_INT 1
51243: ARRAY
51244: PPUSH
51245: LD_VAR 0 12
51249: PUSH
51250: LD_VAR 0 7
51254: ARRAY
51255: PUSH
51256: LD_INT 2
51258: ARRAY
51259: PPUSH
51260: CALL_OW 546
51264: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51265: LD_VAR 0 8
51269: PUSH
51270: LD_INT 1
51272: ARRAY
51273: PUSH
51274: LD_VAR 0 8
51278: PUSH
51279: LD_INT 2
51281: ARRAY
51282: PUSH
51283: LD_VAR 0 13
51287: PUSH
51288: LD_INT 2
51290: PLUS
51291: GREATER
51292: OR
51293: PUSH
51294: LD_VAR 0 8
51298: PUSH
51299: LD_INT 2
51301: ARRAY
51302: PUSH
51303: LD_VAR 0 13
51307: PUSH
51308: LD_INT 2
51310: MINUS
51311: LESS
51312: OR
51313: PUSH
51314: LD_VAR 0 8
51318: PUSH
51319: LD_INT 3
51321: ARRAY
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 8
51328: PUSH
51329: LD_INT 9
51331: PUSH
51332: LD_INT 10
51334: PUSH
51335: LD_INT 11
51337: PUSH
51338: LD_INT 12
51340: PUSH
51341: LD_INT 13
51343: PUSH
51344: LD_INT 16
51346: PUSH
51347: LD_INT 17
51349: PUSH
51350: LD_INT 18
51352: PUSH
51353: LD_INT 19
51355: PUSH
51356: LD_INT 20
51358: PUSH
51359: LD_INT 21
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: IN
51377: NOT
51378: OR
51379: PUSH
51380: LD_VAR 0 8
51384: PUSH
51385: LD_INT 5
51387: ARRAY
51388: NOT
51389: OR
51390: PUSH
51391: LD_VAR 0 8
51395: PUSH
51396: LD_INT 6
51398: ARRAY
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 7
51408: PUSH
51409: LD_INT 9
51411: PUSH
51412: LD_INT 10
51414: PUSH
51415: LD_INT 11
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: IN
51426: NOT
51427: OR
51428: IFFALSE 51434
// exit ;
51430: POP
51431: POP
51432: GO 51517
// end ;
51434: GO 51105
51436: POP
51437: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51438: LD_VAR 0 9
51442: PPUSH
51443: LD_VAR 0 3
51447: PPUSH
51448: LD_VAR 0 4
51452: PPUSH
51453: LD_INT 20
51455: PPUSH
51456: CALL 43440 0 4
51460: PUSH
51461: LD_INT 4
51463: ARRAY
51464: IFFALSE 51468
// exit ;
51466: GO 51517
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51468: LD_VAR 0 2
51472: PUSH
51473: LD_INT 29
51475: PUSH
51476: LD_INT 30
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: IN
51483: PUSH
51484: LD_VAR 0 3
51488: PPUSH
51489: LD_VAR 0 4
51493: PPUSH
51494: LD_VAR 0 9
51498: PPUSH
51499: CALL_OW 440
51503: NOT
51504: AND
51505: IFFALSE 51509
// exit ;
51507: GO 51517
// result := true ;
51509: LD_ADDR_VAR 0 6
51513: PUSH
51514: LD_INT 1
51516: ST_TO_ADDR
// end ;
51517: LD_VAR 0 6
51521: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51522: LD_INT 0
51524: PPUSH
51525: PPUSH
51526: PPUSH
51527: PPUSH
51528: PPUSH
51529: PPUSH
51530: PPUSH
51531: PPUSH
51532: PPUSH
51533: PPUSH
51534: PPUSH
51535: PPUSH
51536: PPUSH
51537: PPUSH
51538: PPUSH
51539: PPUSH
51540: PPUSH
51541: PPUSH
51542: PPUSH
51543: PPUSH
51544: PPUSH
51545: PPUSH
51546: PPUSH
51547: PPUSH
51548: PPUSH
51549: PPUSH
51550: PPUSH
51551: PPUSH
51552: PPUSH
51553: PPUSH
51554: PPUSH
51555: PPUSH
51556: PPUSH
51557: PPUSH
51558: PPUSH
51559: PPUSH
51560: PPUSH
51561: PPUSH
51562: PPUSH
51563: PPUSH
51564: PPUSH
51565: PPUSH
51566: PPUSH
51567: PPUSH
51568: PPUSH
51569: PPUSH
51570: PPUSH
51571: PPUSH
51572: PPUSH
51573: PPUSH
51574: PPUSH
51575: PPUSH
51576: PPUSH
51577: PPUSH
51578: PPUSH
51579: PPUSH
51580: PPUSH
51581: PPUSH
// result = [ ] ;
51582: LD_ADDR_VAR 0 7
51586: PUSH
51587: EMPTY
51588: ST_TO_ADDR
// temp_list = [ ] ;
51589: LD_ADDR_VAR 0 9
51593: PUSH
51594: EMPTY
51595: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51596: LD_VAR 0 4
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 4
51615: PUSH
51616: LD_INT 5
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: IN
51627: NOT
51628: PUSH
51629: LD_VAR 0 1
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: IN
51644: PUSH
51645: LD_VAR 0 5
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: IN
51664: NOT
51665: AND
51666: OR
51667: IFFALSE 51671
// exit ;
51669: GO 70062
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51671: LD_VAR 0 1
51675: PUSH
51676: LD_INT 6
51678: PUSH
51679: LD_INT 7
51681: PUSH
51682: LD_INT 8
51684: PUSH
51685: LD_INT 13
51687: PUSH
51688: LD_INT 12
51690: PUSH
51691: LD_INT 15
51693: PUSH
51694: LD_INT 11
51696: PUSH
51697: LD_INT 14
51699: PUSH
51700: LD_INT 10
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: IN
51714: IFFALSE 51724
// btype = b_lab ;
51716: LD_ADDR_VAR 0 1
51720: PUSH
51721: LD_INT 6
51723: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51724: LD_VAR 0 6
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: IN
51743: NOT
51744: PUSH
51745: LD_VAR 0 1
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: LD_INT 6
51764: PUSH
51765: LD_INT 36
51767: PUSH
51768: LD_INT 4
51770: PUSH
51771: LD_INT 5
51773: PUSH
51774: LD_INT 31
51776: PUSH
51777: LD_INT 32
51779: PUSH
51780: LD_INT 33
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: IN
51796: NOT
51797: PUSH
51798: LD_VAR 0 6
51802: PUSH
51803: LD_INT 1
51805: EQUAL
51806: AND
51807: OR
51808: PUSH
51809: LD_VAR 0 1
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: IN
51824: NOT
51825: PUSH
51826: LD_VAR 0 6
51830: PUSH
51831: LD_INT 2
51833: EQUAL
51834: AND
51835: OR
51836: IFFALSE 51846
// mode = 0 ;
51838: LD_ADDR_VAR 0 6
51842: PUSH
51843: LD_INT 0
51845: ST_TO_ADDR
// case mode of 0 :
51846: LD_VAR 0 6
51850: PUSH
51851: LD_INT 0
51853: DOUBLE
51854: EQUAL
51855: IFTRUE 51859
51857: GO 63312
51859: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51860: LD_ADDR_VAR 0 11
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52053: LD_ADDR_VAR 0 12
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52249: LD_ADDR_VAR 0 13
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: NEG
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52448: LD_ADDR_VAR 0 14
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52644: LD_ADDR_VAR 0 15
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52837: LD_ADDR_VAR 0 16
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53030: LD_ADDR_VAR 0 17
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53260: LD_ADDR_VAR 0 18
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53490: LD_ADDR_VAR 0 19
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53720: LD_ADDR_VAR 0 20
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53950: LD_ADDR_VAR 0 21
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54180: LD_ADDR_VAR 0 22
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54410: LD_ADDR_VAR 0 23
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54690: LD_ADDR_VAR 0 24
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54966: LD_ADDR_VAR 0 25
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55240: LD_ADDR_VAR 0 26
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55516: LD_ADDR_VAR 0 27
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55796: LD_ADDR_VAR 0 28
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56078: LD_ADDR_VAR 0 29
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56357: LD_ADDR_VAR 0 30
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56635: LD_ADDR_VAR 0 31
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56913: LD_ADDR_VAR 0 32
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 3
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57191: LD_ADDR_VAR 0 33
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57470: LD_ADDR_VAR 0 34
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57750: LD_ADDR_VAR 0 35
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57862: LD_ADDR_VAR 0 36
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57974: LD_ADDR_VAR 0 37
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58086: LD_ADDR_VAR 0 38
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58198: LD_ADDR_VAR 0 39
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58310: LD_ADDR_VAR 0 40
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58422: LD_ADDR_VAR 0 41
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58772: LD_ADDR_VAR 0 42
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: NEG
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59122: LD_ADDR_VAR 0 43
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59470: LD_ADDR_VAR 0 44
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: LD_INT 3
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 3
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: NEG
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: LD_INT 3
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59820: LD_ADDR_VAR 0 45
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 3
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60170: LD_ADDR_VAR 0 46
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60518: LD_ADDR_VAR 0 47
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60669: LD_ADDR_VAR 0 48
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60816: LD_ADDR_VAR 0 49
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60960: LD_ADDR_VAR 0 50
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61104: LD_ADDR_VAR 0 51
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61251: LD_ADDR_VAR 0 52
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61402: LD_ADDR_VAR 0 53
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61632: LD_ADDR_VAR 0 54
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61862: LD_ADDR_VAR 0 55
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62092: LD_ADDR_VAR 0 56
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62322: LD_ADDR_VAR 0 57
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: NEG
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: LD_INT 2
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62552: LD_ADDR_VAR 0 58
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: NEG
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62782: LD_ADDR_VAR 0 59
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62870: LD_ADDR_VAR 0 60
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62958: LD_ADDR_VAR 0 61
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 1
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63046: LD_ADDR_VAR 0 62
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63134: LD_ADDR_VAR 0 63
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63222: LD_ADDR_VAR 0 64
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// end ; 1 :
63310: GO 69207
63312: LD_INT 1
63314: DOUBLE
63315: EQUAL
63316: IFTRUE 63320
63318: GO 65943
63320: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63321: LD_ADDR_VAR 0 11
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 3
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 3
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63365: LD_ADDR_VAR 0 12
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: LD_INT 1
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63406: LD_ADDR_VAR 0 13
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63446: LD_ADDR_VAR 0 14
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63487: LD_ADDR_VAR 0 15
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 3
63505: NEG
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63531: LD_ADDR_VAR 0 16
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 3
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 3
63562: NEG
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63577: LD_ADDR_VAR 0 17
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 3
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 3
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63621: LD_ADDR_VAR 0 18
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63662: LD_ADDR_VAR 0 19
63666: PUSH
63667: LD_INT 3
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 3
63679: PUSH
63680: LD_INT 3
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63702: LD_ADDR_VAR 0 20
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 3
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63743: LD_ADDR_VAR 0 21
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: NEG
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 3
63772: NEG
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63787: LD_ADDR_VAR 0 22
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: NEG
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: LIST
63832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63833: LD_ADDR_VAR 0 23
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 4
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63877: LD_ADDR_VAR 0 24
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 4
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63918: LD_ADDR_VAR 0 25
63922: PUSH
63923: LD_INT 3
63925: PUSH
63926: LD_INT 3
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 4
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: LD_INT 4
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: LIST
63957: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63958: LD_ADDR_VAR 0 26
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: LD_INT 3
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 4
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63999: LD_ADDR_VAR 0 27
64003: PUSH
64004: LD_INT 3
64006: NEG
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 4
64028: NEG
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64043: LD_ADDR_VAR 0 28
64047: PUSH
64048: LD_INT 3
64050: NEG
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: LD_INT 4
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 4
64074: NEG
64075: PUSH
64076: LD_INT 3
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64089: LD_ADDR_VAR 0 29
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 3
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 4
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 4
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 5
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 5
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: LD_INT 4
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 6
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 6
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: LD_INT 5
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64244: LD_ADDR_VAR 0 30
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 4
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 4
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 5
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 5
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 5
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 6
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 6
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64387: LD_ADDR_VAR 0 31
64391: PUSH
64392: LD_INT 3
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 4
64424: PUSH
64425: LD_INT 3
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: LD_INT 4
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: LD_INT 4
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 5
64454: PUSH
64455: LD_INT 4
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 5
64464: PUSH
64465: LD_INT 5
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 4
64474: PUSH
64475: LD_INT 5
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 6
64484: PUSH
64485: LD_INT 5
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 6
64494: PUSH
64495: LD_INT 6
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 5
64504: PUSH
64505: LD_INT 6
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64526: LD_ADDR_VAR 0 32
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 4
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 5
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 5
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 4
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 6
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: LD_INT 6
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 5
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64669: LD_ADDR_VAR 0 33
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: NEG
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 4
64721: NEG
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 4
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 4
64744: NEG
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 5
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 5
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 5
64778: NEG
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 6
64789: NEG
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 6
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64824: LD_ADDR_VAR 0 34
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: LD_INT 3
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: NEG
64844: PUSH
64845: LD_INT 2
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 3
64855: NEG
64856: PUSH
64857: LD_INT 3
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: LD_INT 4
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 4
64879: NEG
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: NEG
64892: PUSH
64893: LD_INT 4
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 4
64903: NEG
64904: PUSH
64905: LD_INT 5
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 5
64915: NEG
64916: PUSH
64917: LD_INT 4
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 5
64927: NEG
64928: PUSH
64929: LD_INT 5
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 5
64939: NEG
64940: PUSH
64941: LD_INT 6
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 6
64951: NEG
64952: PUSH
64953: LD_INT 5
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 6
64963: NEG
64964: PUSH
64965: LD_INT 6
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64987: LD_ADDR_VAR 0 41
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: LD_INT 2
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65031: LD_ADDR_VAR 0 42
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65072: LD_ADDR_VAR 0 43
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: LD_INT 2
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: LD_INT 3
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: LIST
65111: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65112: LD_ADDR_VAR 0 44
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65153: LD_ADDR_VAR 0 45
65157: PUSH
65158: LD_INT 2
65160: NEG
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65197: LD_ADDR_VAR 0 46
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 2
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65243: LD_ADDR_VAR 0 47
65247: PUSH
65248: LD_INT 2
65250: NEG
65251: PUSH
65252: LD_INT 3
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65276: LD_ADDR_VAR 0 48
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: LD_INT 2
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 2
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65307: LD_ADDR_VAR 0 49
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65336: LD_ADDR_VAR 0 50
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: LD_INT 3
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65365: LD_ADDR_VAR 0 51
65369: PUSH
65370: LD_INT 1
65372: NEG
65373: PUSH
65374: LD_INT 2
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65396: LD_ADDR_VAR 0 52
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 3
65415: NEG
65416: PUSH
65417: LD_INT 2
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65429: LD_ADDR_VAR 0 53
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 3
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65473: LD_ADDR_VAR 0 54
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65514: LD_ADDR_VAR 0 55
65518: PUSH
65519: LD_INT 3
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 3
65531: PUSH
65532: LD_INT 3
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65554: LD_ADDR_VAR 0 56
65558: PUSH
65559: LD_INT 1
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65595: LD_ADDR_VAR 0 57
65599: PUSH
65600: LD_INT 2
65602: NEG
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 3
65613: NEG
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65639: LD_ADDR_VAR 0 58
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 3
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65685: LD_ADDR_VAR 0 59
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 2
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 2
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65729: LD_ADDR_VAR 0 60
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65770: LD_ADDR_VAR 0 61
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65810: LD_ADDR_VAR 0 62
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: LD_INT 1
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: LIST
65850: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65851: LD_ADDR_VAR 0 63
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 2
65869: NEG
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65895: LD_ADDR_VAR 0 64
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 2
65914: NEG
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: ST_TO_ADDR
// end ; 2 :
65941: GO 69207
65943: LD_INT 2
65945: DOUBLE
65946: EQUAL
65947: IFTRUE 65951
65949: GO 69206
65951: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65952: LD_ADDR_VAR 0 29
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 4
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 5
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 5
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 3
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 3
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 3
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 5
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 4
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 4
66082: PUSH
66083: LD_INT 4
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: LD_INT 4
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 4
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 2
66132: PUSH
66133: LD_INT 4
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 4
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 3
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 4
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 5
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 5
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 4
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: LD_INT 5
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 2
66224: NEG
66225: PUSH
66226: LD_INT 3
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 3
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 4
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 4
66314: NEG
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: NEG
66327: PUSH
66328: LD_INT 2
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 4
66337: NEG
66338: PUSH
66339: LD_INT 4
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 4
66349: NEG
66350: PUSH
66351: LD_INT 5
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: LD_INT 4
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 3
66373: NEG
66374: PUSH
66375: LD_INT 3
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 4
66385: NEG
66386: PUSH
66387: LD_INT 3
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 5
66397: NEG
66398: PUSH
66399: LD_INT 4
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 5
66409: NEG
66410: PUSH
66411: LD_INT 5
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 3
66421: NEG
66422: PUSH
66423: LD_INT 5
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 5
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66490: LD_ADDR_VAR 0 30
66494: PUSH
66495: LD_INT 4
66497: PUSH
66498: LD_INT 4
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 4
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 5
66517: PUSH
66518: LD_INT 4
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 5
66527: PUSH
66528: LD_INT 5
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 4
66537: PUSH
66538: LD_INT 5
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: LD_INT 4
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: LD_INT 3
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 5
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: LD_INT 5
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 2
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: LD_INT 3
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: LD_INT 4
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 4
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: LD_INT 3
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: LD_INT 4
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 2
66669: NEG
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 4
66680: NEG
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 4
66691: NEG
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 5
66736: NEG
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 5
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 5
66759: NEG
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 3
66782: NEG
66783: PUSH
66784: LD_INT 3
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: NEG
66795: PUSH
66796: LD_INT 4
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: NEG
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: NEG
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: LD_INT 2
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 4
66842: NEG
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 4
66854: NEG
66855: PUSH
66856: LD_INT 4
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 4
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 4
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 4
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: LD_INT 5
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: LD_INT 4
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 3
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: LD_INT 3
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 1
66945: NEG
66946: PUSH
66947: LD_INT 4
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: NEG
66958: PUSH
66959: LD_INT 5
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: LD_INT 3
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 2
66980: NEG
66981: PUSH
66982: LD_INT 5
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67037: LD_ADDR_VAR 0 31
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 4
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: LD_INT 5
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 5
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: LD_INT 4
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: LD_INT 3
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 2
67116: PUSH
67117: LD_INT 5
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 2
67171: NEG
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 4
67193: NEG
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 4
67204: NEG
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 4
67216: NEG
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 4
67239: NEG
67240: PUSH
67241: LD_INT 4
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 4
67251: NEG
67252: PUSH
67253: LD_INT 5
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: LD_INT 4
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 3
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 5
67299: NEG
67300: PUSH
67301: LD_INT 4
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 5
67311: NEG
67312: PUSH
67313: LD_INT 5
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: LD_INT 5
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 5
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 4
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 3
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: LD_INT 2
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: LD_INT 2
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: PUSH
67404: LD_INT 3
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: LD_INT 4
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: LD_INT 2
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 2
67437: NEG
67438: PUSH
67439: LD_INT 4
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 4
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 5
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 5
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 4
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: LD_INT 1
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 5
67532: PUSH
67533: LD_INT 2
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67587: LD_ADDR_VAR 0 32
67591: PUSH
67592: LD_INT 4
67594: NEG
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 4
67605: NEG
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 3
67628: NEG
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 4
67639: NEG
67640: PUSH
67641: LD_INT 1
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 5
67650: NEG
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 5
67661: NEG
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 5
67673: NEG
67674: PUSH
67675: LD_INT 2
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: LD_INT 3
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 3
67708: NEG
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 2
67720: NEG
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: LD_INT 2
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 4
67756: NEG
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 4
67768: NEG
67769: PUSH
67770: LD_INT 4
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: NEG
67781: PUSH
67782: LD_INT 4
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 4
67792: NEG
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 4
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 5
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: LD_INT 4
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: LD_INT 4
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: LD_INT 5
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 2
67894: NEG
67895: PUSH
67896: LD_INT 5
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 4
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 2
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 2
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 4
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 4
67999: PUSH
68000: LD_INT 4
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 4
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 5
68019: PUSH
68020: LD_INT 4
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 5
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 4
68039: PUSH
68040: LD_INT 5
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 4
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 3
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 5
68069: PUSH
68070: LD_INT 3
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: LD_INT 5
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68134: LD_ADDR_VAR 0 33
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 4
68153: NEG
68154: PUSH
68155: LD_INT 5
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 3
68165: NEG
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: LD_INT 3
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: LD_INT 3
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 5
68201: NEG
68202: PUSH
68203: LD_INT 4
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 5
68213: NEG
68214: PUSH
68215: LD_INT 5
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: LD_INT 5
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 5
68237: NEG
68238: PUSH
68239: LD_INT 3
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: LD_INT 3
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: LD_INT 4
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: LD_INT 3
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_INT 2
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: LD_INT 3
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 1
68316: NEG
68317: PUSH
68318: LD_INT 4
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 2
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: LD_INT 4
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 4
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 4
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 5
68372: PUSH
68373: LD_INT 0
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 5
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: LD_INT 1
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 3
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 3
68412: PUSH
68413: LD_INT 1
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: PUSH
68424: LD_INT 2
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 5
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 3
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 3
68454: PUSH
68455: LD_INT 2
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 4
68464: PUSH
68465: LD_INT 3
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 4
68474: PUSH
68475: LD_INT 4
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: LD_INT 4
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 2
68494: PUSH
68495: LD_INT 3
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 2
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 4
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: PUSH
68525: LD_INT 4
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: LD_INT 4
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: LD_INT 3
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 1
68554: PUSH
68555: LD_INT 4
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: LD_INT 5
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 5
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: LD_INT 4
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: LD_INT 5
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 2
68616: NEG
68617: PUSH
68618: LD_INT 3
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68672: LD_ADDR_VAR 0 34
68676: PUSH
68677: LD_INT 0
68679: PUSH
68680: LD_INT 4
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: LD_INT 5
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: LD_INT 4
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: LD_INT 4
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: NEG
68747: PUSH
68748: LD_INT 5
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 2
68758: PUSH
68759: LD_INT 3
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 2
68769: NEG
68770: PUSH
68771: LD_INT 5
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: LD_INT 1
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 4
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 4
68812: PUSH
68813: LD_INT 1
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 1
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 0
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: LD_INT 1
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 4
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: LD_INT 4
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 4
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 5
68894: PUSH
68895: LD_INT 4
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 5
68904: PUSH
68905: LD_INT 5
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: LD_INT 5
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: LD_INT 4
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 3
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: PUSH
68945: LD_INT 3
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 3
68954: PUSH
68955: LD_INT 5
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 3
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 1
68984: PUSH
68985: LD_INT 3
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 1
68994: PUSH
68995: LD_INT 4
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: LD_INT 4
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: LD_INT 3
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 1
69025: NEG
69026: PUSH
69027: LD_INT 2
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 2
69036: PUSH
69037: LD_INT 4
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 2
69046: NEG
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 4
69057: NEG
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: NEG
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: NEG
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 5
69113: NEG
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 5
69124: NEG
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 5
69136: NEG
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: ST_TO_ADDR
// end ; end ;
69204: GO 69207
69206: POP
// case btype of b_depot , b_warehouse :
69207: LD_VAR 0 1
69211: PUSH
69212: LD_INT 0
69214: DOUBLE
69215: EQUAL
69216: IFTRUE 69226
69218: LD_INT 1
69220: DOUBLE
69221: EQUAL
69222: IFTRUE 69226
69224: GO 69427
69226: POP
// case nation of nation_american :
69227: LD_VAR 0 5
69231: PUSH
69232: LD_INT 1
69234: DOUBLE
69235: EQUAL
69236: IFTRUE 69240
69238: GO 69296
69240: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69241: LD_ADDR_VAR 0 9
69245: PUSH
69246: LD_VAR 0 11
69250: PUSH
69251: LD_VAR 0 12
69255: PUSH
69256: LD_VAR 0 13
69260: PUSH
69261: LD_VAR 0 14
69265: PUSH
69266: LD_VAR 0 15
69270: PUSH
69271: LD_VAR 0 16
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: PUSH
69284: LD_VAR 0 4
69288: PUSH
69289: LD_INT 1
69291: PLUS
69292: ARRAY
69293: ST_TO_ADDR
69294: GO 69425
69296: LD_INT 2
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69304
69302: GO 69360
69304: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69305: LD_ADDR_VAR 0 9
69309: PUSH
69310: LD_VAR 0 17
69314: PUSH
69315: LD_VAR 0 18
69319: PUSH
69320: LD_VAR 0 19
69324: PUSH
69325: LD_VAR 0 20
69329: PUSH
69330: LD_VAR 0 21
69334: PUSH
69335: LD_VAR 0 22
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: PUSH
69348: LD_VAR 0 4
69352: PUSH
69353: LD_INT 1
69355: PLUS
69356: ARRAY
69357: ST_TO_ADDR
69358: GO 69425
69360: LD_INT 3
69362: DOUBLE
69363: EQUAL
69364: IFTRUE 69368
69366: GO 69424
69368: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69369: LD_ADDR_VAR 0 9
69373: PUSH
69374: LD_VAR 0 23
69378: PUSH
69379: LD_VAR 0 24
69383: PUSH
69384: LD_VAR 0 25
69388: PUSH
69389: LD_VAR 0 26
69393: PUSH
69394: LD_VAR 0 27
69398: PUSH
69399: LD_VAR 0 28
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: PUSH
69412: LD_VAR 0 4
69416: PUSH
69417: LD_INT 1
69419: PLUS
69420: ARRAY
69421: ST_TO_ADDR
69422: GO 69425
69424: POP
69425: GO 69980
69427: LD_INT 2
69429: DOUBLE
69430: EQUAL
69431: IFTRUE 69441
69433: LD_INT 3
69435: DOUBLE
69436: EQUAL
69437: IFTRUE 69441
69439: GO 69497
69441: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69442: LD_ADDR_VAR 0 9
69446: PUSH
69447: LD_VAR 0 29
69451: PUSH
69452: LD_VAR 0 30
69456: PUSH
69457: LD_VAR 0 31
69461: PUSH
69462: LD_VAR 0 32
69466: PUSH
69467: LD_VAR 0 33
69471: PUSH
69472: LD_VAR 0 34
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: PUSH
69485: LD_VAR 0 4
69489: PUSH
69490: LD_INT 1
69492: PLUS
69493: ARRAY
69494: ST_TO_ADDR
69495: GO 69980
69497: LD_INT 16
69499: DOUBLE
69500: EQUAL
69501: IFTRUE 69559
69503: LD_INT 17
69505: DOUBLE
69506: EQUAL
69507: IFTRUE 69559
69509: LD_INT 18
69511: DOUBLE
69512: EQUAL
69513: IFTRUE 69559
69515: LD_INT 19
69517: DOUBLE
69518: EQUAL
69519: IFTRUE 69559
69521: LD_INT 22
69523: DOUBLE
69524: EQUAL
69525: IFTRUE 69559
69527: LD_INT 20
69529: DOUBLE
69530: EQUAL
69531: IFTRUE 69559
69533: LD_INT 21
69535: DOUBLE
69536: EQUAL
69537: IFTRUE 69559
69539: LD_INT 23
69541: DOUBLE
69542: EQUAL
69543: IFTRUE 69559
69545: LD_INT 24
69547: DOUBLE
69548: EQUAL
69549: IFTRUE 69559
69551: LD_INT 25
69553: DOUBLE
69554: EQUAL
69555: IFTRUE 69559
69557: GO 69615
69559: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69560: LD_ADDR_VAR 0 9
69564: PUSH
69565: LD_VAR 0 35
69569: PUSH
69570: LD_VAR 0 36
69574: PUSH
69575: LD_VAR 0 37
69579: PUSH
69580: LD_VAR 0 38
69584: PUSH
69585: LD_VAR 0 39
69589: PUSH
69590: LD_VAR 0 40
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: PUSH
69603: LD_VAR 0 4
69607: PUSH
69608: LD_INT 1
69610: PLUS
69611: ARRAY
69612: ST_TO_ADDR
69613: GO 69980
69615: LD_INT 6
69617: DOUBLE
69618: EQUAL
69619: IFTRUE 69671
69621: LD_INT 7
69623: DOUBLE
69624: EQUAL
69625: IFTRUE 69671
69627: LD_INT 8
69629: DOUBLE
69630: EQUAL
69631: IFTRUE 69671
69633: LD_INT 13
69635: DOUBLE
69636: EQUAL
69637: IFTRUE 69671
69639: LD_INT 12
69641: DOUBLE
69642: EQUAL
69643: IFTRUE 69671
69645: LD_INT 15
69647: DOUBLE
69648: EQUAL
69649: IFTRUE 69671
69651: LD_INT 11
69653: DOUBLE
69654: EQUAL
69655: IFTRUE 69671
69657: LD_INT 14
69659: DOUBLE
69660: EQUAL
69661: IFTRUE 69671
69663: LD_INT 10
69665: DOUBLE
69666: EQUAL
69667: IFTRUE 69671
69669: GO 69727
69671: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69672: LD_ADDR_VAR 0 9
69676: PUSH
69677: LD_VAR 0 41
69681: PUSH
69682: LD_VAR 0 42
69686: PUSH
69687: LD_VAR 0 43
69691: PUSH
69692: LD_VAR 0 44
69696: PUSH
69697: LD_VAR 0 45
69701: PUSH
69702: LD_VAR 0 46
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: PUSH
69715: LD_VAR 0 4
69719: PUSH
69720: LD_INT 1
69722: PLUS
69723: ARRAY
69724: ST_TO_ADDR
69725: GO 69980
69727: LD_INT 36
69729: DOUBLE
69730: EQUAL
69731: IFTRUE 69735
69733: GO 69791
69735: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69736: LD_ADDR_VAR 0 9
69740: PUSH
69741: LD_VAR 0 47
69745: PUSH
69746: LD_VAR 0 48
69750: PUSH
69751: LD_VAR 0 49
69755: PUSH
69756: LD_VAR 0 50
69760: PUSH
69761: LD_VAR 0 51
69765: PUSH
69766: LD_VAR 0 52
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: PUSH
69779: LD_VAR 0 4
69783: PUSH
69784: LD_INT 1
69786: PLUS
69787: ARRAY
69788: ST_TO_ADDR
69789: GO 69980
69791: LD_INT 4
69793: DOUBLE
69794: EQUAL
69795: IFTRUE 69817
69797: LD_INT 5
69799: DOUBLE
69800: EQUAL
69801: IFTRUE 69817
69803: LD_INT 34
69805: DOUBLE
69806: EQUAL
69807: IFTRUE 69817
69809: LD_INT 37
69811: DOUBLE
69812: EQUAL
69813: IFTRUE 69817
69815: GO 69873
69817: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69818: LD_ADDR_VAR 0 9
69822: PUSH
69823: LD_VAR 0 53
69827: PUSH
69828: LD_VAR 0 54
69832: PUSH
69833: LD_VAR 0 55
69837: PUSH
69838: LD_VAR 0 56
69842: PUSH
69843: LD_VAR 0 57
69847: PUSH
69848: LD_VAR 0 58
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: PUSH
69861: LD_VAR 0 4
69865: PUSH
69866: LD_INT 1
69868: PLUS
69869: ARRAY
69870: ST_TO_ADDR
69871: GO 69980
69873: LD_INT 31
69875: DOUBLE
69876: EQUAL
69877: IFTRUE 69923
69879: LD_INT 32
69881: DOUBLE
69882: EQUAL
69883: IFTRUE 69923
69885: LD_INT 33
69887: DOUBLE
69888: EQUAL
69889: IFTRUE 69923
69891: LD_INT 27
69893: DOUBLE
69894: EQUAL
69895: IFTRUE 69923
69897: LD_INT 26
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69923
69903: LD_INT 28
69905: DOUBLE
69906: EQUAL
69907: IFTRUE 69923
69909: LD_INT 29
69911: DOUBLE
69912: EQUAL
69913: IFTRUE 69923
69915: LD_INT 30
69917: DOUBLE
69918: EQUAL
69919: IFTRUE 69923
69921: GO 69979
69923: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69924: LD_ADDR_VAR 0 9
69928: PUSH
69929: LD_VAR 0 59
69933: PUSH
69934: LD_VAR 0 60
69938: PUSH
69939: LD_VAR 0 61
69943: PUSH
69944: LD_VAR 0 62
69948: PUSH
69949: LD_VAR 0 63
69953: PUSH
69954: LD_VAR 0 64
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: PUSH
69967: LD_VAR 0 4
69971: PUSH
69972: LD_INT 1
69974: PLUS
69975: ARRAY
69976: ST_TO_ADDR
69977: GO 69980
69979: POP
// temp_list2 = [ ] ;
69980: LD_ADDR_VAR 0 10
69984: PUSH
69985: EMPTY
69986: ST_TO_ADDR
// for i in temp_list do
69987: LD_ADDR_VAR 0 8
69991: PUSH
69992: LD_VAR 0 9
69996: PUSH
69997: FOR_IN
69998: IFFALSE 70050
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70000: LD_ADDR_VAR 0 10
70004: PUSH
70005: LD_VAR 0 10
70009: PUSH
70010: LD_VAR 0 8
70014: PUSH
70015: LD_INT 1
70017: ARRAY
70018: PUSH
70019: LD_VAR 0 2
70023: PLUS
70024: PUSH
70025: LD_VAR 0 8
70029: PUSH
70030: LD_INT 2
70032: ARRAY
70033: PUSH
70034: LD_VAR 0 3
70038: PLUS
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: ADD
70047: ST_TO_ADDR
70048: GO 69997
70050: POP
70051: POP
// result = temp_list2 ;
70052: LD_ADDR_VAR 0 7
70056: PUSH
70057: LD_VAR 0 10
70061: ST_TO_ADDR
// end ;
70062: LD_VAR 0 7
70066: RET
// export function EnemyInRange ( unit , dist ) ; begin
70067: LD_INT 0
70069: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70070: LD_ADDR_VAR 0 3
70074: PUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: CALL_OW 255
70084: PPUSH
70085: LD_VAR 0 1
70089: PPUSH
70090: CALL_OW 250
70094: PPUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: CALL_OW 251
70104: PPUSH
70105: LD_VAR 0 2
70109: PPUSH
70110: CALL 43440 0 4
70114: PUSH
70115: LD_INT 4
70117: ARRAY
70118: ST_TO_ADDR
// end ;
70119: LD_VAR 0 3
70123: RET
// export function PlayerSeeMe ( unit ) ; begin
70124: LD_INT 0
70126: PPUSH
// result := See ( your_side , unit ) ;
70127: LD_ADDR_VAR 0 2
70131: PUSH
70132: LD_OWVAR 2
70136: PPUSH
70137: LD_VAR 0 1
70141: PPUSH
70142: CALL_OW 292
70146: ST_TO_ADDR
// end ;
70147: LD_VAR 0 2
70151: RET
// export function ReverseDir ( unit ) ; begin
70152: LD_INT 0
70154: PPUSH
// if not unit then
70155: LD_VAR 0 1
70159: NOT
70160: IFFALSE 70164
// exit ;
70162: GO 70187
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70164: LD_ADDR_VAR 0 2
70168: PUSH
70169: LD_VAR 0 1
70173: PPUSH
70174: CALL_OW 254
70178: PUSH
70179: LD_INT 3
70181: PLUS
70182: PUSH
70183: LD_INT 6
70185: MOD
70186: ST_TO_ADDR
// end ;
70187: LD_VAR 0 2
70191: RET
// export function ReverseArray ( array ) ; var i ; begin
70192: LD_INT 0
70194: PPUSH
70195: PPUSH
// if not array then
70196: LD_VAR 0 1
70200: NOT
70201: IFFALSE 70205
// exit ;
70203: GO 70260
// result := [ ] ;
70205: LD_ADDR_VAR 0 2
70209: PUSH
70210: EMPTY
70211: ST_TO_ADDR
// for i := array downto 1 do
70212: LD_ADDR_VAR 0 3
70216: PUSH
70217: DOUBLE
70218: LD_VAR 0 1
70222: INC
70223: ST_TO_ADDR
70224: LD_INT 1
70226: PUSH
70227: FOR_DOWNTO
70228: IFFALSE 70258
// result := Join ( result , array [ i ] ) ;
70230: LD_ADDR_VAR 0 2
70234: PUSH
70235: LD_VAR 0 2
70239: PPUSH
70240: LD_VAR 0 1
70244: PUSH
70245: LD_VAR 0 3
70249: ARRAY
70250: PPUSH
70251: CALL 74916 0 2
70255: ST_TO_ADDR
70256: GO 70227
70258: POP
70259: POP
// end ;
70260: LD_VAR 0 2
70264: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70265: LD_INT 0
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
70271: PPUSH
70272: PPUSH
// if not unit or not hexes then
70273: LD_VAR 0 1
70277: NOT
70278: PUSH
70279: LD_VAR 0 2
70283: NOT
70284: OR
70285: IFFALSE 70289
// exit ;
70287: GO 70412
// dist := 9999 ;
70289: LD_ADDR_VAR 0 5
70293: PUSH
70294: LD_INT 9999
70296: ST_TO_ADDR
// for i = 1 to hexes do
70297: LD_ADDR_VAR 0 4
70301: PUSH
70302: DOUBLE
70303: LD_INT 1
70305: DEC
70306: ST_TO_ADDR
70307: LD_VAR 0 2
70311: PUSH
70312: FOR_TO
70313: IFFALSE 70400
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70315: LD_ADDR_VAR 0 6
70319: PUSH
70320: LD_VAR 0 1
70324: PPUSH
70325: LD_VAR 0 2
70329: PUSH
70330: LD_VAR 0 4
70334: ARRAY
70335: PUSH
70336: LD_INT 1
70338: ARRAY
70339: PPUSH
70340: LD_VAR 0 2
70344: PUSH
70345: LD_VAR 0 4
70349: ARRAY
70350: PUSH
70351: LD_INT 2
70353: ARRAY
70354: PPUSH
70355: CALL_OW 297
70359: ST_TO_ADDR
// if tdist < dist then
70360: LD_VAR 0 6
70364: PUSH
70365: LD_VAR 0 5
70369: LESS
70370: IFFALSE 70398
// begin hex := hexes [ i ] ;
70372: LD_ADDR_VAR 0 8
70376: PUSH
70377: LD_VAR 0 2
70381: PUSH
70382: LD_VAR 0 4
70386: ARRAY
70387: ST_TO_ADDR
// dist := tdist ;
70388: LD_ADDR_VAR 0 5
70392: PUSH
70393: LD_VAR 0 6
70397: ST_TO_ADDR
// end ; end ;
70398: GO 70312
70400: POP
70401: POP
// result := hex ;
70402: LD_ADDR_VAR 0 3
70406: PUSH
70407: LD_VAR 0 8
70411: ST_TO_ADDR
// end ;
70412: LD_VAR 0 3
70416: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70417: LD_INT 0
70419: PPUSH
70420: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70421: LD_VAR 0 1
70425: NOT
70426: PUSH
70427: LD_VAR 0 1
70431: PUSH
70432: LD_INT 21
70434: PUSH
70435: LD_INT 2
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 23
70444: PUSH
70445: LD_INT 2
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PPUSH
70456: CALL_OW 69
70460: IN
70461: NOT
70462: OR
70463: IFFALSE 70467
// exit ;
70465: GO 70514
// for i = 1 to 3 do
70467: LD_ADDR_VAR 0 3
70471: PUSH
70472: DOUBLE
70473: LD_INT 1
70475: DEC
70476: ST_TO_ADDR
70477: LD_INT 3
70479: PUSH
70480: FOR_TO
70481: IFFALSE 70512
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70483: LD_VAR 0 1
70487: PPUSH
70488: CALL_OW 250
70492: PPUSH
70493: LD_VAR 0 1
70497: PPUSH
70498: CALL_OW 251
70502: PPUSH
70503: LD_INT 1
70505: PPUSH
70506: CALL_OW 453
70510: GO 70480
70512: POP
70513: POP
// end ;
70514: LD_VAR 0 2
70518: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70519: LD_INT 0
70521: PPUSH
70522: PPUSH
70523: PPUSH
70524: PPUSH
70525: PPUSH
70526: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70527: LD_VAR 0 1
70531: NOT
70532: PUSH
70533: LD_VAR 0 2
70537: NOT
70538: OR
70539: PUSH
70540: LD_VAR 0 1
70544: PPUSH
70545: CALL_OW 314
70549: OR
70550: IFFALSE 70554
// exit ;
70552: GO 71021
// if GetLives ( i ) < 250 then
70554: LD_VAR 0 4
70558: PPUSH
70559: CALL_OW 256
70563: PUSH
70564: LD_INT 250
70566: LESS
70567: IFFALSE 70580
// begin ComAutodestruct ( i ) ;
70569: LD_VAR 0 4
70573: PPUSH
70574: CALL 70417 0 1
// exit ;
70578: GO 71021
// end ; x := GetX ( enemy_unit ) ;
70580: LD_ADDR_VAR 0 7
70584: PUSH
70585: LD_VAR 0 2
70589: PPUSH
70590: CALL_OW 250
70594: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70595: LD_ADDR_VAR 0 8
70599: PUSH
70600: LD_VAR 0 2
70604: PPUSH
70605: CALL_OW 251
70609: ST_TO_ADDR
// if not x or not y then
70610: LD_VAR 0 7
70614: NOT
70615: PUSH
70616: LD_VAR 0 8
70620: NOT
70621: OR
70622: IFFALSE 70626
// exit ;
70624: GO 71021
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70626: LD_ADDR_VAR 0 6
70630: PUSH
70631: LD_VAR 0 7
70635: PPUSH
70636: LD_INT 0
70638: PPUSH
70639: LD_INT 4
70641: PPUSH
70642: CALL_OW 272
70646: PUSH
70647: LD_VAR 0 8
70651: PPUSH
70652: LD_INT 0
70654: PPUSH
70655: LD_INT 4
70657: PPUSH
70658: CALL_OW 273
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_VAR 0 7
70671: PPUSH
70672: LD_INT 1
70674: PPUSH
70675: LD_INT 4
70677: PPUSH
70678: CALL_OW 272
70682: PUSH
70683: LD_VAR 0 8
70687: PPUSH
70688: LD_INT 1
70690: PPUSH
70691: LD_INT 4
70693: PPUSH
70694: CALL_OW 273
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_VAR 0 7
70707: PPUSH
70708: LD_INT 2
70710: PPUSH
70711: LD_INT 4
70713: PPUSH
70714: CALL_OW 272
70718: PUSH
70719: LD_VAR 0 8
70723: PPUSH
70724: LD_INT 2
70726: PPUSH
70727: LD_INT 4
70729: PPUSH
70730: CALL_OW 273
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_VAR 0 7
70743: PPUSH
70744: LD_INT 3
70746: PPUSH
70747: LD_INT 4
70749: PPUSH
70750: CALL_OW 272
70754: PUSH
70755: LD_VAR 0 8
70759: PPUSH
70760: LD_INT 3
70762: PPUSH
70763: LD_INT 4
70765: PPUSH
70766: CALL_OW 273
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_VAR 0 7
70779: PPUSH
70780: LD_INT 4
70782: PPUSH
70783: LD_INT 4
70785: PPUSH
70786: CALL_OW 272
70790: PUSH
70791: LD_VAR 0 8
70795: PPUSH
70796: LD_INT 4
70798: PPUSH
70799: LD_INT 4
70801: PPUSH
70802: CALL_OW 273
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_VAR 0 7
70815: PPUSH
70816: LD_INT 5
70818: PPUSH
70819: LD_INT 4
70821: PPUSH
70822: CALL_OW 272
70826: PUSH
70827: LD_VAR 0 8
70831: PPUSH
70832: LD_INT 5
70834: PPUSH
70835: LD_INT 4
70837: PPUSH
70838: CALL_OW 273
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: ST_TO_ADDR
// for i = tmp downto 1 do
70855: LD_ADDR_VAR 0 4
70859: PUSH
70860: DOUBLE
70861: LD_VAR 0 6
70865: INC
70866: ST_TO_ADDR
70867: LD_INT 1
70869: PUSH
70870: FOR_DOWNTO
70871: IFFALSE 70972
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70873: LD_VAR 0 6
70877: PUSH
70878: LD_VAR 0 4
70882: ARRAY
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PPUSH
70888: LD_VAR 0 6
70892: PUSH
70893: LD_VAR 0 4
70897: ARRAY
70898: PUSH
70899: LD_INT 2
70901: ARRAY
70902: PPUSH
70903: CALL_OW 488
70907: NOT
70908: PUSH
70909: LD_VAR 0 6
70913: PUSH
70914: LD_VAR 0 4
70918: ARRAY
70919: PUSH
70920: LD_INT 1
70922: ARRAY
70923: PPUSH
70924: LD_VAR 0 6
70928: PUSH
70929: LD_VAR 0 4
70933: ARRAY
70934: PUSH
70935: LD_INT 2
70937: ARRAY
70938: PPUSH
70939: CALL_OW 428
70943: PUSH
70944: LD_INT 0
70946: NONEQUAL
70947: OR
70948: IFFALSE 70970
// tmp := Delete ( tmp , i ) ;
70950: LD_ADDR_VAR 0 6
70954: PUSH
70955: LD_VAR 0 6
70959: PPUSH
70960: LD_VAR 0 4
70964: PPUSH
70965: CALL_OW 3
70969: ST_TO_ADDR
70970: GO 70870
70972: POP
70973: POP
// j := GetClosestHex ( unit , tmp ) ;
70974: LD_ADDR_VAR 0 5
70978: PUSH
70979: LD_VAR 0 1
70983: PPUSH
70984: LD_VAR 0 6
70988: PPUSH
70989: CALL 70265 0 2
70993: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70994: LD_VAR 0 1
70998: PPUSH
70999: LD_VAR 0 5
71003: PUSH
71004: LD_INT 1
71006: ARRAY
71007: PPUSH
71008: LD_VAR 0 5
71012: PUSH
71013: LD_INT 2
71015: ARRAY
71016: PPUSH
71017: CALL_OW 111
// end ;
71021: LD_VAR 0 3
71025: RET
// export function PrepareApemanSoldier ( ) ; begin
71026: LD_INT 0
71028: PPUSH
// uc_nation := 0 ;
71029: LD_ADDR_OWVAR 21
71033: PUSH
71034: LD_INT 0
71036: ST_TO_ADDR
// hc_sex := sex_male ;
71037: LD_ADDR_OWVAR 27
71041: PUSH
71042: LD_INT 1
71044: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71045: LD_ADDR_OWVAR 28
71049: PUSH
71050: LD_INT 15
71052: ST_TO_ADDR
// hc_gallery :=  ;
71053: LD_ADDR_OWVAR 33
71057: PUSH
71058: LD_STRING 
71060: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71061: LD_ADDR_OWVAR 31
71065: PUSH
71066: LD_INT 0
71068: PPUSH
71069: LD_INT 3
71071: PPUSH
71072: CALL_OW 12
71076: PUSH
71077: LD_INT 0
71079: PPUSH
71080: LD_INT 3
71082: PPUSH
71083: CALL_OW 12
71087: PUSH
71088: LD_INT 0
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: ST_TO_ADDR
// end ;
71100: LD_VAR 0 1
71104: RET
// export function PrepareApemanEngineer ( ) ; begin
71105: LD_INT 0
71107: PPUSH
// uc_nation := 0 ;
71108: LD_ADDR_OWVAR 21
71112: PUSH
71113: LD_INT 0
71115: ST_TO_ADDR
// hc_sex := sex_male ;
71116: LD_ADDR_OWVAR 27
71120: PUSH
71121: LD_INT 1
71123: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71124: LD_ADDR_OWVAR 28
71128: PUSH
71129: LD_INT 16
71131: ST_TO_ADDR
// hc_gallery :=  ;
71132: LD_ADDR_OWVAR 33
71136: PUSH
71137: LD_STRING 
71139: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71140: LD_ADDR_OWVAR 31
71144: PUSH
71145: LD_INT 0
71147: PPUSH
71148: LD_INT 3
71150: PPUSH
71151: CALL_OW 12
71155: PUSH
71156: LD_INT 0
71158: PPUSH
71159: LD_INT 3
71161: PPUSH
71162: CALL_OW 12
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: LD_INT 0
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: ST_TO_ADDR
// end ;
71179: LD_VAR 0 1
71183: RET
// export function PrepareApeman ( agressivity ) ; begin
71184: LD_INT 0
71186: PPUSH
// uc_side := 0 ;
71187: LD_ADDR_OWVAR 20
71191: PUSH
71192: LD_INT 0
71194: ST_TO_ADDR
// uc_nation := 0 ;
71195: LD_ADDR_OWVAR 21
71199: PUSH
71200: LD_INT 0
71202: ST_TO_ADDR
// hc_sex := sex_male ;
71203: LD_ADDR_OWVAR 27
71207: PUSH
71208: LD_INT 1
71210: ST_TO_ADDR
// hc_class := class_apeman ;
71211: LD_ADDR_OWVAR 28
71215: PUSH
71216: LD_INT 12
71218: ST_TO_ADDR
// hc_gallery :=  ;
71219: LD_ADDR_OWVAR 33
71223: PUSH
71224: LD_STRING 
71226: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71227: LD_ADDR_OWVAR 35
71231: PUSH
71232: LD_VAR 0 1
71236: NEG
71237: PPUSH
71238: LD_VAR 0 1
71242: PPUSH
71243: CALL_OW 12
71247: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71248: LD_ADDR_OWVAR 31
71252: PUSH
71253: LD_INT 0
71255: PPUSH
71256: LD_INT 3
71258: PPUSH
71259: CALL_OW 12
71263: PUSH
71264: LD_INT 0
71266: PPUSH
71267: LD_INT 3
71269: PPUSH
71270: CALL_OW 12
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: LD_INT 0
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// end ;
71287: LD_VAR 0 2
71291: RET
// export function PrepareTiger ( agressivity ) ; begin
71292: LD_INT 0
71294: PPUSH
// uc_side := 0 ;
71295: LD_ADDR_OWVAR 20
71299: PUSH
71300: LD_INT 0
71302: ST_TO_ADDR
// uc_nation := 0 ;
71303: LD_ADDR_OWVAR 21
71307: PUSH
71308: LD_INT 0
71310: ST_TO_ADDR
// hc_class := class_tiger ;
71311: LD_ADDR_OWVAR 28
71315: PUSH
71316: LD_INT 14
71318: ST_TO_ADDR
// hc_gallery :=  ;
71319: LD_ADDR_OWVAR 33
71323: PUSH
71324: LD_STRING 
71326: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71327: LD_ADDR_OWVAR 35
71331: PUSH
71332: LD_VAR 0 1
71336: NEG
71337: PPUSH
71338: LD_VAR 0 1
71342: PPUSH
71343: CALL_OW 12
71347: ST_TO_ADDR
// end ;
71348: LD_VAR 0 2
71352: RET
// export function PrepareEnchidna ( ) ; begin
71353: LD_INT 0
71355: PPUSH
// uc_side := 0 ;
71356: LD_ADDR_OWVAR 20
71360: PUSH
71361: LD_INT 0
71363: ST_TO_ADDR
// uc_nation := 0 ;
71364: LD_ADDR_OWVAR 21
71368: PUSH
71369: LD_INT 0
71371: ST_TO_ADDR
// hc_class := class_baggie ;
71372: LD_ADDR_OWVAR 28
71376: PUSH
71377: LD_INT 13
71379: ST_TO_ADDR
// hc_gallery :=  ;
71380: LD_ADDR_OWVAR 33
71384: PUSH
71385: LD_STRING 
71387: ST_TO_ADDR
// end ;
71388: LD_VAR 0 1
71392: RET
// export function PrepareFrog ( ) ; begin
71393: LD_INT 0
71395: PPUSH
// uc_side := 0 ;
71396: LD_ADDR_OWVAR 20
71400: PUSH
71401: LD_INT 0
71403: ST_TO_ADDR
// uc_nation := 0 ;
71404: LD_ADDR_OWVAR 21
71408: PUSH
71409: LD_INT 0
71411: ST_TO_ADDR
// hc_class := class_frog ;
71412: LD_ADDR_OWVAR 28
71416: PUSH
71417: LD_INT 19
71419: ST_TO_ADDR
// hc_gallery :=  ;
71420: LD_ADDR_OWVAR 33
71424: PUSH
71425: LD_STRING 
71427: ST_TO_ADDR
// end ;
71428: LD_VAR 0 1
71432: RET
// export function PrepareFish ( ) ; begin
71433: LD_INT 0
71435: PPUSH
// uc_side := 0 ;
71436: LD_ADDR_OWVAR 20
71440: PUSH
71441: LD_INT 0
71443: ST_TO_ADDR
// uc_nation := 0 ;
71444: LD_ADDR_OWVAR 21
71448: PUSH
71449: LD_INT 0
71451: ST_TO_ADDR
// hc_class := class_fish ;
71452: LD_ADDR_OWVAR 28
71456: PUSH
71457: LD_INT 20
71459: ST_TO_ADDR
// hc_gallery :=  ;
71460: LD_ADDR_OWVAR 33
71464: PUSH
71465: LD_STRING 
71467: ST_TO_ADDR
// end ;
71468: LD_VAR 0 1
71472: RET
// export function PrepareBird ( ) ; begin
71473: LD_INT 0
71475: PPUSH
// uc_side := 0 ;
71476: LD_ADDR_OWVAR 20
71480: PUSH
71481: LD_INT 0
71483: ST_TO_ADDR
// uc_nation := 0 ;
71484: LD_ADDR_OWVAR 21
71488: PUSH
71489: LD_INT 0
71491: ST_TO_ADDR
// hc_class := class_phororhacos ;
71492: LD_ADDR_OWVAR 28
71496: PUSH
71497: LD_INT 18
71499: ST_TO_ADDR
// hc_gallery :=  ;
71500: LD_ADDR_OWVAR 33
71504: PUSH
71505: LD_STRING 
71507: ST_TO_ADDR
// end ;
71508: LD_VAR 0 1
71512: RET
// export function PrepareHorse ( ) ; begin
71513: LD_INT 0
71515: PPUSH
// uc_side := 0 ;
71516: LD_ADDR_OWVAR 20
71520: PUSH
71521: LD_INT 0
71523: ST_TO_ADDR
// uc_nation := 0 ;
71524: LD_ADDR_OWVAR 21
71528: PUSH
71529: LD_INT 0
71531: ST_TO_ADDR
// hc_class := class_horse ;
71532: LD_ADDR_OWVAR 28
71536: PUSH
71537: LD_INT 21
71539: ST_TO_ADDR
// hc_gallery :=  ;
71540: LD_ADDR_OWVAR 33
71544: PUSH
71545: LD_STRING 
71547: ST_TO_ADDR
// end ;
71548: LD_VAR 0 1
71552: RET
// export function PrepareMastodont ( ) ; begin
71553: LD_INT 0
71555: PPUSH
// uc_side := 0 ;
71556: LD_ADDR_OWVAR 20
71560: PUSH
71561: LD_INT 0
71563: ST_TO_ADDR
// uc_nation := 0 ;
71564: LD_ADDR_OWVAR 21
71568: PUSH
71569: LD_INT 0
71571: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71572: LD_ADDR_OWVAR 37
71576: PUSH
71577: LD_INT 31
71579: ST_TO_ADDR
// vc_control := control_rider ;
71580: LD_ADDR_OWVAR 38
71584: PUSH
71585: LD_INT 4
71587: ST_TO_ADDR
// end ;
71588: LD_VAR 0 1
71592: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71593: LD_INT 0
71595: PPUSH
71596: PPUSH
71597: PPUSH
// uc_side = 0 ;
71598: LD_ADDR_OWVAR 20
71602: PUSH
71603: LD_INT 0
71605: ST_TO_ADDR
// uc_nation = 0 ;
71606: LD_ADDR_OWVAR 21
71610: PUSH
71611: LD_INT 0
71613: ST_TO_ADDR
// InitHc_All ( ) ;
71614: CALL_OW 584
// InitVc ;
71618: CALL_OW 20
// if mastodonts then
71622: LD_VAR 0 6
71626: IFFALSE 71693
// for i = 1 to mastodonts do
71628: LD_ADDR_VAR 0 11
71632: PUSH
71633: DOUBLE
71634: LD_INT 1
71636: DEC
71637: ST_TO_ADDR
71638: LD_VAR 0 6
71642: PUSH
71643: FOR_TO
71644: IFFALSE 71691
// begin vc_chassis := 31 ;
71646: LD_ADDR_OWVAR 37
71650: PUSH
71651: LD_INT 31
71653: ST_TO_ADDR
// vc_control := control_rider ;
71654: LD_ADDR_OWVAR 38
71658: PUSH
71659: LD_INT 4
71661: ST_TO_ADDR
// animal := CreateVehicle ;
71662: LD_ADDR_VAR 0 12
71666: PUSH
71667: CALL_OW 45
71671: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71672: LD_VAR 0 12
71676: PPUSH
71677: LD_VAR 0 8
71681: PPUSH
71682: LD_INT 0
71684: PPUSH
71685: CALL 73821 0 3
// end ;
71689: GO 71643
71691: POP
71692: POP
// if horses then
71693: LD_VAR 0 5
71697: IFFALSE 71764
// for i = 1 to horses do
71699: LD_ADDR_VAR 0 11
71703: PUSH
71704: DOUBLE
71705: LD_INT 1
71707: DEC
71708: ST_TO_ADDR
71709: LD_VAR 0 5
71713: PUSH
71714: FOR_TO
71715: IFFALSE 71762
// begin hc_class := 21 ;
71717: LD_ADDR_OWVAR 28
71721: PUSH
71722: LD_INT 21
71724: ST_TO_ADDR
// hc_gallery :=  ;
71725: LD_ADDR_OWVAR 33
71729: PUSH
71730: LD_STRING 
71732: ST_TO_ADDR
// animal := CreateHuman ;
71733: LD_ADDR_VAR 0 12
71737: PUSH
71738: CALL_OW 44
71742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71743: LD_VAR 0 12
71747: PPUSH
71748: LD_VAR 0 8
71752: PPUSH
71753: LD_INT 0
71755: PPUSH
71756: CALL 73821 0 3
// end ;
71760: GO 71714
71762: POP
71763: POP
// if birds then
71764: LD_VAR 0 1
71768: IFFALSE 71835
// for i = 1 to birds do
71770: LD_ADDR_VAR 0 11
71774: PUSH
71775: DOUBLE
71776: LD_INT 1
71778: DEC
71779: ST_TO_ADDR
71780: LD_VAR 0 1
71784: PUSH
71785: FOR_TO
71786: IFFALSE 71833
// begin hc_class := 18 ;
71788: LD_ADDR_OWVAR 28
71792: PUSH
71793: LD_INT 18
71795: ST_TO_ADDR
// hc_gallery =  ;
71796: LD_ADDR_OWVAR 33
71800: PUSH
71801: LD_STRING 
71803: ST_TO_ADDR
// animal := CreateHuman ;
71804: LD_ADDR_VAR 0 12
71808: PUSH
71809: CALL_OW 44
71813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71814: LD_VAR 0 12
71818: PPUSH
71819: LD_VAR 0 8
71823: PPUSH
71824: LD_INT 0
71826: PPUSH
71827: CALL 73821 0 3
// end ;
71831: GO 71785
71833: POP
71834: POP
// if tigers then
71835: LD_VAR 0 2
71839: IFFALSE 71923
// for i = 1 to tigers do
71841: LD_ADDR_VAR 0 11
71845: PUSH
71846: DOUBLE
71847: LD_INT 1
71849: DEC
71850: ST_TO_ADDR
71851: LD_VAR 0 2
71855: PUSH
71856: FOR_TO
71857: IFFALSE 71921
// begin hc_class = class_tiger ;
71859: LD_ADDR_OWVAR 28
71863: PUSH
71864: LD_INT 14
71866: ST_TO_ADDR
// hc_gallery =  ;
71867: LD_ADDR_OWVAR 33
71871: PUSH
71872: LD_STRING 
71874: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71875: LD_ADDR_OWVAR 35
71879: PUSH
71880: LD_INT 7
71882: NEG
71883: PPUSH
71884: LD_INT 7
71886: PPUSH
71887: CALL_OW 12
71891: ST_TO_ADDR
// animal := CreateHuman ;
71892: LD_ADDR_VAR 0 12
71896: PUSH
71897: CALL_OW 44
71901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71902: LD_VAR 0 12
71906: PPUSH
71907: LD_VAR 0 8
71911: PPUSH
71912: LD_INT 0
71914: PPUSH
71915: CALL 73821 0 3
// end ;
71919: GO 71856
71921: POP
71922: POP
// if apemans then
71923: LD_VAR 0 3
71927: IFFALSE 72050
// for i = 1 to apemans do
71929: LD_ADDR_VAR 0 11
71933: PUSH
71934: DOUBLE
71935: LD_INT 1
71937: DEC
71938: ST_TO_ADDR
71939: LD_VAR 0 3
71943: PUSH
71944: FOR_TO
71945: IFFALSE 72048
// begin hc_class = class_apeman ;
71947: LD_ADDR_OWVAR 28
71951: PUSH
71952: LD_INT 12
71954: ST_TO_ADDR
// hc_gallery =  ;
71955: LD_ADDR_OWVAR 33
71959: PUSH
71960: LD_STRING 
71962: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71963: LD_ADDR_OWVAR 35
71967: PUSH
71968: LD_INT 2
71970: NEG
71971: PPUSH
71972: LD_INT 2
71974: PPUSH
71975: CALL_OW 12
71979: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71980: LD_ADDR_OWVAR 31
71984: PUSH
71985: LD_INT 1
71987: PPUSH
71988: LD_INT 3
71990: PPUSH
71991: CALL_OW 12
71995: PUSH
71996: LD_INT 1
71998: PPUSH
71999: LD_INT 3
72001: PPUSH
72002: CALL_OW 12
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: ST_TO_ADDR
// animal := CreateHuman ;
72019: LD_ADDR_VAR 0 12
72023: PUSH
72024: CALL_OW 44
72028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72029: LD_VAR 0 12
72033: PPUSH
72034: LD_VAR 0 8
72038: PPUSH
72039: LD_INT 0
72041: PPUSH
72042: CALL 73821 0 3
// end ;
72046: GO 71944
72048: POP
72049: POP
// if enchidnas then
72050: LD_VAR 0 4
72054: IFFALSE 72121
// for i = 1 to enchidnas do
72056: LD_ADDR_VAR 0 11
72060: PUSH
72061: DOUBLE
72062: LD_INT 1
72064: DEC
72065: ST_TO_ADDR
72066: LD_VAR 0 4
72070: PUSH
72071: FOR_TO
72072: IFFALSE 72119
// begin hc_class = 13 ;
72074: LD_ADDR_OWVAR 28
72078: PUSH
72079: LD_INT 13
72081: ST_TO_ADDR
// hc_gallery =  ;
72082: LD_ADDR_OWVAR 33
72086: PUSH
72087: LD_STRING 
72089: ST_TO_ADDR
// animal := CreateHuman ;
72090: LD_ADDR_VAR 0 12
72094: PUSH
72095: CALL_OW 44
72099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72100: LD_VAR 0 12
72104: PPUSH
72105: LD_VAR 0 8
72109: PPUSH
72110: LD_INT 0
72112: PPUSH
72113: CALL 73821 0 3
// end ;
72117: GO 72071
72119: POP
72120: POP
// if fishes then
72121: LD_VAR 0 7
72125: IFFALSE 72192
// for i = 1 to fishes do
72127: LD_ADDR_VAR 0 11
72131: PUSH
72132: DOUBLE
72133: LD_INT 1
72135: DEC
72136: ST_TO_ADDR
72137: LD_VAR 0 7
72141: PUSH
72142: FOR_TO
72143: IFFALSE 72190
// begin hc_class = 20 ;
72145: LD_ADDR_OWVAR 28
72149: PUSH
72150: LD_INT 20
72152: ST_TO_ADDR
// hc_gallery =  ;
72153: LD_ADDR_OWVAR 33
72157: PUSH
72158: LD_STRING 
72160: ST_TO_ADDR
// animal := CreateHuman ;
72161: LD_ADDR_VAR 0 12
72165: PUSH
72166: CALL_OW 44
72170: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72171: LD_VAR 0 12
72175: PPUSH
72176: LD_VAR 0 9
72180: PPUSH
72181: LD_INT 0
72183: PPUSH
72184: CALL 73821 0 3
// end ;
72188: GO 72142
72190: POP
72191: POP
// end ;
72192: LD_VAR 0 10
72196: RET
// export function WantHeal ( sci , unit ) ; begin
72197: LD_INT 0
72199: PPUSH
// if GetTaskList ( sci ) > 0 then
72200: LD_VAR 0 1
72204: PPUSH
72205: CALL_OW 437
72209: PUSH
72210: LD_INT 0
72212: GREATER
72213: IFFALSE 72283
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72215: LD_VAR 0 1
72219: PPUSH
72220: CALL_OW 437
72224: PUSH
72225: LD_INT 1
72227: ARRAY
72228: PUSH
72229: LD_INT 1
72231: ARRAY
72232: PUSH
72233: LD_STRING l
72235: EQUAL
72236: PUSH
72237: LD_VAR 0 1
72241: PPUSH
72242: CALL_OW 437
72246: PUSH
72247: LD_INT 1
72249: ARRAY
72250: PUSH
72251: LD_INT 4
72253: ARRAY
72254: PUSH
72255: LD_VAR 0 2
72259: EQUAL
72260: AND
72261: IFFALSE 72273
// result := true else
72263: LD_ADDR_VAR 0 3
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
72271: GO 72281
// result := false ;
72273: LD_ADDR_VAR 0 3
72277: PUSH
72278: LD_INT 0
72280: ST_TO_ADDR
// end else
72281: GO 72291
// result := false ;
72283: LD_ADDR_VAR 0 3
72287: PUSH
72288: LD_INT 0
72290: ST_TO_ADDR
// end ;
72291: LD_VAR 0 3
72295: RET
// export function HealTarget ( sci ) ; begin
72296: LD_INT 0
72298: PPUSH
// if not sci then
72299: LD_VAR 0 1
72303: NOT
72304: IFFALSE 72308
// exit ;
72306: GO 72373
// result := 0 ;
72308: LD_ADDR_VAR 0 2
72312: PUSH
72313: LD_INT 0
72315: ST_TO_ADDR
// if GetTaskList ( sci ) then
72316: LD_VAR 0 1
72320: PPUSH
72321: CALL_OW 437
72325: IFFALSE 72373
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72327: LD_VAR 0 1
72331: PPUSH
72332: CALL_OW 437
72336: PUSH
72337: LD_INT 1
72339: ARRAY
72340: PUSH
72341: LD_INT 1
72343: ARRAY
72344: PUSH
72345: LD_STRING l
72347: EQUAL
72348: IFFALSE 72373
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72350: LD_ADDR_VAR 0 2
72354: PUSH
72355: LD_VAR 0 1
72359: PPUSH
72360: CALL_OW 437
72364: PUSH
72365: LD_INT 1
72367: ARRAY
72368: PUSH
72369: LD_INT 4
72371: ARRAY
72372: ST_TO_ADDR
// end ;
72373: LD_VAR 0 2
72377: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72378: LD_INT 0
72380: PPUSH
72381: PPUSH
72382: PPUSH
72383: PPUSH
// if not base_units then
72384: LD_VAR 0 1
72388: NOT
72389: IFFALSE 72393
// exit ;
72391: GO 72480
// result := false ;
72393: LD_ADDR_VAR 0 2
72397: PUSH
72398: LD_INT 0
72400: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72401: LD_ADDR_VAR 0 5
72405: PUSH
72406: LD_VAR 0 1
72410: PPUSH
72411: LD_INT 21
72413: PUSH
72414: LD_INT 3
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PPUSH
72421: CALL_OW 72
72425: ST_TO_ADDR
// if not tmp then
72426: LD_VAR 0 5
72430: NOT
72431: IFFALSE 72435
// exit ;
72433: GO 72480
// for i in tmp do
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: LD_VAR 0 5
72444: PUSH
72445: FOR_IN
72446: IFFALSE 72478
// begin result := EnemyInRange ( i , 22 ) ;
72448: LD_ADDR_VAR 0 2
72452: PUSH
72453: LD_VAR 0 3
72457: PPUSH
72458: LD_INT 22
72460: PPUSH
72461: CALL 70067 0 2
72465: ST_TO_ADDR
// if result then
72466: LD_VAR 0 2
72470: IFFALSE 72476
// exit ;
72472: POP
72473: POP
72474: GO 72480
// end ;
72476: GO 72445
72478: POP
72479: POP
// end ;
72480: LD_VAR 0 2
72484: RET
// export function FilterByTag ( units , tag ) ; begin
72485: LD_INT 0
72487: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72488: LD_ADDR_VAR 0 3
72492: PUSH
72493: LD_VAR 0 1
72497: PPUSH
72498: LD_INT 120
72500: PUSH
72501: LD_VAR 0 2
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PPUSH
72510: CALL_OW 72
72514: ST_TO_ADDR
// end ;
72515: LD_VAR 0 3
72519: RET
// export function IsDriver ( un ) ; begin
72520: LD_INT 0
72522: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72523: LD_ADDR_VAR 0 2
72527: PUSH
72528: LD_VAR 0 1
72532: PUSH
72533: LD_INT 55
72535: PUSH
72536: EMPTY
72537: LIST
72538: PPUSH
72539: CALL_OW 69
72543: IN
72544: ST_TO_ADDR
// end ;
72545: LD_VAR 0 2
72549: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72550: LD_INT 0
72552: PPUSH
72553: PPUSH
// list := [ ] ;
72554: LD_ADDR_VAR 0 5
72558: PUSH
72559: EMPTY
72560: ST_TO_ADDR
// case d of 0 :
72561: LD_VAR 0 3
72565: PUSH
72566: LD_INT 0
72568: DOUBLE
72569: EQUAL
72570: IFTRUE 72574
72572: GO 72707
72574: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72575: LD_ADDR_VAR 0 5
72579: PUSH
72580: LD_VAR 0 1
72584: PUSH
72585: LD_INT 4
72587: MINUS
72588: PUSH
72589: LD_VAR 0 2
72593: PUSH
72594: LD_INT 4
72596: MINUS
72597: PUSH
72598: LD_INT 2
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: LIST
72605: PUSH
72606: LD_VAR 0 1
72610: PUSH
72611: LD_INT 3
72613: MINUS
72614: PUSH
72615: LD_VAR 0 2
72619: PUSH
72620: LD_INT 1
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: LIST
72627: PUSH
72628: LD_VAR 0 1
72632: PUSH
72633: LD_INT 4
72635: PLUS
72636: PUSH
72637: LD_VAR 0 2
72641: PUSH
72642: LD_INT 4
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: LIST
72649: PUSH
72650: LD_VAR 0 1
72654: PUSH
72655: LD_INT 3
72657: PLUS
72658: PUSH
72659: LD_VAR 0 2
72663: PUSH
72664: LD_INT 3
72666: PLUS
72667: PUSH
72668: LD_INT 5
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: LIST
72675: PUSH
72676: LD_VAR 0 1
72680: PUSH
72681: LD_VAR 0 2
72685: PUSH
72686: LD_INT 4
72688: PLUS
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: LIST
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: ST_TO_ADDR
// end ; 1 :
72705: GO 73405
72707: LD_INT 1
72709: DOUBLE
72710: EQUAL
72711: IFTRUE 72715
72713: GO 72848
72715: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72716: LD_ADDR_VAR 0 5
72720: PUSH
72721: LD_VAR 0 1
72725: PUSH
72726: LD_VAR 0 2
72730: PUSH
72731: LD_INT 4
72733: MINUS
72734: PUSH
72735: LD_INT 3
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: LIST
72742: PUSH
72743: LD_VAR 0 1
72747: PUSH
72748: LD_INT 3
72750: MINUS
72751: PUSH
72752: LD_VAR 0 2
72756: PUSH
72757: LD_INT 3
72759: MINUS
72760: PUSH
72761: LD_INT 2
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: LIST
72768: PUSH
72769: LD_VAR 0 1
72773: PUSH
72774: LD_INT 4
72776: MINUS
72777: PUSH
72778: LD_VAR 0 2
72782: PUSH
72783: LD_INT 1
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: LIST
72790: PUSH
72791: LD_VAR 0 1
72795: PUSH
72796: LD_VAR 0 2
72800: PUSH
72801: LD_INT 3
72803: PLUS
72804: PUSH
72805: LD_INT 0
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: LIST
72812: PUSH
72813: LD_VAR 0 1
72817: PUSH
72818: LD_INT 4
72820: PLUS
72821: PUSH
72822: LD_VAR 0 2
72826: PUSH
72827: LD_INT 4
72829: PLUS
72830: PUSH
72831: LD_INT 5
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: LIST
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: ST_TO_ADDR
// end ; 2 :
72846: GO 73405
72848: LD_INT 2
72850: DOUBLE
72851: EQUAL
72852: IFTRUE 72856
72854: GO 72985
72856: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72857: LD_ADDR_VAR 0 5
72861: PUSH
72862: LD_VAR 0 1
72866: PUSH
72867: LD_VAR 0 2
72871: PUSH
72872: LD_INT 3
72874: MINUS
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: LIST
72883: PUSH
72884: LD_VAR 0 1
72888: PUSH
72889: LD_INT 4
72891: PLUS
72892: PUSH
72893: LD_VAR 0 2
72897: PUSH
72898: LD_INT 4
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: LIST
72905: PUSH
72906: LD_VAR 0 1
72910: PUSH
72911: LD_VAR 0 2
72915: PUSH
72916: LD_INT 4
72918: PLUS
72919: PUSH
72920: LD_INT 0
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: LIST
72927: PUSH
72928: LD_VAR 0 1
72932: PUSH
72933: LD_INT 3
72935: MINUS
72936: PUSH
72937: LD_VAR 0 2
72941: PUSH
72942: LD_INT 1
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: LIST
72949: PUSH
72950: LD_VAR 0 1
72954: PUSH
72955: LD_INT 4
72957: MINUS
72958: PUSH
72959: LD_VAR 0 2
72963: PUSH
72964: LD_INT 4
72966: MINUS
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: LIST
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: ST_TO_ADDR
// end ; 3 :
72983: GO 73405
72985: LD_INT 3
72987: DOUBLE
72988: EQUAL
72989: IFTRUE 72993
72991: GO 73126
72993: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72994: LD_ADDR_VAR 0 5
72998: PUSH
72999: LD_VAR 0 1
73003: PUSH
73004: LD_INT 3
73006: PLUS
73007: PUSH
73008: LD_VAR 0 2
73012: PUSH
73013: LD_INT 4
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: LIST
73020: PUSH
73021: LD_VAR 0 1
73025: PUSH
73026: LD_INT 4
73028: PLUS
73029: PUSH
73030: LD_VAR 0 2
73034: PUSH
73035: LD_INT 4
73037: PLUS
73038: PUSH
73039: LD_INT 5
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: LIST
73046: PUSH
73047: LD_VAR 0 1
73051: PUSH
73052: LD_INT 4
73054: MINUS
73055: PUSH
73056: LD_VAR 0 2
73060: PUSH
73061: LD_INT 1
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: LIST
73068: PUSH
73069: LD_VAR 0 1
73073: PUSH
73074: LD_VAR 0 2
73078: PUSH
73079: LD_INT 4
73081: MINUS
73082: PUSH
73083: LD_INT 3
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: LIST
73090: PUSH
73091: LD_VAR 0 1
73095: PUSH
73096: LD_INT 3
73098: MINUS
73099: PUSH
73100: LD_VAR 0 2
73104: PUSH
73105: LD_INT 3
73107: MINUS
73108: PUSH
73109: LD_INT 2
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: LIST
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: ST_TO_ADDR
// end ; 4 :
73124: GO 73405
73126: LD_INT 4
73128: DOUBLE
73129: EQUAL
73130: IFTRUE 73134
73132: GO 73267
73134: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73135: LD_ADDR_VAR 0 5
73139: PUSH
73140: LD_VAR 0 1
73144: PUSH
73145: LD_VAR 0 2
73149: PUSH
73150: LD_INT 4
73152: PLUS
73153: PUSH
73154: LD_INT 0
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: LIST
73161: PUSH
73162: LD_VAR 0 1
73166: PUSH
73167: LD_INT 3
73169: PLUS
73170: PUSH
73171: LD_VAR 0 2
73175: PUSH
73176: LD_INT 3
73178: PLUS
73179: PUSH
73180: LD_INT 5
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: LIST
73187: PUSH
73188: LD_VAR 0 1
73192: PUSH
73193: LD_INT 4
73195: PLUS
73196: PUSH
73197: LD_VAR 0 2
73201: PUSH
73202: LD_INT 4
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: LIST
73209: PUSH
73210: LD_VAR 0 1
73214: PUSH
73215: LD_VAR 0 2
73219: PUSH
73220: LD_INT 3
73222: MINUS
73223: PUSH
73224: LD_INT 3
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: PUSH
73232: LD_VAR 0 1
73236: PUSH
73237: LD_INT 4
73239: MINUS
73240: PUSH
73241: LD_VAR 0 2
73245: PUSH
73246: LD_INT 4
73248: MINUS
73249: PUSH
73250: LD_INT 2
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: LIST
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: ST_TO_ADDR
// end ; 5 :
73265: GO 73405
73267: LD_INT 5
73269: DOUBLE
73270: EQUAL
73271: IFTRUE 73275
73273: GO 73404
73275: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73276: LD_ADDR_VAR 0 5
73280: PUSH
73281: LD_VAR 0 1
73285: PUSH
73286: LD_INT 4
73288: MINUS
73289: PUSH
73290: LD_VAR 0 2
73294: PUSH
73295: LD_INT 1
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: LIST
73302: PUSH
73303: LD_VAR 0 1
73307: PUSH
73308: LD_VAR 0 2
73312: PUSH
73313: LD_INT 4
73315: MINUS
73316: PUSH
73317: LD_INT 3
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: LIST
73324: PUSH
73325: LD_VAR 0 1
73329: PUSH
73330: LD_INT 4
73332: PLUS
73333: PUSH
73334: LD_VAR 0 2
73338: PUSH
73339: LD_INT 4
73341: PLUS
73342: PUSH
73343: LD_INT 5
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: PUSH
73351: LD_VAR 0 1
73355: PUSH
73356: LD_INT 3
73358: PLUS
73359: PUSH
73360: LD_VAR 0 2
73364: PUSH
73365: LD_INT 4
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: LIST
73372: PUSH
73373: LD_VAR 0 1
73377: PUSH
73378: LD_VAR 0 2
73382: PUSH
73383: LD_INT 3
73385: PLUS
73386: PUSH
73387: LD_INT 0
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: LIST
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: ST_TO_ADDR
// end ; end ;
73402: GO 73405
73404: POP
// result := list ;
73405: LD_ADDR_VAR 0 4
73409: PUSH
73410: LD_VAR 0 5
73414: ST_TO_ADDR
// end ;
73415: LD_VAR 0 4
73419: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73420: LD_INT 0
73422: PPUSH
73423: PPUSH
73424: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73425: LD_VAR 0 1
73429: NOT
73430: PUSH
73431: LD_VAR 0 2
73435: PUSH
73436: LD_INT 1
73438: PUSH
73439: LD_INT 2
73441: PUSH
73442: LD_INT 3
73444: PUSH
73445: LD_INT 4
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: IN
73454: NOT
73455: OR
73456: IFFALSE 73460
// exit ;
73458: GO 73543
// tmp := [ ] ;
73460: LD_ADDR_VAR 0 5
73464: PUSH
73465: EMPTY
73466: ST_TO_ADDR
// for i in units do
73467: LD_ADDR_VAR 0 4
73471: PUSH
73472: LD_VAR 0 1
73476: PUSH
73477: FOR_IN
73478: IFFALSE 73512
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73480: LD_ADDR_VAR 0 5
73484: PUSH
73485: LD_VAR 0 5
73489: PPUSH
73490: LD_VAR 0 4
73494: PPUSH
73495: LD_VAR 0 2
73499: PPUSH
73500: CALL_OW 259
73504: PPUSH
73505: CALL 74916 0 2
73509: ST_TO_ADDR
73510: GO 73477
73512: POP
73513: POP
// if not tmp then
73514: LD_VAR 0 5
73518: NOT
73519: IFFALSE 73523
// exit ;
73521: GO 73543
// result := SortListByListDesc ( units , tmp ) ;
73523: LD_ADDR_VAR 0 3
73527: PUSH
73528: LD_VAR 0 1
73532: PPUSH
73533: LD_VAR 0 5
73537: PPUSH
73538: CALL_OW 77
73542: ST_TO_ADDR
// end ;
73543: LD_VAR 0 3
73547: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73548: LD_INT 0
73550: PPUSH
73551: PPUSH
73552: PPUSH
// result := false ;
73553: LD_ADDR_VAR 0 3
73557: PUSH
73558: LD_INT 0
73560: ST_TO_ADDR
// if not building then
73561: LD_VAR 0 2
73565: NOT
73566: IFFALSE 73570
// exit ;
73568: GO 73708
// x := GetX ( building ) ;
73570: LD_ADDR_VAR 0 4
73574: PUSH
73575: LD_VAR 0 2
73579: PPUSH
73580: CALL_OW 250
73584: ST_TO_ADDR
// y := GetY ( building ) ;
73585: LD_ADDR_VAR 0 5
73589: PUSH
73590: LD_VAR 0 2
73594: PPUSH
73595: CALL_OW 251
73599: ST_TO_ADDR
// if not x or not y then
73600: LD_VAR 0 4
73604: NOT
73605: PUSH
73606: LD_VAR 0 5
73610: NOT
73611: OR
73612: IFFALSE 73616
// exit ;
73614: GO 73708
// if GetTaskList ( unit ) then
73616: LD_VAR 0 1
73620: PPUSH
73621: CALL_OW 437
73625: IFFALSE 73708
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73627: LD_STRING e
73629: PUSH
73630: LD_VAR 0 1
73634: PPUSH
73635: CALL_OW 437
73639: PUSH
73640: LD_INT 1
73642: ARRAY
73643: PUSH
73644: LD_INT 1
73646: ARRAY
73647: EQUAL
73648: PUSH
73649: LD_VAR 0 4
73653: PUSH
73654: LD_VAR 0 1
73658: PPUSH
73659: CALL_OW 437
73663: PUSH
73664: LD_INT 1
73666: ARRAY
73667: PUSH
73668: LD_INT 2
73670: ARRAY
73671: EQUAL
73672: AND
73673: PUSH
73674: LD_VAR 0 5
73678: PUSH
73679: LD_VAR 0 1
73683: PPUSH
73684: CALL_OW 437
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PUSH
73693: LD_INT 3
73695: ARRAY
73696: EQUAL
73697: AND
73698: IFFALSE 73708
// result := true end ;
73700: LD_ADDR_VAR 0 3
73704: PUSH
73705: LD_INT 1
73707: ST_TO_ADDR
// end ;
73708: LD_VAR 0 3
73712: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73713: LD_INT 0
73715: PPUSH
// result := false ;
73716: LD_ADDR_VAR 0 4
73720: PUSH
73721: LD_INT 0
73723: ST_TO_ADDR
// if GetTaskList ( unit ) then
73724: LD_VAR 0 1
73728: PPUSH
73729: CALL_OW 437
73733: IFFALSE 73816
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73735: LD_STRING M
73737: PUSH
73738: LD_VAR 0 1
73742: PPUSH
73743: CALL_OW 437
73747: PUSH
73748: LD_INT 1
73750: ARRAY
73751: PUSH
73752: LD_INT 1
73754: ARRAY
73755: EQUAL
73756: PUSH
73757: LD_VAR 0 2
73761: PUSH
73762: LD_VAR 0 1
73766: PPUSH
73767: CALL_OW 437
73771: PUSH
73772: LD_INT 1
73774: ARRAY
73775: PUSH
73776: LD_INT 2
73778: ARRAY
73779: EQUAL
73780: AND
73781: PUSH
73782: LD_VAR 0 3
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: CALL_OW 437
73796: PUSH
73797: LD_INT 1
73799: ARRAY
73800: PUSH
73801: LD_INT 3
73803: ARRAY
73804: EQUAL
73805: AND
73806: IFFALSE 73816
// result := true ;
73808: LD_ADDR_VAR 0 4
73812: PUSH
73813: LD_INT 1
73815: ST_TO_ADDR
// end ; end ;
73816: LD_VAR 0 4
73820: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73821: LD_INT 0
73823: PPUSH
73824: PPUSH
73825: PPUSH
73826: PPUSH
// if not unit or not area then
73827: LD_VAR 0 1
73831: NOT
73832: PUSH
73833: LD_VAR 0 2
73837: NOT
73838: OR
73839: IFFALSE 73843
// exit ;
73841: GO 74019
// tmp := AreaToList ( area , i ) ;
73843: LD_ADDR_VAR 0 6
73847: PUSH
73848: LD_VAR 0 2
73852: PPUSH
73853: LD_VAR 0 5
73857: PPUSH
73858: CALL_OW 517
73862: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73863: LD_ADDR_VAR 0 5
73867: PUSH
73868: DOUBLE
73869: LD_INT 1
73871: DEC
73872: ST_TO_ADDR
73873: LD_VAR 0 6
73877: PUSH
73878: LD_INT 1
73880: ARRAY
73881: PUSH
73882: FOR_TO
73883: IFFALSE 74017
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73885: LD_ADDR_VAR 0 7
73889: PUSH
73890: LD_VAR 0 6
73894: PUSH
73895: LD_INT 1
73897: ARRAY
73898: PUSH
73899: LD_VAR 0 5
73903: ARRAY
73904: PUSH
73905: LD_VAR 0 6
73909: PUSH
73910: LD_INT 2
73912: ARRAY
73913: PUSH
73914: LD_VAR 0 5
73918: ARRAY
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73924: LD_INT 92
73926: PUSH
73927: LD_VAR 0 7
73931: PUSH
73932: LD_INT 1
73934: ARRAY
73935: PUSH
73936: LD_VAR 0 7
73940: PUSH
73941: LD_INT 2
73943: ARRAY
73944: PUSH
73945: LD_INT 2
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: PPUSH
73954: CALL_OW 69
73958: PUSH
73959: LD_INT 0
73961: EQUAL
73962: IFFALSE 74015
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73964: LD_VAR 0 1
73968: PPUSH
73969: LD_VAR 0 7
73973: PUSH
73974: LD_INT 1
73976: ARRAY
73977: PPUSH
73978: LD_VAR 0 7
73982: PUSH
73983: LD_INT 2
73985: ARRAY
73986: PPUSH
73987: LD_VAR 0 3
73991: PPUSH
73992: CALL_OW 48
// result := IsPlaced ( unit ) ;
73996: LD_ADDR_VAR 0 4
74000: PUSH
74001: LD_VAR 0 1
74005: PPUSH
74006: CALL_OW 305
74010: ST_TO_ADDR
// exit ;
74011: POP
74012: POP
74013: GO 74019
// end ; end ;
74015: GO 73882
74017: POP
74018: POP
// end ;
74019: LD_VAR 0 4
74023: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74024: LD_INT 0
74026: PPUSH
74027: PPUSH
74028: PPUSH
// if not side or side > 8 then
74029: LD_VAR 0 1
74033: NOT
74034: PUSH
74035: LD_VAR 0 1
74039: PUSH
74040: LD_INT 8
74042: GREATER
74043: OR
74044: IFFALSE 74048
// exit ;
74046: GO 74235
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74048: LD_ADDR_VAR 0 4
74052: PUSH
74053: LD_INT 22
74055: PUSH
74056: LD_VAR 0 1
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 21
74067: PUSH
74068: LD_INT 3
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PPUSH
74079: CALL_OW 69
74083: ST_TO_ADDR
// if not tmp then
74084: LD_VAR 0 4
74088: NOT
74089: IFFALSE 74093
// exit ;
74091: GO 74235
// enable_addtolog := true ;
74093: LD_ADDR_OWVAR 81
74097: PUSH
74098: LD_INT 1
74100: ST_TO_ADDR
// AddToLog ( [ ) ;
74101: LD_STRING [
74103: PPUSH
74104: CALL_OW 561
// for i in tmp do
74108: LD_ADDR_VAR 0 3
74112: PUSH
74113: LD_VAR 0 4
74117: PUSH
74118: FOR_IN
74119: IFFALSE 74226
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74121: LD_STRING [
74123: PUSH
74124: LD_VAR 0 3
74128: PPUSH
74129: CALL_OW 266
74133: STR
74134: PUSH
74135: LD_STRING , 
74137: STR
74138: PUSH
74139: LD_VAR 0 3
74143: PPUSH
74144: CALL_OW 250
74148: STR
74149: PUSH
74150: LD_STRING , 
74152: STR
74153: PUSH
74154: LD_VAR 0 3
74158: PPUSH
74159: CALL_OW 251
74163: STR
74164: PUSH
74165: LD_STRING , 
74167: STR
74168: PUSH
74169: LD_VAR 0 3
74173: PPUSH
74174: CALL_OW 254
74178: STR
74179: PUSH
74180: LD_STRING , 
74182: STR
74183: PUSH
74184: LD_VAR 0 3
74188: PPUSH
74189: LD_INT 1
74191: PPUSH
74192: CALL_OW 268
74196: STR
74197: PUSH
74198: LD_STRING , 
74200: STR
74201: PUSH
74202: LD_VAR 0 3
74206: PPUSH
74207: LD_INT 2
74209: PPUSH
74210: CALL_OW 268
74214: STR
74215: PUSH
74216: LD_STRING ],
74218: STR
74219: PPUSH
74220: CALL_OW 561
// end ;
74224: GO 74118
74226: POP
74227: POP
// AddToLog ( ]; ) ;
74228: LD_STRING ];
74230: PPUSH
74231: CALL_OW 561
// end ;
74235: LD_VAR 0 2
74239: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74240: LD_INT 0
74242: PPUSH
74243: PPUSH
74244: PPUSH
74245: PPUSH
74246: PPUSH
// if not area or not rate or not max then
74247: LD_VAR 0 1
74251: NOT
74252: PUSH
74253: LD_VAR 0 2
74257: NOT
74258: OR
74259: PUSH
74260: LD_VAR 0 4
74264: NOT
74265: OR
74266: IFFALSE 74270
// exit ;
74268: GO 74459
// while 1 do
74270: LD_INT 1
74272: IFFALSE 74459
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74274: LD_ADDR_VAR 0 9
74278: PUSH
74279: LD_VAR 0 1
74283: PPUSH
74284: LD_INT 1
74286: PPUSH
74287: CALL_OW 287
74291: PUSH
74292: LD_INT 10
74294: MUL
74295: ST_TO_ADDR
// r := rate / 10 ;
74296: LD_ADDR_VAR 0 7
74300: PUSH
74301: LD_VAR 0 2
74305: PUSH
74306: LD_INT 10
74308: DIVREAL
74309: ST_TO_ADDR
// time := 1 1$00 ;
74310: LD_ADDR_VAR 0 8
74314: PUSH
74315: LD_INT 2100
74317: ST_TO_ADDR
// if amount < min then
74318: LD_VAR 0 9
74322: PUSH
74323: LD_VAR 0 3
74327: LESS
74328: IFFALSE 74346
// r := r * 2 else
74330: LD_ADDR_VAR 0 7
74334: PUSH
74335: LD_VAR 0 7
74339: PUSH
74340: LD_INT 2
74342: MUL
74343: ST_TO_ADDR
74344: GO 74372
// if amount > max then
74346: LD_VAR 0 9
74350: PUSH
74351: LD_VAR 0 4
74355: GREATER
74356: IFFALSE 74372
// r := r / 2 ;
74358: LD_ADDR_VAR 0 7
74362: PUSH
74363: LD_VAR 0 7
74367: PUSH
74368: LD_INT 2
74370: DIVREAL
74371: ST_TO_ADDR
// time := time / r ;
74372: LD_ADDR_VAR 0 8
74376: PUSH
74377: LD_VAR 0 8
74381: PUSH
74382: LD_VAR 0 7
74386: DIVREAL
74387: ST_TO_ADDR
// if time < 0 then
74388: LD_VAR 0 8
74392: PUSH
74393: LD_INT 0
74395: LESS
74396: IFFALSE 74413
// time := time * - 1 ;
74398: LD_ADDR_VAR 0 8
74402: PUSH
74403: LD_VAR 0 8
74407: PUSH
74408: LD_INT 1
74410: NEG
74411: MUL
74412: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74413: LD_VAR 0 8
74417: PUSH
74418: LD_INT 35
74420: PPUSH
74421: LD_INT 875
74423: PPUSH
74424: CALL_OW 12
74428: PLUS
74429: PPUSH
74430: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74434: LD_INT 1
74436: PPUSH
74437: LD_INT 5
74439: PPUSH
74440: CALL_OW 12
74444: PPUSH
74445: LD_VAR 0 1
74449: PPUSH
74450: LD_INT 1
74452: PPUSH
74453: CALL_OW 55
// end ;
74457: GO 74270
// end ;
74459: LD_VAR 0 5
74463: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74464: LD_INT 0
74466: PPUSH
74467: PPUSH
74468: PPUSH
74469: PPUSH
74470: PPUSH
74471: PPUSH
74472: PPUSH
74473: PPUSH
// if not turrets or not factories then
74474: LD_VAR 0 1
74478: NOT
74479: PUSH
74480: LD_VAR 0 2
74484: NOT
74485: OR
74486: IFFALSE 74490
// exit ;
74488: GO 74797
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74490: LD_ADDR_VAR 0 10
74494: PUSH
74495: LD_INT 5
74497: PUSH
74498: LD_INT 6
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: LD_INT 4
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 3
74517: PUSH
74518: LD_INT 5
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 24
74532: PUSH
74533: LD_INT 25
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 23
74542: PUSH
74543: LD_INT 27
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PUSH
74554: LD_INT 42
74556: PUSH
74557: LD_INT 43
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 44
74566: PUSH
74567: LD_INT 46
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 45
74576: PUSH
74577: LD_INT 47
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: LIST
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: LIST
74593: ST_TO_ADDR
// result := [ ] ;
74594: LD_ADDR_VAR 0 3
74598: PUSH
74599: EMPTY
74600: ST_TO_ADDR
// for i in turrets do
74601: LD_ADDR_VAR 0 4
74605: PUSH
74606: LD_VAR 0 1
74610: PUSH
74611: FOR_IN
74612: IFFALSE 74795
// begin nat := GetNation ( i ) ;
74614: LD_ADDR_VAR 0 7
74618: PUSH
74619: LD_VAR 0 4
74623: PPUSH
74624: CALL_OW 248
74628: ST_TO_ADDR
// weapon := 0 ;
74629: LD_ADDR_VAR 0 8
74633: PUSH
74634: LD_INT 0
74636: ST_TO_ADDR
// if not nat then
74637: LD_VAR 0 7
74641: NOT
74642: IFFALSE 74646
// continue ;
74644: GO 74611
// for j in list [ nat ] do
74646: LD_ADDR_VAR 0 5
74650: PUSH
74651: LD_VAR 0 10
74655: PUSH
74656: LD_VAR 0 7
74660: ARRAY
74661: PUSH
74662: FOR_IN
74663: IFFALSE 74704
// if GetBWeapon ( i ) = j [ 1 ] then
74665: LD_VAR 0 4
74669: PPUSH
74670: CALL_OW 269
74674: PUSH
74675: LD_VAR 0 5
74679: PUSH
74680: LD_INT 1
74682: ARRAY
74683: EQUAL
74684: IFFALSE 74702
// begin weapon := j [ 2 ] ;
74686: LD_ADDR_VAR 0 8
74690: PUSH
74691: LD_VAR 0 5
74695: PUSH
74696: LD_INT 2
74698: ARRAY
74699: ST_TO_ADDR
// break ;
74700: GO 74704
// end ;
74702: GO 74662
74704: POP
74705: POP
// if not weapon then
74706: LD_VAR 0 8
74710: NOT
74711: IFFALSE 74715
// continue ;
74713: GO 74611
// for k in factories do
74715: LD_ADDR_VAR 0 6
74719: PUSH
74720: LD_VAR 0 2
74724: PUSH
74725: FOR_IN
74726: IFFALSE 74791
// begin weapons := AvailableWeaponList ( k ) ;
74728: LD_ADDR_VAR 0 9
74732: PUSH
74733: LD_VAR 0 6
74737: PPUSH
74738: CALL_OW 478
74742: ST_TO_ADDR
// if not weapons then
74743: LD_VAR 0 9
74747: NOT
74748: IFFALSE 74752
// continue ;
74750: GO 74725
// if weapon in weapons then
74752: LD_VAR 0 8
74756: PUSH
74757: LD_VAR 0 9
74761: IN
74762: IFFALSE 74789
// begin result := [ i , weapon ] ;
74764: LD_ADDR_VAR 0 3
74768: PUSH
74769: LD_VAR 0 4
74773: PUSH
74774: LD_VAR 0 8
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: ST_TO_ADDR
// exit ;
74783: POP
74784: POP
74785: POP
74786: POP
74787: GO 74797
// end ; end ;
74789: GO 74725
74791: POP
74792: POP
// end ;
74793: GO 74611
74795: POP
74796: POP
// end ;
74797: LD_VAR 0 3
74801: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74802: LD_INT 0
74804: PPUSH
// if not side or side > 8 then
74805: LD_VAR 0 3
74809: NOT
74810: PUSH
74811: LD_VAR 0 3
74815: PUSH
74816: LD_INT 8
74818: GREATER
74819: OR
74820: IFFALSE 74824
// exit ;
74822: GO 74883
// if not range then
74824: LD_VAR 0 4
74828: NOT
74829: IFFALSE 74840
// range := - 12 ;
74831: LD_ADDR_VAR 0 4
74835: PUSH
74836: LD_INT 12
74838: NEG
74839: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74840: LD_VAR 0 1
74844: PPUSH
74845: LD_VAR 0 2
74849: PPUSH
74850: LD_VAR 0 3
74854: PPUSH
74855: LD_VAR 0 4
74859: PPUSH
74860: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74864: LD_VAR 0 1
74868: PPUSH
74869: LD_VAR 0 2
74873: PPUSH
74874: LD_VAR 0 3
74878: PPUSH
74879: CALL_OW 331
// end ;
74883: LD_VAR 0 5
74887: RET
// export function Video ( mode ) ; begin
74888: LD_INT 0
74890: PPUSH
// ingame_video = mode ;
74891: LD_ADDR_OWVAR 52
74895: PUSH
74896: LD_VAR 0 1
74900: ST_TO_ADDR
// interface_hidden = mode ;
74901: LD_ADDR_OWVAR 54
74905: PUSH
74906: LD_VAR 0 1
74910: ST_TO_ADDR
// end ;
74911: LD_VAR 0 2
74915: RET
// export function Join ( array , element ) ; begin
74916: LD_INT 0
74918: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74919: LD_ADDR_VAR 0 3
74923: PUSH
74924: LD_VAR 0 1
74928: PPUSH
74929: LD_VAR 0 1
74933: PUSH
74934: LD_INT 1
74936: PLUS
74937: PPUSH
74938: LD_VAR 0 2
74942: PPUSH
74943: CALL_OW 1
74947: ST_TO_ADDR
// end ;
74948: LD_VAR 0 3
74952: RET
// export function JoinUnion ( array , element ) ; begin
74953: LD_INT 0
74955: PPUSH
// result := array union element ;
74956: LD_ADDR_VAR 0 3
74960: PUSH
74961: LD_VAR 0 1
74965: PUSH
74966: LD_VAR 0 2
74970: UNION
74971: ST_TO_ADDR
// end ;
74972: LD_VAR 0 3
74976: RET
// export function GetBehemoths ( side ) ; begin
74977: LD_INT 0
74979: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74980: LD_ADDR_VAR 0 2
74984: PUSH
74985: LD_INT 22
74987: PUSH
74988: LD_VAR 0 1
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 31
74999: PUSH
75000: LD_INT 25
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PPUSH
75011: CALL_OW 69
75015: ST_TO_ADDR
// end ;
75016: LD_VAR 0 2
75020: RET
// export function Shuffle ( array ) ; var i , index ; begin
75021: LD_INT 0
75023: PPUSH
75024: PPUSH
75025: PPUSH
// result := [ ] ;
75026: LD_ADDR_VAR 0 2
75030: PUSH
75031: EMPTY
75032: ST_TO_ADDR
// if not array then
75033: LD_VAR 0 1
75037: NOT
75038: IFFALSE 75042
// exit ;
75040: GO 75141
// Randomize ;
75042: CALL_OW 10
// for i = array downto 1 do
75046: LD_ADDR_VAR 0 3
75050: PUSH
75051: DOUBLE
75052: LD_VAR 0 1
75056: INC
75057: ST_TO_ADDR
75058: LD_INT 1
75060: PUSH
75061: FOR_DOWNTO
75062: IFFALSE 75139
// begin index := rand ( 1 , array ) ;
75064: LD_ADDR_VAR 0 4
75068: PUSH
75069: LD_INT 1
75071: PPUSH
75072: LD_VAR 0 1
75076: PPUSH
75077: CALL_OW 12
75081: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75082: LD_ADDR_VAR 0 2
75086: PUSH
75087: LD_VAR 0 2
75091: PPUSH
75092: LD_VAR 0 2
75096: PUSH
75097: LD_INT 1
75099: PLUS
75100: PPUSH
75101: LD_VAR 0 1
75105: PUSH
75106: LD_VAR 0 4
75110: ARRAY
75111: PPUSH
75112: CALL_OW 2
75116: ST_TO_ADDR
// array := Delete ( array , index ) ;
75117: LD_ADDR_VAR 0 1
75121: PUSH
75122: LD_VAR 0 1
75126: PPUSH
75127: LD_VAR 0 4
75131: PPUSH
75132: CALL_OW 3
75136: ST_TO_ADDR
// end ;
75137: GO 75061
75139: POP
75140: POP
// end ;
75141: LD_VAR 0 2
75145: RET
// export function GetBaseMaterials ( base ) ; begin
75146: LD_INT 0
75148: PPUSH
// result := [ 0 , 0 , 0 ] ;
75149: LD_ADDR_VAR 0 2
75153: PUSH
75154: LD_INT 0
75156: PUSH
75157: LD_INT 0
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: ST_TO_ADDR
// if not base then
75168: LD_VAR 0 1
75172: NOT
75173: IFFALSE 75177
// exit ;
75175: GO 75226
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75177: LD_ADDR_VAR 0 2
75181: PUSH
75182: LD_VAR 0 1
75186: PPUSH
75187: LD_INT 1
75189: PPUSH
75190: CALL_OW 275
75194: PUSH
75195: LD_VAR 0 1
75199: PPUSH
75200: LD_INT 2
75202: PPUSH
75203: CALL_OW 275
75207: PUSH
75208: LD_VAR 0 1
75212: PPUSH
75213: LD_INT 3
75215: PPUSH
75216: CALL_OW 275
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: ST_TO_ADDR
// end ;
75226: LD_VAR 0 2
75230: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75231: LD_INT 0
75233: PPUSH
75234: PPUSH
// result := array ;
75235: LD_ADDR_VAR 0 3
75239: PUSH
75240: LD_VAR 0 1
75244: ST_TO_ADDR
// if size >= result then
75245: LD_VAR 0 2
75249: PUSH
75250: LD_VAR 0 3
75254: GREATEREQUAL
75255: IFFALSE 75259
// exit ;
75257: GO 75309
// if size then
75259: LD_VAR 0 2
75263: IFFALSE 75309
// for i := array downto size do
75265: LD_ADDR_VAR 0 4
75269: PUSH
75270: DOUBLE
75271: LD_VAR 0 1
75275: INC
75276: ST_TO_ADDR
75277: LD_VAR 0 2
75281: PUSH
75282: FOR_DOWNTO
75283: IFFALSE 75307
// result := Delete ( result , result ) ;
75285: LD_ADDR_VAR 0 3
75289: PUSH
75290: LD_VAR 0 3
75294: PPUSH
75295: LD_VAR 0 3
75299: PPUSH
75300: CALL_OW 3
75304: ST_TO_ADDR
75305: GO 75282
75307: POP
75308: POP
// end ;
75309: LD_VAR 0 3
75313: RET
// export function ComExit ( unit ) ; var tmp ; begin
75314: LD_INT 0
75316: PPUSH
75317: PPUSH
// if not IsInUnit ( unit ) then
75318: LD_VAR 0 1
75322: PPUSH
75323: CALL_OW 310
75327: NOT
75328: IFFALSE 75332
// exit ;
75330: GO 75392
// tmp := IsInUnit ( unit ) ;
75332: LD_ADDR_VAR 0 3
75336: PUSH
75337: LD_VAR 0 1
75341: PPUSH
75342: CALL_OW 310
75346: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75347: LD_VAR 0 3
75351: PPUSH
75352: CALL_OW 247
75356: PUSH
75357: LD_INT 2
75359: EQUAL
75360: IFFALSE 75373
// ComExitVehicle ( unit ) else
75362: LD_VAR 0 1
75366: PPUSH
75367: CALL_OW 121
75371: GO 75382
// ComExitBuilding ( unit ) ;
75373: LD_VAR 0 1
75377: PPUSH
75378: CALL_OW 122
// result := tmp ;
75382: LD_ADDR_VAR 0 2
75386: PUSH
75387: LD_VAR 0 3
75391: ST_TO_ADDR
// end ;
75392: LD_VAR 0 2
75396: RET
// export function ComExitAll ( units ) ; var i ; begin
75397: LD_INT 0
75399: PPUSH
75400: PPUSH
// if not units then
75401: LD_VAR 0 1
75405: NOT
75406: IFFALSE 75410
// exit ;
75408: GO 75436
// for i in units do
75410: LD_ADDR_VAR 0 3
75414: PUSH
75415: LD_VAR 0 1
75419: PUSH
75420: FOR_IN
75421: IFFALSE 75434
// ComExit ( i ) ;
75423: LD_VAR 0 3
75427: PPUSH
75428: CALL 75314 0 1
75432: GO 75420
75434: POP
75435: POP
// end ;
75436: LD_VAR 0 2
75440: RET
// export function ResetHc ; begin
75441: LD_INT 0
75443: PPUSH
// InitHc ;
75444: CALL_OW 19
// hc_importance := 0 ;
75448: LD_ADDR_OWVAR 32
75452: PUSH
75453: LD_INT 0
75455: ST_TO_ADDR
// end ;
75456: LD_VAR 0 1
75460: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75461: LD_INT 0
75463: PPUSH
75464: PPUSH
75465: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75466: LD_ADDR_VAR 0 6
75470: PUSH
75471: LD_VAR 0 1
75475: PUSH
75476: LD_VAR 0 3
75480: PLUS
75481: PUSH
75482: LD_INT 2
75484: DIV
75485: ST_TO_ADDR
// if _x < 0 then
75486: LD_VAR 0 6
75490: PUSH
75491: LD_INT 0
75493: LESS
75494: IFFALSE 75511
// _x := _x * - 1 ;
75496: LD_ADDR_VAR 0 6
75500: PUSH
75501: LD_VAR 0 6
75505: PUSH
75506: LD_INT 1
75508: NEG
75509: MUL
75510: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75511: LD_ADDR_VAR 0 7
75515: PUSH
75516: LD_VAR 0 2
75520: PUSH
75521: LD_VAR 0 4
75525: PLUS
75526: PUSH
75527: LD_INT 2
75529: DIV
75530: ST_TO_ADDR
// if _y < 0 then
75531: LD_VAR 0 7
75535: PUSH
75536: LD_INT 0
75538: LESS
75539: IFFALSE 75556
// _y := _y * - 1 ;
75541: LD_ADDR_VAR 0 7
75545: PUSH
75546: LD_VAR 0 7
75550: PUSH
75551: LD_INT 1
75553: NEG
75554: MUL
75555: ST_TO_ADDR
// result := [ _x , _y ] ;
75556: LD_ADDR_VAR 0 5
75560: PUSH
75561: LD_VAR 0 6
75565: PUSH
75566: LD_VAR 0 7
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: ST_TO_ADDR
// end ;
75575: LD_VAR 0 5
75579: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75580: LD_INT 0
75582: PPUSH
75583: PPUSH
75584: PPUSH
75585: PPUSH
// task := GetTaskList ( unit ) ;
75586: LD_ADDR_VAR 0 7
75590: PUSH
75591: LD_VAR 0 1
75595: PPUSH
75596: CALL_OW 437
75600: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75601: LD_VAR 0 7
75605: NOT
75606: PUSH
75607: LD_VAR 0 1
75611: PPUSH
75612: LD_VAR 0 2
75616: PPUSH
75617: CALL_OW 308
75621: NOT
75622: AND
75623: IFFALSE 75627
// exit ;
75625: GO 75745
// if IsInArea ( unit , area ) then
75627: LD_VAR 0 1
75631: PPUSH
75632: LD_VAR 0 2
75636: PPUSH
75637: CALL_OW 308
75641: IFFALSE 75659
// begin ComMoveToArea ( unit , goAway ) ;
75643: LD_VAR 0 1
75647: PPUSH
75648: LD_VAR 0 3
75652: PPUSH
75653: CALL_OW 113
// exit ;
75657: GO 75745
// end ; if task [ 1 ] [ 1 ] <> M then
75659: LD_VAR 0 7
75663: PUSH
75664: LD_INT 1
75666: ARRAY
75667: PUSH
75668: LD_INT 1
75670: ARRAY
75671: PUSH
75672: LD_STRING M
75674: NONEQUAL
75675: IFFALSE 75679
// exit ;
75677: GO 75745
// x := task [ 1 ] [ 2 ] ;
75679: LD_ADDR_VAR 0 5
75683: PUSH
75684: LD_VAR 0 7
75688: PUSH
75689: LD_INT 1
75691: ARRAY
75692: PUSH
75693: LD_INT 2
75695: ARRAY
75696: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75697: LD_ADDR_VAR 0 6
75701: PUSH
75702: LD_VAR 0 7
75706: PUSH
75707: LD_INT 1
75709: ARRAY
75710: PUSH
75711: LD_INT 3
75713: ARRAY
75714: ST_TO_ADDR
// if InArea ( x , y , area ) then
75715: LD_VAR 0 5
75719: PPUSH
75720: LD_VAR 0 6
75724: PPUSH
75725: LD_VAR 0 2
75729: PPUSH
75730: CALL_OW 309
75734: IFFALSE 75745
// ComStop ( unit ) ;
75736: LD_VAR 0 1
75740: PPUSH
75741: CALL_OW 141
// end ;
75745: LD_VAR 0 4
75749: RET
// export function Abs ( value ) ; begin
75750: LD_INT 0
75752: PPUSH
// result := value ;
75753: LD_ADDR_VAR 0 2
75757: PUSH
75758: LD_VAR 0 1
75762: ST_TO_ADDR
// if value < 0 then
75763: LD_VAR 0 1
75767: PUSH
75768: LD_INT 0
75770: LESS
75771: IFFALSE 75788
// result := value * - 1 ;
75773: LD_ADDR_VAR 0 2
75777: PUSH
75778: LD_VAR 0 1
75782: PUSH
75783: LD_INT 1
75785: NEG
75786: MUL
75787: ST_TO_ADDR
// end ;
75788: LD_VAR 0 2
75792: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75793: LD_INT 0
75795: PPUSH
75796: PPUSH
75797: PPUSH
75798: PPUSH
75799: PPUSH
75800: PPUSH
75801: PPUSH
75802: PPUSH
// if not unit or not building then
75803: LD_VAR 0 1
75807: NOT
75808: PUSH
75809: LD_VAR 0 2
75813: NOT
75814: OR
75815: IFFALSE 75819
// exit ;
75817: GO 76045
// x := GetX ( building ) ;
75819: LD_ADDR_VAR 0 4
75823: PUSH
75824: LD_VAR 0 2
75828: PPUSH
75829: CALL_OW 250
75833: ST_TO_ADDR
// y := GetY ( building ) ;
75834: LD_ADDR_VAR 0 6
75838: PUSH
75839: LD_VAR 0 2
75843: PPUSH
75844: CALL_OW 251
75848: ST_TO_ADDR
// d := GetDir ( building ) ;
75849: LD_ADDR_VAR 0 8
75853: PUSH
75854: LD_VAR 0 2
75858: PPUSH
75859: CALL_OW 254
75863: ST_TO_ADDR
// r := 4 ;
75864: LD_ADDR_VAR 0 9
75868: PUSH
75869: LD_INT 4
75871: ST_TO_ADDR
// for i := 1 to 5 do
75872: LD_ADDR_VAR 0 10
75876: PUSH
75877: DOUBLE
75878: LD_INT 1
75880: DEC
75881: ST_TO_ADDR
75882: LD_INT 5
75884: PUSH
75885: FOR_TO
75886: IFFALSE 76043
// begin _x := ShiftX ( x , d , r + i ) ;
75888: LD_ADDR_VAR 0 5
75892: PUSH
75893: LD_VAR 0 4
75897: PPUSH
75898: LD_VAR 0 8
75902: PPUSH
75903: LD_VAR 0 9
75907: PUSH
75908: LD_VAR 0 10
75912: PLUS
75913: PPUSH
75914: CALL_OW 272
75918: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75919: LD_ADDR_VAR 0 7
75923: PUSH
75924: LD_VAR 0 6
75928: PPUSH
75929: LD_VAR 0 8
75933: PPUSH
75934: LD_VAR 0 9
75938: PUSH
75939: LD_VAR 0 10
75943: PLUS
75944: PPUSH
75945: CALL_OW 273
75949: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75950: LD_VAR 0 5
75954: PPUSH
75955: LD_VAR 0 7
75959: PPUSH
75960: CALL_OW 488
75964: PUSH
75965: LD_VAR 0 5
75969: PPUSH
75970: LD_VAR 0 7
75974: PPUSH
75975: CALL_OW 428
75979: PPUSH
75980: CALL_OW 247
75984: PUSH
75985: LD_INT 3
75987: PUSH
75988: LD_INT 2
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: IN
75995: NOT
75996: AND
75997: IFFALSE 76041
// begin ComMoveXY ( unit , _x , _y ) ;
75999: LD_VAR 0 1
76003: PPUSH
76004: LD_VAR 0 5
76008: PPUSH
76009: LD_VAR 0 7
76013: PPUSH
76014: CALL_OW 111
// result := [ _x , _y ] ;
76018: LD_ADDR_VAR 0 3
76022: PUSH
76023: LD_VAR 0 5
76027: PUSH
76028: LD_VAR 0 7
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: ST_TO_ADDR
// exit ;
76037: POP
76038: POP
76039: GO 76045
// end ; end ;
76041: GO 75885
76043: POP
76044: POP
// end ;
76045: LD_VAR 0 3
76049: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76050: LD_INT 0
76052: PPUSH
76053: PPUSH
76054: PPUSH
// result := 0 ;
76055: LD_ADDR_VAR 0 3
76059: PUSH
76060: LD_INT 0
76062: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76063: LD_VAR 0 1
76067: PUSH
76068: LD_INT 0
76070: LESS
76071: PUSH
76072: LD_VAR 0 1
76076: PUSH
76077: LD_INT 8
76079: GREATER
76080: OR
76081: PUSH
76082: LD_VAR 0 2
76086: PUSH
76087: LD_INT 0
76089: LESS
76090: OR
76091: PUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_INT 8
76099: GREATER
76100: OR
76101: IFFALSE 76105
// exit ;
76103: GO 76180
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76105: LD_ADDR_VAR 0 4
76109: PUSH
76110: LD_INT 22
76112: PUSH
76113: LD_VAR 0 2
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: PPUSH
76122: CALL_OW 69
76126: PUSH
76127: FOR_IN
76128: IFFALSE 76178
// begin un := UnitShoot ( i ) ;
76130: LD_ADDR_VAR 0 5
76134: PUSH
76135: LD_VAR 0 4
76139: PPUSH
76140: CALL_OW 504
76144: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76145: LD_VAR 0 5
76149: PPUSH
76150: CALL_OW 255
76154: PUSH
76155: LD_VAR 0 1
76159: EQUAL
76160: IFFALSE 76176
// begin result := un ;
76162: LD_ADDR_VAR 0 3
76166: PUSH
76167: LD_VAR 0 5
76171: ST_TO_ADDR
// exit ;
76172: POP
76173: POP
76174: GO 76180
// end ; end ;
76176: GO 76127
76178: POP
76179: POP
// end ;
76180: LD_VAR 0 3
76184: RET
// export function GetCargoBay ( units ) ; begin
76185: LD_INT 0
76187: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76188: LD_ADDR_VAR 0 2
76192: PUSH
76193: LD_VAR 0 1
76197: PPUSH
76198: LD_INT 2
76200: PUSH
76201: LD_INT 34
76203: PUSH
76204: LD_INT 12
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: LD_INT 34
76213: PUSH
76214: LD_INT 51
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: PUSH
76221: LD_INT 34
76223: PUSH
76224: LD_INT 32
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 34
76233: PUSH
76234: LD_INT 89
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: PPUSH
76248: CALL_OW 72
76252: ST_TO_ADDR
// end ;
76253: LD_VAR 0 2
76257: RET
// export function Negate ( value ) ; begin
76258: LD_INT 0
76260: PPUSH
// result := not value ;
76261: LD_ADDR_VAR 0 2
76265: PUSH
76266: LD_VAR 0 1
76270: NOT
76271: ST_TO_ADDR
// end ;
76272: LD_VAR 0 2
76276: RET
// export function Inc ( value ) ; begin
76277: LD_INT 0
76279: PPUSH
// result := value + 1 ;
76280: LD_ADDR_VAR 0 2
76284: PUSH
76285: LD_VAR 0 1
76289: PUSH
76290: LD_INT 1
76292: PLUS
76293: ST_TO_ADDR
// end ;
76294: LD_VAR 0 2
76298: RET
// export function Dec ( value ) ; begin
76299: LD_INT 0
76301: PPUSH
// result := value - 1 ;
76302: LD_ADDR_VAR 0 2
76306: PUSH
76307: LD_VAR 0 1
76311: PUSH
76312: LD_INT 1
76314: MINUS
76315: ST_TO_ADDR
// end ;
76316: LD_VAR 0 2
76320: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76321: LD_INT 0
76323: PPUSH
76324: PPUSH
76325: PPUSH
76326: PPUSH
76327: PPUSH
76328: PPUSH
76329: PPUSH
76330: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76331: LD_VAR 0 1
76335: PPUSH
76336: LD_VAR 0 2
76340: PPUSH
76341: CALL_OW 488
76345: NOT
76346: PUSH
76347: LD_VAR 0 3
76351: PPUSH
76352: LD_VAR 0 4
76356: PPUSH
76357: CALL_OW 488
76361: NOT
76362: OR
76363: IFFALSE 76376
// begin result := - 1 ;
76365: LD_ADDR_VAR 0 5
76369: PUSH
76370: LD_INT 1
76372: NEG
76373: ST_TO_ADDR
// exit ;
76374: GO 76611
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76376: LD_ADDR_VAR 0 12
76380: PUSH
76381: LD_VAR 0 1
76385: PPUSH
76386: LD_VAR 0 2
76390: PPUSH
76391: LD_VAR 0 3
76395: PPUSH
76396: LD_VAR 0 4
76400: PPUSH
76401: CALL 75461 0 4
76405: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76406: LD_ADDR_VAR 0 11
76410: PUSH
76411: LD_VAR 0 1
76415: PPUSH
76416: LD_VAR 0 2
76420: PPUSH
76421: LD_VAR 0 12
76425: PUSH
76426: LD_INT 1
76428: ARRAY
76429: PPUSH
76430: LD_VAR 0 12
76434: PUSH
76435: LD_INT 2
76437: ARRAY
76438: PPUSH
76439: CALL_OW 298
76443: ST_TO_ADDR
// distance := 9999 ;
76444: LD_ADDR_VAR 0 10
76448: PUSH
76449: LD_INT 9999
76451: ST_TO_ADDR
// for i := 0 to 5 do
76452: LD_ADDR_VAR 0 6
76456: PUSH
76457: DOUBLE
76458: LD_INT 0
76460: DEC
76461: ST_TO_ADDR
76462: LD_INT 5
76464: PUSH
76465: FOR_TO
76466: IFFALSE 76609
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76468: LD_ADDR_VAR 0 7
76472: PUSH
76473: LD_VAR 0 1
76477: PPUSH
76478: LD_VAR 0 6
76482: PPUSH
76483: LD_VAR 0 11
76487: PPUSH
76488: CALL_OW 272
76492: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76493: LD_ADDR_VAR 0 8
76497: PUSH
76498: LD_VAR 0 2
76502: PPUSH
76503: LD_VAR 0 6
76507: PPUSH
76508: LD_VAR 0 11
76512: PPUSH
76513: CALL_OW 273
76517: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76518: LD_VAR 0 7
76522: PPUSH
76523: LD_VAR 0 8
76527: PPUSH
76528: CALL_OW 488
76532: NOT
76533: IFFALSE 76537
// continue ;
76535: GO 76465
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76537: LD_ADDR_VAR 0 9
76541: PUSH
76542: LD_VAR 0 12
76546: PUSH
76547: LD_INT 1
76549: ARRAY
76550: PPUSH
76551: LD_VAR 0 12
76555: PUSH
76556: LD_INT 2
76558: ARRAY
76559: PPUSH
76560: LD_VAR 0 7
76564: PPUSH
76565: LD_VAR 0 8
76569: PPUSH
76570: CALL_OW 298
76574: ST_TO_ADDR
// if tmp < distance then
76575: LD_VAR 0 9
76579: PUSH
76580: LD_VAR 0 10
76584: LESS
76585: IFFALSE 76607
// begin result := i ;
76587: LD_ADDR_VAR 0 5
76591: PUSH
76592: LD_VAR 0 6
76596: ST_TO_ADDR
// distance := tmp ;
76597: LD_ADDR_VAR 0 10
76601: PUSH
76602: LD_VAR 0 9
76606: ST_TO_ADDR
// end ; end ;
76607: GO 76465
76609: POP
76610: POP
// end ;
76611: LD_VAR 0 5
76615: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76616: LD_INT 0
76618: PPUSH
76619: PPUSH
// if not driver or not IsInUnit ( driver ) then
76620: LD_VAR 0 1
76624: NOT
76625: PUSH
76626: LD_VAR 0 1
76630: PPUSH
76631: CALL_OW 310
76635: NOT
76636: OR
76637: IFFALSE 76641
// exit ;
76639: GO 76731
// vehicle := IsInUnit ( driver ) ;
76641: LD_ADDR_VAR 0 3
76645: PUSH
76646: LD_VAR 0 1
76650: PPUSH
76651: CALL_OW 310
76655: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76656: LD_VAR 0 1
76660: PPUSH
76661: LD_STRING \
76663: PUSH
76664: LD_INT 0
76666: PUSH
76667: LD_INT 0
76669: PUSH
76670: LD_INT 0
76672: PUSH
76673: LD_INT 0
76675: PUSH
76676: LD_INT 0
76678: PUSH
76679: LD_INT 0
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: PUSH
76691: LD_STRING E
76693: PUSH
76694: LD_INT 0
76696: PUSH
76697: LD_INT 0
76699: PUSH
76700: LD_VAR 0 3
76704: PUSH
76705: LD_INT 0
76707: PUSH
76708: LD_INT 0
76710: PUSH
76711: LD_INT 0
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: LIST
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PPUSH
76727: CALL_OW 446
// end ;
76731: LD_VAR 0 2
76735: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76736: LD_INT 0
76738: PPUSH
76739: PPUSH
// if not driver or not IsInUnit ( driver ) then
76740: LD_VAR 0 1
76744: NOT
76745: PUSH
76746: LD_VAR 0 1
76750: PPUSH
76751: CALL_OW 310
76755: NOT
76756: OR
76757: IFFALSE 76761
// exit ;
76759: GO 76851
// vehicle := IsInUnit ( driver ) ;
76761: LD_ADDR_VAR 0 3
76765: PUSH
76766: LD_VAR 0 1
76770: PPUSH
76771: CALL_OW 310
76775: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76776: LD_VAR 0 1
76780: PPUSH
76781: LD_STRING \
76783: PUSH
76784: LD_INT 0
76786: PUSH
76787: LD_INT 0
76789: PUSH
76790: LD_INT 0
76792: PUSH
76793: LD_INT 0
76795: PUSH
76796: LD_INT 0
76798: PUSH
76799: LD_INT 0
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: PUSH
76811: LD_STRING E
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: LD_INT 0
76819: PUSH
76820: LD_VAR 0 3
76824: PUSH
76825: LD_INT 0
76827: PUSH
76828: LD_INT 0
76830: PUSH
76831: LD_INT 0
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PPUSH
76847: CALL_OW 447
// end ;
76851: LD_VAR 0 2
76855: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76856: LD_INT 0
76858: PPUSH
76859: PPUSH
76860: PPUSH
// tmp := [ ] ;
76861: LD_ADDR_VAR 0 5
76865: PUSH
76866: EMPTY
76867: ST_TO_ADDR
// for i in units do
76868: LD_ADDR_VAR 0 4
76872: PUSH
76873: LD_VAR 0 1
76877: PUSH
76878: FOR_IN
76879: IFFALSE 76917
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76881: LD_ADDR_VAR 0 5
76885: PUSH
76886: LD_VAR 0 5
76890: PPUSH
76891: LD_VAR 0 5
76895: PUSH
76896: LD_INT 1
76898: PLUS
76899: PPUSH
76900: LD_VAR 0 4
76904: PPUSH
76905: CALL_OW 256
76909: PPUSH
76910: CALL_OW 2
76914: ST_TO_ADDR
76915: GO 76878
76917: POP
76918: POP
// if not tmp then
76919: LD_VAR 0 5
76923: NOT
76924: IFFALSE 76928
// exit ;
76926: GO 76976
// if asc then
76928: LD_VAR 0 2
76932: IFFALSE 76956
// result := SortListByListAsc ( units , tmp ) else
76934: LD_ADDR_VAR 0 3
76938: PUSH
76939: LD_VAR 0 1
76943: PPUSH
76944: LD_VAR 0 5
76948: PPUSH
76949: CALL_OW 76
76953: ST_TO_ADDR
76954: GO 76976
// result := SortListByListDesc ( units , tmp ) ;
76956: LD_ADDR_VAR 0 3
76960: PUSH
76961: LD_VAR 0 1
76965: PPUSH
76966: LD_VAR 0 5
76970: PPUSH
76971: CALL_OW 77
76975: ST_TO_ADDR
// end ;
76976: LD_VAR 0 3
76980: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76981: LD_INT 0
76983: PPUSH
76984: PPUSH
// task := GetTaskList ( mech ) ;
76985: LD_ADDR_VAR 0 4
76989: PUSH
76990: LD_VAR 0 1
76994: PPUSH
76995: CALL_OW 437
76999: ST_TO_ADDR
// if not task then
77000: LD_VAR 0 4
77004: NOT
77005: IFFALSE 77009
// exit ;
77007: GO 77051
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77009: LD_ADDR_VAR 0 3
77013: PUSH
77014: LD_VAR 0 4
77018: PUSH
77019: LD_INT 1
77021: ARRAY
77022: PUSH
77023: LD_INT 1
77025: ARRAY
77026: PUSH
77027: LD_STRING r
77029: EQUAL
77030: PUSH
77031: LD_VAR 0 4
77035: PUSH
77036: LD_INT 1
77038: ARRAY
77039: PUSH
77040: LD_INT 4
77042: ARRAY
77043: PUSH
77044: LD_VAR 0 2
77048: EQUAL
77049: AND
77050: ST_TO_ADDR
// end ;
77051: LD_VAR 0 3
77055: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77056: LD_INT 0
77058: PPUSH
// SetDir ( unit , d ) ;
77059: LD_VAR 0 1
77063: PPUSH
77064: LD_VAR 0 4
77068: PPUSH
77069: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77073: LD_VAR 0 1
77077: PPUSH
77078: LD_VAR 0 2
77082: PPUSH
77083: LD_VAR 0 3
77087: PPUSH
77088: LD_VAR 0 5
77092: PPUSH
77093: CALL_OW 48
// end ;
77097: LD_VAR 0 6
77101: RET
// export function ToNaturalNumber ( number ) ; begin
77102: LD_INT 0
77104: PPUSH
// result := number div 1 ;
77105: LD_ADDR_VAR 0 2
77109: PUSH
77110: LD_VAR 0 1
77114: PUSH
77115: LD_INT 1
77117: DIV
77118: ST_TO_ADDR
// if number < 0 then
77119: LD_VAR 0 1
77123: PUSH
77124: LD_INT 0
77126: LESS
77127: IFFALSE 77137
// result := 0 ;
77129: LD_ADDR_VAR 0 2
77133: PUSH
77134: LD_INT 0
77136: ST_TO_ADDR
// end ;
77137: LD_VAR 0 2
77141: RET
// export function SortByClass ( units , class ) ; var un ; begin
77142: LD_INT 0
77144: PPUSH
77145: PPUSH
// if not units or not class then
77146: LD_VAR 0 1
77150: NOT
77151: PUSH
77152: LD_VAR 0 2
77156: NOT
77157: OR
77158: IFFALSE 77162
// exit ;
77160: GO 77257
// result := [ ] ;
77162: LD_ADDR_VAR 0 3
77166: PUSH
77167: EMPTY
77168: ST_TO_ADDR
// for un in units do
77169: LD_ADDR_VAR 0 4
77173: PUSH
77174: LD_VAR 0 1
77178: PUSH
77179: FOR_IN
77180: IFFALSE 77255
// if GetClass ( un ) = class then
77182: LD_VAR 0 4
77186: PPUSH
77187: CALL_OW 257
77191: PUSH
77192: LD_VAR 0 2
77196: EQUAL
77197: IFFALSE 77224
// result := Insert ( result , 1 , un ) else
77199: LD_ADDR_VAR 0 3
77203: PUSH
77204: LD_VAR 0 3
77208: PPUSH
77209: LD_INT 1
77211: PPUSH
77212: LD_VAR 0 4
77216: PPUSH
77217: CALL_OW 2
77221: ST_TO_ADDR
77222: GO 77253
// result := Replace ( result , result + 1 , un ) ;
77224: LD_ADDR_VAR 0 3
77228: PUSH
77229: LD_VAR 0 3
77233: PPUSH
77234: LD_VAR 0 3
77238: PUSH
77239: LD_INT 1
77241: PLUS
77242: PPUSH
77243: LD_VAR 0 4
77247: PPUSH
77248: CALL_OW 1
77252: ST_TO_ADDR
77253: GO 77179
77255: POP
77256: POP
// end ;
77257: LD_VAR 0 3
77261: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77262: LD_INT 0
77264: PPUSH
77265: PPUSH
77266: PPUSH
77267: PPUSH
77268: PPUSH
77269: PPUSH
77270: PPUSH
// result := [ ] ;
77271: LD_ADDR_VAR 0 4
77275: PUSH
77276: EMPTY
77277: ST_TO_ADDR
// if x - r < 0 then
77278: LD_VAR 0 1
77282: PUSH
77283: LD_VAR 0 3
77287: MINUS
77288: PUSH
77289: LD_INT 0
77291: LESS
77292: IFFALSE 77304
// min_x := 0 else
77294: LD_ADDR_VAR 0 8
77298: PUSH
77299: LD_INT 0
77301: ST_TO_ADDR
77302: GO 77320
// min_x := x - r ;
77304: LD_ADDR_VAR 0 8
77308: PUSH
77309: LD_VAR 0 1
77313: PUSH
77314: LD_VAR 0 3
77318: MINUS
77319: ST_TO_ADDR
// if y - r < 0 then
77320: LD_VAR 0 2
77324: PUSH
77325: LD_VAR 0 3
77329: MINUS
77330: PUSH
77331: LD_INT 0
77333: LESS
77334: IFFALSE 77346
// min_y := 0 else
77336: LD_ADDR_VAR 0 7
77340: PUSH
77341: LD_INT 0
77343: ST_TO_ADDR
77344: GO 77362
// min_y := y - r ;
77346: LD_ADDR_VAR 0 7
77350: PUSH
77351: LD_VAR 0 2
77355: PUSH
77356: LD_VAR 0 3
77360: MINUS
77361: ST_TO_ADDR
// max_x := x + r ;
77362: LD_ADDR_VAR 0 9
77366: PUSH
77367: LD_VAR 0 1
77371: PUSH
77372: LD_VAR 0 3
77376: PLUS
77377: ST_TO_ADDR
// max_y := y + r ;
77378: LD_ADDR_VAR 0 10
77382: PUSH
77383: LD_VAR 0 2
77387: PUSH
77388: LD_VAR 0 3
77392: PLUS
77393: ST_TO_ADDR
// for _x = min_x to max_x do
77394: LD_ADDR_VAR 0 5
77398: PUSH
77399: DOUBLE
77400: LD_VAR 0 8
77404: DEC
77405: ST_TO_ADDR
77406: LD_VAR 0 9
77410: PUSH
77411: FOR_TO
77412: IFFALSE 77513
// for _y = min_y to max_y do
77414: LD_ADDR_VAR 0 6
77418: PUSH
77419: DOUBLE
77420: LD_VAR 0 7
77424: DEC
77425: ST_TO_ADDR
77426: LD_VAR 0 10
77430: PUSH
77431: FOR_TO
77432: IFFALSE 77509
// begin if not ValidHex ( _x , _y ) then
77434: LD_VAR 0 5
77438: PPUSH
77439: LD_VAR 0 6
77443: PPUSH
77444: CALL_OW 488
77448: NOT
77449: IFFALSE 77453
// continue ;
77451: GO 77431
// if GetResourceTypeXY ( _x , _y ) then
77453: LD_VAR 0 5
77457: PPUSH
77458: LD_VAR 0 6
77462: PPUSH
77463: CALL_OW 283
77467: IFFALSE 77507
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77469: LD_ADDR_VAR 0 4
77473: PUSH
77474: LD_VAR 0 4
77478: PPUSH
77479: LD_VAR 0 4
77483: PUSH
77484: LD_INT 1
77486: PLUS
77487: PPUSH
77488: LD_VAR 0 5
77492: PUSH
77493: LD_VAR 0 6
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PPUSH
77502: CALL_OW 1
77506: ST_TO_ADDR
// end ;
77507: GO 77431
77509: POP
77510: POP
77511: GO 77411
77513: POP
77514: POP
// end ;
77515: LD_VAR 0 4
77519: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77520: LD_INT 0
77522: PPUSH
77523: PPUSH
77524: PPUSH
77525: PPUSH
77526: PPUSH
77527: PPUSH
77528: PPUSH
77529: PPUSH
// if not units then
77530: LD_VAR 0 1
77534: NOT
77535: IFFALSE 77539
// exit ;
77537: GO 78063
// result := UnitFilter ( units , [ f_ok ] ) ;
77539: LD_ADDR_VAR 0 3
77543: PUSH
77544: LD_VAR 0 1
77548: PPUSH
77549: LD_INT 50
77551: PUSH
77552: EMPTY
77553: LIST
77554: PPUSH
77555: CALL_OW 72
77559: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77560: LD_ADDR_VAR 0 8
77564: PUSH
77565: LD_VAR 0 1
77569: PUSH
77570: LD_INT 1
77572: ARRAY
77573: PPUSH
77574: CALL_OW 255
77578: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77579: LD_ADDR_VAR 0 10
77583: PUSH
77584: LD_INT 29
77586: PUSH
77587: LD_INT 91
77589: PUSH
77590: LD_INT 49
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: LIST
77597: ST_TO_ADDR
// if not result then
77598: LD_VAR 0 3
77602: NOT
77603: IFFALSE 77607
// exit ;
77605: GO 78063
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77607: LD_ADDR_VAR 0 5
77611: PUSH
77612: LD_INT 81
77614: PUSH
77615: LD_VAR 0 8
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PPUSH
77624: CALL_OW 69
77628: ST_TO_ADDR
// for i in result do
77629: LD_ADDR_VAR 0 4
77633: PUSH
77634: LD_VAR 0 3
77638: PUSH
77639: FOR_IN
77640: IFFALSE 78061
// begin tag := GetTag ( i ) + 1 ;
77642: LD_ADDR_VAR 0 9
77646: PUSH
77647: LD_VAR 0 4
77651: PPUSH
77652: CALL_OW 110
77656: PUSH
77657: LD_INT 1
77659: PLUS
77660: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77661: LD_ADDR_VAR 0 7
77665: PUSH
77666: LD_VAR 0 4
77670: PPUSH
77671: CALL_OW 250
77675: PPUSH
77676: LD_VAR 0 4
77680: PPUSH
77681: CALL_OW 251
77685: PPUSH
77686: LD_INT 6
77688: PPUSH
77689: CALL 77262 0 3
77693: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77694: LD_VAR 0 4
77698: PPUSH
77699: CALL_OW 247
77703: PUSH
77704: LD_INT 2
77706: EQUAL
77707: PUSH
77708: LD_VAR 0 7
77712: AND
77713: PUSH
77714: LD_VAR 0 4
77718: PPUSH
77719: CALL_OW 264
77723: PUSH
77724: LD_VAR 0 10
77728: IN
77729: NOT
77730: AND
77731: IFFALSE 77770
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77733: LD_VAR 0 4
77737: PPUSH
77738: LD_VAR 0 7
77742: PUSH
77743: LD_INT 1
77745: ARRAY
77746: PUSH
77747: LD_INT 1
77749: ARRAY
77750: PPUSH
77751: LD_VAR 0 7
77755: PUSH
77756: LD_INT 1
77758: ARRAY
77759: PUSH
77760: LD_INT 2
77762: ARRAY
77763: PPUSH
77764: CALL_OW 116
77768: GO 78059
// if path > tag then
77770: LD_VAR 0 2
77774: PUSH
77775: LD_VAR 0 9
77779: GREATER
77780: IFFALSE 77988
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77782: LD_ADDR_VAR 0 6
77786: PUSH
77787: LD_VAR 0 5
77791: PPUSH
77792: LD_INT 91
77794: PUSH
77795: LD_VAR 0 4
77799: PUSH
77800: LD_INT 8
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: LIST
77807: PPUSH
77808: CALL_OW 72
77812: ST_TO_ADDR
// if nearEnemy then
77813: LD_VAR 0 6
77817: IFFALSE 77886
// begin if GetWeapon ( i ) = ru_time_lapser then
77819: LD_VAR 0 4
77823: PPUSH
77824: CALL_OW 264
77828: PUSH
77829: LD_INT 49
77831: EQUAL
77832: IFFALSE 77860
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77834: LD_VAR 0 4
77838: PPUSH
77839: LD_VAR 0 6
77843: PPUSH
77844: LD_VAR 0 4
77848: PPUSH
77849: CALL_OW 74
77853: PPUSH
77854: CALL_OW 112
77858: GO 77884
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77860: LD_VAR 0 4
77864: PPUSH
77865: LD_VAR 0 6
77869: PPUSH
77870: LD_VAR 0 4
77874: PPUSH
77875: CALL_OW 74
77879: PPUSH
77880: CALL 78988 0 2
// end else
77884: GO 77986
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77886: LD_VAR 0 4
77890: PPUSH
77891: LD_VAR 0 2
77895: PUSH
77896: LD_VAR 0 9
77900: ARRAY
77901: PUSH
77902: LD_INT 1
77904: ARRAY
77905: PPUSH
77906: LD_VAR 0 2
77910: PUSH
77911: LD_VAR 0 9
77915: ARRAY
77916: PUSH
77917: LD_INT 2
77919: ARRAY
77920: PPUSH
77921: CALL_OW 297
77925: PUSH
77926: LD_INT 6
77928: GREATER
77929: IFFALSE 77972
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77931: LD_VAR 0 4
77935: PPUSH
77936: LD_VAR 0 2
77940: PUSH
77941: LD_VAR 0 9
77945: ARRAY
77946: PUSH
77947: LD_INT 1
77949: ARRAY
77950: PPUSH
77951: LD_VAR 0 2
77955: PUSH
77956: LD_VAR 0 9
77960: ARRAY
77961: PUSH
77962: LD_INT 2
77964: ARRAY
77965: PPUSH
77966: CALL_OW 114
77970: GO 77986
// SetTag ( i , tag ) ;
77972: LD_VAR 0 4
77976: PPUSH
77977: LD_VAR 0 9
77981: PPUSH
77982: CALL_OW 109
// end else
77986: GO 78059
// if enemy then
77988: LD_VAR 0 5
77992: IFFALSE 78059
// begin if GetWeapon ( i ) = ru_time_lapser then
77994: LD_VAR 0 4
77998: PPUSH
77999: CALL_OW 264
78003: PUSH
78004: LD_INT 49
78006: EQUAL
78007: IFFALSE 78035
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78009: LD_VAR 0 4
78013: PPUSH
78014: LD_VAR 0 5
78018: PPUSH
78019: LD_VAR 0 4
78023: PPUSH
78024: CALL_OW 74
78028: PPUSH
78029: CALL_OW 112
78033: GO 78059
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78035: LD_VAR 0 4
78039: PPUSH
78040: LD_VAR 0 5
78044: PPUSH
78045: LD_VAR 0 4
78049: PPUSH
78050: CALL_OW 74
78054: PPUSH
78055: CALL 78988 0 2
// end ; end ;
78059: GO 77639
78061: POP
78062: POP
// end ;
78063: LD_VAR 0 3
78067: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78068: LD_INT 0
78070: PPUSH
78071: PPUSH
78072: PPUSH
// if not unit or IsInUnit ( unit ) then
78073: LD_VAR 0 1
78077: NOT
78078: PUSH
78079: LD_VAR 0 1
78083: PPUSH
78084: CALL_OW 310
78088: OR
78089: IFFALSE 78093
// exit ;
78091: GO 78184
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78093: LD_ADDR_VAR 0 4
78097: PUSH
78098: LD_VAR 0 1
78102: PPUSH
78103: CALL_OW 250
78107: PPUSH
78108: LD_VAR 0 2
78112: PPUSH
78113: LD_INT 1
78115: PPUSH
78116: CALL_OW 272
78120: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78121: LD_ADDR_VAR 0 5
78125: PUSH
78126: LD_VAR 0 1
78130: PPUSH
78131: CALL_OW 251
78135: PPUSH
78136: LD_VAR 0 2
78140: PPUSH
78141: LD_INT 1
78143: PPUSH
78144: CALL_OW 273
78148: ST_TO_ADDR
// if ValidHex ( x , y ) then
78149: LD_VAR 0 4
78153: PPUSH
78154: LD_VAR 0 5
78158: PPUSH
78159: CALL_OW 488
78163: IFFALSE 78184
// ComTurnXY ( unit , x , y ) ;
78165: LD_VAR 0 1
78169: PPUSH
78170: LD_VAR 0 4
78174: PPUSH
78175: LD_VAR 0 5
78179: PPUSH
78180: CALL_OW 118
// end ;
78184: LD_VAR 0 3
78188: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78189: LD_INT 0
78191: PPUSH
78192: PPUSH
// result := false ;
78193: LD_ADDR_VAR 0 3
78197: PUSH
78198: LD_INT 0
78200: ST_TO_ADDR
// if not units then
78201: LD_VAR 0 2
78205: NOT
78206: IFFALSE 78210
// exit ;
78208: GO 78255
// for i in units do
78210: LD_ADDR_VAR 0 4
78214: PUSH
78215: LD_VAR 0 2
78219: PUSH
78220: FOR_IN
78221: IFFALSE 78253
// if See ( side , i ) then
78223: LD_VAR 0 1
78227: PPUSH
78228: LD_VAR 0 4
78232: PPUSH
78233: CALL_OW 292
78237: IFFALSE 78251
// begin result := true ;
78239: LD_ADDR_VAR 0 3
78243: PUSH
78244: LD_INT 1
78246: ST_TO_ADDR
// exit ;
78247: POP
78248: POP
78249: GO 78255
// end ;
78251: GO 78220
78253: POP
78254: POP
// end ;
78255: LD_VAR 0 3
78259: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78260: LD_INT 0
78262: PPUSH
78263: PPUSH
78264: PPUSH
78265: PPUSH
// if not unit or not points then
78266: LD_VAR 0 1
78270: NOT
78271: PUSH
78272: LD_VAR 0 2
78276: NOT
78277: OR
78278: IFFALSE 78282
// exit ;
78280: GO 78372
// dist := 99999 ;
78282: LD_ADDR_VAR 0 5
78286: PUSH
78287: LD_INT 99999
78289: ST_TO_ADDR
// for i in points do
78290: LD_ADDR_VAR 0 4
78294: PUSH
78295: LD_VAR 0 2
78299: PUSH
78300: FOR_IN
78301: IFFALSE 78370
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78303: LD_ADDR_VAR 0 6
78307: PUSH
78308: LD_VAR 0 1
78312: PPUSH
78313: LD_VAR 0 4
78317: PUSH
78318: LD_INT 1
78320: ARRAY
78321: PPUSH
78322: LD_VAR 0 4
78326: PUSH
78327: LD_INT 2
78329: ARRAY
78330: PPUSH
78331: CALL_OW 297
78335: ST_TO_ADDR
// if tmpDist < dist then
78336: LD_VAR 0 6
78340: PUSH
78341: LD_VAR 0 5
78345: LESS
78346: IFFALSE 78368
// begin result := i ;
78348: LD_ADDR_VAR 0 3
78352: PUSH
78353: LD_VAR 0 4
78357: ST_TO_ADDR
// dist := tmpDist ;
78358: LD_ADDR_VAR 0 5
78362: PUSH
78363: LD_VAR 0 6
78367: ST_TO_ADDR
// end ; end ;
78368: GO 78300
78370: POP
78371: POP
// end ;
78372: LD_VAR 0 3
78376: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78377: LD_INT 0
78379: PPUSH
// uc_side := side ;
78380: LD_ADDR_OWVAR 20
78384: PUSH
78385: LD_VAR 0 1
78389: ST_TO_ADDR
// uc_nation := 3 ;
78390: LD_ADDR_OWVAR 21
78394: PUSH
78395: LD_INT 3
78397: ST_TO_ADDR
// vc_chassis := 25 ;
78398: LD_ADDR_OWVAR 37
78402: PUSH
78403: LD_INT 25
78405: ST_TO_ADDR
// vc_engine := engine_siberite ;
78406: LD_ADDR_OWVAR 39
78410: PUSH
78411: LD_INT 3
78413: ST_TO_ADDR
// vc_control := control_computer ;
78414: LD_ADDR_OWVAR 38
78418: PUSH
78419: LD_INT 3
78421: ST_TO_ADDR
// vc_weapon := 59 ;
78422: LD_ADDR_OWVAR 40
78426: PUSH
78427: LD_INT 59
78429: ST_TO_ADDR
// result := CreateVehicle ;
78430: LD_ADDR_VAR 0 5
78434: PUSH
78435: CALL_OW 45
78439: ST_TO_ADDR
// SetDir ( result , d ) ;
78440: LD_VAR 0 5
78444: PPUSH
78445: LD_VAR 0 4
78449: PPUSH
78450: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78454: LD_VAR 0 5
78458: PPUSH
78459: LD_VAR 0 2
78463: PPUSH
78464: LD_VAR 0 3
78468: PPUSH
78469: LD_INT 0
78471: PPUSH
78472: CALL_OW 48
// end ;
78476: LD_VAR 0 5
78480: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78481: LD_INT 0
78483: PPUSH
78484: PPUSH
78485: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78486: LD_ADDR_VAR 0 2
78490: PUSH
78491: LD_INT 0
78493: PUSH
78494: LD_INT 0
78496: PUSH
78497: LD_INT 0
78499: PUSH
78500: LD_INT 0
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78509: LD_VAR 0 1
78513: NOT
78514: PUSH
78515: LD_VAR 0 1
78519: PPUSH
78520: CALL_OW 264
78524: PUSH
78525: LD_INT 12
78527: PUSH
78528: LD_INT 51
78530: PUSH
78531: LD_INT 32
78533: PUSH
78534: LD_INT 89
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: IN
78543: NOT
78544: OR
78545: IFFALSE 78549
// exit ;
78547: GO 78647
// for i := 1 to 3 do
78549: LD_ADDR_VAR 0 3
78553: PUSH
78554: DOUBLE
78555: LD_INT 1
78557: DEC
78558: ST_TO_ADDR
78559: LD_INT 3
78561: PUSH
78562: FOR_TO
78563: IFFALSE 78645
// begin tmp := GetCargo ( cargo , i ) ;
78565: LD_ADDR_VAR 0 4
78569: PUSH
78570: LD_VAR 0 1
78574: PPUSH
78575: LD_VAR 0 3
78579: PPUSH
78580: CALL_OW 289
78584: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78585: LD_ADDR_VAR 0 2
78589: PUSH
78590: LD_VAR 0 2
78594: PPUSH
78595: LD_VAR 0 3
78599: PPUSH
78600: LD_VAR 0 4
78604: PPUSH
78605: CALL_OW 1
78609: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78610: LD_ADDR_VAR 0 2
78614: PUSH
78615: LD_VAR 0 2
78619: PPUSH
78620: LD_INT 4
78622: PPUSH
78623: LD_VAR 0 2
78627: PUSH
78628: LD_INT 4
78630: ARRAY
78631: PUSH
78632: LD_VAR 0 4
78636: PLUS
78637: PPUSH
78638: CALL_OW 1
78642: ST_TO_ADDR
// end ;
78643: GO 78562
78645: POP
78646: POP
// end ;
78647: LD_VAR 0 2
78651: RET
// export function Length ( array ) ; begin
78652: LD_INT 0
78654: PPUSH
// result := array + 0 ;
78655: LD_ADDR_VAR 0 2
78659: PUSH
78660: LD_VAR 0 1
78664: PUSH
78665: LD_INT 0
78667: PLUS
78668: ST_TO_ADDR
// end ;
78669: LD_VAR 0 2
78673: RET
// export function PrepareArray ( array ) ; begin
78674: LD_INT 0
78676: PPUSH
// result := array diff 0 ;
78677: LD_ADDR_VAR 0 2
78681: PUSH
78682: LD_VAR 0 1
78686: PUSH
78687: LD_INT 0
78689: DIFF
78690: ST_TO_ADDR
// if not result [ 1 ] then
78691: LD_VAR 0 2
78695: PUSH
78696: LD_INT 1
78698: ARRAY
78699: NOT
78700: IFFALSE 78720
// result := Delete ( result , 1 ) ;
78702: LD_ADDR_VAR 0 2
78706: PUSH
78707: LD_VAR 0 2
78711: PPUSH
78712: LD_INT 1
78714: PPUSH
78715: CALL_OW 3
78719: ST_TO_ADDR
// end ;
78720: LD_VAR 0 2
78724: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78725: LD_INT 0
78727: PPUSH
78728: PPUSH
78729: PPUSH
78730: PPUSH
// sibRocketRange := 25 ;
78731: LD_ADDR_VAR 0 6
78735: PUSH
78736: LD_INT 25
78738: ST_TO_ADDR
// result := false ;
78739: LD_ADDR_VAR 0 4
78743: PUSH
78744: LD_INT 0
78746: ST_TO_ADDR
// for i := 0 to 5 do
78747: LD_ADDR_VAR 0 5
78751: PUSH
78752: DOUBLE
78753: LD_INT 0
78755: DEC
78756: ST_TO_ADDR
78757: LD_INT 5
78759: PUSH
78760: FOR_TO
78761: IFFALSE 78828
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78763: LD_VAR 0 1
78767: PPUSH
78768: LD_VAR 0 5
78772: PPUSH
78773: LD_VAR 0 6
78777: PPUSH
78778: CALL_OW 272
78782: PPUSH
78783: LD_VAR 0 2
78787: PPUSH
78788: LD_VAR 0 5
78792: PPUSH
78793: LD_VAR 0 6
78797: PPUSH
78798: CALL_OW 273
78802: PPUSH
78803: LD_VAR 0 3
78807: PPUSH
78808: CALL_OW 309
78812: IFFALSE 78826
// begin result := true ;
78814: LD_ADDR_VAR 0 4
78818: PUSH
78819: LD_INT 1
78821: ST_TO_ADDR
// exit ;
78822: POP
78823: POP
78824: GO 78830
// end ;
78826: GO 78760
78828: POP
78829: POP
// end ;
78830: LD_VAR 0 4
78834: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78835: LD_INT 0
78837: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78838: LD_VAR 0 1
78842: PPUSH
78843: LD_VAR 0 2
78847: PPUSH
78848: LD_INT 0
78850: PPUSH
78851: LD_INT 0
78853: PPUSH
78854: LD_INT 1
78856: PPUSH
78857: LD_INT 0
78859: PPUSH
78860: CALL_OW 587
// end ;
78864: LD_VAR 0 3
78868: RET
// export function CenterOnNow ( unit ) ; begin
78869: LD_INT 0
78871: PPUSH
// result := IsInUnit ( unit ) ;
78872: LD_ADDR_VAR 0 2
78876: PUSH
78877: LD_VAR 0 1
78881: PPUSH
78882: CALL_OW 310
78886: ST_TO_ADDR
// if not result then
78887: LD_VAR 0 2
78891: NOT
78892: IFFALSE 78904
// result := unit ;
78894: LD_ADDR_VAR 0 2
78898: PUSH
78899: LD_VAR 0 1
78903: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78904: LD_VAR 0 1
78908: PPUSH
78909: CALL_OW 87
// end ;
78913: LD_VAR 0 2
78917: RET
// export function ComMoveHex ( unit , hex ) ; begin
78918: LD_INT 0
78920: PPUSH
// if not hex then
78921: LD_VAR 0 2
78925: NOT
78926: IFFALSE 78930
// exit ;
78928: GO 78983
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78930: LD_VAR 0 2
78934: PUSH
78935: LD_INT 1
78937: ARRAY
78938: PPUSH
78939: LD_VAR 0 2
78943: PUSH
78944: LD_INT 2
78946: ARRAY
78947: PPUSH
78948: CALL_OW 428
78952: IFFALSE 78956
// exit ;
78954: GO 78983
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78956: LD_VAR 0 1
78960: PPUSH
78961: LD_VAR 0 2
78965: PUSH
78966: LD_INT 1
78968: ARRAY
78969: PPUSH
78970: LD_VAR 0 2
78974: PUSH
78975: LD_INT 2
78977: ARRAY
78978: PPUSH
78979: CALL_OW 111
// end ;
78983: LD_VAR 0 3
78987: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78988: LD_INT 0
78990: PPUSH
78991: PPUSH
78992: PPUSH
// if not unit or not enemy then
78993: LD_VAR 0 1
78997: NOT
78998: PUSH
78999: LD_VAR 0 2
79003: NOT
79004: OR
79005: IFFALSE 79009
// exit ;
79007: GO 79133
// x := GetX ( enemy ) ;
79009: LD_ADDR_VAR 0 4
79013: PUSH
79014: LD_VAR 0 2
79018: PPUSH
79019: CALL_OW 250
79023: ST_TO_ADDR
// y := GetY ( enemy ) ;
79024: LD_ADDR_VAR 0 5
79028: PUSH
79029: LD_VAR 0 2
79033: PPUSH
79034: CALL_OW 251
79038: ST_TO_ADDR
// if ValidHex ( x , y ) then
79039: LD_VAR 0 4
79043: PPUSH
79044: LD_VAR 0 5
79048: PPUSH
79049: CALL_OW 488
79053: IFFALSE 79133
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
79055: LD_VAR 0 2
79059: PPUSH
79060: CALL_OW 247
79064: PUSH
79065: LD_INT 3
79067: PUSH
79068: LD_INT 2
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: IN
79075: PUSH
79076: LD_VAR 0 1
79080: PPUSH
79081: CALL_OW 255
79085: PPUSH
79086: LD_VAR 0 2
79090: PPUSH
79091: CALL_OW 292
79095: AND
79096: IFFALSE 79114
// ComAttackUnit ( unit , enemy ) else
79098: LD_VAR 0 1
79102: PPUSH
79103: LD_VAR 0 2
79107: PPUSH
79108: CALL_OW 115
79112: GO 79133
// ComAgressiveMove ( unit , x , y ) ;
79114: LD_VAR 0 1
79118: PPUSH
79119: LD_VAR 0 4
79123: PPUSH
79124: LD_VAR 0 5
79128: PPUSH
79129: CALL_OW 114
// end ; end_of_file
79133: LD_VAR 0 3
79137: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79138: LD_VAR 0 1
79142: PUSH
79143: LD_INT 200
79145: DOUBLE
79146: GREATEREQUAL
79147: IFFALSE 79155
79149: LD_INT 299
79151: DOUBLE
79152: LESSEQUAL
79153: IFTRUE 79157
79155: GO 79189
79157: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79158: LD_VAR 0 1
79162: PPUSH
79163: LD_VAR 0 2
79167: PPUSH
79168: LD_VAR 0 3
79172: PPUSH
79173: LD_VAR 0 4
79177: PPUSH
79178: LD_VAR 0 5
79182: PPUSH
79183: CALL 32862 0 5
79187: GO 79266
79189: LD_INT 300
79191: DOUBLE
79192: GREATEREQUAL
79193: IFFALSE 79201
79195: LD_INT 399
79197: DOUBLE
79198: LESSEQUAL
79199: IFTRUE 79203
79201: GO 79265
79203: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79204: LD_VAR 0 1
79208: PPUSH
79209: LD_VAR 0 2
79213: PPUSH
79214: LD_VAR 0 3
79218: PPUSH
79219: LD_VAR 0 4
79223: PPUSH
79224: LD_VAR 0 5
79228: PPUSH
79229: LD_VAR 0 6
79233: PPUSH
79234: LD_VAR 0 7
79238: PPUSH
79239: LD_VAR 0 8
79243: PPUSH
79244: LD_VAR 0 9
79248: PPUSH
79249: LD_VAR 0 10
79253: PPUSH
79254: LD_VAR 0 11
79258: PPUSH
79259: CALL 29187 0 11
79263: GO 79266
79265: POP
// end ;
79266: PPOPN 11
79268: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79269: LD_VAR 0 1
79273: PPUSH
79274: LD_VAR 0 2
79278: PPUSH
79279: LD_VAR 0 3
79283: PPUSH
79284: LD_VAR 0 4
79288: PPUSH
79289: LD_VAR 0 5
79293: PPUSH
79294: CALL 32598 0 5
// end ; end_of_file
79298: PPOPN 5
79300: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79301: LD_VAR 0 1
79305: PPUSH
79306: LD_VAR 0 2
79310: PPUSH
79311: LD_VAR 0 3
79315: PPUSH
79316: LD_VAR 0 4
79320: PPUSH
79321: LD_VAR 0 5
79325: PPUSH
79326: LD_VAR 0 6
79330: PPUSH
79331: CALL 16839 0 6
// end ;
79335: PPOPN 6
79337: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79338: LD_INT 0
79340: PPUSH
// begin if not units then
79341: LD_VAR 0 1
79345: NOT
79346: IFFALSE 79350
// exit ;
79348: GO 79350
// end ;
79350: PPOPN 7
79352: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79353: CALL 16743 0 0
// end ;
79357: PPOPN 1
79359: END
