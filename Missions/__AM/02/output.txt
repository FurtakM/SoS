// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15211 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76444 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77665 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36695 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36695 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36695 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75798 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32384 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on Command ( cmd ) do var i , j , tmp ;
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
// begin SOS_Command ( cmd ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL 32490 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PUSH
14699: FOR_IN
14700: IFFALSE 14821
// begin if GetTaskList ( i ) then
14702: LD_VAR 0 2
14706: PPUSH
14707: CALL_OW 437
14711: IFFALSE 14819
// begin for j = 1 to GetTaskList ( i ) do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 437
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14817
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 437
14750: PUSH
14751: LD_VAR 0 3
14755: ARRAY
14756: PUSH
14757: LD_INT 4
14759: ARRAY
14760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 4
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14815
// ComStop ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 141
// end ;
14815: GO 14733
14817: POP
14818: POP
// end ; end ;
14819: GO 14699
14821: POP
14822: POP
// end ;
14823: PPOPN 4
14825: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_EXP 8
14835: EQUAL
14836: PUSH
14837: LD_EXP 21
14841: PUSH
14842: LD_INT 4
14844: NONEQUAL
14845: AND
14846: IFFALSE 14998
// begin if IsOk ( Mikhail ) then
14848: LD_EXP 8
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14865
// AskMikhail else
14859: CALL 7486 0 0
14863: GO 14998
// if IsOk ( llab1 ) then
14865: LD_INT 23
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14961
// begin InGameOn ;
14874: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14878: LD_EXP 8
14882: PPUSH
14883: LD_INT 6
14885: PPUSH
14886: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14890: LD_INT 23
14892: PPUSH
14893: LD_INT 6
14895: PPUSH
14896: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14900: LD_EXP 8
14904: PPUSH
14905: LD_INT 23
14907: PPUSH
14908: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14919: LD_EXP 8
14923: PPUSH
14924: CALL_OW 310
14928: PUSH
14929: LD_INT 23
14931: EQUAL
14932: PUSH
14933: LD_EXP 8
14937: PPUSH
14938: CALL_OW 301
14942: OR
14943: IFFALSE 14912
// SetSide ( llab1 , 1 ) ;
14945: LD_INT 23
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 235
// InGameOff ;
14955: CALL_OW 9
// end else
14959: GO 14998
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14961: LD_INT 3
14963: PPUSH
14964: LD_INT 6
14966: PPUSH
14967: LD_INT 2
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14977: LD_EXP 8
14981: PPUSH
14982: LD_INT 6
14984: PPUSH
14985: CALL_OW 235
// ComHold ( Mikhail ) ;
14989: LD_EXP 8
14993: PPUSH
14994: CALL_OW 140
// end ; end ; end ;
14998: PPOPN 2
15000: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL 32506 0 2
// end ;
15015: PPOPN 2
15017: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15018: LD_EXP 8
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 3
15030: NONEQUAL
15031: IFFALSE 15049
15033: GO 15035
15035: DISABLE
// begin enable ;
15036: ENABLE
// SetClass ( Mikhail , 3 ) ;
15037: LD_EXP 8
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 336
// end ; end_of_file
15049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15050: LD_INT 22
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_INT 0
15136: EQUAL
15137: AND
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 255
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: AND
15151: PUSH
15152: LD_INT 10
15154: PPUSH
15155: CALL_OW 255
15159: PUSH
15160: LD_INT 3
15162: EQUAL
15163: AND
15164: IFFALSE 15176
15166: GO 15168
15168: DISABLE
// YouLost ( Engineer ) ;
15169: LD_STRING Engineer
15171: PPUSH
15172: CALL_OW 104
15176: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 255
15184: PUSH
15185: LD_INT 3
15187: EQUAL
15188: PUSH
15189: LD_EXP 27
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15210
15200: GO 15202
15202: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15203: LD_STRING DepotCaptured
15205: PPUSH
15206: CALL_OW 104
15210: END
// export function PrepareTigers ; var i , un ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_INT 2
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 4
15234: PUSH
15235: LD_INT 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: LD_OWVAR 67
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15366
// begin uc_side := 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_sex := sex_male ;
15269: LD_ADDR_OWVAR 27
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// hc_class := class_tiger ;
15277: LD_ADDR_OWVAR 28
15281: PUSH
15282: LD_INT 14
15284: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15285: LD_ADDR_OWVAR 31
15289: PUSH
15290: LD_EXP 14
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 40
15320: PUSH
15321: LD_INT 45
15323: PUSH
15324: LD_INT 50
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_OWVAR 67
15337: ARRAY
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 27
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15250
15366: POP
15367: POP
// end ; end_of_file
15368: LD_VAR 0 1
15372: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 255
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: PUSH
15385: LD_INT 10
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: AND
15397: PUSH
15398: LD_EXP 20
15402: PUSH
15403: LD_INT 1
15405: EQUAL
15406: AND
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 34
15430: PUSH
15431: LD_INT 51
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 58
15443: PUSH
15444: EMPTY
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: EQUAL
15465: AND
15466: IFFALSE 15561
15468: GO 15470
15470: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15471: LD_INT 9450
15473: PUSH
15474: LD_INT 8400
15476: PUSH
15477: LD_INT 6300
15479: PUSH
15480: LD_INT 6300
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: PPUSH
15495: CALL_OW 67
// if cargoEscape = 1 then
15499: LD_EXP 20
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: IFFALSE 15561
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15509: LD_EXP 9
15513: PPUSH
15514: LD_STRING D6-Pow-1
15516: PPUSH
15517: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15521: LD_EXP 1
15525: PPUSH
15526: LD_STRING D6-JMM-1
15528: PPUSH
15529: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15533: LD_EXP 9
15537: PPUSH
15538: LD_STRING D6-Pow-2
15540: PPUSH
15541: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15545: LD_EXP 1
15549: PPUSH
15550: LD_STRING D6-JMM-2
15552: PPUSH
15553: CALL_OW 88
// FinishMission ;
15557: CALL 15777 0 0
// end ; end ;
15561: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 255
15569: PUSH
15570: LD_INT 1
15572: EQUAL
15573: PUSH
15574: LD_INT 10
15576: PPUSH
15577: CALL_OW 255
15581: PUSH
15582: LD_INT 1
15584: EQUAL
15585: AND
15586: PUSH
15587: LD_EXP 20
15591: PUSH
15592: LD_INT 1
15594: GREATER
15595: AND
15596: IFFALSE 15671
15598: GO 15600
15600: DISABLE
15601: LD_INT 0
15603: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15604: LD_INT 11550
15606: PUSH
15607: LD_INT 10500
15609: PUSH
15610: LD_INT 9450
15612: PUSH
15613: LD_INT 8400
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: PUSH
15622: LD_OWVAR 67
15626: ARRAY
15627: PPUSH
15628: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15632: LD_INT 1
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: LD_INT 3
15640: PUSH
15641: LD_INT 4
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: PUSH
15650: LD_OWVAR 67
15654: ARRAY
15655: PPUSH
15656: LD_INT 13
15658: PPUSH
15659: CALL 13342 0 2
// lastBattle = 1 ;
15663: LD_ADDR_EXP 27
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// end ;
15671: PPOPN 1
15673: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15674: LD_EXP 27
15678: PUSH
15679: LD_INT 1
15681: EQUAL
15682: PUSH
15683: LD_INT 26
15685: PPUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 70
15714: PUSH
15715: LD_INT 0
15717: EQUAL
15718: AND
15719: IFFALSE 15776
15721: GO 15723
15723: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15724: LD_EXP 9
15728: PPUSH
15729: LD_STRING D6-Pow-1
15731: PPUSH
15732: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15736: LD_EXP 1
15740: PPUSH
15741: LD_STRING D6-JMM-1
15743: PPUSH
15744: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15748: LD_EXP 9
15752: PPUSH
15753: LD_STRING D6-Pow-2
15755: PPUSH
15756: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15760: LD_EXP 1
15764: PPUSH
15765: LD_STRING D6-JMM-2
15767: PPUSH
15768: CALL_OW 88
// FinishMission ;
15772: CALL 15777 0 0
// end ;
15776: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15777: LD_INT 0
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
// if tick <= 18 18$00 then
15784: LD_OWVAR 1
15788: PUSH
15789: LD_INT 37800
15791: LESSEQUAL
15792: IFFALSE 15801
// SetAchievement ( ACH_ASPEED_2 ) ;
15794: LD_STRING ACH_ASPEED_2
15796: PPUSH
15797: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 251
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PPUSH
15841: CALL_OW 69
15845: ST_TO_ADDR
// if tmp then
15846: LD_VAR 0 2
15850: IFFALSE 15864
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15852: LD_VAR 0 2
15856: PPUSH
15857: LD_STRING 02_tanks_1
15859: PPUSH
15860: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15864: LD_EXP 21
15868: PUSH
15869: LD_INT 1
15871: EQUAL
15872: PUSH
15873: LD_EXP 8
15877: PPUSH
15878: CALL_OW 300
15882: AND
15883: IFFALSE 15897
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15885: LD_EXP 21
15889: PPUSH
15890: LD_STRING 02_mikhailStatus_1
15892: PPUSH
15893: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 274
15904: PPUSH
15905: LD_INT 1
15907: PPUSH
15908: CALL_OW 275
15912: PPUSH
15913: LD_STRING 02_resources_4
15915: PPUSH
15916: CALL_OW 39
// m1 := false ;
15920: LD_ADDR_VAR 0 3
15924: PUSH
15925: LD_INT 0
15927: ST_TO_ADDR
// m2 := false ;
15928: LD_ADDR_VAR 0 4
15932: PUSH
15933: LD_INT 0
15935: ST_TO_ADDR
// m3 := false ;
15936: LD_ADDR_VAR 0 5
15940: PUSH
15941: LD_INT 0
15943: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 274
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 275
15959: PUSH
15960: LD_INT 200
15962: GREATEREQUAL
15963: IFFALSE 15985
// begin AddMedal ( Cans , 1 ) ;
15965: LD_STRING Cans
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 101
// m1 := true ;
15975: LD_ADDR_VAR 0 3
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// end else
15983: GO 15996
// begin AddMedal ( Cans , - 1 ) ;
15985: LD_STRING Cans
15987: PPUSH
15988: LD_INT 1
15990: NEG
15991: PPUSH
15992: CALL_OW 101
// end ; if deadsCounter < 2 then
15996: LD_EXP 31
16000: PUSH
16001: LD_INT 2
16003: LESS
16004: IFFALSE 16026
// begin AddMedal ( Deaths , 1 ) ;
16006: LD_STRING Deaths
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 101
// m2 := true ;
16016: LD_ADDR_VAR 0 4
16020: PUSH
16021: LD_INT 1
16023: ST_TO_ADDR
// end else
16024: GO 16037
// begin AddMedal ( Deaths , - 1 ) ;
16026: LD_STRING Deaths
16028: PPUSH
16029: LD_INT 1
16031: NEG
16032: PPUSH
16033: CALL_OW 101
// end ; if mikhailStatus = 0 then
16037: LD_EXP 21
16041: PUSH
16042: LD_INT 0
16044: EQUAL
16045: IFFALSE 16058
// AddMedal ( Prisoner , - 1 ) ;
16047: LD_STRING Prisoner
16049: PPUSH
16050: LD_INT 1
16052: NEG
16053: PPUSH
16054: CALL_OW 101
// if mikhailStatus = 1 then
16058: LD_EXP 21
16062: PUSH
16063: LD_INT 1
16065: EQUAL
16066: IFFALSE 16086
// begin AddMedal ( Prisoner , 1 ) ;
16068: LD_STRING Prisoner
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: CALL_OW 101
// m3 := true ;
16078: LD_ADDR_VAR 0 5
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 2
16093: EQUAL
16094: IFFALSE 16114
// begin AddMedal ( Prisoner , 2 ) ;
16096: LD_STRING Prisoner
16098: PPUSH
16099: LD_INT 2
16101: PPUSH
16102: CALL_OW 101
// m3 := true ;
16106: LD_ADDR_VAR 0 5
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16114: LD_EXP 21
16118: PUSH
16119: LD_INT 3
16121: EQUAL
16122: IFFALSE 16135
// AddMedal ( Prisoner , - 2 ) ;
16124: LD_STRING Prisoner
16126: PPUSH
16127: LD_INT 2
16129: NEG
16130: PPUSH
16131: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16135: LD_OWVAR 67
16139: PUSH
16140: LD_INT 3
16142: GREATEREQUAL
16143: PUSH
16144: LD_VAR 0 3
16148: AND
16149: PUSH
16150: LD_VAR 0 4
16154: AND
16155: PUSH
16156: LD_VAR 0 5
16160: AND
16161: IFFALSE 16173
// SetAchievementEX ( ACH_AMER , 2 ) ;
16163: LD_STRING ACH_AMER
16165: PPUSH
16166: LD_INT 2
16168: PPUSH
16169: CALL_OW 564
// GiveMedals ( MAIN ) ;
16173: LD_STRING MAIN
16175: PPUSH
16176: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16180: LD_INT 22
16182: PUSH
16183: LD_INT 1
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 23
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PPUSH
16215: CALL_OW 69
16219: PPUSH
16220: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16224: LD_EXP 1
16228: PPUSH
16229: LD_EXP 33
16233: PUSH
16234: LD_STRING JMM
16236: STR
16237: PPUSH
16238: CALL_OW 38
// if IsOK ( Bobby ) then
16242: LD_EXP 2
16246: PPUSH
16247: CALL_OW 302
16251: IFFALSE 16271
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16253: LD_EXP 2
16257: PPUSH
16258: LD_EXP 33
16262: PUSH
16263: LD_STRING Bobby
16265: STR
16266: PPUSH
16267: CALL_OW 38
// if IsOK ( Cyrus ) then
16271: LD_EXP 3
16275: PPUSH
16276: CALL_OW 302
16280: IFFALSE 16300
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16282: LD_EXP 3
16286: PPUSH
16287: LD_EXP 33
16291: PUSH
16292: LD_STRING Cyrus
16294: STR
16295: PPUSH
16296: CALL_OW 38
// if IsOK ( Lisa ) then
16300: LD_EXP 4
16304: PPUSH
16305: CALL_OW 302
16309: IFFALSE 16329
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16311: LD_EXP 4
16315: PPUSH
16316: LD_EXP 33
16320: PUSH
16321: LD_STRING Lisa
16323: STR
16324: PPUSH
16325: CALL_OW 38
// if IsOK ( Khatam ) then
16329: LD_EXP 5
16333: PPUSH
16334: CALL_OW 302
16338: IFFALSE 16358
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16340: LD_EXP 5
16344: PPUSH
16345: LD_EXP 33
16349: PUSH
16350: LD_STRING Khatam
16352: STR
16353: PPUSH
16354: CALL_OW 38
// if IsOK ( Brian ) then
16358: LD_EXP 6
16362: PPUSH
16363: CALL_OW 302
16367: IFFALSE 16387
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16369: LD_EXP 6
16373: PPUSH
16374: LD_EXP 33
16378: PUSH
16379: LD_STRING Brian
16381: STR
16382: PPUSH
16383: CALL_OW 38
// if IsOk ( Jerry ) then
16387: LD_EXP 7
16391: PPUSH
16392: CALL_OW 302
16396: IFFALSE 16416
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16398: LD_EXP 7
16402: PPUSH
16403: LD_EXP 33
16407: PUSH
16408: LD_STRING Jerry
16410: STR
16411: PPUSH
16412: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16416: LD_EXP 21
16420: PUSH
16421: LD_INT 1
16423: EQUAL
16424: PUSH
16425: LD_EXP 8
16429: PPUSH
16430: CALL_OW 255
16434: PUSH
16435: LD_INT 1
16437: EQUAL
16438: AND
16439: PUSH
16440: LD_EXP 8
16444: PPUSH
16445: CALL_OW 302
16449: AND
16450: IFFALSE 16470
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16452: LD_EXP 8
16456: PPUSH
16457: LD_EXP 33
16461: PUSH
16462: LD_STRING Mikhail
16464: STR
16465: PPUSH
16466: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16470: LD_INT 50
16472: PUSH
16473: EMPTY
16474: LIST
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL_OW 69
16505: PUSH
16506: LD_EXP 1
16510: PUSH
16511: LD_EXP 2
16515: PUSH
16516: LD_EXP 3
16520: PUSH
16521: LD_EXP 4
16525: PUSH
16526: LD_EXP 5
16530: PUSH
16531: LD_EXP 6
16535: PUSH
16536: LD_EXP 7
16540: PUSH
16541: LD_EXP 8
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: DIFF
16556: PPUSH
16557: LD_STRING 02_other_survivors
16559: PPUSH
16560: CALL_OW 38
// YouWin ;
16564: CALL_OW 103
// end ; end_of_file
16568: LD_VAR 0 1
16572: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
16573: LD_INT 0
16575: PPUSH
// ar_miner := 81 ;
16576: LD_ADDR_EXP 43
16580: PUSH
16581: LD_INT 81
16583: ST_TO_ADDR
// ar_crane := 88 ;
16584: LD_ADDR_EXP 42
16588: PUSH
16589: LD_INT 88
16591: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16592: LD_ADDR_EXP 37
16596: PUSH
16597: LD_INT 89
16599: ST_TO_ADDR
// us_hack := 99 ;
16600: LD_ADDR_EXP 38
16604: PUSH
16605: LD_INT 99
16607: ST_TO_ADDR
// us_artillery := 97 ;
16608: LD_ADDR_EXP 39
16612: PUSH
16613: LD_INT 97
16615: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16616: LD_ADDR_EXP 40
16620: PUSH
16621: LD_INT 91
16623: ST_TO_ADDR
// ar_mortar := 92 ;
16624: LD_ADDR_EXP 41
16628: PUSH
16629: LD_INT 92
16631: ST_TO_ADDR
// ru_flamethrower := 93 ;
16632: LD_ADDR_EXP 44
16636: PUSH
16637: LD_INT 93
16639: ST_TO_ADDR
// ru_radar := 98 ;
16640: LD_ADDR_EXP 36
16644: PUSH
16645: LD_INT 98
16647: ST_TO_ADDR
// tech_Artillery := 80 ;
16648: LD_ADDR_EXP 45
16652: PUSH
16653: LD_INT 80
16655: ST_TO_ADDR
// tech_RadMat := 81 ;
16656: LD_ADDR_EXP 46
16660: PUSH
16661: LD_INT 81
16663: ST_TO_ADDR
// tech_BasicTools := 82 ;
16664: LD_ADDR_EXP 47
16668: PUSH
16669: LD_INT 82
16671: ST_TO_ADDR
// tech_Cargo := 83 ;
16672: LD_ADDR_EXP 48
16676: PUSH
16677: LD_INT 83
16679: ST_TO_ADDR
// tech_Track := 84 ;
16680: LD_ADDR_EXP 49
16684: PUSH
16685: LD_INT 84
16687: ST_TO_ADDR
// tech_Crane := 85 ;
16688: LD_ADDR_EXP 50
16692: PUSH
16693: LD_INT 85
16695: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16696: LD_ADDR_EXP 51
16700: PUSH
16701: LD_INT 86
16703: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16704: LD_ADDR_EXP 52
16708: PUSH
16709: LD_INT 87
16711: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16712: LD_ADDR_EXP 53
16716: PUSH
16717: LD_INT 88
16719: ST_TO_ADDR
// end ;
16720: LD_VAR 0 1
16724: RET
// every 1 do
16725: GO 16727
16727: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16728: CALL 16573 0 0
16732: END
// every 0 0$1 do
16733: GO 16735
16735: DISABLE
// begin enable ;
16736: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16737: LD_STRING updateTimer(
16739: PUSH
16740: LD_OWVAR 1
16744: STR
16745: PUSH
16746: LD_STRING );
16748: STR
16749: PPUSH
16750: CALL_OW 559
// end ;
16754: END
// export function SOS_MapStart ( ) ; begin
16755: LD_INT 0
16757: PPUSH
// if streamModeActive then
16758: LD_EXP 54
16762: IFFALSE 16771
// DefineStreamItems ( true ) ;
16764: LD_INT 1
16766: PPUSH
16767: CALL 18425 0 1
// UpdateFactoryWaypoints ( ) ;
16771: CALL 31286 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16775: CALL 31543 0 0
// end ;
16779: LD_VAR 0 1
16783: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16784: LD_INT 0
16786: PPUSH
// if p2 = 100 then
16787: LD_VAR 0 2
16791: PUSH
16792: LD_INT 100
16794: EQUAL
16795: IFFALSE 17798
// begin if not StreamModeActive then
16797: LD_EXP 54
16801: NOT
16802: IFFALSE 16812
// StreamModeActive := true ;
16804: LD_ADDR_EXP 54
16808: PUSH
16809: LD_INT 1
16811: ST_TO_ADDR
// if p3 = 0 then
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 0
16819: EQUAL
16820: IFFALSE 16826
// InitStreamMode ;
16822: CALL 17961 0 0
// if p3 = 1 then
16826: LD_VAR 0 3
16830: PUSH
16831: LD_INT 1
16833: EQUAL
16834: IFFALSE 16844
// sRocket := true ;
16836: LD_ADDR_EXP 59
16840: PUSH
16841: LD_INT 1
16843: ST_TO_ADDR
// if p3 = 2 then
16844: LD_VAR 0 3
16848: PUSH
16849: LD_INT 2
16851: EQUAL
16852: IFFALSE 16862
// sSpeed := true ;
16854: LD_ADDR_EXP 58
16858: PUSH
16859: LD_INT 1
16861: ST_TO_ADDR
// if p3 = 3 then
16862: LD_VAR 0 3
16866: PUSH
16867: LD_INT 3
16869: EQUAL
16870: IFFALSE 16880
// sEngine := true ;
16872: LD_ADDR_EXP 60
16876: PUSH
16877: LD_INT 1
16879: ST_TO_ADDR
// if p3 = 4 then
16880: LD_VAR 0 3
16884: PUSH
16885: LD_INT 4
16887: EQUAL
16888: IFFALSE 16898
// sSpec := true ;
16890: LD_ADDR_EXP 57
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// if p3 = 5 then
16898: LD_VAR 0 3
16902: PUSH
16903: LD_INT 5
16905: EQUAL
16906: IFFALSE 16916
// sLevel := true ;
16908: LD_ADDR_EXP 61
16912: PUSH
16913: LD_INT 1
16915: ST_TO_ADDR
// if p3 = 6 then
16916: LD_VAR 0 3
16920: PUSH
16921: LD_INT 6
16923: EQUAL
16924: IFFALSE 16934
// sArmoury := true ;
16926: LD_ADDR_EXP 62
16930: PUSH
16931: LD_INT 1
16933: ST_TO_ADDR
// if p3 = 7 then
16934: LD_VAR 0 3
16938: PUSH
16939: LD_INT 7
16941: EQUAL
16942: IFFALSE 16952
// sRadar := true ;
16944: LD_ADDR_EXP 63
16948: PUSH
16949: LD_INT 1
16951: ST_TO_ADDR
// if p3 = 8 then
16952: LD_VAR 0 3
16956: PUSH
16957: LD_INT 8
16959: EQUAL
16960: IFFALSE 16970
// sBunker := true ;
16962: LD_ADDR_EXP 64
16966: PUSH
16967: LD_INT 1
16969: ST_TO_ADDR
// if p3 = 9 then
16970: LD_VAR 0 3
16974: PUSH
16975: LD_INT 9
16977: EQUAL
16978: IFFALSE 16988
// sHack := true ;
16980: LD_ADDR_EXP 65
16984: PUSH
16985: LD_INT 1
16987: ST_TO_ADDR
// if p3 = 10 then
16988: LD_VAR 0 3
16992: PUSH
16993: LD_INT 10
16995: EQUAL
16996: IFFALSE 17006
// sFire := true ;
16998: LD_ADDR_EXP 66
17002: PUSH
17003: LD_INT 1
17005: ST_TO_ADDR
// if p3 = 11 then
17006: LD_VAR 0 3
17010: PUSH
17011: LD_INT 11
17013: EQUAL
17014: IFFALSE 17024
// sRefresh := true ;
17016: LD_ADDR_EXP 67
17020: PUSH
17021: LD_INT 1
17023: ST_TO_ADDR
// if p3 = 12 then
17024: LD_VAR 0 3
17028: PUSH
17029: LD_INT 12
17031: EQUAL
17032: IFFALSE 17042
// sExp := true ;
17034: LD_ADDR_EXP 68
17038: PUSH
17039: LD_INT 1
17041: ST_TO_ADDR
// if p3 = 13 then
17042: LD_VAR 0 3
17046: PUSH
17047: LD_INT 13
17049: EQUAL
17050: IFFALSE 17060
// sDepot := true ;
17052: LD_ADDR_EXP 69
17056: PUSH
17057: LD_INT 1
17059: ST_TO_ADDR
// if p3 = 14 then
17060: LD_VAR 0 3
17064: PUSH
17065: LD_INT 14
17067: EQUAL
17068: IFFALSE 17078
// sFlag := true ;
17070: LD_ADDR_EXP 70
17074: PUSH
17075: LD_INT 1
17077: ST_TO_ADDR
// if p3 = 15 then
17078: LD_VAR 0 3
17082: PUSH
17083: LD_INT 15
17085: EQUAL
17086: IFFALSE 17096
// sKamikadze := true ;
17088: LD_ADDR_EXP 78
17092: PUSH
17093: LD_INT 1
17095: ST_TO_ADDR
// if p3 = 16 then
17096: LD_VAR 0 3
17100: PUSH
17101: LD_INT 16
17103: EQUAL
17104: IFFALSE 17114
// sTroll := true ;
17106: LD_ADDR_EXP 79
17110: PUSH
17111: LD_INT 1
17113: ST_TO_ADDR
// if p3 = 17 then
17114: LD_VAR 0 3
17118: PUSH
17119: LD_INT 17
17121: EQUAL
17122: IFFALSE 17132
// sSlow := true ;
17124: LD_ADDR_EXP 80
17128: PUSH
17129: LD_INT 1
17131: ST_TO_ADDR
// if p3 = 18 then
17132: LD_VAR 0 3
17136: PUSH
17137: LD_INT 18
17139: EQUAL
17140: IFFALSE 17150
// sLack := true ;
17142: LD_ADDR_EXP 81
17146: PUSH
17147: LD_INT 1
17149: ST_TO_ADDR
// if p3 = 19 then
17150: LD_VAR 0 3
17154: PUSH
17155: LD_INT 19
17157: EQUAL
17158: IFFALSE 17168
// sTank := true ;
17160: LD_ADDR_EXP 83
17164: PUSH
17165: LD_INT 1
17167: ST_TO_ADDR
// if p3 = 20 then
17168: LD_VAR 0 3
17172: PUSH
17173: LD_INT 20
17175: EQUAL
17176: IFFALSE 17186
// sRemote := true ;
17178: LD_ADDR_EXP 84
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// if p3 = 21 then
17186: LD_VAR 0 3
17190: PUSH
17191: LD_INT 21
17193: EQUAL
17194: IFFALSE 17204
// sPowell := true ;
17196: LD_ADDR_EXP 85
17200: PUSH
17201: LD_INT 1
17203: ST_TO_ADDR
// if p3 = 22 then
17204: LD_VAR 0 3
17208: PUSH
17209: LD_INT 22
17211: EQUAL
17212: IFFALSE 17222
// sTeleport := true ;
17214: LD_ADDR_EXP 88
17218: PUSH
17219: LD_INT 1
17221: ST_TO_ADDR
// if p3 = 23 then
17222: LD_VAR 0 3
17226: PUSH
17227: LD_INT 23
17229: EQUAL
17230: IFFALSE 17240
// sOilTower := true ;
17232: LD_ADDR_EXP 90
17236: PUSH
17237: LD_INT 1
17239: ST_TO_ADDR
// if p3 = 24 then
17240: LD_VAR 0 3
17244: PUSH
17245: LD_INT 24
17247: EQUAL
17248: IFFALSE 17258
// sShovel := true ;
17250: LD_ADDR_EXP 91
17254: PUSH
17255: LD_INT 1
17257: ST_TO_ADDR
// if p3 = 25 then
17258: LD_VAR 0 3
17262: PUSH
17263: LD_INT 25
17265: EQUAL
17266: IFFALSE 17276
// sSheik := true ;
17268: LD_ADDR_EXP 92
17272: PUSH
17273: LD_INT 1
17275: ST_TO_ADDR
// if p3 = 26 then
17276: LD_VAR 0 3
17280: PUSH
17281: LD_INT 26
17283: EQUAL
17284: IFFALSE 17294
// sEarthquake := true ;
17286: LD_ADDR_EXP 94
17290: PUSH
17291: LD_INT 1
17293: ST_TO_ADDR
// if p3 = 27 then
17294: LD_VAR 0 3
17298: PUSH
17299: LD_INT 27
17301: EQUAL
17302: IFFALSE 17312
// sAI := true ;
17304: LD_ADDR_EXP 95
17308: PUSH
17309: LD_INT 1
17311: ST_TO_ADDR
// if p3 = 28 then
17312: LD_VAR 0 3
17316: PUSH
17317: LD_INT 28
17319: EQUAL
17320: IFFALSE 17330
// sCargo := true ;
17322: LD_ADDR_EXP 98
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// if p3 = 29 then
17330: LD_VAR 0 3
17334: PUSH
17335: LD_INT 29
17337: EQUAL
17338: IFFALSE 17348
// sDLaser := true ;
17340: LD_ADDR_EXP 99
17344: PUSH
17345: LD_INT 1
17347: ST_TO_ADDR
// if p3 = 30 then
17348: LD_VAR 0 3
17352: PUSH
17353: LD_INT 30
17355: EQUAL
17356: IFFALSE 17366
// sExchange := true ;
17358: LD_ADDR_EXP 100
17362: PUSH
17363: LD_INT 1
17365: ST_TO_ADDR
// if p3 = 31 then
17366: LD_VAR 0 3
17370: PUSH
17371: LD_INT 31
17373: EQUAL
17374: IFFALSE 17384
// sFac := true ;
17376: LD_ADDR_EXP 101
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// if p3 = 32 then
17384: LD_VAR 0 3
17388: PUSH
17389: LD_INT 32
17391: EQUAL
17392: IFFALSE 17402
// sPower := true ;
17394: LD_ADDR_EXP 102
17398: PUSH
17399: LD_INT 1
17401: ST_TO_ADDR
// if p3 = 33 then
17402: LD_VAR 0 3
17406: PUSH
17407: LD_INT 33
17409: EQUAL
17410: IFFALSE 17420
// sRandom := true ;
17412: LD_ADDR_EXP 103
17416: PUSH
17417: LD_INT 1
17419: ST_TO_ADDR
// if p3 = 34 then
17420: LD_VAR 0 3
17424: PUSH
17425: LD_INT 34
17427: EQUAL
17428: IFFALSE 17438
// sShield := true ;
17430: LD_ADDR_EXP 104
17434: PUSH
17435: LD_INT 1
17437: ST_TO_ADDR
// if p3 = 35 then
17438: LD_VAR 0 3
17442: PUSH
17443: LD_INT 35
17445: EQUAL
17446: IFFALSE 17456
// sTime := true ;
17448: LD_ADDR_EXP 105
17452: PUSH
17453: LD_INT 1
17455: ST_TO_ADDR
// if p3 = 36 then
17456: LD_VAR 0 3
17460: PUSH
17461: LD_INT 36
17463: EQUAL
17464: IFFALSE 17474
// sTools := true ;
17466: LD_ADDR_EXP 106
17470: PUSH
17471: LD_INT 1
17473: ST_TO_ADDR
// if p3 = 101 then
17474: LD_VAR 0 3
17478: PUSH
17479: LD_INT 101
17481: EQUAL
17482: IFFALSE 17492
// sSold := true ;
17484: LD_ADDR_EXP 71
17488: PUSH
17489: LD_INT 1
17491: ST_TO_ADDR
// if p3 = 102 then
17492: LD_VAR 0 3
17496: PUSH
17497: LD_INT 102
17499: EQUAL
17500: IFFALSE 17510
// sDiff := true ;
17502: LD_ADDR_EXP 72
17506: PUSH
17507: LD_INT 1
17509: ST_TO_ADDR
// if p3 = 103 then
17510: LD_VAR 0 3
17514: PUSH
17515: LD_INT 103
17517: EQUAL
17518: IFFALSE 17528
// sFog := true ;
17520: LD_ADDR_EXP 75
17524: PUSH
17525: LD_INT 1
17527: ST_TO_ADDR
// if p3 = 104 then
17528: LD_VAR 0 3
17532: PUSH
17533: LD_INT 104
17535: EQUAL
17536: IFFALSE 17546
// sReset := true ;
17538: LD_ADDR_EXP 76
17542: PUSH
17543: LD_INT 1
17545: ST_TO_ADDR
// if p3 = 105 then
17546: LD_VAR 0 3
17550: PUSH
17551: LD_INT 105
17553: EQUAL
17554: IFFALSE 17564
// sSun := true ;
17556: LD_ADDR_EXP 77
17560: PUSH
17561: LD_INT 1
17563: ST_TO_ADDR
// if p3 = 106 then
17564: LD_VAR 0 3
17568: PUSH
17569: LD_INT 106
17571: EQUAL
17572: IFFALSE 17582
// sTiger := true ;
17574: LD_ADDR_EXP 73
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// if p3 = 107 then
17582: LD_VAR 0 3
17586: PUSH
17587: LD_INT 107
17589: EQUAL
17590: IFFALSE 17600
// sBomb := true ;
17592: LD_ADDR_EXP 74
17596: PUSH
17597: LD_INT 1
17599: ST_TO_ADDR
// if p3 = 108 then
17600: LD_VAR 0 3
17604: PUSH
17605: LD_INT 108
17607: EQUAL
17608: IFFALSE 17618
// sWound := true ;
17610: LD_ADDR_EXP 82
17614: PUSH
17615: LD_INT 1
17617: ST_TO_ADDR
// if p3 = 109 then
17618: LD_VAR 0 3
17622: PUSH
17623: LD_INT 109
17625: EQUAL
17626: IFFALSE 17636
// sBetray := true ;
17628: LD_ADDR_EXP 86
17632: PUSH
17633: LD_INT 1
17635: ST_TO_ADDR
// if p3 = 110 then
17636: LD_VAR 0 3
17640: PUSH
17641: LD_INT 110
17643: EQUAL
17644: IFFALSE 17654
// sContamin := true ;
17646: LD_ADDR_EXP 87
17650: PUSH
17651: LD_INT 1
17653: ST_TO_ADDR
// if p3 = 111 then
17654: LD_VAR 0 3
17658: PUSH
17659: LD_INT 111
17661: EQUAL
17662: IFFALSE 17672
// sOil := true ;
17664: LD_ADDR_EXP 89
17668: PUSH
17669: LD_INT 1
17671: ST_TO_ADDR
// if p3 = 112 then
17672: LD_VAR 0 3
17676: PUSH
17677: LD_INT 112
17679: EQUAL
17680: IFFALSE 17690
// sStu := true ;
17682: LD_ADDR_EXP 93
17686: PUSH
17687: LD_INT 1
17689: ST_TO_ADDR
// if p3 = 113 then
17690: LD_VAR 0 3
17694: PUSH
17695: LD_INT 113
17697: EQUAL
17698: IFFALSE 17708
// sBazooka := true ;
17700: LD_ADDR_EXP 96
17704: PUSH
17705: LD_INT 1
17707: ST_TO_ADDR
// if p3 = 114 then
17708: LD_VAR 0 3
17712: PUSH
17713: LD_INT 114
17715: EQUAL
17716: IFFALSE 17726
// sMortar := true ;
17718: LD_ADDR_EXP 97
17722: PUSH
17723: LD_INT 1
17725: ST_TO_ADDR
// if p3 = 115 then
17726: LD_VAR 0 3
17730: PUSH
17731: LD_INT 115
17733: EQUAL
17734: IFFALSE 17744
// sRanger := true ;
17736: LD_ADDR_EXP 107
17740: PUSH
17741: LD_INT 1
17743: ST_TO_ADDR
// if p3 = 116 then
17744: LD_VAR 0 3
17748: PUSH
17749: LD_INT 116
17751: EQUAL
17752: IFFALSE 17762
// sComputer := true ;
17754: LD_ADDR_EXP 108
17758: PUSH
17759: LD_INT 1
17761: ST_TO_ADDR
// if p3 = 117 then
17762: LD_VAR 0 3
17766: PUSH
17767: LD_INT 117
17769: EQUAL
17770: IFFALSE 17780
// s30 := true ;
17772: LD_ADDR_EXP 109
17776: PUSH
17777: LD_INT 1
17779: ST_TO_ADDR
// if p3 = 118 then
17780: LD_VAR 0 3
17784: PUSH
17785: LD_INT 118
17787: EQUAL
17788: IFFALSE 17798
// s60 := true ;
17790: LD_ADDR_EXP 110
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// end ; if p2 = 101 then
17798: LD_VAR 0 2
17802: PUSH
17803: LD_INT 101
17805: EQUAL
17806: IFFALSE 17934
// begin case p3 of 1 :
17808: LD_VAR 0 3
17812: PUSH
17813: LD_INT 1
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17828
17821: POP
// hHackUnlimitedResources ; 2 :
17822: CALL 30032 0 0
17826: GO 17934
17828: LD_INT 2
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17843
17836: POP
// hHackSetLevel10 ; 3 :
17837: CALL 30165 0 0
17841: GO 17934
17843: LD_INT 3
17845: DOUBLE
17846: EQUAL
17847: IFTRUE 17851
17849: GO 17858
17851: POP
// hHackSetLevel10YourUnits ; 4 :
17852: CALL 30250 0 0
17856: GO 17934
17858: LD_INT 4
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17873
17866: POP
// hHackInvincible ; 5 :
17867: CALL 30698 0 0
17871: GO 17934
17873: LD_INT 5
17875: DOUBLE
17876: EQUAL
17877: IFTRUE 17881
17879: GO 17888
17881: POP
// hHackInvisible ; 6 :
17882: CALL 30809 0 0
17886: GO 17934
17888: LD_INT 6
17890: DOUBLE
17891: EQUAL
17892: IFTRUE 17896
17894: GO 17903
17896: POP
// hHackChangeYourSide ; 7 :
17897: CALL 30866 0 0
17901: GO 17934
17903: LD_INT 7
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17911
17909: GO 17918
17911: POP
// hHackChangeUnitSide ; 8 :
17912: CALL 30908 0 0
17916: GO 17934
17918: LD_INT 8
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 17933
17926: POP
// hHackFog ; end ;
17927: CALL 31009 0 0
17931: GO 17934
17933: POP
// end ; end ;
17934: LD_VAR 0 7
17938: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17939: GO 17941
17941: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17942: LD_STRING initStreamRollete();
17944: PPUSH
17945: CALL_OW 559
// InitStreamMode ;
17949: CALL 17961 0 0
// DefineStreamItems ( false ) ;
17953: LD_INT 0
17955: PPUSH
17956: CALL 18425 0 1
// end ;
17960: END
// function InitStreamMode ; begin
17961: LD_INT 0
17963: PPUSH
// streamModeActive := false ;
17964: LD_ADDR_EXP 54
17968: PUSH
17969: LD_INT 0
17971: ST_TO_ADDR
// normalCounter := 36 ;
17972: LD_ADDR_EXP 55
17976: PUSH
17977: LD_INT 36
17979: ST_TO_ADDR
// hardcoreCounter := 18 ;
17980: LD_ADDR_EXP 56
17984: PUSH
17985: LD_INT 18
17987: ST_TO_ADDR
// sRocket := false ;
17988: LD_ADDR_EXP 59
17992: PUSH
17993: LD_INT 0
17995: ST_TO_ADDR
// sSpeed := false ;
17996: LD_ADDR_EXP 58
18000: PUSH
18001: LD_INT 0
18003: ST_TO_ADDR
// sEngine := false ;
18004: LD_ADDR_EXP 60
18008: PUSH
18009: LD_INT 0
18011: ST_TO_ADDR
// sSpec := false ;
18012: LD_ADDR_EXP 57
18016: PUSH
18017: LD_INT 0
18019: ST_TO_ADDR
// sLevel := false ;
18020: LD_ADDR_EXP 61
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
// sArmoury := false ;
18028: LD_ADDR_EXP 62
18032: PUSH
18033: LD_INT 0
18035: ST_TO_ADDR
// sRadar := false ;
18036: LD_ADDR_EXP 63
18040: PUSH
18041: LD_INT 0
18043: ST_TO_ADDR
// sBunker := false ;
18044: LD_ADDR_EXP 64
18048: PUSH
18049: LD_INT 0
18051: ST_TO_ADDR
// sHack := false ;
18052: LD_ADDR_EXP 65
18056: PUSH
18057: LD_INT 0
18059: ST_TO_ADDR
// sFire := false ;
18060: LD_ADDR_EXP 66
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// sRefresh := false ;
18068: LD_ADDR_EXP 67
18072: PUSH
18073: LD_INT 0
18075: ST_TO_ADDR
// sExp := false ;
18076: LD_ADDR_EXP 68
18080: PUSH
18081: LD_INT 0
18083: ST_TO_ADDR
// sDepot := false ;
18084: LD_ADDR_EXP 69
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sFlag := false ;
18092: LD_ADDR_EXP 70
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sKamikadze := false ;
18100: LD_ADDR_EXP 78
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sTroll := false ;
18108: LD_ADDR_EXP 79
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sSlow := false ;
18116: LD_ADDR_EXP 80
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sLack := false ;
18124: LD_ADDR_EXP 81
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sTank := false ;
18132: LD_ADDR_EXP 83
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sRemote := false ;
18140: LD_ADDR_EXP 84
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sPowell := false ;
18148: LD_ADDR_EXP 85
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sTeleport := false ;
18156: LD_ADDR_EXP 88
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sOilTower := false ;
18164: LD_ADDR_EXP 90
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sShovel := false ;
18172: LD_ADDR_EXP 91
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sSheik := false ;
18180: LD_ADDR_EXP 92
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sEarthquake := false ;
18188: LD_ADDR_EXP 94
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sAI := false ;
18196: LD_ADDR_EXP 95
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sCargo := false ;
18204: LD_ADDR_EXP 98
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sDLaser := false ;
18212: LD_ADDR_EXP 99
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sExchange := false ;
18220: LD_ADDR_EXP 100
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sFac := false ;
18228: LD_ADDR_EXP 101
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sPower := false ;
18236: LD_ADDR_EXP 102
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sRandom := false ;
18244: LD_ADDR_EXP 103
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sShield := false ;
18252: LD_ADDR_EXP 104
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sTime := false ;
18260: LD_ADDR_EXP 105
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sTools := false ;
18268: LD_ADDR_EXP 106
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sSold := false ;
18276: LD_ADDR_EXP 71
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sDiff := false ;
18284: LD_ADDR_EXP 72
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sFog := false ;
18292: LD_ADDR_EXP 75
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sReset := false ;
18300: LD_ADDR_EXP 76
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sSun := false ;
18308: LD_ADDR_EXP 77
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sTiger := false ;
18316: LD_ADDR_EXP 73
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sBomb := false ;
18324: LD_ADDR_EXP 74
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sWound := false ;
18332: LD_ADDR_EXP 82
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sBetray := false ;
18340: LD_ADDR_EXP 86
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sContamin := false ;
18348: LD_ADDR_EXP 87
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sOil := false ;
18356: LD_ADDR_EXP 89
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sStu := false ;
18364: LD_ADDR_EXP 93
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sBazooka := false ;
18372: LD_ADDR_EXP 96
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sMortar := false ;
18380: LD_ADDR_EXP 97
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sRanger := false ;
18388: LD_ADDR_EXP 107
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sComputer := false ;
18396: LD_ADDR_EXP 108
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// s30 := false ;
18404: LD_ADDR_EXP 109
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// s60 := false ;
18412: LD_ADDR_EXP 110
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// end ;
18420: LD_VAR 0 1
18424: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
18433: PPUSH
// result := [ ] ;
18434: LD_ADDR_VAR 0 2
18438: PUSH
18439: EMPTY
18440: ST_TO_ADDR
// if campaign_id = 1 then
18441: LD_OWVAR 69
18445: PUSH
18446: LD_INT 1
18448: EQUAL
18449: IFFALSE 21615
// begin case mission_number of 1 :
18451: LD_OWVAR 70
18455: PUSH
18456: LD_INT 1
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18540
18464: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18465: LD_ADDR_VAR 0 2
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: LD_INT 4
18475: PUSH
18476: LD_INT 11
18478: PUSH
18479: LD_INT 12
18481: PUSH
18482: LD_INT 15
18484: PUSH
18485: LD_INT 16
18487: PUSH
18488: LD_INT 22
18490: PUSH
18491: LD_INT 23
18493: PUSH
18494: LD_INT 26
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 101
18510: PUSH
18511: LD_INT 102
18513: PUSH
18514: LD_INT 106
18516: PUSH
18517: LD_INT 116
18519: PUSH
18520: LD_INT 117
18522: PUSH
18523: LD_INT 118
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: ST_TO_ADDR
18538: GO 21613
18540: LD_INT 2
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18632
18548: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18549: LD_ADDR_VAR 0 2
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: LD_INT 4
18559: PUSH
18560: LD_INT 11
18562: PUSH
18563: LD_INT 12
18565: PUSH
18566: LD_INT 15
18568: PUSH
18569: LD_INT 16
18571: PUSH
18572: LD_INT 22
18574: PUSH
18575: LD_INT 23
18577: PUSH
18578: LD_INT 26
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 101
18594: PUSH
18595: LD_INT 102
18597: PUSH
18598: LD_INT 105
18600: PUSH
18601: LD_INT 106
18603: PUSH
18604: LD_INT 108
18606: PUSH
18607: LD_INT 116
18609: PUSH
18610: LD_INT 117
18612: PUSH
18613: LD_INT 118
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: ST_TO_ADDR
18630: GO 21613
18632: LD_INT 3
18634: DOUBLE
18635: EQUAL
18636: IFTRUE 18640
18638: GO 18728
18640: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 4
18651: PUSH
18652: LD_INT 5
18654: PUSH
18655: LD_INT 11
18657: PUSH
18658: LD_INT 12
18660: PUSH
18661: LD_INT 15
18663: PUSH
18664: LD_INT 16
18666: PUSH
18667: LD_INT 22
18669: PUSH
18670: LD_INT 26
18672: PUSH
18673: LD_INT 36
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 108
18702: PUSH
18703: LD_INT 116
18705: PUSH
18706: LD_INT 117
18708: PUSH
18709: LD_INT 118
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: ST_TO_ADDR
18726: GO 21613
18728: LD_INT 4
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18832
18736: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 4
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: LD_INT 8
18753: PUSH
18754: LD_INT 11
18756: PUSH
18757: LD_INT 12
18759: PUSH
18760: LD_INT 15
18762: PUSH
18763: LD_INT 16
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 23
18771: PUSH
18772: LD_INT 26
18774: PUSH
18775: LD_INT 36
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 101
18794: PUSH
18795: LD_INT 102
18797: PUSH
18798: LD_INT 105
18800: PUSH
18801: LD_INT 106
18803: PUSH
18804: LD_INT 108
18806: PUSH
18807: LD_INT 116
18809: PUSH
18810: LD_INT 117
18812: PUSH
18813: LD_INT 118
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: ST_TO_ADDR
18830: GO 21613
18832: LD_INT 5
18834: DOUBLE
18835: EQUAL
18836: IFTRUE 18840
18838: GO 18952
18840: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_INT 2
18848: PUSH
18849: LD_INT 4
18851: PUSH
18852: LD_INT 5
18854: PUSH
18855: LD_INT 6
18857: PUSH
18858: LD_INT 8
18860: PUSH
18861: LD_INT 11
18863: PUSH
18864: LD_INT 12
18866: PUSH
18867: LD_INT 15
18869: PUSH
18870: LD_INT 16
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_INT 23
18878: PUSH
18879: LD_INT 25
18881: PUSH
18882: LD_INT 26
18884: PUSH
18885: LD_INT 36
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 101
18906: PUSH
18907: LD_INT 102
18909: PUSH
18910: LD_INT 105
18912: PUSH
18913: LD_INT 106
18915: PUSH
18916: LD_INT 108
18918: PUSH
18919: LD_INT 109
18921: PUSH
18922: LD_INT 112
18924: PUSH
18925: LD_INT 116
18927: PUSH
18928: LD_INT 117
18930: PUSH
18931: LD_INT 118
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: ST_TO_ADDR
18950: GO 21613
18952: LD_INT 6
18954: DOUBLE
18955: EQUAL
18956: IFTRUE 18960
18958: GO 19092
18960: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18961: LD_ADDR_VAR 0 2
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: LD_INT 4
18971: PUSH
18972: LD_INT 5
18974: PUSH
18975: LD_INT 6
18977: PUSH
18978: LD_INT 8
18980: PUSH
18981: LD_INT 11
18983: PUSH
18984: LD_INT 12
18986: PUSH
18987: LD_INT 15
18989: PUSH
18990: LD_INT 16
18992: PUSH
18993: LD_INT 20
18995: PUSH
18996: LD_INT 21
18998: PUSH
18999: LD_INT 22
19001: PUSH
19002: LD_INT 23
19004: PUSH
19005: LD_INT 25
19007: PUSH
19008: LD_INT 26
19010: PUSH
19011: LD_INT 30
19013: PUSH
19014: LD_INT 31
19016: PUSH
19017: LD_INT 32
19019: PUSH
19020: LD_INT 36
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 101
19046: PUSH
19047: LD_INT 102
19049: PUSH
19050: LD_INT 105
19052: PUSH
19053: LD_INT 106
19055: PUSH
19056: LD_INT 108
19058: PUSH
19059: LD_INT 109
19061: PUSH
19062: LD_INT 112
19064: PUSH
19065: LD_INT 116
19067: PUSH
19068: LD_INT 117
19070: PUSH
19071: LD_INT 118
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 21613
19092: LD_INT 7
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19212
19100: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19101: LD_ADDR_VAR 0 2
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: LD_INT 7
19117: PUSH
19118: LD_INT 11
19120: PUSH
19121: LD_INT 12
19123: PUSH
19124: LD_INT 15
19126: PUSH
19127: LD_INT 16
19129: PUSH
19130: LD_INT 20
19132: PUSH
19133: LD_INT 21
19135: PUSH
19136: LD_INT 22
19138: PUSH
19139: LD_INT 23
19141: PUSH
19142: LD_INT 25
19144: PUSH
19145: LD_INT 26
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 101
19166: PUSH
19167: LD_INT 102
19169: PUSH
19170: LD_INT 103
19172: PUSH
19173: LD_INT 105
19175: PUSH
19176: LD_INT 106
19178: PUSH
19179: LD_INT 108
19181: PUSH
19182: LD_INT 112
19184: PUSH
19185: LD_INT 116
19187: PUSH
19188: LD_INT 117
19190: PUSH
19191: LD_INT 118
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: ST_TO_ADDR
19210: GO 21613
19212: LD_INT 8
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19360
19220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19221: LD_ADDR_VAR 0 2
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 4
19231: PUSH
19232: LD_INT 5
19234: PUSH
19235: LD_INT 6
19237: PUSH
19238: LD_INT 7
19240: PUSH
19241: LD_INT 8
19243: PUSH
19244: LD_INT 11
19246: PUSH
19247: LD_INT 12
19249: PUSH
19250: LD_INT 15
19252: PUSH
19253: LD_INT 16
19255: PUSH
19256: LD_INT 20
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_INT 23
19267: PUSH
19268: LD_INT 25
19270: PUSH
19271: LD_INT 26
19273: PUSH
19274: LD_INT 30
19276: PUSH
19277: LD_INT 31
19279: PUSH
19280: LD_INT 32
19282: PUSH
19283: LD_INT 36
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 101
19310: PUSH
19311: LD_INT 102
19313: PUSH
19314: LD_INT 103
19316: PUSH
19317: LD_INT 105
19319: PUSH
19320: LD_INT 106
19322: PUSH
19323: LD_INT 108
19325: PUSH
19326: LD_INT 109
19328: PUSH
19329: LD_INT 112
19331: PUSH
19332: LD_INT 116
19334: PUSH
19335: LD_INT 117
19337: PUSH
19338: LD_INT 118
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: ST_TO_ADDR
19358: GO 21613
19360: LD_INT 9
19362: DOUBLE
19363: EQUAL
19364: IFTRUE 19368
19366: GO 19516
19368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19369: LD_ADDR_VAR 0 2
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: LD_INT 4
19379: PUSH
19380: LD_INT 5
19382: PUSH
19383: LD_INT 6
19385: PUSH
19386: LD_INT 7
19388: PUSH
19389: LD_INT 8
19391: PUSH
19392: LD_INT 11
19394: PUSH
19395: LD_INT 12
19397: PUSH
19398: LD_INT 15
19400: PUSH
19401: LD_INT 16
19403: PUSH
19404: LD_INT 20
19406: PUSH
19407: LD_INT 21
19409: PUSH
19410: LD_INT 22
19412: PUSH
19413: LD_INT 23
19415: PUSH
19416: LD_INT 25
19418: PUSH
19419: LD_INT 26
19421: PUSH
19422: LD_INT 28
19424: PUSH
19425: LD_INT 30
19427: PUSH
19428: LD_INT 31
19430: PUSH
19431: LD_INT 32
19433: PUSH
19434: LD_INT 36
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 101
19462: PUSH
19463: LD_INT 102
19465: PUSH
19466: LD_INT 103
19468: PUSH
19469: LD_INT 105
19471: PUSH
19472: LD_INT 106
19474: PUSH
19475: LD_INT 108
19477: PUSH
19478: LD_INT 109
19480: PUSH
19481: LD_INT 112
19483: PUSH
19484: LD_INT 114
19486: PUSH
19487: LD_INT 116
19489: PUSH
19490: LD_INT 117
19492: PUSH
19493: LD_INT 118
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: ST_TO_ADDR
19514: GO 21613
19516: LD_INT 10
19518: DOUBLE
19519: EQUAL
19520: IFTRUE 19524
19522: GO 19720
19524: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19525: LD_ADDR_VAR 0 2
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: LD_INT 4
19535: PUSH
19536: LD_INT 5
19538: PUSH
19539: LD_INT 6
19541: PUSH
19542: LD_INT 7
19544: PUSH
19545: LD_INT 8
19547: PUSH
19548: LD_INT 9
19550: PUSH
19551: LD_INT 10
19553: PUSH
19554: LD_INT 11
19556: PUSH
19557: LD_INT 12
19559: PUSH
19560: LD_INT 13
19562: PUSH
19563: LD_INT 14
19565: PUSH
19566: LD_INT 15
19568: PUSH
19569: LD_INT 16
19571: PUSH
19572: LD_INT 17
19574: PUSH
19575: LD_INT 18
19577: PUSH
19578: LD_INT 19
19580: PUSH
19581: LD_INT 20
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_INT 23
19592: PUSH
19593: LD_INT 24
19595: PUSH
19596: LD_INT 25
19598: PUSH
19599: LD_INT 26
19601: PUSH
19602: LD_INT 28
19604: PUSH
19605: LD_INT 30
19607: PUSH
19608: LD_INT 31
19610: PUSH
19611: LD_INT 32
19613: PUSH
19614: LD_INT 36
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 101
19650: PUSH
19651: LD_INT 102
19653: PUSH
19654: LD_INT 103
19656: PUSH
19657: LD_INT 104
19659: PUSH
19660: LD_INT 105
19662: PUSH
19663: LD_INT 106
19665: PUSH
19666: LD_INT 107
19668: PUSH
19669: LD_INT 108
19671: PUSH
19672: LD_INT 109
19674: PUSH
19675: LD_INT 110
19677: PUSH
19678: LD_INT 111
19680: PUSH
19681: LD_INT 112
19683: PUSH
19684: LD_INT 114
19686: PUSH
19687: LD_INT 116
19689: PUSH
19690: LD_INT 117
19692: PUSH
19693: LD_INT 118
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: ST_TO_ADDR
19718: GO 21613
19720: LD_INT 11
19722: DOUBLE
19723: EQUAL
19724: IFTRUE 19728
19726: GO 19932
19728: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 3
19739: PUSH
19740: LD_INT 4
19742: PUSH
19743: LD_INT 5
19745: PUSH
19746: LD_INT 6
19748: PUSH
19749: LD_INT 7
19751: PUSH
19752: LD_INT 8
19754: PUSH
19755: LD_INT 9
19757: PUSH
19758: LD_INT 10
19760: PUSH
19761: LD_INT 11
19763: PUSH
19764: LD_INT 12
19766: PUSH
19767: LD_INT 13
19769: PUSH
19770: LD_INT 14
19772: PUSH
19773: LD_INT 15
19775: PUSH
19776: LD_INT 16
19778: PUSH
19779: LD_INT 17
19781: PUSH
19782: LD_INT 18
19784: PUSH
19785: LD_INT 19
19787: PUSH
19788: LD_INT 20
19790: PUSH
19791: LD_INT 21
19793: PUSH
19794: LD_INT 22
19796: PUSH
19797: LD_INT 23
19799: PUSH
19800: LD_INT 24
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 26
19808: PUSH
19809: LD_INT 28
19811: PUSH
19812: LD_INT 30
19814: PUSH
19815: LD_INT 31
19817: PUSH
19818: LD_INT 32
19820: PUSH
19821: LD_INT 34
19823: PUSH
19824: LD_INT 36
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 101
19862: PUSH
19863: LD_INT 102
19865: PUSH
19866: LD_INT 103
19868: PUSH
19869: LD_INT 104
19871: PUSH
19872: LD_INT 105
19874: PUSH
19875: LD_INT 106
19877: PUSH
19878: LD_INT 107
19880: PUSH
19881: LD_INT 108
19883: PUSH
19884: LD_INT 109
19886: PUSH
19887: LD_INT 110
19889: PUSH
19890: LD_INT 111
19892: PUSH
19893: LD_INT 112
19895: PUSH
19896: LD_INT 114
19898: PUSH
19899: LD_INT 116
19901: PUSH
19902: LD_INT 117
19904: PUSH
19905: LD_INT 118
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: ST_TO_ADDR
19930: GO 21613
19932: LD_INT 12
19934: DOUBLE
19935: EQUAL
19936: IFTRUE 19940
19938: GO 20160
19940: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19941: LD_ADDR_VAR 0 2
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 3
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: LD_INT 6
19963: PUSH
19964: LD_INT 7
19966: PUSH
19967: LD_INT 8
19969: PUSH
19970: LD_INT 9
19972: PUSH
19973: LD_INT 10
19975: PUSH
19976: LD_INT 11
19978: PUSH
19979: LD_INT 12
19981: PUSH
19982: LD_INT 13
19984: PUSH
19985: LD_INT 14
19987: PUSH
19988: LD_INT 15
19990: PUSH
19991: LD_INT 16
19993: PUSH
19994: LD_INT 17
19996: PUSH
19997: LD_INT 18
19999: PUSH
20000: LD_INT 19
20002: PUSH
20003: LD_INT 20
20005: PUSH
20006: LD_INT 21
20008: PUSH
20009: LD_INT 22
20011: PUSH
20012: LD_INT 23
20014: PUSH
20015: LD_INT 24
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 26
20023: PUSH
20024: LD_INT 27
20026: PUSH
20027: LD_INT 28
20029: PUSH
20030: LD_INT 30
20032: PUSH
20033: LD_INT 31
20035: PUSH
20036: LD_INT 32
20038: PUSH
20039: LD_INT 33
20041: PUSH
20042: LD_INT 34
20044: PUSH
20045: LD_INT 36
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 101
20086: PUSH
20087: LD_INT 102
20089: PUSH
20090: LD_INT 103
20092: PUSH
20093: LD_INT 104
20095: PUSH
20096: LD_INT 105
20098: PUSH
20099: LD_INT 106
20101: PUSH
20102: LD_INT 107
20104: PUSH
20105: LD_INT 108
20107: PUSH
20108: LD_INT 109
20110: PUSH
20111: LD_INT 110
20113: PUSH
20114: LD_INT 111
20116: PUSH
20117: LD_INT 112
20119: PUSH
20120: LD_INT 113
20122: PUSH
20123: LD_INT 114
20125: PUSH
20126: LD_INT 116
20128: PUSH
20129: LD_INT 117
20131: PUSH
20132: LD_INT 118
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: ST_TO_ADDR
20158: GO 21613
20160: LD_INT 13
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20376
20168: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20169: LD_ADDR_VAR 0 2
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: LD_INT 3
20182: PUSH
20183: LD_INT 4
20185: PUSH
20186: LD_INT 5
20188: PUSH
20189: LD_INT 8
20191: PUSH
20192: LD_INT 9
20194: PUSH
20195: LD_INT 10
20197: PUSH
20198: LD_INT 11
20200: PUSH
20201: LD_INT 12
20203: PUSH
20204: LD_INT 14
20206: PUSH
20207: LD_INT 15
20209: PUSH
20210: LD_INT 16
20212: PUSH
20213: LD_INT 17
20215: PUSH
20216: LD_INT 18
20218: PUSH
20219: LD_INT 19
20221: PUSH
20222: LD_INT 20
20224: PUSH
20225: LD_INT 21
20227: PUSH
20228: LD_INT 22
20230: PUSH
20231: LD_INT 23
20233: PUSH
20234: LD_INT 24
20236: PUSH
20237: LD_INT 25
20239: PUSH
20240: LD_INT 26
20242: PUSH
20243: LD_INT 27
20245: PUSH
20246: LD_INT 28
20248: PUSH
20249: LD_INT 30
20251: PUSH
20252: LD_INT 31
20254: PUSH
20255: LD_INT 32
20257: PUSH
20258: LD_INT 33
20260: PUSH
20261: LD_INT 34
20263: PUSH
20264: LD_INT 36
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 101
20302: PUSH
20303: LD_INT 102
20305: PUSH
20306: LD_INT 103
20308: PUSH
20309: LD_INT 104
20311: PUSH
20312: LD_INT 105
20314: PUSH
20315: LD_INT 106
20317: PUSH
20318: LD_INT 107
20320: PUSH
20321: LD_INT 108
20323: PUSH
20324: LD_INT 109
20326: PUSH
20327: LD_INT 110
20329: PUSH
20330: LD_INT 111
20332: PUSH
20333: LD_INT 112
20335: PUSH
20336: LD_INT 113
20338: PUSH
20339: LD_INT 114
20341: PUSH
20342: LD_INT 116
20344: PUSH
20345: LD_INT 117
20347: PUSH
20348: LD_INT 118
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: ST_TO_ADDR
20374: GO 21613
20376: LD_INT 14
20378: DOUBLE
20379: EQUAL
20380: IFTRUE 20384
20382: GO 20608
20384: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20385: LD_ADDR_VAR 0 2
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 3
20398: PUSH
20399: LD_INT 4
20401: PUSH
20402: LD_INT 5
20404: PUSH
20405: LD_INT 6
20407: PUSH
20408: LD_INT 7
20410: PUSH
20411: LD_INT 8
20413: PUSH
20414: LD_INT 9
20416: PUSH
20417: LD_INT 10
20419: PUSH
20420: LD_INT 11
20422: PUSH
20423: LD_INT 12
20425: PUSH
20426: LD_INT 13
20428: PUSH
20429: LD_INT 14
20431: PUSH
20432: LD_INT 15
20434: PUSH
20435: LD_INT 16
20437: PUSH
20438: LD_INT 17
20440: PUSH
20441: LD_INT 18
20443: PUSH
20444: LD_INT 19
20446: PUSH
20447: LD_INT 20
20449: PUSH
20450: LD_INT 21
20452: PUSH
20453: LD_INT 22
20455: PUSH
20456: LD_INT 23
20458: PUSH
20459: LD_INT 24
20461: PUSH
20462: LD_INT 25
20464: PUSH
20465: LD_INT 26
20467: PUSH
20468: LD_INT 27
20470: PUSH
20471: LD_INT 28
20473: PUSH
20474: LD_INT 29
20476: PUSH
20477: LD_INT 30
20479: PUSH
20480: LD_INT 31
20482: PUSH
20483: LD_INT 32
20485: PUSH
20486: LD_INT 33
20488: PUSH
20489: LD_INT 34
20491: PUSH
20492: LD_INT 36
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 101
20534: PUSH
20535: LD_INT 102
20537: PUSH
20538: LD_INT 103
20540: PUSH
20541: LD_INT 104
20543: PUSH
20544: LD_INT 105
20546: PUSH
20547: LD_INT 106
20549: PUSH
20550: LD_INT 107
20552: PUSH
20553: LD_INT 108
20555: PUSH
20556: LD_INT 109
20558: PUSH
20559: LD_INT 110
20561: PUSH
20562: LD_INT 111
20564: PUSH
20565: LD_INT 112
20567: PUSH
20568: LD_INT 113
20570: PUSH
20571: LD_INT 114
20573: PUSH
20574: LD_INT 116
20576: PUSH
20577: LD_INT 117
20579: PUSH
20580: LD_INT 118
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: ST_TO_ADDR
20606: GO 21613
20608: LD_INT 15
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20840
20616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: LD_INT 3
20630: PUSH
20631: LD_INT 4
20633: PUSH
20634: LD_INT 5
20636: PUSH
20637: LD_INT 6
20639: PUSH
20640: LD_INT 7
20642: PUSH
20643: LD_INT 8
20645: PUSH
20646: LD_INT 9
20648: PUSH
20649: LD_INT 10
20651: PUSH
20652: LD_INT 11
20654: PUSH
20655: LD_INT 12
20657: PUSH
20658: LD_INT 13
20660: PUSH
20661: LD_INT 14
20663: PUSH
20664: LD_INT 15
20666: PUSH
20667: LD_INT 16
20669: PUSH
20670: LD_INT 17
20672: PUSH
20673: LD_INT 18
20675: PUSH
20676: LD_INT 19
20678: PUSH
20679: LD_INT 20
20681: PUSH
20682: LD_INT 21
20684: PUSH
20685: LD_INT 22
20687: PUSH
20688: LD_INT 23
20690: PUSH
20691: LD_INT 24
20693: PUSH
20694: LD_INT 25
20696: PUSH
20697: LD_INT 26
20699: PUSH
20700: LD_INT 27
20702: PUSH
20703: LD_INT 28
20705: PUSH
20706: LD_INT 29
20708: PUSH
20709: LD_INT 30
20711: PUSH
20712: LD_INT 31
20714: PUSH
20715: LD_INT 32
20717: PUSH
20718: LD_INT 33
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 36
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 101
20766: PUSH
20767: LD_INT 102
20769: PUSH
20770: LD_INT 103
20772: PUSH
20773: LD_INT 104
20775: PUSH
20776: LD_INT 105
20778: PUSH
20779: LD_INT 106
20781: PUSH
20782: LD_INT 107
20784: PUSH
20785: LD_INT 108
20787: PUSH
20788: LD_INT 109
20790: PUSH
20791: LD_INT 110
20793: PUSH
20794: LD_INT 111
20796: PUSH
20797: LD_INT 112
20799: PUSH
20800: LD_INT 113
20802: PUSH
20803: LD_INT 114
20805: PUSH
20806: LD_INT 116
20808: PUSH
20809: LD_INT 117
20811: PUSH
20812: LD_INT 118
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: ST_TO_ADDR
20838: GO 21613
20840: LD_INT 16
20842: DOUBLE
20843: EQUAL
20844: IFTRUE 20848
20846: GO 20984
20848: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20849: LD_ADDR_VAR 0 2
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: LD_INT 4
20859: PUSH
20860: LD_INT 5
20862: PUSH
20863: LD_INT 7
20865: PUSH
20866: LD_INT 11
20868: PUSH
20869: LD_INT 12
20871: PUSH
20872: LD_INT 15
20874: PUSH
20875: LD_INT 16
20877: PUSH
20878: LD_INT 20
20880: PUSH
20881: LD_INT 21
20883: PUSH
20884: LD_INT 22
20886: PUSH
20887: LD_INT 23
20889: PUSH
20890: LD_INT 25
20892: PUSH
20893: LD_INT 26
20895: PUSH
20896: LD_INT 30
20898: PUSH
20899: LD_INT 31
20901: PUSH
20902: LD_INT 32
20904: PUSH
20905: LD_INT 33
20907: PUSH
20908: LD_INT 34
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 101
20934: PUSH
20935: LD_INT 102
20937: PUSH
20938: LD_INT 103
20940: PUSH
20941: LD_INT 106
20943: PUSH
20944: LD_INT 108
20946: PUSH
20947: LD_INT 112
20949: PUSH
20950: LD_INT 113
20952: PUSH
20953: LD_INT 114
20955: PUSH
20956: LD_INT 116
20958: PUSH
20959: LD_INT 117
20961: PUSH
20962: LD_INT 118
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: ST_TO_ADDR
20982: GO 21613
20984: LD_INT 17
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21216
20992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20993: LD_ADDR_VAR 0 2
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: LD_INT 3
21006: PUSH
21007: LD_INT 4
21009: PUSH
21010: LD_INT 5
21012: PUSH
21013: LD_INT 6
21015: PUSH
21016: LD_INT 7
21018: PUSH
21019: LD_INT 8
21021: PUSH
21022: LD_INT 9
21024: PUSH
21025: LD_INT 10
21027: PUSH
21028: LD_INT 11
21030: PUSH
21031: LD_INT 12
21033: PUSH
21034: LD_INT 13
21036: PUSH
21037: LD_INT 14
21039: PUSH
21040: LD_INT 15
21042: PUSH
21043: LD_INT 16
21045: PUSH
21046: LD_INT 17
21048: PUSH
21049: LD_INT 18
21051: PUSH
21052: LD_INT 19
21054: PUSH
21055: LD_INT 20
21057: PUSH
21058: LD_INT 21
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_INT 23
21066: PUSH
21067: LD_INT 24
21069: PUSH
21070: LD_INT 25
21072: PUSH
21073: LD_INT 26
21075: PUSH
21076: LD_INT 27
21078: PUSH
21079: LD_INT 28
21081: PUSH
21082: LD_INT 29
21084: PUSH
21085: LD_INT 30
21087: PUSH
21088: LD_INT 31
21090: PUSH
21091: LD_INT 32
21093: PUSH
21094: LD_INT 33
21096: PUSH
21097: LD_INT 34
21099: PUSH
21100: LD_INT 36
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 101
21142: PUSH
21143: LD_INT 102
21145: PUSH
21146: LD_INT 103
21148: PUSH
21149: LD_INT 104
21151: PUSH
21152: LD_INT 105
21154: PUSH
21155: LD_INT 106
21157: PUSH
21158: LD_INT 107
21160: PUSH
21161: LD_INT 108
21163: PUSH
21164: LD_INT 109
21166: PUSH
21167: LD_INT 110
21169: PUSH
21170: LD_INT 111
21172: PUSH
21173: LD_INT 112
21175: PUSH
21176: LD_INT 113
21178: PUSH
21179: LD_INT 114
21181: PUSH
21182: LD_INT 116
21184: PUSH
21185: LD_INT 117
21187: PUSH
21188: LD_INT 118
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: ST_TO_ADDR
21214: GO 21613
21216: LD_INT 18
21218: DOUBLE
21219: EQUAL
21220: IFTRUE 21224
21222: GO 21372
21224: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21225: LD_ADDR_VAR 0 2
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 4
21235: PUSH
21236: LD_INT 5
21238: PUSH
21239: LD_INT 7
21241: PUSH
21242: LD_INT 11
21244: PUSH
21245: LD_INT 12
21247: PUSH
21248: LD_INT 15
21250: PUSH
21251: LD_INT 16
21253: PUSH
21254: LD_INT 20
21256: PUSH
21257: LD_INT 21
21259: PUSH
21260: LD_INT 22
21262: PUSH
21263: LD_INT 23
21265: PUSH
21266: LD_INT 25
21268: PUSH
21269: LD_INT 26
21271: PUSH
21272: LD_INT 30
21274: PUSH
21275: LD_INT 31
21277: PUSH
21278: LD_INT 32
21280: PUSH
21281: LD_INT 33
21283: PUSH
21284: LD_INT 34
21286: PUSH
21287: LD_INT 35
21289: PUSH
21290: LD_INT 36
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 101
21318: PUSH
21319: LD_INT 102
21321: PUSH
21322: LD_INT 103
21324: PUSH
21325: LD_INT 106
21327: PUSH
21328: LD_INT 108
21330: PUSH
21331: LD_INT 112
21333: PUSH
21334: LD_INT 113
21336: PUSH
21337: LD_INT 114
21339: PUSH
21340: LD_INT 115
21342: PUSH
21343: LD_INT 116
21345: PUSH
21346: LD_INT 117
21348: PUSH
21349: LD_INT 118
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: ST_TO_ADDR
21370: GO 21613
21372: LD_INT 19
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21612
21380: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: LD_INT 4
21397: PUSH
21398: LD_INT 5
21400: PUSH
21401: LD_INT 6
21403: PUSH
21404: LD_INT 7
21406: PUSH
21407: LD_INT 8
21409: PUSH
21410: LD_INT 9
21412: PUSH
21413: LD_INT 10
21415: PUSH
21416: LD_INT 11
21418: PUSH
21419: LD_INT 12
21421: PUSH
21422: LD_INT 13
21424: PUSH
21425: LD_INT 14
21427: PUSH
21428: LD_INT 15
21430: PUSH
21431: LD_INT 16
21433: PUSH
21434: LD_INT 17
21436: PUSH
21437: LD_INT 18
21439: PUSH
21440: LD_INT 19
21442: PUSH
21443: LD_INT 20
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 23
21454: PUSH
21455: LD_INT 24
21457: PUSH
21458: LD_INT 25
21460: PUSH
21461: LD_INT 26
21463: PUSH
21464: LD_INT 27
21466: PUSH
21467: LD_INT 28
21469: PUSH
21470: LD_INT 29
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 31
21478: PUSH
21479: LD_INT 32
21481: PUSH
21482: LD_INT 33
21484: PUSH
21485: LD_INT 34
21487: PUSH
21488: LD_INT 35
21490: PUSH
21491: LD_INT 36
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 101
21534: PUSH
21535: LD_INT 102
21537: PUSH
21538: LD_INT 103
21540: PUSH
21541: LD_INT 104
21543: PUSH
21544: LD_INT 105
21546: PUSH
21547: LD_INT 106
21549: PUSH
21550: LD_INT 107
21552: PUSH
21553: LD_INT 108
21555: PUSH
21556: LD_INT 109
21558: PUSH
21559: LD_INT 110
21561: PUSH
21562: LD_INT 111
21564: PUSH
21565: LD_INT 112
21567: PUSH
21568: LD_INT 113
21570: PUSH
21571: LD_INT 114
21573: PUSH
21574: LD_INT 115
21576: PUSH
21577: LD_INT 116
21579: PUSH
21580: LD_INT 117
21582: PUSH
21583: LD_INT 118
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: ST_TO_ADDR
21610: GO 21613
21612: POP
// end else
21613: GO 21844
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 3
21628: PUSH
21629: LD_INT 4
21631: PUSH
21632: LD_INT 5
21634: PUSH
21635: LD_INT 6
21637: PUSH
21638: LD_INT 7
21640: PUSH
21641: LD_INT 8
21643: PUSH
21644: LD_INT 9
21646: PUSH
21647: LD_INT 10
21649: PUSH
21650: LD_INT 11
21652: PUSH
21653: LD_INT 12
21655: PUSH
21656: LD_INT 13
21658: PUSH
21659: LD_INT 14
21661: PUSH
21662: LD_INT 15
21664: PUSH
21665: LD_INT 16
21667: PUSH
21668: LD_INT 17
21670: PUSH
21671: LD_INT 18
21673: PUSH
21674: LD_INT 19
21676: PUSH
21677: LD_INT 20
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 24
21691: PUSH
21692: LD_INT 25
21694: PUSH
21695: LD_INT 26
21697: PUSH
21698: LD_INT 27
21700: PUSH
21701: LD_INT 28
21703: PUSH
21704: LD_INT 29
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 33
21718: PUSH
21719: LD_INT 34
21721: PUSH
21722: LD_INT 35
21724: PUSH
21725: LD_INT 36
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 101
21768: PUSH
21769: LD_INT 102
21771: PUSH
21772: LD_INT 103
21774: PUSH
21775: LD_INT 104
21777: PUSH
21778: LD_INT 105
21780: PUSH
21781: LD_INT 106
21783: PUSH
21784: LD_INT 107
21786: PUSH
21787: LD_INT 108
21789: PUSH
21790: LD_INT 109
21792: PUSH
21793: LD_INT 110
21795: PUSH
21796: LD_INT 111
21798: PUSH
21799: LD_INT 112
21801: PUSH
21802: LD_INT 113
21804: PUSH
21805: LD_INT 114
21807: PUSH
21808: LD_INT 115
21810: PUSH
21811: LD_INT 116
21813: PUSH
21814: LD_INT 117
21816: PUSH
21817: LD_INT 118
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: ST_TO_ADDR
// if result then
21844: LD_VAR 0 2
21848: IFFALSE 22634
// begin normal :=  ;
21850: LD_ADDR_VAR 0 5
21854: PUSH
21855: LD_STRING 
21857: ST_TO_ADDR
// hardcore :=  ;
21858: LD_ADDR_VAR 0 6
21862: PUSH
21863: LD_STRING 
21865: ST_TO_ADDR
// active :=  ;
21866: LD_ADDR_VAR 0 7
21870: PUSH
21871: LD_STRING 
21873: ST_TO_ADDR
// for i = 1 to normalCounter do
21874: LD_ADDR_VAR 0 8
21878: PUSH
21879: DOUBLE
21880: LD_INT 1
21882: DEC
21883: ST_TO_ADDR
21884: LD_EXP 55
21888: PUSH
21889: FOR_TO
21890: IFFALSE 21991
// begin tmp := 0 ;
21892: LD_ADDR_VAR 0 3
21896: PUSH
21897: LD_STRING 0
21899: ST_TO_ADDR
// if result [ 1 ] then
21900: LD_VAR 0 2
21904: PUSH
21905: LD_INT 1
21907: ARRAY
21908: IFFALSE 21973
// if result [ 1 ] [ 1 ] = i then
21910: LD_VAR 0 2
21914: PUSH
21915: LD_INT 1
21917: ARRAY
21918: PUSH
21919: LD_INT 1
21921: ARRAY
21922: PUSH
21923: LD_VAR 0 8
21927: EQUAL
21928: IFFALSE 21973
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21930: LD_ADDR_VAR 0 2
21934: PUSH
21935: LD_VAR 0 2
21939: PPUSH
21940: LD_INT 1
21942: PPUSH
21943: LD_VAR 0 2
21947: PUSH
21948: LD_INT 1
21950: ARRAY
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: CALL_OW 3
21959: PPUSH
21960: CALL_OW 1
21964: ST_TO_ADDR
// tmp := 1 ;
21965: LD_ADDR_VAR 0 3
21969: PUSH
21970: LD_STRING 1
21972: ST_TO_ADDR
// end ; normal := normal & tmp ;
21973: LD_ADDR_VAR 0 5
21977: PUSH
21978: LD_VAR 0 5
21982: PUSH
21983: LD_VAR 0 3
21987: STR
21988: ST_TO_ADDR
// end ;
21989: GO 21889
21991: POP
21992: POP
// for i = 1 to hardcoreCounter do
21993: LD_ADDR_VAR 0 8
21997: PUSH
21998: DOUBLE
21999: LD_INT 1
22001: DEC
22002: ST_TO_ADDR
22003: LD_EXP 56
22007: PUSH
22008: FOR_TO
22009: IFFALSE 22114
// begin tmp := 0 ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_STRING 0
22018: ST_TO_ADDR
// if result [ 2 ] then
22019: LD_VAR 0 2
22023: PUSH
22024: LD_INT 2
22026: ARRAY
22027: IFFALSE 22096
// if result [ 2 ] [ 1 ] = 100 + i then
22029: LD_VAR 0 2
22033: PUSH
22034: LD_INT 2
22036: ARRAY
22037: PUSH
22038: LD_INT 1
22040: ARRAY
22041: PUSH
22042: LD_INT 100
22044: PUSH
22045: LD_VAR 0 8
22049: PLUS
22050: EQUAL
22051: IFFALSE 22096
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: LD_VAR 0 2
22062: PPUSH
22063: LD_INT 2
22065: PPUSH
22066: LD_VAR 0 2
22070: PUSH
22071: LD_INT 2
22073: ARRAY
22074: PPUSH
22075: LD_INT 1
22077: PPUSH
22078: CALL_OW 3
22082: PPUSH
22083: CALL_OW 1
22087: ST_TO_ADDR
// tmp := 1 ;
22088: LD_ADDR_VAR 0 3
22092: PUSH
22093: LD_STRING 1
22095: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22096: LD_ADDR_VAR 0 6
22100: PUSH
22101: LD_VAR 0 6
22105: PUSH
22106: LD_VAR 0 3
22110: STR
22111: ST_TO_ADDR
// end ;
22112: GO 22008
22114: POP
22115: POP
// if isGameLoad then
22116: LD_VAR 0 1
22120: IFFALSE 22595
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22122: LD_ADDR_VAR 0 4
22126: PUSH
22127: LD_EXP 59
22131: PUSH
22132: LD_EXP 58
22136: PUSH
22137: LD_EXP 60
22141: PUSH
22142: LD_EXP 57
22146: PUSH
22147: LD_EXP 61
22151: PUSH
22152: LD_EXP 62
22156: PUSH
22157: LD_EXP 63
22161: PUSH
22162: LD_EXP 64
22166: PUSH
22167: LD_EXP 65
22171: PUSH
22172: LD_EXP 66
22176: PUSH
22177: LD_EXP 67
22181: PUSH
22182: LD_EXP 68
22186: PUSH
22187: LD_EXP 69
22191: PUSH
22192: LD_EXP 70
22196: PUSH
22197: LD_EXP 78
22201: PUSH
22202: LD_EXP 79
22206: PUSH
22207: LD_EXP 80
22211: PUSH
22212: LD_EXP 81
22216: PUSH
22217: LD_EXP 83
22221: PUSH
22222: LD_EXP 84
22226: PUSH
22227: LD_EXP 85
22231: PUSH
22232: LD_EXP 88
22236: PUSH
22237: LD_EXP 90
22241: PUSH
22242: LD_EXP 91
22246: PUSH
22247: LD_EXP 92
22251: PUSH
22252: LD_EXP 94
22256: PUSH
22257: LD_EXP 95
22261: PUSH
22262: LD_EXP 98
22266: PUSH
22267: LD_EXP 99
22271: PUSH
22272: LD_EXP 100
22276: PUSH
22277: LD_EXP 101
22281: PUSH
22282: LD_EXP 102
22286: PUSH
22287: LD_EXP 103
22291: PUSH
22292: LD_EXP 104
22296: PUSH
22297: LD_EXP 105
22301: PUSH
22302: LD_EXP 106
22306: PUSH
22307: LD_EXP 71
22311: PUSH
22312: LD_EXP 72
22316: PUSH
22317: LD_EXP 75
22321: PUSH
22322: LD_EXP 76
22326: PUSH
22327: LD_EXP 77
22331: PUSH
22332: LD_EXP 73
22336: PUSH
22337: LD_EXP 74
22341: PUSH
22342: LD_EXP 82
22346: PUSH
22347: LD_EXP 86
22351: PUSH
22352: LD_EXP 87
22356: PUSH
22357: LD_EXP 89
22361: PUSH
22362: LD_EXP 93
22366: PUSH
22367: LD_EXP 96
22371: PUSH
22372: LD_EXP 97
22376: PUSH
22377: LD_EXP 107
22381: PUSH
22382: LD_EXP 108
22386: PUSH
22387: LD_EXP 109
22391: PUSH
22392: LD_EXP 110
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: ST_TO_ADDR
// tmp :=  ;
22453: LD_ADDR_VAR 0 3
22457: PUSH
22458: LD_STRING 
22460: ST_TO_ADDR
// for i = 1 to normalCounter do
22461: LD_ADDR_VAR 0 8
22465: PUSH
22466: DOUBLE
22467: LD_INT 1
22469: DEC
22470: ST_TO_ADDR
22471: LD_EXP 55
22475: PUSH
22476: FOR_TO
22477: IFFALSE 22513
// begin if flags [ i ] then
22479: LD_VAR 0 4
22483: PUSH
22484: LD_VAR 0 8
22488: ARRAY
22489: IFFALSE 22511
// tmp := tmp & i & ; ;
22491: LD_ADDR_VAR 0 3
22495: PUSH
22496: LD_VAR 0 3
22500: PUSH
22501: LD_VAR 0 8
22505: STR
22506: PUSH
22507: LD_STRING ;
22509: STR
22510: ST_TO_ADDR
// end ;
22511: GO 22476
22513: POP
22514: POP
// for i = 1 to hardcoreCounter do
22515: LD_ADDR_VAR 0 8
22519: PUSH
22520: DOUBLE
22521: LD_INT 1
22523: DEC
22524: ST_TO_ADDR
22525: LD_EXP 56
22529: PUSH
22530: FOR_TO
22531: IFFALSE 22577
// begin if flags [ normalCounter + i ] then
22533: LD_VAR 0 4
22537: PUSH
22538: LD_EXP 55
22542: PUSH
22543: LD_VAR 0 8
22547: PLUS
22548: ARRAY
22549: IFFALSE 22575
// tmp := tmp & ( 100 + i ) & ; ;
22551: LD_ADDR_VAR 0 3
22555: PUSH
22556: LD_VAR 0 3
22560: PUSH
22561: LD_INT 100
22563: PUSH
22564: LD_VAR 0 8
22568: PLUS
22569: STR
22570: PUSH
22571: LD_STRING ;
22573: STR
22574: ST_TO_ADDR
// end ;
22575: GO 22530
22577: POP
22578: POP
// if tmp then
22579: LD_VAR 0 3
22583: IFFALSE 22595
// active := tmp ;
22585: LD_ADDR_VAR 0 7
22589: PUSH
22590: LD_VAR 0 3
22594: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22595: LD_STRING getStreamItemsFromMission("
22597: PUSH
22598: LD_VAR 0 5
22602: STR
22603: PUSH
22604: LD_STRING ","
22606: STR
22607: PUSH
22608: LD_VAR 0 6
22612: STR
22613: PUSH
22614: LD_STRING ","
22616: STR
22617: PUSH
22618: LD_VAR 0 7
22622: STR
22623: PUSH
22624: LD_STRING ")
22626: STR
22627: PPUSH
22628: CALL_OW 559
// end else
22632: GO 22641
// ToLua ( getStreamItemsFromMission("","","") ) ;
22634: LD_STRING getStreamItemsFromMission("","","")
22636: PPUSH
22637: CALL_OW 559
// end ;
22641: LD_VAR 0 2
22645: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22646: LD_EXP 54
22650: PUSH
22651: LD_EXP 59
22655: AND
22656: IFFALSE 22780
22658: GO 22660
22660: DISABLE
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
// begin enable ;
22665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22666: LD_ADDR_VAR 0 2
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_OWVAR 2
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: LD_INT 34
22688: PUSH
22689: LD_INT 7
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 34
22698: PUSH
22699: LD_INT 45
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 34
22708: PUSH
22709: LD_INT 28
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 34
22718: PUSH
22719: LD_INT 47
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PPUSH
22737: CALL_OW 69
22741: ST_TO_ADDR
// if not tmp then
22742: LD_VAR 0 2
22746: NOT
22747: IFFALSE 22751
// exit ;
22749: GO 22780
// for i in tmp do
22751: LD_ADDR_VAR 0 1
22755: PUSH
22756: LD_VAR 0 2
22760: PUSH
22761: FOR_IN
22762: IFFALSE 22778
// begin SetLives ( i , 0 ) ;
22764: LD_VAR 0 1
22768: PPUSH
22769: LD_INT 0
22771: PPUSH
22772: CALL_OW 234
// end ;
22776: GO 22761
22778: POP
22779: POP
// end ;
22780: PPOPN 2
22782: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22783: LD_EXP 54
22787: PUSH
22788: LD_EXP 60
22792: AND
22793: IFFALSE 22877
22795: GO 22797
22797: DISABLE
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
// begin enable ;
22802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_OWVAR 2
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 32
22822: PUSH
22823: LD_INT 3
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PPUSH
22834: CALL_OW 69
22838: ST_TO_ADDR
// if not tmp then
22839: LD_VAR 0 2
22843: NOT
22844: IFFALSE 22848
// exit ;
22846: GO 22877
// for i in tmp do
22848: LD_ADDR_VAR 0 1
22852: PUSH
22853: LD_VAR 0 2
22857: PUSH
22858: FOR_IN
22859: IFFALSE 22875
// begin SetLives ( i , 0 ) ;
22861: LD_VAR 0 1
22865: PPUSH
22866: LD_INT 0
22868: PPUSH
22869: CALL_OW 234
// end ;
22873: GO 22858
22875: POP
22876: POP
// end ;
22877: PPOPN 2
22879: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22880: LD_EXP 54
22884: PUSH
22885: LD_EXP 57
22889: AND
22890: IFFALSE 22983
22892: GO 22894
22894: DISABLE
22895: LD_INT 0
22897: PPUSH
// begin enable ;
22898: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 25
22921: PUSH
22922: LD_INT 5
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 25
22931: PUSH
22932: LD_INT 9
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 25
22941: PUSH
22942: LD_INT 8
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PPUSH
22959: CALL_OW 69
22963: PUSH
22964: FOR_IN
22965: IFFALSE 22981
// begin SetClass ( i , 1 ) ;
22967: LD_VAR 0 1
22971: PPUSH
22972: LD_INT 1
22974: PPUSH
22975: CALL_OW 336
// end ;
22979: GO 22964
22981: POP
22982: POP
// end ;
22983: PPOPN 1
22985: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22986: LD_EXP 54
22990: PUSH
22991: LD_EXP 58
22995: AND
22996: PUSH
22997: LD_OWVAR 65
23001: PUSH
23002: LD_INT 7
23004: LESS
23005: AND
23006: IFFALSE 23020
23008: GO 23010
23010: DISABLE
// begin enable ;
23011: ENABLE
// game_speed := 7 ;
23012: LD_ADDR_OWVAR 65
23016: PUSH
23017: LD_INT 7
23019: ST_TO_ADDR
// end ;
23020: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23021: LD_EXP 54
23025: PUSH
23026: LD_EXP 61
23030: AND
23031: IFFALSE 23233
23033: GO 23035
23035: DISABLE
23036: LD_INT 0
23038: PPUSH
23039: PPUSH
23040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: LD_INT 81
23048: PUSH
23049: LD_OWVAR 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PPUSH
23072: CALL_OW 69
23076: ST_TO_ADDR
// if not tmp then
23077: LD_VAR 0 3
23081: NOT
23082: IFFALSE 23086
// exit ;
23084: GO 23233
// if tmp > 5 then
23086: LD_VAR 0 3
23090: PUSH
23091: LD_INT 5
23093: GREATER
23094: IFFALSE 23106
// k := 5 else
23096: LD_ADDR_VAR 0 2
23100: PUSH
23101: LD_INT 5
23103: ST_TO_ADDR
23104: GO 23116
// k := tmp ;
23106: LD_ADDR_VAR 0 2
23110: PUSH
23111: LD_VAR 0 3
23115: ST_TO_ADDR
// for i := 1 to k do
23116: LD_ADDR_VAR 0 1
23120: PUSH
23121: DOUBLE
23122: LD_INT 1
23124: DEC
23125: ST_TO_ADDR
23126: LD_VAR 0 2
23130: PUSH
23131: FOR_TO
23132: IFFALSE 23231
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23134: LD_VAR 0 3
23138: PUSH
23139: LD_VAR 0 1
23143: ARRAY
23144: PPUSH
23145: LD_VAR 0 1
23149: PUSH
23150: LD_INT 4
23152: MOD
23153: PUSH
23154: LD_INT 1
23156: PLUS
23157: PPUSH
23158: CALL_OW 259
23162: PUSH
23163: LD_INT 10
23165: LESS
23166: IFFALSE 23229
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23168: LD_VAR 0 3
23172: PUSH
23173: LD_VAR 0 1
23177: ARRAY
23178: PPUSH
23179: LD_VAR 0 1
23183: PUSH
23184: LD_INT 4
23186: MOD
23187: PUSH
23188: LD_INT 1
23190: PLUS
23191: PPUSH
23192: LD_VAR 0 3
23196: PUSH
23197: LD_VAR 0 1
23201: ARRAY
23202: PPUSH
23203: LD_VAR 0 1
23207: PUSH
23208: LD_INT 4
23210: MOD
23211: PUSH
23212: LD_INT 1
23214: PLUS
23215: PPUSH
23216: CALL_OW 259
23220: PUSH
23221: LD_INT 1
23223: PLUS
23224: PPUSH
23225: CALL_OW 237
23229: GO 23131
23231: POP
23232: POP
// end ;
23233: PPOPN 3
23235: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23236: LD_EXP 54
23240: PUSH
23241: LD_EXP 62
23245: AND
23246: IFFALSE 23266
23248: GO 23250
23250: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23251: LD_INT 4
23253: PPUSH
23254: LD_OWVAR 2
23258: PPUSH
23259: LD_INT 0
23261: PPUSH
23262: CALL_OW 324
23266: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23267: LD_EXP 54
23271: PUSH
23272: LD_EXP 91
23276: AND
23277: IFFALSE 23297
23279: GO 23281
23281: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23282: LD_INT 19
23284: PPUSH
23285: LD_OWVAR 2
23289: PPUSH
23290: LD_INT 0
23292: PPUSH
23293: CALL_OW 324
23297: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23298: LD_EXP 54
23302: PUSH
23303: LD_EXP 63
23307: AND
23308: IFFALSE 23410
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// begin enable ;
23317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23318: LD_ADDR_VAR 0 2
23322: PUSH
23323: LD_INT 22
23325: PUSH
23326: LD_OWVAR 2
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 34
23340: PUSH
23341: LD_INT 11
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 34
23350: PUSH
23351: LD_INT 30
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: ST_TO_ADDR
// if not tmp then
23372: LD_VAR 0 2
23376: NOT
23377: IFFALSE 23381
// exit ;
23379: GO 23410
// for i in tmp do
23381: LD_ADDR_VAR 0 1
23385: PUSH
23386: LD_VAR 0 2
23390: PUSH
23391: FOR_IN
23392: IFFALSE 23408
// begin SetLives ( i , 0 ) ;
23394: LD_VAR 0 1
23398: PPUSH
23399: LD_INT 0
23401: PPUSH
23402: CALL_OW 234
// end ;
23406: GO 23391
23408: POP
23409: POP
// end ;
23410: PPOPN 2
23412: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23413: LD_EXP 54
23417: PUSH
23418: LD_EXP 64
23422: AND
23423: IFFALSE 23443
23425: GO 23427
23427: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23428: LD_INT 32
23430: PPUSH
23431: LD_OWVAR 2
23435: PPUSH
23436: LD_INT 0
23438: PPUSH
23439: CALL_OW 324
23443: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23444: LD_EXP 54
23448: PUSH
23449: LD_EXP 65
23453: AND
23454: IFFALSE 23635
23456: GO 23458
23458: DISABLE
23459: LD_INT 0
23461: PPUSH
23462: PPUSH
23463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23464: LD_ADDR_VAR 0 2
23468: PUSH
23469: LD_INT 22
23471: PUSH
23472: LD_OWVAR 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 33
23483: PUSH
23484: LD_INT 3
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 69
23499: ST_TO_ADDR
// if not tmp then
23500: LD_VAR 0 2
23504: NOT
23505: IFFALSE 23509
// exit ;
23507: GO 23635
// side := 0 ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_INT 0
23516: ST_TO_ADDR
// for i := 1 to 8 do
23517: LD_ADDR_VAR 0 1
23521: PUSH
23522: DOUBLE
23523: LD_INT 1
23525: DEC
23526: ST_TO_ADDR
23527: LD_INT 8
23529: PUSH
23530: FOR_TO
23531: IFFALSE 23579
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23533: LD_OWVAR 2
23537: PUSH
23538: LD_VAR 0 1
23542: NONEQUAL
23543: PUSH
23544: LD_OWVAR 2
23548: PPUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: CALL_OW 81
23558: PUSH
23559: LD_INT 2
23561: EQUAL
23562: AND
23563: IFFALSE 23577
// begin side := i ;
23565: LD_ADDR_VAR 0 3
23569: PUSH
23570: LD_VAR 0 1
23574: ST_TO_ADDR
// break ;
23575: GO 23579
// end ;
23577: GO 23530
23579: POP
23580: POP
// if not side then
23581: LD_VAR 0 3
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 23635
// for i := 1 to tmp do
23590: LD_ADDR_VAR 0 1
23594: PUSH
23595: DOUBLE
23596: LD_INT 1
23598: DEC
23599: ST_TO_ADDR
23600: LD_VAR 0 2
23604: PUSH
23605: FOR_TO
23606: IFFALSE 23633
// if Prob ( 60 ) then
23608: LD_INT 60
23610: PPUSH
23611: CALL_OW 13
23615: IFFALSE 23631
// SetSide ( i , side ) ;
23617: LD_VAR 0 1
23621: PPUSH
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL_OW 235
23631: GO 23605
23633: POP
23634: POP
// end ;
23635: PPOPN 3
23637: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23638: LD_EXP 54
23642: PUSH
23643: LD_EXP 67
23647: AND
23648: IFFALSE 23767
23650: GO 23652
23652: DISABLE
23653: LD_INT 0
23655: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23656: LD_ADDR_VAR 0 1
23660: PUSH
23661: LD_INT 22
23663: PUSH
23664: LD_OWVAR 2
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 21
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: LD_INT 23
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: LIST
23704: PPUSH
23705: CALL_OW 69
23709: PUSH
23710: FOR_IN
23711: IFFALSE 23765
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 257
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: LD_INT 4
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: IN
23741: IFFALSE 23763
// SetClass ( un , rand ( 1 , 4 ) ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 1
23750: PPUSH
23751: LD_INT 4
23753: PPUSH
23754: CALL_OW 12
23758: PPUSH
23759: CALL_OW 336
23763: GO 23710
23765: POP
23766: POP
// end ;
23767: PPOPN 1
23769: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23770: LD_EXP 54
23774: PUSH
23775: LD_EXP 66
23779: AND
23780: IFFALSE 23859
23782: GO 23784
23784: DISABLE
23785: LD_INT 0
23787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23788: LD_ADDR_VAR 0 1
23792: PUSH
23793: LD_INT 22
23795: PUSH
23796: LD_OWVAR 2
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 3
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PPUSH
23819: CALL_OW 69
23823: ST_TO_ADDR
// if not tmp then
23824: LD_VAR 0 1
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 23859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23833: LD_VAR 0 1
23837: PUSH
23838: LD_INT 1
23840: PPUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL_OW 12
23850: ARRAY
23851: PPUSH
23852: LD_INT 100
23854: PPUSH
23855: CALL_OW 234
// end ;
23859: PPOPN 1
23861: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23862: LD_EXP 54
23866: PUSH
23867: LD_EXP 68
23871: AND
23872: IFFALSE 23970
23874: GO 23876
23876: DISABLE
23877: LD_INT 0
23879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23880: LD_ADDR_VAR 0 1
23884: PUSH
23885: LD_INT 22
23887: PUSH
23888: LD_OWVAR 2
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 21
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 69
23915: ST_TO_ADDR
// if not tmp then
23916: LD_VAR 0 1
23920: NOT
23921: IFFALSE 23925
// exit ;
23923: GO 23970
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23925: LD_VAR 0 1
23929: PUSH
23930: LD_INT 1
23932: PPUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 12
23942: ARRAY
23943: PPUSH
23944: LD_INT 1
23946: PPUSH
23947: LD_INT 4
23949: PPUSH
23950: CALL_OW 12
23954: PPUSH
23955: LD_INT 3000
23957: PPUSH
23958: LD_INT 9000
23960: PPUSH
23961: CALL_OW 12
23965: PPUSH
23966: CALL_OW 492
// end ;
23970: PPOPN 1
23972: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23973: LD_EXP 54
23977: PUSH
23978: LD_EXP 69
23982: AND
23983: IFFALSE 24003
23985: GO 23987
23987: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23988: LD_INT 1
23990: PPUSH
23991: LD_OWVAR 2
23995: PPUSH
23996: LD_INT 0
23998: PPUSH
23999: CALL_OW 324
24003: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24004: LD_EXP 54
24008: PUSH
24009: LD_EXP 70
24013: AND
24014: IFFALSE 24097
24016: GO 24018
24018: DISABLE
24019: LD_INT 0
24021: PPUSH
24022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24023: LD_ADDR_VAR 0 2
24027: PUSH
24028: LD_INT 22
24030: PUSH
24031: LD_OWVAR 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 21
24042: PUSH
24043: LD_INT 3
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 69
24058: ST_TO_ADDR
// if not tmp then
24059: LD_VAR 0 2
24063: NOT
24064: IFFALSE 24068
// exit ;
24066: GO 24097
// for i in tmp do
24068: LD_ADDR_VAR 0 1
24072: PUSH
24073: LD_VAR 0 2
24077: PUSH
24078: FOR_IN
24079: IFFALSE 24095
// SetBLevel ( i , 10 ) ;
24081: LD_VAR 0 1
24085: PPUSH
24086: LD_INT 10
24088: PPUSH
24089: CALL_OW 241
24093: GO 24078
24095: POP
24096: POP
// end ;
24097: PPOPN 2
24099: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24100: LD_EXP 54
24104: PUSH
24105: LD_EXP 71
24109: AND
24110: IFFALSE 24221
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
24119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24120: LD_ADDR_VAR 0 3
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_OWVAR 2
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 25
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PPUSH
24151: CALL_OW 69
24155: ST_TO_ADDR
// if not tmp then
24156: LD_VAR 0 3
24160: NOT
24161: IFFALSE 24165
// exit ;
24163: GO 24221
// un := tmp [ rand ( 1 , tmp ) ] ;
24165: LD_ADDR_VAR 0 2
24169: PUSH
24170: LD_VAR 0 3
24174: PUSH
24175: LD_INT 1
24177: PPUSH
24178: LD_VAR 0 3
24182: PPUSH
24183: CALL_OW 12
24187: ARRAY
24188: ST_TO_ADDR
// if Crawls ( un ) then
24189: LD_VAR 0 2
24193: PPUSH
24194: CALL_OW 318
24198: IFFALSE 24209
// ComWalk ( un ) ;
24200: LD_VAR 0 2
24204: PPUSH
24205: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24209: LD_VAR 0 2
24213: PPUSH
24214: LD_INT 5
24216: PPUSH
24217: CALL_OW 336
// end ;
24221: PPOPN 3
24223: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24224: LD_EXP 54
24228: PUSH
24229: LD_EXP 72
24233: AND
24234: PUSH
24235: LD_OWVAR 67
24239: PUSH
24240: LD_INT 4
24242: LESS
24243: AND
24244: IFFALSE 24263
24246: GO 24248
24248: DISABLE
// begin Difficulty := Difficulty + 1 ;
24249: LD_ADDR_OWVAR 67
24253: PUSH
24254: LD_OWVAR 67
24258: PUSH
24259: LD_INT 1
24261: PLUS
24262: ST_TO_ADDR
// end ;
24263: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24264: LD_EXP 54
24268: PUSH
24269: LD_EXP 73
24273: AND
24274: IFFALSE 24377
24276: GO 24278
24278: DISABLE
24279: LD_INT 0
24281: PPUSH
// begin for i := 1 to 5 do
24282: LD_ADDR_VAR 0 1
24286: PUSH
24287: DOUBLE
24288: LD_INT 1
24290: DEC
24291: ST_TO_ADDR
24292: LD_INT 5
24294: PUSH
24295: FOR_TO
24296: IFFALSE 24375
// begin uc_nation := nation_nature ;
24298: LD_ADDR_OWVAR 21
24302: PUSH
24303: LD_INT 0
24305: ST_TO_ADDR
// uc_side := 0 ;
24306: LD_ADDR_OWVAR 20
24310: PUSH
24311: LD_INT 0
24313: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24314: LD_ADDR_OWVAR 29
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 12
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// hc_agressivity := 20 ;
24329: LD_ADDR_OWVAR 35
24333: PUSH
24334: LD_INT 20
24336: ST_TO_ADDR
// hc_class := class_tiger ;
24337: LD_ADDR_OWVAR 28
24341: PUSH
24342: LD_INT 14
24344: ST_TO_ADDR
// hc_gallery :=  ;
24345: LD_ADDR_OWVAR 33
24349: PUSH
24350: LD_STRING 
24352: ST_TO_ADDR
// hc_name :=  ;
24353: LD_ADDR_OWVAR 26
24357: PUSH
24358: LD_STRING 
24360: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24361: CALL_OW 44
24365: PPUSH
24366: LD_INT 0
24368: PPUSH
24369: CALL_OW 51
// end ;
24373: GO 24295
24375: POP
24376: POP
// end ;
24377: PPOPN 1
24379: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24380: LD_EXP 54
24384: PUSH
24385: LD_EXP 74
24389: AND
24390: IFFALSE 24399
24392: GO 24394
24394: DISABLE
// StreamSibBomb ;
24395: CALL 24400 0 0
24399: END
// export function StreamSibBomb ; var i , x , y ; begin
24400: LD_INT 0
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
// result := false ;
24406: LD_ADDR_VAR 0 1
24410: PUSH
24411: LD_INT 0
24413: ST_TO_ADDR
// for i := 1 to 16 do
24414: LD_ADDR_VAR 0 2
24418: PUSH
24419: DOUBLE
24420: LD_INT 1
24422: DEC
24423: ST_TO_ADDR
24424: LD_INT 16
24426: PUSH
24427: FOR_TO
24428: IFFALSE 24627
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24430: LD_ADDR_VAR 0 3
24434: PUSH
24435: LD_INT 10
24437: PUSH
24438: LD_INT 20
24440: PUSH
24441: LD_INT 30
24443: PUSH
24444: LD_INT 40
24446: PUSH
24447: LD_INT 50
24449: PUSH
24450: LD_INT 60
24452: PUSH
24453: LD_INT 70
24455: PUSH
24456: LD_INT 80
24458: PUSH
24459: LD_INT 90
24461: PUSH
24462: LD_INT 100
24464: PUSH
24465: LD_INT 110
24467: PUSH
24468: LD_INT 120
24470: PUSH
24471: LD_INT 130
24473: PUSH
24474: LD_INT 140
24476: PUSH
24477: LD_INT 150
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PPUSH
24500: LD_INT 15
24502: PPUSH
24503: CALL_OW 12
24507: ARRAY
24508: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: LD_INT 10
24516: PUSH
24517: LD_INT 20
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 40
24525: PUSH
24526: LD_INT 50
24528: PUSH
24529: LD_INT 60
24531: PUSH
24532: LD_INT 70
24534: PUSH
24535: LD_INT 80
24537: PUSH
24538: LD_INT 90
24540: PUSH
24541: LD_INT 100
24543: PUSH
24544: LD_INT 110
24546: PUSH
24547: LD_INT 120
24549: PUSH
24550: LD_INT 130
24552: PUSH
24553: LD_INT 140
24555: PUSH
24556: LD_INT 150
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 1
24578: PPUSH
24579: LD_INT 15
24581: PPUSH
24582: CALL_OW 12
24586: ARRAY
24587: ST_TO_ADDR
// if ValidHex ( x , y ) then
24588: LD_VAR 0 3
24592: PPUSH
24593: LD_VAR 0 4
24597: PPUSH
24598: CALL_OW 488
24602: IFFALSE 24625
// begin result := [ x , y ] ;
24604: LD_ADDR_VAR 0 1
24608: PUSH
24609: LD_VAR 0 3
24613: PUSH
24614: LD_VAR 0 4
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: ST_TO_ADDR
// break ;
24623: GO 24627
// end ; end ;
24625: GO 24427
24627: POP
24628: POP
// if result then
24629: LD_VAR 0 1
24633: IFFALSE 24693
// begin ToLua ( playSibBomb() ) ;
24635: LD_STRING playSibBomb()
24637: PPUSH
24638: CALL_OW 559
// wait ( 0 0$14 ) ;
24642: LD_INT 490
24644: PPUSH
24645: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24649: LD_VAR 0 1
24653: PUSH
24654: LD_INT 1
24656: ARRAY
24657: PPUSH
24658: LD_VAR 0 1
24662: PUSH
24663: LD_INT 2
24665: ARRAY
24666: PPUSH
24667: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24671: LD_VAR 0 1
24675: PUSH
24676: LD_INT 1
24678: ARRAY
24679: PPUSH
24680: LD_VAR 0 1
24684: PUSH
24685: LD_INT 2
24687: ARRAY
24688: PPUSH
24689: CALL_OW 429
// end ; end ;
24693: LD_VAR 0 1
24697: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24698: LD_EXP 54
24702: PUSH
24703: LD_EXP 76
24707: AND
24708: IFFALSE 24720
24710: GO 24712
24712: DISABLE
// YouLost (  ) ;
24713: LD_STRING 
24715: PPUSH
24716: CALL_OW 104
24720: END
// every 0 0$1 trigger StreamModeActive and sFog do
24721: LD_EXP 54
24725: PUSH
24726: LD_EXP 75
24730: AND
24731: IFFALSE 24745
24733: GO 24735
24735: DISABLE
// FogOff ( your_side ) ;
24736: LD_OWVAR 2
24740: PPUSH
24741: CALL_OW 344
24745: END
// every 0 0$1 trigger StreamModeActive and sSun do
24746: LD_EXP 54
24750: PUSH
24751: LD_EXP 77
24755: AND
24756: IFFALSE 24784
24758: GO 24760
24760: DISABLE
// begin solar_recharge_percent := 0 ;
24761: LD_ADDR_OWVAR 79
24765: PUSH
24766: LD_INT 0
24768: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24769: LD_INT 10500
24771: PPUSH
24772: CALL_OW 67
// solar_recharge_percent := 100 ;
24776: LD_ADDR_OWVAR 79
24780: PUSH
24781: LD_INT 100
24783: ST_TO_ADDR
// end ;
24784: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24785: LD_EXP 54
24789: PUSH
24790: LD_EXP 78
24794: AND
24795: IFFALSE 25034
24797: GO 24799
24799: DISABLE
24800: LD_INT 0
24802: PPUSH
24803: PPUSH
24804: PPUSH
// begin tmp := [ ] ;
24805: LD_ADDR_VAR 0 3
24809: PUSH
24810: EMPTY
24811: ST_TO_ADDR
// for i := 1 to 6 do
24812: LD_ADDR_VAR 0 1
24816: PUSH
24817: DOUBLE
24818: LD_INT 1
24820: DEC
24821: ST_TO_ADDR
24822: LD_INT 6
24824: PUSH
24825: FOR_TO
24826: IFFALSE 24931
// begin uc_nation := nation_nature ;
24828: LD_ADDR_OWVAR 21
24832: PUSH
24833: LD_INT 0
24835: ST_TO_ADDR
// uc_side := 0 ;
24836: LD_ADDR_OWVAR 20
24840: PUSH
24841: LD_INT 0
24843: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24844: LD_ADDR_OWVAR 29
24848: PUSH
24849: LD_INT 12
24851: PUSH
24852: LD_INT 12
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: ST_TO_ADDR
// hc_agressivity := 20 ;
24859: LD_ADDR_OWVAR 35
24863: PUSH
24864: LD_INT 20
24866: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24867: LD_ADDR_OWVAR 28
24871: PUSH
24872: LD_INT 17
24874: ST_TO_ADDR
// hc_gallery :=  ;
24875: LD_ADDR_OWVAR 33
24879: PUSH
24880: LD_STRING 
24882: ST_TO_ADDR
// hc_name :=  ;
24883: LD_ADDR_OWVAR 26
24887: PUSH
24888: LD_STRING 
24890: ST_TO_ADDR
// un := CreateHuman ;
24891: LD_ADDR_VAR 0 2
24895: PUSH
24896: CALL_OW 44
24900: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24901: LD_VAR 0 2
24905: PPUSH
24906: LD_INT 1
24908: PPUSH
24909: CALL_OW 51
// tmp := tmp ^ un ;
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_VAR 0 3
24922: PUSH
24923: LD_VAR 0 2
24927: ADD
24928: ST_TO_ADDR
// end ;
24929: GO 24825
24931: POP
24932: POP
// repeat wait ( 0 0$1 ) ;
24933: LD_INT 35
24935: PPUSH
24936: CALL_OW 67
// for un in tmp do
24940: LD_ADDR_VAR 0 2
24944: PUSH
24945: LD_VAR 0 3
24949: PUSH
24950: FOR_IN
24951: IFFALSE 25025
// begin if IsDead ( un ) then
24953: LD_VAR 0 2
24957: PPUSH
24958: CALL_OW 301
24962: IFFALSE 24982
// begin tmp := tmp diff un ;
24964: LD_ADDR_VAR 0 3
24968: PUSH
24969: LD_VAR 0 3
24973: PUSH
24974: LD_VAR 0 2
24978: DIFF
24979: ST_TO_ADDR
// continue ;
24980: GO 24950
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24982: LD_VAR 0 2
24986: PPUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 22
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 69
25008: PPUSH
25009: LD_VAR 0 2
25013: PPUSH
25014: CALL_OW 74
25018: PPUSH
25019: CALL_OW 115
// end ;
25023: GO 24950
25025: POP
25026: POP
// until not tmp ;
25027: LD_VAR 0 3
25031: NOT
25032: IFFALSE 24933
// end ;
25034: PPOPN 3
25036: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25037: LD_EXP 54
25041: PUSH
25042: LD_EXP 79
25046: AND
25047: IFFALSE 25101
25049: GO 25051
25051: DISABLE
// begin ToLua ( displayTroll(); ) ;
25052: LD_STRING displayTroll();
25054: PPUSH
25055: CALL_OW 559
// wait ( 3 3$00 ) ;
25059: LD_INT 6300
25061: PPUSH
25062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25066: LD_STRING hideTroll();
25068: PPUSH
25069: CALL_OW 559
// wait ( 1 1$00 ) ;
25073: LD_INT 2100
25075: PPUSH
25076: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25080: LD_STRING displayTroll();
25082: PPUSH
25083: CALL_OW 559
// wait ( 1 1$00 ) ;
25087: LD_INT 2100
25089: PPUSH
25090: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25094: LD_STRING hideTroll();
25096: PPUSH
25097: CALL_OW 559
// end ;
25101: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25102: LD_EXP 54
25106: PUSH
25107: LD_EXP 80
25111: AND
25112: IFFALSE 25175
25114: GO 25116
25116: DISABLE
25117: LD_INT 0
25119: PPUSH
// begin p := 0 ;
25120: LD_ADDR_VAR 0 1
25124: PUSH
25125: LD_INT 0
25127: ST_TO_ADDR
// repeat game_speed := 1 ;
25128: LD_ADDR_OWVAR 65
25132: PUSH
25133: LD_INT 1
25135: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25136: LD_INT 35
25138: PPUSH
25139: CALL_OW 67
// p := p + 1 ;
25143: LD_ADDR_VAR 0 1
25147: PUSH
25148: LD_VAR 0 1
25152: PUSH
25153: LD_INT 1
25155: PLUS
25156: ST_TO_ADDR
// until p >= 60 ;
25157: LD_VAR 0 1
25161: PUSH
25162: LD_INT 60
25164: GREATEREQUAL
25165: IFFALSE 25128
// game_speed := 4 ;
25167: LD_ADDR_OWVAR 65
25171: PUSH
25172: LD_INT 4
25174: ST_TO_ADDR
// end ;
25175: PPOPN 1
25177: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25178: LD_EXP 54
25182: PUSH
25183: LD_EXP 81
25187: AND
25188: IFFALSE 25334
25190: GO 25192
25192: DISABLE
25193: LD_INT 0
25195: PPUSH
25196: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25197: LD_ADDR_VAR 0 1
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_OWVAR 2
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 2
25216: PUSH
25217: LD_INT 30
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 30
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: ST_TO_ADDR
// if not depot then
25251: LD_VAR 0 1
25255: NOT
25256: IFFALSE 25260
// exit ;
25258: GO 25334
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25260: LD_ADDR_VAR 0 2
25264: PUSH
25265: LD_VAR 0 1
25269: PUSH
25270: LD_INT 1
25272: PPUSH
25273: LD_VAR 0 1
25277: PPUSH
25278: CALL_OW 12
25282: ARRAY
25283: PPUSH
25284: CALL_OW 274
25288: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 1
25296: PPUSH
25297: LD_INT 0
25299: PPUSH
25300: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25304: LD_VAR 0 2
25308: PPUSH
25309: LD_INT 2
25311: PPUSH
25312: LD_INT 0
25314: PPUSH
25315: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25319: LD_VAR 0 2
25323: PPUSH
25324: LD_INT 3
25326: PPUSH
25327: LD_INT 0
25329: PPUSH
25330: CALL_OW 277
// end ;
25334: PPOPN 2
25336: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25337: LD_EXP 54
25341: PUSH
25342: LD_EXP 82
25346: AND
25347: IFFALSE 25444
25349: GO 25351
25351: DISABLE
25352: LD_INT 0
25354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25355: LD_ADDR_VAR 0 1
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_OWVAR 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 21
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: LD_INT 23
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: PPUSH
25404: CALL_OW 69
25408: ST_TO_ADDR
// if not tmp then
25409: LD_VAR 0 1
25413: NOT
25414: IFFALSE 25418
// exit ;
25416: GO 25444
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25418: LD_VAR 0 1
25422: PUSH
25423: LD_INT 1
25425: PPUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 12
25435: ARRAY
25436: PPUSH
25437: LD_INT 200
25439: PPUSH
25440: CALL_OW 234
// end ;
25444: PPOPN 1
25446: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25447: LD_EXP 54
25451: PUSH
25452: LD_EXP 83
25456: AND
25457: IFFALSE 25536
25459: GO 25461
25461: DISABLE
25462: LD_INT 0
25464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_INT 22
25472: PUSH
25473: LD_OWVAR 2
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 21
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PPUSH
25496: CALL_OW 69
25500: ST_TO_ADDR
// if not tmp then
25501: LD_VAR 0 1
25505: NOT
25506: IFFALSE 25510
// exit ;
25508: GO 25536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25510: LD_VAR 0 1
25514: PUSH
25515: LD_INT 1
25517: PPUSH
25518: LD_VAR 0 1
25522: PPUSH
25523: CALL_OW 12
25527: ARRAY
25528: PPUSH
25529: LD_INT 60
25531: PPUSH
25532: CALL_OW 234
// end ;
25536: PPOPN 1
25538: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25539: LD_EXP 54
25543: PUSH
25544: LD_EXP 84
25548: AND
25549: IFFALSE 25648
25551: GO 25553
25553: DISABLE
25554: LD_INT 0
25556: PPUSH
25557: PPUSH
// begin enable ;
25558: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25559: LD_ADDR_VAR 0 1
25563: PUSH
25564: LD_INT 22
25566: PUSH
25567: LD_OWVAR 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 61
25578: PUSH
25579: EMPTY
25580: LIST
25581: PUSH
25582: LD_INT 33
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: LIST
25596: PPUSH
25597: CALL_OW 69
25601: ST_TO_ADDR
// if not tmp then
25602: LD_VAR 0 1
25606: NOT
25607: IFFALSE 25611
// exit ;
25609: GO 25648
// for i in tmp do
25611: LD_ADDR_VAR 0 2
25615: PUSH
25616: LD_VAR 0 1
25620: PUSH
25621: FOR_IN
25622: IFFALSE 25646
// if IsControledBy ( i ) then
25624: LD_VAR 0 2
25628: PPUSH
25629: CALL_OW 312
25633: IFFALSE 25644
// ComUnlink ( i ) ;
25635: LD_VAR 0 2
25639: PPUSH
25640: CALL_OW 136
25644: GO 25621
25646: POP
25647: POP
// end ;
25648: PPOPN 2
25650: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25651: LD_EXP 54
25655: PUSH
25656: LD_EXP 85
25660: AND
25661: IFFALSE 25801
25663: GO 25665
25665: DISABLE
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
// begin ToLua ( displayPowell(); ) ;
25670: LD_STRING displayPowell();
25672: PPUSH
25673: CALL_OW 559
// uc_side := 0 ;
25677: LD_ADDR_OWVAR 20
25681: PUSH
25682: LD_INT 0
25684: ST_TO_ADDR
// uc_nation := 2 ;
25685: LD_ADDR_OWVAR 21
25689: PUSH
25690: LD_INT 2
25692: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25693: LD_ADDR_OWVAR 37
25697: PUSH
25698: LD_INT 14
25700: ST_TO_ADDR
// vc_engine := engine_siberite ;
25701: LD_ADDR_OWVAR 39
25705: PUSH
25706: LD_INT 3
25708: ST_TO_ADDR
// vc_control := control_apeman ;
25709: LD_ADDR_OWVAR 38
25713: PUSH
25714: LD_INT 5
25716: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25717: LD_ADDR_OWVAR 40
25721: PUSH
25722: LD_INT 29
25724: ST_TO_ADDR
// un := CreateVehicle ;
25725: LD_ADDR_VAR 0 2
25729: PUSH
25730: CALL_OW 45
25734: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25735: LD_VAR 0 2
25739: PPUSH
25740: LD_INT 1
25742: PPUSH
25743: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25747: LD_INT 35
25749: PPUSH
25750: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25754: LD_VAR 0 2
25758: PPUSH
25759: LD_INT 22
25761: PUSH
25762: LD_OWVAR 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PPUSH
25771: CALL_OW 69
25775: PPUSH
25776: LD_VAR 0 2
25780: PPUSH
25781: CALL_OW 74
25785: PPUSH
25786: CALL_OW 115
// until IsDead ( un ) ;
25790: LD_VAR 0 2
25794: PPUSH
25795: CALL_OW 301
25799: IFFALSE 25747
// end ;
25801: PPOPN 2
25803: END
// every 0 0$1 trigger StreamModeActive and sStu do
25804: LD_EXP 54
25808: PUSH
25809: LD_EXP 93
25813: AND
25814: IFFALSE 25830
25816: GO 25818
25818: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25819: LD_STRING displayStucuk();
25821: PPUSH
25822: CALL_OW 559
// ResetFog ;
25826: CALL_OW 335
// end ;
25830: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25831: LD_EXP 54
25835: PUSH
25836: LD_EXP 86
25840: AND
25841: IFFALSE 25982
25843: GO 25845
25845: DISABLE
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25850: LD_ADDR_VAR 0 2
25854: PUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 21
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PPUSH
25881: CALL_OW 69
25885: ST_TO_ADDR
// if not tmp then
25886: LD_VAR 0 2
25890: NOT
25891: IFFALSE 25895
// exit ;
25893: GO 25982
// un := tmp [ rand ( 1 , tmp ) ] ;
25895: LD_ADDR_VAR 0 1
25899: PUSH
25900: LD_VAR 0 2
25904: PUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_VAR 0 2
25912: PPUSH
25913: CALL_OW 12
25917: ARRAY
25918: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25919: LD_VAR 0 1
25923: PPUSH
25924: LD_INT 0
25926: PPUSH
25927: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25931: LD_VAR 0 1
25935: PPUSH
25936: LD_OWVAR 3
25940: PUSH
25941: LD_VAR 0 1
25945: DIFF
25946: PPUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL_OW 74
25956: PPUSH
25957: CALL_OW 115
// wait ( 0 0$20 ) ;
25961: LD_INT 700
25963: PPUSH
25964: CALL_OW 67
// SetSide ( un , your_side ) ;
25968: LD_VAR 0 1
25972: PPUSH
25973: LD_OWVAR 2
25977: PPUSH
25978: CALL_OW 235
// end ;
25982: PPOPN 2
25984: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25985: LD_EXP 54
25989: PUSH
25990: LD_EXP 87
25994: AND
25995: IFFALSE 26101
25997: GO 25999
25999: DISABLE
26000: LD_INT 0
26002: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26003: LD_ADDR_VAR 0 1
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_OWVAR 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: LD_INT 30
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 30
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 69
26056: ST_TO_ADDR
// if not depot then
26057: LD_VAR 0 1
26061: NOT
26062: IFFALSE 26066
// exit ;
26064: GO 26101
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26066: LD_VAR 0 1
26070: PUSH
26071: LD_INT 1
26073: ARRAY
26074: PPUSH
26075: CALL_OW 250
26079: PPUSH
26080: LD_VAR 0 1
26084: PUSH
26085: LD_INT 1
26087: ARRAY
26088: PPUSH
26089: CALL_OW 251
26093: PPUSH
26094: LD_INT 70
26096: PPUSH
26097: CALL_OW 495
// end ;
26101: PPOPN 1
26103: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26104: LD_EXP 54
26108: PUSH
26109: LD_EXP 88
26113: AND
26114: IFFALSE 26325
26116: GO 26118
26118: DISABLE
26119: LD_INT 0
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26126: LD_ADDR_VAR 0 5
26130: PUSH
26131: LD_INT 22
26133: PUSH
26134: LD_OWVAR 2
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 21
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PPUSH
26157: CALL_OW 69
26161: ST_TO_ADDR
// if not tmp then
26162: LD_VAR 0 5
26166: NOT
26167: IFFALSE 26171
// exit ;
26169: GO 26325
// for i in tmp do
26171: LD_ADDR_VAR 0 1
26175: PUSH
26176: LD_VAR 0 5
26180: PUSH
26181: FOR_IN
26182: IFFALSE 26323
// begin d := rand ( 0 , 5 ) ;
26184: LD_ADDR_VAR 0 4
26188: PUSH
26189: LD_INT 0
26191: PPUSH
26192: LD_INT 5
26194: PPUSH
26195: CALL_OW 12
26199: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26200: LD_ADDR_VAR 0 2
26204: PUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: CALL_OW 250
26214: PPUSH
26215: LD_VAR 0 4
26219: PPUSH
26220: LD_INT 3
26222: PPUSH
26223: LD_INT 12
26225: PPUSH
26226: CALL_OW 12
26230: PPUSH
26231: CALL_OW 272
26235: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26236: LD_ADDR_VAR 0 3
26240: PUSH
26241: LD_VAR 0 1
26245: PPUSH
26246: CALL_OW 251
26250: PPUSH
26251: LD_VAR 0 4
26255: PPUSH
26256: LD_INT 3
26258: PPUSH
26259: LD_INT 12
26261: PPUSH
26262: CALL_OW 12
26266: PPUSH
26267: CALL_OW 273
26271: ST_TO_ADDR
// if ValidHex ( x , y ) then
26272: LD_VAR 0 2
26276: PPUSH
26277: LD_VAR 0 3
26281: PPUSH
26282: CALL_OW 488
26286: IFFALSE 26321
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_VAR 0 2
26297: PPUSH
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_INT 3
26305: PPUSH
26306: LD_INT 6
26308: PPUSH
26309: CALL_OW 12
26313: PPUSH
26314: LD_INT 1
26316: PPUSH
26317: CALL_OW 483
// end ;
26321: GO 26181
26323: POP
26324: POP
// end ;
26325: PPOPN 5
26327: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26328: LD_EXP 54
26332: PUSH
26333: LD_EXP 89
26337: AND
26338: IFFALSE 26432
26340: GO 26342
26342: DISABLE
26343: LD_INT 0
26345: PPUSH
26346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26347: LD_ADDR_VAR 0 2
26351: PUSH
26352: LD_INT 22
26354: PUSH
26355: LD_OWVAR 2
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 32
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 21
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: PPUSH
26389: CALL_OW 69
26393: ST_TO_ADDR
// if not tmp then
26394: LD_VAR 0 2
26398: NOT
26399: IFFALSE 26403
// exit ;
26401: GO 26432
// for i in tmp do
26403: LD_ADDR_VAR 0 1
26407: PUSH
26408: LD_VAR 0 2
26412: PUSH
26413: FOR_IN
26414: IFFALSE 26430
// SetFuel ( i , 0 ) ;
26416: LD_VAR 0 1
26420: PPUSH
26421: LD_INT 0
26423: PPUSH
26424: CALL_OW 240
26428: GO 26413
26430: POP
26431: POP
// end ;
26432: PPOPN 2
26434: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26435: LD_EXP 54
26439: PUSH
26440: LD_EXP 90
26444: AND
26445: IFFALSE 26511
26447: GO 26449
26449: DISABLE
26450: LD_INT 0
26452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26453: LD_ADDR_VAR 0 1
26457: PUSH
26458: LD_INT 22
26460: PUSH
26461: LD_OWVAR 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 30
26472: PUSH
26473: LD_INT 29
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: ST_TO_ADDR
// if not tmp then
26489: LD_VAR 0 1
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 26511
// DestroyUnit ( tmp [ 1 ] ) ;
26498: LD_VAR 0 1
26502: PUSH
26503: LD_INT 1
26505: ARRAY
26506: PPUSH
26507: CALL_OW 65
// end ;
26511: PPOPN 1
26513: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26514: LD_EXP 54
26518: PUSH
26519: LD_EXP 92
26523: AND
26524: IFFALSE 26653
26526: GO 26528
26528: DISABLE
26529: LD_INT 0
26531: PPUSH
// begin uc_side := 0 ;
26532: LD_ADDR_OWVAR 20
26536: PUSH
26537: LD_INT 0
26539: ST_TO_ADDR
// uc_nation := nation_arabian ;
26540: LD_ADDR_OWVAR 21
26544: PUSH
26545: LD_INT 2
26547: ST_TO_ADDR
// hc_gallery :=  ;
26548: LD_ADDR_OWVAR 33
26552: PUSH
26553: LD_STRING 
26555: ST_TO_ADDR
// hc_name :=  ;
26556: LD_ADDR_OWVAR 26
26560: PUSH
26561: LD_STRING 
26563: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26564: LD_INT 1
26566: PPUSH
26567: LD_INT 11
26569: PPUSH
26570: LD_INT 10
26572: PPUSH
26573: CALL_OW 380
// un := CreateHuman ;
26577: LD_ADDR_VAR 0 1
26581: PUSH
26582: CALL_OW 44
26586: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26587: LD_VAR 0 1
26591: PPUSH
26592: LD_INT 1
26594: PPUSH
26595: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26599: LD_INT 35
26601: PPUSH
26602: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26606: LD_VAR 0 1
26610: PPUSH
26611: LD_INT 22
26613: PUSH
26614: LD_OWVAR 2
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PPUSH
26623: CALL_OW 69
26627: PPUSH
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL_OW 74
26637: PPUSH
26638: CALL_OW 115
// until IsDead ( un ) ;
26642: LD_VAR 0 1
26646: PPUSH
26647: CALL_OW 301
26651: IFFALSE 26599
// end ;
26653: PPOPN 1
26655: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26656: LD_EXP 54
26660: PUSH
26661: LD_EXP 94
26665: AND
26666: IFFALSE 26678
26668: GO 26670
26670: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26671: LD_STRING earthquake(getX(game), 0, 32)
26673: PPUSH
26674: CALL_OW 559
26678: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26679: LD_EXP 54
26683: PUSH
26684: LD_EXP 95
26688: AND
26689: IFFALSE 26780
26691: GO 26693
26693: DISABLE
26694: LD_INT 0
26696: PPUSH
// begin enable ;
26697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26698: LD_ADDR_VAR 0 1
26702: PUSH
26703: LD_INT 22
26705: PUSH
26706: LD_OWVAR 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 21
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 33
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: PPUSH
26740: CALL_OW 69
26744: ST_TO_ADDR
// if not tmp then
26745: LD_VAR 0 1
26749: NOT
26750: IFFALSE 26754
// exit ;
26752: GO 26780
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26754: LD_VAR 0 1
26758: PUSH
26759: LD_INT 1
26761: PPUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 12
26771: ARRAY
26772: PPUSH
26773: LD_INT 1
26775: PPUSH
26776: CALL_OW 234
// end ;
26780: PPOPN 1
26782: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26783: LD_EXP 54
26787: PUSH
26788: LD_EXP 96
26792: AND
26793: IFFALSE 26934
26795: GO 26797
26797: DISABLE
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_INT 22
26810: PUSH
26811: LD_OWVAR 2
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 25
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PPUSH
26834: CALL_OW 69
26838: ST_TO_ADDR
// if not tmp then
26839: LD_VAR 0 3
26843: NOT
26844: IFFALSE 26848
// exit ;
26846: GO 26934
// un := tmp [ rand ( 1 , tmp ) ] ;
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: LD_VAR 0 3
26857: PUSH
26858: LD_INT 1
26860: PPUSH
26861: LD_VAR 0 3
26865: PPUSH
26866: CALL_OW 12
26870: ARRAY
26871: ST_TO_ADDR
// if Crawls ( un ) then
26872: LD_VAR 0 2
26876: PPUSH
26877: CALL_OW 318
26881: IFFALSE 26892
// ComWalk ( un ) ;
26883: LD_VAR 0 2
26887: PPUSH
26888: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26892: LD_VAR 0 2
26896: PPUSH
26897: LD_INT 9
26899: PPUSH
26900: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26904: LD_INT 28
26906: PPUSH
26907: LD_OWVAR 2
26911: PPUSH
26912: LD_INT 2
26914: PPUSH
26915: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26919: LD_INT 29
26921: PPUSH
26922: LD_OWVAR 2
26926: PPUSH
26927: LD_INT 2
26929: PPUSH
26930: CALL_OW 322
// end ;
26934: PPOPN 3
26936: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26937: LD_EXP 54
26941: PUSH
26942: LD_EXP 97
26946: AND
26947: IFFALSE 27058
26949: GO 26951
26951: DISABLE
26952: LD_INT 0
26954: PPUSH
26955: PPUSH
26956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26957: LD_ADDR_VAR 0 3
26961: PUSH
26962: LD_INT 22
26964: PUSH
26965: LD_OWVAR 2
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 25
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 69
26992: ST_TO_ADDR
// if not tmp then
26993: LD_VAR 0 3
26997: NOT
26998: IFFALSE 27002
// exit ;
27000: GO 27058
// un := tmp [ rand ( 1 , tmp ) ] ;
27002: LD_ADDR_VAR 0 2
27006: PUSH
27007: LD_VAR 0 3
27011: PUSH
27012: LD_INT 1
27014: PPUSH
27015: LD_VAR 0 3
27019: PPUSH
27020: CALL_OW 12
27024: ARRAY
27025: ST_TO_ADDR
// if Crawls ( un ) then
27026: LD_VAR 0 2
27030: PPUSH
27031: CALL_OW 318
27035: IFFALSE 27046
// ComWalk ( un ) ;
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27046: LD_VAR 0 2
27050: PPUSH
27051: LD_INT 8
27053: PPUSH
27054: CALL_OW 336
// end ;
27058: PPOPN 3
27060: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27061: LD_EXP 54
27065: PUSH
27066: LD_EXP 98
27070: AND
27071: IFFALSE 27215
27073: GO 27075
27075: DISABLE
27076: LD_INT 0
27078: PPUSH
27079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27080: LD_ADDR_VAR 0 2
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_OWVAR 2
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 21
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: LD_INT 34
27112: PUSH
27113: LD_INT 12
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 34
27122: PUSH
27123: LD_INT 51
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 34
27132: PUSH
27133: LD_INT 32
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: PPUSH
27151: CALL_OW 69
27155: ST_TO_ADDR
// if not tmp then
27156: LD_VAR 0 2
27160: NOT
27161: IFFALSE 27165
// exit ;
27163: GO 27215
// for i in tmp do
27165: LD_ADDR_VAR 0 1
27169: PUSH
27170: LD_VAR 0 2
27174: PUSH
27175: FOR_IN
27176: IFFALSE 27213
// if GetCargo ( i , mat_artifact ) = 0 then
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_INT 4
27185: PPUSH
27186: CALL_OW 289
27190: PUSH
27191: LD_INT 0
27193: EQUAL
27194: IFFALSE 27211
// SetCargo ( i , mat_siberit , 100 ) ;
27196: LD_VAR 0 1
27200: PPUSH
27201: LD_INT 3
27203: PPUSH
27204: LD_INT 100
27206: PPUSH
27207: CALL_OW 290
27211: GO 27175
27213: POP
27214: POP
// end ;
27215: PPOPN 2
27217: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27218: LD_EXP 54
27222: PUSH
27223: LD_EXP 99
27227: AND
27228: IFFALSE 27411
27230: GO 27232
27232: DISABLE
27233: LD_INT 0
27235: PPUSH
27236: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27237: LD_ADDR_VAR 0 2
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_OWVAR 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 2
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27411
// for i := 1 to 2 do
27268: LD_ADDR_VAR 0 1
27272: PUSH
27273: DOUBLE
27274: LD_INT 1
27276: DEC
27277: ST_TO_ADDR
27278: LD_INT 2
27280: PUSH
27281: FOR_TO
27282: IFFALSE 27409
// begin uc_side := your_side ;
27284: LD_ADDR_OWVAR 20
27288: PUSH
27289: LD_OWVAR 2
27293: ST_TO_ADDR
// uc_nation := nation_american ;
27294: LD_ADDR_OWVAR 21
27298: PUSH
27299: LD_INT 1
27301: ST_TO_ADDR
// vc_chassis := us_morphling ;
27302: LD_ADDR_OWVAR 37
27306: PUSH
27307: LD_INT 5
27309: ST_TO_ADDR
// vc_engine := engine_siberite ;
27310: LD_ADDR_OWVAR 39
27314: PUSH
27315: LD_INT 3
27317: ST_TO_ADDR
// vc_control := control_computer ;
27318: LD_ADDR_OWVAR 38
27322: PUSH
27323: LD_INT 3
27325: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27326: LD_ADDR_OWVAR 40
27330: PUSH
27331: LD_INT 10
27333: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27334: LD_VAR 0 2
27338: PUSH
27339: LD_INT 1
27341: ARRAY
27342: PPUSH
27343: CALL_OW 310
27347: NOT
27348: IFFALSE 27395
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27350: CALL_OW 45
27354: PPUSH
27355: LD_VAR 0 2
27359: PUSH
27360: LD_INT 1
27362: ARRAY
27363: PPUSH
27364: CALL_OW 250
27368: PPUSH
27369: LD_VAR 0 2
27373: PUSH
27374: LD_INT 1
27376: ARRAY
27377: PPUSH
27378: CALL_OW 251
27382: PPUSH
27383: LD_INT 12
27385: PPUSH
27386: LD_INT 1
27388: PPUSH
27389: CALL_OW 50
27393: GO 27407
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27395: CALL_OW 45
27399: PPUSH
27400: LD_INT 1
27402: PPUSH
27403: CALL_OW 51
// end ;
27407: GO 27281
27409: POP
27410: POP
// end ;
27411: PPOPN 2
27413: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27414: LD_EXP 54
27418: PUSH
27419: LD_EXP 100
27423: AND
27424: IFFALSE 27646
27426: GO 27428
27428: DISABLE
27429: LD_INT 0
27431: PPUSH
27432: PPUSH
27433: PPUSH
27434: PPUSH
27435: PPUSH
27436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27437: LD_ADDR_VAR 0 6
27441: PUSH
27442: LD_INT 22
27444: PUSH
27445: LD_OWVAR 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: LD_INT 23
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 69
27490: ST_TO_ADDR
// if not tmp then
27491: LD_VAR 0 6
27495: NOT
27496: IFFALSE 27500
// exit ;
27498: GO 27646
// s1 := rand ( 1 , 4 ) ;
27500: LD_ADDR_VAR 0 2
27504: PUSH
27505: LD_INT 1
27507: PPUSH
27508: LD_INT 4
27510: PPUSH
27511: CALL_OW 12
27515: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27516: LD_ADDR_VAR 0 4
27520: PUSH
27521: LD_VAR 0 6
27525: PUSH
27526: LD_INT 1
27528: ARRAY
27529: PPUSH
27530: LD_VAR 0 2
27534: PPUSH
27535: CALL_OW 259
27539: ST_TO_ADDR
// if s1 = 1 then
27540: LD_VAR 0 2
27544: PUSH
27545: LD_INT 1
27547: EQUAL
27548: IFFALSE 27568
// s2 := rand ( 2 , 4 ) else
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 2
27557: PPUSH
27558: LD_INT 4
27560: PPUSH
27561: CALL_OW 12
27565: ST_TO_ADDR
27566: GO 27576
// s2 := 1 ;
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: LD_INT 1
27575: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27576: LD_ADDR_VAR 0 5
27580: PUSH
27581: LD_VAR 0 6
27585: PUSH
27586: LD_INT 1
27588: ARRAY
27589: PPUSH
27590: LD_VAR 0 3
27594: PPUSH
27595: CALL_OW 259
27599: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27600: LD_VAR 0 6
27604: PUSH
27605: LD_INT 1
27607: ARRAY
27608: PPUSH
27609: LD_VAR 0 2
27613: PPUSH
27614: LD_VAR 0 5
27618: PPUSH
27619: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27623: LD_VAR 0 6
27627: PUSH
27628: LD_INT 1
27630: ARRAY
27631: PPUSH
27632: LD_VAR 0 3
27636: PPUSH
27637: LD_VAR 0 4
27641: PPUSH
27642: CALL_OW 237
// end ;
27646: PPOPN 6
27648: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27649: LD_EXP 54
27653: PUSH
27654: LD_EXP 101
27658: AND
27659: IFFALSE 27738
27661: GO 27663
27663: DISABLE
27664: LD_INT 0
27666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27667: LD_ADDR_VAR 0 1
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_OWVAR 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 30
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: ST_TO_ADDR
// if not tmp then
27703: LD_VAR 0 1
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 27738
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27712: LD_VAR 0 1
27716: PUSH
27717: LD_INT 1
27719: PPUSH
27720: LD_VAR 0 1
27724: PPUSH
27725: CALL_OW 12
27729: ARRAY
27730: PPUSH
27731: LD_INT 1
27733: PPUSH
27734: CALL_OW 234
// end ;
27738: PPOPN 1
27740: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27741: LD_EXP 54
27745: PUSH
27746: LD_EXP 102
27750: AND
27751: IFFALSE 27863
27753: GO 27755
27755: DISABLE
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27760: LD_ADDR_VAR 0 2
27764: PUSH
27765: LD_INT 22
27767: PUSH
27768: LD_OWVAR 2
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: LD_INT 30
27782: PUSH
27783: LD_INT 27
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 30
27792: PUSH
27793: LD_INT 26
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 30
27802: PUSH
27803: LD_INT 28
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: ST_TO_ADDR
// if not tmp then
27825: LD_VAR 0 2
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27863
// for i in tmp do
27834: LD_ADDR_VAR 0 1
27838: PUSH
27839: LD_VAR 0 2
27843: PUSH
27844: FOR_IN
27845: IFFALSE 27861
// SetLives ( i , 1 ) ;
27847: LD_VAR 0 1
27851: PPUSH
27852: LD_INT 1
27854: PPUSH
27855: CALL_OW 234
27859: GO 27844
27861: POP
27862: POP
// end ;
27863: PPOPN 2
27865: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27866: LD_EXP 54
27870: PUSH
27871: LD_EXP 103
27875: AND
27876: IFFALSE 28163
27878: GO 27880
27880: DISABLE
27881: LD_INT 0
27883: PPUSH
27884: PPUSH
27885: PPUSH
// begin i := rand ( 1 , 7 ) ;
27886: LD_ADDR_VAR 0 1
27890: PUSH
27891: LD_INT 1
27893: PPUSH
27894: LD_INT 7
27896: PPUSH
27897: CALL_OW 12
27901: ST_TO_ADDR
// case i of 1 :
27902: LD_VAR 0 1
27906: PUSH
27907: LD_INT 1
27909: DOUBLE
27910: EQUAL
27911: IFTRUE 27915
27913: GO 27925
27915: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27916: LD_STRING earthquake(getX(game), 0, 32)
27918: PPUSH
27919: CALL_OW 559
27923: GO 28163
27925: LD_INT 2
27927: DOUBLE
27928: EQUAL
27929: IFTRUE 27933
27931: GO 27947
27933: POP
// begin ToLua ( displayStucuk(); ) ;
27934: LD_STRING displayStucuk();
27936: PPUSH
27937: CALL_OW 559
// ResetFog ;
27941: CALL_OW 335
// end ; 3 :
27945: GO 28163
27947: LD_INT 3
27949: DOUBLE
27950: EQUAL
27951: IFTRUE 27955
27953: GO 28059
27955: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_INT 22
27963: PUSH
27964: LD_OWVAR 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 25
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PPUSH
27987: CALL_OW 69
27991: ST_TO_ADDR
// if not tmp then
27992: LD_VAR 0 2
27996: NOT
27997: IFFALSE 28001
// exit ;
27999: GO 28163
// un := tmp [ rand ( 1 , tmp ) ] ;
28001: LD_ADDR_VAR 0 3
28005: PUSH
28006: LD_VAR 0 2
28010: PUSH
28011: LD_INT 1
28013: PPUSH
28014: LD_VAR 0 2
28018: PPUSH
28019: CALL_OW 12
28023: ARRAY
28024: ST_TO_ADDR
// if Crawls ( un ) then
28025: LD_VAR 0 3
28029: PPUSH
28030: CALL_OW 318
28034: IFFALSE 28045
// ComWalk ( un ) ;
28036: LD_VAR 0 3
28040: PPUSH
28041: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28045: LD_VAR 0 3
28049: PPUSH
28050: LD_INT 8
28052: PPUSH
28053: CALL_OW 336
// end ; 4 :
28057: GO 28163
28059: LD_INT 4
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28141
28067: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28068: LD_ADDR_VAR 0 2
28072: PUSH
28073: LD_INT 22
28075: PUSH
28076: LD_OWVAR 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 30
28087: PUSH
28088: LD_INT 29
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 69
28103: ST_TO_ADDR
// if not tmp then
28104: LD_VAR 0 2
28108: NOT
28109: IFFALSE 28113
// exit ;
28111: GO 28163
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28113: LD_VAR 0 2
28117: PUSH
28118: LD_INT 1
28120: ARRAY
28121: PPUSH
28122: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28126: LD_VAR 0 2
28130: PUSH
28131: LD_INT 1
28133: ARRAY
28134: PPUSH
28135: CALL_OW 65
// end ; 5 .. 7 :
28139: GO 28163
28141: LD_INT 5
28143: DOUBLE
28144: GREATEREQUAL
28145: IFFALSE 28153
28147: LD_INT 7
28149: DOUBLE
28150: LESSEQUAL
28151: IFTRUE 28155
28153: GO 28162
28155: POP
// StreamSibBomb ; end ;
28156: CALL 24400 0 0
28160: GO 28163
28162: POP
// end ;
28163: PPOPN 3
28165: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28166: LD_EXP 54
28170: PUSH
28171: LD_EXP 104
28175: AND
28176: IFFALSE 28332
28178: GO 28180
28180: DISABLE
28181: LD_INT 0
28183: PPUSH
28184: PPUSH
28185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28186: LD_ADDR_VAR 0 2
28190: PUSH
28191: LD_INT 81
28193: PUSH
28194: LD_OWVAR 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: LD_INT 21
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 21
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: ST_TO_ADDR
// if not tmp then
28240: LD_VAR 0 2
28244: NOT
28245: IFFALSE 28249
// exit ;
28247: GO 28332
// p := 0 ;
28249: LD_ADDR_VAR 0 3
28253: PUSH
28254: LD_INT 0
28256: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28257: LD_INT 35
28259: PPUSH
28260: CALL_OW 67
// p := p + 1 ;
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: LD_VAR 0 3
28273: PUSH
28274: LD_INT 1
28276: PLUS
28277: ST_TO_ADDR
// for i in tmp do
28278: LD_ADDR_VAR 0 1
28282: PUSH
28283: LD_VAR 0 2
28287: PUSH
28288: FOR_IN
28289: IFFALSE 28320
// if GetLives ( i ) < 1000 then
28291: LD_VAR 0 1
28295: PPUSH
28296: CALL_OW 256
28300: PUSH
28301: LD_INT 1000
28303: LESS
28304: IFFALSE 28318
// SetLives ( i , 1000 ) ;
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_INT 1000
28313: PPUSH
28314: CALL_OW 234
28318: GO 28288
28320: POP
28321: POP
// until p > 20 ;
28322: LD_VAR 0 3
28326: PUSH
28327: LD_INT 20
28329: GREATER
28330: IFFALSE 28257
// end ;
28332: PPOPN 3
28334: END
// every 0 0$1 trigger StreamModeActive and sTime do
28335: LD_EXP 54
28339: PUSH
28340: LD_EXP 105
28344: AND
28345: IFFALSE 28380
28347: GO 28349
28349: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28350: LD_INT 28
28352: PPUSH
28353: LD_OWVAR 2
28357: PPUSH
28358: LD_INT 2
28360: PPUSH
28361: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28365: LD_INT 30
28367: PPUSH
28368: LD_OWVAR 2
28372: PPUSH
28373: LD_INT 2
28375: PPUSH
28376: CALL_OW 322
// end ;
28380: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28381: LD_EXP 54
28385: PUSH
28386: LD_EXP 106
28390: AND
28391: IFFALSE 28512
28393: GO 28395
28395: DISABLE
28396: LD_INT 0
28398: PPUSH
28399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28400: LD_ADDR_VAR 0 2
28404: PUSH
28405: LD_INT 22
28407: PUSH
28408: LD_OWVAR 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 21
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: LD_INT 23
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: ST_TO_ADDR
// if not tmp then
28454: LD_VAR 0 2
28458: NOT
28459: IFFALSE 28463
// exit ;
28461: GO 28512
// for i in tmp do
28463: LD_ADDR_VAR 0 1
28467: PUSH
28468: LD_VAR 0 2
28472: PUSH
28473: FOR_IN
28474: IFFALSE 28510
// begin if Crawls ( i ) then
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 318
28485: IFFALSE 28496
// ComWalk ( i ) ;
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 138
// SetClass ( i , 2 ) ;
28496: LD_VAR 0 1
28500: PPUSH
28501: LD_INT 2
28503: PPUSH
28504: CALL_OW 336
// end ;
28508: GO 28473
28510: POP
28511: POP
// end ;
28512: PPOPN 2
28514: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28515: LD_EXP 54
28519: PUSH
28520: LD_EXP 107
28524: AND
28525: IFFALSE 28813
28527: GO 28529
28529: DISABLE
28530: LD_INT 0
28532: PPUSH
28533: PPUSH
28534: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28535: LD_OWVAR 2
28539: PPUSH
28540: LD_INT 9
28542: PPUSH
28543: LD_INT 1
28545: PPUSH
28546: LD_INT 1
28548: PPUSH
28549: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28553: LD_INT 9
28555: PPUSH
28556: LD_OWVAR 2
28560: PPUSH
28561: CALL_OW 343
// uc_side := 9 ;
28565: LD_ADDR_OWVAR 20
28569: PUSH
28570: LD_INT 9
28572: ST_TO_ADDR
// uc_nation := 2 ;
28573: LD_ADDR_OWVAR 21
28577: PUSH
28578: LD_INT 2
28580: ST_TO_ADDR
// hc_name := Dark Warrior ;
28581: LD_ADDR_OWVAR 26
28585: PUSH
28586: LD_STRING Dark Warrior
28588: ST_TO_ADDR
// hc_gallery :=  ;
28589: LD_ADDR_OWVAR 33
28593: PUSH
28594: LD_STRING 
28596: ST_TO_ADDR
// hc_noskilllimit := true ;
28597: LD_ADDR_OWVAR 76
28601: PUSH
28602: LD_INT 1
28604: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28605: LD_ADDR_OWVAR 31
28609: PUSH
28610: LD_INT 30
28612: PUSH
28613: LD_INT 30
28615: PUSH
28616: LD_INT 30
28618: PUSH
28619: LD_INT 30
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: ST_TO_ADDR
// un := CreateHuman ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: CALL_OW 44
28637: ST_TO_ADDR
// hc_noskilllimit := false ;
28638: LD_ADDR_OWVAR 76
28642: PUSH
28643: LD_INT 0
28645: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28646: LD_VAR 0 3
28650: PPUSH
28651: LD_INT 1
28653: PPUSH
28654: CALL_OW 51
// ToLua ( playRanger() ) ;
28658: LD_STRING playRanger()
28660: PPUSH
28661: CALL_OW 559
// p := 0 ;
28665: LD_ADDR_VAR 0 2
28669: PUSH
28670: LD_INT 0
28672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28673: LD_INT 35
28675: PPUSH
28676: CALL_OW 67
// p := p + 1 ;
28680: LD_ADDR_VAR 0 2
28684: PUSH
28685: LD_VAR 0 2
28689: PUSH
28690: LD_INT 1
28692: PLUS
28693: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28694: LD_VAR 0 3
28698: PPUSH
28699: CALL_OW 256
28703: PUSH
28704: LD_INT 1000
28706: LESS
28707: IFFALSE 28721
// SetLives ( un , 1000 ) ;
28709: LD_VAR 0 3
28713: PPUSH
28714: LD_INT 1000
28716: PPUSH
28717: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28721: LD_VAR 0 3
28725: PPUSH
28726: LD_INT 81
28728: PUSH
28729: LD_OWVAR 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 91
28740: PUSH
28741: LD_VAR 0 3
28745: PUSH
28746: LD_INT 30
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 69
28762: PPUSH
28763: LD_VAR 0 3
28767: PPUSH
28768: CALL_OW 74
28772: PPUSH
28773: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28777: LD_VAR 0 2
28781: PUSH
28782: LD_INT 80
28784: GREATER
28785: PUSH
28786: LD_VAR 0 3
28790: PPUSH
28791: CALL_OW 301
28795: OR
28796: IFFALSE 28673
// if un then
28798: LD_VAR 0 3
28802: IFFALSE 28813
// RemoveUnit ( un ) ;
28804: LD_VAR 0 3
28808: PPUSH
28809: CALL_OW 64
// end ;
28813: PPOPN 3
28815: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28816: LD_EXP 108
28820: IFFALSE 28936
28822: GO 28824
28824: DISABLE
28825: LD_INT 0
28827: PPUSH
28828: PPUSH
28829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28830: LD_ADDR_VAR 0 2
28834: PUSH
28835: LD_INT 81
28837: PUSH
28838: LD_OWVAR 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 21
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PPUSH
28861: CALL_OW 69
28865: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28866: LD_STRING playComputer()
28868: PPUSH
28869: CALL_OW 559
// if not tmp then
28873: LD_VAR 0 2
28877: NOT
28878: IFFALSE 28882
// exit ;
28880: GO 28936
// for i in tmp do
28882: LD_ADDR_VAR 0 1
28886: PUSH
28887: LD_VAR 0 2
28891: PUSH
28892: FOR_IN
28893: IFFALSE 28934
// for j := 1 to 4 do
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: DOUBLE
28901: LD_INT 1
28903: DEC
28904: ST_TO_ADDR
28905: LD_INT 4
28907: PUSH
28908: FOR_TO
28909: IFFALSE 28930
// SetSkill ( i , j , 10 ) ;
28911: LD_VAR 0 1
28915: PPUSH
28916: LD_VAR 0 3
28920: PPUSH
28921: LD_INT 10
28923: PPUSH
28924: CALL_OW 237
28928: GO 28908
28930: POP
28931: POP
28932: GO 28892
28934: POP
28935: POP
// end ;
28936: PPOPN 3
28938: END
// every 0 0$1 trigger s30 do var i , tmp ;
28939: LD_EXP 109
28943: IFFALSE 29012
28945: GO 28947
28947: DISABLE
28948: LD_INT 0
28950: PPUSH
28951: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28952: LD_ADDR_VAR 0 2
28956: PUSH
28957: LD_INT 22
28959: PUSH
28960: LD_OWVAR 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: ST_TO_ADDR
// if not tmp then
28974: LD_VAR 0 2
28978: NOT
28979: IFFALSE 28983
// exit ;
28981: GO 29012
// for i in tmp do
28983: LD_ADDR_VAR 0 1
28987: PUSH
28988: LD_VAR 0 2
28992: PUSH
28993: FOR_IN
28994: IFFALSE 29010
// SetLives ( i , 300 ) ;
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_INT 300
29003: PPUSH
29004: CALL_OW 234
29008: GO 28993
29010: POP
29011: POP
// end ;
29012: PPOPN 2
29014: END
// every 0 0$1 trigger s60 do var i , tmp ;
29015: LD_EXP 110
29019: IFFALSE 29088
29021: GO 29023
29023: DISABLE
29024: LD_INT 0
29026: PPUSH
29027: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: LD_INT 22
29035: PUSH
29036: LD_OWVAR 2
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PPUSH
29045: CALL_OW 69
29049: ST_TO_ADDR
// if not tmp then
29050: LD_VAR 0 2
29054: NOT
29055: IFFALSE 29059
// exit ;
29057: GO 29088
// for i in tmp do
29059: LD_ADDR_VAR 0 1
29063: PUSH
29064: LD_VAR 0 2
29068: PUSH
29069: FOR_IN
29070: IFFALSE 29086
// SetLives ( i , 600 ) ;
29072: LD_VAR 0 1
29076: PPUSH
29077: LD_INT 600
29079: PPUSH
29080: CALL_OW 234
29084: GO 29069
29086: POP
29087: POP
// end ;
29088: PPOPN 2
29090: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29091: LD_INT 0
29093: PPUSH
// case cmd of 301 :
29094: LD_VAR 0 1
29098: PUSH
29099: LD_INT 301
29101: DOUBLE
29102: EQUAL
29103: IFTRUE 29107
29105: GO 29139
29107: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29108: LD_VAR 0 6
29112: PPUSH
29113: LD_VAR 0 7
29117: PPUSH
29118: LD_VAR 0 8
29122: PPUSH
29123: LD_VAR 0 4
29127: PPUSH
29128: LD_VAR 0 5
29132: PPUSH
29133: CALL 30340 0 5
29137: GO 29260
29139: LD_INT 302
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29184
29147: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29148: LD_VAR 0 6
29152: PPUSH
29153: LD_VAR 0 7
29157: PPUSH
29158: LD_VAR 0 8
29162: PPUSH
29163: LD_VAR 0 9
29167: PPUSH
29168: LD_VAR 0 4
29172: PPUSH
29173: LD_VAR 0 5
29177: PPUSH
29178: CALL 30431 0 6
29182: GO 29260
29184: LD_INT 303
29186: DOUBLE
29187: EQUAL
29188: IFTRUE 29192
29190: GO 29229
29192: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29193: LD_VAR 0 6
29197: PPUSH
29198: LD_VAR 0 7
29202: PPUSH
29203: LD_VAR 0 8
29207: PPUSH
29208: LD_VAR 0 9
29212: PPUSH
29213: LD_VAR 0 4
29217: PPUSH
29218: LD_VAR 0 5
29222: PPUSH
29223: CALL 29265 0 6
29227: GO 29260
29229: LD_INT 304
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29259
29237: POP
// hHackTeleport ( unit , x , y ) ; end ;
29238: LD_VAR 0 2
29242: PPUSH
29243: LD_VAR 0 4
29247: PPUSH
29248: LD_VAR 0 5
29252: PPUSH
29253: CALL 31024 0 3
29257: GO 29260
29259: POP
// end ;
29260: LD_VAR 0 12
29264: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29265: LD_INT 0
29267: PPUSH
29268: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29269: LD_VAR 0 1
29273: PUSH
29274: LD_INT 1
29276: LESS
29277: PUSH
29278: LD_VAR 0 1
29282: PUSH
29283: LD_INT 3
29285: GREATER
29286: OR
29287: PUSH
29288: LD_VAR 0 5
29292: PPUSH
29293: LD_VAR 0 6
29297: PPUSH
29298: CALL_OW 428
29302: OR
29303: IFFALSE 29307
// exit ;
29305: GO 30027
// uc_side := your_side ;
29307: LD_ADDR_OWVAR 20
29311: PUSH
29312: LD_OWVAR 2
29316: ST_TO_ADDR
// uc_nation := nation ;
29317: LD_ADDR_OWVAR 21
29321: PUSH
29322: LD_VAR 0 1
29326: ST_TO_ADDR
// bc_level = 1 ;
29327: LD_ADDR_OWVAR 43
29331: PUSH
29332: LD_INT 1
29334: ST_TO_ADDR
// case btype of 1 :
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 1
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29359
29348: POP
// bc_type := b_depot ; 2 :
29349: LD_ADDR_OWVAR 42
29353: PUSH
29354: LD_INT 0
29356: ST_TO_ADDR
29357: GO 29971
29359: LD_INT 2
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29378
29367: POP
// bc_type := b_warehouse ; 3 :
29368: LD_ADDR_OWVAR 42
29372: PUSH
29373: LD_INT 1
29375: ST_TO_ADDR
29376: GO 29971
29378: LD_INT 3
29380: DOUBLE
29381: EQUAL
29382: IFTRUE 29386
29384: GO 29397
29386: POP
// bc_type := b_lab ; 4 .. 9 :
29387: LD_ADDR_OWVAR 42
29391: PUSH
29392: LD_INT 6
29394: ST_TO_ADDR
29395: GO 29971
29397: LD_INT 4
29399: DOUBLE
29400: GREATEREQUAL
29401: IFFALSE 29409
29403: LD_INT 9
29405: DOUBLE
29406: LESSEQUAL
29407: IFTRUE 29411
29409: GO 29463
29411: POP
// begin bc_type := b_lab_half ;
29412: LD_ADDR_OWVAR 42
29416: PUSH
29417: LD_INT 7
29419: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29420: LD_ADDR_OWVAR 44
29424: PUSH
29425: LD_INT 10
29427: PUSH
29428: LD_INT 11
29430: PUSH
29431: LD_INT 12
29433: PUSH
29434: LD_INT 15
29436: PUSH
29437: LD_INT 14
29439: PUSH
29440: LD_INT 13
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: PUSH
29451: LD_VAR 0 2
29455: PUSH
29456: LD_INT 3
29458: MINUS
29459: ARRAY
29460: ST_TO_ADDR
// end ; 10 .. 13 :
29461: GO 29971
29463: LD_INT 10
29465: DOUBLE
29466: GREATEREQUAL
29467: IFFALSE 29475
29469: LD_INT 13
29471: DOUBLE
29472: LESSEQUAL
29473: IFTRUE 29477
29475: GO 29554
29477: POP
// begin bc_type := b_lab_full ;
29478: LD_ADDR_OWVAR 42
29482: PUSH
29483: LD_INT 8
29485: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29486: LD_ADDR_OWVAR 44
29490: PUSH
29491: LD_INT 10
29493: PUSH
29494: LD_INT 12
29496: PUSH
29497: LD_INT 14
29499: PUSH
29500: LD_INT 13
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: LD_INT 9
29516: MINUS
29517: ARRAY
29518: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29519: LD_ADDR_OWVAR 45
29523: PUSH
29524: LD_INT 11
29526: PUSH
29527: LD_INT 15
29529: PUSH
29530: LD_INT 12
29532: PUSH
29533: LD_INT 15
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: PUSH
29542: LD_VAR 0 2
29546: PUSH
29547: LD_INT 9
29549: MINUS
29550: ARRAY
29551: ST_TO_ADDR
// end ; 14 :
29552: GO 29971
29554: LD_INT 14
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29562
29560: GO 29573
29562: POP
// bc_type := b_workshop ; 15 :
29563: LD_ADDR_OWVAR 42
29567: PUSH
29568: LD_INT 2
29570: ST_TO_ADDR
29571: GO 29971
29573: LD_INT 15
29575: DOUBLE
29576: EQUAL
29577: IFTRUE 29581
29579: GO 29592
29581: POP
// bc_type := b_factory ; 16 :
29582: LD_ADDR_OWVAR 42
29586: PUSH
29587: LD_INT 3
29589: ST_TO_ADDR
29590: GO 29971
29592: LD_INT 16
29594: DOUBLE
29595: EQUAL
29596: IFTRUE 29600
29598: GO 29611
29600: POP
// bc_type := b_ext_gun ; 17 :
29601: LD_ADDR_OWVAR 42
29605: PUSH
29606: LD_INT 17
29608: ST_TO_ADDR
29609: GO 29971
29611: LD_INT 17
29613: DOUBLE
29614: EQUAL
29615: IFTRUE 29619
29617: GO 29647
29619: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29620: LD_ADDR_OWVAR 42
29624: PUSH
29625: LD_INT 19
29627: PUSH
29628: LD_INT 23
29630: PUSH
29631: LD_INT 19
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: PUSH
29639: LD_VAR 0 1
29643: ARRAY
29644: ST_TO_ADDR
29645: GO 29971
29647: LD_INT 18
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29666
29655: POP
// bc_type := b_ext_radar ; 19 :
29656: LD_ADDR_OWVAR 42
29660: PUSH
29661: LD_INT 20
29663: ST_TO_ADDR
29664: GO 29971
29666: LD_INT 19
29668: DOUBLE
29669: EQUAL
29670: IFTRUE 29674
29672: GO 29685
29674: POP
// bc_type := b_ext_radio ; 20 :
29675: LD_ADDR_OWVAR 42
29679: PUSH
29680: LD_INT 22
29682: ST_TO_ADDR
29683: GO 29971
29685: LD_INT 20
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29704
29693: POP
// bc_type := b_ext_siberium ; 21 :
29694: LD_ADDR_OWVAR 42
29698: PUSH
29699: LD_INT 21
29701: ST_TO_ADDR
29702: GO 29971
29704: LD_INT 21
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29723
29712: POP
// bc_type := b_ext_computer ; 22 :
29713: LD_ADDR_OWVAR 42
29717: PUSH
29718: LD_INT 24
29720: ST_TO_ADDR
29721: GO 29971
29723: LD_INT 22
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29731
29729: GO 29742
29731: POP
// bc_type := b_ext_track ; 23 :
29732: LD_ADDR_OWVAR 42
29736: PUSH
29737: LD_INT 16
29739: ST_TO_ADDR
29740: GO 29971
29742: LD_INT 23
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29761
29750: POP
// bc_type := b_ext_laser ; 24 :
29751: LD_ADDR_OWVAR 42
29755: PUSH
29756: LD_INT 25
29758: ST_TO_ADDR
29759: GO 29971
29761: LD_INT 24
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29780
29769: POP
// bc_type := b_control_tower ; 25 :
29770: LD_ADDR_OWVAR 42
29774: PUSH
29775: LD_INT 36
29777: ST_TO_ADDR
29778: GO 29971
29780: LD_INT 25
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29799
29788: POP
// bc_type := b_breastwork ; 26 :
29789: LD_ADDR_OWVAR 42
29793: PUSH
29794: LD_INT 31
29796: ST_TO_ADDR
29797: GO 29971
29799: LD_INT 26
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29818
29807: POP
// bc_type := b_bunker ; 27 :
29808: LD_ADDR_OWVAR 42
29812: PUSH
29813: LD_INT 32
29815: ST_TO_ADDR
29816: GO 29971
29818: LD_INT 27
29820: DOUBLE
29821: EQUAL
29822: IFTRUE 29826
29824: GO 29837
29826: POP
// bc_type := b_turret ; 28 :
29827: LD_ADDR_OWVAR 42
29831: PUSH
29832: LD_INT 33
29834: ST_TO_ADDR
29835: GO 29971
29837: LD_INT 28
29839: DOUBLE
29840: EQUAL
29841: IFTRUE 29845
29843: GO 29856
29845: POP
// bc_type := b_armoury ; 29 :
29846: LD_ADDR_OWVAR 42
29850: PUSH
29851: LD_INT 4
29853: ST_TO_ADDR
29854: GO 29971
29856: LD_INT 29
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29864
29862: GO 29875
29864: POP
// bc_type := b_barracks ; 30 :
29865: LD_ADDR_OWVAR 42
29869: PUSH
29870: LD_INT 5
29872: ST_TO_ADDR
29873: GO 29971
29875: LD_INT 30
29877: DOUBLE
29878: EQUAL
29879: IFTRUE 29883
29881: GO 29894
29883: POP
// bc_type := b_solar_power ; 31 :
29884: LD_ADDR_OWVAR 42
29888: PUSH
29889: LD_INT 27
29891: ST_TO_ADDR
29892: GO 29971
29894: LD_INT 31
29896: DOUBLE
29897: EQUAL
29898: IFTRUE 29902
29900: GO 29913
29902: POP
// bc_type := b_oil_power ; 32 :
29903: LD_ADDR_OWVAR 42
29907: PUSH
29908: LD_INT 26
29910: ST_TO_ADDR
29911: GO 29971
29913: LD_INT 32
29915: DOUBLE
29916: EQUAL
29917: IFTRUE 29921
29919: GO 29932
29921: POP
// bc_type := b_siberite_power ; 33 :
29922: LD_ADDR_OWVAR 42
29926: PUSH
29927: LD_INT 28
29929: ST_TO_ADDR
29930: GO 29971
29932: LD_INT 33
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 29951
29940: POP
// bc_type := b_oil_mine ; 34 :
29941: LD_ADDR_OWVAR 42
29945: PUSH
29946: LD_INT 29
29948: ST_TO_ADDR
29949: GO 29971
29951: LD_INT 34
29953: DOUBLE
29954: EQUAL
29955: IFTRUE 29959
29957: GO 29970
29959: POP
// bc_type := b_siberite_mine ; end ;
29960: LD_ADDR_OWVAR 42
29964: PUSH
29965: LD_INT 30
29967: ST_TO_ADDR
29968: GO 29971
29970: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29971: LD_ADDR_VAR 0 8
29975: PUSH
29976: LD_VAR 0 5
29980: PPUSH
29981: LD_VAR 0 6
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 47
29995: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29996: LD_OWVAR 42
30000: PUSH
30001: LD_INT 32
30003: PUSH
30004: LD_INT 33
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: IN
30011: IFFALSE 30027
// PlaceWeaponTurret ( b , weapon ) ;
30013: LD_VAR 0 8
30017: PPUSH
30018: LD_VAR 0 4
30022: PPUSH
30023: CALL_OW 431
// end ;
30027: LD_VAR 0 7
30031: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30032: LD_INT 0
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30038: LD_ADDR_VAR 0 4
30042: PUSH
30043: LD_INT 22
30045: PUSH
30046: LD_OWVAR 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 30
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 30
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PPUSH
30087: CALL_OW 69
30091: ST_TO_ADDR
// if not tmp then
30092: LD_VAR 0 4
30096: NOT
30097: IFFALSE 30101
// exit ;
30099: GO 30160
// for i in tmp do
30101: LD_ADDR_VAR 0 2
30105: PUSH
30106: LD_VAR 0 4
30110: PUSH
30111: FOR_IN
30112: IFFALSE 30158
// for j = 1 to 3 do
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: DOUBLE
30120: LD_INT 1
30122: DEC
30123: ST_TO_ADDR
30124: LD_INT 3
30126: PUSH
30127: FOR_TO
30128: IFFALSE 30154
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30130: LD_VAR 0 2
30134: PPUSH
30135: CALL_OW 274
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: LD_INT 99999
30147: PPUSH
30148: CALL_OW 277
30152: GO 30127
30154: POP
30155: POP
30156: GO 30111
30158: POP
30159: POP
// end ;
30160: LD_VAR 0 1
30164: RET
// export function hHackSetLevel10 ; var i , j ; begin
30165: LD_INT 0
30167: PPUSH
30168: PPUSH
30169: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30170: LD_ADDR_VAR 0 2
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PPUSH
30185: CALL_OW 69
30189: PUSH
30190: FOR_IN
30191: IFFALSE 30243
// if IsSelected ( i ) then
30193: LD_VAR 0 2
30197: PPUSH
30198: CALL_OW 306
30202: IFFALSE 30241
// begin for j := 1 to 4 do
30204: LD_ADDR_VAR 0 3
30208: PUSH
30209: DOUBLE
30210: LD_INT 1
30212: DEC
30213: ST_TO_ADDR
30214: LD_INT 4
30216: PUSH
30217: FOR_TO
30218: IFFALSE 30239
// SetSkill ( i , j , 10 ) ;
30220: LD_VAR 0 2
30224: PPUSH
30225: LD_VAR 0 3
30229: PPUSH
30230: LD_INT 10
30232: PPUSH
30233: CALL_OW 237
30237: GO 30217
30239: POP
30240: POP
// end ;
30241: GO 30190
30243: POP
30244: POP
// end ;
30245: LD_VAR 0 1
30249: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30250: LD_INT 0
30252: PPUSH
30253: PPUSH
30254: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30255: LD_ADDR_VAR 0 2
30259: PUSH
30260: LD_INT 22
30262: PUSH
30263: LD_OWVAR 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 21
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PPUSH
30286: CALL_OW 69
30290: PUSH
30291: FOR_IN
30292: IFFALSE 30333
// begin for j := 1 to 4 do
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: DOUBLE
30300: LD_INT 1
30302: DEC
30303: ST_TO_ADDR
30304: LD_INT 4
30306: PUSH
30307: FOR_TO
30308: IFFALSE 30329
// SetSkill ( i , j , 10 ) ;
30310: LD_VAR 0 2
30314: PPUSH
30315: LD_VAR 0 3
30319: PPUSH
30320: LD_INT 10
30322: PPUSH
30323: CALL_OW 237
30327: GO 30307
30329: POP
30330: POP
// end ;
30331: GO 30291
30333: POP
30334: POP
// end ;
30335: LD_VAR 0 1
30339: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30340: LD_INT 0
30342: PPUSH
// uc_side := your_side ;
30343: LD_ADDR_OWVAR 20
30347: PUSH
30348: LD_OWVAR 2
30352: ST_TO_ADDR
// uc_nation := nation ;
30353: LD_ADDR_OWVAR 21
30357: PUSH
30358: LD_VAR 0 1
30362: ST_TO_ADDR
// InitHc ;
30363: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30367: LD_INT 0
30369: PPUSH
30370: LD_VAR 0 2
30374: PPUSH
30375: LD_VAR 0 3
30379: PPUSH
30380: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30384: LD_VAR 0 4
30388: PPUSH
30389: LD_VAR 0 5
30393: PPUSH
30394: CALL_OW 428
30398: PUSH
30399: LD_INT 0
30401: EQUAL
30402: IFFALSE 30426
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30404: CALL_OW 44
30408: PPUSH
30409: LD_VAR 0 4
30413: PPUSH
30414: LD_VAR 0 5
30418: PPUSH
30419: LD_INT 1
30421: PPUSH
30422: CALL_OW 48
// end ;
30426: LD_VAR 0 6
30430: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30431: LD_INT 0
30433: PPUSH
30434: PPUSH
// uc_side := your_side ;
30435: LD_ADDR_OWVAR 20
30439: PUSH
30440: LD_OWVAR 2
30444: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30445: LD_VAR 0 1
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: LD_INT 5
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: IN
30472: IFFALSE 30484
// uc_nation := nation_american else
30474: LD_ADDR_OWVAR 21
30478: PUSH
30479: LD_INT 1
30481: ST_TO_ADDR
30482: GO 30527
// if chassis in [ 11 , 12 , 13 , 14 ] then
30484: LD_VAR 0 1
30488: PUSH
30489: LD_INT 11
30491: PUSH
30492: LD_INT 12
30494: PUSH
30495: LD_INT 13
30497: PUSH
30498: LD_INT 14
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: IN
30507: IFFALSE 30519
// uc_nation := nation_arabian else
30509: LD_ADDR_OWVAR 21
30513: PUSH
30514: LD_INT 2
30516: ST_TO_ADDR
30517: GO 30527
// uc_nation := nation_russian ;
30519: LD_ADDR_OWVAR 21
30523: PUSH
30524: LD_INT 3
30526: ST_TO_ADDR
// vc_chassis := chassis ;
30527: LD_ADDR_OWVAR 37
30531: PUSH
30532: LD_VAR 0 1
30536: ST_TO_ADDR
// vc_engine := engine ;
30537: LD_ADDR_OWVAR 39
30541: PUSH
30542: LD_VAR 0 2
30546: ST_TO_ADDR
// vc_control := control ;
30547: LD_ADDR_OWVAR 38
30551: PUSH
30552: LD_VAR 0 3
30556: ST_TO_ADDR
// vc_weapon := weapon ;
30557: LD_ADDR_OWVAR 40
30561: PUSH
30562: LD_VAR 0 4
30566: ST_TO_ADDR
// un := CreateVehicle ;
30567: LD_ADDR_VAR 0 8
30571: PUSH
30572: CALL_OW 45
30576: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30577: LD_VAR 0 8
30581: PPUSH
30582: LD_INT 0
30584: PPUSH
30585: LD_INT 5
30587: PPUSH
30588: CALL_OW 12
30592: PPUSH
30593: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30597: LD_VAR 0 8
30601: PPUSH
30602: LD_VAR 0 5
30606: PPUSH
30607: LD_VAR 0 6
30611: PPUSH
30612: LD_INT 1
30614: PPUSH
30615: CALL_OW 48
// end ;
30619: LD_VAR 0 7
30623: RET
// export hInvincible ; every 1 do
30624: GO 30626
30626: DISABLE
// hInvincible := [ ] ;
30627: LD_ADDR_EXP 111
30631: PUSH
30632: EMPTY
30633: ST_TO_ADDR
30634: END
// every 10 do var i ;
30635: GO 30637
30637: DISABLE
30638: LD_INT 0
30640: PPUSH
// begin enable ;
30641: ENABLE
// if not hInvincible then
30642: LD_EXP 111
30646: NOT
30647: IFFALSE 30651
// exit ;
30649: GO 30695
// for i in hInvincible do
30651: LD_ADDR_VAR 0 1
30655: PUSH
30656: LD_EXP 111
30660: PUSH
30661: FOR_IN
30662: IFFALSE 30693
// if GetLives ( i ) < 1000 then
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL_OW 256
30673: PUSH
30674: LD_INT 1000
30676: LESS
30677: IFFALSE 30691
// SetLives ( i , 1000 ) ;
30679: LD_VAR 0 1
30683: PPUSH
30684: LD_INT 1000
30686: PPUSH
30687: CALL_OW 234
30691: GO 30661
30693: POP
30694: POP
// end ;
30695: PPOPN 1
30697: END
// export function hHackInvincible ; var i ; begin
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30702: LD_ADDR_VAR 0 2
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 21
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 21
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: PPUSH
30735: CALL_OW 69
30739: PUSH
30740: FOR_IN
30741: IFFALSE 30802
// if IsSelected ( i ) then
30743: LD_VAR 0 2
30747: PPUSH
30748: CALL_OW 306
30752: IFFALSE 30800
// begin if i in hInvincible then
30754: LD_VAR 0 2
30758: PUSH
30759: LD_EXP 111
30763: IN
30764: IFFALSE 30784
// hInvincible := hInvincible diff i else
30766: LD_ADDR_EXP 111
30770: PUSH
30771: LD_EXP 111
30775: PUSH
30776: LD_VAR 0 2
30780: DIFF
30781: ST_TO_ADDR
30782: GO 30800
// hInvincible := hInvincible union i ;
30784: LD_ADDR_EXP 111
30788: PUSH
30789: LD_EXP 111
30793: PUSH
30794: LD_VAR 0 2
30798: UNION
30799: ST_TO_ADDR
// end ;
30800: GO 30740
30802: POP
30803: POP
// end ;
30804: LD_VAR 0 1
30808: RET
// export function hHackInvisible ; var i , j ; begin
30809: LD_INT 0
30811: PPUSH
30812: PPUSH
30813: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30814: LD_ADDR_VAR 0 2
30818: PUSH
30819: LD_INT 21
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PPUSH
30829: CALL_OW 69
30833: PUSH
30834: FOR_IN
30835: IFFALSE 30859
// if IsSelected ( i ) then
30837: LD_VAR 0 2
30841: PPUSH
30842: CALL_OW 306
30846: IFFALSE 30857
// ComForceInvisible ( i ) ;
30848: LD_VAR 0 2
30852: PPUSH
30853: CALL_OW 496
30857: GO 30834
30859: POP
30860: POP
// end ;
30861: LD_VAR 0 1
30865: RET
// export function hHackChangeYourSide ; begin
30866: LD_INT 0
30868: PPUSH
// if your_side = 8 then
30869: LD_OWVAR 2
30873: PUSH
30874: LD_INT 8
30876: EQUAL
30877: IFFALSE 30889
// your_side := 0 else
30879: LD_ADDR_OWVAR 2
30883: PUSH
30884: LD_INT 0
30886: ST_TO_ADDR
30887: GO 30903
// your_side := your_side + 1 ;
30889: LD_ADDR_OWVAR 2
30893: PUSH
30894: LD_OWVAR 2
30898: PUSH
30899: LD_INT 1
30901: PLUS
30902: ST_TO_ADDR
// end ;
30903: LD_VAR 0 1
30907: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
// for i in all_units do
30913: LD_ADDR_VAR 0 2
30917: PUSH
30918: LD_OWVAR 3
30922: PUSH
30923: FOR_IN
30924: IFFALSE 31002
// if IsSelected ( i ) then
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 306
30935: IFFALSE 31000
// begin j := GetSide ( i ) ;
30937: LD_ADDR_VAR 0 3
30941: PUSH
30942: LD_VAR 0 2
30946: PPUSH
30947: CALL_OW 255
30951: ST_TO_ADDR
// if j = 8 then
30952: LD_VAR 0 3
30956: PUSH
30957: LD_INT 8
30959: EQUAL
30960: IFFALSE 30972
// j := 0 else
30962: LD_ADDR_VAR 0 3
30966: PUSH
30967: LD_INT 0
30969: ST_TO_ADDR
30970: GO 30986
// j := j + 1 ;
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: LD_VAR 0 3
30981: PUSH
30982: LD_INT 1
30984: PLUS
30985: ST_TO_ADDR
// SetSide ( i , j ) ;
30986: LD_VAR 0 2
30990: PPUSH
30991: LD_VAR 0 3
30995: PPUSH
30996: CALL_OW 235
// end ;
31000: GO 30923
31002: POP
31003: POP
// end ;
31004: LD_VAR 0 1
31008: RET
// export function hHackFog ; begin
31009: LD_INT 0
31011: PPUSH
// FogOff ( true ) ;
31012: LD_INT 1
31014: PPUSH
31015: CALL_OW 344
// end ;
31019: LD_VAR 0 1
31023: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31024: LD_INT 0
31026: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31027: LD_VAR 0 1
31031: PPUSH
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 3
31041: PPUSH
31042: LD_INT 1
31044: PPUSH
31045: LD_INT 1
31047: PPUSH
31048: CALL_OW 483
// CenterOnXY ( x , y ) ;
31052: LD_VAR 0 2
31056: PPUSH
31057: LD_VAR 0 3
31061: PPUSH
31062: CALL_OW 84
// end ;
31066: LD_VAR 0 4
31070: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31071: LD_INT 0
31073: PPUSH
31074: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31075: LD_VAR 0 1
31079: NOT
31080: PUSH
31081: LD_VAR 0 2
31085: PPUSH
31086: LD_VAR 0 3
31090: PPUSH
31091: CALL_OW 488
31095: NOT
31096: OR
31097: PUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 266
31107: PUSH
31108: LD_INT 3
31110: NONEQUAL
31111: PUSH
31112: LD_VAR 0 1
31116: PPUSH
31117: CALL_OW 247
31121: PUSH
31122: LD_INT 1
31124: EQUAL
31125: NOT
31126: AND
31127: OR
31128: IFFALSE 31132
// exit ;
31130: GO 31281
// if GetType ( factory ) = unit_human then
31132: LD_VAR 0 1
31136: PPUSH
31137: CALL_OW 247
31141: PUSH
31142: LD_INT 1
31144: EQUAL
31145: IFFALSE 31162
// factory := IsInUnit ( factory ) ;
31147: LD_ADDR_VAR 0 1
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 310
31161: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31162: LD_VAR 0 1
31166: PPUSH
31167: CALL_OW 266
31171: PUSH
31172: LD_INT 3
31174: NONEQUAL
31175: IFFALSE 31179
// exit ;
31177: GO 31281
// if HexInfo ( x , y ) = factory then
31179: LD_VAR 0 2
31183: PPUSH
31184: LD_VAR 0 3
31188: PPUSH
31189: CALL_OW 428
31193: PUSH
31194: LD_VAR 0 1
31198: EQUAL
31199: IFFALSE 31226
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31201: LD_ADDR_EXP 112
31205: PUSH
31206: LD_EXP 112
31210: PPUSH
31211: LD_VAR 0 1
31215: PPUSH
31216: LD_INT 0
31218: PPUSH
31219: CALL_OW 1
31223: ST_TO_ADDR
31224: GO 31277
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31226: LD_ADDR_EXP 112
31230: PUSH
31231: LD_EXP 112
31235: PPUSH
31236: LD_VAR 0 1
31240: PPUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: CALL_OW 255
31250: PUSH
31251: LD_VAR 0 1
31255: PUSH
31256: LD_VAR 0 2
31260: PUSH
31261: LD_VAR 0 3
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: PPUSH
31272: CALL_OW 1
31276: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31277: CALL 31286 0 0
// end ;
31281: LD_VAR 0 4
31285: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31286: LD_INT 0
31288: PPUSH
31289: PPUSH
31290: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31291: LD_STRING resetFactoryWaypoint();
31293: PPUSH
31294: CALL_OW 559
// if factoryWaypoints then
31298: LD_EXP 112
31302: IFFALSE 31428
// begin list := PrepareArray ( factoryWaypoints ) ;
31304: LD_ADDR_VAR 0 3
31308: PUSH
31309: LD_EXP 112
31313: PPUSH
31314: CALL 77860 0 1
31318: ST_TO_ADDR
// for i := 1 to list do
31319: LD_ADDR_VAR 0 2
31323: PUSH
31324: DOUBLE
31325: LD_INT 1
31327: DEC
31328: ST_TO_ADDR
31329: LD_VAR 0 3
31333: PUSH
31334: FOR_TO
31335: IFFALSE 31426
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31337: LD_STRING setFactoryWaypointXY(
31339: PUSH
31340: LD_VAR 0 3
31344: PUSH
31345: LD_VAR 0 2
31349: ARRAY
31350: PUSH
31351: LD_INT 1
31353: ARRAY
31354: STR
31355: PUSH
31356: LD_STRING ,
31358: STR
31359: PUSH
31360: LD_VAR 0 3
31364: PUSH
31365: LD_VAR 0 2
31369: ARRAY
31370: PUSH
31371: LD_INT 2
31373: ARRAY
31374: STR
31375: PUSH
31376: LD_STRING ,
31378: STR
31379: PUSH
31380: LD_VAR 0 3
31384: PUSH
31385: LD_VAR 0 2
31389: ARRAY
31390: PUSH
31391: LD_INT 3
31393: ARRAY
31394: STR
31395: PUSH
31396: LD_STRING ,
31398: STR
31399: PUSH
31400: LD_VAR 0 3
31404: PUSH
31405: LD_VAR 0 2
31409: ARRAY
31410: PUSH
31411: LD_INT 4
31413: ARRAY
31414: STR
31415: PUSH
31416: LD_STRING )
31418: STR
31419: PPUSH
31420: CALL_OW 559
31424: GO 31334
31426: POP
31427: POP
// end ; end ;
31428: LD_VAR 0 1
31432: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31433: LD_INT 0
31435: PPUSH
// if HexInfo ( x , y ) = warehouse then
31436: LD_VAR 0 2
31440: PPUSH
31441: LD_VAR 0 3
31445: PPUSH
31446: CALL_OW 428
31450: PUSH
31451: LD_VAR 0 1
31455: EQUAL
31456: IFFALSE 31483
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31458: LD_ADDR_EXP 113
31462: PUSH
31463: LD_EXP 113
31467: PPUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: LD_INT 0
31475: PPUSH
31476: CALL_OW 1
31480: ST_TO_ADDR
31481: GO 31534
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31483: LD_ADDR_EXP 113
31487: PUSH
31488: LD_EXP 113
31492: PPUSH
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 255
31507: PUSH
31508: LD_VAR 0 1
31512: PUSH
31513: LD_VAR 0 2
31517: PUSH
31518: LD_VAR 0 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: PPUSH
31529: CALL_OW 1
31533: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31534: CALL 31543 0 0
// end ;
31538: LD_VAR 0 4
31542: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31543: LD_INT 0
31545: PPUSH
31546: PPUSH
31547: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31548: LD_STRING resetWarehouseGatheringPoints();
31550: PPUSH
31551: CALL_OW 559
// if warehouseGatheringPoints then
31555: LD_EXP 113
31559: IFFALSE 31685
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: LD_EXP 113
31570: PPUSH
31571: CALL 77860 0 1
31575: ST_TO_ADDR
// for i := 1 to list do
31576: LD_ADDR_VAR 0 2
31580: PUSH
31581: DOUBLE
31582: LD_INT 1
31584: DEC
31585: ST_TO_ADDR
31586: LD_VAR 0 3
31590: PUSH
31591: FOR_TO
31592: IFFALSE 31683
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31594: LD_STRING setWarehouseGatheringPointXY(
31596: PUSH
31597: LD_VAR 0 3
31601: PUSH
31602: LD_VAR 0 2
31606: ARRAY
31607: PUSH
31608: LD_INT 1
31610: ARRAY
31611: STR
31612: PUSH
31613: LD_STRING ,
31615: STR
31616: PUSH
31617: LD_VAR 0 3
31621: PUSH
31622: LD_VAR 0 2
31626: ARRAY
31627: PUSH
31628: LD_INT 2
31630: ARRAY
31631: STR
31632: PUSH
31633: LD_STRING ,
31635: STR
31636: PUSH
31637: LD_VAR 0 3
31641: PUSH
31642: LD_VAR 0 2
31646: ARRAY
31647: PUSH
31648: LD_INT 3
31650: ARRAY
31651: STR
31652: PUSH
31653: LD_STRING ,
31655: STR
31656: PUSH
31657: LD_VAR 0 3
31661: PUSH
31662: LD_VAR 0 2
31666: ARRAY
31667: PUSH
31668: LD_INT 4
31670: ARRAY
31671: STR
31672: PUSH
31673: LD_STRING )
31675: STR
31676: PPUSH
31677: CALL_OW 559
31681: GO 31591
31683: POP
31684: POP
// end ; end ;
31685: LD_VAR 0 1
31689: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31690: LD_EXP 113
31694: IFFALSE 32381
31696: GO 31698
31698: DISABLE
31699: LD_INT 0
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
31707: PPUSH
31708: PPUSH
31709: PPUSH
// begin enable ;
31710: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31711: LD_ADDR_VAR 0 3
31715: PUSH
31716: LD_EXP 113
31720: PPUSH
31721: CALL 77860 0 1
31725: ST_TO_ADDR
// if not list then
31726: LD_VAR 0 3
31730: NOT
31731: IFFALSE 31735
// exit ;
31733: GO 32381
// for i := 1 to list do
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: DOUBLE
31741: LD_INT 1
31743: DEC
31744: ST_TO_ADDR
31745: LD_VAR 0 3
31749: PUSH
31750: FOR_TO
31751: IFFALSE 32379
// begin depot := list [ i ] [ 2 ] ;
31753: LD_ADDR_VAR 0 8
31757: PUSH
31758: LD_VAR 0 3
31762: PUSH
31763: LD_VAR 0 1
31767: ARRAY
31768: PUSH
31769: LD_INT 2
31771: ARRAY
31772: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31773: LD_ADDR_VAR 0 5
31777: PUSH
31778: LD_VAR 0 3
31782: PUSH
31783: LD_VAR 0 1
31787: ARRAY
31788: PUSH
31789: LD_INT 1
31791: ARRAY
31792: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31793: LD_VAR 0 8
31797: PPUSH
31798: CALL_OW 301
31802: PUSH
31803: LD_VAR 0 5
31807: PUSH
31808: LD_VAR 0 8
31812: PPUSH
31813: CALL_OW 255
31817: NONEQUAL
31818: OR
31819: IFFALSE 31848
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31821: LD_ADDR_EXP 113
31825: PUSH
31826: LD_EXP 113
31830: PPUSH
31831: LD_VAR 0 8
31835: PPUSH
31836: LD_INT 0
31838: PPUSH
31839: CALL_OW 1
31843: ST_TO_ADDR
// exit ;
31844: POP
31845: POP
31846: GO 32381
// end ; x := list [ i ] [ 3 ] ;
31848: LD_ADDR_VAR 0 6
31852: PUSH
31853: LD_VAR 0 3
31857: PUSH
31858: LD_VAR 0 1
31862: ARRAY
31863: PUSH
31864: LD_INT 3
31866: ARRAY
31867: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31868: LD_ADDR_VAR 0 7
31872: PUSH
31873: LD_VAR 0 3
31877: PUSH
31878: LD_VAR 0 1
31882: ARRAY
31883: PUSH
31884: LD_INT 4
31886: ARRAY
31887: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31888: LD_ADDR_VAR 0 9
31892: PUSH
31893: LD_VAR 0 6
31897: PPUSH
31898: LD_VAR 0 7
31902: PPUSH
31903: LD_INT 16
31905: PPUSH
31906: CALL 76444 0 3
31910: ST_TO_ADDR
// if not cratesNearbyPoint then
31911: LD_VAR 0 9
31915: NOT
31916: IFFALSE 31922
// exit ;
31918: POP
31919: POP
31920: GO 32381
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31922: LD_ADDR_VAR 0 4
31926: PUSH
31927: LD_INT 22
31929: PUSH
31930: LD_VAR 0 5
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: LD_INT 60
31944: PUSH
31945: EMPTY
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 91
31954: PUSH
31955: LD_VAR 0 8
31959: PUSH
31960: LD_INT 6
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: LD_INT 25
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 25
31983: PUSH
31984: LD_INT 16
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: PPUSH
32002: CALL_OW 69
32006: PUSH
32007: LD_VAR 0 8
32011: PPUSH
32012: CALL_OW 313
32016: PPUSH
32017: LD_INT 3
32019: PUSH
32020: LD_INT 60
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 25
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 25
32045: PUSH
32046: LD_INT 16
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PPUSH
32062: CALL_OW 72
32066: UNION
32067: ST_TO_ADDR
// if tmp then
32068: LD_VAR 0 4
32072: IFFALSE 32152
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32074: LD_ADDR_VAR 0 4
32078: PUSH
32079: LD_VAR 0 4
32083: PPUSH
32084: LD_INT 3
32086: PPUSH
32087: CALL 74411 0 2
32091: ST_TO_ADDR
// for j in tmp do
32092: LD_ADDR_VAR 0 2
32096: PUSH
32097: LD_VAR 0 4
32101: PUSH
32102: FOR_IN
32103: IFFALSE 32146
// begin if IsInUnit ( j ) then
32105: LD_VAR 0 2
32109: PPUSH
32110: CALL_OW 310
32114: IFFALSE 32125
// ComExit ( j ) ;
32116: LD_VAR 0 2
32120: PPUSH
32121: CALL 74494 0 1
// AddComCollect ( j , x , y ) ;
32125: LD_VAR 0 2
32129: PPUSH
32130: LD_VAR 0 6
32134: PPUSH
32135: LD_VAR 0 7
32139: PPUSH
32140: CALL_OW 177
// end ;
32144: GO 32102
32146: POP
32147: POP
// exit ;
32148: POP
32149: POP
32150: GO 32381
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32152: LD_ADDR_VAR 0 4
32156: PUSH
32157: LD_INT 22
32159: PUSH
32160: LD_VAR 0 5
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 91
32171: PUSH
32172: LD_VAR 0 8
32176: PUSH
32177: LD_INT 8
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 34
32190: PUSH
32191: LD_INT 12
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 34
32200: PUSH
32201: LD_INT 51
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 34
32210: PUSH
32211: LD_INT 32
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 34
32220: PUSH
32221: LD_EXP 37
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: PPUSH
32242: CALL_OW 69
32246: ST_TO_ADDR
// if tmp then
32247: LD_VAR 0 4
32251: IFFALSE 32377
// begin for j in tmp do
32253: LD_ADDR_VAR 0 2
32257: PUSH
32258: LD_VAR 0 4
32262: PUSH
32263: FOR_IN
32264: IFFALSE 32375
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32266: LD_VAR 0 2
32270: PPUSH
32271: CALL_OW 262
32275: PUSH
32276: LD_INT 3
32278: EQUAL
32279: PUSH
32280: LD_VAR 0 2
32284: PPUSH
32285: CALL_OW 261
32289: PUSH
32290: LD_INT 20
32292: GREATER
32293: OR
32294: PUSH
32295: LD_VAR 0 2
32299: PPUSH
32300: CALL_OW 314
32304: NOT
32305: AND
32306: PUSH
32307: LD_VAR 0 2
32311: PPUSH
32312: CALL_OW 263
32316: PUSH
32317: LD_INT 1
32319: NONEQUAL
32320: PUSH
32321: LD_VAR 0 2
32325: PPUSH
32326: CALL_OW 311
32330: OR
32331: AND
32332: IFFALSE 32373
// begin ComCollect ( j , x , y ) ;
32334: LD_VAR 0 2
32338: PPUSH
32339: LD_VAR 0 6
32343: PPUSH
32344: LD_VAR 0 7
32348: PPUSH
32349: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32353: LD_VAR 0 2
32357: PPUSH
32358: LD_VAR 0 8
32362: PPUSH
32363: CALL_OW 172
// exit ;
32367: POP
32368: POP
32369: POP
32370: POP
32371: GO 32381
// end ;
32373: GO 32263
32375: POP
32376: POP
// end ; end ;
32377: GO 31750
32379: POP
32380: POP
// end ; end_of_file
32381: PPOPN 9
32383: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32384: LD_INT 0
32386: PPUSH
32387: PPUSH
32388: PPUSH
32389: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32390: LD_VAR 0 1
32394: PPUSH
32395: CALL_OW 264
32399: PUSH
32400: LD_EXP 40
32404: EQUAL
32405: IFFALSE 32477
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32407: LD_INT 68
32409: PPUSH
32410: LD_VAR 0 1
32414: PPUSH
32415: CALL_OW 255
32419: PPUSH
32420: CALL_OW 321
32424: PUSH
32425: LD_INT 2
32427: EQUAL
32428: IFFALSE 32440
// eff := 70 else
32430: LD_ADDR_VAR 0 4
32434: PUSH
32435: LD_INT 70
32437: ST_TO_ADDR
32438: GO 32448
// eff := 30 ;
32440: LD_ADDR_VAR 0 4
32444: PUSH
32445: LD_INT 30
32447: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32448: LD_VAR 0 1
32452: PPUSH
32453: CALL_OW 250
32457: PPUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: CALL_OW 251
32467: PPUSH
32468: LD_VAR 0 4
32472: PPUSH
32473: CALL_OW 495
// end ; end ;
32477: LD_VAR 0 2
32481: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32482: LD_INT 0
32484: PPUSH
// end ;
32485: LD_VAR 0 4
32489: RET
// export function SOS_Command ( cmd ) ; begin
32490: LD_INT 0
32492: PPUSH
// end ;
32493: LD_VAR 0 2
32497: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32498: LD_INT 0
32500: PPUSH
// end ;
32501: LD_VAR 0 6
32505: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32506: LD_INT 0
32508: PPUSH
32509: PPUSH
// if not vehicle or not factory then
32510: LD_VAR 0 1
32514: NOT
32515: PUSH
32516: LD_VAR 0 2
32520: NOT
32521: OR
32522: IFFALSE 32526
// exit ;
32524: GO 32757
// if factoryWaypoints >= factory then
32526: LD_EXP 112
32530: PUSH
32531: LD_VAR 0 2
32535: GREATEREQUAL
32536: IFFALSE 32757
// if factoryWaypoints [ factory ] then
32538: LD_EXP 112
32542: PUSH
32543: LD_VAR 0 2
32547: ARRAY
32548: IFFALSE 32757
// begin if GetControl ( vehicle ) = control_manual then
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 263
32559: PUSH
32560: LD_INT 1
32562: EQUAL
32563: IFFALSE 32644
// begin driver := IsDrivenBy ( vehicle ) ;
32565: LD_ADDR_VAR 0 4
32569: PUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 311
32579: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32580: LD_VAR 0 4
32584: PPUSH
32585: LD_EXP 112
32589: PUSH
32590: LD_VAR 0 2
32594: ARRAY
32595: PUSH
32596: LD_INT 3
32598: ARRAY
32599: PPUSH
32600: LD_EXP 112
32604: PUSH
32605: LD_VAR 0 2
32609: ARRAY
32610: PUSH
32611: LD_INT 4
32613: ARRAY
32614: PPUSH
32615: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32619: LD_VAR 0 4
32623: PPUSH
32624: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32628: LD_VAR 0 4
32632: PPUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 180
// end else
32642: GO 32757
// if GetControl ( vehicle ) = control_remote then
32644: LD_VAR 0 1
32648: PPUSH
32649: CALL_OW 263
32653: PUSH
32654: LD_INT 2
32656: EQUAL
32657: IFFALSE 32718
// begin wait ( 0 0$2 ) ;
32659: LD_INT 70
32661: PPUSH
32662: CALL_OW 67
// if Connect ( vehicle ) then
32666: LD_VAR 0 1
32670: PPUSH
32671: CALL 44805 0 1
32675: IFFALSE 32716
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32677: LD_VAR 0 1
32681: PPUSH
32682: LD_EXP 112
32686: PUSH
32687: LD_VAR 0 2
32691: ARRAY
32692: PUSH
32693: LD_INT 3
32695: ARRAY
32696: PPUSH
32697: LD_EXP 112
32701: PUSH
32702: LD_VAR 0 2
32706: ARRAY
32707: PUSH
32708: LD_INT 4
32710: ARRAY
32711: PPUSH
32712: CALL_OW 171
// end else
32716: GO 32757
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32718: LD_VAR 0 1
32722: PPUSH
32723: LD_EXP 112
32727: PUSH
32728: LD_VAR 0 2
32732: ARRAY
32733: PUSH
32734: LD_INT 3
32736: ARRAY
32737: PPUSH
32738: LD_EXP 112
32742: PUSH
32743: LD_VAR 0 2
32747: ARRAY
32748: PUSH
32749: LD_INT 4
32751: ARRAY
32752: PPUSH
32753: CALL_OW 171
// end ; end ;
32757: LD_VAR 0 3
32761: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32762: LD_INT 0
32764: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32765: LD_VAR 0 1
32769: PUSH
32770: LD_INT 250
32772: EQUAL
32773: PUSH
32774: LD_VAR 0 2
32778: PPUSH
32779: CALL_OW 264
32783: PUSH
32784: LD_EXP 43
32788: EQUAL
32789: AND
32790: IFFALSE 32811
// MinerPlaceMine ( unit , x , y ) ;
32792: LD_VAR 0 2
32796: PPUSH
32797: LD_VAR 0 4
32801: PPUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: CALL 35210 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32811: LD_VAR 0 1
32815: PUSH
32816: LD_INT 251
32818: EQUAL
32819: PUSH
32820: LD_VAR 0 2
32824: PPUSH
32825: CALL_OW 264
32829: PUSH
32830: LD_EXP 43
32834: EQUAL
32835: AND
32836: IFFALSE 32857
// MinerDetonateMine ( unit , x , y ) ;
32838: LD_VAR 0 2
32842: PPUSH
32843: LD_VAR 0 4
32847: PPUSH
32848: LD_VAR 0 5
32852: PPUSH
32853: CALL 35487 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32857: LD_VAR 0 1
32861: PUSH
32862: LD_INT 252
32864: EQUAL
32865: PUSH
32866: LD_VAR 0 2
32870: PPUSH
32871: CALL_OW 264
32875: PUSH
32876: LD_EXP 43
32880: EQUAL
32881: AND
32882: IFFALSE 32903
// MinerCreateMinefield ( unit , x , y ) ;
32884: LD_VAR 0 2
32888: PPUSH
32889: LD_VAR 0 4
32893: PPUSH
32894: LD_VAR 0 5
32898: PPUSH
32899: CALL 35904 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32903: LD_VAR 0 1
32907: PUSH
32908: LD_INT 253
32910: EQUAL
32911: PUSH
32912: LD_VAR 0 2
32916: PPUSH
32917: CALL_OW 257
32921: PUSH
32922: LD_INT 5
32924: EQUAL
32925: AND
32926: IFFALSE 32947
// ComBinocular ( unit , x , y ) ;
32928: LD_VAR 0 2
32932: PPUSH
32933: LD_VAR 0 4
32937: PPUSH
32938: LD_VAR 0 5
32942: PPUSH
32943: CALL 36275 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32947: LD_VAR 0 1
32951: PUSH
32952: LD_INT 254
32954: EQUAL
32955: PUSH
32956: LD_VAR 0 2
32960: PPUSH
32961: CALL_OW 264
32965: PUSH
32966: LD_EXP 38
32970: EQUAL
32971: AND
32972: PUSH
32973: LD_VAR 0 3
32977: PPUSH
32978: CALL_OW 263
32982: PUSH
32983: LD_INT 3
32985: EQUAL
32986: AND
32987: IFFALSE 33003
// HackDestroyVehicle ( unit , selectedUnit ) ;
32989: LD_VAR 0 2
32993: PPUSH
32994: LD_VAR 0 3
32998: PPUSH
32999: CALL 34570 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33003: LD_VAR 0 1
33007: PUSH
33008: LD_INT 255
33010: EQUAL
33011: PUSH
33012: LD_VAR 0 2
33016: PPUSH
33017: CALL_OW 264
33021: PUSH
33022: LD_INT 14
33024: PUSH
33025: LD_INT 53
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: IN
33032: AND
33033: PUSH
33034: LD_VAR 0 4
33038: PPUSH
33039: LD_VAR 0 5
33043: PPUSH
33044: CALL_OW 488
33048: AND
33049: IFFALSE 33073
// CutTreeXYR ( unit , x , y , 12 ) ;
33051: LD_VAR 0 2
33055: PPUSH
33056: LD_VAR 0 4
33060: PPUSH
33061: LD_VAR 0 5
33065: PPUSH
33066: LD_INT 12
33068: PPUSH
33069: CALL 33136 0 4
// if cmd = 256 then
33073: LD_VAR 0 1
33077: PUSH
33078: LD_INT 256
33080: EQUAL
33081: IFFALSE 33102
// SetFactoryWaypoint ( unit , x , y ) ;
33083: LD_VAR 0 2
33087: PPUSH
33088: LD_VAR 0 4
33092: PPUSH
33093: LD_VAR 0 5
33097: PPUSH
33098: CALL 31071 0 3
// if cmd = 257 then
33102: LD_VAR 0 1
33106: PUSH
33107: LD_INT 257
33109: EQUAL
33110: IFFALSE 33131
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33112: LD_VAR 0 2
33116: PPUSH
33117: LD_VAR 0 4
33121: PPUSH
33122: LD_VAR 0 5
33126: PPUSH
33127: CALL 31433 0 3
// end ;
33131: LD_VAR 0 6
33135: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33136: LD_INT 0
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
33144: PPUSH
33145: PPUSH
33146: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33147: LD_VAR 0 1
33151: NOT
33152: PUSH
33153: LD_VAR 0 2
33157: PPUSH
33158: LD_VAR 0 3
33162: PPUSH
33163: CALL_OW 488
33167: NOT
33168: OR
33169: PUSH
33170: LD_VAR 0 4
33174: NOT
33175: OR
33176: IFFALSE 33180
// exit ;
33178: GO 33520
// list := [ ] ;
33180: LD_ADDR_VAR 0 13
33184: PUSH
33185: EMPTY
33186: ST_TO_ADDR
// if x - r < 0 then
33187: LD_VAR 0 2
33191: PUSH
33192: LD_VAR 0 4
33196: MINUS
33197: PUSH
33198: LD_INT 0
33200: LESS
33201: IFFALSE 33213
// min_x := 0 else
33203: LD_ADDR_VAR 0 7
33207: PUSH
33208: LD_INT 0
33210: ST_TO_ADDR
33211: GO 33229
// min_x := x - r ;
33213: LD_ADDR_VAR 0 7
33217: PUSH
33218: LD_VAR 0 2
33222: PUSH
33223: LD_VAR 0 4
33227: MINUS
33228: ST_TO_ADDR
// if y - r < 0 then
33229: LD_VAR 0 3
33233: PUSH
33234: LD_VAR 0 4
33238: MINUS
33239: PUSH
33240: LD_INT 0
33242: LESS
33243: IFFALSE 33255
// min_y := 0 else
33245: LD_ADDR_VAR 0 8
33249: PUSH
33250: LD_INT 0
33252: ST_TO_ADDR
33253: GO 33271
// min_y := y - r ;
33255: LD_ADDR_VAR 0 8
33259: PUSH
33260: LD_VAR 0 3
33264: PUSH
33265: LD_VAR 0 4
33269: MINUS
33270: ST_TO_ADDR
// max_x := x + r ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_VAR 0 2
33280: PUSH
33281: LD_VAR 0 4
33285: PLUS
33286: ST_TO_ADDR
// max_y := y + r ;
33287: LD_ADDR_VAR 0 10
33291: PUSH
33292: LD_VAR 0 3
33296: PUSH
33297: LD_VAR 0 4
33301: PLUS
33302: ST_TO_ADDR
// for _x = min_x to max_x do
33303: LD_ADDR_VAR 0 11
33307: PUSH
33308: DOUBLE
33309: LD_VAR 0 7
33313: DEC
33314: ST_TO_ADDR
33315: LD_VAR 0 9
33319: PUSH
33320: FOR_TO
33321: IFFALSE 33438
// for _y = min_y to max_y do
33323: LD_ADDR_VAR 0 12
33327: PUSH
33328: DOUBLE
33329: LD_VAR 0 8
33333: DEC
33334: ST_TO_ADDR
33335: LD_VAR 0 10
33339: PUSH
33340: FOR_TO
33341: IFFALSE 33434
// begin if not ValidHex ( _x , _y ) then
33343: LD_VAR 0 11
33347: PPUSH
33348: LD_VAR 0 12
33352: PPUSH
33353: CALL_OW 488
33357: NOT
33358: IFFALSE 33362
// continue ;
33360: GO 33340
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33362: LD_VAR 0 11
33366: PPUSH
33367: LD_VAR 0 12
33371: PPUSH
33372: CALL_OW 351
33376: PUSH
33377: LD_VAR 0 11
33381: PPUSH
33382: LD_VAR 0 12
33386: PPUSH
33387: CALL_OW 554
33391: AND
33392: IFFALSE 33432
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33394: LD_ADDR_VAR 0 13
33398: PUSH
33399: LD_VAR 0 13
33403: PPUSH
33404: LD_VAR 0 13
33408: PUSH
33409: LD_INT 1
33411: PLUS
33412: PPUSH
33413: LD_VAR 0 11
33417: PUSH
33418: LD_VAR 0 12
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PPUSH
33427: CALL_OW 2
33431: ST_TO_ADDR
// end ;
33432: GO 33340
33434: POP
33435: POP
33436: GO 33320
33438: POP
33439: POP
// if not list then
33440: LD_VAR 0 13
33444: NOT
33445: IFFALSE 33449
// exit ;
33447: GO 33520
// for i in list do
33449: LD_ADDR_VAR 0 6
33453: PUSH
33454: LD_VAR 0 13
33458: PUSH
33459: FOR_IN
33460: IFFALSE 33518
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33462: LD_VAR 0 1
33466: PPUSH
33467: LD_STRING M
33469: PUSH
33470: LD_VAR 0 6
33474: PUSH
33475: LD_INT 1
33477: ARRAY
33478: PUSH
33479: LD_VAR 0 6
33483: PUSH
33484: LD_INT 2
33486: ARRAY
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: PPUSH
33512: CALL_OW 447
33516: GO 33459
33518: POP
33519: POP
// end ;
33520: LD_VAR 0 5
33524: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33525: LD_EXP 115
33529: NOT
33530: IFFALSE 33580
33532: GO 33534
33534: DISABLE
// begin initHack := true ;
33535: LD_ADDR_EXP 115
33539: PUSH
33540: LD_INT 1
33542: ST_TO_ADDR
// hackTanks := [ ] ;
33543: LD_ADDR_EXP 116
33547: PUSH
33548: EMPTY
33549: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33550: LD_ADDR_EXP 117
33554: PUSH
33555: EMPTY
33556: ST_TO_ADDR
// hackLimit := 3 ;
33557: LD_ADDR_EXP 118
33561: PUSH
33562: LD_INT 3
33564: ST_TO_ADDR
// hackDist := 12 ;
33565: LD_ADDR_EXP 119
33569: PUSH
33570: LD_INT 12
33572: ST_TO_ADDR
// hackCounter := [ ] ;
33573: LD_ADDR_EXP 120
33577: PUSH
33578: EMPTY
33579: ST_TO_ADDR
// end ;
33580: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33581: LD_EXP 115
33585: PUSH
33586: LD_INT 34
33588: PUSH
33589: LD_EXP 38
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PPUSH
33598: CALL_OW 69
33602: AND
33603: IFFALSE 33858
33605: GO 33607
33607: DISABLE
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
// begin enable ;
33612: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33613: LD_ADDR_VAR 0 1
33617: PUSH
33618: LD_INT 34
33620: PUSH
33621: LD_EXP 38
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PPUSH
33630: CALL_OW 69
33634: PUSH
33635: FOR_IN
33636: IFFALSE 33856
// begin if not i in hackTanks then
33638: LD_VAR 0 1
33642: PUSH
33643: LD_EXP 116
33647: IN
33648: NOT
33649: IFFALSE 33732
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33651: LD_ADDR_EXP 116
33655: PUSH
33656: LD_EXP 116
33660: PPUSH
33661: LD_EXP 116
33665: PUSH
33666: LD_INT 1
33668: PLUS
33669: PPUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 1
33679: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33680: LD_ADDR_EXP 117
33684: PUSH
33685: LD_EXP 117
33689: PPUSH
33690: LD_EXP 117
33694: PUSH
33695: LD_INT 1
33697: PLUS
33698: PPUSH
33699: EMPTY
33700: PPUSH
33701: CALL_OW 1
33705: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33706: LD_ADDR_EXP 120
33710: PUSH
33711: LD_EXP 120
33715: PPUSH
33716: LD_EXP 120
33720: PUSH
33721: LD_INT 1
33723: PLUS
33724: PPUSH
33725: EMPTY
33726: PPUSH
33727: CALL_OW 1
33731: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33732: LD_VAR 0 1
33736: PPUSH
33737: CALL_OW 302
33741: NOT
33742: IFFALSE 33755
// begin HackUnlinkAll ( i ) ;
33744: LD_VAR 0 1
33748: PPUSH
33749: CALL 33861 0 1
// continue ;
33753: GO 33635
// end ; HackCheckCapturedStatus ( i ) ;
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL 34304 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33764: LD_ADDR_VAR 0 2
33768: PUSH
33769: LD_INT 81
33771: PUSH
33772: LD_VAR 0 1
33776: PPUSH
33777: CALL_OW 255
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 33
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 91
33798: PUSH
33799: LD_VAR 0 1
33803: PUSH
33804: LD_EXP 119
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 50
33816: PUSH
33817: EMPTY
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: PPUSH
33826: CALL_OW 69
33830: ST_TO_ADDR
// if not tmp then
33831: LD_VAR 0 2
33835: NOT
33836: IFFALSE 33840
// continue ;
33838: GO 33635
// HackLink ( i , tmp ) ;
33840: LD_VAR 0 1
33844: PPUSH
33845: LD_VAR 0 2
33849: PPUSH
33850: CALL 33997 0 2
// end ;
33854: GO 33635
33856: POP
33857: POP
// end ;
33858: PPOPN 2
33860: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33861: LD_INT 0
33863: PPUSH
33864: PPUSH
33865: PPUSH
// if not hack in hackTanks then
33866: LD_VAR 0 1
33870: PUSH
33871: LD_EXP 116
33875: IN
33876: NOT
33877: IFFALSE 33881
// exit ;
33879: GO 33992
// index := GetElementIndex ( hackTanks , hack ) ;
33881: LD_ADDR_VAR 0 4
33885: PUSH
33886: LD_EXP 116
33890: PPUSH
33891: LD_VAR 0 1
33895: PPUSH
33896: CALL 41619 0 2
33900: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33901: LD_EXP 117
33905: PUSH
33906: LD_VAR 0 4
33910: ARRAY
33911: IFFALSE 33992
// begin for i in hackTanksCaptured [ index ] do
33913: LD_ADDR_VAR 0 3
33917: PUSH
33918: LD_EXP 117
33922: PUSH
33923: LD_VAR 0 4
33927: ARRAY
33928: PUSH
33929: FOR_IN
33930: IFFALSE 33956
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33932: LD_VAR 0 3
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: LD_VAR 0 3
33945: PUSH
33946: LD_INT 2
33948: ARRAY
33949: PPUSH
33950: CALL_OW 235
33954: GO 33929
33956: POP
33957: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33958: LD_ADDR_EXP 117
33962: PUSH
33963: LD_EXP 117
33967: PPUSH
33968: LD_VAR 0 4
33972: PPUSH
33973: EMPTY
33974: PPUSH
33975: CALL_OW 1
33979: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33980: LD_VAR 0 1
33984: PPUSH
33985: LD_INT 0
33987: PPUSH
33988: CALL_OW 505
// end ; end ;
33992: LD_VAR 0 2
33996: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33997: LD_INT 0
33999: PPUSH
34000: PPUSH
34001: PPUSH
// if not hack in hackTanks or not vehicles then
34002: LD_VAR 0 1
34006: PUSH
34007: LD_EXP 116
34011: IN
34012: NOT
34013: PUSH
34014: LD_VAR 0 2
34018: NOT
34019: OR
34020: IFFALSE 34024
// exit ;
34022: GO 34299
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34024: LD_ADDR_VAR 0 2
34028: PUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: LD_VAR 0 2
34038: PPUSH
34039: LD_INT 1
34041: PPUSH
34042: LD_INT 1
34044: PPUSH
34045: CALL 42269 0 4
34049: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34050: LD_ADDR_VAR 0 5
34054: PUSH
34055: LD_EXP 116
34059: PPUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL 41619 0 2
34069: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34070: LD_EXP 117
34074: PUSH
34075: LD_VAR 0 5
34079: ARRAY
34080: PUSH
34081: LD_EXP 118
34085: LESS
34086: IFFALSE 34275
// begin for i := 1 to vehicles do
34088: LD_ADDR_VAR 0 4
34092: PUSH
34093: DOUBLE
34094: LD_INT 1
34096: DEC
34097: ST_TO_ADDR
34098: LD_VAR 0 2
34102: PUSH
34103: FOR_TO
34104: IFFALSE 34273
// begin if hackTanksCaptured [ index ] = hackLimit then
34106: LD_EXP 117
34110: PUSH
34111: LD_VAR 0 5
34115: ARRAY
34116: PUSH
34117: LD_EXP 118
34121: EQUAL
34122: IFFALSE 34126
// break ;
34124: GO 34273
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34126: LD_ADDR_EXP 120
34130: PUSH
34131: LD_EXP 120
34135: PPUSH
34136: LD_VAR 0 5
34140: PPUSH
34141: LD_EXP 120
34145: PUSH
34146: LD_VAR 0 5
34150: ARRAY
34151: PUSH
34152: LD_INT 1
34154: PLUS
34155: PPUSH
34156: CALL_OW 1
34160: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34161: LD_ADDR_EXP 117
34165: PUSH
34166: LD_EXP 117
34170: PPUSH
34171: LD_VAR 0 5
34175: PUSH
34176: LD_EXP 117
34180: PUSH
34181: LD_VAR 0 5
34185: ARRAY
34186: PUSH
34187: LD_INT 1
34189: PLUS
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PPUSH
34195: LD_VAR 0 2
34199: PUSH
34200: LD_VAR 0 4
34204: ARRAY
34205: PUSH
34206: LD_VAR 0 2
34210: PUSH
34211: LD_VAR 0 4
34215: ARRAY
34216: PPUSH
34217: CALL_OW 255
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PPUSH
34226: CALL 41834 0 3
34230: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34231: LD_VAR 0 2
34235: PUSH
34236: LD_VAR 0 4
34240: ARRAY
34241: PPUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 255
34251: PPUSH
34252: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34256: LD_VAR 0 2
34260: PUSH
34261: LD_VAR 0 4
34265: ARRAY
34266: PPUSH
34267: CALL_OW 141
// end ;
34271: GO 34103
34273: POP
34274: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34275: LD_VAR 0 1
34279: PPUSH
34280: LD_EXP 117
34284: PUSH
34285: LD_VAR 0 5
34289: ARRAY
34290: PUSH
34291: LD_INT 0
34293: PLUS
34294: PPUSH
34295: CALL_OW 505
// end ;
34299: LD_VAR 0 3
34303: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34304: LD_INT 0
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
// if not hack in hackTanks then
34310: LD_VAR 0 1
34314: PUSH
34315: LD_EXP 116
34319: IN
34320: NOT
34321: IFFALSE 34325
// exit ;
34323: GO 34565
// index := GetElementIndex ( hackTanks , hack ) ;
34325: LD_ADDR_VAR 0 4
34329: PUSH
34330: LD_EXP 116
34334: PPUSH
34335: LD_VAR 0 1
34339: PPUSH
34340: CALL 41619 0 2
34344: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34345: LD_ADDR_VAR 0 3
34349: PUSH
34350: DOUBLE
34351: LD_EXP 117
34355: PUSH
34356: LD_VAR 0 4
34360: ARRAY
34361: INC
34362: ST_TO_ADDR
34363: LD_INT 1
34365: PUSH
34366: FOR_DOWNTO
34367: IFFALSE 34539
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34369: LD_ADDR_VAR 0 5
34373: PUSH
34374: LD_EXP 117
34378: PUSH
34379: LD_VAR 0 4
34383: ARRAY
34384: PUSH
34385: LD_VAR 0 3
34389: ARRAY
34390: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34391: LD_VAR 0 5
34395: PUSH
34396: LD_INT 1
34398: ARRAY
34399: PPUSH
34400: CALL_OW 302
34404: NOT
34405: PUSH
34406: LD_VAR 0 5
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PPUSH
34415: CALL_OW 255
34419: PUSH
34420: LD_VAR 0 1
34424: PPUSH
34425: CALL_OW 255
34429: NONEQUAL
34430: OR
34431: IFFALSE 34537
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34433: LD_VAR 0 5
34437: PUSH
34438: LD_INT 1
34440: ARRAY
34441: PPUSH
34442: CALL_OW 305
34446: PUSH
34447: LD_VAR 0 5
34451: PUSH
34452: LD_INT 1
34454: ARRAY
34455: PPUSH
34456: CALL_OW 255
34460: PUSH
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 255
34470: EQUAL
34471: AND
34472: IFFALSE 34496
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34474: LD_VAR 0 5
34478: PUSH
34479: LD_INT 1
34481: ARRAY
34482: PPUSH
34483: LD_VAR 0 5
34487: PUSH
34488: LD_INT 2
34490: ARRAY
34491: PPUSH
34492: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34496: LD_ADDR_EXP 117
34500: PUSH
34501: LD_EXP 117
34505: PPUSH
34506: LD_VAR 0 4
34510: PPUSH
34511: LD_EXP 117
34515: PUSH
34516: LD_VAR 0 4
34520: ARRAY
34521: PPUSH
34522: LD_VAR 0 3
34526: PPUSH
34527: CALL_OW 3
34531: PPUSH
34532: CALL_OW 1
34536: ST_TO_ADDR
// end ; end ;
34537: GO 34366
34539: POP
34540: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_EXP 117
34550: PUSH
34551: LD_VAR 0 4
34555: ARRAY
34556: PUSH
34557: LD_INT 0
34559: PLUS
34560: PPUSH
34561: CALL_OW 505
// end ;
34565: LD_VAR 0 2
34569: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34570: LD_INT 0
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
// if not hack in hackTanks then
34576: LD_VAR 0 1
34580: PUSH
34581: LD_EXP 116
34585: IN
34586: NOT
34587: IFFALSE 34591
// exit ;
34589: GO 34676
// index := GetElementIndex ( hackTanks , hack ) ;
34591: LD_ADDR_VAR 0 5
34595: PUSH
34596: LD_EXP 116
34600: PPUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL 41619 0 2
34610: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34611: LD_ADDR_VAR 0 4
34615: PUSH
34616: DOUBLE
34617: LD_INT 1
34619: DEC
34620: ST_TO_ADDR
34621: LD_EXP 117
34625: PUSH
34626: LD_VAR 0 5
34630: ARRAY
34631: PUSH
34632: FOR_TO
34633: IFFALSE 34674
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34635: LD_EXP 117
34639: PUSH
34640: LD_VAR 0 5
34644: ARRAY
34645: PUSH
34646: LD_VAR 0 4
34650: ARRAY
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PUSH
34656: LD_VAR 0 2
34660: EQUAL
34661: IFFALSE 34672
// KillUnit ( vehicle ) ;
34663: LD_VAR 0 2
34667: PPUSH
34668: CALL_OW 66
34672: GO 34632
34674: POP
34675: POP
// end ;
34676: LD_VAR 0 3
34680: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34681: LD_EXP 121
34685: NOT
34686: IFFALSE 34721
34688: GO 34690
34690: DISABLE
// begin initMiner := true ;
34691: LD_ADDR_EXP 121
34695: PUSH
34696: LD_INT 1
34698: ST_TO_ADDR
// minersList := [ ] ;
34699: LD_ADDR_EXP 122
34703: PUSH
34704: EMPTY
34705: ST_TO_ADDR
// minerMinesList := [ ] ;
34706: LD_ADDR_EXP 123
34710: PUSH
34711: EMPTY
34712: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34713: LD_ADDR_EXP 124
34717: PUSH
34718: LD_INT 5
34720: ST_TO_ADDR
// end ;
34721: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34722: LD_EXP 121
34726: PUSH
34727: LD_INT 34
34729: PUSH
34730: LD_EXP 43
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PPUSH
34739: CALL_OW 69
34743: AND
34744: IFFALSE 35207
34746: GO 34748
34748: DISABLE
34749: LD_INT 0
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
// begin enable ;
34755: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34756: LD_ADDR_VAR 0 1
34760: PUSH
34761: LD_INT 34
34763: PUSH
34764: LD_EXP 43
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 69
34777: PUSH
34778: FOR_IN
34779: IFFALSE 34851
// begin if not i in minersList then
34781: LD_VAR 0 1
34785: PUSH
34786: LD_EXP 122
34790: IN
34791: NOT
34792: IFFALSE 34849
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34794: LD_ADDR_EXP 122
34798: PUSH
34799: LD_EXP 122
34803: PPUSH
34804: LD_EXP 122
34808: PUSH
34809: LD_INT 1
34811: PLUS
34812: PPUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: CALL_OW 1
34822: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34823: LD_ADDR_EXP 123
34827: PUSH
34828: LD_EXP 123
34832: PPUSH
34833: LD_EXP 123
34837: PUSH
34838: LD_INT 1
34840: PLUS
34841: PPUSH
34842: EMPTY
34843: PPUSH
34844: CALL_OW 1
34848: ST_TO_ADDR
// end end ;
34849: GO 34778
34851: POP
34852: POP
// for i := minerMinesList downto 1 do
34853: LD_ADDR_VAR 0 1
34857: PUSH
34858: DOUBLE
34859: LD_EXP 123
34863: INC
34864: ST_TO_ADDR
34865: LD_INT 1
34867: PUSH
34868: FOR_DOWNTO
34869: IFFALSE 35205
// begin if IsLive ( minersList [ i ] ) then
34871: LD_EXP 122
34875: PUSH
34876: LD_VAR 0 1
34880: ARRAY
34881: PPUSH
34882: CALL_OW 300
34886: IFFALSE 34914
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34888: LD_EXP 122
34892: PUSH
34893: LD_VAR 0 1
34897: ARRAY
34898: PPUSH
34899: LD_EXP 123
34903: PUSH
34904: LD_VAR 0 1
34908: ARRAY
34909: PPUSH
34910: CALL_OW 505
// if not minerMinesList [ i ] then
34914: LD_EXP 123
34918: PUSH
34919: LD_VAR 0 1
34923: ARRAY
34924: NOT
34925: IFFALSE 34929
// continue ;
34927: GO 34868
// for j := minerMinesList [ i ] downto 1 do
34929: LD_ADDR_VAR 0 2
34933: PUSH
34934: DOUBLE
34935: LD_EXP 123
34939: PUSH
34940: LD_VAR 0 1
34944: ARRAY
34945: INC
34946: ST_TO_ADDR
34947: LD_INT 1
34949: PUSH
34950: FOR_DOWNTO
34951: IFFALSE 35201
// begin side := GetSide ( minersList [ i ] ) ;
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_EXP 122
34962: PUSH
34963: LD_VAR 0 1
34967: ARRAY
34968: PPUSH
34969: CALL_OW 255
34973: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34974: LD_ADDR_VAR 0 4
34978: PUSH
34979: LD_EXP 123
34983: PUSH
34984: LD_VAR 0 1
34988: ARRAY
34989: PUSH
34990: LD_VAR 0 2
34994: ARRAY
34995: PUSH
34996: LD_INT 1
34998: ARRAY
34999: PPUSH
35000: LD_EXP 123
35004: PUSH
35005: LD_VAR 0 1
35009: ARRAY
35010: PUSH
35011: LD_VAR 0 2
35015: ARRAY
35016: PUSH
35017: LD_INT 2
35019: ARRAY
35020: PPUSH
35021: CALL_OW 428
35025: ST_TO_ADDR
// if not tmp then
35026: LD_VAR 0 4
35030: NOT
35031: IFFALSE 35035
// continue ;
35033: GO 34950
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35035: LD_VAR 0 4
35039: PUSH
35040: LD_INT 81
35042: PUSH
35043: LD_VAR 0 3
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PPUSH
35052: CALL_OW 69
35056: IN
35057: PUSH
35058: LD_EXP 123
35062: PUSH
35063: LD_VAR 0 1
35067: ARRAY
35068: PUSH
35069: LD_VAR 0 2
35073: ARRAY
35074: PUSH
35075: LD_INT 1
35077: ARRAY
35078: PPUSH
35079: LD_EXP 123
35083: PUSH
35084: LD_VAR 0 1
35088: ARRAY
35089: PUSH
35090: LD_VAR 0 2
35094: ARRAY
35095: PUSH
35096: LD_INT 2
35098: ARRAY
35099: PPUSH
35100: CALL_OW 458
35104: AND
35105: IFFALSE 35199
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35107: LD_EXP 123
35111: PUSH
35112: LD_VAR 0 1
35116: ARRAY
35117: PUSH
35118: LD_VAR 0 2
35122: ARRAY
35123: PUSH
35124: LD_INT 1
35126: ARRAY
35127: PPUSH
35128: LD_EXP 123
35132: PUSH
35133: LD_VAR 0 1
35137: ARRAY
35138: PUSH
35139: LD_VAR 0 2
35143: ARRAY
35144: PUSH
35145: LD_INT 2
35147: ARRAY
35148: PPUSH
35149: LD_VAR 0 3
35153: PPUSH
35154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35158: LD_ADDR_EXP 123
35162: PUSH
35163: LD_EXP 123
35167: PPUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: LD_EXP 123
35177: PUSH
35178: LD_VAR 0 1
35182: ARRAY
35183: PPUSH
35184: LD_VAR 0 2
35188: PPUSH
35189: CALL_OW 3
35193: PPUSH
35194: CALL_OW 1
35198: ST_TO_ADDR
// end ; end ;
35199: GO 34950
35201: POP
35202: POP
// end ;
35203: GO 34868
35205: POP
35206: POP
// end ;
35207: PPOPN 4
35209: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35210: LD_INT 0
35212: PPUSH
35213: PPUSH
// result := false ;
35214: LD_ADDR_VAR 0 4
35218: PUSH
35219: LD_INT 0
35221: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 264
35231: PUSH
35232: LD_EXP 43
35236: EQUAL
35237: NOT
35238: IFFALSE 35242
// exit ;
35240: GO 35482
// index := GetElementIndex ( minersList , unit ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_EXP 122
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL 41619 0 2
35261: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35262: LD_EXP 123
35266: PUSH
35267: LD_VAR 0 5
35271: ARRAY
35272: PUSH
35273: LD_EXP 124
35277: GREATEREQUAL
35278: IFFALSE 35282
// exit ;
35280: GO 35482
// ComMoveXY ( unit , x , y ) ;
35282: LD_VAR 0 1
35286: PPUSH
35287: LD_VAR 0 2
35291: PPUSH
35292: LD_VAR 0 3
35296: PPUSH
35297: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35301: LD_INT 35
35303: PPUSH
35304: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35308: LD_VAR 0 1
35312: PPUSH
35313: LD_VAR 0 2
35317: PPUSH
35318: LD_VAR 0 3
35322: PPUSH
35323: CALL 72905 0 3
35327: NOT
35328: PUSH
35329: LD_VAR 0 1
35333: PPUSH
35334: CALL_OW 314
35338: AND
35339: IFFALSE 35343
// exit ;
35341: GO 35482
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: CALL_OW 428
35357: PUSH
35358: LD_VAR 0 1
35362: EQUAL
35363: PUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 314
35373: NOT
35374: AND
35375: IFFALSE 35301
// PlaySoundXY ( x , y , PlantMine ) ;
35377: LD_VAR 0 2
35381: PPUSH
35382: LD_VAR 0 3
35386: PPUSH
35387: LD_STRING PlantMine
35389: PPUSH
35390: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35394: LD_VAR 0 2
35398: PPUSH
35399: LD_VAR 0 3
35403: PPUSH
35404: LD_VAR 0 1
35408: PPUSH
35409: CALL_OW 255
35413: PPUSH
35414: LD_INT 0
35416: PPUSH
35417: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35421: LD_ADDR_EXP 123
35425: PUSH
35426: LD_EXP 123
35430: PPUSH
35431: LD_VAR 0 5
35435: PUSH
35436: LD_EXP 123
35440: PUSH
35441: LD_VAR 0 5
35445: ARRAY
35446: PUSH
35447: LD_INT 1
35449: PLUS
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PPUSH
35455: LD_VAR 0 2
35459: PUSH
35460: LD_VAR 0 3
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PPUSH
35469: CALL 41834 0 3
35473: ST_TO_ADDR
// result := true ;
35474: LD_ADDR_VAR 0 4
35478: PUSH
35479: LD_INT 1
35481: ST_TO_ADDR
// end ;
35482: LD_VAR 0 4
35486: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35487: LD_INT 0
35489: PPUSH
35490: PPUSH
35491: PPUSH
// if not unit in minersList then
35492: LD_VAR 0 1
35496: PUSH
35497: LD_EXP 122
35501: IN
35502: NOT
35503: IFFALSE 35507
// exit ;
35505: GO 35899
// index := GetElementIndex ( minersList , unit ) ;
35507: LD_ADDR_VAR 0 6
35511: PUSH
35512: LD_EXP 122
35516: PPUSH
35517: LD_VAR 0 1
35521: PPUSH
35522: CALL 41619 0 2
35526: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35527: LD_ADDR_VAR 0 5
35531: PUSH
35532: DOUBLE
35533: LD_EXP 123
35537: PUSH
35538: LD_VAR 0 6
35542: ARRAY
35543: INC
35544: ST_TO_ADDR
35545: LD_INT 1
35547: PUSH
35548: FOR_DOWNTO
35549: IFFALSE 35710
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35551: LD_EXP 123
35555: PUSH
35556: LD_VAR 0 6
35560: ARRAY
35561: PUSH
35562: LD_VAR 0 5
35566: ARRAY
35567: PUSH
35568: LD_INT 1
35570: ARRAY
35571: PUSH
35572: LD_VAR 0 2
35576: EQUAL
35577: PUSH
35578: LD_EXP 123
35582: PUSH
35583: LD_VAR 0 6
35587: ARRAY
35588: PUSH
35589: LD_VAR 0 5
35593: ARRAY
35594: PUSH
35595: LD_INT 2
35597: ARRAY
35598: PUSH
35599: LD_VAR 0 3
35603: EQUAL
35604: AND
35605: IFFALSE 35708
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35607: LD_EXP 123
35611: PUSH
35612: LD_VAR 0 6
35616: ARRAY
35617: PUSH
35618: LD_VAR 0 5
35622: ARRAY
35623: PUSH
35624: LD_INT 1
35626: ARRAY
35627: PPUSH
35628: LD_EXP 123
35632: PUSH
35633: LD_VAR 0 6
35637: ARRAY
35638: PUSH
35639: LD_VAR 0 5
35643: ARRAY
35644: PUSH
35645: LD_INT 2
35647: ARRAY
35648: PPUSH
35649: LD_VAR 0 1
35653: PPUSH
35654: CALL_OW 255
35658: PPUSH
35659: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35663: LD_ADDR_EXP 123
35667: PUSH
35668: LD_EXP 123
35672: PPUSH
35673: LD_VAR 0 6
35677: PPUSH
35678: LD_EXP 123
35682: PUSH
35683: LD_VAR 0 6
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 5
35693: PPUSH
35694: CALL_OW 3
35698: PPUSH
35699: CALL_OW 1
35703: ST_TO_ADDR
// exit ;
35704: POP
35705: POP
35706: GO 35899
// end ; end ;
35708: GO 35548
35710: POP
35711: POP
// for i := minerMinesList [ index ] downto 1 do
35712: LD_ADDR_VAR 0 5
35716: PUSH
35717: DOUBLE
35718: LD_EXP 123
35722: PUSH
35723: LD_VAR 0 6
35727: ARRAY
35728: INC
35729: ST_TO_ADDR
35730: LD_INT 1
35732: PUSH
35733: FOR_DOWNTO
35734: IFFALSE 35897
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35736: LD_EXP 123
35740: PUSH
35741: LD_VAR 0 6
35745: ARRAY
35746: PUSH
35747: LD_VAR 0 5
35751: ARRAY
35752: PUSH
35753: LD_INT 1
35755: ARRAY
35756: PPUSH
35757: LD_EXP 123
35761: PUSH
35762: LD_VAR 0 6
35766: ARRAY
35767: PUSH
35768: LD_VAR 0 5
35772: ARRAY
35773: PUSH
35774: LD_INT 2
35776: ARRAY
35777: PPUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: CALL_OW 298
35792: PUSH
35793: LD_INT 6
35795: LESS
35796: IFFALSE 35895
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35798: LD_EXP 123
35802: PUSH
35803: LD_VAR 0 6
35807: ARRAY
35808: PUSH
35809: LD_VAR 0 5
35813: ARRAY
35814: PUSH
35815: LD_INT 1
35817: ARRAY
35818: PPUSH
35819: LD_EXP 123
35823: PUSH
35824: LD_VAR 0 6
35828: ARRAY
35829: PUSH
35830: LD_VAR 0 5
35834: ARRAY
35835: PUSH
35836: LD_INT 2
35838: ARRAY
35839: PPUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 255
35849: PPUSH
35850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35854: LD_ADDR_EXP 123
35858: PUSH
35859: LD_EXP 123
35863: PPUSH
35864: LD_VAR 0 6
35868: PPUSH
35869: LD_EXP 123
35873: PUSH
35874: LD_VAR 0 6
35878: ARRAY
35879: PPUSH
35880: LD_VAR 0 5
35884: PPUSH
35885: CALL_OW 3
35889: PPUSH
35890: CALL_OW 1
35894: ST_TO_ADDR
// end ; end ;
35895: GO 35733
35897: POP
35898: POP
// end ;
35899: LD_VAR 0 4
35903: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35904: LD_INT 0
35906: PPUSH
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 264
35924: PUSH
35925: LD_EXP 43
35929: EQUAL
35930: NOT
35931: PUSH
35932: LD_VAR 0 1
35936: PUSH
35937: LD_EXP 122
35941: IN
35942: NOT
35943: OR
35944: IFFALSE 35948
// exit ;
35946: GO 36270
// index := GetElementIndex ( minersList , unit ) ;
35948: LD_ADDR_VAR 0 6
35952: PUSH
35953: LD_EXP 122
35957: PPUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL 41619 0 2
35967: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35968: LD_ADDR_VAR 0 8
35972: PUSH
35973: LD_EXP 124
35977: PUSH
35978: LD_EXP 123
35982: PUSH
35983: LD_VAR 0 6
35987: ARRAY
35988: MINUS
35989: ST_TO_ADDR
// if not minesFreeAmount then
35990: LD_VAR 0 8
35994: NOT
35995: IFFALSE 35999
// exit ;
35997: GO 36270
// tmp := [ ] ;
35999: LD_ADDR_VAR 0 7
36003: PUSH
36004: EMPTY
36005: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36006: LD_ADDR_VAR 0 5
36010: PUSH
36011: DOUBLE
36012: LD_INT 1
36014: DEC
36015: ST_TO_ADDR
36016: LD_VAR 0 8
36020: PUSH
36021: FOR_TO
36022: IFFALSE 36217
// begin _d := rand ( 0 , 5 ) ;
36024: LD_ADDR_VAR 0 11
36028: PUSH
36029: LD_INT 0
36031: PPUSH
36032: LD_INT 5
36034: PPUSH
36035: CALL_OW 12
36039: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36040: LD_ADDR_VAR 0 12
36044: PUSH
36045: LD_INT 2
36047: PPUSH
36048: LD_INT 6
36050: PPUSH
36051: CALL_OW 12
36055: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36056: LD_ADDR_VAR 0 9
36060: PUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: LD_VAR 0 11
36070: PPUSH
36071: LD_VAR 0 12
36075: PPUSH
36076: CALL_OW 272
36080: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36081: LD_ADDR_VAR 0 10
36085: PUSH
36086: LD_VAR 0 3
36090: PPUSH
36091: LD_VAR 0 11
36095: PPUSH
36096: LD_VAR 0 12
36100: PPUSH
36101: CALL_OW 273
36105: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36106: LD_VAR 0 9
36110: PPUSH
36111: LD_VAR 0 10
36115: PPUSH
36116: CALL_OW 488
36120: PUSH
36121: LD_VAR 0 9
36125: PUSH
36126: LD_VAR 0 10
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_VAR 0 7
36139: IN
36140: NOT
36141: AND
36142: PUSH
36143: LD_VAR 0 9
36147: PPUSH
36148: LD_VAR 0 10
36152: PPUSH
36153: CALL_OW 458
36157: NOT
36158: AND
36159: IFFALSE 36201
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36161: LD_ADDR_VAR 0 7
36165: PUSH
36166: LD_VAR 0 7
36170: PPUSH
36171: LD_VAR 0 7
36175: PUSH
36176: LD_INT 1
36178: PLUS
36179: PPUSH
36180: LD_VAR 0 9
36184: PUSH
36185: LD_VAR 0 10
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PPUSH
36194: CALL_OW 1
36198: ST_TO_ADDR
36199: GO 36215
// i := i - 1 ;
36201: LD_ADDR_VAR 0 5
36205: PUSH
36206: LD_VAR 0 5
36210: PUSH
36211: LD_INT 1
36213: MINUS
36214: ST_TO_ADDR
// end ;
36215: GO 36021
36217: POP
36218: POP
// for i in tmp do
36219: LD_ADDR_VAR 0 5
36223: PUSH
36224: LD_VAR 0 7
36228: PUSH
36229: FOR_IN
36230: IFFALSE 36268
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36232: LD_VAR 0 1
36236: PPUSH
36237: LD_VAR 0 5
36241: PUSH
36242: LD_INT 1
36244: ARRAY
36245: PPUSH
36246: LD_VAR 0 5
36250: PUSH
36251: LD_INT 2
36253: ARRAY
36254: PPUSH
36255: CALL 35210 0 3
36259: NOT
36260: IFFALSE 36266
// exit ;
36262: POP
36263: POP
36264: GO 36270
36266: GO 36229
36268: POP
36269: POP
// end ;
36270: LD_VAR 0 4
36274: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36275: LD_INT 0
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
// if not GetClass ( unit ) = class_sniper then
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 257
36293: PUSH
36294: LD_INT 5
36296: EQUAL
36297: NOT
36298: IFFALSE 36302
// exit ;
36300: GO 36690
// dist := 8 ;
36302: LD_ADDR_VAR 0 5
36306: PUSH
36307: LD_INT 8
36309: ST_TO_ADDR
// viewRange := 12 ;
36310: LD_ADDR_VAR 0 7
36314: PUSH
36315: LD_INT 12
36317: ST_TO_ADDR
// side := GetSide ( unit ) ;
36318: LD_ADDR_VAR 0 6
36322: PUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: CALL_OW 255
36332: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36333: LD_INT 61
36335: PPUSH
36336: LD_VAR 0 6
36340: PPUSH
36341: CALL_OW 321
36345: PUSH
36346: LD_INT 2
36348: EQUAL
36349: IFFALSE 36359
// viewRange := 16 ;
36351: LD_ADDR_VAR 0 7
36355: PUSH
36356: LD_INT 16
36358: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36359: LD_VAR 0 1
36363: PPUSH
36364: LD_VAR 0 2
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: CALL_OW 297
36378: PUSH
36379: LD_VAR 0 5
36383: GREATER
36384: IFFALSE 36463
// begin ComMoveXY ( unit , x , y ) ;
36386: LD_VAR 0 1
36390: PPUSH
36391: LD_VAR 0 2
36395: PPUSH
36396: LD_VAR 0 3
36400: PPUSH
36401: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36405: LD_INT 35
36407: PPUSH
36408: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36412: LD_VAR 0 1
36416: PPUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: LD_VAR 0 3
36426: PPUSH
36427: CALL 72905 0 3
36431: NOT
36432: IFFALSE 36436
// exit ;
36434: GO 36690
// until GetDistUnitXY ( unit , x , y ) < dist ;
36436: LD_VAR 0 1
36440: PPUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: LD_VAR 0 3
36450: PPUSH
36451: CALL_OW 297
36455: PUSH
36456: LD_VAR 0 5
36460: LESS
36461: IFFALSE 36405
// end ; ComTurnXY ( unit , x , y ) ;
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_VAR 0 2
36472: PPUSH
36473: LD_VAR 0 3
36477: PPUSH
36478: CALL_OW 118
// wait ( 5 ) ;
36482: LD_INT 5
36484: PPUSH
36485: CALL_OW 67
// _d := GetDir ( unit ) ;
36489: LD_ADDR_VAR 0 10
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 254
36503: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36504: LD_ADDR_VAR 0 8
36508: PUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 250
36518: PPUSH
36519: LD_VAR 0 10
36523: PPUSH
36524: LD_VAR 0 5
36528: PPUSH
36529: CALL_OW 272
36533: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36534: LD_ADDR_VAR 0 9
36538: PUSH
36539: LD_VAR 0 1
36543: PPUSH
36544: CALL_OW 251
36548: PPUSH
36549: LD_VAR 0 10
36553: PPUSH
36554: LD_VAR 0 5
36558: PPUSH
36559: CALL_OW 273
36563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36564: LD_VAR 0 8
36568: PPUSH
36569: LD_VAR 0 9
36573: PPUSH
36574: CALL_OW 488
36578: NOT
36579: IFFALSE 36583
// exit ;
36581: GO 36690
// ComAnimCustom ( unit , 1 ) ;
36583: LD_VAR 0 1
36587: PPUSH
36588: LD_INT 1
36590: PPUSH
36591: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36595: LD_VAR 0 8
36599: PPUSH
36600: LD_VAR 0 9
36604: PPUSH
36605: LD_VAR 0 6
36609: PPUSH
36610: LD_VAR 0 7
36614: PPUSH
36615: CALL_OW 330
// repeat wait ( 1 ) ;
36619: LD_INT 1
36621: PPUSH
36622: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 316
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 314
36645: OR
36646: PUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL_OW 302
36656: NOT
36657: OR
36658: PUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL_OW 301
36668: OR
36669: IFFALSE 36619
// RemoveSeeing ( _x , _y , side ) ;
36671: LD_VAR 0 8
36675: PPUSH
36676: LD_VAR 0 9
36680: PPUSH
36681: LD_VAR 0 6
36685: PPUSH
36686: CALL_OW 331
// end ; end_of_file
36690: LD_VAR 0 4
36694: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36695: LD_INT 0
36697: PPUSH
36698: PPUSH
// if exist_mode then
36699: LD_VAR 0 2
36703: IFFALSE 36728
// unit := CreateCharacter ( prefix & ident ) else
36705: LD_ADDR_VAR 0 5
36709: PUSH
36710: LD_VAR 0 3
36714: PUSH
36715: LD_VAR 0 1
36719: STR
36720: PPUSH
36721: CALL_OW 34
36725: ST_TO_ADDR
36726: GO 36743
// unit := NewCharacter ( ident ) ;
36728: LD_ADDR_VAR 0 5
36732: PUSH
36733: LD_VAR 0 1
36737: PPUSH
36738: CALL_OW 25
36742: ST_TO_ADDR
// result := unit ;
36743: LD_ADDR_VAR 0 4
36747: PUSH
36748: LD_VAR 0 5
36752: ST_TO_ADDR
// end ;
36753: LD_VAR 0 4
36757: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36758: LD_INT 0
36760: PPUSH
36761: PPUSH
// if not side or not nation then
36762: LD_VAR 0 1
36766: NOT
36767: PUSH
36768: LD_VAR 0 2
36772: NOT
36773: OR
36774: IFFALSE 36778
// exit ;
36776: GO 37546
// case nation of nation_american :
36778: LD_VAR 0 2
36782: PUSH
36783: LD_INT 1
36785: DOUBLE
36786: EQUAL
36787: IFTRUE 36791
36789: GO 37005
36791: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36792: LD_ADDR_VAR 0 4
36796: PUSH
36797: LD_INT 35
36799: PUSH
36800: LD_INT 45
36802: PUSH
36803: LD_INT 46
36805: PUSH
36806: LD_INT 47
36808: PUSH
36809: LD_INT 82
36811: PUSH
36812: LD_INT 83
36814: PUSH
36815: LD_INT 84
36817: PUSH
36818: LD_INT 85
36820: PUSH
36821: LD_INT 86
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 6
36832: PUSH
36833: LD_INT 15
36835: PUSH
36836: LD_INT 16
36838: PUSH
36839: LD_INT 7
36841: PUSH
36842: LD_INT 12
36844: PUSH
36845: LD_INT 13
36847: PUSH
36848: LD_INT 10
36850: PUSH
36851: LD_INT 14
36853: PUSH
36854: LD_INT 20
36856: PUSH
36857: LD_INT 21
36859: PUSH
36860: LD_INT 22
36862: PUSH
36863: LD_INT 25
36865: PUSH
36866: LD_INT 32
36868: PUSH
36869: LD_INT 27
36871: PUSH
36872: LD_INT 36
36874: PUSH
36875: LD_INT 69
36877: PUSH
36878: LD_INT 39
36880: PUSH
36881: LD_INT 34
36883: PUSH
36884: LD_INT 40
36886: PUSH
36887: LD_INT 48
36889: PUSH
36890: LD_INT 49
36892: PUSH
36893: LD_INT 50
36895: PUSH
36896: LD_INT 51
36898: PUSH
36899: LD_INT 52
36901: PUSH
36902: LD_INT 53
36904: PUSH
36905: LD_INT 54
36907: PUSH
36908: LD_INT 55
36910: PUSH
36911: LD_INT 56
36913: PUSH
36914: LD_INT 57
36916: PUSH
36917: LD_INT 58
36919: PUSH
36920: LD_INT 59
36922: PUSH
36923: LD_INT 60
36925: PUSH
36926: LD_INT 61
36928: PUSH
36929: LD_INT 62
36931: PUSH
36932: LD_INT 80
36934: PUSH
36935: LD_INT 82
36937: PUSH
36938: LD_INT 83
36940: PUSH
36941: LD_INT 84
36943: PUSH
36944: LD_INT 85
36946: PUSH
36947: LD_INT 86
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: ST_TO_ADDR
37003: GO 37470
37005: LD_INT 2
37007: DOUBLE
37008: EQUAL
37009: IFTRUE 37013
37011: GO 37239
37013: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37014: LD_ADDR_VAR 0 4
37018: PUSH
37019: LD_INT 35
37021: PUSH
37022: LD_INT 45
37024: PUSH
37025: LD_INT 46
37027: PUSH
37028: LD_INT 47
37030: PUSH
37031: LD_INT 82
37033: PUSH
37034: LD_INT 83
37036: PUSH
37037: LD_INT 84
37039: PUSH
37040: LD_INT 85
37042: PUSH
37043: LD_INT 87
37045: PUSH
37046: LD_INT 70
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: LD_INT 11
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: LD_INT 5
37063: PUSH
37064: LD_INT 6
37066: PUSH
37067: LD_INT 15
37069: PUSH
37070: LD_INT 18
37072: PUSH
37073: LD_INT 7
37075: PUSH
37076: LD_INT 17
37078: PUSH
37079: LD_INT 8
37081: PUSH
37082: LD_INT 20
37084: PUSH
37085: LD_INT 21
37087: PUSH
37088: LD_INT 22
37090: PUSH
37091: LD_INT 72
37093: PUSH
37094: LD_INT 26
37096: PUSH
37097: LD_INT 69
37099: PUSH
37100: LD_INT 39
37102: PUSH
37103: LD_INT 40
37105: PUSH
37106: LD_INT 41
37108: PUSH
37109: LD_INT 42
37111: PUSH
37112: LD_INT 43
37114: PUSH
37115: LD_INT 48
37117: PUSH
37118: LD_INT 49
37120: PUSH
37121: LD_INT 50
37123: PUSH
37124: LD_INT 51
37126: PUSH
37127: LD_INT 52
37129: PUSH
37130: LD_INT 53
37132: PUSH
37133: LD_INT 54
37135: PUSH
37136: LD_INT 55
37138: PUSH
37139: LD_INT 56
37141: PUSH
37142: LD_INT 60
37144: PUSH
37145: LD_INT 61
37147: PUSH
37148: LD_INT 62
37150: PUSH
37151: LD_INT 66
37153: PUSH
37154: LD_INT 67
37156: PUSH
37157: LD_INT 68
37159: PUSH
37160: LD_INT 81
37162: PUSH
37163: LD_INT 82
37165: PUSH
37166: LD_INT 83
37168: PUSH
37169: LD_INT 84
37171: PUSH
37172: LD_INT 85
37174: PUSH
37175: LD_INT 87
37177: PUSH
37178: LD_INT 88
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
37237: GO 37470
37239: LD_INT 3
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37469
37247: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37248: LD_ADDR_VAR 0 4
37252: PUSH
37253: LD_INT 46
37255: PUSH
37256: LD_INT 47
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: LD_INT 82
37267: PUSH
37268: LD_INT 83
37270: PUSH
37271: LD_INT 84
37273: PUSH
37274: LD_INT 85
37276: PUSH
37277: LD_INT 86
37279: PUSH
37280: LD_INT 11
37282: PUSH
37283: LD_INT 9
37285: PUSH
37286: LD_INT 20
37288: PUSH
37289: LD_INT 19
37291: PUSH
37292: LD_INT 21
37294: PUSH
37295: LD_INT 24
37297: PUSH
37298: LD_INT 22
37300: PUSH
37301: LD_INT 25
37303: PUSH
37304: LD_INT 28
37306: PUSH
37307: LD_INT 29
37309: PUSH
37310: LD_INT 30
37312: PUSH
37313: LD_INT 31
37315: PUSH
37316: LD_INT 37
37318: PUSH
37319: LD_INT 38
37321: PUSH
37322: LD_INT 32
37324: PUSH
37325: LD_INT 27
37327: PUSH
37328: LD_INT 33
37330: PUSH
37331: LD_INT 69
37333: PUSH
37334: LD_INT 39
37336: PUSH
37337: LD_INT 34
37339: PUSH
37340: LD_INT 40
37342: PUSH
37343: LD_INT 71
37345: PUSH
37346: LD_INT 23
37348: PUSH
37349: LD_INT 44
37351: PUSH
37352: LD_INT 48
37354: PUSH
37355: LD_INT 49
37357: PUSH
37358: LD_INT 50
37360: PUSH
37361: LD_INT 51
37363: PUSH
37364: LD_INT 52
37366: PUSH
37367: LD_INT 53
37369: PUSH
37370: LD_INT 54
37372: PUSH
37373: LD_INT 55
37375: PUSH
37376: LD_INT 56
37378: PUSH
37379: LD_INT 57
37381: PUSH
37382: LD_INT 58
37384: PUSH
37385: LD_INT 59
37387: PUSH
37388: LD_INT 63
37390: PUSH
37391: LD_INT 64
37393: PUSH
37394: LD_INT 65
37396: PUSH
37397: LD_INT 82
37399: PUSH
37400: LD_INT 83
37402: PUSH
37403: LD_INT 84
37405: PUSH
37406: LD_INT 85
37408: PUSH
37409: LD_INT 86
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: ST_TO_ADDR
37467: GO 37470
37469: POP
// if state > - 1 and state < 3 then
37470: LD_VAR 0 3
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: GREATER
37479: PUSH
37480: LD_VAR 0 3
37484: PUSH
37485: LD_INT 3
37487: LESS
37488: AND
37489: IFFALSE 37546
// for i in result do
37491: LD_ADDR_VAR 0 5
37495: PUSH
37496: LD_VAR 0 4
37500: PUSH
37501: FOR_IN
37502: IFFALSE 37544
// if GetTech ( i , side ) <> state then
37504: LD_VAR 0 5
37508: PPUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 321
37518: PUSH
37519: LD_VAR 0 3
37523: NONEQUAL
37524: IFFALSE 37542
// result := result diff i ;
37526: LD_ADDR_VAR 0 4
37530: PUSH
37531: LD_VAR 0 4
37535: PUSH
37536: LD_VAR 0 5
37540: DIFF
37541: ST_TO_ADDR
37542: GO 37501
37544: POP
37545: POP
// end ;
37546: LD_VAR 0 4
37550: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37551: LD_INT 0
37553: PPUSH
37554: PPUSH
37555: PPUSH
// result := true ;
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: LD_INT 1
37563: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37564: LD_ADDR_VAR 0 5
37568: PUSH
37569: LD_VAR 0 2
37573: PPUSH
37574: CALL_OW 480
37578: ST_TO_ADDR
// if not tmp then
37579: LD_VAR 0 5
37583: NOT
37584: IFFALSE 37588
// exit ;
37586: GO 37637
// for i in tmp do
37588: LD_ADDR_VAR 0 4
37592: PUSH
37593: LD_VAR 0 5
37597: PUSH
37598: FOR_IN
37599: IFFALSE 37635
// if GetTech ( i , side ) <> state_researched then
37601: LD_VAR 0 4
37605: PPUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: CALL_OW 321
37615: PUSH
37616: LD_INT 2
37618: NONEQUAL
37619: IFFALSE 37633
// begin result := false ;
37621: LD_ADDR_VAR 0 3
37625: PUSH
37626: LD_INT 0
37628: ST_TO_ADDR
// exit ;
37629: POP
37630: POP
37631: GO 37637
// end ;
37633: GO 37598
37635: POP
37636: POP
// end ;
37637: LD_VAR 0 3
37641: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37657: LD_VAR 0 1
37661: NOT
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 257
37672: PUSH
37673: LD_INT 9
37675: NONEQUAL
37676: OR
37677: IFFALSE 37681
// exit ;
37679: GO 38254
// side := GetSide ( unit ) ;
37681: LD_ADDR_VAR 0 9
37685: PUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 255
37695: ST_TO_ADDR
// tech_space := tech_spacanom ;
37696: LD_ADDR_VAR 0 12
37700: PUSH
37701: LD_INT 29
37703: ST_TO_ADDR
// tech_time := tech_taurad ;
37704: LD_ADDR_VAR 0 13
37708: PUSH
37709: LD_INT 28
37711: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37712: LD_ADDR_VAR 0 11
37716: PUSH
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 310
37726: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37727: LD_VAR 0 11
37731: PPUSH
37732: CALL_OW 247
37736: PUSH
37737: LD_INT 2
37739: EQUAL
37740: IFFALSE 37744
// exit ;
37742: GO 38254
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37744: LD_ADDR_VAR 0 8
37748: PUSH
37749: LD_INT 81
37751: PUSH
37752: LD_VAR 0 9
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 3
37763: PUSH
37764: LD_INT 21
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PPUSH
37782: CALL_OW 69
37786: ST_TO_ADDR
// if not tmp then
37787: LD_VAR 0 8
37791: NOT
37792: IFFALSE 37796
// exit ;
37794: GO 38254
// if in_unit then
37796: LD_VAR 0 11
37800: IFFALSE 37824
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37802: LD_ADDR_VAR 0 10
37806: PUSH
37807: LD_VAR 0 8
37811: PPUSH
37812: LD_VAR 0 11
37816: PPUSH
37817: CALL_OW 74
37821: ST_TO_ADDR
37822: GO 37844
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37824: LD_ADDR_VAR 0 10
37828: PUSH
37829: LD_VAR 0 8
37833: PPUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 74
37843: ST_TO_ADDR
// if not enemy then
37844: LD_VAR 0 10
37848: NOT
37849: IFFALSE 37853
// exit ;
37851: GO 38254
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37853: LD_VAR 0 11
37857: PUSH
37858: LD_VAR 0 11
37862: PPUSH
37863: LD_VAR 0 10
37867: PPUSH
37868: CALL_OW 296
37872: PUSH
37873: LD_INT 13
37875: GREATER
37876: AND
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: LD_VAR 0 10
37887: PPUSH
37888: CALL_OW 296
37892: PUSH
37893: LD_INT 12
37895: GREATER
37896: OR
37897: IFFALSE 37901
// exit ;
37899: GO 38254
// missile := [ 1 ] ;
37901: LD_ADDR_VAR 0 14
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37912: LD_VAR 0 9
37916: PPUSH
37917: LD_VAR 0 12
37921: PPUSH
37922: CALL_OW 325
37926: IFFALSE 37955
// missile := Replace ( missile , missile + 1 , 2 ) ;
37928: LD_ADDR_VAR 0 14
37932: PUSH
37933: LD_VAR 0 14
37937: PPUSH
37938: LD_VAR 0 14
37942: PUSH
37943: LD_INT 1
37945: PLUS
37946: PPUSH
37947: LD_INT 2
37949: PPUSH
37950: CALL_OW 1
37954: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37955: LD_VAR 0 9
37959: PPUSH
37960: LD_VAR 0 13
37964: PPUSH
37965: CALL_OW 325
37969: PUSH
37970: LD_VAR 0 10
37974: PPUSH
37975: CALL_OW 255
37979: PPUSH
37980: LD_VAR 0 13
37984: PPUSH
37985: CALL_OW 325
37989: NOT
37990: AND
37991: IFFALSE 38020
// missile := Replace ( missile , missile + 1 , 3 ) ;
37993: LD_ADDR_VAR 0 14
37997: PUSH
37998: LD_VAR 0 14
38002: PPUSH
38003: LD_VAR 0 14
38007: PUSH
38008: LD_INT 1
38010: PLUS
38011: PPUSH
38012: LD_INT 3
38014: PPUSH
38015: CALL_OW 1
38019: ST_TO_ADDR
// if missile < 2 then
38020: LD_VAR 0 14
38024: PUSH
38025: LD_INT 2
38027: LESS
38028: IFFALSE 38032
// exit ;
38030: GO 38254
// x := GetX ( enemy ) ;
38032: LD_ADDR_VAR 0 4
38036: PUSH
38037: LD_VAR 0 10
38041: PPUSH
38042: CALL_OW 250
38046: ST_TO_ADDR
// y := GetY ( enemy ) ;
38047: LD_ADDR_VAR 0 5
38051: PUSH
38052: LD_VAR 0 10
38056: PPUSH
38057: CALL_OW 251
38061: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38062: LD_ADDR_VAR 0 6
38066: PUSH
38067: LD_VAR 0 4
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PPUSH
38076: LD_INT 1
38078: PPUSH
38079: CALL_OW 12
38083: PLUS
38084: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38085: LD_ADDR_VAR 0 7
38089: PUSH
38090: LD_VAR 0 5
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PPUSH
38099: LD_INT 1
38101: PPUSH
38102: CALL_OW 12
38106: PLUS
38107: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38108: LD_VAR 0 6
38112: PPUSH
38113: LD_VAR 0 7
38117: PPUSH
38118: CALL_OW 488
38122: NOT
38123: IFFALSE 38145
// begin _x := x ;
38125: LD_ADDR_VAR 0 6
38129: PUSH
38130: LD_VAR 0 4
38134: ST_TO_ADDR
// _y := y ;
38135: LD_ADDR_VAR 0 7
38139: PUSH
38140: LD_VAR 0 5
38144: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38145: LD_ADDR_VAR 0 3
38149: PUSH
38150: LD_INT 1
38152: PPUSH
38153: LD_VAR 0 14
38157: PPUSH
38158: CALL_OW 12
38162: ST_TO_ADDR
// case i of 1 :
38163: LD_VAR 0 3
38167: PUSH
38168: LD_INT 1
38170: DOUBLE
38171: EQUAL
38172: IFTRUE 38176
38174: GO 38193
38176: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38177: LD_VAR 0 1
38181: PPUSH
38182: LD_VAR 0 10
38186: PPUSH
38187: CALL_OW 115
38191: GO 38254
38193: LD_INT 2
38195: DOUBLE
38196: EQUAL
38197: IFTRUE 38201
38199: GO 38223
38201: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38202: LD_VAR 0 1
38206: PPUSH
38207: LD_VAR 0 6
38211: PPUSH
38212: LD_VAR 0 7
38216: PPUSH
38217: CALL_OW 153
38221: GO 38254
38223: LD_INT 3
38225: DOUBLE
38226: EQUAL
38227: IFTRUE 38231
38229: GO 38253
38231: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38232: LD_VAR 0 1
38236: PPUSH
38237: LD_VAR 0 6
38241: PPUSH
38242: LD_VAR 0 7
38246: PPUSH
38247: CALL_OW 154
38251: GO 38254
38253: POP
// end ;
38254: LD_VAR 0 2
38258: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38259: LD_INT 0
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
38265: PPUSH
38266: PPUSH
// if not unit or not building then
38267: LD_VAR 0 1
38271: NOT
38272: PUSH
38273: LD_VAR 0 2
38277: NOT
38278: OR
38279: IFFALSE 38283
// exit ;
38281: GO 38441
// x := GetX ( building ) ;
38283: LD_ADDR_VAR 0 5
38287: PUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: CALL_OW 250
38297: ST_TO_ADDR
// y := GetY ( building ) ;
38298: LD_ADDR_VAR 0 6
38302: PUSH
38303: LD_VAR 0 2
38307: PPUSH
38308: CALL_OW 251
38312: ST_TO_ADDR
// for i = 0 to 5 do
38313: LD_ADDR_VAR 0 4
38317: PUSH
38318: DOUBLE
38319: LD_INT 0
38321: DEC
38322: ST_TO_ADDR
38323: LD_INT 5
38325: PUSH
38326: FOR_TO
38327: IFFALSE 38439
// begin _x := ShiftX ( x , i , 3 ) ;
38329: LD_ADDR_VAR 0 7
38333: PUSH
38334: LD_VAR 0 5
38338: PPUSH
38339: LD_VAR 0 4
38343: PPUSH
38344: LD_INT 3
38346: PPUSH
38347: CALL_OW 272
38351: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38352: LD_ADDR_VAR 0 8
38356: PUSH
38357: LD_VAR 0 6
38361: PPUSH
38362: LD_VAR 0 4
38366: PPUSH
38367: LD_INT 3
38369: PPUSH
38370: CALL_OW 273
38374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38375: LD_VAR 0 7
38379: PPUSH
38380: LD_VAR 0 8
38384: PPUSH
38385: CALL_OW 488
38389: NOT
38390: IFFALSE 38394
// continue ;
38392: GO 38326
// if HexInfo ( _x , _y ) = 0 then
38394: LD_VAR 0 7
38398: PPUSH
38399: LD_VAR 0 8
38403: PPUSH
38404: CALL_OW 428
38408: PUSH
38409: LD_INT 0
38411: EQUAL
38412: IFFALSE 38437
// begin ComMoveXY ( unit , _x , _y ) ;
38414: LD_VAR 0 1
38418: PPUSH
38419: LD_VAR 0 7
38423: PPUSH
38424: LD_VAR 0 8
38428: PPUSH
38429: CALL_OW 111
// exit ;
38433: POP
38434: POP
38435: GO 38441
// end ; end ;
38437: GO 38326
38439: POP
38440: POP
// end ;
38441: LD_VAR 0 3
38445: RET
// export function ScanBase ( side , base_area ) ; begin
38446: LD_INT 0
38448: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38449: LD_ADDR_VAR 0 3
38453: PUSH
38454: LD_VAR 0 2
38458: PPUSH
38459: LD_INT 81
38461: PUSH
38462: LD_VAR 0 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PPUSH
38471: CALL_OW 70
38475: ST_TO_ADDR
// end ;
38476: LD_VAR 0 3
38480: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38481: LD_INT 0
38483: PPUSH
38484: PPUSH
38485: PPUSH
38486: PPUSH
// result := false ;
38487: LD_ADDR_VAR 0 2
38491: PUSH
38492: LD_INT 0
38494: ST_TO_ADDR
// side := GetSide ( unit ) ;
38495: LD_ADDR_VAR 0 3
38499: PUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 255
38509: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38510: LD_ADDR_VAR 0 4
38514: PUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 248
38524: ST_TO_ADDR
// case nat of 1 :
38525: LD_VAR 0 4
38529: PUSH
38530: LD_INT 1
38532: DOUBLE
38533: EQUAL
38534: IFTRUE 38538
38536: GO 38549
38538: POP
// tech := tech_lassight ; 2 :
38539: LD_ADDR_VAR 0 5
38543: PUSH
38544: LD_INT 12
38546: ST_TO_ADDR
38547: GO 38588
38549: LD_INT 2
38551: DOUBLE
38552: EQUAL
38553: IFTRUE 38557
38555: GO 38568
38557: POP
// tech := tech_mortar ; 3 :
38558: LD_ADDR_VAR 0 5
38562: PUSH
38563: LD_INT 41
38565: ST_TO_ADDR
38566: GO 38588
38568: LD_INT 3
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38576
38574: GO 38587
38576: POP
// tech := tech_bazooka ; end ;
38577: LD_ADDR_VAR 0 5
38581: PUSH
38582: LD_INT 44
38584: ST_TO_ADDR
38585: GO 38588
38587: POP
// if Researched ( side , tech ) then
38588: LD_VAR 0 3
38592: PPUSH
38593: LD_VAR 0 5
38597: PPUSH
38598: CALL_OW 325
38602: IFFALSE 38629
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38604: LD_ADDR_VAR 0 2
38608: PUSH
38609: LD_INT 5
38611: PUSH
38612: LD_INT 8
38614: PUSH
38615: LD_INT 9
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: LD_VAR 0 4
38627: ARRAY
38628: ST_TO_ADDR
// end ;
38629: LD_VAR 0 2
38633: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38634: LD_INT 0
38636: PPUSH
38637: PPUSH
38638: PPUSH
// if not mines then
38639: LD_VAR 0 2
38643: NOT
38644: IFFALSE 38648
// exit ;
38646: GO 38792
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38648: LD_ADDR_VAR 0 5
38652: PUSH
38653: LD_INT 81
38655: PUSH
38656: LD_VAR 0 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 3
38667: PUSH
38668: LD_INT 21
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PPUSH
38686: CALL_OW 69
38690: ST_TO_ADDR
// for i in mines do
38691: LD_ADDR_VAR 0 4
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: FOR_IN
38702: IFFALSE 38790
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38704: LD_VAR 0 4
38708: PUSH
38709: LD_INT 1
38711: ARRAY
38712: PPUSH
38713: LD_VAR 0 4
38717: PUSH
38718: LD_INT 2
38720: ARRAY
38721: PPUSH
38722: CALL_OW 458
38726: NOT
38727: IFFALSE 38731
// continue ;
38729: GO 38701
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38731: LD_VAR 0 4
38735: PUSH
38736: LD_INT 1
38738: ARRAY
38739: PPUSH
38740: LD_VAR 0 4
38744: PUSH
38745: LD_INT 2
38747: ARRAY
38748: PPUSH
38749: CALL_OW 428
38753: PUSH
38754: LD_VAR 0 5
38758: IN
38759: IFFALSE 38788
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38761: LD_VAR 0 4
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: PPUSH
38770: LD_VAR 0 4
38774: PUSH
38775: LD_INT 2
38777: ARRAY
38778: PPUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 456
// end ;
38788: GO 38701
38790: POP
38791: POP
// end ;
38792: LD_VAR 0 3
38796: RET
// export function Count ( array ) ; var i ; begin
38797: LD_INT 0
38799: PPUSH
38800: PPUSH
// result := 0 ;
38801: LD_ADDR_VAR 0 2
38805: PUSH
38806: LD_INT 0
38808: ST_TO_ADDR
// for i in array do
38809: LD_ADDR_VAR 0 3
38813: PUSH
38814: LD_VAR 0 1
38818: PUSH
38819: FOR_IN
38820: IFFALSE 38844
// if i then
38822: LD_VAR 0 3
38826: IFFALSE 38842
// result := result + 1 ;
38828: LD_ADDR_VAR 0 2
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: LD_INT 1
38840: PLUS
38841: ST_TO_ADDR
38842: GO 38819
38844: POP
38845: POP
// end ;
38846: LD_VAR 0 2
38850: RET
// export function IsEmpty ( building ) ; begin
38851: LD_INT 0
38853: PPUSH
// if not building then
38854: LD_VAR 0 1
38858: NOT
38859: IFFALSE 38863
// exit ;
38861: GO 38906
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38863: LD_ADDR_VAR 0 2
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 22
38875: PUSH
38876: LD_VAR 0 1
38880: PPUSH
38881: CALL_OW 255
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 58
38892: PUSH
38893: EMPTY
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PPUSH
38900: CALL_OW 69
38904: IN
38905: ST_TO_ADDR
// end ;
38906: LD_VAR 0 2
38910: RET
// export function IsNotFull ( building ) ; var places ; begin
38911: LD_INT 0
38913: PPUSH
38914: PPUSH
// if not building then
38915: LD_VAR 0 1
38919: NOT
38920: IFFALSE 38924
// exit ;
38922: GO 39095
// result := false ;
38924: LD_ADDR_VAR 0 2
38928: PUSH
38929: LD_INT 0
38931: ST_TO_ADDR
// places := 0 ;
38932: LD_ADDR_VAR 0 3
38936: PUSH
38937: LD_INT 0
38939: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 266
38949: PUSH
38950: LD_INT 0
38952: DOUBLE
38953: EQUAL
38954: IFTRUE 39012
38956: LD_INT 1
38958: DOUBLE
38959: EQUAL
38960: IFTRUE 39012
38962: LD_INT 6
38964: DOUBLE
38965: EQUAL
38966: IFTRUE 39012
38968: LD_INT 7
38970: DOUBLE
38971: EQUAL
38972: IFTRUE 39012
38974: LD_INT 8
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 39012
38980: LD_INT 4
38982: DOUBLE
38983: EQUAL
38984: IFTRUE 39012
38986: LD_INT 5
38988: DOUBLE
38989: EQUAL
38990: IFTRUE 39012
38992: LD_INT 2
38994: DOUBLE
38995: EQUAL
38996: IFTRUE 39012
38998: LD_INT 3
39000: DOUBLE
39001: EQUAL
39002: IFTRUE 39012
39004: LD_INT 35
39006: DOUBLE
39007: EQUAL
39008: IFTRUE 39012
39010: GO 39023
39012: POP
// places := 6 ; b_bunker , b_breastwork :
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_INT 6
39020: ST_TO_ADDR
39021: GO 39068
39023: LD_INT 32
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39037
39029: LD_INT 31
39031: DOUBLE
39032: EQUAL
39033: IFTRUE 39037
39035: GO 39048
39037: POP
// places := 1 ; b_control_tower :
39038: LD_ADDR_VAR 0 3
39042: PUSH
39043: LD_INT 1
39045: ST_TO_ADDR
39046: GO 39068
39048: LD_INT 36
39050: DOUBLE
39051: EQUAL
39052: IFTRUE 39056
39054: GO 39067
39056: POP
// places := 3 ; end ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_INT 3
39064: ST_TO_ADDR
39065: GO 39068
39067: POP
// if places then
39068: LD_VAR 0 3
39072: IFFALSE 39095
// result := UnitsInside ( building ) < places ;
39074: LD_ADDR_VAR 0 2
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 313
39088: PUSH
39089: LD_VAR 0 3
39093: LESS
39094: ST_TO_ADDR
// end ;
39095: LD_VAR 0 2
39099: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39100: LD_INT 0
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
// tmp := [ ] ;
39106: LD_ADDR_VAR 0 3
39110: PUSH
39111: EMPTY
39112: ST_TO_ADDR
// list := [ ] ;
39113: LD_ADDR_VAR 0 5
39117: PUSH
39118: EMPTY
39119: ST_TO_ADDR
// for i = 16 to 25 do
39120: LD_ADDR_VAR 0 4
39124: PUSH
39125: DOUBLE
39126: LD_INT 16
39128: DEC
39129: ST_TO_ADDR
39130: LD_INT 25
39132: PUSH
39133: FOR_TO
39134: IFFALSE 39207
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39136: LD_ADDR_VAR 0 3
39140: PUSH
39141: LD_VAR 0 3
39145: PUSH
39146: LD_INT 22
39148: PUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL_OW 255
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 91
39165: PUSH
39166: LD_VAR 0 1
39170: PUSH
39171: LD_INT 6
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 30
39181: PUSH
39182: LD_VAR 0 4
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: PPUSH
39199: CALL_OW 69
39203: ADD
39204: ST_TO_ADDR
39205: GO 39133
39207: POP
39208: POP
// for i = 1 to tmp do
39209: LD_ADDR_VAR 0 4
39213: PUSH
39214: DOUBLE
39215: LD_INT 1
39217: DEC
39218: ST_TO_ADDR
39219: LD_VAR 0 3
39223: PUSH
39224: FOR_TO
39225: IFFALSE 39313
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39227: LD_ADDR_VAR 0 5
39231: PUSH
39232: LD_VAR 0 5
39236: PUSH
39237: LD_VAR 0 3
39241: PUSH
39242: LD_VAR 0 4
39246: ARRAY
39247: PPUSH
39248: CALL_OW 266
39252: PUSH
39253: LD_VAR 0 3
39257: PUSH
39258: LD_VAR 0 4
39262: ARRAY
39263: PPUSH
39264: CALL_OW 250
39268: PUSH
39269: LD_VAR 0 3
39273: PUSH
39274: LD_VAR 0 4
39278: ARRAY
39279: PPUSH
39280: CALL_OW 251
39284: PUSH
39285: LD_VAR 0 3
39289: PUSH
39290: LD_VAR 0 4
39294: ARRAY
39295: PPUSH
39296: CALL_OW 254
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: PUSH
39307: EMPTY
39308: LIST
39309: ADD
39310: ST_TO_ADDR
39311: GO 39224
39313: POP
39314: POP
// result := list ;
39315: LD_ADDR_VAR 0 2
39319: PUSH
39320: LD_VAR 0 5
39324: ST_TO_ADDR
// end ;
39325: LD_VAR 0 2
39329: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39330: LD_INT 0
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
// if not factory then
39339: LD_VAR 0 1
39343: NOT
39344: IFFALSE 39348
// exit ;
39346: GO 39941
// if control = control_apeman then
39348: LD_VAR 0 4
39352: PUSH
39353: LD_INT 5
39355: EQUAL
39356: IFFALSE 39465
// begin tmp := UnitsInside ( factory ) ;
39358: LD_ADDR_VAR 0 8
39362: PUSH
39363: LD_VAR 0 1
39367: PPUSH
39368: CALL_OW 313
39372: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39373: LD_VAR 0 8
39377: PPUSH
39378: LD_INT 25
39380: PUSH
39381: LD_INT 12
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PPUSH
39388: CALL_OW 72
39392: NOT
39393: IFFALSE 39403
// control := control_manual ;
39395: LD_ADDR_VAR 0 4
39399: PUSH
39400: LD_INT 1
39402: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39403: LD_ADDR_VAR 0 8
39407: PUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: CALL 39100 0 1
39417: ST_TO_ADDR
// if tmp then
39418: LD_VAR 0 8
39422: IFFALSE 39465
// begin for i in tmp do
39424: LD_ADDR_VAR 0 7
39428: PUSH
39429: LD_VAR 0 8
39433: PUSH
39434: FOR_IN
39435: IFFALSE 39463
// if i [ 1 ] = b_ext_radio then
39437: LD_VAR 0 7
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: PUSH
39446: LD_INT 22
39448: EQUAL
39449: IFFALSE 39461
// begin control := control_remote ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_INT 2
39458: ST_TO_ADDR
// break ;
39459: GO 39463
// end ;
39461: GO 39434
39463: POP
39464: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39465: LD_VAR 0 1
39469: PPUSH
39470: LD_VAR 0 2
39474: PPUSH
39475: LD_VAR 0 3
39479: PPUSH
39480: LD_VAR 0 4
39484: PPUSH
39485: LD_VAR 0 5
39489: PPUSH
39490: CALL_OW 448
39494: IFFALSE 39529
// begin result := [ chassis , engine , control , weapon ] ;
39496: LD_ADDR_VAR 0 6
39500: PUSH
39501: LD_VAR 0 2
39505: PUSH
39506: LD_VAR 0 3
39510: PUSH
39511: LD_VAR 0 4
39515: PUSH
39516: LD_VAR 0 5
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// exit ;
39527: GO 39941
// end ; _chassis := AvailableChassisList ( factory ) ;
39529: LD_ADDR_VAR 0 9
39533: PUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL_OW 475
39543: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39544: LD_ADDR_VAR 0 11
39548: PUSH
39549: LD_VAR 0 1
39553: PPUSH
39554: CALL_OW 476
39558: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39559: LD_ADDR_VAR 0 12
39563: PUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 477
39573: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39574: LD_ADDR_VAR 0 10
39578: PUSH
39579: LD_VAR 0 1
39583: PPUSH
39584: CALL_OW 478
39588: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39589: LD_VAR 0 9
39593: NOT
39594: PUSH
39595: LD_VAR 0 11
39599: NOT
39600: OR
39601: PUSH
39602: LD_VAR 0 12
39606: NOT
39607: OR
39608: PUSH
39609: LD_VAR 0 10
39613: NOT
39614: OR
39615: IFFALSE 39650
// begin result := [ chassis , engine , control , weapon ] ;
39617: LD_ADDR_VAR 0 6
39621: PUSH
39622: LD_VAR 0 2
39626: PUSH
39627: LD_VAR 0 3
39631: PUSH
39632: LD_VAR 0 4
39636: PUSH
39637: LD_VAR 0 5
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: ST_TO_ADDR
// exit ;
39648: GO 39941
// end ; if not chassis in _chassis then
39650: LD_VAR 0 2
39654: PUSH
39655: LD_VAR 0 9
39659: IN
39660: NOT
39661: IFFALSE 39687
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39663: LD_ADDR_VAR 0 2
39667: PUSH
39668: LD_VAR 0 9
39672: PUSH
39673: LD_INT 1
39675: PPUSH
39676: LD_VAR 0 9
39680: PPUSH
39681: CALL_OW 12
39685: ARRAY
39686: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39687: LD_VAR 0 2
39691: PPUSH
39692: LD_VAR 0 3
39696: PPUSH
39697: CALL 39946 0 2
39701: NOT
39702: IFFALSE 39761
// repeat engine := _engine [ 1 ] ;
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_VAR 0 11
39713: PUSH
39714: LD_INT 1
39716: ARRAY
39717: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39718: LD_ADDR_VAR 0 11
39722: PUSH
39723: LD_VAR 0 11
39727: PPUSH
39728: LD_INT 1
39730: PPUSH
39731: CALL_OW 3
39735: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39736: LD_VAR 0 2
39740: PPUSH
39741: LD_VAR 0 3
39745: PPUSH
39746: CALL 39946 0 2
39750: PUSH
39751: LD_VAR 0 11
39755: PUSH
39756: EMPTY
39757: EQUAL
39758: OR
39759: IFFALSE 39704
// if not control in _control then
39761: LD_VAR 0 4
39765: PUSH
39766: LD_VAR 0 12
39770: IN
39771: NOT
39772: IFFALSE 39798
// control := _control [ rand ( 1 , _control ) ] ;
39774: LD_ADDR_VAR 0 4
39778: PUSH
39779: LD_VAR 0 12
39783: PUSH
39784: LD_INT 1
39786: PPUSH
39787: LD_VAR 0 12
39791: PPUSH
39792: CALL_OW 12
39796: ARRAY
39797: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39798: LD_VAR 0 2
39802: PPUSH
39803: LD_VAR 0 5
39807: PPUSH
39808: CALL 40166 0 2
39812: NOT
39813: IFFALSE 39872
// repeat weapon := _weapon [ 1 ] ;
39815: LD_ADDR_VAR 0 5
39819: PUSH
39820: LD_VAR 0 10
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39829: LD_ADDR_VAR 0 10
39833: PUSH
39834: LD_VAR 0 10
39838: PPUSH
39839: LD_INT 1
39841: PPUSH
39842: CALL_OW 3
39846: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39847: LD_VAR 0 2
39851: PPUSH
39852: LD_VAR 0 5
39856: PPUSH
39857: CALL 40166 0 2
39861: PUSH
39862: LD_VAR 0 10
39866: PUSH
39867: EMPTY
39868: EQUAL
39869: OR
39870: IFFALSE 39815
// result := [ ] ;
39872: LD_ADDR_VAR 0 6
39876: PUSH
39877: EMPTY
39878: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39879: LD_VAR 0 1
39883: PPUSH
39884: LD_VAR 0 2
39888: PPUSH
39889: LD_VAR 0 3
39893: PPUSH
39894: LD_VAR 0 4
39898: PPUSH
39899: LD_VAR 0 5
39903: PPUSH
39904: CALL_OW 448
39908: IFFALSE 39941
// result := [ chassis , engine , control , weapon ] ;
39910: LD_ADDR_VAR 0 6
39914: PUSH
39915: LD_VAR 0 2
39919: PUSH
39920: LD_VAR 0 3
39924: PUSH
39925: LD_VAR 0 4
39929: PUSH
39930: LD_VAR 0 5
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: ST_TO_ADDR
// end ;
39941: LD_VAR 0 6
39945: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39946: LD_INT 0
39948: PPUSH
// if not chassis or not engine then
39949: LD_VAR 0 1
39953: NOT
39954: PUSH
39955: LD_VAR 0 2
39959: NOT
39960: OR
39961: IFFALSE 39965
// exit ;
39963: GO 40161
// case engine of engine_solar :
39965: LD_VAR 0 2
39969: PUSH
39970: LD_INT 2
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40016
39978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 11
39986: PUSH
39987: LD_INT 12
39989: PUSH
39990: LD_INT 13
39992: PUSH
39993: LD_INT 14
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 3
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: ST_TO_ADDR
40014: GO 40145
40016: LD_INT 1
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40024
40022: GO 40086
40024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_INT 11
40032: PUSH
40033: LD_INT 12
40035: PUSH
40036: LD_INT 13
40038: PUSH
40039: LD_INT 14
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: LD_INT 5
40056: PUSH
40057: LD_INT 21
40059: PUSH
40060: LD_INT 23
40062: PUSH
40063: LD_INT 22
40065: PUSH
40066: LD_INT 24
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
40084: GO 40145
40086: LD_INT 3
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40144
40094: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_INT 13
40102: PUSH
40103: LD_INT 14
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 4
40114: PUSH
40115: LD_INT 5
40117: PUSH
40118: LD_INT 21
40120: PUSH
40121: LD_INT 22
40123: PUSH
40124: LD_INT 23
40126: PUSH
40127: LD_INT 24
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
40142: GO 40145
40144: POP
// result := ( chassis in result ) ;
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_VAR 0 1
40154: PUSH
40155: LD_VAR 0 3
40159: IN
40160: ST_TO_ADDR
// end ;
40161: LD_VAR 0 3
40165: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40166: LD_INT 0
40168: PPUSH
// if not chassis or not weapon then
40169: LD_VAR 0 1
40173: NOT
40174: PUSH
40175: LD_VAR 0 2
40179: NOT
40180: OR
40181: IFFALSE 40185
// exit ;
40183: GO 41247
// case weapon of us_machine_gun :
40185: LD_VAR 0 2
40189: PUSH
40190: LD_INT 2
40192: DOUBLE
40193: EQUAL
40194: IFTRUE 40198
40196: GO 40228
40198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40199: LD_ADDR_VAR 0 3
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: LD_INT 4
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: ST_TO_ADDR
40226: GO 41231
40228: LD_INT 3
40230: DOUBLE
40231: EQUAL
40232: IFTRUE 40236
40234: GO 40266
40236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40237: LD_ADDR_VAR 0 3
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 3
40250: PUSH
40251: LD_INT 4
40253: PUSH
40254: LD_INT 5
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
40264: GO 41231
40266: LD_INT 11
40268: DOUBLE
40269: EQUAL
40270: IFTRUE 40274
40272: GO 40304
40274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: LD_INT 4
40291: PUSH
40292: LD_INT 5
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
40302: GO 41231
40304: LD_INT 4
40306: DOUBLE
40307: EQUAL
40308: IFTRUE 40312
40310: GO 40338
40312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40313: LD_ADDR_VAR 0 3
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 3
40323: PUSH
40324: LD_INT 4
40326: PUSH
40327: LD_INT 5
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
40336: GO 41231
40338: LD_INT 5
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40372
40346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 4
40360: PUSH
40361: LD_INT 5
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: ST_TO_ADDR
40370: GO 41231
40372: LD_INT 9
40374: DOUBLE
40375: EQUAL
40376: IFTRUE 40380
40378: GO 40406
40380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40381: LD_ADDR_VAR 0 3
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: LD_INT 4
40394: PUSH
40395: LD_INT 5
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
40404: GO 41231
40406: LD_INT 7
40408: DOUBLE
40409: EQUAL
40410: IFTRUE 40414
40412: GO 40440
40414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: LD_INT 5
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: ST_TO_ADDR
40438: GO 41231
40440: LD_INT 12
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40474
40448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40449: LD_ADDR_VAR 0 3
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 4
40462: PUSH
40463: LD_INT 5
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: ST_TO_ADDR
40472: GO 41231
40474: LD_INT 13
40476: DOUBLE
40477: EQUAL
40478: IFTRUE 40482
40480: GO 40508
40482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: LD_INT 4
40496: PUSH
40497: LD_INT 5
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
40506: GO 41231
40508: LD_INT 14
40510: DOUBLE
40511: EQUAL
40512: IFTRUE 40516
40514: GO 40534
40516: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40517: LD_ADDR_VAR 0 3
40521: PUSH
40522: LD_INT 4
40524: PUSH
40525: LD_INT 5
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: ST_TO_ADDR
40532: GO 41231
40534: LD_INT 6
40536: DOUBLE
40537: EQUAL
40538: IFTRUE 40542
40540: GO 40560
40542: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40543: LD_ADDR_VAR 0 3
40547: PUSH
40548: LD_INT 4
40550: PUSH
40551: LD_INT 5
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: ST_TO_ADDR
40558: GO 41231
40560: LD_INT 10
40562: DOUBLE
40563: EQUAL
40564: IFTRUE 40568
40566: GO 40586
40568: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40569: LD_ADDR_VAR 0 3
40573: PUSH
40574: LD_INT 4
40576: PUSH
40577: LD_INT 5
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: ST_TO_ADDR
40584: GO 41231
40586: LD_INT 22
40588: DOUBLE
40589: EQUAL
40590: IFTRUE 40594
40592: GO 40620
40594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40595: LD_ADDR_VAR 0 3
40599: PUSH
40600: LD_INT 11
40602: PUSH
40603: LD_INT 12
40605: PUSH
40606: LD_INT 13
40608: PUSH
40609: LD_INT 14
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
40618: GO 41231
40620: LD_INT 23
40622: DOUBLE
40623: EQUAL
40624: IFTRUE 40628
40626: GO 40654
40628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40629: LD_ADDR_VAR 0 3
40633: PUSH
40634: LD_INT 11
40636: PUSH
40637: LD_INT 12
40639: PUSH
40640: LD_INT 13
40642: PUSH
40643: LD_INT 14
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: ST_TO_ADDR
40652: GO 41231
40654: LD_INT 24
40656: DOUBLE
40657: EQUAL
40658: IFTRUE 40662
40660: GO 40688
40662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_INT 11
40670: PUSH
40671: LD_INT 12
40673: PUSH
40674: LD_INT 13
40676: PUSH
40677: LD_INT 14
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: ST_TO_ADDR
40686: GO 41231
40688: LD_INT 30
40690: DOUBLE
40691: EQUAL
40692: IFTRUE 40696
40694: GO 40722
40696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_INT 11
40704: PUSH
40705: LD_INT 12
40707: PUSH
40708: LD_INT 13
40710: PUSH
40711: LD_INT 14
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: ST_TO_ADDR
40720: GO 41231
40722: LD_INT 25
40724: DOUBLE
40725: EQUAL
40726: IFTRUE 40730
40728: GO 40748
40730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40731: LD_ADDR_VAR 0 3
40735: PUSH
40736: LD_INT 13
40738: PUSH
40739: LD_INT 14
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: ST_TO_ADDR
40746: GO 41231
40748: LD_INT 27
40750: DOUBLE
40751: EQUAL
40752: IFTRUE 40756
40754: GO 40774
40756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40757: LD_ADDR_VAR 0 3
40761: PUSH
40762: LD_INT 13
40764: PUSH
40765: LD_INT 14
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: ST_TO_ADDR
40772: GO 41231
40774: LD_EXP 41
40778: DOUBLE
40779: EQUAL
40780: IFTRUE 40784
40782: GO 40810
40784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40785: LD_ADDR_VAR 0 3
40789: PUSH
40790: LD_INT 11
40792: PUSH
40793: LD_INT 12
40795: PUSH
40796: LD_INT 13
40798: PUSH
40799: LD_INT 14
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: ST_TO_ADDR
40808: GO 41231
40810: LD_INT 28
40812: DOUBLE
40813: EQUAL
40814: IFTRUE 40818
40816: GO 40836
40818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40819: LD_ADDR_VAR 0 3
40823: PUSH
40824: LD_INT 13
40826: PUSH
40827: LD_INT 14
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: ST_TO_ADDR
40834: GO 41231
40836: LD_INT 29
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 40862
40844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40845: LD_ADDR_VAR 0 3
40849: PUSH
40850: LD_INT 13
40852: PUSH
40853: LD_INT 14
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: ST_TO_ADDR
40860: GO 41231
40862: LD_INT 31
40864: DOUBLE
40865: EQUAL
40866: IFTRUE 40870
40868: GO 40888
40870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40871: LD_ADDR_VAR 0 3
40875: PUSH
40876: LD_INT 13
40878: PUSH
40879: LD_INT 14
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: ST_TO_ADDR
40886: GO 41231
40888: LD_INT 26
40890: DOUBLE
40891: EQUAL
40892: IFTRUE 40896
40894: GO 40914
40896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40897: LD_ADDR_VAR 0 3
40901: PUSH
40902: LD_INT 13
40904: PUSH
40905: LD_INT 14
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: ST_TO_ADDR
40912: GO 41231
40914: LD_INT 42
40916: DOUBLE
40917: EQUAL
40918: IFTRUE 40922
40920: GO 40948
40922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40923: LD_ADDR_VAR 0 3
40927: PUSH
40928: LD_INT 21
40930: PUSH
40931: LD_INT 22
40933: PUSH
40934: LD_INT 23
40936: PUSH
40937: LD_INT 24
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
40946: GO 41231
40948: LD_INT 43
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40956
40954: GO 40982
40956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40957: LD_ADDR_VAR 0 3
40961: PUSH
40962: LD_INT 21
40964: PUSH
40965: LD_INT 22
40967: PUSH
40968: LD_INT 23
40970: PUSH
40971: LD_INT 24
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: ST_TO_ADDR
40980: GO 41231
40982: LD_INT 44
40984: DOUBLE
40985: EQUAL
40986: IFTRUE 40990
40988: GO 41016
40990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40991: LD_ADDR_VAR 0 3
40995: PUSH
40996: LD_INT 21
40998: PUSH
40999: LD_INT 22
41001: PUSH
41002: LD_INT 23
41004: PUSH
41005: LD_INT 24
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
41014: GO 41231
41016: LD_INT 45
41018: DOUBLE
41019: EQUAL
41020: IFTRUE 41024
41022: GO 41050
41024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41025: LD_ADDR_VAR 0 3
41029: PUSH
41030: LD_INT 21
41032: PUSH
41033: LD_INT 22
41035: PUSH
41036: LD_INT 23
41038: PUSH
41039: LD_INT 24
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: ST_TO_ADDR
41048: GO 41231
41050: LD_INT 49
41052: DOUBLE
41053: EQUAL
41054: IFTRUE 41058
41056: GO 41084
41058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: LD_INT 21
41066: PUSH
41067: LD_INT 22
41069: PUSH
41070: LD_INT 23
41072: PUSH
41073: LD_INT 24
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: ST_TO_ADDR
41082: GO 41231
41084: LD_INT 51
41086: DOUBLE
41087: EQUAL
41088: IFTRUE 41092
41090: GO 41118
41092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41093: LD_ADDR_VAR 0 3
41097: PUSH
41098: LD_INT 21
41100: PUSH
41101: LD_INT 22
41103: PUSH
41104: LD_INT 23
41106: PUSH
41107: LD_INT 24
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
41116: GO 41231
41118: LD_INT 52
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41126
41124: GO 41152
41126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_INT 21
41134: PUSH
41135: LD_INT 22
41137: PUSH
41138: LD_INT 23
41140: PUSH
41141: LD_INT 24
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: ST_TO_ADDR
41150: GO 41231
41152: LD_INT 53
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41160
41158: GO 41178
41160: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: LD_INT 23
41168: PUSH
41169: LD_INT 24
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: ST_TO_ADDR
41176: GO 41231
41178: LD_INT 46
41180: DOUBLE
41181: EQUAL
41182: IFTRUE 41186
41184: GO 41204
41186: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41187: LD_ADDR_VAR 0 3
41191: PUSH
41192: LD_INT 23
41194: PUSH
41195: LD_INT 24
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: ST_TO_ADDR
41202: GO 41231
41204: LD_INT 47
41206: DOUBLE
41207: EQUAL
41208: IFTRUE 41212
41210: GO 41230
41212: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41213: LD_ADDR_VAR 0 3
41217: PUSH
41218: LD_INT 23
41220: PUSH
41221: LD_INT 24
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: ST_TO_ADDR
41228: GO 41231
41230: POP
// result := ( chassis in result ) ;
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: LD_VAR 0 3
41245: IN
41246: ST_TO_ADDR
// end ;
41247: LD_VAR 0 3
41251: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41252: LD_INT 0
41254: PPUSH
41255: PPUSH
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
41260: PPUSH
// result := array ;
41261: LD_ADDR_VAR 0 5
41265: PUSH
41266: LD_VAR 0 1
41270: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41271: LD_VAR 0 1
41275: NOT
41276: PUSH
41277: LD_VAR 0 2
41281: NOT
41282: OR
41283: PUSH
41284: LD_VAR 0 3
41288: NOT
41289: OR
41290: PUSH
41291: LD_VAR 0 2
41295: PUSH
41296: LD_VAR 0 1
41300: GREATER
41301: OR
41302: PUSH
41303: LD_VAR 0 3
41307: PUSH
41308: LD_VAR 0 1
41312: GREATER
41313: OR
41314: IFFALSE 41318
// exit ;
41316: GO 41614
// if direction then
41318: LD_VAR 0 4
41322: IFFALSE 41386
// begin d := 1 ;
41324: LD_ADDR_VAR 0 9
41328: PUSH
41329: LD_INT 1
41331: ST_TO_ADDR
// if i_from > i_to then
41332: LD_VAR 0 2
41336: PUSH
41337: LD_VAR 0 3
41341: GREATER
41342: IFFALSE 41368
// length := ( array - i_from ) + i_to else
41344: LD_ADDR_VAR 0 11
41348: PUSH
41349: LD_VAR 0 1
41353: PUSH
41354: LD_VAR 0 2
41358: MINUS
41359: PUSH
41360: LD_VAR 0 3
41364: PLUS
41365: ST_TO_ADDR
41366: GO 41384
// length := i_to - i_from ;
41368: LD_ADDR_VAR 0 11
41372: PUSH
41373: LD_VAR 0 3
41377: PUSH
41378: LD_VAR 0 2
41382: MINUS
41383: ST_TO_ADDR
// end else
41384: GO 41447
// begin d := - 1 ;
41386: LD_ADDR_VAR 0 9
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: ST_TO_ADDR
// if i_from > i_to then
41395: LD_VAR 0 2
41399: PUSH
41400: LD_VAR 0 3
41404: GREATER
41405: IFFALSE 41425
// length := i_from - i_to else
41407: LD_ADDR_VAR 0 11
41411: PUSH
41412: LD_VAR 0 2
41416: PUSH
41417: LD_VAR 0 3
41421: MINUS
41422: ST_TO_ADDR
41423: GO 41447
// length := ( array - i_to ) + i_from ;
41425: LD_ADDR_VAR 0 11
41429: PUSH
41430: LD_VAR 0 1
41434: PUSH
41435: LD_VAR 0 3
41439: MINUS
41440: PUSH
41441: LD_VAR 0 2
41445: PLUS
41446: ST_TO_ADDR
// end ; if not length then
41447: LD_VAR 0 11
41451: NOT
41452: IFFALSE 41456
// exit ;
41454: GO 41614
// tmp := array ;
41456: LD_ADDR_VAR 0 10
41460: PUSH
41461: LD_VAR 0 1
41465: ST_TO_ADDR
// for i = 1 to length do
41466: LD_ADDR_VAR 0 6
41470: PUSH
41471: DOUBLE
41472: LD_INT 1
41474: DEC
41475: ST_TO_ADDR
41476: LD_VAR 0 11
41480: PUSH
41481: FOR_TO
41482: IFFALSE 41602
// begin for j = 1 to array do
41484: LD_ADDR_VAR 0 7
41488: PUSH
41489: DOUBLE
41490: LD_INT 1
41492: DEC
41493: ST_TO_ADDR
41494: LD_VAR 0 1
41498: PUSH
41499: FOR_TO
41500: IFFALSE 41588
// begin k := j + d ;
41502: LD_ADDR_VAR 0 8
41506: PUSH
41507: LD_VAR 0 7
41511: PUSH
41512: LD_VAR 0 9
41516: PLUS
41517: ST_TO_ADDR
// if k > array then
41518: LD_VAR 0 8
41522: PUSH
41523: LD_VAR 0 1
41527: GREATER
41528: IFFALSE 41538
// k := 1 ;
41530: LD_ADDR_VAR 0 8
41534: PUSH
41535: LD_INT 1
41537: ST_TO_ADDR
// if not k then
41538: LD_VAR 0 8
41542: NOT
41543: IFFALSE 41555
// k := array ;
41545: LD_ADDR_VAR 0 8
41549: PUSH
41550: LD_VAR 0 1
41554: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41555: LD_ADDR_VAR 0 10
41559: PUSH
41560: LD_VAR 0 10
41564: PPUSH
41565: LD_VAR 0 8
41569: PPUSH
41570: LD_VAR 0 1
41574: PUSH
41575: LD_VAR 0 7
41579: ARRAY
41580: PPUSH
41581: CALL_OW 1
41585: ST_TO_ADDR
// end ;
41586: GO 41499
41588: POP
41589: POP
// array := tmp ;
41590: LD_ADDR_VAR 0 1
41594: PUSH
41595: LD_VAR 0 10
41599: ST_TO_ADDR
// end ;
41600: GO 41481
41602: POP
41603: POP
// result := array ;
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_VAR 0 1
41613: ST_TO_ADDR
// end ;
41614: LD_VAR 0 5
41618: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41619: LD_INT 0
41621: PPUSH
41622: PPUSH
// result := 0 ;
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: LD_INT 0
41630: ST_TO_ADDR
// if not array or not value in array then
41631: LD_VAR 0 1
41635: NOT
41636: PUSH
41637: LD_VAR 0 2
41641: PUSH
41642: LD_VAR 0 1
41646: IN
41647: NOT
41648: OR
41649: IFFALSE 41653
// exit ;
41651: GO 41707
// for i = 1 to array do
41653: LD_ADDR_VAR 0 4
41657: PUSH
41658: DOUBLE
41659: LD_INT 1
41661: DEC
41662: ST_TO_ADDR
41663: LD_VAR 0 1
41667: PUSH
41668: FOR_TO
41669: IFFALSE 41705
// if value = array [ i ] then
41671: LD_VAR 0 2
41675: PUSH
41676: LD_VAR 0 1
41680: PUSH
41681: LD_VAR 0 4
41685: ARRAY
41686: EQUAL
41687: IFFALSE 41703
// begin result := i ;
41689: LD_ADDR_VAR 0 3
41693: PUSH
41694: LD_VAR 0 4
41698: ST_TO_ADDR
// exit ;
41699: POP
41700: POP
41701: GO 41707
// end ;
41703: GO 41668
41705: POP
41706: POP
// end ;
41707: LD_VAR 0 3
41711: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41712: LD_INT 0
41714: PPUSH
// vc_chassis := chassis ;
41715: LD_ADDR_OWVAR 37
41719: PUSH
41720: LD_VAR 0 1
41724: ST_TO_ADDR
// vc_engine := engine ;
41725: LD_ADDR_OWVAR 39
41729: PUSH
41730: LD_VAR 0 2
41734: ST_TO_ADDR
// vc_control := control ;
41735: LD_ADDR_OWVAR 38
41739: PUSH
41740: LD_VAR 0 3
41744: ST_TO_ADDR
// vc_weapon := weapon ;
41745: LD_ADDR_OWVAR 40
41749: PUSH
41750: LD_VAR 0 4
41754: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41755: LD_ADDR_OWVAR 41
41759: PUSH
41760: LD_VAR 0 5
41764: ST_TO_ADDR
// end ;
41765: LD_VAR 0 6
41769: RET
// export function WantPlant ( unit ) ; var task ; begin
41770: LD_INT 0
41772: PPUSH
41773: PPUSH
// result := false ;
41774: LD_ADDR_VAR 0 2
41778: PUSH
41779: LD_INT 0
41781: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_VAR 0 1
41791: PPUSH
41792: CALL_OW 437
41796: ST_TO_ADDR
// if task then
41797: LD_VAR 0 3
41801: IFFALSE 41829
// if task [ 1 ] [ 1 ] = p then
41803: LD_VAR 0 3
41807: PUSH
41808: LD_INT 1
41810: ARRAY
41811: PUSH
41812: LD_INT 1
41814: ARRAY
41815: PUSH
41816: LD_STRING p
41818: EQUAL
41819: IFFALSE 41829
// result := true ;
41821: LD_ADDR_VAR 0 2
41825: PUSH
41826: LD_INT 1
41828: ST_TO_ADDR
// end ;
41829: LD_VAR 0 2
41833: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41834: LD_INT 0
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
// if pos < 1 then
41840: LD_VAR 0 2
41844: PUSH
41845: LD_INT 1
41847: LESS
41848: IFFALSE 41852
// exit ;
41850: GO 42155
// if pos = 1 then
41852: LD_VAR 0 2
41856: PUSH
41857: LD_INT 1
41859: EQUAL
41860: IFFALSE 41893
// result := Replace ( arr , pos [ 1 ] , value ) else
41862: LD_ADDR_VAR 0 4
41866: PUSH
41867: LD_VAR 0 1
41871: PPUSH
41872: LD_VAR 0 2
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PPUSH
41881: LD_VAR 0 3
41885: PPUSH
41886: CALL_OW 1
41890: ST_TO_ADDR
41891: GO 42155
// begin tmp := arr ;
41893: LD_ADDR_VAR 0 6
41897: PUSH
41898: LD_VAR 0 1
41902: ST_TO_ADDR
// s_arr := [ tmp ] ;
41903: LD_ADDR_VAR 0 7
41907: PUSH
41908: LD_VAR 0 6
41912: PUSH
41913: EMPTY
41914: LIST
41915: ST_TO_ADDR
// for i = 1 to pos - 1 do
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: DOUBLE
41922: LD_INT 1
41924: DEC
41925: ST_TO_ADDR
41926: LD_VAR 0 2
41930: PUSH
41931: LD_INT 1
41933: MINUS
41934: PUSH
41935: FOR_TO
41936: IFFALSE 41981
// begin tmp := tmp [ pos [ i ] ] ;
41938: LD_ADDR_VAR 0 6
41942: PUSH
41943: LD_VAR 0 6
41947: PUSH
41948: LD_VAR 0 2
41952: PUSH
41953: LD_VAR 0 5
41957: ARRAY
41958: ARRAY
41959: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41960: LD_ADDR_VAR 0 7
41964: PUSH
41965: LD_VAR 0 7
41969: PUSH
41970: LD_VAR 0 6
41974: PUSH
41975: EMPTY
41976: LIST
41977: ADD
41978: ST_TO_ADDR
// end ;
41979: GO 41935
41981: POP
41982: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41983: LD_ADDR_VAR 0 6
41987: PUSH
41988: LD_VAR 0 6
41992: PPUSH
41993: LD_VAR 0 2
41997: PUSH
41998: LD_VAR 0 2
42002: ARRAY
42003: PPUSH
42004: LD_VAR 0 3
42008: PPUSH
42009: CALL_OW 1
42013: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42014: LD_ADDR_VAR 0 7
42018: PUSH
42019: LD_VAR 0 7
42023: PPUSH
42024: LD_VAR 0 7
42028: PPUSH
42029: LD_VAR 0 6
42033: PPUSH
42034: CALL_OW 1
42038: ST_TO_ADDR
// for i = s_arr downto 2 do
42039: LD_ADDR_VAR 0 5
42043: PUSH
42044: DOUBLE
42045: LD_VAR 0 7
42049: INC
42050: ST_TO_ADDR
42051: LD_INT 2
42053: PUSH
42054: FOR_DOWNTO
42055: IFFALSE 42139
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42057: LD_ADDR_VAR 0 6
42061: PUSH
42062: LD_VAR 0 7
42066: PUSH
42067: LD_VAR 0 5
42071: PUSH
42072: LD_INT 1
42074: MINUS
42075: ARRAY
42076: PPUSH
42077: LD_VAR 0 2
42081: PUSH
42082: LD_VAR 0 5
42086: PUSH
42087: LD_INT 1
42089: MINUS
42090: ARRAY
42091: PPUSH
42092: LD_VAR 0 7
42096: PUSH
42097: LD_VAR 0 5
42101: ARRAY
42102: PPUSH
42103: CALL_OW 1
42107: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42108: LD_ADDR_VAR 0 7
42112: PUSH
42113: LD_VAR 0 7
42117: PPUSH
42118: LD_VAR 0 5
42122: PUSH
42123: LD_INT 1
42125: MINUS
42126: PPUSH
42127: LD_VAR 0 6
42131: PPUSH
42132: CALL_OW 1
42136: ST_TO_ADDR
// end ;
42137: GO 42054
42139: POP
42140: POP
// result := s_arr [ 1 ] ;
42141: LD_ADDR_VAR 0 4
42145: PUSH
42146: LD_VAR 0 7
42150: PUSH
42151: LD_INT 1
42153: ARRAY
42154: ST_TO_ADDR
// end ; end ;
42155: LD_VAR 0 4
42159: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42160: LD_INT 0
42162: PPUSH
42163: PPUSH
// if not list then
42164: LD_VAR 0 1
42168: NOT
42169: IFFALSE 42173
// exit ;
42171: GO 42264
// i := list [ pos1 ] ;
42173: LD_ADDR_VAR 0 5
42177: PUSH
42178: LD_VAR 0 1
42182: PUSH
42183: LD_VAR 0 2
42187: ARRAY
42188: ST_TO_ADDR
// if not i then
42189: LD_VAR 0 5
42193: NOT
42194: IFFALSE 42198
// exit ;
42196: GO 42264
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42198: LD_ADDR_VAR 0 1
42202: PUSH
42203: LD_VAR 0 1
42207: PPUSH
42208: LD_VAR 0 2
42212: PPUSH
42213: LD_VAR 0 1
42217: PUSH
42218: LD_VAR 0 3
42222: ARRAY
42223: PPUSH
42224: CALL_OW 1
42228: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42229: LD_ADDR_VAR 0 1
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_VAR 0 3
42243: PPUSH
42244: LD_VAR 0 5
42248: PPUSH
42249: CALL_OW 1
42253: ST_TO_ADDR
// result := list ;
42254: LD_ADDR_VAR 0 4
42258: PUSH
42259: LD_VAR 0 1
42263: ST_TO_ADDR
// end ;
42264: LD_VAR 0 4
42268: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42269: LD_INT 0
42271: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42272: LD_ADDR_VAR 0 5
42276: PUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 250
42286: PPUSH
42287: LD_VAR 0 1
42291: PPUSH
42292: CALL_OW 251
42296: PPUSH
42297: LD_VAR 0 2
42301: PPUSH
42302: LD_VAR 0 3
42306: PPUSH
42307: LD_VAR 0 4
42311: PPUSH
42312: CALL 42322 0 5
42316: ST_TO_ADDR
// end ;
42317: LD_VAR 0 5
42321: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
// if not list then
42328: LD_VAR 0 3
42332: NOT
42333: IFFALSE 42337
// exit ;
42335: GO 42725
// result := [ ] ;
42337: LD_ADDR_VAR 0 6
42341: PUSH
42342: EMPTY
42343: ST_TO_ADDR
// for i in list do
42344: LD_ADDR_VAR 0 7
42348: PUSH
42349: LD_VAR 0 3
42353: PUSH
42354: FOR_IN
42355: IFFALSE 42557
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42357: LD_ADDR_VAR 0 9
42361: PUSH
42362: LD_VAR 0 7
42366: PPUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: LD_VAR 0 2
42376: PPUSH
42377: CALL_OW 297
42381: ST_TO_ADDR
// if not result then
42382: LD_VAR 0 6
42386: NOT
42387: IFFALSE 42413
// result := [ [ i , tmp ] ] else
42389: LD_ADDR_VAR 0 6
42393: PUSH
42394: LD_VAR 0 7
42398: PUSH
42399: LD_VAR 0 9
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: ST_TO_ADDR
42411: GO 42555
// begin if result [ result ] [ 2 ] < tmp then
42413: LD_VAR 0 6
42417: PUSH
42418: LD_VAR 0 6
42422: ARRAY
42423: PUSH
42424: LD_INT 2
42426: ARRAY
42427: PUSH
42428: LD_VAR 0 9
42432: LESS
42433: IFFALSE 42475
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42435: LD_ADDR_VAR 0 6
42439: PUSH
42440: LD_VAR 0 6
42444: PPUSH
42445: LD_VAR 0 6
42449: PUSH
42450: LD_INT 1
42452: PLUS
42453: PPUSH
42454: LD_VAR 0 7
42458: PUSH
42459: LD_VAR 0 9
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PPUSH
42468: CALL_OW 2
42472: ST_TO_ADDR
42473: GO 42555
// for j = 1 to result do
42475: LD_ADDR_VAR 0 8
42479: PUSH
42480: DOUBLE
42481: LD_INT 1
42483: DEC
42484: ST_TO_ADDR
42485: LD_VAR 0 6
42489: PUSH
42490: FOR_TO
42491: IFFALSE 42553
// begin if tmp < result [ j ] [ 2 ] then
42493: LD_VAR 0 9
42497: PUSH
42498: LD_VAR 0 6
42502: PUSH
42503: LD_VAR 0 8
42507: ARRAY
42508: PUSH
42509: LD_INT 2
42511: ARRAY
42512: LESS
42513: IFFALSE 42551
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42515: LD_ADDR_VAR 0 6
42519: PUSH
42520: LD_VAR 0 6
42524: PPUSH
42525: LD_VAR 0 8
42529: PPUSH
42530: LD_VAR 0 7
42534: PUSH
42535: LD_VAR 0 9
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PPUSH
42544: CALL_OW 2
42548: ST_TO_ADDR
// break ;
42549: GO 42553
// end ; end ;
42551: GO 42490
42553: POP
42554: POP
// end ; end ;
42555: GO 42354
42557: POP
42558: POP
// if result and not asc then
42559: LD_VAR 0 6
42563: PUSH
42564: LD_VAR 0 4
42568: NOT
42569: AND
42570: IFFALSE 42645
// begin tmp := result ;
42572: LD_ADDR_VAR 0 9
42576: PUSH
42577: LD_VAR 0 6
42581: ST_TO_ADDR
// for i = tmp downto 1 do
42582: LD_ADDR_VAR 0 7
42586: PUSH
42587: DOUBLE
42588: LD_VAR 0 9
42592: INC
42593: ST_TO_ADDR
42594: LD_INT 1
42596: PUSH
42597: FOR_DOWNTO
42598: IFFALSE 42643
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42600: LD_ADDR_VAR 0 6
42604: PUSH
42605: LD_VAR 0 6
42609: PPUSH
42610: LD_VAR 0 9
42614: PUSH
42615: LD_VAR 0 7
42619: MINUS
42620: PUSH
42621: LD_INT 1
42623: PLUS
42624: PPUSH
42625: LD_VAR 0 9
42629: PUSH
42630: LD_VAR 0 7
42634: ARRAY
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
42641: GO 42597
42643: POP
42644: POP
// end ; tmp := [ ] ;
42645: LD_ADDR_VAR 0 9
42649: PUSH
42650: EMPTY
42651: ST_TO_ADDR
// if mode then
42652: LD_VAR 0 5
42656: IFFALSE 42725
// begin for i = 1 to result do
42658: LD_ADDR_VAR 0 7
42662: PUSH
42663: DOUBLE
42664: LD_INT 1
42666: DEC
42667: ST_TO_ADDR
42668: LD_VAR 0 6
42672: PUSH
42673: FOR_TO
42674: IFFALSE 42713
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42676: LD_ADDR_VAR 0 9
42680: PUSH
42681: LD_VAR 0 9
42685: PPUSH
42686: LD_VAR 0 7
42690: PPUSH
42691: LD_VAR 0 6
42695: PUSH
42696: LD_VAR 0 7
42700: ARRAY
42701: PUSH
42702: LD_INT 1
42704: ARRAY
42705: PPUSH
42706: CALL_OW 1
42710: ST_TO_ADDR
42711: GO 42673
42713: POP
42714: POP
// result := tmp ;
42715: LD_ADDR_VAR 0 6
42719: PUSH
42720: LD_VAR 0 9
42724: ST_TO_ADDR
// end ; end ;
42725: LD_VAR 0 6
42729: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42730: LD_INT 0
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42738: LD_ADDR_VAR 0 5
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// if not x or not y then
42760: LD_VAR 0 2
42764: NOT
42765: PUSH
42766: LD_VAR 0 3
42770: NOT
42771: OR
42772: IFFALSE 42776
// exit ;
42774: GO 44428
// if not range then
42776: LD_VAR 0 4
42780: NOT
42781: IFFALSE 42791
// range := 10 ;
42783: LD_ADDR_VAR 0 4
42787: PUSH
42788: LD_INT 10
42790: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42791: LD_ADDR_VAR 0 8
42795: PUSH
42796: LD_INT 81
42798: PUSH
42799: LD_VAR 0 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 92
42810: PUSH
42811: LD_VAR 0 2
42815: PUSH
42816: LD_VAR 0 3
42820: PUSH
42821: LD_VAR 0 4
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: LD_INT 21
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: PPUSH
42854: CALL_OW 69
42858: ST_TO_ADDR
// if not tmp then
42859: LD_VAR 0 8
42863: NOT
42864: IFFALSE 42868
// exit ;
42866: GO 44428
// for i in tmp do
42868: LD_ADDR_VAR 0 6
42872: PUSH
42873: LD_VAR 0 8
42877: PUSH
42878: FOR_IN
42879: IFFALSE 44403
// begin points := [ 0 , 0 , 0 ] ;
42881: LD_ADDR_VAR 0 9
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// bpoints := 1 ;
42900: LD_ADDR_VAR 0 10
42904: PUSH
42905: LD_INT 1
42907: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42908: LD_VAR 0 6
42912: PPUSH
42913: CALL_OW 247
42917: PUSH
42918: LD_INT 1
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 43504
42926: POP
// begin if GetClass ( i ) = 1 then
42927: LD_VAR 0 6
42931: PPUSH
42932: CALL_OW 257
42936: PUSH
42937: LD_INT 1
42939: EQUAL
42940: IFFALSE 42961
// points := [ 10 , 5 , 3 ] ;
42942: LD_ADDR_VAR 0 9
42946: PUSH
42947: LD_INT 10
42949: PUSH
42950: LD_INT 5
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42961: LD_VAR 0 6
42965: PPUSH
42966: CALL_OW 257
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: LD_INT 4
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: IN
42985: IFFALSE 43006
// points := [ 3 , 2 , 1 ] ;
42987: LD_ADDR_VAR 0 9
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43006: LD_VAR 0 6
43010: PPUSH
43011: CALL_OW 257
43015: PUSH
43016: LD_INT 5
43018: EQUAL
43019: IFFALSE 43040
// points := [ 130 , 5 , 2 ] ;
43021: LD_ADDR_VAR 0 9
43025: PUSH
43026: LD_INT 130
43028: PUSH
43029: LD_INT 5
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43040: LD_VAR 0 6
43044: PPUSH
43045: CALL_OW 257
43049: PUSH
43050: LD_INT 8
43052: EQUAL
43053: IFFALSE 43074
// points := [ 35 , 35 , 30 ] ;
43055: LD_ADDR_VAR 0 9
43059: PUSH
43060: LD_INT 35
43062: PUSH
43063: LD_INT 35
43065: PUSH
43066: LD_INT 30
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43074: LD_VAR 0 6
43078: PPUSH
43079: CALL_OW 257
43083: PUSH
43084: LD_INT 9
43086: EQUAL
43087: IFFALSE 43108
// points := [ 20 , 55 , 40 ] ;
43089: LD_ADDR_VAR 0 9
43093: PUSH
43094: LD_INT 20
43096: PUSH
43097: LD_INT 55
43099: PUSH
43100: LD_INT 40
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43108: LD_VAR 0 6
43112: PPUSH
43113: CALL_OW 257
43117: PUSH
43118: LD_INT 12
43120: PUSH
43121: LD_INT 16
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: IN
43128: IFFALSE 43149
// points := [ 5 , 3 , 2 ] ;
43130: LD_ADDR_VAR 0 9
43134: PUSH
43135: LD_INT 5
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43149: LD_VAR 0 6
43153: PPUSH
43154: CALL_OW 257
43158: PUSH
43159: LD_INT 17
43161: EQUAL
43162: IFFALSE 43183
// points := [ 100 , 50 , 75 ] ;
43164: LD_ADDR_VAR 0 9
43168: PUSH
43169: LD_INT 100
43171: PUSH
43172: LD_INT 50
43174: PUSH
43175: LD_INT 75
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43183: LD_VAR 0 6
43187: PPUSH
43188: CALL_OW 257
43192: PUSH
43193: LD_INT 15
43195: EQUAL
43196: IFFALSE 43217
// points := [ 10 , 5 , 3 ] ;
43198: LD_ADDR_VAR 0 9
43202: PUSH
43203: LD_INT 10
43205: PUSH
43206: LD_INT 5
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43217: LD_VAR 0 6
43221: PPUSH
43222: CALL_OW 257
43226: PUSH
43227: LD_INT 14
43229: EQUAL
43230: IFFALSE 43251
// points := [ 10 , 0 , 0 ] ;
43232: LD_ADDR_VAR 0 9
43236: PUSH
43237: LD_INT 10
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43251: LD_VAR 0 6
43255: PPUSH
43256: CALL_OW 257
43260: PUSH
43261: LD_INT 11
43263: EQUAL
43264: IFFALSE 43285
// points := [ 30 , 10 , 5 ] ;
43266: LD_ADDR_VAR 0 9
43270: PUSH
43271: LD_INT 30
43273: PUSH
43274: LD_INT 10
43276: PUSH
43277: LD_INT 5
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43285: LD_VAR 0 1
43289: PPUSH
43290: LD_INT 5
43292: PPUSH
43293: CALL_OW 321
43297: PUSH
43298: LD_INT 2
43300: EQUAL
43301: IFFALSE 43318
// bpoints := bpoints * 1.8 ;
43303: LD_ADDR_VAR 0 10
43307: PUSH
43308: LD_VAR 0 10
43312: PUSH
43313: LD_REAL  1.80000000000000E+0000
43316: MUL
43317: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43318: LD_VAR 0 6
43322: PPUSH
43323: CALL_OW 257
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: LD_INT 4
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: IN
43346: PUSH
43347: LD_VAR 0 1
43351: PPUSH
43352: LD_INT 51
43354: PPUSH
43355: CALL_OW 321
43359: PUSH
43360: LD_INT 2
43362: EQUAL
43363: AND
43364: IFFALSE 43381
// bpoints := bpoints * 1.2 ;
43366: LD_ADDR_VAR 0 10
43370: PUSH
43371: LD_VAR 0 10
43375: PUSH
43376: LD_REAL  1.20000000000000E+0000
43379: MUL
43380: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43381: LD_VAR 0 6
43385: PPUSH
43386: CALL_OW 257
43390: PUSH
43391: LD_INT 5
43393: PUSH
43394: LD_INT 7
43396: PUSH
43397: LD_INT 9
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: IN
43405: PUSH
43406: LD_VAR 0 1
43410: PPUSH
43411: LD_INT 52
43413: PPUSH
43414: CALL_OW 321
43418: PUSH
43419: LD_INT 2
43421: EQUAL
43422: AND
43423: IFFALSE 43440
// bpoints := bpoints * 1.5 ;
43425: LD_ADDR_VAR 0 10
43429: PUSH
43430: LD_VAR 0 10
43434: PUSH
43435: LD_REAL  1.50000000000000E+0000
43438: MUL
43439: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43440: LD_VAR 0 1
43444: PPUSH
43445: LD_INT 66
43447: PPUSH
43448: CALL_OW 321
43452: PUSH
43453: LD_INT 2
43455: EQUAL
43456: IFFALSE 43473
// bpoints := bpoints * 1.1 ;
43458: LD_ADDR_VAR 0 10
43462: PUSH
43463: LD_VAR 0 10
43467: PUSH
43468: LD_REAL  1.10000000000000E+0000
43471: MUL
43472: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43473: LD_ADDR_VAR 0 10
43477: PUSH
43478: LD_VAR 0 10
43482: PUSH
43483: LD_VAR 0 6
43487: PPUSH
43488: LD_INT 1
43490: PPUSH
43491: CALL_OW 259
43495: PUSH
43496: LD_REAL  1.15000000000000E+0000
43499: MUL
43500: MUL
43501: ST_TO_ADDR
// end ; unit_vehicle :
43502: GO 44332
43504: LD_INT 2
43506: DOUBLE
43507: EQUAL
43508: IFTRUE 43512
43510: GO 44320
43512: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43513: LD_VAR 0 6
43517: PPUSH
43518: CALL_OW 264
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 42
43528: PUSH
43529: LD_INT 24
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: IN
43537: IFFALSE 43558
// points := [ 25 , 5 , 3 ] ;
43539: LD_ADDR_VAR 0 9
43543: PUSH
43544: LD_INT 25
43546: PUSH
43547: LD_INT 5
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43558: LD_VAR 0 6
43562: PPUSH
43563: CALL_OW 264
43567: PUSH
43568: LD_INT 4
43570: PUSH
43571: LD_INT 43
43573: PUSH
43574: LD_INT 25
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: LIST
43581: IN
43582: IFFALSE 43603
// points := [ 40 , 15 , 5 ] ;
43584: LD_ADDR_VAR 0 9
43588: PUSH
43589: LD_INT 40
43591: PUSH
43592: LD_INT 15
43594: PUSH
43595: LD_INT 5
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43603: LD_VAR 0 6
43607: PPUSH
43608: CALL_OW 264
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: LD_INT 23
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: IN
43623: IFFALSE 43644
// points := [ 7 , 25 , 8 ] ;
43625: LD_ADDR_VAR 0 9
43629: PUSH
43630: LD_INT 7
43632: PUSH
43633: LD_INT 25
43635: PUSH
43636: LD_INT 8
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43644: LD_VAR 0 6
43648: PPUSH
43649: CALL_OW 264
43653: PUSH
43654: LD_INT 5
43656: PUSH
43657: LD_INT 27
43659: PUSH
43660: LD_INT 44
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: IN
43668: IFFALSE 43689
// points := [ 14 , 50 , 16 ] ;
43670: LD_ADDR_VAR 0 9
43674: PUSH
43675: LD_INT 14
43677: PUSH
43678: LD_INT 50
43680: PUSH
43681: LD_INT 16
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43689: LD_VAR 0 6
43693: PPUSH
43694: CALL_OW 264
43698: PUSH
43699: LD_INT 6
43701: PUSH
43702: LD_INT 46
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: IN
43709: IFFALSE 43730
// points := [ 32 , 120 , 70 ] ;
43711: LD_ADDR_VAR 0 9
43715: PUSH
43716: LD_INT 32
43718: PUSH
43719: LD_INT 120
43721: PUSH
43722: LD_INT 70
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43730: LD_VAR 0 6
43734: PPUSH
43735: CALL_OW 264
43739: PUSH
43740: LD_INT 7
43742: PUSH
43743: LD_INT 28
43745: PUSH
43746: LD_INT 45
43748: PUSH
43749: LD_EXP 41
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: IN
43760: IFFALSE 43781
// points := [ 35 , 20 , 45 ] ;
43762: LD_ADDR_VAR 0 9
43766: PUSH
43767: LD_INT 35
43769: PUSH
43770: LD_INT 20
43772: PUSH
43773: LD_INT 45
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43781: LD_VAR 0 6
43785: PPUSH
43786: CALL_OW 264
43790: PUSH
43791: LD_INT 47
43793: PUSH
43794: EMPTY
43795: LIST
43796: IN
43797: IFFALSE 43818
// points := [ 67 , 45 , 75 ] ;
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_INT 67
43806: PUSH
43807: LD_INT 45
43809: PUSH
43810: LD_INT 75
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43818: LD_VAR 0 6
43822: PPUSH
43823: CALL_OW 264
43827: PUSH
43828: LD_INT 26
43830: PUSH
43831: EMPTY
43832: LIST
43833: IN
43834: IFFALSE 43855
// points := [ 120 , 30 , 80 ] ;
43836: LD_ADDR_VAR 0 9
43840: PUSH
43841: LD_INT 120
43843: PUSH
43844: LD_INT 30
43846: PUSH
43847: LD_INT 80
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43855: LD_VAR 0 6
43859: PPUSH
43860: CALL_OW 264
43864: PUSH
43865: LD_INT 22
43867: PUSH
43868: EMPTY
43869: LIST
43870: IN
43871: IFFALSE 43892
// points := [ 40 , 1 , 1 ] ;
43873: LD_ADDR_VAR 0 9
43877: PUSH
43878: LD_INT 40
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43892: LD_VAR 0 6
43896: PPUSH
43897: CALL_OW 264
43901: PUSH
43902: LD_INT 29
43904: PUSH
43905: EMPTY
43906: LIST
43907: IN
43908: IFFALSE 43929
// points := [ 70 , 200 , 400 ] ;
43910: LD_ADDR_VAR 0 9
43914: PUSH
43915: LD_INT 70
43917: PUSH
43918: LD_INT 200
43920: PUSH
43921: LD_INT 400
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43929: LD_VAR 0 6
43933: PPUSH
43934: CALL_OW 264
43938: PUSH
43939: LD_INT 14
43941: PUSH
43942: LD_INT 53
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: IN
43949: IFFALSE 43970
// points := [ 40 , 10 , 20 ] ;
43951: LD_ADDR_VAR 0 9
43955: PUSH
43956: LD_INT 40
43958: PUSH
43959: LD_INT 10
43961: PUSH
43962: LD_INT 20
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43970: LD_VAR 0 6
43974: PPUSH
43975: CALL_OW 264
43979: PUSH
43980: LD_INT 9
43982: PUSH
43983: EMPTY
43984: LIST
43985: IN
43986: IFFALSE 44007
// points := [ 5 , 70 , 20 ] ;
43988: LD_ADDR_VAR 0 9
43992: PUSH
43993: LD_INT 5
43995: PUSH
43996: LD_INT 70
43998: PUSH
43999: LD_INT 20
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44007: LD_VAR 0 6
44011: PPUSH
44012: CALL_OW 264
44016: PUSH
44017: LD_INT 10
44019: PUSH
44020: EMPTY
44021: LIST
44022: IN
44023: IFFALSE 44044
// points := [ 35 , 110 , 70 ] ;
44025: LD_ADDR_VAR 0 9
44029: PUSH
44030: LD_INT 35
44032: PUSH
44033: LD_INT 110
44035: PUSH
44036: LD_INT 70
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44044: LD_VAR 0 6
44048: PPUSH
44049: CALL_OW 265
44053: PUSH
44054: LD_INT 25
44056: EQUAL
44057: IFFALSE 44078
// points := [ 80 , 65 , 100 ] ;
44059: LD_ADDR_VAR 0 9
44063: PUSH
44064: LD_INT 80
44066: PUSH
44067: LD_INT 65
44069: PUSH
44070: LD_INT 100
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44078: LD_VAR 0 6
44082: PPUSH
44083: CALL_OW 263
44087: PUSH
44088: LD_INT 1
44090: EQUAL
44091: IFFALSE 44126
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44093: LD_ADDR_VAR 0 10
44097: PUSH
44098: LD_VAR 0 10
44102: PUSH
44103: LD_VAR 0 6
44107: PPUSH
44108: CALL_OW 311
44112: PPUSH
44113: LD_INT 3
44115: PPUSH
44116: CALL_OW 259
44120: PUSH
44121: LD_INT 4
44123: MUL
44124: MUL
44125: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44126: LD_VAR 0 6
44130: PPUSH
44131: CALL_OW 263
44135: PUSH
44136: LD_INT 2
44138: EQUAL
44139: IFFALSE 44190
// begin j := IsControledBy ( i ) ;
44141: LD_ADDR_VAR 0 7
44145: PUSH
44146: LD_VAR 0 6
44150: PPUSH
44151: CALL_OW 312
44155: ST_TO_ADDR
// if j then
44156: LD_VAR 0 7
44160: IFFALSE 44190
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44162: LD_ADDR_VAR 0 10
44166: PUSH
44167: LD_VAR 0 10
44171: PUSH
44172: LD_VAR 0 7
44176: PPUSH
44177: LD_INT 3
44179: PPUSH
44180: CALL_OW 259
44184: PUSH
44185: LD_INT 3
44187: MUL
44188: MUL
44189: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44190: LD_VAR 0 6
44194: PPUSH
44195: CALL_OW 264
44199: PUSH
44200: LD_INT 5
44202: PUSH
44203: LD_INT 6
44205: PUSH
44206: LD_INT 46
44208: PUSH
44209: LD_INT 44
44211: PUSH
44212: LD_INT 47
44214: PUSH
44215: LD_INT 45
44217: PUSH
44218: LD_INT 28
44220: PUSH
44221: LD_INT 7
44223: PUSH
44224: LD_INT 27
44226: PUSH
44227: LD_INT 29
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: IN
44242: PUSH
44243: LD_VAR 0 1
44247: PPUSH
44248: LD_INT 52
44250: PPUSH
44251: CALL_OW 321
44255: PUSH
44256: LD_INT 2
44258: EQUAL
44259: AND
44260: IFFALSE 44277
// bpoints := bpoints * 1.2 ;
44262: LD_ADDR_VAR 0 10
44266: PUSH
44267: LD_VAR 0 10
44271: PUSH
44272: LD_REAL  1.20000000000000E+0000
44275: MUL
44276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44277: LD_VAR 0 6
44281: PPUSH
44282: CALL_OW 264
44286: PUSH
44287: LD_INT 6
44289: PUSH
44290: LD_INT 46
44292: PUSH
44293: LD_INT 47
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: IN
44301: IFFALSE 44318
// bpoints := bpoints * 1.2 ;
44303: LD_ADDR_VAR 0 10
44307: PUSH
44308: LD_VAR 0 10
44312: PUSH
44313: LD_REAL  1.20000000000000E+0000
44316: MUL
44317: ST_TO_ADDR
// end ; unit_building :
44318: GO 44332
44320: LD_INT 3
44322: DOUBLE
44323: EQUAL
44324: IFTRUE 44328
44326: GO 44331
44328: POP
// ; end ;
44329: GO 44332
44331: POP
// for j = 1 to 3 do
44332: LD_ADDR_VAR 0 7
44336: PUSH
44337: DOUBLE
44338: LD_INT 1
44340: DEC
44341: ST_TO_ADDR
44342: LD_INT 3
44344: PUSH
44345: FOR_TO
44346: IFFALSE 44399
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44348: LD_ADDR_VAR 0 5
44352: PUSH
44353: LD_VAR 0 5
44357: PPUSH
44358: LD_VAR 0 7
44362: PPUSH
44363: LD_VAR 0 5
44367: PUSH
44368: LD_VAR 0 7
44372: ARRAY
44373: PUSH
44374: LD_VAR 0 9
44378: PUSH
44379: LD_VAR 0 7
44383: ARRAY
44384: PUSH
44385: LD_VAR 0 10
44389: MUL
44390: PLUS
44391: PPUSH
44392: CALL_OW 1
44396: ST_TO_ADDR
44397: GO 44345
44399: POP
44400: POP
// end ;
44401: GO 42878
44403: POP
44404: POP
// result := Replace ( result , 4 , tmp ) ;
44405: LD_ADDR_VAR 0 5
44409: PUSH
44410: LD_VAR 0 5
44414: PPUSH
44415: LD_INT 4
44417: PPUSH
44418: LD_VAR 0 8
44422: PPUSH
44423: CALL_OW 1
44427: ST_TO_ADDR
// end ;
44428: LD_VAR 0 5
44432: RET
// export function DangerAtRange ( unit , range ) ; begin
44433: LD_INT 0
44435: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 255
44450: PPUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 250
44460: PPUSH
44461: LD_VAR 0 1
44465: PPUSH
44466: CALL_OW 251
44470: PPUSH
44471: LD_VAR 0 2
44475: PPUSH
44476: CALL 42730 0 4
44480: ST_TO_ADDR
// end ;
44481: LD_VAR 0 3
44485: RET
// export function DangerInArea ( side , area ) ; begin
44486: LD_INT 0
44488: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44489: LD_ADDR_VAR 0 3
44493: PUSH
44494: LD_VAR 0 2
44498: PPUSH
44499: LD_INT 81
44501: PUSH
44502: LD_VAR 0 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PPUSH
44511: CALL_OW 70
44515: ST_TO_ADDR
// end ;
44516: LD_VAR 0 3
44520: RET
// export function IsExtension ( b ) ; begin
44521: LD_INT 0
44523: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44524: LD_ADDR_VAR 0 2
44528: PUSH
44529: LD_VAR 0 1
44533: PUSH
44534: LD_INT 23
44536: PUSH
44537: LD_INT 20
44539: PUSH
44540: LD_INT 22
44542: PUSH
44543: LD_INT 17
44545: PUSH
44546: LD_INT 24
44548: PUSH
44549: LD_INT 21
44551: PUSH
44552: LD_INT 19
44554: PUSH
44555: LD_INT 16
44557: PUSH
44558: LD_INT 25
44560: PUSH
44561: LD_INT 18
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: IN
44576: ST_TO_ADDR
// end ;
44577: LD_VAR 0 2
44581: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44582: LD_INT 0
44584: PPUSH
44585: PPUSH
44586: PPUSH
// result := [ ] ;
44587: LD_ADDR_VAR 0 4
44591: PUSH
44592: EMPTY
44593: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44594: LD_ADDR_VAR 0 5
44598: PUSH
44599: LD_VAR 0 2
44603: PPUSH
44604: LD_INT 21
44606: PUSH
44607: LD_INT 3
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PPUSH
44614: CALL_OW 70
44618: ST_TO_ADDR
// if not tmp then
44619: LD_VAR 0 5
44623: NOT
44624: IFFALSE 44628
// exit ;
44626: GO 44692
// if checkLink then
44628: LD_VAR 0 3
44632: IFFALSE 44682
// begin for i in tmp do
44634: LD_ADDR_VAR 0 6
44638: PUSH
44639: LD_VAR 0 5
44643: PUSH
44644: FOR_IN
44645: IFFALSE 44680
// if GetBase ( i ) <> base then
44647: LD_VAR 0 6
44651: PPUSH
44652: CALL_OW 274
44656: PUSH
44657: LD_VAR 0 1
44661: NONEQUAL
44662: IFFALSE 44678
// ComLinkToBase ( base , i ) ;
44664: LD_VAR 0 1
44668: PPUSH
44669: LD_VAR 0 6
44673: PPUSH
44674: CALL_OW 169
44678: GO 44644
44680: POP
44681: POP
// end ; result := tmp ;
44682: LD_ADDR_VAR 0 4
44686: PUSH
44687: LD_VAR 0 5
44691: ST_TO_ADDR
// end ;
44692: LD_VAR 0 4
44696: RET
// export function ComComplete ( units , b ) ; var i ; begin
44697: LD_INT 0
44699: PPUSH
44700: PPUSH
// if not units then
44701: LD_VAR 0 1
44705: NOT
44706: IFFALSE 44710
// exit ;
44708: GO 44800
// for i in units do
44710: LD_ADDR_VAR 0 4
44714: PUSH
44715: LD_VAR 0 1
44719: PUSH
44720: FOR_IN
44721: IFFALSE 44798
// if BuildingStatus ( b ) = bs_build then
44723: LD_VAR 0 2
44727: PPUSH
44728: CALL_OW 461
44732: PUSH
44733: LD_INT 1
44735: EQUAL
44736: IFFALSE 44796
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44738: LD_VAR 0 4
44742: PPUSH
44743: LD_STRING h
44745: PUSH
44746: LD_VAR 0 2
44750: PPUSH
44751: CALL_OW 250
44755: PUSH
44756: LD_VAR 0 2
44760: PPUSH
44761: CALL_OW 251
44765: PUSH
44766: LD_VAR 0 2
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: PPUSH
44792: CALL_OW 446
44796: GO 44720
44798: POP
44799: POP
// end ;
44800: LD_VAR 0 3
44804: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44805: LD_INT 0
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44813: LD_VAR 0 1
44817: NOT
44818: PUSH
44819: LD_VAR 0 1
44823: PPUSH
44824: CALL_OW 263
44828: PUSH
44829: LD_INT 2
44831: NONEQUAL
44832: OR
44833: IFFALSE 44837
// exit ;
44835: GO 45153
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44837: LD_ADDR_VAR 0 6
44841: PUSH
44842: LD_INT 22
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 255
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 30
44864: PUSH
44865: LD_INT 36
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 34
44874: PUSH
44875: LD_INT 31
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PPUSH
44891: CALL_OW 69
44895: ST_TO_ADDR
// if not tmp then
44896: LD_VAR 0 6
44900: NOT
44901: IFFALSE 44905
// exit ;
44903: GO 45153
// result := [ ] ;
44905: LD_ADDR_VAR 0 2
44909: PUSH
44910: EMPTY
44911: ST_TO_ADDR
// for i in tmp do
44912: LD_ADDR_VAR 0 3
44916: PUSH
44917: LD_VAR 0 6
44921: PUSH
44922: FOR_IN
44923: IFFALSE 44994
// begin t := UnitsInside ( i ) ;
44925: LD_ADDR_VAR 0 4
44929: PUSH
44930: LD_VAR 0 3
44934: PPUSH
44935: CALL_OW 313
44939: ST_TO_ADDR
// if t then
44940: LD_VAR 0 4
44944: IFFALSE 44992
// for j in t do
44946: LD_ADDR_VAR 0 7
44950: PUSH
44951: LD_VAR 0 4
44955: PUSH
44956: FOR_IN
44957: IFFALSE 44990
// result := Replace ( result , result + 1 , j ) ;
44959: LD_ADDR_VAR 0 2
44963: PUSH
44964: LD_VAR 0 2
44968: PPUSH
44969: LD_VAR 0 2
44973: PUSH
44974: LD_INT 1
44976: PLUS
44977: PPUSH
44978: LD_VAR 0 7
44982: PPUSH
44983: CALL_OW 1
44987: ST_TO_ADDR
44988: GO 44956
44990: POP
44991: POP
// end ;
44992: GO 44922
44994: POP
44995: POP
// if not result then
44996: LD_VAR 0 2
45000: NOT
45001: IFFALSE 45005
// exit ;
45003: GO 45153
// mech := result [ 1 ] ;
45005: LD_ADDR_VAR 0 5
45009: PUSH
45010: LD_VAR 0 2
45014: PUSH
45015: LD_INT 1
45017: ARRAY
45018: ST_TO_ADDR
// if result > 1 then
45019: LD_VAR 0 2
45023: PUSH
45024: LD_INT 1
45026: GREATER
45027: IFFALSE 45139
// begin for i = 2 to result do
45029: LD_ADDR_VAR 0 3
45033: PUSH
45034: DOUBLE
45035: LD_INT 2
45037: DEC
45038: ST_TO_ADDR
45039: LD_VAR 0 2
45043: PUSH
45044: FOR_TO
45045: IFFALSE 45137
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45047: LD_ADDR_VAR 0 4
45051: PUSH
45052: LD_VAR 0 2
45056: PUSH
45057: LD_VAR 0 3
45061: ARRAY
45062: PPUSH
45063: LD_INT 3
45065: PPUSH
45066: CALL_OW 259
45070: PUSH
45071: LD_VAR 0 2
45075: PUSH
45076: LD_VAR 0 3
45080: ARRAY
45081: PPUSH
45082: CALL_OW 432
45086: MINUS
45087: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45088: LD_VAR 0 4
45092: PUSH
45093: LD_VAR 0 5
45097: PPUSH
45098: LD_INT 3
45100: PPUSH
45101: CALL_OW 259
45105: PUSH
45106: LD_VAR 0 5
45110: PPUSH
45111: CALL_OW 432
45115: MINUS
45116: GREATEREQUAL
45117: IFFALSE 45135
// mech := result [ i ] ;
45119: LD_ADDR_VAR 0 5
45123: PUSH
45124: LD_VAR 0 2
45128: PUSH
45129: LD_VAR 0 3
45133: ARRAY
45134: ST_TO_ADDR
// end ;
45135: GO 45044
45137: POP
45138: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45139: LD_VAR 0 1
45143: PPUSH
45144: LD_VAR 0 5
45148: PPUSH
45149: CALL_OW 135
// end ;
45153: LD_VAR 0 2
45157: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45158: LD_INT 0
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
// result := [ ] ;
45173: LD_ADDR_VAR 0 7
45177: PUSH
45178: EMPTY
45179: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45180: LD_VAR 0 1
45184: PPUSH
45185: CALL_OW 266
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: IN
45200: NOT
45201: IFFALSE 45205
// exit ;
45203: GO 46839
// if name then
45205: LD_VAR 0 3
45209: IFFALSE 45225
// SetBName ( base_dep , name ) ;
45211: LD_VAR 0 1
45215: PPUSH
45216: LD_VAR 0 3
45220: PPUSH
45221: CALL_OW 500
// base := GetBase ( base_dep ) ;
45225: LD_ADDR_VAR 0 15
45229: PUSH
45230: LD_VAR 0 1
45234: PPUSH
45235: CALL_OW 274
45239: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45240: LD_ADDR_VAR 0 16
45244: PUSH
45245: LD_VAR 0 1
45249: PPUSH
45250: CALL_OW 255
45254: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45255: LD_ADDR_VAR 0 17
45259: PUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: CALL_OW 248
45269: ST_TO_ADDR
// if sources then
45270: LD_VAR 0 5
45274: IFFALSE 45321
// for i = 1 to 3 do
45276: LD_ADDR_VAR 0 8
45280: PUSH
45281: DOUBLE
45282: LD_INT 1
45284: DEC
45285: ST_TO_ADDR
45286: LD_INT 3
45288: PUSH
45289: FOR_TO
45290: IFFALSE 45319
// AddResourceType ( base , i , sources [ i ] ) ;
45292: LD_VAR 0 15
45296: PPUSH
45297: LD_VAR 0 8
45301: PPUSH
45302: LD_VAR 0 5
45306: PUSH
45307: LD_VAR 0 8
45311: ARRAY
45312: PPUSH
45313: CALL_OW 276
45317: GO 45289
45319: POP
45320: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45321: LD_ADDR_VAR 0 18
45325: PUSH
45326: LD_VAR 0 15
45330: PPUSH
45331: LD_VAR 0 2
45335: PPUSH
45336: LD_INT 1
45338: PPUSH
45339: CALL 44582 0 3
45343: ST_TO_ADDR
// InitHc ;
45344: CALL_OW 19
// InitUc ;
45348: CALL_OW 18
// uc_side := side ;
45352: LD_ADDR_OWVAR 20
45356: PUSH
45357: LD_VAR 0 16
45361: ST_TO_ADDR
// uc_nation := nation ;
45362: LD_ADDR_OWVAR 21
45366: PUSH
45367: LD_VAR 0 17
45371: ST_TO_ADDR
// if buildings then
45372: LD_VAR 0 18
45376: IFFALSE 46698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45378: LD_ADDR_VAR 0 19
45382: PUSH
45383: LD_VAR 0 18
45387: PPUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 30
45393: PUSH
45394: LD_INT 29
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 30
45403: PUSH
45404: LD_INT 30
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: PPUSH
45416: CALL_OW 72
45420: ST_TO_ADDR
// if tmp then
45421: LD_VAR 0 19
45425: IFFALSE 45473
// for i in tmp do
45427: LD_ADDR_VAR 0 8
45431: PUSH
45432: LD_VAR 0 19
45436: PUSH
45437: FOR_IN
45438: IFFALSE 45471
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45440: LD_VAR 0 8
45444: PPUSH
45445: CALL_OW 250
45449: PPUSH
45450: LD_VAR 0 8
45454: PPUSH
45455: CALL_OW 251
45459: PPUSH
45460: LD_VAR 0 16
45464: PPUSH
45465: CALL_OW 441
45469: GO 45437
45471: POP
45472: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45473: LD_VAR 0 18
45477: PPUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 30
45483: PUSH
45484: LD_INT 32
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 30
45493: PUSH
45494: LD_INT 33
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: PPUSH
45506: CALL_OW 72
45510: IFFALSE 45598
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45512: LD_ADDR_VAR 0 8
45516: PUSH
45517: LD_VAR 0 18
45521: PPUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 30
45527: PUSH
45528: LD_INT 32
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 30
45537: PUSH
45538: LD_INT 33
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: PPUSH
45550: CALL_OW 72
45554: PUSH
45555: FOR_IN
45556: IFFALSE 45596
// begin if not GetBWeapon ( i ) then
45558: LD_VAR 0 8
45562: PPUSH
45563: CALL_OW 269
45567: NOT
45568: IFFALSE 45594
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45570: LD_VAR 0 8
45574: PPUSH
45575: LD_VAR 0 8
45579: PPUSH
45580: LD_VAR 0 2
45584: PPUSH
45585: CALL 46844 0 2
45589: PPUSH
45590: CALL_OW 431
// end ;
45594: GO 45555
45596: POP
45597: POP
// end ; for i = 1 to personel do
45598: LD_ADDR_VAR 0 8
45602: PUSH
45603: DOUBLE
45604: LD_INT 1
45606: DEC
45607: ST_TO_ADDR
45608: LD_VAR 0 6
45612: PUSH
45613: FOR_TO
45614: IFFALSE 46678
// begin if i > 4 then
45616: LD_VAR 0 8
45620: PUSH
45621: LD_INT 4
45623: GREATER
45624: IFFALSE 45628
// break ;
45626: GO 46678
// case i of 1 :
45628: LD_VAR 0 8
45632: PUSH
45633: LD_INT 1
45635: DOUBLE
45636: EQUAL
45637: IFTRUE 45641
45639: GO 45721
45641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45642: LD_ADDR_VAR 0 12
45646: PUSH
45647: LD_VAR 0 18
45651: PPUSH
45652: LD_INT 22
45654: PUSH
45655: LD_VAR 0 16
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 58
45666: PUSH
45667: EMPTY
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 30
45675: PUSH
45676: LD_INT 32
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 30
45685: PUSH
45686: LD_INT 4
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 30
45695: PUSH
45696: LD_INT 5
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: PPUSH
45714: CALL_OW 72
45718: ST_TO_ADDR
45719: GO 45943
45721: LD_INT 2
45723: DOUBLE
45724: EQUAL
45725: IFTRUE 45729
45727: GO 45791
45729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45730: LD_ADDR_VAR 0 12
45734: PUSH
45735: LD_VAR 0 18
45739: PPUSH
45740: LD_INT 22
45742: PUSH
45743: LD_VAR 0 16
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 30
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 30
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PPUSH
45784: CALL_OW 72
45788: ST_TO_ADDR
45789: GO 45943
45791: LD_INT 3
45793: DOUBLE
45794: EQUAL
45795: IFTRUE 45799
45797: GO 45861
45799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45800: LD_ADDR_VAR 0 12
45804: PUSH
45805: LD_VAR 0 18
45809: PPUSH
45810: LD_INT 22
45812: PUSH
45813: LD_VAR 0 16
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 30
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 30
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PPUSH
45854: CALL_OW 72
45858: ST_TO_ADDR
45859: GO 45943
45861: LD_INT 4
45863: DOUBLE
45864: EQUAL
45865: IFTRUE 45869
45867: GO 45942
45869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45870: LD_ADDR_VAR 0 12
45874: PUSH
45875: LD_VAR 0 18
45879: PPUSH
45880: LD_INT 22
45882: PUSH
45883: LD_VAR 0 16
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 30
45897: PUSH
45898: LD_INT 6
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 30
45907: PUSH
45908: LD_INT 7
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 30
45917: PUSH
45918: LD_INT 8
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PPUSH
45935: CALL_OW 72
45939: ST_TO_ADDR
45940: GO 45943
45942: POP
// if i = 1 then
45943: LD_VAR 0 8
45947: PUSH
45948: LD_INT 1
45950: EQUAL
45951: IFFALSE 46062
// begin tmp := [ ] ;
45953: LD_ADDR_VAR 0 19
45957: PUSH
45958: EMPTY
45959: ST_TO_ADDR
// for j in f do
45960: LD_ADDR_VAR 0 9
45964: PUSH
45965: LD_VAR 0 12
45969: PUSH
45970: FOR_IN
45971: IFFALSE 46044
// if GetBType ( j ) = b_bunker then
45973: LD_VAR 0 9
45977: PPUSH
45978: CALL_OW 266
45982: PUSH
45983: LD_INT 32
45985: EQUAL
45986: IFFALSE 46013
// tmp := Insert ( tmp , 1 , j ) else
45988: LD_ADDR_VAR 0 19
45992: PUSH
45993: LD_VAR 0 19
45997: PPUSH
45998: LD_INT 1
46000: PPUSH
46001: LD_VAR 0 9
46005: PPUSH
46006: CALL_OW 2
46010: ST_TO_ADDR
46011: GO 46042
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46013: LD_ADDR_VAR 0 19
46017: PUSH
46018: LD_VAR 0 19
46022: PPUSH
46023: LD_VAR 0 19
46027: PUSH
46028: LD_INT 1
46030: PLUS
46031: PPUSH
46032: LD_VAR 0 9
46036: PPUSH
46037: CALL_OW 2
46041: ST_TO_ADDR
46042: GO 45970
46044: POP
46045: POP
// if tmp then
46046: LD_VAR 0 19
46050: IFFALSE 46062
// f := tmp ;
46052: LD_ADDR_VAR 0 12
46056: PUSH
46057: LD_VAR 0 19
46061: ST_TO_ADDR
// end ; x := personel [ i ] ;
46062: LD_ADDR_VAR 0 13
46066: PUSH
46067: LD_VAR 0 6
46071: PUSH
46072: LD_VAR 0 8
46076: ARRAY
46077: ST_TO_ADDR
// if x = - 1 then
46078: LD_VAR 0 13
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: EQUAL
46087: IFFALSE 46296
// begin for j in f do
46089: LD_ADDR_VAR 0 9
46093: PUSH
46094: LD_VAR 0 12
46098: PUSH
46099: FOR_IN
46100: IFFALSE 46292
// repeat InitHc ;
46102: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46106: LD_VAR 0 9
46110: PPUSH
46111: CALL_OW 266
46115: PUSH
46116: LD_INT 5
46118: EQUAL
46119: IFFALSE 46189
// begin if UnitsInside ( j ) < 3 then
46121: LD_VAR 0 9
46125: PPUSH
46126: CALL_OW 313
46130: PUSH
46131: LD_INT 3
46133: LESS
46134: IFFALSE 46170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46136: LD_INT 0
46138: PPUSH
46139: LD_INT 5
46141: PUSH
46142: LD_INT 8
46144: PUSH
46145: LD_INT 9
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: PUSH
46153: LD_VAR 0 17
46157: ARRAY
46158: PPUSH
46159: LD_VAR 0 4
46163: PPUSH
46164: CALL_OW 380
46168: GO 46187
// PrepareHuman ( false , i , skill ) ;
46170: LD_INT 0
46172: PPUSH
46173: LD_VAR 0 8
46177: PPUSH
46178: LD_VAR 0 4
46182: PPUSH
46183: CALL_OW 380
// end else
46187: GO 46206
// PrepareHuman ( false , i , skill ) ;
46189: LD_INT 0
46191: PPUSH
46192: LD_VAR 0 8
46196: PPUSH
46197: LD_VAR 0 4
46201: PPUSH
46202: CALL_OW 380
// un := CreateHuman ;
46206: LD_ADDR_VAR 0 14
46210: PUSH
46211: CALL_OW 44
46215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46216: LD_ADDR_VAR 0 7
46220: PUSH
46221: LD_VAR 0 7
46225: PPUSH
46226: LD_INT 1
46228: PPUSH
46229: LD_VAR 0 14
46233: PPUSH
46234: CALL_OW 2
46238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46239: LD_VAR 0 14
46243: PPUSH
46244: LD_VAR 0 9
46248: PPUSH
46249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46253: LD_VAR 0 9
46257: PPUSH
46258: CALL_OW 313
46262: PUSH
46263: LD_INT 6
46265: EQUAL
46266: PUSH
46267: LD_VAR 0 9
46271: PPUSH
46272: CALL_OW 266
46276: PUSH
46277: LD_INT 32
46279: PUSH
46280: LD_INT 31
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: IN
46287: OR
46288: IFFALSE 46102
46290: GO 46099
46292: POP
46293: POP
// end else
46294: GO 46676
// for j = 1 to x do
46296: LD_ADDR_VAR 0 9
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_VAR 0 13
46310: PUSH
46311: FOR_TO
46312: IFFALSE 46674
// begin InitHc ;
46314: CALL_OW 19
// if not f then
46318: LD_VAR 0 12
46322: NOT
46323: IFFALSE 46412
// begin PrepareHuman ( false , i , skill ) ;
46325: LD_INT 0
46327: PPUSH
46328: LD_VAR 0 8
46332: PPUSH
46333: LD_VAR 0 4
46337: PPUSH
46338: CALL_OW 380
// un := CreateHuman ;
46342: LD_ADDR_VAR 0 14
46346: PUSH
46347: CALL_OW 44
46351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46352: LD_ADDR_VAR 0 7
46356: PUSH
46357: LD_VAR 0 7
46361: PPUSH
46362: LD_INT 1
46364: PPUSH
46365: LD_VAR 0 14
46369: PPUSH
46370: CALL_OW 2
46374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46375: LD_VAR 0 14
46379: PPUSH
46380: LD_VAR 0 1
46384: PPUSH
46385: CALL_OW 250
46389: PPUSH
46390: LD_VAR 0 1
46394: PPUSH
46395: CALL_OW 251
46399: PPUSH
46400: LD_INT 10
46402: PPUSH
46403: LD_INT 0
46405: PPUSH
46406: CALL_OW 50
// continue ;
46410: GO 46311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46412: LD_VAR 0 12
46416: PUSH
46417: LD_INT 1
46419: ARRAY
46420: PPUSH
46421: CALL_OW 313
46425: PUSH
46426: LD_VAR 0 12
46430: PUSH
46431: LD_INT 1
46433: ARRAY
46434: PPUSH
46435: CALL_OW 266
46439: PUSH
46440: LD_INT 32
46442: PUSH
46443: LD_INT 31
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: IN
46450: AND
46451: PUSH
46452: LD_VAR 0 12
46456: PUSH
46457: LD_INT 1
46459: ARRAY
46460: PPUSH
46461: CALL_OW 313
46465: PUSH
46466: LD_INT 6
46468: EQUAL
46469: OR
46470: IFFALSE 46490
// f := Delete ( f , 1 ) ;
46472: LD_ADDR_VAR 0 12
46476: PUSH
46477: LD_VAR 0 12
46481: PPUSH
46482: LD_INT 1
46484: PPUSH
46485: CALL_OW 3
46489: ST_TO_ADDR
// if not f then
46490: LD_VAR 0 12
46494: NOT
46495: IFFALSE 46513
// begin x := x + 2 ;
46497: LD_ADDR_VAR 0 13
46501: PUSH
46502: LD_VAR 0 13
46506: PUSH
46507: LD_INT 2
46509: PLUS
46510: ST_TO_ADDR
// continue ;
46511: GO 46311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46513: LD_VAR 0 12
46517: PUSH
46518: LD_INT 1
46520: ARRAY
46521: PPUSH
46522: CALL_OW 266
46526: PUSH
46527: LD_INT 5
46529: EQUAL
46530: IFFALSE 46604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46532: LD_VAR 0 12
46536: PUSH
46537: LD_INT 1
46539: ARRAY
46540: PPUSH
46541: CALL_OW 313
46545: PUSH
46546: LD_INT 3
46548: LESS
46549: IFFALSE 46585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46551: LD_INT 0
46553: PPUSH
46554: LD_INT 5
46556: PUSH
46557: LD_INT 8
46559: PUSH
46560: LD_INT 9
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: PUSH
46568: LD_VAR 0 17
46572: ARRAY
46573: PPUSH
46574: LD_VAR 0 4
46578: PPUSH
46579: CALL_OW 380
46583: GO 46602
// PrepareHuman ( false , i , skill ) ;
46585: LD_INT 0
46587: PPUSH
46588: LD_VAR 0 8
46592: PPUSH
46593: LD_VAR 0 4
46597: PPUSH
46598: CALL_OW 380
// end else
46602: GO 46621
// PrepareHuman ( false , i , skill ) ;
46604: LD_INT 0
46606: PPUSH
46607: LD_VAR 0 8
46611: PPUSH
46612: LD_VAR 0 4
46616: PPUSH
46617: CALL_OW 380
// un := CreateHuman ;
46621: LD_ADDR_VAR 0 14
46625: PUSH
46626: CALL_OW 44
46630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46631: LD_ADDR_VAR 0 7
46635: PUSH
46636: LD_VAR 0 7
46640: PPUSH
46641: LD_INT 1
46643: PPUSH
46644: LD_VAR 0 14
46648: PPUSH
46649: CALL_OW 2
46653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46654: LD_VAR 0 14
46658: PPUSH
46659: LD_VAR 0 12
46663: PUSH
46664: LD_INT 1
46666: ARRAY
46667: PPUSH
46668: CALL_OW 52
// end ;
46672: GO 46311
46674: POP
46675: POP
// end ;
46676: GO 45613
46678: POP
46679: POP
// result := result ^ buildings ;
46680: LD_ADDR_VAR 0 7
46684: PUSH
46685: LD_VAR 0 7
46689: PUSH
46690: LD_VAR 0 18
46694: ADD
46695: ST_TO_ADDR
// end else
46696: GO 46839
// begin for i = 1 to personel do
46698: LD_ADDR_VAR 0 8
46702: PUSH
46703: DOUBLE
46704: LD_INT 1
46706: DEC
46707: ST_TO_ADDR
46708: LD_VAR 0 6
46712: PUSH
46713: FOR_TO
46714: IFFALSE 46837
// begin if i > 4 then
46716: LD_VAR 0 8
46720: PUSH
46721: LD_INT 4
46723: GREATER
46724: IFFALSE 46728
// break ;
46726: GO 46837
// x := personel [ i ] ;
46728: LD_ADDR_VAR 0 13
46732: PUSH
46733: LD_VAR 0 6
46737: PUSH
46738: LD_VAR 0 8
46742: ARRAY
46743: ST_TO_ADDR
// if x = - 1 then
46744: LD_VAR 0 13
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: EQUAL
46753: IFFALSE 46757
// continue ;
46755: GO 46713
// PrepareHuman ( false , i , skill ) ;
46757: LD_INT 0
46759: PPUSH
46760: LD_VAR 0 8
46764: PPUSH
46765: LD_VAR 0 4
46769: PPUSH
46770: CALL_OW 380
// un := CreateHuman ;
46774: LD_ADDR_VAR 0 14
46778: PUSH
46779: CALL_OW 44
46783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46784: LD_VAR 0 14
46788: PPUSH
46789: LD_VAR 0 1
46793: PPUSH
46794: CALL_OW 250
46798: PPUSH
46799: LD_VAR 0 1
46803: PPUSH
46804: CALL_OW 251
46808: PPUSH
46809: LD_INT 10
46811: PPUSH
46812: LD_INT 0
46814: PPUSH
46815: CALL_OW 50
// result := result ^ un ;
46819: LD_ADDR_VAR 0 7
46823: PUSH
46824: LD_VAR 0 7
46828: PUSH
46829: LD_VAR 0 14
46833: ADD
46834: ST_TO_ADDR
// end ;
46835: GO 46713
46837: POP
46838: POP
// end ; end ;
46839: LD_VAR 0 7
46843: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46844: LD_INT 0
46846: PPUSH
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
46851: PPUSH
46852: PPUSH
46853: PPUSH
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
46858: PPUSH
46859: PPUSH
46860: PPUSH
46861: PPUSH
// result := false ;
46862: LD_ADDR_VAR 0 3
46866: PUSH
46867: LD_INT 0
46869: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46870: LD_VAR 0 1
46874: NOT
46875: PUSH
46876: LD_VAR 0 1
46880: PPUSH
46881: CALL_OW 266
46885: PUSH
46886: LD_INT 32
46888: PUSH
46889: LD_INT 33
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: IN
46896: NOT
46897: OR
46898: IFFALSE 46902
// exit ;
46900: GO 48011
// nat := GetNation ( tower ) ;
46902: LD_ADDR_VAR 0 12
46906: PUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: CALL_OW 248
46916: ST_TO_ADDR
// side := GetSide ( tower ) ;
46917: LD_ADDR_VAR 0 16
46921: PUSH
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL_OW 255
46931: ST_TO_ADDR
// x := GetX ( tower ) ;
46932: LD_ADDR_VAR 0 10
46936: PUSH
46937: LD_VAR 0 1
46941: PPUSH
46942: CALL_OW 250
46946: ST_TO_ADDR
// y := GetY ( tower ) ;
46947: LD_ADDR_VAR 0 11
46951: PUSH
46952: LD_VAR 0 1
46956: PPUSH
46957: CALL_OW 251
46961: ST_TO_ADDR
// if not x or not y then
46962: LD_VAR 0 10
46966: NOT
46967: PUSH
46968: LD_VAR 0 11
46972: NOT
46973: OR
46974: IFFALSE 46978
// exit ;
46976: GO 48011
// weapon := 0 ;
46978: LD_ADDR_VAR 0 18
46982: PUSH
46983: LD_INT 0
46985: ST_TO_ADDR
// fac_list := [ ] ;
46986: LD_ADDR_VAR 0 17
46990: PUSH
46991: EMPTY
46992: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46993: LD_ADDR_VAR 0 6
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 274
47007: PPUSH
47008: LD_VAR 0 2
47012: PPUSH
47013: LD_INT 0
47015: PPUSH
47016: CALL 44582 0 3
47020: PPUSH
47021: LD_INT 30
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PPUSH
47031: CALL_OW 72
47035: ST_TO_ADDR
// if not factories then
47036: LD_VAR 0 6
47040: NOT
47041: IFFALSE 47045
// exit ;
47043: GO 48011
// for i in factories do
47045: LD_ADDR_VAR 0 8
47049: PUSH
47050: LD_VAR 0 6
47054: PUSH
47055: FOR_IN
47056: IFFALSE 47081
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47058: LD_ADDR_VAR 0 17
47062: PUSH
47063: LD_VAR 0 17
47067: PUSH
47068: LD_VAR 0 8
47072: PPUSH
47073: CALL_OW 478
47077: UNION
47078: ST_TO_ADDR
47079: GO 47055
47081: POP
47082: POP
// if not fac_list then
47083: LD_VAR 0 17
47087: NOT
47088: IFFALSE 47092
// exit ;
47090: GO 48011
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47092: LD_ADDR_VAR 0 5
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: LD_INT 5
47102: PUSH
47103: LD_INT 9
47105: PUSH
47106: LD_INT 10
47108: PUSH
47109: LD_INT 6
47111: PUSH
47112: LD_INT 7
47114: PUSH
47115: LD_INT 11
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 27
47129: PUSH
47130: LD_INT 28
47132: PUSH
47133: LD_INT 26
47135: PUSH
47136: LD_INT 30
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 43
47147: PUSH
47148: LD_INT 44
47150: PUSH
47151: LD_INT 46
47153: PUSH
47154: LD_INT 45
47156: PUSH
47157: LD_INT 47
47159: PUSH
47160: LD_INT 49
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: PUSH
47176: LD_VAR 0 12
47180: ARRAY
47181: ST_TO_ADDR
// list := list isect fac_list ;
47182: LD_ADDR_VAR 0 5
47186: PUSH
47187: LD_VAR 0 5
47191: PUSH
47192: LD_VAR 0 17
47196: ISECT
47197: ST_TO_ADDR
// if not list then
47198: LD_VAR 0 5
47202: NOT
47203: IFFALSE 47207
// exit ;
47205: GO 48011
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47207: LD_VAR 0 12
47211: PUSH
47212: LD_INT 3
47214: EQUAL
47215: PUSH
47216: LD_INT 49
47218: PUSH
47219: LD_VAR 0 5
47223: IN
47224: AND
47225: PUSH
47226: LD_INT 31
47228: PPUSH
47229: LD_VAR 0 16
47233: PPUSH
47234: CALL_OW 321
47238: PUSH
47239: LD_INT 2
47241: EQUAL
47242: AND
47243: IFFALSE 47303
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47245: LD_INT 22
47247: PUSH
47248: LD_VAR 0 16
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 35
47259: PUSH
47260: LD_INT 49
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 91
47269: PUSH
47270: LD_VAR 0 1
47274: PUSH
47275: LD_INT 10
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: PPUSH
47288: CALL_OW 69
47292: NOT
47293: IFFALSE 47303
// weapon := ru_time_lapser ;
47295: LD_ADDR_VAR 0 18
47299: PUSH
47300: LD_INT 49
47302: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47303: LD_VAR 0 12
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: IN
47318: PUSH
47319: LD_INT 11
47321: PUSH
47322: LD_VAR 0 5
47326: IN
47327: PUSH
47328: LD_INT 30
47330: PUSH
47331: LD_VAR 0 5
47335: IN
47336: OR
47337: AND
47338: PUSH
47339: LD_INT 6
47341: PPUSH
47342: LD_VAR 0 16
47346: PPUSH
47347: CALL_OW 321
47351: PUSH
47352: LD_INT 2
47354: EQUAL
47355: AND
47356: IFFALSE 47521
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47358: LD_INT 22
47360: PUSH
47361: LD_VAR 0 16
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 35
47375: PUSH
47376: LD_INT 11
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 35
47385: PUSH
47386: LD_INT 30
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 91
47400: PUSH
47401: LD_VAR 0 1
47405: PUSH
47406: LD_INT 18
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: PPUSH
47419: CALL_OW 69
47423: NOT
47424: PUSH
47425: LD_INT 22
47427: PUSH
47428: LD_VAR 0 16
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 30
47442: PUSH
47443: LD_INT 32
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 30
47452: PUSH
47453: LD_INT 33
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 91
47467: PUSH
47468: LD_VAR 0 1
47472: PUSH
47473: LD_INT 12
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: PUSH
47486: EMPTY
47487: LIST
47488: PPUSH
47489: CALL_OW 69
47493: PUSH
47494: LD_INT 2
47496: GREATER
47497: AND
47498: IFFALSE 47521
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47500: LD_ADDR_VAR 0 18
47504: PUSH
47505: LD_INT 11
47507: PUSH
47508: LD_INT 30
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_VAR 0 12
47519: ARRAY
47520: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47521: LD_VAR 0 18
47525: NOT
47526: PUSH
47527: LD_INT 40
47529: PPUSH
47530: LD_VAR 0 16
47534: PPUSH
47535: CALL_OW 321
47539: PUSH
47540: LD_INT 2
47542: EQUAL
47543: AND
47544: PUSH
47545: LD_INT 7
47547: PUSH
47548: LD_VAR 0 5
47552: IN
47553: PUSH
47554: LD_INT 28
47556: PUSH
47557: LD_VAR 0 5
47561: IN
47562: OR
47563: PUSH
47564: LD_INT 45
47566: PUSH
47567: LD_VAR 0 5
47571: IN
47572: OR
47573: AND
47574: IFFALSE 47828
// begin hex := GetHexInfo ( x , y ) ;
47576: LD_ADDR_VAR 0 4
47580: PUSH
47581: LD_VAR 0 10
47585: PPUSH
47586: LD_VAR 0 11
47590: PPUSH
47591: CALL_OW 546
47595: ST_TO_ADDR
// if hex [ 1 ] then
47596: LD_VAR 0 4
47600: PUSH
47601: LD_INT 1
47603: ARRAY
47604: IFFALSE 47608
// exit ;
47606: GO 48011
// height := hex [ 2 ] ;
47608: LD_ADDR_VAR 0 15
47612: PUSH
47613: LD_VAR 0 4
47617: PUSH
47618: LD_INT 2
47620: ARRAY
47621: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47622: LD_ADDR_VAR 0 14
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 5
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: ST_TO_ADDR
// for i in tmp do
47645: LD_ADDR_VAR 0 8
47649: PUSH
47650: LD_VAR 0 14
47654: PUSH
47655: FOR_IN
47656: IFFALSE 47826
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47658: LD_ADDR_VAR 0 9
47662: PUSH
47663: LD_VAR 0 10
47667: PPUSH
47668: LD_VAR 0 8
47672: PPUSH
47673: LD_INT 5
47675: PPUSH
47676: CALL_OW 272
47680: PUSH
47681: LD_VAR 0 11
47685: PPUSH
47686: LD_VAR 0 8
47690: PPUSH
47691: LD_INT 5
47693: PPUSH
47694: CALL_OW 273
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47703: LD_VAR 0 9
47707: PUSH
47708: LD_INT 1
47710: ARRAY
47711: PPUSH
47712: LD_VAR 0 9
47716: PUSH
47717: LD_INT 2
47719: ARRAY
47720: PPUSH
47721: CALL_OW 488
47725: IFFALSE 47824
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47727: LD_ADDR_VAR 0 4
47731: PUSH
47732: LD_VAR 0 9
47736: PUSH
47737: LD_INT 1
47739: ARRAY
47740: PPUSH
47741: LD_VAR 0 9
47745: PUSH
47746: LD_INT 2
47748: ARRAY
47749: PPUSH
47750: CALL_OW 546
47754: ST_TO_ADDR
// if hex [ 1 ] then
47755: LD_VAR 0 4
47759: PUSH
47760: LD_INT 1
47762: ARRAY
47763: IFFALSE 47767
// continue ;
47765: GO 47655
// h := hex [ 2 ] ;
47767: LD_ADDR_VAR 0 13
47771: PUSH
47772: LD_VAR 0 4
47776: PUSH
47777: LD_INT 2
47779: ARRAY
47780: ST_TO_ADDR
// if h + 7 < height then
47781: LD_VAR 0 13
47785: PUSH
47786: LD_INT 7
47788: PLUS
47789: PUSH
47790: LD_VAR 0 15
47794: LESS
47795: IFFALSE 47824
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47797: LD_ADDR_VAR 0 18
47801: PUSH
47802: LD_INT 7
47804: PUSH
47805: LD_INT 28
47807: PUSH
47808: LD_INT 45
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: PUSH
47816: LD_VAR 0 12
47820: ARRAY
47821: ST_TO_ADDR
// break ;
47822: GO 47826
// end ; end ; end ;
47824: GO 47655
47826: POP
47827: POP
// end ; if not weapon then
47828: LD_VAR 0 18
47832: NOT
47833: IFFALSE 47893
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47835: LD_ADDR_VAR 0 5
47839: PUSH
47840: LD_VAR 0 5
47844: PUSH
47845: LD_INT 11
47847: PUSH
47848: LD_INT 30
47850: PUSH
47851: LD_INT 49
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: DIFF
47859: ST_TO_ADDR
// if not list then
47860: LD_VAR 0 5
47864: NOT
47865: IFFALSE 47869
// exit ;
47867: GO 48011
// weapon := list [ rand ( 1 , list ) ] ;
47869: LD_ADDR_VAR 0 18
47873: PUSH
47874: LD_VAR 0 5
47878: PUSH
47879: LD_INT 1
47881: PPUSH
47882: LD_VAR 0 5
47886: PPUSH
47887: CALL_OW 12
47891: ARRAY
47892: ST_TO_ADDR
// end ; if weapon then
47893: LD_VAR 0 18
47897: IFFALSE 48011
// begin tmp := CostOfWeapon ( weapon ) ;
47899: LD_ADDR_VAR 0 14
47903: PUSH
47904: LD_VAR 0 18
47908: PPUSH
47909: CALL_OW 451
47913: ST_TO_ADDR
// j := GetBase ( tower ) ;
47914: LD_ADDR_VAR 0 9
47918: PUSH
47919: LD_VAR 0 1
47923: PPUSH
47924: CALL_OW 274
47928: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47929: LD_VAR 0 9
47933: PPUSH
47934: LD_INT 1
47936: PPUSH
47937: CALL_OW 275
47941: PUSH
47942: LD_VAR 0 14
47946: PUSH
47947: LD_INT 1
47949: ARRAY
47950: GREATEREQUAL
47951: PUSH
47952: LD_VAR 0 9
47956: PPUSH
47957: LD_INT 2
47959: PPUSH
47960: CALL_OW 275
47964: PUSH
47965: LD_VAR 0 14
47969: PUSH
47970: LD_INT 2
47972: ARRAY
47973: GREATEREQUAL
47974: AND
47975: PUSH
47976: LD_VAR 0 9
47980: PPUSH
47981: LD_INT 3
47983: PPUSH
47984: CALL_OW 275
47988: PUSH
47989: LD_VAR 0 14
47993: PUSH
47994: LD_INT 3
47996: ARRAY
47997: GREATEREQUAL
47998: AND
47999: IFFALSE 48011
// result := weapon ;
48001: LD_ADDR_VAR 0 3
48005: PUSH
48006: LD_VAR 0 18
48010: ST_TO_ADDR
// end ; end ;
48011: LD_VAR 0 3
48015: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48016: LD_INT 0
48018: PPUSH
48019: PPUSH
// result := true ;
48020: LD_ADDR_VAR 0 3
48024: PUSH
48025: LD_INT 1
48027: ST_TO_ADDR
// if array1 = array2 then
48028: LD_VAR 0 1
48032: PUSH
48033: LD_VAR 0 2
48037: EQUAL
48038: IFFALSE 48098
// begin for i = 1 to array1 do
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: DOUBLE
48046: LD_INT 1
48048: DEC
48049: ST_TO_ADDR
48050: LD_VAR 0 1
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48094
// if array1 [ i ] <> array2 [ i ] then
48058: LD_VAR 0 1
48062: PUSH
48063: LD_VAR 0 4
48067: ARRAY
48068: PUSH
48069: LD_VAR 0 2
48073: PUSH
48074: LD_VAR 0 4
48078: ARRAY
48079: NONEQUAL
48080: IFFALSE 48092
// begin result := false ;
48082: LD_ADDR_VAR 0 3
48086: PUSH
48087: LD_INT 0
48089: ST_TO_ADDR
// break ;
48090: GO 48094
// end ;
48092: GO 48055
48094: POP
48095: POP
// end else
48096: GO 48106
// result := false ;
48098: LD_ADDR_VAR 0 3
48102: PUSH
48103: LD_INT 0
48105: ST_TO_ADDR
// end ;
48106: LD_VAR 0 3
48110: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48111: LD_INT 0
48113: PPUSH
48114: PPUSH
// if not array1 or not array2 then
48115: LD_VAR 0 1
48119: NOT
48120: PUSH
48121: LD_VAR 0 2
48125: NOT
48126: OR
48127: IFFALSE 48131
// exit ;
48129: GO 48195
// result := true ;
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_INT 1
48138: ST_TO_ADDR
// for i = 1 to array1 do
48139: LD_ADDR_VAR 0 4
48143: PUSH
48144: DOUBLE
48145: LD_INT 1
48147: DEC
48148: ST_TO_ADDR
48149: LD_VAR 0 1
48153: PUSH
48154: FOR_TO
48155: IFFALSE 48193
// if array1 [ i ] <> array2 [ i ] then
48157: LD_VAR 0 1
48161: PUSH
48162: LD_VAR 0 4
48166: ARRAY
48167: PUSH
48168: LD_VAR 0 2
48172: PUSH
48173: LD_VAR 0 4
48177: ARRAY
48178: NONEQUAL
48179: IFFALSE 48191
// begin result := false ;
48181: LD_ADDR_VAR 0 3
48185: PUSH
48186: LD_INT 0
48188: ST_TO_ADDR
// break ;
48189: GO 48193
// end ;
48191: GO 48154
48193: POP
48194: POP
// end ;
48195: LD_VAR 0 3
48199: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48200: LD_INT 0
48202: PPUSH
48203: PPUSH
48204: PPUSH
// pom := GetBase ( fac ) ;
48205: LD_ADDR_VAR 0 5
48209: PUSH
48210: LD_VAR 0 1
48214: PPUSH
48215: CALL_OW 274
48219: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48220: LD_ADDR_VAR 0 4
48224: PUSH
48225: LD_VAR 0 2
48229: PUSH
48230: LD_INT 1
48232: ARRAY
48233: PPUSH
48234: LD_VAR 0 2
48238: PUSH
48239: LD_INT 2
48241: ARRAY
48242: PPUSH
48243: LD_VAR 0 2
48247: PUSH
48248: LD_INT 3
48250: ARRAY
48251: PPUSH
48252: LD_VAR 0 2
48256: PUSH
48257: LD_INT 4
48259: ARRAY
48260: PPUSH
48261: CALL_OW 449
48265: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48266: LD_ADDR_VAR 0 3
48270: PUSH
48271: LD_VAR 0 5
48275: PPUSH
48276: LD_INT 1
48278: PPUSH
48279: CALL_OW 275
48283: PUSH
48284: LD_VAR 0 4
48288: PUSH
48289: LD_INT 1
48291: ARRAY
48292: GREATEREQUAL
48293: PUSH
48294: LD_VAR 0 5
48298: PPUSH
48299: LD_INT 2
48301: PPUSH
48302: CALL_OW 275
48306: PUSH
48307: LD_VAR 0 4
48311: PUSH
48312: LD_INT 2
48314: ARRAY
48315: GREATEREQUAL
48316: AND
48317: PUSH
48318: LD_VAR 0 5
48322: PPUSH
48323: LD_INT 3
48325: PPUSH
48326: CALL_OW 275
48330: PUSH
48331: LD_VAR 0 4
48335: PUSH
48336: LD_INT 3
48338: ARRAY
48339: GREATEREQUAL
48340: AND
48341: ST_TO_ADDR
// end ;
48342: LD_VAR 0 3
48346: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48347: LD_INT 0
48349: PPUSH
48350: PPUSH
48351: PPUSH
48352: PPUSH
// pom := GetBase ( building ) ;
48353: LD_ADDR_VAR 0 3
48357: PUSH
48358: LD_VAR 0 1
48362: PPUSH
48363: CALL_OW 274
48367: ST_TO_ADDR
// if not pom then
48368: LD_VAR 0 3
48372: NOT
48373: IFFALSE 48377
// exit ;
48375: GO 48547
// btype := GetBType ( building ) ;
48377: LD_ADDR_VAR 0 5
48381: PUSH
48382: LD_VAR 0 1
48386: PPUSH
48387: CALL_OW 266
48391: ST_TO_ADDR
// if btype = b_armoury then
48392: LD_VAR 0 5
48396: PUSH
48397: LD_INT 4
48399: EQUAL
48400: IFFALSE 48410
// btype := b_barracks ;
48402: LD_ADDR_VAR 0 5
48406: PUSH
48407: LD_INT 5
48409: ST_TO_ADDR
// if btype = b_depot then
48410: LD_VAR 0 5
48414: PUSH
48415: LD_INT 0
48417: EQUAL
48418: IFFALSE 48428
// btype := b_warehouse ;
48420: LD_ADDR_VAR 0 5
48424: PUSH
48425: LD_INT 1
48427: ST_TO_ADDR
// if btype = b_workshop then
48428: LD_VAR 0 5
48432: PUSH
48433: LD_INT 2
48435: EQUAL
48436: IFFALSE 48446
// btype := b_factory ;
48438: LD_ADDR_VAR 0 5
48442: PUSH
48443: LD_INT 3
48445: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48446: LD_ADDR_VAR 0 4
48450: PUSH
48451: LD_VAR 0 5
48455: PPUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: CALL_OW 248
48465: PPUSH
48466: CALL_OW 450
48470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48471: LD_ADDR_VAR 0 2
48475: PUSH
48476: LD_VAR 0 3
48480: PPUSH
48481: LD_INT 1
48483: PPUSH
48484: CALL_OW 275
48488: PUSH
48489: LD_VAR 0 4
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: GREATEREQUAL
48498: PUSH
48499: LD_VAR 0 3
48503: PPUSH
48504: LD_INT 2
48506: PPUSH
48507: CALL_OW 275
48511: PUSH
48512: LD_VAR 0 4
48516: PUSH
48517: LD_INT 2
48519: ARRAY
48520: GREATEREQUAL
48521: AND
48522: PUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: LD_INT 3
48530: PPUSH
48531: CALL_OW 275
48535: PUSH
48536: LD_VAR 0 4
48540: PUSH
48541: LD_INT 3
48543: ARRAY
48544: GREATEREQUAL
48545: AND
48546: ST_TO_ADDR
// end ;
48547: LD_VAR 0 2
48551: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48552: LD_INT 0
48554: PPUSH
48555: PPUSH
48556: PPUSH
// pom := GetBase ( building ) ;
48557: LD_ADDR_VAR 0 4
48561: PUSH
48562: LD_VAR 0 1
48566: PPUSH
48567: CALL_OW 274
48571: ST_TO_ADDR
// if not pom then
48572: LD_VAR 0 4
48576: NOT
48577: IFFALSE 48581
// exit ;
48579: GO 48682
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48581: LD_ADDR_VAR 0 5
48585: PUSH
48586: LD_VAR 0 2
48590: PPUSH
48591: LD_VAR 0 1
48595: PPUSH
48596: CALL_OW 248
48600: PPUSH
48601: CALL_OW 450
48605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48606: LD_ADDR_VAR 0 3
48610: PUSH
48611: LD_VAR 0 4
48615: PPUSH
48616: LD_INT 1
48618: PPUSH
48619: CALL_OW 275
48623: PUSH
48624: LD_VAR 0 5
48628: PUSH
48629: LD_INT 1
48631: ARRAY
48632: GREATEREQUAL
48633: PUSH
48634: LD_VAR 0 4
48638: PPUSH
48639: LD_INT 2
48641: PPUSH
48642: CALL_OW 275
48646: PUSH
48647: LD_VAR 0 5
48651: PUSH
48652: LD_INT 2
48654: ARRAY
48655: GREATEREQUAL
48656: AND
48657: PUSH
48658: LD_VAR 0 4
48662: PPUSH
48663: LD_INT 3
48665: PPUSH
48666: CALL_OW 275
48670: PUSH
48671: LD_VAR 0 5
48675: PUSH
48676: LD_INT 3
48678: ARRAY
48679: GREATEREQUAL
48680: AND
48681: ST_TO_ADDR
// end ;
48682: LD_VAR 0 3
48686: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48687: LD_INT 0
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
48696: PPUSH
48697: PPUSH
48698: PPUSH
48699: PPUSH
// result := false ;
48700: LD_ADDR_VAR 0 8
48704: PUSH
48705: LD_INT 0
48707: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48708: LD_VAR 0 5
48712: NOT
48713: PUSH
48714: LD_VAR 0 1
48718: NOT
48719: OR
48720: PUSH
48721: LD_VAR 0 2
48725: NOT
48726: OR
48727: PUSH
48728: LD_VAR 0 3
48732: NOT
48733: OR
48734: IFFALSE 48738
// exit ;
48736: GO 49552
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48738: LD_ADDR_VAR 0 14
48742: PUSH
48743: LD_VAR 0 1
48747: PPUSH
48748: LD_VAR 0 2
48752: PPUSH
48753: LD_VAR 0 3
48757: PPUSH
48758: LD_VAR 0 4
48762: PPUSH
48763: LD_VAR 0 5
48767: PUSH
48768: LD_INT 1
48770: ARRAY
48771: PPUSH
48772: CALL_OW 248
48776: PPUSH
48777: LD_INT 0
48779: PPUSH
48780: CALL 50789 0 6
48784: ST_TO_ADDR
// if not hexes then
48785: LD_VAR 0 14
48789: NOT
48790: IFFALSE 48794
// exit ;
48792: GO 49552
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48794: LD_ADDR_VAR 0 17
48798: PUSH
48799: LD_VAR 0 5
48803: PPUSH
48804: LD_INT 22
48806: PUSH
48807: LD_VAR 0 13
48811: PPUSH
48812: CALL_OW 255
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 30
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 30
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PPUSH
48853: CALL_OW 72
48857: ST_TO_ADDR
// for i = 1 to hexes do
48858: LD_ADDR_VAR 0 9
48862: PUSH
48863: DOUBLE
48864: LD_INT 1
48866: DEC
48867: ST_TO_ADDR
48868: LD_VAR 0 14
48872: PUSH
48873: FOR_TO
48874: IFFALSE 49550
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48876: LD_ADDR_VAR 0 13
48880: PUSH
48881: LD_VAR 0 14
48885: PUSH
48886: LD_VAR 0 9
48890: ARRAY
48891: PUSH
48892: LD_INT 1
48894: ARRAY
48895: PPUSH
48896: LD_VAR 0 14
48900: PUSH
48901: LD_VAR 0 9
48905: ARRAY
48906: PUSH
48907: LD_INT 2
48909: ARRAY
48910: PPUSH
48911: CALL_OW 428
48915: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48916: LD_VAR 0 14
48920: PUSH
48921: LD_VAR 0 9
48925: ARRAY
48926: PUSH
48927: LD_INT 1
48929: ARRAY
48930: PPUSH
48931: LD_VAR 0 14
48935: PUSH
48936: LD_VAR 0 9
48940: ARRAY
48941: PUSH
48942: LD_INT 2
48944: ARRAY
48945: PPUSH
48946: CALL_OW 351
48950: PUSH
48951: LD_VAR 0 14
48955: PUSH
48956: LD_VAR 0 9
48960: ARRAY
48961: PUSH
48962: LD_INT 1
48964: ARRAY
48965: PPUSH
48966: LD_VAR 0 14
48970: PUSH
48971: LD_VAR 0 9
48975: ARRAY
48976: PUSH
48977: LD_INT 2
48979: ARRAY
48980: PPUSH
48981: CALL_OW 488
48985: NOT
48986: OR
48987: PUSH
48988: LD_VAR 0 13
48992: PPUSH
48993: CALL_OW 247
48997: PUSH
48998: LD_INT 3
49000: EQUAL
49001: OR
49002: IFFALSE 49008
// exit ;
49004: POP
49005: POP
49006: GO 49552
// if not tmp then
49008: LD_VAR 0 13
49012: NOT
49013: IFFALSE 49017
// continue ;
49015: GO 48873
// result := true ;
49017: LD_ADDR_VAR 0 8
49021: PUSH
49022: LD_INT 1
49024: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49025: LD_VAR 0 6
49029: PUSH
49030: LD_VAR 0 13
49034: PPUSH
49035: CALL_OW 247
49039: PUSH
49040: LD_INT 2
49042: EQUAL
49043: AND
49044: PUSH
49045: LD_VAR 0 13
49049: PPUSH
49050: CALL_OW 263
49054: PUSH
49055: LD_INT 1
49057: EQUAL
49058: AND
49059: IFFALSE 49223
// begin if IsDrivenBy ( tmp ) then
49061: LD_VAR 0 13
49065: PPUSH
49066: CALL_OW 311
49070: IFFALSE 49074
// continue ;
49072: GO 48873
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49074: LD_VAR 0 6
49078: PPUSH
49079: LD_INT 3
49081: PUSH
49082: LD_INT 60
49084: PUSH
49085: EMPTY
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: LD_INT 55
49097: PUSH
49098: EMPTY
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PPUSH
49109: CALL_OW 72
49113: IFFALSE 49221
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49115: LD_ADDR_VAR 0 18
49119: PUSH
49120: LD_VAR 0 6
49124: PPUSH
49125: LD_INT 3
49127: PUSH
49128: LD_INT 60
49130: PUSH
49131: EMPTY
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 3
49140: PUSH
49141: LD_INT 55
49143: PUSH
49144: EMPTY
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PPUSH
49155: CALL_OW 72
49159: PUSH
49160: LD_INT 1
49162: ARRAY
49163: ST_TO_ADDR
// if IsInUnit ( driver ) then
49164: LD_VAR 0 18
49168: PPUSH
49169: CALL_OW 310
49173: IFFALSE 49184
// ComExit ( driver ) ;
49175: LD_VAR 0 18
49179: PPUSH
49180: CALL 74494 0 1
// AddComEnterUnit ( driver , tmp ) ;
49184: LD_VAR 0 18
49188: PPUSH
49189: LD_VAR 0 13
49193: PPUSH
49194: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49198: LD_VAR 0 18
49202: PPUSH
49203: LD_VAR 0 7
49207: PPUSH
49208: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49212: LD_VAR 0 18
49216: PPUSH
49217: CALL_OW 181
// end ; continue ;
49221: GO 48873
// end ; if not cleaners or not tmp in cleaners then
49223: LD_VAR 0 6
49227: NOT
49228: PUSH
49229: LD_VAR 0 13
49233: PUSH
49234: LD_VAR 0 6
49238: IN
49239: NOT
49240: OR
49241: IFFALSE 49548
// begin if dep then
49243: LD_VAR 0 17
49247: IFFALSE 49383
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49249: LD_ADDR_VAR 0 16
49253: PUSH
49254: LD_VAR 0 17
49258: PUSH
49259: LD_INT 1
49261: ARRAY
49262: PPUSH
49263: CALL_OW 250
49267: PPUSH
49268: LD_VAR 0 17
49272: PUSH
49273: LD_INT 1
49275: ARRAY
49276: PPUSH
49277: CALL_OW 254
49281: PPUSH
49282: LD_INT 5
49284: PPUSH
49285: CALL_OW 272
49289: PUSH
49290: LD_VAR 0 17
49294: PUSH
49295: LD_INT 1
49297: ARRAY
49298: PPUSH
49299: CALL_OW 251
49303: PPUSH
49304: LD_VAR 0 17
49308: PUSH
49309: LD_INT 1
49311: ARRAY
49312: PPUSH
49313: CALL_OW 254
49317: PPUSH
49318: LD_INT 5
49320: PPUSH
49321: CALL_OW 273
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49330: LD_VAR 0 16
49334: PUSH
49335: LD_INT 1
49337: ARRAY
49338: PPUSH
49339: LD_VAR 0 16
49343: PUSH
49344: LD_INT 2
49346: ARRAY
49347: PPUSH
49348: CALL_OW 488
49352: IFFALSE 49383
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49354: LD_VAR 0 13
49358: PPUSH
49359: LD_VAR 0 16
49363: PUSH
49364: LD_INT 1
49366: ARRAY
49367: PPUSH
49368: LD_VAR 0 16
49372: PUSH
49373: LD_INT 2
49375: ARRAY
49376: PPUSH
49377: CALL_OW 111
// continue ;
49381: GO 48873
// end ; end ; r := GetDir ( tmp ) ;
49383: LD_ADDR_VAR 0 15
49387: PUSH
49388: LD_VAR 0 13
49392: PPUSH
49393: CALL_OW 254
49397: ST_TO_ADDR
// if r = 5 then
49398: LD_VAR 0 15
49402: PUSH
49403: LD_INT 5
49405: EQUAL
49406: IFFALSE 49416
// r := 0 ;
49408: LD_ADDR_VAR 0 15
49412: PUSH
49413: LD_INT 0
49415: ST_TO_ADDR
// for j = r to 5 do
49416: LD_ADDR_VAR 0 10
49420: PUSH
49421: DOUBLE
49422: LD_VAR 0 15
49426: DEC
49427: ST_TO_ADDR
49428: LD_INT 5
49430: PUSH
49431: FOR_TO
49432: IFFALSE 49546
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49434: LD_ADDR_VAR 0 11
49438: PUSH
49439: LD_VAR 0 13
49443: PPUSH
49444: CALL_OW 250
49448: PPUSH
49449: LD_VAR 0 10
49453: PPUSH
49454: LD_INT 2
49456: PPUSH
49457: CALL_OW 272
49461: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49462: LD_ADDR_VAR 0 12
49466: PUSH
49467: LD_VAR 0 13
49471: PPUSH
49472: CALL_OW 251
49476: PPUSH
49477: LD_VAR 0 10
49481: PPUSH
49482: LD_INT 2
49484: PPUSH
49485: CALL_OW 273
49489: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49490: LD_VAR 0 11
49494: PPUSH
49495: LD_VAR 0 12
49499: PPUSH
49500: CALL_OW 488
49504: PUSH
49505: LD_VAR 0 11
49509: PPUSH
49510: LD_VAR 0 12
49514: PPUSH
49515: CALL_OW 428
49519: NOT
49520: AND
49521: IFFALSE 49544
// begin ComMoveXY ( tmp , _x , _y ) ;
49523: LD_VAR 0 13
49527: PPUSH
49528: LD_VAR 0 11
49532: PPUSH
49533: LD_VAR 0 12
49537: PPUSH
49538: CALL_OW 111
// break ;
49542: GO 49546
// end ; end ;
49544: GO 49431
49546: POP
49547: POP
// end ; end ;
49548: GO 48873
49550: POP
49551: POP
// end ;
49552: LD_VAR 0 8
49556: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49557: LD_INT 0
49559: PPUSH
// result := true ;
49560: LD_ADDR_VAR 0 3
49564: PUSH
49565: LD_INT 1
49567: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49568: LD_VAR 0 2
49572: PUSH
49573: LD_INT 24
49575: DOUBLE
49576: EQUAL
49577: IFTRUE 49587
49579: LD_INT 33
49581: DOUBLE
49582: EQUAL
49583: IFTRUE 49587
49585: GO 49612
49587: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49588: LD_ADDR_VAR 0 3
49592: PUSH
49593: LD_INT 32
49595: PPUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 321
49605: PUSH
49606: LD_INT 2
49608: EQUAL
49609: ST_TO_ADDR
49610: GO 49932
49612: LD_INT 20
49614: DOUBLE
49615: EQUAL
49616: IFTRUE 49620
49618: GO 49645
49620: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49621: LD_ADDR_VAR 0 3
49625: PUSH
49626: LD_INT 6
49628: PPUSH
49629: LD_VAR 0 1
49633: PPUSH
49634: CALL_OW 321
49638: PUSH
49639: LD_INT 2
49641: EQUAL
49642: ST_TO_ADDR
49643: GO 49932
49645: LD_INT 22
49647: DOUBLE
49648: EQUAL
49649: IFTRUE 49659
49651: LD_INT 36
49653: DOUBLE
49654: EQUAL
49655: IFTRUE 49659
49657: GO 49684
49659: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49660: LD_ADDR_VAR 0 3
49664: PUSH
49665: LD_INT 15
49667: PPUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 321
49677: PUSH
49678: LD_INT 2
49680: EQUAL
49681: ST_TO_ADDR
49682: GO 49932
49684: LD_INT 30
49686: DOUBLE
49687: EQUAL
49688: IFTRUE 49692
49690: GO 49717
49692: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49693: LD_ADDR_VAR 0 3
49697: PUSH
49698: LD_INT 20
49700: PPUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: CALL_OW 321
49710: PUSH
49711: LD_INT 2
49713: EQUAL
49714: ST_TO_ADDR
49715: GO 49932
49717: LD_INT 28
49719: DOUBLE
49720: EQUAL
49721: IFTRUE 49731
49723: LD_INT 21
49725: DOUBLE
49726: EQUAL
49727: IFTRUE 49731
49729: GO 49756
49731: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49732: LD_ADDR_VAR 0 3
49736: PUSH
49737: LD_INT 21
49739: PPUSH
49740: LD_VAR 0 1
49744: PPUSH
49745: CALL_OW 321
49749: PUSH
49750: LD_INT 2
49752: EQUAL
49753: ST_TO_ADDR
49754: GO 49932
49756: LD_INT 16
49758: DOUBLE
49759: EQUAL
49760: IFTRUE 49764
49762: GO 49791
49764: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49765: LD_ADDR_VAR 0 3
49769: PUSH
49770: LD_EXP 49
49774: PPUSH
49775: LD_VAR 0 1
49779: PPUSH
49780: CALL_OW 321
49784: PUSH
49785: LD_INT 2
49787: EQUAL
49788: ST_TO_ADDR
49789: GO 49932
49791: LD_INT 19
49793: DOUBLE
49794: EQUAL
49795: IFTRUE 49805
49797: LD_INT 23
49799: DOUBLE
49800: EQUAL
49801: IFTRUE 49805
49803: GO 49832
49805: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49806: LD_ADDR_VAR 0 3
49810: PUSH
49811: LD_EXP 48
49815: PPUSH
49816: LD_VAR 0 1
49820: PPUSH
49821: CALL_OW 321
49825: PUSH
49826: LD_INT 2
49828: EQUAL
49829: ST_TO_ADDR
49830: GO 49932
49832: LD_INT 17
49834: DOUBLE
49835: EQUAL
49836: IFTRUE 49840
49838: GO 49865
49840: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49841: LD_ADDR_VAR 0 3
49845: PUSH
49846: LD_INT 39
49848: PPUSH
49849: LD_VAR 0 1
49853: PPUSH
49854: CALL_OW 321
49858: PUSH
49859: LD_INT 2
49861: EQUAL
49862: ST_TO_ADDR
49863: GO 49932
49865: LD_INT 18
49867: DOUBLE
49868: EQUAL
49869: IFTRUE 49873
49871: GO 49898
49873: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49874: LD_ADDR_VAR 0 3
49878: PUSH
49879: LD_INT 40
49881: PPUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 321
49891: PUSH
49892: LD_INT 2
49894: EQUAL
49895: ST_TO_ADDR
49896: GO 49932
49898: LD_INT 27
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 49931
49906: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49907: LD_ADDR_VAR 0 3
49911: PUSH
49912: LD_INT 35
49914: PPUSH
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 321
49924: PUSH
49925: LD_INT 2
49927: EQUAL
49928: ST_TO_ADDR
49929: GO 49932
49931: POP
// end ;
49932: LD_VAR 0 3
49936: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49937: LD_INT 0
49939: PPUSH
49940: PPUSH
49941: PPUSH
49942: PPUSH
49943: PPUSH
49944: PPUSH
49945: PPUSH
49946: PPUSH
49947: PPUSH
49948: PPUSH
49949: PPUSH
// result := false ;
49950: LD_ADDR_VAR 0 6
49954: PUSH
49955: LD_INT 0
49957: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49958: LD_VAR 0 1
49962: NOT
49963: PUSH
49964: LD_VAR 0 1
49968: PPUSH
49969: CALL_OW 266
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: IN
49984: NOT
49985: OR
49986: PUSH
49987: LD_VAR 0 2
49991: NOT
49992: OR
49993: PUSH
49994: LD_VAR 0 5
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: LD_INT 4
50013: PUSH
50014: LD_INT 5
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: IN
50025: NOT
50026: OR
50027: PUSH
50028: LD_VAR 0 3
50032: PPUSH
50033: LD_VAR 0 4
50037: PPUSH
50038: CALL_OW 488
50042: NOT
50043: OR
50044: IFFALSE 50048
// exit ;
50046: GO 50784
// side := GetSide ( depot ) ;
50048: LD_ADDR_VAR 0 9
50052: PUSH
50053: LD_VAR 0 1
50057: PPUSH
50058: CALL_OW 255
50062: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50063: LD_VAR 0 9
50067: PPUSH
50068: LD_VAR 0 2
50072: PPUSH
50073: CALL 49557 0 2
50077: NOT
50078: IFFALSE 50082
// exit ;
50080: GO 50784
// pom := GetBase ( depot ) ;
50082: LD_ADDR_VAR 0 10
50086: PUSH
50087: LD_VAR 0 1
50091: PPUSH
50092: CALL_OW 274
50096: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50097: LD_ADDR_VAR 0 11
50101: PUSH
50102: LD_VAR 0 2
50106: PPUSH
50107: LD_VAR 0 1
50111: PPUSH
50112: CALL_OW 248
50116: PPUSH
50117: CALL_OW 450
50121: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50122: LD_VAR 0 10
50126: PPUSH
50127: LD_INT 1
50129: PPUSH
50130: CALL_OW 275
50134: PUSH
50135: LD_VAR 0 11
50139: PUSH
50140: LD_INT 1
50142: ARRAY
50143: GREATEREQUAL
50144: PUSH
50145: LD_VAR 0 10
50149: PPUSH
50150: LD_INT 2
50152: PPUSH
50153: CALL_OW 275
50157: PUSH
50158: LD_VAR 0 11
50162: PUSH
50163: LD_INT 2
50165: ARRAY
50166: GREATEREQUAL
50167: AND
50168: PUSH
50169: LD_VAR 0 10
50173: PPUSH
50174: LD_INT 3
50176: PPUSH
50177: CALL_OW 275
50181: PUSH
50182: LD_VAR 0 11
50186: PUSH
50187: LD_INT 3
50189: ARRAY
50190: GREATEREQUAL
50191: AND
50192: NOT
50193: IFFALSE 50197
// exit ;
50195: GO 50784
// if GetBType ( depot ) = b_depot then
50197: LD_VAR 0 1
50201: PPUSH
50202: CALL_OW 266
50206: PUSH
50207: LD_INT 0
50209: EQUAL
50210: IFFALSE 50222
// dist := 28 else
50212: LD_ADDR_VAR 0 14
50216: PUSH
50217: LD_INT 28
50219: ST_TO_ADDR
50220: GO 50230
// dist := 36 ;
50222: LD_ADDR_VAR 0 14
50226: PUSH
50227: LD_INT 36
50229: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50230: LD_VAR 0 1
50234: PPUSH
50235: LD_VAR 0 3
50239: PPUSH
50240: LD_VAR 0 4
50244: PPUSH
50245: CALL_OW 297
50249: PUSH
50250: LD_VAR 0 14
50254: GREATER
50255: IFFALSE 50259
// exit ;
50257: GO 50784
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50259: LD_ADDR_VAR 0 12
50263: PUSH
50264: LD_VAR 0 2
50268: PPUSH
50269: LD_VAR 0 3
50273: PPUSH
50274: LD_VAR 0 4
50278: PPUSH
50279: LD_VAR 0 5
50283: PPUSH
50284: LD_VAR 0 1
50288: PPUSH
50289: CALL_OW 248
50293: PPUSH
50294: LD_INT 0
50296: PPUSH
50297: CALL 50789 0 6
50301: ST_TO_ADDR
// if not hexes then
50302: LD_VAR 0 12
50306: NOT
50307: IFFALSE 50311
// exit ;
50309: GO 50784
// hex := GetHexInfo ( x , y ) ;
50311: LD_ADDR_VAR 0 15
50315: PUSH
50316: LD_VAR 0 3
50320: PPUSH
50321: LD_VAR 0 4
50325: PPUSH
50326: CALL_OW 546
50330: ST_TO_ADDR
// if hex [ 1 ] then
50331: LD_VAR 0 15
50335: PUSH
50336: LD_INT 1
50338: ARRAY
50339: IFFALSE 50343
// exit ;
50341: GO 50784
// height := hex [ 2 ] ;
50343: LD_ADDR_VAR 0 13
50347: PUSH
50348: LD_VAR 0 15
50352: PUSH
50353: LD_INT 2
50355: ARRAY
50356: ST_TO_ADDR
// for i = 1 to hexes do
50357: LD_ADDR_VAR 0 7
50361: PUSH
50362: DOUBLE
50363: LD_INT 1
50365: DEC
50366: ST_TO_ADDR
50367: LD_VAR 0 12
50371: PUSH
50372: FOR_TO
50373: IFFALSE 50703
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50375: LD_VAR 0 12
50379: PUSH
50380: LD_VAR 0 7
50384: ARRAY
50385: PUSH
50386: LD_INT 1
50388: ARRAY
50389: PPUSH
50390: LD_VAR 0 12
50394: PUSH
50395: LD_VAR 0 7
50399: ARRAY
50400: PUSH
50401: LD_INT 2
50403: ARRAY
50404: PPUSH
50405: CALL_OW 488
50409: NOT
50410: PUSH
50411: LD_VAR 0 12
50415: PUSH
50416: LD_VAR 0 7
50420: ARRAY
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PPUSH
50426: LD_VAR 0 12
50430: PUSH
50431: LD_VAR 0 7
50435: ARRAY
50436: PUSH
50437: LD_INT 2
50439: ARRAY
50440: PPUSH
50441: CALL_OW 428
50445: PUSH
50446: LD_INT 0
50448: GREATER
50449: OR
50450: PUSH
50451: LD_VAR 0 12
50455: PUSH
50456: LD_VAR 0 7
50460: ARRAY
50461: PUSH
50462: LD_INT 1
50464: ARRAY
50465: PPUSH
50466: LD_VAR 0 12
50470: PUSH
50471: LD_VAR 0 7
50475: ARRAY
50476: PUSH
50477: LD_INT 2
50479: ARRAY
50480: PPUSH
50481: CALL_OW 351
50485: OR
50486: IFFALSE 50492
// exit ;
50488: POP
50489: POP
50490: GO 50784
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50492: LD_ADDR_VAR 0 8
50496: PUSH
50497: LD_VAR 0 12
50501: PUSH
50502: LD_VAR 0 7
50506: ARRAY
50507: PUSH
50508: LD_INT 1
50510: ARRAY
50511: PPUSH
50512: LD_VAR 0 12
50516: PUSH
50517: LD_VAR 0 7
50521: ARRAY
50522: PUSH
50523: LD_INT 2
50525: ARRAY
50526: PPUSH
50527: CALL_OW 546
50531: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50532: LD_VAR 0 8
50536: PUSH
50537: LD_INT 1
50539: ARRAY
50540: PUSH
50541: LD_VAR 0 8
50545: PUSH
50546: LD_INT 2
50548: ARRAY
50549: PUSH
50550: LD_VAR 0 13
50554: PUSH
50555: LD_INT 2
50557: PLUS
50558: GREATER
50559: OR
50560: PUSH
50561: LD_VAR 0 8
50565: PUSH
50566: LD_INT 2
50568: ARRAY
50569: PUSH
50570: LD_VAR 0 13
50574: PUSH
50575: LD_INT 2
50577: MINUS
50578: LESS
50579: OR
50580: PUSH
50581: LD_VAR 0 8
50585: PUSH
50586: LD_INT 3
50588: ARRAY
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 8
50595: PUSH
50596: LD_INT 9
50598: PUSH
50599: LD_INT 10
50601: PUSH
50602: LD_INT 11
50604: PUSH
50605: LD_INT 12
50607: PUSH
50608: LD_INT 13
50610: PUSH
50611: LD_INT 16
50613: PUSH
50614: LD_INT 17
50616: PUSH
50617: LD_INT 18
50619: PUSH
50620: LD_INT 19
50622: PUSH
50623: LD_INT 20
50625: PUSH
50626: LD_INT 21
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: IN
50644: NOT
50645: OR
50646: PUSH
50647: LD_VAR 0 8
50651: PUSH
50652: LD_INT 5
50654: ARRAY
50655: NOT
50656: OR
50657: PUSH
50658: LD_VAR 0 8
50662: PUSH
50663: LD_INT 6
50665: ARRAY
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 7
50675: PUSH
50676: LD_INT 9
50678: PUSH
50679: LD_INT 10
50681: PUSH
50682: LD_INT 11
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: IN
50693: NOT
50694: OR
50695: IFFALSE 50701
// exit ;
50697: POP
50698: POP
50699: GO 50784
// end ;
50701: GO 50372
50703: POP
50704: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50705: LD_VAR 0 9
50709: PPUSH
50710: LD_VAR 0 3
50714: PPUSH
50715: LD_VAR 0 4
50719: PPUSH
50720: LD_INT 20
50722: PPUSH
50723: CALL 42730 0 4
50727: PUSH
50728: LD_INT 4
50730: ARRAY
50731: IFFALSE 50735
// exit ;
50733: GO 50784
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50735: LD_VAR 0 2
50739: PUSH
50740: LD_INT 29
50742: PUSH
50743: LD_INT 30
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: IN
50750: PUSH
50751: LD_VAR 0 3
50755: PPUSH
50756: LD_VAR 0 4
50760: PPUSH
50761: LD_VAR 0 9
50765: PPUSH
50766: CALL_OW 440
50770: NOT
50771: AND
50772: IFFALSE 50776
// exit ;
50774: GO 50784
// result := true ;
50776: LD_ADDR_VAR 0 6
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// end ;
50784: LD_VAR 0 6
50788: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50789: LD_INT 0
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
50798: PPUSH
50799: PPUSH
50800: PPUSH
50801: PPUSH
50802: PPUSH
50803: PPUSH
50804: PPUSH
50805: PPUSH
50806: PPUSH
50807: PPUSH
50808: PPUSH
50809: PPUSH
50810: PPUSH
50811: PPUSH
50812: PPUSH
50813: PPUSH
50814: PPUSH
50815: PPUSH
50816: PPUSH
50817: PPUSH
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
50822: PPUSH
50823: PPUSH
50824: PPUSH
50825: PPUSH
50826: PPUSH
50827: PPUSH
50828: PPUSH
50829: PPUSH
50830: PPUSH
50831: PPUSH
50832: PPUSH
50833: PPUSH
50834: PPUSH
50835: PPUSH
50836: PPUSH
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
50841: PPUSH
50842: PPUSH
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
// result = [ ] ;
50849: LD_ADDR_VAR 0 7
50853: PUSH
50854: EMPTY
50855: ST_TO_ADDR
// temp_list = [ ] ;
50856: LD_ADDR_VAR 0 9
50860: PUSH
50861: EMPTY
50862: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50863: LD_VAR 0 4
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: LD_INT 4
50882: PUSH
50883: LD_INT 5
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: IN
50894: NOT
50895: PUSH
50896: LD_VAR 0 1
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: IN
50911: PUSH
50912: LD_VAR 0 5
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: IN
50931: NOT
50932: AND
50933: OR
50934: IFFALSE 50938
// exit ;
50936: GO 69329
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50938: LD_VAR 0 1
50942: PUSH
50943: LD_INT 6
50945: PUSH
50946: LD_INT 7
50948: PUSH
50949: LD_INT 8
50951: PUSH
50952: LD_INT 13
50954: PUSH
50955: LD_INT 12
50957: PUSH
50958: LD_INT 15
50960: PUSH
50961: LD_INT 11
50963: PUSH
50964: LD_INT 14
50966: PUSH
50967: LD_INT 10
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: IN
50981: IFFALSE 50991
// btype = b_lab ;
50983: LD_ADDR_VAR 0 1
50987: PUSH
50988: LD_INT 6
50990: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50991: LD_VAR 0 6
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: IN
51010: NOT
51011: PUSH
51012: LD_VAR 0 1
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: LD_INT 6
51031: PUSH
51032: LD_INT 36
51034: PUSH
51035: LD_INT 4
51037: PUSH
51038: LD_INT 5
51040: PUSH
51041: LD_INT 31
51043: PUSH
51044: LD_INT 32
51046: PUSH
51047: LD_INT 33
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: IN
51063: NOT
51064: PUSH
51065: LD_VAR 0 6
51069: PUSH
51070: LD_INT 1
51072: EQUAL
51073: AND
51074: OR
51075: PUSH
51076: LD_VAR 0 1
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: IN
51091: NOT
51092: PUSH
51093: LD_VAR 0 6
51097: PUSH
51098: LD_INT 2
51100: EQUAL
51101: AND
51102: OR
51103: IFFALSE 51113
// mode = 0 ;
51105: LD_ADDR_VAR 0 6
51109: PUSH
51110: LD_INT 0
51112: ST_TO_ADDR
// case mode of 0 :
51113: LD_VAR 0 6
51117: PUSH
51118: LD_INT 0
51120: DOUBLE
51121: EQUAL
51122: IFTRUE 51126
51124: GO 62579
51126: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51127: LD_ADDR_VAR 0 11
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51320: LD_ADDR_VAR 0 12
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51516: LD_ADDR_VAR 0 13
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51715: LD_ADDR_VAR 0 14
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 3
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51911: LD_ADDR_VAR 0 15
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52104: LD_ADDR_VAR 0 16
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52297: LD_ADDR_VAR 0 17
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52527: LD_ADDR_VAR 0 18
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52757: LD_ADDR_VAR 0 19
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52987: LD_ADDR_VAR 0 20
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53217: LD_ADDR_VAR 0 21
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53447: LD_ADDR_VAR 0 22
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53677: LD_ADDR_VAR 0 23
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53957: LD_ADDR_VAR 0 24
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54233: LD_ADDR_VAR 0 25
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54507: LD_ADDR_VAR 0 26
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54783: LD_ADDR_VAR 0 27
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55063: LD_ADDR_VAR 0 28
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 3
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55345: LD_ADDR_VAR 0 29
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55624: LD_ADDR_VAR 0 30
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55902: LD_ADDR_VAR 0 31
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56180: LD_ADDR_VAR 0 32
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 3
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56458: LD_ADDR_VAR 0 33
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: LD_INT 3
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56737: LD_ADDR_VAR 0 34
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57017: LD_ADDR_VAR 0 35
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57129: LD_ADDR_VAR 0 36
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57241: LD_ADDR_VAR 0 37
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57353: LD_ADDR_VAR 0 38
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57465: LD_ADDR_VAR 0 39
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57577: LD_ADDR_VAR 0 40
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57689: LD_ADDR_VAR 0 41
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: LD_INT 3
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58039: LD_ADDR_VAR 0 42
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58389: LD_ADDR_VAR 0 43
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58737: LD_ADDR_VAR 0 44
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59087: LD_ADDR_VAR 0 45
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 3
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59437: LD_ADDR_VAR 0 46
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59785: LD_ADDR_VAR 0 47
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59936: LD_ADDR_VAR 0 48
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60083: LD_ADDR_VAR 0 49
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60227: LD_ADDR_VAR 0 50
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60371: LD_ADDR_VAR 0 51
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60518: LD_ADDR_VAR 0 52
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60669: LD_ADDR_VAR 0 53
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60899: LD_ADDR_VAR 0 54
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61129: LD_ADDR_VAR 0 55
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61359: LD_ADDR_VAR 0 56
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61589: LD_ADDR_VAR 0 57
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61819: LD_ADDR_VAR 0 58
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62049: LD_ADDR_VAR 0 59
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62137: LD_ADDR_VAR 0 60
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62225: LD_ADDR_VAR 0 61
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62313: LD_ADDR_VAR 0 62
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62401: LD_ADDR_VAR 0 63
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62489: LD_ADDR_VAR 0 64
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: ST_TO_ADDR
// end ; 1 :
62577: GO 68474
62579: LD_INT 1
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62587
62585: GO 65210
62587: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62588: LD_ADDR_VAR 0 11
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 3
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62632: LD_ADDR_VAR 0 12
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 3
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: LIST
62672: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62673: LD_ADDR_VAR 0 13
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 3
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 3
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: LIST
62712: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62713: LD_ADDR_VAR 0 14
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62754: LD_ADDR_VAR 0 15
62758: PUSH
62759: LD_INT 2
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62798: LD_ADDR_VAR 0 16
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62844: LD_ADDR_VAR 0 17
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: LIST
62887: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62888: LD_ADDR_VAR 0 18
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62929: LD_ADDR_VAR 0 19
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62969: LD_ADDR_VAR 0 20
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: LD_INT 3
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63010: LD_ADDR_VAR 0 21
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 3
63028: NEG
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63054: LD_ADDR_VAR 0 22
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: NEG
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: LD_INT 3
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63100: LD_ADDR_VAR 0 23
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 3
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 4
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63144: LD_ADDR_VAR 0 24
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 4
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: LIST
63184: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63185: LD_ADDR_VAR 0 25
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: LD_INT 3
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 4
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: LD_INT 4
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63225: LD_ADDR_VAR 0 26
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 3
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 4
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63266: LD_ADDR_VAR 0 27
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 3
63284: NEG
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 4
63295: NEG
63296: PUSH
63297: LD_INT 1
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63310: LD_ADDR_VAR 0 28
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: LD_INT 3
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: NEG
63330: PUSH
63331: LD_INT 4
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 4
63341: NEG
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63356: LD_ADDR_VAR 0 29
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 4
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 4
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 3
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: LD_INT 5
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 5
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 4
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: LD_INT 6
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 6
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: LD_INT 5
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63511: LD_ADDR_VAR 0 30
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 3
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 4
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 4
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 5
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 5
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 6
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 6
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63654: LD_ADDR_VAR 0 31
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: LD_INT 3
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 4
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 4
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: LD_INT 4
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 5
63721: PUSH
63722: LD_INT 4
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 5
63731: PUSH
63732: LD_INT 5
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 4
63741: PUSH
63742: LD_INT 5
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 6
63751: PUSH
63752: LD_INT 5
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 6
63761: PUSH
63762: LD_INT 6
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 5
63771: PUSH
63772: LD_INT 6
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63793: LD_ADDR_VAR 0 32
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 3
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 4
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: LD_INT 4
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: LD_INT 5
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: LD_INT 5
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: LD_INT 4
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 6
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 6
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 5
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63936: LD_ADDR_VAR 0 33
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 4
63988: NEG
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 4
63999: NEG
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 4
64011: NEG
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 5
64022: NEG
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 5
64033: NEG
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 5
64045: NEG
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 6
64056: NEG
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 6
64067: NEG
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64091: LD_ADDR_VAR 0 34
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 3
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: NEG
64135: PUSH
64136: LD_INT 4
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 4
64146: NEG
64147: PUSH
64148: LD_INT 3
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 4
64158: NEG
64159: PUSH
64160: LD_INT 4
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: NEG
64171: PUSH
64172: LD_INT 5
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 5
64182: NEG
64183: PUSH
64184: LD_INT 4
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 5
64194: NEG
64195: PUSH
64196: LD_INT 5
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 5
64206: NEG
64207: PUSH
64208: LD_INT 6
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 6
64218: NEG
64219: PUSH
64220: LD_INT 5
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 6
64230: NEG
64231: PUSH
64232: LD_INT 6
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64254: LD_ADDR_VAR 0 41
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: LIST
64297: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64298: LD_ADDR_VAR 0 42
64302: PUSH
64303: LD_INT 2
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64339: LD_ADDR_VAR 0 43
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64379: LD_ADDR_VAR 0 44
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64420: LD_ADDR_VAR 0 45
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 3
64449: NEG
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: LIST
64463: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64464: LD_ADDR_VAR 0 46
64468: PUSH
64469: LD_INT 2
64471: NEG
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: LD_INT 3
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: NEG
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64510: LD_ADDR_VAR 0 47
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: LD_INT 3
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64543: LD_ADDR_VAR 0 48
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 2
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64574: LD_ADDR_VAR 0 49
64578: PUSH
64579: LD_INT 3
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64603: LD_ADDR_VAR 0 50
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: LD_INT 3
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64632: LD_ADDR_VAR 0 51
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64663: LD_ADDR_VAR 0 52
64667: PUSH
64668: LD_INT 3
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64696: LD_ADDR_VAR 0 53
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 3
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64740: LD_ADDR_VAR 0 54
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64781: LD_ADDR_VAR 0 55
64785: PUSH
64786: LD_INT 3
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 3
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64821: LD_ADDR_VAR 0 56
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64862: LD_ADDR_VAR 0 57
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 3
64891: NEG
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64906: LD_ADDR_VAR 0 58
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 3
64925: NEG
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: NEG
64938: PUSH
64939: LD_INT 3
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64952: LD_ADDR_VAR 0 59
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: LD_INT 2
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 2
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64996: LD_ADDR_VAR 0 60
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65037: LD_ADDR_VAR 0 61
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65077: LD_ADDR_VAR 0 62
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65118: LD_ADDR_VAR 0 63
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65162: LD_ADDR_VAR 0 64
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// end ; 2 :
65208: GO 68474
65210: LD_INT 2
65212: DOUBLE
65213: EQUAL
65214: IFTRUE 65218
65216: GO 68473
65218: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65219: LD_ADDR_VAR 0 29
65223: PUSH
65224: LD_INT 4
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 4
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 5
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 5
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 4
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 3
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 3
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 5
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 3
65329: PUSH
65330: LD_INT 2
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 4
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 4
65349: PUSH
65350: LD_INT 4
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: LD_INT 4
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 4
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: PUSH
65400: LD_INT 4
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: LD_INT 5
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: LD_INT 5
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: LD_INT 4
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: LD_INT 5
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: LD_INT 3
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: NEG
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 4
65558: NEG
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 4
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: LD_INT 2
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: NEG
65594: PUSH
65595: LD_INT 2
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 4
65604: NEG
65605: PUSH
65606: LD_INT 4
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 4
65616: NEG
65617: PUSH
65618: LD_INT 5
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 3
65628: NEG
65629: PUSH
65630: LD_INT 4
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 3
65640: NEG
65641: PUSH
65642: LD_INT 3
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 4
65652: NEG
65653: PUSH
65654: LD_INT 3
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 5
65664: NEG
65665: PUSH
65666: LD_INT 4
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 5
65676: NEG
65677: PUSH
65678: LD_INT 5
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: LD_INT 5
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 5
65700: NEG
65701: PUSH
65702: LD_INT 3
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65757: LD_ADDR_VAR 0 30
65761: PUSH
65762: LD_INT 4
65764: PUSH
65765: LD_INT 4
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 4
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 5
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 5
65794: PUSH
65795: LD_INT 5
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 4
65804: PUSH
65805: LD_INT 5
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: LD_INT 4
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: LD_INT 3
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 5
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: PUSH
65845: LD_INT 5
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 4
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 4
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 3
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 4
65947: NEG
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 4
65958: NEG
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 3
65970: NEG
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 4
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 5
66003: NEG
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 5
66014: NEG
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 5
66026: NEG
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: NEG
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: LD_INT 2
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 3
66097: NEG
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 4
66109: NEG
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 4
66121: NEG
66122: PUSH
66123: LD_INT 4
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 2
66133: NEG
66134: PUSH
66135: LD_INT 4
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: LD_INT 2
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: LD_INT 5
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: LD_INT 4
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: LD_INT 3
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 3
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: LD_INT 4
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: LD_INT 5
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 2
66247: NEG
66248: PUSH
66249: LD_INT 5
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66304: LD_ADDR_VAR 0 31
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 4
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: LD_INT 5
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 5
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: LD_INT 4
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: LD_INT 3
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 2
66383: PUSH
66384: LD_INT 5
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 2
66393: NEG
66394: PUSH
66395: LD_INT 3
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 3
66404: NEG
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: NEG
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 4
66460: NEG
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 4
66471: NEG
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: NEG
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 4
66506: NEG
66507: PUSH
66508: LD_INT 4
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 4
66518: NEG
66519: PUSH
66520: LD_INT 5
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: NEG
66531: PUSH
66532: LD_INT 4
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: LD_INT 3
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 4
66554: NEG
66555: PUSH
66556: LD_INT 3
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: NEG
66567: PUSH
66568: LD_INT 4
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 5
66578: NEG
66579: PUSH
66580: LD_INT 5
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 3
66590: NEG
66591: PUSH
66592: LD_INT 5
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 5
66602: NEG
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 2
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: NEG
66670: PUSH
66671: LD_INT 3
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 4
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: LD_INT 4
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 4
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 4
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 5
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 4
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 5
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66854: LD_ADDR_VAR 0 32
66858: PUSH
66859: LD_INT 4
66861: NEG
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 4
66872: NEG
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 3
66884: NEG
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 5
66917: NEG
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 5
66928: NEG
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 5
66940: NEG
66941: PUSH
66942: LD_INT 2
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 3
66963: NEG
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: NEG
66976: PUSH
66977: LD_INT 4
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 2
66987: NEG
66988: PUSH
66989: LD_INT 3
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 2
66999: NEG
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: NEG
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: LD_INT 3
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 4
67035: NEG
67036: PUSH
67037: LD_INT 4
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: LD_INT 4
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 4
67059: NEG
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 4
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: LD_INT 5
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 4
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: LD_INT 3
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: LD_INT 4
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: LD_INT 5
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 3
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: NEG
67162: PUSH
67163: LD_INT 5
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 3
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 3
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 4
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 4
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 2
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 4
67256: PUSH
67257: LD_INT 2
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 4
67266: PUSH
67267: LD_INT 4
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 4
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 5
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 5
67296: PUSH
67297: LD_INT 5
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 4
67306: PUSH
67307: LD_INT 5
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 3
67316: PUSH
67317: LD_INT 4
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 5
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: LD_INT 5
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67401: LD_ADDR_VAR 0 33
67405: PUSH
67406: LD_INT 4
67408: NEG
67409: PUSH
67410: LD_INT 4
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 4
67420: NEG
67421: PUSH
67422: LD_INT 5
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 3
67432: NEG
67433: PUSH
67434: LD_INT 4
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: LD_INT 3
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 4
67456: NEG
67457: PUSH
67458: LD_INT 3
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 5
67468: NEG
67469: PUSH
67470: LD_INT 4
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 5
67480: NEG
67481: PUSH
67482: LD_INT 5
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 3
67492: NEG
67493: PUSH
67494: LD_INT 5
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 5
67504: NEG
67505: PUSH
67506: LD_INT 3
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: LD_INT 3
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 3
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: LD_INT 2
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: LD_INT 3
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: LD_INT 4
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 2
67606: NEG
67607: PUSH
67608: LD_INT 4
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 4
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 5
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 5
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 4
67659: PUSH
67660: LD_INT 1
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 3
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 5
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 3
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 4
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 4
67741: PUSH
67742: LD_INT 4
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 3
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 2
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 4
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 2
67791: PUSH
67792: LD_INT 4
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: LD_INT 4
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: LD_INT 5
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: LD_INT 5
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: LD_INT 4
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: LD_INT 5
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 2
67883: NEG
67884: PUSH
67885: LD_INT 3
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67939: LD_ADDR_VAR 0 34
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 4
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 5
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: LD_INT 4
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 5
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 2
68036: NEG
68037: PUSH
68038: LD_INT 5
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 4
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: PUSH
68121: LD_INT 2
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 4
68131: PUSH
68132: LD_INT 2
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: LD_INT 4
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: LD_INT 3
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 5
68161: PUSH
68162: LD_INT 4
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 5
68171: PUSH
68172: LD_INT 5
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: LD_INT 5
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: LD_INT 4
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: LD_INT 3
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 5
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: LD_INT 5
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 1
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 1
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: LD_INT 4
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: LD_INT 3
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 1
68292: NEG
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 4
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 2
68313: NEG
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 4
68324: NEG
68325: PUSH
68326: LD_INT 0
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 4
68335: NEG
68336: PUSH
68337: LD_INT 1
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 4
68369: NEG
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 5
68380: NEG
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 5
68391: NEG
68392: PUSH
68393: LD_INT 1
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 5
68403: NEG
68404: PUSH
68405: LD_INT 2
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// end ; end ;
68471: GO 68474
68473: POP
// case btype of b_depot , b_warehouse :
68474: LD_VAR 0 1
68478: PUSH
68479: LD_INT 0
68481: DOUBLE
68482: EQUAL
68483: IFTRUE 68493
68485: LD_INT 1
68487: DOUBLE
68488: EQUAL
68489: IFTRUE 68493
68491: GO 68694
68493: POP
// case nation of nation_american :
68494: LD_VAR 0 5
68498: PUSH
68499: LD_INT 1
68501: DOUBLE
68502: EQUAL
68503: IFTRUE 68507
68505: GO 68563
68507: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68508: LD_ADDR_VAR 0 9
68512: PUSH
68513: LD_VAR 0 11
68517: PUSH
68518: LD_VAR 0 12
68522: PUSH
68523: LD_VAR 0 13
68527: PUSH
68528: LD_VAR 0 14
68532: PUSH
68533: LD_VAR 0 15
68537: PUSH
68538: LD_VAR 0 16
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: PUSH
68551: LD_VAR 0 4
68555: PUSH
68556: LD_INT 1
68558: PLUS
68559: ARRAY
68560: ST_TO_ADDR
68561: GO 68692
68563: LD_INT 2
68565: DOUBLE
68566: EQUAL
68567: IFTRUE 68571
68569: GO 68627
68571: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68572: LD_ADDR_VAR 0 9
68576: PUSH
68577: LD_VAR 0 17
68581: PUSH
68582: LD_VAR 0 18
68586: PUSH
68587: LD_VAR 0 19
68591: PUSH
68592: LD_VAR 0 20
68596: PUSH
68597: LD_VAR 0 21
68601: PUSH
68602: LD_VAR 0 22
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: PUSH
68615: LD_VAR 0 4
68619: PUSH
68620: LD_INT 1
68622: PLUS
68623: ARRAY
68624: ST_TO_ADDR
68625: GO 68692
68627: LD_INT 3
68629: DOUBLE
68630: EQUAL
68631: IFTRUE 68635
68633: GO 68691
68635: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68636: LD_ADDR_VAR 0 9
68640: PUSH
68641: LD_VAR 0 23
68645: PUSH
68646: LD_VAR 0 24
68650: PUSH
68651: LD_VAR 0 25
68655: PUSH
68656: LD_VAR 0 26
68660: PUSH
68661: LD_VAR 0 27
68665: PUSH
68666: LD_VAR 0 28
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: PUSH
68679: LD_VAR 0 4
68683: PUSH
68684: LD_INT 1
68686: PLUS
68687: ARRAY
68688: ST_TO_ADDR
68689: GO 68692
68691: POP
68692: GO 69247
68694: LD_INT 2
68696: DOUBLE
68697: EQUAL
68698: IFTRUE 68708
68700: LD_INT 3
68702: DOUBLE
68703: EQUAL
68704: IFTRUE 68708
68706: GO 68764
68708: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68709: LD_ADDR_VAR 0 9
68713: PUSH
68714: LD_VAR 0 29
68718: PUSH
68719: LD_VAR 0 30
68723: PUSH
68724: LD_VAR 0 31
68728: PUSH
68729: LD_VAR 0 32
68733: PUSH
68734: LD_VAR 0 33
68738: PUSH
68739: LD_VAR 0 34
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: PUSH
68752: LD_VAR 0 4
68756: PUSH
68757: LD_INT 1
68759: PLUS
68760: ARRAY
68761: ST_TO_ADDR
68762: GO 69247
68764: LD_INT 16
68766: DOUBLE
68767: EQUAL
68768: IFTRUE 68826
68770: LD_INT 17
68772: DOUBLE
68773: EQUAL
68774: IFTRUE 68826
68776: LD_INT 18
68778: DOUBLE
68779: EQUAL
68780: IFTRUE 68826
68782: LD_INT 19
68784: DOUBLE
68785: EQUAL
68786: IFTRUE 68826
68788: LD_INT 22
68790: DOUBLE
68791: EQUAL
68792: IFTRUE 68826
68794: LD_INT 20
68796: DOUBLE
68797: EQUAL
68798: IFTRUE 68826
68800: LD_INT 21
68802: DOUBLE
68803: EQUAL
68804: IFTRUE 68826
68806: LD_INT 23
68808: DOUBLE
68809: EQUAL
68810: IFTRUE 68826
68812: LD_INT 24
68814: DOUBLE
68815: EQUAL
68816: IFTRUE 68826
68818: LD_INT 25
68820: DOUBLE
68821: EQUAL
68822: IFTRUE 68826
68824: GO 68882
68826: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68827: LD_ADDR_VAR 0 9
68831: PUSH
68832: LD_VAR 0 35
68836: PUSH
68837: LD_VAR 0 36
68841: PUSH
68842: LD_VAR 0 37
68846: PUSH
68847: LD_VAR 0 38
68851: PUSH
68852: LD_VAR 0 39
68856: PUSH
68857: LD_VAR 0 40
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: PUSH
68870: LD_VAR 0 4
68874: PUSH
68875: LD_INT 1
68877: PLUS
68878: ARRAY
68879: ST_TO_ADDR
68880: GO 69247
68882: LD_INT 6
68884: DOUBLE
68885: EQUAL
68886: IFTRUE 68938
68888: LD_INT 7
68890: DOUBLE
68891: EQUAL
68892: IFTRUE 68938
68894: LD_INT 8
68896: DOUBLE
68897: EQUAL
68898: IFTRUE 68938
68900: LD_INT 13
68902: DOUBLE
68903: EQUAL
68904: IFTRUE 68938
68906: LD_INT 12
68908: DOUBLE
68909: EQUAL
68910: IFTRUE 68938
68912: LD_INT 15
68914: DOUBLE
68915: EQUAL
68916: IFTRUE 68938
68918: LD_INT 11
68920: DOUBLE
68921: EQUAL
68922: IFTRUE 68938
68924: LD_INT 14
68926: DOUBLE
68927: EQUAL
68928: IFTRUE 68938
68930: LD_INT 10
68932: DOUBLE
68933: EQUAL
68934: IFTRUE 68938
68936: GO 68994
68938: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68939: LD_ADDR_VAR 0 9
68943: PUSH
68944: LD_VAR 0 41
68948: PUSH
68949: LD_VAR 0 42
68953: PUSH
68954: LD_VAR 0 43
68958: PUSH
68959: LD_VAR 0 44
68963: PUSH
68964: LD_VAR 0 45
68968: PUSH
68969: LD_VAR 0 46
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: PUSH
68982: LD_VAR 0 4
68986: PUSH
68987: LD_INT 1
68989: PLUS
68990: ARRAY
68991: ST_TO_ADDR
68992: GO 69247
68994: LD_INT 36
68996: DOUBLE
68997: EQUAL
68998: IFTRUE 69002
69000: GO 69058
69002: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69003: LD_ADDR_VAR 0 9
69007: PUSH
69008: LD_VAR 0 47
69012: PUSH
69013: LD_VAR 0 48
69017: PUSH
69018: LD_VAR 0 49
69022: PUSH
69023: LD_VAR 0 50
69027: PUSH
69028: LD_VAR 0 51
69032: PUSH
69033: LD_VAR 0 52
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: PUSH
69046: LD_VAR 0 4
69050: PUSH
69051: LD_INT 1
69053: PLUS
69054: ARRAY
69055: ST_TO_ADDR
69056: GO 69247
69058: LD_INT 4
69060: DOUBLE
69061: EQUAL
69062: IFTRUE 69084
69064: LD_INT 5
69066: DOUBLE
69067: EQUAL
69068: IFTRUE 69084
69070: LD_INT 34
69072: DOUBLE
69073: EQUAL
69074: IFTRUE 69084
69076: LD_INT 37
69078: DOUBLE
69079: EQUAL
69080: IFTRUE 69084
69082: GO 69140
69084: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69085: LD_ADDR_VAR 0 9
69089: PUSH
69090: LD_VAR 0 53
69094: PUSH
69095: LD_VAR 0 54
69099: PUSH
69100: LD_VAR 0 55
69104: PUSH
69105: LD_VAR 0 56
69109: PUSH
69110: LD_VAR 0 57
69114: PUSH
69115: LD_VAR 0 58
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: PUSH
69128: LD_VAR 0 4
69132: PUSH
69133: LD_INT 1
69135: PLUS
69136: ARRAY
69137: ST_TO_ADDR
69138: GO 69247
69140: LD_INT 31
69142: DOUBLE
69143: EQUAL
69144: IFTRUE 69190
69146: LD_INT 32
69148: DOUBLE
69149: EQUAL
69150: IFTRUE 69190
69152: LD_INT 33
69154: DOUBLE
69155: EQUAL
69156: IFTRUE 69190
69158: LD_INT 27
69160: DOUBLE
69161: EQUAL
69162: IFTRUE 69190
69164: LD_INT 26
69166: DOUBLE
69167: EQUAL
69168: IFTRUE 69190
69170: LD_INT 28
69172: DOUBLE
69173: EQUAL
69174: IFTRUE 69190
69176: LD_INT 29
69178: DOUBLE
69179: EQUAL
69180: IFTRUE 69190
69182: LD_INT 30
69184: DOUBLE
69185: EQUAL
69186: IFTRUE 69190
69188: GO 69246
69190: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69191: LD_ADDR_VAR 0 9
69195: PUSH
69196: LD_VAR 0 59
69200: PUSH
69201: LD_VAR 0 60
69205: PUSH
69206: LD_VAR 0 61
69210: PUSH
69211: LD_VAR 0 62
69215: PUSH
69216: LD_VAR 0 63
69220: PUSH
69221: LD_VAR 0 64
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: PUSH
69234: LD_VAR 0 4
69238: PUSH
69239: LD_INT 1
69241: PLUS
69242: ARRAY
69243: ST_TO_ADDR
69244: GO 69247
69246: POP
// temp_list2 = [ ] ;
69247: LD_ADDR_VAR 0 10
69251: PUSH
69252: EMPTY
69253: ST_TO_ADDR
// for i in temp_list do
69254: LD_ADDR_VAR 0 8
69258: PUSH
69259: LD_VAR 0 9
69263: PUSH
69264: FOR_IN
69265: IFFALSE 69317
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69267: LD_ADDR_VAR 0 10
69271: PUSH
69272: LD_VAR 0 10
69276: PUSH
69277: LD_VAR 0 8
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_VAR 0 2
69290: PLUS
69291: PUSH
69292: LD_VAR 0 8
69296: PUSH
69297: LD_INT 2
69299: ARRAY
69300: PUSH
69301: LD_VAR 0 3
69305: PLUS
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: EMPTY
69312: LIST
69313: ADD
69314: ST_TO_ADDR
69315: GO 69264
69317: POP
69318: POP
// result = temp_list2 ;
69319: LD_ADDR_VAR 0 7
69323: PUSH
69324: LD_VAR 0 10
69328: ST_TO_ADDR
// end ;
69329: LD_VAR 0 7
69333: RET
// export function EnemyInRange ( unit , dist ) ; begin
69334: LD_INT 0
69336: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69337: LD_ADDR_VAR 0 3
69341: PUSH
69342: LD_VAR 0 1
69346: PPUSH
69347: CALL_OW 255
69351: PPUSH
69352: LD_VAR 0 1
69356: PPUSH
69357: CALL_OW 250
69361: PPUSH
69362: LD_VAR 0 1
69366: PPUSH
69367: CALL_OW 251
69371: PPUSH
69372: LD_VAR 0 2
69376: PPUSH
69377: CALL 42730 0 4
69381: PUSH
69382: LD_INT 4
69384: ARRAY
69385: ST_TO_ADDR
// end ;
69386: LD_VAR 0 3
69390: RET
// export function PlayerSeeMe ( unit ) ; begin
69391: LD_INT 0
69393: PPUSH
// result := See ( your_side , unit ) ;
69394: LD_ADDR_VAR 0 2
69398: PUSH
69399: LD_OWVAR 2
69403: PPUSH
69404: LD_VAR 0 1
69408: PPUSH
69409: CALL_OW 292
69413: ST_TO_ADDR
// end ;
69414: LD_VAR 0 2
69418: RET
// export function ReverseDir ( unit ) ; begin
69419: LD_INT 0
69421: PPUSH
// if not unit then
69422: LD_VAR 0 1
69426: NOT
69427: IFFALSE 69431
// exit ;
69429: GO 69454
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69431: LD_ADDR_VAR 0 2
69435: PUSH
69436: LD_VAR 0 1
69440: PPUSH
69441: CALL_OW 254
69445: PUSH
69446: LD_INT 3
69448: PLUS
69449: PUSH
69450: LD_INT 6
69452: MOD
69453: ST_TO_ADDR
// end ;
69454: LD_VAR 0 2
69458: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69459: LD_INT 0
69461: PPUSH
69462: PPUSH
69463: PPUSH
69464: PPUSH
69465: PPUSH
// if not hexes then
69466: LD_VAR 0 2
69470: NOT
69471: IFFALSE 69475
// exit ;
69473: GO 69623
// dist := 9999 ;
69475: LD_ADDR_VAR 0 5
69479: PUSH
69480: LD_INT 9999
69482: ST_TO_ADDR
// for i = 1 to hexes do
69483: LD_ADDR_VAR 0 4
69487: PUSH
69488: DOUBLE
69489: LD_INT 1
69491: DEC
69492: ST_TO_ADDR
69493: LD_VAR 0 2
69497: PUSH
69498: FOR_TO
69499: IFFALSE 69611
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69501: LD_VAR 0 1
69505: PPUSH
69506: LD_VAR 0 2
69510: PUSH
69511: LD_VAR 0 4
69515: ARRAY
69516: PUSH
69517: LD_INT 1
69519: ARRAY
69520: PPUSH
69521: LD_VAR 0 2
69525: PUSH
69526: LD_VAR 0 4
69530: ARRAY
69531: PUSH
69532: LD_INT 2
69534: ARRAY
69535: PPUSH
69536: CALL_OW 297
69540: PUSH
69541: LD_VAR 0 5
69545: LESS
69546: IFFALSE 69609
// begin hex := hexes [ i ] ;
69548: LD_ADDR_VAR 0 7
69552: PUSH
69553: LD_VAR 0 2
69557: PUSH
69558: LD_VAR 0 4
69562: ARRAY
69563: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69564: LD_ADDR_VAR 0 5
69568: PUSH
69569: LD_VAR 0 1
69573: PPUSH
69574: LD_VAR 0 2
69578: PUSH
69579: LD_VAR 0 4
69583: ARRAY
69584: PUSH
69585: LD_INT 1
69587: ARRAY
69588: PPUSH
69589: LD_VAR 0 2
69593: PUSH
69594: LD_VAR 0 4
69598: ARRAY
69599: PUSH
69600: LD_INT 2
69602: ARRAY
69603: PPUSH
69604: CALL_OW 297
69608: ST_TO_ADDR
// end ; end ;
69609: GO 69498
69611: POP
69612: POP
// result := hex ;
69613: LD_ADDR_VAR 0 3
69617: PUSH
69618: LD_VAR 0 7
69622: ST_TO_ADDR
// end ;
69623: LD_VAR 0 3
69627: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69628: LD_INT 0
69630: PPUSH
69631: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69632: LD_VAR 0 1
69636: NOT
69637: PUSH
69638: LD_VAR 0 1
69642: PUSH
69643: LD_INT 21
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 23
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PPUSH
69667: CALL_OW 69
69671: IN
69672: NOT
69673: OR
69674: IFFALSE 69678
// exit ;
69676: GO 69725
// for i = 1 to 3 do
69678: LD_ADDR_VAR 0 3
69682: PUSH
69683: DOUBLE
69684: LD_INT 1
69686: DEC
69687: ST_TO_ADDR
69688: LD_INT 3
69690: PUSH
69691: FOR_TO
69692: IFFALSE 69723
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69694: LD_VAR 0 1
69698: PPUSH
69699: CALL_OW 250
69703: PPUSH
69704: LD_VAR 0 1
69708: PPUSH
69709: CALL_OW 251
69713: PPUSH
69714: LD_INT 1
69716: PPUSH
69717: CALL_OW 453
69721: GO 69691
69723: POP
69724: POP
// end ;
69725: LD_VAR 0 2
69729: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69730: LD_INT 0
69732: PPUSH
69733: PPUSH
69734: PPUSH
69735: PPUSH
69736: PPUSH
69737: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69738: LD_VAR 0 1
69742: NOT
69743: PUSH
69744: LD_VAR 0 2
69748: NOT
69749: OR
69750: PUSH
69751: LD_VAR 0 1
69755: PPUSH
69756: CALL_OW 314
69760: OR
69761: IFFALSE 69765
// exit ;
69763: GO 70206
// x := GetX ( enemy_unit ) ;
69765: LD_ADDR_VAR 0 7
69769: PUSH
69770: LD_VAR 0 2
69774: PPUSH
69775: CALL_OW 250
69779: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69780: LD_ADDR_VAR 0 8
69784: PUSH
69785: LD_VAR 0 2
69789: PPUSH
69790: CALL_OW 251
69794: ST_TO_ADDR
// if not x or not y then
69795: LD_VAR 0 7
69799: NOT
69800: PUSH
69801: LD_VAR 0 8
69805: NOT
69806: OR
69807: IFFALSE 69811
// exit ;
69809: GO 70206
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69811: LD_ADDR_VAR 0 6
69815: PUSH
69816: LD_VAR 0 7
69820: PPUSH
69821: LD_INT 0
69823: PPUSH
69824: LD_INT 4
69826: PPUSH
69827: CALL_OW 272
69831: PUSH
69832: LD_VAR 0 8
69836: PPUSH
69837: LD_INT 0
69839: PPUSH
69840: LD_INT 4
69842: PPUSH
69843: CALL_OW 273
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_VAR 0 7
69856: PPUSH
69857: LD_INT 1
69859: PPUSH
69860: LD_INT 4
69862: PPUSH
69863: CALL_OW 272
69867: PUSH
69868: LD_VAR 0 8
69872: PPUSH
69873: LD_INT 1
69875: PPUSH
69876: LD_INT 4
69878: PPUSH
69879: CALL_OW 273
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_VAR 0 7
69892: PPUSH
69893: LD_INT 2
69895: PPUSH
69896: LD_INT 4
69898: PPUSH
69899: CALL_OW 272
69903: PUSH
69904: LD_VAR 0 8
69908: PPUSH
69909: LD_INT 2
69911: PPUSH
69912: LD_INT 4
69914: PPUSH
69915: CALL_OW 273
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_VAR 0 7
69928: PPUSH
69929: LD_INT 3
69931: PPUSH
69932: LD_INT 4
69934: PPUSH
69935: CALL_OW 272
69939: PUSH
69940: LD_VAR 0 8
69944: PPUSH
69945: LD_INT 3
69947: PPUSH
69948: LD_INT 4
69950: PPUSH
69951: CALL_OW 273
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_VAR 0 7
69964: PPUSH
69965: LD_INT 4
69967: PPUSH
69968: LD_INT 4
69970: PPUSH
69971: CALL_OW 272
69975: PUSH
69976: LD_VAR 0 8
69980: PPUSH
69981: LD_INT 4
69983: PPUSH
69984: LD_INT 4
69986: PPUSH
69987: CALL_OW 273
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_VAR 0 7
70000: PPUSH
70001: LD_INT 5
70003: PPUSH
70004: LD_INT 4
70006: PPUSH
70007: CALL_OW 272
70011: PUSH
70012: LD_VAR 0 8
70016: PPUSH
70017: LD_INT 5
70019: PPUSH
70020: LD_INT 4
70022: PPUSH
70023: CALL_OW 273
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: ST_TO_ADDR
// for i = tmp downto 1 do
70040: LD_ADDR_VAR 0 4
70044: PUSH
70045: DOUBLE
70046: LD_VAR 0 6
70050: INC
70051: ST_TO_ADDR
70052: LD_INT 1
70054: PUSH
70055: FOR_DOWNTO
70056: IFFALSE 70157
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70058: LD_VAR 0 6
70062: PUSH
70063: LD_VAR 0 4
70067: ARRAY
70068: PUSH
70069: LD_INT 1
70071: ARRAY
70072: PPUSH
70073: LD_VAR 0 6
70077: PUSH
70078: LD_VAR 0 4
70082: ARRAY
70083: PUSH
70084: LD_INT 2
70086: ARRAY
70087: PPUSH
70088: CALL_OW 488
70092: NOT
70093: PUSH
70094: LD_VAR 0 6
70098: PUSH
70099: LD_VAR 0 4
70103: ARRAY
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: LD_VAR 0 6
70113: PUSH
70114: LD_VAR 0 4
70118: ARRAY
70119: PUSH
70120: LD_INT 2
70122: ARRAY
70123: PPUSH
70124: CALL_OW 428
70128: PUSH
70129: LD_INT 0
70131: NONEQUAL
70132: OR
70133: IFFALSE 70155
// tmp := Delete ( tmp , i ) ;
70135: LD_ADDR_VAR 0 6
70139: PUSH
70140: LD_VAR 0 6
70144: PPUSH
70145: LD_VAR 0 4
70149: PPUSH
70150: CALL_OW 3
70154: ST_TO_ADDR
70155: GO 70055
70157: POP
70158: POP
// j := GetClosestHex ( unit , tmp ) ;
70159: LD_ADDR_VAR 0 5
70163: PUSH
70164: LD_VAR 0 1
70168: PPUSH
70169: LD_VAR 0 6
70173: PPUSH
70174: CALL 69459 0 2
70178: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70179: LD_VAR 0 1
70183: PPUSH
70184: LD_VAR 0 5
70188: PUSH
70189: LD_INT 1
70191: ARRAY
70192: PPUSH
70193: LD_VAR 0 5
70197: PUSH
70198: LD_INT 2
70200: ARRAY
70201: PPUSH
70202: CALL_OW 111
// end ;
70206: LD_VAR 0 3
70210: RET
// export function PrepareApemanSoldier ( ) ; begin
70211: LD_INT 0
70213: PPUSH
// uc_nation := 0 ;
70214: LD_ADDR_OWVAR 21
70218: PUSH
70219: LD_INT 0
70221: ST_TO_ADDR
// hc_sex := sex_male ;
70222: LD_ADDR_OWVAR 27
70226: PUSH
70227: LD_INT 1
70229: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70230: LD_ADDR_OWVAR 28
70234: PUSH
70235: LD_INT 15
70237: ST_TO_ADDR
// hc_gallery :=  ;
70238: LD_ADDR_OWVAR 33
70242: PUSH
70243: LD_STRING 
70245: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70246: LD_ADDR_OWVAR 31
70250: PUSH
70251: LD_INT 0
70253: PPUSH
70254: LD_INT 3
70256: PPUSH
70257: CALL_OW 12
70261: PUSH
70262: LD_INT 0
70264: PPUSH
70265: LD_INT 3
70267: PPUSH
70268: CALL_OW 12
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: ST_TO_ADDR
// end ;
70285: LD_VAR 0 1
70289: RET
// export function PrepareApemanEngineer ( ) ; begin
70290: LD_INT 0
70292: PPUSH
// uc_nation := 0 ;
70293: LD_ADDR_OWVAR 21
70297: PUSH
70298: LD_INT 0
70300: ST_TO_ADDR
// hc_sex := sex_male ;
70301: LD_ADDR_OWVAR 27
70305: PUSH
70306: LD_INT 1
70308: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70309: LD_ADDR_OWVAR 28
70313: PUSH
70314: LD_INT 16
70316: ST_TO_ADDR
// hc_gallery :=  ;
70317: LD_ADDR_OWVAR 33
70321: PUSH
70322: LD_STRING 
70324: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70325: LD_ADDR_OWVAR 31
70329: PUSH
70330: LD_INT 0
70332: PPUSH
70333: LD_INT 3
70335: PPUSH
70336: CALL_OW 12
70340: PUSH
70341: LD_INT 0
70343: PPUSH
70344: LD_INT 3
70346: PPUSH
70347: CALL_OW 12
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: LD_INT 0
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: ST_TO_ADDR
// end ;
70364: LD_VAR 0 1
70368: RET
// export function PrepareApeman ( agressivity ) ; begin
70369: LD_INT 0
70371: PPUSH
// uc_side := 0 ;
70372: LD_ADDR_OWVAR 20
70376: PUSH
70377: LD_INT 0
70379: ST_TO_ADDR
// uc_nation := 0 ;
70380: LD_ADDR_OWVAR 21
70384: PUSH
70385: LD_INT 0
70387: ST_TO_ADDR
// hc_sex := sex_male ;
70388: LD_ADDR_OWVAR 27
70392: PUSH
70393: LD_INT 1
70395: ST_TO_ADDR
// hc_class := class_apeman ;
70396: LD_ADDR_OWVAR 28
70400: PUSH
70401: LD_INT 12
70403: ST_TO_ADDR
// hc_gallery :=  ;
70404: LD_ADDR_OWVAR 33
70408: PUSH
70409: LD_STRING 
70411: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70412: LD_ADDR_OWVAR 35
70416: PUSH
70417: LD_VAR 0 1
70421: NEG
70422: PPUSH
70423: LD_VAR 0 1
70427: PPUSH
70428: CALL_OW 12
70432: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70433: LD_ADDR_OWVAR 31
70437: PUSH
70438: LD_INT 0
70440: PPUSH
70441: LD_INT 3
70443: PPUSH
70444: CALL_OW 12
70448: PUSH
70449: LD_INT 0
70451: PPUSH
70452: LD_INT 3
70454: PPUSH
70455: CALL_OW 12
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: LD_INT 0
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: ST_TO_ADDR
// end ;
70472: LD_VAR 0 2
70476: RET
// export function PrepareTiger ( agressivity ) ; begin
70477: LD_INT 0
70479: PPUSH
// uc_side := 0 ;
70480: LD_ADDR_OWVAR 20
70484: PUSH
70485: LD_INT 0
70487: ST_TO_ADDR
// uc_nation := 0 ;
70488: LD_ADDR_OWVAR 21
70492: PUSH
70493: LD_INT 0
70495: ST_TO_ADDR
// hc_class := class_tiger ;
70496: LD_ADDR_OWVAR 28
70500: PUSH
70501: LD_INT 14
70503: ST_TO_ADDR
// hc_gallery :=  ;
70504: LD_ADDR_OWVAR 33
70508: PUSH
70509: LD_STRING 
70511: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70512: LD_ADDR_OWVAR 35
70516: PUSH
70517: LD_VAR 0 1
70521: NEG
70522: PPUSH
70523: LD_VAR 0 1
70527: PPUSH
70528: CALL_OW 12
70532: ST_TO_ADDR
// end ;
70533: LD_VAR 0 2
70537: RET
// export function PrepareEnchidna ( ) ; begin
70538: LD_INT 0
70540: PPUSH
// uc_side := 0 ;
70541: LD_ADDR_OWVAR 20
70545: PUSH
70546: LD_INT 0
70548: ST_TO_ADDR
// uc_nation := 0 ;
70549: LD_ADDR_OWVAR 21
70553: PUSH
70554: LD_INT 0
70556: ST_TO_ADDR
// hc_class := class_baggie ;
70557: LD_ADDR_OWVAR 28
70561: PUSH
70562: LD_INT 13
70564: ST_TO_ADDR
// hc_gallery :=  ;
70565: LD_ADDR_OWVAR 33
70569: PUSH
70570: LD_STRING 
70572: ST_TO_ADDR
// end ;
70573: LD_VAR 0 1
70577: RET
// export function PrepareFrog ( ) ; begin
70578: LD_INT 0
70580: PPUSH
// uc_side := 0 ;
70581: LD_ADDR_OWVAR 20
70585: PUSH
70586: LD_INT 0
70588: ST_TO_ADDR
// uc_nation := 0 ;
70589: LD_ADDR_OWVAR 21
70593: PUSH
70594: LD_INT 0
70596: ST_TO_ADDR
// hc_class := class_frog ;
70597: LD_ADDR_OWVAR 28
70601: PUSH
70602: LD_INT 19
70604: ST_TO_ADDR
// hc_gallery :=  ;
70605: LD_ADDR_OWVAR 33
70609: PUSH
70610: LD_STRING 
70612: ST_TO_ADDR
// end ;
70613: LD_VAR 0 1
70617: RET
// export function PrepareFish ( ) ; begin
70618: LD_INT 0
70620: PPUSH
// uc_side := 0 ;
70621: LD_ADDR_OWVAR 20
70625: PUSH
70626: LD_INT 0
70628: ST_TO_ADDR
// uc_nation := 0 ;
70629: LD_ADDR_OWVAR 21
70633: PUSH
70634: LD_INT 0
70636: ST_TO_ADDR
// hc_class := class_fish ;
70637: LD_ADDR_OWVAR 28
70641: PUSH
70642: LD_INT 20
70644: ST_TO_ADDR
// hc_gallery :=  ;
70645: LD_ADDR_OWVAR 33
70649: PUSH
70650: LD_STRING 
70652: ST_TO_ADDR
// end ;
70653: LD_VAR 0 1
70657: RET
// export function PrepareBird ( ) ; begin
70658: LD_INT 0
70660: PPUSH
// uc_side := 0 ;
70661: LD_ADDR_OWVAR 20
70665: PUSH
70666: LD_INT 0
70668: ST_TO_ADDR
// uc_nation := 0 ;
70669: LD_ADDR_OWVAR 21
70673: PUSH
70674: LD_INT 0
70676: ST_TO_ADDR
// hc_class := class_phororhacos ;
70677: LD_ADDR_OWVAR 28
70681: PUSH
70682: LD_INT 18
70684: ST_TO_ADDR
// hc_gallery :=  ;
70685: LD_ADDR_OWVAR 33
70689: PUSH
70690: LD_STRING 
70692: ST_TO_ADDR
// end ;
70693: LD_VAR 0 1
70697: RET
// export function PrepareHorse ( ) ; begin
70698: LD_INT 0
70700: PPUSH
// uc_side := 0 ;
70701: LD_ADDR_OWVAR 20
70705: PUSH
70706: LD_INT 0
70708: ST_TO_ADDR
// uc_nation := 0 ;
70709: LD_ADDR_OWVAR 21
70713: PUSH
70714: LD_INT 0
70716: ST_TO_ADDR
// hc_class := class_horse ;
70717: LD_ADDR_OWVAR 28
70721: PUSH
70722: LD_INT 21
70724: ST_TO_ADDR
// hc_gallery :=  ;
70725: LD_ADDR_OWVAR 33
70729: PUSH
70730: LD_STRING 
70732: ST_TO_ADDR
// end ;
70733: LD_VAR 0 1
70737: RET
// export function PrepareMastodont ( ) ; begin
70738: LD_INT 0
70740: PPUSH
// uc_side := 0 ;
70741: LD_ADDR_OWVAR 20
70745: PUSH
70746: LD_INT 0
70748: ST_TO_ADDR
// uc_nation := 0 ;
70749: LD_ADDR_OWVAR 21
70753: PUSH
70754: LD_INT 0
70756: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70757: LD_ADDR_OWVAR 37
70761: PUSH
70762: LD_INT 31
70764: ST_TO_ADDR
// vc_control := control_rider ;
70765: LD_ADDR_OWVAR 38
70769: PUSH
70770: LD_INT 4
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 1
70777: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70778: LD_INT 0
70780: PPUSH
70781: PPUSH
70782: PPUSH
// uc_side = 0 ;
70783: LD_ADDR_OWVAR 20
70787: PUSH
70788: LD_INT 0
70790: ST_TO_ADDR
// uc_nation = 0 ;
70791: LD_ADDR_OWVAR 21
70795: PUSH
70796: LD_INT 0
70798: ST_TO_ADDR
// InitHc_All ( ) ;
70799: CALL_OW 584
// InitVc ;
70803: CALL_OW 20
// if mastodonts then
70807: LD_VAR 0 6
70811: IFFALSE 70878
// for i = 1 to mastodonts do
70813: LD_ADDR_VAR 0 11
70817: PUSH
70818: DOUBLE
70819: LD_INT 1
70821: DEC
70822: ST_TO_ADDR
70823: LD_VAR 0 6
70827: PUSH
70828: FOR_TO
70829: IFFALSE 70876
// begin vc_chassis := 31 ;
70831: LD_ADDR_OWVAR 37
70835: PUSH
70836: LD_INT 31
70838: ST_TO_ADDR
// vc_control := control_rider ;
70839: LD_ADDR_OWVAR 38
70843: PUSH
70844: LD_INT 4
70846: ST_TO_ADDR
// animal := CreateVehicle ;
70847: LD_ADDR_VAR 0 12
70851: PUSH
70852: CALL_OW 45
70856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70857: LD_VAR 0 12
70861: PPUSH
70862: LD_VAR 0 8
70866: PPUSH
70867: LD_INT 0
70869: PPUSH
70870: CALL 73013 0 3
// end ;
70874: GO 70828
70876: POP
70877: POP
// if horses then
70878: LD_VAR 0 5
70882: IFFALSE 70949
// for i = 1 to horses do
70884: LD_ADDR_VAR 0 11
70888: PUSH
70889: DOUBLE
70890: LD_INT 1
70892: DEC
70893: ST_TO_ADDR
70894: LD_VAR 0 5
70898: PUSH
70899: FOR_TO
70900: IFFALSE 70947
// begin hc_class := 21 ;
70902: LD_ADDR_OWVAR 28
70906: PUSH
70907: LD_INT 21
70909: ST_TO_ADDR
// hc_gallery :=  ;
70910: LD_ADDR_OWVAR 33
70914: PUSH
70915: LD_STRING 
70917: ST_TO_ADDR
// animal := CreateHuman ;
70918: LD_ADDR_VAR 0 12
70922: PUSH
70923: CALL_OW 44
70927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70928: LD_VAR 0 12
70932: PPUSH
70933: LD_VAR 0 8
70937: PPUSH
70938: LD_INT 0
70940: PPUSH
70941: CALL 73013 0 3
// end ;
70945: GO 70899
70947: POP
70948: POP
// if birds then
70949: LD_VAR 0 1
70953: IFFALSE 71020
// for i = 1 to birds do
70955: LD_ADDR_VAR 0 11
70959: PUSH
70960: DOUBLE
70961: LD_INT 1
70963: DEC
70964: ST_TO_ADDR
70965: LD_VAR 0 1
70969: PUSH
70970: FOR_TO
70971: IFFALSE 71018
// begin hc_class = 18 ;
70973: LD_ADDR_OWVAR 28
70977: PUSH
70978: LD_INT 18
70980: ST_TO_ADDR
// hc_gallery =  ;
70981: LD_ADDR_OWVAR 33
70985: PUSH
70986: LD_STRING 
70988: ST_TO_ADDR
// animal := CreateHuman ;
70989: LD_ADDR_VAR 0 12
70993: PUSH
70994: CALL_OW 44
70998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70999: LD_VAR 0 12
71003: PPUSH
71004: LD_VAR 0 8
71008: PPUSH
71009: LD_INT 0
71011: PPUSH
71012: CALL 73013 0 3
// end ;
71016: GO 70970
71018: POP
71019: POP
// if tigers then
71020: LD_VAR 0 2
71024: IFFALSE 71108
// for i = 1 to tigers do
71026: LD_ADDR_VAR 0 11
71030: PUSH
71031: DOUBLE
71032: LD_INT 1
71034: DEC
71035: ST_TO_ADDR
71036: LD_VAR 0 2
71040: PUSH
71041: FOR_TO
71042: IFFALSE 71106
// begin hc_class = class_tiger ;
71044: LD_ADDR_OWVAR 28
71048: PUSH
71049: LD_INT 14
71051: ST_TO_ADDR
// hc_gallery =  ;
71052: LD_ADDR_OWVAR 33
71056: PUSH
71057: LD_STRING 
71059: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71060: LD_ADDR_OWVAR 35
71064: PUSH
71065: LD_INT 7
71067: NEG
71068: PPUSH
71069: LD_INT 7
71071: PPUSH
71072: CALL_OW 12
71076: ST_TO_ADDR
// animal := CreateHuman ;
71077: LD_ADDR_VAR 0 12
71081: PUSH
71082: CALL_OW 44
71086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71087: LD_VAR 0 12
71091: PPUSH
71092: LD_VAR 0 8
71096: PPUSH
71097: LD_INT 0
71099: PPUSH
71100: CALL 73013 0 3
// end ;
71104: GO 71041
71106: POP
71107: POP
// if apemans then
71108: LD_VAR 0 3
71112: IFFALSE 71235
// for i = 1 to apemans do
71114: LD_ADDR_VAR 0 11
71118: PUSH
71119: DOUBLE
71120: LD_INT 1
71122: DEC
71123: ST_TO_ADDR
71124: LD_VAR 0 3
71128: PUSH
71129: FOR_TO
71130: IFFALSE 71233
// begin hc_class = class_apeman ;
71132: LD_ADDR_OWVAR 28
71136: PUSH
71137: LD_INT 12
71139: ST_TO_ADDR
// hc_gallery =  ;
71140: LD_ADDR_OWVAR 33
71144: PUSH
71145: LD_STRING 
71147: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71148: LD_ADDR_OWVAR 35
71152: PUSH
71153: LD_INT 2
71155: NEG
71156: PPUSH
71157: LD_INT 2
71159: PPUSH
71160: CALL_OW 12
71164: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71165: LD_ADDR_OWVAR 31
71169: PUSH
71170: LD_INT 1
71172: PPUSH
71173: LD_INT 3
71175: PPUSH
71176: CALL_OW 12
71180: PUSH
71181: LD_INT 1
71183: PPUSH
71184: LD_INT 3
71186: PPUSH
71187: CALL_OW 12
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: ST_TO_ADDR
// animal := CreateHuman ;
71204: LD_ADDR_VAR 0 12
71208: PUSH
71209: CALL_OW 44
71213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71214: LD_VAR 0 12
71218: PPUSH
71219: LD_VAR 0 8
71223: PPUSH
71224: LD_INT 0
71226: PPUSH
71227: CALL 73013 0 3
// end ;
71231: GO 71129
71233: POP
71234: POP
// if enchidnas then
71235: LD_VAR 0 4
71239: IFFALSE 71306
// for i = 1 to enchidnas do
71241: LD_ADDR_VAR 0 11
71245: PUSH
71246: DOUBLE
71247: LD_INT 1
71249: DEC
71250: ST_TO_ADDR
71251: LD_VAR 0 4
71255: PUSH
71256: FOR_TO
71257: IFFALSE 71304
// begin hc_class = 13 ;
71259: LD_ADDR_OWVAR 28
71263: PUSH
71264: LD_INT 13
71266: ST_TO_ADDR
// hc_gallery =  ;
71267: LD_ADDR_OWVAR 33
71271: PUSH
71272: LD_STRING 
71274: ST_TO_ADDR
// animal := CreateHuman ;
71275: LD_ADDR_VAR 0 12
71279: PUSH
71280: CALL_OW 44
71284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71285: LD_VAR 0 12
71289: PPUSH
71290: LD_VAR 0 8
71294: PPUSH
71295: LD_INT 0
71297: PPUSH
71298: CALL 73013 0 3
// end ;
71302: GO 71256
71304: POP
71305: POP
// if fishes then
71306: LD_VAR 0 7
71310: IFFALSE 71377
// for i = 1 to fishes do
71312: LD_ADDR_VAR 0 11
71316: PUSH
71317: DOUBLE
71318: LD_INT 1
71320: DEC
71321: ST_TO_ADDR
71322: LD_VAR 0 7
71326: PUSH
71327: FOR_TO
71328: IFFALSE 71375
// begin hc_class = 20 ;
71330: LD_ADDR_OWVAR 28
71334: PUSH
71335: LD_INT 20
71337: ST_TO_ADDR
// hc_gallery =  ;
71338: LD_ADDR_OWVAR 33
71342: PUSH
71343: LD_STRING 
71345: ST_TO_ADDR
// animal := CreateHuman ;
71346: LD_ADDR_VAR 0 12
71350: PUSH
71351: CALL_OW 44
71355: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71356: LD_VAR 0 12
71360: PPUSH
71361: LD_VAR 0 9
71365: PPUSH
71366: LD_INT 0
71368: PPUSH
71369: CALL 73013 0 3
// end ;
71373: GO 71327
71375: POP
71376: POP
// end ;
71377: LD_VAR 0 10
71381: RET
// export function WantHeal ( sci , unit ) ; begin
71382: LD_INT 0
71384: PPUSH
// if GetTaskList ( sci ) > 0 then
71385: LD_VAR 0 1
71389: PPUSH
71390: CALL_OW 437
71394: PUSH
71395: LD_INT 0
71397: GREATER
71398: IFFALSE 71468
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71400: LD_VAR 0 1
71404: PPUSH
71405: CALL_OW 437
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PUSH
71414: LD_INT 1
71416: ARRAY
71417: PUSH
71418: LD_STRING l
71420: EQUAL
71421: PUSH
71422: LD_VAR 0 1
71426: PPUSH
71427: CALL_OW 437
71431: PUSH
71432: LD_INT 1
71434: ARRAY
71435: PUSH
71436: LD_INT 4
71438: ARRAY
71439: PUSH
71440: LD_VAR 0 2
71444: EQUAL
71445: AND
71446: IFFALSE 71458
// result := true else
71448: LD_ADDR_VAR 0 3
71452: PUSH
71453: LD_INT 1
71455: ST_TO_ADDR
71456: GO 71466
// result := false ;
71458: LD_ADDR_VAR 0 3
71462: PUSH
71463: LD_INT 0
71465: ST_TO_ADDR
// end else
71466: GO 71476
// result := false ;
71468: LD_ADDR_VAR 0 3
71472: PUSH
71473: LD_INT 0
71475: ST_TO_ADDR
// end ;
71476: LD_VAR 0 3
71480: RET
// export function HealTarget ( sci ) ; begin
71481: LD_INT 0
71483: PPUSH
// if not sci then
71484: LD_VAR 0 1
71488: NOT
71489: IFFALSE 71493
// exit ;
71491: GO 71558
// result := 0 ;
71493: LD_ADDR_VAR 0 2
71497: PUSH
71498: LD_INT 0
71500: ST_TO_ADDR
// if GetTaskList ( sci ) then
71501: LD_VAR 0 1
71505: PPUSH
71506: CALL_OW 437
71510: IFFALSE 71558
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71512: LD_VAR 0 1
71516: PPUSH
71517: CALL_OW 437
71521: PUSH
71522: LD_INT 1
71524: ARRAY
71525: PUSH
71526: LD_INT 1
71528: ARRAY
71529: PUSH
71530: LD_STRING l
71532: EQUAL
71533: IFFALSE 71558
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71535: LD_ADDR_VAR 0 2
71539: PUSH
71540: LD_VAR 0 1
71544: PPUSH
71545: CALL_OW 437
71549: PUSH
71550: LD_INT 1
71552: ARRAY
71553: PUSH
71554: LD_INT 4
71556: ARRAY
71557: ST_TO_ADDR
// end ;
71558: LD_VAR 0 2
71562: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71563: LD_INT 0
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
// if not base_units then
71569: LD_VAR 0 1
71573: NOT
71574: IFFALSE 71578
// exit ;
71576: GO 71665
// result := false ;
71578: LD_ADDR_VAR 0 2
71582: PUSH
71583: LD_INT 0
71585: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71586: LD_ADDR_VAR 0 5
71590: PUSH
71591: LD_VAR 0 1
71595: PPUSH
71596: LD_INT 21
71598: PUSH
71599: LD_INT 3
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PPUSH
71606: CALL_OW 72
71610: ST_TO_ADDR
// if not tmp then
71611: LD_VAR 0 5
71615: NOT
71616: IFFALSE 71620
// exit ;
71618: GO 71665
// for i in tmp do
71620: LD_ADDR_VAR 0 3
71624: PUSH
71625: LD_VAR 0 5
71629: PUSH
71630: FOR_IN
71631: IFFALSE 71663
// begin result := EnemyInRange ( i , 22 ) ;
71633: LD_ADDR_VAR 0 2
71637: PUSH
71638: LD_VAR 0 3
71642: PPUSH
71643: LD_INT 22
71645: PPUSH
71646: CALL 69334 0 2
71650: ST_TO_ADDR
// if result then
71651: LD_VAR 0 2
71655: IFFALSE 71661
// exit ;
71657: POP
71658: POP
71659: GO 71665
// end ;
71661: GO 71630
71663: POP
71664: POP
// end ;
71665: LD_VAR 0 2
71669: RET
// export function FilterByTag ( units , tag ) ; begin
71670: LD_INT 0
71672: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71673: LD_ADDR_VAR 0 3
71677: PUSH
71678: LD_VAR 0 1
71682: PPUSH
71683: LD_INT 120
71685: PUSH
71686: LD_VAR 0 2
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PPUSH
71695: CALL_OW 72
71699: ST_TO_ADDR
// end ;
71700: LD_VAR 0 3
71704: RET
// export function IsDriver ( un ) ; begin
71705: LD_INT 0
71707: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71708: LD_ADDR_VAR 0 2
71712: PUSH
71713: LD_VAR 0 1
71717: PUSH
71718: LD_INT 55
71720: PUSH
71721: EMPTY
71722: LIST
71723: PPUSH
71724: CALL_OW 69
71728: IN
71729: ST_TO_ADDR
// end ;
71730: LD_VAR 0 2
71734: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71735: LD_INT 0
71737: PPUSH
71738: PPUSH
// list := [ ] ;
71739: LD_ADDR_VAR 0 5
71743: PUSH
71744: EMPTY
71745: ST_TO_ADDR
// case d of 0 :
71746: LD_VAR 0 3
71750: PUSH
71751: LD_INT 0
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71892
71759: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71760: LD_ADDR_VAR 0 5
71764: PUSH
71765: LD_VAR 0 1
71769: PUSH
71770: LD_INT 4
71772: MINUS
71773: PUSH
71774: LD_VAR 0 2
71778: PUSH
71779: LD_INT 4
71781: MINUS
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: LIST
71790: PUSH
71791: LD_VAR 0 1
71795: PUSH
71796: LD_INT 3
71798: MINUS
71799: PUSH
71800: LD_VAR 0 2
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: LIST
71812: PUSH
71813: LD_VAR 0 1
71817: PUSH
71818: LD_INT 4
71820: PLUS
71821: PUSH
71822: LD_VAR 0 2
71826: PUSH
71827: LD_INT 4
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: PUSH
71835: LD_VAR 0 1
71839: PUSH
71840: LD_INT 3
71842: PLUS
71843: PUSH
71844: LD_VAR 0 2
71848: PUSH
71849: LD_INT 3
71851: PLUS
71852: PUSH
71853: LD_INT 5
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: LIST
71860: PUSH
71861: LD_VAR 0 1
71865: PUSH
71866: LD_VAR 0 2
71870: PUSH
71871: LD_INT 4
71873: PLUS
71874: PUSH
71875: LD_INT 0
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: ST_TO_ADDR
// end ; 1 :
71890: GO 72590
71892: LD_INT 1
71894: DOUBLE
71895: EQUAL
71896: IFTRUE 71900
71898: GO 72033
71900: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71901: LD_ADDR_VAR 0 5
71905: PUSH
71906: LD_VAR 0 1
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: LD_INT 4
71918: MINUS
71919: PUSH
71920: LD_INT 3
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: LD_VAR 0 1
71932: PUSH
71933: LD_INT 3
71935: MINUS
71936: PUSH
71937: LD_VAR 0 2
71941: PUSH
71942: LD_INT 3
71944: MINUS
71945: PUSH
71946: LD_INT 2
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: LIST
71953: PUSH
71954: LD_VAR 0 1
71958: PUSH
71959: LD_INT 4
71961: MINUS
71962: PUSH
71963: LD_VAR 0 2
71967: PUSH
71968: LD_INT 1
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: PUSH
71976: LD_VAR 0 1
71980: PUSH
71981: LD_VAR 0 2
71985: PUSH
71986: LD_INT 3
71988: PLUS
71989: PUSH
71990: LD_INT 0
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: LD_VAR 0 1
72002: PUSH
72003: LD_INT 4
72005: PLUS
72006: PUSH
72007: LD_VAR 0 2
72011: PUSH
72012: LD_INT 4
72014: PLUS
72015: PUSH
72016: LD_INT 5
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: ST_TO_ADDR
// end ; 2 :
72031: GO 72590
72033: LD_INT 2
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72041
72039: GO 72170
72041: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72042: LD_ADDR_VAR 0 5
72046: PUSH
72047: LD_VAR 0 1
72051: PUSH
72052: LD_VAR 0 2
72056: PUSH
72057: LD_INT 3
72059: MINUS
72060: PUSH
72061: LD_INT 3
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: PUSH
72069: LD_VAR 0 1
72073: PUSH
72074: LD_INT 4
72076: PLUS
72077: PUSH
72078: LD_VAR 0 2
72082: PUSH
72083: LD_INT 4
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: LIST
72090: PUSH
72091: LD_VAR 0 1
72095: PUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_INT 4
72103: PLUS
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: LIST
72112: PUSH
72113: LD_VAR 0 1
72117: PUSH
72118: LD_INT 3
72120: MINUS
72121: PUSH
72122: LD_VAR 0 2
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: PUSH
72135: LD_VAR 0 1
72139: PUSH
72140: LD_INT 4
72142: MINUS
72143: PUSH
72144: LD_VAR 0 2
72148: PUSH
72149: LD_INT 4
72151: MINUS
72152: PUSH
72153: LD_INT 2
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: ST_TO_ADDR
// end ; 3 :
72168: GO 72590
72170: LD_INT 3
72172: DOUBLE
72173: EQUAL
72174: IFTRUE 72178
72176: GO 72311
72178: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72179: LD_ADDR_VAR 0 5
72183: PUSH
72184: LD_VAR 0 1
72188: PUSH
72189: LD_INT 3
72191: PLUS
72192: PUSH
72193: LD_VAR 0 2
72197: PUSH
72198: LD_INT 4
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: PUSH
72206: LD_VAR 0 1
72210: PUSH
72211: LD_INT 4
72213: PLUS
72214: PUSH
72215: LD_VAR 0 2
72219: PUSH
72220: LD_INT 4
72222: PLUS
72223: PUSH
72224: LD_INT 5
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: LIST
72231: PUSH
72232: LD_VAR 0 1
72236: PUSH
72237: LD_INT 4
72239: MINUS
72240: PUSH
72241: LD_VAR 0 2
72245: PUSH
72246: LD_INT 1
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: LIST
72253: PUSH
72254: LD_VAR 0 1
72258: PUSH
72259: LD_VAR 0 2
72263: PUSH
72264: LD_INT 4
72266: MINUS
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: LIST
72275: PUSH
72276: LD_VAR 0 1
72280: PUSH
72281: LD_INT 3
72283: MINUS
72284: PUSH
72285: LD_VAR 0 2
72289: PUSH
72290: LD_INT 3
72292: MINUS
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: ST_TO_ADDR
// end ; 4 :
72309: GO 72590
72311: LD_INT 4
72313: DOUBLE
72314: EQUAL
72315: IFTRUE 72319
72317: GO 72452
72319: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72320: LD_ADDR_VAR 0 5
72324: PUSH
72325: LD_VAR 0 1
72329: PUSH
72330: LD_VAR 0 2
72334: PUSH
72335: LD_INT 4
72337: PLUS
72338: PUSH
72339: LD_INT 0
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: PUSH
72347: LD_VAR 0 1
72351: PUSH
72352: LD_INT 3
72354: PLUS
72355: PUSH
72356: LD_VAR 0 2
72360: PUSH
72361: LD_INT 3
72363: PLUS
72364: PUSH
72365: LD_INT 5
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: PUSH
72373: LD_VAR 0 1
72377: PUSH
72378: LD_INT 4
72380: PLUS
72381: PUSH
72382: LD_VAR 0 2
72386: PUSH
72387: LD_INT 4
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: LIST
72394: PUSH
72395: LD_VAR 0 1
72399: PUSH
72400: LD_VAR 0 2
72404: PUSH
72405: LD_INT 3
72407: MINUS
72408: PUSH
72409: LD_INT 3
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: PUSH
72417: LD_VAR 0 1
72421: PUSH
72422: LD_INT 4
72424: MINUS
72425: PUSH
72426: LD_VAR 0 2
72430: PUSH
72431: LD_INT 4
72433: MINUS
72434: PUSH
72435: LD_INT 2
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: LIST
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: ST_TO_ADDR
// end ; 5 :
72450: GO 72590
72452: LD_INT 5
72454: DOUBLE
72455: EQUAL
72456: IFTRUE 72460
72458: GO 72589
72460: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72461: LD_ADDR_VAR 0 5
72465: PUSH
72466: LD_VAR 0 1
72470: PUSH
72471: LD_INT 4
72473: MINUS
72474: PUSH
72475: LD_VAR 0 2
72479: PUSH
72480: LD_INT 1
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: LIST
72487: PUSH
72488: LD_VAR 0 1
72492: PUSH
72493: LD_VAR 0 2
72497: PUSH
72498: LD_INT 4
72500: MINUS
72501: PUSH
72502: LD_INT 3
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: LIST
72509: PUSH
72510: LD_VAR 0 1
72514: PUSH
72515: LD_INT 4
72517: PLUS
72518: PUSH
72519: LD_VAR 0 2
72523: PUSH
72524: LD_INT 4
72526: PLUS
72527: PUSH
72528: LD_INT 5
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: PUSH
72536: LD_VAR 0 1
72540: PUSH
72541: LD_INT 3
72543: PLUS
72544: PUSH
72545: LD_VAR 0 2
72549: PUSH
72550: LD_INT 4
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: LIST
72557: PUSH
72558: LD_VAR 0 1
72562: PUSH
72563: LD_VAR 0 2
72567: PUSH
72568: LD_INT 3
72570: PLUS
72571: PUSH
72572: LD_INT 0
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: LIST
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: ST_TO_ADDR
// end ; end ;
72587: GO 72590
72589: POP
// result := list ;
72590: LD_ADDR_VAR 0 4
72594: PUSH
72595: LD_VAR 0 5
72599: ST_TO_ADDR
// end ;
72600: LD_VAR 0 4
72604: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72605: LD_INT 0
72607: PPUSH
72608: PPUSH
72609: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72610: LD_VAR 0 1
72614: NOT
72615: PUSH
72616: LD_VAR 0 2
72620: PUSH
72621: LD_INT 1
72623: PUSH
72624: LD_INT 2
72626: PUSH
72627: LD_INT 3
72629: PUSH
72630: LD_INT 4
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: IN
72639: NOT
72640: OR
72641: IFFALSE 72645
// exit ;
72643: GO 72737
// tmp := [ ] ;
72645: LD_ADDR_VAR 0 5
72649: PUSH
72650: EMPTY
72651: ST_TO_ADDR
// for i in units do
72652: LD_ADDR_VAR 0 4
72656: PUSH
72657: LD_VAR 0 1
72661: PUSH
72662: FOR_IN
72663: IFFALSE 72706
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72665: LD_ADDR_VAR 0 5
72669: PUSH
72670: LD_VAR 0 5
72674: PPUSH
72675: LD_VAR 0 5
72679: PUSH
72680: LD_INT 1
72682: PLUS
72683: PPUSH
72684: LD_VAR 0 4
72688: PPUSH
72689: LD_VAR 0 2
72693: PPUSH
72694: CALL_OW 259
72698: PPUSH
72699: CALL_OW 2
72703: ST_TO_ADDR
72704: GO 72662
72706: POP
72707: POP
// if not tmp then
72708: LD_VAR 0 5
72712: NOT
72713: IFFALSE 72717
// exit ;
72715: GO 72737
// result := SortListByListDesc ( units , tmp ) ;
72717: LD_ADDR_VAR 0 3
72721: PUSH
72722: LD_VAR 0 1
72726: PPUSH
72727: LD_VAR 0 5
72731: PPUSH
72732: CALL_OW 77
72736: ST_TO_ADDR
// end ;
72737: LD_VAR 0 3
72741: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72742: LD_INT 0
72744: PPUSH
72745: PPUSH
72746: PPUSH
// result := false ;
72747: LD_ADDR_VAR 0 3
72751: PUSH
72752: LD_INT 0
72754: ST_TO_ADDR
// x := GetX ( building ) ;
72755: LD_ADDR_VAR 0 4
72759: PUSH
72760: LD_VAR 0 2
72764: PPUSH
72765: CALL_OW 250
72769: ST_TO_ADDR
// y := GetY ( building ) ;
72770: LD_ADDR_VAR 0 5
72774: PUSH
72775: LD_VAR 0 2
72779: PPUSH
72780: CALL_OW 251
72784: ST_TO_ADDR
// if not building or not x or not y then
72785: LD_VAR 0 2
72789: NOT
72790: PUSH
72791: LD_VAR 0 4
72795: NOT
72796: OR
72797: PUSH
72798: LD_VAR 0 5
72802: NOT
72803: OR
72804: IFFALSE 72808
// exit ;
72806: GO 72900
// if GetTaskList ( unit ) then
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 437
72817: IFFALSE 72900
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72819: LD_STRING e
72821: PUSH
72822: LD_VAR 0 1
72826: PPUSH
72827: CALL_OW 437
72831: PUSH
72832: LD_INT 1
72834: ARRAY
72835: PUSH
72836: LD_INT 1
72838: ARRAY
72839: EQUAL
72840: PUSH
72841: LD_VAR 0 4
72845: PUSH
72846: LD_VAR 0 1
72850: PPUSH
72851: CALL_OW 437
72855: PUSH
72856: LD_INT 1
72858: ARRAY
72859: PUSH
72860: LD_INT 2
72862: ARRAY
72863: EQUAL
72864: AND
72865: PUSH
72866: LD_VAR 0 5
72870: PUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 437
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PUSH
72885: LD_INT 3
72887: ARRAY
72888: EQUAL
72889: AND
72890: IFFALSE 72900
// result := true end ;
72892: LD_ADDR_VAR 0 3
72896: PUSH
72897: LD_INT 1
72899: ST_TO_ADDR
// end ;
72900: LD_VAR 0 3
72904: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72905: LD_INT 0
72907: PPUSH
// result := false ;
72908: LD_ADDR_VAR 0 4
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// if GetTaskList ( unit ) then
72916: LD_VAR 0 1
72920: PPUSH
72921: CALL_OW 437
72925: IFFALSE 73008
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72927: LD_STRING M
72929: PUSH
72930: LD_VAR 0 1
72934: PPUSH
72935: CALL_OW 437
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: LD_INT 1
72946: ARRAY
72947: EQUAL
72948: PUSH
72949: LD_VAR 0 2
72953: PUSH
72954: LD_VAR 0 1
72958: PPUSH
72959: CALL_OW 437
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PUSH
72968: LD_INT 2
72970: ARRAY
72971: EQUAL
72972: AND
72973: PUSH
72974: LD_VAR 0 3
72978: PUSH
72979: LD_VAR 0 1
72983: PPUSH
72984: CALL_OW 437
72988: PUSH
72989: LD_INT 1
72991: ARRAY
72992: PUSH
72993: LD_INT 3
72995: ARRAY
72996: EQUAL
72997: AND
72998: IFFALSE 73008
// result := true ;
73000: LD_ADDR_VAR 0 4
73004: PUSH
73005: LD_INT 1
73007: ST_TO_ADDR
// end ; end ;
73008: LD_VAR 0 4
73012: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73013: LD_INT 0
73015: PPUSH
73016: PPUSH
73017: PPUSH
73018: PPUSH
// if not unit or not area then
73019: LD_VAR 0 1
73023: NOT
73024: PUSH
73025: LD_VAR 0 2
73029: NOT
73030: OR
73031: IFFALSE 73035
// exit ;
73033: GO 73199
// tmp := AreaToList ( area , i ) ;
73035: LD_ADDR_VAR 0 6
73039: PUSH
73040: LD_VAR 0 2
73044: PPUSH
73045: LD_VAR 0 5
73049: PPUSH
73050: CALL_OW 517
73054: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73055: LD_ADDR_VAR 0 5
73059: PUSH
73060: DOUBLE
73061: LD_INT 1
73063: DEC
73064: ST_TO_ADDR
73065: LD_VAR 0 6
73069: PUSH
73070: LD_INT 1
73072: ARRAY
73073: PUSH
73074: FOR_TO
73075: IFFALSE 73197
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73077: LD_ADDR_VAR 0 7
73081: PUSH
73082: LD_VAR 0 6
73086: PUSH
73087: LD_INT 1
73089: ARRAY
73090: PUSH
73091: LD_VAR 0 5
73095: ARRAY
73096: PUSH
73097: LD_VAR 0 6
73101: PUSH
73102: LD_INT 2
73104: ARRAY
73105: PUSH
73106: LD_VAR 0 5
73110: ARRAY
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73116: LD_VAR 0 7
73120: PUSH
73121: LD_INT 1
73123: ARRAY
73124: PPUSH
73125: LD_VAR 0 7
73129: PUSH
73130: LD_INT 2
73132: ARRAY
73133: PPUSH
73134: CALL_OW 428
73138: PUSH
73139: LD_INT 0
73141: EQUAL
73142: IFFALSE 73195
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73144: LD_VAR 0 1
73148: PPUSH
73149: LD_VAR 0 7
73153: PUSH
73154: LD_INT 1
73156: ARRAY
73157: PPUSH
73158: LD_VAR 0 7
73162: PUSH
73163: LD_INT 2
73165: ARRAY
73166: PPUSH
73167: LD_VAR 0 3
73171: PPUSH
73172: CALL_OW 48
// result := IsPlaced ( unit ) ;
73176: LD_ADDR_VAR 0 4
73180: PUSH
73181: LD_VAR 0 1
73185: PPUSH
73186: CALL_OW 305
73190: ST_TO_ADDR
// exit ;
73191: POP
73192: POP
73193: GO 73199
// end ; end ;
73195: GO 73074
73197: POP
73198: POP
// end ;
73199: LD_VAR 0 4
73203: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73204: LD_INT 0
73206: PPUSH
73207: PPUSH
73208: PPUSH
// if not side or side > 8 then
73209: LD_VAR 0 1
73213: NOT
73214: PUSH
73215: LD_VAR 0 1
73219: PUSH
73220: LD_INT 8
73222: GREATER
73223: OR
73224: IFFALSE 73228
// exit ;
73226: GO 73415
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73228: LD_ADDR_VAR 0 4
73232: PUSH
73233: LD_INT 22
73235: PUSH
73236: LD_VAR 0 1
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 21
73247: PUSH
73248: LD_INT 3
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PPUSH
73259: CALL_OW 69
73263: ST_TO_ADDR
// if not tmp then
73264: LD_VAR 0 4
73268: NOT
73269: IFFALSE 73273
// exit ;
73271: GO 73415
// enable_addtolog := true ;
73273: LD_ADDR_OWVAR 81
73277: PUSH
73278: LD_INT 1
73280: ST_TO_ADDR
// AddToLog ( [ ) ;
73281: LD_STRING [
73283: PPUSH
73284: CALL_OW 561
// for i in tmp do
73288: LD_ADDR_VAR 0 3
73292: PUSH
73293: LD_VAR 0 4
73297: PUSH
73298: FOR_IN
73299: IFFALSE 73406
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73301: LD_STRING [
73303: PUSH
73304: LD_VAR 0 3
73308: PPUSH
73309: CALL_OW 266
73313: STR
73314: PUSH
73315: LD_STRING , 
73317: STR
73318: PUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: CALL_OW 250
73328: STR
73329: PUSH
73330: LD_STRING , 
73332: STR
73333: PUSH
73334: LD_VAR 0 3
73338: PPUSH
73339: CALL_OW 251
73343: STR
73344: PUSH
73345: LD_STRING , 
73347: STR
73348: PUSH
73349: LD_VAR 0 3
73353: PPUSH
73354: CALL_OW 254
73358: STR
73359: PUSH
73360: LD_STRING , 
73362: STR
73363: PUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: LD_INT 1
73371: PPUSH
73372: CALL_OW 268
73376: STR
73377: PUSH
73378: LD_STRING , 
73380: STR
73381: PUSH
73382: LD_VAR 0 3
73386: PPUSH
73387: LD_INT 2
73389: PPUSH
73390: CALL_OW 268
73394: STR
73395: PUSH
73396: LD_STRING ],
73398: STR
73399: PPUSH
73400: CALL_OW 561
// end ;
73404: GO 73298
73406: POP
73407: POP
// AddToLog ( ]; ) ;
73408: LD_STRING ];
73410: PPUSH
73411: CALL_OW 561
// end ;
73415: LD_VAR 0 2
73419: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73420: LD_INT 0
73422: PPUSH
73423: PPUSH
73424: PPUSH
73425: PPUSH
73426: PPUSH
// if not area or not rate or not max then
73427: LD_VAR 0 1
73431: NOT
73432: PUSH
73433: LD_VAR 0 2
73437: NOT
73438: OR
73439: PUSH
73440: LD_VAR 0 4
73444: NOT
73445: OR
73446: IFFALSE 73450
// exit ;
73448: GO 73639
// while 1 do
73450: LD_INT 1
73452: IFFALSE 73639
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73454: LD_ADDR_VAR 0 9
73458: PUSH
73459: LD_VAR 0 1
73463: PPUSH
73464: LD_INT 1
73466: PPUSH
73467: CALL_OW 287
73471: PUSH
73472: LD_INT 10
73474: MUL
73475: ST_TO_ADDR
// r := rate / 10 ;
73476: LD_ADDR_VAR 0 7
73480: PUSH
73481: LD_VAR 0 2
73485: PUSH
73486: LD_INT 10
73488: DIVREAL
73489: ST_TO_ADDR
// time := 1 1$00 ;
73490: LD_ADDR_VAR 0 8
73494: PUSH
73495: LD_INT 2100
73497: ST_TO_ADDR
// if amount < min then
73498: LD_VAR 0 9
73502: PUSH
73503: LD_VAR 0 3
73507: LESS
73508: IFFALSE 73526
// r := r * 2 else
73510: LD_ADDR_VAR 0 7
73514: PUSH
73515: LD_VAR 0 7
73519: PUSH
73520: LD_INT 2
73522: MUL
73523: ST_TO_ADDR
73524: GO 73552
// if amount > max then
73526: LD_VAR 0 9
73530: PUSH
73531: LD_VAR 0 4
73535: GREATER
73536: IFFALSE 73552
// r := r / 2 ;
73538: LD_ADDR_VAR 0 7
73542: PUSH
73543: LD_VAR 0 7
73547: PUSH
73548: LD_INT 2
73550: DIVREAL
73551: ST_TO_ADDR
// time := time / r ;
73552: LD_ADDR_VAR 0 8
73556: PUSH
73557: LD_VAR 0 8
73561: PUSH
73562: LD_VAR 0 7
73566: DIVREAL
73567: ST_TO_ADDR
// if time < 0 then
73568: LD_VAR 0 8
73572: PUSH
73573: LD_INT 0
73575: LESS
73576: IFFALSE 73593
// time := time * - 1 ;
73578: LD_ADDR_VAR 0 8
73582: PUSH
73583: LD_VAR 0 8
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: MUL
73592: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73593: LD_VAR 0 8
73597: PUSH
73598: LD_INT 35
73600: PPUSH
73601: LD_INT 875
73603: PPUSH
73604: CALL_OW 12
73608: PLUS
73609: PPUSH
73610: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73614: LD_INT 1
73616: PPUSH
73617: LD_INT 5
73619: PPUSH
73620: CALL_OW 12
73624: PPUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: LD_INT 1
73632: PPUSH
73633: CALL_OW 55
// end ;
73637: GO 73450
// end ;
73639: LD_VAR 0 5
73643: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73644: LD_INT 0
73646: PPUSH
73647: PPUSH
73648: PPUSH
73649: PPUSH
73650: PPUSH
73651: PPUSH
73652: PPUSH
73653: PPUSH
// if not turrets or not factories then
73654: LD_VAR 0 1
73658: NOT
73659: PUSH
73660: LD_VAR 0 2
73664: NOT
73665: OR
73666: IFFALSE 73670
// exit ;
73668: GO 73977
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73670: LD_ADDR_VAR 0 10
73674: PUSH
73675: LD_INT 5
73677: PUSH
73678: LD_INT 6
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 2
73687: PUSH
73688: LD_INT 4
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 3
73697: PUSH
73698: LD_INT 5
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 24
73712: PUSH
73713: LD_INT 25
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 23
73722: PUSH
73723: LD_INT 27
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 42
73736: PUSH
73737: LD_INT 43
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 44
73746: PUSH
73747: LD_INT 46
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 45
73756: PUSH
73757: LD_INT 47
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: LIST
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: LIST
73773: ST_TO_ADDR
// result := [ ] ;
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: EMPTY
73780: ST_TO_ADDR
// for i in turrets do
73781: LD_ADDR_VAR 0 4
73785: PUSH
73786: LD_VAR 0 1
73790: PUSH
73791: FOR_IN
73792: IFFALSE 73975
// begin nat := GetNation ( i ) ;
73794: LD_ADDR_VAR 0 7
73798: PUSH
73799: LD_VAR 0 4
73803: PPUSH
73804: CALL_OW 248
73808: ST_TO_ADDR
// weapon := 0 ;
73809: LD_ADDR_VAR 0 8
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// if not nat then
73817: LD_VAR 0 7
73821: NOT
73822: IFFALSE 73826
// continue ;
73824: GO 73791
// for j in list [ nat ] do
73826: LD_ADDR_VAR 0 5
73830: PUSH
73831: LD_VAR 0 10
73835: PUSH
73836: LD_VAR 0 7
73840: ARRAY
73841: PUSH
73842: FOR_IN
73843: IFFALSE 73884
// if GetBWeapon ( i ) = j [ 1 ] then
73845: LD_VAR 0 4
73849: PPUSH
73850: CALL_OW 269
73854: PUSH
73855: LD_VAR 0 5
73859: PUSH
73860: LD_INT 1
73862: ARRAY
73863: EQUAL
73864: IFFALSE 73882
// begin weapon := j [ 2 ] ;
73866: LD_ADDR_VAR 0 8
73870: PUSH
73871: LD_VAR 0 5
73875: PUSH
73876: LD_INT 2
73878: ARRAY
73879: ST_TO_ADDR
// break ;
73880: GO 73884
// end ;
73882: GO 73842
73884: POP
73885: POP
// if not weapon then
73886: LD_VAR 0 8
73890: NOT
73891: IFFALSE 73895
// continue ;
73893: GO 73791
// for k in factories do
73895: LD_ADDR_VAR 0 6
73899: PUSH
73900: LD_VAR 0 2
73904: PUSH
73905: FOR_IN
73906: IFFALSE 73971
// begin weapons := AvailableWeaponList ( k ) ;
73908: LD_ADDR_VAR 0 9
73912: PUSH
73913: LD_VAR 0 6
73917: PPUSH
73918: CALL_OW 478
73922: ST_TO_ADDR
// if not weapons then
73923: LD_VAR 0 9
73927: NOT
73928: IFFALSE 73932
// continue ;
73930: GO 73905
// if weapon in weapons then
73932: LD_VAR 0 8
73936: PUSH
73937: LD_VAR 0 9
73941: IN
73942: IFFALSE 73969
// begin result := [ i , weapon ] ;
73944: LD_ADDR_VAR 0 3
73948: PUSH
73949: LD_VAR 0 4
73953: PUSH
73954: LD_VAR 0 8
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: ST_TO_ADDR
// exit ;
73963: POP
73964: POP
73965: POP
73966: POP
73967: GO 73977
// end ; end ;
73969: GO 73905
73971: POP
73972: POP
// end ;
73973: GO 73791
73975: POP
73976: POP
// end ;
73977: LD_VAR 0 3
73981: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73982: LD_INT 0
73984: PPUSH
// if not side or side > 8 then
73985: LD_VAR 0 3
73989: NOT
73990: PUSH
73991: LD_VAR 0 3
73995: PUSH
73996: LD_INT 8
73998: GREATER
73999: OR
74000: IFFALSE 74004
// exit ;
74002: GO 74063
// if not range then
74004: LD_VAR 0 4
74008: NOT
74009: IFFALSE 74020
// range := - 12 ;
74011: LD_ADDR_VAR 0 4
74015: PUSH
74016: LD_INT 12
74018: NEG
74019: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74020: LD_VAR 0 1
74024: PPUSH
74025: LD_VAR 0 2
74029: PPUSH
74030: LD_VAR 0 3
74034: PPUSH
74035: LD_VAR 0 4
74039: PPUSH
74040: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: LD_VAR 0 3
74058: PPUSH
74059: CALL_OW 331
// end ;
74063: LD_VAR 0 5
74067: RET
// export function Video ( mode ) ; begin
74068: LD_INT 0
74070: PPUSH
// ingame_video = mode ;
74071: LD_ADDR_OWVAR 52
74075: PUSH
74076: LD_VAR 0 1
74080: ST_TO_ADDR
// interface_hidden = mode ;
74081: LD_ADDR_OWVAR 54
74085: PUSH
74086: LD_VAR 0 1
74090: ST_TO_ADDR
// end ;
74091: LD_VAR 0 2
74095: RET
// export function Join ( array , element ) ; begin
74096: LD_INT 0
74098: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74099: LD_ADDR_VAR 0 3
74103: PUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: LD_VAR 0 1
74113: PUSH
74114: LD_INT 1
74116: PLUS
74117: PPUSH
74118: LD_VAR 0 2
74122: PPUSH
74123: CALL_OW 1
74127: ST_TO_ADDR
// end ;
74128: LD_VAR 0 3
74132: RET
// export function JoinUnion ( array , element ) ; begin
74133: LD_INT 0
74135: PPUSH
// result := array union element ;
74136: LD_ADDR_VAR 0 3
74140: PUSH
74141: LD_VAR 0 1
74145: PUSH
74146: LD_VAR 0 2
74150: UNION
74151: ST_TO_ADDR
// end ;
74152: LD_VAR 0 3
74156: RET
// export function GetBehemoths ( side ) ; begin
74157: LD_INT 0
74159: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74160: LD_ADDR_VAR 0 2
74164: PUSH
74165: LD_INT 22
74167: PUSH
74168: LD_VAR 0 1
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 31
74179: PUSH
74180: LD_INT 25
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PPUSH
74191: CALL_OW 69
74195: ST_TO_ADDR
// end ;
74196: LD_VAR 0 2
74200: RET
// export function Shuffle ( array ) ; var i , index ; begin
74201: LD_INT 0
74203: PPUSH
74204: PPUSH
74205: PPUSH
// result := [ ] ;
74206: LD_ADDR_VAR 0 2
74210: PUSH
74211: EMPTY
74212: ST_TO_ADDR
// if not array then
74213: LD_VAR 0 1
74217: NOT
74218: IFFALSE 74222
// exit ;
74220: GO 74321
// Randomize ;
74222: CALL_OW 10
// for i = array downto 1 do
74226: LD_ADDR_VAR 0 3
74230: PUSH
74231: DOUBLE
74232: LD_VAR 0 1
74236: INC
74237: ST_TO_ADDR
74238: LD_INT 1
74240: PUSH
74241: FOR_DOWNTO
74242: IFFALSE 74319
// begin index := rand ( 1 , array ) ;
74244: LD_ADDR_VAR 0 4
74248: PUSH
74249: LD_INT 1
74251: PPUSH
74252: LD_VAR 0 1
74256: PPUSH
74257: CALL_OW 12
74261: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74262: LD_ADDR_VAR 0 2
74266: PUSH
74267: LD_VAR 0 2
74271: PPUSH
74272: LD_VAR 0 2
74276: PUSH
74277: LD_INT 1
74279: PLUS
74280: PPUSH
74281: LD_VAR 0 1
74285: PUSH
74286: LD_VAR 0 4
74290: ARRAY
74291: PPUSH
74292: CALL_OW 2
74296: ST_TO_ADDR
// array := Delete ( array , index ) ;
74297: LD_ADDR_VAR 0 1
74301: PUSH
74302: LD_VAR 0 1
74306: PPUSH
74307: LD_VAR 0 4
74311: PPUSH
74312: CALL_OW 3
74316: ST_TO_ADDR
// end ;
74317: GO 74241
74319: POP
74320: POP
// end ;
74321: LD_VAR 0 2
74325: RET
// export function GetBaseMaterials ( base ) ; begin
74326: LD_INT 0
74328: PPUSH
// result := [ 0 , 0 , 0 ] ;
74329: LD_ADDR_VAR 0 2
74333: PUSH
74334: LD_INT 0
74336: PUSH
74337: LD_INT 0
74339: PUSH
74340: LD_INT 0
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: LIST
74347: ST_TO_ADDR
// if not base then
74348: LD_VAR 0 1
74352: NOT
74353: IFFALSE 74357
// exit ;
74355: GO 74406
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74357: LD_ADDR_VAR 0 2
74361: PUSH
74362: LD_VAR 0 1
74366: PPUSH
74367: LD_INT 1
74369: PPUSH
74370: CALL_OW 275
74374: PUSH
74375: LD_VAR 0 1
74379: PPUSH
74380: LD_INT 2
74382: PPUSH
74383: CALL_OW 275
74387: PUSH
74388: LD_VAR 0 1
74392: PPUSH
74393: LD_INT 3
74395: PPUSH
74396: CALL_OW 275
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: ST_TO_ADDR
// end ;
74406: LD_VAR 0 2
74410: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74411: LD_INT 0
74413: PPUSH
74414: PPUSH
// result := array ;
74415: LD_ADDR_VAR 0 3
74419: PUSH
74420: LD_VAR 0 1
74424: ST_TO_ADDR
// if size >= result then
74425: LD_VAR 0 2
74429: PUSH
74430: LD_VAR 0 3
74434: GREATEREQUAL
74435: IFFALSE 74439
// exit ;
74437: GO 74489
// if size then
74439: LD_VAR 0 2
74443: IFFALSE 74489
// for i := array downto size do
74445: LD_ADDR_VAR 0 4
74449: PUSH
74450: DOUBLE
74451: LD_VAR 0 1
74455: INC
74456: ST_TO_ADDR
74457: LD_VAR 0 2
74461: PUSH
74462: FOR_DOWNTO
74463: IFFALSE 74487
// result := Delete ( result , result ) ;
74465: LD_ADDR_VAR 0 3
74469: PUSH
74470: LD_VAR 0 3
74474: PPUSH
74475: LD_VAR 0 3
74479: PPUSH
74480: CALL_OW 3
74484: ST_TO_ADDR
74485: GO 74462
74487: POP
74488: POP
// end ;
74489: LD_VAR 0 3
74493: RET
// export function ComExit ( unit ) ; var tmp ; begin
74494: LD_INT 0
74496: PPUSH
74497: PPUSH
// if not IsInUnit ( unit ) then
74498: LD_VAR 0 1
74502: PPUSH
74503: CALL_OW 310
74507: NOT
74508: IFFALSE 74512
// exit ;
74510: GO 74572
// tmp := IsInUnit ( unit ) ;
74512: LD_ADDR_VAR 0 3
74516: PUSH
74517: LD_VAR 0 1
74521: PPUSH
74522: CALL_OW 310
74526: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74527: LD_VAR 0 3
74531: PPUSH
74532: CALL_OW 247
74536: PUSH
74537: LD_INT 2
74539: EQUAL
74540: IFFALSE 74553
// ComExitVehicle ( unit ) else
74542: LD_VAR 0 1
74546: PPUSH
74547: CALL_OW 121
74551: GO 74562
// ComExitBuilding ( unit ) ;
74553: LD_VAR 0 1
74557: PPUSH
74558: CALL_OW 122
// result := tmp ;
74562: LD_ADDR_VAR 0 2
74566: PUSH
74567: LD_VAR 0 3
74571: ST_TO_ADDR
// end ;
74572: LD_VAR 0 2
74576: RET
// export function ComExitAll ( units ) ; var i ; begin
74577: LD_INT 0
74579: PPUSH
74580: PPUSH
// if not units then
74581: LD_VAR 0 1
74585: NOT
74586: IFFALSE 74590
// exit ;
74588: GO 74616
// for i in units do
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: LD_VAR 0 1
74599: PUSH
74600: FOR_IN
74601: IFFALSE 74614
// ComExit ( i ) ;
74603: LD_VAR 0 3
74607: PPUSH
74608: CALL 74494 0 1
74612: GO 74600
74614: POP
74615: POP
// end ;
74616: LD_VAR 0 2
74620: RET
// export function ResetHc ; begin
74621: LD_INT 0
74623: PPUSH
// InitHc ;
74624: CALL_OW 19
// hc_importance := 0 ;
74628: LD_ADDR_OWVAR 32
74632: PUSH
74633: LD_INT 0
74635: ST_TO_ADDR
// end ;
74636: LD_VAR 0 1
74640: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74641: LD_INT 0
74643: PPUSH
74644: PPUSH
74645: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74646: LD_ADDR_VAR 0 6
74650: PUSH
74651: LD_VAR 0 1
74655: PUSH
74656: LD_VAR 0 3
74660: PLUS
74661: PUSH
74662: LD_INT 2
74664: DIV
74665: ST_TO_ADDR
// if _x < 0 then
74666: LD_VAR 0 6
74670: PUSH
74671: LD_INT 0
74673: LESS
74674: IFFALSE 74691
// _x := _x * - 1 ;
74676: LD_ADDR_VAR 0 6
74680: PUSH
74681: LD_VAR 0 6
74685: PUSH
74686: LD_INT 1
74688: NEG
74689: MUL
74690: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74691: LD_ADDR_VAR 0 7
74695: PUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_VAR 0 4
74705: PLUS
74706: PUSH
74707: LD_INT 2
74709: DIV
74710: ST_TO_ADDR
// if _y < 0 then
74711: LD_VAR 0 7
74715: PUSH
74716: LD_INT 0
74718: LESS
74719: IFFALSE 74736
// _y := _y * - 1 ;
74721: LD_ADDR_VAR 0 7
74725: PUSH
74726: LD_VAR 0 7
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: MUL
74735: ST_TO_ADDR
// result := [ _x , _y ] ;
74736: LD_ADDR_VAR 0 5
74740: PUSH
74741: LD_VAR 0 6
74745: PUSH
74746: LD_VAR 0 7
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: ST_TO_ADDR
// end ;
74755: LD_VAR 0 5
74759: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74760: LD_INT 0
74762: PPUSH
74763: PPUSH
74764: PPUSH
74765: PPUSH
// task := GetTaskList ( unit ) ;
74766: LD_ADDR_VAR 0 7
74770: PUSH
74771: LD_VAR 0 1
74775: PPUSH
74776: CALL_OW 437
74780: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74781: LD_VAR 0 7
74785: NOT
74786: PUSH
74787: LD_VAR 0 1
74791: PPUSH
74792: LD_VAR 0 2
74796: PPUSH
74797: CALL_OW 308
74801: NOT
74802: AND
74803: IFFALSE 74807
// exit ;
74805: GO 74925
// if IsInArea ( unit , area ) then
74807: LD_VAR 0 1
74811: PPUSH
74812: LD_VAR 0 2
74816: PPUSH
74817: CALL_OW 308
74821: IFFALSE 74839
// begin ComMoveToArea ( unit , goAway ) ;
74823: LD_VAR 0 1
74827: PPUSH
74828: LD_VAR 0 3
74832: PPUSH
74833: CALL_OW 113
// exit ;
74837: GO 74925
// end ; if task [ 1 ] [ 1 ] <> M then
74839: LD_VAR 0 7
74843: PUSH
74844: LD_INT 1
74846: ARRAY
74847: PUSH
74848: LD_INT 1
74850: ARRAY
74851: PUSH
74852: LD_STRING M
74854: NONEQUAL
74855: IFFALSE 74859
// exit ;
74857: GO 74925
// x := task [ 1 ] [ 2 ] ;
74859: LD_ADDR_VAR 0 5
74863: PUSH
74864: LD_VAR 0 7
74868: PUSH
74869: LD_INT 1
74871: ARRAY
74872: PUSH
74873: LD_INT 2
74875: ARRAY
74876: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74877: LD_ADDR_VAR 0 6
74881: PUSH
74882: LD_VAR 0 7
74886: PUSH
74887: LD_INT 1
74889: ARRAY
74890: PUSH
74891: LD_INT 3
74893: ARRAY
74894: ST_TO_ADDR
// if InArea ( x , y , area ) then
74895: LD_VAR 0 5
74899: PPUSH
74900: LD_VAR 0 6
74904: PPUSH
74905: LD_VAR 0 2
74909: PPUSH
74910: CALL_OW 309
74914: IFFALSE 74925
// ComStop ( unit ) ;
74916: LD_VAR 0 1
74920: PPUSH
74921: CALL_OW 141
// end ;
74925: LD_VAR 0 4
74929: RET
// export function Abs ( value ) ; begin
74930: LD_INT 0
74932: PPUSH
// result := value ;
74933: LD_ADDR_VAR 0 2
74937: PUSH
74938: LD_VAR 0 1
74942: ST_TO_ADDR
// if value < 0 then
74943: LD_VAR 0 1
74947: PUSH
74948: LD_INT 0
74950: LESS
74951: IFFALSE 74968
// result := value * - 1 ;
74953: LD_ADDR_VAR 0 2
74957: PUSH
74958: LD_VAR 0 1
74962: PUSH
74963: LD_INT 1
74965: NEG
74966: MUL
74967: ST_TO_ADDR
// end ;
74968: LD_VAR 0 2
74972: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74973: LD_INT 0
74975: PPUSH
74976: PPUSH
74977: PPUSH
74978: PPUSH
74979: PPUSH
74980: PPUSH
74981: PPUSH
74982: PPUSH
// if not unit or not building then
74983: LD_VAR 0 1
74987: NOT
74988: PUSH
74989: LD_VAR 0 2
74993: NOT
74994: OR
74995: IFFALSE 74999
// exit ;
74997: GO 75225
// x := GetX ( building ) ;
74999: LD_ADDR_VAR 0 4
75003: PUSH
75004: LD_VAR 0 2
75008: PPUSH
75009: CALL_OW 250
75013: ST_TO_ADDR
// y := GetY ( building ) ;
75014: LD_ADDR_VAR 0 6
75018: PUSH
75019: LD_VAR 0 2
75023: PPUSH
75024: CALL_OW 251
75028: ST_TO_ADDR
// d := GetDir ( building ) ;
75029: LD_ADDR_VAR 0 8
75033: PUSH
75034: LD_VAR 0 2
75038: PPUSH
75039: CALL_OW 254
75043: ST_TO_ADDR
// r := 4 ;
75044: LD_ADDR_VAR 0 9
75048: PUSH
75049: LD_INT 4
75051: ST_TO_ADDR
// for i := 1 to 5 do
75052: LD_ADDR_VAR 0 10
75056: PUSH
75057: DOUBLE
75058: LD_INT 1
75060: DEC
75061: ST_TO_ADDR
75062: LD_INT 5
75064: PUSH
75065: FOR_TO
75066: IFFALSE 75223
// begin _x := ShiftX ( x , d , r + i ) ;
75068: LD_ADDR_VAR 0 5
75072: PUSH
75073: LD_VAR 0 4
75077: PPUSH
75078: LD_VAR 0 8
75082: PPUSH
75083: LD_VAR 0 9
75087: PUSH
75088: LD_VAR 0 10
75092: PLUS
75093: PPUSH
75094: CALL_OW 272
75098: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75099: LD_ADDR_VAR 0 7
75103: PUSH
75104: LD_VAR 0 6
75108: PPUSH
75109: LD_VAR 0 8
75113: PPUSH
75114: LD_VAR 0 9
75118: PUSH
75119: LD_VAR 0 10
75123: PLUS
75124: PPUSH
75125: CALL_OW 273
75129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75130: LD_VAR 0 5
75134: PPUSH
75135: LD_VAR 0 7
75139: PPUSH
75140: CALL_OW 488
75144: PUSH
75145: LD_VAR 0 5
75149: PPUSH
75150: LD_VAR 0 7
75154: PPUSH
75155: CALL_OW 428
75159: PPUSH
75160: CALL_OW 247
75164: PUSH
75165: LD_INT 3
75167: PUSH
75168: LD_INT 2
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: IN
75175: NOT
75176: AND
75177: IFFALSE 75221
// begin ComMoveXY ( unit , _x , _y ) ;
75179: LD_VAR 0 1
75183: PPUSH
75184: LD_VAR 0 5
75188: PPUSH
75189: LD_VAR 0 7
75193: PPUSH
75194: CALL_OW 111
// result := [ _x , _y ] ;
75198: LD_ADDR_VAR 0 3
75202: PUSH
75203: LD_VAR 0 5
75207: PUSH
75208: LD_VAR 0 7
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: ST_TO_ADDR
// exit ;
75217: POP
75218: POP
75219: GO 75225
// end ; end ;
75221: GO 75065
75223: POP
75224: POP
// end ;
75225: LD_VAR 0 3
75229: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75230: LD_INT 0
75232: PPUSH
75233: PPUSH
75234: PPUSH
// result := 0 ;
75235: LD_ADDR_VAR 0 3
75239: PUSH
75240: LD_INT 0
75242: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75243: LD_VAR 0 1
75247: PUSH
75248: LD_INT 0
75250: LESS
75251: PUSH
75252: LD_VAR 0 1
75256: PUSH
75257: LD_INT 8
75259: GREATER
75260: OR
75261: PUSH
75262: LD_VAR 0 2
75266: PUSH
75267: LD_INT 0
75269: LESS
75270: OR
75271: PUSH
75272: LD_VAR 0 2
75276: PUSH
75277: LD_INT 8
75279: GREATER
75280: OR
75281: IFFALSE 75285
// exit ;
75283: GO 75360
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75285: LD_ADDR_VAR 0 4
75289: PUSH
75290: LD_INT 22
75292: PUSH
75293: LD_VAR 0 2
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PPUSH
75302: CALL_OW 69
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75358
// begin un := UnitShoot ( i ) ;
75310: LD_ADDR_VAR 0 5
75314: PUSH
75315: LD_VAR 0 4
75319: PPUSH
75320: CALL_OW 504
75324: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75325: LD_VAR 0 5
75329: PPUSH
75330: CALL_OW 255
75334: PUSH
75335: LD_VAR 0 1
75339: EQUAL
75340: IFFALSE 75356
// begin result := un ;
75342: LD_ADDR_VAR 0 3
75346: PUSH
75347: LD_VAR 0 5
75351: ST_TO_ADDR
// exit ;
75352: POP
75353: POP
75354: GO 75360
// end ; end ;
75356: GO 75307
75358: POP
75359: POP
// end ;
75360: LD_VAR 0 3
75364: RET
// export function GetCargoBay ( units ) ; begin
75365: LD_INT 0
75367: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75368: LD_ADDR_VAR 0 2
75372: PUSH
75373: LD_VAR 0 1
75377: PPUSH
75378: LD_INT 2
75380: PUSH
75381: LD_INT 34
75383: PUSH
75384: LD_INT 12
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PUSH
75391: LD_INT 34
75393: PUSH
75394: LD_INT 51
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 34
75403: PUSH
75404: LD_INT 32
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 34
75413: PUSH
75414: LD_EXP 37
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: PPUSH
75430: CALL_OW 72
75434: ST_TO_ADDR
// end ;
75435: LD_VAR 0 2
75439: RET
// export function Negate ( value ) ; begin
75440: LD_INT 0
75442: PPUSH
// result := not value ;
75443: LD_ADDR_VAR 0 2
75447: PUSH
75448: LD_VAR 0 1
75452: NOT
75453: ST_TO_ADDR
// end ;
75454: LD_VAR 0 2
75458: RET
// export function Inc ( value ) ; begin
75459: LD_INT 0
75461: PPUSH
// result := value + 1 ;
75462: LD_ADDR_VAR 0 2
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: LD_INT 1
75474: PLUS
75475: ST_TO_ADDR
// end ;
75476: LD_VAR 0 2
75480: RET
// export function Dec ( value ) ; begin
75481: LD_INT 0
75483: PPUSH
// result := value - 1 ;
75484: LD_ADDR_VAR 0 2
75488: PUSH
75489: LD_VAR 0 1
75493: PUSH
75494: LD_INT 1
75496: MINUS
75497: ST_TO_ADDR
// end ;
75498: LD_VAR 0 2
75502: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75503: LD_INT 0
75505: PPUSH
75506: PPUSH
75507: PPUSH
75508: PPUSH
75509: PPUSH
75510: PPUSH
75511: PPUSH
75512: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75513: LD_VAR 0 1
75517: PPUSH
75518: LD_VAR 0 2
75522: PPUSH
75523: CALL_OW 488
75527: NOT
75528: PUSH
75529: LD_VAR 0 3
75533: PPUSH
75534: LD_VAR 0 4
75538: PPUSH
75539: CALL_OW 488
75543: NOT
75544: OR
75545: IFFALSE 75558
// begin result := - 1 ;
75547: LD_ADDR_VAR 0 5
75551: PUSH
75552: LD_INT 1
75554: NEG
75555: ST_TO_ADDR
// exit ;
75556: GO 75793
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75558: LD_ADDR_VAR 0 12
75562: PUSH
75563: LD_VAR 0 1
75567: PPUSH
75568: LD_VAR 0 2
75572: PPUSH
75573: LD_VAR 0 3
75577: PPUSH
75578: LD_VAR 0 4
75582: PPUSH
75583: CALL 74641 0 4
75587: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75588: LD_ADDR_VAR 0 11
75592: PUSH
75593: LD_VAR 0 1
75597: PPUSH
75598: LD_VAR 0 2
75602: PPUSH
75603: LD_VAR 0 12
75607: PUSH
75608: LD_INT 1
75610: ARRAY
75611: PPUSH
75612: LD_VAR 0 12
75616: PUSH
75617: LD_INT 2
75619: ARRAY
75620: PPUSH
75621: CALL_OW 298
75625: ST_TO_ADDR
// distance := 9999 ;
75626: LD_ADDR_VAR 0 10
75630: PUSH
75631: LD_INT 9999
75633: ST_TO_ADDR
// for i := 0 to 5 do
75634: LD_ADDR_VAR 0 6
75638: PUSH
75639: DOUBLE
75640: LD_INT 0
75642: DEC
75643: ST_TO_ADDR
75644: LD_INT 5
75646: PUSH
75647: FOR_TO
75648: IFFALSE 75791
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75650: LD_ADDR_VAR 0 7
75654: PUSH
75655: LD_VAR 0 1
75659: PPUSH
75660: LD_VAR 0 6
75664: PPUSH
75665: LD_VAR 0 11
75669: PPUSH
75670: CALL_OW 272
75674: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75675: LD_ADDR_VAR 0 8
75679: PUSH
75680: LD_VAR 0 2
75684: PPUSH
75685: LD_VAR 0 6
75689: PPUSH
75690: LD_VAR 0 11
75694: PPUSH
75695: CALL_OW 273
75699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75700: LD_VAR 0 7
75704: PPUSH
75705: LD_VAR 0 8
75709: PPUSH
75710: CALL_OW 488
75714: NOT
75715: IFFALSE 75719
// continue ;
75717: GO 75647
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75719: LD_ADDR_VAR 0 9
75723: PUSH
75724: LD_VAR 0 12
75728: PUSH
75729: LD_INT 1
75731: ARRAY
75732: PPUSH
75733: LD_VAR 0 12
75737: PUSH
75738: LD_INT 2
75740: ARRAY
75741: PPUSH
75742: LD_VAR 0 7
75746: PPUSH
75747: LD_VAR 0 8
75751: PPUSH
75752: CALL_OW 298
75756: ST_TO_ADDR
// if tmp < distance then
75757: LD_VAR 0 9
75761: PUSH
75762: LD_VAR 0 10
75766: LESS
75767: IFFALSE 75789
// begin result := i ;
75769: LD_ADDR_VAR 0 5
75773: PUSH
75774: LD_VAR 0 6
75778: ST_TO_ADDR
// distance := tmp ;
75779: LD_ADDR_VAR 0 10
75783: PUSH
75784: LD_VAR 0 9
75788: ST_TO_ADDR
// end ; end ;
75789: GO 75647
75791: POP
75792: POP
// end ;
75793: LD_VAR 0 5
75797: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75798: LD_INT 0
75800: PPUSH
75801: PPUSH
// if not driver or not IsInUnit ( driver ) then
75802: LD_VAR 0 1
75806: NOT
75807: PUSH
75808: LD_VAR 0 1
75812: PPUSH
75813: CALL_OW 310
75817: NOT
75818: OR
75819: IFFALSE 75823
// exit ;
75821: GO 75913
// vehicle := IsInUnit ( driver ) ;
75823: LD_ADDR_VAR 0 3
75827: PUSH
75828: LD_VAR 0 1
75832: PPUSH
75833: CALL_OW 310
75837: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75838: LD_VAR 0 1
75842: PPUSH
75843: LD_STRING \
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: LD_INT 0
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: LD_INT 0
75857: PUSH
75858: LD_INT 0
75860: PUSH
75861: LD_INT 0
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: PUSH
75873: LD_STRING E
75875: PUSH
75876: LD_INT 0
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: LD_VAR 0 3
75886: PUSH
75887: LD_INT 0
75889: PUSH
75890: LD_INT 0
75892: PUSH
75893: LD_INT 0
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: PPUSH
75909: CALL_OW 446
// end ;
75913: LD_VAR 0 2
75917: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75918: LD_INT 0
75920: PPUSH
75921: PPUSH
// if not driver or not IsInUnit ( driver ) then
75922: LD_VAR 0 1
75926: NOT
75927: PUSH
75928: LD_VAR 0 1
75932: PPUSH
75933: CALL_OW 310
75937: NOT
75938: OR
75939: IFFALSE 75943
// exit ;
75941: GO 76033
// vehicle := IsInUnit ( driver ) ;
75943: LD_ADDR_VAR 0 3
75947: PUSH
75948: LD_VAR 0 1
75952: PPUSH
75953: CALL_OW 310
75957: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75958: LD_VAR 0 1
75962: PPUSH
75963: LD_STRING \
75965: PUSH
75966: LD_INT 0
75968: PUSH
75969: LD_INT 0
75971: PUSH
75972: LD_INT 0
75974: PUSH
75975: LD_INT 0
75977: PUSH
75978: LD_INT 0
75980: PUSH
75981: LD_INT 0
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: PUSH
75993: LD_STRING E
75995: PUSH
75996: LD_INT 0
75998: PUSH
75999: LD_INT 0
76001: PUSH
76002: LD_VAR 0 3
76006: PUSH
76007: LD_INT 0
76009: PUSH
76010: LD_INT 0
76012: PUSH
76013: LD_INT 0
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: PUSH
76025: EMPTY
76026: LIST
76027: LIST
76028: PPUSH
76029: CALL_OW 447
// end ;
76033: LD_VAR 0 2
76037: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76038: LD_INT 0
76040: PPUSH
76041: PPUSH
76042: PPUSH
// tmp := [ ] ;
76043: LD_ADDR_VAR 0 5
76047: PUSH
76048: EMPTY
76049: ST_TO_ADDR
// for i in units do
76050: LD_ADDR_VAR 0 4
76054: PUSH
76055: LD_VAR 0 1
76059: PUSH
76060: FOR_IN
76061: IFFALSE 76099
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76063: LD_ADDR_VAR 0 5
76067: PUSH
76068: LD_VAR 0 5
76072: PPUSH
76073: LD_VAR 0 5
76077: PUSH
76078: LD_INT 1
76080: PLUS
76081: PPUSH
76082: LD_VAR 0 4
76086: PPUSH
76087: CALL_OW 256
76091: PPUSH
76092: CALL_OW 2
76096: ST_TO_ADDR
76097: GO 76060
76099: POP
76100: POP
// if not tmp then
76101: LD_VAR 0 5
76105: NOT
76106: IFFALSE 76110
// exit ;
76108: GO 76158
// if asc then
76110: LD_VAR 0 2
76114: IFFALSE 76138
// result := SortListByListAsc ( units , tmp ) else
76116: LD_ADDR_VAR 0 3
76120: PUSH
76121: LD_VAR 0 1
76125: PPUSH
76126: LD_VAR 0 5
76130: PPUSH
76131: CALL_OW 76
76135: ST_TO_ADDR
76136: GO 76158
// result := SortListByListDesc ( units , tmp ) ;
76138: LD_ADDR_VAR 0 3
76142: PUSH
76143: LD_VAR 0 1
76147: PPUSH
76148: LD_VAR 0 5
76152: PPUSH
76153: CALL_OW 77
76157: ST_TO_ADDR
// end ;
76158: LD_VAR 0 3
76162: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76163: LD_INT 0
76165: PPUSH
76166: PPUSH
// task := GetTaskList ( mech ) ;
76167: LD_ADDR_VAR 0 4
76171: PUSH
76172: LD_VAR 0 1
76176: PPUSH
76177: CALL_OW 437
76181: ST_TO_ADDR
// if not task then
76182: LD_VAR 0 4
76186: NOT
76187: IFFALSE 76191
// exit ;
76189: GO 76233
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76191: LD_ADDR_VAR 0 3
76195: PUSH
76196: LD_VAR 0 4
76200: PUSH
76201: LD_INT 1
76203: ARRAY
76204: PUSH
76205: LD_INT 1
76207: ARRAY
76208: PUSH
76209: LD_STRING r
76211: EQUAL
76212: PUSH
76213: LD_VAR 0 4
76217: PUSH
76218: LD_INT 1
76220: ARRAY
76221: PUSH
76222: LD_INT 4
76224: ARRAY
76225: PUSH
76226: LD_VAR 0 2
76230: EQUAL
76231: AND
76232: ST_TO_ADDR
// end ;
76233: LD_VAR 0 3
76237: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76238: LD_INT 0
76240: PPUSH
// SetDir ( unit , d ) ;
76241: LD_VAR 0 1
76245: PPUSH
76246: LD_VAR 0 4
76250: PPUSH
76251: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76255: LD_VAR 0 1
76259: PPUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: LD_VAR 0 3
76269: PPUSH
76270: LD_VAR 0 5
76274: PPUSH
76275: CALL_OW 48
// end ;
76279: LD_VAR 0 6
76283: RET
// export function ToNaturalNumber ( number ) ; begin
76284: LD_INT 0
76286: PPUSH
// result := number div 1 ;
76287: LD_ADDR_VAR 0 2
76291: PUSH
76292: LD_VAR 0 1
76296: PUSH
76297: LD_INT 1
76299: DIV
76300: ST_TO_ADDR
// if number < 0 then
76301: LD_VAR 0 1
76305: PUSH
76306: LD_INT 0
76308: LESS
76309: IFFALSE 76319
// result := 0 ;
76311: LD_ADDR_VAR 0 2
76315: PUSH
76316: LD_INT 0
76318: ST_TO_ADDR
// end ;
76319: LD_VAR 0 2
76323: RET
// export function SortByClass ( units , class ) ; var un ; begin
76324: LD_INT 0
76326: PPUSH
76327: PPUSH
// if not units or not class then
76328: LD_VAR 0 1
76332: NOT
76333: PUSH
76334: LD_VAR 0 2
76338: NOT
76339: OR
76340: IFFALSE 76344
// exit ;
76342: GO 76439
// result := [ ] ;
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: EMPTY
76350: ST_TO_ADDR
// for un in units do
76351: LD_ADDR_VAR 0 4
76355: PUSH
76356: LD_VAR 0 1
76360: PUSH
76361: FOR_IN
76362: IFFALSE 76437
// if GetClass ( un ) = class then
76364: LD_VAR 0 4
76368: PPUSH
76369: CALL_OW 257
76373: PUSH
76374: LD_VAR 0 2
76378: EQUAL
76379: IFFALSE 76406
// result := Insert ( result , 1 , un ) else
76381: LD_ADDR_VAR 0 3
76385: PUSH
76386: LD_VAR 0 3
76390: PPUSH
76391: LD_INT 1
76393: PPUSH
76394: LD_VAR 0 4
76398: PPUSH
76399: CALL_OW 2
76403: ST_TO_ADDR
76404: GO 76435
// result := Replace ( result , result + 1 , un ) ;
76406: LD_ADDR_VAR 0 3
76410: PUSH
76411: LD_VAR 0 3
76415: PPUSH
76416: LD_VAR 0 3
76420: PUSH
76421: LD_INT 1
76423: PLUS
76424: PPUSH
76425: LD_VAR 0 4
76429: PPUSH
76430: CALL_OW 1
76434: ST_TO_ADDR
76435: GO 76361
76437: POP
76438: POP
// end ;
76439: LD_VAR 0 3
76443: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76444: LD_INT 0
76446: PPUSH
76447: PPUSH
76448: PPUSH
76449: PPUSH
76450: PPUSH
76451: PPUSH
76452: PPUSH
// result := [ ] ;
76453: LD_ADDR_VAR 0 4
76457: PUSH
76458: EMPTY
76459: ST_TO_ADDR
// if x - r < 0 then
76460: LD_VAR 0 1
76464: PUSH
76465: LD_VAR 0 3
76469: MINUS
76470: PUSH
76471: LD_INT 0
76473: LESS
76474: IFFALSE 76486
// min_x := 0 else
76476: LD_ADDR_VAR 0 8
76480: PUSH
76481: LD_INT 0
76483: ST_TO_ADDR
76484: GO 76502
// min_x := x - r ;
76486: LD_ADDR_VAR 0 8
76490: PUSH
76491: LD_VAR 0 1
76495: PUSH
76496: LD_VAR 0 3
76500: MINUS
76501: ST_TO_ADDR
// if y - r < 0 then
76502: LD_VAR 0 2
76506: PUSH
76507: LD_VAR 0 3
76511: MINUS
76512: PUSH
76513: LD_INT 0
76515: LESS
76516: IFFALSE 76528
// min_y := 0 else
76518: LD_ADDR_VAR 0 7
76522: PUSH
76523: LD_INT 0
76525: ST_TO_ADDR
76526: GO 76544
// min_y := y - r ;
76528: LD_ADDR_VAR 0 7
76532: PUSH
76533: LD_VAR 0 2
76537: PUSH
76538: LD_VAR 0 3
76542: MINUS
76543: ST_TO_ADDR
// max_x := x + r ;
76544: LD_ADDR_VAR 0 9
76548: PUSH
76549: LD_VAR 0 1
76553: PUSH
76554: LD_VAR 0 3
76558: PLUS
76559: ST_TO_ADDR
// max_y := y + r ;
76560: LD_ADDR_VAR 0 10
76564: PUSH
76565: LD_VAR 0 2
76569: PUSH
76570: LD_VAR 0 3
76574: PLUS
76575: ST_TO_ADDR
// for _x = min_x to max_x do
76576: LD_ADDR_VAR 0 5
76580: PUSH
76581: DOUBLE
76582: LD_VAR 0 8
76586: DEC
76587: ST_TO_ADDR
76588: LD_VAR 0 9
76592: PUSH
76593: FOR_TO
76594: IFFALSE 76695
// for _y = min_y to max_y do
76596: LD_ADDR_VAR 0 6
76600: PUSH
76601: DOUBLE
76602: LD_VAR 0 7
76606: DEC
76607: ST_TO_ADDR
76608: LD_VAR 0 10
76612: PUSH
76613: FOR_TO
76614: IFFALSE 76691
// begin if not ValidHex ( _x , _y ) then
76616: LD_VAR 0 5
76620: PPUSH
76621: LD_VAR 0 6
76625: PPUSH
76626: CALL_OW 488
76630: NOT
76631: IFFALSE 76635
// continue ;
76633: GO 76613
// if GetResourceTypeXY ( _x , _y ) then
76635: LD_VAR 0 5
76639: PPUSH
76640: LD_VAR 0 6
76644: PPUSH
76645: CALL_OW 283
76649: IFFALSE 76689
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76651: LD_ADDR_VAR 0 4
76655: PUSH
76656: LD_VAR 0 4
76660: PPUSH
76661: LD_VAR 0 4
76665: PUSH
76666: LD_INT 1
76668: PLUS
76669: PPUSH
76670: LD_VAR 0 5
76674: PUSH
76675: LD_VAR 0 6
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PPUSH
76684: CALL_OW 1
76688: ST_TO_ADDR
// end ;
76689: GO 76613
76691: POP
76692: POP
76693: GO 76593
76695: POP
76696: POP
// end ;
76697: LD_VAR 0 4
76701: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76702: LD_INT 0
76704: PPUSH
76705: PPUSH
76706: PPUSH
76707: PPUSH
76708: PPUSH
76709: PPUSH
76710: PPUSH
76711: PPUSH
// if not units then
76712: LD_VAR 0 1
76716: NOT
76717: IFFALSE 76721
// exit ;
76719: GO 77247
// result := UnitFilter ( units , [ f_ok ] ) ;
76721: LD_ADDR_VAR 0 3
76725: PUSH
76726: LD_VAR 0 1
76730: PPUSH
76731: LD_INT 50
76733: PUSH
76734: EMPTY
76735: LIST
76736: PPUSH
76737: CALL_OW 72
76741: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76742: LD_ADDR_VAR 0 8
76746: PUSH
76747: LD_VAR 0 1
76751: PUSH
76752: LD_INT 1
76754: ARRAY
76755: PPUSH
76756: CALL_OW 255
76760: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76761: LD_ADDR_VAR 0 10
76765: PUSH
76766: LD_INT 29
76768: PUSH
76769: LD_EXP 40
76773: PUSH
76774: LD_INT 49
76776: PUSH
76777: EMPTY
76778: LIST
76779: LIST
76780: LIST
76781: ST_TO_ADDR
// if not result then
76782: LD_VAR 0 3
76786: NOT
76787: IFFALSE 76791
// exit ;
76789: GO 77247
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76791: LD_ADDR_VAR 0 5
76795: PUSH
76796: LD_INT 81
76798: PUSH
76799: LD_VAR 0 8
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PPUSH
76808: CALL_OW 69
76812: ST_TO_ADDR
// for i in result do
76813: LD_ADDR_VAR 0 4
76817: PUSH
76818: LD_VAR 0 3
76822: PUSH
76823: FOR_IN
76824: IFFALSE 77245
// begin tag := GetTag ( i ) + 1 ;
76826: LD_ADDR_VAR 0 9
76830: PUSH
76831: LD_VAR 0 4
76835: PPUSH
76836: CALL_OW 110
76840: PUSH
76841: LD_INT 1
76843: PLUS
76844: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76845: LD_ADDR_VAR 0 7
76849: PUSH
76850: LD_VAR 0 4
76854: PPUSH
76855: CALL_OW 250
76859: PPUSH
76860: LD_VAR 0 4
76864: PPUSH
76865: CALL_OW 251
76869: PPUSH
76870: LD_INT 6
76872: PPUSH
76873: CALL 76444 0 3
76877: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76878: LD_VAR 0 4
76882: PPUSH
76883: CALL_OW 247
76887: PUSH
76888: LD_INT 2
76890: EQUAL
76891: PUSH
76892: LD_VAR 0 7
76896: AND
76897: PUSH
76898: LD_VAR 0 4
76902: PPUSH
76903: CALL_OW 264
76907: PUSH
76908: LD_VAR 0 10
76912: IN
76913: NOT
76914: AND
76915: IFFALSE 76954
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76917: LD_VAR 0 4
76921: PPUSH
76922: LD_VAR 0 7
76926: PUSH
76927: LD_INT 1
76929: ARRAY
76930: PUSH
76931: LD_INT 1
76933: ARRAY
76934: PPUSH
76935: LD_VAR 0 7
76939: PUSH
76940: LD_INT 1
76942: ARRAY
76943: PUSH
76944: LD_INT 2
76946: ARRAY
76947: PPUSH
76948: CALL_OW 116
76952: GO 77243
// if path > tag then
76954: LD_VAR 0 2
76958: PUSH
76959: LD_VAR 0 9
76963: GREATER
76964: IFFALSE 77172
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76966: LD_ADDR_VAR 0 6
76970: PUSH
76971: LD_VAR 0 5
76975: PPUSH
76976: LD_INT 91
76978: PUSH
76979: LD_VAR 0 4
76983: PUSH
76984: LD_INT 8
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: LIST
76991: PPUSH
76992: CALL_OW 72
76996: ST_TO_ADDR
// if nearEnemy then
76997: LD_VAR 0 6
77001: IFFALSE 77070
// begin if GetWeapon ( i ) = ru_time_lapser then
77003: LD_VAR 0 4
77007: PPUSH
77008: CALL_OW 264
77012: PUSH
77013: LD_INT 49
77015: EQUAL
77016: IFFALSE 77044
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77018: LD_VAR 0 4
77022: PPUSH
77023: LD_VAR 0 6
77027: PPUSH
77028: LD_VAR 0 4
77032: PPUSH
77033: CALL_OW 74
77037: PPUSH
77038: CALL_OW 112
77042: GO 77068
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77044: LD_VAR 0 4
77048: PPUSH
77049: LD_VAR 0 6
77053: PPUSH
77054: LD_VAR 0 4
77058: PPUSH
77059: CALL_OW 74
77063: PPUSH
77064: CALL_OW 115
// end else
77068: GO 77170
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77070: LD_VAR 0 4
77074: PPUSH
77075: LD_VAR 0 2
77079: PUSH
77080: LD_VAR 0 9
77084: ARRAY
77085: PUSH
77086: LD_INT 1
77088: ARRAY
77089: PPUSH
77090: LD_VAR 0 2
77094: PUSH
77095: LD_VAR 0 9
77099: ARRAY
77100: PUSH
77101: LD_INT 2
77103: ARRAY
77104: PPUSH
77105: CALL_OW 297
77109: PUSH
77110: LD_INT 6
77112: GREATER
77113: IFFALSE 77156
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77115: LD_VAR 0 4
77119: PPUSH
77120: LD_VAR 0 2
77124: PUSH
77125: LD_VAR 0 9
77129: ARRAY
77130: PUSH
77131: LD_INT 1
77133: ARRAY
77134: PPUSH
77135: LD_VAR 0 2
77139: PUSH
77140: LD_VAR 0 9
77144: ARRAY
77145: PUSH
77146: LD_INT 2
77148: ARRAY
77149: PPUSH
77150: CALL_OW 114
77154: GO 77170
// SetTag ( i , tag ) ;
77156: LD_VAR 0 4
77160: PPUSH
77161: LD_VAR 0 9
77165: PPUSH
77166: CALL_OW 109
// end else
77170: GO 77243
// if enemy then
77172: LD_VAR 0 5
77176: IFFALSE 77243
// begin if GetWeapon ( i ) = ru_time_lapser then
77178: LD_VAR 0 4
77182: PPUSH
77183: CALL_OW 264
77187: PUSH
77188: LD_INT 49
77190: EQUAL
77191: IFFALSE 77219
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77193: LD_VAR 0 4
77197: PPUSH
77198: LD_VAR 0 5
77202: PPUSH
77203: LD_VAR 0 4
77207: PPUSH
77208: CALL_OW 74
77212: PPUSH
77213: CALL_OW 112
77217: GO 77243
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77219: LD_VAR 0 4
77223: PPUSH
77224: LD_VAR 0 5
77228: PPUSH
77229: LD_VAR 0 4
77233: PPUSH
77234: CALL_OW 74
77238: PPUSH
77239: CALL_OW 115
// end ; end ;
77243: GO 76823
77245: POP
77246: POP
// end ;
77247: LD_VAR 0 3
77251: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77252: LD_INT 0
77254: PPUSH
77255: PPUSH
77256: PPUSH
// if not unit or IsInUnit ( unit ) then
77257: LD_VAR 0 1
77261: NOT
77262: PUSH
77263: LD_VAR 0 1
77267: PPUSH
77268: CALL_OW 310
77272: OR
77273: IFFALSE 77277
// exit ;
77275: GO 77368
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77277: LD_ADDR_VAR 0 4
77281: PUSH
77282: LD_VAR 0 1
77286: PPUSH
77287: CALL_OW 250
77291: PPUSH
77292: LD_VAR 0 2
77296: PPUSH
77297: LD_INT 1
77299: PPUSH
77300: CALL_OW 272
77304: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77305: LD_ADDR_VAR 0 5
77309: PUSH
77310: LD_VAR 0 1
77314: PPUSH
77315: CALL_OW 251
77319: PPUSH
77320: LD_VAR 0 2
77324: PPUSH
77325: LD_INT 1
77327: PPUSH
77328: CALL_OW 273
77332: ST_TO_ADDR
// if ValidHex ( x , y ) then
77333: LD_VAR 0 4
77337: PPUSH
77338: LD_VAR 0 5
77342: PPUSH
77343: CALL_OW 488
77347: IFFALSE 77368
// ComTurnXY ( unit , x , y ) ;
77349: LD_VAR 0 1
77353: PPUSH
77354: LD_VAR 0 4
77358: PPUSH
77359: LD_VAR 0 5
77363: PPUSH
77364: CALL_OW 118
// end ;
77368: LD_VAR 0 3
77372: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77373: LD_INT 0
77375: PPUSH
77376: PPUSH
// result := false ;
77377: LD_ADDR_VAR 0 3
77381: PUSH
77382: LD_INT 0
77384: ST_TO_ADDR
// if not units then
77385: LD_VAR 0 2
77389: NOT
77390: IFFALSE 77394
// exit ;
77392: GO 77439
// for i in units do
77394: LD_ADDR_VAR 0 4
77398: PUSH
77399: LD_VAR 0 2
77403: PUSH
77404: FOR_IN
77405: IFFALSE 77437
// if See ( side , i ) then
77407: LD_VAR 0 1
77411: PPUSH
77412: LD_VAR 0 4
77416: PPUSH
77417: CALL_OW 292
77421: IFFALSE 77435
// begin result := true ;
77423: LD_ADDR_VAR 0 3
77427: PUSH
77428: LD_INT 1
77430: ST_TO_ADDR
// exit ;
77431: POP
77432: POP
77433: GO 77439
// end ;
77435: GO 77404
77437: POP
77438: POP
// end ;
77439: LD_VAR 0 3
77443: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77444: LD_INT 0
77446: PPUSH
77447: PPUSH
77448: PPUSH
77449: PPUSH
// if not unit or not points then
77450: LD_VAR 0 1
77454: NOT
77455: PUSH
77456: LD_VAR 0 2
77460: NOT
77461: OR
77462: IFFALSE 77466
// exit ;
77464: GO 77556
// dist := 99999 ;
77466: LD_ADDR_VAR 0 5
77470: PUSH
77471: LD_INT 99999
77473: ST_TO_ADDR
// for i in points do
77474: LD_ADDR_VAR 0 4
77478: PUSH
77479: LD_VAR 0 2
77483: PUSH
77484: FOR_IN
77485: IFFALSE 77554
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77487: LD_ADDR_VAR 0 6
77491: PUSH
77492: LD_VAR 0 1
77496: PPUSH
77497: LD_VAR 0 4
77501: PUSH
77502: LD_INT 1
77504: ARRAY
77505: PPUSH
77506: LD_VAR 0 4
77510: PUSH
77511: LD_INT 2
77513: ARRAY
77514: PPUSH
77515: CALL_OW 297
77519: ST_TO_ADDR
// if tmpDist < dist then
77520: LD_VAR 0 6
77524: PUSH
77525: LD_VAR 0 5
77529: LESS
77530: IFFALSE 77552
// begin result := i ;
77532: LD_ADDR_VAR 0 3
77536: PUSH
77537: LD_VAR 0 4
77541: ST_TO_ADDR
// dist := tmpDist ;
77542: LD_ADDR_VAR 0 5
77546: PUSH
77547: LD_VAR 0 6
77551: ST_TO_ADDR
// end ; end ;
77552: GO 77484
77554: POP
77555: POP
// end ;
77556: LD_VAR 0 3
77560: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77561: LD_INT 0
77563: PPUSH
// uc_side := side ;
77564: LD_ADDR_OWVAR 20
77568: PUSH
77569: LD_VAR 0 1
77573: ST_TO_ADDR
// uc_nation := 3 ;
77574: LD_ADDR_OWVAR 21
77578: PUSH
77579: LD_INT 3
77581: ST_TO_ADDR
// vc_chassis := 25 ;
77582: LD_ADDR_OWVAR 37
77586: PUSH
77587: LD_INT 25
77589: ST_TO_ADDR
// vc_engine := engine_siberite ;
77590: LD_ADDR_OWVAR 39
77594: PUSH
77595: LD_INT 3
77597: ST_TO_ADDR
// vc_control := control_computer ;
77598: LD_ADDR_OWVAR 38
77602: PUSH
77603: LD_INT 3
77605: ST_TO_ADDR
// vc_weapon := 59 ;
77606: LD_ADDR_OWVAR 40
77610: PUSH
77611: LD_INT 59
77613: ST_TO_ADDR
// result := CreateVehicle ;
77614: LD_ADDR_VAR 0 5
77618: PUSH
77619: CALL_OW 45
77623: ST_TO_ADDR
// SetDir ( result , d ) ;
77624: LD_VAR 0 5
77628: PPUSH
77629: LD_VAR 0 4
77633: PPUSH
77634: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77638: LD_VAR 0 5
77642: PPUSH
77643: LD_VAR 0 2
77647: PPUSH
77648: LD_VAR 0 3
77652: PPUSH
77653: LD_INT 0
77655: PPUSH
77656: CALL_OW 48
// end ;
77660: LD_VAR 0 5
77664: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77665: LD_INT 0
77667: PPUSH
77668: PPUSH
77669: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77670: LD_ADDR_VAR 0 2
77674: PUSH
77675: LD_INT 0
77677: PUSH
77678: LD_INT 0
77680: PUSH
77681: LD_INT 0
77683: PUSH
77684: LD_INT 0
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77693: LD_VAR 0 1
77697: NOT
77698: PUSH
77699: LD_VAR 0 1
77703: PPUSH
77704: CALL_OW 264
77708: PUSH
77709: LD_INT 12
77711: PUSH
77712: LD_INT 51
77714: PUSH
77715: LD_INT 32
77717: PUSH
77718: LD_EXP 37
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: IN
77729: NOT
77730: OR
77731: IFFALSE 77735
// exit ;
77733: GO 77833
// for i := 1 to 3 do
77735: LD_ADDR_VAR 0 3
77739: PUSH
77740: DOUBLE
77741: LD_INT 1
77743: DEC
77744: ST_TO_ADDR
77745: LD_INT 3
77747: PUSH
77748: FOR_TO
77749: IFFALSE 77831
// begin tmp := GetCargo ( cargo , i ) ;
77751: LD_ADDR_VAR 0 4
77755: PUSH
77756: LD_VAR 0 1
77760: PPUSH
77761: LD_VAR 0 3
77765: PPUSH
77766: CALL_OW 289
77770: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77771: LD_ADDR_VAR 0 2
77775: PUSH
77776: LD_VAR 0 2
77780: PPUSH
77781: LD_VAR 0 3
77785: PPUSH
77786: LD_VAR 0 4
77790: PPUSH
77791: CALL_OW 1
77795: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77796: LD_ADDR_VAR 0 2
77800: PUSH
77801: LD_VAR 0 2
77805: PPUSH
77806: LD_INT 4
77808: PPUSH
77809: LD_VAR 0 2
77813: PUSH
77814: LD_INT 4
77816: ARRAY
77817: PUSH
77818: LD_VAR 0 4
77822: PLUS
77823: PPUSH
77824: CALL_OW 1
77828: ST_TO_ADDR
// end ;
77829: GO 77748
77831: POP
77832: POP
// end ;
77833: LD_VAR 0 2
77837: RET
// export function Length ( array ) ; begin
77838: LD_INT 0
77840: PPUSH
// result := array + 0 ;
77841: LD_ADDR_VAR 0 2
77845: PUSH
77846: LD_VAR 0 1
77850: PUSH
77851: LD_INT 0
77853: PLUS
77854: ST_TO_ADDR
// end ;
77855: LD_VAR 0 2
77859: RET
// export function PrepareArray ( array ) ; begin
77860: LD_INT 0
77862: PPUSH
// result := array diff 0 ;
77863: LD_ADDR_VAR 0 2
77867: PUSH
77868: LD_VAR 0 1
77872: PUSH
77873: LD_INT 0
77875: DIFF
77876: ST_TO_ADDR
// if not result [ 1 ] then
77877: LD_VAR 0 2
77881: PUSH
77882: LD_INT 1
77884: ARRAY
77885: NOT
77886: IFFALSE 77906
// result := Delete ( result , 1 ) ;
77888: LD_ADDR_VAR 0 2
77892: PUSH
77893: LD_VAR 0 2
77897: PPUSH
77898: LD_INT 1
77900: PPUSH
77901: CALL_OW 3
77905: ST_TO_ADDR
// end ; end_of_file
77906: LD_VAR 0 2
77910: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77911: LD_VAR 0 1
77915: PUSH
77916: LD_INT 200
77918: DOUBLE
77919: GREATEREQUAL
77920: IFFALSE 77928
77922: LD_INT 299
77924: DOUBLE
77925: LESSEQUAL
77926: IFTRUE 77930
77928: GO 77962
77930: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77931: LD_VAR 0 1
77935: PPUSH
77936: LD_VAR 0 2
77940: PPUSH
77941: LD_VAR 0 3
77945: PPUSH
77946: LD_VAR 0 4
77950: PPUSH
77951: LD_VAR 0 5
77955: PPUSH
77956: CALL 32762 0 5
77960: GO 78039
77962: LD_INT 300
77964: DOUBLE
77965: GREATEREQUAL
77966: IFFALSE 77974
77968: LD_INT 399
77970: DOUBLE
77971: LESSEQUAL
77972: IFTRUE 77976
77974: GO 78038
77976: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77977: LD_VAR 0 1
77981: PPUSH
77982: LD_VAR 0 2
77986: PPUSH
77987: LD_VAR 0 3
77991: PPUSH
77992: LD_VAR 0 4
77996: PPUSH
77997: LD_VAR 0 5
78001: PPUSH
78002: LD_VAR 0 6
78006: PPUSH
78007: LD_VAR 0 7
78011: PPUSH
78012: LD_VAR 0 8
78016: PPUSH
78017: LD_VAR 0 9
78021: PPUSH
78022: LD_VAR 0 10
78026: PPUSH
78027: LD_VAR 0 11
78031: PPUSH
78032: CALL 29091 0 11
78036: GO 78039
78038: POP
// end ;
78039: PPOPN 11
78041: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78042: LD_VAR 0 1
78046: PPUSH
78047: LD_VAR 0 2
78051: PPUSH
78052: LD_VAR 0 3
78056: PPUSH
78057: LD_VAR 0 4
78061: PPUSH
78062: LD_VAR 0 5
78066: PPUSH
78067: CALL 32498 0 5
// end ; end_of_file
78071: PPOPN 5
78073: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78074: LD_VAR 0 1
78078: PPUSH
78079: LD_VAR 0 2
78083: PPUSH
78084: LD_VAR 0 3
78088: PPUSH
78089: LD_VAR 0 4
78093: PPUSH
78094: LD_VAR 0 5
78098: PPUSH
78099: LD_VAR 0 6
78103: PPUSH
78104: CALL 16784 0 6
// end ;
78108: PPOPN 6
78110: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78111: LD_INT 0
78113: PPUSH
// begin if not units then
78114: LD_VAR 0 1
78118: NOT
78119: IFFALSE 78123
// exit ;
78121: GO 78123
// end ;
78123: PPOPN 7
78125: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78126: CALL 16755 0 0
// end ;
78130: PPOPN 1
78132: END
