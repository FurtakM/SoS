// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10287 0 0
// PrepareRussianCommander ;
 172: CALL 11743 0 0
// PrepareSouthBase ;
 176: CALL 11826 0 0
// PrepareNorthBase ;
 180: CALL 12165 0 0
// PrepareOtherRussians ;
 184: CALL 12531 0 0
// PrepareHeroes ;
 188: CALL 10602 0 0
// PrepareLisSquad ;
 192: CALL 10930 0 0
// PrepareOtherAmericans ;
 196: CALL 11275 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11433 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6239
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5090: LD_INT 22
5092: PPUSH
5093: LD_INT 22
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: LD_INT 2
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 70
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 1
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: NOT
5151: AND
5152: IFFALSE 5083
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5154: LD_ADDR_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 50
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: LD_INT 56
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 5
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: DIFF
5227: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5228: LD_INT 35
5230: PPUSH
5231: CALL_OW 67
// until temp > 0 ;
5235: LD_VAR 0 1
5239: PUSH
5240: LD_INT 0
5242: GREATER
5243: IFFALSE 5154
// wait ( 0 0$5 ) ;
5245: LD_INT 175
5247: PPUSH
5248: CALL_OW 67
// PrepareRussianHeroes ;
5252: CALL 11590 0 0
// InGameOn ;
5256: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5260: LD_EXP 8
5264: PPUSH
5265: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5269: LD_EXP 1
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 8
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5296: LD_EXP 8
5300: PPUSH
5301: LD_VAR 0 1
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: CALL_OW 119
// Wait ( 0 0$02 ) ;
5314: LD_INT 70
5316: PPUSH
5317: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5321: LD_EXP 8
5325: PPUSH
5326: LD_STRING D4-Mikh-1
5328: PPUSH
5329: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 258
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5368
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5352: LD_VAR 0 1
5356: PUSH
5357: LD_INT 1
5359: ARRAY
5360: PPUSH
5361: LD_STRING D4-Sol1-1
5363: PPUSH
5364: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: PPUSH
5377: CALL_OW 258
5381: PUSH
5382: LD_INT 2
5384: EQUAL
5385: IFFALSE 5403
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_STRING D4-FSol1-1
5398: PPUSH
5399: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5403: LD_EXP 8
5407: PPUSH
5408: LD_STRING D4-Mikh-2
5410: PPUSH
5411: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5415: LD_VAR 0 1
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 258
5428: PUSH
5429: LD_INT 1
5431: EQUAL
5432: IFFALSE 5450
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5434: LD_VAR 0 1
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING D4-Sol1-2
5445: PPUSH
5446: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: CALL_OW 258
5463: PUSH
5464: LD_INT 2
5466: EQUAL
5467: IFFALSE 5485
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_STRING D4-FSol1-2
5480: PPUSH
5481: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5485: LD_EXP 8
5489: PPUSH
5490: LD_STRING D4-Mikh-3
5492: PPUSH
5493: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: CALL_OW 258
5510: PUSH
5511: LD_INT 1
5513: EQUAL
5514: IFFALSE 5532
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5516: LD_VAR 0 1
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_STRING D4-Sol1-3
5527: PPUSH
5528: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: CALL_OW 258
5545: PUSH
5546: LD_INT 2
5548: EQUAL
5549: IFFALSE 5567
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5551: LD_VAR 0 1
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_STRING D4-FSol1-3
5562: PPUSH
5563: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5567: LD_EXP 8
5571: PPUSH
5572: LD_STRING D4-Mikh-4
5574: PPUSH
5575: CALL_OW 88
// case query ( Qs1 ) of 1 :
5579: LD_STRING Qs1
5581: PPUSH
5582: CALL_OW 97
5586: PUSH
5587: LD_INT 1
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5630
5595: POP
// begin InGameOff ;
5596: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 6
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5616: LD_EXP 8
5620: PPUSH
5621: LD_INT 17
5623: PPUSH
5624: CALL_OW 113
// end ; 2 :
5628: GO 6223
5630: LD_INT 2
5632: DOUBLE
5633: EQUAL
5634: IFTRUE 5638
5636: GO 6188
5638: POP
// begin repeat wait ( 0 0$1 ) ;
5639: LD_INT 35
5641: PPUSH
5642: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5646: LD_VAR 0 1
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5659: LD_VAR 0 1
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5677: LD_EXP 8
5681: PPUSH
5682: LD_EXP 1
5686: PPUSH
5687: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_EXP 8
5700: PPUSH
5701: CALL_OW 296
5705: PUSH
5706: LD_INT 5
5708: LESS
5709: IFFALSE 5639
// ComTurnUnit ( Mikhail , JMM ) ;
5711: LD_EXP 8
5715: PPUSH
5716: LD_EXP 1
5720: PPUSH
5721: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D4b-JMM-1
5732: PPUSH
5733: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5737: LD_EXP 8
5741: PPUSH
5742: LD_STRING D4b-Mikh-1
5744: PPUSH
5745: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_STRING D4b-JMM-2
5756: PPUSH
5757: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5761: LD_EXP 8
5765: PPUSH
5766: LD_STRING D4b-Mikh-2
5768: PPUSH
5769: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5773: LD_EXP 1
5777: PPUSH
5778: LD_STRING D4b-JMM-3
5780: PPUSH
5781: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5785: LD_EXP 8
5789: PPUSH
5790: LD_STRING D4b-Mikh-3
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4b-JMM-4
5804: PPUSH
5805: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5809: LD_EXP 8
5813: PPUSH
5814: LD_STRING D4b-Mikh-4
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4b-JMM-5
5828: PPUSH
5829: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5833: LD_EXP 8
5837: PPUSH
5838: LD_STRING D4b-Mikh-5
5840: PPUSH
5841: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4b-JMM-6
5852: PPUSH
5853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5857: LD_EXP 8
5861: PPUSH
5862: LD_STRING D4b-Mikh-6
5864: PPUSH
5865: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5869: LD_EXP 1
5873: PPUSH
5874: LD_STRING D4b-JMM-7
5876: PPUSH
5877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5881: LD_EXP 8
5885: PPUSH
5886: LD_STRING D4b-Mikh-7
5888: PPUSH
5889: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PPUSH
5902: CALL_OW 258
5906: PUSH
5907: LD_INT 1
5909: EQUAL
5910: IFFALSE 5928
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 1
5919: ARRAY
5920: PPUSH
5921: LD_STRING D4b-Sol1-7
5923: PPUSH
5924: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: CALL_OW 258
5941: PUSH
5942: LD_INT 2
5944: EQUAL
5945: IFFALSE 5963
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5947: LD_VAR 0 1
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: PPUSH
5956: LD_STRING D4b-FSol1-7
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-8
5970: PPUSH
5971: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5975: LD_VAR 0 1
5979: PUSH
5980: LD_INT 1
5982: ARRAY
5983: PPUSH
5984: CALL_OW 258
5988: PUSH
5989: LD_INT 1
5991: EQUAL
5992: IFFALSE 6010
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5994: LD_VAR 0 1
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_STRING D4b-Sol1-8
6005: PPUSH
6006: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6010: LD_VAR 0 1
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: CALL_OW 258
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: IFFALSE 6045
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6029: LD_VAR 0 1
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_STRING D4b-FSol1-8
6040: PPUSH
6041: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6045: LD_EXP 1
6049: PPUSH
6050: LD_STRING D4b-JMM-9
6052: PPUSH
6053: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6057: LD_EXP 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 22
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: PUSH
6092: FOR_IN
6093: IFFALSE 6106
// ComFree ( i ) ;
6095: LD_VAR 0 3
6099: PPUSH
6100: CALL_OW 139
6104: GO 6092
6106: POP
6107: POP
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6115: LD_EXP 8
6119: PPUSH
6120: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6149: LD_EXP 8
6153: PPUSH
6154: CALL_OW 310
6158: IFFALSE 6108
// mikhailDepot = IsInUnit ( Mikhail ) ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: LD_EXP 8
6169: PPUSH
6170: CALL_OW 310
6174: ST_TO_ADDR
// InGameOff ;
6175: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6179: LD_STRING M3
6181: PPUSH
6182: CALL_OW 337
// end ; 3 :
6186: GO 6223
6188: LD_INT 3
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6222
6196: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6197: LD_EXP 8
6201: PPUSH
6202: LD_INT 17
6204: PPUSH
6205: CALL_OW 113
// wait ( 0 0$3 ) ;
6209: LD_INT 105
6211: PPUSH
6212: CALL_OW 67
// InGameOff ;
6216: CALL_OW 9
// end ; end ;
6220: GO 6223
6222: POP
// PrepareTigers ;
6223: CALL 14440 0 0
// RussianTrap ;
6227: CALL 9986 0 0
// tigersRespawn = 1 ;
6231: LD_ADDR_EXP 30
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// end ;
6239: PPOPN 3
6241: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6242: LD_INT 1
6244: PPUSH
6245: CALL_OW 255
6249: PUSH
6250: LD_INT 1
6252: EQUAL
6253: PUSH
6254: LD_INT 10
6256: PPUSH
6257: CALL_OW 255
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: PUSH
6267: LD_INT 1
6269: PPUSH
6270: CALL_OW 274
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 275
6282: PUSH
6283: LD_INT 100
6285: GREATEREQUAL
6286: AND
6287: IFFALSE 6436
6289: GO 6291
6291: DISABLE
6292: LD_INT 0
6294: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6295: LD_INT 2100
6297: PPUSH
6298: LD_INT 4200
6300: PPUSH
6301: CALL_OW 12
6305: PUSH
6306: LD_INT 1050
6308: PLUS
6309: PPUSH
6310: CALL_OW 67
// PrepareCargoBays ;
6314: CALL 12723 0 0
// cargoRespawn = 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_EXP 15
6335: PUSH
6336: LD_EXP 16
6340: PUSH
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 18
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6357: LD_VAR 0 1
6361: PPUSH
6362: LD_INT 17
6364: PPUSH
6365: LD_INT 10
6367: PPUSH
6368: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_INT 36
6379: PPUSH
6380: LD_INT 13
6382: PPUSH
6383: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_INT 40
6394: PPUSH
6395: LD_INT 20
6397: PPUSH
6398: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_INT 53
6409: PPUSH
6410: LD_INT 16
6412: PPUSH
6413: CALL_OW 171
// wait ( 0 0$5 ) ;
6417: LD_INT 175
6419: PPUSH
6420: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING D5-Rus2-1
6431: PPUSH
6432: CALL_OW 88
// end ;
6436: PPOPN 1
6438: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6439: LD_EXP 28
6443: PUSH
6444: LD_INT 1
6446: EQUAL
6447: IFFALSE 6602
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_INT 22
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 21
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 34
6482: PUSH
6483: LD_INT 51
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6500: LD_INT 105
6502: PPUSH
6503: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_INT 3
6514: PUSH
6515: LD_INT 60
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: PUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 24
6540: PUSH
6541: LD_INT 980
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 72
6556: OR
6557: IFFALSE 6500
// ComMoveXY ( cargos , 7 , 9 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 7
6566: PPUSH
6567: LD_INT 9
6569: PPUSH
6570: CALL_OW 111
// cargoSee = 1 ;
6574: LD_ADDR_EXP 29
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// cargoEscape = 1 ;
6582: LD_ADDR_EXP 20
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING D5-Rus2-1a
6597: PPUSH
6598: CALL_OW 88
// end ;
6602: PPOPN 1
6604: END
// every 0 0$1 trigger cargoEscape > 0 do
6605: LD_EXP 20
6609: PUSH
6610: LD_INT 0
6612: GREATER
6613: IFFALSE 6760
6615: GO 6617
6617: DISABLE
// begin enable ;
6618: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6619: LD_EXP 15
6623: PUSH
6624: LD_EXP 16
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PPUSH
6633: LD_INT 13
6635: PPUSH
6636: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6640: LD_EXP 15
6644: PPUSH
6645: LD_INT 13
6647: PPUSH
6648: CALL_OW 308
6652: PUSH
6653: LD_EXP 17
6657: PPUSH
6658: LD_INT 13
6660: PPUSH
6661: CALL_OW 308
6665: OR
6666: IFFALSE 6700
// begin RemoveUnit ( cargo1 ) ;
6668: LD_EXP 15
6672: PPUSH
6673: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6677: LD_EXP 17
6681: PPUSH
6682: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6686: LD_ADDR_EXP 20
6690: PUSH
6691: LD_EXP 20
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6700: LD_EXP 16
6704: PPUSH
6705: LD_INT 13
6707: PPUSH
6708: CALL_OW 308
6712: PUSH
6713: LD_EXP 18
6717: PPUSH
6718: LD_INT 13
6720: PPUSH
6721: CALL_OW 308
6725: OR
6726: IFFALSE 6760
// begin RemoveUnit ( cargo2 ) ;
6728: LD_EXP 16
6732: PPUSH
6733: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6737: LD_EXP 18
6741: PPUSH
6742: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6746: LD_ADDR_EXP 20
6750: PUSH
6751: LD_EXP 20
6755: PUSH
6756: LD_INT 1
6758: PLUS
6759: ST_TO_ADDR
// end ; end ;
6760: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6761: LD_EXP 20
6765: PUSH
6766: LD_INT 1
6768: GREATER
6769: IFFALSE 6926
6771: GO 6773
6773: DISABLE
6774: LD_INT 0
6776: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6777: LD_INT 4
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6790: LD_INT 31
6792: PPUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 324
// if IsOK ( Jerry ) then
6803: LD_EXP 7
6807: PPUSH
6808: CALL_OW 302
6812: IFFALSE 6828
// Say ( Jerry , D5a-Sol1-1 ) else
6814: LD_EXP 7
6818: PPUSH
6819: LD_STRING D5a-Sol1-1
6821: PPUSH
6822: CALL_OW 88
6826: GO 6914
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 69
6861: PUSH
6862: LD_EXP 1
6866: PUSH
6867: LD_EXP 2
6871: PUSH
6872: LD_EXP 3
6876: PUSH
6877: LD_EXP 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: DIFF
6888: ST_TO_ADDR
// if not speaker then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6898: LD_VAR 0 1
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_STRING D5a-Sol1-1
6909: PPUSH
6910: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_STRING D5a-JMM-1
6921: PPUSH
6922: CALL_OW 88
// end ;
6926: PPOPN 1
6928: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 255
6936: PUSH
6937: LD_INT 3
6939: EQUAL
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: LESS
6952: AND
6953: PUSH
6954: LD_INT 10
6956: PPUSH
6957: CALL_OW 255
6961: PUSH
6962: LD_INT 3
6964: EQUAL
6965: PUSH
6966: LD_INT 10
6968: PPUSH
6969: CALL_OW 256
6973: PUSH
6974: LD_INT 1000
6976: LESS
6977: AND
6978: OR
6979: IFFALSE 6996
6981: GO 6983
6983: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6984: LD_EXP 1
6988: PPUSH
6989: LD_STRING D8-JMM-1
6991: PPUSH
6992: CALL_OW 88
// end ;
6996: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6997: LD_EXP 8
7001: PPUSH
7002: CALL_OW 310
7006: PUSH
7007: LD_INT 1
7009: EQUAL
7010: PUSH
7011: LD_EXP 22
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: NOT
7020: AND
7021: IFFALSE 7043
7023: GO 7025
7025: DISABLE
// begin mikhailInBase = 1 ;
7026: LD_ADDR_EXP 22
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// mikhailStatus = 1 ;
7034: LD_ADDR_EXP 21
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// enable ;
7042: ENABLE
// end ;
7043: END
// export function AskMikhail ; begin
7044: LD_INT 0
7046: PPUSH
// case query ( QMikh2 ) of 1 :
7047: LD_STRING QMikh2
7049: PPUSH
7050: CALL_OW 97
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7130
7063: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 6
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7080: LD_EXP 8
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7092: LD_EXP 8
7096: PPUSH
7097: CALL_OW 122
// wait ( 0 0$1 ) ;
7101: LD_INT 35
7103: PPUSH
7104: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7108: LD_EXP 8
7112: PPUSH
7113: LD_INT 17
7115: PPUSH
7116: CALL_OW 113
// mikhailInbase = 0 ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// end ; 2 :
7128: GO 7371
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7311
7138: POP
// begin mikhailInBase = 2 ;
7139: LD_ADDR_EXP 22
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7147: LD_EXP 8
7151: PPUSH
7152: LD_INT 6
7154: PPUSH
7155: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7159: LD_EXP 8
7163: PPUSH
7164: CALL_OW 122
// wait ( 0 0$1 ) ;
7168: LD_INT 35
7170: PPUSH
7171: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7175: LD_EXP 8
7179: PPUSH
7180: LD_EXP 8
7184: PPUSH
7185: CALL_OW 250
7189: PUSH
7190: LD_INT 2
7192: PLUS
7193: PPUSH
7194: LD_EXP 8
7198: PPUSH
7199: CALL_OW 251
7203: PUSH
7204: LD_INT 2
7206: PLUS
7207: PPUSH
7208: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7212: LD_EXP 8
7216: PPUSH
7217: LD_EXP 8
7221: PPUSH
7222: CALL_OW 250
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: PPUSH
7231: LD_EXP 8
7235: PPUSH
7236: CALL_OW 251
7240: PUSH
7241: LD_INT 2
7243: PLUS
7244: PPUSH
7245: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7249: LD_EXP 8
7253: PPUSH
7254: LD_EXP 8
7258: PPUSH
7259: CALL_OW 250
7263: PUSH
7264: LD_INT 2
7266: PLUS
7267: PPUSH
7268: LD_EXP 8
7272: PPUSH
7273: CALL_OW 251
7277: PPUSH
7278: CALL_OW 171
// wait ( 0 0$5 ) ;
7282: LD_INT 175
7284: PPUSH
7285: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 25
7296: PPUSH
7297: CALL_OW 113
// mikhailInBase = 4 ;
7301: LD_ADDR_EXP 22
7305: PUSH
7306: LD_INT 4
7308: ST_TO_ADDR
// end ; 3 :
7309: GO 7371
7311: LD_INT 3
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7370
7319: POP
// begin SetSide ( Mikhail , 6 ) ;
7320: LD_EXP 8
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7332: LD_EXP 8
7336: PPUSH
7337: CALL_OW 122
// wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_INT 17
7355: PPUSH
7356: CALL_OW 113
// mikhailInbase = 3 ;
7360: LD_ADDR_EXP 22
7364: PUSH
7365: LD_INT 3
7367: ST_TO_ADDR
// end ; end ;
7368: GO 7371
7370: POP
// end ;
7371: LD_VAR 0 1
7375: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7376: LD_EXP 8
7380: PPUSH
7381: LD_INT 25
7383: PPUSH
7384: CALL_OW 308
7388: PUSH
7389: LD_EXP 22
7393: PUSH
7394: LD_INT 4
7396: EQUAL
7397: AND
7398: IFFALSE 7502
7400: GO 7402
7402: DISABLE
// begin enable ;
7403: ENABLE
// mikhailInBase = 1 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// InGameOn ;
7412: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7416: LD_INT 1
7418: PPUSH
7419: LD_INT 6
7421: PPUSH
7422: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7426: LD_INT 35
7428: PPUSH
7429: CALL_OW 67
// if Carry ( Mikhail ) then
7433: LD_EXP 8
7437: PPUSH
7438: CALL_OW 281
7442: IFFALSE 7453
// ComUnload ( Mikhail ) ;
7444: LD_EXP 8
7448: PPUSH
7449: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7465: LD_EXP 8
7469: PPUSH
7470: CALL_OW 310
7474: IFFALSE 7426
// SetSide ( dep1 , 1 ) ;
7476: LD_INT 1
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7486: LD_EXP 8
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 235
// InGameOff ;
7498: CALL_OW 9
// end ;
7502: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7503: LD_EXP 8
7507: PPUSH
7508: CALL_OW 310
7512: PUSH
7513: LD_EXP 22
7517: PUSH
7518: LD_INT 3
7520: EQUAL
7521: NOT
7522: AND
7523: IFFALSE 7658
7525: GO 7527
7527: DISABLE
// begin enable ;
7528: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7529: LD_INT 22
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 1
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 91
7551: PUSH
7552: LD_EXP 8
7556: PPUSH
7557: CALL_OW 310
7561: PUSH
7562: LD_INT 10
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: PUSH
7580: LD_INT 1
7582: EQUAL
7583: IFFALSE 7658
// begin mikhailStatus = 4 ;
7585: LD_ADDR_EXP 21
7589: PUSH
7590: LD_INT 4
7592: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7593: LD_INT 1
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7609: LD_EXP 8
7613: PPUSH
7614: LD_INT 6
7616: PPUSH
7617: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7621: LD_EXP 8
7625: PPUSH
7626: CALL_OW 122
// wait ( 0 0$1 ) ;
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7637: LD_EXP 8
7641: PPUSH
7642: LD_INT 17
7644: PPUSH
7645: CALL_OW 113
// mikhailStatus = 3 ;
7649: LD_ADDR_EXP 21
7653: PUSH
7654: LD_INT 3
7656: ST_TO_ADDR
// disable ;
7657: DISABLE
// end ; end ;
7658: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_EXP 23
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 5
7676: LESS
7677: PUSH
7678: LD_EXP 21
7682: PUSH
7683: LD_INT 3
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_EXP 22
7692: PUSH
7693: LD_INT 3
7695: EQUAL
7696: NOT
7697: AND
7698: IFFALSE 7920
7700: GO 7702
7702: DISABLE
7703: LD_INT 0
7705: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_INT 22
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 26
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: PUSH
7751: LD_EXP 1
7755: PUSH
7756: LD_EXP 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: DIFF
7765: ST_TO_ADDR
// DialogueOn ;
7766: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-1
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D7-JMM-2
7805: PPUSH
7806: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7810: LD_VAR 0 1
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_STRING D7-Sol1-2
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7826: LD_EXP 1
7830: PPUSH
7831: LD_STRING D7-JMM-3
7833: PPUSH
7834: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PPUSH
7847: LD_STRING D7-Sol1-3
7849: PPUSH
7850: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7854: LD_EXP 3
7858: PPUSH
7859: CALL_OW 302
7863: PUSH
7864: LD_EXP 4
7868: PPUSH
7869: CALL_OW 302
7873: AND
7874: IFFALSE 7916
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7876: LD_EXP 3
7880: PPUSH
7881: LD_STRING D7-Cyrus-3
7883: PPUSH
7884: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: PPUSH
7897: LD_STRING D7-Sol1-4
7899: PPUSH
7900: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7904: LD_EXP 4
7908: PPUSH
7909: LD_STRING D7-Lisa-4
7911: PPUSH
7912: CALL_OW 88
// end ; DialogueOff ;
7916: CALL_OW 7
// end ;
7920: PPOPN 1
7922: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7923: LD_EXP 8
7927: PPUSH
7928: CALL_OW 303
7932: PUSH
7933: LD_EXP 21
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: AND
7942: IFFALSE 7956
7944: GO 7946
7946: DISABLE
// begin enable ;
7947: ENABLE
// mikhailStatus = 2 ;
7948: LD_ADDR_EXP 21
7952: PUSH
7953: LD_INT 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7957: LD_EXP 8
7961: PPUSH
7962: LD_INT 17
7964: PPUSH
7965: CALL_OW 308
7969: PUSH
7970: LD_EXP 8
7974: PPUSH
7975: CALL_OW 255
7979: PUSH
7980: LD_INT 6
7982: EQUAL
7983: AND
7984: IFFALSE 8017
7986: GO 7988
7988: DISABLE
// begin if not mikhailInBase = 3 then
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 3
7996: EQUAL
7997: NOT
7998: IFFALSE 8008
// mikhailStatus = 3 ;
8000: LD_ADDR_EXP 21
8004: PUSH
8005: LD_INT 3
8007: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8008: LD_EXP 8
8012: PPUSH
8013: CALL_OW 64
// end ;
8017: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8018: LD_EXP 21
8022: PUSH
8023: LD_INT 3
8025: EQUAL
8026: PUSH
8027: LD_EXP 8
8031: PPUSH
8032: CALL_OW 255
8036: PUSH
8037: LD_INT 6
8039: EQUAL
8040: AND
8041: IFFALSE 8207
8043: GO 8045
8045: DISABLE
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
// begin enable ;
8050: ENABLE
// if IsOk ( Mikhail ) then
8051: LD_EXP 8
8055: PPUSH
8056: CALL_OW 302
8060: IFFALSE 8207
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_EXP 8
8071: PPUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 21
8084: PUSH
8085: LD_INT 1
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PPUSH
8101: CALL 10178 0 2
8105: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_EXP 8
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 8
8123: LESS
8124: IFFALSE 8207
// begin if GetSex ( attacker ) = sex_male then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 258
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8175
// begin disable ;
8141: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8142: LD_VAR 0 2
8146: PPUSH
8147: LD_STRING D7a-Sol1-1
8149: PPUSH
8150: CALL_OW 88
// wait ( 0 0$2 ) ;
8154: LD_INT 70
8156: PPUSH
8157: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_STRING D7a-Sol1-1a
8168: PPUSH
8169: CALL_OW 88
// end else
8173: GO 8207
// begin disable ;
8175: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_STRING D7a-FSol1-1
8183: PPUSH
8184: CALL_OW 88
// wait ( 0 0$2 ) ;
8188: LD_INT 70
8190: PPUSH
8191: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_STRING D7a-FSol1-1a
8202: PPUSH
8203: CALL_OW 88
// end ; end ; end ; end ;
8207: PPOPN 2
8209: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8210: LD_EXP 27
8214: PUSH
8215: LD_INT 1
8217: EQUAL
8218: PUSH
8219: LD_INT 22
8221: PPUSH
8222: LD_INT 22
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 1
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 70
8250: PUSH
8251: LD_INT 2
8253: GREATER
8254: AND
8255: PUSH
8256: LD_INT 22
8258: PPUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 59
8284: PUSH
8285: EMPTY
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 70
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: AND
8306: IFFALSE 8321
8308: GO 8310
8310: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 235
// end ;
8321: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8322: LD_EXP 30
8326: PUSH
8327: LD_INT 1
8329: EQUAL
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 0
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: IFFALSE 8465
8366: GO 8368
8368: DISABLE
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: LD_INT 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 69
8417: ST_TO_ADDR
// for i in tmp do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: LD_VAR 0 2
8427: PUSH
8428: FOR_IN
8429: IFFALSE 8456
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_INT 1
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: CALL_OW 12
8446: PPUSH
8447: LD_INT 300
8449: PPUSH
8450: CALL_OW 492
8454: GO 8428
8456: POP
8457: POP
// SetAchievement ( ACH_TIGER ) ;
8458: LD_STRING ACH_TIGER
8460: PPUSH
8461: CALL_OW 543
// end ;
8465: PPOPN 2
8467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8468: LD_INT 22
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 34
8480: PUSH
8481: LD_INT 51
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: PUSH
8497: LD_INT 2
8499: GREATEREQUAL
8500: IFFALSE 8512
8502: GO 8504
8504: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8505: LD_STRING ACH_CARGO
8507: PPUSH
8508: CALL_OW 543
8512: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
// for i = 1 to count do
8519: LD_ADDR_VAR 0 8
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_VAR 0 6
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8616
// begin uc_side = side ;
8537: LD_ADDR_OWVAR 20
8541: PUSH
8542: LD_VAR 0 1
8546: ST_TO_ADDR
// uc_nation = nation ;
8547: LD_ADDR_OWVAR 21
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// hc_gallery =  ;
8557: LD_ADDR_OWVAR 33
8561: PUSH
8562: LD_STRING 
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 380
// un = CreateHuman ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: CALL_OW 44
8599: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8600: LD_VAR 0 10
8604: PPUSH
8605: LD_VAR 0 3
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8534
8616: POP
8617: POP
// end ;
8618: LD_VAR 0 7
8622: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
// uc_side := GetSide ( b ) ;
8628: LD_ADDR_OWVAR 20
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: CALL_OW 255
8642: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8643: LD_ADDR_OWVAR 21
8647: PUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 248
8657: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8658: LD_INT 0
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 380
// un = CreateHuman ;
8673: LD_ADDR_VAR 0 4
8677: PUSH
8678: CALL_OW 44
8682: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 254
8697: PUSH
8698: LD_INT 3
8700: MINUS
8701: ST_TO_ADDR
// if dir < 0 then
8702: LD_VAR 0 5
8706: PUSH
8707: LD_INT 0
8709: LESS
8710: IFFALSE 8726
// dir := 6 + dir ;
8712: LD_ADDR_VAR 0 5
8716: PUSH
8717: LD_INT 6
8719: PUSH
8720: LD_VAR 0 5
8724: PLUS
8725: ST_TO_ADDR
// SetDir ( un , dir ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 52
// end ;
8754: LD_VAR 0 3
8758: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_VAR 0 1
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: LD_INT 1000
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_VAR 0 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 3
8847: PUSH
8848: LD_INT 24
8850: PUSH
8851: LD_INT 1000
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: PPUSH
8870: CALL_OW 70
8874: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 0
8882: GREATER
8883: PUSH
8884: LD_VAR 0 7
8888: PUSH
8889: LD_INT 0
8891: GREATER
8892: AND
8893: IFFALSE 8959
// begin for i in engineerOk_list do
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8957
// begin for j in buildings_list do
8908: LD_ADDR_VAR 0 8
8912: PUSH
8913: LD_VAR 0 5
8917: PUSH
8918: FOR_IN
8919: IFFALSE 8953
// begin AddComExitBuilding ( i ) ;
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 182
// wait ( 0 0$1 ) ;
8930: LD_INT 35
8932: PPUSH
8933: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8937: LD_VAR 0 6
8941: PPUSH
8942: LD_VAR 0 8
8946: PPUSH
8947: CALL_OW 190
// end ;
8951: GO 8918
8953: POP
8954: POP
// end ;
8955: GO 8905
8957: POP
8958: POP
// end ; if buildings_list = 0 then
8959: LD_VAR 0 5
8963: PUSH
8964: LD_INT 0
8966: EQUAL
8967: IFFALSE 9000
// begin for i in engineerOK_list do
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_VAR 0 7
8978: PUSH
8979: FOR_IN
8980: IFFALSE 8998
// begin ComEnterUnit ( i , building ) ;
8982: LD_VAR 0 6
8986: PPUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: CALL_OW 120
// end ;
8996: GO 8979
8998: POP
8999: POP
// end ; end ;
9000: LD_VAR 0 4
9004: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 250
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 3
9068: PPUSH
9069: LD_INT 22
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 3
9093: PUSH
9094: LD_INT 24
9096: PUSH
9097: LD_INT 650
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9118: LD_VAR 0 9
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: PUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_INT 0
9134: GREATER
9135: AND
9136: IFFALSE 9263
// begin for i = 1 to damageUnits do
9138: LD_ADDR_VAR 0 7
9142: PUSH
9143: DOUBLE
9144: LD_INT 1
9146: DEC
9147: ST_TO_ADDR
9148: LD_VAR 0 9
9152: PUSH
9153: FOR_TO
9154: IFFALSE 9178
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 7
9165: ARRAY
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: CALL_OW 113
9176: GO 9153
9178: POP
9179: POP
// for i in sci_list do
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: LD_VAR 0 6
9189: PUSH
9190: FOR_IN
9191: IFFALSE 9259
// begin ComExitBuilding ( i ) ;
9193: LD_VAR 0 7
9197: PPUSH
9198: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9202: LD_ADDR_VAR 0 8
9206: PUSH
9207: LD_VAR 0 2
9211: PPUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9255
// begin AddComHeal ( i , j ) ;
9232: LD_VAR 0 7
9236: PPUSH
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 188
// wait ( 1 1$0 ) ;
9246: LD_INT 2100
9248: PPUSH
9249: CALL_OW 67
// end ;
9253: GO 9229
9255: POP
9256: POP
// end ;
9257: GO 9190
9259: POP
9260: POP
// end else
9261: GO 9277
// begin AddComEnterUnit ( sci_list , build ) ;
9263: LD_VAR 0 6
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: CALL_OW 180
// end ; end ;
9277: LD_VAR 0 5
9281: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 24
9326: PUSH
9327: LD_INT 550
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 70
9354: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9355: LD_ADDR_VAR 0 8
9359: PUSH
9360: LD_VAR 0 3
9364: PPUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 21
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 46
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 24
9402: PUSH
9403: LD_INT 550
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 22
9437: PUSH
9438: LD_VAR 0 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 21
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 34
9459: PUSH
9460: LD_INT 46
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 24
9469: PUSH
9470: LD_INT 1000
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 58
9479: PUSH
9480: EMPTY
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 70
9494: ST_TO_ADDR
// for i in damageVehicle_list do
9495: LD_ADDR_VAR 0 5
9499: PUSH
9500: LD_VAR 0 8
9504: PUSH
9505: FOR_IN
9506: IFFALSE 9525
// mechanicInside_list = UnitsInside ( i ) ;
9508: LD_ADDR_VAR 0 10
9512: PUSH
9513: LD_VAR 0 5
9517: PPUSH
9518: CALL_OW 313
9522: ST_TO_ADDR
9523: GO 9505
9525: POP
9526: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9527: LD_ADDR_VAR 0 11
9531: PUSH
9532: LD_VAR 0 2
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: ST_TO_ADDR
// if damageVehicle_list > 0 then
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: IFFALSE 9649
// begin for i in damageVehicle_list do
9578: LD_ADDR_VAR 0 5
9582: PUSH
9583: LD_VAR 0 8
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9647
// begin for j in mechanicInside_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 10
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9643
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9604: LD_VAR 0 8
9608: PPUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: CALL_OW 113
// AddComExitVehicle ( j ) ;
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_VAR 0 5
9636: PPUSH
9637: CALL_OW 189
// end ;
9641: GO 9601
9643: POP
9644: POP
// end ;
9645: GO 9588
9647: POP
9648: POP
// end ; if emptyVehicle_list > 0 then
9649: LD_VAR 0 9
9653: PUSH
9654: LD_INT 0
9656: GREATER
9657: IFFALSE 9707
// begin for i in emptyVehicle_list do
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 9
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9705
// begin for j in mechanicOutside_list do
9672: LD_ADDR_VAR 0 6
9676: PUSH
9677: LD_VAR 0 11
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9701
// begin AddComEnterUnit ( j , i ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 180
// end ;
9699: GO 9682
9701: POP
9702: POP
// end ;
9703: GO 9669
9705: POP
9706: POP
// end ; if VehicleOK_list > 0 then
9707: LD_VAR 0 7
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9749
// begin for i in VehicleOK_list do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: LD_VAR 0 7
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9747
// ComAgressiveMove ( i , 110 , 29 ) ;
9730: LD_VAR 0 5
9734: PPUSH
9735: LD_INT 110
9737: PPUSH
9738: LD_INT 29
9740: PPUSH
9741: CALL_OW 114
9745: GO 9727
9747: POP
9748: POP
// end ; end ;
9749: LD_VAR 0 4
9753: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9759: LD_VAR 0 1
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 2
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_VAR 0 5
9817: GREATER
9818: IFFALSE 9950
// begin for i in defendersList do
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9946
// begin AddComExitBuilding ( i ) ;
9833: LD_VAR 0 7
9837: PPUSH
9838: CALL_OW 182
// wait ( 0 0$1 ) ;
9842: LD_INT 35
9844: PPUSH
9845: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9849: LD_ADDR_VAR 0 8
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9942
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9911: LD_VAR 0 7
9915: PPUSH
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 250
9925: PPUSH
9926: LD_VAR 0 8
9930: PPUSH
9931: CALL_OW 251
9935: PPUSH
9936: CALL_OW 174
9940: GO 9908
9942: POP
9943: POP
// end ;
9944: GO 9830
9946: POP
9947: POP
// end else
9948: GO 9981
// begin for i in defendersList do
9950: LD_ADDR_VAR 0 7
9954: PUSH
9955: LD_VAR 0 3
9959: PUSH
9960: FOR_IN
9961: IFFALSE 9979
// ComEnterUnit ( i , build ) ;
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 4
9972: PPUSH
9973: CALL_OW 120
9977: GO 9960
9979: POP
9980: POP
// end ; end ;
9981: LD_VAR 0 6
9985: RET
// export function RussianTrap ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// if GetSide ( Brian ) = 4 then
9990: LD_EXP 6
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: LD_INT 4
10002: EQUAL
10003: IFFALSE 10026
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10005: LD_EXP 6
10009: PUSH
10010: LD_EXP 7
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10026: LD_ADDR_VAR 0 2
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 21
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: FOR_IN
10061: IFFALSE 10171
// begin ComExitBuilding ( i ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 120
10086: PPUSH
10087: LD_INT 56
10089: PPUSH
10090: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 111
10101: PPUSH
10102: LD_INT 37
10104: PPUSH
10105: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10109: LD_INT 33
10111: PPUSH
10112: CALL_OW 255
10116: PUSH
10117: LD_INT 3
10119: EQUAL
10120: PUSH
10121: LD_INT 33
10123: PPUSH
10124: CALL_OW 302
10128: AND
10129: IFFALSE 10145
// begin AddComEnterUnit ( i , arm2 ) ;
10131: LD_VAR 0 2
10135: PPUSH
10136: LD_INT 33
10138: PPUSH
10139: CALL_OW 180
// end else
10143: GO 10169
// begin AddComCrawl ( i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_INT 109
10161: PPUSH
10162: LD_INT 30
10164: PPUSH
10165: CALL_OW 174
// end ; end ;
10169: GO 10060
10171: POP
10172: POP
// end ;
10173: LD_VAR 0 1
10177: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// nearest_dist = 1000 ;
10185: LD_ADDR_VAR 0 4
10189: PUSH
10190: LD_INT 1000
10192: ST_TO_ADDR
// nearest_un = un ;
10193: LD_ADDR_VAR 0 5
10197: PUSH
10198: LD_VAR 0 1
10202: ST_TO_ADDR
// for sold in units do
10203: LD_ADDR_VAR 0 6
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10270
// begin dist = GetDistUnits ( un , sold ) ;
10216: LD_ADDR_VAR 0 7
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 296
10235: ST_TO_ADDR
// if dist < nearest_dist then
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 4
10245: LESS
10246: IFFALSE 10268
// begin nearest_un = sold ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 6
10257: ST_TO_ADDR
// nearest_dist = dist ;
10258: LD_ADDR_VAR 0 4
10262: PUSH
10263: LD_VAR 0 7
10267: ST_TO_ADDR
// end ; end ;
10268: GO 10213
10270: POP
10271: POP
// result := nearest_un ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_VAR 0 5
10281: ST_TO_ADDR
// end ;
10282: LD_VAR 0 3
10286: RET
// export function PrepareDifficulty ; begin
10287: LD_INT 0
10289: PPUSH
// if Difficulty = 1 then
10290: LD_OWVAR 67
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: IFFALSE 10361
// begin RemoveUnit ( brw2 ) ;
10300: LD_INT 9
10302: PPUSH
10303: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10307: LD_INT 30
10309: PPUSH
10310: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10314: LD_INT 52
10316: PPUSH
10317: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10321: LD_INT 63
10323: PPUSH
10324: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10328: LD_INT 5
10330: PUSH
10331: LD_INT 4
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: LD_INT 60
10340: PPUSH
10341: CALL_OW 240
// RuSoldMinLevel = 0 ;
10345: LD_ADDR_EXP 13
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10353: LD_ADDR_EXP 14
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// end ; if Difficulty = 2 then
10361: LD_OWVAR 67
10365: PUSH
10366: LD_INT 2
10368: EQUAL
10369: IFFALSE 10411
// begin RemoveUnit ( brw4 ) ;
10371: LD_INT 52
10373: PPUSH
10374: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: LD_INT 50
10390: PPUSH
10391: CALL_OW 240
// RuSoldMinLevel = 1 ;
10395: LD_ADDR_EXP 13
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10403: LD_ADDR_EXP 14
10407: PUSH
10408: LD_INT 2
10410: ST_TO_ADDR
// end ; if Difficulty = 3 then
10411: LD_OWVAR 67
10415: PUSH
10416: LD_INT 3
10418: EQUAL
10419: IFFALSE 10454
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10421: LD_INT 5
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: LD_INT 40
10433: PPUSH
10434: CALL_OW 240
// RuSoldMinLevel = 2 ;
10438: LD_ADDR_EXP 13
10442: PUSH
10443: LD_INT 2
10445: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10446: LD_ADDR_EXP 14
10450: PUSH
10451: LD_INT 3
10453: ST_TO_ADDR
// end ; end ;
10454: LD_VAR 0 1
10458: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
10463: PPUSH
// tmp = [ ] ;
10464: LD_ADDR_VAR 0 5
10468: PUSH
10469: EMPTY
10470: ST_TO_ADDR
// if not vehicles then
10471: LD_VAR 0 1
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10597
// for i in vehicles do
10480: LD_ADDR_VAR 0 4
10484: PUSH
10485: LD_VAR 0 1
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10581
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_VAR 0 5
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
// end ;
10579: GO 10490
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side = 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING 01_JMM
10621: PPUSH
10622: CALL_OW 34
10626: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_STRING 01_JMMLifePoints_1
10634: PPUSH
10635: LD_INT 1000
10637: PPUSH
10638: CALL_OW 30
10642: ST_TO_ADDR
// if plive < 250 then
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 250
10650: LESS
10651: IFFALSE 10661
// plive := 300 ;
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_INT 300
10660: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10675: LD_ADDR_EXP 9
10679: PUSH
10680: LD_STRING Powell
10682: PPUSH
10683: CALL_OW 25
10687: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10688: LD_ADDR_EXP 2
10692: PUSH
10693: LD_STRING 01_Bobby
10695: PPUSH
10696: CALL_OW 34
10700: ST_TO_ADDR
// if Bobby then
10701: LD_EXP 2
10705: IFFALSE 10755
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_STRING 01_BobbyLifePoints_1
10714: PPUSH
10715: LD_INT 1000
10717: PPUSH
10718: CALL_OW 30
10722: ST_TO_ADDR
// if plive < 250 then
10723: LD_VAR 0 2
10727: PUSH
10728: LD_INT 250
10730: LESS
10731: IFFALSE 10741
// plive := 300 ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_INT 300
10740: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10741: LD_EXP 2
10745: PPUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10755: LD_ADDR_EXP 3
10759: PUSH
10760: LD_STRING 01_Cyrus
10762: PPUSH
10763: CALL_OW 34
10767: ST_TO_ADDR
// if Cyrus then
10768: LD_EXP 3
10772: IFFALSE 10822
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_STRING 01_CyrusLifePoints_1
10781: PPUSH
10782: LD_INT 1000
10784: PPUSH
10785: CALL_OW 30
10789: ST_TO_ADDR
// if plive < 250 then
10790: LD_VAR 0 2
10794: PUSH
10795: LD_INT 250
10797: LESS
10798: IFFALSE 10808
// plive := 300 ;
10800: LD_ADDR_VAR 0 2
10804: PUSH
10805: LD_INT 300
10807: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10808: LD_EXP 3
10812: PPUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10822: LD_ADDR_EXP 5
10826: PUSH
10827: LD_STRING Khatam
10829: PPUSH
10830: CALL_OW 25
10834: ST_TO_ADDR
// uc_side = 4 ;
10835: LD_ADDR_OWVAR 20
10839: PUSH
10840: LD_INT 4
10842: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10843: LD_ADDR_EXP 4
10847: PUSH
10848: LD_STRING Lisa
10850: PPUSH
10851: CALL_OW 25
10855: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_INT 3
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10871: LD_EXP 2
10875: PPUSH
10876: LD_INT 3
10878: PPUSH
10879: LD_INT 0
10881: PPUSH
10882: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10886: LD_EXP 3
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 0
10896: PPUSH
10897: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10901: LD_EXP 4
10905: PPUSH
10906: LD_INT 5
10908: PPUSH
10909: LD_INT 0
10911: PPUSH
10912: CALL_OW 49
// ComCrawl ( Lisa ) ;
10916: LD_EXP 4
10920: PPUSH
10921: CALL_OW 137
// end ;
10925: LD_VAR 0 1
10929: RET
// export function PrepareLisSquad ; var i , un ; begin
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
// uc_side = 4 ;
10935: LD_ADDR_OWVAR 20
10939: PUSH
10940: LD_INT 4
10942: ST_TO_ADDR
// uc_nation = 1 ;
10943: LD_ADDR_OWVAR 21
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// hc_class := 2 ;
10951: LD_ADDR_OWVAR 28
10955: PUSH
10956: LD_INT 2
10958: ST_TO_ADDR
// hc_sex := sex_male ;
10959: LD_ADDR_OWVAR 27
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// hc_gallery :=  ;
10967: LD_ADDR_OWVAR 33
10971: PUSH
10972: LD_STRING 
10974: ST_TO_ADDR
// hc_name :=  ;
10975: LD_ADDR_OWVAR 26
10979: PUSH
10980: LD_STRING 
10982: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10983: LD_ADDR_OWVAR 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11006: LD_ADDR_OWVAR 31
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 0
11019: PUSH
11020: LD_INT 0
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// un := CreateHuman ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: CALL_OW 44
11038: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 6
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 49
// hc_sex := sex_female ;
11054: LD_ADDR_OWVAR 27
11058: PUSH
11059: LD_INT 2
11061: ST_TO_ADDR
// hc_gallery :=  ;
11062: LD_ADDR_OWVAR 33
11066: PUSH
11067: LD_STRING 
11069: ST_TO_ADDR
// hc_name :=  ;
11070: LD_ADDR_OWVAR 26
11074: PUSH
11075: LD_STRING 
11077: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11078: LD_ADDR_OWVAR 30
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: LD_INT 0
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11101: LD_ADDR_OWVAR 31
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: ST_TO_ADDR
// un := CreateHuman ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: CALL_OW 44
11133: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 6
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 49
// if not Bobby and not Cyrus then
11149: LD_EXP 2
11153: NOT
11154: PUSH
11155: LD_EXP 3
11159: NOT
11160: AND
11161: IFFALSE 11266
// begin hc_class := 1 ;
11163: LD_ADDR_OWVAR 28
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// hc_sex := sex_male ;
11171: LD_ADDR_OWVAR 27
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// hc_gallery :=  ;
11179: LD_ADDR_OWVAR 33
11183: PUSH
11184: LD_STRING 
11186: ST_TO_ADDR
// hc_name :=  ;
11187: LD_ADDR_OWVAR 26
11191: PUSH
11192: LD_STRING 
11194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11195: LD_ADDR_OWVAR 30
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11218: LD_ADDR_OWVAR 31
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// un := CreateHuman ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 31
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL_OW 49
// end ; InitHc ;
11266: CALL_OW 19
// end ;
11270: LD_VAR 0 1
11274: RET
// export function PrepareOtherAmericans ; begin
11275: LD_INT 0
11277: PPUSH
// uc_side = 4 ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_INT 4
11285: ST_TO_ADDR
// uc_nation = 1 ;
11286: LD_ADDR_OWVAR 21
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// hc_gallery =  ;
11294: LD_ADDR_OWVAR 33
11298: PUSH
11299: LD_STRING 
11301: ST_TO_ADDR
// hc_name = Tom Garvin ;
11302: LD_ADDR_OWVAR 26
11306: PUSH
11307: LD_STRING Tom Garvin
11309: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: CALL_OW 380
// Brian = CreateHuman ;
11331: LD_ADDR_EXP 6
11335: PUSH
11336: CALL_OW 44
11340: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11341: LD_EXP 6
11345: PPUSH
11346: LD_INT 10
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// hc_name = Jerry White ;
11356: LD_ADDR_OWVAR 26
11360: PUSH
11361: LD_STRING Jerry White
11363: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: CALL_OW 380
// Jerry = CreateHuman ;
11385: LD_ADDR_EXP 7
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11395: LD_EXP 7
11399: PPUSH
11400: LD_INT 10
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11410: LD_EXP 6
11414: PUSH
11415: LD_EXP 7
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 140
// end ;
11428: LD_VAR 0 1
11432: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11433: LD_INT 0
11435: PPUSH
11436: PPUSH
11437: PPUSH
// for i = 1 to 6 do
11438: LD_ADDR_VAR 0 2
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11546
// begin uc_side = 4 ;
11454: LD_ADDR_OWVAR 20
11458: PUSH
11459: LD_INT 4
11461: ST_TO_ADDR
// uc_nation = 1 ;
11462: LD_ADDR_OWVAR 21
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// hc_gallery =  ;
11470: LD_ADDR_OWVAR 33
11474: PUSH
11475: LD_STRING 
11477: ST_TO_ADDR
// hc_name =  ;
11478: LD_ADDR_OWVAR 26
11482: PUSH
11483: LD_STRING 
11485: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11486: LD_INT 0
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 380
// un = CreateHuman ;
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: CALL_OW 44
11516: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 16
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 49
// SetLives ( un , 1 ) ;
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 234
// end ;
11544: GO 11451
11546: POP
11547: POP
// DyingSold = CreateHuman ;
11548: LD_ADDR_EXP 34
11552: PUSH
11553: CALL_OW 44
11557: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11558: LD_EXP 34
11562: PPUSH
11563: LD_INT 16
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11573: LD_EXP 34
11577: PPUSH
11578: LD_INT 250
11580: PPUSH
11581: CALL_OW 234
// end ; end_of_file
11585: LD_VAR 0 1
11589: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 50
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: LD_INT 56
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: DIFF
11661: ST_TO_ADDR
// uc_side = 6 ;
11662: LD_ADDR_OWVAR 20
11666: PUSH
11667: LD_INT 6
11669: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11670: LD_ADDR_EXP 8
11674: PUSH
11675: LD_STRING Mikhail
11677: PPUSH
11678: CALL_OW 25
11682: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11683: LD_EXP 8
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11695: LD_EXP 8
11699: PPUSH
11700: LD_VAR 0 2
11704: PUSH
11705: LD_INT 1
11707: ARRAY
11708: PPUSH
11709: CALL_OW 250
11713: PPUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 251
11727: PPUSH
11728: LD_INT 5
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 50
// end ;
11738: LD_VAR 0 1
11742: RET
// export function PrepareRussianCommander ; begin
11743: LD_INT 0
11745: PPUSH
// uc_side = 3 ;
11746: LD_ADDR_OWVAR 20
11750: PUSH
11751: LD_INT 3
11753: ST_TO_ADDR
// uc_nation = 3 ;
11754: LD_ADDR_OWVAR 21
11758: PUSH
11759: LD_INT 3
11761: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11762: LD_ADDR_EXP 19
11766: PUSH
11767: LD_STRING Natasza
11769: PPUSH
11770: CALL_OW 25
11774: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11775: LD_EXP 19
11779: PPUSH
11780: LD_INT 24
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11790: LD_EXP 19
11794: PPUSH
11795: LD_INT 56
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11805: LD_ADDR_EXP 24
11809: PUSH
11810: LD_EXP 24
11814: PUSH
11815: LD_EXP 19
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: LD_VAR 0 1
11825: RET
// export function PrepareSouthBase ; var i , un ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// for i = 1 to 2 do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_INT 2
11843: PUSH
11844: FOR_TO
11845: IFFALSE 11954
// begin uc_side = 3 ;
11847: LD_ADDR_OWVAR 20
11851: PUSH
11852: LD_INT 3
11854: ST_TO_ADDR
// uc_nation = 3 ;
11855: LD_ADDR_OWVAR 21
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// hc_gallery =  ;
11863: LD_ADDR_OWVAR 33
11867: PUSH
11868: LD_STRING 
11870: ST_TO_ADDR
// hc_name =  ;
11871: LD_ADDR_OWVAR 26
11875: PUSH
11876: LD_STRING 
11878: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11879: LD_INT 1
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: LD_EXP 13
11889: PPUSH
11890: LD_EXP 14
11894: PPUSH
11895: CALL_OW 12
11899: PPUSH
11900: CALL_OW 380
// hc_importance = 0 ;
11904: LD_ADDR_OWVAR 32
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// un = CreateHuman ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 11
11929: PPUSH
11930: LD_INT 0
11932: PPUSH
11933: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 111
11944: PPUSH
11945: LD_INT 38
11947: PPUSH
11948: CALL_OW 118
// end ;
11952: GO 11844
11954: POP
11955: POP
// for i = 1 to Difficulty do
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: DOUBLE
11962: LD_INT 1
11964: DEC
11965: ST_TO_ADDR
11966: LD_OWVAR 67
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12055
// begin uc_side = 3 ;
11974: LD_ADDR_OWVAR 20
11978: PUSH
11979: LD_INT 3
11981: ST_TO_ADDR
// uc_nation = 3 ;
11982: LD_ADDR_OWVAR 21
11986: PUSH
11987: LD_INT 3
11989: ST_TO_ADDR
// hc_gallery =  ;
11990: LD_ADDR_OWVAR 33
11994: PUSH
11995: LD_STRING 
11997: ST_TO_ADDR
// hc_name =  ;
11998: LD_ADDR_OWVAR 26
12002: PUSH
12003: LD_STRING 
12005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12006: LD_INT 0
12008: PPUSH
12009: LD_INT 3
12011: PPUSH
12012: LD_EXP 13
12016: PPUSH
12017: LD_EXP 14
12021: PPUSH
12022: CALL_OW 12
12026: PPUSH
12027: CALL_OW 380
// un = CreateHuman ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 10
12048: PPUSH
12049: CALL_OW 52
// end ;
12053: GO 11971
12055: POP
12056: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12057: LD_INT 3
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 33
12065: PPUSH
12066: LD_EXP 13
12070: PPUSH
12071: LD_EXP 14
12075: PPUSH
12076: CALL_OW 12
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 1
12086: PUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 12
12097: PUSH
12098: LD_INT 1
12100: PPUSH
12101: LD_INT 2
12103: PPUSH
12104: CALL_OW 12
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_OWVAR 67
12118: ARRAY
12119: PPUSH
12120: CALL 8513 0 6
// for i in UnitsInside ( arm2 ) do
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_INT 33
12131: PPUSH
12132: CALL_OW 313
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12158
// southBaseDefenders = southBaseDefenders ^ i ;
12140: LD_ADDR_EXP 25
12144: PUSH
12145: LD_EXP 25
12149: PUSH
12150: LD_VAR 0 2
12154: ADD
12155: ST_TO_ADDR
12156: GO 12137
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// export function PrepareNorthBase ; var i , un ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 2
12185: PPUSH
12186: CALL_OW 12
12190: PUSH
12191: LD_INT 2
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: PUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 12
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: LD_OWVAR 67
12222: ARRAY
12223: PUSH
12224: FOR_TO
12225: IFFALSE 12311
// begin uc_side = 3 ;
12227: LD_ADDR_OWVAR 20
12231: PUSH
12232: LD_INT 3
12234: ST_TO_ADDR
// uc_nation = 3 ;
12235: LD_ADDR_OWVAR 21
12239: PUSH
12240: LD_INT 3
12242: ST_TO_ADDR
// hc_gallery =  ;
12243: LD_ADDR_OWVAR 33
12247: PUSH
12248: LD_STRING 
12250: ST_TO_ADDR
// hc_name =  ;
12251: LD_ADDR_OWVAR 26
12255: PUSH
12256: LD_STRING 
12258: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12259: LD_INT 0
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_EXP 13
12269: PPUSH
12270: LD_EXP 14
12274: PPUSH
12275: CALL_OW 12
12279: PPUSH
12280: CALL_OW 380
// un = CreateHuman ;
12284: LD_ADDR_VAR 0 3
12288: PUSH
12289: CALL_OW 44
12293: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 14
12301: PPUSH
12302: LD_INT 0
12304: PPUSH
12305: CALL_OW 49
// end ;
12309: GO 12224
12311: POP
12312: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12313: LD_INT 3
12315: PPUSH
12316: LD_INT 3
12318: PPUSH
12319: LD_INT 2
12321: PPUSH
12322: LD_EXP 13
12326: PPUSH
12327: LD_EXP 14
12331: PPUSH
12332: CALL_OW 12
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 2
12345: PPUSH
12346: CALL_OW 12
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_INT 3
12356: PPUSH
12357: CALL_OW 12
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_INT 3
12367: PPUSH
12368: CALL_OW 12
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_OWVAR 67
12382: ARRAY
12383: PPUSH
12384: CALL 8513 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12388: LD_INT 3
12390: PPUSH
12391: LD_INT 3
12393: PPUSH
12394: LD_INT 23
12396: PPUSH
12397: LD_EXP 13
12401: PPUSH
12402: LD_EXP 14
12406: PPUSH
12407: CALL_OW 12
12411: PPUSH
12412: LD_INT 4
12414: PPUSH
12415: LD_INT 0
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_OWVAR 67
12433: ARRAY
12434: PPUSH
12435: CALL 8513 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_EXP 13
12452: PPUSH
12453: LD_EXP 14
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_OWVAR 67
12484: ARRAY
12485: PPUSH
12486: CALL 8513 0 6
// for i in UnitsInside ( arm1 ) do
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_INT 2
12497: PPUSH
12498: CALL_OW 313
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12524
// northBaseDefenders = northBaseDefenders ^ i ;
12506: LD_ADDR_EXP 24
12510: PUSH
12511: LD_EXP 24
12515: PUSH
12516: LD_VAR 0 2
12520: ADD
12521: ST_TO_ADDR
12522: GO 12503
12524: POP
12525: POP
// end ;
12526: LD_VAR 0 1
12530: RET
// export function PrepareOtherRussians ; var i , un ; begin
12531: LD_INT 0
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to 2 do
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_INT 2
12548: PUSH
12549: FOR_TO
12550: IFFALSE 12651
// begin uc_side = 3 ;
12552: LD_ADDR_OWVAR 20
12556: PUSH
12557: LD_INT 3
12559: ST_TO_ADDR
// uc_nation = 3 ;
12560: LD_ADDR_OWVAR 21
12564: PUSH
12565: LD_INT 3
12567: ST_TO_ADDR
// hc_gallery =  ;
12568: LD_ADDR_OWVAR 33
12572: PUSH
12573: LD_STRING 
12575: ST_TO_ADDR
// hc_name =  ;
12576: LD_ADDR_OWVAR 26
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: LD_EXP 13
12594: PPUSH
12595: LD_EXP 14
12599: PPUSH
12600: CALL_OW 12
12604: PPUSH
12605: CALL_OW 380
// un = CreateHuman ;
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: CALL_OW 44
12618: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 9
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 80
12641: PPUSH
12642: LD_INT 73
12644: PPUSH
12645: CALL_OW 118
// end ;
12649: GO 12549
12651: POP
12652: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12716
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12690: LD_EXP 13
12694: PPUSH
12695: LD_EXP 14
12699: PPUSH
12700: CALL_OW 12
12704: PPUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: CALL 8623 0 2
12714: GO 12687
12716: POP
12717: POP
// end ;
12718: LD_VAR 0 1
12722: RET
// export function PrepareCargoBays ; begin
12723: LD_INT 0
12725: PPUSH
// uc_side = 3 ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_INT 3
12733: ST_TO_ADDR
// uc_nation = 3 ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 3
12741: ST_TO_ADDR
// vc_engine = 1 ;
12742: LD_ADDR_OWVAR 39
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// vc_control = 1 ;
12750: LD_ADDR_OWVAR 38
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// vc_weapon = 51 ;
12758: LD_ADDR_OWVAR 40
12762: PUSH
12763: LD_INT 51
12765: ST_TO_ADDR
// vc_chassis = 22 ;
12766: LD_ADDR_OWVAR 37
12770: PUSH
12771: LD_INT 22
12773: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12774: LD_ADDR_EXP 15
12778: PUSH
12779: CALL_OW 45
12783: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12784: LD_ADDR_EXP 16
12788: PUSH
12789: CALL_OW 45
12793: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12794: LD_EXP 15
12798: PPUSH
12799: LD_INT 13
12801: PPUSH
12802: LD_INT 0
12804: PPUSH
12805: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12809: LD_EXP 16
12813: PPUSH
12814: LD_INT 13
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12824: LD_EXP 15
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: LD_INT 70
12834: PUSH
12835: LD_INT 50
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_OWVAR 67
12850: ARRAY
12851: PPUSH
12852: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12856: LD_EXP 16
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: LD_INT 70
12866: PUSH
12867: LD_INT 50
12869: PUSH
12870: LD_INT 30
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_OWVAR 67
12882: ARRAY
12883: PPUSH
12884: CALL_OW 291
// hc_gallery =  ;
12888: LD_ADDR_OWVAR 33
12892: PUSH
12893: LD_STRING 
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_INT 2
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: CALL_OW 380
// driver1 = CreateHuman ;
12925: LD_ADDR_EXP 17
12929: PUSH
12930: CALL_OW 44
12934: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12935: LD_EXP 17
12939: PPUSH
12940: LD_EXP 15
12944: PPUSH
12945: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12949: LD_ADDR_OWVAR 26
12953: PUSH
12954: LD_STRING Nikolai Andreyev
12956: ST_TO_ADDR
// driver2 = CreateHuman ;
12957: LD_ADDR_EXP 18
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12967: LD_EXP 18
12971: PPUSH
12972: LD_EXP 16
12976: PPUSH
12977: CALL_OW 52
// end ;
12981: LD_VAR 0 1
12985: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
// uc_side = 3 ;
12995: LD_ADDR_OWVAR 20
12999: PUSH
13000: LD_INT 3
13002: ST_TO_ADDR
// uc_nation = 3 ;
13003: LD_ADDR_OWVAR 21
13007: PUSH
13008: LD_INT 3
13010: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13011: LD_ADDR_VAR 0 4
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 12
13036: PLUS
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13216
// begin vc_engine = 1 ;
13041: LD_ADDR_OWVAR 39
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// vc_control = 1 ;
13049: LD_ADDR_OWVAR 38
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// vc_weapon = 42 ;
13057: LD_ADDR_OWVAR 40
13061: PUSH
13062: LD_INT 42
13064: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13065: LD_ADDR_OWVAR 37
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_OWVAR 67
13088: ARRAY
13089: ST_TO_ADDR
// veh = CreateVehicle ;
13090: LD_ADDR_VAR 0 5
13094: PUSH
13095: CALL_OW 45
13099: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13100: LD_VAR 0 5
13104: PPUSH
13105: LD_VAR 0 2
13109: PPUSH
13110: LD_INT 0
13112: PPUSH
13113: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13117: LD_ADDR_EXP 26
13121: PUSH
13122: LD_EXP 26
13126: PUSH
13127: LD_VAR 0 5
13131: ADD
13132: ST_TO_ADDR
// hc_gallery =  ;
13133: LD_ADDR_OWVAR 33
13137: PUSH
13138: LD_STRING 
13140: ST_TO_ADDR
// hc_name =  ;
13141: LD_ADDR_OWVAR 26
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13149: LD_INT 0
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_EXP 13
13159: PPUSH
13160: LD_EXP 14
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: CALL_OW 380
// un = CreateHuman ;
13174: LD_ADDR_VAR 0 6
13178: PUSH
13179: CALL_OW 44
13183: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13184: LD_VAR 0 6
13188: PPUSH
13189: LD_VAR 0 5
13193: PPUSH
13194: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13198: LD_ADDR_EXP 26
13202: PUSH
13203: LD_EXP 26
13207: PUSH
13208: LD_VAR 0 6
13212: ADD
13213: ST_TO_ADDR
// end ;
13214: GO 13038
13216: POP
13217: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13218: LD_INT 0
13220: PPUSH
13221: LD_INT 2
13223: PPUSH
13224: LD_EXP 13
13228: PPUSH
13229: LD_EXP 14
13233: PPUSH
13234: CALL_OW 12
13238: PPUSH
13239: CALL_OW 380
// un = CreateHuman ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13253: LD_ADDR_VAR 0 4
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_VAR 0 1
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 2
13273: MUL
13274: PLUS
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13365
// begin hc_gallery =  ;
13279: LD_ADDR_OWVAR 33
13283: PUSH
13284: LD_STRING 
13286: ST_TO_ADDR
// hc_name =  ;
13287: LD_ADDR_OWVAR 26
13291: PUSH
13292: LD_STRING 
13294: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: LD_EXP 13
13305: PPUSH
13306: LD_EXP 14
13310: PPUSH
13311: CALL_OW 12
13315: PPUSH
13316: CALL_OW 380
// un = CreateHuman ;
13320: LD_ADDR_VAR 0 6
13324: PUSH
13325: CALL_OW 44
13329: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13330: LD_VAR 0 6
13334: PPUSH
13335: LD_VAR 0 2
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13347: LD_ADDR_EXP 26
13351: PUSH
13352: LD_EXP 26
13356: PUSH
13357: LD_VAR 0 6
13361: ADD
13362: ST_TO_ADDR
// end ;
13363: GO 13276
13365: POP
13366: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13367: LD_ADDR_VAR 0 7
13371: PUSH
13372: LD_INT 26
13374: PPUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13415: LD_VAR 0 7
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: LD_STRING D9-Rus3-1
13426: PPUSH
13427: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13431: LD_VAR 0 7
13435: PUSH
13436: LD_INT 2
13438: ARRAY
13439: PPUSH
13440: LD_STRING D9-Russ-1
13442: PPUSH
13443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13447: LD_INT 35
13449: PPUSH
13450: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 26
13461: PPUSH
13462: LD_INT 22
13464: PUSH
13465: LD_INT 3
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: PPUSH
13475: CALL_OW 70
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13653
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PPUSH
13503: LD_VAR 0 4
13507: PPUSH
13508: CALL_OW 74
13512: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13513: LD_ADDR_VAR 0 9
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 59
13533: PUSH
13534: EMPTY
13535: LIST
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 74
13584: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13585: LD_VAR 0 4
13589: PPUSH
13590: LD_VAR 0 8
13594: PPUSH
13595: CALL_OW 296
13599: PUSH
13600: LD_INT 8
13602: PLUS
13603: PUSH
13604: LD_VAR 0 4
13608: PPUSH
13609: LD_VAR 0 9
13613: PPUSH
13614: CALL_OW 296
13618: LESS
13619: IFFALSE 13637
// begin ComAttackUnit ( i , target1 ) ;
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 8
13630: PPUSH
13631: CALL_OW 115
// end else
13635: GO 13651
// begin ComAttackUnit ( i , target2 ) ;
13637: LD_VAR 0 4
13641: PPUSH
13642: LD_VAR 0 9
13646: PPUSH
13647: CALL_OW 115
// end ; end ;
13651: GO 13480
13653: POP
13654: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13655: LD_INT 26
13657: PPUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: EMPTY
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 70
13711: PUSH
13712: LD_INT 0
13714: EQUAL
13715: IFFALSE 13447
// end ; end_of_file
13717: LD_VAR 0 3
13721: RET
// every 0 0$1 do
13722: GO 13724
13724: DISABLE
// begin enable ;
13725: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13726: LD_INT 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 22
13734: PPUSH
13735: CALL 8759 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13739: LD_INT 3
13741: PPUSH
13742: LD_INT 20
13744: PPUSH
13745: LD_INT 22
13747: PPUSH
13748: LD_INT 23
13750: PPUSH
13751: CALL 9005 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13755: LD_INT 3
13757: PPUSH
13758: LD_INT 21
13760: PPUSH
13761: LD_INT 23
13763: PPUSH
13764: CALL 9282 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13768: LD_INT 22
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: LD_EXP 24
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: LD_INT 3
13784: PPUSH
13785: CALL 9754 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13789: LD_INT 23
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_EXP 25
13799: PPUSH
13800: LD_INT 33
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL 9754 0 5
// end ; end_of_file
13810: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 266
13820: PUSH
13821: LD_INT 0
13823: EQUAL
13824: IFFALSE 13833
// YouLost ( DepotDestroyed ) ;
13826: LD_STRING DepotDestroyed
13828: PPUSH
13829: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 1
13845: EQUAL
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 247
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: AND
13861: IFFALSE 13877
// deadsCounter = deadsCounter + 1 ;
13863: LD_ADDR_EXP 31
13867: PUSH
13868: LD_EXP 31
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: ST_TO_ADDR
// end ;
13877: PPOPN 1
13879: END
// on Command ( comandid ) do var i , j , tmp ;
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_INT 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14045
// begin if GetTaskList ( i ) > 0 then
13922: LD_VAR 0 2
13926: PPUSH
13927: CALL_OW 437
13931: PUSH
13932: LD_INT 0
13934: GREATER
13935: IFFALSE 14043
// begin for j = 1 to GetTaskList ( i ) do
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: DOUBLE
13943: LD_INT 1
13945: DEC
13946: ST_TO_ADDR
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 437
13956: PUSH
13957: FOR_TO
13958: IFFALSE 14041
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13960: LD_ADDR_VAR 0 4
13964: PUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 437
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PUSH
13981: LD_INT 4
13983: ARRAY
13984: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13985: LD_VAR 0 4
13989: PPUSH
13990: CALL_OW 255
13994: PUSH
13995: LD_INT 3
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 4
14003: PPUSH
14004: CALL_OW 247
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: PUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 264
14023: PUSH
14024: LD_INT 51
14026: EQUAL
14027: AND
14028: IFFALSE 14039
// ComStop ( i ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 141
// end ;
14039: GO 13957
14041: POP
14042: POP
// end ; end ;
14043: GO 13919
14045: POP
14046: POP
// end ;
14047: PPOPN 4
14049: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14050: LD_VAR 0 2
14054: PUSH
14055: LD_EXP 8
14059: EQUAL
14060: PUSH
14061: LD_EXP 21
14065: PUSH
14066: LD_INT 4
14068: NONEQUAL
14069: AND
14070: IFFALSE 14222
// begin if IsOk ( Mikhail ) then
14072: LD_EXP 8
14076: PPUSH
14077: CALL_OW 302
14081: IFFALSE 14089
// AskMikhail else
14083: CALL 7044 0 0
14087: GO 14222
// if IsOk ( lab1 ) then
14089: LD_INT 23
14091: PPUSH
14092: CALL_OW 302
14096: IFFALSE 14185
// begin InGameOn ;
14098: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14102: LD_EXP 8
14106: PPUSH
14107: LD_INT 6
14109: PPUSH
14110: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14114: LD_INT 23
14116: PPUSH
14117: LD_INT 6
14119: PPUSH
14120: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14124: LD_EXP 8
14128: PPUSH
14129: LD_INT 23
14131: PPUSH
14132: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14143: LD_EXP 8
14147: PPUSH
14148: CALL_OW 310
14152: PUSH
14153: LD_INT 23
14155: EQUAL
14156: PUSH
14157: LD_EXP 8
14161: PPUSH
14162: CALL_OW 301
14166: OR
14167: IFFALSE 14136
// SetSide ( lab1 , 1 ) ;
14169: LD_INT 23
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 235
// InGameOff ;
14179: CALL_OW 9
// end else
14183: GO 14222
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14185: LD_INT 3
14187: PPUSH
14188: LD_INT 6
14190: PPUSH
14191: LD_INT 2
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// ComHold ( Mikhail ) ;
14213: LD_EXP 8
14217: PPUSH
14218: CALL_OW 140
// end ; end ; end ;
14222: PPOPN 2
14224: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14225: LD_EXP 8
14229: PPUSH
14230: CALL_OW 257
14234: PUSH
14235: LD_INT 3
14237: NONEQUAL
14238: IFFALSE 14256
14240: GO 14242
14242: DISABLE
// begin enable ;
14243: ENABLE
// SetClass ( Mikhail , 3 ) ;
14244: LD_EXP 8
14248: PPUSH
14249: LD_INT 3
14251: PPUSH
14252: CALL_OW 336
// end ; end_of_file
14256: END
// every 0 0$1 trigger IsDead ( JMM ) do
14257: LD_EXP 1
14261: PPUSH
14262: CALL_OW 301
14266: IFFALSE 14278
14268: GO 14270
14270: DISABLE
// YouLost ( JMM ) ;
14271: LD_STRING JMM
14273: PPUSH
14274: CALL_OW 104
14278: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14279: LD_INT 22
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PUSH
14319: LD_INT 0
14321: EQUAL
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: AND
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: AND
14380: PUSH
14381: LD_INT 10
14383: PPUSH
14384: CALL_OW 255
14388: PUSH
14389: LD_INT 3
14391: EQUAL
14392: AND
14393: IFFALSE 14405
14395: GO 14397
14397: DISABLE
// YouLost ( Engineer ) ;
14398: LD_STRING Engineer
14400: PPUSH
14401: CALL_OW 104
14405: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 255
14413: PUSH
14414: LD_INT 3
14416: EQUAL
14417: PUSH
14418: LD_EXP 27
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: IFFALSE 14439
14429: GO 14431
14431: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14432: LD_STRING DepotCaptured
14434: PPUSH
14435: CALL_OW 104
14439: END
// export function PrepareTigers ; var i , un ; begin
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// for i = 1 to Difficulty do
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_OWVAR 67
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14596
// begin hc_sex = sex_male ;
14463: LD_ADDR_OWVAR 27
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// uc_side = 0 ;
14471: LD_ADDR_OWVAR 20
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// uc_nation = nation_nature ;
14479: LD_ADDR_OWVAR 21
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// hc_class = class_tiger ;
14487: LD_ADDR_OWVAR 28
14491: PUSH
14492: LD_INT 14
14494: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14495: LD_ADDR_OWVAR 31
14499: PUSH
14500: LD_EXP 14
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: LD_INT 0
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14520: LD_ADDR_OWVAR 35
14524: PUSH
14525: LD_INT 30
14527: PPUSH
14528: LD_INT 40
14530: PPUSH
14531: CALL_OW 12
14535: PUSH
14536: LD_INT 40
14538: PPUSH
14539: LD_INT 50
14541: PPUSH
14542: CALL_OW 12
14546: PUSH
14547: LD_INT 50
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: ST_TO_ADDR
// un = CreateHuman ;
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: CALL_OW 44
14578: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_INT 27
14586: PPUSH
14587: LD_INT 0
14589: PPUSH
14590: CALL_OW 49
// end ;
14594: GO 14460
14596: POP
14597: POP
// end ; end_of_file
14598: LD_VAR 0 1
14602: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 255
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: PUSH
14615: LD_INT 10
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 20
14632: PUSH
14633: LD_INT 1
14635: EQUAL
14636: AND
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 51
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: LD_INT 58
14673: PUSH
14674: EMPTY
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: PUSH
14692: LD_INT 0
14694: EQUAL
14695: AND
14696: IFFALSE 14787
14698: GO 14700
14700: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14701: LD_INT 9450
14703: PUSH
14704: LD_INT 8400
14706: PUSH
14707: LD_INT 6300
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_OWVAR 67
14719: ARRAY
14720: PPUSH
14721: CALL_OW 67
// if cargoEscape = 1 then
14725: LD_EXP 20
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: IFFALSE 14787
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14735: LD_EXP 9
14739: PPUSH
14740: LD_STRING D6-Pow-1
14742: PPUSH
14743: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14747: LD_EXP 1
14751: PPUSH
14752: LD_STRING D6-JMM-1
14754: PPUSH
14755: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14759: LD_EXP 9
14763: PPUSH
14764: LD_STRING D6-Pow-2
14766: PPUSH
14767: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14771: LD_EXP 1
14775: PPUSH
14776: LD_STRING D6-JMM-2
14778: PPUSH
14779: CALL_OW 88
// FinishMission ;
14783: CALL 14995 0 0
// end ; end ;
14787: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 255
14795: PUSH
14796: LD_INT 1
14798: EQUAL
14799: PUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 1
14810: EQUAL
14811: AND
14812: PUSH
14813: LD_EXP 20
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: AND
14822: IFFALSE 14889
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14830: LD_INT 11550
14832: PUSH
14833: LD_INT 10500
14835: PUSH
14836: LD_INT 9450
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: LD_OWVAR 67
14848: ARRAY
14849: PPUSH
14850: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: PUSH
14868: LD_OWVAR 67
14872: ARRAY
14873: PPUSH
14874: LD_INT 13
14876: PPUSH
14877: CALL 12986 0 2
// lastBattle = 1 ;
14881: LD_ADDR_EXP 27
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// end ;
14889: PPOPN 1
14891: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14892: LD_EXP 27
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: PUSH
14901: LD_INT 26
14903: PPUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 70
14932: PUSH
14933: LD_INT 0
14935: EQUAL
14936: AND
14937: IFFALSE 14994
14939: GO 14941
14941: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14942: LD_EXP 9
14946: PPUSH
14947: LD_STRING D6-Pow-1
14949: PPUSH
14950: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14954: LD_EXP 1
14958: PPUSH
14959: LD_STRING D6-JMM-1
14961: PPUSH
14962: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14966: LD_EXP 9
14970: PPUSH
14971: LD_STRING D6-Pow-2
14973: PPUSH
14974: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14978: LD_EXP 1
14982: PPUSH
14983: LD_STRING D6-JMM-2
14985: PPUSH
14986: CALL_OW 88
// FinishMission ;
14990: CALL 14995 0 0
// end ;
14994: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// if tick <= 18 18$00 then
15002: LD_OWVAR 1
15006: PUSH
15007: LD_INT 37800
15009: LESSEQUAL
15010: IFFALSE 15019
// SetAchievement ( ACH_ASPEED_2 ) ;
15012: LD_STRING ACH_ASPEED_2
15014: PPUSH
15015: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 24
15046: PUSH
15047: LD_INT 251
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if tmp then
15064: LD_VAR 0 2
15068: IFFALSE 15082
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_STRING 02_tanks_1
15077: PPUSH
15078: CALL 10459 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15082: LD_EXP 21
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: PUSH
15091: LD_EXP 8
15095: PPUSH
15096: CALL_OW 300
15100: AND
15101: IFFALSE 15115
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15103: LD_EXP 21
15107: PPUSH
15108: LD_STRING 02_mikhailStatus_1
15110: PPUSH
15111: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 274
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 275
15130: PPUSH
15131: LD_STRING 02_resources_4
15133: PPUSH
15134: CALL_OW 39
// m1 := false ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// m2 := false ;
15146: LD_ADDR_VAR 0 4
15150: PUSH
15151: LD_INT 0
15153: ST_TO_ADDR
// m3 := false ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 274
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 275
15177: PUSH
15178: LD_INT 200
15180: GREATEREQUAL
15181: IFFALSE 15203
// begin AddMedal ( Cans , 1 ) ;
15183: LD_STRING Cans
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 101
// m1 := true ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// end else
15201: GO 15214
// begin AddMedal ( Cans , - 1 ) ;
15203: LD_STRING Cans
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// end ; if deadsCounter < 2 then
15214: LD_EXP 31
15218: PUSH
15219: LD_INT 2
15221: LESS
15222: IFFALSE 15244
// begin AddMedal ( Deaths , 1 ) ;
15224: LD_STRING Deaths
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 101
// m2 := true ;
15234: LD_ADDR_VAR 0 4
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// end else
15242: GO 15255
// begin AddMedal ( Deaths , - 1 ) ;
15244: LD_STRING Deaths
15246: PPUSH
15247: LD_INT 1
15249: NEG
15250: PPUSH
15251: CALL_OW 101
// end ; if mikhailStatus = 0 then
15255: LD_EXP 21
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15276
// AddMedal ( Prisoner , - 1 ) ;
15265: LD_STRING Prisoner
15267: PPUSH
15268: LD_INT 1
15270: NEG
15271: PPUSH
15272: CALL_OW 101
// if mikhailStatus = 1 then
15276: LD_EXP 21
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: IFFALSE 15304
// begin AddMedal ( Prisoner , 1 ) ;
15286: LD_STRING Prisoner
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 101
// m3 := true ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15304: LD_EXP 21
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: IFFALSE 15332
// begin AddMedal ( Prisoner , 2 ) ;
15314: LD_STRING Prisoner
15316: PPUSH
15317: LD_INT 2
15319: PPUSH
15320: CALL_OW 101
// m3 := true ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15332: LD_EXP 21
15336: PUSH
15337: LD_INT 3
15339: EQUAL
15340: IFFALSE 15353
// AddMedal ( Prisoner , - 2 ) ;
15342: LD_STRING Prisoner
15344: PPUSH
15345: LD_INT 2
15347: NEG
15348: PPUSH
15349: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15353: LD_OWVAR 67
15357: PUSH
15358: LD_INT 3
15360: EQUAL
15361: PUSH
15362: LD_VAR 0 3
15366: AND
15367: PUSH
15368: LD_VAR 0 4
15372: AND
15373: PUSH
15374: LD_VAR 0 5
15378: AND
15379: IFFALSE 15391
// SetAchievementEX ( ACH_AMER , 2 ) ;
15381: LD_STRING ACH_AMER
15383: PPUSH
15384: LD_INT 2
15386: PPUSH
15387: CALL_OW 564
// GiveMedals ( MAIN ) ;
15391: LD_STRING MAIN
15393: PPUSH
15394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15398: LD_INT 22
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 23
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: PPUSH
15438: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15442: LD_EXP 1
15446: PPUSH
15447: LD_EXP 33
15451: PUSH
15452: LD_STRING JMM
15454: STR
15455: PPUSH
15456: CALL_OW 38
// if IsOK ( Bobby ) then
15460: LD_EXP 2
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15489
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15471: LD_EXP 2
15475: PPUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_STRING Bobby
15483: STR
15484: PPUSH
15485: CALL_OW 38
// if IsOK ( Cyrus ) then
15489: LD_EXP 3
15493: PPUSH
15494: CALL_OW 302
15498: IFFALSE 15518
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15500: LD_EXP 3
15504: PPUSH
15505: LD_EXP 33
15509: PUSH
15510: LD_STRING Cyrus
15512: STR
15513: PPUSH
15514: CALL_OW 38
// if IsOK ( Lisa ) then
15518: LD_EXP 4
15522: PPUSH
15523: CALL_OW 302
15527: IFFALSE 15547
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15529: LD_EXP 4
15533: PPUSH
15534: LD_EXP 33
15538: PUSH
15539: LD_STRING Lisa
15541: STR
15542: PPUSH
15543: CALL_OW 38
// if IsOK ( Khatam ) then
15547: LD_EXP 5
15551: PPUSH
15552: CALL_OW 302
15556: IFFALSE 15576
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15558: LD_EXP 5
15562: PPUSH
15563: LD_EXP 33
15567: PUSH
15568: LD_STRING Khatam
15570: STR
15571: PPUSH
15572: CALL_OW 38
// if IsOK ( Brian ) then
15576: LD_EXP 6
15580: PPUSH
15581: CALL_OW 302
15585: IFFALSE 15605
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15587: LD_EXP 6
15591: PPUSH
15592: LD_EXP 33
15596: PUSH
15597: LD_STRING Brian
15599: STR
15600: PPUSH
15601: CALL_OW 38
// if IsOk ( Jerry ) then
15605: LD_EXP 7
15609: PPUSH
15610: CALL_OW 302
15614: IFFALSE 15634
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15616: LD_EXP 7
15620: PPUSH
15621: LD_EXP 33
15625: PUSH
15626: LD_STRING Jerry
15628: STR
15629: PPUSH
15630: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15634: LD_EXP 21
15638: PUSH
15639: LD_INT 1
15641: EQUAL
15642: PUSH
15643: LD_EXP 8
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: LD_INT 1
15655: EQUAL
15656: AND
15657: PUSH
15658: LD_EXP 8
15662: PPUSH
15663: CALL_OW 302
15667: AND
15668: IFFALSE 15688
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15670: LD_EXP 8
15674: PPUSH
15675: LD_EXP 33
15679: PUSH
15680: LD_STRING Mikhail
15682: STR
15683: PPUSH
15684: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15688: LD_INT 50
15690: PUSH
15691: EMPTY
15692: LIST
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 69
15723: PUSH
15724: LD_EXP 1
15728: PUSH
15729: LD_EXP 2
15733: PUSH
15734: LD_EXP 3
15738: PUSH
15739: LD_EXP 4
15743: PUSH
15744: LD_EXP 5
15748: PUSH
15749: LD_EXP 6
15753: PUSH
15754: LD_EXP 7
15758: PUSH
15759: LD_EXP 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: DIFF
15774: PPUSH
15775: LD_STRING 02_other_survivors
15777: PPUSH
15778: CALL_OW 38
// YouWin ;
15782: CALL_OW 103
// end ; end_of_file
15786: LD_VAR 0 1
15790: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
15791: GO 15793
15793: DISABLE
// begin ru_radar := 98 ;
15794: LD_ADDR_EXP 35
15798: PUSH
15799: LD_INT 98
15801: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15802: LD_ADDR_EXP 36
15806: PUSH
15807: LD_INT 89
15809: ST_TO_ADDR
// us_hack := 99 ;
15810: LD_ADDR_EXP 37
15814: PUSH
15815: LD_INT 99
15817: ST_TO_ADDR
// us_artillery := 97 ;
15818: LD_ADDR_EXP 38
15822: PUSH
15823: LD_INT 97
15825: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15826: LD_ADDR_EXP 39
15830: PUSH
15831: LD_INT 91
15833: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15834: LD_ADDR_EXP 40
15838: PUSH
15839: LD_INT 92
15841: ST_TO_ADDR
// tech_Artillery := 80 ;
15842: LD_ADDR_EXP 41
15846: PUSH
15847: LD_INT 80
15849: ST_TO_ADDR
// tech_RadMat := 81 ;
15850: LD_ADDR_EXP 42
15854: PUSH
15855: LD_INT 81
15857: ST_TO_ADDR
// tech_BasicTools := 82 ;
15858: LD_ADDR_EXP 43
15862: PUSH
15863: LD_INT 82
15865: ST_TO_ADDR
// tech_Cargo := 83 ;
15866: LD_ADDR_EXP 44
15870: PUSH
15871: LD_INT 83
15873: ST_TO_ADDR
// tech_Track := 84 ;
15874: LD_ADDR_EXP 45
15878: PUSH
15879: LD_INT 84
15881: ST_TO_ADDR
// tech_Crane := 85 ;
15882: LD_ADDR_EXP 46
15886: PUSH
15887: LD_INT 85
15889: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15890: LD_ADDR_EXP 47
15894: PUSH
15895: LD_INT 86
15897: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15898: LD_ADDR_EXP 48
15902: PUSH
15903: LD_INT 87
15905: ST_TO_ADDR
// end ; end_of_file end_of_file
15906: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15907: GO 15909
15909: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15910: LD_STRING initStreamRollete();
15912: PPUSH
15913: CALL_OW 559
// InitStreamMode ;
15917: CALL 15926 0 0
// DefineStreamItems ( ) ;
15921: CALL 16366 0 0
// end ;
15925: END
// function InitStreamMode ; begin
15926: LD_INT 0
15928: PPUSH
// streamModeActive := false ;
15929: LD_ADDR_EXP 49
15933: PUSH
15934: LD_INT 0
15936: ST_TO_ADDR
// normalCounter := 36 ;
15937: LD_ADDR_EXP 50
15941: PUSH
15942: LD_INT 36
15944: ST_TO_ADDR
// hardcoreCounter := 16 ;
15945: LD_ADDR_EXP 51
15949: PUSH
15950: LD_INT 16
15952: ST_TO_ADDR
// sRocket := false ;
15953: LD_ADDR_EXP 54
15957: PUSH
15958: LD_INT 0
15960: ST_TO_ADDR
// sSpeed := false ;
15961: LD_ADDR_EXP 53
15965: PUSH
15966: LD_INT 0
15968: ST_TO_ADDR
// sEngine := false ;
15969: LD_ADDR_EXP 55
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// sSpec := false ;
15977: LD_ADDR_EXP 52
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// sLevel := false ;
15985: LD_ADDR_EXP 56
15989: PUSH
15990: LD_INT 0
15992: ST_TO_ADDR
// sArmoury := false ;
15993: LD_ADDR_EXP 57
15997: PUSH
15998: LD_INT 0
16000: ST_TO_ADDR
// sRadar := false ;
16001: LD_ADDR_EXP 58
16005: PUSH
16006: LD_INT 0
16008: ST_TO_ADDR
// sBunker := false ;
16009: LD_ADDR_EXP 59
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// sHack := false ;
16017: LD_ADDR_EXP 60
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// sFire := false ;
16025: LD_ADDR_EXP 61
16029: PUSH
16030: LD_INT 0
16032: ST_TO_ADDR
// sRefresh := false ;
16033: LD_ADDR_EXP 62
16037: PUSH
16038: LD_INT 0
16040: ST_TO_ADDR
// sExp := false ;
16041: LD_ADDR_EXP 63
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// sDepot := false ;
16049: LD_ADDR_EXP 64
16053: PUSH
16054: LD_INT 0
16056: ST_TO_ADDR
// sFlag := false ;
16057: LD_ADDR_EXP 65
16061: PUSH
16062: LD_INT 0
16064: ST_TO_ADDR
// sKamikadze := false ;
16065: LD_ADDR_EXP 73
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// sTroll := false ;
16073: LD_ADDR_EXP 74
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// sSlow := false ;
16081: LD_ADDR_EXP 75
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// sLack := false ;
16089: LD_ADDR_EXP 76
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// sTank := false ;
16097: LD_ADDR_EXP 78
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// sRemote := false ;
16105: LD_ADDR_EXP 79
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// sPowell := false ;
16113: LD_ADDR_EXP 80
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// sTeleport := false ;
16121: LD_ADDR_EXP 83
16125: PUSH
16126: LD_INT 0
16128: ST_TO_ADDR
// sOilTower := false ;
16129: LD_ADDR_EXP 85
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// sShovel := false ;
16137: LD_ADDR_EXP 86
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// sSheik := false ;
16145: LD_ADDR_EXP 87
16149: PUSH
16150: LD_INT 0
16152: ST_TO_ADDR
// sEarthquake := false ;
16153: LD_ADDR_EXP 89
16157: PUSH
16158: LD_INT 0
16160: ST_TO_ADDR
// sAI := false ;
16161: LD_ADDR_EXP 90
16165: PUSH
16166: LD_INT 0
16168: ST_TO_ADDR
// sCargo := false ;
16169: LD_ADDR_EXP 93
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// sDLaser := false ;
16177: LD_ADDR_EXP 94
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// sExchange := false ;
16185: LD_ADDR_EXP 95
16189: PUSH
16190: LD_INT 0
16192: ST_TO_ADDR
// sFac := false ;
16193: LD_ADDR_EXP 96
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// sPower := false ;
16201: LD_ADDR_EXP 97
16205: PUSH
16206: LD_INT 0
16208: ST_TO_ADDR
// sRandom := false ;
16209: LD_ADDR_EXP 98
16213: PUSH
16214: LD_INT 0
16216: ST_TO_ADDR
// sShield := false ;
16217: LD_ADDR_EXP 99
16221: PUSH
16222: LD_INT 0
16224: ST_TO_ADDR
// sTime := false ;
16225: LD_ADDR_EXP 100
16229: PUSH
16230: LD_INT 0
16232: ST_TO_ADDR
// sTools := false ;
16233: LD_ADDR_EXP 101
16237: PUSH
16238: LD_INT 0
16240: ST_TO_ADDR
// sSold := false ;
16241: LD_ADDR_EXP 66
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// sDiff := false ;
16249: LD_ADDR_EXP 67
16253: PUSH
16254: LD_INT 0
16256: ST_TO_ADDR
// sFog := false ;
16257: LD_ADDR_EXP 70
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
// sReset := false ;
16265: LD_ADDR_EXP 71
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// sSun := false ;
16273: LD_ADDR_EXP 72
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// sTiger := false ;
16281: LD_ADDR_EXP 68
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// sBomb := false ;
16289: LD_ADDR_EXP 69
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// sWound := false ;
16297: LD_ADDR_EXP 77
16301: PUSH
16302: LD_INT 0
16304: ST_TO_ADDR
// sBetray := false ;
16305: LD_ADDR_EXP 81
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// sContamin := false ;
16313: LD_ADDR_EXP 82
16317: PUSH
16318: LD_INT 0
16320: ST_TO_ADDR
// sOil := false ;
16321: LD_ADDR_EXP 84
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// sStu := false ;
16329: LD_ADDR_EXP 88
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// sBazooka := false ;
16337: LD_ADDR_EXP 91
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// sMortar := false ;
16345: LD_ADDR_EXP 92
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// sRanger := false ;
16353: LD_ADDR_EXP 102
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// end ;
16361: LD_VAR 0 1
16365: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16366: LD_INT 0
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
// result := [ ] ;
16373: LD_ADDR_VAR 0 1
16377: PUSH
16378: EMPTY
16379: ST_TO_ADDR
// if campaign_id = 1 then
16380: LD_OWVAR 69
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: IFFALSE 19326
// begin case mission_number of 1 :
16390: LD_OWVAR 70
16394: PUSH
16395: LD_INT 1
16397: DOUBLE
16398: EQUAL
16399: IFTRUE 16403
16401: GO 16467
16403: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16404: LD_ADDR_VAR 0 1
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: LD_INT 4
16414: PUSH
16415: LD_INT 11
16417: PUSH
16418: LD_INT 12
16420: PUSH
16421: LD_INT 15
16423: PUSH
16424: LD_INT 16
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 23
16432: PUSH
16433: LD_INT 26
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 101
16449: PUSH
16450: LD_INT 102
16452: PUSH
16453: LD_INT 106
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: ST_TO_ADDR
16465: GO 19324
16467: LD_INT 2
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16547
16475: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: LD_INT 2
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 16
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: LD_INT 23
16504: PUSH
16505: LD_INT 26
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 101
16521: PUSH
16522: LD_INT 102
16524: PUSH
16525: LD_INT 105
16527: PUSH
16528: LD_INT 106
16530: PUSH
16531: LD_INT 108
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: ST_TO_ADDR
16545: GO 19324
16547: LD_INT 3
16549: DOUBLE
16550: EQUAL
16551: IFTRUE 16555
16553: GO 16631
16555: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16556: LD_ADDR_VAR 0 1
16560: PUSH
16561: LD_INT 2
16563: PUSH
16564: LD_INT 4
16566: PUSH
16567: LD_INT 5
16569: PUSH
16570: LD_INT 11
16572: PUSH
16573: LD_INT 12
16575: PUSH
16576: LD_INT 15
16578: PUSH
16579: LD_INT 16
16581: PUSH
16582: LD_INT 22
16584: PUSH
16585: LD_INT 26
16587: PUSH
16588: LD_INT 36
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 101
16605: PUSH
16606: LD_INT 102
16608: PUSH
16609: LD_INT 105
16611: PUSH
16612: LD_INT 106
16614: PUSH
16615: LD_INT 108
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: ST_TO_ADDR
16629: GO 19324
16631: LD_INT 4
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 16723
16639: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16640: LD_ADDR_VAR 0 1
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 4
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: LD_INT 8
16656: PUSH
16657: LD_INT 11
16659: PUSH
16660: LD_INT 12
16662: PUSH
16663: LD_INT 15
16665: PUSH
16666: LD_INT 16
16668: PUSH
16669: LD_INT 22
16671: PUSH
16672: LD_INT 23
16674: PUSH
16675: LD_INT 26
16677: PUSH
16678: LD_INT 36
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 101
16697: PUSH
16698: LD_INT 102
16700: PUSH
16701: LD_INT 105
16703: PUSH
16704: LD_INT 106
16706: PUSH
16707: LD_INT 108
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: ST_TO_ADDR
16721: GO 19324
16723: LD_INT 5
16725: DOUBLE
16726: EQUAL
16727: IFTRUE 16731
16729: GO 16831
16731: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16732: LD_ADDR_VAR 0 1
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 4
16742: PUSH
16743: LD_INT 5
16745: PUSH
16746: LD_INT 6
16748: PUSH
16749: LD_INT 8
16751: PUSH
16752: LD_INT 11
16754: PUSH
16755: LD_INT 12
16757: PUSH
16758: LD_INT 15
16760: PUSH
16761: LD_INT 16
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_INT 23
16769: PUSH
16770: LD_INT 25
16772: PUSH
16773: LD_INT 26
16775: PUSH
16776: LD_INT 36
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 101
16797: PUSH
16798: LD_INT 102
16800: PUSH
16801: LD_INT 105
16803: PUSH
16804: LD_INT 106
16806: PUSH
16807: LD_INT 108
16809: PUSH
16810: LD_INT 109
16812: PUSH
16813: LD_INT 112
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: ST_TO_ADDR
16829: GO 19324
16831: LD_INT 6
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 16959
16839: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 4
16850: PUSH
16851: LD_INT 5
16853: PUSH
16854: LD_INT 6
16856: PUSH
16857: LD_INT 8
16859: PUSH
16860: LD_INT 11
16862: PUSH
16863: LD_INT 12
16865: PUSH
16866: LD_INT 15
16868: PUSH
16869: LD_INT 16
16871: PUSH
16872: LD_INT 20
16874: PUSH
16875: LD_INT 21
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_INT 23
16883: PUSH
16884: LD_INT 25
16886: PUSH
16887: LD_INT 26
16889: PUSH
16890: LD_INT 30
16892: PUSH
16893: LD_INT 31
16895: PUSH
16896: LD_INT 32
16898: PUSH
16899: LD_INT 36
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 101
16925: PUSH
16926: LD_INT 102
16928: PUSH
16929: LD_INT 105
16931: PUSH
16932: LD_INT 106
16934: PUSH
16935: LD_INT 108
16937: PUSH
16938: LD_INT 109
16940: PUSH
16941: LD_INT 112
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: ST_TO_ADDR
16957: GO 19324
16959: LD_INT 7
16961: DOUBLE
16962: EQUAL
16963: IFTRUE 16967
16965: GO 17067
16967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16968: LD_ADDR_VAR 0 1
16972: PUSH
16973: LD_INT 2
16975: PUSH
16976: LD_INT 4
16978: PUSH
16979: LD_INT 5
16981: PUSH
16982: LD_INT 7
16984: PUSH
16985: LD_INT 11
16987: PUSH
16988: LD_INT 12
16990: PUSH
16991: LD_INT 15
16993: PUSH
16994: LD_INT 16
16996: PUSH
16997: LD_INT 20
16999: PUSH
17000: LD_INT 21
17002: PUSH
17003: LD_INT 22
17005: PUSH
17006: LD_INT 23
17008: PUSH
17009: LD_INT 25
17011: PUSH
17012: LD_INT 26
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 101
17033: PUSH
17034: LD_INT 102
17036: PUSH
17037: LD_INT 103
17039: PUSH
17040: LD_INT 105
17042: PUSH
17043: LD_INT 106
17045: PUSH
17046: LD_INT 108
17048: PUSH
17049: LD_INT 112
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: ST_TO_ADDR
17065: GO 19324
17067: LD_INT 8
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17203
17075: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17076: LD_ADDR_VAR 0 1
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 4
17086: PUSH
17087: LD_INT 5
17089: PUSH
17090: LD_INT 6
17092: PUSH
17093: LD_INT 7
17095: PUSH
17096: LD_INT 8
17098: PUSH
17099: LD_INT 11
17101: PUSH
17102: LD_INT 12
17104: PUSH
17105: LD_INT 15
17107: PUSH
17108: LD_INT 16
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 25
17125: PUSH
17126: LD_INT 26
17128: PUSH
17129: LD_INT 30
17131: PUSH
17132: LD_INT 31
17134: PUSH
17135: LD_INT 32
17137: PUSH
17138: LD_INT 36
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 101
17165: PUSH
17166: LD_INT 102
17168: PUSH
17169: LD_INT 103
17171: PUSH
17172: LD_INT 105
17174: PUSH
17175: LD_INT 106
17177: PUSH
17178: LD_INT 108
17180: PUSH
17181: LD_INT 109
17183: PUSH
17184: LD_INT 112
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: ST_TO_ADDR
17201: GO 19324
17203: LD_INT 9
17205: DOUBLE
17206: EQUAL
17207: IFTRUE 17211
17209: GO 17347
17211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17212: LD_ADDR_VAR 0 1
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: LD_INT 4
17222: PUSH
17223: LD_INT 5
17225: PUSH
17226: LD_INT 6
17228: PUSH
17229: LD_INT 7
17231: PUSH
17232: LD_INT 8
17234: PUSH
17235: LD_INT 11
17237: PUSH
17238: LD_INT 12
17240: PUSH
17241: LD_INT 15
17243: PUSH
17244: LD_INT 16
17246: PUSH
17247: LD_INT 20
17249: PUSH
17250: LD_INT 21
17252: PUSH
17253: LD_INT 22
17255: PUSH
17256: LD_INT 23
17258: PUSH
17259: LD_INT 25
17261: PUSH
17262: LD_INT 26
17264: PUSH
17265: LD_INT 28
17267: PUSH
17268: LD_INT 30
17270: PUSH
17271: LD_INT 31
17273: PUSH
17274: LD_INT 32
17276: PUSH
17277: LD_INT 36
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 101
17305: PUSH
17306: LD_INT 102
17308: PUSH
17309: LD_INT 103
17311: PUSH
17312: LD_INT 105
17314: PUSH
17315: LD_INT 106
17317: PUSH
17318: LD_INT 108
17320: PUSH
17321: LD_INT 109
17323: PUSH
17324: LD_INT 112
17326: PUSH
17327: LD_INT 114
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: ST_TO_ADDR
17345: GO 19324
17347: LD_INT 10
17349: DOUBLE
17350: EQUAL
17351: IFTRUE 17355
17353: GO 17539
17355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17356: LD_ADDR_VAR 0 1
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 4
17366: PUSH
17367: LD_INT 5
17369: PUSH
17370: LD_INT 6
17372: PUSH
17373: LD_INT 7
17375: PUSH
17376: LD_INT 8
17378: PUSH
17379: LD_INT 9
17381: PUSH
17382: LD_INT 10
17384: PUSH
17385: LD_INT 11
17387: PUSH
17388: LD_INT 12
17390: PUSH
17391: LD_INT 13
17393: PUSH
17394: LD_INT 14
17396: PUSH
17397: LD_INT 15
17399: PUSH
17400: LD_INT 16
17402: PUSH
17403: LD_INT 17
17405: PUSH
17406: LD_INT 18
17408: PUSH
17409: LD_INT 19
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 24
17426: PUSH
17427: LD_INT 25
17429: PUSH
17430: LD_INT 26
17432: PUSH
17433: LD_INT 28
17435: PUSH
17436: LD_INT 30
17438: PUSH
17439: LD_INT 31
17441: PUSH
17442: LD_INT 32
17444: PUSH
17445: LD_INT 36
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 101
17481: PUSH
17482: LD_INT 102
17484: PUSH
17485: LD_INT 103
17487: PUSH
17488: LD_INT 104
17490: PUSH
17491: LD_INT 105
17493: PUSH
17494: LD_INT 106
17496: PUSH
17497: LD_INT 107
17499: PUSH
17500: LD_INT 108
17502: PUSH
17503: LD_INT 109
17505: PUSH
17506: LD_INT 110
17508: PUSH
17509: LD_INT 111
17511: PUSH
17512: LD_INT 112
17514: PUSH
17515: LD_INT 114
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: ST_TO_ADDR
17537: GO 19324
17539: LD_INT 11
17541: DOUBLE
17542: EQUAL
17543: IFTRUE 17547
17545: GO 17739
17547: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17548: LD_ADDR_VAR 0 1
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: LD_INT 3
17558: PUSH
17559: LD_INT 4
17561: PUSH
17562: LD_INT 5
17564: PUSH
17565: LD_INT 6
17567: PUSH
17568: LD_INT 7
17570: PUSH
17571: LD_INT 8
17573: PUSH
17574: LD_INT 9
17576: PUSH
17577: LD_INT 10
17579: PUSH
17580: LD_INT 11
17582: PUSH
17583: LD_INT 12
17585: PUSH
17586: LD_INT 13
17588: PUSH
17589: LD_INT 14
17591: PUSH
17592: LD_INT 15
17594: PUSH
17595: LD_INT 16
17597: PUSH
17598: LD_INT 17
17600: PUSH
17601: LD_INT 18
17603: PUSH
17604: LD_INT 19
17606: PUSH
17607: LD_INT 20
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 22
17615: PUSH
17616: LD_INT 23
17618: PUSH
17619: LD_INT 24
17621: PUSH
17622: LD_INT 25
17624: PUSH
17625: LD_INT 26
17627: PUSH
17628: LD_INT 28
17630: PUSH
17631: LD_INT 30
17633: PUSH
17634: LD_INT 31
17636: PUSH
17637: LD_INT 32
17639: PUSH
17640: LD_INT 34
17642: PUSH
17643: LD_INT 36
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 101
17681: PUSH
17682: LD_INT 102
17684: PUSH
17685: LD_INT 103
17687: PUSH
17688: LD_INT 104
17690: PUSH
17691: LD_INT 105
17693: PUSH
17694: LD_INT 106
17696: PUSH
17697: LD_INT 107
17699: PUSH
17700: LD_INT 108
17702: PUSH
17703: LD_INT 109
17705: PUSH
17706: LD_INT 110
17708: PUSH
17709: LD_INT 111
17711: PUSH
17712: LD_INT 112
17714: PUSH
17715: LD_INT 114
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: ST_TO_ADDR
17737: GO 19324
17739: LD_INT 12
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17955
17747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17748: LD_ADDR_VAR 0 1
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: LD_INT 3
17761: PUSH
17762: LD_INT 4
17764: PUSH
17765: LD_INT 5
17767: PUSH
17768: LD_INT 6
17770: PUSH
17771: LD_INT 7
17773: PUSH
17774: LD_INT 8
17776: PUSH
17777: LD_INT 9
17779: PUSH
17780: LD_INT 10
17782: PUSH
17783: LD_INT 11
17785: PUSH
17786: LD_INT 12
17788: PUSH
17789: LD_INT 13
17791: PUSH
17792: LD_INT 14
17794: PUSH
17795: LD_INT 15
17797: PUSH
17798: LD_INT 16
17800: PUSH
17801: LD_INT 17
17803: PUSH
17804: LD_INT 18
17806: PUSH
17807: LD_INT 19
17809: PUSH
17810: LD_INT 20
17812: PUSH
17813: LD_INT 21
17815: PUSH
17816: LD_INT 22
17818: PUSH
17819: LD_INT 23
17821: PUSH
17822: LD_INT 24
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 26
17830: PUSH
17831: LD_INT 27
17833: PUSH
17834: LD_INT 28
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 31
17842: PUSH
17843: LD_INT 32
17845: PUSH
17846: LD_INT 33
17848: PUSH
17849: LD_INT 34
17851: PUSH
17852: LD_INT 36
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 101
17893: PUSH
17894: LD_INT 102
17896: PUSH
17897: LD_INT 103
17899: PUSH
17900: LD_INT 104
17902: PUSH
17903: LD_INT 105
17905: PUSH
17906: LD_INT 106
17908: PUSH
17909: LD_INT 107
17911: PUSH
17912: LD_INT 108
17914: PUSH
17915: LD_INT 109
17917: PUSH
17918: LD_INT 110
17920: PUSH
17921: LD_INT 111
17923: PUSH
17924: LD_INT 112
17926: PUSH
17927: LD_INT 113
17929: PUSH
17930: LD_INT 114
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: ST_TO_ADDR
17953: GO 19324
17955: LD_INT 13
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 18159
17963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17964: LD_ADDR_VAR 0 1
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 3
17977: PUSH
17978: LD_INT 4
17980: PUSH
17981: LD_INT 5
17983: PUSH
17984: LD_INT 8
17986: PUSH
17987: LD_INT 9
17989: PUSH
17990: LD_INT 10
17992: PUSH
17993: LD_INT 11
17995: PUSH
17996: LD_INT 12
17998: PUSH
17999: LD_INT 14
18001: PUSH
18002: LD_INT 15
18004: PUSH
18005: LD_INT 16
18007: PUSH
18008: LD_INT 17
18010: PUSH
18011: LD_INT 18
18013: PUSH
18014: LD_INT 19
18016: PUSH
18017: LD_INT 20
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 22
18025: PUSH
18026: LD_INT 23
18028: PUSH
18029: LD_INT 24
18031: PUSH
18032: LD_INT 25
18034: PUSH
18035: LD_INT 26
18037: PUSH
18038: LD_INT 27
18040: PUSH
18041: LD_INT 28
18043: PUSH
18044: LD_INT 30
18046: PUSH
18047: LD_INT 31
18049: PUSH
18050: LD_INT 32
18052: PUSH
18053: LD_INT 33
18055: PUSH
18056: LD_INT 34
18058: PUSH
18059: LD_INT 36
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 101
18097: PUSH
18098: LD_INT 102
18100: PUSH
18101: LD_INT 103
18103: PUSH
18104: LD_INT 104
18106: PUSH
18107: LD_INT 105
18109: PUSH
18110: LD_INT 106
18112: PUSH
18113: LD_INT 107
18115: PUSH
18116: LD_INT 108
18118: PUSH
18119: LD_INT 109
18121: PUSH
18122: LD_INT 110
18124: PUSH
18125: LD_INT 111
18127: PUSH
18128: LD_INT 112
18130: PUSH
18131: LD_INT 113
18133: PUSH
18134: LD_INT 114
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: ST_TO_ADDR
18157: GO 19324
18159: LD_INT 14
18161: DOUBLE
18162: EQUAL
18163: IFTRUE 18167
18165: GO 18379
18167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18168: LD_ADDR_VAR 0 1
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 2
18178: PUSH
18179: LD_INT 3
18181: PUSH
18182: LD_INT 4
18184: PUSH
18185: LD_INT 5
18187: PUSH
18188: LD_INT 6
18190: PUSH
18191: LD_INT 7
18193: PUSH
18194: LD_INT 8
18196: PUSH
18197: LD_INT 9
18199: PUSH
18200: LD_INT 10
18202: PUSH
18203: LD_INT 11
18205: PUSH
18206: LD_INT 12
18208: PUSH
18209: LD_INT 13
18211: PUSH
18212: LD_INT 14
18214: PUSH
18215: LD_INT 15
18217: PUSH
18218: LD_INT 16
18220: PUSH
18221: LD_INT 17
18223: PUSH
18224: LD_INT 18
18226: PUSH
18227: LD_INT 19
18229: PUSH
18230: LD_INT 20
18232: PUSH
18233: LD_INT 21
18235: PUSH
18236: LD_INT 22
18238: PUSH
18239: LD_INT 23
18241: PUSH
18242: LD_INT 24
18244: PUSH
18245: LD_INT 25
18247: PUSH
18248: LD_INT 26
18250: PUSH
18251: LD_INT 27
18253: PUSH
18254: LD_INT 28
18256: PUSH
18257: LD_INT 29
18259: PUSH
18260: LD_INT 30
18262: PUSH
18263: LD_INT 31
18265: PUSH
18266: LD_INT 32
18268: PUSH
18269: LD_INT 33
18271: PUSH
18272: LD_INT 34
18274: PUSH
18275: LD_INT 36
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 101
18317: PUSH
18318: LD_INT 102
18320: PUSH
18321: LD_INT 103
18323: PUSH
18324: LD_INT 104
18326: PUSH
18327: LD_INT 105
18329: PUSH
18330: LD_INT 106
18332: PUSH
18333: LD_INT 107
18335: PUSH
18336: LD_INT 108
18338: PUSH
18339: LD_INT 109
18341: PUSH
18342: LD_INT 110
18344: PUSH
18345: LD_INT 111
18347: PUSH
18348: LD_INT 112
18350: PUSH
18351: LD_INT 113
18353: PUSH
18354: LD_INT 114
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: ST_TO_ADDR
18377: GO 19324
18379: LD_INT 15
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18599
18387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18388: LD_ADDR_VAR 0 1
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: LD_INT 2
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: LD_INT 4
18404: PUSH
18405: LD_INT 5
18407: PUSH
18408: LD_INT 6
18410: PUSH
18411: LD_INT 7
18413: PUSH
18414: LD_INT 8
18416: PUSH
18417: LD_INT 9
18419: PUSH
18420: LD_INT 10
18422: PUSH
18423: LD_INT 11
18425: PUSH
18426: LD_INT 12
18428: PUSH
18429: LD_INT 13
18431: PUSH
18432: LD_INT 14
18434: PUSH
18435: LD_INT 15
18437: PUSH
18438: LD_INT 16
18440: PUSH
18441: LD_INT 17
18443: PUSH
18444: LD_INT 18
18446: PUSH
18447: LD_INT 19
18449: PUSH
18450: LD_INT 20
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 22
18458: PUSH
18459: LD_INT 23
18461: PUSH
18462: LD_INT 24
18464: PUSH
18465: LD_INT 25
18467: PUSH
18468: LD_INT 26
18470: PUSH
18471: LD_INT 27
18473: PUSH
18474: LD_INT 28
18476: PUSH
18477: LD_INT 29
18479: PUSH
18480: LD_INT 30
18482: PUSH
18483: LD_INT 31
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: LD_INT 33
18491: PUSH
18492: LD_INT 34
18494: PUSH
18495: LD_INT 36
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 101
18537: PUSH
18538: LD_INT 102
18540: PUSH
18541: LD_INT 103
18543: PUSH
18544: LD_INT 104
18546: PUSH
18547: LD_INT 105
18549: PUSH
18550: LD_INT 106
18552: PUSH
18553: LD_INT 107
18555: PUSH
18556: LD_INT 108
18558: PUSH
18559: LD_INT 109
18561: PUSH
18562: LD_INT 110
18564: PUSH
18565: LD_INT 111
18567: PUSH
18568: LD_INT 112
18570: PUSH
18571: LD_INT 113
18573: PUSH
18574: LD_INT 114
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: ST_TO_ADDR
18597: GO 19324
18599: LD_INT 16
18601: DOUBLE
18602: EQUAL
18603: IFTRUE 18607
18605: GO 18731
18607: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18608: LD_ADDR_VAR 0 1
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: LD_INT 4
18618: PUSH
18619: LD_INT 5
18621: PUSH
18622: LD_INT 7
18624: PUSH
18625: LD_INT 11
18627: PUSH
18628: LD_INT 12
18630: PUSH
18631: LD_INT 15
18633: PUSH
18634: LD_INT 16
18636: PUSH
18637: LD_INT 20
18639: PUSH
18640: LD_INT 21
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_INT 23
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 26
18654: PUSH
18655: LD_INT 30
18657: PUSH
18658: LD_INT 31
18660: PUSH
18661: LD_INT 32
18663: PUSH
18664: LD_INT 33
18666: PUSH
18667: LD_INT 34
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 101
18693: PUSH
18694: LD_INT 102
18696: PUSH
18697: LD_INT 103
18699: PUSH
18700: LD_INT 106
18702: PUSH
18703: LD_INT 108
18705: PUSH
18706: LD_INT 112
18708: PUSH
18709: LD_INT 113
18711: PUSH
18712: LD_INT 114
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: ST_TO_ADDR
18729: GO 19324
18731: LD_INT 17
18733: DOUBLE
18734: EQUAL
18735: IFTRUE 18739
18737: GO 18951
18739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18740: LD_ADDR_VAR 0 1
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: LD_INT 3
18753: PUSH
18754: LD_INT 4
18756: PUSH
18757: LD_INT 5
18759: PUSH
18760: LD_INT 6
18762: PUSH
18763: LD_INT 7
18765: PUSH
18766: LD_INT 8
18768: PUSH
18769: LD_INT 9
18771: PUSH
18772: LD_INT 10
18774: PUSH
18775: LD_INT 11
18777: PUSH
18778: LD_INT 12
18780: PUSH
18781: LD_INT 13
18783: PUSH
18784: LD_INT 14
18786: PUSH
18787: LD_INT 15
18789: PUSH
18790: LD_INT 16
18792: PUSH
18793: LD_INT 17
18795: PUSH
18796: LD_INT 18
18798: PUSH
18799: LD_INT 19
18801: PUSH
18802: LD_INT 20
18804: PUSH
18805: LD_INT 21
18807: PUSH
18808: LD_INT 22
18810: PUSH
18811: LD_INT 23
18813: PUSH
18814: LD_INT 24
18816: PUSH
18817: LD_INT 25
18819: PUSH
18820: LD_INT 26
18822: PUSH
18823: LD_INT 27
18825: PUSH
18826: LD_INT 28
18828: PUSH
18829: LD_INT 29
18831: PUSH
18832: LD_INT 30
18834: PUSH
18835: LD_INT 31
18837: PUSH
18838: LD_INT 32
18840: PUSH
18841: LD_INT 33
18843: PUSH
18844: LD_INT 34
18846: PUSH
18847: LD_INT 36
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 101
18889: PUSH
18890: LD_INT 102
18892: PUSH
18893: LD_INT 103
18895: PUSH
18896: LD_INT 104
18898: PUSH
18899: LD_INT 105
18901: PUSH
18902: LD_INT 106
18904: PUSH
18905: LD_INT 107
18907: PUSH
18908: LD_INT 108
18910: PUSH
18911: LD_INT 109
18913: PUSH
18914: LD_INT 110
18916: PUSH
18917: LD_INT 111
18919: PUSH
18920: LD_INT 112
18922: PUSH
18923: LD_INT 113
18925: PUSH
18926: LD_INT 114
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: ST_TO_ADDR
18949: GO 19324
18951: LD_INT 18
18953: DOUBLE
18954: EQUAL
18955: IFTRUE 18959
18957: GO 19095
18959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18960: LD_ADDR_VAR 0 1
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 4
18970: PUSH
18971: LD_INT 5
18973: PUSH
18974: LD_INT 7
18976: PUSH
18977: LD_INT 11
18979: PUSH
18980: LD_INT 12
18982: PUSH
18983: LD_INT 15
18985: PUSH
18986: LD_INT 16
18988: PUSH
18989: LD_INT 20
18991: PUSH
18992: LD_INT 21
18994: PUSH
18995: LD_INT 22
18997: PUSH
18998: LD_INT 23
19000: PUSH
19001: LD_INT 25
19003: PUSH
19004: LD_INT 26
19006: PUSH
19007: LD_INT 30
19009: PUSH
19010: LD_INT 31
19012: PUSH
19013: LD_INT 32
19015: PUSH
19016: LD_INT 33
19018: PUSH
19019: LD_INT 34
19021: PUSH
19022: LD_INT 35
19024: PUSH
19025: LD_INT 36
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 101
19053: PUSH
19054: LD_INT 102
19056: PUSH
19057: LD_INT 103
19059: PUSH
19060: LD_INT 106
19062: PUSH
19063: LD_INT 108
19065: PUSH
19066: LD_INT 112
19068: PUSH
19069: LD_INT 113
19071: PUSH
19072: LD_INT 114
19074: PUSH
19075: LD_INT 115
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: ST_TO_ADDR
19093: GO 19324
19095: LD_INT 19
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19323
19103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19104: LD_ADDR_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: LD_INT 2
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: LD_INT 4
19120: PUSH
19121: LD_INT 5
19123: PUSH
19124: LD_INT 6
19126: PUSH
19127: LD_INT 7
19129: PUSH
19130: LD_INT 8
19132: PUSH
19133: LD_INT 9
19135: PUSH
19136: LD_INT 10
19138: PUSH
19139: LD_INT 11
19141: PUSH
19142: LD_INT 12
19144: PUSH
19145: LD_INT 13
19147: PUSH
19148: LD_INT 14
19150: PUSH
19151: LD_INT 15
19153: PUSH
19154: LD_INT 16
19156: PUSH
19157: LD_INT 17
19159: PUSH
19160: LD_INT 18
19162: PUSH
19163: LD_INT 19
19165: PUSH
19166: LD_INT 20
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 22
19174: PUSH
19175: LD_INT 23
19177: PUSH
19178: LD_INT 24
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 26
19186: PUSH
19187: LD_INT 27
19189: PUSH
19190: LD_INT 28
19192: PUSH
19193: LD_INT 29
19195: PUSH
19196: LD_INT 30
19198: PUSH
19199: LD_INT 31
19201: PUSH
19202: LD_INT 32
19204: PUSH
19205: LD_INT 33
19207: PUSH
19208: LD_INT 34
19210: PUSH
19211: LD_INT 35
19213: PUSH
19214: LD_INT 36
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 101
19257: PUSH
19258: LD_INT 102
19260: PUSH
19261: LD_INT 103
19263: PUSH
19264: LD_INT 104
19266: PUSH
19267: LD_INT 105
19269: PUSH
19270: LD_INT 106
19272: PUSH
19273: LD_INT 107
19275: PUSH
19276: LD_INT 108
19278: PUSH
19279: LD_INT 109
19281: PUSH
19282: LD_INT 110
19284: PUSH
19285: LD_INT 111
19287: PUSH
19288: LD_INT 112
19290: PUSH
19291: LD_INT 113
19293: PUSH
19294: LD_INT 114
19296: PUSH
19297: LD_INT 115
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: ST_TO_ADDR
19321: GO 19324
19323: POP
// end else
19324: GO 19543
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19326: LD_ADDR_VAR 0 1
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 3
19339: PUSH
19340: LD_INT 4
19342: PUSH
19343: LD_INT 5
19345: PUSH
19346: LD_INT 6
19348: PUSH
19349: LD_INT 7
19351: PUSH
19352: LD_INT 8
19354: PUSH
19355: LD_INT 9
19357: PUSH
19358: LD_INT 10
19360: PUSH
19361: LD_INT 11
19363: PUSH
19364: LD_INT 12
19366: PUSH
19367: LD_INT 13
19369: PUSH
19370: LD_INT 14
19372: PUSH
19373: LD_INT 15
19375: PUSH
19376: LD_INT 16
19378: PUSH
19379: LD_INT 17
19381: PUSH
19382: LD_INT 18
19384: PUSH
19385: LD_INT 19
19387: PUSH
19388: LD_INT 20
19390: PUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 22
19396: PUSH
19397: LD_INT 23
19399: PUSH
19400: LD_INT 24
19402: PUSH
19403: LD_INT 25
19405: PUSH
19406: LD_INT 26
19408: PUSH
19409: LD_INT 27
19411: PUSH
19412: LD_INT 28
19414: PUSH
19415: LD_INT 29
19417: PUSH
19418: LD_INT 30
19420: PUSH
19421: LD_INT 31
19423: PUSH
19424: LD_INT 32
19426: PUSH
19427: LD_INT 33
19429: PUSH
19430: LD_INT 34
19432: PUSH
19433: LD_INT 35
19435: PUSH
19436: LD_INT 36
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 101
19479: PUSH
19480: LD_INT 102
19482: PUSH
19483: LD_INT 103
19485: PUSH
19486: LD_INT 104
19488: PUSH
19489: LD_INT 105
19491: PUSH
19492: LD_INT 106
19494: PUSH
19495: LD_INT 107
19497: PUSH
19498: LD_INT 108
19500: PUSH
19501: LD_INT 109
19503: PUSH
19504: LD_INT 110
19506: PUSH
19507: LD_INT 111
19509: PUSH
19510: LD_INT 112
19512: PUSH
19513: LD_INT 113
19515: PUSH
19516: LD_INT 114
19518: PUSH
19519: LD_INT 115
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: ST_TO_ADDR
// if result then
19543: LD_VAR 0 1
19547: IFFALSE 19836
// begin normal :=  ;
19549: LD_ADDR_VAR 0 3
19553: PUSH
19554: LD_STRING 
19556: ST_TO_ADDR
// hardcore :=  ;
19557: LD_ADDR_VAR 0 4
19561: PUSH
19562: LD_STRING 
19564: ST_TO_ADDR
// for i = 1 to normalCounter do
19565: LD_ADDR_VAR 0 5
19569: PUSH
19570: DOUBLE
19571: LD_INT 1
19573: DEC
19574: ST_TO_ADDR
19575: LD_EXP 50
19579: PUSH
19580: FOR_TO
19581: IFFALSE 19682
// begin tmp := 0 ;
19583: LD_ADDR_VAR 0 2
19587: PUSH
19588: LD_STRING 0
19590: ST_TO_ADDR
// if result [ 1 ] then
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 1
19598: ARRAY
19599: IFFALSE 19664
// if result [ 1 ] [ 1 ] = i then
19601: LD_VAR 0 1
19605: PUSH
19606: LD_INT 1
19608: ARRAY
19609: PUSH
19610: LD_INT 1
19612: ARRAY
19613: PUSH
19614: LD_VAR 0 5
19618: EQUAL
19619: IFFALSE 19664
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19621: LD_ADDR_VAR 0 1
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: LD_INT 1
19633: PPUSH
19634: LD_VAR 0 1
19638: PUSH
19639: LD_INT 1
19641: ARRAY
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 3
19650: PPUSH
19651: CALL_OW 1
19655: ST_TO_ADDR
// tmp := 1 ;
19656: LD_ADDR_VAR 0 2
19660: PUSH
19661: LD_STRING 1
19663: ST_TO_ADDR
// end ; normal := normal & tmp ;
19664: LD_ADDR_VAR 0 3
19668: PUSH
19669: LD_VAR 0 3
19673: PUSH
19674: LD_VAR 0 2
19678: STR
19679: ST_TO_ADDR
// end ;
19680: GO 19580
19682: POP
19683: POP
// for i = 1 to hardcoreCounter do
19684: LD_ADDR_VAR 0 5
19688: PUSH
19689: DOUBLE
19690: LD_INT 1
19692: DEC
19693: ST_TO_ADDR
19694: LD_EXP 51
19698: PUSH
19699: FOR_TO
19700: IFFALSE 19805
// begin tmp := 0 ;
19702: LD_ADDR_VAR 0 2
19706: PUSH
19707: LD_STRING 0
19709: ST_TO_ADDR
// if result [ 2 ] then
19710: LD_VAR 0 1
19714: PUSH
19715: LD_INT 2
19717: ARRAY
19718: IFFALSE 19787
// if result [ 2 ] [ 1 ] = 100 + i then
19720: LD_VAR 0 1
19724: PUSH
19725: LD_INT 2
19727: ARRAY
19728: PUSH
19729: LD_INT 1
19731: ARRAY
19732: PUSH
19733: LD_INT 100
19735: PUSH
19736: LD_VAR 0 5
19740: PLUS
19741: EQUAL
19742: IFFALSE 19787
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19744: LD_ADDR_VAR 0 1
19748: PUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: LD_INT 2
19756: PPUSH
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 2
19764: ARRAY
19765: PPUSH
19766: LD_INT 1
19768: PPUSH
19769: CALL_OW 3
19773: PPUSH
19774: CALL_OW 1
19778: ST_TO_ADDR
// tmp := 1 ;
19779: LD_ADDR_VAR 0 2
19783: PUSH
19784: LD_STRING 1
19786: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19787: LD_ADDR_VAR 0 4
19791: PUSH
19792: LD_VAR 0 4
19796: PUSH
19797: LD_VAR 0 2
19801: STR
19802: ST_TO_ADDR
// end ;
19803: GO 19699
19805: POP
19806: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19807: LD_STRING getStreamItemsFromMission("
19809: PUSH
19810: LD_VAR 0 3
19814: STR
19815: PUSH
19816: LD_STRING ","
19818: STR
19819: PUSH
19820: LD_VAR 0 4
19824: STR
19825: PUSH
19826: LD_STRING ")
19828: STR
19829: PPUSH
19830: CALL_OW 559
// end else
19834: GO 19843
// ToLua ( getStreamItemsFromMission("","") ) ;
19836: LD_STRING getStreamItemsFromMission("","")
19838: PPUSH
19839: CALL_OW 559
// end ;
19843: LD_VAR 0 1
19847: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19848: LD_VAR 0 2
19852: PUSH
19853: LD_INT 100
19855: EQUAL
19856: IFFALSE 20805
// begin if not StreamModeActive then
19858: LD_EXP 49
19862: NOT
19863: IFFALSE 19873
// StreamModeActive := true ;
19865: LD_ADDR_EXP 49
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// if p3 = 0 then
19873: LD_VAR 0 3
19877: PUSH
19878: LD_INT 0
19880: EQUAL
19881: IFFALSE 19887
// InitStreamMode ;
19883: CALL 15926 0 0
// if p3 = 1 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 1
19894: EQUAL
19895: IFFALSE 19905
// sRocket := true ;
19897: LD_ADDR_EXP 54
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 2 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 2
19912: EQUAL
19913: IFFALSE 19923
// sSpeed := true ;
19915: LD_ADDR_EXP 53
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 3 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 3
19930: EQUAL
19931: IFFALSE 19941
// sEngine := true ;
19933: LD_ADDR_EXP 55
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 4 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 4
19948: EQUAL
19949: IFFALSE 19959
// sSpec := true ;
19951: LD_ADDR_EXP 52
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 5 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 5
19966: EQUAL
19967: IFFALSE 19977
// sLevel := true ;
19969: LD_ADDR_EXP 56
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 6 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 6
19984: EQUAL
19985: IFFALSE 19995
// sArmoury := true ;
19987: LD_ADDR_EXP 57
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 7 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 7
20002: EQUAL
20003: IFFALSE 20013
// sRadar := true ;
20005: LD_ADDR_EXP 58
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 8 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 8
20020: EQUAL
20021: IFFALSE 20031
// sBunker := true ;
20023: LD_ADDR_EXP 59
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 9 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 9
20038: EQUAL
20039: IFFALSE 20049
// sHack := true ;
20041: LD_ADDR_EXP 60
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 10 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 10
20056: EQUAL
20057: IFFALSE 20067
// sFire := true ;
20059: LD_ADDR_EXP 61
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 11 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 11
20074: EQUAL
20075: IFFALSE 20085
// sRefresh := true ;
20077: LD_ADDR_EXP 62
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 12 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 12
20092: EQUAL
20093: IFFALSE 20103
// sExp := true ;
20095: LD_ADDR_EXP 63
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 13 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 13
20110: EQUAL
20111: IFFALSE 20121
// sDepot := true ;
20113: LD_ADDR_EXP 64
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 14 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 14
20128: EQUAL
20129: IFFALSE 20139
// sFlag := true ;
20131: LD_ADDR_EXP 65
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 15 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 15
20146: EQUAL
20147: IFFALSE 20157
// sKamikadze := true ;
20149: LD_ADDR_EXP 73
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 16 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 16
20164: EQUAL
20165: IFFALSE 20175
// sTroll := true ;
20167: LD_ADDR_EXP 74
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 17 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 17
20182: EQUAL
20183: IFFALSE 20193
// sSlow := true ;
20185: LD_ADDR_EXP 75
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 18 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 18
20200: EQUAL
20201: IFFALSE 20211
// sLack := true ;
20203: LD_ADDR_EXP 76
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 19 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 19
20218: EQUAL
20219: IFFALSE 20229
// sTank := true ;
20221: LD_ADDR_EXP 78
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 20 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 20
20236: EQUAL
20237: IFFALSE 20247
// sRemote := true ;
20239: LD_ADDR_EXP 79
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 21 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 21
20254: EQUAL
20255: IFFALSE 20265
// sPowell := true ;
20257: LD_ADDR_EXP 80
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 22 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 22
20272: EQUAL
20273: IFFALSE 20283
// sTeleport := true ;
20275: LD_ADDR_EXP 83
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 23 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 23
20290: EQUAL
20291: IFFALSE 20301
// sOilTower := true ;
20293: LD_ADDR_EXP 85
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 24 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 24
20308: EQUAL
20309: IFFALSE 20319
// sShovel := true ;
20311: LD_ADDR_EXP 86
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 25 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 25
20326: EQUAL
20327: IFFALSE 20337
// sSheik := true ;
20329: LD_ADDR_EXP 87
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// if p3 = 26 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_INT 26
20344: EQUAL
20345: IFFALSE 20355
// sEarthquake := true ;
20347: LD_ADDR_EXP 89
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// if p3 = 27 then
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 27
20362: EQUAL
20363: IFFALSE 20373
// sAI := true ;
20365: LD_ADDR_EXP 90
20369: PUSH
20370: LD_INT 1
20372: ST_TO_ADDR
// if p3 = 28 then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 28
20380: EQUAL
20381: IFFALSE 20391
// sCargo := true ;
20383: LD_ADDR_EXP 93
20387: PUSH
20388: LD_INT 1
20390: ST_TO_ADDR
// if p3 = 29 then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 29
20398: EQUAL
20399: IFFALSE 20409
// sDLaser := true ;
20401: LD_ADDR_EXP 94
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if p3 = 30 then
20409: LD_VAR 0 3
20413: PUSH
20414: LD_INT 30
20416: EQUAL
20417: IFFALSE 20427
// sExchange := true ;
20419: LD_ADDR_EXP 95
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if p3 = 31 then
20427: LD_VAR 0 3
20431: PUSH
20432: LD_INT 31
20434: EQUAL
20435: IFFALSE 20445
// sFac := true ;
20437: LD_ADDR_EXP 96
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// if p3 = 32 then
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 32
20452: EQUAL
20453: IFFALSE 20463
// sPower := true ;
20455: LD_ADDR_EXP 97
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// if p3 = 33 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 33
20470: EQUAL
20471: IFFALSE 20481
// sRandom := true ;
20473: LD_ADDR_EXP 98
20477: PUSH
20478: LD_INT 1
20480: ST_TO_ADDR
// if p3 = 34 then
20481: LD_VAR 0 3
20485: PUSH
20486: LD_INT 34
20488: EQUAL
20489: IFFALSE 20499
// sShield := true ;
20491: LD_ADDR_EXP 99
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// if p3 = 35 then
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 35
20506: EQUAL
20507: IFFALSE 20517
// sTime := true ;
20509: LD_ADDR_EXP 100
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// if p3 = 36 then
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 36
20524: EQUAL
20525: IFFALSE 20535
// sTools := true ;
20527: LD_ADDR_EXP 101
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if p3 = 101 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 101
20542: EQUAL
20543: IFFALSE 20553
// sSold := true ;
20545: LD_ADDR_EXP 66
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 102 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 102
20560: EQUAL
20561: IFFALSE 20571
// sDiff := true ;
20563: LD_ADDR_EXP 67
20567: PUSH
20568: LD_INT 1
20570: ST_TO_ADDR
// if p3 = 103 then
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 103
20578: EQUAL
20579: IFFALSE 20589
// sFog := true ;
20581: LD_ADDR_EXP 70
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// if p3 = 104 then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 104
20596: EQUAL
20597: IFFALSE 20607
// sReset := true ;
20599: LD_ADDR_EXP 71
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// if p3 = 105 then
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 105
20614: EQUAL
20615: IFFALSE 20625
// sSun := true ;
20617: LD_ADDR_EXP 72
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// if p3 = 106 then
20625: LD_VAR 0 3
20629: PUSH
20630: LD_INT 106
20632: EQUAL
20633: IFFALSE 20643
// sTiger := true ;
20635: LD_ADDR_EXP 68
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if p3 = 107 then
20643: LD_VAR 0 3
20647: PUSH
20648: LD_INT 107
20650: EQUAL
20651: IFFALSE 20661
// sBomb := true ;
20653: LD_ADDR_EXP 69
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// if p3 = 108 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 108
20668: EQUAL
20669: IFFALSE 20679
// sWound := true ;
20671: LD_ADDR_EXP 77
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// if p3 = 109 then
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 109
20686: EQUAL
20687: IFFALSE 20697
// sBetray := true ;
20689: LD_ADDR_EXP 81
20693: PUSH
20694: LD_INT 1
20696: ST_TO_ADDR
// if p3 = 110 then
20697: LD_VAR 0 3
20701: PUSH
20702: LD_INT 110
20704: EQUAL
20705: IFFALSE 20715
// sContamin := true ;
20707: LD_ADDR_EXP 82
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// if p3 = 111 then
20715: LD_VAR 0 3
20719: PUSH
20720: LD_INT 111
20722: EQUAL
20723: IFFALSE 20733
// sOil := true ;
20725: LD_ADDR_EXP 84
20729: PUSH
20730: LD_INT 1
20732: ST_TO_ADDR
// if p3 = 112 then
20733: LD_VAR 0 3
20737: PUSH
20738: LD_INT 112
20740: EQUAL
20741: IFFALSE 20751
// sStu := true ;
20743: LD_ADDR_EXP 88
20747: PUSH
20748: LD_INT 1
20750: ST_TO_ADDR
// if p3 = 113 then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_INT 113
20758: EQUAL
20759: IFFALSE 20769
// sBazooka := true ;
20761: LD_ADDR_EXP 91
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// if p3 = 114 then
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 114
20776: EQUAL
20777: IFFALSE 20787
// sMortar := true ;
20779: LD_ADDR_EXP 92
20783: PUSH
20784: LD_INT 1
20786: ST_TO_ADDR
// if p3 = 115 then
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 115
20794: EQUAL
20795: IFFALSE 20805
// sRanger := true ;
20797: LD_ADDR_EXP 102
20801: PUSH
20802: LD_INT 1
20804: ST_TO_ADDR
// end ; end ;
20805: PPOPN 6
20807: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20808: LD_EXP 49
20812: PUSH
20813: LD_EXP 54
20817: AND
20818: IFFALSE 20942
20820: GO 20822
20822: DISABLE
20823: LD_INT 0
20825: PPUSH
20826: PPUSH
// begin enable ;
20827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20828: LD_ADDR_VAR 0 2
20832: PUSH
20833: LD_INT 22
20835: PUSH
20836: LD_OWVAR 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: LD_INT 34
20850: PUSH
20851: LD_INT 7
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 34
20860: PUSH
20861: LD_INT 45
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 34
20870: PUSH
20871: LD_INT 28
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 34
20880: PUSH
20881: LD_INT 47
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL_OW 69
20903: ST_TO_ADDR
// if not tmp then
20904: LD_VAR 0 2
20908: NOT
20909: IFFALSE 20913
// exit ;
20911: GO 20942
// for i in tmp do
20913: LD_ADDR_VAR 0 1
20917: PUSH
20918: LD_VAR 0 2
20922: PUSH
20923: FOR_IN
20924: IFFALSE 20940
// begin SetLives ( i , 0 ) ;
20926: LD_VAR 0 1
20930: PPUSH
20931: LD_INT 0
20933: PPUSH
20934: CALL_OW 234
// end ;
20938: GO 20923
20940: POP
20941: POP
// end ;
20942: PPOPN 2
20944: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20945: LD_EXP 49
20949: PUSH
20950: LD_EXP 55
20954: AND
20955: IFFALSE 21039
20957: GO 20959
20959: DISABLE
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
// begin enable ;
20964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20965: LD_ADDR_VAR 0 2
20969: PUSH
20970: LD_INT 22
20972: PUSH
20973: LD_OWVAR 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 32
20984: PUSH
20985: LD_INT 3
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 69
21000: ST_TO_ADDR
// if not tmp then
21001: LD_VAR 0 2
21005: NOT
21006: IFFALSE 21010
// exit ;
21008: GO 21039
// for i in tmp do
21010: LD_ADDR_VAR 0 1
21014: PUSH
21015: LD_VAR 0 2
21019: PUSH
21020: FOR_IN
21021: IFFALSE 21037
// begin SetLives ( i , 0 ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_INT 0
21030: PPUSH
21031: CALL_OW 234
// end ;
21035: GO 21020
21037: POP
21038: POP
// end ;
21039: PPOPN 2
21041: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21042: LD_EXP 49
21046: PUSH
21047: LD_EXP 52
21051: AND
21052: IFFALSE 21145
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
// begin enable ;
21060: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_OWVAR 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: LD_INT 25
21083: PUSH
21084: LD_INT 5
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 25
21093: PUSH
21094: LD_INT 9
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 25
21103: PUSH
21104: LD_INT 8
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PPUSH
21121: CALL_OW 69
21125: PUSH
21126: FOR_IN
21127: IFFALSE 21143
// begin SetClass ( i , 1 ) ;
21129: LD_VAR 0 1
21133: PPUSH
21134: LD_INT 1
21136: PPUSH
21137: CALL_OW 336
// end ;
21141: GO 21126
21143: POP
21144: POP
// end ;
21145: PPOPN 1
21147: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21148: LD_EXP 49
21152: PUSH
21153: LD_EXP 53
21157: AND
21158: PUSH
21159: LD_OWVAR 65
21163: PUSH
21164: LD_INT 7
21166: LESS
21167: AND
21168: IFFALSE 21182
21170: GO 21172
21172: DISABLE
// begin enable ;
21173: ENABLE
// game_speed := 7 ;
21174: LD_ADDR_OWVAR 65
21178: PUSH
21179: LD_INT 7
21181: ST_TO_ADDR
// end ;
21182: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21183: LD_EXP 49
21187: PUSH
21188: LD_EXP 56
21192: AND
21193: IFFALSE 21395
21195: GO 21197
21197: DISABLE
21198: LD_INT 0
21200: PPUSH
21201: PPUSH
21202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21203: LD_ADDR_VAR 0 3
21207: PUSH
21208: LD_INT 81
21210: PUSH
21211: LD_OWVAR 2
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PPUSH
21234: CALL_OW 69
21238: ST_TO_ADDR
// if not tmp then
21239: LD_VAR 0 3
21243: NOT
21244: IFFALSE 21248
// exit ;
21246: GO 21395
// if tmp > 5 then
21248: LD_VAR 0 3
21252: PUSH
21253: LD_INT 5
21255: GREATER
21256: IFFALSE 21268
// k := 5 else
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: LD_INT 5
21265: ST_TO_ADDR
21266: GO 21278
// k := tmp ;
21268: LD_ADDR_VAR 0 2
21272: PUSH
21273: LD_VAR 0 3
21277: ST_TO_ADDR
// for i := 1 to k do
21278: LD_ADDR_VAR 0 1
21282: PUSH
21283: DOUBLE
21284: LD_INT 1
21286: DEC
21287: ST_TO_ADDR
21288: LD_VAR 0 2
21292: PUSH
21293: FOR_TO
21294: IFFALSE 21393
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21296: LD_VAR 0 3
21300: PUSH
21301: LD_VAR 0 1
21305: ARRAY
21306: PPUSH
21307: LD_VAR 0 1
21311: PUSH
21312: LD_INT 4
21314: MOD
21315: PUSH
21316: LD_INT 1
21318: PLUS
21319: PPUSH
21320: CALL_OW 259
21324: PUSH
21325: LD_INT 10
21327: LESS
21328: IFFALSE 21391
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21330: LD_VAR 0 3
21334: PUSH
21335: LD_VAR 0 1
21339: ARRAY
21340: PPUSH
21341: LD_VAR 0 1
21345: PUSH
21346: LD_INT 4
21348: MOD
21349: PUSH
21350: LD_INT 1
21352: PLUS
21353: PPUSH
21354: LD_VAR 0 3
21358: PUSH
21359: LD_VAR 0 1
21363: ARRAY
21364: PPUSH
21365: LD_VAR 0 1
21369: PUSH
21370: LD_INT 4
21372: MOD
21373: PUSH
21374: LD_INT 1
21376: PLUS
21377: PPUSH
21378: CALL_OW 259
21382: PUSH
21383: LD_INT 1
21385: PLUS
21386: PPUSH
21387: CALL_OW 237
21391: GO 21293
21393: POP
21394: POP
// end ;
21395: PPOPN 3
21397: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21398: LD_EXP 49
21402: PUSH
21403: LD_EXP 57
21407: AND
21408: IFFALSE 21428
21410: GO 21412
21412: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21413: LD_INT 4
21415: PPUSH
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 0
21423: PPUSH
21424: CALL_OW 324
21428: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21429: LD_EXP 49
21433: PUSH
21434: LD_EXP 86
21438: AND
21439: IFFALSE 21459
21441: GO 21443
21443: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21444: LD_INT 19
21446: PPUSH
21447: LD_OWVAR 2
21451: PPUSH
21452: LD_INT 0
21454: PPUSH
21455: CALL_OW 324
21459: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21460: LD_EXP 49
21464: PUSH
21465: LD_EXP 58
21469: AND
21470: IFFALSE 21572
21472: GO 21474
21474: DISABLE
21475: LD_INT 0
21477: PPUSH
21478: PPUSH
// begin enable ;
21479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_INT 22
21487: PUSH
21488: LD_OWVAR 2
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: LD_INT 34
21502: PUSH
21503: LD_INT 11
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 34
21512: PUSH
21513: LD_INT 30
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 69
21533: ST_TO_ADDR
// if not tmp then
21534: LD_VAR 0 2
21538: NOT
21539: IFFALSE 21543
// exit ;
21541: GO 21572
// for i in tmp do
21543: LD_ADDR_VAR 0 1
21547: PUSH
21548: LD_VAR 0 2
21552: PUSH
21553: FOR_IN
21554: IFFALSE 21570
// begin SetLives ( i , 0 ) ;
21556: LD_VAR 0 1
21560: PPUSH
21561: LD_INT 0
21563: PPUSH
21564: CALL_OW 234
// end ;
21568: GO 21553
21570: POP
21571: POP
// end ;
21572: PPOPN 2
21574: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21575: LD_EXP 49
21579: PUSH
21580: LD_EXP 59
21584: AND
21585: IFFALSE 21605
21587: GO 21589
21589: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21590: LD_INT 32
21592: PPUSH
21593: LD_OWVAR 2
21597: PPUSH
21598: LD_INT 0
21600: PPUSH
21601: CALL_OW 324
21605: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21606: LD_EXP 49
21610: PUSH
21611: LD_EXP 60
21615: AND
21616: IFFALSE 21797
21618: GO 21620
21620: DISABLE
21621: LD_INT 0
21623: PPUSH
21624: PPUSH
21625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21626: LD_ADDR_VAR 0 2
21630: PUSH
21631: LD_INT 22
21633: PUSH
21634: LD_OWVAR 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 33
21645: PUSH
21646: LD_INT 3
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PPUSH
21657: CALL_OW 69
21661: ST_TO_ADDR
// if not tmp then
21662: LD_VAR 0 2
21666: NOT
21667: IFFALSE 21671
// exit ;
21669: GO 21797
// side := 0 ;
21671: LD_ADDR_VAR 0 3
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// for i := 1 to 8 do
21679: LD_ADDR_VAR 0 1
21683: PUSH
21684: DOUBLE
21685: LD_INT 1
21687: DEC
21688: ST_TO_ADDR
21689: LD_INT 8
21691: PUSH
21692: FOR_TO
21693: IFFALSE 21741
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21695: LD_OWVAR 2
21699: PUSH
21700: LD_VAR 0 1
21704: NONEQUAL
21705: PUSH
21706: LD_OWVAR 2
21710: PPUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 81
21720: PUSH
21721: LD_INT 2
21723: EQUAL
21724: AND
21725: IFFALSE 21739
// begin side := i ;
21727: LD_ADDR_VAR 0 3
21731: PUSH
21732: LD_VAR 0 1
21736: ST_TO_ADDR
// break ;
21737: GO 21741
// end ;
21739: GO 21692
21741: POP
21742: POP
// if not side then
21743: LD_VAR 0 3
21747: NOT
21748: IFFALSE 21752
// exit ;
21750: GO 21797
// for i := 1 to tmp do
21752: LD_ADDR_VAR 0 1
21756: PUSH
21757: DOUBLE
21758: LD_INT 1
21760: DEC
21761: ST_TO_ADDR
21762: LD_VAR 0 2
21766: PUSH
21767: FOR_TO
21768: IFFALSE 21795
// if Prob ( 60 ) then
21770: LD_INT 60
21772: PPUSH
21773: CALL_OW 13
21777: IFFALSE 21793
// SetSide ( i , side ) ;
21779: LD_VAR 0 1
21783: PPUSH
21784: LD_VAR 0 3
21788: PPUSH
21789: CALL_OW 235
21793: GO 21767
21795: POP
21796: POP
// end ;
21797: PPOPN 3
21799: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21800: LD_EXP 49
21804: PUSH
21805: LD_EXP 62
21809: AND
21810: IFFALSE 21929
21812: GO 21814
21814: DISABLE
21815: LD_INT 0
21817: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21818: LD_ADDR_VAR 0 1
21822: PUSH
21823: LD_INT 22
21825: PUSH
21826: LD_OWVAR 2
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 21
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: LD_INT 23
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: PPUSH
21867: CALL_OW 69
21871: PUSH
21872: FOR_IN
21873: IFFALSE 21927
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21875: LD_VAR 0 1
21879: PPUSH
21880: CALL_OW 257
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: LD_INT 3
21893: PUSH
21894: LD_INT 4
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: IN
21903: IFFALSE 21925
// SetClass ( un , rand ( 1 , 4 ) ) ;
21905: LD_VAR 0 1
21909: PPUSH
21910: LD_INT 1
21912: PPUSH
21913: LD_INT 4
21915: PPUSH
21916: CALL_OW 12
21920: PPUSH
21921: CALL_OW 336
21925: GO 21872
21927: POP
21928: POP
// end ;
21929: PPOPN 1
21931: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21932: LD_EXP 49
21936: PUSH
21937: LD_EXP 61
21941: AND
21942: IFFALSE 22021
21944: GO 21946
21946: DISABLE
21947: LD_INT 0
21949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21950: LD_ADDR_VAR 0 1
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 21
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: ST_TO_ADDR
// if not tmp then
21986: LD_VAR 0 1
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21995: LD_VAR 0 1
21999: PUSH
22000: LD_INT 1
22002: PPUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 12
22012: ARRAY
22013: PPUSH
22014: LD_INT 100
22016: PPUSH
22017: CALL_OW 234
// end ;
22021: PPOPN 1
22023: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22024: LD_EXP 49
22028: PUSH
22029: LD_EXP 63
22033: AND
22034: IFFALSE 22132
22036: GO 22038
22038: DISABLE
22039: LD_INT 0
22041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22042: LD_ADDR_VAR 0 1
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_OWVAR 2
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: CALL_OW 69
22077: ST_TO_ADDR
// if not tmp then
22078: LD_VAR 0 1
22082: NOT
22083: IFFALSE 22087
// exit ;
22085: GO 22132
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22087: LD_VAR 0 1
22091: PUSH
22092: LD_INT 1
22094: PPUSH
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 12
22104: ARRAY
22105: PPUSH
22106: LD_INT 1
22108: PPUSH
22109: LD_INT 4
22111: PPUSH
22112: CALL_OW 12
22116: PPUSH
22117: LD_INT 3000
22119: PPUSH
22120: LD_INT 9000
22122: PPUSH
22123: CALL_OW 12
22127: PPUSH
22128: CALL_OW 492
// end ;
22132: PPOPN 1
22134: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22135: LD_EXP 49
22139: PUSH
22140: LD_EXP 64
22144: AND
22145: IFFALSE 22165
22147: GO 22149
22149: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22150: LD_INT 1
22152: PPUSH
22153: LD_OWVAR 2
22157: PPUSH
22158: LD_INT 0
22160: PPUSH
22161: CALL_OW 324
22165: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22166: LD_EXP 49
22170: PUSH
22171: LD_EXP 65
22175: AND
22176: IFFALSE 22259
22178: GO 22180
22180: DISABLE
22181: LD_INT 0
22183: PPUSH
22184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22185: LD_ADDR_VAR 0 2
22189: PUSH
22190: LD_INT 22
22192: PUSH
22193: LD_OWVAR 2
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 21
22204: PUSH
22205: LD_INT 3
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 69
22220: ST_TO_ADDR
// if not tmp then
22221: LD_VAR 0 2
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22259
// for i in tmp do
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_VAR 0 2
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22257
// SetBLevel ( i , 10 ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_INT 10
22250: PPUSH
22251: CALL_OW 241
22255: GO 22240
22257: POP
22258: POP
// end ;
22259: PPOPN 2
22261: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22262: LD_EXP 49
22266: PUSH
22267: LD_EXP 66
22271: AND
22272: IFFALSE 22383
22274: GO 22276
22276: DISABLE
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22282: LD_ADDR_VAR 0 3
22286: PUSH
22287: LD_INT 22
22289: PUSH
22290: LD_OWVAR 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 25
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PPUSH
22313: CALL_OW 69
22317: ST_TO_ADDR
// if not tmp then
22318: LD_VAR 0 3
22322: NOT
22323: IFFALSE 22327
// exit ;
22325: GO 22383
// un := tmp [ rand ( 1 , tmp ) ] ;
22327: LD_ADDR_VAR 0 2
22331: PUSH
22332: LD_VAR 0 3
22336: PUSH
22337: LD_INT 1
22339: PPUSH
22340: LD_VAR 0 3
22344: PPUSH
22345: CALL_OW 12
22349: ARRAY
22350: ST_TO_ADDR
// if Crawls ( un ) then
22351: LD_VAR 0 2
22355: PPUSH
22356: CALL_OW 318
22360: IFFALSE 22371
// ComWalk ( un ) ;
22362: LD_VAR 0 2
22366: PPUSH
22367: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22371: LD_VAR 0 2
22375: PPUSH
22376: LD_INT 5
22378: PPUSH
22379: CALL_OW 336
// end ;
22383: PPOPN 3
22385: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22386: LD_EXP 49
22390: PUSH
22391: LD_EXP 67
22395: AND
22396: PUSH
22397: LD_OWVAR 67
22401: PUSH
22402: LD_INT 3
22404: LESS
22405: AND
22406: IFFALSE 22425
22408: GO 22410
22410: DISABLE
// Difficulty := Difficulty + 1 ;
22411: LD_ADDR_OWVAR 67
22415: PUSH
22416: LD_OWVAR 67
22420: PUSH
22421: LD_INT 1
22423: PLUS
22424: ST_TO_ADDR
22425: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22426: LD_EXP 49
22430: PUSH
22431: LD_EXP 68
22435: AND
22436: IFFALSE 22539
22438: GO 22440
22440: DISABLE
22441: LD_INT 0
22443: PPUSH
// begin for i := 1 to 5 do
22444: LD_ADDR_VAR 0 1
22448: PUSH
22449: DOUBLE
22450: LD_INT 1
22452: DEC
22453: ST_TO_ADDR
22454: LD_INT 5
22456: PUSH
22457: FOR_TO
22458: IFFALSE 22537
// begin uc_nation := nation_nature ;
22460: LD_ADDR_OWVAR 21
22464: PUSH
22465: LD_INT 0
22467: ST_TO_ADDR
// uc_side := 0 ;
22468: LD_ADDR_OWVAR 20
22472: PUSH
22473: LD_INT 0
22475: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22476: LD_ADDR_OWVAR 29
22480: PUSH
22481: LD_INT 12
22483: PUSH
22484: LD_INT 12
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: ST_TO_ADDR
// hc_agressivity := 20 ;
22491: LD_ADDR_OWVAR 35
22495: PUSH
22496: LD_INT 20
22498: ST_TO_ADDR
// hc_class := class_tiger ;
22499: LD_ADDR_OWVAR 28
22503: PUSH
22504: LD_INT 14
22506: ST_TO_ADDR
// hc_gallery :=  ;
22507: LD_ADDR_OWVAR 33
22511: PUSH
22512: LD_STRING 
22514: ST_TO_ADDR
// hc_name :=  ;
22515: LD_ADDR_OWVAR 26
22519: PUSH
22520: LD_STRING 
22522: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22523: CALL_OW 44
22527: PPUSH
22528: LD_INT 0
22530: PPUSH
22531: CALL_OW 51
// end ;
22535: GO 22457
22537: POP
22538: POP
// end ;
22539: PPOPN 1
22541: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22542: LD_EXP 49
22546: PUSH
22547: LD_EXP 69
22551: AND
22552: IFFALSE 22561
22554: GO 22556
22556: DISABLE
// StreamSibBomb ;
22557: CALL 22562 0 0
22561: END
// export function StreamSibBomb ; var i , x , y ; begin
22562: LD_INT 0
22564: PPUSH
22565: PPUSH
22566: PPUSH
22567: PPUSH
// result := false ;
22568: LD_ADDR_VAR 0 1
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// for i := 1 to 16 do
22576: LD_ADDR_VAR 0 2
22580: PUSH
22581: DOUBLE
22582: LD_INT 1
22584: DEC
22585: ST_TO_ADDR
22586: LD_INT 16
22588: PUSH
22589: FOR_TO
22590: IFFALSE 22789
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22592: LD_ADDR_VAR 0 3
22596: PUSH
22597: LD_INT 10
22599: PUSH
22600: LD_INT 20
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 40
22608: PUSH
22609: LD_INT 50
22611: PUSH
22612: LD_INT 60
22614: PUSH
22615: LD_INT 70
22617: PUSH
22618: LD_INT 80
22620: PUSH
22621: LD_INT 90
22623: PUSH
22624: LD_INT 100
22626: PUSH
22627: LD_INT 110
22629: PUSH
22630: LD_INT 120
22632: PUSH
22633: LD_INT 130
22635: PUSH
22636: LD_INT 140
22638: PUSH
22639: LD_INT 150
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 1
22661: PPUSH
22662: LD_INT 15
22664: PPUSH
22665: CALL_OW 12
22669: ARRAY
22670: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22671: LD_ADDR_VAR 0 4
22675: PUSH
22676: LD_INT 10
22678: PUSH
22679: LD_INT 20
22681: PUSH
22682: LD_INT 30
22684: PUSH
22685: LD_INT 40
22687: PUSH
22688: LD_INT 50
22690: PUSH
22691: LD_INT 60
22693: PUSH
22694: LD_INT 70
22696: PUSH
22697: LD_INT 80
22699: PUSH
22700: LD_INT 90
22702: PUSH
22703: LD_INT 100
22705: PUSH
22706: LD_INT 110
22708: PUSH
22709: LD_INT 120
22711: PUSH
22712: LD_INT 130
22714: PUSH
22715: LD_INT 140
22717: PUSH
22718: LD_INT 150
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 1
22740: PPUSH
22741: LD_INT 15
22743: PPUSH
22744: CALL_OW 12
22748: ARRAY
22749: ST_TO_ADDR
// if ValidHex ( x , y ) then
22750: LD_VAR 0 3
22754: PPUSH
22755: LD_VAR 0 4
22759: PPUSH
22760: CALL_OW 488
22764: IFFALSE 22787
// begin result := [ x , y ] ;
22766: LD_ADDR_VAR 0 1
22770: PUSH
22771: LD_VAR 0 3
22775: PUSH
22776: LD_VAR 0 4
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: ST_TO_ADDR
// break ;
22785: GO 22789
// end ; end ;
22787: GO 22589
22789: POP
22790: POP
// if result then
22791: LD_VAR 0 1
22795: IFFALSE 22855
// begin ToLua ( playSibBomb() ) ;
22797: LD_STRING playSibBomb()
22799: PPUSH
22800: CALL_OW 559
// wait ( 0 0$14 ) ;
22804: LD_INT 490
22806: PPUSH
22807: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22811: LD_VAR 0 1
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: PPUSH
22820: LD_VAR 0 1
22824: PUSH
22825: LD_INT 2
22827: ARRAY
22828: PPUSH
22829: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22833: LD_VAR 0 1
22837: PUSH
22838: LD_INT 1
22840: ARRAY
22841: PPUSH
22842: LD_VAR 0 1
22846: PUSH
22847: LD_INT 2
22849: ARRAY
22850: PPUSH
22851: CALL_OW 429
// end ; end ;
22855: LD_VAR 0 1
22859: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22860: LD_EXP 49
22864: PUSH
22865: LD_EXP 71
22869: AND
22870: IFFALSE 22882
22872: GO 22874
22874: DISABLE
// YouLost (  ) ;
22875: LD_STRING 
22877: PPUSH
22878: CALL_OW 104
22882: END
// every 0 0$1 trigger StreamModeActive and sFog do
22883: LD_EXP 49
22887: PUSH
22888: LD_EXP 70
22892: AND
22893: IFFALSE 22907
22895: GO 22897
22897: DISABLE
// FogOff ( your_side ) ;
22898: LD_OWVAR 2
22902: PPUSH
22903: CALL_OW 344
22907: END
// every 0 0$1 trigger StreamModeActive and sSun do
22908: LD_EXP 49
22912: PUSH
22913: LD_EXP 72
22917: AND
22918: IFFALSE 22946
22920: GO 22922
22922: DISABLE
// begin solar_recharge_percent := 0 ;
22923: LD_ADDR_OWVAR 79
22927: PUSH
22928: LD_INT 0
22930: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22931: LD_INT 10500
22933: PPUSH
22934: CALL_OW 67
// solar_recharge_percent := 100 ;
22938: LD_ADDR_OWVAR 79
22942: PUSH
22943: LD_INT 100
22945: ST_TO_ADDR
// end ;
22946: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22947: LD_EXP 49
22951: PUSH
22952: LD_EXP 73
22956: AND
22957: IFFALSE 23196
22959: GO 22961
22961: DISABLE
22962: LD_INT 0
22964: PPUSH
22965: PPUSH
22966: PPUSH
// begin tmp := [ ] ;
22967: LD_ADDR_VAR 0 3
22971: PUSH
22972: EMPTY
22973: ST_TO_ADDR
// for i := 1 to 6 do
22974: LD_ADDR_VAR 0 1
22978: PUSH
22979: DOUBLE
22980: LD_INT 1
22982: DEC
22983: ST_TO_ADDR
22984: LD_INT 6
22986: PUSH
22987: FOR_TO
22988: IFFALSE 23093
// begin uc_nation := nation_nature ;
22990: LD_ADDR_OWVAR 21
22994: PUSH
22995: LD_INT 0
22997: ST_TO_ADDR
// uc_side := 0 ;
22998: LD_ADDR_OWVAR 20
23002: PUSH
23003: LD_INT 0
23005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23006: LD_ADDR_OWVAR 29
23010: PUSH
23011: LD_INT 12
23013: PUSH
23014: LD_INT 12
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// hc_agressivity := 20 ;
23021: LD_ADDR_OWVAR 35
23025: PUSH
23026: LD_INT 20
23028: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23029: LD_ADDR_OWVAR 28
23033: PUSH
23034: LD_INT 17
23036: ST_TO_ADDR
// hc_gallery :=  ;
23037: LD_ADDR_OWVAR 33
23041: PUSH
23042: LD_STRING 
23044: ST_TO_ADDR
// hc_name :=  ;
23045: LD_ADDR_OWVAR 26
23049: PUSH
23050: LD_STRING 
23052: ST_TO_ADDR
// un := CreateHuman ;
23053: LD_ADDR_VAR 0 2
23057: PUSH
23058: CALL_OW 44
23062: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23063: LD_VAR 0 2
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 51
// tmp := tmp ^ un ;
23075: LD_ADDR_VAR 0 3
23079: PUSH
23080: LD_VAR 0 3
23084: PUSH
23085: LD_VAR 0 2
23089: ADD
23090: ST_TO_ADDR
// end ;
23091: GO 22987
23093: POP
23094: POP
// repeat wait ( 0 0$1 ) ;
23095: LD_INT 35
23097: PPUSH
23098: CALL_OW 67
// for un in tmp do
23102: LD_ADDR_VAR 0 2
23106: PUSH
23107: LD_VAR 0 3
23111: PUSH
23112: FOR_IN
23113: IFFALSE 23187
// begin if IsDead ( un ) then
23115: LD_VAR 0 2
23119: PPUSH
23120: CALL_OW 301
23124: IFFALSE 23144
// begin tmp := tmp diff un ;
23126: LD_ADDR_VAR 0 3
23130: PUSH
23131: LD_VAR 0 3
23135: PUSH
23136: LD_VAR 0 2
23140: DIFF
23141: ST_TO_ADDR
// continue ;
23142: GO 23112
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23144: LD_VAR 0 2
23148: PPUSH
23149: LD_INT 3
23151: PUSH
23152: LD_INT 22
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PPUSH
23166: CALL_OW 69
23170: PPUSH
23171: LD_VAR 0 2
23175: PPUSH
23176: CALL_OW 74
23180: PPUSH
23181: CALL_OW 115
// end ;
23185: GO 23112
23187: POP
23188: POP
// until not tmp ;
23189: LD_VAR 0 3
23193: NOT
23194: IFFALSE 23095
// end ;
23196: PPOPN 3
23198: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23199: LD_EXP 49
23203: PUSH
23204: LD_EXP 74
23208: AND
23209: IFFALSE 23263
23211: GO 23213
23213: DISABLE
// begin ToLua ( displayTroll(); ) ;
23214: LD_STRING displayTroll();
23216: PPUSH
23217: CALL_OW 559
// wait ( 3 3$00 ) ;
23221: LD_INT 6300
23223: PPUSH
23224: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23228: LD_STRING hideTroll();
23230: PPUSH
23231: CALL_OW 559
// wait ( 1 1$00 ) ;
23235: LD_INT 2100
23237: PPUSH
23238: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23242: LD_STRING displayTroll();
23244: PPUSH
23245: CALL_OW 559
// wait ( 1 1$00 ) ;
23249: LD_INT 2100
23251: PPUSH
23252: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23256: LD_STRING hideTroll();
23258: PPUSH
23259: CALL_OW 559
// end ;
23263: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23264: LD_EXP 49
23268: PUSH
23269: LD_EXP 75
23273: AND
23274: IFFALSE 23337
23276: GO 23278
23278: DISABLE
23279: LD_INT 0
23281: PPUSH
// begin p := 0 ;
23282: LD_ADDR_VAR 0 1
23286: PUSH
23287: LD_INT 0
23289: ST_TO_ADDR
// repeat game_speed := 1 ;
23290: LD_ADDR_OWVAR 65
23294: PUSH
23295: LD_INT 1
23297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23298: LD_INT 35
23300: PPUSH
23301: CALL_OW 67
// p := p + 1 ;
23305: LD_ADDR_VAR 0 1
23309: PUSH
23310: LD_VAR 0 1
23314: PUSH
23315: LD_INT 1
23317: PLUS
23318: ST_TO_ADDR
// until p >= 60 ;
23319: LD_VAR 0 1
23323: PUSH
23324: LD_INT 60
23326: GREATEREQUAL
23327: IFFALSE 23290
// game_speed := 4 ;
23329: LD_ADDR_OWVAR 65
23333: PUSH
23334: LD_INT 4
23336: ST_TO_ADDR
// end ;
23337: PPOPN 1
23339: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23340: LD_EXP 49
23344: PUSH
23345: LD_EXP 76
23349: AND
23350: IFFALSE 23496
23352: GO 23354
23354: DISABLE
23355: LD_INT 0
23357: PPUSH
23358: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23359: LD_ADDR_VAR 0 1
23363: PUSH
23364: LD_INT 22
23366: PUSH
23367: LD_OWVAR 2
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 30
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 30
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PPUSH
23408: CALL_OW 69
23412: ST_TO_ADDR
// if not depot then
23413: LD_VAR 0 1
23417: NOT
23418: IFFALSE 23422
// exit ;
23420: GO 23496
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23422: LD_ADDR_VAR 0 2
23426: PUSH
23427: LD_VAR 0 1
23431: PUSH
23432: LD_INT 1
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 12
23444: ARRAY
23445: PPUSH
23446: CALL_OW 274
23450: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23451: LD_VAR 0 2
23455: PPUSH
23456: LD_INT 1
23458: PPUSH
23459: LD_INT 0
23461: PPUSH
23462: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23466: LD_VAR 0 2
23470: PPUSH
23471: LD_INT 2
23473: PPUSH
23474: LD_INT 0
23476: PPUSH
23477: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_INT 3
23488: PPUSH
23489: LD_INT 0
23491: PPUSH
23492: CALL_OW 277
// end ;
23496: PPOPN 2
23498: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23499: LD_EXP 49
23503: PUSH
23504: LD_EXP 77
23508: AND
23509: IFFALSE 23606
23511: GO 23513
23513: DISABLE
23514: LD_INT 0
23516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23517: LD_ADDR_VAR 0 1
23521: PUSH
23522: LD_INT 22
23524: PUSH
23525: LD_OWVAR 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 3
23546: PUSH
23547: LD_INT 23
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: PPUSH
23566: CALL_OW 69
23570: ST_TO_ADDR
// if not tmp then
23571: LD_VAR 0 1
23575: NOT
23576: IFFALSE 23580
// exit ;
23578: GO 23606
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23580: LD_VAR 0 1
23584: PUSH
23585: LD_INT 1
23587: PPUSH
23588: LD_VAR 0 1
23592: PPUSH
23593: CALL_OW 12
23597: ARRAY
23598: PPUSH
23599: LD_INT 200
23601: PPUSH
23602: CALL_OW 234
// end ;
23606: PPOPN 1
23608: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23609: LD_EXP 49
23613: PUSH
23614: LD_EXP 78
23618: AND
23619: IFFALSE 23698
23621: GO 23623
23623: DISABLE
23624: LD_INT 0
23626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23627: LD_ADDR_VAR 0 1
23631: PUSH
23632: LD_INT 22
23634: PUSH
23635: LD_OWVAR 2
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 21
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PPUSH
23658: CALL_OW 69
23662: ST_TO_ADDR
// if not tmp then
23663: LD_VAR 0 1
23667: NOT
23668: IFFALSE 23672
// exit ;
23670: GO 23698
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23672: LD_VAR 0 1
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 1
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: PPUSH
23691: LD_INT 60
23693: PPUSH
23694: CALL_OW 234
// end ;
23698: PPOPN 1
23700: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23701: LD_EXP 49
23705: PUSH
23706: LD_EXP 79
23710: AND
23711: IFFALSE 23810
23713: GO 23715
23715: DISABLE
23716: LD_INT 0
23718: PPUSH
23719: PPUSH
// begin enable ;
23720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23721: LD_ADDR_VAR 0 1
23725: PUSH
23726: LD_INT 22
23728: PUSH
23729: LD_OWVAR 2
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 61
23740: PUSH
23741: EMPTY
23742: LIST
23743: PUSH
23744: LD_INT 33
23746: PUSH
23747: LD_INT 2
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: PPUSH
23759: CALL_OW 69
23763: ST_TO_ADDR
// if not tmp then
23764: LD_VAR 0 1
23768: NOT
23769: IFFALSE 23773
// exit ;
23771: GO 23810
// for i in tmp do
23773: LD_ADDR_VAR 0 2
23777: PUSH
23778: LD_VAR 0 1
23782: PUSH
23783: FOR_IN
23784: IFFALSE 23808
// if IsControledBy ( i ) then
23786: LD_VAR 0 2
23790: PPUSH
23791: CALL_OW 312
23795: IFFALSE 23806
// ComUnlink ( i ) ;
23797: LD_VAR 0 2
23801: PPUSH
23802: CALL_OW 136
23806: GO 23783
23808: POP
23809: POP
// end ;
23810: PPOPN 2
23812: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23813: LD_EXP 49
23817: PUSH
23818: LD_EXP 80
23822: AND
23823: IFFALSE 23963
23825: GO 23827
23827: DISABLE
23828: LD_INT 0
23830: PPUSH
23831: PPUSH
// begin ToLua ( displayPowell(); ) ;
23832: LD_STRING displayPowell();
23834: PPUSH
23835: CALL_OW 559
// uc_side := 0 ;
23839: LD_ADDR_OWVAR 20
23843: PUSH
23844: LD_INT 0
23846: ST_TO_ADDR
// uc_nation := 2 ;
23847: LD_ADDR_OWVAR 21
23851: PUSH
23852: LD_INT 2
23854: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23855: LD_ADDR_OWVAR 37
23859: PUSH
23860: LD_INT 14
23862: ST_TO_ADDR
// vc_engine := engine_siberite ;
23863: LD_ADDR_OWVAR 39
23867: PUSH
23868: LD_INT 3
23870: ST_TO_ADDR
// vc_control := control_apeman ;
23871: LD_ADDR_OWVAR 38
23875: PUSH
23876: LD_INT 5
23878: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23879: LD_ADDR_OWVAR 40
23883: PUSH
23884: LD_INT 29
23886: ST_TO_ADDR
// un := CreateVehicle ;
23887: LD_ADDR_VAR 0 2
23891: PUSH
23892: CALL_OW 45
23896: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23897: LD_VAR 0 2
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23909: LD_INT 35
23911: PPUSH
23912: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23916: LD_VAR 0 2
23920: PPUSH
23921: LD_INT 22
23923: PUSH
23924: LD_OWVAR 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PPUSH
23933: CALL_OW 69
23937: PPUSH
23938: LD_VAR 0 2
23942: PPUSH
23943: CALL_OW 74
23947: PPUSH
23948: CALL_OW 115
// until IsDead ( un ) ;
23952: LD_VAR 0 2
23956: PPUSH
23957: CALL_OW 301
23961: IFFALSE 23909
// end ;
23963: PPOPN 2
23965: END
// every 0 0$1 trigger StreamModeActive and sStu do
23966: LD_EXP 49
23970: PUSH
23971: LD_EXP 88
23975: AND
23976: IFFALSE 23992
23978: GO 23980
23980: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23981: LD_STRING displayStucuk();
23983: PPUSH
23984: CALL_OW 559
// ResetFog ;
23988: CALL_OW 335
// end ;
23992: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23993: LD_EXP 49
23997: PUSH
23998: LD_EXP 81
24002: AND
24003: IFFALSE 24144
24005: GO 24007
24007: DISABLE
24008: LD_INT 0
24010: PPUSH
24011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24012: LD_ADDR_VAR 0 2
24016: PUSH
24017: LD_INT 22
24019: PUSH
24020: LD_OWVAR 2
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 21
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PPUSH
24043: CALL_OW 69
24047: ST_TO_ADDR
// if not tmp then
24048: LD_VAR 0 2
24052: NOT
24053: IFFALSE 24057
// exit ;
24055: GO 24144
// un := tmp [ rand ( 1 , tmp ) ] ;
24057: LD_ADDR_VAR 0 1
24061: PUSH
24062: LD_VAR 0 2
24066: PUSH
24067: LD_INT 1
24069: PPUSH
24070: LD_VAR 0 2
24074: PPUSH
24075: CALL_OW 12
24079: ARRAY
24080: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24081: LD_VAR 0 1
24085: PPUSH
24086: LD_INT 0
24088: PPUSH
24089: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24093: LD_VAR 0 1
24097: PPUSH
24098: LD_OWVAR 3
24102: PUSH
24103: LD_VAR 0 1
24107: DIFF
24108: PPUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: CALL_OW 74
24118: PPUSH
24119: CALL_OW 115
// wait ( 0 0$20 ) ;
24123: LD_INT 700
24125: PPUSH
24126: CALL_OW 67
// SetSide ( un , your_side ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_OWVAR 2
24139: PPUSH
24140: CALL_OW 235
// end ;
24144: PPOPN 2
24146: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24147: LD_EXP 49
24151: PUSH
24152: LD_EXP 82
24156: AND
24157: IFFALSE 24263
24159: GO 24161
24161: DISABLE
24162: LD_INT 0
24164: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24165: LD_ADDR_VAR 0 1
24169: PUSH
24170: LD_INT 22
24172: PUSH
24173: LD_OWVAR 2
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: LD_INT 30
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 30
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PPUSH
24214: CALL_OW 69
24218: ST_TO_ADDR
// if not depot then
24219: LD_VAR 0 1
24223: NOT
24224: IFFALSE 24228
// exit ;
24226: GO 24263
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24228: LD_VAR 0 1
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: PPUSH
24237: CALL_OW 250
24241: PPUSH
24242: LD_VAR 0 1
24246: PUSH
24247: LD_INT 1
24249: ARRAY
24250: PPUSH
24251: CALL_OW 251
24255: PPUSH
24256: LD_INT 70
24258: PPUSH
24259: CALL_OW 495
// end ;
24263: PPOPN 1
24265: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24266: LD_EXP 49
24270: PUSH
24271: LD_EXP 83
24275: AND
24276: IFFALSE 24487
24278: GO 24280
24280: DISABLE
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24288: LD_ADDR_VAR 0 5
24292: PUSH
24293: LD_INT 22
24295: PUSH
24296: LD_OWVAR 2
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 21
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PPUSH
24319: CALL_OW 69
24323: ST_TO_ADDR
// if not tmp then
24324: LD_VAR 0 5
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24487
// for i in tmp do
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: LD_VAR 0 5
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24485
// begin d := rand ( 0 , 5 ) ;
24346: LD_ADDR_VAR 0 4
24350: PUSH
24351: LD_INT 0
24353: PPUSH
24354: LD_INT 5
24356: PPUSH
24357: CALL_OW 12
24361: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24362: LD_ADDR_VAR 0 2
24366: PUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 250
24376: PPUSH
24377: LD_VAR 0 4
24381: PPUSH
24382: LD_INT 3
24384: PPUSH
24385: LD_INT 12
24387: PPUSH
24388: CALL_OW 12
24392: PPUSH
24393: CALL_OW 272
24397: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 251
24412: PPUSH
24413: LD_VAR 0 4
24417: PPUSH
24418: LD_INT 3
24420: PPUSH
24421: LD_INT 12
24423: PPUSH
24424: CALL_OW 12
24428: PPUSH
24429: CALL_OW 273
24433: ST_TO_ADDR
// if ValidHex ( x , y ) then
24434: LD_VAR 0 2
24438: PPUSH
24439: LD_VAR 0 3
24443: PPUSH
24444: CALL_OW 488
24448: IFFALSE 24483
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24450: LD_VAR 0 1
24454: PPUSH
24455: LD_VAR 0 2
24459: PPUSH
24460: LD_VAR 0 3
24464: PPUSH
24465: LD_INT 3
24467: PPUSH
24468: LD_INT 6
24470: PPUSH
24471: CALL_OW 12
24475: PPUSH
24476: LD_INT 1
24478: PPUSH
24479: CALL_OW 483
// end ;
24483: GO 24343
24485: POP
24486: POP
// end ;
24487: PPOPN 5
24489: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24490: LD_EXP 49
24494: PUSH
24495: LD_EXP 84
24499: AND
24500: IFFALSE 24594
24502: GO 24504
24504: DISABLE
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24509: LD_ADDR_VAR 0 2
24513: PUSH
24514: LD_INT 22
24516: PUSH
24517: LD_OWVAR 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 32
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 21
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: PPUSH
24551: CALL_OW 69
24555: ST_TO_ADDR
// if not tmp then
24556: LD_VAR 0 2
24560: NOT
24561: IFFALSE 24565
// exit ;
24563: GO 24594
// for i in tmp do
24565: LD_ADDR_VAR 0 1
24569: PUSH
24570: LD_VAR 0 2
24574: PUSH
24575: FOR_IN
24576: IFFALSE 24592
// SetFuel ( i , 0 ) ;
24578: LD_VAR 0 1
24582: PPUSH
24583: LD_INT 0
24585: PPUSH
24586: CALL_OW 240
24590: GO 24575
24592: POP
24593: POP
// end ;
24594: PPOPN 2
24596: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24597: LD_EXP 49
24601: PUSH
24602: LD_EXP 85
24606: AND
24607: IFFALSE 24673
24609: GO 24611
24611: DISABLE
24612: LD_INT 0
24614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24615: LD_ADDR_VAR 0 1
24619: PUSH
24620: LD_INT 22
24622: PUSH
24623: LD_OWVAR 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 30
24634: PUSH
24635: LD_INT 29
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 69
24650: ST_TO_ADDR
// if not tmp then
24651: LD_VAR 0 1
24655: NOT
24656: IFFALSE 24660
// exit ;
24658: GO 24673
// DestroyUnit ( tmp [ 1 ] ) ;
24660: LD_VAR 0 1
24664: PUSH
24665: LD_INT 1
24667: ARRAY
24668: PPUSH
24669: CALL_OW 65
// end ;
24673: PPOPN 1
24675: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24676: LD_EXP 49
24680: PUSH
24681: LD_EXP 87
24685: AND
24686: IFFALSE 24815
24688: GO 24690
24690: DISABLE
24691: LD_INT 0
24693: PPUSH
// begin uc_side := 0 ;
24694: LD_ADDR_OWVAR 20
24698: PUSH
24699: LD_INT 0
24701: ST_TO_ADDR
// uc_nation := nation_arabian ;
24702: LD_ADDR_OWVAR 21
24706: PUSH
24707: LD_INT 2
24709: ST_TO_ADDR
// hc_gallery :=  ;
24710: LD_ADDR_OWVAR 33
24714: PUSH
24715: LD_STRING 
24717: ST_TO_ADDR
// hc_name :=  ;
24718: LD_ADDR_OWVAR 26
24722: PUSH
24723: LD_STRING 
24725: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24726: LD_INT 1
24728: PPUSH
24729: LD_INT 11
24731: PPUSH
24732: LD_INT 10
24734: PPUSH
24735: CALL_OW 380
// un := CreateHuman ;
24739: LD_ADDR_VAR 0 1
24743: PUSH
24744: CALL_OW 44
24748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24749: LD_VAR 0 1
24753: PPUSH
24754: LD_INT 1
24756: PPUSH
24757: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24761: LD_INT 35
24763: PPUSH
24764: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24768: LD_VAR 0 1
24772: PPUSH
24773: LD_INT 22
24775: PUSH
24776: LD_OWVAR 2
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: PPUSH
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL_OW 74
24799: PPUSH
24800: CALL_OW 115
// until IsDead ( un ) ;
24804: LD_VAR 0 1
24808: PPUSH
24809: CALL_OW 301
24813: IFFALSE 24761
// end ;
24815: PPOPN 1
24817: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24818: LD_EXP 49
24822: PUSH
24823: LD_EXP 89
24827: AND
24828: IFFALSE 24840
24830: GO 24832
24832: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24833: LD_STRING earthquake(getX(game), 0, 32)
24835: PPUSH
24836: CALL_OW 559
24840: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24841: LD_EXP 49
24845: PUSH
24846: LD_EXP 90
24850: AND
24851: IFFALSE 24942
24853: GO 24855
24855: DISABLE
24856: LD_INT 0
24858: PPUSH
// begin enable ;
24859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24860: LD_ADDR_VAR 0 1
24864: PUSH
24865: LD_INT 22
24867: PUSH
24868: LD_OWVAR 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 21
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 33
24889: PUSH
24890: LD_INT 3
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: PPUSH
24902: CALL_OW 69
24906: ST_TO_ADDR
// if not tmp then
24907: LD_VAR 0 1
24911: NOT
24912: IFFALSE 24916
// exit ;
24914: GO 24942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24916: LD_VAR 0 1
24920: PUSH
24921: LD_INT 1
24923: PPUSH
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 12
24933: ARRAY
24934: PPUSH
24935: LD_INT 1
24937: PPUSH
24938: CALL_OW 234
// end ;
24942: PPOPN 1
24944: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24945: LD_EXP 49
24949: PUSH
24950: LD_EXP 91
24954: AND
24955: IFFALSE 25096
24957: GO 24959
24959: DISABLE
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
24964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 25
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: ST_TO_ADDR
// if not tmp then
25001: LD_VAR 0 3
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25096
// un := tmp [ rand ( 1 , tmp ) ] ;
25010: LD_ADDR_VAR 0 2
25014: PUSH
25015: LD_VAR 0 3
25019: PUSH
25020: LD_INT 1
25022: PPUSH
25023: LD_VAR 0 3
25027: PPUSH
25028: CALL_OW 12
25032: ARRAY
25033: ST_TO_ADDR
// if Crawls ( un ) then
25034: LD_VAR 0 2
25038: PPUSH
25039: CALL_OW 318
25043: IFFALSE 25054
// ComWalk ( un ) ;
25045: LD_VAR 0 2
25049: PPUSH
25050: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25054: LD_VAR 0 2
25058: PPUSH
25059: LD_INT 9
25061: PPUSH
25062: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25066: LD_INT 28
25068: PPUSH
25069: LD_OWVAR 2
25073: PPUSH
25074: LD_INT 2
25076: PPUSH
25077: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25081: LD_INT 29
25083: PPUSH
25084: LD_OWVAR 2
25088: PPUSH
25089: LD_INT 2
25091: PPUSH
25092: CALL_OW 322
// end ;
25096: PPOPN 3
25098: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25099: LD_EXP 49
25103: PUSH
25104: LD_EXP 92
25108: AND
25109: IFFALSE 25220
25111: GO 25113
25113: DISABLE
25114: LD_INT 0
25116: PPUSH
25117: PPUSH
25118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25119: LD_ADDR_VAR 0 3
25123: PUSH
25124: LD_INT 22
25126: PUSH
25127: LD_OWVAR 2
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 25
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PPUSH
25150: CALL_OW 69
25154: ST_TO_ADDR
// if not tmp then
25155: LD_VAR 0 3
25159: NOT
25160: IFFALSE 25164
// exit ;
25162: GO 25220
// un := tmp [ rand ( 1 , tmp ) ] ;
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_INT 1
25176: PPUSH
25177: LD_VAR 0 3
25181: PPUSH
25182: CALL_OW 12
25186: ARRAY
25187: ST_TO_ADDR
// if Crawls ( un ) then
25188: LD_VAR 0 2
25192: PPUSH
25193: CALL_OW 318
25197: IFFALSE 25208
// ComWalk ( un ) ;
25199: LD_VAR 0 2
25203: PPUSH
25204: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25208: LD_VAR 0 2
25212: PPUSH
25213: LD_INT 8
25215: PPUSH
25216: CALL_OW 336
// end ;
25220: PPOPN 3
25222: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25223: LD_EXP 49
25227: PUSH
25228: LD_EXP 93
25232: AND
25233: IFFALSE 25377
25235: GO 25237
25237: DISABLE
25238: LD_INT 0
25240: PPUSH
25241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25242: LD_ADDR_VAR 0 2
25246: PUSH
25247: LD_INT 22
25249: PUSH
25250: LD_OWVAR 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 21
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: LD_INT 34
25274: PUSH
25275: LD_INT 12
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 34
25284: PUSH
25285: LD_INT 51
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 34
25294: PUSH
25295: LD_INT 32
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: PPUSH
25313: CALL_OW 69
25317: ST_TO_ADDR
// if not tmp then
25318: LD_VAR 0 2
25322: NOT
25323: IFFALSE 25327
// exit ;
25325: GO 25377
// for i in tmp do
25327: LD_ADDR_VAR 0 1
25331: PUSH
25332: LD_VAR 0 2
25336: PUSH
25337: FOR_IN
25338: IFFALSE 25375
// if GetCargo ( i , mat_artifact ) = 0 then
25340: LD_VAR 0 1
25344: PPUSH
25345: LD_INT 4
25347: PPUSH
25348: CALL_OW 289
25352: PUSH
25353: LD_INT 0
25355: EQUAL
25356: IFFALSE 25373
// SetCargo ( i , mat_siberit , 100 ) ;
25358: LD_VAR 0 1
25362: PPUSH
25363: LD_INT 3
25365: PPUSH
25366: LD_INT 100
25368: PPUSH
25369: CALL_OW 290
25373: GO 25337
25375: POP
25376: POP
// end ;
25377: PPOPN 2
25379: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25380: LD_EXP 49
25384: PUSH
25385: LD_EXP 94
25389: AND
25390: IFFALSE 25573
25392: GO 25394
25394: DISABLE
25395: LD_INT 0
25397: PPUSH
25398: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25399: LD_ADDR_VAR 0 2
25403: PUSH
25404: LD_INT 22
25406: PUSH
25407: LD_OWVAR 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PPUSH
25416: CALL_OW 69
25420: ST_TO_ADDR
// if not tmp then
25421: LD_VAR 0 2
25425: NOT
25426: IFFALSE 25430
// exit ;
25428: GO 25573
// for i := 1 to 2 do
25430: LD_ADDR_VAR 0 1
25434: PUSH
25435: DOUBLE
25436: LD_INT 1
25438: DEC
25439: ST_TO_ADDR
25440: LD_INT 2
25442: PUSH
25443: FOR_TO
25444: IFFALSE 25571
// begin uc_side := your_side ;
25446: LD_ADDR_OWVAR 20
25450: PUSH
25451: LD_OWVAR 2
25455: ST_TO_ADDR
// uc_nation := nation_american ;
25456: LD_ADDR_OWVAR 21
25460: PUSH
25461: LD_INT 1
25463: ST_TO_ADDR
// vc_chassis := us_morphling ;
25464: LD_ADDR_OWVAR 37
25468: PUSH
25469: LD_INT 5
25471: ST_TO_ADDR
// vc_engine := engine_siberite ;
25472: LD_ADDR_OWVAR 39
25476: PUSH
25477: LD_INT 3
25479: ST_TO_ADDR
// vc_control := control_computer ;
25480: LD_ADDR_OWVAR 38
25484: PUSH
25485: LD_INT 3
25487: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25488: LD_ADDR_OWVAR 40
25492: PUSH
25493: LD_INT 10
25495: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25496: LD_VAR 0 2
25500: PUSH
25501: LD_INT 1
25503: ARRAY
25504: PPUSH
25505: CALL_OW 310
25509: NOT
25510: IFFALSE 25557
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25512: CALL_OW 45
25516: PPUSH
25517: LD_VAR 0 2
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: PPUSH
25526: CALL_OW 250
25530: PPUSH
25531: LD_VAR 0 2
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PPUSH
25540: CALL_OW 251
25544: PPUSH
25545: LD_INT 12
25547: PPUSH
25548: LD_INT 1
25550: PPUSH
25551: CALL_OW 50
25555: GO 25569
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25557: CALL_OW 45
25561: PPUSH
25562: LD_INT 1
25564: PPUSH
25565: CALL_OW 51
// end ;
25569: GO 25443
25571: POP
25572: POP
// end ;
25573: PPOPN 2
25575: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25576: LD_EXP 49
25580: PUSH
25581: LD_EXP 95
25585: AND
25586: IFFALSE 25808
25588: GO 25590
25590: DISABLE
25591: LD_INT 0
25593: PPUSH
25594: PPUSH
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25599: LD_ADDR_VAR 0 6
25603: PUSH
25604: LD_INT 22
25606: PUSH
25607: LD_OWVAR 2
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 21
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 3
25628: PUSH
25629: LD_INT 23
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: PPUSH
25648: CALL_OW 69
25652: ST_TO_ADDR
// if not tmp then
25653: LD_VAR 0 6
25657: NOT
25658: IFFALSE 25662
// exit ;
25660: GO 25808
// s1 := rand ( 1 , 4 ) ;
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_INT 1
25669: PPUSH
25670: LD_INT 4
25672: PPUSH
25673: CALL_OW 12
25677: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25678: LD_ADDR_VAR 0 4
25682: PUSH
25683: LD_VAR 0 6
25687: PUSH
25688: LD_INT 1
25690: ARRAY
25691: PPUSH
25692: LD_VAR 0 2
25696: PPUSH
25697: CALL_OW 259
25701: ST_TO_ADDR
// if s1 = 1 then
25702: LD_VAR 0 2
25706: PUSH
25707: LD_INT 1
25709: EQUAL
25710: IFFALSE 25730
// s2 := rand ( 2 , 4 ) else
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_INT 2
25719: PPUSH
25720: LD_INT 4
25722: PPUSH
25723: CALL_OW 12
25727: ST_TO_ADDR
25728: GO 25738
// s2 := 1 ;
25730: LD_ADDR_VAR 0 3
25734: PUSH
25735: LD_INT 1
25737: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25738: LD_ADDR_VAR 0 5
25742: PUSH
25743: LD_VAR 0 6
25747: PUSH
25748: LD_INT 1
25750: ARRAY
25751: PPUSH
25752: LD_VAR 0 3
25756: PPUSH
25757: CALL_OW 259
25761: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25762: LD_VAR 0 6
25766: PUSH
25767: LD_INT 1
25769: ARRAY
25770: PPUSH
25771: LD_VAR 0 2
25775: PPUSH
25776: LD_VAR 0 5
25780: PPUSH
25781: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25785: LD_VAR 0 6
25789: PUSH
25790: LD_INT 1
25792: ARRAY
25793: PPUSH
25794: LD_VAR 0 3
25798: PPUSH
25799: LD_VAR 0 4
25803: PPUSH
25804: CALL_OW 237
// end ;
25808: PPOPN 6
25810: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25811: LD_EXP 49
25815: PUSH
25816: LD_EXP 96
25820: AND
25821: IFFALSE 25900
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_INT 22
25836: PUSH
25837: LD_OWVAR 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 30
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PPUSH
25860: CALL_OW 69
25864: ST_TO_ADDR
// if not tmp then
25865: LD_VAR 0 1
25869: NOT
25870: IFFALSE 25874
// exit ;
25872: GO 25900
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 1
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 12
25891: ARRAY
25892: PPUSH
25893: LD_INT 1
25895: PPUSH
25896: CALL_OW 234
// end ;
25900: PPOPN 1
25902: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25903: LD_EXP 49
25907: PUSH
25908: LD_EXP 97
25912: AND
25913: IFFALSE 26025
25915: GO 25917
25917: DISABLE
25918: LD_INT 0
25920: PPUSH
25921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25922: LD_ADDR_VAR 0 2
25926: PUSH
25927: LD_INT 22
25929: PUSH
25930: LD_OWVAR 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: LD_INT 30
25944: PUSH
25945: LD_INT 27
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 30
25954: PUSH
25955: LD_INT 26
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 30
25964: PUSH
25965: LD_INT 28
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 69
25986: ST_TO_ADDR
// if not tmp then
25987: LD_VAR 0 2
25991: NOT
25992: IFFALSE 25996
// exit ;
25994: GO 26025
// for i in tmp do
25996: LD_ADDR_VAR 0 1
26000: PUSH
26001: LD_VAR 0 2
26005: PUSH
26006: FOR_IN
26007: IFFALSE 26023
// SetLives ( i , 1 ) ;
26009: LD_VAR 0 1
26013: PPUSH
26014: LD_INT 1
26016: PPUSH
26017: CALL_OW 234
26021: GO 26006
26023: POP
26024: POP
// end ;
26025: PPOPN 2
26027: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26028: LD_EXP 49
26032: PUSH
26033: LD_EXP 98
26037: AND
26038: IFFALSE 26312
26040: GO 26042
26042: DISABLE
26043: LD_INT 0
26045: PPUSH
26046: PPUSH
26047: PPUSH
// begin i := rand ( 1 , 7 ) ;
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: LD_INT 1
26055: PPUSH
26056: LD_INT 7
26058: PPUSH
26059: CALL_OW 12
26063: ST_TO_ADDR
// case i of 1 :
26064: LD_VAR 0 1
26068: PUSH
26069: LD_INT 1
26071: DOUBLE
26072: EQUAL
26073: IFTRUE 26077
26075: GO 26087
26077: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26078: LD_STRING earthquake(getX(game), 0, 32)
26080: PPUSH
26081: CALL_OW 559
26085: GO 26312
26087: LD_INT 2
26089: DOUBLE
26090: EQUAL
26091: IFTRUE 26095
26093: GO 26109
26095: POP
// begin ToLua ( displayStucuk(); ) ;
26096: LD_STRING displayStucuk();
26098: PPUSH
26099: CALL_OW 559
// ResetFog ;
26103: CALL_OW 335
// end ; 3 :
26107: GO 26312
26109: LD_INT 3
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26221
26117: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: LD_INT 22
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 25
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PPUSH
26149: CALL_OW 69
26153: ST_TO_ADDR
// if not tmp then
26154: LD_VAR 0 2
26158: NOT
26159: IFFALSE 26163
// exit ;
26161: GO 26312
// un := tmp [ rand ( 1 , tmp ) ] ;
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_VAR 0 2
26172: PUSH
26173: LD_INT 1
26175: PPUSH
26176: LD_VAR 0 2
26180: PPUSH
26181: CALL_OW 12
26185: ARRAY
26186: ST_TO_ADDR
// if Crawls ( un ) then
26187: LD_VAR 0 3
26191: PPUSH
26192: CALL_OW 318
26196: IFFALSE 26207
// ComWalk ( un ) ;
26198: LD_VAR 0 3
26202: PPUSH
26203: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26207: LD_VAR 0 3
26211: PPUSH
26212: LD_INT 8
26214: PPUSH
26215: CALL_OW 336
// end ; 4 :
26219: GO 26312
26221: LD_INT 4
26223: DOUBLE
26224: EQUAL
26225: IFTRUE 26229
26227: GO 26290
26229: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26230: LD_ADDR_VAR 0 2
26234: PUSH
26235: LD_INT 22
26237: PUSH
26238: LD_OWVAR 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 30
26249: PUSH
26250: LD_INT 29
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PPUSH
26261: CALL_OW 69
26265: ST_TO_ADDR
// if not tmp then
26266: LD_VAR 0 2
26270: NOT
26271: IFFALSE 26275
// exit ;
26273: GO 26312
// DestroyUnit ( tmp [ 1 ] ) ;
26275: LD_VAR 0 2
26279: PUSH
26280: LD_INT 1
26282: ARRAY
26283: PPUSH
26284: CALL_OW 65
// end ; 5 .. 7 :
26288: GO 26312
26290: LD_INT 5
26292: DOUBLE
26293: GREATEREQUAL
26294: IFFALSE 26302
26296: LD_INT 7
26298: DOUBLE
26299: LESSEQUAL
26300: IFTRUE 26304
26302: GO 26311
26304: POP
// StreamSibBomb ; end ;
26305: CALL 22562 0 0
26309: GO 26312
26311: POP
// end ;
26312: PPOPN 3
26314: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26315: LD_EXP 49
26319: PUSH
26320: LD_EXP 99
26324: AND
26325: IFFALSE 26481
26327: GO 26329
26329: DISABLE
26330: LD_INT 0
26332: PPUSH
26333: PPUSH
26334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26335: LD_ADDR_VAR 0 2
26339: PUSH
26340: LD_INT 81
26342: PUSH
26343: LD_OWVAR 2
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 2
26354: PUSH
26355: LD_INT 21
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 21
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: LIST
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: ST_TO_ADDR
// if not tmp then
26389: LD_VAR 0 2
26393: NOT
26394: IFFALSE 26398
// exit ;
26396: GO 26481
// p := 0 ;
26398: LD_ADDR_VAR 0 3
26402: PUSH
26403: LD_INT 0
26405: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26406: LD_INT 35
26408: PPUSH
26409: CALL_OW 67
// p := p + 1 ;
26413: LD_ADDR_VAR 0 3
26417: PUSH
26418: LD_VAR 0 3
26422: PUSH
26423: LD_INT 1
26425: PLUS
26426: ST_TO_ADDR
// for i in tmp do
26427: LD_ADDR_VAR 0 1
26431: PUSH
26432: LD_VAR 0 2
26436: PUSH
26437: FOR_IN
26438: IFFALSE 26469
// if GetLives ( i ) < 1000 then
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 256
26449: PUSH
26450: LD_INT 1000
26452: LESS
26453: IFFALSE 26467
// SetLives ( i , 1000 ) ;
26455: LD_VAR 0 1
26459: PPUSH
26460: LD_INT 1000
26462: PPUSH
26463: CALL_OW 234
26467: GO 26437
26469: POP
26470: POP
// until p > 20 ;
26471: LD_VAR 0 3
26475: PUSH
26476: LD_INT 20
26478: GREATER
26479: IFFALSE 26406
// end ;
26481: PPOPN 3
26483: END
// every 0 0$1 trigger StreamModeActive and sTime do
26484: LD_EXP 49
26488: PUSH
26489: LD_EXP 100
26493: AND
26494: IFFALSE 26529
26496: GO 26498
26498: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26499: LD_INT 28
26501: PPUSH
26502: LD_OWVAR 2
26506: PPUSH
26507: LD_INT 2
26509: PPUSH
26510: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26514: LD_INT 30
26516: PPUSH
26517: LD_OWVAR 2
26521: PPUSH
26522: LD_INT 2
26524: PPUSH
26525: CALL_OW 322
// end ;
26529: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26530: LD_EXP 49
26534: PUSH
26535: LD_EXP 101
26539: AND
26540: IFFALSE 26661
26542: GO 26544
26544: DISABLE
26545: LD_INT 0
26547: PPUSH
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26549: LD_ADDR_VAR 0 2
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 21
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 3
26578: PUSH
26579: LD_INT 23
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: PPUSH
26598: CALL_OW 69
26602: ST_TO_ADDR
// if not tmp then
26603: LD_VAR 0 2
26607: NOT
26608: IFFALSE 26612
// exit ;
26610: GO 26661
// for i in tmp do
26612: LD_ADDR_VAR 0 1
26616: PUSH
26617: LD_VAR 0 2
26621: PUSH
26622: FOR_IN
26623: IFFALSE 26659
// begin if Crawls ( i ) then
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL_OW 318
26634: IFFALSE 26645
// ComWalk ( i ) ;
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 138
// SetClass ( i , 2 ) ;
26645: LD_VAR 0 1
26649: PPUSH
26650: LD_INT 2
26652: PPUSH
26653: CALL_OW 336
// end ;
26657: GO 26622
26659: POP
26660: POP
// end ;
26661: PPOPN 2
26663: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26664: LD_EXP 49
26668: PUSH
26669: LD_EXP 102
26673: AND
26674: IFFALSE 26955
26676: GO 26678
26678: DISABLE
26679: LD_INT 0
26681: PPUSH
26682: PPUSH
26683: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26684: LD_OWVAR 2
26688: PPUSH
26689: LD_INT 9
26691: PPUSH
26692: LD_INT 1
26694: PPUSH
26695: LD_INT 1
26697: PPUSH
26698: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26702: LD_INT 9
26704: PPUSH
26705: LD_OWVAR 2
26709: PPUSH
26710: CALL_OW 343
// uc_side := 9 ;
26714: LD_ADDR_OWVAR 20
26718: PUSH
26719: LD_INT 9
26721: ST_TO_ADDR
// uc_nation := 2 ;
26722: LD_ADDR_OWVAR 21
26726: PUSH
26727: LD_INT 2
26729: ST_TO_ADDR
// hc_name := Dark Warrior ;
26730: LD_ADDR_OWVAR 26
26734: PUSH
26735: LD_STRING Dark Warrior
26737: ST_TO_ADDR
// hc_gallery :=  ;
26738: LD_ADDR_OWVAR 33
26742: PUSH
26743: LD_STRING 
26745: ST_TO_ADDR
// hc_noskilllimit := true ;
26746: LD_ADDR_OWVAR 76
26750: PUSH
26751: LD_INT 1
26753: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26754: LD_ADDR_OWVAR 31
26758: PUSH
26759: LD_INT 30
26761: PUSH
26762: LD_INT 30
26764: PUSH
26765: LD_INT 30
26767: PUSH
26768: LD_INT 30
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: ST_TO_ADDR
// un := CreateHuman ;
26777: LD_ADDR_VAR 0 3
26781: PUSH
26782: CALL_OW 44
26786: ST_TO_ADDR
// hc_noskilllimit := false ;
26787: LD_ADDR_OWVAR 76
26791: PUSH
26792: LD_INT 0
26794: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26795: LD_VAR 0 3
26799: PPUSH
26800: LD_INT 1
26802: PPUSH
26803: CALL_OW 51
// p := 0 ;
26807: LD_ADDR_VAR 0 2
26811: PUSH
26812: LD_INT 0
26814: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26815: LD_INT 35
26817: PPUSH
26818: CALL_OW 67
// p := p + 1 ;
26822: LD_ADDR_VAR 0 2
26826: PUSH
26827: LD_VAR 0 2
26831: PUSH
26832: LD_INT 1
26834: PLUS
26835: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26836: LD_VAR 0 3
26840: PPUSH
26841: CALL_OW 256
26845: PUSH
26846: LD_INT 1000
26848: LESS
26849: IFFALSE 26863
// SetLives ( un , 1000 ) ;
26851: LD_VAR 0 3
26855: PPUSH
26856: LD_INT 1000
26858: PPUSH
26859: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26863: LD_VAR 0 3
26867: PPUSH
26868: LD_INT 81
26870: PUSH
26871: LD_OWVAR 2
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 91
26882: PUSH
26883: LD_VAR 0 3
26887: PUSH
26888: LD_INT 30
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PPUSH
26900: CALL_OW 69
26904: PPUSH
26905: LD_VAR 0 3
26909: PPUSH
26910: CALL_OW 74
26914: PPUSH
26915: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26919: LD_VAR 0 2
26923: PUSH
26924: LD_INT 60
26926: GREATER
26927: PUSH
26928: LD_VAR 0 3
26932: PPUSH
26933: CALL_OW 301
26937: OR
26938: IFFALSE 26815
// if un then
26940: LD_VAR 0 3
26944: IFFALSE 26955
// RemoveUnit ( un ) ;
26946: LD_VAR 0 3
26950: PPUSH
26951: CALL_OW 64
// end ; end_of_file
26955: PPOPN 3
26957: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26958: LD_INT 0
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 264
26973: PUSH
26974: LD_EXP 39
26978: EQUAL
26979: IFFALSE 27051
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26981: LD_INT 68
26983: PPUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 255
26993: PPUSH
26994: CALL_OW 321
26998: PUSH
26999: LD_INT 2
27001: EQUAL
27002: IFFALSE 27014
// eff := 70 else
27004: LD_ADDR_VAR 0 4
27008: PUSH
27009: LD_INT 70
27011: ST_TO_ADDR
27012: GO 27022
// eff := 30 ;
27014: LD_ADDR_VAR 0 4
27018: PUSH
27019: LD_INT 30
27021: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27022: LD_VAR 0 1
27026: PPUSH
27027: CALL_OW 250
27031: PPUSH
27032: LD_VAR 0 1
27036: PPUSH
27037: CALL_OW 251
27041: PPUSH
27042: LD_VAR 0 4
27046: PPUSH
27047: CALL_OW 495
// end ; end ;
27051: LD_VAR 0 2
27055: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27056: LD_INT 0
27058: PPUSH
// end ;
27059: LD_VAR 0 4
27063: RET
// export function SOS_Command ( cmd ) ; begin
27064: LD_INT 0
27066: PPUSH
// end ;
27067: LD_VAR 0 2
27071: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27072: LD_VAR 0 1
27076: PUSH
27077: LD_INT 255
27079: EQUAL
27080: PUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: CALL_OW 264
27090: PUSH
27091: LD_INT 14
27093: PUSH
27094: LD_INT 53
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: IN
27101: AND
27102: PUSH
27103: LD_VAR 0 4
27107: PPUSH
27108: LD_VAR 0 5
27112: PPUSH
27113: CALL_OW 488
27117: AND
27118: IFFALSE 27142
// CutTreeXYR ( unit , x , y , 12 ) ;
27120: LD_VAR 0 2
27124: PPUSH
27125: LD_VAR 0 4
27129: PPUSH
27130: LD_VAR 0 5
27134: PPUSH
27135: LD_INT 12
27137: PPUSH
27138: CALL 27145 0 4
// end ;
27142: PPOPN 5
27144: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27145: LD_INT 0
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
27153: PPUSH
27154: PPUSH
27155: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27156: LD_VAR 0 1
27160: NOT
27161: PUSH
27162: LD_VAR 0 2
27166: PPUSH
27167: LD_VAR 0 3
27171: PPUSH
27172: CALL_OW 488
27176: NOT
27177: OR
27178: PUSH
27179: LD_VAR 0 4
27183: NOT
27184: OR
27185: IFFALSE 27189
// exit ;
27187: GO 27529
// list := [ ] ;
27189: LD_ADDR_VAR 0 13
27193: PUSH
27194: EMPTY
27195: ST_TO_ADDR
// if x - r < 0 then
27196: LD_VAR 0 2
27200: PUSH
27201: LD_VAR 0 4
27205: MINUS
27206: PUSH
27207: LD_INT 0
27209: LESS
27210: IFFALSE 27222
// min_x := 0 else
27212: LD_ADDR_VAR 0 7
27216: PUSH
27217: LD_INT 0
27219: ST_TO_ADDR
27220: GO 27238
// min_x := x - r ;
27222: LD_ADDR_VAR 0 7
27226: PUSH
27227: LD_VAR 0 2
27231: PUSH
27232: LD_VAR 0 4
27236: MINUS
27237: ST_TO_ADDR
// if y - r < 0 then
27238: LD_VAR 0 3
27242: PUSH
27243: LD_VAR 0 4
27247: MINUS
27248: PUSH
27249: LD_INT 0
27251: LESS
27252: IFFALSE 27264
// min_y := 0 else
27254: LD_ADDR_VAR 0 8
27258: PUSH
27259: LD_INT 0
27261: ST_TO_ADDR
27262: GO 27280
// min_y := y - r ;
27264: LD_ADDR_VAR 0 8
27268: PUSH
27269: LD_VAR 0 3
27273: PUSH
27274: LD_VAR 0 4
27278: MINUS
27279: ST_TO_ADDR
// max_x := x + r ;
27280: LD_ADDR_VAR 0 9
27284: PUSH
27285: LD_VAR 0 2
27289: PUSH
27290: LD_VAR 0 4
27294: PLUS
27295: ST_TO_ADDR
// max_y := y + r ;
27296: LD_ADDR_VAR 0 10
27300: PUSH
27301: LD_VAR 0 3
27305: PUSH
27306: LD_VAR 0 4
27310: PLUS
27311: ST_TO_ADDR
// for _x = min_x to max_x do
27312: LD_ADDR_VAR 0 11
27316: PUSH
27317: DOUBLE
27318: LD_VAR 0 7
27322: DEC
27323: ST_TO_ADDR
27324: LD_VAR 0 9
27328: PUSH
27329: FOR_TO
27330: IFFALSE 27447
// for _y = min_y to max_y do
27332: LD_ADDR_VAR 0 12
27336: PUSH
27337: DOUBLE
27338: LD_VAR 0 8
27342: DEC
27343: ST_TO_ADDR
27344: LD_VAR 0 10
27348: PUSH
27349: FOR_TO
27350: IFFALSE 27443
// begin if not ValidHex ( _x , _y ) then
27352: LD_VAR 0 11
27356: PPUSH
27357: LD_VAR 0 12
27361: PPUSH
27362: CALL_OW 488
27366: NOT
27367: IFFALSE 27371
// continue ;
27369: GO 27349
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27371: LD_VAR 0 11
27375: PPUSH
27376: LD_VAR 0 12
27380: PPUSH
27381: CALL_OW 351
27385: PUSH
27386: LD_VAR 0 11
27390: PPUSH
27391: LD_VAR 0 12
27395: PPUSH
27396: CALL_OW 554
27400: AND
27401: IFFALSE 27441
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27403: LD_ADDR_VAR 0 13
27407: PUSH
27408: LD_VAR 0 13
27412: PPUSH
27413: LD_VAR 0 13
27417: PUSH
27418: LD_INT 1
27420: PLUS
27421: PPUSH
27422: LD_VAR 0 11
27426: PUSH
27427: LD_VAR 0 12
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PPUSH
27436: CALL_OW 2
27440: ST_TO_ADDR
// end ;
27441: GO 27349
27443: POP
27444: POP
27445: GO 27329
27447: POP
27448: POP
// if not list then
27449: LD_VAR 0 13
27453: NOT
27454: IFFALSE 27458
// exit ;
27456: GO 27529
// for i in list do
27458: LD_ADDR_VAR 0 6
27462: PUSH
27463: LD_VAR 0 13
27467: PUSH
27468: FOR_IN
27469: IFFALSE 27527
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27471: LD_VAR 0 1
27475: PPUSH
27476: LD_STRING M
27478: PUSH
27479: LD_VAR 0 6
27483: PUSH
27484: LD_INT 1
27486: ARRAY
27487: PUSH
27488: LD_VAR 0 6
27492: PUSH
27493: LD_INT 2
27495: ARRAY
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: PUSH
27518: EMPTY
27519: LIST
27520: PPUSH
27521: CALL_OW 447
27525: GO 27468
27527: POP
27528: POP
// end ;
27529: LD_VAR 0 5
27533: RET
