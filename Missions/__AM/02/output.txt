// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11815 0 0
// PrepareSouthBase ;
  48: CALL 11911 0 0
// PrepareNorthBase ;
  52: CALL 12249 0 0
// PrepareOtherRussians ;
  56: CALL 12644 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10972 0 0
// PrepareOtherAmericans ;
  68: CALL 11285 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11427 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11653 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14976 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12836 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
// prefix := 01_ ;
10607: LD_ADDR_VAR 0 3
10611: PUSH
10612: LD_STRING 01_
10614: ST_TO_ADDR
// uc_side := 1 ;
10615: LD_ADDR_OWVAR 20
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10623: LD_ADDR_EXP 1
10627: PUSH
10628: LD_STRING JMM
10630: PPUSH
10631: LD_EXP 34
10635: NOT
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: CALL 35488 0 3
10646: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_STRING 01_JMMLifePoints_1
10654: PPUSH
10655: LD_INT 1000
10657: PPUSH
10658: CALL_OW 30
10662: ST_TO_ADDR
// if plive < 250 then
10663: LD_VAR 0 2
10667: PUSH
10668: LD_INT 250
10670: LESS
10671: IFFALSE 10681
// plive := 300 ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: LD_INT 300
10680: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10681: LD_EXP 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10695: LD_ADDR_EXP 9
10699: PUSH
10700: LD_STRING Powell
10702: PPUSH
10703: CALL_OW 25
10707: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10708: LD_ADDR_EXP 2
10712: PUSH
10713: LD_STRING Bobby
10715: PPUSH
10716: LD_EXP 34
10720: NOT
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: CALL 35488 0 3
10731: ST_TO_ADDR
// if Bobby then
10732: LD_EXP 2
10736: IFFALSE 10786
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10738: LD_ADDR_VAR 0 2
10742: PUSH
10743: LD_STRING 01_BobbyLifePoints_1
10745: PPUSH
10746: LD_INT 1000
10748: PPUSH
10749: CALL_OW 30
10753: ST_TO_ADDR
// if plive < 250 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 250
10761: LESS
10762: IFFALSE 10772
// plive := 300 ;
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 300
10771: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10772: LD_EXP 2
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
10786: LD_ADDR_EXP 3
10790: PUSH
10791: LD_STRING Cyrus
10793: PPUSH
10794: LD_EXP 34
10798: NOT
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: CALL 35488 0 3
10809: ST_TO_ADDR
// if Cyrus then
10810: LD_EXP 3
10814: IFFALSE 10864
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_STRING 01_CyrusLifePoints_1
10823: PPUSH
10824: LD_INT 1000
10826: PPUSH
10827: CALL_OW 30
10831: ST_TO_ADDR
// if plive < 250 then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 250
10839: LESS
10840: IFFALSE 10850
// plive := 300 ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 300
10849: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10850: LD_EXP 3
10854: PPUSH
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10864: LD_ADDR_EXP 5
10868: PUSH
10869: LD_STRING Khatam
10871: PPUSH
10872: CALL_OW 25
10876: ST_TO_ADDR
// uc_side := 4 ;
10877: LD_ADDR_OWVAR 20
10881: PUSH
10882: LD_INT 4
10884: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10885: LD_ADDR_EXP 4
10889: PUSH
10890: LD_STRING Lisa
10892: PPUSH
10893: CALL_OW 25
10897: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10898: LD_EXP 1
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_INT 0
10908: PPUSH
10909: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10913: LD_EXP 2
10917: PPUSH
10918: LD_INT 3
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10928: LD_EXP 3
10932: PPUSH
10933: LD_INT 3
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10943: LD_EXP 4
10947: PPUSH
10948: LD_INT 5
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 49
// ComCrawl ( Lisa ) ;
10958: LD_EXP 4
10962: PPUSH
10963: CALL_OW 137
// end ;
10967: LD_VAR 0 1
10971: RET
// export function PrepareLisSquad ; var i , un ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
// uc_side := 4 ;
10977: LD_ADDR_OWVAR 20
10981: PUSH
10982: LD_INT 4
10984: ST_TO_ADDR
// uc_nation := 1 ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// hc_class := 2 ;
10993: LD_ADDR_OWVAR 28
10997: PUSH
10998: LD_INT 2
11000: ST_TO_ADDR
// hc_sex := sex_male ;
11001: LD_ADDR_OWVAR 27
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// hc_gallery :=  ;
11009: LD_ADDR_OWVAR 33
11013: PUSH
11014: LD_STRING 
11016: ST_TO_ADDR
// hc_name :=  ;
11017: LD_ADDR_OWVAR 26
11021: PUSH
11022: LD_STRING 
11024: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11025: LD_ADDR_OWVAR 30
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11048: LD_ADDR_OWVAR 31
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// un := CreateHuman ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: CALL_OW 44
11080: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
// hc_sex := sex_female ;
11096: LD_ADDR_OWVAR 27
11100: PUSH
11101: LD_INT 2
11103: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11104: LD_ADDR_OWVAR 30
11108: PUSH
11109: LD_INT 0
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 0
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 6
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 49
// if not Bobby and not Cyrus then
11175: LD_EXP 2
11179: NOT
11180: PUSH
11181: LD_EXP 3
11185: NOT
11186: AND
11187: IFFALSE 11276
// begin hc_class := 1 ;
11189: LD_ADDR_OWVAR 28
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// hc_sex := sex_male ;
11197: LD_ADDR_OWVAR 27
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11205: LD_ADDR_OWVAR 30
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11228: LD_ADDR_OWVAR 31
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// un := CreateHuman ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: CALL_OW 44
11260: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 31
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ; InitHc ;
11276: CALL_OW 19
// end ;
11280: LD_VAR 0 1
11284: RET
// export function PrepareOtherAmericans ; begin
11285: LD_INT 0
11287: PPUSH
// uc_side := 4 ;
11288: LD_ADDR_OWVAR 20
11292: PUSH
11293: LD_INT 4
11295: ST_TO_ADDR
// uc_nation := 1 ;
11296: LD_ADDR_OWVAR 21
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// hc_gallery :=  ;
11304: LD_ADDR_OWVAR 33
11308: PUSH
11309: LD_STRING 
11311: ST_TO_ADDR
// hc_name := Tom Garvin ;
11312: LD_ADDR_OWVAR 26
11316: PUSH
11317: LD_STRING Tom Garvin
11319: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11320: LD_INT 1
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 380
// Brian := CreateHuman ;
11333: LD_ADDR_EXP 6
11337: PUSH
11338: CALL_OW 44
11342: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11343: LD_EXP 6
11347: PPUSH
11348: LD_INT 10
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 49
// hc_name := Jerry White ;
11358: LD_ADDR_OWVAR 26
11362: PUSH
11363: LD_STRING Jerry White
11365: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11366: LD_INT 1
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: LD_INT 2
11374: PPUSH
11375: CALL_OW 380
// Jerry := CreateHuman ;
11379: LD_ADDR_EXP 7
11383: PUSH
11384: CALL_OW 44
11388: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11389: LD_EXP 7
11393: PPUSH
11394: LD_INT 10
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11404: LD_EXP 6
11408: PUSH
11409: LD_EXP 7
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 140
// end ;
11422: LD_VAR 0 1
11426: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
11432: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11433: LD_ADDR_VAR 0 4
11437: PUSH
11438: LD_INT 16
11440: PPUSH
11441: LD_INT 0
11443: PPUSH
11444: CALL_OW 517
11448: ST_TO_ADDR
// for i = 1 to 6 do
11449: LD_ADDR_VAR 0 2
11453: PUSH
11454: DOUBLE
11455: LD_INT 1
11457: DEC
11458: ST_TO_ADDR
11459: LD_INT 6
11461: PUSH
11462: FOR_TO
11463: IFFALSE 11609
// begin uc_side := 4 ;
11465: LD_ADDR_OWVAR 20
11469: PUSH
11470: LD_INT 4
11472: ST_TO_ADDR
// uc_nation := 1 ;
11473: LD_ADDR_OWVAR 21
11477: PUSH
11478: LD_INT 1
11480: ST_TO_ADDR
// hc_gallery :=  ;
11481: LD_ADDR_OWVAR 33
11485: PUSH
11486: LD_STRING 
11488: ST_TO_ADDR
// hc_name :=  ;
11489: LD_ADDR_OWVAR 26
11493: PUSH
11494: LD_STRING 
11496: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11497: LD_INT 0
11499: PPUSH
11500: LD_INT 1
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: LD_INT 4
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: PUSH
11514: LD_VAR 0 2
11518: PUSH
11519: LD_INT 3
11521: MOD
11522: PUSH
11523: LD_INT 1
11525: PLUS
11526: ARRAY
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 380
// un := CreateHuman ;
11535: LD_ADDR_VAR 0 3
11539: PUSH
11540: CALL_OW 44
11544: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 0
11552: PPUSH
11553: LD_INT 5
11555: PPUSH
11556: CALL_OW 12
11560: PPUSH
11561: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_VAR 0 4
11574: PUSH
11575: LD_INT 1
11577: ARRAY
11578: PUSH
11579: LD_VAR 0 2
11583: ARRAY
11584: PPUSH
11585: LD_VAR 0 4
11589: PUSH
11590: LD_INT 2
11592: ARRAY
11593: PUSH
11594: LD_VAR 0 2
11598: ARRAY
11599: PPUSH
11600: LD_INT 1
11602: PPUSH
11603: CALL_OW 601
// end ;
11607: GO 11462
11609: POP
11610: POP
// DyingSold := CreateHuman ;
11611: LD_ADDR_EXP 35
11615: PUSH
11616: CALL_OW 44
11620: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11621: LD_EXP 35
11625: PPUSH
11626: LD_INT 16
11628: PPUSH
11629: LD_INT 0
11631: PPUSH
11632: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11636: LD_EXP 35
11640: PPUSH
11641: LD_INT 250
11643: PPUSH
11644: CALL_OW 234
// end ; end_of_file
11648: LD_VAR 0 1
11652: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 23
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 2
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 50
11694: PUSH
11695: EMPTY
11696: LIST
11697: PUSH
11698: LD_INT 56
11700: PUSH
11701: EMPTY
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PPUSH
11711: CALL_OW 69
11715: PUSH
11716: LD_EXP 1
11720: PUSH
11721: EMPTY
11722: LIST
11723: DIFF
11724: ST_TO_ADDR
// if not tmp then
11725: LD_VAR 0 2
11729: NOT
11730: IFFALSE 11734
// exit ;
11732: GO 11810
// uc_side = 6 ;
11734: LD_ADDR_OWVAR 20
11738: PUSH
11739: LD_INT 6
11741: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11742: LD_ADDR_EXP 8
11746: PUSH
11747: LD_STRING Mikhail
11749: PPUSH
11750: CALL_OW 25
11754: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11755: LD_EXP 8
11759: PPUSH
11760: LD_INT 3
11762: PPUSH
11763: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11767: LD_EXP 8
11771: PPUSH
11772: LD_VAR 0 2
11776: PUSH
11777: LD_INT 1
11779: ARRAY
11780: PPUSH
11781: CALL_OW 250
11785: PPUSH
11786: LD_VAR 0 2
11790: PUSH
11791: LD_INT 1
11793: ARRAY
11794: PPUSH
11795: CALL_OW 251
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 50
// end ;
11810: LD_VAR 0 1
11814: RET
// export function PrepareRussianCommander ; begin
11815: LD_INT 0
11817: PPUSH
// uc_side = 3 ;
11818: LD_ADDR_OWVAR 20
11822: PUSH
11823: LD_INT 3
11825: ST_TO_ADDR
// uc_nation = 3 ;
11826: LD_ADDR_OWVAR 21
11830: PUSH
11831: LD_INT 3
11833: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11834: LD_ADDR_EXP 19
11838: PUSH
11839: LD_STRING Natasza
11841: PPUSH
11842: CALL_OW 25
11846: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11847: LD_EXP 19
11851: PPUSH
11852: LD_INT 24
11854: PPUSH
11855: LD_INT 0
11857: PPUSH
11858: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11862: LD_EXP 19
11866: PPUSH
11867: LD_INT 56
11869: PPUSH
11870: LD_INT 16
11872: PPUSH
11873: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11877: LD_ADDR_EXP 24
11881: PUSH
11882: LD_EXP 24
11886: PPUSH
11887: LD_EXP 24
11891: PUSH
11892: LD_INT 1
11894: PLUS
11895: PPUSH
11896: LD_EXP 19
11900: PPUSH
11901: CALL_OW 1
11905: ST_TO_ADDR
// end ;
11906: LD_VAR 0 1
11910: RET
// export function PrepareSouthBase ; var i , un ; begin
11911: LD_INT 0
11913: PPUSH
11914: PPUSH
11915: PPUSH
// for i = 1 to 2 do
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_INT 2
11928: PUSH
11929: FOR_TO
11930: IFFALSE 12039
// begin uc_side = 3 ;
11932: LD_ADDR_OWVAR 20
11936: PUSH
11937: LD_INT 3
11939: ST_TO_ADDR
// uc_nation = 3 ;
11940: LD_ADDR_OWVAR 21
11944: PUSH
11945: LD_INT 3
11947: ST_TO_ADDR
// hc_gallery =  ;
11948: LD_ADDR_OWVAR 33
11952: PUSH
11953: LD_STRING 
11955: ST_TO_ADDR
// hc_name =  ;
11956: LD_ADDR_OWVAR 26
11960: PUSH
11961: LD_STRING 
11963: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: LD_EXP 13
11974: PPUSH
11975: LD_EXP 14
11979: PPUSH
11980: CALL_OW 12
11984: PPUSH
11985: CALL_OW 380
// hc_importance = 0 ;
11989: LD_ADDR_OWVAR 32
11993: PUSH
11994: LD_INT 0
11996: ST_TO_ADDR
// un = CreateHuman ;
11997: LD_ADDR_VAR 0 3
12001: PUSH
12002: CALL_OW 44
12006: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12007: LD_VAR 0 3
12011: PPUSH
12012: LD_INT 11
12014: PPUSH
12015: LD_INT 0
12017: PPUSH
12018: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12022: LD_VAR 0 3
12026: PPUSH
12027: LD_INT 111
12029: PPUSH
12030: LD_INT 38
12032: PPUSH
12033: CALL_OW 118
// end ;
12037: GO 11929
12039: POP
12040: POP
// for i = 1 to 2 do
12041: LD_ADDR_VAR 0 2
12045: PUSH
12046: DOUBLE
12047: LD_INT 1
12049: DEC
12050: ST_TO_ADDR
12051: LD_INT 2
12053: PUSH
12054: FOR_TO
12055: IFFALSE 12138
// begin uc_side = 3 ;
12057: LD_ADDR_OWVAR 20
12061: PUSH
12062: LD_INT 3
12064: ST_TO_ADDR
// uc_nation = 3 ;
12065: LD_ADDR_OWVAR 21
12069: PUSH
12070: LD_INT 3
12072: ST_TO_ADDR
// hc_gallery =  ;
12073: LD_ADDR_OWVAR 33
12077: PUSH
12078: LD_STRING 
12080: ST_TO_ADDR
// hc_name =  ;
12081: LD_ADDR_OWVAR 26
12085: PUSH
12086: LD_STRING 
12088: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12089: LD_INT 0
12091: PPUSH
12092: LD_INT 3
12094: PPUSH
12095: LD_EXP 13
12099: PPUSH
12100: LD_EXP 14
12104: PPUSH
12105: CALL_OW 12
12109: PPUSH
12110: CALL_OW 380
// un = CreateHuman ;
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: CALL_OW 44
12123: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 10
12131: PPUSH
12132: CALL_OW 52
// end ;
12136: GO 12054
12138: POP
12139: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12140: LD_INT 3
12142: PPUSH
12143: LD_INT 3
12145: PPUSH
12146: LD_INT 33
12148: PPUSH
12149: LD_EXP 13
12153: PPUSH
12154: LD_EXP 14
12158: PPUSH
12159: CALL_OW 12
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_INT 1
12169: PUSH
12170: LD_INT 2
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 3
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: LD_OWVAR 67
12189: ARRAY
12190: PPUSH
12191: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12195: LD_ADDR_VAR 0 2
12199: PUSH
12200: LD_INT 33
12202: PPUSH
12203: CALL_OW 313
12207: PUSH
12208: FOR_IN
12209: IFFALSE 12242
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12211: LD_ADDR_EXP 25
12215: PUSH
12216: LD_EXP 25
12220: PPUSH
12221: LD_EXP 25
12225: PUSH
12226: LD_INT 1
12228: PLUS
12229: PPUSH
12230: LD_VAR 0 2
12234: PPUSH
12235: CALL_OW 1
12239: ST_TO_ADDR
12240: GO 12208
12242: POP
12243: POP
// end ;
12244: LD_VAR 0 1
12248: RET
// export function PrepareNorthBase ; var i , un ; begin
12249: LD_INT 0
12251: PPUSH
12252: PPUSH
12253: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12254: LD_ADDR_VAR 0 2
12258: PUSH
12259: DOUBLE
12260: LD_INT 1
12262: DEC
12263: ST_TO_ADDR
12264: LD_INT 1
12266: PPUSH
12267: LD_INT 2
12269: PPUSH
12270: CALL_OW 12
12274: PUSH
12275: LD_INT 2
12277: PPUSH
12278: LD_INT 3
12280: PPUSH
12281: CALL_OW 12
12285: PUSH
12286: LD_INT 3
12288: PPUSH
12289: LD_INT 4
12291: PPUSH
12292: CALL_OW 12
12296: PUSH
12297: LD_INT 4
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: LD_OWVAR 67
12310: ARRAY
12311: PUSH
12312: FOR_TO
12313: IFFALSE 12399
// begin uc_side = 3 ;
12315: LD_ADDR_OWVAR 20
12319: PUSH
12320: LD_INT 3
12322: ST_TO_ADDR
// uc_nation = 3 ;
12323: LD_ADDR_OWVAR 21
12327: PUSH
12328: LD_INT 3
12330: ST_TO_ADDR
// hc_gallery =  ;
12331: LD_ADDR_OWVAR 33
12335: PUSH
12336: LD_STRING 
12338: ST_TO_ADDR
// hc_name =  ;
12339: LD_ADDR_OWVAR 26
12343: PUSH
12344: LD_STRING 
12346: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12347: LD_INT 0
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: LD_EXP 13
12357: PPUSH
12358: LD_EXP 14
12362: PPUSH
12363: CALL_OW 12
12367: PPUSH
12368: CALL_OW 380
// un = CreateHuman ;
12372: LD_ADDR_VAR 0 3
12376: PUSH
12377: CALL_OW 44
12381: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 14
12389: PPUSH
12390: LD_INT 0
12392: PPUSH
12393: CALL_OW 49
// end ;
12397: GO 12312
12399: POP
12400: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12401: LD_INT 3
12403: PPUSH
12404: LD_INT 3
12406: PPUSH
12407: LD_INT 2
12409: PPUSH
12410: LD_EXP 13
12414: PPUSH
12415: LD_EXP 14
12419: PPUSH
12420: CALL_OW 12
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_INT 1
12430: PPUSH
12431: LD_INT 2
12433: PPUSH
12434: CALL_OW 12
12438: PUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: CALL_OW 12
12449: PUSH
12450: LD_INT 1
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: CALL_OW 12
12460: PUSH
12461: LD_INT 4
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_OWVAR 67
12474: ARRAY
12475: PPUSH
12476: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12480: LD_INT 3
12482: PPUSH
12483: LD_INT 3
12485: PPUSH
12486: LD_INT 23
12488: PPUSH
12489: LD_EXP 13
12493: PPUSH
12494: LD_EXP 14
12498: PPUSH
12499: CALL_OW 12
12503: PPUSH
12504: LD_INT 4
12506: PPUSH
12507: LD_INT 0
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: LD_INT 2
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: LD_OWVAR 67
12529: ARRAY
12530: PPUSH
12531: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12535: LD_INT 3
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 1
12543: PPUSH
12544: LD_EXP 13
12548: PPUSH
12549: LD_EXP 14
12553: PPUSH
12554: CALL_OW 12
12558: PPUSH
12559: LD_INT 2
12561: PPUSH
12562: LD_INT 1
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 3
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PUSH
12580: LD_OWVAR 67
12584: ARRAY
12585: PPUSH
12586: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12590: LD_ADDR_VAR 0 2
12594: PUSH
12595: LD_INT 2
12597: PPUSH
12598: CALL_OW 313
12602: PUSH
12603: FOR_IN
12604: IFFALSE 12637
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12606: LD_ADDR_EXP 24
12610: PUSH
12611: LD_EXP 24
12615: PPUSH
12616: LD_EXP 24
12620: PUSH
12621: LD_INT 1
12623: PLUS
12624: PPUSH
12625: LD_VAR 0 2
12629: PPUSH
12630: CALL_OW 1
12634: ST_TO_ADDR
12635: GO 12603
12637: POP
12638: POP
// end ;
12639: LD_VAR 0 1
12643: RET
// export function PrepareOtherRussians ; var i , un ; begin
12644: LD_INT 0
12646: PPUSH
12647: PPUSH
12648: PPUSH
// for i = 1 to 2 do
12649: LD_ADDR_VAR 0 2
12653: PUSH
12654: DOUBLE
12655: LD_INT 1
12657: DEC
12658: ST_TO_ADDR
12659: LD_INT 2
12661: PUSH
12662: FOR_TO
12663: IFFALSE 12764
// begin uc_side = 3 ;
12665: LD_ADDR_OWVAR 20
12669: PUSH
12670: LD_INT 3
12672: ST_TO_ADDR
// uc_nation = 3 ;
12673: LD_ADDR_OWVAR 21
12677: PUSH
12678: LD_INT 3
12680: ST_TO_ADDR
// hc_gallery =  ;
12681: LD_ADDR_OWVAR 33
12685: PUSH
12686: LD_STRING 
12688: ST_TO_ADDR
// hc_name =  ;
12689: LD_ADDR_OWVAR 26
12693: PUSH
12694: LD_STRING 
12696: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12697: LD_INT 0
12699: PPUSH
12700: LD_INT 1
12702: PPUSH
12703: LD_EXP 13
12707: PPUSH
12708: LD_EXP 14
12712: PPUSH
12713: CALL_OW 12
12717: PPUSH
12718: CALL_OW 380
// un = CreateHuman ;
12722: LD_ADDR_VAR 0 3
12726: PUSH
12727: CALL_OW 44
12731: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 9
12739: PPUSH
12740: LD_INT 0
12742: PPUSH
12743: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 80
12754: PPUSH
12755: LD_INT 73
12757: PPUSH
12758: CALL_OW 118
// end ;
12762: GO 12662
12764: POP
12765: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12766: LD_ADDR_VAR 0 2
12770: PUSH
12771: LD_INT 22
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 30
12783: PUSH
12784: LD_INT 31
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: PUSH
12800: FOR_IN
12801: IFFALSE 12829
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12803: LD_EXP 13
12807: PPUSH
12808: LD_EXP 14
12812: PPUSH
12813: CALL_OW 12
12817: PPUSH
12818: LD_VAR 0 2
12822: PPUSH
12823: CALL 8838 0 2
12827: GO 12800
12829: POP
12830: POP
// end ;
12831: LD_VAR 0 1
12835: RET
// export function PrepareCargoBays ; begin
12836: LD_INT 0
12838: PPUSH
// uc_side = 3 ;
12839: LD_ADDR_OWVAR 20
12843: PUSH
12844: LD_INT 3
12846: ST_TO_ADDR
// uc_nation = 3 ;
12847: LD_ADDR_OWVAR 21
12851: PUSH
12852: LD_INT 3
12854: ST_TO_ADDR
// vc_engine = 1 ;
12855: LD_ADDR_OWVAR 39
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// vc_control = 1 ;
12863: LD_ADDR_OWVAR 38
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// vc_weapon = 51 ;
12871: LD_ADDR_OWVAR 40
12875: PUSH
12876: LD_INT 51
12878: ST_TO_ADDR
// vc_chassis = 22 ;
12879: LD_ADDR_OWVAR 37
12883: PUSH
12884: LD_INT 22
12886: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12887: LD_ADDR_EXP 15
12891: PUSH
12892: CALL_OW 45
12896: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12897: LD_ADDR_EXP 16
12901: PUSH
12902: CALL_OW 45
12906: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12907: LD_EXP 15
12911: PPUSH
12912: LD_INT 13
12914: PPUSH
12915: LD_INT 0
12917: PPUSH
12918: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12922: LD_EXP 16
12926: PPUSH
12927: LD_INT 13
12929: PPUSH
12930: LD_INT 0
12932: PPUSH
12933: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12937: LD_EXP 15
12941: PPUSH
12942: LD_INT 2
12944: PPUSH
12945: LD_INT 70
12947: PUSH
12948: LD_INT 50
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 20
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: LD_OWVAR 67
12967: ARRAY
12968: PPUSH
12969: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12973: LD_EXP 16
12977: PPUSH
12978: LD_INT 2
12980: PPUSH
12981: LD_INT 70
12983: PUSH
12984: LD_INT 50
12986: PUSH
12987: LD_INT 30
12989: PUSH
12990: LD_INT 20
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: PUSH
12999: LD_OWVAR 67
13003: ARRAY
13004: PPUSH
13005: CALL_OW 291
// hc_gallery =  ;
13009: LD_ADDR_OWVAR 33
13013: PUSH
13014: LD_STRING 
13016: ST_TO_ADDR
// hc_name =  ;
13017: LD_ADDR_OWVAR 26
13021: PUSH
13022: LD_STRING 
13024: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_INT 2
13036: PPUSH
13037: CALL_OW 12
13041: PPUSH
13042: CALL_OW 380
// driver1 = CreateHuman ;
13046: LD_ADDR_EXP 17
13050: PUSH
13051: CALL_OW 44
13055: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13056: LD_EXP 17
13060: PPUSH
13061: LD_EXP 15
13065: PPUSH
13066: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13070: LD_ADDR_OWVAR 26
13074: PUSH
13075: LD_STRING Nikolai Andreyev
13077: ST_TO_ADDR
// driver2 = CreateHuman ;
13078: LD_ADDR_EXP 18
13082: PUSH
13083: CALL_OW 44
13087: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13088: LD_EXP 18
13092: PPUSH
13093: LD_EXP 16
13097: PPUSH
13098: CALL_OW 52
// end ;
13102: LD_VAR 0 1
13106: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13107: LD_INT 0
13109: PPUSH
13110: PPUSH
13111: PPUSH
13112: PPUSH
13113: PPUSH
13114: PPUSH
// uc_side = 3 ;
13115: LD_ADDR_OWVAR 20
13119: PUSH
13120: LD_INT 3
13122: ST_TO_ADDR
// uc_nation = 3 ;
13123: LD_ADDR_OWVAR 21
13127: PUSH
13128: LD_INT 3
13130: ST_TO_ADDR
// for i := 1 to count do
13131: LD_ADDR_VAR 0 4
13135: PUSH
13136: DOUBLE
13137: LD_INT 1
13139: DEC
13140: ST_TO_ADDR
13141: LD_VAR 0 1
13145: PUSH
13146: FOR_TO
13147: IFFALSE 13409
// begin vc_engine = 1 ;
13149: LD_ADDR_OWVAR 39
13153: PUSH
13154: LD_INT 1
13156: ST_TO_ADDR
// vc_control = 1 ;
13157: LD_ADDR_OWVAR 38
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13165: LD_ADDR_OWVAR 40
13169: PUSH
13170: LD_INT 42
13172: ST_TO_ADDR
// if Difficulty = 3 then
13173: LD_OWVAR 67
13177: PUSH
13178: LD_INT 3
13180: EQUAL
13181: IFFALSE 13210
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13183: LD_ADDR_OWVAR 40
13187: PUSH
13188: LD_INT 42
13190: PUSH
13191: LD_INT 43
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: ST_TO_ADDR
// if Difficulty = 4 then
13210: LD_OWVAR 67
13214: PUSH
13215: LD_INT 4
13217: EQUAL
13218: IFFALSE 13255
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13220: LD_ADDR_OWVAR 40
13224: PUSH
13225: LD_INT 42
13227: PUSH
13228: LD_INT 43
13230: PUSH
13231: LD_INT 43
13233: PUSH
13234: LD_INT 44
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 1
13245: PPUSH
13246: LD_INT 4
13248: PPUSH
13249: CALL_OW 12
13253: ARRAY
13254: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13255: LD_ADDR_OWVAR 37
13259: PUSH
13260: LD_INT 21
13262: PUSH
13263: LD_INT 22
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 22
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: PUSH
13278: LD_OWVAR 67
13282: ARRAY
13283: ST_TO_ADDR
// veh = CreateVehicle ;
13284: LD_ADDR_VAR 0 5
13288: PUSH
13289: CALL_OW 45
13293: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13294: LD_VAR 0 5
13298: PPUSH
13299: LD_VAR 0 2
13303: PPUSH
13304: LD_INT 0
13306: PPUSH
13307: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13311: LD_ADDR_EXP 26
13315: PUSH
13316: LD_EXP 26
13320: PUSH
13321: LD_VAR 0 5
13325: ADD
13326: ST_TO_ADDR
// hc_gallery =  ;
13327: LD_ADDR_OWVAR 33
13331: PUSH
13332: LD_STRING 
13334: ST_TO_ADDR
// hc_name =  ;
13335: LD_ADDR_OWVAR 26
13339: PUSH
13340: LD_STRING 
13342: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13343: LD_INT 0
13345: PPUSH
13346: LD_INT 3
13348: PPUSH
13349: LD_EXP 13
13353: PPUSH
13354: LD_EXP 14
13358: PPUSH
13359: CALL_OW 12
13363: PPUSH
13364: CALL_OW 380
// un = CreateHuman ;
13368: LD_ADDR_VAR 0 6
13372: PUSH
13373: CALL_OW 44
13377: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13378: LD_VAR 0 6
13382: PPUSH
13383: LD_VAR 0 5
13387: PPUSH
13388: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13392: LD_VAR 0 6
13396: PPUSH
13397: LD_INT 14
13399: PPUSH
13400: LD_INT 9
13402: PPUSH
13403: CALL_OW 111
// end ;
13407: GO 13146
13409: POP
13410: POP
// wait ( 0 0$1 ) ;
13411: LD_INT 35
13413: PPUSH
13414: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13418: LD_INT 0
13420: PPUSH
13421: LD_INT 2
13423: PPUSH
13424: LD_EXP 13
13428: PPUSH
13429: LD_EXP 14
13433: PPUSH
13434: CALL_OW 12
13438: PPUSH
13439: CALL_OW 380
// un = CreateHuman ;
13443: LD_ADDR_VAR 0 6
13447: PUSH
13448: CALL_OW 44
13452: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13453: LD_ADDR_VAR 0 4
13457: PUSH
13458: DOUBLE
13459: LD_INT 1
13461: DEC
13462: ST_TO_ADDR
13463: LD_VAR 0 1
13467: PUSH
13468: LD_INT 2
13470: PUSH
13471: LD_INT 2
13473: MUL
13474: PLUS
13475: PUSH
13476: FOR_TO
13477: IFFALSE 13569
// begin hc_gallery =  ;
13479: LD_ADDR_OWVAR 33
13483: PUSH
13484: LD_STRING 
13486: ST_TO_ADDR
// hc_name =  ;
13487: LD_ADDR_OWVAR 26
13491: PUSH
13492: LD_STRING 
13494: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13495: LD_INT 1
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: LD_EXP 13
13505: PPUSH
13506: LD_EXP 14
13510: PPUSH
13511: CALL_OW 12
13515: PPUSH
13516: CALL_OW 380
// un = CreateHuman ;
13520: LD_ADDR_VAR 0 6
13524: PUSH
13525: CALL_OW 44
13529: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13530: LD_VAR 0 6
13534: PPUSH
13535: LD_INT 9
13537: PPUSH
13538: LD_INT 13
13540: PPUSH
13541: LD_INT 4
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13551: LD_ADDR_EXP 26
13555: PUSH
13556: LD_EXP 26
13560: PUSH
13561: LD_VAR 0 6
13565: ADD
13566: ST_TO_ADDR
// end ;
13567: GO 13476
13569: POP
13570: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13571: LD_ADDR_VAR 0 7
13575: PUSH
13576: LD_INT 26
13578: PPUSH
13579: LD_INT 22
13581: PUSH
13582: LD_INT 3
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 21
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 26
13601: PUSH
13602: LD_INT 1
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 70
13618: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13619: LD_VAR 0 7
13623: PUSH
13624: LD_INT 1
13626: ARRAY
13627: PPUSH
13628: LD_STRING D9-Rus3-1
13630: PPUSH
13631: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13635: LD_VAR 0 7
13639: PUSH
13640: LD_INT 2
13642: ARRAY
13643: PPUSH
13644: LD_STRING D9-Russ-1
13646: PPUSH
13647: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13651: LD_EXP 26
13655: PPUSH
13656: LD_INT 31
13658: PPUSH
13659: LD_INT 13
13661: PPUSH
13662: CALL_OW 114
// wait ( 0 0$3 ) ;
13666: LD_INT 105
13668: PPUSH
13669: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13673: LD_INT 35
13675: PPUSH
13676: CALL_OW 67
// for i in attackGroup do
13680: LD_ADDR_VAR 0 4
13684: PUSH
13685: LD_EXP 26
13689: PUSH
13690: FOR_IN
13691: IFFALSE 14058
// begin if IsDead ( i ) then
13693: LD_VAR 0 4
13697: PPUSH
13698: CALL_OW 301
13702: IFFALSE 13722
// begin attackGroup := attackGroup diff i ;
13704: LD_ADDR_EXP 26
13708: PUSH
13709: LD_EXP 26
13713: PUSH
13714: LD_VAR 0 4
13718: DIFF
13719: ST_TO_ADDR
// continue ;
13720: GO 13690
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13722: LD_VAR 0 4
13726: PPUSH
13727: CALL_OW 314
13731: NOT
13732: PUSH
13733: LD_VAR 0 4
13737: PPUSH
13738: CALL_OW 110
13742: NOT
13743: AND
13744: IFFALSE 13780
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13746: LD_VAR 0 4
13750: PPUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 1
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 4
13770: PPUSH
13771: CALL_OW 74
13775: PPUSH
13776: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13780: LD_VAR 0 4
13784: PPUSH
13785: CALL_OW 110
13789: NOT
13790: PUSH
13791: LD_VAR 0 4
13795: PPUSH
13796: CALL_OW 256
13800: PUSH
13801: LD_INT 650
13803: LESS
13804: AND
13805: PUSH
13806: LD_VAR 0 4
13810: PPUSH
13811: CALL_OW 247
13815: PUSH
13816: LD_INT 2
13818: EQUAL
13819: AND
13820: IFFALSE 13849
// begin SetTag ( i , 1 ) ;
13822: LD_VAR 0 4
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13834: LD_VAR 0 4
13838: PPUSH
13839: LD_INT 20
13841: PPUSH
13842: LD_INT 8
13844: PPUSH
13845: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13849: LD_VAR 0 4
13853: PPUSH
13854: CALL_OW 110
13858: PUSH
13859: LD_INT 1
13861: EQUAL
13862: PUSH
13863: LD_VAR 0 4
13867: PPUSH
13868: LD_INT 20
13870: PPUSH
13871: LD_INT 8
13873: PPUSH
13874: CALL_OW 297
13878: PUSH
13879: LD_INT 6
13881: LESS
13882: AND
13883: IFFALSE 13897
// SetTag ( i , 2 ) ;
13885: LD_VAR 0 4
13889: PPUSH
13890: LD_INT 2
13892: PPUSH
13893: CALL_OW 109
// if GetTag ( i ) = 2 then
13897: LD_VAR 0 4
13901: PPUSH
13902: CALL_OW 110
13906: PUSH
13907: LD_INT 2
13909: EQUAL
13910: IFFALSE 14018
// begin if GetLives ( i ) = 1000 then
13912: LD_VAR 0 4
13916: PPUSH
13917: CALL_OW 256
13921: PUSH
13922: LD_INT 1000
13924: EQUAL
13925: IFFALSE 13941
// SetTag ( i , 3 ) else
13927: LD_VAR 0 4
13931: PPUSH
13932: LD_INT 3
13934: PPUSH
13935: CALL_OW 109
13939: GO 14018
// if IsDrivenBy ( i ) then
13941: LD_VAR 0 4
13945: PPUSH
13946: CALL_OW 311
13950: IFFALSE 14018
// begin mech := IsDrivenBy ( i ) ;
13952: LD_ADDR_VAR 0 8
13956: PUSH
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 311
13966: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13967: LD_INT 1
13969: PPUSH
13970: LD_VAR 0 8
13974: PPUSH
13975: CALL_OW 292
13979: NOT
13980: PUSH
13981: LD_VAR 0 8
13985: PPUSH
13986: CALL_OW 256
13990: PUSH
13991: LD_INT 1000
13993: LESS
13994: AND
13995: IFFALSE 14009
// SetLives ( mech , 1000 ) ;
13997: LD_VAR 0 8
14001: PPUSH
14002: LD_INT 1000
14004: PPUSH
14005: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14009: LD_VAR 0 8
14013: PPUSH
14014: CALL 73861 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14018: LD_VAR 0 4
14022: PPUSH
14023: CALL_OW 110
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: PUSH
14032: LD_VAR 0 4
14036: PPUSH
14037: CALL_OW 311
14041: AND
14042: IFFALSE 14056
// SetTag ( i , 0 ) ;
14044: LD_VAR 0 4
14048: PPUSH
14049: LD_INT 0
14051: PPUSH
14052: CALL_OW 109
// end ;
14056: GO 13690
14058: POP
14059: POP
// until not attackGroup ;
14060: LD_EXP 26
14064: NOT
14065: IFFALSE 13673
// end ;
14067: LD_VAR 0 3
14071: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14072: LD_EXP 26
14076: PPUSH
14077: LD_INT 21
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 72
14091: IFFALSE 14159
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
// begin enable ;
14099: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14100: LD_ADDR_VAR 0 1
14104: PUSH
14105: LD_EXP 26
14109: PPUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 2
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 72
14124: PUSH
14125: FOR_IN
14126: IFFALSE 14157
// if GetFuel ( i ) < 3 then
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 261
14137: PUSH
14138: LD_INT 3
14140: LESS
14141: IFFALSE 14155
// SetFuel ( i , 3 ) ;
14143: LD_VAR 0 1
14147: PPUSH
14148: LD_INT 3
14150: PPUSH
14151: CALL_OW 240
14155: GO 14125
14157: POP
14158: POP
// end ; end_of_file
14159: PPOPN 1
14161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14162: LD_INT 22
14164: PUSH
14165: LD_INT 3
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 25
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PPUSH
14186: CALL_OW 69
14190: IFFALSE 14209
14192: GO 14194
14194: DISABLE
// begin enable ;
14195: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14196: LD_INT 3
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_INT 22
14204: PPUSH
14205: CALL 8974 0 3
// end ;
14209: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14210: LD_INT 22
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 25
14222: PUSH
14223: LD_INT 4
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 69
14238: IFFALSE 14260
14240: GO 14242
14242: DISABLE
// begin enable ;
14243: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14244: LD_INT 3
14246: PPUSH
14247: LD_INT 20
14249: PPUSH
14250: LD_INT 22
14252: PPUSH
14253: LD_INT 23
14255: PPUSH
14256: CALL 9306 0 4
// end ;
14260: END
// every 0 0$1 trigger northBaseDefenders do
14261: LD_EXP 24
14265: IFFALSE 14289
14267: GO 14269
14269: DISABLE
// begin enable ;
14270: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14271: LD_INT 22
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: LD_EXP 24
14281: PPUSH
14282: LD_INT 2
14284: PPUSH
14285: CALL 9578 0 4
// end ;
14289: END
// every 0 0$1 trigger southBaseDefenders do
14290: LD_EXP 25
14294: IFFALSE 14318
14296: GO 14298
14298: DISABLE
// begin enable ;
14299: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14300: LD_INT 23
14302: PPUSH
14303: LD_INT 1
14305: PPUSH
14306: LD_EXP 25
14310: PPUSH
14311: LD_INT 33
14313: PPUSH
14314: CALL 9578 0 4
// end ; end_of_file
14318: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL 30848 0 1
// if unit = JMM then
14328: LD_VAR 0 1
14332: PUSH
14333: LD_EXP 1
14337: EQUAL
14338: IFFALSE 14347
// YouLost ( JMM ) ;
14340: LD_STRING JMM
14342: PPUSH
14343: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14347: LD_VAR 0 1
14351: PPUSH
14352: CALL_OW 266
14356: PUSH
14357: LD_INT 0
14359: EQUAL
14360: IFFALSE 14369
// YouLost ( DepotDestroyed ) ;
14362: LD_STRING DepotDestroyed
14364: PPUSH
14365: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 255
14378: PUSH
14379: LD_INT 1
14381: EQUAL
14382: PUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 247
14392: PUSH
14393: LD_INT 1
14395: EQUAL
14396: AND
14397: IFFALSE 14413
// deadsCounter = deadsCounter + 1 ;
14399: LD_ADDR_EXP 31
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 1
14411: PLUS
14412: ST_TO_ADDR
// end ;
14413: PPOPN 1
14415: END
// on Command ( cmd ) do var i , j , tmp ;
14416: LD_INT 0
14418: PPUSH
14419: PPUSH
14420: PPUSH
// begin SOS_Command ( cmd ) ;
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL 30954 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14430: LD_ADDR_VAR 0 2
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_INT 1
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 21
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PUSH
14464: FOR_IN
14465: IFFALSE 14586
// begin if GetTaskList ( i ) then
14467: LD_VAR 0 2
14471: PPUSH
14472: CALL_OW 437
14476: IFFALSE 14584
// begin for j = 1 to GetTaskList ( i ) do
14478: LD_ADDR_VAR 0 3
14482: PUSH
14483: DOUBLE
14484: LD_INT 1
14486: DEC
14487: ST_TO_ADDR
14488: LD_VAR 0 2
14492: PPUSH
14493: CALL_OW 437
14497: PUSH
14498: FOR_TO
14499: IFFALSE 14582
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14501: LD_ADDR_VAR 0 4
14505: PUSH
14506: LD_VAR 0 2
14510: PPUSH
14511: CALL_OW 437
14515: PUSH
14516: LD_VAR 0 3
14520: ARRAY
14521: PUSH
14522: LD_INT 4
14524: ARRAY
14525: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14526: LD_VAR 0 4
14530: PPUSH
14531: CALL_OW 255
14535: PUSH
14536: LD_INT 3
14538: EQUAL
14539: PUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 247
14549: PUSH
14550: LD_INT 2
14552: EQUAL
14553: AND
14554: PUSH
14555: LD_VAR 0 4
14559: PPUSH
14560: CALL_OW 264
14564: PUSH
14565: LD_INT 51
14567: EQUAL
14568: AND
14569: IFFALSE 14580
// ComStop ( i ) ;
14571: LD_VAR 0 2
14575: PPUSH
14576: CALL_OW 141
// end ;
14580: GO 14498
14582: POP
14583: POP
// end ; end ;
14584: GO 14464
14586: POP
14587: POP
// end ;
14588: PPOPN 4
14590: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14591: LD_VAR 0 2
14595: PUSH
14596: LD_EXP 8
14600: EQUAL
14601: PUSH
14602: LD_EXP 21
14606: PUSH
14607: LD_INT 4
14609: NONEQUAL
14610: AND
14611: IFFALSE 14763
// begin if IsOk ( Mikhail ) then
14613: LD_EXP 8
14617: PPUSH
14618: CALL_OW 302
14622: IFFALSE 14630
// AskMikhail else
14624: CALL 7251 0 0
14628: GO 14763
// if IsOk ( llab1 ) then
14630: LD_INT 23
14632: PPUSH
14633: CALL_OW 302
14637: IFFALSE 14726
// begin InGameOn ;
14639: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14643: LD_EXP 8
14647: PPUSH
14648: LD_INT 6
14650: PPUSH
14651: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14655: LD_INT 23
14657: PPUSH
14658: LD_INT 6
14660: PPUSH
14661: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14665: LD_EXP 8
14669: PPUSH
14670: LD_INT 23
14672: PPUSH
14673: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14677: LD_INT 35
14679: PPUSH
14680: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14684: LD_EXP 8
14688: PPUSH
14689: CALL_OW 310
14693: PUSH
14694: LD_INT 23
14696: EQUAL
14697: PUSH
14698: LD_EXP 8
14702: PPUSH
14703: CALL_OW 301
14707: OR
14708: IFFALSE 14677
// SetSide ( llab1 , 1 ) ;
14710: LD_INT 23
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 235
// InGameOff ;
14720: CALL_OW 9
// end else
14724: GO 14763
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14726: LD_INT 3
14728: PPUSH
14729: LD_INT 6
14731: PPUSH
14732: LD_INT 2
14734: PPUSH
14735: LD_INT 1
14737: PPUSH
14738: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14742: LD_EXP 8
14746: PPUSH
14747: LD_INT 6
14749: PPUSH
14750: CALL_OW 235
// ComHold ( Mikhail ) ;
14754: LD_EXP 8
14758: PPUSH
14759: CALL_OW 140
// end ; end ; end ;
14763: PPOPN 2
14765: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_VAR 0 2
14775: PPUSH
14776: CALL 30970 0 2
// end ;
14780: PPOPN 2
14782: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14783: LD_EXP 8
14787: PPUSH
14788: CALL_OW 257
14792: PUSH
14793: LD_INT 3
14795: NONEQUAL
14796: IFFALSE 14814
14798: GO 14800
14800: DISABLE
// begin enable ;
14801: ENABLE
// SetClass ( Mikhail , 3 ) ;
14802: LD_EXP 8
14806: PPUSH
14807: LD_INT 3
14809: PPUSH
14810: CALL_OW 336
// end ; end_of_file
14814: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14815: LD_INT 22
14817: PUSH
14818: LD_INT 1
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 21
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 25
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: PPUSH
14850: CALL_OW 69
14854: PUSH
14855: LD_INT 0
14857: EQUAL
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_INT 4
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 21
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: PPUSH
14894: CALL_OW 69
14898: PUSH
14899: LD_INT 0
14901: EQUAL
14902: AND
14903: PUSH
14904: LD_INT 1
14906: PPUSH
14907: CALL_OW 255
14911: PUSH
14912: LD_INT 3
14914: EQUAL
14915: AND
14916: PUSH
14917: LD_INT 10
14919: PPUSH
14920: CALL_OW 255
14924: PUSH
14925: LD_INT 3
14927: EQUAL
14928: AND
14929: IFFALSE 14941
14931: GO 14933
14933: DISABLE
// YouLost ( Engineer ) ;
14934: LD_STRING Engineer
14936: PPUSH
14937: CALL_OW 104
14941: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14942: LD_INT 1
14944: PPUSH
14945: CALL_OW 255
14949: PUSH
14950: LD_INT 3
14952: EQUAL
14953: PUSH
14954: LD_EXP 27
14958: PUSH
14959: LD_INT 1
14961: EQUAL
14962: AND
14963: IFFALSE 14975
14965: GO 14967
14967: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14968: LD_STRING DepotCaptured
14970: PPUSH
14971: CALL_OW 104
14975: END
// export function PrepareTigers ; var i , un ; begin
14976: LD_INT 0
14978: PPUSH
14979: PPUSH
14980: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14981: LD_ADDR_VAR 0 2
14985: PUSH
14986: DOUBLE
14987: LD_INT 1
14989: DEC
14990: ST_TO_ADDR
14991: LD_INT 2
14993: PUSH
14994: LD_INT 3
14996: PUSH
14997: LD_INT 4
14999: PUSH
15000: LD_INT 5
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: LD_OWVAR 67
15013: ARRAY
15014: PUSH
15015: FOR_TO
15016: IFFALSE 15131
// begin uc_side := 0 ;
15018: LD_ADDR_OWVAR 20
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
// uc_nation := nation_nature ;
15026: LD_ADDR_OWVAR 21
15030: PUSH
15031: LD_INT 0
15033: ST_TO_ADDR
// hc_sex := sex_male ;
15034: LD_ADDR_OWVAR 27
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
// hc_class := class_tiger ;
15042: LD_ADDR_OWVAR 28
15046: PUSH
15047: LD_INT 14
15049: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15050: LD_ADDR_OWVAR 31
15054: PUSH
15055: LD_EXP 14
15059: PUSH
15060: LD_INT 0
15062: PUSH
15063: LD_INT 0
15065: PUSH
15066: LD_INT 0
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15075: LD_ADDR_OWVAR 35
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 40
15085: PUSH
15086: LD_INT 45
15088: PUSH
15089: LD_INT 50
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: PUSH
15098: LD_OWVAR 67
15102: ARRAY
15103: ST_TO_ADDR
// un = CreateHuman ;
15104: LD_ADDR_VAR 0 3
15108: PUSH
15109: CALL_OW 44
15113: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15114: LD_VAR 0 3
15118: PPUSH
15119: LD_INT 27
15121: PPUSH
15122: LD_INT 0
15124: PPUSH
15125: CALL_OW 49
// end ;
15129: GO 15015
15131: POP
15132: POP
// end ; end_of_file
15133: LD_VAR 0 1
15137: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 255
15145: PUSH
15146: LD_INT 1
15148: EQUAL
15149: PUSH
15150: LD_INT 10
15152: PPUSH
15153: CALL_OW 255
15157: PUSH
15158: LD_INT 1
15160: EQUAL
15161: AND
15162: PUSH
15163: LD_EXP 20
15167: PUSH
15168: LD_INT 1
15170: EQUAL
15171: AND
15172: PUSH
15173: LD_INT 22
15175: PUSH
15176: LD_INT 3
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 21
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 34
15195: PUSH
15196: LD_INT 51
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 3
15205: PUSH
15206: LD_INT 58
15208: PUSH
15209: EMPTY
15210: LIST
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: PPUSH
15222: CALL_OW 69
15226: PUSH
15227: LD_INT 0
15229: EQUAL
15230: AND
15231: IFFALSE 15326
15233: GO 15235
15235: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15236: LD_INT 9450
15238: PUSH
15239: LD_INT 8400
15241: PUSH
15242: LD_INT 6300
15244: PUSH
15245: LD_INT 6300
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: LD_OWVAR 67
15258: ARRAY
15259: PPUSH
15260: CALL_OW 67
// if cargoEscape = 1 then
15264: LD_EXP 20
15268: PUSH
15269: LD_INT 1
15271: EQUAL
15272: IFFALSE 15326
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15274: LD_EXP 9
15278: PPUSH
15279: LD_STRING D6-Pow-1
15281: PPUSH
15282: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15286: LD_EXP 1
15290: PPUSH
15291: LD_STRING D6-JMM-1
15293: PPUSH
15294: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15298: LD_EXP 9
15302: PPUSH
15303: LD_STRING D6-Pow-2
15305: PPUSH
15306: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15310: LD_EXP 1
15314: PPUSH
15315: LD_STRING D6-JMM-2
15317: PPUSH
15318: CALL_OW 88
// FinishMission ;
15322: CALL 15542 0 0
// end ; end ;
15326: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15327: LD_INT 1
15329: PPUSH
15330: CALL_OW 255
15334: PUSH
15335: LD_INT 1
15337: EQUAL
15338: PUSH
15339: LD_INT 10
15341: PPUSH
15342: CALL_OW 255
15346: PUSH
15347: LD_INT 1
15349: EQUAL
15350: AND
15351: PUSH
15352: LD_EXP 20
15356: PUSH
15357: LD_INT 1
15359: GREATER
15360: AND
15361: IFFALSE 15436
15363: GO 15365
15365: DISABLE
15366: LD_INT 0
15368: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15369: LD_INT 11550
15371: PUSH
15372: LD_INT 10500
15374: PUSH
15375: LD_INT 9450
15377: PUSH
15378: LD_INT 8400
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: PUSH
15387: LD_OWVAR 67
15391: ARRAY
15392: PPUSH
15393: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15397: LD_INT 1
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: PUSH
15415: LD_OWVAR 67
15419: ARRAY
15420: PPUSH
15421: LD_INT 13
15423: PPUSH
15424: CALL 13107 0 2
// lastBattle = 1 ;
15428: LD_ADDR_EXP 27
15432: PUSH
15433: LD_INT 1
15435: ST_TO_ADDR
// end ;
15436: PPOPN 1
15438: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15439: LD_EXP 27
15443: PUSH
15444: LD_INT 1
15446: EQUAL
15447: PUSH
15448: LD_INT 26
15450: PPUSH
15451: LD_INT 22
15453: PUSH
15454: LD_INT 3
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 21
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 70
15479: PUSH
15480: LD_INT 0
15482: EQUAL
15483: AND
15484: IFFALSE 15541
15486: GO 15488
15488: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15489: LD_EXP 9
15493: PPUSH
15494: LD_STRING D6-Pow-1
15496: PPUSH
15497: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15501: LD_EXP 1
15505: PPUSH
15506: LD_STRING D6-JMM-1
15508: PPUSH
15509: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15513: LD_EXP 9
15517: PPUSH
15518: LD_STRING D6-Pow-2
15520: PPUSH
15521: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15525: LD_EXP 1
15529: PPUSH
15530: LD_STRING D6-JMM-2
15532: PPUSH
15533: CALL_OW 88
// FinishMission ;
15537: CALL 15542 0 0
// end ;
15541: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
// if tick <= 18 18$00 then
15549: LD_OWVAR 1
15553: PUSH
15554: LD_INT 37800
15556: LESSEQUAL
15557: IFFALSE 15566
// SetAchievement ( ACH_ASPEED_2 ) ;
15559: LD_STRING ACH_ASPEED_2
15561: PPUSH
15562: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: LD_INT 22
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 21
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 24
15593: PUSH
15594: LD_INT 251
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if tmp then
15611: LD_VAR 0 2
15615: IFFALSE 15629
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15617: LD_VAR 0 2
15621: PPUSH
15622: LD_STRING 02_tanks_1
15624: PPUSH
15625: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15629: LD_EXP 21
15633: PUSH
15634: LD_INT 1
15636: EQUAL
15637: PUSH
15638: LD_EXP 8
15642: PPUSH
15643: CALL_OW 300
15647: AND
15648: IFFALSE 15662
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15650: LD_EXP 21
15654: PPUSH
15655: LD_STRING 02_mikhailStatus_1
15657: PPUSH
15658: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 274
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 275
15677: PPUSH
15678: LD_STRING 02_resources_4
15680: PPUSH
15681: CALL_OW 39
// m1 := false ;
15685: LD_ADDR_VAR 0 3
15689: PUSH
15690: LD_INT 0
15692: ST_TO_ADDR
// m2 := false ;
15693: LD_ADDR_VAR 0 4
15697: PUSH
15698: LD_INT 0
15700: ST_TO_ADDR
// m3 := false ;
15701: LD_ADDR_VAR 0 5
15705: PUSH
15706: LD_INT 0
15708: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 274
15716: PPUSH
15717: LD_INT 1
15719: PPUSH
15720: CALL_OW 275
15724: PUSH
15725: LD_INT 200
15727: GREATEREQUAL
15728: IFFALSE 15750
// begin AddMedal ( Cans , 1 ) ;
15730: LD_STRING Cans
15732: PPUSH
15733: LD_INT 1
15735: PPUSH
15736: CALL_OW 101
// m1 := true ;
15740: LD_ADDR_VAR 0 3
15744: PUSH
15745: LD_INT 1
15747: ST_TO_ADDR
// end else
15748: GO 15761
// begin AddMedal ( Cans , - 1 ) ;
15750: LD_STRING Cans
15752: PPUSH
15753: LD_INT 1
15755: NEG
15756: PPUSH
15757: CALL_OW 101
// end ; if deadsCounter < 2 then
15761: LD_EXP 31
15765: PUSH
15766: LD_INT 2
15768: LESS
15769: IFFALSE 15791
// begin AddMedal ( Deaths , 1 ) ;
15771: LD_STRING Deaths
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: CALL_OW 101
// m2 := true ;
15781: LD_ADDR_VAR 0 4
15785: PUSH
15786: LD_INT 1
15788: ST_TO_ADDR
// end else
15789: GO 15802
// begin AddMedal ( Deaths , - 1 ) ;
15791: LD_STRING Deaths
15793: PPUSH
15794: LD_INT 1
15796: NEG
15797: PPUSH
15798: CALL_OW 101
// end ; if mikhailStatus = 0 then
15802: LD_EXP 21
15806: PUSH
15807: LD_INT 0
15809: EQUAL
15810: IFFALSE 15823
// AddMedal ( Prisoner , - 1 ) ;
15812: LD_STRING Prisoner
15814: PPUSH
15815: LD_INT 1
15817: NEG
15818: PPUSH
15819: CALL_OW 101
// if mikhailStatus = 1 then
15823: LD_EXP 21
15827: PUSH
15828: LD_INT 1
15830: EQUAL
15831: IFFALSE 15851
// begin AddMedal ( Prisoner , 1 ) ;
15833: LD_STRING Prisoner
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 101
// m3 := true ;
15843: LD_ADDR_VAR 0 5
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15851: LD_EXP 21
15855: PUSH
15856: LD_INT 2
15858: EQUAL
15859: IFFALSE 15879
// begin AddMedal ( Prisoner , 2 ) ;
15861: LD_STRING Prisoner
15863: PPUSH
15864: LD_INT 2
15866: PPUSH
15867: CALL_OW 101
// m3 := true ;
15871: LD_ADDR_VAR 0 5
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15879: LD_EXP 21
15883: PUSH
15884: LD_INT 3
15886: EQUAL
15887: IFFALSE 15900
// AddMedal ( Prisoner , - 2 ) ;
15889: LD_STRING Prisoner
15891: PPUSH
15892: LD_INT 2
15894: NEG
15895: PPUSH
15896: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15900: LD_OWVAR 67
15904: PUSH
15905: LD_INT 3
15907: GREATEREQUAL
15908: PUSH
15909: LD_VAR 0 3
15913: AND
15914: PUSH
15915: LD_VAR 0 4
15919: AND
15920: PUSH
15921: LD_VAR 0 5
15925: AND
15926: IFFALSE 15938
// SetAchievementEX ( ACH_AMER , 2 ) ;
15928: LD_STRING ACH_AMER
15930: PPUSH
15931: LD_INT 2
15933: PPUSH
15934: CALL_OW 564
// GiveMedals ( MAIN ) ;
15938: LD_STRING MAIN
15940: PPUSH
15941: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15945: LD_INT 22
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 23
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: PPUSH
15985: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15989: LD_EXP 1
15993: PPUSH
15994: LD_EXP 33
15998: PUSH
15999: LD_STRING JMM
16001: STR
16002: PPUSH
16003: CALL_OW 38
// if IsOK ( Bobby ) then
16007: LD_EXP 2
16011: PPUSH
16012: CALL_OW 302
16016: IFFALSE 16036
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16018: LD_EXP 2
16022: PPUSH
16023: LD_EXP 33
16027: PUSH
16028: LD_STRING Bobby
16030: STR
16031: PPUSH
16032: CALL_OW 38
// if IsOK ( Cyrus ) then
16036: LD_EXP 3
16040: PPUSH
16041: CALL_OW 302
16045: IFFALSE 16065
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16047: LD_EXP 3
16051: PPUSH
16052: LD_EXP 33
16056: PUSH
16057: LD_STRING Cyrus
16059: STR
16060: PPUSH
16061: CALL_OW 38
// if IsOK ( Lisa ) then
16065: LD_EXP 4
16069: PPUSH
16070: CALL_OW 302
16074: IFFALSE 16094
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16076: LD_EXP 4
16080: PPUSH
16081: LD_EXP 33
16085: PUSH
16086: LD_STRING Lisa
16088: STR
16089: PPUSH
16090: CALL_OW 38
// if IsOK ( Khatam ) then
16094: LD_EXP 5
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16123
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16105: LD_EXP 5
16109: PPUSH
16110: LD_EXP 33
16114: PUSH
16115: LD_STRING Khatam
16117: STR
16118: PPUSH
16119: CALL_OW 38
// if IsOK ( Brian ) then
16123: LD_EXP 6
16127: PPUSH
16128: CALL_OW 302
16132: IFFALSE 16152
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16134: LD_EXP 6
16138: PPUSH
16139: LD_EXP 33
16143: PUSH
16144: LD_STRING Brian
16146: STR
16147: PPUSH
16148: CALL_OW 38
// if IsOk ( Jerry ) then
16152: LD_EXP 7
16156: PPUSH
16157: CALL_OW 302
16161: IFFALSE 16181
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16163: LD_EXP 7
16167: PPUSH
16168: LD_EXP 33
16172: PUSH
16173: LD_STRING Jerry
16175: STR
16176: PPUSH
16177: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16181: LD_EXP 21
16185: PUSH
16186: LD_INT 1
16188: EQUAL
16189: PUSH
16190: LD_EXP 8
16194: PPUSH
16195: CALL_OW 255
16199: PUSH
16200: LD_INT 1
16202: EQUAL
16203: AND
16204: PUSH
16205: LD_EXP 8
16209: PPUSH
16210: CALL_OW 302
16214: AND
16215: IFFALSE 16235
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16217: LD_EXP 8
16221: PPUSH
16222: LD_EXP 33
16226: PUSH
16227: LD_STRING Mikhail
16229: STR
16230: PPUSH
16231: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16235: LD_INT 50
16237: PUSH
16238: EMPTY
16239: LIST
16240: PUSH
16241: LD_INT 22
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 21
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 69
16270: PUSH
16271: LD_EXP 1
16275: PUSH
16276: LD_EXP 2
16280: PUSH
16281: LD_EXP 3
16285: PUSH
16286: LD_EXP 4
16290: PUSH
16291: LD_EXP 5
16295: PUSH
16296: LD_EXP 6
16300: PUSH
16301: LD_EXP 7
16305: PUSH
16306: LD_EXP 8
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: DIFF
16321: PPUSH
16322: LD_STRING 02_other_survivors
16324: PPUSH
16325: CALL_OW 38
// YouWin ;
16329: CALL_OW 103
// end ; end_of_file
16333: LD_VAR 0 1
16337: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16338: LD_INT 0
16340: PPUSH
// ar_miner := 81 ;
16341: LD_ADDR_EXP 43
16345: PUSH
16346: LD_INT 81
16348: ST_TO_ADDR
// ar_crane := 88 ;
16349: LD_ADDR_EXP 42
16353: PUSH
16354: LD_INT 88
16356: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16357: LD_ADDR_EXP 37
16361: PUSH
16362: LD_INT 89
16364: ST_TO_ADDR
// us_hack := 99 ;
16365: LD_ADDR_EXP 38
16369: PUSH
16370: LD_INT 99
16372: ST_TO_ADDR
// us_artillery := 97 ;
16373: LD_ADDR_EXP 39
16377: PUSH
16378: LD_INT 97
16380: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16381: LD_ADDR_EXP 40
16385: PUSH
16386: LD_INT 91
16388: ST_TO_ADDR
// ar_mortar := 92 ;
16389: LD_ADDR_EXP 41
16393: PUSH
16394: LD_INT 92
16396: ST_TO_ADDR
// ru_flamethrower := 93 ;
16397: LD_ADDR_EXP 44
16401: PUSH
16402: LD_INT 93
16404: ST_TO_ADDR
// ru_radar := 98 ;
16405: LD_ADDR_EXP 36
16409: PUSH
16410: LD_INT 98
16412: ST_TO_ADDR
// tech_Artillery := 80 ;
16413: LD_ADDR_EXP 45
16417: PUSH
16418: LD_INT 80
16420: ST_TO_ADDR
// tech_RadMat := 81 ;
16421: LD_ADDR_EXP 46
16425: PUSH
16426: LD_INT 81
16428: ST_TO_ADDR
// tech_BasicTools := 82 ;
16429: LD_ADDR_EXP 47
16433: PUSH
16434: LD_INT 82
16436: ST_TO_ADDR
// tech_Cargo := 83 ;
16437: LD_ADDR_EXP 48
16441: PUSH
16442: LD_INT 83
16444: ST_TO_ADDR
// tech_Track := 84 ;
16445: LD_ADDR_EXP 49
16449: PUSH
16450: LD_INT 84
16452: ST_TO_ADDR
// tech_Crane := 85 ;
16453: LD_ADDR_EXP 50
16457: PUSH
16458: LD_INT 85
16460: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16461: LD_ADDR_EXP 51
16465: PUSH
16466: LD_INT 86
16468: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16469: LD_ADDR_EXP 52
16473: PUSH
16474: LD_INT 87
16476: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16477: LD_ADDR_EXP 53
16481: PUSH
16482: LD_INT 88
16484: ST_TO_ADDR
// class_mastodont := 31 ;
16485: LD_ADDR_EXP 54
16489: PUSH
16490: LD_INT 31
16492: ST_TO_ADDR
// class_horse := 21 ;
16493: LD_ADDR_EXP 55
16497: PUSH
16498: LD_INT 21
16500: ST_TO_ADDR
// end ;
16501: LD_VAR 0 1
16505: RET
// every 1 do
16506: GO 16508
16508: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16509: CALL 16338 0 0
16513: END
// every 0 0$1 do
16514: GO 16516
16516: DISABLE
// begin enable ;
16517: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16518: LD_STRING updateTimer(
16520: PUSH
16521: LD_OWVAR 1
16525: STR
16526: PUSH
16527: LD_STRING );
16529: STR
16530: PPUSH
16531: CALL_OW 559
// end ;
16535: END
// export function SOS_MapStart ( ) ; begin
16536: LD_INT 0
16538: PPUSH
// if streamModeActive then
16539: LD_EXP 56
16543: IFFALSE 16552
// DefineStreamItems ( true ) ;
16545: LD_INT 1
16547: PPUSH
16548: CALL 18202 0 1
// UpdateFactoryWaypoints ( ) ;
16552: CALL 31786 0 0
// end ;
16556: LD_VAR 0 1
16560: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16561: LD_INT 0
16563: PPUSH
// if p2 = 100 then
16564: LD_VAR 0 2
16568: PUSH
16569: LD_INT 100
16571: EQUAL
16572: IFFALSE 17575
// begin if not StreamModeActive then
16574: LD_EXP 56
16578: NOT
16579: IFFALSE 16589
// StreamModeActive := true ;
16581: LD_ADDR_EXP 56
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// if p3 = 0 then
16589: LD_VAR 0 3
16593: PUSH
16594: LD_INT 0
16596: EQUAL
16597: IFFALSE 16603
// InitStreamMode ;
16599: CALL 17738 0 0
// if p3 = 1 then
16603: LD_VAR 0 3
16607: PUSH
16608: LD_INT 1
16610: EQUAL
16611: IFFALSE 16621
// sRocket := true ;
16613: LD_ADDR_EXP 61
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// if p3 = 2 then
16621: LD_VAR 0 3
16625: PUSH
16626: LD_INT 2
16628: EQUAL
16629: IFFALSE 16639
// sSpeed := true ;
16631: LD_ADDR_EXP 60
16635: PUSH
16636: LD_INT 1
16638: ST_TO_ADDR
// if p3 = 3 then
16639: LD_VAR 0 3
16643: PUSH
16644: LD_INT 3
16646: EQUAL
16647: IFFALSE 16657
// sEngine := true ;
16649: LD_ADDR_EXP 62
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
// if p3 = 4 then
16657: LD_VAR 0 3
16661: PUSH
16662: LD_INT 4
16664: EQUAL
16665: IFFALSE 16675
// sSpec := true ;
16667: LD_ADDR_EXP 59
16671: PUSH
16672: LD_INT 1
16674: ST_TO_ADDR
// if p3 = 5 then
16675: LD_VAR 0 3
16679: PUSH
16680: LD_INT 5
16682: EQUAL
16683: IFFALSE 16693
// sLevel := true ;
16685: LD_ADDR_EXP 63
16689: PUSH
16690: LD_INT 1
16692: ST_TO_ADDR
// if p3 = 6 then
16693: LD_VAR 0 3
16697: PUSH
16698: LD_INT 6
16700: EQUAL
16701: IFFALSE 16711
// sArmoury := true ;
16703: LD_ADDR_EXP 64
16707: PUSH
16708: LD_INT 1
16710: ST_TO_ADDR
// if p3 = 7 then
16711: LD_VAR 0 3
16715: PUSH
16716: LD_INT 7
16718: EQUAL
16719: IFFALSE 16729
// sRadar := true ;
16721: LD_ADDR_EXP 65
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
// if p3 = 8 then
16729: LD_VAR 0 3
16733: PUSH
16734: LD_INT 8
16736: EQUAL
16737: IFFALSE 16747
// sBunker := true ;
16739: LD_ADDR_EXP 66
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// if p3 = 9 then
16747: LD_VAR 0 3
16751: PUSH
16752: LD_INT 9
16754: EQUAL
16755: IFFALSE 16765
// sHack := true ;
16757: LD_ADDR_EXP 67
16761: PUSH
16762: LD_INT 1
16764: ST_TO_ADDR
// if p3 = 10 then
16765: LD_VAR 0 3
16769: PUSH
16770: LD_INT 10
16772: EQUAL
16773: IFFALSE 16783
// sFire := true ;
16775: LD_ADDR_EXP 68
16779: PUSH
16780: LD_INT 1
16782: ST_TO_ADDR
// if p3 = 11 then
16783: LD_VAR 0 3
16787: PUSH
16788: LD_INT 11
16790: EQUAL
16791: IFFALSE 16801
// sRefresh := true ;
16793: LD_ADDR_EXP 69
16797: PUSH
16798: LD_INT 1
16800: ST_TO_ADDR
// if p3 = 12 then
16801: LD_VAR 0 3
16805: PUSH
16806: LD_INT 12
16808: EQUAL
16809: IFFALSE 16819
// sExp := true ;
16811: LD_ADDR_EXP 70
16815: PUSH
16816: LD_INT 1
16818: ST_TO_ADDR
// if p3 = 13 then
16819: LD_VAR 0 3
16823: PUSH
16824: LD_INT 13
16826: EQUAL
16827: IFFALSE 16837
// sDepot := true ;
16829: LD_ADDR_EXP 71
16833: PUSH
16834: LD_INT 1
16836: ST_TO_ADDR
// if p3 = 14 then
16837: LD_VAR 0 3
16841: PUSH
16842: LD_INT 14
16844: EQUAL
16845: IFFALSE 16855
// sFlag := true ;
16847: LD_ADDR_EXP 72
16851: PUSH
16852: LD_INT 1
16854: ST_TO_ADDR
// if p3 = 15 then
16855: LD_VAR 0 3
16859: PUSH
16860: LD_INT 15
16862: EQUAL
16863: IFFALSE 16873
// sKamikadze := true ;
16865: LD_ADDR_EXP 80
16869: PUSH
16870: LD_INT 1
16872: ST_TO_ADDR
// if p3 = 16 then
16873: LD_VAR 0 3
16877: PUSH
16878: LD_INT 16
16880: EQUAL
16881: IFFALSE 16891
// sTroll := true ;
16883: LD_ADDR_EXP 81
16887: PUSH
16888: LD_INT 1
16890: ST_TO_ADDR
// if p3 = 17 then
16891: LD_VAR 0 3
16895: PUSH
16896: LD_INT 17
16898: EQUAL
16899: IFFALSE 16909
// sSlow := true ;
16901: LD_ADDR_EXP 82
16905: PUSH
16906: LD_INT 1
16908: ST_TO_ADDR
// if p3 = 18 then
16909: LD_VAR 0 3
16913: PUSH
16914: LD_INT 18
16916: EQUAL
16917: IFFALSE 16927
// sLack := true ;
16919: LD_ADDR_EXP 83
16923: PUSH
16924: LD_INT 1
16926: ST_TO_ADDR
// if p3 = 19 then
16927: LD_VAR 0 3
16931: PUSH
16932: LD_INT 19
16934: EQUAL
16935: IFFALSE 16945
// sTank := true ;
16937: LD_ADDR_EXP 85
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// if p3 = 20 then
16945: LD_VAR 0 3
16949: PUSH
16950: LD_INT 20
16952: EQUAL
16953: IFFALSE 16963
// sRemote := true ;
16955: LD_ADDR_EXP 86
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// if p3 = 21 then
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 21
16970: EQUAL
16971: IFFALSE 16981
// sPowell := true ;
16973: LD_ADDR_EXP 87
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// if p3 = 22 then
16981: LD_VAR 0 3
16985: PUSH
16986: LD_INT 22
16988: EQUAL
16989: IFFALSE 16999
// sTeleport := true ;
16991: LD_ADDR_EXP 90
16995: PUSH
16996: LD_INT 1
16998: ST_TO_ADDR
// if p3 = 23 then
16999: LD_VAR 0 3
17003: PUSH
17004: LD_INT 23
17006: EQUAL
17007: IFFALSE 17017
// sOilTower := true ;
17009: LD_ADDR_EXP 92
17013: PUSH
17014: LD_INT 1
17016: ST_TO_ADDR
// if p3 = 24 then
17017: LD_VAR 0 3
17021: PUSH
17022: LD_INT 24
17024: EQUAL
17025: IFFALSE 17035
// sShovel := true ;
17027: LD_ADDR_EXP 93
17031: PUSH
17032: LD_INT 1
17034: ST_TO_ADDR
// if p3 = 25 then
17035: LD_VAR 0 3
17039: PUSH
17040: LD_INT 25
17042: EQUAL
17043: IFFALSE 17053
// sSheik := true ;
17045: LD_ADDR_EXP 94
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// if p3 = 26 then
17053: LD_VAR 0 3
17057: PUSH
17058: LD_INT 26
17060: EQUAL
17061: IFFALSE 17071
// sEarthquake := true ;
17063: LD_ADDR_EXP 96
17067: PUSH
17068: LD_INT 1
17070: ST_TO_ADDR
// if p3 = 27 then
17071: LD_VAR 0 3
17075: PUSH
17076: LD_INT 27
17078: EQUAL
17079: IFFALSE 17089
// sAI := true ;
17081: LD_ADDR_EXP 97
17085: PUSH
17086: LD_INT 1
17088: ST_TO_ADDR
// if p3 = 28 then
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 28
17096: EQUAL
17097: IFFALSE 17107
// sCargo := true ;
17099: LD_ADDR_EXP 100
17103: PUSH
17104: LD_INT 1
17106: ST_TO_ADDR
// if p3 = 29 then
17107: LD_VAR 0 3
17111: PUSH
17112: LD_INT 29
17114: EQUAL
17115: IFFALSE 17125
// sDLaser := true ;
17117: LD_ADDR_EXP 101
17121: PUSH
17122: LD_INT 1
17124: ST_TO_ADDR
// if p3 = 30 then
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 30
17132: EQUAL
17133: IFFALSE 17143
// sExchange := true ;
17135: LD_ADDR_EXP 102
17139: PUSH
17140: LD_INT 1
17142: ST_TO_ADDR
// if p3 = 31 then
17143: LD_VAR 0 3
17147: PUSH
17148: LD_INT 31
17150: EQUAL
17151: IFFALSE 17161
// sFac := true ;
17153: LD_ADDR_EXP 103
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// if p3 = 32 then
17161: LD_VAR 0 3
17165: PUSH
17166: LD_INT 32
17168: EQUAL
17169: IFFALSE 17179
// sPower := true ;
17171: LD_ADDR_EXP 104
17175: PUSH
17176: LD_INT 1
17178: ST_TO_ADDR
// if p3 = 33 then
17179: LD_VAR 0 3
17183: PUSH
17184: LD_INT 33
17186: EQUAL
17187: IFFALSE 17197
// sRandom := true ;
17189: LD_ADDR_EXP 105
17193: PUSH
17194: LD_INT 1
17196: ST_TO_ADDR
// if p3 = 34 then
17197: LD_VAR 0 3
17201: PUSH
17202: LD_INT 34
17204: EQUAL
17205: IFFALSE 17215
// sShield := true ;
17207: LD_ADDR_EXP 106
17211: PUSH
17212: LD_INT 1
17214: ST_TO_ADDR
// if p3 = 35 then
17215: LD_VAR 0 3
17219: PUSH
17220: LD_INT 35
17222: EQUAL
17223: IFFALSE 17233
// sTime := true ;
17225: LD_ADDR_EXP 107
17229: PUSH
17230: LD_INT 1
17232: ST_TO_ADDR
// if p3 = 36 then
17233: LD_VAR 0 3
17237: PUSH
17238: LD_INT 36
17240: EQUAL
17241: IFFALSE 17251
// sTools := true ;
17243: LD_ADDR_EXP 108
17247: PUSH
17248: LD_INT 1
17250: ST_TO_ADDR
// if p3 = 101 then
17251: LD_VAR 0 3
17255: PUSH
17256: LD_INT 101
17258: EQUAL
17259: IFFALSE 17269
// sSold := true ;
17261: LD_ADDR_EXP 73
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// if p3 = 102 then
17269: LD_VAR 0 3
17273: PUSH
17274: LD_INT 102
17276: EQUAL
17277: IFFALSE 17287
// sDiff := true ;
17279: LD_ADDR_EXP 74
17283: PUSH
17284: LD_INT 1
17286: ST_TO_ADDR
// if p3 = 103 then
17287: LD_VAR 0 3
17291: PUSH
17292: LD_INT 103
17294: EQUAL
17295: IFFALSE 17305
// sFog := true ;
17297: LD_ADDR_EXP 77
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// if p3 = 104 then
17305: LD_VAR 0 3
17309: PUSH
17310: LD_INT 104
17312: EQUAL
17313: IFFALSE 17323
// sReset := true ;
17315: LD_ADDR_EXP 78
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
// if p3 = 105 then
17323: LD_VAR 0 3
17327: PUSH
17328: LD_INT 105
17330: EQUAL
17331: IFFALSE 17341
// sSun := true ;
17333: LD_ADDR_EXP 79
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// if p3 = 106 then
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 106
17348: EQUAL
17349: IFFALSE 17359
// sTiger := true ;
17351: LD_ADDR_EXP 75
17355: PUSH
17356: LD_INT 1
17358: ST_TO_ADDR
// if p3 = 107 then
17359: LD_VAR 0 3
17363: PUSH
17364: LD_INT 107
17366: EQUAL
17367: IFFALSE 17377
// sBomb := true ;
17369: LD_ADDR_EXP 76
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// if p3 = 108 then
17377: LD_VAR 0 3
17381: PUSH
17382: LD_INT 108
17384: EQUAL
17385: IFFALSE 17395
// sWound := true ;
17387: LD_ADDR_EXP 84
17391: PUSH
17392: LD_INT 1
17394: ST_TO_ADDR
// if p3 = 109 then
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 109
17402: EQUAL
17403: IFFALSE 17413
// sBetray := true ;
17405: LD_ADDR_EXP 88
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// if p3 = 110 then
17413: LD_VAR 0 3
17417: PUSH
17418: LD_INT 110
17420: EQUAL
17421: IFFALSE 17431
// sContamin := true ;
17423: LD_ADDR_EXP 89
17427: PUSH
17428: LD_INT 1
17430: ST_TO_ADDR
// if p3 = 111 then
17431: LD_VAR 0 3
17435: PUSH
17436: LD_INT 111
17438: EQUAL
17439: IFFALSE 17449
// sOil := true ;
17441: LD_ADDR_EXP 91
17445: PUSH
17446: LD_INT 1
17448: ST_TO_ADDR
// if p3 = 112 then
17449: LD_VAR 0 3
17453: PUSH
17454: LD_INT 112
17456: EQUAL
17457: IFFALSE 17467
// sStu := true ;
17459: LD_ADDR_EXP 95
17463: PUSH
17464: LD_INT 1
17466: ST_TO_ADDR
// if p3 = 113 then
17467: LD_VAR 0 3
17471: PUSH
17472: LD_INT 113
17474: EQUAL
17475: IFFALSE 17485
// sBazooka := true ;
17477: LD_ADDR_EXP 98
17481: PUSH
17482: LD_INT 1
17484: ST_TO_ADDR
// if p3 = 114 then
17485: LD_VAR 0 3
17489: PUSH
17490: LD_INT 114
17492: EQUAL
17493: IFFALSE 17503
// sMortar := true ;
17495: LD_ADDR_EXP 99
17499: PUSH
17500: LD_INT 1
17502: ST_TO_ADDR
// if p3 = 115 then
17503: LD_VAR 0 3
17507: PUSH
17508: LD_INT 115
17510: EQUAL
17511: IFFALSE 17521
// sRanger := true ;
17513: LD_ADDR_EXP 109
17517: PUSH
17518: LD_INT 1
17520: ST_TO_ADDR
// if p3 = 116 then
17521: LD_VAR 0 3
17525: PUSH
17526: LD_INT 116
17528: EQUAL
17529: IFFALSE 17539
// sComputer := true ;
17531: LD_ADDR_EXP 110
17535: PUSH
17536: LD_INT 1
17538: ST_TO_ADDR
// if p3 = 117 then
17539: LD_VAR 0 3
17543: PUSH
17544: LD_INT 117
17546: EQUAL
17547: IFFALSE 17557
// s30 := true ;
17549: LD_ADDR_EXP 111
17553: PUSH
17554: LD_INT 1
17556: ST_TO_ADDR
// if p3 = 118 then
17557: LD_VAR 0 3
17561: PUSH
17562: LD_INT 118
17564: EQUAL
17565: IFFALSE 17575
// s60 := true ;
17567: LD_ADDR_EXP 112
17571: PUSH
17572: LD_INT 1
17574: ST_TO_ADDR
// end ; if p2 = 101 then
17575: LD_VAR 0 2
17579: PUSH
17580: LD_INT 101
17582: EQUAL
17583: IFFALSE 17711
// begin case p3 of 1 :
17585: LD_VAR 0 3
17589: PUSH
17590: LD_INT 1
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17605
17598: POP
// hHackUnlimitedResources ; 2 :
17599: CALL 29809 0 0
17603: GO 17711
17605: LD_INT 2
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17620
17613: POP
// hHackSetLevel10 ; 3 :
17614: CALL 29942 0 0
17618: GO 17711
17620: LD_INT 3
17622: DOUBLE
17623: EQUAL
17624: IFTRUE 17628
17626: GO 17635
17628: POP
// hHackSetLevel10YourUnits ; 4 :
17629: CALL 30027 0 0
17633: GO 17711
17635: LD_INT 4
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17650
17643: POP
// hHackInvincible ; 5 :
17644: CALL 30475 0 0
17648: GO 17711
17650: LD_INT 5
17652: DOUBLE
17653: EQUAL
17654: IFTRUE 17658
17656: GO 17665
17658: POP
// hHackInvisible ; 6 :
17659: CALL 30586 0 0
17663: GO 17711
17665: LD_INT 6
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17673
17671: GO 17680
17673: POP
// hHackChangeYourSide ; 7 :
17674: CALL 30643 0 0
17678: GO 17711
17680: LD_INT 7
17682: DOUBLE
17683: EQUAL
17684: IFTRUE 17688
17686: GO 17695
17688: POP
// hHackChangeUnitSide ; 8 :
17689: CALL 30685 0 0
17693: GO 17711
17695: LD_INT 8
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17710
17703: POP
// hHackFog ; end ;
17704: CALL 30786 0 0
17708: GO 17711
17710: POP
// end ; end ;
17711: LD_VAR 0 7
17715: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17716: GO 17718
17718: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17719: LD_STRING initStreamRollete();
17721: PPUSH
17722: CALL_OW 559
// InitStreamMode ;
17726: CALL 17738 0 0
// DefineStreamItems ( false ) ;
17730: LD_INT 0
17732: PPUSH
17733: CALL 18202 0 1
// end ;
17737: END
// function InitStreamMode ; begin
17738: LD_INT 0
17740: PPUSH
// streamModeActive := false ;
17741: LD_ADDR_EXP 56
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
// normalCounter := 36 ;
17749: LD_ADDR_EXP 57
17753: PUSH
17754: LD_INT 36
17756: ST_TO_ADDR
// hardcoreCounter := 18 ;
17757: LD_ADDR_EXP 58
17761: PUSH
17762: LD_INT 18
17764: ST_TO_ADDR
// sRocket := false ;
17765: LD_ADDR_EXP 61
17769: PUSH
17770: LD_INT 0
17772: ST_TO_ADDR
// sSpeed := false ;
17773: LD_ADDR_EXP 60
17777: PUSH
17778: LD_INT 0
17780: ST_TO_ADDR
// sEngine := false ;
17781: LD_ADDR_EXP 62
17785: PUSH
17786: LD_INT 0
17788: ST_TO_ADDR
// sSpec := false ;
17789: LD_ADDR_EXP 59
17793: PUSH
17794: LD_INT 0
17796: ST_TO_ADDR
// sLevel := false ;
17797: LD_ADDR_EXP 63
17801: PUSH
17802: LD_INT 0
17804: ST_TO_ADDR
// sArmoury := false ;
17805: LD_ADDR_EXP 64
17809: PUSH
17810: LD_INT 0
17812: ST_TO_ADDR
// sRadar := false ;
17813: LD_ADDR_EXP 65
17817: PUSH
17818: LD_INT 0
17820: ST_TO_ADDR
// sBunker := false ;
17821: LD_ADDR_EXP 66
17825: PUSH
17826: LD_INT 0
17828: ST_TO_ADDR
// sHack := false ;
17829: LD_ADDR_EXP 67
17833: PUSH
17834: LD_INT 0
17836: ST_TO_ADDR
// sFire := false ;
17837: LD_ADDR_EXP 68
17841: PUSH
17842: LD_INT 0
17844: ST_TO_ADDR
// sRefresh := false ;
17845: LD_ADDR_EXP 69
17849: PUSH
17850: LD_INT 0
17852: ST_TO_ADDR
// sExp := false ;
17853: LD_ADDR_EXP 70
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// sDepot := false ;
17861: LD_ADDR_EXP 71
17865: PUSH
17866: LD_INT 0
17868: ST_TO_ADDR
// sFlag := false ;
17869: LD_ADDR_EXP 72
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
// sKamikadze := false ;
17877: LD_ADDR_EXP 80
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// sTroll := false ;
17885: LD_ADDR_EXP 81
17889: PUSH
17890: LD_INT 0
17892: ST_TO_ADDR
// sSlow := false ;
17893: LD_ADDR_EXP 82
17897: PUSH
17898: LD_INT 0
17900: ST_TO_ADDR
// sLack := false ;
17901: LD_ADDR_EXP 83
17905: PUSH
17906: LD_INT 0
17908: ST_TO_ADDR
// sTank := false ;
17909: LD_ADDR_EXP 85
17913: PUSH
17914: LD_INT 0
17916: ST_TO_ADDR
// sRemote := false ;
17917: LD_ADDR_EXP 86
17921: PUSH
17922: LD_INT 0
17924: ST_TO_ADDR
// sPowell := false ;
17925: LD_ADDR_EXP 87
17929: PUSH
17930: LD_INT 0
17932: ST_TO_ADDR
// sTeleport := false ;
17933: LD_ADDR_EXP 90
17937: PUSH
17938: LD_INT 0
17940: ST_TO_ADDR
// sOilTower := false ;
17941: LD_ADDR_EXP 92
17945: PUSH
17946: LD_INT 0
17948: ST_TO_ADDR
// sShovel := false ;
17949: LD_ADDR_EXP 93
17953: PUSH
17954: LD_INT 0
17956: ST_TO_ADDR
// sSheik := false ;
17957: LD_ADDR_EXP 94
17961: PUSH
17962: LD_INT 0
17964: ST_TO_ADDR
// sEarthquake := false ;
17965: LD_ADDR_EXP 96
17969: PUSH
17970: LD_INT 0
17972: ST_TO_ADDR
// sAI := false ;
17973: LD_ADDR_EXP 97
17977: PUSH
17978: LD_INT 0
17980: ST_TO_ADDR
// sCargo := false ;
17981: LD_ADDR_EXP 100
17985: PUSH
17986: LD_INT 0
17988: ST_TO_ADDR
// sDLaser := false ;
17989: LD_ADDR_EXP 101
17993: PUSH
17994: LD_INT 0
17996: ST_TO_ADDR
// sExchange := false ;
17997: LD_ADDR_EXP 102
18001: PUSH
18002: LD_INT 0
18004: ST_TO_ADDR
// sFac := false ;
18005: LD_ADDR_EXP 103
18009: PUSH
18010: LD_INT 0
18012: ST_TO_ADDR
// sPower := false ;
18013: LD_ADDR_EXP 104
18017: PUSH
18018: LD_INT 0
18020: ST_TO_ADDR
// sRandom := false ;
18021: LD_ADDR_EXP 105
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
// sShield := false ;
18029: LD_ADDR_EXP 106
18033: PUSH
18034: LD_INT 0
18036: ST_TO_ADDR
// sTime := false ;
18037: LD_ADDR_EXP 107
18041: PUSH
18042: LD_INT 0
18044: ST_TO_ADDR
// sTools := false ;
18045: LD_ADDR_EXP 108
18049: PUSH
18050: LD_INT 0
18052: ST_TO_ADDR
// sSold := false ;
18053: LD_ADDR_EXP 73
18057: PUSH
18058: LD_INT 0
18060: ST_TO_ADDR
// sDiff := false ;
18061: LD_ADDR_EXP 74
18065: PUSH
18066: LD_INT 0
18068: ST_TO_ADDR
// sFog := false ;
18069: LD_ADDR_EXP 77
18073: PUSH
18074: LD_INT 0
18076: ST_TO_ADDR
// sReset := false ;
18077: LD_ADDR_EXP 78
18081: PUSH
18082: LD_INT 0
18084: ST_TO_ADDR
// sSun := false ;
18085: LD_ADDR_EXP 79
18089: PUSH
18090: LD_INT 0
18092: ST_TO_ADDR
// sTiger := false ;
18093: LD_ADDR_EXP 75
18097: PUSH
18098: LD_INT 0
18100: ST_TO_ADDR
// sBomb := false ;
18101: LD_ADDR_EXP 76
18105: PUSH
18106: LD_INT 0
18108: ST_TO_ADDR
// sWound := false ;
18109: LD_ADDR_EXP 84
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// sBetray := false ;
18117: LD_ADDR_EXP 88
18121: PUSH
18122: LD_INT 0
18124: ST_TO_ADDR
// sContamin := false ;
18125: LD_ADDR_EXP 89
18129: PUSH
18130: LD_INT 0
18132: ST_TO_ADDR
// sOil := false ;
18133: LD_ADDR_EXP 91
18137: PUSH
18138: LD_INT 0
18140: ST_TO_ADDR
// sStu := false ;
18141: LD_ADDR_EXP 95
18145: PUSH
18146: LD_INT 0
18148: ST_TO_ADDR
// sBazooka := false ;
18149: LD_ADDR_EXP 98
18153: PUSH
18154: LD_INT 0
18156: ST_TO_ADDR
// sMortar := false ;
18157: LD_ADDR_EXP 99
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// sRanger := false ;
18165: LD_ADDR_EXP 109
18169: PUSH
18170: LD_INT 0
18172: ST_TO_ADDR
// sComputer := false ;
18173: LD_ADDR_EXP 110
18177: PUSH
18178: LD_INT 0
18180: ST_TO_ADDR
// s30 := false ;
18181: LD_ADDR_EXP 111
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// s60 := false ;
18189: LD_ADDR_EXP 112
18193: PUSH
18194: LD_INT 0
18196: ST_TO_ADDR
// end ;
18197: LD_VAR 0 1
18201: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18202: LD_INT 0
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
// result := [ ] ;
18211: LD_ADDR_VAR 0 2
18215: PUSH
18216: EMPTY
18217: ST_TO_ADDR
// if campaign_id = 1 then
18218: LD_OWVAR 69
18222: PUSH
18223: LD_INT 1
18225: EQUAL
18226: IFFALSE 21392
// begin case mission_number of 1 :
18228: LD_OWVAR 70
18232: PUSH
18233: LD_INT 1
18235: DOUBLE
18236: EQUAL
18237: IFTRUE 18241
18239: GO 18317
18241: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18242: LD_ADDR_VAR 0 2
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: LD_INT 11
18255: PUSH
18256: LD_INT 12
18258: PUSH
18259: LD_INT 15
18261: PUSH
18262: LD_INT 16
18264: PUSH
18265: LD_INT 22
18267: PUSH
18268: LD_INT 23
18270: PUSH
18271: LD_INT 26
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 101
18287: PUSH
18288: LD_INT 102
18290: PUSH
18291: LD_INT 106
18293: PUSH
18294: LD_INT 116
18296: PUSH
18297: LD_INT 117
18299: PUSH
18300: LD_INT 118
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: ST_TO_ADDR
18315: GO 21390
18317: LD_INT 2
18319: DOUBLE
18320: EQUAL
18321: IFTRUE 18325
18323: GO 18409
18325: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18326: LD_ADDR_VAR 0 2
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: LD_INT 4
18336: PUSH
18337: LD_INT 11
18339: PUSH
18340: LD_INT 12
18342: PUSH
18343: LD_INT 15
18345: PUSH
18346: LD_INT 16
18348: PUSH
18349: LD_INT 22
18351: PUSH
18352: LD_INT 23
18354: PUSH
18355: LD_INT 26
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 101
18371: PUSH
18372: LD_INT 102
18374: PUSH
18375: LD_INT 105
18377: PUSH
18378: LD_INT 106
18380: PUSH
18381: LD_INT 108
18383: PUSH
18384: LD_INT 116
18386: PUSH
18387: LD_INT 117
18389: PUSH
18390: LD_INT 118
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: ST_TO_ADDR
18407: GO 21390
18409: LD_INT 3
18411: DOUBLE
18412: EQUAL
18413: IFTRUE 18417
18415: GO 18505
18417: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18418: LD_ADDR_VAR 0 2
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: LD_INT 4
18428: PUSH
18429: LD_INT 5
18431: PUSH
18432: LD_INT 11
18434: PUSH
18435: LD_INT 12
18437: PUSH
18438: LD_INT 15
18440: PUSH
18441: LD_INT 16
18443: PUSH
18444: LD_INT 22
18446: PUSH
18447: LD_INT 26
18449: PUSH
18450: LD_INT 36
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 101
18467: PUSH
18468: LD_INT 102
18470: PUSH
18471: LD_INT 105
18473: PUSH
18474: LD_INT 106
18476: PUSH
18477: LD_INT 108
18479: PUSH
18480: LD_INT 116
18482: PUSH
18483: LD_INT 117
18485: PUSH
18486: LD_INT 118
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: ST_TO_ADDR
18503: GO 21390
18505: LD_INT 4
18507: DOUBLE
18508: EQUAL
18509: IFTRUE 18513
18511: GO 18609
18513: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18514: LD_ADDR_VAR 0 2
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 4
18524: PUSH
18525: LD_INT 5
18527: PUSH
18528: LD_INT 8
18530: PUSH
18531: LD_INT 11
18533: PUSH
18534: LD_INT 12
18536: PUSH
18537: LD_INT 15
18539: PUSH
18540: LD_INT 16
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_INT 23
18548: PUSH
18549: LD_INT 26
18551: PUSH
18552: LD_INT 36
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 101
18571: PUSH
18572: LD_INT 102
18574: PUSH
18575: LD_INT 105
18577: PUSH
18578: LD_INT 106
18580: PUSH
18581: LD_INT 108
18583: PUSH
18584: LD_INT 116
18586: PUSH
18587: LD_INT 117
18589: PUSH
18590: LD_INT 118
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: ST_TO_ADDR
18607: GO 21390
18609: LD_INT 5
18611: DOUBLE
18612: EQUAL
18613: IFTRUE 18617
18615: GO 18729
18617: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18618: LD_ADDR_VAR 0 2
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: LD_INT 4
18628: PUSH
18629: LD_INT 5
18631: PUSH
18632: LD_INT 6
18634: PUSH
18635: LD_INT 8
18637: PUSH
18638: LD_INT 11
18640: PUSH
18641: LD_INT 12
18643: PUSH
18644: LD_INT 15
18646: PUSH
18647: LD_INT 16
18649: PUSH
18650: LD_INT 22
18652: PUSH
18653: LD_INT 23
18655: PUSH
18656: LD_INT 25
18658: PUSH
18659: LD_INT 26
18661: PUSH
18662: LD_INT 36
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 101
18683: PUSH
18684: LD_INT 102
18686: PUSH
18687: LD_INT 105
18689: PUSH
18690: LD_INT 106
18692: PUSH
18693: LD_INT 108
18695: PUSH
18696: LD_INT 109
18698: PUSH
18699: LD_INT 112
18701: PUSH
18702: LD_INT 116
18704: PUSH
18705: LD_INT 117
18707: PUSH
18708: LD_INT 118
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: ST_TO_ADDR
18727: GO 21390
18729: LD_INT 6
18731: DOUBLE
18732: EQUAL
18733: IFTRUE 18737
18735: GO 18869
18737: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18738: LD_ADDR_VAR 0 2
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 4
18748: PUSH
18749: LD_INT 5
18751: PUSH
18752: LD_INT 6
18754: PUSH
18755: LD_INT 8
18757: PUSH
18758: LD_INT 11
18760: PUSH
18761: LD_INT 12
18763: PUSH
18764: LD_INT 15
18766: PUSH
18767: LD_INT 16
18769: PUSH
18770: LD_INT 20
18772: PUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_INT 23
18781: PUSH
18782: LD_INT 25
18784: PUSH
18785: LD_INT 26
18787: PUSH
18788: LD_INT 30
18790: PUSH
18791: LD_INT 31
18793: PUSH
18794: LD_INT 32
18796: PUSH
18797: LD_INT 36
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 101
18823: PUSH
18824: LD_INT 102
18826: PUSH
18827: LD_INT 105
18829: PUSH
18830: LD_INT 106
18832: PUSH
18833: LD_INT 108
18835: PUSH
18836: LD_INT 109
18838: PUSH
18839: LD_INT 112
18841: PUSH
18842: LD_INT 116
18844: PUSH
18845: LD_INT 117
18847: PUSH
18848: LD_INT 118
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: ST_TO_ADDR
18867: GO 21390
18869: LD_INT 7
18871: DOUBLE
18872: EQUAL
18873: IFTRUE 18877
18875: GO 18989
18877: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18878: LD_ADDR_VAR 0 2
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 4
18888: PUSH
18889: LD_INT 5
18891: PUSH
18892: LD_INT 7
18894: PUSH
18895: LD_INT 11
18897: PUSH
18898: LD_INT 12
18900: PUSH
18901: LD_INT 15
18903: PUSH
18904: LD_INT 16
18906: PUSH
18907: LD_INT 20
18909: PUSH
18910: LD_INT 21
18912: PUSH
18913: LD_INT 22
18915: PUSH
18916: LD_INT 23
18918: PUSH
18919: LD_INT 25
18921: PUSH
18922: LD_INT 26
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 101
18943: PUSH
18944: LD_INT 102
18946: PUSH
18947: LD_INT 103
18949: PUSH
18950: LD_INT 105
18952: PUSH
18953: LD_INT 106
18955: PUSH
18956: LD_INT 108
18958: PUSH
18959: LD_INT 112
18961: PUSH
18962: LD_INT 116
18964: PUSH
18965: LD_INT 117
18967: PUSH
18968: LD_INT 118
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: ST_TO_ADDR
18987: GO 21390
18989: LD_INT 8
18991: DOUBLE
18992: EQUAL
18993: IFTRUE 18997
18995: GO 19137
18997: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 4
19008: PUSH
19009: LD_INT 5
19011: PUSH
19012: LD_INT 6
19014: PUSH
19015: LD_INT 7
19017: PUSH
19018: LD_INT 8
19020: PUSH
19021: LD_INT 11
19023: PUSH
19024: LD_INT 12
19026: PUSH
19027: LD_INT 15
19029: PUSH
19030: LD_INT 16
19032: PUSH
19033: LD_INT 20
19035: PUSH
19036: LD_INT 21
19038: PUSH
19039: LD_INT 22
19041: PUSH
19042: LD_INT 23
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 26
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 31
19056: PUSH
19057: LD_INT 32
19059: PUSH
19060: LD_INT 36
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 101
19087: PUSH
19088: LD_INT 102
19090: PUSH
19091: LD_INT 103
19093: PUSH
19094: LD_INT 105
19096: PUSH
19097: LD_INT 106
19099: PUSH
19100: LD_INT 108
19102: PUSH
19103: LD_INT 109
19105: PUSH
19106: LD_INT 112
19108: PUSH
19109: LD_INT 116
19111: PUSH
19112: LD_INT 117
19114: PUSH
19115: LD_INT 118
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: ST_TO_ADDR
19135: GO 21390
19137: LD_INT 9
19139: DOUBLE
19140: EQUAL
19141: IFTRUE 19145
19143: GO 19293
19145: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 4
19156: PUSH
19157: LD_INT 5
19159: PUSH
19160: LD_INT 6
19162: PUSH
19163: LD_INT 7
19165: PUSH
19166: LD_INT 8
19168: PUSH
19169: LD_INT 11
19171: PUSH
19172: LD_INT 12
19174: PUSH
19175: LD_INT 15
19177: PUSH
19178: LD_INT 16
19180: PUSH
19181: LD_INT 20
19183: PUSH
19184: LD_INT 21
19186: PUSH
19187: LD_INT 22
19189: PUSH
19190: LD_INT 23
19192: PUSH
19193: LD_INT 25
19195: PUSH
19196: LD_INT 26
19198: PUSH
19199: LD_INT 28
19201: PUSH
19202: LD_INT 30
19204: PUSH
19205: LD_INT 31
19207: PUSH
19208: LD_INT 32
19210: PUSH
19211: LD_INT 36
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 101
19239: PUSH
19240: LD_INT 102
19242: PUSH
19243: LD_INT 103
19245: PUSH
19246: LD_INT 105
19248: PUSH
19249: LD_INT 106
19251: PUSH
19252: LD_INT 108
19254: PUSH
19255: LD_INT 109
19257: PUSH
19258: LD_INT 112
19260: PUSH
19261: LD_INT 114
19263: PUSH
19264: LD_INT 116
19266: PUSH
19267: LD_INT 117
19269: PUSH
19270: LD_INT 118
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: ST_TO_ADDR
19291: GO 21390
19293: LD_INT 10
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19497
19301: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19302: LD_ADDR_VAR 0 2
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 4
19312: PUSH
19313: LD_INT 5
19315: PUSH
19316: LD_INT 6
19318: PUSH
19319: LD_INT 7
19321: PUSH
19322: LD_INT 8
19324: PUSH
19325: LD_INT 9
19327: PUSH
19328: LD_INT 10
19330: PUSH
19331: LD_INT 11
19333: PUSH
19334: LD_INT 12
19336: PUSH
19337: LD_INT 13
19339: PUSH
19340: LD_INT 14
19342: PUSH
19343: LD_INT 15
19345: PUSH
19346: LD_INT 16
19348: PUSH
19349: LD_INT 17
19351: PUSH
19352: LD_INT 18
19354: PUSH
19355: LD_INT 19
19357: PUSH
19358: LD_INT 20
19360: PUSH
19361: LD_INT 21
19363: PUSH
19364: LD_INT 22
19366: PUSH
19367: LD_INT 23
19369: PUSH
19370: LD_INT 24
19372: PUSH
19373: LD_INT 25
19375: PUSH
19376: LD_INT 26
19378: PUSH
19379: LD_INT 28
19381: PUSH
19382: LD_INT 30
19384: PUSH
19385: LD_INT 31
19387: PUSH
19388: LD_INT 32
19390: PUSH
19391: LD_INT 36
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 101
19427: PUSH
19428: LD_INT 102
19430: PUSH
19431: LD_INT 103
19433: PUSH
19434: LD_INT 104
19436: PUSH
19437: LD_INT 105
19439: PUSH
19440: LD_INT 106
19442: PUSH
19443: LD_INT 107
19445: PUSH
19446: LD_INT 108
19448: PUSH
19449: LD_INT 109
19451: PUSH
19452: LD_INT 110
19454: PUSH
19455: LD_INT 111
19457: PUSH
19458: LD_INT 112
19460: PUSH
19461: LD_INT 114
19463: PUSH
19464: LD_INT 116
19466: PUSH
19467: LD_INT 117
19469: PUSH
19470: LD_INT 118
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: ST_TO_ADDR
19495: GO 21390
19497: LD_INT 11
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19709
19505: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 3
19516: PUSH
19517: LD_INT 4
19519: PUSH
19520: LD_INT 5
19522: PUSH
19523: LD_INT 6
19525: PUSH
19526: LD_INT 7
19528: PUSH
19529: LD_INT 8
19531: PUSH
19532: LD_INT 9
19534: PUSH
19535: LD_INT 10
19537: PUSH
19538: LD_INT 11
19540: PUSH
19541: LD_INT 12
19543: PUSH
19544: LD_INT 13
19546: PUSH
19547: LD_INT 14
19549: PUSH
19550: LD_INT 15
19552: PUSH
19553: LD_INT 16
19555: PUSH
19556: LD_INT 17
19558: PUSH
19559: LD_INT 18
19561: PUSH
19562: LD_INT 19
19564: PUSH
19565: LD_INT 20
19567: PUSH
19568: LD_INT 21
19570: PUSH
19571: LD_INT 22
19573: PUSH
19574: LD_INT 23
19576: PUSH
19577: LD_INT 24
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 26
19585: PUSH
19586: LD_INT 28
19588: PUSH
19589: LD_INT 30
19591: PUSH
19592: LD_INT 31
19594: PUSH
19595: LD_INT 32
19597: PUSH
19598: LD_INT 34
19600: PUSH
19601: LD_INT 36
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 101
19639: PUSH
19640: LD_INT 102
19642: PUSH
19643: LD_INT 103
19645: PUSH
19646: LD_INT 104
19648: PUSH
19649: LD_INT 105
19651: PUSH
19652: LD_INT 106
19654: PUSH
19655: LD_INT 107
19657: PUSH
19658: LD_INT 108
19660: PUSH
19661: LD_INT 109
19663: PUSH
19664: LD_INT 110
19666: PUSH
19667: LD_INT 111
19669: PUSH
19670: LD_INT 112
19672: PUSH
19673: LD_INT 114
19675: PUSH
19676: LD_INT 116
19678: PUSH
19679: LD_INT 117
19681: PUSH
19682: LD_INT 118
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: ST_TO_ADDR
19707: GO 21390
19709: LD_INT 12
19711: DOUBLE
19712: EQUAL
19713: IFTRUE 19717
19715: GO 19937
19717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19718: LD_ADDR_VAR 0 2
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 3
19731: PUSH
19732: LD_INT 4
19734: PUSH
19735: LD_INT 5
19737: PUSH
19738: LD_INT 6
19740: PUSH
19741: LD_INT 7
19743: PUSH
19744: LD_INT 8
19746: PUSH
19747: LD_INT 9
19749: PUSH
19750: LD_INT 10
19752: PUSH
19753: LD_INT 11
19755: PUSH
19756: LD_INT 12
19758: PUSH
19759: LD_INT 13
19761: PUSH
19762: LD_INT 14
19764: PUSH
19765: LD_INT 15
19767: PUSH
19768: LD_INT 16
19770: PUSH
19771: LD_INT 17
19773: PUSH
19774: LD_INT 18
19776: PUSH
19777: LD_INT 19
19779: PUSH
19780: LD_INT 20
19782: PUSH
19783: LD_INT 21
19785: PUSH
19786: LD_INT 22
19788: PUSH
19789: LD_INT 23
19791: PUSH
19792: LD_INT 24
19794: PUSH
19795: LD_INT 25
19797: PUSH
19798: LD_INT 26
19800: PUSH
19801: LD_INT 27
19803: PUSH
19804: LD_INT 28
19806: PUSH
19807: LD_INT 30
19809: PUSH
19810: LD_INT 31
19812: PUSH
19813: LD_INT 32
19815: PUSH
19816: LD_INT 33
19818: PUSH
19819: LD_INT 34
19821: PUSH
19822: LD_INT 36
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 101
19863: PUSH
19864: LD_INT 102
19866: PUSH
19867: LD_INT 103
19869: PUSH
19870: LD_INT 104
19872: PUSH
19873: LD_INT 105
19875: PUSH
19876: LD_INT 106
19878: PUSH
19879: LD_INT 107
19881: PUSH
19882: LD_INT 108
19884: PUSH
19885: LD_INT 109
19887: PUSH
19888: LD_INT 110
19890: PUSH
19891: LD_INT 111
19893: PUSH
19894: LD_INT 112
19896: PUSH
19897: LD_INT 113
19899: PUSH
19900: LD_INT 114
19902: PUSH
19903: LD_INT 116
19905: PUSH
19906: LD_INT 117
19908: PUSH
19909: LD_INT 118
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: ST_TO_ADDR
19935: GO 21390
19937: LD_INT 13
19939: DOUBLE
19940: EQUAL
19941: IFTRUE 19945
19943: GO 20153
19945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19946: LD_ADDR_VAR 0 2
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: LD_INT 4
19962: PUSH
19963: LD_INT 5
19965: PUSH
19966: LD_INT 8
19968: PUSH
19969: LD_INT 9
19971: PUSH
19972: LD_INT 10
19974: PUSH
19975: LD_INT 11
19977: PUSH
19978: LD_INT 12
19980: PUSH
19981: LD_INT 14
19983: PUSH
19984: LD_INT 15
19986: PUSH
19987: LD_INT 16
19989: PUSH
19990: LD_INT 17
19992: PUSH
19993: LD_INT 18
19995: PUSH
19996: LD_INT 19
19998: PUSH
19999: LD_INT 20
20001: PUSH
20002: LD_INT 21
20004: PUSH
20005: LD_INT 22
20007: PUSH
20008: LD_INT 23
20010: PUSH
20011: LD_INT 24
20013: PUSH
20014: LD_INT 25
20016: PUSH
20017: LD_INT 26
20019: PUSH
20020: LD_INT 27
20022: PUSH
20023: LD_INT 28
20025: PUSH
20026: LD_INT 30
20028: PUSH
20029: LD_INT 31
20031: PUSH
20032: LD_INT 32
20034: PUSH
20035: LD_INT 33
20037: PUSH
20038: LD_INT 34
20040: PUSH
20041: LD_INT 36
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 101
20079: PUSH
20080: LD_INT 102
20082: PUSH
20083: LD_INT 103
20085: PUSH
20086: LD_INT 104
20088: PUSH
20089: LD_INT 105
20091: PUSH
20092: LD_INT 106
20094: PUSH
20095: LD_INT 107
20097: PUSH
20098: LD_INT 108
20100: PUSH
20101: LD_INT 109
20103: PUSH
20104: LD_INT 110
20106: PUSH
20107: LD_INT 111
20109: PUSH
20110: LD_INT 112
20112: PUSH
20113: LD_INT 113
20115: PUSH
20116: LD_INT 114
20118: PUSH
20119: LD_INT 116
20121: PUSH
20122: LD_INT 117
20124: PUSH
20125: LD_INT 118
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: ST_TO_ADDR
20151: GO 21390
20153: LD_INT 14
20155: DOUBLE
20156: EQUAL
20157: IFTRUE 20161
20159: GO 20385
20161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20162: LD_ADDR_VAR 0 2
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 3
20175: PUSH
20176: LD_INT 4
20178: PUSH
20179: LD_INT 5
20181: PUSH
20182: LD_INT 6
20184: PUSH
20185: LD_INT 7
20187: PUSH
20188: LD_INT 8
20190: PUSH
20191: LD_INT 9
20193: PUSH
20194: LD_INT 10
20196: PUSH
20197: LD_INT 11
20199: PUSH
20200: LD_INT 12
20202: PUSH
20203: LD_INT 13
20205: PUSH
20206: LD_INT 14
20208: PUSH
20209: LD_INT 15
20211: PUSH
20212: LD_INT 16
20214: PUSH
20215: LD_INT 17
20217: PUSH
20218: LD_INT 18
20220: PUSH
20221: LD_INT 19
20223: PUSH
20224: LD_INT 20
20226: PUSH
20227: LD_INT 21
20229: PUSH
20230: LD_INT 22
20232: PUSH
20233: LD_INT 23
20235: PUSH
20236: LD_INT 24
20238: PUSH
20239: LD_INT 25
20241: PUSH
20242: LD_INT 26
20244: PUSH
20245: LD_INT 27
20247: PUSH
20248: LD_INT 28
20250: PUSH
20251: LD_INT 29
20253: PUSH
20254: LD_INT 30
20256: PUSH
20257: LD_INT 31
20259: PUSH
20260: LD_INT 32
20262: PUSH
20263: LD_INT 33
20265: PUSH
20266: LD_INT 34
20268: PUSH
20269: LD_INT 36
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 101
20311: PUSH
20312: LD_INT 102
20314: PUSH
20315: LD_INT 103
20317: PUSH
20318: LD_INT 104
20320: PUSH
20321: LD_INT 105
20323: PUSH
20324: LD_INT 106
20326: PUSH
20327: LD_INT 107
20329: PUSH
20330: LD_INT 108
20332: PUSH
20333: LD_INT 109
20335: PUSH
20336: LD_INT 110
20338: PUSH
20339: LD_INT 111
20341: PUSH
20342: LD_INT 112
20344: PUSH
20345: LD_INT 113
20347: PUSH
20348: LD_INT 114
20350: PUSH
20351: LD_INT 116
20353: PUSH
20354: LD_INT 117
20356: PUSH
20357: LD_INT 118
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: ST_TO_ADDR
20383: GO 21390
20385: LD_INT 15
20387: DOUBLE
20388: EQUAL
20389: IFTRUE 20393
20391: GO 20617
20393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20394: LD_ADDR_VAR 0 2
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 3
20407: PUSH
20408: LD_INT 4
20410: PUSH
20411: LD_INT 5
20413: PUSH
20414: LD_INT 6
20416: PUSH
20417: LD_INT 7
20419: PUSH
20420: LD_INT 8
20422: PUSH
20423: LD_INT 9
20425: PUSH
20426: LD_INT 10
20428: PUSH
20429: LD_INT 11
20431: PUSH
20432: LD_INT 12
20434: PUSH
20435: LD_INT 13
20437: PUSH
20438: LD_INT 14
20440: PUSH
20441: LD_INT 15
20443: PUSH
20444: LD_INT 16
20446: PUSH
20447: LD_INT 17
20449: PUSH
20450: LD_INT 18
20452: PUSH
20453: LD_INT 19
20455: PUSH
20456: LD_INT 20
20458: PUSH
20459: LD_INT 21
20461: PUSH
20462: LD_INT 22
20464: PUSH
20465: LD_INT 23
20467: PUSH
20468: LD_INT 24
20470: PUSH
20471: LD_INT 25
20473: PUSH
20474: LD_INT 26
20476: PUSH
20477: LD_INT 27
20479: PUSH
20480: LD_INT 28
20482: PUSH
20483: LD_INT 29
20485: PUSH
20486: LD_INT 30
20488: PUSH
20489: LD_INT 31
20491: PUSH
20492: LD_INT 32
20494: PUSH
20495: LD_INT 33
20497: PUSH
20498: LD_INT 34
20500: PUSH
20501: LD_INT 36
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 101
20543: PUSH
20544: LD_INT 102
20546: PUSH
20547: LD_INT 103
20549: PUSH
20550: LD_INT 104
20552: PUSH
20553: LD_INT 105
20555: PUSH
20556: LD_INT 106
20558: PUSH
20559: LD_INT 107
20561: PUSH
20562: LD_INT 108
20564: PUSH
20565: LD_INT 109
20567: PUSH
20568: LD_INT 110
20570: PUSH
20571: LD_INT 111
20573: PUSH
20574: LD_INT 112
20576: PUSH
20577: LD_INT 113
20579: PUSH
20580: LD_INT 114
20582: PUSH
20583: LD_INT 116
20585: PUSH
20586: LD_INT 117
20588: PUSH
20589: LD_INT 118
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: ST_TO_ADDR
20615: GO 21390
20617: LD_INT 16
20619: DOUBLE
20620: EQUAL
20621: IFTRUE 20625
20623: GO 20761
20625: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20626: LD_ADDR_VAR 0 2
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: LD_INT 4
20636: PUSH
20637: LD_INT 5
20639: PUSH
20640: LD_INT 7
20642: PUSH
20643: LD_INT 11
20645: PUSH
20646: LD_INT 12
20648: PUSH
20649: LD_INT 15
20651: PUSH
20652: LD_INT 16
20654: PUSH
20655: LD_INT 20
20657: PUSH
20658: LD_INT 21
20660: PUSH
20661: LD_INT 22
20663: PUSH
20664: LD_INT 23
20666: PUSH
20667: LD_INT 25
20669: PUSH
20670: LD_INT 26
20672: PUSH
20673: LD_INT 30
20675: PUSH
20676: LD_INT 31
20678: PUSH
20679: LD_INT 32
20681: PUSH
20682: LD_INT 33
20684: PUSH
20685: LD_INT 34
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 101
20711: PUSH
20712: LD_INT 102
20714: PUSH
20715: LD_INT 103
20717: PUSH
20718: LD_INT 106
20720: PUSH
20721: LD_INT 108
20723: PUSH
20724: LD_INT 112
20726: PUSH
20727: LD_INT 113
20729: PUSH
20730: LD_INT 114
20732: PUSH
20733: LD_INT 116
20735: PUSH
20736: LD_INT 117
20738: PUSH
20739: LD_INT 118
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: ST_TO_ADDR
20759: GO 21390
20761: LD_INT 17
20763: DOUBLE
20764: EQUAL
20765: IFTRUE 20769
20767: GO 20993
20769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20770: LD_ADDR_VAR 0 2
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 3
20783: PUSH
20784: LD_INT 4
20786: PUSH
20787: LD_INT 5
20789: PUSH
20790: LD_INT 6
20792: PUSH
20793: LD_INT 7
20795: PUSH
20796: LD_INT 8
20798: PUSH
20799: LD_INT 9
20801: PUSH
20802: LD_INT 10
20804: PUSH
20805: LD_INT 11
20807: PUSH
20808: LD_INT 12
20810: PUSH
20811: LD_INT 13
20813: PUSH
20814: LD_INT 14
20816: PUSH
20817: LD_INT 15
20819: PUSH
20820: LD_INT 16
20822: PUSH
20823: LD_INT 17
20825: PUSH
20826: LD_INT 18
20828: PUSH
20829: LD_INT 19
20831: PUSH
20832: LD_INT 20
20834: PUSH
20835: LD_INT 21
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_INT 23
20843: PUSH
20844: LD_INT 24
20846: PUSH
20847: LD_INT 25
20849: PUSH
20850: LD_INT 26
20852: PUSH
20853: LD_INT 27
20855: PUSH
20856: LD_INT 28
20858: PUSH
20859: LD_INT 29
20861: PUSH
20862: LD_INT 30
20864: PUSH
20865: LD_INT 31
20867: PUSH
20868: LD_INT 32
20870: PUSH
20871: LD_INT 33
20873: PUSH
20874: LD_INT 34
20876: PUSH
20877: LD_INT 36
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 101
20919: PUSH
20920: LD_INT 102
20922: PUSH
20923: LD_INT 103
20925: PUSH
20926: LD_INT 104
20928: PUSH
20929: LD_INT 105
20931: PUSH
20932: LD_INT 106
20934: PUSH
20935: LD_INT 107
20937: PUSH
20938: LD_INT 108
20940: PUSH
20941: LD_INT 109
20943: PUSH
20944: LD_INT 110
20946: PUSH
20947: LD_INT 111
20949: PUSH
20950: LD_INT 112
20952: PUSH
20953: LD_INT 113
20955: PUSH
20956: LD_INT 114
20958: PUSH
20959: LD_INT 116
20961: PUSH
20962: LD_INT 117
20964: PUSH
20965: LD_INT 118
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 21390
20993: LD_INT 18
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21149
21001: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21002: LD_ADDR_VAR 0 2
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 4
21012: PUSH
21013: LD_INT 5
21015: PUSH
21016: LD_INT 7
21018: PUSH
21019: LD_INT 11
21021: PUSH
21022: LD_INT 12
21024: PUSH
21025: LD_INT 15
21027: PUSH
21028: LD_INT 16
21030: PUSH
21031: LD_INT 20
21033: PUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 22
21039: PUSH
21040: LD_INT 23
21042: PUSH
21043: LD_INT 25
21045: PUSH
21046: LD_INT 26
21048: PUSH
21049: LD_INT 30
21051: PUSH
21052: LD_INT 31
21054: PUSH
21055: LD_INT 32
21057: PUSH
21058: LD_INT 33
21060: PUSH
21061: LD_INT 34
21063: PUSH
21064: LD_INT 35
21066: PUSH
21067: LD_INT 36
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 101
21095: PUSH
21096: LD_INT 102
21098: PUSH
21099: LD_INT 103
21101: PUSH
21102: LD_INT 106
21104: PUSH
21105: LD_INT 108
21107: PUSH
21108: LD_INT 112
21110: PUSH
21111: LD_INT 113
21113: PUSH
21114: LD_INT 114
21116: PUSH
21117: LD_INT 115
21119: PUSH
21120: LD_INT 116
21122: PUSH
21123: LD_INT 117
21125: PUSH
21126: LD_INT 118
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: ST_TO_ADDR
21147: GO 21390
21149: LD_INT 19
21151: DOUBLE
21152: EQUAL
21153: IFTRUE 21157
21155: GO 21389
21157: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21158: LD_ADDR_VAR 0 2
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 3
21171: PUSH
21172: LD_INT 4
21174: PUSH
21175: LD_INT 5
21177: PUSH
21178: LD_INT 6
21180: PUSH
21181: LD_INT 7
21183: PUSH
21184: LD_INT 8
21186: PUSH
21187: LD_INT 9
21189: PUSH
21190: LD_INT 10
21192: PUSH
21193: LD_INT 11
21195: PUSH
21196: LD_INT 12
21198: PUSH
21199: LD_INT 13
21201: PUSH
21202: LD_INT 14
21204: PUSH
21205: LD_INT 15
21207: PUSH
21208: LD_INT 16
21210: PUSH
21211: LD_INT 17
21213: PUSH
21214: LD_INT 18
21216: PUSH
21217: LD_INT 19
21219: PUSH
21220: LD_INT 20
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 22
21228: PUSH
21229: LD_INT 23
21231: PUSH
21232: LD_INT 24
21234: PUSH
21235: LD_INT 25
21237: PUSH
21238: LD_INT 26
21240: PUSH
21241: LD_INT 27
21243: PUSH
21244: LD_INT 28
21246: PUSH
21247: LD_INT 29
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 31
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: LD_INT 33
21261: PUSH
21262: LD_INT 34
21264: PUSH
21265: LD_INT 35
21267: PUSH
21268: LD_INT 36
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 101
21311: PUSH
21312: LD_INT 102
21314: PUSH
21315: LD_INT 103
21317: PUSH
21318: LD_INT 104
21320: PUSH
21321: LD_INT 105
21323: PUSH
21324: LD_INT 106
21326: PUSH
21327: LD_INT 107
21329: PUSH
21330: LD_INT 108
21332: PUSH
21333: LD_INT 109
21335: PUSH
21336: LD_INT 110
21338: PUSH
21339: LD_INT 111
21341: PUSH
21342: LD_INT 112
21344: PUSH
21345: LD_INT 113
21347: PUSH
21348: LD_INT 114
21350: PUSH
21351: LD_INT 115
21353: PUSH
21354: LD_INT 116
21356: PUSH
21357: LD_INT 117
21359: PUSH
21360: LD_INT 118
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: ST_TO_ADDR
21387: GO 21390
21389: POP
// end else
21390: GO 21621
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21392: LD_ADDR_VAR 0 2
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: LD_INT 3
21405: PUSH
21406: LD_INT 4
21408: PUSH
21409: LD_INT 5
21411: PUSH
21412: LD_INT 6
21414: PUSH
21415: LD_INT 7
21417: PUSH
21418: LD_INT 8
21420: PUSH
21421: LD_INT 9
21423: PUSH
21424: LD_INT 10
21426: PUSH
21427: LD_INT 11
21429: PUSH
21430: LD_INT 12
21432: PUSH
21433: LD_INT 13
21435: PUSH
21436: LD_INT 14
21438: PUSH
21439: LD_INT 15
21441: PUSH
21442: LD_INT 16
21444: PUSH
21445: LD_INT 17
21447: PUSH
21448: LD_INT 18
21450: PUSH
21451: LD_INT 19
21453: PUSH
21454: LD_INT 20
21456: PUSH
21457: LD_INT 21
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_INT 23
21465: PUSH
21466: LD_INT 24
21468: PUSH
21469: LD_INT 25
21471: PUSH
21472: LD_INT 26
21474: PUSH
21475: LD_INT 27
21477: PUSH
21478: LD_INT 28
21480: PUSH
21481: LD_INT 29
21483: PUSH
21484: LD_INT 30
21486: PUSH
21487: LD_INT 31
21489: PUSH
21490: LD_INT 32
21492: PUSH
21493: LD_INT 33
21495: PUSH
21496: LD_INT 34
21498: PUSH
21499: LD_INT 35
21501: PUSH
21502: LD_INT 36
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 101
21545: PUSH
21546: LD_INT 102
21548: PUSH
21549: LD_INT 103
21551: PUSH
21552: LD_INT 104
21554: PUSH
21555: LD_INT 105
21557: PUSH
21558: LD_INT 106
21560: PUSH
21561: LD_INT 107
21563: PUSH
21564: LD_INT 108
21566: PUSH
21567: LD_INT 109
21569: PUSH
21570: LD_INT 110
21572: PUSH
21573: LD_INT 111
21575: PUSH
21576: LD_INT 112
21578: PUSH
21579: LD_INT 113
21581: PUSH
21582: LD_INT 114
21584: PUSH
21585: LD_INT 115
21587: PUSH
21588: LD_INT 116
21590: PUSH
21591: LD_INT 117
21593: PUSH
21594: LD_INT 118
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: ST_TO_ADDR
// if result then
21621: LD_VAR 0 2
21625: IFFALSE 22411
// begin normal :=  ;
21627: LD_ADDR_VAR 0 5
21631: PUSH
21632: LD_STRING 
21634: ST_TO_ADDR
// hardcore :=  ;
21635: LD_ADDR_VAR 0 6
21639: PUSH
21640: LD_STRING 
21642: ST_TO_ADDR
// active :=  ;
21643: LD_ADDR_VAR 0 7
21647: PUSH
21648: LD_STRING 
21650: ST_TO_ADDR
// for i = 1 to normalCounter do
21651: LD_ADDR_VAR 0 8
21655: PUSH
21656: DOUBLE
21657: LD_INT 1
21659: DEC
21660: ST_TO_ADDR
21661: LD_EXP 57
21665: PUSH
21666: FOR_TO
21667: IFFALSE 21768
// begin tmp := 0 ;
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_STRING 0
21676: ST_TO_ADDR
// if result [ 1 ] then
21677: LD_VAR 0 2
21681: PUSH
21682: LD_INT 1
21684: ARRAY
21685: IFFALSE 21750
// if result [ 1 ] [ 1 ] = i then
21687: LD_VAR 0 2
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PUSH
21696: LD_INT 1
21698: ARRAY
21699: PUSH
21700: LD_VAR 0 8
21704: EQUAL
21705: IFFALSE 21750
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21707: LD_ADDR_VAR 0 2
21711: PUSH
21712: LD_VAR 0 2
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: LD_VAR 0 2
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 3
21736: PPUSH
21737: CALL_OW 1
21741: ST_TO_ADDR
// tmp := 1 ;
21742: LD_ADDR_VAR 0 3
21746: PUSH
21747: LD_STRING 1
21749: ST_TO_ADDR
// end ; normal := normal & tmp ;
21750: LD_ADDR_VAR 0 5
21754: PUSH
21755: LD_VAR 0 5
21759: PUSH
21760: LD_VAR 0 3
21764: STR
21765: ST_TO_ADDR
// end ;
21766: GO 21666
21768: POP
21769: POP
// for i = 1 to hardcoreCounter do
21770: LD_ADDR_VAR 0 8
21774: PUSH
21775: DOUBLE
21776: LD_INT 1
21778: DEC
21779: ST_TO_ADDR
21780: LD_EXP 58
21784: PUSH
21785: FOR_TO
21786: IFFALSE 21891
// begin tmp := 0 ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_STRING 0
21795: ST_TO_ADDR
// if result [ 2 ] then
21796: LD_VAR 0 2
21800: PUSH
21801: LD_INT 2
21803: ARRAY
21804: IFFALSE 21873
// if result [ 2 ] [ 1 ] = 100 + i then
21806: LD_VAR 0 2
21810: PUSH
21811: LD_INT 2
21813: ARRAY
21814: PUSH
21815: LD_INT 1
21817: ARRAY
21818: PUSH
21819: LD_INT 100
21821: PUSH
21822: LD_VAR 0 8
21826: PLUS
21827: EQUAL
21828: IFFALSE 21873
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21830: LD_ADDR_VAR 0 2
21834: PUSH
21835: LD_VAR 0 2
21839: PPUSH
21840: LD_INT 2
21842: PPUSH
21843: LD_VAR 0 2
21847: PUSH
21848: LD_INT 2
21850: ARRAY
21851: PPUSH
21852: LD_INT 1
21854: PPUSH
21855: CALL_OW 3
21859: PPUSH
21860: CALL_OW 1
21864: ST_TO_ADDR
// tmp := 1 ;
21865: LD_ADDR_VAR 0 3
21869: PUSH
21870: LD_STRING 1
21872: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21873: LD_ADDR_VAR 0 6
21877: PUSH
21878: LD_VAR 0 6
21882: PUSH
21883: LD_VAR 0 3
21887: STR
21888: ST_TO_ADDR
// end ;
21889: GO 21785
21891: POP
21892: POP
// if isGameLoad then
21893: LD_VAR 0 1
21897: IFFALSE 22372
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21899: LD_ADDR_VAR 0 4
21903: PUSH
21904: LD_EXP 61
21908: PUSH
21909: LD_EXP 60
21913: PUSH
21914: LD_EXP 62
21918: PUSH
21919: LD_EXP 59
21923: PUSH
21924: LD_EXP 63
21928: PUSH
21929: LD_EXP 64
21933: PUSH
21934: LD_EXP 65
21938: PUSH
21939: LD_EXP 66
21943: PUSH
21944: LD_EXP 67
21948: PUSH
21949: LD_EXP 68
21953: PUSH
21954: LD_EXP 69
21958: PUSH
21959: LD_EXP 70
21963: PUSH
21964: LD_EXP 71
21968: PUSH
21969: LD_EXP 72
21973: PUSH
21974: LD_EXP 80
21978: PUSH
21979: LD_EXP 81
21983: PUSH
21984: LD_EXP 82
21988: PUSH
21989: LD_EXP 83
21993: PUSH
21994: LD_EXP 85
21998: PUSH
21999: LD_EXP 86
22003: PUSH
22004: LD_EXP 87
22008: PUSH
22009: LD_EXP 90
22013: PUSH
22014: LD_EXP 92
22018: PUSH
22019: LD_EXP 93
22023: PUSH
22024: LD_EXP 94
22028: PUSH
22029: LD_EXP 96
22033: PUSH
22034: LD_EXP 97
22038: PUSH
22039: LD_EXP 100
22043: PUSH
22044: LD_EXP 101
22048: PUSH
22049: LD_EXP 102
22053: PUSH
22054: LD_EXP 103
22058: PUSH
22059: LD_EXP 104
22063: PUSH
22064: LD_EXP 105
22068: PUSH
22069: LD_EXP 106
22073: PUSH
22074: LD_EXP 107
22078: PUSH
22079: LD_EXP 108
22083: PUSH
22084: LD_EXP 73
22088: PUSH
22089: LD_EXP 74
22093: PUSH
22094: LD_EXP 77
22098: PUSH
22099: LD_EXP 78
22103: PUSH
22104: LD_EXP 79
22108: PUSH
22109: LD_EXP 75
22113: PUSH
22114: LD_EXP 76
22118: PUSH
22119: LD_EXP 84
22123: PUSH
22124: LD_EXP 88
22128: PUSH
22129: LD_EXP 89
22133: PUSH
22134: LD_EXP 91
22138: PUSH
22139: LD_EXP 95
22143: PUSH
22144: LD_EXP 98
22148: PUSH
22149: LD_EXP 99
22153: PUSH
22154: LD_EXP 109
22158: PUSH
22159: LD_EXP 110
22163: PUSH
22164: LD_EXP 111
22168: PUSH
22169: LD_EXP 112
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: ST_TO_ADDR
// tmp :=  ;
22230: LD_ADDR_VAR 0 3
22234: PUSH
22235: LD_STRING 
22237: ST_TO_ADDR
// for i = 1 to normalCounter do
22238: LD_ADDR_VAR 0 8
22242: PUSH
22243: DOUBLE
22244: LD_INT 1
22246: DEC
22247: ST_TO_ADDR
22248: LD_EXP 57
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22290
// begin if flags [ i ] then
22256: LD_VAR 0 4
22260: PUSH
22261: LD_VAR 0 8
22265: ARRAY
22266: IFFALSE 22288
// tmp := tmp & i & ; ;
22268: LD_ADDR_VAR 0 3
22272: PUSH
22273: LD_VAR 0 3
22277: PUSH
22278: LD_VAR 0 8
22282: STR
22283: PUSH
22284: LD_STRING ;
22286: STR
22287: ST_TO_ADDR
// end ;
22288: GO 22253
22290: POP
22291: POP
// for i = 1 to hardcoreCounter do
22292: LD_ADDR_VAR 0 8
22296: PUSH
22297: DOUBLE
22298: LD_INT 1
22300: DEC
22301: ST_TO_ADDR
22302: LD_EXP 58
22306: PUSH
22307: FOR_TO
22308: IFFALSE 22354
// begin if flags [ normalCounter + i ] then
22310: LD_VAR 0 4
22314: PUSH
22315: LD_EXP 57
22319: PUSH
22320: LD_VAR 0 8
22324: PLUS
22325: ARRAY
22326: IFFALSE 22352
// tmp := tmp & ( 100 + i ) & ; ;
22328: LD_ADDR_VAR 0 3
22332: PUSH
22333: LD_VAR 0 3
22337: PUSH
22338: LD_INT 100
22340: PUSH
22341: LD_VAR 0 8
22345: PLUS
22346: STR
22347: PUSH
22348: LD_STRING ;
22350: STR
22351: ST_TO_ADDR
// end ;
22352: GO 22307
22354: POP
22355: POP
// if tmp then
22356: LD_VAR 0 3
22360: IFFALSE 22372
// active := tmp ;
22362: LD_ADDR_VAR 0 7
22366: PUSH
22367: LD_VAR 0 3
22371: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22372: LD_STRING getStreamItemsFromMission("
22374: PUSH
22375: LD_VAR 0 5
22379: STR
22380: PUSH
22381: LD_STRING ","
22383: STR
22384: PUSH
22385: LD_VAR 0 6
22389: STR
22390: PUSH
22391: LD_STRING ","
22393: STR
22394: PUSH
22395: LD_VAR 0 7
22399: STR
22400: PUSH
22401: LD_STRING ")
22403: STR
22404: PPUSH
22405: CALL_OW 559
// end else
22409: GO 22418
// ToLua ( getStreamItemsFromMission("","","") ) ;
22411: LD_STRING getStreamItemsFromMission("","","")
22413: PPUSH
22414: CALL_OW 559
// end ;
22418: LD_VAR 0 2
22422: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22423: LD_EXP 56
22427: PUSH
22428: LD_EXP 61
22432: AND
22433: IFFALSE 22557
22435: GO 22437
22437: DISABLE
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
// begin enable ;
22442: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22443: LD_ADDR_VAR 0 2
22447: PUSH
22448: LD_INT 22
22450: PUSH
22451: LD_OWVAR 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 34
22465: PUSH
22466: LD_INT 7
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 34
22475: PUSH
22476: LD_INT 45
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 34
22485: PUSH
22486: LD_INT 28
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 34
22495: PUSH
22496: LD_INT 47
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PPUSH
22514: CALL_OW 69
22518: ST_TO_ADDR
// if not tmp then
22519: LD_VAR 0 2
22523: NOT
22524: IFFALSE 22528
// exit ;
22526: GO 22557
// for i in tmp do
22528: LD_ADDR_VAR 0 1
22532: PUSH
22533: LD_VAR 0 2
22537: PUSH
22538: FOR_IN
22539: IFFALSE 22555
// begin SetLives ( i , 0 ) ;
22541: LD_VAR 0 1
22545: PPUSH
22546: LD_INT 0
22548: PPUSH
22549: CALL_OW 234
// end ;
22553: GO 22538
22555: POP
22556: POP
// end ;
22557: PPOPN 2
22559: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22560: LD_EXP 56
22564: PUSH
22565: LD_EXP 62
22569: AND
22570: IFFALSE 22654
22572: GO 22574
22574: DISABLE
22575: LD_INT 0
22577: PPUSH
22578: PPUSH
// begin enable ;
22579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_OWVAR 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 32
22599: PUSH
22600: LD_INT 3
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PPUSH
22611: CALL_OW 69
22615: ST_TO_ADDR
// if not tmp then
22616: LD_VAR 0 2
22620: NOT
22621: IFFALSE 22625
// exit ;
22623: GO 22654
// for i in tmp do
22625: LD_ADDR_VAR 0 1
22629: PUSH
22630: LD_VAR 0 2
22634: PUSH
22635: FOR_IN
22636: IFFALSE 22652
// begin SetLives ( i , 0 ) ;
22638: LD_VAR 0 1
22642: PPUSH
22643: LD_INT 0
22645: PPUSH
22646: CALL_OW 234
// end ;
22650: GO 22635
22652: POP
22653: POP
// end ;
22654: PPOPN 2
22656: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22657: LD_EXP 56
22661: PUSH
22662: LD_EXP 59
22666: AND
22667: IFFALSE 22760
22669: GO 22671
22671: DISABLE
22672: LD_INT 0
22674: PPUSH
// begin enable ;
22675: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22676: LD_ADDR_VAR 0 1
22680: PUSH
22681: LD_INT 22
22683: PUSH
22684: LD_OWVAR 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: LD_INT 25
22698: PUSH
22699: LD_INT 5
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 25
22708: PUSH
22709: LD_INT 9
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 8
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PPUSH
22736: CALL_OW 69
22740: PUSH
22741: FOR_IN
22742: IFFALSE 22758
// begin SetClass ( i , 1 ) ;
22744: LD_VAR 0 1
22748: PPUSH
22749: LD_INT 1
22751: PPUSH
22752: CALL_OW 336
// end ;
22756: GO 22741
22758: POP
22759: POP
// end ;
22760: PPOPN 1
22762: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22763: LD_EXP 56
22767: PUSH
22768: LD_EXP 60
22772: AND
22773: PUSH
22774: LD_OWVAR 65
22778: PUSH
22779: LD_INT 7
22781: LESS
22782: AND
22783: IFFALSE 22797
22785: GO 22787
22787: DISABLE
// begin enable ;
22788: ENABLE
// game_speed := 7 ;
22789: LD_ADDR_OWVAR 65
22793: PUSH
22794: LD_INT 7
22796: ST_TO_ADDR
// end ;
22797: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22798: LD_EXP 56
22802: PUSH
22803: LD_EXP 63
22807: AND
22808: IFFALSE 23010
22810: GO 22812
22812: DISABLE
22813: LD_INT 0
22815: PPUSH
22816: PPUSH
22817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22818: LD_ADDR_VAR 0 3
22822: PUSH
22823: LD_INT 81
22825: PUSH
22826: LD_OWVAR 2
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 21
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL_OW 69
22853: ST_TO_ADDR
// if not tmp then
22854: LD_VAR 0 3
22858: NOT
22859: IFFALSE 22863
// exit ;
22861: GO 23010
// if tmp > 5 then
22863: LD_VAR 0 3
22867: PUSH
22868: LD_INT 5
22870: GREATER
22871: IFFALSE 22883
// k := 5 else
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_INT 5
22880: ST_TO_ADDR
22881: GO 22893
// k := tmp ;
22883: LD_ADDR_VAR 0 2
22887: PUSH
22888: LD_VAR 0 3
22892: ST_TO_ADDR
// for i := 1 to k do
22893: LD_ADDR_VAR 0 1
22897: PUSH
22898: DOUBLE
22899: LD_INT 1
22901: DEC
22902: ST_TO_ADDR
22903: LD_VAR 0 2
22907: PUSH
22908: FOR_TO
22909: IFFALSE 23008
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22911: LD_VAR 0 3
22915: PUSH
22916: LD_VAR 0 1
22920: ARRAY
22921: PPUSH
22922: LD_VAR 0 1
22926: PUSH
22927: LD_INT 4
22929: MOD
22930: PUSH
22931: LD_INT 1
22933: PLUS
22934: PPUSH
22935: CALL_OW 259
22939: PUSH
22940: LD_INT 10
22942: LESS
22943: IFFALSE 23006
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22945: LD_VAR 0 3
22949: PUSH
22950: LD_VAR 0 1
22954: ARRAY
22955: PPUSH
22956: LD_VAR 0 1
22960: PUSH
22961: LD_INT 4
22963: MOD
22964: PUSH
22965: LD_INT 1
22967: PLUS
22968: PPUSH
22969: LD_VAR 0 3
22973: PUSH
22974: LD_VAR 0 1
22978: ARRAY
22979: PPUSH
22980: LD_VAR 0 1
22984: PUSH
22985: LD_INT 4
22987: MOD
22988: PUSH
22989: LD_INT 1
22991: PLUS
22992: PPUSH
22993: CALL_OW 259
22997: PUSH
22998: LD_INT 1
23000: PLUS
23001: PPUSH
23002: CALL_OW 237
23006: GO 22908
23008: POP
23009: POP
// end ;
23010: PPOPN 3
23012: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23013: LD_EXP 56
23017: PUSH
23018: LD_EXP 64
23022: AND
23023: IFFALSE 23043
23025: GO 23027
23027: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23028: LD_INT 4
23030: PPUSH
23031: LD_OWVAR 2
23035: PPUSH
23036: LD_INT 0
23038: PPUSH
23039: CALL_OW 324
23043: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23044: LD_EXP 56
23048: PUSH
23049: LD_EXP 93
23053: AND
23054: IFFALSE 23074
23056: GO 23058
23058: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23059: LD_INT 19
23061: PPUSH
23062: LD_OWVAR 2
23066: PPUSH
23067: LD_INT 0
23069: PPUSH
23070: CALL_OW 324
23074: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23075: LD_EXP 56
23079: PUSH
23080: LD_EXP 65
23084: AND
23085: IFFALSE 23187
23087: GO 23089
23089: DISABLE
23090: LD_INT 0
23092: PPUSH
23093: PPUSH
// begin enable ;
23094: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23095: LD_ADDR_VAR 0 2
23099: PUSH
23100: LD_INT 22
23102: PUSH
23103: LD_OWVAR 2
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 11
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 34
23127: PUSH
23128: LD_INT 30
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: LIST
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PPUSH
23144: CALL_OW 69
23148: ST_TO_ADDR
// if not tmp then
23149: LD_VAR 0 2
23153: NOT
23154: IFFALSE 23158
// exit ;
23156: GO 23187
// for i in tmp do
23158: LD_ADDR_VAR 0 1
23162: PUSH
23163: LD_VAR 0 2
23167: PUSH
23168: FOR_IN
23169: IFFALSE 23185
// begin SetLives ( i , 0 ) ;
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_INT 0
23178: PPUSH
23179: CALL_OW 234
// end ;
23183: GO 23168
23185: POP
23186: POP
// end ;
23187: PPOPN 2
23189: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23190: LD_EXP 56
23194: PUSH
23195: LD_EXP 66
23199: AND
23200: IFFALSE 23220
23202: GO 23204
23204: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23205: LD_INT 32
23207: PPUSH
23208: LD_OWVAR 2
23212: PPUSH
23213: LD_INT 0
23215: PPUSH
23216: CALL_OW 324
23220: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23221: LD_EXP 56
23225: PUSH
23226: LD_EXP 67
23230: AND
23231: IFFALSE 23412
23233: GO 23235
23235: DISABLE
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
23240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23241: LD_ADDR_VAR 0 2
23245: PUSH
23246: LD_INT 22
23248: PUSH
23249: LD_OWVAR 2
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 33
23260: PUSH
23261: LD_INT 3
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PPUSH
23272: CALL_OW 69
23276: ST_TO_ADDR
// if not tmp then
23277: LD_VAR 0 2
23281: NOT
23282: IFFALSE 23286
// exit ;
23284: GO 23412
// side := 0 ;
23286: LD_ADDR_VAR 0 3
23290: PUSH
23291: LD_INT 0
23293: ST_TO_ADDR
// for i := 1 to 8 do
23294: LD_ADDR_VAR 0 1
23298: PUSH
23299: DOUBLE
23300: LD_INT 1
23302: DEC
23303: ST_TO_ADDR
23304: LD_INT 8
23306: PUSH
23307: FOR_TO
23308: IFFALSE 23356
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23310: LD_OWVAR 2
23314: PUSH
23315: LD_VAR 0 1
23319: NONEQUAL
23320: PUSH
23321: LD_OWVAR 2
23325: PPUSH
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 81
23335: PUSH
23336: LD_INT 2
23338: EQUAL
23339: AND
23340: IFFALSE 23354
// begin side := i ;
23342: LD_ADDR_VAR 0 3
23346: PUSH
23347: LD_VAR 0 1
23351: ST_TO_ADDR
// break ;
23352: GO 23356
// end ;
23354: GO 23307
23356: POP
23357: POP
// if not side then
23358: LD_VAR 0 3
23362: NOT
23363: IFFALSE 23367
// exit ;
23365: GO 23412
// for i := 1 to tmp do
23367: LD_ADDR_VAR 0 1
23371: PUSH
23372: DOUBLE
23373: LD_INT 1
23375: DEC
23376: ST_TO_ADDR
23377: LD_VAR 0 2
23381: PUSH
23382: FOR_TO
23383: IFFALSE 23410
// if Prob ( 60 ) then
23385: LD_INT 60
23387: PPUSH
23388: CALL_OW 13
23392: IFFALSE 23408
// SetSide ( i , side ) ;
23394: LD_VAR 0 1
23398: PPUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: CALL_OW 235
23408: GO 23382
23410: POP
23411: POP
// end ;
23412: PPOPN 3
23414: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23415: LD_EXP 56
23419: PUSH
23420: LD_EXP 69
23424: AND
23425: IFFALSE 23544
23427: GO 23429
23429: DISABLE
23430: LD_INT 0
23432: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23433: LD_ADDR_VAR 0 1
23437: PUSH
23438: LD_INT 22
23440: PUSH
23441: LD_OWVAR 2
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 21
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 3
23462: PUSH
23463: LD_INT 23
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: PPUSH
23482: CALL_OW 69
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23542
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 257
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: LD_INT 3
23508: PUSH
23509: LD_INT 4
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: IN
23518: IFFALSE 23540
// SetClass ( un , rand ( 1 , 4 ) ) ;
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 1
23527: PPUSH
23528: LD_INT 4
23530: PPUSH
23531: CALL_OW 12
23535: PPUSH
23536: CALL_OW 336
23540: GO 23487
23542: POP
23543: POP
// end ;
23544: PPOPN 1
23546: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23547: LD_EXP 56
23551: PUSH
23552: LD_EXP 68
23556: AND
23557: IFFALSE 23636
23559: GO 23561
23561: DISABLE
23562: LD_INT 0
23564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23565: LD_ADDR_VAR 0 1
23569: PUSH
23570: LD_INT 22
23572: PUSH
23573: LD_OWVAR 2
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 21
23584: PUSH
23585: LD_INT 3
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 69
23600: ST_TO_ADDR
// if not tmp then
23601: LD_VAR 0 1
23605: NOT
23606: IFFALSE 23610
// exit ;
23608: GO 23636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23610: LD_VAR 0 1
23614: PUSH
23615: LD_INT 1
23617: PPUSH
23618: LD_VAR 0 1
23622: PPUSH
23623: CALL_OW 12
23627: ARRAY
23628: PPUSH
23629: LD_INT 100
23631: PPUSH
23632: CALL_OW 234
// end ;
23636: PPOPN 1
23638: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23639: LD_EXP 56
23643: PUSH
23644: LD_EXP 70
23648: AND
23649: IFFALSE 23747
23651: GO 23653
23653: DISABLE
23654: LD_INT 0
23656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23657: LD_ADDR_VAR 0 1
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_OWVAR 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 21
23676: PUSH
23677: LD_INT 1
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PPUSH
23688: CALL_OW 69
23692: ST_TO_ADDR
// if not tmp then
23693: LD_VAR 0 1
23697: NOT
23698: IFFALSE 23702
// exit ;
23700: GO 23747
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23702: LD_VAR 0 1
23706: PUSH
23707: LD_INT 1
23709: PPUSH
23710: LD_VAR 0 1
23714: PPUSH
23715: CALL_OW 12
23719: ARRAY
23720: PPUSH
23721: LD_INT 1
23723: PPUSH
23724: LD_INT 4
23726: PPUSH
23727: CALL_OW 12
23731: PPUSH
23732: LD_INT 3000
23734: PPUSH
23735: LD_INT 9000
23737: PPUSH
23738: CALL_OW 12
23742: PPUSH
23743: CALL_OW 492
// end ;
23747: PPOPN 1
23749: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23750: LD_EXP 56
23754: PUSH
23755: LD_EXP 71
23759: AND
23760: IFFALSE 23780
23762: GO 23764
23764: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23765: LD_INT 1
23767: PPUSH
23768: LD_OWVAR 2
23772: PPUSH
23773: LD_INT 0
23775: PPUSH
23776: CALL_OW 324
23780: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23781: LD_EXP 56
23785: PUSH
23786: LD_EXP 72
23790: AND
23791: IFFALSE 23874
23793: GO 23795
23795: DISABLE
23796: LD_INT 0
23798: PPUSH
23799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23800: LD_ADDR_VAR 0 2
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_OWVAR 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 21
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: ST_TO_ADDR
// if not tmp then
23836: LD_VAR 0 2
23840: NOT
23841: IFFALSE 23845
// exit ;
23843: GO 23874
// for i in tmp do
23845: LD_ADDR_VAR 0 1
23849: PUSH
23850: LD_VAR 0 2
23854: PUSH
23855: FOR_IN
23856: IFFALSE 23872
// SetBLevel ( i , 10 ) ;
23858: LD_VAR 0 1
23862: PPUSH
23863: LD_INT 10
23865: PPUSH
23866: CALL_OW 241
23870: GO 23855
23872: POP
23873: POP
// end ;
23874: PPOPN 2
23876: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23877: LD_EXP 56
23881: PUSH
23882: LD_EXP 73
23886: AND
23887: IFFALSE 23998
23889: GO 23891
23891: DISABLE
23892: LD_INT 0
23894: PPUSH
23895: PPUSH
23896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23897: LD_ADDR_VAR 0 3
23901: PUSH
23902: LD_INT 22
23904: PUSH
23905: LD_OWVAR 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 25
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PPUSH
23928: CALL_OW 69
23932: ST_TO_ADDR
// if not tmp then
23933: LD_VAR 0 3
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 23998
// un := tmp [ rand ( 1 , tmp ) ] ;
23942: LD_ADDR_VAR 0 2
23946: PUSH
23947: LD_VAR 0 3
23951: PUSH
23952: LD_INT 1
23954: PPUSH
23955: LD_VAR 0 3
23959: PPUSH
23960: CALL_OW 12
23964: ARRAY
23965: ST_TO_ADDR
// if Crawls ( un ) then
23966: LD_VAR 0 2
23970: PPUSH
23971: CALL_OW 318
23975: IFFALSE 23986
// ComWalk ( un ) ;
23977: LD_VAR 0 2
23981: PPUSH
23982: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23986: LD_VAR 0 2
23990: PPUSH
23991: LD_INT 5
23993: PPUSH
23994: CALL_OW 336
// end ;
23998: PPOPN 3
24000: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24001: LD_EXP 56
24005: PUSH
24006: LD_EXP 74
24010: AND
24011: PUSH
24012: LD_OWVAR 67
24016: PUSH
24017: LD_INT 4
24019: LESS
24020: AND
24021: IFFALSE 24040
24023: GO 24025
24025: DISABLE
// begin Difficulty := Difficulty + 1 ;
24026: LD_ADDR_OWVAR 67
24030: PUSH
24031: LD_OWVAR 67
24035: PUSH
24036: LD_INT 1
24038: PLUS
24039: ST_TO_ADDR
// end ;
24040: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24041: LD_EXP 56
24045: PUSH
24046: LD_EXP 75
24050: AND
24051: IFFALSE 24154
24053: GO 24055
24055: DISABLE
24056: LD_INT 0
24058: PPUSH
// begin for i := 1 to 5 do
24059: LD_ADDR_VAR 0 1
24063: PUSH
24064: DOUBLE
24065: LD_INT 1
24067: DEC
24068: ST_TO_ADDR
24069: LD_INT 5
24071: PUSH
24072: FOR_TO
24073: IFFALSE 24152
// begin uc_nation := nation_nature ;
24075: LD_ADDR_OWVAR 21
24079: PUSH
24080: LD_INT 0
24082: ST_TO_ADDR
// uc_side := 0 ;
24083: LD_ADDR_OWVAR 20
24087: PUSH
24088: LD_INT 0
24090: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24091: LD_ADDR_OWVAR 29
24095: PUSH
24096: LD_INT 12
24098: PUSH
24099: LD_INT 12
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: ST_TO_ADDR
// hc_agressivity := 20 ;
24106: LD_ADDR_OWVAR 35
24110: PUSH
24111: LD_INT 20
24113: ST_TO_ADDR
// hc_class := class_tiger ;
24114: LD_ADDR_OWVAR 28
24118: PUSH
24119: LD_INT 14
24121: ST_TO_ADDR
// hc_gallery :=  ;
24122: LD_ADDR_OWVAR 33
24126: PUSH
24127: LD_STRING 
24129: ST_TO_ADDR
// hc_name :=  ;
24130: LD_ADDR_OWVAR 26
24134: PUSH
24135: LD_STRING 
24137: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24138: CALL_OW 44
24142: PPUSH
24143: LD_INT 0
24145: PPUSH
24146: CALL_OW 51
// end ;
24150: GO 24072
24152: POP
24153: POP
// end ;
24154: PPOPN 1
24156: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24157: LD_EXP 56
24161: PUSH
24162: LD_EXP 76
24166: AND
24167: IFFALSE 24176
24169: GO 24171
24171: DISABLE
// StreamSibBomb ;
24172: CALL 24177 0 0
24176: END
// export function StreamSibBomb ; var i , x , y ; begin
24177: LD_INT 0
24179: PPUSH
24180: PPUSH
24181: PPUSH
24182: PPUSH
// result := false ;
24183: LD_ADDR_VAR 0 1
24187: PUSH
24188: LD_INT 0
24190: ST_TO_ADDR
// for i := 1 to 16 do
24191: LD_ADDR_VAR 0 2
24195: PUSH
24196: DOUBLE
24197: LD_INT 1
24199: DEC
24200: ST_TO_ADDR
24201: LD_INT 16
24203: PUSH
24204: FOR_TO
24205: IFFALSE 24404
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_INT 10
24214: PUSH
24215: LD_INT 20
24217: PUSH
24218: LD_INT 30
24220: PUSH
24221: LD_INT 40
24223: PUSH
24224: LD_INT 50
24226: PUSH
24227: LD_INT 60
24229: PUSH
24230: LD_INT 70
24232: PUSH
24233: LD_INT 80
24235: PUSH
24236: LD_INT 90
24238: PUSH
24239: LD_INT 100
24241: PUSH
24242: LD_INT 110
24244: PUSH
24245: LD_INT 120
24247: PUSH
24248: LD_INT 130
24250: PUSH
24251: LD_INT 140
24253: PUSH
24254: LD_INT 150
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: PPUSH
24277: LD_INT 15
24279: PPUSH
24280: CALL_OW 12
24284: ARRAY
24285: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24286: LD_ADDR_VAR 0 4
24290: PUSH
24291: LD_INT 10
24293: PUSH
24294: LD_INT 20
24296: PUSH
24297: LD_INT 30
24299: PUSH
24300: LD_INT 40
24302: PUSH
24303: LD_INT 50
24305: PUSH
24306: LD_INT 60
24308: PUSH
24309: LD_INT 70
24311: PUSH
24312: LD_INT 80
24314: PUSH
24315: LD_INT 90
24317: PUSH
24318: LD_INT 100
24320: PUSH
24321: LD_INT 110
24323: PUSH
24324: LD_INT 120
24326: PUSH
24327: LD_INT 130
24329: PUSH
24330: LD_INT 140
24332: PUSH
24333: LD_INT 150
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: PPUSH
24356: LD_INT 15
24358: PPUSH
24359: CALL_OW 12
24363: ARRAY
24364: ST_TO_ADDR
// if ValidHex ( x , y ) then
24365: LD_VAR 0 3
24369: PPUSH
24370: LD_VAR 0 4
24374: PPUSH
24375: CALL_OW 488
24379: IFFALSE 24402
// begin result := [ x , y ] ;
24381: LD_ADDR_VAR 0 1
24385: PUSH
24386: LD_VAR 0 3
24390: PUSH
24391: LD_VAR 0 4
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: ST_TO_ADDR
// break ;
24400: GO 24404
// end ; end ;
24402: GO 24204
24404: POP
24405: POP
// if result then
24406: LD_VAR 0 1
24410: IFFALSE 24470
// begin ToLua ( playSibBomb() ) ;
24412: LD_STRING playSibBomb()
24414: PPUSH
24415: CALL_OW 559
// wait ( 0 0$14 ) ;
24419: LD_INT 490
24421: PPUSH
24422: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24426: LD_VAR 0 1
24430: PUSH
24431: LD_INT 1
24433: ARRAY
24434: PPUSH
24435: LD_VAR 0 1
24439: PUSH
24440: LD_INT 2
24442: ARRAY
24443: PPUSH
24444: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24448: LD_VAR 0 1
24452: PUSH
24453: LD_INT 1
24455: ARRAY
24456: PPUSH
24457: LD_VAR 0 1
24461: PUSH
24462: LD_INT 2
24464: ARRAY
24465: PPUSH
24466: CALL_OW 429
// end ; end ;
24470: LD_VAR 0 1
24474: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24475: LD_EXP 56
24479: PUSH
24480: LD_EXP 78
24484: AND
24485: IFFALSE 24497
24487: GO 24489
24489: DISABLE
// YouLost (  ) ;
24490: LD_STRING 
24492: PPUSH
24493: CALL_OW 104
24497: END
// every 0 0$1 trigger StreamModeActive and sFog do
24498: LD_EXP 56
24502: PUSH
24503: LD_EXP 77
24507: AND
24508: IFFALSE 24522
24510: GO 24512
24512: DISABLE
// FogOff ( your_side ) ;
24513: LD_OWVAR 2
24517: PPUSH
24518: CALL_OW 344
24522: END
// every 0 0$1 trigger StreamModeActive and sSun do
24523: LD_EXP 56
24527: PUSH
24528: LD_EXP 79
24532: AND
24533: IFFALSE 24561
24535: GO 24537
24537: DISABLE
// begin solar_recharge_percent := 0 ;
24538: LD_ADDR_OWVAR 79
24542: PUSH
24543: LD_INT 0
24545: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24546: LD_INT 10500
24548: PPUSH
24549: CALL_OW 67
// solar_recharge_percent := 100 ;
24553: LD_ADDR_OWVAR 79
24557: PUSH
24558: LD_INT 100
24560: ST_TO_ADDR
// end ;
24561: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24562: LD_EXP 56
24566: PUSH
24567: LD_EXP 80
24571: AND
24572: IFFALSE 24811
24574: GO 24576
24576: DISABLE
24577: LD_INT 0
24579: PPUSH
24580: PPUSH
24581: PPUSH
// begin tmp := [ ] ;
24582: LD_ADDR_VAR 0 3
24586: PUSH
24587: EMPTY
24588: ST_TO_ADDR
// for i := 1 to 6 do
24589: LD_ADDR_VAR 0 1
24593: PUSH
24594: DOUBLE
24595: LD_INT 1
24597: DEC
24598: ST_TO_ADDR
24599: LD_INT 6
24601: PUSH
24602: FOR_TO
24603: IFFALSE 24708
// begin uc_nation := nation_nature ;
24605: LD_ADDR_OWVAR 21
24609: PUSH
24610: LD_INT 0
24612: ST_TO_ADDR
// uc_side := 0 ;
24613: LD_ADDR_OWVAR 20
24617: PUSH
24618: LD_INT 0
24620: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24621: LD_ADDR_OWVAR 29
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 12
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: ST_TO_ADDR
// hc_agressivity := 20 ;
24636: LD_ADDR_OWVAR 35
24640: PUSH
24641: LD_INT 20
24643: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24644: LD_ADDR_OWVAR 28
24648: PUSH
24649: LD_INT 17
24651: ST_TO_ADDR
// hc_gallery :=  ;
24652: LD_ADDR_OWVAR 33
24656: PUSH
24657: LD_STRING 
24659: ST_TO_ADDR
// hc_name :=  ;
24660: LD_ADDR_OWVAR 26
24664: PUSH
24665: LD_STRING 
24667: ST_TO_ADDR
// un := CreateHuman ;
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: CALL_OW 44
24677: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_INT 1
24685: PPUSH
24686: CALL_OW 51
// tmp := tmp ^ un ;
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_VAR 0 3
24699: PUSH
24700: LD_VAR 0 2
24704: ADD
24705: ST_TO_ADDR
// end ;
24706: GO 24602
24708: POP
24709: POP
// repeat wait ( 0 0$1 ) ;
24710: LD_INT 35
24712: PPUSH
24713: CALL_OW 67
// for un in tmp do
24717: LD_ADDR_VAR 0 2
24721: PUSH
24722: LD_VAR 0 3
24726: PUSH
24727: FOR_IN
24728: IFFALSE 24802
// begin if IsDead ( un ) then
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 301
24739: IFFALSE 24759
// begin tmp := tmp diff un ;
24741: LD_ADDR_VAR 0 3
24745: PUSH
24746: LD_VAR 0 3
24750: PUSH
24751: LD_VAR 0 2
24755: DIFF
24756: ST_TO_ADDR
// continue ;
24757: GO 24727
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24759: LD_VAR 0 2
24763: PPUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PPUSH
24781: CALL_OW 69
24785: PPUSH
24786: LD_VAR 0 2
24790: PPUSH
24791: CALL_OW 74
24795: PPUSH
24796: CALL_OW 115
// end ;
24800: GO 24727
24802: POP
24803: POP
// until not tmp ;
24804: LD_VAR 0 3
24808: NOT
24809: IFFALSE 24710
// end ;
24811: PPOPN 3
24813: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24814: LD_EXP 56
24818: PUSH
24819: LD_EXP 81
24823: AND
24824: IFFALSE 24878
24826: GO 24828
24828: DISABLE
// begin ToLua ( displayTroll(); ) ;
24829: LD_STRING displayTroll();
24831: PPUSH
24832: CALL_OW 559
// wait ( 3 3$00 ) ;
24836: LD_INT 6300
24838: PPUSH
24839: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24843: LD_STRING hideTroll();
24845: PPUSH
24846: CALL_OW 559
// wait ( 1 1$00 ) ;
24850: LD_INT 2100
24852: PPUSH
24853: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24857: LD_STRING displayTroll();
24859: PPUSH
24860: CALL_OW 559
// wait ( 1 1$00 ) ;
24864: LD_INT 2100
24866: PPUSH
24867: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24871: LD_STRING hideTroll();
24873: PPUSH
24874: CALL_OW 559
// end ;
24878: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24879: LD_EXP 56
24883: PUSH
24884: LD_EXP 82
24888: AND
24889: IFFALSE 24952
24891: GO 24893
24893: DISABLE
24894: LD_INT 0
24896: PPUSH
// begin p := 0 ;
24897: LD_ADDR_VAR 0 1
24901: PUSH
24902: LD_INT 0
24904: ST_TO_ADDR
// repeat game_speed := 1 ;
24905: LD_ADDR_OWVAR 65
24909: PUSH
24910: LD_INT 1
24912: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24913: LD_INT 35
24915: PPUSH
24916: CALL_OW 67
// p := p + 1 ;
24920: LD_ADDR_VAR 0 1
24924: PUSH
24925: LD_VAR 0 1
24929: PUSH
24930: LD_INT 1
24932: PLUS
24933: ST_TO_ADDR
// until p >= 60 ;
24934: LD_VAR 0 1
24938: PUSH
24939: LD_INT 60
24941: GREATEREQUAL
24942: IFFALSE 24905
// game_speed := 4 ;
24944: LD_ADDR_OWVAR 65
24948: PUSH
24949: LD_INT 4
24951: ST_TO_ADDR
// end ;
24952: PPOPN 1
24954: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24955: LD_EXP 56
24959: PUSH
24960: LD_EXP 83
24964: AND
24965: IFFALSE 25111
24967: GO 24969
24969: DISABLE
24970: LD_INT 0
24972: PPUSH
24973: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24974: LD_ADDR_VAR 0 1
24978: PUSH
24979: LD_INT 22
24981: PUSH
24982: LD_OWVAR 2
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 30
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 30
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PPUSH
25023: CALL_OW 69
25027: ST_TO_ADDR
// if not depot then
25028: LD_VAR 0 1
25032: NOT
25033: IFFALSE 25037
// exit ;
25035: GO 25111
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25037: LD_ADDR_VAR 0 2
25041: PUSH
25042: LD_VAR 0 1
25046: PUSH
25047: LD_INT 1
25049: PPUSH
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 12
25059: ARRAY
25060: PPUSH
25061: CALL_OW 274
25065: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25066: LD_VAR 0 2
25070: PPUSH
25071: LD_INT 1
25073: PPUSH
25074: LD_INT 0
25076: PPUSH
25077: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25081: LD_VAR 0 2
25085: PPUSH
25086: LD_INT 2
25088: PPUSH
25089: LD_INT 0
25091: PPUSH
25092: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25096: LD_VAR 0 2
25100: PPUSH
25101: LD_INT 3
25103: PPUSH
25104: LD_INT 0
25106: PPUSH
25107: CALL_OW 277
// end ;
25111: PPOPN 2
25113: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25114: LD_EXP 56
25118: PUSH
25119: LD_EXP 84
25123: AND
25124: IFFALSE 25221
25126: GO 25128
25128: DISABLE
25129: LD_INT 0
25131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25132: LD_ADDR_VAR 0 1
25136: PUSH
25137: LD_INT 22
25139: PUSH
25140: LD_OWVAR 2
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 21
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 3
25161: PUSH
25162: LD_INT 23
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: PPUSH
25181: CALL_OW 69
25185: ST_TO_ADDR
// if not tmp then
25186: LD_VAR 0 1
25190: NOT
25191: IFFALSE 25195
// exit ;
25193: GO 25221
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25195: LD_VAR 0 1
25199: PUSH
25200: LD_INT 1
25202: PPUSH
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 12
25212: ARRAY
25213: PPUSH
25214: LD_INT 200
25216: PPUSH
25217: CALL_OW 234
// end ;
25221: PPOPN 1
25223: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25224: LD_EXP 56
25228: PUSH
25229: LD_EXP 85
25233: AND
25234: IFFALSE 25313
25236: GO 25238
25238: DISABLE
25239: LD_INT 0
25241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25242: LD_ADDR_VAR 0 1
25246: PUSH
25247: LD_INT 22
25249: PUSH
25250: LD_OWVAR 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 21
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PPUSH
25273: CALL_OW 69
25277: ST_TO_ADDR
// if not tmp then
25278: LD_VAR 0 1
25282: NOT
25283: IFFALSE 25287
// exit ;
25285: GO 25313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25287: LD_VAR 0 1
25291: PUSH
25292: LD_INT 1
25294: PPUSH
25295: LD_VAR 0 1
25299: PPUSH
25300: CALL_OW 12
25304: ARRAY
25305: PPUSH
25306: LD_INT 60
25308: PPUSH
25309: CALL_OW 234
// end ;
25313: PPOPN 1
25315: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25316: LD_EXP 56
25320: PUSH
25321: LD_EXP 86
25325: AND
25326: IFFALSE 25425
25328: GO 25330
25330: DISABLE
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
// begin enable ;
25335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25336: LD_ADDR_VAR 0 1
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_OWVAR 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 61
25355: PUSH
25356: EMPTY
25357: LIST
25358: PUSH
25359: LD_INT 33
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: PPUSH
25374: CALL_OW 69
25378: ST_TO_ADDR
// if not tmp then
25379: LD_VAR 0 1
25383: NOT
25384: IFFALSE 25388
// exit ;
25386: GO 25425
// for i in tmp do
25388: LD_ADDR_VAR 0 2
25392: PUSH
25393: LD_VAR 0 1
25397: PUSH
25398: FOR_IN
25399: IFFALSE 25423
// if IsControledBy ( i ) then
25401: LD_VAR 0 2
25405: PPUSH
25406: CALL_OW 312
25410: IFFALSE 25421
// ComUnlink ( i ) ;
25412: LD_VAR 0 2
25416: PPUSH
25417: CALL_OW 136
25421: GO 25398
25423: POP
25424: POP
// end ;
25425: PPOPN 2
25427: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25428: LD_EXP 56
25432: PUSH
25433: LD_EXP 87
25437: AND
25438: IFFALSE 25578
25440: GO 25442
25442: DISABLE
25443: LD_INT 0
25445: PPUSH
25446: PPUSH
// begin ToLua ( displayPowell(); ) ;
25447: LD_STRING displayPowell();
25449: PPUSH
25450: CALL_OW 559
// uc_side := 0 ;
25454: LD_ADDR_OWVAR 20
25458: PUSH
25459: LD_INT 0
25461: ST_TO_ADDR
// uc_nation := 2 ;
25462: LD_ADDR_OWVAR 21
25466: PUSH
25467: LD_INT 2
25469: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25470: LD_ADDR_OWVAR 37
25474: PUSH
25475: LD_INT 14
25477: ST_TO_ADDR
// vc_engine := engine_siberite ;
25478: LD_ADDR_OWVAR 39
25482: PUSH
25483: LD_INT 3
25485: ST_TO_ADDR
// vc_control := control_apeman ;
25486: LD_ADDR_OWVAR 38
25490: PUSH
25491: LD_INT 5
25493: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25494: LD_ADDR_OWVAR 40
25498: PUSH
25499: LD_INT 29
25501: ST_TO_ADDR
// un := CreateVehicle ;
25502: LD_ADDR_VAR 0 2
25506: PUSH
25507: CALL_OW 45
25511: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25512: LD_VAR 0 2
25516: PPUSH
25517: LD_INT 1
25519: PPUSH
25520: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25524: LD_INT 35
25526: PPUSH
25527: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25531: LD_VAR 0 2
25535: PPUSH
25536: LD_INT 22
25538: PUSH
25539: LD_OWVAR 2
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PPUSH
25548: CALL_OW 69
25552: PPUSH
25553: LD_VAR 0 2
25557: PPUSH
25558: CALL_OW 74
25562: PPUSH
25563: CALL_OW 115
// until IsDead ( un ) ;
25567: LD_VAR 0 2
25571: PPUSH
25572: CALL_OW 301
25576: IFFALSE 25524
// end ;
25578: PPOPN 2
25580: END
// every 0 0$1 trigger StreamModeActive and sStu do
25581: LD_EXP 56
25585: PUSH
25586: LD_EXP 95
25590: AND
25591: IFFALSE 25607
25593: GO 25595
25595: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25596: LD_STRING displayStucuk();
25598: PPUSH
25599: CALL_OW 559
// ResetFog ;
25603: CALL_OW 335
// end ;
25607: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25608: LD_EXP 56
25612: PUSH
25613: LD_EXP 88
25617: AND
25618: IFFALSE 25759
25620: GO 25622
25622: DISABLE
25623: LD_INT 0
25625: PPUSH
25626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25627: LD_ADDR_VAR 0 2
25631: PUSH
25632: LD_INT 22
25634: PUSH
25635: LD_OWVAR 2
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 21
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PPUSH
25658: CALL_OW 69
25662: ST_TO_ADDR
// if not tmp then
25663: LD_VAR 0 2
25667: NOT
25668: IFFALSE 25672
// exit ;
25670: GO 25759
// un := tmp [ rand ( 1 , tmp ) ] ;
25672: LD_ADDR_VAR 0 1
25676: PUSH
25677: LD_VAR 0 2
25681: PUSH
25682: LD_INT 1
25684: PPUSH
25685: LD_VAR 0 2
25689: PPUSH
25690: CALL_OW 12
25694: ARRAY
25695: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_INT 0
25703: PPUSH
25704: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25708: LD_VAR 0 1
25712: PPUSH
25713: LD_OWVAR 3
25717: PUSH
25718: LD_VAR 0 1
25722: DIFF
25723: PPUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 74
25733: PPUSH
25734: CALL_OW 115
// wait ( 0 0$20 ) ;
25738: LD_INT 700
25740: PPUSH
25741: CALL_OW 67
// SetSide ( un , your_side ) ;
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_OWVAR 2
25754: PPUSH
25755: CALL_OW 235
// end ;
25759: PPOPN 2
25761: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25762: LD_EXP 56
25766: PUSH
25767: LD_EXP 89
25771: AND
25772: IFFALSE 25878
25774: GO 25776
25776: DISABLE
25777: LD_INT 0
25779: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25780: LD_ADDR_VAR 0 1
25784: PUSH
25785: LD_INT 22
25787: PUSH
25788: LD_OWVAR 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 30
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PPUSH
25829: CALL_OW 69
25833: ST_TO_ADDR
// if not depot then
25834: LD_VAR 0 1
25838: NOT
25839: IFFALSE 25843
// exit ;
25841: GO 25878
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: PPUSH
25852: CALL_OW 250
25856: PPUSH
25857: LD_VAR 0 1
25861: PUSH
25862: LD_INT 1
25864: ARRAY
25865: PPUSH
25866: CALL_OW 251
25870: PPUSH
25871: LD_INT 70
25873: PPUSH
25874: CALL_OW 495
// end ;
25878: PPOPN 1
25880: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25881: LD_EXP 56
25885: PUSH
25886: LD_EXP 90
25890: AND
25891: IFFALSE 26102
25893: GO 25895
25895: DISABLE
25896: LD_INT 0
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25903: LD_ADDR_VAR 0 5
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_OWVAR 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: ST_TO_ADDR
// if not tmp then
25939: LD_VAR 0 5
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 26102
// for i in tmp do
25948: LD_ADDR_VAR 0 1
25952: PUSH
25953: LD_VAR 0 5
25957: PUSH
25958: FOR_IN
25959: IFFALSE 26100
// begin d := rand ( 0 , 5 ) ;
25961: LD_ADDR_VAR 0 4
25965: PUSH
25966: LD_INT 0
25968: PPUSH
25969: LD_INT 5
25971: PPUSH
25972: CALL_OW 12
25976: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 250
25991: PPUSH
25992: LD_VAR 0 4
25996: PPUSH
25997: LD_INT 3
25999: PPUSH
26000: LD_INT 12
26002: PPUSH
26003: CALL_OW 12
26007: PPUSH
26008: CALL_OW 272
26012: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26013: LD_ADDR_VAR 0 3
26017: PUSH
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 251
26027: PPUSH
26028: LD_VAR 0 4
26032: PPUSH
26033: LD_INT 3
26035: PPUSH
26036: LD_INT 12
26038: PPUSH
26039: CALL_OW 12
26043: PPUSH
26044: CALL_OW 273
26048: ST_TO_ADDR
// if ValidHex ( x , y ) then
26049: LD_VAR 0 2
26053: PPUSH
26054: LD_VAR 0 3
26058: PPUSH
26059: CALL_OW 488
26063: IFFALSE 26098
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26065: LD_VAR 0 1
26069: PPUSH
26070: LD_VAR 0 2
26074: PPUSH
26075: LD_VAR 0 3
26079: PPUSH
26080: LD_INT 3
26082: PPUSH
26083: LD_INT 6
26085: PPUSH
26086: CALL_OW 12
26090: PPUSH
26091: LD_INT 1
26093: PPUSH
26094: CALL_OW 483
// end ;
26098: GO 25958
26100: POP
26101: POP
// end ;
26102: PPOPN 5
26104: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26105: LD_EXP 56
26109: PUSH
26110: LD_EXP 91
26114: AND
26115: IFFALSE 26209
26117: GO 26119
26119: DISABLE
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26124: LD_ADDR_VAR 0 2
26128: PUSH
26129: LD_INT 22
26131: PUSH
26132: LD_OWVAR 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 32
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 21
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: PPUSH
26166: CALL_OW 69
26170: ST_TO_ADDR
// if not tmp then
26171: LD_VAR 0 2
26175: NOT
26176: IFFALSE 26180
// exit ;
26178: GO 26209
// for i in tmp do
26180: LD_ADDR_VAR 0 1
26184: PUSH
26185: LD_VAR 0 2
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26207
// SetFuel ( i , 0 ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_INT 0
26200: PPUSH
26201: CALL_OW 240
26205: GO 26190
26207: POP
26208: POP
// end ;
26209: PPOPN 2
26211: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26212: LD_EXP 56
26216: PUSH
26217: LD_EXP 92
26221: AND
26222: IFFALSE 26288
26224: GO 26226
26226: DISABLE
26227: LD_INT 0
26229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26230: LD_ADDR_VAR 0 1
26234: PUSH
26235: LD_INT 22
26237: PUSH
26238: LD_OWVAR 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 30
26249: PUSH
26250: LD_INT 29
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PPUSH
26261: CALL_OW 69
26265: ST_TO_ADDR
// if not tmp then
26266: LD_VAR 0 1
26270: NOT
26271: IFFALSE 26275
// exit ;
26273: GO 26288
// DestroyUnit ( tmp [ 1 ] ) ;
26275: LD_VAR 0 1
26279: PUSH
26280: LD_INT 1
26282: ARRAY
26283: PPUSH
26284: CALL_OW 65
// end ;
26288: PPOPN 1
26290: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26291: LD_EXP 56
26295: PUSH
26296: LD_EXP 94
26300: AND
26301: IFFALSE 26430
26303: GO 26305
26305: DISABLE
26306: LD_INT 0
26308: PPUSH
// begin uc_side := 0 ;
26309: LD_ADDR_OWVAR 20
26313: PUSH
26314: LD_INT 0
26316: ST_TO_ADDR
// uc_nation := nation_arabian ;
26317: LD_ADDR_OWVAR 21
26321: PUSH
26322: LD_INT 2
26324: ST_TO_ADDR
// hc_gallery :=  ;
26325: LD_ADDR_OWVAR 33
26329: PUSH
26330: LD_STRING 
26332: ST_TO_ADDR
// hc_name :=  ;
26333: LD_ADDR_OWVAR 26
26337: PUSH
26338: LD_STRING 
26340: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26341: LD_INT 1
26343: PPUSH
26344: LD_INT 11
26346: PPUSH
26347: LD_INT 10
26349: PPUSH
26350: CALL_OW 380
// un := CreateHuman ;
26354: LD_ADDR_VAR 0 1
26358: PUSH
26359: CALL_OW 44
26363: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26364: LD_VAR 0 1
26368: PPUSH
26369: LD_INT 1
26371: PPUSH
26372: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26376: LD_INT 35
26378: PPUSH
26379: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26383: LD_VAR 0 1
26387: PPUSH
26388: LD_INT 22
26390: PUSH
26391: LD_OWVAR 2
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PPUSH
26400: CALL_OW 69
26404: PPUSH
26405: LD_VAR 0 1
26409: PPUSH
26410: CALL_OW 74
26414: PPUSH
26415: CALL_OW 115
// until IsDead ( un ) ;
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 301
26428: IFFALSE 26376
// end ;
26430: PPOPN 1
26432: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26433: LD_EXP 56
26437: PUSH
26438: LD_EXP 96
26442: AND
26443: IFFALSE 26455
26445: GO 26447
26447: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26448: LD_STRING earthquake(getX(game), 0, 32)
26450: PPUSH
26451: CALL_OW 559
26455: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26456: LD_EXP 56
26460: PUSH
26461: LD_EXP 97
26465: AND
26466: IFFALSE 26557
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
// begin enable ;
26474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26475: LD_ADDR_VAR 0 1
26479: PUSH
26480: LD_INT 22
26482: PUSH
26483: LD_OWVAR 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 21
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 33
26504: PUSH
26505: LD_INT 3
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// if not tmp then
26522: LD_VAR 0 1
26526: NOT
26527: IFFALSE 26531
// exit ;
26529: GO 26557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26531: LD_VAR 0 1
26535: PUSH
26536: LD_INT 1
26538: PPUSH
26539: LD_VAR 0 1
26543: PPUSH
26544: CALL_OW 12
26548: ARRAY
26549: PPUSH
26550: LD_INT 1
26552: PPUSH
26553: CALL_OW 234
// end ;
26557: PPOPN 1
26559: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26560: LD_EXP 56
26564: PUSH
26565: LD_EXP 98
26569: AND
26570: IFFALSE 26711
26572: GO 26574
26574: DISABLE
26575: LD_INT 0
26577: PPUSH
26578: PPUSH
26579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26580: LD_ADDR_VAR 0 3
26584: PUSH
26585: LD_INT 22
26587: PUSH
26588: LD_OWVAR 2
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 25
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PPUSH
26611: CALL_OW 69
26615: ST_TO_ADDR
// if not tmp then
26616: LD_VAR 0 3
26620: NOT
26621: IFFALSE 26625
// exit ;
26623: GO 26711
// un := tmp [ rand ( 1 , tmp ) ] ;
26625: LD_ADDR_VAR 0 2
26629: PUSH
26630: LD_VAR 0 3
26634: PUSH
26635: LD_INT 1
26637: PPUSH
26638: LD_VAR 0 3
26642: PPUSH
26643: CALL_OW 12
26647: ARRAY
26648: ST_TO_ADDR
// if Crawls ( un ) then
26649: LD_VAR 0 2
26653: PPUSH
26654: CALL_OW 318
26658: IFFALSE 26669
// ComWalk ( un ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26669: LD_VAR 0 2
26673: PPUSH
26674: LD_INT 9
26676: PPUSH
26677: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26681: LD_INT 28
26683: PPUSH
26684: LD_OWVAR 2
26688: PPUSH
26689: LD_INT 2
26691: PPUSH
26692: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26696: LD_INT 29
26698: PPUSH
26699: LD_OWVAR 2
26703: PPUSH
26704: LD_INT 2
26706: PPUSH
26707: CALL_OW 322
// end ;
26711: PPOPN 3
26713: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26714: LD_EXP 56
26718: PUSH
26719: LD_EXP 99
26723: AND
26724: IFFALSE 26835
26726: GO 26728
26728: DISABLE
26729: LD_INT 0
26731: PPUSH
26732: PPUSH
26733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 22
26741: PUSH
26742: LD_OWVAR 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 25
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 69
26769: ST_TO_ADDR
// if not tmp then
26770: LD_VAR 0 3
26774: NOT
26775: IFFALSE 26779
// exit ;
26777: GO 26835
// un := tmp [ rand ( 1 , tmp ) ] ;
26779: LD_ADDR_VAR 0 2
26783: PUSH
26784: LD_VAR 0 3
26788: PUSH
26789: LD_INT 1
26791: PPUSH
26792: LD_VAR 0 3
26796: PPUSH
26797: CALL_OW 12
26801: ARRAY
26802: ST_TO_ADDR
// if Crawls ( un ) then
26803: LD_VAR 0 2
26807: PPUSH
26808: CALL_OW 318
26812: IFFALSE 26823
// ComWalk ( un ) ;
26814: LD_VAR 0 2
26818: PPUSH
26819: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26823: LD_VAR 0 2
26827: PPUSH
26828: LD_INT 8
26830: PPUSH
26831: CALL_OW 336
// end ;
26835: PPOPN 3
26837: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26838: LD_EXP 56
26842: PUSH
26843: LD_EXP 100
26847: AND
26848: IFFALSE 26992
26850: GO 26852
26852: DISABLE
26853: LD_INT 0
26855: PPUSH
26856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26857: LD_ADDR_VAR 0 2
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_OWVAR 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 21
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: LD_INT 34
26889: PUSH
26890: LD_INT 12
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 34
26899: PUSH
26900: LD_INT 51
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 34
26909: PUSH
26910: LD_INT 32
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: PPUSH
26928: CALL_OW 69
26932: ST_TO_ADDR
// if not tmp then
26933: LD_VAR 0 2
26937: NOT
26938: IFFALSE 26942
// exit ;
26940: GO 26992
// for i in tmp do
26942: LD_ADDR_VAR 0 1
26946: PUSH
26947: LD_VAR 0 2
26951: PUSH
26952: FOR_IN
26953: IFFALSE 26990
// if GetCargo ( i , mat_artifact ) = 0 then
26955: LD_VAR 0 1
26959: PPUSH
26960: LD_INT 4
26962: PPUSH
26963: CALL_OW 289
26967: PUSH
26968: LD_INT 0
26970: EQUAL
26971: IFFALSE 26988
// SetCargo ( i , mat_siberit , 100 ) ;
26973: LD_VAR 0 1
26977: PPUSH
26978: LD_INT 3
26980: PPUSH
26981: LD_INT 100
26983: PPUSH
26984: CALL_OW 290
26988: GO 26952
26990: POP
26991: POP
// end ;
26992: PPOPN 2
26994: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26995: LD_EXP 56
26999: PUSH
27000: LD_EXP 101
27004: AND
27005: IFFALSE 27188
27007: GO 27009
27009: DISABLE
27010: LD_INT 0
27012: PPUSH
27013: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27014: LD_ADDR_VAR 0 2
27018: PUSH
27019: LD_INT 22
27021: PUSH
27022: LD_OWVAR 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PPUSH
27031: CALL_OW 69
27035: ST_TO_ADDR
// if not tmp then
27036: LD_VAR 0 2
27040: NOT
27041: IFFALSE 27045
// exit ;
27043: GO 27188
// for i := 1 to 2 do
27045: LD_ADDR_VAR 0 1
27049: PUSH
27050: DOUBLE
27051: LD_INT 1
27053: DEC
27054: ST_TO_ADDR
27055: LD_INT 2
27057: PUSH
27058: FOR_TO
27059: IFFALSE 27186
// begin uc_side := your_side ;
27061: LD_ADDR_OWVAR 20
27065: PUSH
27066: LD_OWVAR 2
27070: ST_TO_ADDR
// uc_nation := nation_american ;
27071: LD_ADDR_OWVAR 21
27075: PUSH
27076: LD_INT 1
27078: ST_TO_ADDR
// vc_chassis := us_morphling ;
27079: LD_ADDR_OWVAR 37
27083: PUSH
27084: LD_INT 5
27086: ST_TO_ADDR
// vc_engine := engine_siberite ;
27087: LD_ADDR_OWVAR 39
27091: PUSH
27092: LD_INT 3
27094: ST_TO_ADDR
// vc_control := control_computer ;
27095: LD_ADDR_OWVAR 38
27099: PUSH
27100: LD_INT 3
27102: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27103: LD_ADDR_OWVAR 40
27107: PUSH
27108: LD_INT 10
27110: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27111: LD_VAR 0 2
27115: PUSH
27116: LD_INT 1
27118: ARRAY
27119: PPUSH
27120: CALL_OW 310
27124: NOT
27125: IFFALSE 27172
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27127: CALL_OW 45
27131: PPUSH
27132: LD_VAR 0 2
27136: PUSH
27137: LD_INT 1
27139: ARRAY
27140: PPUSH
27141: CALL_OW 250
27145: PPUSH
27146: LD_VAR 0 2
27150: PUSH
27151: LD_INT 1
27153: ARRAY
27154: PPUSH
27155: CALL_OW 251
27159: PPUSH
27160: LD_INT 12
27162: PPUSH
27163: LD_INT 1
27165: PPUSH
27166: CALL_OW 50
27170: GO 27184
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27172: CALL_OW 45
27176: PPUSH
27177: LD_INT 1
27179: PPUSH
27180: CALL_OW 51
// end ;
27184: GO 27058
27186: POP
27187: POP
// end ;
27188: PPOPN 2
27190: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27191: LD_EXP 56
27195: PUSH
27196: LD_EXP 102
27200: AND
27201: IFFALSE 27423
27203: GO 27205
27205: DISABLE
27206: LD_INT 0
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27214: LD_ADDR_VAR 0 6
27218: PUSH
27219: LD_INT 22
27221: PUSH
27222: LD_OWVAR 2
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 21
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: LD_INT 23
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: PPUSH
27263: CALL_OW 69
27267: ST_TO_ADDR
// if not tmp then
27268: LD_VAR 0 6
27272: NOT
27273: IFFALSE 27277
// exit ;
27275: GO 27423
// s1 := rand ( 1 , 4 ) ;
27277: LD_ADDR_VAR 0 2
27281: PUSH
27282: LD_INT 1
27284: PPUSH
27285: LD_INT 4
27287: PPUSH
27288: CALL_OW 12
27292: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27293: LD_ADDR_VAR 0 4
27297: PUSH
27298: LD_VAR 0 6
27302: PUSH
27303: LD_INT 1
27305: ARRAY
27306: PPUSH
27307: LD_VAR 0 2
27311: PPUSH
27312: CALL_OW 259
27316: ST_TO_ADDR
// if s1 = 1 then
27317: LD_VAR 0 2
27321: PUSH
27322: LD_INT 1
27324: EQUAL
27325: IFFALSE 27345
// s2 := rand ( 2 , 4 ) else
27327: LD_ADDR_VAR 0 3
27331: PUSH
27332: LD_INT 2
27334: PPUSH
27335: LD_INT 4
27337: PPUSH
27338: CALL_OW 12
27342: ST_TO_ADDR
27343: GO 27353
// s2 := 1 ;
27345: LD_ADDR_VAR 0 3
27349: PUSH
27350: LD_INT 1
27352: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27353: LD_ADDR_VAR 0 5
27357: PUSH
27358: LD_VAR 0 6
27362: PUSH
27363: LD_INT 1
27365: ARRAY
27366: PPUSH
27367: LD_VAR 0 3
27371: PPUSH
27372: CALL_OW 259
27376: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27377: LD_VAR 0 6
27381: PUSH
27382: LD_INT 1
27384: ARRAY
27385: PPUSH
27386: LD_VAR 0 2
27390: PPUSH
27391: LD_VAR 0 5
27395: PPUSH
27396: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27400: LD_VAR 0 6
27404: PUSH
27405: LD_INT 1
27407: ARRAY
27408: PPUSH
27409: LD_VAR 0 3
27413: PPUSH
27414: LD_VAR 0 4
27418: PPUSH
27419: CALL_OW 237
// end ;
27423: PPOPN 6
27425: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27426: LD_EXP 56
27430: PUSH
27431: LD_EXP 103
27435: AND
27436: IFFALSE 27515
27438: GO 27440
27440: DISABLE
27441: LD_INT 0
27443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27444: LD_ADDR_VAR 0 1
27448: PUSH
27449: LD_INT 22
27451: PUSH
27452: LD_OWVAR 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 30
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: ST_TO_ADDR
// if not tmp then
27480: LD_VAR 0 1
27484: NOT
27485: IFFALSE 27489
// exit ;
27487: GO 27515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27489: LD_VAR 0 1
27493: PUSH
27494: LD_INT 1
27496: PPUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL_OW 12
27506: ARRAY
27507: PPUSH
27508: LD_INT 1
27510: PPUSH
27511: CALL_OW 234
// end ;
27515: PPOPN 1
27517: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27518: LD_EXP 56
27522: PUSH
27523: LD_EXP 104
27527: AND
27528: IFFALSE 27640
27530: GO 27532
27532: DISABLE
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27537: LD_ADDR_VAR 0 2
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_OWVAR 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 30
27559: PUSH
27560: LD_INT 27
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 30
27569: PUSH
27570: LD_INT 26
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 30
27579: PUSH
27580: LD_INT 28
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PPUSH
27597: CALL_OW 69
27601: ST_TO_ADDR
// if not tmp then
27602: LD_VAR 0 2
27606: NOT
27607: IFFALSE 27611
// exit ;
27609: GO 27640
// for i in tmp do
27611: LD_ADDR_VAR 0 1
27615: PUSH
27616: LD_VAR 0 2
27620: PUSH
27621: FOR_IN
27622: IFFALSE 27638
// SetLives ( i , 1 ) ;
27624: LD_VAR 0 1
27628: PPUSH
27629: LD_INT 1
27631: PPUSH
27632: CALL_OW 234
27636: GO 27621
27638: POP
27639: POP
// end ;
27640: PPOPN 2
27642: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27643: LD_EXP 56
27647: PUSH
27648: LD_EXP 105
27652: AND
27653: IFFALSE 27940
27655: GO 27657
27657: DISABLE
27658: LD_INT 0
27660: PPUSH
27661: PPUSH
27662: PPUSH
// begin i := rand ( 1 , 7 ) ;
27663: LD_ADDR_VAR 0 1
27667: PUSH
27668: LD_INT 1
27670: PPUSH
27671: LD_INT 7
27673: PPUSH
27674: CALL_OW 12
27678: ST_TO_ADDR
// case i of 1 :
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 1
27686: DOUBLE
27687: EQUAL
27688: IFTRUE 27692
27690: GO 27702
27692: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27693: LD_STRING earthquake(getX(game), 0, 32)
27695: PPUSH
27696: CALL_OW 559
27700: GO 27940
27702: LD_INT 2
27704: DOUBLE
27705: EQUAL
27706: IFTRUE 27710
27708: GO 27724
27710: POP
// begin ToLua ( displayStucuk(); ) ;
27711: LD_STRING displayStucuk();
27713: PPUSH
27714: CALL_OW 559
// ResetFog ;
27718: CALL_OW 335
// end ; 3 :
27722: GO 27940
27724: LD_INT 3
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27836
27732: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27733: LD_ADDR_VAR 0 2
27737: PUSH
27738: LD_INT 22
27740: PUSH
27741: LD_OWVAR 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 25
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PPUSH
27764: CALL_OW 69
27768: ST_TO_ADDR
// if not tmp then
27769: LD_VAR 0 2
27773: NOT
27774: IFFALSE 27778
// exit ;
27776: GO 27940
// un := tmp [ rand ( 1 , tmp ) ] ;
27778: LD_ADDR_VAR 0 3
27782: PUSH
27783: LD_VAR 0 2
27787: PUSH
27788: LD_INT 1
27790: PPUSH
27791: LD_VAR 0 2
27795: PPUSH
27796: CALL_OW 12
27800: ARRAY
27801: ST_TO_ADDR
// if Crawls ( un ) then
27802: LD_VAR 0 3
27806: PPUSH
27807: CALL_OW 318
27811: IFFALSE 27822
// ComWalk ( un ) ;
27813: LD_VAR 0 3
27817: PPUSH
27818: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_INT 8
27829: PPUSH
27830: CALL_OW 336
// end ; 4 :
27834: GO 27940
27836: LD_INT 4
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27918
27844: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27845: LD_ADDR_VAR 0 2
27849: PUSH
27850: LD_INT 22
27852: PUSH
27853: LD_OWVAR 2
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 30
27864: PUSH
27865: LD_INT 29
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PPUSH
27876: CALL_OW 69
27880: ST_TO_ADDR
// if not tmp then
27881: LD_VAR 0 2
27885: NOT
27886: IFFALSE 27890
// exit ;
27888: GO 27940
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27890: LD_VAR 0 2
27894: PUSH
27895: LD_INT 1
27897: ARRAY
27898: PPUSH
27899: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27903: LD_VAR 0 2
27907: PUSH
27908: LD_INT 1
27910: ARRAY
27911: PPUSH
27912: CALL_OW 65
// end ; 5 .. 7 :
27916: GO 27940
27918: LD_INT 5
27920: DOUBLE
27921: GREATEREQUAL
27922: IFFALSE 27930
27924: LD_INT 7
27926: DOUBLE
27927: LESSEQUAL
27928: IFTRUE 27932
27930: GO 27939
27932: POP
// StreamSibBomb ; end ;
27933: CALL 24177 0 0
27937: GO 27940
27939: POP
// end ;
27940: PPOPN 3
27942: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27943: LD_EXP 56
27947: PUSH
27948: LD_EXP 106
27952: AND
27953: IFFALSE 28109
27955: GO 27957
27957: DISABLE
27958: LD_INT 0
27960: PPUSH
27961: PPUSH
27962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27963: LD_ADDR_VAR 0 2
27967: PUSH
27968: LD_INT 81
27970: PUSH
27971: LD_OWVAR 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: LD_INT 21
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 21
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PPUSH
28012: CALL_OW 69
28016: ST_TO_ADDR
// if not tmp then
28017: LD_VAR 0 2
28021: NOT
28022: IFFALSE 28026
// exit ;
28024: GO 28109
// p := 0 ;
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: LD_INT 0
28033: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28034: LD_INT 35
28036: PPUSH
28037: CALL_OW 67
// p := p + 1 ;
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_VAR 0 3
28050: PUSH
28051: LD_INT 1
28053: PLUS
28054: ST_TO_ADDR
// for i in tmp do
28055: LD_ADDR_VAR 0 1
28059: PUSH
28060: LD_VAR 0 2
28064: PUSH
28065: FOR_IN
28066: IFFALSE 28097
// if GetLives ( i ) < 1000 then
28068: LD_VAR 0 1
28072: PPUSH
28073: CALL_OW 256
28077: PUSH
28078: LD_INT 1000
28080: LESS
28081: IFFALSE 28095
// SetLives ( i , 1000 ) ;
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 1000
28090: PPUSH
28091: CALL_OW 234
28095: GO 28065
28097: POP
28098: POP
// until p > 20 ;
28099: LD_VAR 0 3
28103: PUSH
28104: LD_INT 20
28106: GREATER
28107: IFFALSE 28034
// end ;
28109: PPOPN 3
28111: END
// every 0 0$1 trigger StreamModeActive and sTime do
28112: LD_EXP 56
28116: PUSH
28117: LD_EXP 107
28121: AND
28122: IFFALSE 28157
28124: GO 28126
28126: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28127: LD_INT 28
28129: PPUSH
28130: LD_OWVAR 2
28134: PPUSH
28135: LD_INT 2
28137: PPUSH
28138: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28142: LD_INT 30
28144: PPUSH
28145: LD_OWVAR 2
28149: PPUSH
28150: LD_INT 2
28152: PPUSH
28153: CALL_OW 322
// end ;
28157: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28158: LD_EXP 56
28162: PUSH
28163: LD_EXP 108
28167: AND
28168: IFFALSE 28289
28170: GO 28172
28172: DISABLE
28173: LD_INT 0
28175: PPUSH
28176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: LD_INT 22
28184: PUSH
28185: LD_OWVAR 2
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 21
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 23
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: PPUSH
28226: CALL_OW 69
28230: ST_TO_ADDR
// if not tmp then
28231: LD_VAR 0 2
28235: NOT
28236: IFFALSE 28240
// exit ;
28238: GO 28289
// for i in tmp do
28240: LD_ADDR_VAR 0 1
28244: PUSH
28245: LD_VAR 0 2
28249: PUSH
28250: FOR_IN
28251: IFFALSE 28287
// begin if Crawls ( i ) then
28253: LD_VAR 0 1
28257: PPUSH
28258: CALL_OW 318
28262: IFFALSE 28273
// ComWalk ( i ) ;
28264: LD_VAR 0 1
28268: PPUSH
28269: CALL_OW 138
// SetClass ( i , 2 ) ;
28273: LD_VAR 0 1
28277: PPUSH
28278: LD_INT 2
28280: PPUSH
28281: CALL_OW 336
// end ;
28285: GO 28250
28287: POP
28288: POP
// end ;
28289: PPOPN 2
28291: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28292: LD_EXP 56
28296: PUSH
28297: LD_EXP 109
28301: AND
28302: IFFALSE 28590
28304: GO 28306
28306: DISABLE
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28312: LD_OWVAR 2
28316: PPUSH
28317: LD_INT 9
28319: PPUSH
28320: LD_INT 1
28322: PPUSH
28323: LD_INT 1
28325: PPUSH
28326: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28330: LD_INT 9
28332: PPUSH
28333: LD_OWVAR 2
28337: PPUSH
28338: CALL_OW 343
// uc_side := 9 ;
28342: LD_ADDR_OWVAR 20
28346: PUSH
28347: LD_INT 9
28349: ST_TO_ADDR
// uc_nation := 2 ;
28350: LD_ADDR_OWVAR 21
28354: PUSH
28355: LD_INT 2
28357: ST_TO_ADDR
// hc_name := Dark Warrior ;
28358: LD_ADDR_OWVAR 26
28362: PUSH
28363: LD_STRING Dark Warrior
28365: ST_TO_ADDR
// hc_gallery :=  ;
28366: LD_ADDR_OWVAR 33
28370: PUSH
28371: LD_STRING 
28373: ST_TO_ADDR
// hc_noskilllimit := true ;
28374: LD_ADDR_OWVAR 76
28378: PUSH
28379: LD_INT 1
28381: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28382: LD_ADDR_OWVAR 31
28386: PUSH
28387: LD_INT 30
28389: PUSH
28390: LD_INT 30
28392: PUSH
28393: LD_INT 30
28395: PUSH
28396: LD_INT 30
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// un := CreateHuman ;
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: CALL_OW 44
28414: ST_TO_ADDR
// hc_noskilllimit := false ;
28415: LD_ADDR_OWVAR 76
28419: PUSH
28420: LD_INT 0
28422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28423: LD_VAR 0 3
28427: PPUSH
28428: LD_INT 1
28430: PPUSH
28431: CALL_OW 51
// ToLua ( playRanger() ) ;
28435: LD_STRING playRanger()
28437: PPUSH
28438: CALL_OW 559
// p := 0 ;
28442: LD_ADDR_VAR 0 2
28446: PUSH
28447: LD_INT 0
28449: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28450: LD_INT 35
28452: PPUSH
28453: CALL_OW 67
// p := p + 1 ;
28457: LD_ADDR_VAR 0 2
28461: PUSH
28462: LD_VAR 0 2
28466: PUSH
28467: LD_INT 1
28469: PLUS
28470: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28471: LD_VAR 0 3
28475: PPUSH
28476: CALL_OW 256
28480: PUSH
28481: LD_INT 1000
28483: LESS
28484: IFFALSE 28498
// SetLives ( un , 1000 ) ;
28486: LD_VAR 0 3
28490: PPUSH
28491: LD_INT 1000
28493: PPUSH
28494: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28498: LD_VAR 0 3
28502: PPUSH
28503: LD_INT 81
28505: PUSH
28506: LD_OWVAR 2
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 91
28517: PUSH
28518: LD_VAR 0 3
28522: PUSH
28523: LD_INT 30
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: PPUSH
28540: LD_VAR 0 3
28544: PPUSH
28545: CALL_OW 74
28549: PPUSH
28550: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28554: LD_VAR 0 2
28558: PUSH
28559: LD_INT 80
28561: GREATER
28562: PUSH
28563: LD_VAR 0 3
28567: PPUSH
28568: CALL_OW 301
28572: OR
28573: IFFALSE 28450
// if un then
28575: LD_VAR 0 3
28579: IFFALSE 28590
// RemoveUnit ( un ) ;
28581: LD_VAR 0 3
28585: PPUSH
28586: CALL_OW 64
// end ;
28590: PPOPN 3
28592: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28593: LD_EXP 110
28597: IFFALSE 28713
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
28606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28607: LD_ADDR_VAR 0 2
28611: PUSH
28612: LD_INT 81
28614: PUSH
28615: LD_OWVAR 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 21
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 69
28642: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28643: LD_STRING playComputer()
28645: PPUSH
28646: CALL_OW 559
// if not tmp then
28650: LD_VAR 0 2
28654: NOT
28655: IFFALSE 28659
// exit ;
28657: GO 28713
// for i in tmp do
28659: LD_ADDR_VAR 0 1
28663: PUSH
28664: LD_VAR 0 2
28668: PUSH
28669: FOR_IN
28670: IFFALSE 28711
// for j := 1 to 4 do
28672: LD_ADDR_VAR 0 3
28676: PUSH
28677: DOUBLE
28678: LD_INT 1
28680: DEC
28681: ST_TO_ADDR
28682: LD_INT 4
28684: PUSH
28685: FOR_TO
28686: IFFALSE 28707
// SetSkill ( i , j , 10 ) ;
28688: LD_VAR 0 1
28692: PPUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: LD_INT 10
28700: PPUSH
28701: CALL_OW 237
28705: GO 28685
28707: POP
28708: POP
28709: GO 28669
28711: POP
28712: POP
// end ;
28713: PPOPN 3
28715: END
// every 0 0$1 trigger s30 do var i , tmp ;
28716: LD_EXP 111
28720: IFFALSE 28789
28722: GO 28724
28724: DISABLE
28725: LD_INT 0
28727: PPUSH
28728: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28729: LD_ADDR_VAR 0 2
28733: PUSH
28734: LD_INT 22
28736: PUSH
28737: LD_OWVAR 2
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PPUSH
28746: CALL_OW 69
28750: ST_TO_ADDR
// if not tmp then
28751: LD_VAR 0 2
28755: NOT
28756: IFFALSE 28760
// exit ;
28758: GO 28789
// for i in tmp do
28760: LD_ADDR_VAR 0 1
28764: PUSH
28765: LD_VAR 0 2
28769: PUSH
28770: FOR_IN
28771: IFFALSE 28787
// SetLives ( i , 300 ) ;
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_INT 300
28780: PPUSH
28781: CALL_OW 234
28785: GO 28770
28787: POP
28788: POP
// end ;
28789: PPOPN 2
28791: END
// every 0 0$1 trigger s60 do var i , tmp ;
28792: LD_EXP 112
28796: IFFALSE 28865
28798: GO 28800
28800: DISABLE
28801: LD_INT 0
28803: PPUSH
28804: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28805: LD_ADDR_VAR 0 2
28809: PUSH
28810: LD_INT 22
28812: PUSH
28813: LD_OWVAR 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PPUSH
28822: CALL_OW 69
28826: ST_TO_ADDR
// if not tmp then
28827: LD_VAR 0 2
28831: NOT
28832: IFFALSE 28836
// exit ;
28834: GO 28865
// for i in tmp do
28836: LD_ADDR_VAR 0 1
28840: PUSH
28841: LD_VAR 0 2
28845: PUSH
28846: FOR_IN
28847: IFFALSE 28863
// SetLives ( i , 600 ) ;
28849: LD_VAR 0 1
28853: PPUSH
28854: LD_INT 600
28856: PPUSH
28857: CALL_OW 234
28861: GO 28846
28863: POP
28864: POP
// end ;
28865: PPOPN 2
28867: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28868: LD_INT 0
28870: PPUSH
// case cmd of 301 :
28871: LD_VAR 0 1
28875: PUSH
28876: LD_INT 301
28878: DOUBLE
28879: EQUAL
28880: IFTRUE 28884
28882: GO 28916
28884: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28885: LD_VAR 0 6
28889: PPUSH
28890: LD_VAR 0 7
28894: PPUSH
28895: LD_VAR 0 8
28899: PPUSH
28900: LD_VAR 0 4
28904: PPUSH
28905: LD_VAR 0 5
28909: PPUSH
28910: CALL 30117 0 5
28914: GO 29037
28916: LD_INT 302
28918: DOUBLE
28919: EQUAL
28920: IFTRUE 28924
28922: GO 28961
28924: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28925: LD_VAR 0 6
28929: PPUSH
28930: LD_VAR 0 7
28934: PPUSH
28935: LD_VAR 0 8
28939: PPUSH
28940: LD_VAR 0 9
28944: PPUSH
28945: LD_VAR 0 4
28949: PPUSH
28950: LD_VAR 0 5
28954: PPUSH
28955: CALL 30208 0 6
28959: GO 29037
28961: LD_INT 303
28963: DOUBLE
28964: EQUAL
28965: IFTRUE 28969
28967: GO 29006
28969: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28970: LD_VAR 0 6
28974: PPUSH
28975: LD_VAR 0 7
28979: PPUSH
28980: LD_VAR 0 8
28984: PPUSH
28985: LD_VAR 0 9
28989: PPUSH
28990: LD_VAR 0 4
28994: PPUSH
28995: LD_VAR 0 5
28999: PPUSH
29000: CALL 29042 0 6
29004: GO 29037
29006: LD_INT 304
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29036
29014: POP
// hHackTeleport ( unit , x , y ) ; end ;
29015: LD_VAR 0 2
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: LD_VAR 0 5
29029: PPUSH
29030: CALL 30801 0 3
29034: GO 29037
29036: POP
// end ;
29037: LD_VAR 0 12
29041: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29042: LD_INT 0
29044: PPUSH
29045: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29046: LD_VAR 0 1
29050: PUSH
29051: LD_INT 1
29053: LESS
29054: PUSH
29055: LD_VAR 0 1
29059: PUSH
29060: LD_INT 3
29062: GREATER
29063: OR
29064: PUSH
29065: LD_VAR 0 5
29069: PPUSH
29070: LD_VAR 0 6
29074: PPUSH
29075: CALL_OW 428
29079: OR
29080: IFFALSE 29084
// exit ;
29082: GO 29804
// uc_side := your_side ;
29084: LD_ADDR_OWVAR 20
29088: PUSH
29089: LD_OWVAR 2
29093: ST_TO_ADDR
// uc_nation := nation ;
29094: LD_ADDR_OWVAR 21
29098: PUSH
29099: LD_VAR 0 1
29103: ST_TO_ADDR
// bc_level = 1 ;
29104: LD_ADDR_OWVAR 43
29108: PUSH
29109: LD_INT 1
29111: ST_TO_ADDR
// case btype of 1 :
29112: LD_VAR 0 2
29116: PUSH
29117: LD_INT 1
29119: DOUBLE
29120: EQUAL
29121: IFTRUE 29125
29123: GO 29136
29125: POP
// bc_type := b_depot ; 2 :
29126: LD_ADDR_OWVAR 42
29130: PUSH
29131: LD_INT 0
29133: ST_TO_ADDR
29134: GO 29748
29136: LD_INT 2
29138: DOUBLE
29139: EQUAL
29140: IFTRUE 29144
29142: GO 29155
29144: POP
// bc_type := b_warehouse ; 3 :
29145: LD_ADDR_OWVAR 42
29149: PUSH
29150: LD_INT 1
29152: ST_TO_ADDR
29153: GO 29748
29155: LD_INT 3
29157: DOUBLE
29158: EQUAL
29159: IFTRUE 29163
29161: GO 29174
29163: POP
// bc_type := b_lab ; 4 .. 9 :
29164: LD_ADDR_OWVAR 42
29168: PUSH
29169: LD_INT 6
29171: ST_TO_ADDR
29172: GO 29748
29174: LD_INT 4
29176: DOUBLE
29177: GREATEREQUAL
29178: IFFALSE 29186
29180: LD_INT 9
29182: DOUBLE
29183: LESSEQUAL
29184: IFTRUE 29188
29186: GO 29240
29188: POP
// begin bc_type := b_lab_half ;
29189: LD_ADDR_OWVAR 42
29193: PUSH
29194: LD_INT 7
29196: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29197: LD_ADDR_OWVAR 44
29201: PUSH
29202: LD_INT 10
29204: PUSH
29205: LD_INT 11
29207: PUSH
29208: LD_INT 12
29210: PUSH
29211: LD_INT 15
29213: PUSH
29214: LD_INT 14
29216: PUSH
29217: LD_INT 13
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: PUSH
29228: LD_VAR 0 2
29232: PUSH
29233: LD_INT 3
29235: MINUS
29236: ARRAY
29237: ST_TO_ADDR
// end ; 10 .. 13 :
29238: GO 29748
29240: LD_INT 10
29242: DOUBLE
29243: GREATEREQUAL
29244: IFFALSE 29252
29246: LD_INT 13
29248: DOUBLE
29249: LESSEQUAL
29250: IFTRUE 29254
29252: GO 29331
29254: POP
// begin bc_type := b_lab_full ;
29255: LD_ADDR_OWVAR 42
29259: PUSH
29260: LD_INT 8
29262: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29263: LD_ADDR_OWVAR 44
29267: PUSH
29268: LD_INT 10
29270: PUSH
29271: LD_INT 12
29273: PUSH
29274: LD_INT 14
29276: PUSH
29277: LD_INT 13
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: PUSH
29286: LD_VAR 0 2
29290: PUSH
29291: LD_INT 9
29293: MINUS
29294: ARRAY
29295: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29296: LD_ADDR_OWVAR 45
29300: PUSH
29301: LD_INT 11
29303: PUSH
29304: LD_INT 15
29306: PUSH
29307: LD_INT 12
29309: PUSH
29310: LD_INT 15
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: PUSH
29319: LD_VAR 0 2
29323: PUSH
29324: LD_INT 9
29326: MINUS
29327: ARRAY
29328: ST_TO_ADDR
// end ; 14 :
29329: GO 29748
29331: LD_INT 14
29333: DOUBLE
29334: EQUAL
29335: IFTRUE 29339
29337: GO 29350
29339: POP
// bc_type := b_workshop ; 15 :
29340: LD_ADDR_OWVAR 42
29344: PUSH
29345: LD_INT 2
29347: ST_TO_ADDR
29348: GO 29748
29350: LD_INT 15
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 29369
29358: POP
// bc_type := b_factory ; 16 :
29359: LD_ADDR_OWVAR 42
29363: PUSH
29364: LD_INT 3
29366: ST_TO_ADDR
29367: GO 29748
29369: LD_INT 16
29371: DOUBLE
29372: EQUAL
29373: IFTRUE 29377
29375: GO 29388
29377: POP
// bc_type := b_ext_gun ; 17 :
29378: LD_ADDR_OWVAR 42
29382: PUSH
29383: LD_INT 17
29385: ST_TO_ADDR
29386: GO 29748
29388: LD_INT 17
29390: DOUBLE
29391: EQUAL
29392: IFTRUE 29396
29394: GO 29424
29396: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29397: LD_ADDR_OWVAR 42
29401: PUSH
29402: LD_INT 19
29404: PUSH
29405: LD_INT 23
29407: PUSH
29408: LD_INT 19
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: PUSH
29416: LD_VAR 0 1
29420: ARRAY
29421: ST_TO_ADDR
29422: GO 29748
29424: LD_INT 18
29426: DOUBLE
29427: EQUAL
29428: IFTRUE 29432
29430: GO 29443
29432: POP
// bc_type := b_ext_radar ; 19 :
29433: LD_ADDR_OWVAR 42
29437: PUSH
29438: LD_INT 20
29440: ST_TO_ADDR
29441: GO 29748
29443: LD_INT 19
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29451
29449: GO 29462
29451: POP
// bc_type := b_ext_radio ; 20 :
29452: LD_ADDR_OWVAR 42
29456: PUSH
29457: LD_INT 22
29459: ST_TO_ADDR
29460: GO 29748
29462: LD_INT 20
29464: DOUBLE
29465: EQUAL
29466: IFTRUE 29470
29468: GO 29481
29470: POP
// bc_type := b_ext_siberium ; 21 :
29471: LD_ADDR_OWVAR 42
29475: PUSH
29476: LD_INT 21
29478: ST_TO_ADDR
29479: GO 29748
29481: LD_INT 21
29483: DOUBLE
29484: EQUAL
29485: IFTRUE 29489
29487: GO 29500
29489: POP
// bc_type := b_ext_computer ; 22 :
29490: LD_ADDR_OWVAR 42
29494: PUSH
29495: LD_INT 24
29497: ST_TO_ADDR
29498: GO 29748
29500: LD_INT 22
29502: DOUBLE
29503: EQUAL
29504: IFTRUE 29508
29506: GO 29519
29508: POP
// bc_type := b_ext_track ; 23 :
29509: LD_ADDR_OWVAR 42
29513: PUSH
29514: LD_INT 16
29516: ST_TO_ADDR
29517: GO 29748
29519: LD_INT 23
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29538
29527: POP
// bc_type := b_ext_laser ; 24 :
29528: LD_ADDR_OWVAR 42
29532: PUSH
29533: LD_INT 25
29535: ST_TO_ADDR
29536: GO 29748
29538: LD_INT 24
29540: DOUBLE
29541: EQUAL
29542: IFTRUE 29546
29544: GO 29557
29546: POP
// bc_type := b_control_tower ; 25 :
29547: LD_ADDR_OWVAR 42
29551: PUSH
29552: LD_INT 36
29554: ST_TO_ADDR
29555: GO 29748
29557: LD_INT 25
29559: DOUBLE
29560: EQUAL
29561: IFTRUE 29565
29563: GO 29576
29565: POP
// bc_type := b_breastwork ; 26 :
29566: LD_ADDR_OWVAR 42
29570: PUSH
29571: LD_INT 31
29573: ST_TO_ADDR
29574: GO 29748
29576: LD_INT 26
29578: DOUBLE
29579: EQUAL
29580: IFTRUE 29584
29582: GO 29595
29584: POP
// bc_type := b_bunker ; 27 :
29585: LD_ADDR_OWVAR 42
29589: PUSH
29590: LD_INT 32
29592: ST_TO_ADDR
29593: GO 29748
29595: LD_INT 27
29597: DOUBLE
29598: EQUAL
29599: IFTRUE 29603
29601: GO 29614
29603: POP
// bc_type := b_turret ; 28 :
29604: LD_ADDR_OWVAR 42
29608: PUSH
29609: LD_INT 33
29611: ST_TO_ADDR
29612: GO 29748
29614: LD_INT 28
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29633
29622: POP
// bc_type := b_armoury ; 29 :
29623: LD_ADDR_OWVAR 42
29627: PUSH
29628: LD_INT 4
29630: ST_TO_ADDR
29631: GO 29748
29633: LD_INT 29
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29641
29639: GO 29652
29641: POP
// bc_type := b_barracks ; 30 :
29642: LD_ADDR_OWVAR 42
29646: PUSH
29647: LD_INT 5
29649: ST_TO_ADDR
29650: GO 29748
29652: LD_INT 30
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29671
29660: POP
// bc_type := b_solar_power ; 31 :
29661: LD_ADDR_OWVAR 42
29665: PUSH
29666: LD_INT 27
29668: ST_TO_ADDR
29669: GO 29748
29671: LD_INT 31
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29690
29679: POP
// bc_type := b_oil_power ; 32 :
29680: LD_ADDR_OWVAR 42
29684: PUSH
29685: LD_INT 26
29687: ST_TO_ADDR
29688: GO 29748
29690: LD_INT 32
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29709
29698: POP
// bc_type := b_siberite_power ; 33 :
29699: LD_ADDR_OWVAR 42
29703: PUSH
29704: LD_INT 28
29706: ST_TO_ADDR
29707: GO 29748
29709: LD_INT 33
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29728
29717: POP
// bc_type := b_oil_mine ; 34 :
29718: LD_ADDR_OWVAR 42
29722: PUSH
29723: LD_INT 29
29725: ST_TO_ADDR
29726: GO 29748
29728: LD_INT 34
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29747
29736: POP
// bc_type := b_siberite_mine ; end ;
29737: LD_ADDR_OWVAR 42
29741: PUSH
29742: LD_INT 30
29744: ST_TO_ADDR
29745: GO 29748
29747: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29748: LD_ADDR_VAR 0 8
29752: PUSH
29753: LD_VAR 0 5
29757: PPUSH
29758: LD_VAR 0 6
29762: PPUSH
29763: LD_VAR 0 3
29767: PPUSH
29768: CALL_OW 47
29772: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29773: LD_OWVAR 42
29777: PUSH
29778: LD_INT 32
29780: PUSH
29781: LD_INT 33
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: IN
29788: IFFALSE 29804
// PlaceWeaponTurret ( b , weapon ) ;
29790: LD_VAR 0 8
29794: PPUSH
29795: LD_VAR 0 4
29799: PPUSH
29800: CALL_OW 431
// end ;
29804: LD_VAR 0 7
29808: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29809: LD_INT 0
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29815: LD_ADDR_VAR 0 4
29819: PUSH
29820: LD_INT 22
29822: PUSH
29823: LD_OWVAR 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 30
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 30
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not tmp then
29869: LD_VAR 0 4
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 29937
// for i in tmp do
29878: LD_ADDR_VAR 0 2
29882: PUSH
29883: LD_VAR 0 4
29887: PUSH
29888: FOR_IN
29889: IFFALSE 29935
// for j = 1 to 3 do
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: DOUBLE
29897: LD_INT 1
29899: DEC
29900: ST_TO_ADDR
29901: LD_INT 3
29903: PUSH
29904: FOR_TO
29905: IFFALSE 29931
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29907: LD_VAR 0 2
29911: PPUSH
29912: CALL_OW 274
29916: PPUSH
29917: LD_VAR 0 3
29921: PPUSH
29922: LD_INT 99999
29924: PPUSH
29925: CALL_OW 277
29929: GO 29904
29931: POP
29932: POP
29933: GO 29888
29935: POP
29936: POP
// end ;
29937: LD_VAR 0 1
29941: RET
// export function hHackSetLevel10 ; var i , j ; begin
29942: LD_INT 0
29944: PPUSH
29945: PPUSH
29946: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29947: LD_ADDR_VAR 0 2
29951: PUSH
29952: LD_INT 21
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PPUSH
29962: CALL_OW 69
29966: PUSH
29967: FOR_IN
29968: IFFALSE 30020
// if IsSelected ( i ) then
29970: LD_VAR 0 2
29974: PPUSH
29975: CALL_OW 306
29979: IFFALSE 30018
// begin for j := 1 to 4 do
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: DOUBLE
29987: LD_INT 1
29989: DEC
29990: ST_TO_ADDR
29991: LD_INT 4
29993: PUSH
29994: FOR_TO
29995: IFFALSE 30016
// SetSkill ( i , j , 10 ) ;
29997: LD_VAR 0 2
30001: PPUSH
30002: LD_VAR 0 3
30006: PPUSH
30007: LD_INT 10
30009: PPUSH
30010: CALL_OW 237
30014: GO 29994
30016: POP
30017: POP
// end ;
30018: GO 29967
30020: POP
30021: POP
// end ;
30022: LD_VAR 0 1
30026: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30027: LD_INT 0
30029: PPUSH
30030: PPUSH
30031: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30032: LD_ADDR_VAR 0 2
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_OWVAR 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 21
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PPUSH
30063: CALL_OW 69
30067: PUSH
30068: FOR_IN
30069: IFFALSE 30110
// begin for j := 1 to 4 do
30071: LD_ADDR_VAR 0 3
30075: PUSH
30076: DOUBLE
30077: LD_INT 1
30079: DEC
30080: ST_TO_ADDR
30081: LD_INT 4
30083: PUSH
30084: FOR_TO
30085: IFFALSE 30106
// SetSkill ( i , j , 10 ) ;
30087: LD_VAR 0 2
30091: PPUSH
30092: LD_VAR 0 3
30096: PPUSH
30097: LD_INT 10
30099: PPUSH
30100: CALL_OW 237
30104: GO 30084
30106: POP
30107: POP
// end ;
30108: GO 30068
30110: POP
30111: POP
// end ;
30112: LD_VAR 0 1
30116: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30117: LD_INT 0
30119: PPUSH
// uc_side := your_side ;
30120: LD_ADDR_OWVAR 20
30124: PUSH
30125: LD_OWVAR 2
30129: ST_TO_ADDR
// uc_nation := nation ;
30130: LD_ADDR_OWVAR 21
30134: PUSH
30135: LD_VAR 0 1
30139: ST_TO_ADDR
// InitHc ;
30140: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30144: LD_INT 0
30146: PPUSH
30147: LD_VAR 0 2
30151: PPUSH
30152: LD_VAR 0 3
30156: PPUSH
30157: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30161: LD_VAR 0 4
30165: PPUSH
30166: LD_VAR 0 5
30170: PPUSH
30171: CALL_OW 428
30175: PUSH
30176: LD_INT 0
30178: EQUAL
30179: IFFALSE 30203
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30181: CALL_OW 44
30185: PPUSH
30186: LD_VAR 0 4
30190: PPUSH
30191: LD_VAR 0 5
30195: PPUSH
30196: LD_INT 1
30198: PPUSH
30199: CALL_OW 48
// end ;
30203: LD_VAR 0 6
30207: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30208: LD_INT 0
30210: PPUSH
30211: PPUSH
// uc_side := your_side ;
30212: LD_ADDR_OWVAR 20
30216: PUSH
30217: LD_OWVAR 2
30221: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30222: LD_VAR 0 1
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: LD_INT 4
30238: PUSH
30239: LD_INT 5
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: IN
30249: IFFALSE 30261
// uc_nation := nation_american else
30251: LD_ADDR_OWVAR 21
30255: PUSH
30256: LD_INT 1
30258: ST_TO_ADDR
30259: GO 30304
// if chassis in [ 11 , 12 , 13 , 14 ] then
30261: LD_VAR 0 1
30265: PUSH
30266: LD_INT 11
30268: PUSH
30269: LD_INT 12
30271: PUSH
30272: LD_INT 13
30274: PUSH
30275: LD_INT 14
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: IN
30284: IFFALSE 30296
// uc_nation := nation_arabian else
30286: LD_ADDR_OWVAR 21
30290: PUSH
30291: LD_INT 2
30293: ST_TO_ADDR
30294: GO 30304
// uc_nation := nation_russian ;
30296: LD_ADDR_OWVAR 21
30300: PUSH
30301: LD_INT 3
30303: ST_TO_ADDR
// vc_chassis := chassis ;
30304: LD_ADDR_OWVAR 37
30308: PUSH
30309: LD_VAR 0 1
30313: ST_TO_ADDR
// vc_engine := engine ;
30314: LD_ADDR_OWVAR 39
30318: PUSH
30319: LD_VAR 0 2
30323: ST_TO_ADDR
// vc_control := control ;
30324: LD_ADDR_OWVAR 38
30328: PUSH
30329: LD_VAR 0 3
30333: ST_TO_ADDR
// vc_weapon := weapon ;
30334: LD_ADDR_OWVAR 40
30338: PUSH
30339: LD_VAR 0 4
30343: ST_TO_ADDR
// un := CreateVehicle ;
30344: LD_ADDR_VAR 0 8
30348: PUSH
30349: CALL_OW 45
30353: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30354: LD_VAR 0 8
30358: PPUSH
30359: LD_INT 0
30361: PPUSH
30362: LD_INT 5
30364: PPUSH
30365: CALL_OW 12
30369: PPUSH
30370: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30374: LD_VAR 0 8
30378: PPUSH
30379: LD_VAR 0 5
30383: PPUSH
30384: LD_VAR 0 6
30388: PPUSH
30389: LD_INT 1
30391: PPUSH
30392: CALL_OW 48
// end ;
30396: LD_VAR 0 7
30400: RET
// export hInvincible ; every 1 do
30401: GO 30403
30403: DISABLE
// hInvincible := [ ] ;
30404: LD_ADDR_EXP 113
30408: PUSH
30409: EMPTY
30410: ST_TO_ADDR
30411: END
// every 10 do var i ;
30412: GO 30414
30414: DISABLE
30415: LD_INT 0
30417: PPUSH
// begin enable ;
30418: ENABLE
// if not hInvincible then
30419: LD_EXP 113
30423: NOT
30424: IFFALSE 30428
// exit ;
30426: GO 30472
// for i in hInvincible do
30428: LD_ADDR_VAR 0 1
30432: PUSH
30433: LD_EXP 113
30437: PUSH
30438: FOR_IN
30439: IFFALSE 30470
// if GetLives ( i ) < 1000 then
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 256
30450: PUSH
30451: LD_INT 1000
30453: LESS
30454: IFFALSE 30468
// SetLives ( i , 1000 ) ;
30456: LD_VAR 0 1
30460: PPUSH
30461: LD_INT 1000
30463: PPUSH
30464: CALL_OW 234
30468: GO 30438
30470: POP
30471: POP
// end ;
30472: PPOPN 1
30474: END
// export function hHackInvincible ; var i ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30479: LD_ADDR_VAR 0 2
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: LD_INT 21
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: PPUSH
30512: CALL_OW 69
30516: PUSH
30517: FOR_IN
30518: IFFALSE 30579
// if IsSelected ( i ) then
30520: LD_VAR 0 2
30524: PPUSH
30525: CALL_OW 306
30529: IFFALSE 30577
// begin if i in hInvincible then
30531: LD_VAR 0 2
30535: PUSH
30536: LD_EXP 113
30540: IN
30541: IFFALSE 30561
// hInvincible := hInvincible diff i else
30543: LD_ADDR_EXP 113
30547: PUSH
30548: LD_EXP 113
30552: PUSH
30553: LD_VAR 0 2
30557: DIFF
30558: ST_TO_ADDR
30559: GO 30577
// hInvincible := hInvincible union i ;
30561: LD_ADDR_EXP 113
30565: PUSH
30566: LD_EXP 113
30570: PUSH
30571: LD_VAR 0 2
30575: UNION
30576: ST_TO_ADDR
// end ;
30577: GO 30517
30579: POP
30580: POP
// end ;
30581: LD_VAR 0 1
30585: RET
// export function hHackInvisible ; var i , j ; begin
30586: LD_INT 0
30588: PPUSH
30589: PPUSH
30590: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30591: LD_ADDR_VAR 0 2
30595: PUSH
30596: LD_INT 21
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: PUSH
30611: FOR_IN
30612: IFFALSE 30636
// if IsSelected ( i ) then
30614: LD_VAR 0 2
30618: PPUSH
30619: CALL_OW 306
30623: IFFALSE 30634
// ComForceInvisible ( i ) ;
30625: LD_VAR 0 2
30629: PPUSH
30630: CALL_OW 496
30634: GO 30611
30636: POP
30637: POP
// end ;
30638: LD_VAR 0 1
30642: RET
// export function hHackChangeYourSide ; begin
30643: LD_INT 0
30645: PPUSH
// if your_side = 8 then
30646: LD_OWVAR 2
30650: PUSH
30651: LD_INT 8
30653: EQUAL
30654: IFFALSE 30666
// your_side := 0 else
30656: LD_ADDR_OWVAR 2
30660: PUSH
30661: LD_INT 0
30663: ST_TO_ADDR
30664: GO 30680
// your_side := your_side + 1 ;
30666: LD_ADDR_OWVAR 2
30670: PUSH
30671: LD_OWVAR 2
30675: PUSH
30676: LD_INT 1
30678: PLUS
30679: ST_TO_ADDR
// end ;
30680: LD_VAR 0 1
30684: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30685: LD_INT 0
30687: PPUSH
30688: PPUSH
30689: PPUSH
// for i in all_units do
30690: LD_ADDR_VAR 0 2
30694: PUSH
30695: LD_OWVAR 3
30699: PUSH
30700: FOR_IN
30701: IFFALSE 30779
// if IsSelected ( i ) then
30703: LD_VAR 0 2
30707: PPUSH
30708: CALL_OW 306
30712: IFFALSE 30777
// begin j := GetSide ( i ) ;
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_VAR 0 2
30723: PPUSH
30724: CALL_OW 255
30728: ST_TO_ADDR
// if j = 8 then
30729: LD_VAR 0 3
30733: PUSH
30734: LD_INT 8
30736: EQUAL
30737: IFFALSE 30749
// j := 0 else
30739: LD_ADDR_VAR 0 3
30743: PUSH
30744: LD_INT 0
30746: ST_TO_ADDR
30747: GO 30763
// j := j + 1 ;
30749: LD_ADDR_VAR 0 3
30753: PUSH
30754: LD_VAR 0 3
30758: PUSH
30759: LD_INT 1
30761: PLUS
30762: ST_TO_ADDR
// SetSide ( i , j ) ;
30763: LD_VAR 0 2
30767: PPUSH
30768: LD_VAR 0 3
30772: PPUSH
30773: CALL_OW 235
// end ;
30777: GO 30700
30779: POP
30780: POP
// end ;
30781: LD_VAR 0 1
30785: RET
// export function hHackFog ; begin
30786: LD_INT 0
30788: PPUSH
// FogOff ( true ) ;
30789: LD_INT 1
30791: PPUSH
30792: CALL_OW 344
// end ;
30796: LD_VAR 0 1
30800: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30801: LD_INT 0
30803: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: LD_INT 1
30821: PPUSH
30822: LD_INT 1
30824: PPUSH
30825: CALL_OW 483
// CenterOnXY ( x , y ) ;
30829: LD_VAR 0 2
30833: PPUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: CALL_OW 84
// end ; end_of_file
30843: LD_VAR 0 4
30847: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30848: LD_INT 0
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30854: LD_VAR 0 1
30858: PPUSH
30859: CALL_OW 264
30863: PUSH
30864: LD_EXP 40
30868: EQUAL
30869: IFFALSE 30941
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30871: LD_INT 68
30873: PPUSH
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL_OW 255
30883: PPUSH
30884: CALL_OW 321
30888: PUSH
30889: LD_INT 2
30891: EQUAL
30892: IFFALSE 30904
// eff := 70 else
30894: LD_ADDR_VAR 0 4
30898: PUSH
30899: LD_INT 70
30901: ST_TO_ADDR
30902: GO 30912
// eff := 30 ;
30904: LD_ADDR_VAR 0 4
30908: PUSH
30909: LD_INT 30
30911: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30912: LD_VAR 0 1
30916: PPUSH
30917: CALL_OW 250
30921: PPUSH
30922: LD_VAR 0 1
30926: PPUSH
30927: CALL_OW 251
30931: PPUSH
30932: LD_VAR 0 4
30936: PPUSH
30937: CALL_OW 495
// end ; end ;
30941: LD_VAR 0 2
30945: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30946: LD_INT 0
30948: PPUSH
// end ;
30949: LD_VAR 0 4
30953: RET
// export function SOS_Command ( cmd ) ; begin
30954: LD_INT 0
30956: PPUSH
// end ;
30957: LD_VAR 0 2
30961: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30962: LD_INT 0
30964: PPUSH
// end ;
30965: LD_VAR 0 6
30969: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30970: LD_INT 0
30972: PPUSH
30973: PPUSH
// if not vehicle or not factory then
30974: LD_VAR 0 1
30978: NOT
30979: PUSH
30980: LD_VAR 0 2
30984: NOT
30985: OR
30986: IFFALSE 30990
// exit ;
30988: GO 31221
// if factoryWaypoints >= factory then
30990: LD_EXP 114
30994: PUSH
30995: LD_VAR 0 2
30999: GREATEREQUAL
31000: IFFALSE 31221
// if factoryWaypoints [ factory ] then
31002: LD_EXP 114
31006: PUSH
31007: LD_VAR 0 2
31011: ARRAY
31012: IFFALSE 31221
// begin if GetControl ( vehicle ) = control_manual then
31014: LD_VAR 0 1
31018: PPUSH
31019: CALL_OW 263
31023: PUSH
31024: LD_INT 1
31026: EQUAL
31027: IFFALSE 31108
// begin driver := IsDrivenBy ( vehicle ) ;
31029: LD_ADDR_VAR 0 4
31033: PUSH
31034: LD_VAR 0 1
31038: PPUSH
31039: CALL_OW 311
31043: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31044: LD_VAR 0 4
31048: PPUSH
31049: LD_EXP 114
31053: PUSH
31054: LD_VAR 0 2
31058: ARRAY
31059: PUSH
31060: LD_INT 3
31062: ARRAY
31063: PPUSH
31064: LD_EXP 114
31068: PUSH
31069: LD_VAR 0 2
31073: ARRAY
31074: PUSH
31075: LD_INT 4
31077: ARRAY
31078: PPUSH
31079: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31083: LD_VAR 0 4
31087: PPUSH
31088: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31092: LD_VAR 0 4
31096: PPUSH
31097: LD_VAR 0 2
31101: PPUSH
31102: CALL_OW 180
// end else
31106: GO 31221
// if GetControl ( vehicle ) = control_remote then
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL_OW 263
31117: PUSH
31118: LD_INT 2
31120: EQUAL
31121: IFFALSE 31182
// begin wait ( 0 0$2 ) ;
31123: LD_INT 70
31125: PPUSH
31126: CALL_OW 67
// if Connect ( vehicle ) then
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL 43445 0 1
31139: IFFALSE 31180
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31141: LD_VAR 0 1
31145: PPUSH
31146: LD_EXP 114
31150: PUSH
31151: LD_VAR 0 2
31155: ARRAY
31156: PUSH
31157: LD_INT 3
31159: ARRAY
31160: PPUSH
31161: LD_EXP 114
31165: PUSH
31166: LD_VAR 0 2
31170: ARRAY
31171: PUSH
31172: LD_INT 4
31174: ARRAY
31175: PPUSH
31176: CALL_OW 171
// end else
31180: GO 31221
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31182: LD_VAR 0 1
31186: PPUSH
31187: LD_EXP 114
31191: PUSH
31192: LD_VAR 0 2
31196: ARRAY
31197: PUSH
31198: LD_INT 3
31200: ARRAY
31201: PPUSH
31202: LD_EXP 114
31206: PUSH
31207: LD_VAR 0 2
31211: ARRAY
31212: PUSH
31213: LD_INT 4
31215: ARRAY
31216: PPUSH
31217: CALL_OW 171
// end ; end ;
31221: LD_VAR 0 3
31225: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31226: LD_INT 0
31228: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31229: LD_VAR 0 1
31233: PUSH
31234: LD_INT 250
31236: EQUAL
31237: PUSH
31238: LD_VAR 0 2
31242: PPUSH
31243: CALL_OW 264
31247: PUSH
31248: LD_EXP 43
31252: EQUAL
31253: AND
31254: IFFALSE 31275
// MinerPlaceMine ( unit , x , y ) ;
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 4
31265: PPUSH
31266: LD_VAR 0 5
31270: PPUSH
31271: CALL 34003 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31275: LD_VAR 0 1
31279: PUSH
31280: LD_INT 251
31282: EQUAL
31283: PUSH
31284: LD_VAR 0 2
31288: PPUSH
31289: CALL_OW 264
31293: PUSH
31294: LD_EXP 43
31298: EQUAL
31299: AND
31300: IFFALSE 31321
// MinerDetonateMine ( unit , x , y ) ;
31302: LD_VAR 0 2
31306: PPUSH
31307: LD_VAR 0 4
31311: PPUSH
31312: LD_VAR 0 5
31316: PPUSH
31317: CALL 34280 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31321: LD_VAR 0 1
31325: PUSH
31326: LD_INT 252
31328: EQUAL
31329: PUSH
31330: LD_VAR 0 2
31334: PPUSH
31335: CALL_OW 264
31339: PUSH
31340: LD_EXP 43
31344: EQUAL
31345: AND
31346: IFFALSE 31367
// MinerCreateMinefield ( unit , x , y ) ;
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 4
31357: PPUSH
31358: LD_VAR 0 5
31362: PPUSH
31363: CALL 34697 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31367: LD_VAR 0 1
31371: PUSH
31372: LD_INT 253
31374: EQUAL
31375: PUSH
31376: LD_VAR 0 2
31380: PPUSH
31381: CALL_OW 257
31385: PUSH
31386: LD_INT 5
31388: EQUAL
31389: AND
31390: IFFALSE 31411
// ComBinocular ( unit , x , y ) ;
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 4
31401: PPUSH
31402: LD_VAR 0 5
31406: PPUSH
31407: CALL 35068 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31411: LD_VAR 0 1
31415: PUSH
31416: LD_INT 254
31418: EQUAL
31419: PUSH
31420: LD_VAR 0 2
31424: PPUSH
31425: CALL_OW 264
31429: PUSH
31430: LD_EXP 38
31434: EQUAL
31435: AND
31436: PUSH
31437: LD_VAR 0 3
31441: PPUSH
31442: CALL_OW 263
31446: PUSH
31447: LD_INT 3
31449: EQUAL
31450: AND
31451: IFFALSE 31467
// HackDestroyVehicle ( unit , selectedUnit ) ;
31453: LD_VAR 0 2
31457: PPUSH
31458: LD_VAR 0 3
31462: PPUSH
31463: CALL 33363 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31467: LD_VAR 0 1
31471: PUSH
31472: LD_INT 255
31474: EQUAL
31475: PUSH
31476: LD_VAR 0 2
31480: PPUSH
31481: CALL_OW 264
31485: PUSH
31486: LD_INT 14
31488: PUSH
31489: LD_INT 53
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: IN
31496: AND
31497: PUSH
31498: LD_VAR 0 4
31502: PPUSH
31503: LD_VAR 0 5
31507: PPUSH
31508: CALL_OW 488
31512: AND
31513: IFFALSE 31537
// CutTreeXYR ( unit , x , y , 12 ) ;
31515: LD_VAR 0 2
31519: PPUSH
31520: LD_VAR 0 4
31524: PPUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: LD_INT 12
31532: PPUSH
31533: CALL 31929 0 4
// if cmd = 256 then
31537: LD_VAR 0 1
31541: PUSH
31542: LD_INT 256
31544: EQUAL
31545: IFFALSE 31566
// SetFactoryWaypoint ( unit , x , y ) ;
31547: LD_VAR 0 2
31551: PPUSH
31552: LD_VAR 0 4
31556: PPUSH
31557: LD_VAR 0 5
31561: PPUSH
31562: CALL 31571 0 3
// end ;
31566: LD_VAR 0 6
31570: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31571: LD_INT 0
31573: PPUSH
31574: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31575: LD_VAR 0 1
31579: NOT
31580: PUSH
31581: LD_VAR 0 2
31585: PPUSH
31586: LD_VAR 0 3
31590: PPUSH
31591: CALL_OW 488
31595: NOT
31596: OR
31597: PUSH
31598: LD_VAR 0 1
31602: PPUSH
31603: CALL_OW 266
31607: PUSH
31608: LD_INT 3
31610: NONEQUAL
31611: PUSH
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 247
31621: PUSH
31622: LD_INT 1
31624: EQUAL
31625: NOT
31626: AND
31627: OR
31628: IFFALSE 31632
// exit ;
31630: GO 31781
// if GetType ( factory ) = unit_human then
31632: LD_VAR 0 1
31636: PPUSH
31637: CALL_OW 247
31641: PUSH
31642: LD_INT 1
31644: EQUAL
31645: IFFALSE 31662
// factory := IsInUnit ( factory ) ;
31647: LD_ADDR_VAR 0 1
31651: PUSH
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL_OW 310
31661: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31662: LD_VAR 0 1
31666: PPUSH
31667: CALL_OW 266
31671: PUSH
31672: LD_INT 3
31674: NONEQUAL
31675: IFFALSE 31679
// exit ;
31677: GO 31781
// if HexInfo ( x , y ) = factory then
31679: LD_VAR 0 2
31683: PPUSH
31684: LD_VAR 0 3
31688: PPUSH
31689: CALL_OW 428
31693: PUSH
31694: LD_VAR 0 1
31698: EQUAL
31699: IFFALSE 31726
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31701: LD_ADDR_EXP 114
31705: PUSH
31706: LD_EXP 114
31710: PPUSH
31711: LD_VAR 0 1
31715: PPUSH
31716: LD_INT 0
31718: PPUSH
31719: CALL_OW 1
31723: ST_TO_ADDR
31724: GO 31777
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31726: LD_ADDR_EXP 114
31730: PUSH
31731: LD_EXP 114
31735: PPUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: LD_VAR 0 1
31745: PPUSH
31746: CALL_OW 255
31750: PUSH
31751: LD_VAR 0 1
31755: PUSH
31756: LD_VAR 0 2
31760: PUSH
31761: LD_VAR 0 3
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: PPUSH
31772: CALL_OW 1
31776: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31777: CALL 31786 0 0
// end ;
31781: LD_VAR 0 4
31785: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
31786: LD_INT 0
31788: PPUSH
31789: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31790: LD_STRING resetFactoryWaypoint();
31792: PPUSH
31793: CALL_OW 559
// if factoryWaypoints then
31797: LD_EXP 114
31801: IFFALSE 31924
// begin for i := 1 to factoryWaypoints do
31803: LD_ADDR_VAR 0 2
31807: PUSH
31808: DOUBLE
31809: LD_INT 1
31811: DEC
31812: ST_TO_ADDR
31813: LD_EXP 114
31817: PUSH
31818: FOR_TO
31819: IFFALSE 31922
// if factoryWaypoints [ i ] then
31821: LD_EXP 114
31825: PUSH
31826: LD_VAR 0 2
31830: ARRAY
31831: IFFALSE 31920
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
31833: LD_STRING setFactoryWaypointXY(
31835: PUSH
31836: LD_EXP 114
31840: PUSH
31841: LD_VAR 0 2
31845: ARRAY
31846: PUSH
31847: LD_INT 1
31849: ARRAY
31850: STR
31851: PUSH
31852: LD_STRING ,
31854: STR
31855: PUSH
31856: LD_EXP 114
31860: PUSH
31861: LD_VAR 0 2
31865: ARRAY
31866: PUSH
31867: LD_INT 2
31869: ARRAY
31870: STR
31871: PUSH
31872: LD_STRING ,
31874: STR
31875: PUSH
31876: LD_EXP 114
31880: PUSH
31881: LD_VAR 0 2
31885: ARRAY
31886: PUSH
31887: LD_INT 3
31889: ARRAY
31890: STR
31891: PUSH
31892: LD_STRING ,
31894: STR
31895: PUSH
31896: LD_EXP 114
31900: PUSH
31901: LD_VAR 0 2
31905: ARRAY
31906: PUSH
31907: LD_INT 4
31909: ARRAY
31910: STR
31911: PUSH
31912: LD_STRING )
31914: STR
31915: PPUSH
31916: CALL_OW 559
31920: GO 31818
31922: POP
31923: POP
// end ; end ;
31924: LD_VAR 0 1
31928: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31929: LD_INT 0
31931: PPUSH
31932: PPUSH
31933: PPUSH
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31940: LD_VAR 0 1
31944: NOT
31945: PUSH
31946: LD_VAR 0 2
31950: PPUSH
31951: LD_VAR 0 3
31955: PPUSH
31956: CALL_OW 488
31960: NOT
31961: OR
31962: PUSH
31963: LD_VAR 0 4
31967: NOT
31968: OR
31969: IFFALSE 31973
// exit ;
31971: GO 32313
// list := [ ] ;
31973: LD_ADDR_VAR 0 13
31977: PUSH
31978: EMPTY
31979: ST_TO_ADDR
// if x - r < 0 then
31980: LD_VAR 0 2
31984: PUSH
31985: LD_VAR 0 4
31989: MINUS
31990: PUSH
31991: LD_INT 0
31993: LESS
31994: IFFALSE 32006
// min_x := 0 else
31996: LD_ADDR_VAR 0 7
32000: PUSH
32001: LD_INT 0
32003: ST_TO_ADDR
32004: GO 32022
// min_x := x - r ;
32006: LD_ADDR_VAR 0 7
32010: PUSH
32011: LD_VAR 0 2
32015: PUSH
32016: LD_VAR 0 4
32020: MINUS
32021: ST_TO_ADDR
// if y - r < 0 then
32022: LD_VAR 0 3
32026: PUSH
32027: LD_VAR 0 4
32031: MINUS
32032: PUSH
32033: LD_INT 0
32035: LESS
32036: IFFALSE 32048
// min_y := 0 else
32038: LD_ADDR_VAR 0 8
32042: PUSH
32043: LD_INT 0
32045: ST_TO_ADDR
32046: GO 32064
// min_y := y - r ;
32048: LD_ADDR_VAR 0 8
32052: PUSH
32053: LD_VAR 0 3
32057: PUSH
32058: LD_VAR 0 4
32062: MINUS
32063: ST_TO_ADDR
// max_x := x + r ;
32064: LD_ADDR_VAR 0 9
32068: PUSH
32069: LD_VAR 0 2
32073: PUSH
32074: LD_VAR 0 4
32078: PLUS
32079: ST_TO_ADDR
// max_y := y + r ;
32080: LD_ADDR_VAR 0 10
32084: PUSH
32085: LD_VAR 0 3
32089: PUSH
32090: LD_VAR 0 4
32094: PLUS
32095: ST_TO_ADDR
// for _x = min_x to max_x do
32096: LD_ADDR_VAR 0 11
32100: PUSH
32101: DOUBLE
32102: LD_VAR 0 7
32106: DEC
32107: ST_TO_ADDR
32108: LD_VAR 0 9
32112: PUSH
32113: FOR_TO
32114: IFFALSE 32231
// for _y = min_y to max_y do
32116: LD_ADDR_VAR 0 12
32120: PUSH
32121: DOUBLE
32122: LD_VAR 0 8
32126: DEC
32127: ST_TO_ADDR
32128: LD_VAR 0 10
32132: PUSH
32133: FOR_TO
32134: IFFALSE 32227
// begin if not ValidHex ( _x , _y ) then
32136: LD_VAR 0 11
32140: PPUSH
32141: LD_VAR 0 12
32145: PPUSH
32146: CALL_OW 488
32150: NOT
32151: IFFALSE 32155
// continue ;
32153: GO 32133
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32155: LD_VAR 0 11
32159: PPUSH
32160: LD_VAR 0 12
32164: PPUSH
32165: CALL_OW 351
32169: PUSH
32170: LD_VAR 0 11
32174: PPUSH
32175: LD_VAR 0 12
32179: PPUSH
32180: CALL_OW 554
32184: AND
32185: IFFALSE 32225
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32187: LD_ADDR_VAR 0 13
32191: PUSH
32192: LD_VAR 0 13
32196: PPUSH
32197: LD_VAR 0 13
32201: PUSH
32202: LD_INT 1
32204: PLUS
32205: PPUSH
32206: LD_VAR 0 11
32210: PUSH
32211: LD_VAR 0 12
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PPUSH
32220: CALL_OW 2
32224: ST_TO_ADDR
// end ;
32225: GO 32133
32227: POP
32228: POP
32229: GO 32113
32231: POP
32232: POP
// if not list then
32233: LD_VAR 0 13
32237: NOT
32238: IFFALSE 32242
// exit ;
32240: GO 32313
// for i in list do
32242: LD_ADDR_VAR 0 6
32246: PUSH
32247: LD_VAR 0 13
32251: PUSH
32252: FOR_IN
32253: IFFALSE 32311
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32255: LD_VAR 0 1
32259: PPUSH
32260: LD_STRING M
32262: PUSH
32263: LD_VAR 0 6
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: PUSH
32272: LD_VAR 0 6
32276: PUSH
32277: LD_INT 2
32279: ARRAY
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: PUSH
32302: EMPTY
32303: LIST
32304: PPUSH
32305: CALL_OW 447
32309: GO 32252
32311: POP
32312: POP
// end ;
32313: LD_VAR 0 5
32317: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32318: LD_EXP 115
32322: NOT
32323: IFFALSE 32373
32325: GO 32327
32327: DISABLE
// begin initHack := true ;
32328: LD_ADDR_EXP 115
32332: PUSH
32333: LD_INT 1
32335: ST_TO_ADDR
// hackTanks := [ ] ;
32336: LD_ADDR_EXP 116
32340: PUSH
32341: EMPTY
32342: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32343: LD_ADDR_EXP 117
32347: PUSH
32348: EMPTY
32349: ST_TO_ADDR
// hackLimit := 3 ;
32350: LD_ADDR_EXP 118
32354: PUSH
32355: LD_INT 3
32357: ST_TO_ADDR
// hackDist := 12 ;
32358: LD_ADDR_EXP 119
32362: PUSH
32363: LD_INT 12
32365: ST_TO_ADDR
// hackCounter := [ ] ;
32366: LD_ADDR_EXP 120
32370: PUSH
32371: EMPTY
32372: ST_TO_ADDR
// end ;
32373: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32374: LD_EXP 115
32378: PUSH
32379: LD_INT 34
32381: PUSH
32382: LD_EXP 38
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PPUSH
32391: CALL_OW 69
32395: AND
32396: IFFALSE 32651
32398: GO 32400
32400: DISABLE
32401: LD_INT 0
32403: PPUSH
32404: PPUSH
// begin enable ;
32405: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32406: LD_ADDR_VAR 0 1
32410: PUSH
32411: LD_INT 34
32413: PUSH
32414: LD_EXP 38
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 69
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32649
// begin if not i in hackTanks then
32431: LD_VAR 0 1
32435: PUSH
32436: LD_EXP 116
32440: IN
32441: NOT
32442: IFFALSE 32525
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32444: LD_ADDR_EXP 116
32448: PUSH
32449: LD_EXP 116
32453: PPUSH
32454: LD_EXP 116
32458: PUSH
32459: LD_INT 1
32461: PLUS
32462: PPUSH
32463: LD_VAR 0 1
32467: PPUSH
32468: CALL_OW 1
32472: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32473: LD_ADDR_EXP 117
32477: PUSH
32478: LD_EXP 117
32482: PPUSH
32483: LD_EXP 117
32487: PUSH
32488: LD_INT 1
32490: PLUS
32491: PPUSH
32492: EMPTY
32493: PPUSH
32494: CALL_OW 1
32498: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32499: LD_ADDR_EXP 120
32503: PUSH
32504: LD_EXP 120
32508: PPUSH
32509: LD_EXP 120
32513: PUSH
32514: LD_INT 1
32516: PLUS
32517: PPUSH
32518: EMPTY
32519: PPUSH
32520: CALL_OW 1
32524: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32525: LD_VAR 0 1
32529: PPUSH
32530: CALL_OW 302
32534: NOT
32535: IFFALSE 32548
// begin HackUnlinkAll ( i ) ;
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL 32654 0 1
// continue ;
32546: GO 32428
// end ; HackCheckCapturedStatus ( i ) ;
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL 33097 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32557: LD_ADDR_VAR 0 2
32561: PUSH
32562: LD_INT 81
32564: PUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 255
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 33
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 91
32591: PUSH
32592: LD_VAR 0 1
32596: PUSH
32597: LD_EXP 119
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 50
32609: PUSH
32610: EMPTY
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: PPUSH
32619: CALL_OW 69
32623: ST_TO_ADDR
// if not tmp then
32624: LD_VAR 0 2
32628: NOT
32629: IFFALSE 32633
// continue ;
32631: GO 32428
// HackLink ( i , tmp ) ;
32633: LD_VAR 0 1
32637: PPUSH
32638: LD_VAR 0 2
32642: PPUSH
32643: CALL 32790 0 2
// end ;
32647: GO 32428
32649: POP
32650: POP
// end ;
32651: PPOPN 2
32653: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32654: LD_INT 0
32656: PPUSH
32657: PPUSH
32658: PPUSH
// if not hack in hackTanks then
32659: LD_VAR 0 1
32663: PUSH
32664: LD_EXP 116
32668: IN
32669: NOT
32670: IFFALSE 32674
// exit ;
32672: GO 32785
// index := GetElementIndex ( hackTanks , hack ) ;
32674: LD_ADDR_VAR 0 4
32678: PUSH
32679: LD_EXP 116
32683: PPUSH
32684: LD_VAR 0 1
32688: PPUSH
32689: CALL 40259 0 2
32693: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32694: LD_EXP 117
32698: PUSH
32699: LD_VAR 0 4
32703: ARRAY
32704: IFFALSE 32785
// begin for i in hackTanksCaptured [ index ] do
32706: LD_ADDR_VAR 0 3
32710: PUSH
32711: LD_EXP 117
32715: PUSH
32716: LD_VAR 0 4
32720: ARRAY
32721: PUSH
32722: FOR_IN
32723: IFFALSE 32749
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32725: LD_VAR 0 3
32729: PUSH
32730: LD_INT 1
32732: ARRAY
32733: PPUSH
32734: LD_VAR 0 3
32738: PUSH
32739: LD_INT 2
32741: ARRAY
32742: PPUSH
32743: CALL_OW 235
32747: GO 32722
32749: POP
32750: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32751: LD_ADDR_EXP 117
32755: PUSH
32756: LD_EXP 117
32760: PPUSH
32761: LD_VAR 0 4
32765: PPUSH
32766: EMPTY
32767: PPUSH
32768: CALL_OW 1
32772: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32773: LD_VAR 0 1
32777: PPUSH
32778: LD_INT 0
32780: PPUSH
32781: CALL_OW 505
// end ; end ;
32785: LD_VAR 0 2
32789: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32790: LD_INT 0
32792: PPUSH
32793: PPUSH
32794: PPUSH
// if not hack in hackTanks or not vehicles then
32795: LD_VAR 0 1
32799: PUSH
32800: LD_EXP 116
32804: IN
32805: NOT
32806: PUSH
32807: LD_VAR 0 2
32811: NOT
32812: OR
32813: IFFALSE 32817
// exit ;
32815: GO 33092
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32817: LD_ADDR_VAR 0 2
32821: PUSH
32822: LD_VAR 0 1
32826: PPUSH
32827: LD_VAR 0 2
32831: PPUSH
32832: LD_INT 1
32834: PPUSH
32835: LD_INT 1
32837: PPUSH
32838: CALL 40909 0 4
32842: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32843: LD_ADDR_VAR 0 5
32847: PUSH
32848: LD_EXP 116
32852: PPUSH
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL 40259 0 2
32862: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32863: LD_EXP 117
32867: PUSH
32868: LD_VAR 0 5
32872: ARRAY
32873: PUSH
32874: LD_EXP 118
32878: LESS
32879: IFFALSE 33068
// begin for i := 1 to vehicles do
32881: LD_ADDR_VAR 0 4
32885: PUSH
32886: DOUBLE
32887: LD_INT 1
32889: DEC
32890: ST_TO_ADDR
32891: LD_VAR 0 2
32895: PUSH
32896: FOR_TO
32897: IFFALSE 33066
// begin if hackTanksCaptured [ index ] = hackLimit then
32899: LD_EXP 117
32903: PUSH
32904: LD_VAR 0 5
32908: ARRAY
32909: PUSH
32910: LD_EXP 118
32914: EQUAL
32915: IFFALSE 32919
// break ;
32917: GO 33066
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32919: LD_ADDR_EXP 120
32923: PUSH
32924: LD_EXP 120
32928: PPUSH
32929: LD_VAR 0 5
32933: PPUSH
32934: LD_EXP 120
32938: PUSH
32939: LD_VAR 0 5
32943: ARRAY
32944: PUSH
32945: LD_INT 1
32947: PLUS
32948: PPUSH
32949: CALL_OW 1
32953: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32954: LD_ADDR_EXP 117
32958: PUSH
32959: LD_EXP 117
32963: PPUSH
32964: LD_VAR 0 5
32968: PUSH
32969: LD_EXP 117
32973: PUSH
32974: LD_VAR 0 5
32978: ARRAY
32979: PUSH
32980: LD_INT 1
32982: PLUS
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PPUSH
32988: LD_VAR 0 2
32992: PUSH
32993: LD_VAR 0 4
32997: ARRAY
32998: PUSH
32999: LD_VAR 0 2
33003: PUSH
33004: LD_VAR 0 4
33008: ARRAY
33009: PPUSH
33010: CALL_OW 255
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PPUSH
33019: CALL 40474 0 3
33023: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33024: LD_VAR 0 2
33028: PUSH
33029: LD_VAR 0 4
33033: ARRAY
33034: PPUSH
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 255
33044: PPUSH
33045: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33049: LD_VAR 0 2
33053: PUSH
33054: LD_VAR 0 4
33058: ARRAY
33059: PPUSH
33060: CALL_OW 141
// end ;
33064: GO 32896
33066: POP
33067: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_EXP 117
33077: PUSH
33078: LD_VAR 0 5
33082: ARRAY
33083: PUSH
33084: LD_INT 0
33086: PLUS
33087: PPUSH
33088: CALL_OW 505
// end ;
33092: LD_VAR 0 3
33096: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33097: LD_INT 0
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
// if not hack in hackTanks then
33103: LD_VAR 0 1
33107: PUSH
33108: LD_EXP 116
33112: IN
33113: NOT
33114: IFFALSE 33118
// exit ;
33116: GO 33358
// index := GetElementIndex ( hackTanks , hack ) ;
33118: LD_ADDR_VAR 0 4
33122: PUSH
33123: LD_EXP 116
33127: PPUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL 40259 0 2
33137: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: DOUBLE
33144: LD_EXP 117
33148: PUSH
33149: LD_VAR 0 4
33153: ARRAY
33154: INC
33155: ST_TO_ADDR
33156: LD_INT 1
33158: PUSH
33159: FOR_DOWNTO
33160: IFFALSE 33332
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33162: LD_ADDR_VAR 0 5
33166: PUSH
33167: LD_EXP 117
33171: PUSH
33172: LD_VAR 0 4
33176: ARRAY
33177: PUSH
33178: LD_VAR 0 3
33182: ARRAY
33183: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33184: LD_VAR 0 5
33188: PUSH
33189: LD_INT 1
33191: ARRAY
33192: PPUSH
33193: CALL_OW 302
33197: NOT
33198: PUSH
33199: LD_VAR 0 5
33203: PUSH
33204: LD_INT 1
33206: ARRAY
33207: PPUSH
33208: CALL_OW 255
33212: PUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL_OW 255
33222: NONEQUAL
33223: OR
33224: IFFALSE 33330
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33226: LD_VAR 0 5
33230: PUSH
33231: LD_INT 1
33233: ARRAY
33234: PPUSH
33235: CALL_OW 305
33239: PUSH
33240: LD_VAR 0 5
33244: PUSH
33245: LD_INT 1
33247: ARRAY
33248: PPUSH
33249: CALL_OW 255
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: CALL_OW 255
33263: EQUAL
33264: AND
33265: IFFALSE 33289
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33267: LD_VAR 0 5
33271: PUSH
33272: LD_INT 1
33274: ARRAY
33275: PPUSH
33276: LD_VAR 0 5
33280: PUSH
33281: LD_INT 2
33283: ARRAY
33284: PPUSH
33285: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33289: LD_ADDR_EXP 117
33293: PUSH
33294: LD_EXP 117
33298: PPUSH
33299: LD_VAR 0 4
33303: PPUSH
33304: LD_EXP 117
33308: PUSH
33309: LD_VAR 0 4
33313: ARRAY
33314: PPUSH
33315: LD_VAR 0 3
33319: PPUSH
33320: CALL_OW 3
33324: PPUSH
33325: CALL_OW 1
33329: ST_TO_ADDR
// end ; end ;
33330: GO 33159
33332: POP
33333: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33334: LD_VAR 0 1
33338: PPUSH
33339: LD_EXP 117
33343: PUSH
33344: LD_VAR 0 4
33348: ARRAY
33349: PUSH
33350: LD_INT 0
33352: PLUS
33353: PPUSH
33354: CALL_OW 505
// end ;
33358: LD_VAR 0 2
33362: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33363: LD_INT 0
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
// if not hack in hackTanks then
33369: LD_VAR 0 1
33373: PUSH
33374: LD_EXP 116
33378: IN
33379: NOT
33380: IFFALSE 33384
// exit ;
33382: GO 33469
// index := GetElementIndex ( hackTanks , hack ) ;
33384: LD_ADDR_VAR 0 5
33388: PUSH
33389: LD_EXP 116
33393: PPUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: CALL 40259 0 2
33403: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33404: LD_ADDR_VAR 0 4
33408: PUSH
33409: DOUBLE
33410: LD_INT 1
33412: DEC
33413: ST_TO_ADDR
33414: LD_EXP 117
33418: PUSH
33419: LD_VAR 0 5
33423: ARRAY
33424: PUSH
33425: FOR_TO
33426: IFFALSE 33467
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33428: LD_EXP 117
33432: PUSH
33433: LD_VAR 0 5
33437: ARRAY
33438: PUSH
33439: LD_VAR 0 4
33443: ARRAY
33444: PUSH
33445: LD_INT 1
33447: ARRAY
33448: PUSH
33449: LD_VAR 0 2
33453: EQUAL
33454: IFFALSE 33465
// KillUnit ( vehicle ) ;
33456: LD_VAR 0 2
33460: PPUSH
33461: CALL_OW 66
33465: GO 33425
33467: POP
33468: POP
// end ;
33469: LD_VAR 0 3
33473: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33474: LD_EXP 121
33478: NOT
33479: IFFALSE 33514
33481: GO 33483
33483: DISABLE
// begin initMiner := true ;
33484: LD_ADDR_EXP 121
33488: PUSH
33489: LD_INT 1
33491: ST_TO_ADDR
// minersList := [ ] ;
33492: LD_ADDR_EXP 122
33496: PUSH
33497: EMPTY
33498: ST_TO_ADDR
// minerMinesList := [ ] ;
33499: LD_ADDR_EXP 123
33503: PUSH
33504: EMPTY
33505: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33506: LD_ADDR_EXP 124
33510: PUSH
33511: LD_INT 5
33513: ST_TO_ADDR
// end ;
33514: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33515: LD_EXP 121
33519: PUSH
33520: LD_INT 34
33522: PUSH
33523: LD_EXP 43
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PPUSH
33532: CALL_OW 69
33536: AND
33537: IFFALSE 34000
33539: GO 33541
33541: DISABLE
33542: LD_INT 0
33544: PPUSH
33545: PPUSH
33546: PPUSH
33547: PPUSH
// begin enable ;
33548: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33549: LD_ADDR_VAR 0 1
33553: PUSH
33554: LD_INT 34
33556: PUSH
33557: LD_EXP 43
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PPUSH
33566: CALL_OW 69
33570: PUSH
33571: FOR_IN
33572: IFFALSE 33644
// begin if not i in minersList then
33574: LD_VAR 0 1
33578: PUSH
33579: LD_EXP 122
33583: IN
33584: NOT
33585: IFFALSE 33642
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33587: LD_ADDR_EXP 122
33591: PUSH
33592: LD_EXP 122
33596: PPUSH
33597: LD_EXP 122
33601: PUSH
33602: LD_INT 1
33604: PLUS
33605: PPUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 1
33615: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33616: LD_ADDR_EXP 123
33620: PUSH
33621: LD_EXP 123
33625: PPUSH
33626: LD_EXP 123
33630: PUSH
33631: LD_INT 1
33633: PLUS
33634: PPUSH
33635: EMPTY
33636: PPUSH
33637: CALL_OW 1
33641: ST_TO_ADDR
// end end ;
33642: GO 33571
33644: POP
33645: POP
// for i := minerMinesList downto 1 do
33646: LD_ADDR_VAR 0 1
33650: PUSH
33651: DOUBLE
33652: LD_EXP 123
33656: INC
33657: ST_TO_ADDR
33658: LD_INT 1
33660: PUSH
33661: FOR_DOWNTO
33662: IFFALSE 33998
// begin if IsLive ( minersList [ i ] ) then
33664: LD_EXP 122
33668: PUSH
33669: LD_VAR 0 1
33673: ARRAY
33674: PPUSH
33675: CALL_OW 300
33679: IFFALSE 33707
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33681: LD_EXP 122
33685: PUSH
33686: LD_VAR 0 1
33690: ARRAY
33691: PPUSH
33692: LD_EXP 123
33696: PUSH
33697: LD_VAR 0 1
33701: ARRAY
33702: PPUSH
33703: CALL_OW 505
// if not minerMinesList [ i ] then
33707: LD_EXP 123
33711: PUSH
33712: LD_VAR 0 1
33716: ARRAY
33717: NOT
33718: IFFALSE 33722
// continue ;
33720: GO 33661
// for j := minerMinesList [ i ] downto 1 do
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: DOUBLE
33728: LD_EXP 123
33732: PUSH
33733: LD_VAR 0 1
33737: ARRAY
33738: INC
33739: ST_TO_ADDR
33740: LD_INT 1
33742: PUSH
33743: FOR_DOWNTO
33744: IFFALSE 33994
// begin side := GetSide ( minersList [ i ] ) ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_EXP 122
33755: PUSH
33756: LD_VAR 0 1
33760: ARRAY
33761: PPUSH
33762: CALL_OW 255
33766: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33767: LD_ADDR_VAR 0 4
33771: PUSH
33772: LD_EXP 123
33776: PUSH
33777: LD_VAR 0 1
33781: ARRAY
33782: PUSH
33783: LD_VAR 0 2
33787: ARRAY
33788: PUSH
33789: LD_INT 1
33791: ARRAY
33792: PPUSH
33793: LD_EXP 123
33797: PUSH
33798: LD_VAR 0 1
33802: ARRAY
33803: PUSH
33804: LD_VAR 0 2
33808: ARRAY
33809: PUSH
33810: LD_INT 2
33812: ARRAY
33813: PPUSH
33814: CALL_OW 428
33818: ST_TO_ADDR
// if not tmp then
33819: LD_VAR 0 4
33823: NOT
33824: IFFALSE 33828
// continue ;
33826: GO 33743
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33828: LD_VAR 0 4
33832: PUSH
33833: LD_INT 81
33835: PUSH
33836: LD_VAR 0 3
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PPUSH
33845: CALL_OW 69
33849: IN
33850: PUSH
33851: LD_EXP 123
33855: PUSH
33856: LD_VAR 0 1
33860: ARRAY
33861: PUSH
33862: LD_VAR 0 2
33866: ARRAY
33867: PUSH
33868: LD_INT 1
33870: ARRAY
33871: PPUSH
33872: LD_EXP 123
33876: PUSH
33877: LD_VAR 0 1
33881: ARRAY
33882: PUSH
33883: LD_VAR 0 2
33887: ARRAY
33888: PUSH
33889: LD_INT 2
33891: ARRAY
33892: PPUSH
33893: CALL_OW 458
33897: AND
33898: IFFALSE 33992
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33900: LD_EXP 123
33904: PUSH
33905: LD_VAR 0 1
33909: ARRAY
33910: PUSH
33911: LD_VAR 0 2
33915: ARRAY
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: PPUSH
33921: LD_EXP 123
33925: PUSH
33926: LD_VAR 0 1
33930: ARRAY
33931: PUSH
33932: LD_VAR 0 2
33936: ARRAY
33937: PUSH
33938: LD_INT 2
33940: ARRAY
33941: PPUSH
33942: LD_VAR 0 3
33946: PPUSH
33947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33951: LD_ADDR_EXP 123
33955: PUSH
33956: LD_EXP 123
33960: PPUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: LD_EXP 123
33970: PUSH
33971: LD_VAR 0 1
33975: ARRAY
33976: PPUSH
33977: LD_VAR 0 2
33981: PPUSH
33982: CALL_OW 3
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
// end ; end ;
33992: GO 33743
33994: POP
33995: POP
// end ;
33996: GO 33661
33998: POP
33999: POP
// end ;
34000: PPOPN 4
34002: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34003: LD_INT 0
34005: PPUSH
34006: PPUSH
// result := false ;
34007: LD_ADDR_VAR 0 4
34011: PUSH
34012: LD_INT 0
34014: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 264
34024: PUSH
34025: LD_EXP 43
34029: EQUAL
34030: NOT
34031: IFFALSE 34035
// exit ;
34033: GO 34275
// index := GetElementIndex ( minersList , unit ) ;
34035: LD_ADDR_VAR 0 5
34039: PUSH
34040: LD_EXP 122
34044: PPUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL 40259 0 2
34054: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34055: LD_EXP 123
34059: PUSH
34060: LD_VAR 0 5
34064: ARRAY
34065: PUSH
34066: LD_EXP 124
34070: GREATEREQUAL
34071: IFFALSE 34075
// exit ;
34073: GO 34275
// ComMoveXY ( unit , x , y ) ;
34075: LD_VAR 0 1
34079: PPUSH
34080: LD_VAR 0 2
34084: PPUSH
34085: LD_VAR 0 3
34089: PPUSH
34090: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34094: LD_INT 35
34096: PPUSH
34097: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34101: LD_VAR 0 1
34105: PPUSH
34106: LD_VAR 0 2
34110: PPUSH
34111: LD_VAR 0 3
34115: PPUSH
34116: CALL 70978 0 3
34120: NOT
34121: PUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 314
34131: AND
34132: IFFALSE 34136
// exit ;
34134: GO 34275
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34136: LD_VAR 0 2
34140: PPUSH
34141: LD_VAR 0 3
34145: PPUSH
34146: CALL_OW 428
34150: PUSH
34151: LD_VAR 0 1
34155: EQUAL
34156: PUSH
34157: LD_VAR 0 1
34161: PPUSH
34162: CALL_OW 314
34166: NOT
34167: AND
34168: IFFALSE 34094
// PlaySoundXY ( x , y , PlantMine ) ;
34170: LD_VAR 0 2
34174: PPUSH
34175: LD_VAR 0 3
34179: PPUSH
34180: LD_STRING PlantMine
34182: PPUSH
34183: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34187: LD_VAR 0 2
34191: PPUSH
34192: LD_VAR 0 3
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 255
34206: PPUSH
34207: LD_INT 0
34209: PPUSH
34210: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34214: LD_ADDR_EXP 123
34218: PUSH
34219: LD_EXP 123
34223: PPUSH
34224: LD_VAR 0 5
34228: PUSH
34229: LD_EXP 123
34233: PUSH
34234: LD_VAR 0 5
34238: ARRAY
34239: PUSH
34240: LD_INT 1
34242: PLUS
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PPUSH
34248: LD_VAR 0 2
34252: PUSH
34253: LD_VAR 0 3
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PPUSH
34262: CALL 40474 0 3
34266: ST_TO_ADDR
// result := true ;
34267: LD_ADDR_VAR 0 4
34271: PUSH
34272: LD_INT 1
34274: ST_TO_ADDR
// end ;
34275: LD_VAR 0 4
34279: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34280: LD_INT 0
34282: PPUSH
34283: PPUSH
34284: PPUSH
// if not unit in minersList then
34285: LD_VAR 0 1
34289: PUSH
34290: LD_EXP 122
34294: IN
34295: NOT
34296: IFFALSE 34300
// exit ;
34298: GO 34692
// index := GetElementIndex ( minersList , unit ) ;
34300: LD_ADDR_VAR 0 6
34304: PUSH
34305: LD_EXP 122
34309: PPUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL 40259 0 2
34319: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34320: LD_ADDR_VAR 0 5
34324: PUSH
34325: DOUBLE
34326: LD_EXP 123
34330: PUSH
34331: LD_VAR 0 6
34335: ARRAY
34336: INC
34337: ST_TO_ADDR
34338: LD_INT 1
34340: PUSH
34341: FOR_DOWNTO
34342: IFFALSE 34503
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34344: LD_EXP 123
34348: PUSH
34349: LD_VAR 0 6
34353: ARRAY
34354: PUSH
34355: LD_VAR 0 5
34359: ARRAY
34360: PUSH
34361: LD_INT 1
34363: ARRAY
34364: PUSH
34365: LD_VAR 0 2
34369: EQUAL
34370: PUSH
34371: LD_EXP 123
34375: PUSH
34376: LD_VAR 0 6
34380: ARRAY
34381: PUSH
34382: LD_VAR 0 5
34386: ARRAY
34387: PUSH
34388: LD_INT 2
34390: ARRAY
34391: PUSH
34392: LD_VAR 0 3
34396: EQUAL
34397: AND
34398: IFFALSE 34501
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34400: LD_EXP 123
34404: PUSH
34405: LD_VAR 0 6
34409: ARRAY
34410: PUSH
34411: LD_VAR 0 5
34415: ARRAY
34416: PUSH
34417: LD_INT 1
34419: ARRAY
34420: PPUSH
34421: LD_EXP 123
34425: PUSH
34426: LD_VAR 0 6
34430: ARRAY
34431: PUSH
34432: LD_VAR 0 5
34436: ARRAY
34437: PUSH
34438: LD_INT 2
34440: ARRAY
34441: PPUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 255
34451: PPUSH
34452: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34456: LD_ADDR_EXP 123
34460: PUSH
34461: LD_EXP 123
34465: PPUSH
34466: LD_VAR 0 6
34470: PPUSH
34471: LD_EXP 123
34475: PUSH
34476: LD_VAR 0 6
34480: ARRAY
34481: PPUSH
34482: LD_VAR 0 5
34486: PPUSH
34487: CALL_OW 3
34491: PPUSH
34492: CALL_OW 1
34496: ST_TO_ADDR
// exit ;
34497: POP
34498: POP
34499: GO 34692
// end ; end ;
34501: GO 34341
34503: POP
34504: POP
// for i := minerMinesList [ index ] downto 1 do
34505: LD_ADDR_VAR 0 5
34509: PUSH
34510: DOUBLE
34511: LD_EXP 123
34515: PUSH
34516: LD_VAR 0 6
34520: ARRAY
34521: INC
34522: ST_TO_ADDR
34523: LD_INT 1
34525: PUSH
34526: FOR_DOWNTO
34527: IFFALSE 34690
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34529: LD_EXP 123
34533: PUSH
34534: LD_VAR 0 6
34538: ARRAY
34539: PUSH
34540: LD_VAR 0 5
34544: ARRAY
34545: PUSH
34546: LD_INT 1
34548: ARRAY
34549: PPUSH
34550: LD_EXP 123
34554: PUSH
34555: LD_VAR 0 6
34559: ARRAY
34560: PUSH
34561: LD_VAR 0 5
34565: ARRAY
34566: PUSH
34567: LD_INT 2
34569: ARRAY
34570: PPUSH
34571: LD_VAR 0 2
34575: PPUSH
34576: LD_VAR 0 3
34580: PPUSH
34581: CALL_OW 298
34585: PUSH
34586: LD_INT 6
34588: LESS
34589: IFFALSE 34688
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34591: LD_EXP 123
34595: PUSH
34596: LD_VAR 0 6
34600: ARRAY
34601: PUSH
34602: LD_VAR 0 5
34606: ARRAY
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: PPUSH
34612: LD_EXP 123
34616: PUSH
34617: LD_VAR 0 6
34621: ARRAY
34622: PUSH
34623: LD_VAR 0 5
34627: ARRAY
34628: PUSH
34629: LD_INT 2
34631: ARRAY
34632: PPUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 255
34642: PPUSH
34643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34647: LD_ADDR_EXP 123
34651: PUSH
34652: LD_EXP 123
34656: PPUSH
34657: LD_VAR 0 6
34661: PPUSH
34662: LD_EXP 123
34666: PUSH
34667: LD_VAR 0 6
34671: ARRAY
34672: PPUSH
34673: LD_VAR 0 5
34677: PPUSH
34678: CALL_OW 3
34682: PPUSH
34683: CALL_OW 1
34687: ST_TO_ADDR
// end ; end ;
34688: GO 34526
34690: POP
34691: POP
// end ;
34692: LD_VAR 0 4
34696: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34697: LD_INT 0
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34708: LD_VAR 0 1
34712: PPUSH
34713: CALL_OW 264
34717: PUSH
34718: LD_EXP 43
34722: EQUAL
34723: NOT
34724: PUSH
34725: LD_VAR 0 1
34729: PUSH
34730: LD_EXP 122
34734: IN
34735: NOT
34736: OR
34737: IFFALSE 34741
// exit ;
34739: GO 35063
// index := GetElementIndex ( minersList , unit ) ;
34741: LD_ADDR_VAR 0 6
34745: PUSH
34746: LD_EXP 122
34750: PPUSH
34751: LD_VAR 0 1
34755: PPUSH
34756: CALL 40259 0 2
34760: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34761: LD_ADDR_VAR 0 8
34765: PUSH
34766: LD_EXP 124
34770: PUSH
34771: LD_EXP 123
34775: PUSH
34776: LD_VAR 0 6
34780: ARRAY
34781: MINUS
34782: ST_TO_ADDR
// if not minesFreeAmount then
34783: LD_VAR 0 8
34787: NOT
34788: IFFALSE 34792
// exit ;
34790: GO 35063
// tmp := [ ] ;
34792: LD_ADDR_VAR 0 7
34796: PUSH
34797: EMPTY
34798: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34799: LD_ADDR_VAR 0 5
34803: PUSH
34804: DOUBLE
34805: LD_INT 1
34807: DEC
34808: ST_TO_ADDR
34809: LD_VAR 0 8
34813: PUSH
34814: FOR_TO
34815: IFFALSE 35010
// begin _d := rand ( 0 , 5 ) ;
34817: LD_ADDR_VAR 0 11
34821: PUSH
34822: LD_INT 0
34824: PPUSH
34825: LD_INT 5
34827: PPUSH
34828: CALL_OW 12
34832: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34833: LD_ADDR_VAR 0 12
34837: PUSH
34838: LD_INT 2
34840: PPUSH
34841: LD_INT 6
34843: PPUSH
34844: CALL_OW 12
34848: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34849: LD_ADDR_VAR 0 9
34853: PUSH
34854: LD_VAR 0 2
34858: PPUSH
34859: LD_VAR 0 11
34863: PPUSH
34864: LD_VAR 0 12
34868: PPUSH
34869: CALL_OW 272
34873: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34874: LD_ADDR_VAR 0 10
34878: PUSH
34879: LD_VAR 0 3
34883: PPUSH
34884: LD_VAR 0 11
34888: PPUSH
34889: LD_VAR 0 12
34893: PPUSH
34894: CALL_OW 273
34898: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34899: LD_VAR 0 9
34903: PPUSH
34904: LD_VAR 0 10
34908: PPUSH
34909: CALL_OW 488
34913: PUSH
34914: LD_VAR 0 9
34918: PUSH
34919: LD_VAR 0 10
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_VAR 0 7
34932: IN
34933: NOT
34934: AND
34935: PUSH
34936: LD_VAR 0 9
34940: PPUSH
34941: LD_VAR 0 10
34945: PPUSH
34946: CALL_OW 458
34950: NOT
34951: AND
34952: IFFALSE 34994
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34954: LD_ADDR_VAR 0 7
34958: PUSH
34959: LD_VAR 0 7
34963: PPUSH
34964: LD_VAR 0 7
34968: PUSH
34969: LD_INT 1
34971: PLUS
34972: PPUSH
34973: LD_VAR 0 9
34977: PUSH
34978: LD_VAR 0 10
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PPUSH
34987: CALL_OW 1
34991: ST_TO_ADDR
34992: GO 35008
// i := i - 1 ;
34994: LD_ADDR_VAR 0 5
34998: PUSH
34999: LD_VAR 0 5
35003: PUSH
35004: LD_INT 1
35006: MINUS
35007: ST_TO_ADDR
// end ;
35008: GO 34814
35010: POP
35011: POP
// for i in tmp do
35012: LD_ADDR_VAR 0 5
35016: PUSH
35017: LD_VAR 0 7
35021: PUSH
35022: FOR_IN
35023: IFFALSE 35061
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35025: LD_VAR 0 1
35029: PPUSH
35030: LD_VAR 0 5
35034: PUSH
35035: LD_INT 1
35037: ARRAY
35038: PPUSH
35039: LD_VAR 0 5
35043: PUSH
35044: LD_INT 2
35046: ARRAY
35047: PPUSH
35048: CALL 34003 0 3
35052: NOT
35053: IFFALSE 35059
// exit ;
35055: POP
35056: POP
35057: GO 35063
35059: GO 35022
35061: POP
35062: POP
// end ;
35063: LD_VAR 0 4
35067: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35068: LD_INT 0
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
// if not GetClass ( unit ) = class_sniper then
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 257
35086: PUSH
35087: LD_INT 5
35089: EQUAL
35090: NOT
35091: IFFALSE 35095
// exit ;
35093: GO 35483
// dist := 8 ;
35095: LD_ADDR_VAR 0 5
35099: PUSH
35100: LD_INT 8
35102: ST_TO_ADDR
// viewRange := 12 ;
35103: LD_ADDR_VAR 0 7
35107: PUSH
35108: LD_INT 12
35110: ST_TO_ADDR
// side := GetSide ( unit ) ;
35111: LD_ADDR_VAR 0 6
35115: PUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 255
35125: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35126: LD_INT 61
35128: PPUSH
35129: LD_VAR 0 6
35133: PPUSH
35134: CALL_OW 321
35138: PUSH
35139: LD_INT 2
35141: EQUAL
35142: IFFALSE 35152
// viewRange := 16 ;
35144: LD_ADDR_VAR 0 7
35148: PUSH
35149: LD_INT 16
35151: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35152: LD_VAR 0 1
35156: PPUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: LD_VAR 0 3
35166: PPUSH
35167: CALL_OW 297
35171: PUSH
35172: LD_VAR 0 5
35176: GREATER
35177: IFFALSE 35256
// begin ComMoveXY ( unit , x , y ) ;
35179: LD_VAR 0 1
35183: PPUSH
35184: LD_VAR 0 2
35188: PPUSH
35189: LD_VAR 0 3
35193: PPUSH
35194: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35198: LD_INT 35
35200: PPUSH
35201: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35205: LD_VAR 0 1
35209: PPUSH
35210: LD_VAR 0 2
35214: PPUSH
35215: LD_VAR 0 3
35219: PPUSH
35220: CALL 70978 0 3
35224: NOT
35225: IFFALSE 35229
// exit ;
35227: GO 35483
// until GetDistUnitXY ( unit , x , y ) < dist ;
35229: LD_VAR 0 1
35233: PPUSH
35234: LD_VAR 0 2
35238: PPUSH
35239: LD_VAR 0 3
35243: PPUSH
35244: CALL_OW 297
35248: PUSH
35249: LD_VAR 0 5
35253: LESS
35254: IFFALSE 35198
// end ; ComTurnXY ( unit , x , y ) ;
35256: LD_VAR 0 1
35260: PPUSH
35261: LD_VAR 0 2
35265: PPUSH
35266: LD_VAR 0 3
35270: PPUSH
35271: CALL_OW 118
// wait ( 5 ) ;
35275: LD_INT 5
35277: PPUSH
35278: CALL_OW 67
// _d := GetDir ( unit ) ;
35282: LD_ADDR_VAR 0 10
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 254
35296: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35297: LD_ADDR_VAR 0 8
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 250
35311: PPUSH
35312: LD_VAR 0 10
35316: PPUSH
35317: LD_VAR 0 5
35321: PPUSH
35322: CALL_OW 272
35326: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35327: LD_ADDR_VAR 0 9
35331: PUSH
35332: LD_VAR 0 1
35336: PPUSH
35337: CALL_OW 251
35341: PPUSH
35342: LD_VAR 0 10
35346: PPUSH
35347: LD_VAR 0 5
35351: PPUSH
35352: CALL_OW 273
35356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35357: LD_VAR 0 8
35361: PPUSH
35362: LD_VAR 0 9
35366: PPUSH
35367: CALL_OW 488
35371: NOT
35372: IFFALSE 35376
// exit ;
35374: GO 35483
// ComAnimCustom ( unit , 1 ) ;
35376: LD_VAR 0 1
35380: PPUSH
35381: LD_INT 1
35383: PPUSH
35384: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35388: LD_VAR 0 8
35392: PPUSH
35393: LD_VAR 0 9
35397: PPUSH
35398: LD_VAR 0 6
35402: PPUSH
35403: LD_VAR 0 7
35407: PPUSH
35408: CALL_OW 330
// repeat wait ( 1 ) ;
35412: LD_INT 1
35414: PPUSH
35415: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 316
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 314
35438: OR
35439: PUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 302
35449: NOT
35450: OR
35451: PUSH
35452: LD_VAR 0 1
35456: PPUSH
35457: CALL_OW 301
35461: OR
35462: IFFALSE 35412
// RemoveSeeing ( _x , _y , side ) ;
35464: LD_VAR 0 8
35468: PPUSH
35469: LD_VAR 0 9
35473: PPUSH
35474: LD_VAR 0 6
35478: PPUSH
35479: CALL_OW 331
// end ; end_of_file
35483: LD_VAR 0 4
35487: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35488: LD_INT 0
35490: PPUSH
35491: PPUSH
// if exist_mode then
35492: LD_VAR 0 2
35496: IFFALSE 35521
// unit := CreateCharacter ( prefix & ident ) else
35498: LD_ADDR_VAR 0 5
35502: PUSH
35503: LD_VAR 0 3
35507: PUSH
35508: LD_VAR 0 1
35512: STR
35513: PPUSH
35514: CALL_OW 34
35518: ST_TO_ADDR
35519: GO 35536
// unit := NewCharacter ( ident ) ;
35521: LD_ADDR_VAR 0 5
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 25
35535: ST_TO_ADDR
// result := unit ;
35536: LD_ADDR_VAR 0 4
35540: PUSH
35541: LD_VAR 0 5
35545: ST_TO_ADDR
// end ;
35546: LD_VAR 0 4
35550: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35551: LD_INT 0
35553: PPUSH
35554: PPUSH
// if not side or not nation then
35555: LD_VAR 0 1
35559: NOT
35560: PUSH
35561: LD_VAR 0 2
35565: NOT
35566: OR
35567: IFFALSE 35571
// exit ;
35569: GO 36339
// case nation of nation_american :
35571: LD_VAR 0 2
35575: PUSH
35576: LD_INT 1
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35584
35582: GO 35798
35584: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_INT 35
35592: PUSH
35593: LD_INT 45
35595: PUSH
35596: LD_INT 46
35598: PUSH
35599: LD_INT 47
35601: PUSH
35602: LD_INT 82
35604: PUSH
35605: LD_INT 83
35607: PUSH
35608: LD_INT 84
35610: PUSH
35611: LD_INT 85
35613: PUSH
35614: LD_INT 86
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 6
35625: PUSH
35626: LD_INT 15
35628: PUSH
35629: LD_INT 16
35631: PUSH
35632: LD_INT 7
35634: PUSH
35635: LD_INT 12
35637: PUSH
35638: LD_INT 13
35640: PUSH
35641: LD_INT 10
35643: PUSH
35644: LD_INT 14
35646: PUSH
35647: LD_INT 20
35649: PUSH
35650: LD_INT 21
35652: PUSH
35653: LD_INT 22
35655: PUSH
35656: LD_INT 25
35658: PUSH
35659: LD_INT 32
35661: PUSH
35662: LD_INT 27
35664: PUSH
35665: LD_INT 36
35667: PUSH
35668: LD_INT 69
35670: PUSH
35671: LD_INT 39
35673: PUSH
35674: LD_INT 34
35676: PUSH
35677: LD_INT 40
35679: PUSH
35680: LD_INT 48
35682: PUSH
35683: LD_INT 49
35685: PUSH
35686: LD_INT 50
35688: PUSH
35689: LD_INT 51
35691: PUSH
35692: LD_INT 52
35694: PUSH
35695: LD_INT 53
35697: PUSH
35698: LD_INT 54
35700: PUSH
35701: LD_INT 55
35703: PUSH
35704: LD_INT 56
35706: PUSH
35707: LD_INT 57
35709: PUSH
35710: LD_INT 58
35712: PUSH
35713: LD_INT 59
35715: PUSH
35716: LD_INT 60
35718: PUSH
35719: LD_INT 61
35721: PUSH
35722: LD_INT 62
35724: PUSH
35725: LD_INT 80
35727: PUSH
35728: LD_INT 82
35730: PUSH
35731: LD_INT 83
35733: PUSH
35734: LD_INT 84
35736: PUSH
35737: LD_INT 85
35739: PUSH
35740: LD_INT 86
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: ST_TO_ADDR
35796: GO 36263
35798: LD_INT 2
35800: DOUBLE
35801: EQUAL
35802: IFTRUE 35806
35804: GO 36032
35806: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35807: LD_ADDR_VAR 0 4
35811: PUSH
35812: LD_INT 35
35814: PUSH
35815: LD_INT 45
35817: PUSH
35818: LD_INT 46
35820: PUSH
35821: LD_INT 47
35823: PUSH
35824: LD_INT 82
35826: PUSH
35827: LD_INT 83
35829: PUSH
35830: LD_INT 84
35832: PUSH
35833: LD_INT 85
35835: PUSH
35836: LD_INT 87
35838: PUSH
35839: LD_INT 70
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 11
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 4
35853: PUSH
35854: LD_INT 5
35856: PUSH
35857: LD_INT 6
35859: PUSH
35860: LD_INT 15
35862: PUSH
35863: LD_INT 18
35865: PUSH
35866: LD_INT 7
35868: PUSH
35869: LD_INT 17
35871: PUSH
35872: LD_INT 8
35874: PUSH
35875: LD_INT 20
35877: PUSH
35878: LD_INT 21
35880: PUSH
35881: LD_INT 22
35883: PUSH
35884: LD_INT 72
35886: PUSH
35887: LD_INT 26
35889: PUSH
35890: LD_INT 69
35892: PUSH
35893: LD_INT 39
35895: PUSH
35896: LD_INT 40
35898: PUSH
35899: LD_INT 41
35901: PUSH
35902: LD_INT 42
35904: PUSH
35905: LD_INT 43
35907: PUSH
35908: LD_INT 48
35910: PUSH
35911: LD_INT 49
35913: PUSH
35914: LD_INT 50
35916: PUSH
35917: LD_INT 51
35919: PUSH
35920: LD_INT 52
35922: PUSH
35923: LD_INT 53
35925: PUSH
35926: LD_INT 54
35928: PUSH
35929: LD_INT 55
35931: PUSH
35932: LD_INT 56
35934: PUSH
35935: LD_INT 60
35937: PUSH
35938: LD_INT 61
35940: PUSH
35941: LD_INT 62
35943: PUSH
35944: LD_INT 66
35946: PUSH
35947: LD_INT 67
35949: PUSH
35950: LD_INT 68
35952: PUSH
35953: LD_INT 81
35955: PUSH
35956: LD_INT 82
35958: PUSH
35959: LD_INT 83
35961: PUSH
35962: LD_INT 84
35964: PUSH
35965: LD_INT 85
35967: PUSH
35968: LD_INT 87
35970: PUSH
35971: LD_INT 88
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
36030: GO 36263
36032: LD_INT 3
36034: DOUBLE
36035: EQUAL
36036: IFTRUE 36040
36038: GO 36262
36040: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36041: LD_ADDR_VAR 0 4
36045: PUSH
36046: LD_INT 46
36048: PUSH
36049: LD_INT 47
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 82
36060: PUSH
36061: LD_INT 83
36063: PUSH
36064: LD_INT 84
36066: PUSH
36067: LD_INT 85
36069: PUSH
36070: LD_INT 86
36072: PUSH
36073: LD_INT 11
36075: PUSH
36076: LD_INT 9
36078: PUSH
36079: LD_INT 20
36081: PUSH
36082: LD_INT 19
36084: PUSH
36085: LD_INT 21
36087: PUSH
36088: LD_INT 24
36090: PUSH
36091: LD_INT 22
36093: PUSH
36094: LD_INT 25
36096: PUSH
36097: LD_INT 28
36099: PUSH
36100: LD_INT 29
36102: PUSH
36103: LD_INT 30
36105: PUSH
36106: LD_INT 31
36108: PUSH
36109: LD_INT 37
36111: PUSH
36112: LD_INT 38
36114: PUSH
36115: LD_INT 32
36117: PUSH
36118: LD_INT 27
36120: PUSH
36121: LD_INT 33
36123: PUSH
36124: LD_INT 69
36126: PUSH
36127: LD_INT 39
36129: PUSH
36130: LD_INT 34
36132: PUSH
36133: LD_INT 40
36135: PUSH
36136: LD_INT 71
36138: PUSH
36139: LD_INT 23
36141: PUSH
36142: LD_INT 44
36144: PUSH
36145: LD_INT 48
36147: PUSH
36148: LD_INT 49
36150: PUSH
36151: LD_INT 50
36153: PUSH
36154: LD_INT 51
36156: PUSH
36157: LD_INT 52
36159: PUSH
36160: LD_INT 53
36162: PUSH
36163: LD_INT 54
36165: PUSH
36166: LD_INT 55
36168: PUSH
36169: LD_INT 56
36171: PUSH
36172: LD_INT 57
36174: PUSH
36175: LD_INT 58
36177: PUSH
36178: LD_INT 59
36180: PUSH
36181: LD_INT 63
36183: PUSH
36184: LD_INT 64
36186: PUSH
36187: LD_INT 65
36189: PUSH
36190: LD_INT 82
36192: PUSH
36193: LD_INT 83
36195: PUSH
36196: LD_INT 84
36198: PUSH
36199: LD_INT 85
36201: PUSH
36202: LD_INT 86
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: ST_TO_ADDR
36260: GO 36263
36262: POP
// if state > - 1 and state < 3 then
36263: LD_VAR 0 3
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: GREATER
36272: PUSH
36273: LD_VAR 0 3
36277: PUSH
36278: LD_INT 3
36280: LESS
36281: AND
36282: IFFALSE 36339
// for i in result do
36284: LD_ADDR_VAR 0 5
36288: PUSH
36289: LD_VAR 0 4
36293: PUSH
36294: FOR_IN
36295: IFFALSE 36337
// if GetTech ( i , side ) <> state then
36297: LD_VAR 0 5
36301: PPUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 321
36311: PUSH
36312: LD_VAR 0 3
36316: NONEQUAL
36317: IFFALSE 36335
// result := result diff i ;
36319: LD_ADDR_VAR 0 4
36323: PUSH
36324: LD_VAR 0 4
36328: PUSH
36329: LD_VAR 0 5
36333: DIFF
36334: ST_TO_ADDR
36335: GO 36294
36337: POP
36338: POP
// end ;
36339: LD_VAR 0 4
36343: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36344: LD_INT 0
36346: PPUSH
36347: PPUSH
36348: PPUSH
// result := true ;
36349: LD_ADDR_VAR 0 3
36353: PUSH
36354: LD_INT 1
36356: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36357: LD_ADDR_VAR 0 5
36361: PUSH
36362: LD_VAR 0 2
36366: PPUSH
36367: CALL_OW 480
36371: ST_TO_ADDR
// if not tmp then
36372: LD_VAR 0 5
36376: NOT
36377: IFFALSE 36381
// exit ;
36379: GO 36430
// for i in tmp do
36381: LD_ADDR_VAR 0 4
36385: PUSH
36386: LD_VAR 0 5
36390: PUSH
36391: FOR_IN
36392: IFFALSE 36428
// if GetTech ( i , side ) <> state_researched then
36394: LD_VAR 0 4
36398: PPUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 321
36408: PUSH
36409: LD_INT 2
36411: NONEQUAL
36412: IFFALSE 36426
// begin result := false ;
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 0
36421: ST_TO_ADDR
// exit ;
36422: POP
36423: POP
36424: GO 36430
// end ;
36426: GO 36391
36428: POP
36429: POP
// end ;
36430: LD_VAR 0 3
36434: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36435: LD_INT 0
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
36446: PPUSH
36447: PPUSH
36448: PPUSH
36449: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36450: LD_VAR 0 1
36454: NOT
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 257
36465: PUSH
36466: LD_INT 9
36468: NONEQUAL
36469: OR
36470: IFFALSE 36474
// exit ;
36472: GO 37047
// side := GetSide ( unit ) ;
36474: LD_ADDR_VAR 0 9
36478: PUSH
36479: LD_VAR 0 1
36483: PPUSH
36484: CALL_OW 255
36488: ST_TO_ADDR
// tech_space := tech_spacanom ;
36489: LD_ADDR_VAR 0 12
36493: PUSH
36494: LD_INT 29
36496: ST_TO_ADDR
// tech_time := tech_taurad ;
36497: LD_ADDR_VAR 0 13
36501: PUSH
36502: LD_INT 28
36504: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36505: LD_ADDR_VAR 0 11
36509: PUSH
36510: LD_VAR 0 1
36514: PPUSH
36515: CALL_OW 310
36519: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36520: LD_VAR 0 11
36524: PPUSH
36525: CALL_OW 247
36529: PUSH
36530: LD_INT 2
36532: EQUAL
36533: IFFALSE 36537
// exit ;
36535: GO 37047
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36537: LD_ADDR_VAR 0 8
36541: PUSH
36542: LD_INT 81
36544: PUSH
36545: LD_VAR 0 9
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: LD_INT 21
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PPUSH
36575: CALL_OW 69
36579: ST_TO_ADDR
// if not tmp then
36580: LD_VAR 0 8
36584: NOT
36585: IFFALSE 36589
// exit ;
36587: GO 37047
// if in_unit then
36589: LD_VAR 0 11
36593: IFFALSE 36617
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36595: LD_ADDR_VAR 0 10
36599: PUSH
36600: LD_VAR 0 8
36604: PPUSH
36605: LD_VAR 0 11
36609: PPUSH
36610: CALL_OW 74
36614: ST_TO_ADDR
36615: GO 36637
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36617: LD_ADDR_VAR 0 10
36621: PUSH
36622: LD_VAR 0 8
36626: PPUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL_OW 74
36636: ST_TO_ADDR
// if not enemy then
36637: LD_VAR 0 10
36641: NOT
36642: IFFALSE 36646
// exit ;
36644: GO 37047
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36646: LD_VAR 0 11
36650: PUSH
36651: LD_VAR 0 11
36655: PPUSH
36656: LD_VAR 0 10
36660: PPUSH
36661: CALL_OW 296
36665: PUSH
36666: LD_INT 13
36668: GREATER
36669: AND
36670: PUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: LD_VAR 0 10
36680: PPUSH
36681: CALL_OW 296
36685: PUSH
36686: LD_INT 12
36688: GREATER
36689: OR
36690: IFFALSE 36694
// exit ;
36692: GO 37047
// missile := [ 1 ] ;
36694: LD_ADDR_VAR 0 14
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: EMPTY
36703: LIST
36704: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36705: LD_VAR 0 9
36709: PPUSH
36710: LD_VAR 0 12
36714: PPUSH
36715: CALL_OW 325
36719: IFFALSE 36748
// missile := Replace ( missile , missile + 1 , 2 ) ;
36721: LD_ADDR_VAR 0 14
36725: PUSH
36726: LD_VAR 0 14
36730: PPUSH
36731: LD_VAR 0 14
36735: PUSH
36736: LD_INT 1
36738: PLUS
36739: PPUSH
36740: LD_INT 2
36742: PPUSH
36743: CALL_OW 1
36747: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36748: LD_VAR 0 9
36752: PPUSH
36753: LD_VAR 0 13
36757: PPUSH
36758: CALL_OW 325
36762: PUSH
36763: LD_VAR 0 10
36767: PPUSH
36768: CALL_OW 255
36772: PPUSH
36773: LD_VAR 0 13
36777: PPUSH
36778: CALL_OW 325
36782: NOT
36783: AND
36784: IFFALSE 36813
// missile := Replace ( missile , missile + 1 , 3 ) ;
36786: LD_ADDR_VAR 0 14
36790: PUSH
36791: LD_VAR 0 14
36795: PPUSH
36796: LD_VAR 0 14
36800: PUSH
36801: LD_INT 1
36803: PLUS
36804: PPUSH
36805: LD_INT 3
36807: PPUSH
36808: CALL_OW 1
36812: ST_TO_ADDR
// if missile < 2 then
36813: LD_VAR 0 14
36817: PUSH
36818: LD_INT 2
36820: LESS
36821: IFFALSE 36825
// exit ;
36823: GO 37047
// x := GetX ( enemy ) ;
36825: LD_ADDR_VAR 0 4
36829: PUSH
36830: LD_VAR 0 10
36834: PPUSH
36835: CALL_OW 250
36839: ST_TO_ADDR
// y := GetY ( enemy ) ;
36840: LD_ADDR_VAR 0 5
36844: PUSH
36845: LD_VAR 0 10
36849: PPUSH
36850: CALL_OW 251
36854: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36855: LD_ADDR_VAR 0 6
36859: PUSH
36860: LD_VAR 0 4
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PPUSH
36869: LD_INT 1
36871: PPUSH
36872: CALL_OW 12
36876: PLUS
36877: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36878: LD_ADDR_VAR 0 7
36882: PUSH
36883: LD_VAR 0 5
36887: PUSH
36888: LD_INT 1
36890: NEG
36891: PPUSH
36892: LD_INT 1
36894: PPUSH
36895: CALL_OW 12
36899: PLUS
36900: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36901: LD_VAR 0 6
36905: PPUSH
36906: LD_VAR 0 7
36910: PPUSH
36911: CALL_OW 488
36915: NOT
36916: IFFALSE 36938
// begin _x := x ;
36918: LD_ADDR_VAR 0 6
36922: PUSH
36923: LD_VAR 0 4
36927: ST_TO_ADDR
// _y := y ;
36928: LD_ADDR_VAR 0 7
36932: PUSH
36933: LD_VAR 0 5
36937: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36938: LD_ADDR_VAR 0 3
36942: PUSH
36943: LD_INT 1
36945: PPUSH
36946: LD_VAR 0 14
36950: PPUSH
36951: CALL_OW 12
36955: ST_TO_ADDR
// case i of 1 :
36956: LD_VAR 0 3
36960: PUSH
36961: LD_INT 1
36963: DOUBLE
36964: EQUAL
36965: IFTRUE 36969
36967: GO 36986
36969: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36970: LD_VAR 0 1
36974: PPUSH
36975: LD_VAR 0 10
36979: PPUSH
36980: CALL_OW 115
36984: GO 37047
36986: LD_INT 2
36988: DOUBLE
36989: EQUAL
36990: IFTRUE 36994
36992: GO 37016
36994: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36995: LD_VAR 0 1
36999: PPUSH
37000: LD_VAR 0 6
37004: PPUSH
37005: LD_VAR 0 7
37009: PPUSH
37010: CALL_OW 153
37014: GO 37047
37016: LD_INT 3
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37024
37022: GO 37046
37024: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37025: LD_VAR 0 1
37029: PPUSH
37030: LD_VAR 0 6
37034: PPUSH
37035: LD_VAR 0 7
37039: PPUSH
37040: CALL_OW 154
37044: GO 37047
37046: POP
// end ;
37047: LD_VAR 0 2
37051: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
// if not unit or not building then
37060: LD_VAR 0 1
37064: NOT
37065: PUSH
37066: LD_VAR 0 2
37070: NOT
37071: OR
37072: IFFALSE 37076
// exit ;
37074: GO 37234
// x := GetX ( building ) ;
37076: LD_ADDR_VAR 0 5
37080: PUSH
37081: LD_VAR 0 2
37085: PPUSH
37086: CALL_OW 250
37090: ST_TO_ADDR
// y := GetY ( building ) ;
37091: LD_ADDR_VAR 0 6
37095: PUSH
37096: LD_VAR 0 2
37100: PPUSH
37101: CALL_OW 251
37105: ST_TO_ADDR
// for i = 0 to 5 do
37106: LD_ADDR_VAR 0 4
37110: PUSH
37111: DOUBLE
37112: LD_INT 0
37114: DEC
37115: ST_TO_ADDR
37116: LD_INT 5
37118: PUSH
37119: FOR_TO
37120: IFFALSE 37232
// begin _x := ShiftX ( x , i , 3 ) ;
37122: LD_ADDR_VAR 0 7
37126: PUSH
37127: LD_VAR 0 5
37131: PPUSH
37132: LD_VAR 0 4
37136: PPUSH
37137: LD_INT 3
37139: PPUSH
37140: CALL_OW 272
37144: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37145: LD_ADDR_VAR 0 8
37149: PUSH
37150: LD_VAR 0 6
37154: PPUSH
37155: LD_VAR 0 4
37159: PPUSH
37160: LD_INT 3
37162: PPUSH
37163: CALL_OW 273
37167: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37168: LD_VAR 0 7
37172: PPUSH
37173: LD_VAR 0 8
37177: PPUSH
37178: CALL_OW 488
37182: NOT
37183: IFFALSE 37187
// continue ;
37185: GO 37119
// if HexInfo ( _x , _y ) = 0 then
37187: LD_VAR 0 7
37191: PPUSH
37192: LD_VAR 0 8
37196: PPUSH
37197: CALL_OW 428
37201: PUSH
37202: LD_INT 0
37204: EQUAL
37205: IFFALSE 37230
// begin ComMoveXY ( unit , _x , _y ) ;
37207: LD_VAR 0 1
37211: PPUSH
37212: LD_VAR 0 7
37216: PPUSH
37217: LD_VAR 0 8
37221: PPUSH
37222: CALL_OW 111
// exit ;
37226: POP
37227: POP
37228: GO 37234
// end ; end ;
37230: GO 37119
37232: POP
37233: POP
// end ;
37234: LD_VAR 0 3
37238: RET
// export function ScanBase ( side , base_area ) ; begin
37239: LD_INT 0
37241: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37242: LD_ADDR_VAR 0 3
37246: PUSH
37247: LD_VAR 0 2
37251: PPUSH
37252: LD_INT 81
37254: PUSH
37255: LD_VAR 0 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PPUSH
37264: CALL_OW 70
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 3
37273: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37274: LD_INT 0
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
// result := false ;
37280: LD_ADDR_VAR 0 2
37284: PUSH
37285: LD_INT 0
37287: ST_TO_ADDR
// side := GetSide ( unit ) ;
37288: LD_ADDR_VAR 0 3
37292: PUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 255
37302: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37303: LD_ADDR_VAR 0 4
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 248
37317: ST_TO_ADDR
// case nat of 1 :
37318: LD_VAR 0 4
37322: PUSH
37323: LD_INT 1
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37342
37331: POP
// tech := tech_lassight ; 2 :
37332: LD_ADDR_VAR 0 5
37336: PUSH
37337: LD_INT 12
37339: ST_TO_ADDR
37340: GO 37381
37342: LD_INT 2
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37361
37350: POP
// tech := tech_mortar ; 3 :
37351: LD_ADDR_VAR 0 5
37355: PUSH
37356: LD_INT 41
37358: ST_TO_ADDR
37359: GO 37381
37361: LD_INT 3
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37380
37369: POP
// tech := tech_bazooka ; end ;
37370: LD_ADDR_VAR 0 5
37374: PUSH
37375: LD_INT 44
37377: ST_TO_ADDR
37378: GO 37381
37380: POP
// if Researched ( side , tech ) then
37381: LD_VAR 0 3
37385: PPUSH
37386: LD_VAR 0 5
37390: PPUSH
37391: CALL_OW 325
37395: IFFALSE 37422
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37397: LD_ADDR_VAR 0 2
37401: PUSH
37402: LD_INT 5
37404: PUSH
37405: LD_INT 8
37407: PUSH
37408: LD_INT 9
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PUSH
37416: LD_VAR 0 4
37420: ARRAY
37421: ST_TO_ADDR
// end ;
37422: LD_VAR 0 2
37426: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37427: LD_INT 0
37429: PPUSH
37430: PPUSH
37431: PPUSH
// if not mines then
37432: LD_VAR 0 2
37436: NOT
37437: IFFALSE 37441
// exit ;
37439: GO 37585
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37441: LD_ADDR_VAR 0 5
37445: PUSH
37446: LD_INT 81
37448: PUSH
37449: LD_VAR 0 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: LD_INT 21
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PPUSH
37479: CALL_OW 69
37483: ST_TO_ADDR
// for i in mines do
37484: LD_ADDR_VAR 0 4
37488: PUSH
37489: LD_VAR 0 2
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37583
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37497: LD_VAR 0 4
37501: PUSH
37502: LD_INT 1
37504: ARRAY
37505: PPUSH
37506: LD_VAR 0 4
37510: PUSH
37511: LD_INT 2
37513: ARRAY
37514: PPUSH
37515: CALL_OW 458
37519: NOT
37520: IFFALSE 37524
// continue ;
37522: GO 37494
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37524: LD_VAR 0 4
37528: PUSH
37529: LD_INT 1
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 4
37537: PUSH
37538: LD_INT 2
37540: ARRAY
37541: PPUSH
37542: CALL_OW 428
37546: PUSH
37547: LD_VAR 0 5
37551: IN
37552: IFFALSE 37581
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37554: LD_VAR 0 4
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: PPUSH
37563: LD_VAR 0 4
37567: PUSH
37568: LD_INT 2
37570: ARRAY
37571: PPUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 456
// end ;
37581: GO 37494
37583: POP
37584: POP
// end ;
37585: LD_VAR 0 3
37589: RET
// export function Count ( array ) ; var i ; begin
37590: LD_INT 0
37592: PPUSH
37593: PPUSH
// result := 0 ;
37594: LD_ADDR_VAR 0 2
37598: PUSH
37599: LD_INT 0
37601: ST_TO_ADDR
// for i in array do
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_VAR 0 1
37611: PUSH
37612: FOR_IN
37613: IFFALSE 37637
// if i then
37615: LD_VAR 0 3
37619: IFFALSE 37635
// result := result + 1 ;
37621: LD_ADDR_VAR 0 2
37625: PUSH
37626: LD_VAR 0 2
37630: PUSH
37631: LD_INT 1
37633: PLUS
37634: ST_TO_ADDR
37635: GO 37612
37637: POP
37638: POP
// end ;
37639: LD_VAR 0 2
37643: RET
// export function IsEmpty ( building ) ; begin
37644: LD_INT 0
37646: PPUSH
// if not building then
37647: LD_VAR 0 1
37651: NOT
37652: IFFALSE 37656
// exit ;
37654: GO 37699
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37656: LD_ADDR_VAR 0 2
37660: PUSH
37661: LD_VAR 0 1
37665: PUSH
37666: LD_INT 22
37668: PUSH
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 255
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 58
37685: PUSH
37686: EMPTY
37687: LIST
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PPUSH
37693: CALL_OW 69
37697: IN
37698: ST_TO_ADDR
// end ;
37699: LD_VAR 0 2
37703: RET
// export function IsNotFull ( building ) ; begin
37704: LD_INT 0
37706: PPUSH
// if not building then
37707: LD_VAR 0 1
37711: NOT
37712: IFFALSE 37716
// exit ;
37714: GO 37735
// result := UnitsInside ( building ) < 6 ;
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 313
37730: PUSH
37731: LD_INT 6
37733: LESS
37734: ST_TO_ADDR
// end ;
37735: LD_VAR 0 2
37739: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
// tmp := [ ] ;
37746: LD_ADDR_VAR 0 3
37750: PUSH
37751: EMPTY
37752: ST_TO_ADDR
// list := [ ] ;
37753: LD_ADDR_VAR 0 5
37757: PUSH
37758: EMPTY
37759: ST_TO_ADDR
// for i = 16 to 25 do
37760: LD_ADDR_VAR 0 4
37764: PUSH
37765: DOUBLE
37766: LD_INT 16
37768: DEC
37769: ST_TO_ADDR
37770: LD_INT 25
37772: PUSH
37773: FOR_TO
37774: IFFALSE 37847
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37776: LD_ADDR_VAR 0 3
37780: PUSH
37781: LD_VAR 0 3
37785: PUSH
37786: LD_INT 22
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 255
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 91
37805: PUSH
37806: LD_VAR 0 1
37810: PUSH
37811: LD_INT 6
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 30
37821: PUSH
37822: LD_VAR 0 4
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: PPUSH
37839: CALL_OW 69
37843: ADD
37844: ST_TO_ADDR
37845: GO 37773
37847: POP
37848: POP
// for i = 1 to tmp do
37849: LD_ADDR_VAR 0 4
37853: PUSH
37854: DOUBLE
37855: LD_INT 1
37857: DEC
37858: ST_TO_ADDR
37859: LD_VAR 0 3
37863: PUSH
37864: FOR_TO
37865: IFFALSE 37953
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37867: LD_ADDR_VAR 0 5
37871: PUSH
37872: LD_VAR 0 5
37876: PUSH
37877: LD_VAR 0 3
37881: PUSH
37882: LD_VAR 0 4
37886: ARRAY
37887: PPUSH
37888: CALL_OW 266
37892: PUSH
37893: LD_VAR 0 3
37897: PUSH
37898: LD_VAR 0 4
37902: ARRAY
37903: PPUSH
37904: CALL_OW 250
37908: PUSH
37909: LD_VAR 0 3
37913: PUSH
37914: LD_VAR 0 4
37918: ARRAY
37919: PPUSH
37920: CALL_OW 251
37924: PUSH
37925: LD_VAR 0 3
37929: PUSH
37930: LD_VAR 0 4
37934: ARRAY
37935: PPUSH
37936: CALL_OW 254
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: PUSH
37947: EMPTY
37948: LIST
37949: ADD
37950: ST_TO_ADDR
37951: GO 37864
37953: POP
37954: POP
// result := list ;
37955: LD_ADDR_VAR 0 2
37959: PUSH
37960: LD_VAR 0 5
37964: ST_TO_ADDR
// end ;
37965: LD_VAR 0 2
37969: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37970: LD_INT 0
37972: PPUSH
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
// if not factory then
37979: LD_VAR 0 1
37983: NOT
37984: IFFALSE 37988
// exit ;
37986: GO 38581
// if control = control_apeman then
37988: LD_VAR 0 4
37992: PUSH
37993: LD_INT 5
37995: EQUAL
37996: IFFALSE 38105
// begin tmp := UnitsInside ( factory ) ;
37998: LD_ADDR_VAR 0 8
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 313
38012: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38013: LD_VAR 0 8
38017: PPUSH
38018: LD_INT 25
38020: PUSH
38021: LD_INT 12
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PPUSH
38028: CALL_OW 72
38032: NOT
38033: IFFALSE 38043
// control := control_manual ;
38035: LD_ADDR_VAR 0 4
38039: PUSH
38040: LD_INT 1
38042: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38043: LD_ADDR_VAR 0 8
38047: PUSH
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL 37740 0 1
38057: ST_TO_ADDR
// if tmp then
38058: LD_VAR 0 8
38062: IFFALSE 38105
// begin for i in tmp do
38064: LD_ADDR_VAR 0 7
38068: PUSH
38069: LD_VAR 0 8
38073: PUSH
38074: FOR_IN
38075: IFFALSE 38103
// if i [ 1 ] = b_ext_radio then
38077: LD_VAR 0 7
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: PUSH
38086: LD_INT 22
38088: EQUAL
38089: IFFALSE 38101
// begin control := control_remote ;
38091: LD_ADDR_VAR 0 4
38095: PUSH
38096: LD_INT 2
38098: ST_TO_ADDR
// break ;
38099: GO 38103
// end ;
38101: GO 38074
38103: POP
38104: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38105: LD_VAR 0 1
38109: PPUSH
38110: LD_VAR 0 2
38114: PPUSH
38115: LD_VAR 0 3
38119: PPUSH
38120: LD_VAR 0 4
38124: PPUSH
38125: LD_VAR 0 5
38129: PPUSH
38130: CALL_OW 448
38134: IFFALSE 38169
// begin result := [ chassis , engine , control , weapon ] ;
38136: LD_ADDR_VAR 0 6
38140: PUSH
38141: LD_VAR 0 2
38145: PUSH
38146: LD_VAR 0 3
38150: PUSH
38151: LD_VAR 0 4
38155: PUSH
38156: LD_VAR 0 5
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: ST_TO_ADDR
// exit ;
38167: GO 38581
// end ; _chassis := AvailableChassisList ( factory ) ;
38169: LD_ADDR_VAR 0 9
38173: PUSH
38174: LD_VAR 0 1
38178: PPUSH
38179: CALL_OW 475
38183: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38184: LD_ADDR_VAR 0 11
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: CALL_OW 476
38198: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38199: LD_ADDR_VAR 0 12
38203: PUSH
38204: LD_VAR 0 1
38208: PPUSH
38209: CALL_OW 477
38213: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38214: LD_ADDR_VAR 0 10
38218: PUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 478
38228: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38229: LD_VAR 0 9
38233: NOT
38234: PUSH
38235: LD_VAR 0 11
38239: NOT
38240: OR
38241: PUSH
38242: LD_VAR 0 12
38246: NOT
38247: OR
38248: PUSH
38249: LD_VAR 0 10
38253: NOT
38254: OR
38255: IFFALSE 38290
// begin result := [ chassis , engine , control , weapon ] ;
38257: LD_ADDR_VAR 0 6
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_VAR 0 3
38271: PUSH
38272: LD_VAR 0 4
38276: PUSH
38277: LD_VAR 0 5
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: ST_TO_ADDR
// exit ;
38288: GO 38581
// end ; if not chassis in _chassis then
38290: LD_VAR 0 2
38294: PUSH
38295: LD_VAR 0 9
38299: IN
38300: NOT
38301: IFFALSE 38327
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38303: LD_ADDR_VAR 0 2
38307: PUSH
38308: LD_VAR 0 9
38312: PUSH
38313: LD_INT 1
38315: PPUSH
38316: LD_VAR 0 9
38320: PPUSH
38321: CALL_OW 12
38325: ARRAY
38326: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38327: LD_VAR 0 2
38331: PPUSH
38332: LD_VAR 0 3
38336: PPUSH
38337: CALL 38586 0 2
38341: NOT
38342: IFFALSE 38401
// repeat engine := _engine [ 1 ] ;
38344: LD_ADDR_VAR 0 3
38348: PUSH
38349: LD_VAR 0 11
38353: PUSH
38354: LD_INT 1
38356: ARRAY
38357: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38358: LD_ADDR_VAR 0 11
38362: PUSH
38363: LD_VAR 0 11
38367: PPUSH
38368: LD_INT 1
38370: PPUSH
38371: CALL_OW 3
38375: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38376: LD_VAR 0 2
38380: PPUSH
38381: LD_VAR 0 3
38385: PPUSH
38386: CALL 38586 0 2
38390: PUSH
38391: LD_VAR 0 11
38395: PUSH
38396: EMPTY
38397: EQUAL
38398: OR
38399: IFFALSE 38344
// if not control in _control then
38401: LD_VAR 0 4
38405: PUSH
38406: LD_VAR 0 12
38410: IN
38411: NOT
38412: IFFALSE 38438
// control := _control [ rand ( 1 , _control ) ] ;
38414: LD_ADDR_VAR 0 4
38418: PUSH
38419: LD_VAR 0 12
38423: PUSH
38424: LD_INT 1
38426: PPUSH
38427: LD_VAR 0 12
38431: PPUSH
38432: CALL_OW 12
38436: ARRAY
38437: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38438: LD_VAR 0 2
38442: PPUSH
38443: LD_VAR 0 5
38447: PPUSH
38448: CALL 38806 0 2
38452: NOT
38453: IFFALSE 38512
// repeat weapon := _weapon [ 1 ] ;
38455: LD_ADDR_VAR 0 5
38459: PUSH
38460: LD_VAR 0 10
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38469: LD_ADDR_VAR 0 10
38473: PUSH
38474: LD_VAR 0 10
38478: PPUSH
38479: LD_INT 1
38481: PPUSH
38482: CALL_OW 3
38486: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38487: LD_VAR 0 2
38491: PPUSH
38492: LD_VAR 0 5
38496: PPUSH
38497: CALL 38806 0 2
38501: PUSH
38502: LD_VAR 0 10
38506: PUSH
38507: EMPTY
38508: EQUAL
38509: OR
38510: IFFALSE 38455
// result := [ ] ;
38512: LD_ADDR_VAR 0 6
38516: PUSH
38517: EMPTY
38518: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: LD_VAR 0 4
38538: PPUSH
38539: LD_VAR 0 5
38543: PPUSH
38544: CALL_OW 448
38548: IFFALSE 38581
// result := [ chassis , engine , control , weapon ] ;
38550: LD_ADDR_VAR 0 6
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_VAR 0 3
38564: PUSH
38565: LD_VAR 0 4
38569: PUSH
38570: LD_VAR 0 5
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: ST_TO_ADDR
// end ;
38581: LD_VAR 0 6
38585: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38586: LD_INT 0
38588: PPUSH
// if not chassis or not engine then
38589: LD_VAR 0 1
38593: NOT
38594: PUSH
38595: LD_VAR 0 2
38599: NOT
38600: OR
38601: IFFALSE 38605
// exit ;
38603: GO 38801
// case engine of engine_solar :
38605: LD_VAR 0 2
38609: PUSH
38610: LD_INT 2
38612: DOUBLE
38613: EQUAL
38614: IFTRUE 38618
38616: GO 38656
38618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38619: LD_ADDR_VAR 0 3
38623: PUSH
38624: LD_INT 11
38626: PUSH
38627: LD_INT 12
38629: PUSH
38630: LD_INT 13
38632: PUSH
38633: LD_INT 14
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
38654: GO 38785
38656: LD_INT 1
38658: DOUBLE
38659: EQUAL
38660: IFTRUE 38664
38662: GO 38726
38664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38665: LD_ADDR_VAR 0 3
38669: PUSH
38670: LD_INT 11
38672: PUSH
38673: LD_INT 12
38675: PUSH
38676: LD_INT 13
38678: PUSH
38679: LD_INT 14
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 3
38690: PUSH
38691: LD_INT 4
38693: PUSH
38694: LD_INT 5
38696: PUSH
38697: LD_INT 21
38699: PUSH
38700: LD_INT 23
38702: PUSH
38703: LD_INT 22
38705: PUSH
38706: LD_INT 24
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
38724: GO 38785
38726: LD_INT 3
38728: DOUBLE
38729: EQUAL
38730: IFTRUE 38734
38732: GO 38784
38734: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38735: LD_ADDR_VAR 0 3
38739: PUSH
38740: LD_INT 13
38742: PUSH
38743: LD_INT 14
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: LD_INT 4
38754: PUSH
38755: LD_INT 5
38757: PUSH
38758: LD_INT 21
38760: PUSH
38761: LD_INT 22
38763: PUSH
38764: LD_INT 23
38766: PUSH
38767: LD_INT 24
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
38782: GO 38785
38784: POP
// result := ( chassis in result ) ;
38785: LD_ADDR_VAR 0 3
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_VAR 0 3
38799: IN
38800: ST_TO_ADDR
// end ;
38801: LD_VAR 0 3
38805: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38806: LD_INT 0
38808: PPUSH
// if not chassis or not weapon then
38809: LD_VAR 0 1
38813: NOT
38814: PUSH
38815: LD_VAR 0 2
38819: NOT
38820: OR
38821: IFFALSE 38825
// exit ;
38823: GO 39887
// case weapon of us_machine_gun :
38825: LD_VAR 0 2
38829: PUSH
38830: LD_INT 2
38832: DOUBLE
38833: EQUAL
38834: IFTRUE 38838
38836: GO 38868
38838: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38839: LD_ADDR_VAR 0 3
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: LD_INT 4
38855: PUSH
38856: LD_INT 5
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
38866: GO 39871
38868: LD_INT 3
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38876
38874: GO 38906
38876: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38877: LD_ADDR_VAR 0 3
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: LD_INT 4
38893: PUSH
38894: LD_INT 5
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: ST_TO_ADDR
38904: GO 39871
38906: LD_INT 11
38908: DOUBLE
38909: EQUAL
38910: IFTRUE 38914
38912: GO 38944
38914: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: LD_INT 4
38931: PUSH
38932: LD_INT 5
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
38942: GO 39871
38944: LD_INT 4
38946: DOUBLE
38947: EQUAL
38948: IFTRUE 38952
38950: GO 38978
38952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38953: LD_ADDR_VAR 0 3
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 4
38966: PUSH
38967: LD_INT 5
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: ST_TO_ADDR
38976: GO 39871
38978: LD_INT 5
38980: DOUBLE
38981: EQUAL
38982: IFTRUE 38986
38984: GO 39012
38986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38987: LD_ADDR_VAR 0 3
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 3
38997: PUSH
38998: LD_INT 4
39000: PUSH
39001: LD_INT 5
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: ST_TO_ADDR
39010: GO 39871
39012: LD_INT 9
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 39046
39020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39021: LD_ADDR_VAR 0 3
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: LD_INT 5
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
39044: GO 39871
39046: LD_INT 7
39048: DOUBLE
39049: EQUAL
39050: IFTRUE 39054
39052: GO 39080
39054: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: LD_INT 4
39068: PUSH
39069: LD_INT 5
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: ST_TO_ADDR
39078: GO 39871
39080: LD_INT 12
39082: DOUBLE
39083: EQUAL
39084: IFTRUE 39088
39086: GO 39114
39088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: LD_INT 4
39102: PUSH
39103: LD_INT 5
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
39112: GO 39871
39114: LD_INT 13
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39122
39120: GO 39148
39122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39123: LD_ADDR_VAR 0 3
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: LD_INT 4
39136: PUSH
39137: LD_INT 5
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: ST_TO_ADDR
39146: GO 39871
39148: LD_INT 14
39150: DOUBLE
39151: EQUAL
39152: IFTRUE 39156
39154: GO 39174
39156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39157: LD_ADDR_VAR 0 3
39161: PUSH
39162: LD_INT 4
39164: PUSH
39165: LD_INT 5
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: ST_TO_ADDR
39172: GO 39871
39174: LD_INT 6
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39182
39180: GO 39200
39182: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39183: LD_ADDR_VAR 0 3
39187: PUSH
39188: LD_INT 4
39190: PUSH
39191: LD_INT 5
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: ST_TO_ADDR
39198: GO 39871
39200: LD_INT 10
39202: DOUBLE
39203: EQUAL
39204: IFTRUE 39208
39206: GO 39226
39208: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_INT 4
39216: PUSH
39217: LD_INT 5
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: ST_TO_ADDR
39224: GO 39871
39226: LD_INT 22
39228: DOUBLE
39229: EQUAL
39230: IFTRUE 39234
39232: GO 39260
39234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39235: LD_ADDR_VAR 0 3
39239: PUSH
39240: LD_INT 11
39242: PUSH
39243: LD_INT 12
39245: PUSH
39246: LD_INT 13
39248: PUSH
39249: LD_INT 14
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
39258: GO 39871
39260: LD_INT 23
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39294
39268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_INT 11
39276: PUSH
39277: LD_INT 12
39279: PUSH
39280: LD_INT 13
39282: PUSH
39283: LD_INT 14
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
39292: GO 39871
39294: LD_INT 24
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39328
39302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 11
39310: PUSH
39311: LD_INT 12
39313: PUSH
39314: LD_INT 13
39316: PUSH
39317: LD_INT 14
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
39326: GO 39871
39328: LD_INT 30
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39362
39336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 11
39344: PUSH
39345: LD_INT 12
39347: PUSH
39348: LD_INT 13
39350: PUSH
39351: LD_INT 14
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
39360: GO 39871
39362: LD_INT 25
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39388
39370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 13
39378: PUSH
39379: LD_INT 14
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: ST_TO_ADDR
39386: GO 39871
39388: LD_INT 27
39390: DOUBLE
39391: EQUAL
39392: IFTRUE 39396
39394: GO 39414
39396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39397: LD_ADDR_VAR 0 3
39401: PUSH
39402: LD_INT 13
39404: PUSH
39405: LD_INT 14
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: ST_TO_ADDR
39412: GO 39871
39414: LD_EXP 41
39418: DOUBLE
39419: EQUAL
39420: IFTRUE 39424
39422: GO 39450
39424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39425: LD_ADDR_VAR 0 3
39429: PUSH
39430: LD_INT 11
39432: PUSH
39433: LD_INT 12
39435: PUSH
39436: LD_INT 13
39438: PUSH
39439: LD_INT 14
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
39448: GO 39871
39450: LD_INT 28
39452: DOUBLE
39453: EQUAL
39454: IFTRUE 39458
39456: GO 39476
39458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39459: LD_ADDR_VAR 0 3
39463: PUSH
39464: LD_INT 13
39466: PUSH
39467: LD_INT 14
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: ST_TO_ADDR
39474: GO 39871
39476: LD_INT 29
39478: DOUBLE
39479: EQUAL
39480: IFTRUE 39484
39482: GO 39502
39484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39485: LD_ADDR_VAR 0 3
39489: PUSH
39490: LD_INT 13
39492: PUSH
39493: LD_INT 14
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: ST_TO_ADDR
39500: GO 39871
39502: LD_INT 31
39504: DOUBLE
39505: EQUAL
39506: IFTRUE 39510
39508: GO 39528
39510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39511: LD_ADDR_VAR 0 3
39515: PUSH
39516: LD_INT 13
39518: PUSH
39519: LD_INT 14
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: ST_TO_ADDR
39526: GO 39871
39528: LD_INT 26
39530: DOUBLE
39531: EQUAL
39532: IFTRUE 39536
39534: GO 39554
39536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_INT 13
39544: PUSH
39545: LD_INT 14
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: ST_TO_ADDR
39552: GO 39871
39554: LD_INT 42
39556: DOUBLE
39557: EQUAL
39558: IFTRUE 39562
39560: GO 39588
39562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_INT 21
39570: PUSH
39571: LD_INT 22
39573: PUSH
39574: LD_INT 23
39576: PUSH
39577: LD_INT 24
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
39586: GO 39871
39588: LD_INT 43
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39596
39594: GO 39622
39596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_INT 21
39604: PUSH
39605: LD_INT 22
39607: PUSH
39608: LD_INT 23
39610: PUSH
39611: LD_INT 24
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
39620: GO 39871
39622: LD_INT 44
39624: DOUBLE
39625: EQUAL
39626: IFTRUE 39630
39628: GO 39656
39630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39631: LD_ADDR_VAR 0 3
39635: PUSH
39636: LD_INT 21
39638: PUSH
39639: LD_INT 22
39641: PUSH
39642: LD_INT 23
39644: PUSH
39645: LD_INT 24
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: ST_TO_ADDR
39654: GO 39871
39656: LD_INT 45
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39690
39664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39665: LD_ADDR_VAR 0 3
39669: PUSH
39670: LD_INT 21
39672: PUSH
39673: LD_INT 22
39675: PUSH
39676: LD_INT 23
39678: PUSH
39679: LD_INT 24
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: ST_TO_ADDR
39688: GO 39871
39690: LD_INT 49
39692: DOUBLE
39693: EQUAL
39694: IFTRUE 39698
39696: GO 39724
39698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_INT 21
39706: PUSH
39707: LD_INT 22
39709: PUSH
39710: LD_INT 23
39712: PUSH
39713: LD_INT 24
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
39722: GO 39871
39724: LD_INT 51
39726: DOUBLE
39727: EQUAL
39728: IFTRUE 39732
39730: GO 39758
39732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39733: LD_ADDR_VAR 0 3
39737: PUSH
39738: LD_INT 21
39740: PUSH
39741: LD_INT 22
39743: PUSH
39744: LD_INT 23
39746: PUSH
39747: LD_INT 24
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: ST_TO_ADDR
39756: GO 39871
39758: LD_INT 52
39760: DOUBLE
39761: EQUAL
39762: IFTRUE 39766
39764: GO 39792
39766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39767: LD_ADDR_VAR 0 3
39771: PUSH
39772: LD_INT 21
39774: PUSH
39775: LD_INT 22
39777: PUSH
39778: LD_INT 23
39780: PUSH
39781: LD_INT 24
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: ST_TO_ADDR
39790: GO 39871
39792: LD_INT 53
39794: DOUBLE
39795: EQUAL
39796: IFTRUE 39800
39798: GO 39818
39800: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39801: LD_ADDR_VAR 0 3
39805: PUSH
39806: LD_INT 23
39808: PUSH
39809: LD_INT 24
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: ST_TO_ADDR
39816: GO 39871
39818: LD_INT 46
39820: DOUBLE
39821: EQUAL
39822: IFTRUE 39826
39824: GO 39844
39826: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39827: LD_ADDR_VAR 0 3
39831: PUSH
39832: LD_INT 23
39834: PUSH
39835: LD_INT 24
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: ST_TO_ADDR
39842: GO 39871
39844: LD_INT 47
39846: DOUBLE
39847: EQUAL
39848: IFTRUE 39852
39850: GO 39870
39852: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39853: LD_ADDR_VAR 0 3
39857: PUSH
39858: LD_INT 23
39860: PUSH
39861: LD_INT 24
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: ST_TO_ADDR
39868: GO 39871
39870: POP
// result := ( chassis in result ) ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_VAR 0 1
39880: PUSH
39881: LD_VAR 0 3
39885: IN
39886: ST_TO_ADDR
// end ;
39887: LD_VAR 0 3
39891: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39892: LD_INT 0
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
// result := array ;
39901: LD_ADDR_VAR 0 5
39905: PUSH
39906: LD_VAR 0 1
39910: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39911: LD_VAR 0 1
39915: NOT
39916: PUSH
39917: LD_VAR 0 2
39921: NOT
39922: OR
39923: PUSH
39924: LD_VAR 0 3
39928: NOT
39929: OR
39930: PUSH
39931: LD_VAR 0 2
39935: PUSH
39936: LD_VAR 0 1
39940: GREATER
39941: OR
39942: PUSH
39943: LD_VAR 0 3
39947: PUSH
39948: LD_VAR 0 1
39952: GREATER
39953: OR
39954: IFFALSE 39958
// exit ;
39956: GO 40254
// if direction then
39958: LD_VAR 0 4
39962: IFFALSE 40026
// begin d := 1 ;
39964: LD_ADDR_VAR 0 9
39968: PUSH
39969: LD_INT 1
39971: ST_TO_ADDR
// if i_from > i_to then
39972: LD_VAR 0 2
39976: PUSH
39977: LD_VAR 0 3
39981: GREATER
39982: IFFALSE 40008
// length := ( array - i_from ) + i_to else
39984: LD_ADDR_VAR 0 11
39988: PUSH
39989: LD_VAR 0 1
39993: PUSH
39994: LD_VAR 0 2
39998: MINUS
39999: PUSH
40000: LD_VAR 0 3
40004: PLUS
40005: ST_TO_ADDR
40006: GO 40024
// length := i_to - i_from ;
40008: LD_ADDR_VAR 0 11
40012: PUSH
40013: LD_VAR 0 3
40017: PUSH
40018: LD_VAR 0 2
40022: MINUS
40023: ST_TO_ADDR
// end else
40024: GO 40087
// begin d := - 1 ;
40026: LD_ADDR_VAR 0 9
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: ST_TO_ADDR
// if i_from > i_to then
40035: LD_VAR 0 2
40039: PUSH
40040: LD_VAR 0 3
40044: GREATER
40045: IFFALSE 40065
// length := i_from - i_to else
40047: LD_ADDR_VAR 0 11
40051: PUSH
40052: LD_VAR 0 2
40056: PUSH
40057: LD_VAR 0 3
40061: MINUS
40062: ST_TO_ADDR
40063: GO 40087
// length := ( array - i_to ) + i_from ;
40065: LD_ADDR_VAR 0 11
40069: PUSH
40070: LD_VAR 0 1
40074: PUSH
40075: LD_VAR 0 3
40079: MINUS
40080: PUSH
40081: LD_VAR 0 2
40085: PLUS
40086: ST_TO_ADDR
// end ; if not length then
40087: LD_VAR 0 11
40091: NOT
40092: IFFALSE 40096
// exit ;
40094: GO 40254
// tmp := array ;
40096: LD_ADDR_VAR 0 10
40100: PUSH
40101: LD_VAR 0 1
40105: ST_TO_ADDR
// for i = 1 to length do
40106: LD_ADDR_VAR 0 6
40110: PUSH
40111: DOUBLE
40112: LD_INT 1
40114: DEC
40115: ST_TO_ADDR
40116: LD_VAR 0 11
40120: PUSH
40121: FOR_TO
40122: IFFALSE 40242
// begin for j = 1 to array do
40124: LD_ADDR_VAR 0 7
40128: PUSH
40129: DOUBLE
40130: LD_INT 1
40132: DEC
40133: ST_TO_ADDR
40134: LD_VAR 0 1
40138: PUSH
40139: FOR_TO
40140: IFFALSE 40228
// begin k := j + d ;
40142: LD_ADDR_VAR 0 8
40146: PUSH
40147: LD_VAR 0 7
40151: PUSH
40152: LD_VAR 0 9
40156: PLUS
40157: ST_TO_ADDR
// if k > array then
40158: LD_VAR 0 8
40162: PUSH
40163: LD_VAR 0 1
40167: GREATER
40168: IFFALSE 40178
// k := 1 ;
40170: LD_ADDR_VAR 0 8
40174: PUSH
40175: LD_INT 1
40177: ST_TO_ADDR
// if not k then
40178: LD_VAR 0 8
40182: NOT
40183: IFFALSE 40195
// k := array ;
40185: LD_ADDR_VAR 0 8
40189: PUSH
40190: LD_VAR 0 1
40194: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40195: LD_ADDR_VAR 0 10
40199: PUSH
40200: LD_VAR 0 10
40204: PPUSH
40205: LD_VAR 0 8
40209: PPUSH
40210: LD_VAR 0 1
40214: PUSH
40215: LD_VAR 0 7
40219: ARRAY
40220: PPUSH
40221: CALL_OW 1
40225: ST_TO_ADDR
// end ;
40226: GO 40139
40228: POP
40229: POP
// array := tmp ;
40230: LD_ADDR_VAR 0 1
40234: PUSH
40235: LD_VAR 0 10
40239: ST_TO_ADDR
// end ;
40240: GO 40121
40242: POP
40243: POP
// result := array ;
40244: LD_ADDR_VAR 0 5
40248: PUSH
40249: LD_VAR 0 1
40253: ST_TO_ADDR
// end ;
40254: LD_VAR 0 5
40258: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40259: LD_INT 0
40261: PPUSH
40262: PPUSH
// result := 0 ;
40263: LD_ADDR_VAR 0 3
40267: PUSH
40268: LD_INT 0
40270: ST_TO_ADDR
// if not array or not value in array then
40271: LD_VAR 0 1
40275: NOT
40276: PUSH
40277: LD_VAR 0 2
40281: PUSH
40282: LD_VAR 0 1
40286: IN
40287: NOT
40288: OR
40289: IFFALSE 40293
// exit ;
40291: GO 40347
// for i = 1 to array do
40293: LD_ADDR_VAR 0 4
40297: PUSH
40298: DOUBLE
40299: LD_INT 1
40301: DEC
40302: ST_TO_ADDR
40303: LD_VAR 0 1
40307: PUSH
40308: FOR_TO
40309: IFFALSE 40345
// if value = array [ i ] then
40311: LD_VAR 0 2
40315: PUSH
40316: LD_VAR 0 1
40320: PUSH
40321: LD_VAR 0 4
40325: ARRAY
40326: EQUAL
40327: IFFALSE 40343
// begin result := i ;
40329: LD_ADDR_VAR 0 3
40333: PUSH
40334: LD_VAR 0 4
40338: ST_TO_ADDR
// exit ;
40339: POP
40340: POP
40341: GO 40347
// end ;
40343: GO 40308
40345: POP
40346: POP
// end ;
40347: LD_VAR 0 3
40351: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40352: LD_INT 0
40354: PPUSH
// vc_chassis := chassis ;
40355: LD_ADDR_OWVAR 37
40359: PUSH
40360: LD_VAR 0 1
40364: ST_TO_ADDR
// vc_engine := engine ;
40365: LD_ADDR_OWVAR 39
40369: PUSH
40370: LD_VAR 0 2
40374: ST_TO_ADDR
// vc_control := control ;
40375: LD_ADDR_OWVAR 38
40379: PUSH
40380: LD_VAR 0 3
40384: ST_TO_ADDR
// vc_weapon := weapon ;
40385: LD_ADDR_OWVAR 40
40389: PUSH
40390: LD_VAR 0 4
40394: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40395: LD_ADDR_OWVAR 41
40399: PUSH
40400: LD_VAR 0 5
40404: ST_TO_ADDR
// end ;
40405: LD_VAR 0 6
40409: RET
// export function WantPlant ( unit ) ; var task ; begin
40410: LD_INT 0
40412: PPUSH
40413: PPUSH
// result := false ;
40414: LD_ADDR_VAR 0 2
40418: PUSH
40419: LD_INT 0
40421: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: LD_VAR 0 1
40431: PPUSH
40432: CALL_OW 437
40436: ST_TO_ADDR
// if task then
40437: LD_VAR 0 3
40441: IFFALSE 40469
// if task [ 1 ] [ 1 ] = p then
40443: LD_VAR 0 3
40447: PUSH
40448: LD_INT 1
40450: ARRAY
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: PUSH
40456: LD_STRING p
40458: EQUAL
40459: IFFALSE 40469
// result := true ;
40461: LD_ADDR_VAR 0 2
40465: PUSH
40466: LD_INT 1
40468: ST_TO_ADDR
// end ;
40469: LD_VAR 0 2
40473: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40474: LD_INT 0
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
// if pos < 1 then
40480: LD_VAR 0 2
40484: PUSH
40485: LD_INT 1
40487: LESS
40488: IFFALSE 40492
// exit ;
40490: GO 40795
// if pos = 1 then
40492: LD_VAR 0 2
40496: PUSH
40497: LD_INT 1
40499: EQUAL
40500: IFFALSE 40533
// result := Replace ( arr , pos [ 1 ] , value ) else
40502: LD_ADDR_VAR 0 4
40506: PUSH
40507: LD_VAR 0 1
40511: PPUSH
40512: LD_VAR 0 2
40516: PUSH
40517: LD_INT 1
40519: ARRAY
40520: PPUSH
40521: LD_VAR 0 3
40525: PPUSH
40526: CALL_OW 1
40530: ST_TO_ADDR
40531: GO 40795
// begin tmp := arr ;
40533: LD_ADDR_VAR 0 6
40537: PUSH
40538: LD_VAR 0 1
40542: ST_TO_ADDR
// s_arr := [ tmp ] ;
40543: LD_ADDR_VAR 0 7
40547: PUSH
40548: LD_VAR 0 6
40552: PUSH
40553: EMPTY
40554: LIST
40555: ST_TO_ADDR
// for i = 1 to pos - 1 do
40556: LD_ADDR_VAR 0 5
40560: PUSH
40561: DOUBLE
40562: LD_INT 1
40564: DEC
40565: ST_TO_ADDR
40566: LD_VAR 0 2
40570: PUSH
40571: LD_INT 1
40573: MINUS
40574: PUSH
40575: FOR_TO
40576: IFFALSE 40621
// begin tmp := tmp [ pos [ i ] ] ;
40578: LD_ADDR_VAR 0 6
40582: PUSH
40583: LD_VAR 0 6
40587: PUSH
40588: LD_VAR 0 2
40592: PUSH
40593: LD_VAR 0 5
40597: ARRAY
40598: ARRAY
40599: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40600: LD_ADDR_VAR 0 7
40604: PUSH
40605: LD_VAR 0 7
40609: PUSH
40610: LD_VAR 0 6
40614: PUSH
40615: EMPTY
40616: LIST
40617: ADD
40618: ST_TO_ADDR
// end ;
40619: GO 40575
40621: POP
40622: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40623: LD_ADDR_VAR 0 6
40627: PUSH
40628: LD_VAR 0 6
40632: PPUSH
40633: LD_VAR 0 2
40637: PUSH
40638: LD_VAR 0 2
40642: ARRAY
40643: PPUSH
40644: LD_VAR 0 3
40648: PPUSH
40649: CALL_OW 1
40653: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40654: LD_ADDR_VAR 0 7
40658: PUSH
40659: LD_VAR 0 7
40663: PPUSH
40664: LD_VAR 0 7
40668: PPUSH
40669: LD_VAR 0 6
40673: PPUSH
40674: CALL_OW 1
40678: ST_TO_ADDR
// for i = s_arr downto 2 do
40679: LD_ADDR_VAR 0 5
40683: PUSH
40684: DOUBLE
40685: LD_VAR 0 7
40689: INC
40690: ST_TO_ADDR
40691: LD_INT 2
40693: PUSH
40694: FOR_DOWNTO
40695: IFFALSE 40779
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40697: LD_ADDR_VAR 0 6
40701: PUSH
40702: LD_VAR 0 7
40706: PUSH
40707: LD_VAR 0 5
40711: PUSH
40712: LD_INT 1
40714: MINUS
40715: ARRAY
40716: PPUSH
40717: LD_VAR 0 2
40721: PUSH
40722: LD_VAR 0 5
40726: PUSH
40727: LD_INT 1
40729: MINUS
40730: ARRAY
40731: PPUSH
40732: LD_VAR 0 7
40736: PUSH
40737: LD_VAR 0 5
40741: ARRAY
40742: PPUSH
40743: CALL_OW 1
40747: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40748: LD_ADDR_VAR 0 7
40752: PUSH
40753: LD_VAR 0 7
40757: PPUSH
40758: LD_VAR 0 5
40762: PUSH
40763: LD_INT 1
40765: MINUS
40766: PPUSH
40767: LD_VAR 0 6
40771: PPUSH
40772: CALL_OW 1
40776: ST_TO_ADDR
// end ;
40777: GO 40694
40779: POP
40780: POP
// result := s_arr [ 1 ] ;
40781: LD_ADDR_VAR 0 4
40785: PUSH
40786: LD_VAR 0 7
40790: PUSH
40791: LD_INT 1
40793: ARRAY
40794: ST_TO_ADDR
// end ; end ;
40795: LD_VAR 0 4
40799: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40800: LD_INT 0
40802: PPUSH
40803: PPUSH
// if not list then
40804: LD_VAR 0 1
40808: NOT
40809: IFFALSE 40813
// exit ;
40811: GO 40904
// i := list [ pos1 ] ;
40813: LD_ADDR_VAR 0 5
40817: PUSH
40818: LD_VAR 0 1
40822: PUSH
40823: LD_VAR 0 2
40827: ARRAY
40828: ST_TO_ADDR
// if not i then
40829: LD_VAR 0 5
40833: NOT
40834: IFFALSE 40838
// exit ;
40836: GO 40904
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40838: LD_ADDR_VAR 0 1
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: LD_VAR 0 2
40852: PPUSH
40853: LD_VAR 0 1
40857: PUSH
40858: LD_VAR 0 3
40862: ARRAY
40863: PPUSH
40864: CALL_OW 1
40868: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40869: LD_ADDR_VAR 0 1
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: LD_VAR 0 5
40888: PPUSH
40889: CALL_OW 1
40893: ST_TO_ADDR
// result := list ;
40894: LD_ADDR_VAR 0 4
40898: PUSH
40899: LD_VAR 0 1
40903: ST_TO_ADDR
// end ;
40904: LD_VAR 0 4
40908: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40909: LD_INT 0
40911: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40912: LD_ADDR_VAR 0 5
40916: PUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 250
40926: PPUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 251
40936: PPUSH
40937: LD_VAR 0 2
40941: PPUSH
40942: LD_VAR 0 3
40946: PPUSH
40947: LD_VAR 0 4
40951: PPUSH
40952: CALL 40962 0 5
40956: ST_TO_ADDR
// end ;
40957: LD_VAR 0 5
40961: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40962: LD_INT 0
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
// if not list then
40968: LD_VAR 0 3
40972: NOT
40973: IFFALSE 40977
// exit ;
40975: GO 41365
// result := [ ] ;
40977: LD_ADDR_VAR 0 6
40981: PUSH
40982: EMPTY
40983: ST_TO_ADDR
// for i in list do
40984: LD_ADDR_VAR 0 7
40988: PUSH
40989: LD_VAR 0 3
40993: PUSH
40994: FOR_IN
40995: IFFALSE 41197
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40997: LD_ADDR_VAR 0 9
41001: PUSH
41002: LD_VAR 0 7
41006: PPUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: LD_VAR 0 2
41016: PPUSH
41017: CALL_OW 297
41021: ST_TO_ADDR
// if not result then
41022: LD_VAR 0 6
41026: NOT
41027: IFFALSE 41053
// result := [ [ i , tmp ] ] else
41029: LD_ADDR_VAR 0 6
41033: PUSH
41034: LD_VAR 0 7
41038: PUSH
41039: LD_VAR 0 9
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: ST_TO_ADDR
41051: GO 41195
// begin if result [ result ] [ 2 ] < tmp then
41053: LD_VAR 0 6
41057: PUSH
41058: LD_VAR 0 6
41062: ARRAY
41063: PUSH
41064: LD_INT 2
41066: ARRAY
41067: PUSH
41068: LD_VAR 0 9
41072: LESS
41073: IFFALSE 41115
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41075: LD_ADDR_VAR 0 6
41079: PUSH
41080: LD_VAR 0 6
41084: PPUSH
41085: LD_VAR 0 6
41089: PUSH
41090: LD_INT 1
41092: PLUS
41093: PPUSH
41094: LD_VAR 0 7
41098: PUSH
41099: LD_VAR 0 9
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PPUSH
41108: CALL_OW 2
41112: ST_TO_ADDR
41113: GO 41195
// for j = 1 to result do
41115: LD_ADDR_VAR 0 8
41119: PUSH
41120: DOUBLE
41121: LD_INT 1
41123: DEC
41124: ST_TO_ADDR
41125: LD_VAR 0 6
41129: PUSH
41130: FOR_TO
41131: IFFALSE 41193
// begin if tmp < result [ j ] [ 2 ] then
41133: LD_VAR 0 9
41137: PUSH
41138: LD_VAR 0 6
41142: PUSH
41143: LD_VAR 0 8
41147: ARRAY
41148: PUSH
41149: LD_INT 2
41151: ARRAY
41152: LESS
41153: IFFALSE 41191
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41155: LD_ADDR_VAR 0 6
41159: PUSH
41160: LD_VAR 0 6
41164: PPUSH
41165: LD_VAR 0 8
41169: PPUSH
41170: LD_VAR 0 7
41174: PUSH
41175: LD_VAR 0 9
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PPUSH
41184: CALL_OW 2
41188: ST_TO_ADDR
// break ;
41189: GO 41193
// end ; end ;
41191: GO 41130
41193: POP
41194: POP
// end ; end ;
41195: GO 40994
41197: POP
41198: POP
// if result and not asc then
41199: LD_VAR 0 6
41203: PUSH
41204: LD_VAR 0 4
41208: NOT
41209: AND
41210: IFFALSE 41285
// begin tmp := result ;
41212: LD_ADDR_VAR 0 9
41216: PUSH
41217: LD_VAR 0 6
41221: ST_TO_ADDR
// for i = tmp downto 1 do
41222: LD_ADDR_VAR 0 7
41226: PUSH
41227: DOUBLE
41228: LD_VAR 0 9
41232: INC
41233: ST_TO_ADDR
41234: LD_INT 1
41236: PUSH
41237: FOR_DOWNTO
41238: IFFALSE 41283
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41240: LD_ADDR_VAR 0 6
41244: PUSH
41245: LD_VAR 0 6
41249: PPUSH
41250: LD_VAR 0 9
41254: PUSH
41255: LD_VAR 0 7
41259: MINUS
41260: PUSH
41261: LD_INT 1
41263: PLUS
41264: PPUSH
41265: LD_VAR 0 9
41269: PUSH
41270: LD_VAR 0 7
41274: ARRAY
41275: PPUSH
41276: CALL_OW 1
41280: ST_TO_ADDR
41281: GO 41237
41283: POP
41284: POP
// end ; tmp := [ ] ;
41285: LD_ADDR_VAR 0 9
41289: PUSH
41290: EMPTY
41291: ST_TO_ADDR
// if mode then
41292: LD_VAR 0 5
41296: IFFALSE 41365
// begin for i = 1 to result do
41298: LD_ADDR_VAR 0 7
41302: PUSH
41303: DOUBLE
41304: LD_INT 1
41306: DEC
41307: ST_TO_ADDR
41308: LD_VAR 0 6
41312: PUSH
41313: FOR_TO
41314: IFFALSE 41353
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41316: LD_ADDR_VAR 0 9
41320: PUSH
41321: LD_VAR 0 9
41325: PPUSH
41326: LD_VAR 0 7
41330: PPUSH
41331: LD_VAR 0 6
41335: PUSH
41336: LD_VAR 0 7
41340: ARRAY
41341: PUSH
41342: LD_INT 1
41344: ARRAY
41345: PPUSH
41346: CALL_OW 1
41350: ST_TO_ADDR
41351: GO 41313
41353: POP
41354: POP
// result := tmp ;
41355: LD_ADDR_VAR 0 6
41359: PUSH
41360: LD_VAR 0 9
41364: ST_TO_ADDR
// end ; end ;
41365: LD_VAR 0 6
41369: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41378: LD_ADDR_VAR 0 5
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// if not x or not y then
41400: LD_VAR 0 2
41404: NOT
41405: PUSH
41406: LD_VAR 0 3
41410: NOT
41411: OR
41412: IFFALSE 41416
// exit ;
41414: GO 43068
// if not range then
41416: LD_VAR 0 4
41420: NOT
41421: IFFALSE 41431
// range := 10 ;
41423: LD_ADDR_VAR 0 4
41427: PUSH
41428: LD_INT 10
41430: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41431: LD_ADDR_VAR 0 8
41435: PUSH
41436: LD_INT 81
41438: PUSH
41439: LD_VAR 0 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 92
41450: PUSH
41451: LD_VAR 0 2
41455: PUSH
41456: LD_VAR 0 3
41460: PUSH
41461: LD_VAR 0 4
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: LD_INT 21
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: LIST
41493: PPUSH
41494: CALL_OW 69
41498: ST_TO_ADDR
// if not tmp then
41499: LD_VAR 0 8
41503: NOT
41504: IFFALSE 41508
// exit ;
41506: GO 43068
// for i in tmp do
41508: LD_ADDR_VAR 0 6
41512: PUSH
41513: LD_VAR 0 8
41517: PUSH
41518: FOR_IN
41519: IFFALSE 43043
// begin points := [ 0 , 0 , 0 ] ;
41521: LD_ADDR_VAR 0 9
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// bpoints := 1 ;
41540: LD_ADDR_VAR 0 10
41544: PUSH
41545: LD_INT 1
41547: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41548: LD_VAR 0 6
41552: PPUSH
41553: CALL_OW 247
41557: PUSH
41558: LD_INT 1
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 42144
41566: POP
// begin if GetClass ( i ) = 1 then
41567: LD_VAR 0 6
41571: PPUSH
41572: CALL_OW 257
41576: PUSH
41577: LD_INT 1
41579: EQUAL
41580: IFFALSE 41601
// points := [ 10 , 5 , 3 ] ;
41582: LD_ADDR_VAR 0 9
41586: PUSH
41587: LD_INT 10
41589: PUSH
41590: LD_INT 5
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41601: LD_VAR 0 6
41605: PPUSH
41606: CALL_OW 257
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: LD_INT 4
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: IN
41625: IFFALSE 41646
// points := [ 3 , 2 , 1 ] ;
41627: LD_ADDR_VAR 0 9
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41646: LD_VAR 0 6
41650: PPUSH
41651: CALL_OW 257
41655: PUSH
41656: LD_INT 5
41658: EQUAL
41659: IFFALSE 41680
// points := [ 130 , 5 , 2 ] ;
41661: LD_ADDR_VAR 0 9
41665: PUSH
41666: LD_INT 130
41668: PUSH
41669: LD_INT 5
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41680: LD_VAR 0 6
41684: PPUSH
41685: CALL_OW 257
41689: PUSH
41690: LD_INT 8
41692: EQUAL
41693: IFFALSE 41714
// points := [ 35 , 35 , 30 ] ;
41695: LD_ADDR_VAR 0 9
41699: PUSH
41700: LD_INT 35
41702: PUSH
41703: LD_INT 35
41705: PUSH
41706: LD_INT 30
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41714: LD_VAR 0 6
41718: PPUSH
41719: CALL_OW 257
41723: PUSH
41724: LD_INT 9
41726: EQUAL
41727: IFFALSE 41748
// points := [ 20 , 55 , 40 ] ;
41729: LD_ADDR_VAR 0 9
41733: PUSH
41734: LD_INT 20
41736: PUSH
41737: LD_INT 55
41739: PUSH
41740: LD_INT 40
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41748: LD_VAR 0 6
41752: PPUSH
41753: CALL_OW 257
41757: PUSH
41758: LD_INT 12
41760: PUSH
41761: LD_INT 16
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: IN
41768: IFFALSE 41789
// points := [ 5 , 3 , 2 ] ;
41770: LD_ADDR_VAR 0 9
41774: PUSH
41775: LD_INT 5
41777: PUSH
41778: LD_INT 3
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41789: LD_VAR 0 6
41793: PPUSH
41794: CALL_OW 257
41798: PUSH
41799: LD_INT 17
41801: EQUAL
41802: IFFALSE 41823
// points := [ 100 , 50 , 75 ] ;
41804: LD_ADDR_VAR 0 9
41808: PUSH
41809: LD_INT 100
41811: PUSH
41812: LD_INT 50
41814: PUSH
41815: LD_INT 75
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41823: LD_VAR 0 6
41827: PPUSH
41828: CALL_OW 257
41832: PUSH
41833: LD_INT 15
41835: EQUAL
41836: IFFALSE 41857
// points := [ 10 , 5 , 3 ] ;
41838: LD_ADDR_VAR 0 9
41842: PUSH
41843: LD_INT 10
41845: PUSH
41846: LD_INT 5
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41857: LD_VAR 0 6
41861: PPUSH
41862: CALL_OW 257
41866: PUSH
41867: LD_INT 14
41869: EQUAL
41870: IFFALSE 41891
// points := [ 10 , 0 , 0 ] ;
41872: LD_ADDR_VAR 0 9
41876: PUSH
41877: LD_INT 10
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41891: LD_VAR 0 6
41895: PPUSH
41896: CALL_OW 257
41900: PUSH
41901: LD_INT 11
41903: EQUAL
41904: IFFALSE 41925
// points := [ 30 , 10 , 5 ] ;
41906: LD_ADDR_VAR 0 9
41910: PUSH
41911: LD_INT 30
41913: PUSH
41914: LD_INT 10
41916: PUSH
41917: LD_INT 5
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41925: LD_VAR 0 1
41929: PPUSH
41930: LD_INT 5
41932: PPUSH
41933: CALL_OW 321
41937: PUSH
41938: LD_INT 2
41940: EQUAL
41941: IFFALSE 41958
// bpoints := bpoints * 1.8 ;
41943: LD_ADDR_VAR 0 10
41947: PUSH
41948: LD_VAR 0 10
41952: PUSH
41953: LD_REAL  1.80000000000000E+0000
41956: MUL
41957: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41958: LD_VAR 0 6
41962: PPUSH
41963: CALL_OW 257
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 4
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: IN
41986: PUSH
41987: LD_VAR 0 1
41991: PPUSH
41992: LD_INT 51
41994: PPUSH
41995: CALL_OW 321
41999: PUSH
42000: LD_INT 2
42002: EQUAL
42003: AND
42004: IFFALSE 42021
// bpoints := bpoints * 1.2 ;
42006: LD_ADDR_VAR 0 10
42010: PUSH
42011: LD_VAR 0 10
42015: PUSH
42016: LD_REAL  1.20000000000000E+0000
42019: MUL
42020: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42021: LD_VAR 0 6
42025: PPUSH
42026: CALL_OW 257
42030: PUSH
42031: LD_INT 5
42033: PUSH
42034: LD_INT 7
42036: PUSH
42037: LD_INT 9
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: IN
42045: PUSH
42046: LD_VAR 0 1
42050: PPUSH
42051: LD_INT 52
42053: PPUSH
42054: CALL_OW 321
42058: PUSH
42059: LD_INT 2
42061: EQUAL
42062: AND
42063: IFFALSE 42080
// bpoints := bpoints * 1.5 ;
42065: LD_ADDR_VAR 0 10
42069: PUSH
42070: LD_VAR 0 10
42074: PUSH
42075: LD_REAL  1.50000000000000E+0000
42078: MUL
42079: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42080: LD_VAR 0 1
42084: PPUSH
42085: LD_INT 66
42087: PPUSH
42088: CALL_OW 321
42092: PUSH
42093: LD_INT 2
42095: EQUAL
42096: IFFALSE 42113
// bpoints := bpoints * 1.1 ;
42098: LD_ADDR_VAR 0 10
42102: PUSH
42103: LD_VAR 0 10
42107: PUSH
42108: LD_REAL  1.10000000000000E+0000
42111: MUL
42112: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42113: LD_ADDR_VAR 0 10
42117: PUSH
42118: LD_VAR 0 10
42122: PUSH
42123: LD_VAR 0 6
42127: PPUSH
42128: LD_INT 1
42130: PPUSH
42131: CALL_OW 259
42135: PUSH
42136: LD_REAL  1.15000000000000E+0000
42139: MUL
42140: MUL
42141: ST_TO_ADDR
// end ; unit_vehicle :
42142: GO 42972
42144: LD_INT 2
42146: DOUBLE
42147: EQUAL
42148: IFTRUE 42152
42150: GO 42960
42152: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42153: LD_VAR 0 6
42157: PPUSH
42158: CALL_OW 264
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 42
42168: PUSH
42169: LD_INT 24
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: IN
42177: IFFALSE 42198
// points := [ 25 , 5 , 3 ] ;
42179: LD_ADDR_VAR 0 9
42183: PUSH
42184: LD_INT 25
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42198: LD_VAR 0 6
42202: PPUSH
42203: CALL_OW 264
42207: PUSH
42208: LD_INT 4
42210: PUSH
42211: LD_INT 43
42213: PUSH
42214: LD_INT 25
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: LIST
42221: IN
42222: IFFALSE 42243
// points := [ 40 , 15 , 5 ] ;
42224: LD_ADDR_VAR 0 9
42228: PUSH
42229: LD_INT 40
42231: PUSH
42232: LD_INT 15
42234: PUSH
42235: LD_INT 5
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42243: LD_VAR 0 6
42247: PPUSH
42248: CALL_OW 264
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: LD_INT 23
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: IN
42263: IFFALSE 42284
// points := [ 7 , 25 , 8 ] ;
42265: LD_ADDR_VAR 0 9
42269: PUSH
42270: LD_INT 7
42272: PUSH
42273: LD_INT 25
42275: PUSH
42276: LD_INT 8
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42284: LD_VAR 0 6
42288: PPUSH
42289: CALL_OW 264
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: LD_INT 27
42299: PUSH
42300: LD_INT 44
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: IN
42308: IFFALSE 42329
// points := [ 14 , 50 , 16 ] ;
42310: LD_ADDR_VAR 0 9
42314: PUSH
42315: LD_INT 14
42317: PUSH
42318: LD_INT 50
42320: PUSH
42321: LD_INT 16
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42329: LD_VAR 0 6
42333: PPUSH
42334: CALL_OW 264
42338: PUSH
42339: LD_INT 6
42341: PUSH
42342: LD_INT 46
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: IN
42349: IFFALSE 42370
// points := [ 32 , 120 , 70 ] ;
42351: LD_ADDR_VAR 0 9
42355: PUSH
42356: LD_INT 32
42358: PUSH
42359: LD_INT 120
42361: PUSH
42362: LD_INT 70
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42370: LD_VAR 0 6
42374: PPUSH
42375: CALL_OW 264
42379: PUSH
42380: LD_INT 7
42382: PUSH
42383: LD_INT 28
42385: PUSH
42386: LD_INT 45
42388: PUSH
42389: LD_EXP 41
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: IN
42400: IFFALSE 42421
// points := [ 35 , 20 , 45 ] ;
42402: LD_ADDR_VAR 0 9
42406: PUSH
42407: LD_INT 35
42409: PUSH
42410: LD_INT 20
42412: PUSH
42413: LD_INT 45
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42421: LD_VAR 0 6
42425: PPUSH
42426: CALL_OW 264
42430: PUSH
42431: LD_INT 47
42433: PUSH
42434: EMPTY
42435: LIST
42436: IN
42437: IFFALSE 42458
// points := [ 67 , 45 , 75 ] ;
42439: LD_ADDR_VAR 0 9
42443: PUSH
42444: LD_INT 67
42446: PUSH
42447: LD_INT 45
42449: PUSH
42450: LD_INT 75
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42458: LD_VAR 0 6
42462: PPUSH
42463: CALL_OW 264
42467: PUSH
42468: LD_INT 26
42470: PUSH
42471: EMPTY
42472: LIST
42473: IN
42474: IFFALSE 42495
// points := [ 120 , 30 , 80 ] ;
42476: LD_ADDR_VAR 0 9
42480: PUSH
42481: LD_INT 120
42483: PUSH
42484: LD_INT 30
42486: PUSH
42487: LD_INT 80
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42495: LD_VAR 0 6
42499: PPUSH
42500: CALL_OW 264
42504: PUSH
42505: LD_INT 22
42507: PUSH
42508: EMPTY
42509: LIST
42510: IN
42511: IFFALSE 42532
// points := [ 40 , 1 , 1 ] ;
42513: LD_ADDR_VAR 0 9
42517: PUSH
42518: LD_INT 40
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42532: LD_VAR 0 6
42536: PPUSH
42537: CALL_OW 264
42541: PUSH
42542: LD_INT 29
42544: PUSH
42545: EMPTY
42546: LIST
42547: IN
42548: IFFALSE 42569
// points := [ 70 , 200 , 400 ] ;
42550: LD_ADDR_VAR 0 9
42554: PUSH
42555: LD_INT 70
42557: PUSH
42558: LD_INT 200
42560: PUSH
42561: LD_INT 400
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42569: LD_VAR 0 6
42573: PPUSH
42574: CALL_OW 264
42578: PUSH
42579: LD_INT 14
42581: PUSH
42582: LD_INT 53
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: IN
42589: IFFALSE 42610
// points := [ 40 , 10 , 20 ] ;
42591: LD_ADDR_VAR 0 9
42595: PUSH
42596: LD_INT 40
42598: PUSH
42599: LD_INT 10
42601: PUSH
42602: LD_INT 20
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42610: LD_VAR 0 6
42614: PPUSH
42615: CALL_OW 264
42619: PUSH
42620: LD_INT 9
42622: PUSH
42623: EMPTY
42624: LIST
42625: IN
42626: IFFALSE 42647
// points := [ 5 , 70 , 20 ] ;
42628: LD_ADDR_VAR 0 9
42632: PUSH
42633: LD_INT 5
42635: PUSH
42636: LD_INT 70
42638: PUSH
42639: LD_INT 20
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42647: LD_VAR 0 6
42651: PPUSH
42652: CALL_OW 264
42656: PUSH
42657: LD_INT 10
42659: PUSH
42660: EMPTY
42661: LIST
42662: IN
42663: IFFALSE 42684
// points := [ 35 , 110 , 70 ] ;
42665: LD_ADDR_VAR 0 9
42669: PUSH
42670: LD_INT 35
42672: PUSH
42673: LD_INT 110
42675: PUSH
42676: LD_INT 70
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42684: LD_VAR 0 6
42688: PPUSH
42689: CALL_OW 265
42693: PUSH
42694: LD_INT 25
42696: EQUAL
42697: IFFALSE 42718
// points := [ 80 , 65 , 100 ] ;
42699: LD_ADDR_VAR 0 9
42703: PUSH
42704: LD_INT 80
42706: PUSH
42707: LD_INT 65
42709: PUSH
42710: LD_INT 100
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42718: LD_VAR 0 6
42722: PPUSH
42723: CALL_OW 263
42727: PUSH
42728: LD_INT 1
42730: EQUAL
42731: IFFALSE 42766
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42733: LD_ADDR_VAR 0 10
42737: PUSH
42738: LD_VAR 0 10
42742: PUSH
42743: LD_VAR 0 6
42747: PPUSH
42748: CALL_OW 311
42752: PPUSH
42753: LD_INT 3
42755: PPUSH
42756: CALL_OW 259
42760: PUSH
42761: LD_INT 4
42763: MUL
42764: MUL
42765: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42766: LD_VAR 0 6
42770: PPUSH
42771: CALL_OW 263
42775: PUSH
42776: LD_INT 2
42778: EQUAL
42779: IFFALSE 42830
// begin j := IsControledBy ( i ) ;
42781: LD_ADDR_VAR 0 7
42785: PUSH
42786: LD_VAR 0 6
42790: PPUSH
42791: CALL_OW 312
42795: ST_TO_ADDR
// if j then
42796: LD_VAR 0 7
42800: IFFALSE 42830
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42802: LD_ADDR_VAR 0 10
42806: PUSH
42807: LD_VAR 0 10
42811: PUSH
42812: LD_VAR 0 7
42816: PPUSH
42817: LD_INT 3
42819: PPUSH
42820: CALL_OW 259
42824: PUSH
42825: LD_INT 3
42827: MUL
42828: MUL
42829: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42830: LD_VAR 0 6
42834: PPUSH
42835: CALL_OW 264
42839: PUSH
42840: LD_INT 5
42842: PUSH
42843: LD_INT 6
42845: PUSH
42846: LD_INT 46
42848: PUSH
42849: LD_INT 44
42851: PUSH
42852: LD_INT 47
42854: PUSH
42855: LD_INT 45
42857: PUSH
42858: LD_INT 28
42860: PUSH
42861: LD_INT 7
42863: PUSH
42864: LD_INT 27
42866: PUSH
42867: LD_INT 29
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: IN
42882: PUSH
42883: LD_VAR 0 1
42887: PPUSH
42888: LD_INT 52
42890: PPUSH
42891: CALL_OW 321
42895: PUSH
42896: LD_INT 2
42898: EQUAL
42899: AND
42900: IFFALSE 42917
// bpoints := bpoints * 1.2 ;
42902: LD_ADDR_VAR 0 10
42906: PUSH
42907: LD_VAR 0 10
42911: PUSH
42912: LD_REAL  1.20000000000000E+0000
42915: MUL
42916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42917: LD_VAR 0 6
42921: PPUSH
42922: CALL_OW 264
42926: PUSH
42927: LD_INT 6
42929: PUSH
42930: LD_INT 46
42932: PUSH
42933: LD_INT 47
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: IN
42941: IFFALSE 42958
// bpoints := bpoints * 1.2 ;
42943: LD_ADDR_VAR 0 10
42947: PUSH
42948: LD_VAR 0 10
42952: PUSH
42953: LD_REAL  1.20000000000000E+0000
42956: MUL
42957: ST_TO_ADDR
// end ; unit_building :
42958: GO 42972
42960: LD_INT 3
42962: DOUBLE
42963: EQUAL
42964: IFTRUE 42968
42966: GO 42971
42968: POP
// ; end ;
42969: GO 42972
42971: POP
// for j = 1 to 3 do
42972: LD_ADDR_VAR 0 7
42976: PUSH
42977: DOUBLE
42978: LD_INT 1
42980: DEC
42981: ST_TO_ADDR
42982: LD_INT 3
42984: PUSH
42985: FOR_TO
42986: IFFALSE 43039
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42988: LD_ADDR_VAR 0 5
42992: PUSH
42993: LD_VAR 0 5
42997: PPUSH
42998: LD_VAR 0 7
43002: PPUSH
43003: LD_VAR 0 5
43007: PUSH
43008: LD_VAR 0 7
43012: ARRAY
43013: PUSH
43014: LD_VAR 0 9
43018: PUSH
43019: LD_VAR 0 7
43023: ARRAY
43024: PUSH
43025: LD_VAR 0 10
43029: MUL
43030: PLUS
43031: PPUSH
43032: CALL_OW 1
43036: ST_TO_ADDR
43037: GO 42985
43039: POP
43040: POP
// end ;
43041: GO 41518
43043: POP
43044: POP
// result := Replace ( result , 4 , tmp ) ;
43045: LD_ADDR_VAR 0 5
43049: PUSH
43050: LD_VAR 0 5
43054: PPUSH
43055: LD_INT 4
43057: PPUSH
43058: LD_VAR 0 8
43062: PPUSH
43063: CALL_OW 1
43067: ST_TO_ADDR
// end ;
43068: LD_VAR 0 5
43072: RET
// export function DangerAtRange ( unit , range ) ; begin
43073: LD_INT 0
43075: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: CALL_OW 255
43090: PPUSH
43091: LD_VAR 0 1
43095: PPUSH
43096: CALL_OW 250
43100: PPUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 251
43110: PPUSH
43111: LD_VAR 0 2
43115: PPUSH
43116: CALL 41370 0 4
43120: ST_TO_ADDR
// end ;
43121: LD_VAR 0 3
43125: RET
// export function DangerInArea ( side , area ) ; begin
43126: LD_INT 0
43128: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43129: LD_ADDR_VAR 0 3
43133: PUSH
43134: LD_VAR 0 2
43138: PPUSH
43139: LD_INT 81
43141: PUSH
43142: LD_VAR 0 1
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PPUSH
43151: CALL_OW 70
43155: ST_TO_ADDR
// end ;
43156: LD_VAR 0 3
43160: RET
// export function IsExtension ( b ) ; begin
43161: LD_INT 0
43163: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43164: LD_ADDR_VAR 0 2
43168: PUSH
43169: LD_VAR 0 1
43173: PUSH
43174: LD_INT 23
43176: PUSH
43177: LD_INT 20
43179: PUSH
43180: LD_INT 22
43182: PUSH
43183: LD_INT 17
43185: PUSH
43186: LD_INT 24
43188: PUSH
43189: LD_INT 21
43191: PUSH
43192: LD_INT 19
43194: PUSH
43195: LD_INT 16
43197: PUSH
43198: LD_INT 25
43200: PUSH
43201: LD_INT 18
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: IN
43216: ST_TO_ADDR
// end ;
43217: LD_VAR 0 2
43221: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43222: LD_INT 0
43224: PPUSH
43225: PPUSH
43226: PPUSH
// result := [ ] ;
43227: LD_ADDR_VAR 0 4
43231: PUSH
43232: EMPTY
43233: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43234: LD_ADDR_VAR 0 5
43238: PUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: LD_INT 21
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PPUSH
43254: CALL_OW 70
43258: ST_TO_ADDR
// if not tmp then
43259: LD_VAR 0 5
43263: NOT
43264: IFFALSE 43268
// exit ;
43266: GO 43332
// if checkLink then
43268: LD_VAR 0 3
43272: IFFALSE 43322
// begin for i in tmp do
43274: LD_ADDR_VAR 0 6
43278: PUSH
43279: LD_VAR 0 5
43283: PUSH
43284: FOR_IN
43285: IFFALSE 43320
// if GetBase ( i ) <> base then
43287: LD_VAR 0 6
43291: PPUSH
43292: CALL_OW 274
43296: PUSH
43297: LD_VAR 0 1
43301: NONEQUAL
43302: IFFALSE 43318
// ComLinkToBase ( base , i ) ;
43304: LD_VAR 0 1
43308: PPUSH
43309: LD_VAR 0 6
43313: PPUSH
43314: CALL_OW 169
43318: GO 43284
43320: POP
43321: POP
// end ; result := tmp ;
43322: LD_ADDR_VAR 0 4
43326: PUSH
43327: LD_VAR 0 5
43331: ST_TO_ADDR
// end ;
43332: LD_VAR 0 4
43336: RET
// export function ComComplete ( units , b ) ; var i ; begin
43337: LD_INT 0
43339: PPUSH
43340: PPUSH
// if not units then
43341: LD_VAR 0 1
43345: NOT
43346: IFFALSE 43350
// exit ;
43348: GO 43440
// for i in units do
43350: LD_ADDR_VAR 0 4
43354: PUSH
43355: LD_VAR 0 1
43359: PUSH
43360: FOR_IN
43361: IFFALSE 43438
// if BuildingStatus ( b ) = bs_build then
43363: LD_VAR 0 2
43367: PPUSH
43368: CALL_OW 461
43372: PUSH
43373: LD_INT 1
43375: EQUAL
43376: IFFALSE 43436
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43378: LD_VAR 0 4
43382: PPUSH
43383: LD_STRING h
43385: PUSH
43386: LD_VAR 0 2
43390: PPUSH
43391: CALL_OW 250
43395: PUSH
43396: LD_VAR 0 2
43400: PPUSH
43401: CALL_OW 251
43405: PUSH
43406: LD_VAR 0 2
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: PPUSH
43432: CALL_OW 446
43436: GO 43360
43438: POP
43439: POP
// end ;
43440: LD_VAR 0 3
43444: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43445: LD_INT 0
43447: PPUSH
43448: PPUSH
43449: PPUSH
43450: PPUSH
43451: PPUSH
43452: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43453: LD_VAR 0 1
43457: NOT
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL_OW 263
43468: PUSH
43469: LD_INT 2
43471: NONEQUAL
43472: OR
43473: IFFALSE 43477
// exit ;
43475: GO 43793
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43477: LD_ADDR_VAR 0 6
43481: PUSH
43482: LD_INT 22
43484: PUSH
43485: LD_VAR 0 1
43489: PPUSH
43490: CALL_OW 255
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: LD_INT 30
43504: PUSH
43505: LD_INT 36
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 34
43514: PUSH
43515: LD_INT 31
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PPUSH
43531: CALL_OW 69
43535: ST_TO_ADDR
// if not tmp then
43536: LD_VAR 0 6
43540: NOT
43541: IFFALSE 43545
// exit ;
43543: GO 43793
// result := [ ] ;
43545: LD_ADDR_VAR 0 2
43549: PUSH
43550: EMPTY
43551: ST_TO_ADDR
// for i in tmp do
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_VAR 0 6
43561: PUSH
43562: FOR_IN
43563: IFFALSE 43634
// begin t := UnitsInside ( i ) ;
43565: LD_ADDR_VAR 0 4
43569: PUSH
43570: LD_VAR 0 3
43574: PPUSH
43575: CALL_OW 313
43579: ST_TO_ADDR
// if t then
43580: LD_VAR 0 4
43584: IFFALSE 43632
// for j in t do
43586: LD_ADDR_VAR 0 7
43590: PUSH
43591: LD_VAR 0 4
43595: PUSH
43596: FOR_IN
43597: IFFALSE 43630
// result := Replace ( result , result + 1 , j ) ;
43599: LD_ADDR_VAR 0 2
43603: PUSH
43604: LD_VAR 0 2
43608: PPUSH
43609: LD_VAR 0 2
43613: PUSH
43614: LD_INT 1
43616: PLUS
43617: PPUSH
43618: LD_VAR 0 7
43622: PPUSH
43623: CALL_OW 1
43627: ST_TO_ADDR
43628: GO 43596
43630: POP
43631: POP
// end ;
43632: GO 43562
43634: POP
43635: POP
// if not result then
43636: LD_VAR 0 2
43640: NOT
43641: IFFALSE 43645
// exit ;
43643: GO 43793
// mech := result [ 1 ] ;
43645: LD_ADDR_VAR 0 5
43649: PUSH
43650: LD_VAR 0 2
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: ST_TO_ADDR
// if result > 1 then
43659: LD_VAR 0 2
43663: PUSH
43664: LD_INT 1
43666: GREATER
43667: IFFALSE 43779
// begin for i = 2 to result do
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: DOUBLE
43675: LD_INT 2
43677: DEC
43678: ST_TO_ADDR
43679: LD_VAR 0 2
43683: PUSH
43684: FOR_TO
43685: IFFALSE 43777
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43687: LD_ADDR_VAR 0 4
43691: PUSH
43692: LD_VAR 0 2
43696: PUSH
43697: LD_VAR 0 3
43701: ARRAY
43702: PPUSH
43703: LD_INT 3
43705: PPUSH
43706: CALL_OW 259
43710: PUSH
43711: LD_VAR 0 2
43715: PUSH
43716: LD_VAR 0 3
43720: ARRAY
43721: PPUSH
43722: CALL_OW 432
43726: MINUS
43727: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43728: LD_VAR 0 4
43732: PUSH
43733: LD_VAR 0 5
43737: PPUSH
43738: LD_INT 3
43740: PPUSH
43741: CALL_OW 259
43745: PUSH
43746: LD_VAR 0 5
43750: PPUSH
43751: CALL_OW 432
43755: MINUS
43756: GREATEREQUAL
43757: IFFALSE 43775
// mech := result [ i ] ;
43759: LD_ADDR_VAR 0 5
43763: PUSH
43764: LD_VAR 0 2
43768: PUSH
43769: LD_VAR 0 3
43773: ARRAY
43774: ST_TO_ADDR
// end ;
43775: GO 43684
43777: POP
43778: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43779: LD_VAR 0 1
43783: PPUSH
43784: LD_VAR 0 5
43788: PPUSH
43789: CALL_OW 135
// end ;
43793: LD_VAR 0 2
43797: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43798: LD_INT 0
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
// result := [ ] ;
43813: LD_ADDR_VAR 0 7
43817: PUSH
43818: EMPTY
43819: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43820: LD_VAR 0 1
43824: PPUSH
43825: CALL_OW 266
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: IN
43840: NOT
43841: IFFALSE 43845
// exit ;
43843: GO 45479
// if name then
43845: LD_VAR 0 3
43849: IFFALSE 43865
// SetBName ( base_dep , name ) ;
43851: LD_VAR 0 1
43855: PPUSH
43856: LD_VAR 0 3
43860: PPUSH
43861: CALL_OW 500
// base := GetBase ( base_dep ) ;
43865: LD_ADDR_VAR 0 15
43869: PUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: CALL_OW 274
43879: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43880: LD_ADDR_VAR 0 16
43884: PUSH
43885: LD_VAR 0 1
43889: PPUSH
43890: CALL_OW 255
43894: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43895: LD_ADDR_VAR 0 17
43899: PUSH
43900: LD_VAR 0 1
43904: PPUSH
43905: CALL_OW 248
43909: ST_TO_ADDR
// if sources then
43910: LD_VAR 0 5
43914: IFFALSE 43961
// for i = 1 to 3 do
43916: LD_ADDR_VAR 0 8
43920: PUSH
43921: DOUBLE
43922: LD_INT 1
43924: DEC
43925: ST_TO_ADDR
43926: LD_INT 3
43928: PUSH
43929: FOR_TO
43930: IFFALSE 43959
// AddResourceType ( base , i , sources [ i ] ) ;
43932: LD_VAR 0 15
43936: PPUSH
43937: LD_VAR 0 8
43941: PPUSH
43942: LD_VAR 0 5
43946: PUSH
43947: LD_VAR 0 8
43951: ARRAY
43952: PPUSH
43953: CALL_OW 276
43957: GO 43929
43959: POP
43960: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43961: LD_ADDR_VAR 0 18
43965: PUSH
43966: LD_VAR 0 15
43970: PPUSH
43971: LD_VAR 0 2
43975: PPUSH
43976: LD_INT 1
43978: PPUSH
43979: CALL 43222 0 3
43983: ST_TO_ADDR
// InitHc ;
43984: CALL_OW 19
// InitUc ;
43988: CALL_OW 18
// uc_side := side ;
43992: LD_ADDR_OWVAR 20
43996: PUSH
43997: LD_VAR 0 16
44001: ST_TO_ADDR
// uc_nation := nation ;
44002: LD_ADDR_OWVAR 21
44006: PUSH
44007: LD_VAR 0 17
44011: ST_TO_ADDR
// if buildings then
44012: LD_VAR 0 18
44016: IFFALSE 45338
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44018: LD_ADDR_VAR 0 19
44022: PUSH
44023: LD_VAR 0 18
44027: PPUSH
44028: LD_INT 2
44030: PUSH
44031: LD_INT 30
44033: PUSH
44034: LD_INT 29
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 30
44043: PUSH
44044: LD_INT 30
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: PPUSH
44056: CALL_OW 72
44060: ST_TO_ADDR
// if tmp then
44061: LD_VAR 0 19
44065: IFFALSE 44113
// for i in tmp do
44067: LD_ADDR_VAR 0 8
44071: PUSH
44072: LD_VAR 0 19
44076: PUSH
44077: FOR_IN
44078: IFFALSE 44111
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44080: LD_VAR 0 8
44084: PPUSH
44085: CALL_OW 250
44089: PPUSH
44090: LD_VAR 0 8
44094: PPUSH
44095: CALL_OW 251
44099: PPUSH
44100: LD_VAR 0 16
44104: PPUSH
44105: CALL_OW 441
44109: GO 44077
44111: POP
44112: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44113: LD_VAR 0 18
44117: PPUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 30
44123: PUSH
44124: LD_INT 32
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 30
44133: PUSH
44134: LD_INT 33
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: PPUSH
44146: CALL_OW 72
44150: IFFALSE 44238
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44152: LD_ADDR_VAR 0 8
44156: PUSH
44157: LD_VAR 0 18
44161: PPUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 30
44167: PUSH
44168: LD_INT 32
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 30
44177: PUSH
44178: LD_INT 33
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: PPUSH
44190: CALL_OW 72
44194: PUSH
44195: FOR_IN
44196: IFFALSE 44236
// begin if not GetBWeapon ( i ) then
44198: LD_VAR 0 8
44202: PPUSH
44203: CALL_OW 269
44207: NOT
44208: IFFALSE 44234
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44210: LD_VAR 0 8
44214: PPUSH
44215: LD_VAR 0 8
44219: PPUSH
44220: LD_VAR 0 2
44224: PPUSH
44225: CALL 45484 0 2
44229: PPUSH
44230: CALL_OW 431
// end ;
44234: GO 44195
44236: POP
44237: POP
// end ; for i = 1 to personel do
44238: LD_ADDR_VAR 0 8
44242: PUSH
44243: DOUBLE
44244: LD_INT 1
44246: DEC
44247: ST_TO_ADDR
44248: LD_VAR 0 6
44252: PUSH
44253: FOR_TO
44254: IFFALSE 45318
// begin if i > 4 then
44256: LD_VAR 0 8
44260: PUSH
44261: LD_INT 4
44263: GREATER
44264: IFFALSE 44268
// break ;
44266: GO 45318
// case i of 1 :
44268: LD_VAR 0 8
44272: PUSH
44273: LD_INT 1
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44361
44281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44282: LD_ADDR_VAR 0 12
44286: PUSH
44287: LD_VAR 0 18
44291: PPUSH
44292: LD_INT 22
44294: PUSH
44295: LD_VAR 0 16
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 58
44306: PUSH
44307: EMPTY
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 30
44315: PUSH
44316: LD_INT 32
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 30
44325: PUSH
44326: LD_INT 4
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 30
44335: PUSH
44336: LD_INT 5
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: PPUSH
44354: CALL_OW 72
44358: ST_TO_ADDR
44359: GO 44583
44361: LD_INT 2
44363: DOUBLE
44364: EQUAL
44365: IFTRUE 44369
44367: GO 44431
44369: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44370: LD_ADDR_VAR 0 12
44374: PUSH
44375: LD_VAR 0 18
44379: PPUSH
44380: LD_INT 22
44382: PUSH
44383: LD_VAR 0 16
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 30
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 30
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PPUSH
44424: CALL_OW 72
44428: ST_TO_ADDR
44429: GO 44583
44431: LD_INT 3
44433: DOUBLE
44434: EQUAL
44435: IFTRUE 44439
44437: GO 44501
44439: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44440: LD_ADDR_VAR 0 12
44444: PUSH
44445: LD_VAR 0 18
44449: PPUSH
44450: LD_INT 22
44452: PUSH
44453: LD_VAR 0 16
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 30
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 30
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 72
44498: ST_TO_ADDR
44499: GO 44583
44501: LD_INT 4
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44582
44509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44510: LD_ADDR_VAR 0 12
44514: PUSH
44515: LD_VAR 0 18
44519: PPUSH
44520: LD_INT 22
44522: PUSH
44523: LD_VAR 0 16
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 30
44537: PUSH
44538: LD_INT 6
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 30
44547: PUSH
44548: LD_INT 7
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 30
44557: PUSH
44558: LD_INT 8
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PPUSH
44575: CALL_OW 72
44579: ST_TO_ADDR
44580: GO 44583
44582: POP
// if i = 1 then
44583: LD_VAR 0 8
44587: PUSH
44588: LD_INT 1
44590: EQUAL
44591: IFFALSE 44702
// begin tmp := [ ] ;
44593: LD_ADDR_VAR 0 19
44597: PUSH
44598: EMPTY
44599: ST_TO_ADDR
// for j in f do
44600: LD_ADDR_VAR 0 9
44604: PUSH
44605: LD_VAR 0 12
44609: PUSH
44610: FOR_IN
44611: IFFALSE 44684
// if GetBType ( j ) = b_bunker then
44613: LD_VAR 0 9
44617: PPUSH
44618: CALL_OW 266
44622: PUSH
44623: LD_INT 32
44625: EQUAL
44626: IFFALSE 44653
// tmp := Insert ( tmp , 1 , j ) else
44628: LD_ADDR_VAR 0 19
44632: PUSH
44633: LD_VAR 0 19
44637: PPUSH
44638: LD_INT 1
44640: PPUSH
44641: LD_VAR 0 9
44645: PPUSH
44646: CALL_OW 2
44650: ST_TO_ADDR
44651: GO 44682
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44653: LD_ADDR_VAR 0 19
44657: PUSH
44658: LD_VAR 0 19
44662: PPUSH
44663: LD_VAR 0 19
44667: PUSH
44668: LD_INT 1
44670: PLUS
44671: PPUSH
44672: LD_VAR 0 9
44676: PPUSH
44677: CALL_OW 2
44681: ST_TO_ADDR
44682: GO 44610
44684: POP
44685: POP
// if tmp then
44686: LD_VAR 0 19
44690: IFFALSE 44702
// f := tmp ;
44692: LD_ADDR_VAR 0 12
44696: PUSH
44697: LD_VAR 0 19
44701: ST_TO_ADDR
// end ; x := personel [ i ] ;
44702: LD_ADDR_VAR 0 13
44706: PUSH
44707: LD_VAR 0 6
44711: PUSH
44712: LD_VAR 0 8
44716: ARRAY
44717: ST_TO_ADDR
// if x = - 1 then
44718: LD_VAR 0 13
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: EQUAL
44727: IFFALSE 44936
// begin for j in f do
44729: LD_ADDR_VAR 0 9
44733: PUSH
44734: LD_VAR 0 12
44738: PUSH
44739: FOR_IN
44740: IFFALSE 44932
// repeat InitHc ;
44742: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44746: LD_VAR 0 9
44750: PPUSH
44751: CALL_OW 266
44755: PUSH
44756: LD_INT 5
44758: EQUAL
44759: IFFALSE 44829
// begin if UnitsInside ( j ) < 3 then
44761: LD_VAR 0 9
44765: PPUSH
44766: CALL_OW 313
44770: PUSH
44771: LD_INT 3
44773: LESS
44774: IFFALSE 44810
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44776: LD_INT 0
44778: PPUSH
44779: LD_INT 5
44781: PUSH
44782: LD_INT 8
44784: PUSH
44785: LD_INT 9
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: PUSH
44793: LD_VAR 0 17
44797: ARRAY
44798: PPUSH
44799: LD_VAR 0 4
44803: PPUSH
44804: CALL_OW 380
44808: GO 44827
// PrepareHuman ( false , i , skill ) ;
44810: LD_INT 0
44812: PPUSH
44813: LD_VAR 0 8
44817: PPUSH
44818: LD_VAR 0 4
44822: PPUSH
44823: CALL_OW 380
// end else
44827: GO 44846
// PrepareHuman ( false , i , skill ) ;
44829: LD_INT 0
44831: PPUSH
44832: LD_VAR 0 8
44836: PPUSH
44837: LD_VAR 0 4
44841: PPUSH
44842: CALL_OW 380
// un := CreateHuman ;
44846: LD_ADDR_VAR 0 14
44850: PUSH
44851: CALL_OW 44
44855: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44856: LD_ADDR_VAR 0 7
44860: PUSH
44861: LD_VAR 0 7
44865: PPUSH
44866: LD_INT 1
44868: PPUSH
44869: LD_VAR 0 14
44873: PPUSH
44874: CALL_OW 2
44878: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44879: LD_VAR 0 14
44883: PPUSH
44884: LD_VAR 0 9
44888: PPUSH
44889: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44893: LD_VAR 0 9
44897: PPUSH
44898: CALL_OW 313
44902: PUSH
44903: LD_INT 6
44905: EQUAL
44906: PUSH
44907: LD_VAR 0 9
44911: PPUSH
44912: CALL_OW 266
44916: PUSH
44917: LD_INT 32
44919: PUSH
44920: LD_INT 31
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: IN
44927: OR
44928: IFFALSE 44742
44930: GO 44739
44932: POP
44933: POP
// end else
44934: GO 45316
// for j = 1 to x do
44936: LD_ADDR_VAR 0 9
44940: PUSH
44941: DOUBLE
44942: LD_INT 1
44944: DEC
44945: ST_TO_ADDR
44946: LD_VAR 0 13
44950: PUSH
44951: FOR_TO
44952: IFFALSE 45314
// begin InitHc ;
44954: CALL_OW 19
// if not f then
44958: LD_VAR 0 12
44962: NOT
44963: IFFALSE 45052
// begin PrepareHuman ( false , i , skill ) ;
44965: LD_INT 0
44967: PPUSH
44968: LD_VAR 0 8
44972: PPUSH
44973: LD_VAR 0 4
44977: PPUSH
44978: CALL_OW 380
// un := CreateHuman ;
44982: LD_ADDR_VAR 0 14
44986: PUSH
44987: CALL_OW 44
44991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44992: LD_ADDR_VAR 0 7
44996: PUSH
44997: LD_VAR 0 7
45001: PPUSH
45002: LD_INT 1
45004: PPUSH
45005: LD_VAR 0 14
45009: PPUSH
45010: CALL_OW 2
45014: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45015: LD_VAR 0 14
45019: PPUSH
45020: LD_VAR 0 1
45024: PPUSH
45025: CALL_OW 250
45029: PPUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL_OW 251
45039: PPUSH
45040: LD_INT 10
45042: PPUSH
45043: LD_INT 0
45045: PPUSH
45046: CALL_OW 50
// continue ;
45050: GO 44951
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45052: LD_VAR 0 12
45056: PUSH
45057: LD_INT 1
45059: ARRAY
45060: PPUSH
45061: CALL_OW 313
45065: PUSH
45066: LD_VAR 0 12
45070: PUSH
45071: LD_INT 1
45073: ARRAY
45074: PPUSH
45075: CALL_OW 266
45079: PUSH
45080: LD_INT 32
45082: PUSH
45083: LD_INT 31
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: IN
45090: AND
45091: PUSH
45092: LD_VAR 0 12
45096: PUSH
45097: LD_INT 1
45099: ARRAY
45100: PPUSH
45101: CALL_OW 313
45105: PUSH
45106: LD_INT 6
45108: EQUAL
45109: OR
45110: IFFALSE 45130
// f := Delete ( f , 1 ) ;
45112: LD_ADDR_VAR 0 12
45116: PUSH
45117: LD_VAR 0 12
45121: PPUSH
45122: LD_INT 1
45124: PPUSH
45125: CALL_OW 3
45129: ST_TO_ADDR
// if not f then
45130: LD_VAR 0 12
45134: NOT
45135: IFFALSE 45153
// begin x := x + 2 ;
45137: LD_ADDR_VAR 0 13
45141: PUSH
45142: LD_VAR 0 13
45146: PUSH
45147: LD_INT 2
45149: PLUS
45150: ST_TO_ADDR
// continue ;
45151: GO 44951
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45153: LD_VAR 0 12
45157: PUSH
45158: LD_INT 1
45160: ARRAY
45161: PPUSH
45162: CALL_OW 266
45166: PUSH
45167: LD_INT 5
45169: EQUAL
45170: IFFALSE 45244
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45172: LD_VAR 0 12
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: PPUSH
45181: CALL_OW 313
45185: PUSH
45186: LD_INT 3
45188: LESS
45189: IFFALSE 45225
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45191: LD_INT 0
45193: PPUSH
45194: LD_INT 5
45196: PUSH
45197: LD_INT 8
45199: PUSH
45200: LD_INT 9
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: LIST
45207: PUSH
45208: LD_VAR 0 17
45212: ARRAY
45213: PPUSH
45214: LD_VAR 0 4
45218: PPUSH
45219: CALL_OW 380
45223: GO 45242
// PrepareHuman ( false , i , skill ) ;
45225: LD_INT 0
45227: PPUSH
45228: LD_VAR 0 8
45232: PPUSH
45233: LD_VAR 0 4
45237: PPUSH
45238: CALL_OW 380
// end else
45242: GO 45261
// PrepareHuman ( false , i , skill ) ;
45244: LD_INT 0
45246: PPUSH
45247: LD_VAR 0 8
45251: PPUSH
45252: LD_VAR 0 4
45256: PPUSH
45257: CALL_OW 380
// un := CreateHuman ;
45261: LD_ADDR_VAR 0 14
45265: PUSH
45266: CALL_OW 44
45270: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45271: LD_ADDR_VAR 0 7
45275: PUSH
45276: LD_VAR 0 7
45280: PPUSH
45281: LD_INT 1
45283: PPUSH
45284: LD_VAR 0 14
45288: PPUSH
45289: CALL_OW 2
45293: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45294: LD_VAR 0 14
45298: PPUSH
45299: LD_VAR 0 12
45303: PUSH
45304: LD_INT 1
45306: ARRAY
45307: PPUSH
45308: CALL_OW 52
// end ;
45312: GO 44951
45314: POP
45315: POP
// end ;
45316: GO 44253
45318: POP
45319: POP
// result := result ^ buildings ;
45320: LD_ADDR_VAR 0 7
45324: PUSH
45325: LD_VAR 0 7
45329: PUSH
45330: LD_VAR 0 18
45334: ADD
45335: ST_TO_ADDR
// end else
45336: GO 45479
// begin for i = 1 to personel do
45338: LD_ADDR_VAR 0 8
45342: PUSH
45343: DOUBLE
45344: LD_INT 1
45346: DEC
45347: ST_TO_ADDR
45348: LD_VAR 0 6
45352: PUSH
45353: FOR_TO
45354: IFFALSE 45477
// begin if i > 4 then
45356: LD_VAR 0 8
45360: PUSH
45361: LD_INT 4
45363: GREATER
45364: IFFALSE 45368
// break ;
45366: GO 45477
// x := personel [ i ] ;
45368: LD_ADDR_VAR 0 13
45372: PUSH
45373: LD_VAR 0 6
45377: PUSH
45378: LD_VAR 0 8
45382: ARRAY
45383: ST_TO_ADDR
// if x = - 1 then
45384: LD_VAR 0 13
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: EQUAL
45393: IFFALSE 45397
// continue ;
45395: GO 45353
// PrepareHuman ( false , i , skill ) ;
45397: LD_INT 0
45399: PPUSH
45400: LD_VAR 0 8
45404: PPUSH
45405: LD_VAR 0 4
45409: PPUSH
45410: CALL_OW 380
// un := CreateHuman ;
45414: LD_ADDR_VAR 0 14
45418: PUSH
45419: CALL_OW 44
45423: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45424: LD_VAR 0 14
45428: PPUSH
45429: LD_VAR 0 1
45433: PPUSH
45434: CALL_OW 250
45438: PPUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: CALL_OW 251
45448: PPUSH
45449: LD_INT 10
45451: PPUSH
45452: LD_INT 0
45454: PPUSH
45455: CALL_OW 50
// result := result ^ un ;
45459: LD_ADDR_VAR 0 7
45463: PUSH
45464: LD_VAR 0 7
45468: PUSH
45469: LD_VAR 0 14
45473: ADD
45474: ST_TO_ADDR
// end ;
45475: GO 45353
45477: POP
45478: POP
// end ; end ;
45479: LD_VAR 0 7
45483: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45484: LD_INT 0
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
// result := false ;
45502: LD_ADDR_VAR 0 3
45506: PUSH
45507: LD_INT 0
45509: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45510: LD_VAR 0 1
45514: NOT
45515: PUSH
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 266
45525: PUSH
45526: LD_INT 32
45528: PUSH
45529: LD_INT 33
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: IN
45536: NOT
45537: OR
45538: IFFALSE 45542
// exit ;
45540: GO 46651
// nat := GetNation ( tower ) ;
45542: LD_ADDR_VAR 0 12
45546: PUSH
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 248
45556: ST_TO_ADDR
// side := GetSide ( tower ) ;
45557: LD_ADDR_VAR 0 16
45561: PUSH
45562: LD_VAR 0 1
45566: PPUSH
45567: CALL_OW 255
45571: ST_TO_ADDR
// x := GetX ( tower ) ;
45572: LD_ADDR_VAR 0 10
45576: PUSH
45577: LD_VAR 0 1
45581: PPUSH
45582: CALL_OW 250
45586: ST_TO_ADDR
// y := GetY ( tower ) ;
45587: LD_ADDR_VAR 0 11
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 251
45601: ST_TO_ADDR
// if not x or not y then
45602: LD_VAR 0 10
45606: NOT
45607: PUSH
45608: LD_VAR 0 11
45612: NOT
45613: OR
45614: IFFALSE 45618
// exit ;
45616: GO 46651
// weapon := 0 ;
45618: LD_ADDR_VAR 0 18
45622: PUSH
45623: LD_INT 0
45625: ST_TO_ADDR
// fac_list := [ ] ;
45626: LD_ADDR_VAR 0 17
45630: PUSH
45631: EMPTY
45632: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45633: LD_ADDR_VAR 0 6
45637: PUSH
45638: LD_VAR 0 1
45642: PPUSH
45643: CALL_OW 274
45647: PPUSH
45648: LD_VAR 0 2
45652: PPUSH
45653: LD_INT 0
45655: PPUSH
45656: CALL 43222 0 3
45660: PPUSH
45661: LD_INT 30
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PPUSH
45671: CALL_OW 72
45675: ST_TO_ADDR
// if not factories then
45676: LD_VAR 0 6
45680: NOT
45681: IFFALSE 45685
// exit ;
45683: GO 46651
// for i in factories do
45685: LD_ADDR_VAR 0 8
45689: PUSH
45690: LD_VAR 0 6
45694: PUSH
45695: FOR_IN
45696: IFFALSE 45721
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45698: LD_ADDR_VAR 0 17
45702: PUSH
45703: LD_VAR 0 17
45707: PUSH
45708: LD_VAR 0 8
45712: PPUSH
45713: CALL_OW 478
45717: UNION
45718: ST_TO_ADDR
45719: GO 45695
45721: POP
45722: POP
// if not fac_list then
45723: LD_VAR 0 17
45727: NOT
45728: IFFALSE 45732
// exit ;
45730: GO 46651
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45732: LD_ADDR_VAR 0 5
45736: PUSH
45737: LD_INT 4
45739: PUSH
45740: LD_INT 5
45742: PUSH
45743: LD_INT 9
45745: PUSH
45746: LD_INT 10
45748: PUSH
45749: LD_INT 6
45751: PUSH
45752: LD_INT 7
45754: PUSH
45755: LD_INT 11
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 27
45769: PUSH
45770: LD_INT 28
45772: PUSH
45773: LD_INT 26
45775: PUSH
45776: LD_INT 30
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 43
45787: PUSH
45788: LD_INT 44
45790: PUSH
45791: LD_INT 46
45793: PUSH
45794: LD_INT 45
45796: PUSH
45797: LD_INT 47
45799: PUSH
45800: LD_INT 49
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: PUSH
45816: LD_VAR 0 12
45820: ARRAY
45821: ST_TO_ADDR
// list := list isect fac_list ;
45822: LD_ADDR_VAR 0 5
45826: PUSH
45827: LD_VAR 0 5
45831: PUSH
45832: LD_VAR 0 17
45836: ISECT
45837: ST_TO_ADDR
// if not list then
45838: LD_VAR 0 5
45842: NOT
45843: IFFALSE 45847
// exit ;
45845: GO 46651
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45847: LD_VAR 0 12
45851: PUSH
45852: LD_INT 3
45854: EQUAL
45855: PUSH
45856: LD_INT 49
45858: PUSH
45859: LD_VAR 0 5
45863: IN
45864: AND
45865: PUSH
45866: LD_INT 31
45868: PPUSH
45869: LD_VAR 0 16
45873: PPUSH
45874: CALL_OW 321
45878: PUSH
45879: LD_INT 2
45881: EQUAL
45882: AND
45883: IFFALSE 45943
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45885: LD_INT 22
45887: PUSH
45888: LD_VAR 0 16
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 35
45899: PUSH
45900: LD_INT 49
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 91
45909: PUSH
45910: LD_VAR 0 1
45914: PUSH
45915: LD_INT 10
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: PPUSH
45928: CALL_OW 69
45932: NOT
45933: IFFALSE 45943
// weapon := ru_time_lapser ;
45935: LD_ADDR_VAR 0 18
45939: PUSH
45940: LD_INT 49
45942: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45943: LD_VAR 0 12
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: IN
45958: PUSH
45959: LD_INT 11
45961: PUSH
45962: LD_VAR 0 5
45966: IN
45967: PUSH
45968: LD_INT 30
45970: PUSH
45971: LD_VAR 0 5
45975: IN
45976: OR
45977: AND
45978: PUSH
45979: LD_INT 6
45981: PPUSH
45982: LD_VAR 0 16
45986: PPUSH
45987: CALL_OW 321
45991: PUSH
45992: LD_INT 2
45994: EQUAL
45995: AND
45996: IFFALSE 46161
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45998: LD_INT 22
46000: PUSH
46001: LD_VAR 0 16
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 35
46015: PUSH
46016: LD_INT 11
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 35
46025: PUSH
46026: LD_INT 30
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 91
46040: PUSH
46041: LD_VAR 0 1
46045: PUSH
46046: LD_INT 18
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: PPUSH
46059: CALL_OW 69
46063: NOT
46064: PUSH
46065: LD_INT 22
46067: PUSH
46068: LD_VAR 0 16
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 30
46082: PUSH
46083: LD_INT 32
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 30
46092: PUSH
46093: LD_INT 33
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 91
46107: PUSH
46108: LD_VAR 0 1
46112: PUSH
46113: LD_INT 12
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: PPUSH
46129: CALL_OW 69
46133: PUSH
46134: LD_INT 2
46136: GREATER
46137: AND
46138: IFFALSE 46161
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46140: LD_ADDR_VAR 0 18
46144: PUSH
46145: LD_INT 11
46147: PUSH
46148: LD_INT 30
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_VAR 0 12
46159: ARRAY
46160: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46161: LD_VAR 0 18
46165: NOT
46166: PUSH
46167: LD_INT 40
46169: PPUSH
46170: LD_VAR 0 16
46174: PPUSH
46175: CALL_OW 321
46179: PUSH
46180: LD_INT 2
46182: EQUAL
46183: AND
46184: PUSH
46185: LD_INT 7
46187: PUSH
46188: LD_VAR 0 5
46192: IN
46193: PUSH
46194: LD_INT 28
46196: PUSH
46197: LD_VAR 0 5
46201: IN
46202: OR
46203: PUSH
46204: LD_INT 45
46206: PUSH
46207: LD_VAR 0 5
46211: IN
46212: OR
46213: AND
46214: IFFALSE 46468
// begin hex := GetHexInfo ( x , y ) ;
46216: LD_ADDR_VAR 0 4
46220: PUSH
46221: LD_VAR 0 10
46225: PPUSH
46226: LD_VAR 0 11
46230: PPUSH
46231: CALL_OW 546
46235: ST_TO_ADDR
// if hex [ 1 ] then
46236: LD_VAR 0 4
46240: PUSH
46241: LD_INT 1
46243: ARRAY
46244: IFFALSE 46248
// exit ;
46246: GO 46651
// height := hex [ 2 ] ;
46248: LD_ADDR_VAR 0 15
46252: PUSH
46253: LD_VAR 0 4
46257: PUSH
46258: LD_INT 2
46260: ARRAY
46261: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46262: LD_ADDR_VAR 0 14
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: LD_INT 5
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: ST_TO_ADDR
// for i in tmp do
46285: LD_ADDR_VAR 0 8
46289: PUSH
46290: LD_VAR 0 14
46294: PUSH
46295: FOR_IN
46296: IFFALSE 46466
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46298: LD_ADDR_VAR 0 9
46302: PUSH
46303: LD_VAR 0 10
46307: PPUSH
46308: LD_VAR 0 8
46312: PPUSH
46313: LD_INT 5
46315: PPUSH
46316: CALL_OW 272
46320: PUSH
46321: LD_VAR 0 11
46325: PPUSH
46326: LD_VAR 0 8
46330: PPUSH
46331: LD_INT 5
46333: PPUSH
46334: CALL_OW 273
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46343: LD_VAR 0 9
46347: PUSH
46348: LD_INT 1
46350: ARRAY
46351: PPUSH
46352: LD_VAR 0 9
46356: PUSH
46357: LD_INT 2
46359: ARRAY
46360: PPUSH
46361: CALL_OW 488
46365: IFFALSE 46464
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46367: LD_ADDR_VAR 0 4
46371: PUSH
46372: LD_VAR 0 9
46376: PUSH
46377: LD_INT 1
46379: ARRAY
46380: PPUSH
46381: LD_VAR 0 9
46385: PUSH
46386: LD_INT 2
46388: ARRAY
46389: PPUSH
46390: CALL_OW 546
46394: ST_TO_ADDR
// if hex [ 1 ] then
46395: LD_VAR 0 4
46399: PUSH
46400: LD_INT 1
46402: ARRAY
46403: IFFALSE 46407
// continue ;
46405: GO 46295
// h := hex [ 2 ] ;
46407: LD_ADDR_VAR 0 13
46411: PUSH
46412: LD_VAR 0 4
46416: PUSH
46417: LD_INT 2
46419: ARRAY
46420: ST_TO_ADDR
// if h + 7 < height then
46421: LD_VAR 0 13
46425: PUSH
46426: LD_INT 7
46428: PLUS
46429: PUSH
46430: LD_VAR 0 15
46434: LESS
46435: IFFALSE 46464
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46437: LD_ADDR_VAR 0 18
46441: PUSH
46442: LD_INT 7
46444: PUSH
46445: LD_INT 28
46447: PUSH
46448: LD_INT 45
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: PUSH
46456: LD_VAR 0 12
46460: ARRAY
46461: ST_TO_ADDR
// break ;
46462: GO 46466
// end ; end ; end ;
46464: GO 46295
46466: POP
46467: POP
// end ; if not weapon then
46468: LD_VAR 0 18
46472: NOT
46473: IFFALSE 46533
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46475: LD_ADDR_VAR 0 5
46479: PUSH
46480: LD_VAR 0 5
46484: PUSH
46485: LD_INT 11
46487: PUSH
46488: LD_INT 30
46490: PUSH
46491: LD_INT 49
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: DIFF
46499: ST_TO_ADDR
// if not list then
46500: LD_VAR 0 5
46504: NOT
46505: IFFALSE 46509
// exit ;
46507: GO 46651
// weapon := list [ rand ( 1 , list ) ] ;
46509: LD_ADDR_VAR 0 18
46513: PUSH
46514: LD_VAR 0 5
46518: PUSH
46519: LD_INT 1
46521: PPUSH
46522: LD_VAR 0 5
46526: PPUSH
46527: CALL_OW 12
46531: ARRAY
46532: ST_TO_ADDR
// end ; if weapon then
46533: LD_VAR 0 18
46537: IFFALSE 46651
// begin tmp := CostOfWeapon ( weapon ) ;
46539: LD_ADDR_VAR 0 14
46543: PUSH
46544: LD_VAR 0 18
46548: PPUSH
46549: CALL_OW 451
46553: ST_TO_ADDR
// j := GetBase ( tower ) ;
46554: LD_ADDR_VAR 0 9
46558: PUSH
46559: LD_VAR 0 1
46563: PPUSH
46564: CALL_OW 274
46568: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46569: LD_VAR 0 9
46573: PPUSH
46574: LD_INT 1
46576: PPUSH
46577: CALL_OW 275
46581: PUSH
46582: LD_VAR 0 14
46586: PUSH
46587: LD_INT 1
46589: ARRAY
46590: GREATEREQUAL
46591: PUSH
46592: LD_VAR 0 9
46596: PPUSH
46597: LD_INT 2
46599: PPUSH
46600: CALL_OW 275
46604: PUSH
46605: LD_VAR 0 14
46609: PUSH
46610: LD_INT 2
46612: ARRAY
46613: GREATEREQUAL
46614: AND
46615: PUSH
46616: LD_VAR 0 9
46620: PPUSH
46621: LD_INT 3
46623: PPUSH
46624: CALL_OW 275
46628: PUSH
46629: LD_VAR 0 14
46633: PUSH
46634: LD_INT 3
46636: ARRAY
46637: GREATEREQUAL
46638: AND
46639: IFFALSE 46651
// result := weapon ;
46641: LD_ADDR_VAR 0 3
46645: PUSH
46646: LD_VAR 0 18
46650: ST_TO_ADDR
// end ; end ;
46651: LD_VAR 0 3
46655: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46656: LD_INT 0
46658: PPUSH
46659: PPUSH
// result := true ;
46660: LD_ADDR_VAR 0 3
46664: PUSH
46665: LD_INT 1
46667: ST_TO_ADDR
// if array1 = array2 then
46668: LD_VAR 0 1
46672: PUSH
46673: LD_VAR 0 2
46677: EQUAL
46678: IFFALSE 46738
// begin for i = 1 to array1 do
46680: LD_ADDR_VAR 0 4
46684: PUSH
46685: DOUBLE
46686: LD_INT 1
46688: DEC
46689: ST_TO_ADDR
46690: LD_VAR 0 1
46694: PUSH
46695: FOR_TO
46696: IFFALSE 46734
// if array1 [ i ] <> array2 [ i ] then
46698: LD_VAR 0 1
46702: PUSH
46703: LD_VAR 0 4
46707: ARRAY
46708: PUSH
46709: LD_VAR 0 2
46713: PUSH
46714: LD_VAR 0 4
46718: ARRAY
46719: NONEQUAL
46720: IFFALSE 46732
// begin result := false ;
46722: LD_ADDR_VAR 0 3
46726: PUSH
46727: LD_INT 0
46729: ST_TO_ADDR
// break ;
46730: GO 46734
// end ;
46732: GO 46695
46734: POP
46735: POP
// end else
46736: GO 46746
// result := false ;
46738: LD_ADDR_VAR 0 3
46742: PUSH
46743: LD_INT 0
46745: ST_TO_ADDR
// end ;
46746: LD_VAR 0 3
46750: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46751: LD_INT 0
46753: PPUSH
46754: PPUSH
// if not array1 or not array2 then
46755: LD_VAR 0 1
46759: NOT
46760: PUSH
46761: LD_VAR 0 2
46765: NOT
46766: OR
46767: IFFALSE 46771
// exit ;
46769: GO 46835
// result := true ;
46771: LD_ADDR_VAR 0 3
46775: PUSH
46776: LD_INT 1
46778: ST_TO_ADDR
// for i = 1 to array1 do
46779: LD_ADDR_VAR 0 4
46783: PUSH
46784: DOUBLE
46785: LD_INT 1
46787: DEC
46788: ST_TO_ADDR
46789: LD_VAR 0 1
46793: PUSH
46794: FOR_TO
46795: IFFALSE 46833
// if array1 [ i ] <> array2 [ i ] then
46797: LD_VAR 0 1
46801: PUSH
46802: LD_VAR 0 4
46806: ARRAY
46807: PUSH
46808: LD_VAR 0 2
46812: PUSH
46813: LD_VAR 0 4
46817: ARRAY
46818: NONEQUAL
46819: IFFALSE 46831
// begin result := false ;
46821: LD_ADDR_VAR 0 3
46825: PUSH
46826: LD_INT 0
46828: ST_TO_ADDR
// break ;
46829: GO 46833
// end ;
46831: GO 46794
46833: POP
46834: POP
// end ;
46835: LD_VAR 0 3
46839: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46840: LD_INT 0
46842: PPUSH
46843: PPUSH
46844: PPUSH
// pom := GetBase ( fac ) ;
46845: LD_ADDR_VAR 0 5
46849: PUSH
46850: LD_VAR 0 1
46854: PPUSH
46855: CALL_OW 274
46859: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46860: LD_ADDR_VAR 0 4
46864: PUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_INT 1
46872: ARRAY
46873: PPUSH
46874: LD_VAR 0 2
46878: PUSH
46879: LD_INT 2
46881: ARRAY
46882: PPUSH
46883: LD_VAR 0 2
46887: PUSH
46888: LD_INT 3
46890: ARRAY
46891: PPUSH
46892: LD_VAR 0 2
46896: PUSH
46897: LD_INT 4
46899: ARRAY
46900: PPUSH
46901: CALL_OW 449
46905: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46906: LD_ADDR_VAR 0 3
46910: PUSH
46911: LD_VAR 0 5
46915: PPUSH
46916: LD_INT 1
46918: PPUSH
46919: CALL_OW 275
46923: PUSH
46924: LD_VAR 0 4
46928: PUSH
46929: LD_INT 1
46931: ARRAY
46932: GREATEREQUAL
46933: PUSH
46934: LD_VAR 0 5
46938: PPUSH
46939: LD_INT 2
46941: PPUSH
46942: CALL_OW 275
46946: PUSH
46947: LD_VAR 0 4
46951: PUSH
46952: LD_INT 2
46954: ARRAY
46955: GREATEREQUAL
46956: AND
46957: PUSH
46958: LD_VAR 0 5
46962: PPUSH
46963: LD_INT 3
46965: PPUSH
46966: CALL_OW 275
46970: PUSH
46971: LD_VAR 0 4
46975: PUSH
46976: LD_INT 3
46978: ARRAY
46979: GREATEREQUAL
46980: AND
46981: ST_TO_ADDR
// end ;
46982: LD_VAR 0 3
46986: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46987: LD_INT 0
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
// pom := GetBase ( building ) ;
46993: LD_ADDR_VAR 0 3
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 274
47007: ST_TO_ADDR
// if not pom then
47008: LD_VAR 0 3
47012: NOT
47013: IFFALSE 47017
// exit ;
47015: GO 47187
// btype := GetBType ( building ) ;
47017: LD_ADDR_VAR 0 5
47021: PUSH
47022: LD_VAR 0 1
47026: PPUSH
47027: CALL_OW 266
47031: ST_TO_ADDR
// if btype = b_armoury then
47032: LD_VAR 0 5
47036: PUSH
47037: LD_INT 4
47039: EQUAL
47040: IFFALSE 47050
// btype := b_barracks ;
47042: LD_ADDR_VAR 0 5
47046: PUSH
47047: LD_INT 5
47049: ST_TO_ADDR
// if btype = b_depot then
47050: LD_VAR 0 5
47054: PUSH
47055: LD_INT 0
47057: EQUAL
47058: IFFALSE 47068
// btype := b_warehouse ;
47060: LD_ADDR_VAR 0 5
47064: PUSH
47065: LD_INT 1
47067: ST_TO_ADDR
// if btype = b_workshop then
47068: LD_VAR 0 5
47072: PUSH
47073: LD_INT 2
47075: EQUAL
47076: IFFALSE 47086
// btype := b_factory ;
47078: LD_ADDR_VAR 0 5
47082: PUSH
47083: LD_INT 3
47085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47086: LD_ADDR_VAR 0 4
47090: PUSH
47091: LD_VAR 0 5
47095: PPUSH
47096: LD_VAR 0 1
47100: PPUSH
47101: CALL_OW 248
47105: PPUSH
47106: CALL_OW 450
47110: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47111: LD_ADDR_VAR 0 2
47115: PUSH
47116: LD_VAR 0 3
47120: PPUSH
47121: LD_INT 1
47123: PPUSH
47124: CALL_OW 275
47128: PUSH
47129: LD_VAR 0 4
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: GREATEREQUAL
47138: PUSH
47139: LD_VAR 0 3
47143: PPUSH
47144: LD_INT 2
47146: PPUSH
47147: CALL_OW 275
47151: PUSH
47152: LD_VAR 0 4
47156: PUSH
47157: LD_INT 2
47159: ARRAY
47160: GREATEREQUAL
47161: AND
47162: PUSH
47163: LD_VAR 0 3
47167: PPUSH
47168: LD_INT 3
47170: PPUSH
47171: CALL_OW 275
47175: PUSH
47176: LD_VAR 0 4
47180: PUSH
47181: LD_INT 3
47183: ARRAY
47184: GREATEREQUAL
47185: AND
47186: ST_TO_ADDR
// end ;
47187: LD_VAR 0 2
47191: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47192: LD_INT 0
47194: PPUSH
47195: PPUSH
47196: PPUSH
// pom := GetBase ( building ) ;
47197: LD_ADDR_VAR 0 4
47201: PUSH
47202: LD_VAR 0 1
47206: PPUSH
47207: CALL_OW 274
47211: ST_TO_ADDR
// if not pom then
47212: LD_VAR 0 4
47216: NOT
47217: IFFALSE 47221
// exit ;
47219: GO 47322
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47221: LD_ADDR_VAR 0 5
47225: PUSH
47226: LD_VAR 0 2
47230: PPUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 248
47240: PPUSH
47241: CALL_OW 450
47245: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47246: LD_ADDR_VAR 0 3
47250: PUSH
47251: LD_VAR 0 4
47255: PPUSH
47256: LD_INT 1
47258: PPUSH
47259: CALL_OW 275
47263: PUSH
47264: LD_VAR 0 5
47268: PUSH
47269: LD_INT 1
47271: ARRAY
47272: GREATEREQUAL
47273: PUSH
47274: LD_VAR 0 4
47278: PPUSH
47279: LD_INT 2
47281: PPUSH
47282: CALL_OW 275
47286: PUSH
47287: LD_VAR 0 5
47291: PUSH
47292: LD_INT 2
47294: ARRAY
47295: GREATEREQUAL
47296: AND
47297: PUSH
47298: LD_VAR 0 4
47302: PPUSH
47303: LD_INT 3
47305: PPUSH
47306: CALL_OW 275
47310: PUSH
47311: LD_VAR 0 5
47315: PUSH
47316: LD_INT 3
47318: ARRAY
47319: GREATEREQUAL
47320: AND
47321: ST_TO_ADDR
// end ;
47322: LD_VAR 0 3
47326: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47327: LD_INT 0
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
// result := false ;
47340: LD_ADDR_VAR 0 8
47344: PUSH
47345: LD_INT 0
47347: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47348: LD_VAR 0 5
47352: NOT
47353: PUSH
47354: LD_VAR 0 1
47358: NOT
47359: OR
47360: PUSH
47361: LD_VAR 0 2
47365: NOT
47366: OR
47367: PUSH
47368: LD_VAR 0 3
47372: NOT
47373: OR
47374: IFFALSE 47378
// exit ;
47376: GO 48192
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47378: LD_ADDR_VAR 0 14
47382: PUSH
47383: LD_VAR 0 1
47387: PPUSH
47388: LD_VAR 0 2
47392: PPUSH
47393: LD_VAR 0 3
47397: PPUSH
47398: LD_VAR 0 4
47402: PPUSH
47403: LD_VAR 0 5
47407: PUSH
47408: LD_INT 1
47410: ARRAY
47411: PPUSH
47412: CALL_OW 248
47416: PPUSH
47417: LD_INT 0
47419: PPUSH
47420: CALL 49429 0 6
47424: ST_TO_ADDR
// if not hexes then
47425: LD_VAR 0 14
47429: NOT
47430: IFFALSE 47434
// exit ;
47432: GO 48192
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47434: LD_ADDR_VAR 0 17
47438: PUSH
47439: LD_VAR 0 5
47443: PPUSH
47444: LD_INT 22
47446: PUSH
47447: LD_VAR 0 13
47451: PPUSH
47452: CALL_OW 255
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 30
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 30
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PPUSH
47493: CALL_OW 72
47497: ST_TO_ADDR
// for i = 1 to hexes do
47498: LD_ADDR_VAR 0 9
47502: PUSH
47503: DOUBLE
47504: LD_INT 1
47506: DEC
47507: ST_TO_ADDR
47508: LD_VAR 0 14
47512: PUSH
47513: FOR_TO
47514: IFFALSE 48190
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47516: LD_ADDR_VAR 0 13
47520: PUSH
47521: LD_VAR 0 14
47525: PUSH
47526: LD_VAR 0 9
47530: ARRAY
47531: PUSH
47532: LD_INT 1
47534: ARRAY
47535: PPUSH
47536: LD_VAR 0 14
47540: PUSH
47541: LD_VAR 0 9
47545: ARRAY
47546: PUSH
47547: LD_INT 2
47549: ARRAY
47550: PPUSH
47551: CALL_OW 428
47555: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47556: LD_VAR 0 14
47560: PUSH
47561: LD_VAR 0 9
47565: ARRAY
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: PPUSH
47571: LD_VAR 0 14
47575: PUSH
47576: LD_VAR 0 9
47580: ARRAY
47581: PUSH
47582: LD_INT 2
47584: ARRAY
47585: PPUSH
47586: CALL_OW 351
47590: PUSH
47591: LD_VAR 0 14
47595: PUSH
47596: LD_VAR 0 9
47600: ARRAY
47601: PUSH
47602: LD_INT 1
47604: ARRAY
47605: PPUSH
47606: LD_VAR 0 14
47610: PUSH
47611: LD_VAR 0 9
47615: ARRAY
47616: PUSH
47617: LD_INT 2
47619: ARRAY
47620: PPUSH
47621: CALL_OW 488
47625: NOT
47626: OR
47627: PUSH
47628: LD_VAR 0 13
47632: PPUSH
47633: CALL_OW 247
47637: PUSH
47638: LD_INT 3
47640: EQUAL
47641: OR
47642: IFFALSE 47648
// exit ;
47644: POP
47645: POP
47646: GO 48192
// if not tmp then
47648: LD_VAR 0 13
47652: NOT
47653: IFFALSE 47657
// continue ;
47655: GO 47513
// result := true ;
47657: LD_ADDR_VAR 0 8
47661: PUSH
47662: LD_INT 1
47664: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47665: LD_VAR 0 6
47669: PUSH
47670: LD_VAR 0 13
47674: PPUSH
47675: CALL_OW 247
47679: PUSH
47680: LD_INT 2
47682: EQUAL
47683: AND
47684: PUSH
47685: LD_VAR 0 13
47689: PPUSH
47690: CALL_OW 263
47694: PUSH
47695: LD_INT 1
47697: EQUAL
47698: AND
47699: IFFALSE 47863
// begin if IsDrivenBy ( tmp ) then
47701: LD_VAR 0 13
47705: PPUSH
47706: CALL_OW 311
47710: IFFALSE 47714
// continue ;
47712: GO 47513
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47714: LD_VAR 0 6
47718: PPUSH
47719: LD_INT 3
47721: PUSH
47722: LD_INT 60
47724: PUSH
47725: EMPTY
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: PUSH
47735: LD_INT 55
47737: PUSH
47738: EMPTY
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PPUSH
47749: CALL_OW 72
47753: IFFALSE 47861
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47755: LD_ADDR_VAR 0 18
47759: PUSH
47760: LD_VAR 0 6
47764: PPUSH
47765: LD_INT 3
47767: PUSH
47768: LD_INT 60
47770: PUSH
47771: EMPTY
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: LD_INT 55
47783: PUSH
47784: EMPTY
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PPUSH
47795: CALL_OW 72
47799: PUSH
47800: LD_INT 1
47802: ARRAY
47803: ST_TO_ADDR
// if IsInUnit ( driver ) then
47804: LD_VAR 0 18
47808: PPUSH
47809: CALL_OW 310
47813: IFFALSE 47824
// ComExit ( driver ) ;
47815: LD_VAR 0 18
47819: PPUSH
47820: CALL 72557 0 1
// AddComEnterUnit ( driver , tmp ) ;
47824: LD_VAR 0 18
47828: PPUSH
47829: LD_VAR 0 13
47833: PPUSH
47834: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47838: LD_VAR 0 18
47842: PPUSH
47843: LD_VAR 0 7
47847: PPUSH
47848: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47852: LD_VAR 0 18
47856: PPUSH
47857: CALL_OW 181
// end ; continue ;
47861: GO 47513
// end ; if not cleaners or not tmp in cleaners then
47863: LD_VAR 0 6
47867: NOT
47868: PUSH
47869: LD_VAR 0 13
47873: PUSH
47874: LD_VAR 0 6
47878: IN
47879: NOT
47880: OR
47881: IFFALSE 48188
// begin if dep then
47883: LD_VAR 0 17
47887: IFFALSE 48023
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47889: LD_ADDR_VAR 0 16
47893: PUSH
47894: LD_VAR 0 17
47898: PUSH
47899: LD_INT 1
47901: ARRAY
47902: PPUSH
47903: CALL_OW 250
47907: PPUSH
47908: LD_VAR 0 17
47912: PUSH
47913: LD_INT 1
47915: ARRAY
47916: PPUSH
47917: CALL_OW 254
47921: PPUSH
47922: LD_INT 5
47924: PPUSH
47925: CALL_OW 272
47929: PUSH
47930: LD_VAR 0 17
47934: PUSH
47935: LD_INT 1
47937: ARRAY
47938: PPUSH
47939: CALL_OW 251
47943: PPUSH
47944: LD_VAR 0 17
47948: PUSH
47949: LD_INT 1
47951: ARRAY
47952: PPUSH
47953: CALL_OW 254
47957: PPUSH
47958: LD_INT 5
47960: PPUSH
47961: CALL_OW 273
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47970: LD_VAR 0 16
47974: PUSH
47975: LD_INT 1
47977: ARRAY
47978: PPUSH
47979: LD_VAR 0 16
47983: PUSH
47984: LD_INT 2
47986: ARRAY
47987: PPUSH
47988: CALL_OW 488
47992: IFFALSE 48023
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47994: LD_VAR 0 13
47998: PPUSH
47999: LD_VAR 0 16
48003: PUSH
48004: LD_INT 1
48006: ARRAY
48007: PPUSH
48008: LD_VAR 0 16
48012: PUSH
48013: LD_INT 2
48015: ARRAY
48016: PPUSH
48017: CALL_OW 111
// continue ;
48021: GO 47513
// end ; end ; r := GetDir ( tmp ) ;
48023: LD_ADDR_VAR 0 15
48027: PUSH
48028: LD_VAR 0 13
48032: PPUSH
48033: CALL_OW 254
48037: ST_TO_ADDR
// if r = 5 then
48038: LD_VAR 0 15
48042: PUSH
48043: LD_INT 5
48045: EQUAL
48046: IFFALSE 48056
// r := 0 ;
48048: LD_ADDR_VAR 0 15
48052: PUSH
48053: LD_INT 0
48055: ST_TO_ADDR
// for j = r to 5 do
48056: LD_ADDR_VAR 0 10
48060: PUSH
48061: DOUBLE
48062: LD_VAR 0 15
48066: DEC
48067: ST_TO_ADDR
48068: LD_INT 5
48070: PUSH
48071: FOR_TO
48072: IFFALSE 48186
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48074: LD_ADDR_VAR 0 11
48078: PUSH
48079: LD_VAR 0 13
48083: PPUSH
48084: CALL_OW 250
48088: PPUSH
48089: LD_VAR 0 10
48093: PPUSH
48094: LD_INT 2
48096: PPUSH
48097: CALL_OW 272
48101: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48102: LD_ADDR_VAR 0 12
48106: PUSH
48107: LD_VAR 0 13
48111: PPUSH
48112: CALL_OW 251
48116: PPUSH
48117: LD_VAR 0 10
48121: PPUSH
48122: LD_INT 2
48124: PPUSH
48125: CALL_OW 273
48129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48130: LD_VAR 0 11
48134: PPUSH
48135: LD_VAR 0 12
48139: PPUSH
48140: CALL_OW 488
48144: PUSH
48145: LD_VAR 0 11
48149: PPUSH
48150: LD_VAR 0 12
48154: PPUSH
48155: CALL_OW 428
48159: NOT
48160: AND
48161: IFFALSE 48184
// begin ComMoveXY ( tmp , _x , _y ) ;
48163: LD_VAR 0 13
48167: PPUSH
48168: LD_VAR 0 11
48172: PPUSH
48173: LD_VAR 0 12
48177: PPUSH
48178: CALL_OW 111
// break ;
48182: GO 48186
// end ; end ;
48184: GO 48071
48186: POP
48187: POP
// end ; end ;
48188: GO 47513
48190: POP
48191: POP
// end ;
48192: LD_VAR 0 8
48196: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48197: LD_INT 0
48199: PPUSH
// result := true ;
48200: LD_ADDR_VAR 0 3
48204: PUSH
48205: LD_INT 1
48207: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48208: LD_VAR 0 2
48212: PUSH
48213: LD_INT 24
48215: DOUBLE
48216: EQUAL
48217: IFTRUE 48227
48219: LD_INT 33
48221: DOUBLE
48222: EQUAL
48223: IFTRUE 48227
48225: GO 48252
48227: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: LD_INT 32
48235: PPUSH
48236: LD_VAR 0 1
48240: PPUSH
48241: CALL_OW 321
48245: PUSH
48246: LD_INT 2
48248: EQUAL
48249: ST_TO_ADDR
48250: GO 48572
48252: LD_INT 20
48254: DOUBLE
48255: EQUAL
48256: IFTRUE 48260
48258: GO 48285
48260: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48261: LD_ADDR_VAR 0 3
48265: PUSH
48266: LD_INT 6
48268: PPUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 321
48278: PUSH
48279: LD_INT 2
48281: EQUAL
48282: ST_TO_ADDR
48283: GO 48572
48285: LD_INT 22
48287: DOUBLE
48288: EQUAL
48289: IFTRUE 48299
48291: LD_INT 36
48293: DOUBLE
48294: EQUAL
48295: IFTRUE 48299
48297: GO 48324
48299: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48300: LD_ADDR_VAR 0 3
48304: PUSH
48305: LD_INT 15
48307: PPUSH
48308: LD_VAR 0 1
48312: PPUSH
48313: CALL_OW 321
48317: PUSH
48318: LD_INT 2
48320: EQUAL
48321: ST_TO_ADDR
48322: GO 48572
48324: LD_INT 30
48326: DOUBLE
48327: EQUAL
48328: IFTRUE 48332
48330: GO 48357
48332: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48333: LD_ADDR_VAR 0 3
48337: PUSH
48338: LD_INT 20
48340: PPUSH
48341: LD_VAR 0 1
48345: PPUSH
48346: CALL_OW 321
48350: PUSH
48351: LD_INT 2
48353: EQUAL
48354: ST_TO_ADDR
48355: GO 48572
48357: LD_INT 28
48359: DOUBLE
48360: EQUAL
48361: IFTRUE 48371
48363: LD_INT 21
48365: DOUBLE
48366: EQUAL
48367: IFTRUE 48371
48369: GO 48396
48371: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48372: LD_ADDR_VAR 0 3
48376: PUSH
48377: LD_INT 21
48379: PPUSH
48380: LD_VAR 0 1
48384: PPUSH
48385: CALL_OW 321
48389: PUSH
48390: LD_INT 2
48392: EQUAL
48393: ST_TO_ADDR
48394: GO 48572
48396: LD_INT 16
48398: DOUBLE
48399: EQUAL
48400: IFTRUE 48404
48402: GO 48431
48404: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48405: LD_ADDR_VAR 0 3
48409: PUSH
48410: LD_EXP 49
48414: PPUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 321
48424: PUSH
48425: LD_INT 2
48427: EQUAL
48428: ST_TO_ADDR
48429: GO 48572
48431: LD_INT 19
48433: DOUBLE
48434: EQUAL
48435: IFTRUE 48445
48437: LD_INT 23
48439: DOUBLE
48440: EQUAL
48441: IFTRUE 48445
48443: GO 48472
48445: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48446: LD_ADDR_VAR 0 3
48450: PUSH
48451: LD_EXP 48
48455: PPUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: CALL_OW 321
48465: PUSH
48466: LD_INT 2
48468: EQUAL
48469: ST_TO_ADDR
48470: GO 48572
48472: LD_INT 17
48474: DOUBLE
48475: EQUAL
48476: IFTRUE 48480
48478: GO 48505
48480: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48481: LD_ADDR_VAR 0 3
48485: PUSH
48486: LD_INT 39
48488: PPUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 321
48498: PUSH
48499: LD_INT 2
48501: EQUAL
48502: ST_TO_ADDR
48503: GO 48572
48505: LD_INT 18
48507: DOUBLE
48508: EQUAL
48509: IFTRUE 48513
48511: GO 48538
48513: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48514: LD_ADDR_VAR 0 3
48518: PUSH
48519: LD_INT 40
48521: PPUSH
48522: LD_VAR 0 1
48526: PPUSH
48527: CALL_OW 321
48531: PUSH
48532: LD_INT 2
48534: EQUAL
48535: ST_TO_ADDR
48536: GO 48572
48538: LD_INT 27
48540: DOUBLE
48541: EQUAL
48542: IFTRUE 48546
48544: GO 48571
48546: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48547: LD_ADDR_VAR 0 3
48551: PUSH
48552: LD_INT 35
48554: PPUSH
48555: LD_VAR 0 1
48559: PPUSH
48560: CALL_OW 321
48564: PUSH
48565: LD_INT 2
48567: EQUAL
48568: ST_TO_ADDR
48569: GO 48572
48571: POP
// end ;
48572: LD_VAR 0 3
48576: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48577: LD_INT 0
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
// result := false ;
48590: LD_ADDR_VAR 0 6
48594: PUSH
48595: LD_INT 0
48597: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48598: LD_VAR 0 1
48602: NOT
48603: PUSH
48604: LD_VAR 0 1
48608: PPUSH
48609: CALL_OW 266
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: IN
48624: NOT
48625: OR
48626: PUSH
48627: LD_VAR 0 2
48631: NOT
48632: OR
48633: PUSH
48634: LD_VAR 0 5
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: LD_INT 4
48653: PUSH
48654: LD_INT 5
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: IN
48665: NOT
48666: OR
48667: PUSH
48668: LD_VAR 0 3
48672: PPUSH
48673: LD_VAR 0 4
48677: PPUSH
48678: CALL_OW 488
48682: NOT
48683: OR
48684: IFFALSE 48688
// exit ;
48686: GO 49424
// side := GetSide ( depot ) ;
48688: LD_ADDR_VAR 0 9
48692: PUSH
48693: LD_VAR 0 1
48697: PPUSH
48698: CALL_OW 255
48702: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48703: LD_VAR 0 9
48707: PPUSH
48708: LD_VAR 0 2
48712: PPUSH
48713: CALL 48197 0 2
48717: NOT
48718: IFFALSE 48722
// exit ;
48720: GO 49424
// pom := GetBase ( depot ) ;
48722: LD_ADDR_VAR 0 10
48726: PUSH
48727: LD_VAR 0 1
48731: PPUSH
48732: CALL_OW 274
48736: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48737: LD_ADDR_VAR 0 11
48741: PUSH
48742: LD_VAR 0 2
48746: PPUSH
48747: LD_VAR 0 1
48751: PPUSH
48752: CALL_OW 248
48756: PPUSH
48757: CALL_OW 450
48761: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48762: LD_VAR 0 10
48766: PPUSH
48767: LD_INT 1
48769: PPUSH
48770: CALL_OW 275
48774: PUSH
48775: LD_VAR 0 11
48779: PUSH
48780: LD_INT 1
48782: ARRAY
48783: GREATEREQUAL
48784: PUSH
48785: LD_VAR 0 10
48789: PPUSH
48790: LD_INT 2
48792: PPUSH
48793: CALL_OW 275
48797: PUSH
48798: LD_VAR 0 11
48802: PUSH
48803: LD_INT 2
48805: ARRAY
48806: GREATEREQUAL
48807: AND
48808: PUSH
48809: LD_VAR 0 10
48813: PPUSH
48814: LD_INT 3
48816: PPUSH
48817: CALL_OW 275
48821: PUSH
48822: LD_VAR 0 11
48826: PUSH
48827: LD_INT 3
48829: ARRAY
48830: GREATEREQUAL
48831: AND
48832: NOT
48833: IFFALSE 48837
// exit ;
48835: GO 49424
// if GetBType ( depot ) = b_depot then
48837: LD_VAR 0 1
48841: PPUSH
48842: CALL_OW 266
48846: PUSH
48847: LD_INT 0
48849: EQUAL
48850: IFFALSE 48862
// dist := 28 else
48852: LD_ADDR_VAR 0 14
48856: PUSH
48857: LD_INT 28
48859: ST_TO_ADDR
48860: GO 48870
// dist := 36 ;
48862: LD_ADDR_VAR 0 14
48866: PUSH
48867: LD_INT 36
48869: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48870: LD_VAR 0 1
48874: PPUSH
48875: LD_VAR 0 3
48879: PPUSH
48880: LD_VAR 0 4
48884: PPUSH
48885: CALL_OW 297
48889: PUSH
48890: LD_VAR 0 14
48894: GREATER
48895: IFFALSE 48899
// exit ;
48897: GO 49424
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48899: LD_ADDR_VAR 0 12
48903: PUSH
48904: LD_VAR 0 2
48908: PPUSH
48909: LD_VAR 0 3
48913: PPUSH
48914: LD_VAR 0 4
48918: PPUSH
48919: LD_VAR 0 5
48923: PPUSH
48924: LD_VAR 0 1
48928: PPUSH
48929: CALL_OW 248
48933: PPUSH
48934: LD_INT 0
48936: PPUSH
48937: CALL 49429 0 6
48941: ST_TO_ADDR
// if not hexes then
48942: LD_VAR 0 12
48946: NOT
48947: IFFALSE 48951
// exit ;
48949: GO 49424
// hex := GetHexInfo ( x , y ) ;
48951: LD_ADDR_VAR 0 15
48955: PUSH
48956: LD_VAR 0 3
48960: PPUSH
48961: LD_VAR 0 4
48965: PPUSH
48966: CALL_OW 546
48970: ST_TO_ADDR
// if hex [ 1 ] then
48971: LD_VAR 0 15
48975: PUSH
48976: LD_INT 1
48978: ARRAY
48979: IFFALSE 48983
// exit ;
48981: GO 49424
// height := hex [ 2 ] ;
48983: LD_ADDR_VAR 0 13
48987: PUSH
48988: LD_VAR 0 15
48992: PUSH
48993: LD_INT 2
48995: ARRAY
48996: ST_TO_ADDR
// for i = 1 to hexes do
48997: LD_ADDR_VAR 0 7
49001: PUSH
49002: DOUBLE
49003: LD_INT 1
49005: DEC
49006: ST_TO_ADDR
49007: LD_VAR 0 12
49011: PUSH
49012: FOR_TO
49013: IFFALSE 49343
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49015: LD_VAR 0 12
49019: PUSH
49020: LD_VAR 0 7
49024: ARRAY
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: PPUSH
49030: LD_VAR 0 12
49034: PUSH
49035: LD_VAR 0 7
49039: ARRAY
49040: PUSH
49041: LD_INT 2
49043: ARRAY
49044: PPUSH
49045: CALL_OW 488
49049: NOT
49050: PUSH
49051: LD_VAR 0 12
49055: PUSH
49056: LD_VAR 0 7
49060: ARRAY
49061: PUSH
49062: LD_INT 1
49064: ARRAY
49065: PPUSH
49066: LD_VAR 0 12
49070: PUSH
49071: LD_VAR 0 7
49075: ARRAY
49076: PUSH
49077: LD_INT 2
49079: ARRAY
49080: PPUSH
49081: CALL_OW 428
49085: PUSH
49086: LD_INT 0
49088: GREATER
49089: OR
49090: PUSH
49091: LD_VAR 0 12
49095: PUSH
49096: LD_VAR 0 7
49100: ARRAY
49101: PUSH
49102: LD_INT 1
49104: ARRAY
49105: PPUSH
49106: LD_VAR 0 12
49110: PUSH
49111: LD_VAR 0 7
49115: ARRAY
49116: PUSH
49117: LD_INT 2
49119: ARRAY
49120: PPUSH
49121: CALL_OW 351
49125: OR
49126: IFFALSE 49132
// exit ;
49128: POP
49129: POP
49130: GO 49424
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49132: LD_ADDR_VAR 0 8
49136: PUSH
49137: LD_VAR 0 12
49141: PUSH
49142: LD_VAR 0 7
49146: ARRAY
49147: PUSH
49148: LD_INT 1
49150: ARRAY
49151: PPUSH
49152: LD_VAR 0 12
49156: PUSH
49157: LD_VAR 0 7
49161: ARRAY
49162: PUSH
49163: LD_INT 2
49165: ARRAY
49166: PPUSH
49167: CALL_OW 546
49171: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49172: LD_VAR 0 8
49176: PUSH
49177: LD_INT 1
49179: ARRAY
49180: PUSH
49181: LD_VAR 0 8
49185: PUSH
49186: LD_INT 2
49188: ARRAY
49189: PUSH
49190: LD_VAR 0 13
49194: PUSH
49195: LD_INT 2
49197: PLUS
49198: GREATER
49199: OR
49200: PUSH
49201: LD_VAR 0 8
49205: PUSH
49206: LD_INT 2
49208: ARRAY
49209: PUSH
49210: LD_VAR 0 13
49214: PUSH
49215: LD_INT 2
49217: MINUS
49218: LESS
49219: OR
49220: PUSH
49221: LD_VAR 0 8
49225: PUSH
49226: LD_INT 3
49228: ARRAY
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 8
49235: PUSH
49236: LD_INT 9
49238: PUSH
49239: LD_INT 10
49241: PUSH
49242: LD_INT 11
49244: PUSH
49245: LD_INT 12
49247: PUSH
49248: LD_INT 13
49250: PUSH
49251: LD_INT 16
49253: PUSH
49254: LD_INT 17
49256: PUSH
49257: LD_INT 18
49259: PUSH
49260: LD_INT 19
49262: PUSH
49263: LD_INT 20
49265: PUSH
49266: LD_INT 21
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: IN
49284: NOT
49285: OR
49286: PUSH
49287: LD_VAR 0 8
49291: PUSH
49292: LD_INT 5
49294: ARRAY
49295: NOT
49296: OR
49297: PUSH
49298: LD_VAR 0 8
49302: PUSH
49303: LD_INT 6
49305: ARRAY
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 7
49315: PUSH
49316: LD_INT 9
49318: PUSH
49319: LD_INT 10
49321: PUSH
49322: LD_INT 11
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: IN
49333: NOT
49334: OR
49335: IFFALSE 49341
// exit ;
49337: POP
49338: POP
49339: GO 49424
// end ;
49341: GO 49012
49343: POP
49344: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49345: LD_VAR 0 9
49349: PPUSH
49350: LD_VAR 0 3
49354: PPUSH
49355: LD_VAR 0 4
49359: PPUSH
49360: LD_INT 20
49362: PPUSH
49363: CALL 41370 0 4
49367: PUSH
49368: LD_INT 4
49370: ARRAY
49371: IFFALSE 49375
// exit ;
49373: GO 49424
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49375: LD_VAR 0 2
49379: PUSH
49380: LD_INT 29
49382: PUSH
49383: LD_INT 30
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: IN
49390: PUSH
49391: LD_VAR 0 3
49395: PPUSH
49396: LD_VAR 0 4
49400: PPUSH
49401: LD_VAR 0 9
49405: PPUSH
49406: CALL_OW 440
49410: NOT
49411: AND
49412: IFFALSE 49416
// exit ;
49414: GO 49424
// result := true ;
49416: LD_ADDR_VAR 0 6
49420: PUSH
49421: LD_INT 1
49423: ST_TO_ADDR
// end ;
49424: LD_VAR 0 6
49428: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49429: LD_INT 0
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
49450: PPUSH
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
49467: PPUSH
49468: PPUSH
49469: PPUSH
49470: PPUSH
49471: PPUSH
49472: PPUSH
49473: PPUSH
49474: PPUSH
49475: PPUSH
49476: PPUSH
49477: PPUSH
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
49482: PPUSH
49483: PPUSH
49484: PPUSH
49485: PPUSH
49486: PPUSH
49487: PPUSH
49488: PPUSH
// result = [ ] ;
49489: LD_ADDR_VAR 0 7
49493: PUSH
49494: EMPTY
49495: ST_TO_ADDR
// temp_list = [ ] ;
49496: LD_ADDR_VAR 0 9
49500: PUSH
49501: EMPTY
49502: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49503: LD_VAR 0 4
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 3
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: LD_INT 5
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: IN
49534: NOT
49535: PUSH
49536: LD_VAR 0 1
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: IN
49551: PUSH
49552: LD_VAR 0 5
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: IN
49571: NOT
49572: AND
49573: OR
49574: IFFALSE 49578
// exit ;
49576: GO 67969
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49578: LD_VAR 0 1
49582: PUSH
49583: LD_INT 6
49585: PUSH
49586: LD_INT 7
49588: PUSH
49589: LD_INT 8
49591: PUSH
49592: LD_INT 13
49594: PUSH
49595: LD_INT 12
49597: PUSH
49598: LD_INT 15
49600: PUSH
49601: LD_INT 11
49603: PUSH
49604: LD_INT 14
49606: PUSH
49607: LD_INT 10
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: IN
49621: IFFALSE 49631
// btype = b_lab ;
49623: LD_ADDR_VAR 0 1
49627: PUSH
49628: LD_INT 6
49630: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49631: LD_VAR 0 6
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: IN
49650: NOT
49651: PUSH
49652: LD_VAR 0 1
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: LD_INT 6
49671: PUSH
49672: LD_INT 36
49674: PUSH
49675: LD_INT 4
49677: PUSH
49678: LD_INT 5
49680: PUSH
49681: LD_INT 31
49683: PUSH
49684: LD_INT 32
49686: PUSH
49687: LD_INT 33
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: IN
49703: NOT
49704: PUSH
49705: LD_VAR 0 6
49709: PUSH
49710: LD_INT 1
49712: EQUAL
49713: AND
49714: OR
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: IN
49731: NOT
49732: PUSH
49733: LD_VAR 0 6
49737: PUSH
49738: LD_INT 2
49740: EQUAL
49741: AND
49742: OR
49743: IFFALSE 49753
// mode = 0 ;
49745: LD_ADDR_VAR 0 6
49749: PUSH
49750: LD_INT 0
49752: ST_TO_ADDR
// case mode of 0 :
49753: LD_VAR 0 6
49757: PUSH
49758: LD_INT 0
49760: DOUBLE
49761: EQUAL
49762: IFTRUE 49766
49764: GO 61219
49766: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49767: LD_ADDR_VAR 0 11
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49960: LD_ADDR_VAR 0 12
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50156: LD_ADDR_VAR 0 13
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: NEG
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50355: LD_ADDR_VAR 0 14
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50551: LD_ADDR_VAR 0 15
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50744: LD_ADDR_VAR 0 16
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50937: LD_ADDR_VAR 0 17
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51167: LD_ADDR_VAR 0 18
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51397: LD_ADDR_VAR 0 19
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51627: LD_ADDR_VAR 0 20
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51857: LD_ADDR_VAR 0 21
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52087: LD_ADDR_VAR 0 22
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52317: LD_ADDR_VAR 0 23
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52597: LD_ADDR_VAR 0 24
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52873: LD_ADDR_VAR 0 25
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53147: LD_ADDR_VAR 0 26
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53423: LD_ADDR_VAR 0 27
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53703: LD_ADDR_VAR 0 28
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53985: LD_ADDR_VAR 0 29
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54264: LD_ADDR_VAR 0 30
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54542: LD_ADDR_VAR 0 31
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54820: LD_ADDR_VAR 0 32
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 3
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 3
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 3
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55098: LD_ADDR_VAR 0 33
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55377: LD_ADDR_VAR 0 34
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55657: LD_ADDR_VAR 0 35
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55769: LD_ADDR_VAR 0 36
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55881: LD_ADDR_VAR 0 37
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55993: LD_ADDR_VAR 0 38
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56105: LD_ADDR_VAR 0 39
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56217: LD_ADDR_VAR 0 40
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56329: LD_ADDR_VAR 0 41
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56679: LD_ADDR_VAR 0 42
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57029: LD_ADDR_VAR 0 43
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57377: LD_ADDR_VAR 0 44
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: NEG
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57727: LD_ADDR_VAR 0 45
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: LD_INT 3
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 3
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58077: LD_ADDR_VAR 0 46
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58425: LD_ADDR_VAR 0 47
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58576: LD_ADDR_VAR 0 48
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58723: LD_ADDR_VAR 0 49
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58867: LD_ADDR_VAR 0 50
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59011: LD_ADDR_VAR 0 51
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59158: LD_ADDR_VAR 0 52
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59309: LD_ADDR_VAR 0 53
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59539: LD_ADDR_VAR 0 54
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: NEG
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59769: LD_ADDR_VAR 0 55
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59999: LD_ADDR_VAR 0 56
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60229: LD_ADDR_VAR 0 57
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60459: LD_ADDR_VAR 0 58
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60689: LD_ADDR_VAR 0 59
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60777: LD_ADDR_VAR 0 60
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60865: LD_ADDR_VAR 0 61
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60953: LD_ADDR_VAR 0 62
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61041: LD_ADDR_VAR 0 63
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61129: LD_ADDR_VAR 0 64
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// end ; 1 :
61217: GO 67114
61219: LD_INT 1
61221: DOUBLE
61222: EQUAL
61223: IFTRUE 61227
61225: GO 63850
61227: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61228: LD_ADDR_VAR 0 11
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 3
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61272: LD_ADDR_VAR 0 12
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: LIST
61312: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61313: LD_ADDR_VAR 0 13
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61353: LD_ADDR_VAR 0 14
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61394: LD_ADDR_VAR 0 15
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: NEG
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61438: LD_ADDR_VAR 0 16
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61484: LD_ADDR_VAR 0 17
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 3
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61528: LD_ADDR_VAR 0 18
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61569: LD_ADDR_VAR 0 19
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61609: LD_ADDR_VAR 0 20
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 3
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: LIST
61649: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61650: LD_ADDR_VAR 0 21
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: NEG
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61694: LD_ADDR_VAR 0 22
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61740: LD_ADDR_VAR 0 23
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 4
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61784: LD_ADDR_VAR 0 24
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 4
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: LIST
61824: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61825: LD_ADDR_VAR 0 25
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 4
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: LD_INT 4
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61865: LD_ADDR_VAR 0 26
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61906: LD_ADDR_VAR 0 27
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 3
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: NEG
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61950: LD_ADDR_VAR 0 28
61954: PUSH
61955: LD_INT 3
61957: NEG
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: LD_INT 4
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 4
61981: NEG
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61996: LD_ADDR_VAR 0 29
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 4
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 4
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 5
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 5
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 4
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 6
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 6
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 5
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62151: LD_ADDR_VAR 0 30
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 3
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 4
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 4
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 5
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 5
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 5
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 6
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 6
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62294: LD_ADDR_VAR 0 31
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 3
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 4
62331: PUSH
62332: LD_INT 3
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 4
62341: PUSH
62342: LD_INT 4
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: LD_INT 4
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 5
62361: PUSH
62362: LD_INT 4
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 5
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 4
62381: PUSH
62382: LD_INT 5
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 6
62391: PUSH
62392: LD_INT 5
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 6
62401: PUSH
62402: LD_INT 6
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 5
62411: PUSH
62412: LD_INT 6
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62433: LD_ADDR_VAR 0 32
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 3
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 5
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 5
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 4
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 6
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 6
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62576: LD_ADDR_VAR 0 33
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 4
62628: NEG
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 4
62639: NEG
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 4
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 5
62662: NEG
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 5
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 5
62685: NEG
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 6
62696: NEG
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 6
62707: NEG
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62731: LD_ADDR_VAR 0 34
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 3
62750: NEG
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 3
62774: NEG
62775: PUSH
62776: LD_INT 4
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 4
62786: NEG
62787: PUSH
62788: LD_INT 3
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 4
62798: NEG
62799: PUSH
62800: LD_INT 4
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 4
62810: NEG
62811: PUSH
62812: LD_INT 5
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 5
62822: NEG
62823: PUSH
62824: LD_INT 4
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 5
62834: NEG
62835: PUSH
62836: LD_INT 5
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 5
62846: NEG
62847: PUSH
62848: LD_INT 6
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 6
62858: NEG
62859: PUSH
62860: LD_INT 5
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 6
62870: NEG
62871: PUSH
62872: LD_INT 6
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62894: LD_ADDR_VAR 0 41
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 3
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62938: LD_ADDR_VAR 0 42
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62979: LD_ADDR_VAR 0 43
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: LIST
63018: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63019: LD_ADDR_VAR 0 44
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63060: LD_ADDR_VAR 0 45
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 3
63089: NEG
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63104: LD_ADDR_VAR 0 46
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63150: LD_ADDR_VAR 0 47
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63183: LD_ADDR_VAR 0 48
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 2
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63214: LD_ADDR_VAR 0 49
63218: PUSH
63219: LD_INT 3
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63243: LD_ADDR_VAR 0 50
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 3
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63272: LD_ADDR_VAR 0 51
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63303: LD_ADDR_VAR 0 52
63307: PUSH
63308: LD_INT 3
63310: NEG
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: NEG
63323: PUSH
63324: LD_INT 2
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63336: LD_ADDR_VAR 0 53
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 3
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 3
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: LIST
63379: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63380: LD_ADDR_VAR 0 54
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63421: LD_ADDR_VAR 0 55
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: LD_INT 3
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63461: LD_ADDR_VAR 0 56
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 3
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63502: LD_ADDR_VAR 0 57
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: NEG
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63546: LD_ADDR_VAR 0 58
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: NEG
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: NEG
63578: PUSH
63579: LD_INT 3
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63592: LD_ADDR_VAR 0 59
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63636: LD_ADDR_VAR 0 60
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63677: LD_ADDR_VAR 0 61
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63717: LD_ADDR_VAR 0 62
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63758: LD_ADDR_VAR 0 63
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: NEG
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63802: LD_ADDR_VAR 0 64
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: ST_TO_ADDR
// end ; 2 :
63848: GO 67114
63850: LD_INT 2
63852: DOUBLE
63853: EQUAL
63854: IFTRUE 63858
63856: GO 67113
63858: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63859: LD_ADDR_VAR 0 29
63863: PUSH
63864: LD_INT 4
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 4
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 5
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 5
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 4
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 3
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 5
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 3
63959: PUSH
63960: LD_INT 3
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 3
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 4
63989: PUSH
63990: LD_INT 4
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: LD_INT 3
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 4
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: LD_INT 4
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 5
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 5
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: LD_INT 4
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: LD_INT 5
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: NEG
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: NEG
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: NEG
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 4
64198: NEG
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 4
64209: NEG
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 4
64221: NEG
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 4
64244: NEG
64245: PUSH
64246: LD_INT 4
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 4
64256: NEG
64257: PUSH
64258: LD_INT 5
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 3
64268: NEG
64269: PUSH
64270: LD_INT 4
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 4
64292: NEG
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 5
64304: NEG
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 5
64316: NEG
64317: PUSH
64318: LD_INT 5
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 5
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 5
64340: NEG
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64397: LD_ADDR_VAR 0 30
64401: PUSH
64402: LD_INT 4
64404: PUSH
64405: LD_INT 4
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 4
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 5
64424: PUSH
64425: LD_INT 4
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 5
64434: PUSH
64435: LD_INT 5
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 4
64444: PUSH
64445: LD_INT 5
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: LD_INT 4
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: LD_INT 3
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 5
64474: PUSH
64475: LD_INT 3
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 5
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 4
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 4
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 4
64587: NEG
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 4
64598: NEG
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 4
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 5
64643: NEG
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 5
64654: NEG
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 5
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: LD_INT 3
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 4
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: LD_INT 3
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 3
64737: NEG
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 4
64749: NEG
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: LD_INT 4
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: NEG
64774: PUSH
64775: LD_INT 4
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 4
64785: NEG
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: LD_INT 4
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: LD_INT 5
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: LD_INT 4
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: LD_INT 3
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 3
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: LD_INT 4
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 5
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 2
64887: NEG
64888: PUSH
64889: LD_INT 5
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64944: LD_ADDR_VAR 0 31
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 3
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: LD_INT 4
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 5
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 5
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 4
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 3
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: LD_INT 5
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: NEG
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 3
65055: NEG
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 2
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 4
65100: NEG
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 4
65111: NEG
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 4
65123: NEG
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 4
65146: NEG
65147: PUSH
65148: LD_INT 4
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 4
65158: NEG
65159: PUSH
65160: LD_INT 5
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: LD_INT 4
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 4
65194: NEG
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 5
65206: NEG
65207: PUSH
65208: LD_INT 4
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 5
65218: NEG
65219: PUSH
65220: LD_INT 5
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: LD_INT 5
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 5
65242: NEG
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: LD_INT 3
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: LD_INT 4
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: LD_INT 2
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: LD_INT 4
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 4
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 4
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 5
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 5
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 4
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 5
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65494: LD_ADDR_VAR 0 32
65498: PUSH
65499: LD_INT 4
65501: NEG
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 4
65512: NEG
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 3
65535: NEG
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 4
65546: NEG
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 5
65557: NEG
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 5
65568: NEG
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 5
65580: NEG
65581: PUSH
65582: LD_INT 2
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 3
65592: NEG
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 3
65603: NEG
65604: PUSH
65605: LD_INT 3
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: LD_INT 4
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: LD_INT 3
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 2
65639: NEG
65640: PUSH
65641: LD_INT 2
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 3
65651: NEG
65652: PUSH
65653: LD_INT 2
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 4
65663: NEG
65664: PUSH
65665: LD_INT 3
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 4
65675: NEG
65676: PUSH
65677: LD_INT 4
65679: NEG
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 2
65687: NEG
65688: PUSH
65689: LD_INT 4
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: LD_INT 4
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 5
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: PUSH
65734: LD_INT 4
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 3
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: LD_INT 4
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: LD_INT 5
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: LD_INT 3
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 2
65801: NEG
65802: PUSH
65803: LD_INT 5
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 3
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 4
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 4
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 4
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 4
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 5
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 5
65936: PUSH
65937: LD_INT 5
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 5
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: LD_INT 5
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66041: LD_ADDR_VAR 0 33
66045: PUSH
66046: LD_INT 4
66048: NEG
66049: PUSH
66050: LD_INT 4
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 4
66060: NEG
66061: PUSH
66062: LD_INT 5
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: LD_INT 4
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 4
66096: NEG
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 5
66108: NEG
66109: PUSH
66110: LD_INT 4
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 5
66120: NEG
66121: PUSH
66122: LD_INT 5
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 3
66132: NEG
66133: PUSH
66134: LD_INT 5
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 5
66144: NEG
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: LD_INT 3
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 4
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: LD_INT 3
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 2
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 3
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 4
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: LD_INT 4
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 4
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 5
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 5
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 3
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 3
66330: PUSH
66331: LD_INT 2
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 5
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: LD_INT 2
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 4
66371: PUSH
66372: LD_INT 3
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 4
66381: PUSH
66382: LD_INT 4
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: LD_INT 4
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 4
66421: PUSH
66422: LD_INT 2
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 2
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 4
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 1
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: LD_INT 5
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: LD_INT 5
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: LD_INT 5
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66579: LD_ADDR_VAR 0 34
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 4
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 5
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: LD_INT 3
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: LD_INT 3
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: LD_INT 4
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 5
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: LD_INT 3
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 5
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 4
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 4
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 2
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: PUSH
66772: LD_INT 2
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 4
66781: PUSH
66782: LD_INT 4
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 4
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 5
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 5
66811: PUSH
66812: LD_INT 5
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: PUSH
66822: LD_INT 5
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: LD_INT 4
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 5
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: LD_INT 5
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: LD_INT 2
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 4
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 4
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 2
66953: NEG
66954: PUSH
66955: LD_INT 2
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 4
66975: NEG
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 4
67009: NEG
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 5
67020: NEG
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 5
67031: NEG
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 5
67043: NEG
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 2
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: ST_TO_ADDR
// end ; end ;
67111: GO 67114
67113: POP
// case btype of b_depot , b_warehouse :
67114: LD_VAR 0 1
67118: PUSH
67119: LD_INT 0
67121: DOUBLE
67122: EQUAL
67123: IFTRUE 67133
67125: LD_INT 1
67127: DOUBLE
67128: EQUAL
67129: IFTRUE 67133
67131: GO 67334
67133: POP
// case nation of nation_american :
67134: LD_VAR 0 5
67138: PUSH
67139: LD_INT 1
67141: DOUBLE
67142: EQUAL
67143: IFTRUE 67147
67145: GO 67203
67147: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67148: LD_ADDR_VAR 0 9
67152: PUSH
67153: LD_VAR 0 11
67157: PUSH
67158: LD_VAR 0 12
67162: PUSH
67163: LD_VAR 0 13
67167: PUSH
67168: LD_VAR 0 14
67172: PUSH
67173: LD_VAR 0 15
67177: PUSH
67178: LD_VAR 0 16
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: PUSH
67191: LD_VAR 0 4
67195: PUSH
67196: LD_INT 1
67198: PLUS
67199: ARRAY
67200: ST_TO_ADDR
67201: GO 67332
67203: LD_INT 2
67205: DOUBLE
67206: EQUAL
67207: IFTRUE 67211
67209: GO 67267
67211: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67212: LD_ADDR_VAR 0 9
67216: PUSH
67217: LD_VAR 0 17
67221: PUSH
67222: LD_VAR 0 18
67226: PUSH
67227: LD_VAR 0 19
67231: PUSH
67232: LD_VAR 0 20
67236: PUSH
67237: LD_VAR 0 21
67241: PUSH
67242: LD_VAR 0 22
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: PUSH
67255: LD_VAR 0 4
67259: PUSH
67260: LD_INT 1
67262: PLUS
67263: ARRAY
67264: ST_TO_ADDR
67265: GO 67332
67267: LD_INT 3
67269: DOUBLE
67270: EQUAL
67271: IFTRUE 67275
67273: GO 67331
67275: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67276: LD_ADDR_VAR 0 9
67280: PUSH
67281: LD_VAR 0 23
67285: PUSH
67286: LD_VAR 0 24
67290: PUSH
67291: LD_VAR 0 25
67295: PUSH
67296: LD_VAR 0 26
67300: PUSH
67301: LD_VAR 0 27
67305: PUSH
67306: LD_VAR 0 28
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: PUSH
67319: LD_VAR 0 4
67323: PUSH
67324: LD_INT 1
67326: PLUS
67327: ARRAY
67328: ST_TO_ADDR
67329: GO 67332
67331: POP
67332: GO 67887
67334: LD_INT 2
67336: DOUBLE
67337: EQUAL
67338: IFTRUE 67348
67340: LD_INT 3
67342: DOUBLE
67343: EQUAL
67344: IFTRUE 67348
67346: GO 67404
67348: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67349: LD_ADDR_VAR 0 9
67353: PUSH
67354: LD_VAR 0 29
67358: PUSH
67359: LD_VAR 0 30
67363: PUSH
67364: LD_VAR 0 31
67368: PUSH
67369: LD_VAR 0 32
67373: PUSH
67374: LD_VAR 0 33
67378: PUSH
67379: LD_VAR 0 34
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: PUSH
67392: LD_VAR 0 4
67396: PUSH
67397: LD_INT 1
67399: PLUS
67400: ARRAY
67401: ST_TO_ADDR
67402: GO 67887
67404: LD_INT 16
67406: DOUBLE
67407: EQUAL
67408: IFTRUE 67466
67410: LD_INT 17
67412: DOUBLE
67413: EQUAL
67414: IFTRUE 67466
67416: LD_INT 18
67418: DOUBLE
67419: EQUAL
67420: IFTRUE 67466
67422: LD_INT 19
67424: DOUBLE
67425: EQUAL
67426: IFTRUE 67466
67428: LD_INT 22
67430: DOUBLE
67431: EQUAL
67432: IFTRUE 67466
67434: LD_INT 20
67436: DOUBLE
67437: EQUAL
67438: IFTRUE 67466
67440: LD_INT 21
67442: DOUBLE
67443: EQUAL
67444: IFTRUE 67466
67446: LD_INT 23
67448: DOUBLE
67449: EQUAL
67450: IFTRUE 67466
67452: LD_INT 24
67454: DOUBLE
67455: EQUAL
67456: IFTRUE 67466
67458: LD_INT 25
67460: DOUBLE
67461: EQUAL
67462: IFTRUE 67466
67464: GO 67522
67466: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67467: LD_ADDR_VAR 0 9
67471: PUSH
67472: LD_VAR 0 35
67476: PUSH
67477: LD_VAR 0 36
67481: PUSH
67482: LD_VAR 0 37
67486: PUSH
67487: LD_VAR 0 38
67491: PUSH
67492: LD_VAR 0 39
67496: PUSH
67497: LD_VAR 0 40
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: PUSH
67510: LD_VAR 0 4
67514: PUSH
67515: LD_INT 1
67517: PLUS
67518: ARRAY
67519: ST_TO_ADDR
67520: GO 67887
67522: LD_INT 6
67524: DOUBLE
67525: EQUAL
67526: IFTRUE 67578
67528: LD_INT 7
67530: DOUBLE
67531: EQUAL
67532: IFTRUE 67578
67534: LD_INT 8
67536: DOUBLE
67537: EQUAL
67538: IFTRUE 67578
67540: LD_INT 13
67542: DOUBLE
67543: EQUAL
67544: IFTRUE 67578
67546: LD_INT 12
67548: DOUBLE
67549: EQUAL
67550: IFTRUE 67578
67552: LD_INT 15
67554: DOUBLE
67555: EQUAL
67556: IFTRUE 67578
67558: LD_INT 11
67560: DOUBLE
67561: EQUAL
67562: IFTRUE 67578
67564: LD_INT 14
67566: DOUBLE
67567: EQUAL
67568: IFTRUE 67578
67570: LD_INT 10
67572: DOUBLE
67573: EQUAL
67574: IFTRUE 67578
67576: GO 67634
67578: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67579: LD_ADDR_VAR 0 9
67583: PUSH
67584: LD_VAR 0 41
67588: PUSH
67589: LD_VAR 0 42
67593: PUSH
67594: LD_VAR 0 43
67598: PUSH
67599: LD_VAR 0 44
67603: PUSH
67604: LD_VAR 0 45
67608: PUSH
67609: LD_VAR 0 46
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: PUSH
67622: LD_VAR 0 4
67626: PUSH
67627: LD_INT 1
67629: PLUS
67630: ARRAY
67631: ST_TO_ADDR
67632: GO 67887
67634: LD_INT 36
67636: DOUBLE
67637: EQUAL
67638: IFTRUE 67642
67640: GO 67698
67642: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67643: LD_ADDR_VAR 0 9
67647: PUSH
67648: LD_VAR 0 47
67652: PUSH
67653: LD_VAR 0 48
67657: PUSH
67658: LD_VAR 0 49
67662: PUSH
67663: LD_VAR 0 50
67667: PUSH
67668: LD_VAR 0 51
67672: PUSH
67673: LD_VAR 0 52
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: PUSH
67686: LD_VAR 0 4
67690: PUSH
67691: LD_INT 1
67693: PLUS
67694: ARRAY
67695: ST_TO_ADDR
67696: GO 67887
67698: LD_INT 4
67700: DOUBLE
67701: EQUAL
67702: IFTRUE 67724
67704: LD_INT 5
67706: DOUBLE
67707: EQUAL
67708: IFTRUE 67724
67710: LD_INT 34
67712: DOUBLE
67713: EQUAL
67714: IFTRUE 67724
67716: LD_INT 37
67718: DOUBLE
67719: EQUAL
67720: IFTRUE 67724
67722: GO 67780
67724: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67725: LD_ADDR_VAR 0 9
67729: PUSH
67730: LD_VAR 0 53
67734: PUSH
67735: LD_VAR 0 54
67739: PUSH
67740: LD_VAR 0 55
67744: PUSH
67745: LD_VAR 0 56
67749: PUSH
67750: LD_VAR 0 57
67754: PUSH
67755: LD_VAR 0 58
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: PUSH
67768: LD_VAR 0 4
67772: PUSH
67773: LD_INT 1
67775: PLUS
67776: ARRAY
67777: ST_TO_ADDR
67778: GO 67887
67780: LD_INT 31
67782: DOUBLE
67783: EQUAL
67784: IFTRUE 67830
67786: LD_INT 32
67788: DOUBLE
67789: EQUAL
67790: IFTRUE 67830
67792: LD_INT 33
67794: DOUBLE
67795: EQUAL
67796: IFTRUE 67830
67798: LD_INT 27
67800: DOUBLE
67801: EQUAL
67802: IFTRUE 67830
67804: LD_INT 26
67806: DOUBLE
67807: EQUAL
67808: IFTRUE 67830
67810: LD_INT 28
67812: DOUBLE
67813: EQUAL
67814: IFTRUE 67830
67816: LD_INT 29
67818: DOUBLE
67819: EQUAL
67820: IFTRUE 67830
67822: LD_INT 30
67824: DOUBLE
67825: EQUAL
67826: IFTRUE 67830
67828: GO 67886
67830: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67831: LD_ADDR_VAR 0 9
67835: PUSH
67836: LD_VAR 0 59
67840: PUSH
67841: LD_VAR 0 60
67845: PUSH
67846: LD_VAR 0 61
67850: PUSH
67851: LD_VAR 0 62
67855: PUSH
67856: LD_VAR 0 63
67860: PUSH
67861: LD_VAR 0 64
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: PUSH
67874: LD_VAR 0 4
67878: PUSH
67879: LD_INT 1
67881: PLUS
67882: ARRAY
67883: ST_TO_ADDR
67884: GO 67887
67886: POP
// temp_list2 = [ ] ;
67887: LD_ADDR_VAR 0 10
67891: PUSH
67892: EMPTY
67893: ST_TO_ADDR
// for i in temp_list do
67894: LD_ADDR_VAR 0 8
67898: PUSH
67899: LD_VAR 0 9
67903: PUSH
67904: FOR_IN
67905: IFFALSE 67957
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67907: LD_ADDR_VAR 0 10
67911: PUSH
67912: LD_VAR 0 10
67916: PUSH
67917: LD_VAR 0 8
67921: PUSH
67922: LD_INT 1
67924: ARRAY
67925: PUSH
67926: LD_VAR 0 2
67930: PLUS
67931: PUSH
67932: LD_VAR 0 8
67936: PUSH
67937: LD_INT 2
67939: ARRAY
67940: PUSH
67941: LD_VAR 0 3
67945: PLUS
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: EMPTY
67952: LIST
67953: ADD
67954: ST_TO_ADDR
67955: GO 67904
67957: POP
67958: POP
// result = temp_list2 ;
67959: LD_ADDR_VAR 0 7
67963: PUSH
67964: LD_VAR 0 10
67968: ST_TO_ADDR
// end ;
67969: LD_VAR 0 7
67973: RET
// export function EnemyInRange ( unit , dist ) ; begin
67974: LD_INT 0
67976: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67977: LD_ADDR_VAR 0 3
67981: PUSH
67982: LD_VAR 0 1
67986: PPUSH
67987: CALL_OW 255
67991: PPUSH
67992: LD_VAR 0 1
67996: PPUSH
67997: CALL_OW 250
68001: PPUSH
68002: LD_VAR 0 1
68006: PPUSH
68007: CALL_OW 251
68011: PPUSH
68012: LD_VAR 0 2
68016: PPUSH
68017: CALL 41370 0 4
68021: PUSH
68022: LD_INT 4
68024: ARRAY
68025: ST_TO_ADDR
// end ;
68026: LD_VAR 0 3
68030: RET
// export function PlayerSeeMe ( unit ) ; begin
68031: LD_INT 0
68033: PPUSH
// result := See ( your_side , unit ) ;
68034: LD_ADDR_VAR 0 2
68038: PUSH
68039: LD_OWVAR 2
68043: PPUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: CALL_OW 292
68053: ST_TO_ADDR
// end ;
68054: LD_VAR 0 2
68058: RET
// export function ReverseDir ( unit ) ; begin
68059: LD_INT 0
68061: PPUSH
// if not unit then
68062: LD_VAR 0 1
68066: NOT
68067: IFFALSE 68071
// exit ;
68069: GO 68094
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68071: LD_ADDR_VAR 0 2
68075: PUSH
68076: LD_VAR 0 1
68080: PPUSH
68081: CALL_OW 254
68085: PUSH
68086: LD_INT 3
68088: PLUS
68089: PUSH
68090: LD_INT 6
68092: MOD
68093: ST_TO_ADDR
// end ;
68094: LD_VAR 0 2
68098: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68099: LD_INT 0
68101: PPUSH
68102: PPUSH
68103: PPUSH
68104: PPUSH
68105: PPUSH
// if not hexes then
68106: LD_VAR 0 2
68110: NOT
68111: IFFALSE 68115
// exit ;
68113: GO 68263
// dist := 9999 ;
68115: LD_ADDR_VAR 0 5
68119: PUSH
68120: LD_INT 9999
68122: ST_TO_ADDR
// for i = 1 to hexes do
68123: LD_ADDR_VAR 0 4
68127: PUSH
68128: DOUBLE
68129: LD_INT 1
68131: DEC
68132: ST_TO_ADDR
68133: LD_VAR 0 2
68137: PUSH
68138: FOR_TO
68139: IFFALSE 68251
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68141: LD_VAR 0 1
68145: PPUSH
68146: LD_VAR 0 2
68150: PUSH
68151: LD_VAR 0 4
68155: ARRAY
68156: PUSH
68157: LD_INT 1
68159: ARRAY
68160: PPUSH
68161: LD_VAR 0 2
68165: PUSH
68166: LD_VAR 0 4
68170: ARRAY
68171: PUSH
68172: LD_INT 2
68174: ARRAY
68175: PPUSH
68176: CALL_OW 297
68180: PUSH
68181: LD_VAR 0 5
68185: LESS
68186: IFFALSE 68249
// begin hex := hexes [ i ] ;
68188: LD_ADDR_VAR 0 7
68192: PUSH
68193: LD_VAR 0 2
68197: PUSH
68198: LD_VAR 0 4
68202: ARRAY
68203: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68204: LD_ADDR_VAR 0 5
68208: PUSH
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_VAR 0 2
68218: PUSH
68219: LD_VAR 0 4
68223: ARRAY
68224: PUSH
68225: LD_INT 1
68227: ARRAY
68228: PPUSH
68229: LD_VAR 0 2
68233: PUSH
68234: LD_VAR 0 4
68238: ARRAY
68239: PUSH
68240: LD_INT 2
68242: ARRAY
68243: PPUSH
68244: CALL_OW 297
68248: ST_TO_ADDR
// end ; end ;
68249: GO 68138
68251: POP
68252: POP
// result := hex ;
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: LD_VAR 0 7
68262: ST_TO_ADDR
// end ;
68263: LD_VAR 0 3
68267: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68268: LD_INT 0
68270: PPUSH
68271: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68272: LD_VAR 0 1
68276: NOT
68277: PUSH
68278: LD_VAR 0 1
68282: PUSH
68283: LD_INT 21
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 23
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PPUSH
68307: CALL_OW 69
68311: IN
68312: NOT
68313: OR
68314: IFFALSE 68318
// exit ;
68316: GO 68365
// for i = 1 to 3 do
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: DOUBLE
68324: LD_INT 1
68326: DEC
68327: ST_TO_ADDR
68328: LD_INT 3
68330: PUSH
68331: FOR_TO
68332: IFFALSE 68363
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68334: LD_VAR 0 1
68338: PPUSH
68339: CALL_OW 250
68343: PPUSH
68344: LD_VAR 0 1
68348: PPUSH
68349: CALL_OW 251
68353: PPUSH
68354: LD_INT 1
68356: PPUSH
68357: CALL_OW 453
68361: GO 68331
68363: POP
68364: POP
// end ;
68365: LD_VAR 0 2
68369: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68370: LD_INT 0
68372: PPUSH
68373: PPUSH
68374: PPUSH
68375: PPUSH
68376: PPUSH
68377: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68378: LD_VAR 0 1
68382: NOT
68383: PUSH
68384: LD_VAR 0 2
68388: NOT
68389: OR
68390: PUSH
68391: LD_VAR 0 1
68395: PPUSH
68396: CALL_OW 314
68400: OR
68401: IFFALSE 68405
// exit ;
68403: GO 68846
// x := GetX ( enemy_unit ) ;
68405: LD_ADDR_VAR 0 7
68409: PUSH
68410: LD_VAR 0 2
68414: PPUSH
68415: CALL_OW 250
68419: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68420: LD_ADDR_VAR 0 8
68424: PUSH
68425: LD_VAR 0 2
68429: PPUSH
68430: CALL_OW 251
68434: ST_TO_ADDR
// if not x or not y then
68435: LD_VAR 0 7
68439: NOT
68440: PUSH
68441: LD_VAR 0 8
68445: NOT
68446: OR
68447: IFFALSE 68451
// exit ;
68449: GO 68846
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68451: LD_ADDR_VAR 0 6
68455: PUSH
68456: LD_VAR 0 7
68460: PPUSH
68461: LD_INT 0
68463: PPUSH
68464: LD_INT 4
68466: PPUSH
68467: CALL_OW 272
68471: PUSH
68472: LD_VAR 0 8
68476: PPUSH
68477: LD_INT 0
68479: PPUSH
68480: LD_INT 4
68482: PPUSH
68483: CALL_OW 273
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_VAR 0 7
68496: PPUSH
68497: LD_INT 1
68499: PPUSH
68500: LD_INT 4
68502: PPUSH
68503: CALL_OW 272
68507: PUSH
68508: LD_VAR 0 8
68512: PPUSH
68513: LD_INT 1
68515: PPUSH
68516: LD_INT 4
68518: PPUSH
68519: CALL_OW 273
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_VAR 0 7
68532: PPUSH
68533: LD_INT 2
68535: PPUSH
68536: LD_INT 4
68538: PPUSH
68539: CALL_OW 272
68543: PUSH
68544: LD_VAR 0 8
68548: PPUSH
68549: LD_INT 2
68551: PPUSH
68552: LD_INT 4
68554: PPUSH
68555: CALL_OW 273
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_VAR 0 7
68568: PPUSH
68569: LD_INT 3
68571: PPUSH
68572: LD_INT 4
68574: PPUSH
68575: CALL_OW 272
68579: PUSH
68580: LD_VAR 0 8
68584: PPUSH
68585: LD_INT 3
68587: PPUSH
68588: LD_INT 4
68590: PPUSH
68591: CALL_OW 273
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_VAR 0 7
68604: PPUSH
68605: LD_INT 4
68607: PPUSH
68608: LD_INT 4
68610: PPUSH
68611: CALL_OW 272
68615: PUSH
68616: LD_VAR 0 8
68620: PPUSH
68621: LD_INT 4
68623: PPUSH
68624: LD_INT 4
68626: PPUSH
68627: CALL_OW 273
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_VAR 0 7
68640: PPUSH
68641: LD_INT 5
68643: PPUSH
68644: LD_INT 4
68646: PPUSH
68647: CALL_OW 272
68651: PUSH
68652: LD_VAR 0 8
68656: PPUSH
68657: LD_INT 5
68659: PPUSH
68660: LD_INT 4
68662: PPUSH
68663: CALL_OW 273
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: ST_TO_ADDR
// for i = tmp downto 1 do
68680: LD_ADDR_VAR 0 4
68684: PUSH
68685: DOUBLE
68686: LD_VAR 0 6
68690: INC
68691: ST_TO_ADDR
68692: LD_INT 1
68694: PUSH
68695: FOR_DOWNTO
68696: IFFALSE 68797
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68698: LD_VAR 0 6
68702: PUSH
68703: LD_VAR 0 4
68707: ARRAY
68708: PUSH
68709: LD_INT 1
68711: ARRAY
68712: PPUSH
68713: LD_VAR 0 6
68717: PUSH
68718: LD_VAR 0 4
68722: ARRAY
68723: PUSH
68724: LD_INT 2
68726: ARRAY
68727: PPUSH
68728: CALL_OW 488
68732: NOT
68733: PUSH
68734: LD_VAR 0 6
68738: PUSH
68739: LD_VAR 0 4
68743: ARRAY
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PPUSH
68749: LD_VAR 0 6
68753: PUSH
68754: LD_VAR 0 4
68758: ARRAY
68759: PUSH
68760: LD_INT 2
68762: ARRAY
68763: PPUSH
68764: CALL_OW 428
68768: PUSH
68769: LD_INT 0
68771: NONEQUAL
68772: OR
68773: IFFALSE 68795
// tmp := Delete ( tmp , i ) ;
68775: LD_ADDR_VAR 0 6
68779: PUSH
68780: LD_VAR 0 6
68784: PPUSH
68785: LD_VAR 0 4
68789: PPUSH
68790: CALL_OW 3
68794: ST_TO_ADDR
68795: GO 68695
68797: POP
68798: POP
// j := GetClosestHex ( unit , tmp ) ;
68799: LD_ADDR_VAR 0 5
68803: PUSH
68804: LD_VAR 0 1
68808: PPUSH
68809: LD_VAR 0 6
68813: PPUSH
68814: CALL 68099 0 2
68818: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68819: LD_VAR 0 1
68823: PPUSH
68824: LD_VAR 0 5
68828: PUSH
68829: LD_INT 1
68831: ARRAY
68832: PPUSH
68833: LD_VAR 0 5
68837: PUSH
68838: LD_INT 2
68840: ARRAY
68841: PPUSH
68842: CALL_OW 111
// end ;
68846: LD_VAR 0 3
68850: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
68855: PPUSH
// uc_side = 0 ;
68856: LD_ADDR_OWVAR 20
68860: PUSH
68861: LD_INT 0
68863: ST_TO_ADDR
// uc_nation = 0 ;
68864: LD_ADDR_OWVAR 21
68868: PUSH
68869: LD_INT 0
68871: ST_TO_ADDR
// InitHc_All ( ) ;
68872: CALL_OW 584
// InitVc ;
68876: CALL_OW 20
// if mastodonts then
68880: LD_VAR 0 6
68884: IFFALSE 68951
// for i = 1 to mastodonts do
68886: LD_ADDR_VAR 0 11
68890: PUSH
68891: DOUBLE
68892: LD_INT 1
68894: DEC
68895: ST_TO_ADDR
68896: LD_VAR 0 6
68900: PUSH
68901: FOR_TO
68902: IFFALSE 68949
// begin vc_chassis := 31 ;
68904: LD_ADDR_OWVAR 37
68908: PUSH
68909: LD_INT 31
68911: ST_TO_ADDR
// vc_control := control_rider ;
68912: LD_ADDR_OWVAR 38
68916: PUSH
68917: LD_INT 4
68919: ST_TO_ADDR
// animal := CreateVehicle ;
68920: LD_ADDR_VAR 0 12
68924: PUSH
68925: CALL_OW 45
68929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68930: LD_VAR 0 12
68934: PPUSH
68935: LD_VAR 0 8
68939: PPUSH
68940: LD_INT 0
68942: PPUSH
68943: CALL 71086 0 3
// end ;
68947: GO 68901
68949: POP
68950: POP
// if horses then
68951: LD_VAR 0 5
68955: IFFALSE 69022
// for i = 1 to horses do
68957: LD_ADDR_VAR 0 11
68961: PUSH
68962: DOUBLE
68963: LD_INT 1
68965: DEC
68966: ST_TO_ADDR
68967: LD_VAR 0 5
68971: PUSH
68972: FOR_TO
68973: IFFALSE 69020
// begin hc_class := 21 ;
68975: LD_ADDR_OWVAR 28
68979: PUSH
68980: LD_INT 21
68982: ST_TO_ADDR
// hc_gallery :=  ;
68983: LD_ADDR_OWVAR 33
68987: PUSH
68988: LD_STRING 
68990: ST_TO_ADDR
// animal := CreateHuman ;
68991: LD_ADDR_VAR 0 12
68995: PUSH
68996: CALL_OW 44
69000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69001: LD_VAR 0 12
69005: PPUSH
69006: LD_VAR 0 8
69010: PPUSH
69011: LD_INT 0
69013: PPUSH
69014: CALL 71086 0 3
// end ;
69018: GO 68972
69020: POP
69021: POP
// if birds then
69022: LD_VAR 0 1
69026: IFFALSE 69093
// for i = 1 to birds do
69028: LD_ADDR_VAR 0 11
69032: PUSH
69033: DOUBLE
69034: LD_INT 1
69036: DEC
69037: ST_TO_ADDR
69038: LD_VAR 0 1
69042: PUSH
69043: FOR_TO
69044: IFFALSE 69091
// begin hc_class = 18 ;
69046: LD_ADDR_OWVAR 28
69050: PUSH
69051: LD_INT 18
69053: ST_TO_ADDR
// hc_gallery =  ;
69054: LD_ADDR_OWVAR 33
69058: PUSH
69059: LD_STRING 
69061: ST_TO_ADDR
// animal := CreateHuman ;
69062: LD_ADDR_VAR 0 12
69066: PUSH
69067: CALL_OW 44
69071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69072: LD_VAR 0 12
69076: PPUSH
69077: LD_VAR 0 8
69081: PPUSH
69082: LD_INT 0
69084: PPUSH
69085: CALL 71086 0 3
// end ;
69089: GO 69043
69091: POP
69092: POP
// if tigers then
69093: LD_VAR 0 2
69097: IFFALSE 69181
// for i = 1 to tigers do
69099: LD_ADDR_VAR 0 11
69103: PUSH
69104: DOUBLE
69105: LD_INT 1
69107: DEC
69108: ST_TO_ADDR
69109: LD_VAR 0 2
69113: PUSH
69114: FOR_TO
69115: IFFALSE 69179
// begin hc_class = class_tiger ;
69117: LD_ADDR_OWVAR 28
69121: PUSH
69122: LD_INT 14
69124: ST_TO_ADDR
// hc_gallery =  ;
69125: LD_ADDR_OWVAR 33
69129: PUSH
69130: LD_STRING 
69132: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69133: LD_ADDR_OWVAR 35
69137: PUSH
69138: LD_INT 7
69140: NEG
69141: PPUSH
69142: LD_INT 7
69144: PPUSH
69145: CALL_OW 12
69149: ST_TO_ADDR
// animal := CreateHuman ;
69150: LD_ADDR_VAR 0 12
69154: PUSH
69155: CALL_OW 44
69159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69160: LD_VAR 0 12
69164: PPUSH
69165: LD_VAR 0 8
69169: PPUSH
69170: LD_INT 0
69172: PPUSH
69173: CALL 71086 0 3
// end ;
69177: GO 69114
69179: POP
69180: POP
// if apemans then
69181: LD_VAR 0 3
69185: IFFALSE 69308
// for i = 1 to apemans do
69187: LD_ADDR_VAR 0 11
69191: PUSH
69192: DOUBLE
69193: LD_INT 1
69195: DEC
69196: ST_TO_ADDR
69197: LD_VAR 0 3
69201: PUSH
69202: FOR_TO
69203: IFFALSE 69306
// begin hc_class = class_apeman ;
69205: LD_ADDR_OWVAR 28
69209: PUSH
69210: LD_INT 12
69212: ST_TO_ADDR
// hc_gallery =  ;
69213: LD_ADDR_OWVAR 33
69217: PUSH
69218: LD_STRING 
69220: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69221: LD_ADDR_OWVAR 35
69225: PUSH
69226: LD_INT 2
69228: NEG
69229: PPUSH
69230: LD_INT 2
69232: PPUSH
69233: CALL_OW 12
69237: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69238: LD_ADDR_OWVAR 31
69242: PUSH
69243: LD_INT 1
69245: PPUSH
69246: LD_INT 3
69248: PPUSH
69249: CALL_OW 12
69253: PUSH
69254: LD_INT 1
69256: PPUSH
69257: LD_INT 3
69259: PPUSH
69260: CALL_OW 12
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: ST_TO_ADDR
// animal := CreateHuman ;
69277: LD_ADDR_VAR 0 12
69281: PUSH
69282: CALL_OW 44
69286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69287: LD_VAR 0 12
69291: PPUSH
69292: LD_VAR 0 8
69296: PPUSH
69297: LD_INT 0
69299: PPUSH
69300: CALL 71086 0 3
// end ;
69304: GO 69202
69306: POP
69307: POP
// if enchidnas then
69308: LD_VAR 0 4
69312: IFFALSE 69379
// for i = 1 to enchidnas do
69314: LD_ADDR_VAR 0 11
69318: PUSH
69319: DOUBLE
69320: LD_INT 1
69322: DEC
69323: ST_TO_ADDR
69324: LD_VAR 0 4
69328: PUSH
69329: FOR_TO
69330: IFFALSE 69377
// begin hc_class = 13 ;
69332: LD_ADDR_OWVAR 28
69336: PUSH
69337: LD_INT 13
69339: ST_TO_ADDR
// hc_gallery =  ;
69340: LD_ADDR_OWVAR 33
69344: PUSH
69345: LD_STRING 
69347: ST_TO_ADDR
// animal := CreateHuman ;
69348: LD_ADDR_VAR 0 12
69352: PUSH
69353: CALL_OW 44
69357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69358: LD_VAR 0 12
69362: PPUSH
69363: LD_VAR 0 8
69367: PPUSH
69368: LD_INT 0
69370: PPUSH
69371: CALL 71086 0 3
// end ;
69375: GO 69329
69377: POP
69378: POP
// if fishes then
69379: LD_VAR 0 7
69383: IFFALSE 69450
// for i = 1 to fishes do
69385: LD_ADDR_VAR 0 11
69389: PUSH
69390: DOUBLE
69391: LD_INT 1
69393: DEC
69394: ST_TO_ADDR
69395: LD_VAR 0 7
69399: PUSH
69400: FOR_TO
69401: IFFALSE 69448
// begin hc_class = 20 ;
69403: LD_ADDR_OWVAR 28
69407: PUSH
69408: LD_INT 20
69410: ST_TO_ADDR
// hc_gallery =  ;
69411: LD_ADDR_OWVAR 33
69415: PUSH
69416: LD_STRING 
69418: ST_TO_ADDR
// animal := CreateHuman ;
69419: LD_ADDR_VAR 0 12
69423: PUSH
69424: CALL_OW 44
69428: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69429: LD_VAR 0 12
69433: PPUSH
69434: LD_VAR 0 9
69438: PPUSH
69439: LD_INT 0
69441: PPUSH
69442: CALL 71086 0 3
// end ;
69446: GO 69400
69448: POP
69449: POP
// end ;
69450: LD_VAR 0 10
69454: RET
// export function WantHeal ( sci , unit ) ; begin
69455: LD_INT 0
69457: PPUSH
// if GetTaskList ( sci ) > 0 then
69458: LD_VAR 0 1
69462: PPUSH
69463: CALL_OW 437
69467: PUSH
69468: LD_INT 0
69470: GREATER
69471: IFFALSE 69541
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69473: LD_VAR 0 1
69477: PPUSH
69478: CALL_OW 437
69482: PUSH
69483: LD_INT 1
69485: ARRAY
69486: PUSH
69487: LD_INT 1
69489: ARRAY
69490: PUSH
69491: LD_STRING l
69493: EQUAL
69494: PUSH
69495: LD_VAR 0 1
69499: PPUSH
69500: CALL_OW 437
69504: PUSH
69505: LD_INT 1
69507: ARRAY
69508: PUSH
69509: LD_INT 4
69511: ARRAY
69512: PUSH
69513: LD_VAR 0 2
69517: EQUAL
69518: AND
69519: IFFALSE 69531
// result := true else
69521: LD_ADDR_VAR 0 3
69525: PUSH
69526: LD_INT 1
69528: ST_TO_ADDR
69529: GO 69539
// result := false ;
69531: LD_ADDR_VAR 0 3
69535: PUSH
69536: LD_INT 0
69538: ST_TO_ADDR
// end else
69539: GO 69549
// result := false ;
69541: LD_ADDR_VAR 0 3
69545: PUSH
69546: LD_INT 0
69548: ST_TO_ADDR
// end ;
69549: LD_VAR 0 3
69553: RET
// export function HealTarget ( sci ) ; begin
69554: LD_INT 0
69556: PPUSH
// if not sci then
69557: LD_VAR 0 1
69561: NOT
69562: IFFALSE 69566
// exit ;
69564: GO 69631
// result := 0 ;
69566: LD_ADDR_VAR 0 2
69570: PUSH
69571: LD_INT 0
69573: ST_TO_ADDR
// if GetTaskList ( sci ) then
69574: LD_VAR 0 1
69578: PPUSH
69579: CALL_OW 437
69583: IFFALSE 69631
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 437
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PUSH
69599: LD_INT 1
69601: ARRAY
69602: PUSH
69603: LD_STRING l
69605: EQUAL
69606: IFFALSE 69631
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69608: LD_ADDR_VAR 0 2
69612: PUSH
69613: LD_VAR 0 1
69617: PPUSH
69618: CALL_OW 437
69622: PUSH
69623: LD_INT 1
69625: ARRAY
69626: PUSH
69627: LD_INT 4
69629: ARRAY
69630: ST_TO_ADDR
// end ;
69631: LD_VAR 0 2
69635: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69636: LD_INT 0
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
// if not base_units then
69642: LD_VAR 0 1
69646: NOT
69647: IFFALSE 69651
// exit ;
69649: GO 69738
// result := false ;
69651: LD_ADDR_VAR 0 2
69655: PUSH
69656: LD_INT 0
69658: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69659: LD_ADDR_VAR 0 5
69663: PUSH
69664: LD_VAR 0 1
69668: PPUSH
69669: LD_INT 21
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PPUSH
69679: CALL_OW 72
69683: ST_TO_ADDR
// if not tmp then
69684: LD_VAR 0 5
69688: NOT
69689: IFFALSE 69693
// exit ;
69691: GO 69738
// for i in tmp do
69693: LD_ADDR_VAR 0 3
69697: PUSH
69698: LD_VAR 0 5
69702: PUSH
69703: FOR_IN
69704: IFFALSE 69736
// begin result := EnemyInRange ( i , 22 ) ;
69706: LD_ADDR_VAR 0 2
69710: PUSH
69711: LD_VAR 0 3
69715: PPUSH
69716: LD_INT 22
69718: PPUSH
69719: CALL 67974 0 2
69723: ST_TO_ADDR
// if result then
69724: LD_VAR 0 2
69728: IFFALSE 69734
// exit ;
69730: POP
69731: POP
69732: GO 69738
// end ;
69734: GO 69703
69736: POP
69737: POP
// end ;
69738: LD_VAR 0 2
69742: RET
// export function FilterByTag ( units , tag ) ; begin
69743: LD_INT 0
69745: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69746: LD_ADDR_VAR 0 3
69750: PUSH
69751: LD_VAR 0 1
69755: PPUSH
69756: LD_INT 120
69758: PUSH
69759: LD_VAR 0 2
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PPUSH
69768: CALL_OW 72
69772: ST_TO_ADDR
// end ;
69773: LD_VAR 0 3
69777: RET
// export function IsDriver ( un ) ; begin
69778: LD_INT 0
69780: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69781: LD_ADDR_VAR 0 2
69785: PUSH
69786: LD_VAR 0 1
69790: PUSH
69791: LD_INT 55
69793: PUSH
69794: EMPTY
69795: LIST
69796: PPUSH
69797: CALL_OW 69
69801: IN
69802: ST_TO_ADDR
// end ;
69803: LD_VAR 0 2
69807: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69808: LD_INT 0
69810: PPUSH
69811: PPUSH
// list := [ ] ;
69812: LD_ADDR_VAR 0 5
69816: PUSH
69817: EMPTY
69818: ST_TO_ADDR
// case d of 0 :
69819: LD_VAR 0 3
69823: PUSH
69824: LD_INT 0
69826: DOUBLE
69827: EQUAL
69828: IFTRUE 69832
69830: GO 69965
69832: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69833: LD_ADDR_VAR 0 5
69837: PUSH
69838: LD_VAR 0 1
69842: PUSH
69843: LD_INT 4
69845: MINUS
69846: PUSH
69847: LD_VAR 0 2
69851: PUSH
69852: LD_INT 4
69854: MINUS
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: LIST
69863: PUSH
69864: LD_VAR 0 1
69868: PUSH
69869: LD_INT 3
69871: MINUS
69872: PUSH
69873: LD_VAR 0 2
69877: PUSH
69878: LD_INT 1
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: LIST
69885: PUSH
69886: LD_VAR 0 1
69890: PUSH
69891: LD_INT 4
69893: PLUS
69894: PUSH
69895: LD_VAR 0 2
69899: PUSH
69900: LD_INT 4
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: LIST
69907: PUSH
69908: LD_VAR 0 1
69912: PUSH
69913: LD_INT 3
69915: PLUS
69916: PUSH
69917: LD_VAR 0 2
69921: PUSH
69922: LD_INT 3
69924: PLUS
69925: PUSH
69926: LD_INT 5
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: LIST
69933: PUSH
69934: LD_VAR 0 1
69938: PUSH
69939: LD_VAR 0 2
69943: PUSH
69944: LD_INT 4
69946: PLUS
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: ST_TO_ADDR
// end ; 1 :
69963: GO 70663
69965: LD_INT 1
69967: DOUBLE
69968: EQUAL
69969: IFTRUE 69973
69971: GO 70106
69973: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69974: LD_ADDR_VAR 0 5
69978: PUSH
69979: LD_VAR 0 1
69983: PUSH
69984: LD_VAR 0 2
69988: PUSH
69989: LD_INT 4
69991: MINUS
69992: PUSH
69993: LD_INT 3
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: LIST
70000: PUSH
70001: LD_VAR 0 1
70005: PUSH
70006: LD_INT 3
70008: MINUS
70009: PUSH
70010: LD_VAR 0 2
70014: PUSH
70015: LD_INT 3
70017: MINUS
70018: PUSH
70019: LD_INT 2
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: PUSH
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 4
70034: MINUS
70035: PUSH
70036: LD_VAR 0 2
70040: PUSH
70041: LD_INT 1
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: LIST
70048: PUSH
70049: LD_VAR 0 1
70053: PUSH
70054: LD_VAR 0 2
70058: PUSH
70059: LD_INT 3
70061: PLUS
70062: PUSH
70063: LD_INT 0
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: PUSH
70071: LD_VAR 0 1
70075: PUSH
70076: LD_INT 4
70078: PLUS
70079: PUSH
70080: LD_VAR 0 2
70084: PUSH
70085: LD_INT 4
70087: PLUS
70088: PUSH
70089: LD_INT 5
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: LIST
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: ST_TO_ADDR
// end ; 2 :
70104: GO 70663
70106: LD_INT 2
70108: DOUBLE
70109: EQUAL
70110: IFTRUE 70114
70112: GO 70243
70114: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70115: LD_ADDR_VAR 0 5
70119: PUSH
70120: LD_VAR 0 1
70124: PUSH
70125: LD_VAR 0 2
70129: PUSH
70130: LD_INT 3
70132: MINUS
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: LIST
70141: PUSH
70142: LD_VAR 0 1
70146: PUSH
70147: LD_INT 4
70149: PLUS
70150: PUSH
70151: LD_VAR 0 2
70155: PUSH
70156: LD_INT 4
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: PUSH
70164: LD_VAR 0 1
70168: PUSH
70169: LD_VAR 0 2
70173: PUSH
70174: LD_INT 4
70176: PLUS
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: LIST
70185: PUSH
70186: LD_VAR 0 1
70190: PUSH
70191: LD_INT 3
70193: MINUS
70194: PUSH
70195: LD_VAR 0 2
70199: PUSH
70200: LD_INT 1
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: LIST
70207: PUSH
70208: LD_VAR 0 1
70212: PUSH
70213: LD_INT 4
70215: MINUS
70216: PUSH
70217: LD_VAR 0 2
70221: PUSH
70222: LD_INT 4
70224: MINUS
70225: PUSH
70226: LD_INT 2
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: LIST
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: ST_TO_ADDR
// end ; 3 :
70241: GO 70663
70243: LD_INT 3
70245: DOUBLE
70246: EQUAL
70247: IFTRUE 70251
70249: GO 70384
70251: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70252: LD_ADDR_VAR 0 5
70256: PUSH
70257: LD_VAR 0 1
70261: PUSH
70262: LD_INT 3
70264: PLUS
70265: PUSH
70266: LD_VAR 0 2
70270: PUSH
70271: LD_INT 4
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: LIST
70278: PUSH
70279: LD_VAR 0 1
70283: PUSH
70284: LD_INT 4
70286: PLUS
70287: PUSH
70288: LD_VAR 0 2
70292: PUSH
70293: LD_INT 4
70295: PLUS
70296: PUSH
70297: LD_INT 5
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: PUSH
70305: LD_VAR 0 1
70309: PUSH
70310: LD_INT 4
70312: MINUS
70313: PUSH
70314: LD_VAR 0 2
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: LIST
70326: PUSH
70327: LD_VAR 0 1
70331: PUSH
70332: LD_VAR 0 2
70336: PUSH
70337: LD_INT 4
70339: MINUS
70340: PUSH
70341: LD_INT 3
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: LIST
70348: PUSH
70349: LD_VAR 0 1
70353: PUSH
70354: LD_INT 3
70356: MINUS
70357: PUSH
70358: LD_VAR 0 2
70362: PUSH
70363: LD_INT 3
70365: MINUS
70366: PUSH
70367: LD_INT 2
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: LIST
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: ST_TO_ADDR
// end ; 4 :
70382: GO 70663
70384: LD_INT 4
70386: DOUBLE
70387: EQUAL
70388: IFTRUE 70392
70390: GO 70525
70392: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70393: LD_ADDR_VAR 0 5
70397: PUSH
70398: LD_VAR 0 1
70402: PUSH
70403: LD_VAR 0 2
70407: PUSH
70408: LD_INT 4
70410: PLUS
70411: PUSH
70412: LD_INT 0
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: LIST
70419: PUSH
70420: LD_VAR 0 1
70424: PUSH
70425: LD_INT 3
70427: PLUS
70428: PUSH
70429: LD_VAR 0 2
70433: PUSH
70434: LD_INT 3
70436: PLUS
70437: PUSH
70438: LD_INT 5
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: LIST
70445: PUSH
70446: LD_VAR 0 1
70450: PUSH
70451: LD_INT 4
70453: PLUS
70454: PUSH
70455: LD_VAR 0 2
70459: PUSH
70460: LD_INT 4
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: LIST
70467: PUSH
70468: LD_VAR 0 1
70472: PUSH
70473: LD_VAR 0 2
70477: PUSH
70478: LD_INT 3
70480: MINUS
70481: PUSH
70482: LD_INT 3
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: LIST
70489: PUSH
70490: LD_VAR 0 1
70494: PUSH
70495: LD_INT 4
70497: MINUS
70498: PUSH
70499: LD_VAR 0 2
70503: PUSH
70504: LD_INT 4
70506: MINUS
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: ST_TO_ADDR
// end ; 5 :
70523: GO 70663
70525: LD_INT 5
70527: DOUBLE
70528: EQUAL
70529: IFTRUE 70533
70531: GO 70662
70533: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70534: LD_ADDR_VAR 0 5
70538: PUSH
70539: LD_VAR 0 1
70543: PUSH
70544: LD_INT 4
70546: MINUS
70547: PUSH
70548: LD_VAR 0 2
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: LIST
70560: PUSH
70561: LD_VAR 0 1
70565: PUSH
70566: LD_VAR 0 2
70570: PUSH
70571: LD_INT 4
70573: MINUS
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: PUSH
70583: LD_VAR 0 1
70587: PUSH
70588: LD_INT 4
70590: PLUS
70591: PUSH
70592: LD_VAR 0 2
70596: PUSH
70597: LD_INT 4
70599: PLUS
70600: PUSH
70601: LD_INT 5
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: LIST
70608: PUSH
70609: LD_VAR 0 1
70613: PUSH
70614: LD_INT 3
70616: PLUS
70617: PUSH
70618: LD_VAR 0 2
70622: PUSH
70623: LD_INT 4
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: LIST
70630: PUSH
70631: LD_VAR 0 1
70635: PUSH
70636: LD_VAR 0 2
70640: PUSH
70641: LD_INT 3
70643: PLUS
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: LIST
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: ST_TO_ADDR
// end ; end ;
70660: GO 70663
70662: POP
// result := list ;
70663: LD_ADDR_VAR 0 4
70667: PUSH
70668: LD_VAR 0 5
70672: ST_TO_ADDR
// end ;
70673: LD_VAR 0 4
70677: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70678: LD_INT 0
70680: PPUSH
70681: PPUSH
70682: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70683: LD_VAR 0 1
70687: NOT
70688: PUSH
70689: LD_VAR 0 2
70693: PUSH
70694: LD_INT 1
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 4
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: IN
70712: NOT
70713: OR
70714: IFFALSE 70718
// exit ;
70716: GO 70810
// tmp := [ ] ;
70718: LD_ADDR_VAR 0 5
70722: PUSH
70723: EMPTY
70724: ST_TO_ADDR
// for i in units do
70725: LD_ADDR_VAR 0 4
70729: PUSH
70730: LD_VAR 0 1
70734: PUSH
70735: FOR_IN
70736: IFFALSE 70779
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70738: LD_ADDR_VAR 0 5
70742: PUSH
70743: LD_VAR 0 5
70747: PPUSH
70748: LD_VAR 0 5
70752: PUSH
70753: LD_INT 1
70755: PLUS
70756: PPUSH
70757: LD_VAR 0 4
70761: PPUSH
70762: LD_VAR 0 2
70766: PPUSH
70767: CALL_OW 259
70771: PPUSH
70772: CALL_OW 2
70776: ST_TO_ADDR
70777: GO 70735
70779: POP
70780: POP
// if not tmp then
70781: LD_VAR 0 5
70785: NOT
70786: IFFALSE 70790
// exit ;
70788: GO 70810
// result := SortListByListDesc ( units , tmp ) ;
70790: LD_ADDR_VAR 0 3
70794: PUSH
70795: LD_VAR 0 1
70799: PPUSH
70800: LD_VAR 0 5
70804: PPUSH
70805: CALL_OW 77
70809: ST_TO_ADDR
// end ;
70810: LD_VAR 0 3
70814: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70815: LD_INT 0
70817: PPUSH
70818: PPUSH
70819: PPUSH
// result := false ;
70820: LD_ADDR_VAR 0 3
70824: PUSH
70825: LD_INT 0
70827: ST_TO_ADDR
// x := GetX ( building ) ;
70828: LD_ADDR_VAR 0 4
70832: PUSH
70833: LD_VAR 0 2
70837: PPUSH
70838: CALL_OW 250
70842: ST_TO_ADDR
// y := GetY ( building ) ;
70843: LD_ADDR_VAR 0 5
70847: PUSH
70848: LD_VAR 0 2
70852: PPUSH
70853: CALL_OW 251
70857: ST_TO_ADDR
// if not building or not x or not y then
70858: LD_VAR 0 2
70862: NOT
70863: PUSH
70864: LD_VAR 0 4
70868: NOT
70869: OR
70870: PUSH
70871: LD_VAR 0 5
70875: NOT
70876: OR
70877: IFFALSE 70881
// exit ;
70879: GO 70973
// if GetTaskList ( unit ) then
70881: LD_VAR 0 1
70885: PPUSH
70886: CALL_OW 437
70890: IFFALSE 70973
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70892: LD_STRING e
70894: PUSH
70895: LD_VAR 0 1
70899: PPUSH
70900: CALL_OW 437
70904: PUSH
70905: LD_INT 1
70907: ARRAY
70908: PUSH
70909: LD_INT 1
70911: ARRAY
70912: EQUAL
70913: PUSH
70914: LD_VAR 0 4
70918: PUSH
70919: LD_VAR 0 1
70923: PPUSH
70924: CALL_OW 437
70928: PUSH
70929: LD_INT 1
70931: ARRAY
70932: PUSH
70933: LD_INT 2
70935: ARRAY
70936: EQUAL
70937: AND
70938: PUSH
70939: LD_VAR 0 5
70943: PUSH
70944: LD_VAR 0 1
70948: PPUSH
70949: CALL_OW 437
70953: PUSH
70954: LD_INT 1
70956: ARRAY
70957: PUSH
70958: LD_INT 3
70960: ARRAY
70961: EQUAL
70962: AND
70963: IFFALSE 70973
// result := true end ;
70965: LD_ADDR_VAR 0 3
70969: PUSH
70970: LD_INT 1
70972: ST_TO_ADDR
// end ;
70973: LD_VAR 0 3
70977: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70978: LD_INT 0
70980: PPUSH
// result := false ;
70981: LD_ADDR_VAR 0 4
70985: PUSH
70986: LD_INT 0
70988: ST_TO_ADDR
// if GetTaskList ( unit ) then
70989: LD_VAR 0 1
70993: PPUSH
70994: CALL_OW 437
70998: IFFALSE 71081
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71000: LD_STRING M
71002: PUSH
71003: LD_VAR 0 1
71007: PPUSH
71008: CALL_OW 437
71012: PUSH
71013: LD_INT 1
71015: ARRAY
71016: PUSH
71017: LD_INT 1
71019: ARRAY
71020: EQUAL
71021: PUSH
71022: LD_VAR 0 2
71026: PUSH
71027: LD_VAR 0 1
71031: PPUSH
71032: CALL_OW 437
71036: PUSH
71037: LD_INT 1
71039: ARRAY
71040: PUSH
71041: LD_INT 2
71043: ARRAY
71044: EQUAL
71045: AND
71046: PUSH
71047: LD_VAR 0 3
71051: PUSH
71052: LD_VAR 0 1
71056: PPUSH
71057: CALL_OW 437
71061: PUSH
71062: LD_INT 1
71064: ARRAY
71065: PUSH
71066: LD_INT 3
71068: ARRAY
71069: EQUAL
71070: AND
71071: IFFALSE 71081
// result := true ;
71073: LD_ADDR_VAR 0 4
71077: PUSH
71078: LD_INT 1
71080: ST_TO_ADDR
// end ; end ;
71081: LD_VAR 0 4
71085: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71086: LD_INT 0
71088: PPUSH
71089: PPUSH
71090: PPUSH
71091: PPUSH
// if not unit or not area then
71092: LD_VAR 0 1
71096: NOT
71097: PUSH
71098: LD_VAR 0 2
71102: NOT
71103: OR
71104: IFFALSE 71108
// exit ;
71106: GO 71272
// tmp := AreaToList ( area , i ) ;
71108: LD_ADDR_VAR 0 6
71112: PUSH
71113: LD_VAR 0 2
71117: PPUSH
71118: LD_VAR 0 5
71122: PPUSH
71123: CALL_OW 517
71127: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71128: LD_ADDR_VAR 0 5
71132: PUSH
71133: DOUBLE
71134: LD_INT 1
71136: DEC
71137: ST_TO_ADDR
71138: LD_VAR 0 6
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: PUSH
71147: FOR_TO
71148: IFFALSE 71270
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71150: LD_ADDR_VAR 0 7
71154: PUSH
71155: LD_VAR 0 6
71159: PUSH
71160: LD_INT 1
71162: ARRAY
71163: PUSH
71164: LD_VAR 0 5
71168: ARRAY
71169: PUSH
71170: LD_VAR 0 6
71174: PUSH
71175: LD_INT 2
71177: ARRAY
71178: PUSH
71179: LD_VAR 0 5
71183: ARRAY
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71189: LD_VAR 0 7
71193: PUSH
71194: LD_INT 1
71196: ARRAY
71197: PPUSH
71198: LD_VAR 0 7
71202: PUSH
71203: LD_INT 2
71205: ARRAY
71206: PPUSH
71207: CALL_OW 428
71211: PUSH
71212: LD_INT 0
71214: EQUAL
71215: IFFALSE 71268
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71217: LD_VAR 0 1
71221: PPUSH
71222: LD_VAR 0 7
71226: PUSH
71227: LD_INT 1
71229: ARRAY
71230: PPUSH
71231: LD_VAR 0 7
71235: PUSH
71236: LD_INT 2
71238: ARRAY
71239: PPUSH
71240: LD_VAR 0 3
71244: PPUSH
71245: CALL_OW 48
// result := IsPlaced ( unit ) ;
71249: LD_ADDR_VAR 0 4
71253: PUSH
71254: LD_VAR 0 1
71258: PPUSH
71259: CALL_OW 305
71263: ST_TO_ADDR
// exit ;
71264: POP
71265: POP
71266: GO 71272
// end ; end ;
71268: GO 71147
71270: POP
71271: POP
// end ;
71272: LD_VAR 0 4
71276: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71277: LD_INT 0
71279: PPUSH
71280: PPUSH
71281: PPUSH
// if not side or side > 8 then
71282: LD_VAR 0 1
71286: NOT
71287: PUSH
71288: LD_VAR 0 1
71292: PUSH
71293: LD_INT 8
71295: GREATER
71296: OR
71297: IFFALSE 71301
// exit ;
71299: GO 71488
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71301: LD_ADDR_VAR 0 4
71305: PUSH
71306: LD_INT 22
71308: PUSH
71309: LD_VAR 0 1
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 21
71320: PUSH
71321: LD_INT 3
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PPUSH
71332: CALL_OW 69
71336: ST_TO_ADDR
// if not tmp then
71337: LD_VAR 0 4
71341: NOT
71342: IFFALSE 71346
// exit ;
71344: GO 71488
// enable_addtolog := true ;
71346: LD_ADDR_OWVAR 81
71350: PUSH
71351: LD_INT 1
71353: ST_TO_ADDR
// AddToLog ( [ ) ;
71354: LD_STRING [
71356: PPUSH
71357: CALL_OW 561
// for i in tmp do
71361: LD_ADDR_VAR 0 3
71365: PUSH
71366: LD_VAR 0 4
71370: PUSH
71371: FOR_IN
71372: IFFALSE 71479
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71374: LD_STRING [
71376: PUSH
71377: LD_VAR 0 3
71381: PPUSH
71382: CALL_OW 266
71386: STR
71387: PUSH
71388: LD_STRING , 
71390: STR
71391: PUSH
71392: LD_VAR 0 3
71396: PPUSH
71397: CALL_OW 250
71401: STR
71402: PUSH
71403: LD_STRING , 
71405: STR
71406: PUSH
71407: LD_VAR 0 3
71411: PPUSH
71412: CALL_OW 251
71416: STR
71417: PUSH
71418: LD_STRING , 
71420: STR
71421: PUSH
71422: LD_VAR 0 3
71426: PPUSH
71427: CALL_OW 254
71431: STR
71432: PUSH
71433: LD_STRING , 
71435: STR
71436: PUSH
71437: LD_VAR 0 3
71441: PPUSH
71442: LD_INT 1
71444: PPUSH
71445: CALL_OW 268
71449: STR
71450: PUSH
71451: LD_STRING , 
71453: STR
71454: PUSH
71455: LD_VAR 0 3
71459: PPUSH
71460: LD_INT 2
71462: PPUSH
71463: CALL_OW 268
71467: STR
71468: PUSH
71469: LD_STRING ],
71471: STR
71472: PPUSH
71473: CALL_OW 561
// end ;
71477: GO 71371
71479: POP
71480: POP
// AddToLog ( ]; ) ;
71481: LD_STRING ];
71483: PPUSH
71484: CALL_OW 561
// end ;
71488: LD_VAR 0 2
71492: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71493: LD_INT 0
71495: PPUSH
71496: PPUSH
71497: PPUSH
71498: PPUSH
71499: PPUSH
// if not area or not rate or not max then
71500: LD_VAR 0 1
71504: NOT
71505: PUSH
71506: LD_VAR 0 2
71510: NOT
71511: OR
71512: PUSH
71513: LD_VAR 0 4
71517: NOT
71518: OR
71519: IFFALSE 71523
// exit ;
71521: GO 71712
// while 1 do
71523: LD_INT 1
71525: IFFALSE 71712
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71527: LD_ADDR_VAR 0 9
71531: PUSH
71532: LD_VAR 0 1
71536: PPUSH
71537: LD_INT 1
71539: PPUSH
71540: CALL_OW 287
71544: PUSH
71545: LD_INT 10
71547: MUL
71548: ST_TO_ADDR
// r := rate / 10 ;
71549: LD_ADDR_VAR 0 7
71553: PUSH
71554: LD_VAR 0 2
71558: PUSH
71559: LD_INT 10
71561: DIVREAL
71562: ST_TO_ADDR
// time := 1 1$00 ;
71563: LD_ADDR_VAR 0 8
71567: PUSH
71568: LD_INT 2100
71570: ST_TO_ADDR
// if amount < min then
71571: LD_VAR 0 9
71575: PUSH
71576: LD_VAR 0 3
71580: LESS
71581: IFFALSE 71599
// r := r * 2 else
71583: LD_ADDR_VAR 0 7
71587: PUSH
71588: LD_VAR 0 7
71592: PUSH
71593: LD_INT 2
71595: MUL
71596: ST_TO_ADDR
71597: GO 71625
// if amount > max then
71599: LD_VAR 0 9
71603: PUSH
71604: LD_VAR 0 4
71608: GREATER
71609: IFFALSE 71625
// r := r / 2 ;
71611: LD_ADDR_VAR 0 7
71615: PUSH
71616: LD_VAR 0 7
71620: PUSH
71621: LD_INT 2
71623: DIVREAL
71624: ST_TO_ADDR
// time := time / r ;
71625: LD_ADDR_VAR 0 8
71629: PUSH
71630: LD_VAR 0 8
71634: PUSH
71635: LD_VAR 0 7
71639: DIVREAL
71640: ST_TO_ADDR
// if time < 0 then
71641: LD_VAR 0 8
71645: PUSH
71646: LD_INT 0
71648: LESS
71649: IFFALSE 71666
// time := time * - 1 ;
71651: LD_ADDR_VAR 0 8
71655: PUSH
71656: LD_VAR 0 8
71660: PUSH
71661: LD_INT 1
71663: NEG
71664: MUL
71665: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71666: LD_VAR 0 8
71670: PUSH
71671: LD_INT 35
71673: PPUSH
71674: LD_INT 875
71676: PPUSH
71677: CALL_OW 12
71681: PLUS
71682: PPUSH
71683: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71687: LD_INT 1
71689: PPUSH
71690: LD_INT 5
71692: PPUSH
71693: CALL_OW 12
71697: PPUSH
71698: LD_VAR 0 1
71702: PPUSH
71703: LD_INT 1
71705: PPUSH
71706: CALL_OW 55
// end ;
71710: GO 71523
// end ;
71712: LD_VAR 0 5
71716: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71717: LD_INT 0
71719: PPUSH
71720: PPUSH
71721: PPUSH
71722: PPUSH
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
// if not turrets or not factories then
71727: LD_VAR 0 1
71731: NOT
71732: PUSH
71733: LD_VAR 0 2
71737: NOT
71738: OR
71739: IFFALSE 71743
// exit ;
71741: GO 72050
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71743: LD_ADDR_VAR 0 10
71747: PUSH
71748: LD_INT 5
71750: PUSH
71751: LD_INT 6
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 2
71760: PUSH
71761: LD_INT 4
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 3
71770: PUSH
71771: LD_INT 5
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 24
71785: PUSH
71786: LD_INT 25
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 23
71795: PUSH
71796: LD_INT 27
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 42
71809: PUSH
71810: LD_INT 43
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 44
71819: PUSH
71820: LD_INT 46
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 45
71829: PUSH
71830: LD_INT 47
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: LIST
71846: ST_TO_ADDR
// result := [ ] ;
71847: LD_ADDR_VAR 0 3
71851: PUSH
71852: EMPTY
71853: ST_TO_ADDR
// for i in turrets do
71854: LD_ADDR_VAR 0 4
71858: PUSH
71859: LD_VAR 0 1
71863: PUSH
71864: FOR_IN
71865: IFFALSE 72048
// begin nat := GetNation ( i ) ;
71867: LD_ADDR_VAR 0 7
71871: PUSH
71872: LD_VAR 0 4
71876: PPUSH
71877: CALL_OW 248
71881: ST_TO_ADDR
// weapon := 0 ;
71882: LD_ADDR_VAR 0 8
71886: PUSH
71887: LD_INT 0
71889: ST_TO_ADDR
// if not nat then
71890: LD_VAR 0 7
71894: NOT
71895: IFFALSE 71899
// continue ;
71897: GO 71864
// for j in list [ nat ] do
71899: LD_ADDR_VAR 0 5
71903: PUSH
71904: LD_VAR 0 10
71908: PUSH
71909: LD_VAR 0 7
71913: ARRAY
71914: PUSH
71915: FOR_IN
71916: IFFALSE 71957
// if GetBWeapon ( i ) = j [ 1 ] then
71918: LD_VAR 0 4
71922: PPUSH
71923: CALL_OW 269
71927: PUSH
71928: LD_VAR 0 5
71932: PUSH
71933: LD_INT 1
71935: ARRAY
71936: EQUAL
71937: IFFALSE 71955
// begin weapon := j [ 2 ] ;
71939: LD_ADDR_VAR 0 8
71943: PUSH
71944: LD_VAR 0 5
71948: PUSH
71949: LD_INT 2
71951: ARRAY
71952: ST_TO_ADDR
// break ;
71953: GO 71957
// end ;
71955: GO 71915
71957: POP
71958: POP
// if not weapon then
71959: LD_VAR 0 8
71963: NOT
71964: IFFALSE 71968
// continue ;
71966: GO 71864
// for k in factories do
71968: LD_ADDR_VAR 0 6
71972: PUSH
71973: LD_VAR 0 2
71977: PUSH
71978: FOR_IN
71979: IFFALSE 72044
// begin weapons := AvailableWeaponList ( k ) ;
71981: LD_ADDR_VAR 0 9
71985: PUSH
71986: LD_VAR 0 6
71990: PPUSH
71991: CALL_OW 478
71995: ST_TO_ADDR
// if not weapons then
71996: LD_VAR 0 9
72000: NOT
72001: IFFALSE 72005
// continue ;
72003: GO 71978
// if weapon in weapons then
72005: LD_VAR 0 8
72009: PUSH
72010: LD_VAR 0 9
72014: IN
72015: IFFALSE 72042
// begin result := [ i , weapon ] ;
72017: LD_ADDR_VAR 0 3
72021: PUSH
72022: LD_VAR 0 4
72026: PUSH
72027: LD_VAR 0 8
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: ST_TO_ADDR
// exit ;
72036: POP
72037: POP
72038: POP
72039: POP
72040: GO 72050
// end ; end ;
72042: GO 71978
72044: POP
72045: POP
// end ;
72046: GO 71864
72048: POP
72049: POP
// end ;
72050: LD_VAR 0 3
72054: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72055: LD_INT 0
72057: PPUSH
// if not side or side > 8 then
72058: LD_VAR 0 3
72062: NOT
72063: PUSH
72064: LD_VAR 0 3
72068: PUSH
72069: LD_INT 8
72071: GREATER
72072: OR
72073: IFFALSE 72077
// exit ;
72075: GO 72136
// if not range then
72077: LD_VAR 0 4
72081: NOT
72082: IFFALSE 72093
// range := - 12 ;
72084: LD_ADDR_VAR 0 4
72088: PUSH
72089: LD_INT 12
72091: NEG
72092: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72093: LD_VAR 0 1
72097: PPUSH
72098: LD_VAR 0 2
72102: PPUSH
72103: LD_VAR 0 3
72107: PPUSH
72108: LD_VAR 0 4
72112: PPUSH
72113: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72117: LD_VAR 0 1
72121: PPUSH
72122: LD_VAR 0 2
72126: PPUSH
72127: LD_VAR 0 3
72131: PPUSH
72132: CALL_OW 331
// end ;
72136: LD_VAR 0 5
72140: RET
// export function Video ( mode ) ; begin
72141: LD_INT 0
72143: PPUSH
// ingame_video = mode ;
72144: LD_ADDR_OWVAR 52
72148: PUSH
72149: LD_VAR 0 1
72153: ST_TO_ADDR
// interface_hidden = mode ;
72154: LD_ADDR_OWVAR 54
72158: PUSH
72159: LD_VAR 0 1
72163: ST_TO_ADDR
// end ;
72164: LD_VAR 0 2
72168: RET
// export function Join ( array , element ) ; begin
72169: LD_INT 0
72171: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72172: LD_ADDR_VAR 0 3
72176: PUSH
72177: LD_VAR 0 1
72181: PPUSH
72182: LD_VAR 0 1
72186: PUSH
72187: LD_INT 1
72189: PLUS
72190: PPUSH
72191: LD_VAR 0 2
72195: PPUSH
72196: CALL_OW 1
72200: ST_TO_ADDR
// end ;
72201: LD_VAR 0 3
72205: RET
// export function JoinUnion ( array , element ) ; begin
72206: LD_INT 0
72208: PPUSH
// result := array union element ;
72209: LD_ADDR_VAR 0 3
72213: PUSH
72214: LD_VAR 0 1
72218: PUSH
72219: LD_VAR 0 2
72223: UNION
72224: ST_TO_ADDR
// end ;
72225: LD_VAR 0 3
72229: RET
// export function GetBehemoths ( side ) ; begin
72230: LD_INT 0
72232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72233: LD_ADDR_VAR 0 2
72237: PUSH
72238: LD_INT 22
72240: PUSH
72241: LD_VAR 0 1
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 31
72252: PUSH
72253: LD_INT 25
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PPUSH
72264: CALL_OW 69
72268: ST_TO_ADDR
// end ;
72269: LD_VAR 0 2
72273: RET
// export function Shuffle ( array ) ; var i , index ; begin
72274: LD_INT 0
72276: PPUSH
72277: PPUSH
72278: PPUSH
// result := [ ] ;
72279: LD_ADDR_VAR 0 2
72283: PUSH
72284: EMPTY
72285: ST_TO_ADDR
// if not array then
72286: LD_VAR 0 1
72290: NOT
72291: IFFALSE 72295
// exit ;
72293: GO 72394
// Randomize ;
72295: CALL_OW 10
// for i = array downto 1 do
72299: LD_ADDR_VAR 0 3
72303: PUSH
72304: DOUBLE
72305: LD_VAR 0 1
72309: INC
72310: ST_TO_ADDR
72311: LD_INT 1
72313: PUSH
72314: FOR_DOWNTO
72315: IFFALSE 72392
// begin index := rand ( 1 , array ) ;
72317: LD_ADDR_VAR 0 4
72321: PUSH
72322: LD_INT 1
72324: PPUSH
72325: LD_VAR 0 1
72329: PPUSH
72330: CALL_OW 12
72334: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72335: LD_ADDR_VAR 0 2
72339: PUSH
72340: LD_VAR 0 2
72344: PPUSH
72345: LD_VAR 0 2
72349: PUSH
72350: LD_INT 1
72352: PLUS
72353: PPUSH
72354: LD_VAR 0 1
72358: PUSH
72359: LD_VAR 0 4
72363: ARRAY
72364: PPUSH
72365: CALL_OW 2
72369: ST_TO_ADDR
// array := Delete ( array , index ) ;
72370: LD_ADDR_VAR 0 1
72374: PUSH
72375: LD_VAR 0 1
72379: PPUSH
72380: LD_VAR 0 4
72384: PPUSH
72385: CALL_OW 3
72389: ST_TO_ADDR
// end ;
72390: GO 72314
72392: POP
72393: POP
// end ;
72394: LD_VAR 0 2
72398: RET
// export function GetBaseMaterials ( base ) ; begin
72399: LD_INT 0
72401: PPUSH
// result := [ 0 , 0 , 0 ] ;
72402: LD_ADDR_VAR 0 2
72406: PUSH
72407: LD_INT 0
72409: PUSH
72410: LD_INT 0
72412: PUSH
72413: LD_INT 0
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: LIST
72420: ST_TO_ADDR
// if not base then
72421: LD_VAR 0 1
72425: NOT
72426: IFFALSE 72430
// exit ;
72428: GO 72479
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72430: LD_ADDR_VAR 0 2
72434: PUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: LD_INT 1
72442: PPUSH
72443: CALL_OW 275
72447: PUSH
72448: LD_VAR 0 1
72452: PPUSH
72453: LD_INT 2
72455: PPUSH
72456: CALL_OW 275
72460: PUSH
72461: LD_VAR 0 1
72465: PPUSH
72466: LD_INT 3
72468: PPUSH
72469: CALL_OW 275
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: LIST
72478: ST_TO_ADDR
// end ;
72479: LD_VAR 0 2
72483: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72484: LD_INT 0
72486: PPUSH
72487: PPUSH
// result := array ;
72488: LD_ADDR_VAR 0 3
72492: PUSH
72493: LD_VAR 0 1
72497: ST_TO_ADDR
// if size > 0 then
72498: LD_VAR 0 2
72502: PUSH
72503: LD_INT 0
72505: GREATER
72506: IFFALSE 72552
// for i := array downto size do
72508: LD_ADDR_VAR 0 4
72512: PUSH
72513: DOUBLE
72514: LD_VAR 0 1
72518: INC
72519: ST_TO_ADDR
72520: LD_VAR 0 2
72524: PUSH
72525: FOR_DOWNTO
72526: IFFALSE 72550
// result := Delete ( result , result ) ;
72528: LD_ADDR_VAR 0 3
72532: PUSH
72533: LD_VAR 0 3
72537: PPUSH
72538: LD_VAR 0 3
72542: PPUSH
72543: CALL_OW 3
72547: ST_TO_ADDR
72548: GO 72525
72550: POP
72551: POP
// end ;
72552: LD_VAR 0 3
72556: RET
// export function ComExit ( unit ) ; var tmp ; begin
72557: LD_INT 0
72559: PPUSH
72560: PPUSH
// if not IsInUnit ( unit ) then
72561: LD_VAR 0 1
72565: PPUSH
72566: CALL_OW 310
72570: NOT
72571: IFFALSE 72575
// exit ;
72573: GO 72635
// tmp := IsInUnit ( unit ) ;
72575: LD_ADDR_VAR 0 3
72579: PUSH
72580: LD_VAR 0 1
72584: PPUSH
72585: CALL_OW 310
72589: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72590: LD_VAR 0 3
72594: PPUSH
72595: CALL_OW 247
72599: PUSH
72600: LD_INT 2
72602: EQUAL
72603: IFFALSE 72616
// ComExitVehicle ( unit ) else
72605: LD_VAR 0 1
72609: PPUSH
72610: CALL_OW 121
72614: GO 72625
// ComExitBuilding ( unit ) ;
72616: LD_VAR 0 1
72620: PPUSH
72621: CALL_OW 122
// result := tmp ;
72625: LD_ADDR_VAR 0 2
72629: PUSH
72630: LD_VAR 0 3
72634: ST_TO_ADDR
// end ;
72635: LD_VAR 0 2
72639: RET
// export function ComExitAll ( units ) ; var i ; begin
72640: LD_INT 0
72642: PPUSH
72643: PPUSH
// if not units then
72644: LD_VAR 0 1
72648: NOT
72649: IFFALSE 72653
// exit ;
72651: GO 72679
// for i in units do
72653: LD_ADDR_VAR 0 3
72657: PUSH
72658: LD_VAR 0 1
72662: PUSH
72663: FOR_IN
72664: IFFALSE 72677
// ComExit ( i ) ;
72666: LD_VAR 0 3
72670: PPUSH
72671: CALL 72557 0 1
72675: GO 72663
72677: POP
72678: POP
// end ;
72679: LD_VAR 0 2
72683: RET
// export function ResetHc ; begin
72684: LD_INT 0
72686: PPUSH
// InitHc ;
72687: CALL_OW 19
// hc_importance := 0 ;
72691: LD_ADDR_OWVAR 32
72695: PUSH
72696: LD_INT 0
72698: ST_TO_ADDR
// end ;
72699: LD_VAR 0 1
72703: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72704: LD_INT 0
72706: PPUSH
72707: PPUSH
72708: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72709: LD_ADDR_VAR 0 6
72713: PUSH
72714: LD_VAR 0 1
72718: PUSH
72719: LD_VAR 0 3
72723: PLUS
72724: PUSH
72725: LD_INT 2
72727: DIV
72728: ST_TO_ADDR
// if _x < 0 then
72729: LD_VAR 0 6
72733: PUSH
72734: LD_INT 0
72736: LESS
72737: IFFALSE 72754
// _x := _x * - 1 ;
72739: LD_ADDR_VAR 0 6
72743: PUSH
72744: LD_VAR 0 6
72748: PUSH
72749: LD_INT 1
72751: NEG
72752: MUL
72753: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72754: LD_ADDR_VAR 0 7
72758: PUSH
72759: LD_VAR 0 2
72763: PUSH
72764: LD_VAR 0 4
72768: PLUS
72769: PUSH
72770: LD_INT 2
72772: DIV
72773: ST_TO_ADDR
// if _y < 0 then
72774: LD_VAR 0 7
72778: PUSH
72779: LD_INT 0
72781: LESS
72782: IFFALSE 72799
// _y := _y * - 1 ;
72784: LD_ADDR_VAR 0 7
72788: PUSH
72789: LD_VAR 0 7
72793: PUSH
72794: LD_INT 1
72796: NEG
72797: MUL
72798: ST_TO_ADDR
// result := [ _x , _y ] ;
72799: LD_ADDR_VAR 0 5
72803: PUSH
72804: LD_VAR 0 6
72808: PUSH
72809: LD_VAR 0 7
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: ST_TO_ADDR
// end ;
72818: LD_VAR 0 5
72822: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72823: LD_INT 0
72825: PPUSH
72826: PPUSH
72827: PPUSH
72828: PPUSH
// task := GetTaskList ( unit ) ;
72829: LD_ADDR_VAR 0 7
72833: PUSH
72834: LD_VAR 0 1
72838: PPUSH
72839: CALL_OW 437
72843: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72844: LD_VAR 0 7
72848: NOT
72849: PUSH
72850: LD_VAR 0 1
72854: PPUSH
72855: LD_VAR 0 2
72859: PPUSH
72860: CALL_OW 308
72864: NOT
72865: AND
72866: IFFALSE 72870
// exit ;
72868: GO 72988
// if IsInArea ( unit , area ) then
72870: LD_VAR 0 1
72874: PPUSH
72875: LD_VAR 0 2
72879: PPUSH
72880: CALL_OW 308
72884: IFFALSE 72902
// begin ComMoveToArea ( unit , goAway ) ;
72886: LD_VAR 0 1
72890: PPUSH
72891: LD_VAR 0 3
72895: PPUSH
72896: CALL_OW 113
// exit ;
72900: GO 72988
// end ; if task [ 1 ] [ 1 ] <> M then
72902: LD_VAR 0 7
72906: PUSH
72907: LD_INT 1
72909: ARRAY
72910: PUSH
72911: LD_INT 1
72913: ARRAY
72914: PUSH
72915: LD_STRING M
72917: NONEQUAL
72918: IFFALSE 72922
// exit ;
72920: GO 72988
// x := task [ 1 ] [ 2 ] ;
72922: LD_ADDR_VAR 0 5
72926: PUSH
72927: LD_VAR 0 7
72931: PUSH
72932: LD_INT 1
72934: ARRAY
72935: PUSH
72936: LD_INT 2
72938: ARRAY
72939: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72940: LD_ADDR_VAR 0 6
72944: PUSH
72945: LD_VAR 0 7
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PUSH
72954: LD_INT 3
72956: ARRAY
72957: ST_TO_ADDR
// if InArea ( x , y , area ) then
72958: LD_VAR 0 5
72962: PPUSH
72963: LD_VAR 0 6
72967: PPUSH
72968: LD_VAR 0 2
72972: PPUSH
72973: CALL_OW 309
72977: IFFALSE 72988
// ComStop ( unit ) ;
72979: LD_VAR 0 1
72983: PPUSH
72984: CALL_OW 141
// end ;
72988: LD_VAR 0 4
72992: RET
// export function Abs ( value ) ; begin
72993: LD_INT 0
72995: PPUSH
// result := value ;
72996: LD_ADDR_VAR 0 2
73000: PUSH
73001: LD_VAR 0 1
73005: ST_TO_ADDR
// if value < 0 then
73006: LD_VAR 0 1
73010: PUSH
73011: LD_INT 0
73013: LESS
73014: IFFALSE 73031
// result := value * - 1 ;
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_VAR 0 1
73025: PUSH
73026: LD_INT 1
73028: NEG
73029: MUL
73030: ST_TO_ADDR
// end ;
73031: LD_VAR 0 2
73035: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73036: LD_INT 0
73038: PPUSH
73039: PPUSH
73040: PPUSH
73041: PPUSH
73042: PPUSH
73043: PPUSH
73044: PPUSH
73045: PPUSH
// if not unit or not building then
73046: LD_VAR 0 1
73050: NOT
73051: PUSH
73052: LD_VAR 0 2
73056: NOT
73057: OR
73058: IFFALSE 73062
// exit ;
73060: GO 73288
// x := GetX ( building ) ;
73062: LD_ADDR_VAR 0 4
73066: PUSH
73067: LD_VAR 0 2
73071: PPUSH
73072: CALL_OW 250
73076: ST_TO_ADDR
// y := GetY ( building ) ;
73077: LD_ADDR_VAR 0 6
73081: PUSH
73082: LD_VAR 0 2
73086: PPUSH
73087: CALL_OW 251
73091: ST_TO_ADDR
// d := GetDir ( building ) ;
73092: LD_ADDR_VAR 0 8
73096: PUSH
73097: LD_VAR 0 2
73101: PPUSH
73102: CALL_OW 254
73106: ST_TO_ADDR
// r := 4 ;
73107: LD_ADDR_VAR 0 9
73111: PUSH
73112: LD_INT 4
73114: ST_TO_ADDR
// for i := 1 to 5 do
73115: LD_ADDR_VAR 0 10
73119: PUSH
73120: DOUBLE
73121: LD_INT 1
73123: DEC
73124: ST_TO_ADDR
73125: LD_INT 5
73127: PUSH
73128: FOR_TO
73129: IFFALSE 73286
// begin _x := ShiftX ( x , d , r + i ) ;
73131: LD_ADDR_VAR 0 5
73135: PUSH
73136: LD_VAR 0 4
73140: PPUSH
73141: LD_VAR 0 8
73145: PPUSH
73146: LD_VAR 0 9
73150: PUSH
73151: LD_VAR 0 10
73155: PLUS
73156: PPUSH
73157: CALL_OW 272
73161: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73162: LD_ADDR_VAR 0 7
73166: PUSH
73167: LD_VAR 0 6
73171: PPUSH
73172: LD_VAR 0 8
73176: PPUSH
73177: LD_VAR 0 9
73181: PUSH
73182: LD_VAR 0 10
73186: PLUS
73187: PPUSH
73188: CALL_OW 273
73192: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73193: LD_VAR 0 5
73197: PPUSH
73198: LD_VAR 0 7
73202: PPUSH
73203: CALL_OW 488
73207: PUSH
73208: LD_VAR 0 5
73212: PPUSH
73213: LD_VAR 0 7
73217: PPUSH
73218: CALL_OW 428
73222: PPUSH
73223: CALL_OW 247
73227: PUSH
73228: LD_INT 3
73230: PUSH
73231: LD_INT 2
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: IN
73238: NOT
73239: AND
73240: IFFALSE 73284
// begin ComMoveXY ( unit , _x , _y ) ;
73242: LD_VAR 0 1
73246: PPUSH
73247: LD_VAR 0 5
73251: PPUSH
73252: LD_VAR 0 7
73256: PPUSH
73257: CALL_OW 111
// result := [ _x , _y ] ;
73261: LD_ADDR_VAR 0 3
73265: PUSH
73266: LD_VAR 0 5
73270: PUSH
73271: LD_VAR 0 7
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: ST_TO_ADDR
// exit ;
73280: POP
73281: POP
73282: GO 73288
// end ; end ;
73284: GO 73128
73286: POP
73287: POP
// end ;
73288: LD_VAR 0 3
73292: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73293: LD_INT 0
73295: PPUSH
73296: PPUSH
73297: PPUSH
// result := 0 ;
73298: LD_ADDR_VAR 0 3
73302: PUSH
73303: LD_INT 0
73305: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73306: LD_VAR 0 1
73310: PUSH
73311: LD_INT 0
73313: LESS
73314: PUSH
73315: LD_VAR 0 1
73319: PUSH
73320: LD_INT 8
73322: GREATER
73323: OR
73324: PUSH
73325: LD_VAR 0 2
73329: PUSH
73330: LD_INT 0
73332: LESS
73333: OR
73334: PUSH
73335: LD_VAR 0 2
73339: PUSH
73340: LD_INT 8
73342: GREATER
73343: OR
73344: IFFALSE 73348
// exit ;
73346: GO 73423
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73348: LD_ADDR_VAR 0 4
73352: PUSH
73353: LD_INT 22
73355: PUSH
73356: LD_VAR 0 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PPUSH
73365: CALL_OW 69
73369: PUSH
73370: FOR_IN
73371: IFFALSE 73421
// begin un := UnitShoot ( i ) ;
73373: LD_ADDR_VAR 0 5
73377: PUSH
73378: LD_VAR 0 4
73382: PPUSH
73383: CALL_OW 504
73387: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73388: LD_VAR 0 5
73392: PPUSH
73393: CALL_OW 255
73397: PUSH
73398: LD_VAR 0 1
73402: EQUAL
73403: IFFALSE 73419
// begin result := un ;
73405: LD_ADDR_VAR 0 3
73409: PUSH
73410: LD_VAR 0 5
73414: ST_TO_ADDR
// exit ;
73415: POP
73416: POP
73417: GO 73423
// end ; end ;
73419: GO 73370
73421: POP
73422: POP
// end ;
73423: LD_VAR 0 3
73427: RET
// export function GetCargoBay ( units ) ; begin
73428: LD_INT 0
73430: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73431: LD_ADDR_VAR 0 2
73435: PUSH
73436: LD_VAR 0 1
73440: PPUSH
73441: LD_INT 2
73443: PUSH
73444: LD_INT 34
73446: PUSH
73447: LD_INT 12
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 34
73456: PUSH
73457: LD_INT 51
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 34
73466: PUSH
73467: LD_INT 32
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 34
73476: PUSH
73477: LD_EXP 37
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: PPUSH
73493: CALL_OW 72
73497: ST_TO_ADDR
// end ;
73498: LD_VAR 0 2
73502: RET
// export function Negate ( value ) ; begin
73503: LD_INT 0
73505: PPUSH
// result := not value ;
73506: LD_ADDR_VAR 0 2
73510: PUSH
73511: LD_VAR 0 1
73515: NOT
73516: ST_TO_ADDR
// end ;
73517: LD_VAR 0 2
73521: RET
// export function Inc ( value ) ; begin
73522: LD_INT 0
73524: PPUSH
// result := value + 1 ;
73525: LD_ADDR_VAR 0 2
73529: PUSH
73530: LD_VAR 0 1
73534: PUSH
73535: LD_INT 1
73537: PLUS
73538: ST_TO_ADDR
// end ;
73539: LD_VAR 0 2
73543: RET
// export function Dec ( value ) ; begin
73544: LD_INT 0
73546: PPUSH
// result := value - 1 ;
73547: LD_ADDR_VAR 0 2
73551: PUSH
73552: LD_VAR 0 1
73556: PUSH
73557: LD_INT 1
73559: MINUS
73560: ST_TO_ADDR
// end ;
73561: LD_VAR 0 2
73565: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73566: LD_INT 0
73568: PPUSH
73569: PPUSH
73570: PPUSH
73571: PPUSH
73572: PPUSH
73573: PPUSH
73574: PPUSH
73575: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73576: LD_VAR 0 1
73580: PPUSH
73581: LD_VAR 0 2
73585: PPUSH
73586: CALL_OW 488
73590: NOT
73591: PUSH
73592: LD_VAR 0 3
73596: PPUSH
73597: LD_VAR 0 4
73601: PPUSH
73602: CALL_OW 488
73606: NOT
73607: OR
73608: IFFALSE 73621
// begin result := - 1 ;
73610: LD_ADDR_VAR 0 5
73614: PUSH
73615: LD_INT 1
73617: NEG
73618: ST_TO_ADDR
// exit ;
73619: GO 73856
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73621: LD_ADDR_VAR 0 12
73625: PUSH
73626: LD_VAR 0 1
73630: PPUSH
73631: LD_VAR 0 2
73635: PPUSH
73636: LD_VAR 0 3
73640: PPUSH
73641: LD_VAR 0 4
73645: PPUSH
73646: CALL 72704 0 4
73650: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73651: LD_ADDR_VAR 0 11
73655: PUSH
73656: LD_VAR 0 1
73660: PPUSH
73661: LD_VAR 0 2
73665: PPUSH
73666: LD_VAR 0 12
73670: PUSH
73671: LD_INT 1
73673: ARRAY
73674: PPUSH
73675: LD_VAR 0 12
73679: PUSH
73680: LD_INT 2
73682: ARRAY
73683: PPUSH
73684: CALL_OW 298
73688: ST_TO_ADDR
// distance := 9999 ;
73689: LD_ADDR_VAR 0 10
73693: PUSH
73694: LD_INT 9999
73696: ST_TO_ADDR
// for i := 0 to 5 do
73697: LD_ADDR_VAR 0 6
73701: PUSH
73702: DOUBLE
73703: LD_INT 0
73705: DEC
73706: ST_TO_ADDR
73707: LD_INT 5
73709: PUSH
73710: FOR_TO
73711: IFFALSE 73854
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73713: LD_ADDR_VAR 0 7
73717: PUSH
73718: LD_VAR 0 1
73722: PPUSH
73723: LD_VAR 0 6
73727: PPUSH
73728: LD_VAR 0 11
73732: PPUSH
73733: CALL_OW 272
73737: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73738: LD_ADDR_VAR 0 8
73742: PUSH
73743: LD_VAR 0 2
73747: PPUSH
73748: LD_VAR 0 6
73752: PPUSH
73753: LD_VAR 0 11
73757: PPUSH
73758: CALL_OW 273
73762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73763: LD_VAR 0 7
73767: PPUSH
73768: LD_VAR 0 8
73772: PPUSH
73773: CALL_OW 488
73777: NOT
73778: IFFALSE 73782
// continue ;
73780: GO 73710
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73782: LD_ADDR_VAR 0 9
73786: PUSH
73787: LD_VAR 0 12
73791: PUSH
73792: LD_INT 1
73794: ARRAY
73795: PPUSH
73796: LD_VAR 0 12
73800: PUSH
73801: LD_INT 2
73803: ARRAY
73804: PPUSH
73805: LD_VAR 0 7
73809: PPUSH
73810: LD_VAR 0 8
73814: PPUSH
73815: CALL_OW 298
73819: ST_TO_ADDR
// if tmp < distance then
73820: LD_VAR 0 9
73824: PUSH
73825: LD_VAR 0 10
73829: LESS
73830: IFFALSE 73852
// begin result := i ;
73832: LD_ADDR_VAR 0 5
73836: PUSH
73837: LD_VAR 0 6
73841: ST_TO_ADDR
// distance := tmp ;
73842: LD_ADDR_VAR 0 10
73846: PUSH
73847: LD_VAR 0 9
73851: ST_TO_ADDR
// end ; end ;
73852: GO 73710
73854: POP
73855: POP
// end ;
73856: LD_VAR 0 5
73860: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73861: LD_INT 0
73863: PPUSH
73864: PPUSH
// if not driver or not IsInUnit ( driver ) then
73865: LD_VAR 0 1
73869: NOT
73870: PUSH
73871: LD_VAR 0 1
73875: PPUSH
73876: CALL_OW 310
73880: NOT
73881: OR
73882: IFFALSE 73886
// exit ;
73884: GO 73976
// vehicle := IsInUnit ( driver ) ;
73886: LD_ADDR_VAR 0 3
73890: PUSH
73891: LD_VAR 0 1
73895: PPUSH
73896: CALL_OW 310
73900: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_STRING \
73908: PUSH
73909: LD_INT 0
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: LD_INT 0
73917: PUSH
73918: LD_INT 0
73920: PUSH
73921: LD_INT 0
73923: PUSH
73924: LD_INT 0
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: PUSH
73936: LD_STRING E
73938: PUSH
73939: LD_INT 0
73941: PUSH
73942: LD_INT 0
73944: PUSH
73945: LD_VAR 0 3
73949: PUSH
73950: LD_INT 0
73952: PUSH
73953: LD_INT 0
73955: PUSH
73956: LD_INT 0
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PPUSH
73972: CALL_OW 446
// end ;
73976: LD_VAR 0 2
73980: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73981: LD_INT 0
73983: PPUSH
73984: PPUSH
// if not driver or not IsInUnit ( driver ) then
73985: LD_VAR 0 1
73989: NOT
73990: PUSH
73991: LD_VAR 0 1
73995: PPUSH
73996: CALL_OW 310
74000: NOT
74001: OR
74002: IFFALSE 74006
// exit ;
74004: GO 74096
// vehicle := IsInUnit ( driver ) ;
74006: LD_ADDR_VAR 0 3
74010: PUSH
74011: LD_VAR 0 1
74015: PPUSH
74016: CALL_OW 310
74020: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74021: LD_VAR 0 1
74025: PPUSH
74026: LD_STRING \
74028: PUSH
74029: LD_INT 0
74031: PUSH
74032: LD_INT 0
74034: PUSH
74035: LD_INT 0
74037: PUSH
74038: LD_INT 0
74040: PUSH
74041: LD_INT 0
74043: PUSH
74044: LD_INT 0
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: PUSH
74056: LD_STRING E
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: LD_INT 0
74064: PUSH
74065: LD_VAR 0 3
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: LD_INT 0
74075: PUSH
74076: LD_INT 0
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PPUSH
74092: CALL_OW 447
// end ;
74096: LD_VAR 0 2
74100: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74101: LD_INT 0
74103: PPUSH
74104: PPUSH
74105: PPUSH
// tmp := [ ] ;
74106: LD_ADDR_VAR 0 5
74110: PUSH
74111: EMPTY
74112: ST_TO_ADDR
// for i in units do
74113: LD_ADDR_VAR 0 4
74117: PUSH
74118: LD_VAR 0 1
74122: PUSH
74123: FOR_IN
74124: IFFALSE 74162
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74126: LD_ADDR_VAR 0 5
74130: PUSH
74131: LD_VAR 0 5
74135: PPUSH
74136: LD_VAR 0 5
74140: PUSH
74141: LD_INT 1
74143: PLUS
74144: PPUSH
74145: LD_VAR 0 4
74149: PPUSH
74150: CALL_OW 256
74154: PPUSH
74155: CALL_OW 2
74159: ST_TO_ADDR
74160: GO 74123
74162: POP
74163: POP
// if not tmp then
74164: LD_VAR 0 5
74168: NOT
74169: IFFALSE 74173
// exit ;
74171: GO 74221
// if asc then
74173: LD_VAR 0 2
74177: IFFALSE 74201
// result := SortListByListAsc ( units , tmp ) else
74179: LD_ADDR_VAR 0 3
74183: PUSH
74184: LD_VAR 0 1
74188: PPUSH
74189: LD_VAR 0 5
74193: PPUSH
74194: CALL_OW 76
74198: ST_TO_ADDR
74199: GO 74221
// result := SortListByListDesc ( units , tmp ) ;
74201: LD_ADDR_VAR 0 3
74205: PUSH
74206: LD_VAR 0 1
74210: PPUSH
74211: LD_VAR 0 5
74215: PPUSH
74216: CALL_OW 77
74220: ST_TO_ADDR
// end ;
74221: LD_VAR 0 3
74225: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74226: LD_INT 0
74228: PPUSH
74229: PPUSH
// task := GetTaskList ( mech ) ;
74230: LD_ADDR_VAR 0 4
74234: PUSH
74235: LD_VAR 0 1
74239: PPUSH
74240: CALL_OW 437
74244: ST_TO_ADDR
// if not task then
74245: LD_VAR 0 4
74249: NOT
74250: IFFALSE 74254
// exit ;
74252: GO 74296
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74254: LD_ADDR_VAR 0 3
74258: PUSH
74259: LD_VAR 0 4
74263: PUSH
74264: LD_INT 1
74266: ARRAY
74267: PUSH
74268: LD_INT 1
74270: ARRAY
74271: PUSH
74272: LD_STRING r
74274: EQUAL
74275: PUSH
74276: LD_VAR 0 4
74280: PUSH
74281: LD_INT 1
74283: ARRAY
74284: PUSH
74285: LD_INT 4
74287: ARRAY
74288: PUSH
74289: LD_VAR 0 2
74293: EQUAL
74294: AND
74295: ST_TO_ADDR
// end ;
74296: LD_VAR 0 3
74300: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74301: LD_INT 0
74303: PPUSH
// SetDir ( unit , d ) ;
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_VAR 0 4
74313: PPUSH
74314: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74318: LD_VAR 0 1
74322: PPUSH
74323: LD_VAR 0 2
74327: PPUSH
74328: LD_VAR 0 3
74332: PPUSH
74333: LD_VAR 0 5
74337: PPUSH
74338: CALL_OW 48
// end ;
74342: LD_VAR 0 6
74346: RET
// export function ToNaturalNumber ( number ) ; begin
74347: LD_INT 0
74349: PPUSH
// result := number div 1 ;
74350: LD_ADDR_VAR 0 2
74354: PUSH
74355: LD_VAR 0 1
74359: PUSH
74360: LD_INT 1
74362: DIV
74363: ST_TO_ADDR
// if number < 0 then
74364: LD_VAR 0 1
74368: PUSH
74369: LD_INT 0
74371: LESS
74372: IFFALSE 74382
// result := 0 ;
74374: LD_ADDR_VAR 0 2
74378: PUSH
74379: LD_INT 0
74381: ST_TO_ADDR
// end ;
74382: LD_VAR 0 2
74386: RET
// export function SortByClass ( units , class ) ; var un ; begin
74387: LD_INT 0
74389: PPUSH
74390: PPUSH
// if not units or not class then
74391: LD_VAR 0 1
74395: NOT
74396: PUSH
74397: LD_VAR 0 2
74401: NOT
74402: OR
74403: IFFALSE 74407
// exit ;
74405: GO 74502
// result := [ ] ;
74407: LD_ADDR_VAR 0 3
74411: PUSH
74412: EMPTY
74413: ST_TO_ADDR
// for un in units do
74414: LD_ADDR_VAR 0 4
74418: PUSH
74419: LD_VAR 0 1
74423: PUSH
74424: FOR_IN
74425: IFFALSE 74500
// if GetClass ( un ) = class then
74427: LD_VAR 0 4
74431: PPUSH
74432: CALL_OW 257
74436: PUSH
74437: LD_VAR 0 2
74441: EQUAL
74442: IFFALSE 74469
// result := Insert ( result , 1 , un ) else
74444: LD_ADDR_VAR 0 3
74448: PUSH
74449: LD_VAR 0 3
74453: PPUSH
74454: LD_INT 1
74456: PPUSH
74457: LD_VAR 0 4
74461: PPUSH
74462: CALL_OW 2
74466: ST_TO_ADDR
74467: GO 74498
// result := Replace ( result , result + 1 , un ) ;
74469: LD_ADDR_VAR 0 3
74473: PUSH
74474: LD_VAR 0 3
74478: PPUSH
74479: LD_VAR 0 3
74483: PUSH
74484: LD_INT 1
74486: PLUS
74487: PPUSH
74488: LD_VAR 0 4
74492: PPUSH
74493: CALL_OW 1
74497: ST_TO_ADDR
74498: GO 74424
74500: POP
74501: POP
// end ;
74502: LD_VAR 0 3
74506: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74507: LD_INT 0
74509: PPUSH
74510: PPUSH
74511: PPUSH
74512: PPUSH
74513: PPUSH
74514: PPUSH
74515: PPUSH
// result := [ ] ;
74516: LD_ADDR_VAR 0 4
74520: PUSH
74521: EMPTY
74522: ST_TO_ADDR
// if x - r < 0 then
74523: LD_VAR 0 1
74527: PUSH
74528: LD_VAR 0 3
74532: MINUS
74533: PUSH
74534: LD_INT 0
74536: LESS
74537: IFFALSE 74549
// min_x := 0 else
74539: LD_ADDR_VAR 0 8
74543: PUSH
74544: LD_INT 0
74546: ST_TO_ADDR
74547: GO 74565
// min_x := x - r ;
74549: LD_ADDR_VAR 0 8
74553: PUSH
74554: LD_VAR 0 1
74558: PUSH
74559: LD_VAR 0 3
74563: MINUS
74564: ST_TO_ADDR
// if y - r < 0 then
74565: LD_VAR 0 2
74569: PUSH
74570: LD_VAR 0 3
74574: MINUS
74575: PUSH
74576: LD_INT 0
74578: LESS
74579: IFFALSE 74591
// min_y := 0 else
74581: LD_ADDR_VAR 0 7
74585: PUSH
74586: LD_INT 0
74588: ST_TO_ADDR
74589: GO 74607
// min_y := y - r ;
74591: LD_ADDR_VAR 0 7
74595: PUSH
74596: LD_VAR 0 2
74600: PUSH
74601: LD_VAR 0 3
74605: MINUS
74606: ST_TO_ADDR
// max_x := x + r ;
74607: LD_ADDR_VAR 0 9
74611: PUSH
74612: LD_VAR 0 1
74616: PUSH
74617: LD_VAR 0 3
74621: PLUS
74622: ST_TO_ADDR
// max_y := y + r ;
74623: LD_ADDR_VAR 0 10
74627: PUSH
74628: LD_VAR 0 2
74632: PUSH
74633: LD_VAR 0 3
74637: PLUS
74638: ST_TO_ADDR
// for _x = min_x to max_x do
74639: LD_ADDR_VAR 0 5
74643: PUSH
74644: DOUBLE
74645: LD_VAR 0 8
74649: DEC
74650: ST_TO_ADDR
74651: LD_VAR 0 9
74655: PUSH
74656: FOR_TO
74657: IFFALSE 74758
// for _y = min_y to max_y do
74659: LD_ADDR_VAR 0 6
74663: PUSH
74664: DOUBLE
74665: LD_VAR 0 7
74669: DEC
74670: ST_TO_ADDR
74671: LD_VAR 0 10
74675: PUSH
74676: FOR_TO
74677: IFFALSE 74754
// begin if not ValidHex ( _x , _y ) then
74679: LD_VAR 0 5
74683: PPUSH
74684: LD_VAR 0 6
74688: PPUSH
74689: CALL_OW 488
74693: NOT
74694: IFFALSE 74698
// continue ;
74696: GO 74676
// if GetResourceTypeXY ( _x , _y ) then
74698: LD_VAR 0 5
74702: PPUSH
74703: LD_VAR 0 6
74707: PPUSH
74708: CALL_OW 283
74712: IFFALSE 74752
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74714: LD_ADDR_VAR 0 4
74718: PUSH
74719: LD_VAR 0 4
74723: PPUSH
74724: LD_VAR 0 4
74728: PUSH
74729: LD_INT 1
74731: PLUS
74732: PPUSH
74733: LD_VAR 0 5
74737: PUSH
74738: LD_VAR 0 6
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PPUSH
74747: CALL_OW 1
74751: ST_TO_ADDR
// end ;
74752: GO 74676
74754: POP
74755: POP
74756: GO 74656
74758: POP
74759: POP
// end ;
74760: LD_VAR 0 4
74764: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74765: LD_INT 0
74767: PPUSH
74768: PPUSH
74769: PPUSH
74770: PPUSH
74771: PPUSH
74772: PPUSH
74773: PPUSH
74774: PPUSH
// if not units then
74775: LD_VAR 0 1
74779: NOT
74780: IFFALSE 74784
// exit ;
74782: GO 75209
// result := UnitFilter ( units , [ f_ok ] ) ;
74784: LD_ADDR_VAR 0 3
74788: PUSH
74789: LD_VAR 0 1
74793: PPUSH
74794: LD_INT 50
74796: PUSH
74797: EMPTY
74798: LIST
74799: PPUSH
74800: CALL_OW 72
74804: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74805: LD_ADDR_VAR 0 8
74809: PUSH
74810: LD_VAR 0 1
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: PPUSH
74819: CALL_OW 255
74823: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
74824: LD_ADDR_VAR 0 10
74828: PUSH
74829: LD_INT 29
74831: PUSH
74832: LD_EXP 40
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: ST_TO_ADDR
// if not result then
74841: LD_VAR 0 3
74845: NOT
74846: IFFALSE 74850
// exit ;
74848: GO 75209
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74850: LD_ADDR_VAR 0 5
74854: PUSH
74855: LD_INT 81
74857: PUSH
74858: LD_VAR 0 8
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PPUSH
74867: CALL_OW 69
74871: ST_TO_ADDR
// for i in result do
74872: LD_ADDR_VAR 0 4
74876: PUSH
74877: LD_VAR 0 3
74881: PUSH
74882: FOR_IN
74883: IFFALSE 75207
// begin tag := GetTag ( i ) + 1 ;
74885: LD_ADDR_VAR 0 9
74889: PUSH
74890: LD_VAR 0 4
74894: PPUSH
74895: CALL_OW 110
74899: PUSH
74900: LD_INT 1
74902: PLUS
74903: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74904: LD_ADDR_VAR 0 7
74908: PUSH
74909: LD_VAR 0 4
74913: PPUSH
74914: CALL_OW 250
74918: PPUSH
74919: LD_VAR 0 4
74923: PPUSH
74924: CALL_OW 251
74928: PPUSH
74929: LD_INT 6
74931: PPUSH
74932: CALL 74507 0 3
74936: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74937: LD_VAR 0 7
74941: PUSH
74942: LD_VAR 0 4
74946: PPUSH
74947: CALL_OW 264
74951: PUSH
74952: LD_VAR 0 10
74956: IN
74957: NOT
74958: AND
74959: IFFALSE 74998
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74961: LD_VAR 0 4
74965: PPUSH
74966: LD_VAR 0 7
74970: PUSH
74971: LD_INT 1
74973: ARRAY
74974: PUSH
74975: LD_INT 1
74977: ARRAY
74978: PPUSH
74979: LD_VAR 0 7
74983: PUSH
74984: LD_INT 1
74986: ARRAY
74987: PUSH
74988: LD_INT 2
74990: ARRAY
74991: PPUSH
74992: CALL_OW 116
74996: GO 75205
// if path > tag then
74998: LD_VAR 0 2
75002: PUSH
75003: LD_VAR 0 9
75007: GREATER
75008: IFFALSE 75175
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75010: LD_ADDR_VAR 0 6
75014: PUSH
75015: LD_VAR 0 5
75019: PPUSH
75020: LD_INT 91
75022: PUSH
75023: LD_VAR 0 4
75027: PUSH
75028: LD_INT 12
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: LIST
75035: PPUSH
75036: CALL_OW 72
75040: ST_TO_ADDR
// if nearEnemy then
75041: LD_VAR 0 6
75045: IFFALSE 75073
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75047: LD_VAR 0 4
75051: PPUSH
75052: LD_VAR 0 6
75056: PPUSH
75057: LD_VAR 0 4
75061: PPUSH
75062: CALL_OW 74
75066: PPUSH
75067: CALL_OW 115
75071: GO 75173
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75073: LD_VAR 0 4
75077: PPUSH
75078: LD_VAR 0 2
75082: PUSH
75083: LD_VAR 0 9
75087: ARRAY
75088: PUSH
75089: LD_INT 1
75091: ARRAY
75092: PPUSH
75093: LD_VAR 0 2
75097: PUSH
75098: LD_VAR 0 9
75102: ARRAY
75103: PUSH
75104: LD_INT 2
75106: ARRAY
75107: PPUSH
75108: CALL_OW 297
75112: PUSH
75113: LD_INT 6
75115: GREATER
75116: IFFALSE 75159
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75118: LD_VAR 0 4
75122: PPUSH
75123: LD_VAR 0 2
75127: PUSH
75128: LD_VAR 0 9
75132: ARRAY
75133: PUSH
75134: LD_INT 1
75136: ARRAY
75137: PPUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_VAR 0 9
75147: ARRAY
75148: PUSH
75149: LD_INT 2
75151: ARRAY
75152: PPUSH
75153: CALL_OW 114
75157: GO 75173
// SetTag ( i , tag ) ;
75159: LD_VAR 0 4
75163: PPUSH
75164: LD_VAR 0 9
75168: PPUSH
75169: CALL_OW 109
// end else
75173: GO 75205
// if enemy then
75175: LD_VAR 0 5
75179: IFFALSE 75205
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75181: LD_VAR 0 4
75185: PPUSH
75186: LD_VAR 0 5
75190: PPUSH
75191: LD_VAR 0 4
75195: PPUSH
75196: CALL_OW 74
75200: PPUSH
75201: CALL_OW 115
// end ;
75205: GO 74882
75207: POP
75208: POP
// end ;
75209: LD_VAR 0 3
75213: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75214: LD_INT 0
75216: PPUSH
75217: PPUSH
75218: PPUSH
// if not unit or IsInUnit ( unit ) then
75219: LD_VAR 0 1
75223: NOT
75224: PUSH
75225: LD_VAR 0 1
75229: PPUSH
75230: CALL_OW 310
75234: OR
75235: IFFALSE 75239
// exit ;
75237: GO 75330
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75239: LD_ADDR_VAR 0 4
75243: PUSH
75244: LD_VAR 0 1
75248: PPUSH
75249: CALL_OW 250
75253: PPUSH
75254: LD_VAR 0 2
75258: PPUSH
75259: LD_INT 1
75261: PPUSH
75262: CALL_OW 272
75266: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75267: LD_ADDR_VAR 0 5
75271: PUSH
75272: LD_VAR 0 1
75276: PPUSH
75277: CALL_OW 251
75281: PPUSH
75282: LD_VAR 0 2
75286: PPUSH
75287: LD_INT 1
75289: PPUSH
75290: CALL_OW 273
75294: ST_TO_ADDR
// if ValidHex ( x , y ) then
75295: LD_VAR 0 4
75299: PPUSH
75300: LD_VAR 0 5
75304: PPUSH
75305: CALL_OW 488
75309: IFFALSE 75330
// ComTurnXY ( unit , x , y ) ;
75311: LD_VAR 0 1
75315: PPUSH
75316: LD_VAR 0 4
75320: PPUSH
75321: LD_VAR 0 5
75325: PPUSH
75326: CALL_OW 118
// end ;
75330: LD_VAR 0 3
75334: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75335: LD_INT 0
75337: PPUSH
75338: PPUSH
// result := false ;
75339: LD_ADDR_VAR 0 3
75343: PUSH
75344: LD_INT 0
75346: ST_TO_ADDR
// if not units then
75347: LD_VAR 0 2
75351: NOT
75352: IFFALSE 75356
// exit ;
75354: GO 75401
// for i in units do
75356: LD_ADDR_VAR 0 4
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: FOR_IN
75367: IFFALSE 75399
// if See ( side , i ) then
75369: LD_VAR 0 1
75373: PPUSH
75374: LD_VAR 0 4
75378: PPUSH
75379: CALL_OW 292
75383: IFFALSE 75397
// begin result := true ;
75385: LD_ADDR_VAR 0 3
75389: PUSH
75390: LD_INT 1
75392: ST_TO_ADDR
// exit ;
75393: POP
75394: POP
75395: GO 75401
// end ;
75397: GO 75366
75399: POP
75400: POP
// end ;
75401: LD_VAR 0 3
75405: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75406: LD_INT 0
75408: PPUSH
75409: PPUSH
75410: PPUSH
75411: PPUSH
// if not unit or not points then
75412: LD_VAR 0 1
75416: NOT
75417: PUSH
75418: LD_VAR 0 2
75422: NOT
75423: OR
75424: IFFALSE 75428
// exit ;
75426: GO 75518
// dist := 99999 ;
75428: LD_ADDR_VAR 0 5
75432: PUSH
75433: LD_INT 99999
75435: ST_TO_ADDR
// for i in points do
75436: LD_ADDR_VAR 0 4
75440: PUSH
75441: LD_VAR 0 2
75445: PUSH
75446: FOR_IN
75447: IFFALSE 75516
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75449: LD_ADDR_VAR 0 6
75453: PUSH
75454: LD_VAR 0 1
75458: PPUSH
75459: LD_VAR 0 4
75463: PUSH
75464: LD_INT 1
75466: ARRAY
75467: PPUSH
75468: LD_VAR 0 4
75472: PUSH
75473: LD_INT 2
75475: ARRAY
75476: PPUSH
75477: CALL_OW 297
75481: ST_TO_ADDR
// if tmpDist < dist then
75482: LD_VAR 0 6
75486: PUSH
75487: LD_VAR 0 5
75491: LESS
75492: IFFALSE 75514
// begin result := i ;
75494: LD_ADDR_VAR 0 3
75498: PUSH
75499: LD_VAR 0 4
75503: ST_TO_ADDR
// dist := tmpDist ;
75504: LD_ADDR_VAR 0 5
75508: PUSH
75509: LD_VAR 0 6
75513: ST_TO_ADDR
// end ; end ;
75514: GO 75446
75516: POP
75517: POP
// end ;
75518: LD_VAR 0 3
75522: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75523: LD_INT 0
75525: PPUSH
// uc_side := side ;
75526: LD_ADDR_OWVAR 20
75530: PUSH
75531: LD_VAR 0 1
75535: ST_TO_ADDR
// uc_nation := 3 ;
75536: LD_ADDR_OWVAR 21
75540: PUSH
75541: LD_INT 3
75543: ST_TO_ADDR
// vc_chassis := 25 ;
75544: LD_ADDR_OWVAR 37
75548: PUSH
75549: LD_INT 25
75551: ST_TO_ADDR
// vc_engine := engine_siberite ;
75552: LD_ADDR_OWVAR 39
75556: PUSH
75557: LD_INT 3
75559: ST_TO_ADDR
// vc_control := control_computer ;
75560: LD_ADDR_OWVAR 38
75564: PUSH
75565: LD_INT 3
75567: ST_TO_ADDR
// vc_weapon := 59 ;
75568: LD_ADDR_OWVAR 40
75572: PUSH
75573: LD_INT 59
75575: ST_TO_ADDR
// result := CreateVehicle ;
75576: LD_ADDR_VAR 0 5
75580: PUSH
75581: CALL_OW 45
75585: ST_TO_ADDR
// SetDir ( result , d ) ;
75586: LD_VAR 0 5
75590: PPUSH
75591: LD_VAR 0 4
75595: PPUSH
75596: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75600: LD_VAR 0 5
75604: PPUSH
75605: LD_VAR 0 2
75609: PPUSH
75610: LD_VAR 0 3
75614: PPUSH
75615: LD_INT 0
75617: PPUSH
75618: CALL_OW 48
// end ; end_of_file
75622: LD_VAR 0 5
75626: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75627: LD_VAR 0 1
75631: PUSH
75632: LD_INT 200
75634: DOUBLE
75635: GREATEREQUAL
75636: IFFALSE 75644
75638: LD_INT 299
75640: DOUBLE
75641: LESSEQUAL
75642: IFTRUE 75646
75644: GO 75678
75646: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75647: LD_VAR 0 1
75651: PPUSH
75652: LD_VAR 0 2
75656: PPUSH
75657: LD_VAR 0 3
75661: PPUSH
75662: LD_VAR 0 4
75666: PPUSH
75667: LD_VAR 0 5
75671: PPUSH
75672: CALL 31226 0 5
75676: GO 75755
75678: LD_INT 300
75680: DOUBLE
75681: GREATEREQUAL
75682: IFFALSE 75690
75684: LD_INT 399
75686: DOUBLE
75687: LESSEQUAL
75688: IFTRUE 75692
75690: GO 75754
75692: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75693: LD_VAR 0 1
75697: PPUSH
75698: LD_VAR 0 2
75702: PPUSH
75703: LD_VAR 0 3
75707: PPUSH
75708: LD_VAR 0 4
75712: PPUSH
75713: LD_VAR 0 5
75717: PPUSH
75718: LD_VAR 0 6
75722: PPUSH
75723: LD_VAR 0 7
75727: PPUSH
75728: LD_VAR 0 8
75732: PPUSH
75733: LD_VAR 0 9
75737: PPUSH
75738: LD_VAR 0 10
75742: PPUSH
75743: LD_VAR 0 11
75747: PPUSH
75748: CALL 28868 0 11
75752: GO 75755
75754: POP
// end ;
75755: PPOPN 11
75757: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75758: LD_VAR 0 1
75762: PPUSH
75763: LD_VAR 0 2
75767: PPUSH
75768: LD_VAR 0 3
75772: PPUSH
75773: LD_VAR 0 4
75777: PPUSH
75778: LD_VAR 0 5
75782: PPUSH
75783: CALL 30962 0 5
// end ; end_of_file
75787: PPOPN 5
75789: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75790: LD_VAR 0 1
75794: PPUSH
75795: LD_VAR 0 2
75799: PPUSH
75800: LD_VAR 0 3
75804: PPUSH
75805: LD_VAR 0 4
75809: PPUSH
75810: LD_VAR 0 5
75814: PPUSH
75815: LD_VAR 0 6
75819: PPUSH
75820: CALL 16561 0 6
// end ;
75824: PPOPN 6
75826: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75827: CALL 16536 0 0
// end ;
75831: PPOPN 1
75833: END
