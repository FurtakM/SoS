// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10636 0 0
// PrepareRussianCommander ;
  44: CALL 12170 0 0
// PrepareSouthBase ;
  48: CALL 12266 0 0
// PrepareNorthBase ;
  52: CALL 12604 0 0
// PrepareOtherRussians ;
  56: CALL 12999 0 0
// PrepareHeroes ;
  60: CALL 10957 0 0
// PrepareLisSquad ;
  64: CALL 11327 0 0
// PrepareOtherAmericans ;
  68: CALL 11640 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: PUSH
 315: LD_EXP 2
 319: AND
 320: IFFALSE 650
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 322: LD_EXP 3
 326: PPUSH
 327: LD_INT 43
 329: PPUSH
 330: LD_INT 72
 332: PPUSH
 333: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 337: LD_EXP 2
 341: PPUSH
 342: LD_INT 44
 344: PPUSH
 345: LD_INT 70
 347: PPUSH
 348: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 352: LD_EXP 1
 356: PPUSH
 357: LD_INT 46
 359: PPUSH
 360: LD_INT 73
 362: PPUSH
 363: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 367: LD_EXP 3
 371: PPUSH
 372: LD_STRING D1a-Cyrus-1
 374: PPUSH
 375: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 379: LD_EXP 1
 383: PPUSH
 384: LD_STRING D1a-JMM-1
 386: PPUSH
 387: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 391: LD_EXP 3
 395: PPUSH
 396: LD_INT 37
 398: PPUSH
 399: LD_INT 66
 401: PPUSH
 402: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 406: LD_EXP 2
 410: PPUSH
 411: LD_INT 41
 413: PPUSH
 414: LD_INT 67
 416: PPUSH
 417: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_INT 38
 428: PPUSH
 429: LD_INT 64
 431: PPUSH
 432: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 436: LD_EXP 2
 440: PPUSH
 441: LD_STRING D1a-Bobby-2
 443: PPUSH
 444: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 448: LD_EXP 3
 452: PPUSH
 453: LD_INT 35
 455: PPUSH
 456: LD_INT 62
 458: PPUSH
 459: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 463: LD_EXP 2
 467: PPUSH
 468: LD_INT 32
 470: PPUSH
 471: LD_INT 60
 473: PPUSH
 474: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 478: LD_EXP 1
 482: PPUSH
 483: LD_INT 35
 485: PPUSH
 486: LD_INT 60
 488: PPUSH
 489: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 493: LD_EXP 1
 497: PPUSH
 498: LD_STRING D1a-JMM-2
 500: PPUSH
 501: CALL_OW 88
// ComWalk ( Lisa ) ;
 505: LD_EXP 4
 509: PPUSH
 510: CALL_OW 138
// wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 521: LD_EXP 4
 525: PPUSH
 526: LD_EXP 1
 530: PPUSH
 531: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 535: LD_EXP 1
 539: PUSH
 540: LD_EXP 3
 544: PUSH
 545: LD_EXP 2
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PPUSH
 555: LD_EXP 4
 559: PPUSH
 560: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_INT 33
 575: PPUSH
 576: LD_INT 55
 578: PPUSH
 579: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_INT 30
 594: PPUSH
 595: LD_INT 54
 597: PPUSH
 598: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: LD_EXP 1
 615: PPUSH
 616: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: LD_EXP 1
 633: PPUSH
 634: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 638: LD_EXP 4
 642: PPUSH
 643: LD_STRING D1a-Lisa-2
 645: PPUSH
 646: CALL_OW 88
// end ; if Cyrus and not Bobby then
 650: LD_EXP 3
 654: PUSH
 655: LD_EXP 2
 659: NOT
 660: AND
 661: IFFALSE 866
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 663: LD_EXP 3
 667: PPUSH
 668: LD_INT 43
 670: PPUSH
 671: LD_INT 72
 673: PPUSH
 674: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 678: LD_EXP 1
 682: PPUSH
 683: LD_INT 46
 685: PPUSH
 686: LD_INT 73
 688: PPUSH
 689: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_STRING D1a-Cyrus-1
 700: PPUSH
 701: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 705: LD_EXP 1
 709: PPUSH
 710: LD_STRING D1a-JMM-1
 712: PPUSH
 713: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 717: LD_EXP 3
 721: PPUSH
 722: LD_INT 37
 724: PPUSH
 725: LD_INT 66
 727: PPUSH
 728: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 732: LD_EXP 1
 736: PPUSH
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 64
 742: PPUSH
 743: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_STRING D1a-Cyrus-2
 754: PPUSH
 755: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 35
 766: PPUSH
 767: LD_INT 62
 769: PPUSH
 770: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 774: LD_EXP 1
 778: PPUSH
 779: LD_INT 35
 781: PPUSH
 782: LD_INT 60
 784: PPUSH
 785: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_STRING D1a-JMM-2
 796: PPUSH
 797: CALL_OW 88
// ComWalk ( Lisa ) ;
 801: LD_EXP 4
 805: PPUSH
 806: CALL_OW 138
// wait ( 0 0$1 ) ;
 810: LD_INT 35
 812: PPUSH
 813: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 817: LD_EXP 4
 821: PPUSH
 822: LD_EXP 1
 826: PPUSH
 827: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 831: LD_EXP 4
 835: PPUSH
 836: LD_STRING D1a-Lisa-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 843: LD_EXP 1
 847: PUSH
 848: LD_EXP 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: LD_EXP 4
 861: PPUSH
 862: CALL_OW 119
// end ; if not Cyrus and Bobby then
 866: LD_EXP 3
 870: NOT
 871: PUSH
 872: LD_EXP 2
 876: AND
 877: IFFALSE 1156
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 879: LD_EXP 2
 883: PPUSH
 884: LD_INT 44
 886: PPUSH
 887: LD_INT 70
 889: PPUSH
 890: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 894: LD_EXP 1
 898: PPUSH
 899: LD_INT 46
 901: PPUSH
 902: LD_INT 73
 904: PPUSH
 905: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_STRING D1a-Bobby-1
 916: PPUSH
 917: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 921: LD_EXP 1
 925: PPUSH
 926: LD_STRING D1a-JMM-1
 928: PPUSH
 929: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_INT 37
 940: PPUSH
 941: LD_INT 66
 943: PPUSH
 944: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 38
 955: PPUSH
 956: LD_INT 64
 958: PPUSH
 959: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 963: LD_EXP 2
 967: PPUSH
 968: LD_STRING D1a-Bobby-2
 970: PPUSH
 971: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_INT 35
 982: PPUSH
 983: LD_INT 62
 985: PPUSH
 986: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 990: LD_EXP 1
 994: PPUSH
 995: LD_INT 35
 997: PPUSH
 998: LD_INT 60
1000: PPUSH
1001: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1005: LD_EXP 1
1009: PPUSH
1010: LD_STRING D1a-JMM-2
1012: PPUSH
1013: CALL_OW 88
// ComWalk ( Lisa ) ;
1017: LD_EXP 4
1021: PPUSH
1022: CALL_OW 138
// wait ( 0 0$1 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1033: LD_EXP 4
1037: PPUSH
1038: LD_EXP 1
1042: PPUSH
1043: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1047: LD_EXP 1
1051: PUSH
1052: LD_EXP 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: LD_EXP 4
1065: PPUSH
1066: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: LD_INT 33
1081: PPUSH
1082: LD_INT 55
1084: PPUSH
1085: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 2
1096: ARRAY
1097: PPUSH
1098: LD_INT 30
1100: PPUSH
1101: LD_INT 54
1103: PPUSH
1104: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1126: LD_VAR 0 2
1130: PUSH
1131: LD_INT 2
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1144: LD_EXP 4
1148: PPUSH
1149: LD_STRING D1a-Lisa-2
1151: PPUSH
1152: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1156: LD_EXP 3
1160: NOT
1161: PUSH
1162: LD_EXP 2
1166: NOT
1167: AND
1168: IFFALSE 1382
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_INT 37
1177: PPUSH
1178: LD_INT 66
1180: PPUSH
1181: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1185: LD_EXP 1
1189: PPUSH
1190: LD_STRING D1b-JMM-1
1192: PPUSH
1193: CALL_OW 88
// ComCrawl ( JMM ) ;
1197: LD_EXP 1
1201: PPUSH
1202: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1206: LD_EXP 1
1210: PPUSH
1211: LD_INT 35
1213: PPUSH
1214: LD_INT 60
1216: PPUSH
1217: CALL_OW 171
// wait ( 0 0$8 ) ;
1221: LD_INT 280
1223: PPUSH
1224: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1228: LD_EXP 1
1232: PPUSH
1233: LD_STRING D1b-JMM-1a
1235: PPUSH
1236: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1240: LD_EXP 1
1244: PUSH
1245: LD_EXP 4
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 138
// wait ( 0 0$1 ) ;
1258: LD_INT 35
1260: PPUSH
1261: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1265: LD_EXP 4
1269: PPUSH
1270: LD_EXP 1
1274: PPUSH
1275: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1279: LD_EXP 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: PPUSH
1287: LD_EXP 4
1291: PPUSH
1292: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: LD_INT 33
1307: PPUSH
1308: LD_INT 55
1310: PPUSH
1311: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 2
1322: ARRAY
1323: PPUSH
1324: LD_INT 30
1326: PPUSH
1327: LD_INT 54
1329: PPUSH
1330: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 2
1359: ARRAY
1360: PPUSH
1361: LD_EXP 1
1365: PPUSH
1366: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1370: LD_EXP 4
1374: PPUSH
1375: LD_STRING D1b-Lisa-1
1377: PPUSH
1378: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-1
1389: PPUSH
1390: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1394: LD_EXP 4
1398: PPUSH
1399: LD_STRING D1-Lisa-1
1401: PPUSH
1402: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-2
1413: PPUSH
1414: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-2
1425: PPUSH
1426: CALL_OW 586
// if Cyrus then
1430: LD_EXP 3
1434: IFFALSE 1460
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1436: LD_EXP 3
1440: PPUSH
1441: LD_STRING D1-Cyrus-2
1443: PPUSH
1444: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1448: LD_EXP 1
1452: PPUSH
1453: LD_STRING D1-JMM-3
1455: PPUSH
1456: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1460: LD_EXP 9
1464: PPUSH
1465: LD_STRING D1-Pow-3
1467: PPUSH
1468: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1472: LD_EXP 1
1476: PPUSH
1477: LD_STRING D1-JMM-4
1479: PPUSH
1480: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1484: LD_EXP 9
1488: PPUSH
1489: LD_STRING D1-Pow-4
1491: PPUSH
1492: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1496: LD_EXP 9
1500: PPUSH
1501: LD_STRING D1-Pow-4a
1503: PPUSH
1504: CALL_OW 586
// if Cyrus then
1508: LD_EXP 3
1512: IFFALSE 1526
// Say ( Cyrus , D1-Cyrus-4 ) ;
1514: LD_EXP 3
1518: PPUSH
1519: LD_STRING D1-Cyrus-4
1521: PPUSH
1522: CALL_OW 88
// if Bobby then
1526: LD_EXP 2
1530: IFFALSE 1568
// begin Say ( Bobby , D1-Bobby-4 ) ;
1532: LD_EXP 2
1536: PPUSH
1537: LD_STRING D1-Bobby-4
1539: PPUSH
1540: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1544: LD_EXP 4
1548: PPUSH
1549: LD_STRING D1-Lisa-4
1551: PPUSH
1552: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1556: LD_EXP 1
1560: PPUSH
1561: LD_STRING D1-JMM-5
1563: PPUSH
1564: CALL_OW 88
// end ; InGameOff ;
1568: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: LD_EXP 6
1591: PUSH
1592: LD_EXP 7
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: DIFF
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1609: LD_STRING M1
1611: PPUSH
1612: CALL_OW 337
// SaveForQuickRestart ;
1616: CALL_OW 22
// end ;
1620: LD_VAR 0 1
1624: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1625: LD_INT 7
1627: PPUSH
1628: LD_INT 22
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 70
1642: PUSH
1643: LD_INT 0
1645: GREATER
1646: IFFALSE 2059
1648: GO 1650
1650: DISABLE
// begin InGameOn ;
1651: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1655: LD_INT 22
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 21
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PPUSH
1679: CALL_OW 69
1683: PPUSH
1684: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1688: LD_INT 24
1690: PPUSH
1691: LD_INT 32
1693: PPUSH
1694: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1698: LD_EXP 5
1702: PPUSH
1703: LD_INT 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1713: LD_EXP 5
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL_OW 336
// wait ( 0 0$1 ) ;
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_INT 27
1739: PPUSH
1740: LD_INT 38
1742: PPUSH
1743: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1747: LD_EXP 5
1751: PPUSH
1752: LD_EXP 1
1756: PPUSH
1757: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 1
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_EXP 5
1794: PUSH
1795: EMPTY
1796: LIST
1797: DIFF
1798: PPUSH
1799: LD_EXP 5
1803: PPUSH
1804: CALL_OW 119
// wait ( 0 0$1 ) ;
1808: LD_INT 35
1810: PPUSH
1811: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1815: LD_EXP 5
1819: PPUSH
1820: LD_STRING D2a-Khat-1
1822: PPUSH
1823: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1827: LD_EXP 1
1831: PPUSH
1832: LD_STRING D2a-JMM-1
1834: PPUSH
1835: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1839: LD_EXP 5
1843: PPUSH
1844: LD_STRING D2a-Khat-2
1846: PPUSH
1847: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1851: LD_EXP 1
1855: PPUSH
1856: LD_STRING D2a-JMM-2
1858: PPUSH
1859: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1863: LD_EXP 5
1867: PPUSH
1868: LD_STRING D2a-Khat-3
1870: PPUSH
1871: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1875: LD_EXP 1
1879: PPUSH
1880: LD_STRING D2a-JMM-3
1882: PPUSH
1883: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1887: LD_EXP 5
1891: PPUSH
1892: LD_STRING D2a-Khat-4
1894: PPUSH
1895: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1899: LD_EXP 1
1903: PPUSH
1904: LD_STRING D2a-JMM-4
1906: PPUSH
1907: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1911: LD_EXP 5
1915: PPUSH
1916: LD_STRING D2a-Khat-5
1918: PPUSH
1919: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1923: LD_EXP 1
1927: PPUSH
1928: LD_STRING D2a-JMM-5
1930: PPUSH
1931: CALL_OW 88
// InGameOff ;
1935: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1939: LD_INT 22
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 21
1951: PUSH
1952: LD_INT 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 24
1964: PUSH
1965: LD_INT 800
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: IFFALSE 2059
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1987: LD_EXP 5
1991: PPUSH
1992: LD_INT 22
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 21
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2047: LD_EXP 5
2051: PPUSH
2052: LD_STRING D2b-Khat-1
2054: PPUSH
2055: CALL_OW 88
// end ; end ;
2059: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2060: LD_INT 15
2062: PPUSH
2063: LD_INT 22
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL_OW 70
2077: IFFALSE 3274
2079: GO 2081
2081: DISABLE
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 999
2096: PUSH
2097: LD_INT 999
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PPUSH
2136: CALL_OW 69
2140: PUSH
2141: LD_EXP 1
2145: PUSH
2146: LD_EXP 2
2150: PUSH
2151: LD_EXP 3
2155: PUSH
2156: LD_EXP 4
2160: PUSH
2161: LD_EXP 5
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: DIFF
2173: ST_TO_ADDR
// PrepareDeadSoldiers ;
2174: CALL 11782 0 0
// spotCorpses = 1 ;
2178: LD_ADDR_EXP 32
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2186: LD_INT 70
2188: PPUSH
2189: CALL_OW 67
// InGameOn ;
2193: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2197: LD_INT 23
2199: PPUSH
2200: LD_INT 12
2202: PPUSH
2203: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 2
2216: PUSH
2217: LD_INT 1
2219: ARRAY
2220: PUSH
2221: LD_INT 2
2223: ARRAY
2224: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2225: LD_ADDR_VAR 0 1
2229: PUSH
2230: LD_INT 22
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 21
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: PUSH
2259: LD_EXP 1
2263: PUSH
2264: LD_EXP 5
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: DIFF
2273: PUSH
2274: FOR_IN
2275: IFFALSE 2326
// if IsOK ( i ) then
2277: LD_VAR 0 1
2281: PPUSH
2282: CALL_OW 302
2286: IFFALSE 2324
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_VAR 0 1
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: LD_INT 16
2310: PPUSH
2311: CALL_OW 299
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: ADD
2323: ST_TO_ADDR
2324: GO 2274
2326: POP
2327: POP
// for i = 2 to distanceTab do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 2
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2390
// if distanceTab [ i ] [ 2 ] < min then
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 1
2355: ARRAY
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PUSH
2361: LD_VAR 0 3
2365: LESS
2366: IFFALSE 2388
// min = distanceTab [ i ] [ 2 ] ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: ST_TO_ADDR
2388: GO 2343
2390: POP
2391: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_INT 22
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 21
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 69
2425: PUSH
2426: LD_EXP 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: DIFF
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2506
// begin ComMoveToArea ( i , DeadCutscene ) ;
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_INT 28
2445: PPUSH
2446: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2450: LD_EXP 1
2454: PPUSH
2455: LD_INT 30
2457: PPUSH
2458: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_INT 23
2469: PPUSH
2470: LD_INT 11
2472: PPUSH
2473: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2477: LD_EXP 1
2481: PPUSH
2482: LD_INT 23
2484: PPUSH
2485: LD_INT 11
2487: PPUSH
2488: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2492: LD_EXP 36
2496: PPUSH
2497: LD_INT 250
2499: PPUSH
2500: CALL_OW 234
// end ;
2504: GO 2435
2506: POP
2507: POP
// for i = 2 to distanceTab do
2508: LD_ADDR_VAR 0 1
2512: PUSH
2513: DOUBLE
2514: LD_INT 2
2516: DEC
2517: ST_TO_ADDR
2518: LD_VAR 0 2
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2910
// begin if distanceTab [ i ] [ 2 ] = min then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_VAR 0 1
2535: ARRAY
2536: PUSH
2537: LD_INT 2
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 3
2545: EQUAL
2546: IFFALSE 2908
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_VAR 0 1
2557: ARRAY
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_EXP 2
2567: EQUAL
2568: IFFALSE 2582
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2570: LD_EXP 2
2574: PPUSH
2575: LD_STRING DCorpses-Bobby-1
2577: PPUSH
2578: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2582: LD_VAR 0 2
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PUSH
2597: LD_EXP 3
2601: EQUAL
2602: IFFALSE 2616
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2604: LD_EXP 3
2608: PPUSH
2609: LD_STRING DCorpses-Cyrus-1
2611: PPUSH
2612: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2616: LD_VAR 0 2
2620: PUSH
2621: LD_VAR 0 1
2625: ARRAY
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PUSH
2631: LD_EXP 4
2635: EQUAL
2636: IFFALSE 2650
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2638: LD_EXP 4
2642: PPUSH
2643: LD_STRING DCorpses-Lisa-1
2645: PPUSH
2646: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2650: LD_VAR 0 2
2654: PUSH
2655: LD_VAR 0 1
2659: ARRAY
2660: PUSH
2661: LD_INT 1
2663: ARRAY
2664: PUSH
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 1
2672: ARRAY
2673: EQUAL
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: PPUSH
2684: CALL_OW 258
2688: PUSH
2689: LD_INT 1
2691: EQUAL
2692: AND
2693: IFFALSE 2711
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_STRING DCorpses-Sol1-1
2706: PPUSH
2707: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_INT 1
2733: ARRAY
2734: EQUAL
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PPUSH
2745: CALL_OW 258
2749: PUSH
2750: LD_INT 2
2752: EQUAL
2753: AND
2754: IFFALSE 2772
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: LD_STRING DCorpses-FSol1-1
2767: PPUSH
2768: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2772: LD_VAR 0 2
2776: PUSH
2777: LD_VAR 0 1
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 258
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: AND
2815: IFFALSE 2833
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 2
2824: ARRAY
2825: PPUSH
2826: LD_STRING DCorpses-Sol1-1
2828: PPUSH
2829: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2833: LD_VAR 0 2
2837: PUSH
2838: LD_VAR 0 1
2842: ARRAY
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PUSH
2848: LD_VAR 0 4
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 4
2862: PUSH
2863: LD_INT 2
2865: ARRAY
2866: PPUSH
2867: CALL_OW 258
2871: PUSH
2872: LD_INT 2
2874: EQUAL
2875: AND
2876: IFFALSE 2894
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2878: LD_VAR 0 4
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: PPUSH
2887: LD_STRING DCorpses-FSol1-1
2889: PPUSH
2890: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2894: LD_EXP 36
2898: PPUSH
2899: LD_INT 150
2901: PPUSH
2902: CALL_OW 234
// break ;
2906: GO 2910
// end ; end ;
2908: GO 2523
2910: POP
2911: POP
// p := 0 ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2920: LD_INT 35
2922: PPUSH
2923: CALL_OW 67
// p := p + 1 ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 5
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2941: LD_ADDR_VAR 0 1
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 21
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 69
2974: PUSH
2975: LD_EXP 1
2979: PUSH
2980: EMPTY
2981: LIST
2982: DIFF
2983: PUSH
2984: FOR_IN
2985: IFFALSE 3055
// begin ComMoveToArea ( i , DeadCutscene ) ;
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 28
2994: PPUSH
2995: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2999: LD_EXP 1
3003: PPUSH
3004: LD_INT 30
3006: PPUSH
3007: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_INT 23
3018: PPUSH
3019: LD_INT 11
3021: PPUSH
3022: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3026: LD_EXP 1
3030: PPUSH
3031: LD_INT 23
3033: PPUSH
3034: LD_INT 11
3036: PPUSH
3037: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3041: LD_EXP 36
3045: PPUSH
3046: LD_INT 250
3048: PPUSH
3049: CALL_OW 234
// end ;
3053: GO 2984
3055: POP
3056: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3057: LD_EXP 1
3061: PPUSH
3062: LD_INT 30
3064: PPUSH
3065: CALL_OW 308
3069: PUSH
3070: LD_VAR 0 5
3074: PUSH
3075: LD_INT 16
3077: GREATEREQUAL
3078: OR
3079: IFFALSE 2920
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING DCorpses-JMM-1
3095: PPUSH
3096: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3100: LD_EXP 36
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 234
// if IsOK ( Khatam ) then
3112: LD_EXP 5
3116: PPUSH
3117: CALL_OW 302
3121: IFFALSE 3258
// begin repeat wait ( 0 0$1 ) ;
3123: LD_INT 35
3125: PPUSH
3126: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3130: LD_EXP 5
3134: PPUSH
3135: LD_EXP 36
3139: PPUSH
3140: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3144: LD_EXP 5
3148: PPUSH
3149: LD_EXP 36
3153: PPUSH
3154: CALL_OW 296
3158: PUSH
3159: LD_INT 2
3161: LESS
3162: IFFALSE 3123
// spotCorpses = 0 ;
3164: LD_ADDR_EXP 32
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3172: LD_EXP 36
3176: PPUSH
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 234
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// KillUnit ( DyingSold ) ;
3191: LD_EXP 36
3195: PPUSH
3196: CALL_OW 66
// wait ( 0 0$1 ) ;
3200: LD_INT 35
3202: PPUSH
3203: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3207: LD_EXP 1
3211: PUSH
3212: LD_EXP 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3225: LD_EXP 5
3229: PPUSH
3230: LD_EXP 1
3234: PPUSH
3235: CALL_OW 119
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3246: LD_EXP 5
3250: PPUSH
3251: LD_STRING DCorpses-Khat-1
3253: PPUSH
3254: CALL_OW 88
// end ; InGameOff ;
3258: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3262: LD_EXP 1
3266: PPUSH
3267: LD_STRING DCorpses-JMM-2
3269: PPUSH
3270: CALL_OW 88
// end ;
3274: PPOPN 5
3276: END
// every 0 0$1 trigger spotCorpses = 1 do
3277: LD_EXP 32
3281: PUSH
3282: LD_INT 1
3284: EQUAL
3285: IFFALSE 3303
3287: GO 3289
3289: DISABLE
// begin enable ;
3290: ENABLE
// SetLives ( DyingSold , 10 ) ;
3291: LD_EXP 36
3295: PPUSH
3296: LD_INT 10
3298: PPUSH
3299: CALL_OW 234
// end ;
3303: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3304: LD_INT 8
3306: PPUSH
3307: LD_INT 22
3309: PUSH
3310: LD_INT 1
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 70
3321: PUSH
3322: LD_INT 22
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PPUSH
3337: LD_EXP 7
3341: PPUSH
3342: CALL_OW 74
3346: PPUSH
3347: LD_EXP 7
3351: PPUSH
3352: CALL_OW 296
3356: PUSH
3357: LD_INT 13
3359: LESS
3360: OR
3361: IFFALSE 3542
3363: GO 3365
3365: DISABLE
3366: LD_INT 0
3368: PPUSH
// begin InGameOn ;
3369: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3373: LD_EXP 7
3377: PPUSH
3378: LD_INT 250
3380: PPUSH
3381: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3385: LD_EXP 6
3389: PPUSH
3390: LD_INT 1000
3392: PUSH
3393: LD_INT 800
3395: PUSH
3396: LD_INT 750
3398: PUSH
3399: LD_INT 700
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_OWVAR 67
3412: ARRAY
3413: PPUSH
3414: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3418: LD_INT 3
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3434: LD_EXP 6
3438: PUSH
3439: LD_EXP 7
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_INT 9
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 70
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: UNION
3490: PUSH
3491: FOR_IN
3492: IFFALSE 3505
// ComFree ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 139
3503: GO 3491
3505: POP
3506: POP
// wait ( 0 0$1 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 67
// InGameOff ;
3514: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3518: LD_EXP 6
3522: PPUSH
3523: LD_STRING DF-Sol1-1
3525: PPUSH
3526: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DF-JMM-1
3537: PPUSH
3538: CALL_OW 88
// end ;
3542: PPOPN 1
3544: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3545: LD_INT 19
3547: PPUSH
3548: LD_INT 22
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: CALL_OW 70
3562: PUSH
3563: LD_INT 0
3565: EQUAL
3566: IFFALSE 3675
3568: GO 3570
3570: DISABLE
// begin if not IsDead ( Brian ) then
3571: LD_EXP 6
3575: PPUSH
3576: CALL_OW 301
3580: NOT
3581: IFFALSE 3595
// SetSide ( Brian , 1 ) ;
3583: LD_EXP 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 235
// if not IsDead ( Jerry ) then
3595: LD_EXP 7
3599: PPUSH
3600: CALL_OW 301
3604: NOT
3605: IFFALSE 3619
// SetSide ( Jerry , 1 ) ;
3607: LD_EXP 7
3611: PPUSH
3612: LD_INT 1
3614: PPUSH
3615: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3619: LD_INT 22
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: IFFALSE 3663
// Say ( JMM , DFa-JMM-1 ) else
3649: LD_EXP 1
3653: PPUSH
3654: LD_STRING DFa-JMM-1
3656: PPUSH
3657: CALL_OW 88
3661: GO 3675
// Say ( JMM , DFa-JMM-1a ) ;
3663: LD_EXP 1
3667: PPUSH
3668: LD_STRING DFa-JMM-1a
3670: PPUSH
3671: CALL_OW 88
// end ;
3675: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3676: LD_INT 19
3678: PPUSH
3679: LD_INT 22
3681: PUSH
3682: LD_INT 3
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 70
3693: PUSH
3694: LD_INT 0
3696: EQUAL
3697: PUSH
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 302
3707: NOT
3708: AND
3709: IFFALSE 3795
3711: GO 3713
3713: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3721: LD_EXP 6
3725: PPUSH
3726: CALL_OW 256
3730: PUSH
3731: LD_INT 250
3733: GREATER
3734: IFFALSE 3714
// Say ( Brian , DFb-Sol1-1 ) ;
3736: LD_EXP 6
3740: PPUSH
3741: LD_STRING DFb-Sol1-1
3743: PPUSH
3744: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3748: LD_EXP 6
3752: PPUSH
3753: LD_INT 78
3755: PPUSH
3756: LD_INT 74
3758: PPUSH
3759: CALL_OW 111
// if IsDead ( Jerry ) then
3763: LD_EXP 7
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3788
// Say ( Brian , DFb-Sol1-1a ) else
3774: LD_EXP 6
3778: PPUSH
3779: LD_STRING DFb-Sol1-1a
3781: PPUSH
3782: CALL_OW 88
3786: GO 3795
// SetAchievement ( ACH_JERRY ) ;
3788: LD_STRING ACH_JERRY
3790: PPUSH
3791: CALL_OW 543
// end ;
3795: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3796: LD_INT 22
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 21
3808: PUSH
3809: LD_INT 2
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: PUSH
3825: LD_INT 0
3827: EQUAL
3828: IFFALSE 3920
3830: GO 3832
3832: DISABLE
3833: LD_INT 0
3835: PPUSH
// begin enable ;
3836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 21
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 30
3864: PUSH
3865: LD_INT 31
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3918
// begin if See ( 1 , i ) then
3885: LD_INT 1
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL_OW 292
3897: IFFALSE 3916
// begin disable ;
3899: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING DX1-JMM-1
3907: PPUSH
3908: CALL_OW 88
// exit ;
3912: POP
3913: POP
3914: GO 3920
// end ; end ;
3916: GO 3882
3918: POP
3919: POP
// end ;
3920: PPOPN 1
3922: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 11
3928: PPUSH
3929: CALL_OW 294
3933: IFFALSE 4196
3935: GO 3937
3937: DISABLE
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// begin DialogueOn ;
3943: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3947: LD_INT 11
3949: PPUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 21
3962: PUSH
3963: LD_INT 1
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: PUSH
3979: LD_INT 1
3981: ARRAY
3982: PPUSH
3983: LD_STRING DX3-Rus1-1
3985: PPUSH
3986: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3990: LD_EXP 1
3994: PPUSH
3995: LD_STRING DX3-JMM-1
3997: PPUSH
3998: CALL_OW 88
// DialogueOff ;
4002: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4006: LD_ADDR_VAR 0 1
4010: PUSH
4011: LD_INT 11
4013: PPUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 25
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4064
// southBaseDefenders = southBaseDefenders ^ i ;
4046: LD_ADDR_EXP 25
4050: PUSH
4051: LD_EXP 25
4055: PUSH
4056: LD_VAR 0 1
4060: ADD
4061: ST_TO_ADDR
4062: GO 4043
4064: POP
4065: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4066: LD_INT 175
4068: PUSH
4069: LD_INT 140
4071: PUSH
4072: LD_INT 105
4074: PUSH
4075: LD_INT 70
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PPUSH
4090: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 22
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: ST_TO_ADDR
// if not mech then
4139: LD_VAR 0 3
4143: NOT
4144: IFFALSE 4148
// exit ;
4146: GO 4196
// ComExitBuilding ( mech ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 122
// wait ( 0 0$1 ) ;
4157: LD_INT 35
4159: PPUSH
4160: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4164: LD_VAR 0 3
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: LD_INT 5
4175: PPUSH
4176: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4180: LD_VAR 0 3
4184: PUSH
4185: LD_INT 2
4187: ARRAY
4188: PPUSH
4189: LD_INT 4
4191: PPUSH
4192: CALL_OW 180
// end ;
4196: PPOPN 3
4198: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 5
4204: PPUSH
4205: CALL_OW 292
4209: PUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 292
4220: OR
4221: IFFALSE 4305
4223: GO 4225
4225: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4226: LD_INT 5
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 85
// if IsOK ( Bobby ) then
4240: LD_EXP 2
4244: PPUSH
4245: CALL_OW 302
4249: IFFALSE 4285
// begin DialogueOn ;
4251: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4255: LD_EXP 2
4259: PPUSH
4260: LD_STRING DX2-Bobby-1
4262: PPUSH
4263: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4267: LD_EXP 1
4271: PPUSH
4272: LD_STRING DX2-JMM-1a
4274: PPUSH
4275: CALL_OW 88
// DialogueOff ;
4279: CALL_OW 7
// end else
4283: GO 4305
// begin DialogueOn ;
4285: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4289: LD_EXP 1
4293: PPUSH
4294: LD_STRING DX2-JMM-1
4296: PPUSH
4297: CALL_OW 88
// DialogueOff ;
4301: CALL_OW 7
// end ; end ;
4305: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4306: LD_INT 22
4308: PUSH
4309: LD_INT 1
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 23
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 21
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 34
4338: PUSH
4339: LD_INT 42
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 69
4356: IFFALSE 4777
4358: GO 4360
4360: DISABLE
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_INT 22
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 23
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 34
4405: PUSH
4406: LD_INT 42
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 26
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 3
4478: PUSH
4479: LD_EXP 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4490: LD_ADDR_VAR 0 4
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 4
4539: PUSH
4540: EMPTY
4541: LIST
4542: DIFF
4543: ST_TO_ADDR
// if not tmp then
4544: LD_VAR 0 1
4548: NOT
4549: IFFALSE 4553
// exit ;
4551: GO 4777
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: CALL_OW 311
4571: ST_TO_ADDR
// if not speaker then
4572: LD_VAR 0 2
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4777
// DialogueOn ;
4581: CALL_OW 6
// if speaker = JMM then
4585: LD_VAR 0 2
4589: PUSH
4590: LD_EXP 1
4594: EQUAL
4595: IFFALSE 4629
// begin if Lisa then
4597: LD_EXP 4
4601: IFFALSE 4615
// Say ( Lisa , DX2b-Lisa-1 ) ;
4603: LD_EXP 4
4607: PPUSH
4608: LD_STRING DX2b-Lisa-1
4610: PPUSH
4611: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_STRING DX2b-JMM-1
4622: PPUSH
4623: CALL_OW 88
// end else
4627: GO 4773
// begin Say ( JMM , DX2a-JMM-1 ) ;
4629: LD_EXP 1
4633: PPUSH
4634: LD_STRING DX2a-JMM-1
4636: PPUSH
4637: CALL_OW 88
// if speaker = Bobby then
4641: LD_VAR 0 2
4645: PUSH
4646: LD_EXP 2
4650: EQUAL
4651: IFFALSE 4665
// Say ( Bobby , DX2a-Bobby-1 ) ;
4653: LD_EXP 2
4657: PPUSH
4658: LD_STRING DX2a-Bobby-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Cyrus then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 3
4674: EQUAL
4675: IFFALSE 4689
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4677: LD_EXP 3
4681: PPUSH
4682: LD_STRING DX2a-Cyrus-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Lisa then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 4
4698: EQUAL
4699: IFFALSE 4713
// Say ( Lisa , DX2a-Lisa-1 ) ;
4701: LD_EXP 4
4705: PPUSH
4706: LD_STRING DX2a-Lisa-1
4708: PPUSH
4709: CALL_OW 88
// if speaker in temp1 then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_VAR 0 3
4722: IN
4723: IFFALSE 4737
// Say ( speaker , DX2a-Sol1-1 ) ;
4725: LD_VAR 0 2
4729: PPUSH
4730: LD_STRING DX2a-Sol1-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp2 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 4
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-FSol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-FSol1-1
4756: PPUSH
4757: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4761: LD_EXP 1
4765: PPUSH
4766: LD_STRING DX2a-JMM-2
4768: PPUSH
4769: CALL_OW 88
// end ; DialogueOff ;
4773: CALL_OW 7
// end ;
4777: PPOPN 5
4779: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 255
4787: PUSH
4788: LD_INT 1
4790: EQUAL
4791: PUSH
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 255
4799: PUSH
4800: LD_INT 1
4802: EQUAL
4803: OR
4804: IFFALSE 4864
4806: GO 4808
4808: DISABLE
// begin DialogueOn ;
4809: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING D3-JMM-1
4820: PPUSH
4821: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4825: LD_EXP 9
4829: PPUSH
4830: LD_STRING D3-Pow-1
4832: PPUSH
4833: CALL_OW 586
// if IsOK ( Cyrus ) then
4837: LD_EXP 3
4841: PPUSH
4842: CALL_OW 302
4846: IFFALSE 4860
// Say ( Cyrus , D3-Cyrus-1 ) ;
4848: LD_EXP 3
4852: PPUSH
4853: LD_STRING D3-Cyrus-1
4855: PPUSH
4856: CALL_OW 88
// DialogueOff ;
4860: CALL_OW 7
// end ;
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: AND
4889: PUSH
4890: LD_INT 1
4892: PPUSH
4893: CALL_OW 302
4897: AND
4898: PUSH
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 302
4906: AND
4907: IFFALSE 6297
4909: GO 4911
4911: DISABLE
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
4916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 21
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// if tmp then
4951: LD_VAR 0 2
4955: IFFALSE 5016
// begin for i in tmp do
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_VAR 0 2
4966: PUSH
4967: FOR_IN
4968: IFFALSE 5014
// begin if IsInUnit ( i ) then
4970: LD_VAR 0 3
4974: PPUSH
4975: CALL_OW 310
4979: IFFALSE 4990
// ComExitBuilding ( i ) ;
4981: LD_VAR 0 3
4985: PPUSH
4986: CALL_OW 122
// wait ( 0 0$1 ) ;
4990: LD_INT 35
4992: PPUSH
4993: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 54
5004: PPUSH
5005: LD_INT 17
5007: PPUSH
5008: CALL_OW 174
// end ;
5012: GO 4967
5014: POP
5015: POP
// end ; wait ( 0 0$03 ) ;
5016: LD_INT 105
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5027: LD_EXP 1
5031: PPUSH
5032: LD_STRING D3a-JMM-1
5034: PPUSH
5035: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5039: LD_EXP 9
5043: PPUSH
5044: LD_STRING D3a-Pow-1
5046: PPUSH
5047: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5051: LD_EXP 1
5055: PPUSH
5056: LD_STRING D3a-JMM-2
5058: PPUSH
5059: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5063: LD_EXP 9
5067: PPUSH
5068: LD_STRING D3a-Pow-2
5070: PPUSH
5071: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5075: LD_EXP 1
5079: PPUSH
5080: LD_STRING D3a-JMM-3
5082: PPUSH
5083: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5087: LD_EXP 9
5091: PPUSH
5092: LD_STRING D3a-Pow-3
5094: PPUSH
5095: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5099: LD_EXP 1
5103: PPUSH
5104: LD_STRING D3a-JMM-4
5106: PPUSH
5107: CALL_OW 88
// DialogueOff ;
5111: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5115: LD_STRING M2
5117: PPUSH
5118: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5122: LD_EXP 1
5126: PPUSH
5127: LD_STRING D3b-JMM-1
5129: PPUSH
5130: CALL_OW 88
// Hint ( Depot2 ) ;
5134: LD_STRING Depot2
5136: PPUSH
5137: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5141: LD_INT 35
5143: PPUSH
5144: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5148: LD_INT 22
5150: PPUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 70
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 21
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: NOT
5209: AND
5210: IFFALSE 5141
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5212: LD_ADDR_VAR 0 1
5216: PUSH
5217: LD_INT 22
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 23
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 25
5239: PUSH
5240: LD_INT 2
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 50
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: LD_INT 56
5255: PUSH
5256: EMPTY
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 5
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: DIFF
5285: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5286: LD_INT 35
5288: PPUSH
5289: CALL_OW 67
// until temp > 0 ;
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 0
5300: GREATER
5301: IFFALSE 5212
// wait ( 0 0$5 ) ;
5303: LD_INT 175
5305: PPUSH
5306: CALL_OW 67
// PrepareRussianHeroes ;
5310: CALL 12008 0 0
// InGameOn ;
5314: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5318: LD_EXP 8
5322: PPUSH
5323: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5327: LD_EXP 1
5331: PUSH
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 1
5339: ARRAY
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5354: LD_EXP 8
5358: PPUSH
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: CALL_OW 119
// wait ( 0 0$02 ) ;
5372: LD_INT 70
5374: PPUSH
5375: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5379: LD_EXP 8
5383: PPUSH
5384: LD_STRING D4-Mikh-1
5386: PPUSH
5387: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5391: LD_VAR 0 1
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: CALL_OW 258
5404: PUSH
5405: LD_INT 1
5407: EQUAL
5408: IFFALSE 5426
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_STRING D4-Sol1-1
5421: PPUSH
5422: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5426: LD_VAR 0 1
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: CALL_OW 258
5439: PUSH
5440: LD_INT 2
5442: EQUAL
5443: IFFALSE 5461
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5445: LD_VAR 0 1
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_STRING D4-FSol1-1
5456: PPUSH
5457: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5461: LD_EXP 8
5465: PPUSH
5466: LD_STRING D4-Mikh-2
5468: PPUSH
5469: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PPUSH
5482: CALL_OW 258
5486: PUSH
5487: LD_INT 1
5489: EQUAL
5490: IFFALSE 5508
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5492: LD_VAR 0 1
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: LD_STRING D4-Sol1-2
5503: PPUSH
5504: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: CALL_OW 258
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5543
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5527: LD_VAR 0 1
5531: PUSH
5532: LD_INT 1
5534: ARRAY
5535: PPUSH
5536: LD_STRING D4-FSol1-2
5538: PPUSH
5539: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5543: LD_EXP 8
5547: PPUSH
5548: LD_STRING D4-Mikh-3
5550: PPUSH
5551: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5555: LD_VAR 0 1
5559: PUSH
5560: LD_INT 1
5562: ARRAY
5563: PPUSH
5564: CALL_OW 258
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: IFFALSE 5590
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5574: LD_VAR 0 1
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PPUSH
5583: LD_STRING D4-Sol1-3
5585: PPUSH
5586: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: PPUSH
5599: CALL_OW 258
5603: PUSH
5604: LD_INT 2
5606: EQUAL
5607: IFFALSE 5625
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5609: LD_VAR 0 1
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_STRING D4-FSol1-3
5620: PPUSH
5621: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5625: LD_EXP 8
5629: PPUSH
5630: LD_STRING D4-Mikh-4
5632: PPUSH
5633: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5637: LD_STRING Qs1
5639: PPUSH
5640: CALL_OW 97
5644: PUSH
5645: LD_INT 1
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5688
5653: POP
// begin InGameOff ;
5654: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5658: LD_INT 1
5660: PPUSH
5661: LD_INT 6
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5674: LD_EXP 8
5678: PPUSH
5679: LD_INT 17
5681: PPUSH
5682: CALL_OW 113
// end ; 2 :
5686: GO 6281
5688: LD_INT 2
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 6246
5696: POP
// begin repeat wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 1
5711: ARRAY
5712: PPUSH
5713: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_EXP 1
5730: PPUSH
5731: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_EXP 1
5744: PPUSH
5745: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_EXP 8
5758: PPUSH
5759: CALL_OW 296
5763: PUSH
5764: LD_INT 5
5766: LESS
5767: IFFALSE 5697
// ComTurnUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_STRING D4b-JMM-1
5790: PPUSH
5791: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5795: LD_EXP 8
5799: PPUSH
5800: LD_STRING D4b-Mikh-1
5802: PPUSH
5803: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D4b-JMM-2
5814: PPUSH
5815: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5819: LD_EXP 8
5823: PPUSH
5824: LD_STRING D4b-Mikh-2
5826: PPUSH
5827: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-3
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-3
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-4
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-4
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-5
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-5
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-6
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-6
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-7
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-7
5946: PPUSH
5947: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5951: LD_VAR 0 1
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 258
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5986
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5970: LD_VAR 0 1
5974: PUSH
5975: LD_INT 1
5977: ARRAY
5978: PPUSH
5979: LD_STRING D4b-Sol1-7
5981: PPUSH
5982: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5986: LD_VAR 0 1
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: CALL_OW 258
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6021
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6005: LD_VAR 0 1
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_STRING D4b-FSol1-7
6016: PPUSH
6017: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D4b-JMM-8
6028: PPUSH
6029: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6033: LD_VAR 0 1
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 258
6046: PUSH
6047: LD_INT 1
6049: EQUAL
6050: IFFALSE 6068
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6052: LD_VAR 0 1
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_STRING D4b-Sol1-8
6063: PPUSH
6064: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6068: LD_VAR 0 1
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: PPUSH
6077: CALL_OW 258
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6103
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6087: LD_VAR 0 1
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_STRING D4b-FSol1-8
6098: PPUSH
6099: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6103: LD_EXP 1
6107: PPUSH
6108: LD_STRING D4b-JMM-9
6110: PPUSH
6111: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6115: LD_EXP 8
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 22
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: PUSH
6150: FOR_IN
6151: IFFALSE 6164
// ComFree ( i ) ;
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 139
6162: GO 6150
6164: POP
6165: POP
// repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6173: LD_EXP 8
6177: PPUSH
6178: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6182: LD_EXP 8
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: LD_INT 1
6202: PPUSH
6203: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 310
6216: IFFALSE 6166
// mikhailDepot = IsInUnit ( Mikhail ) ;
6218: LD_ADDR_EXP 23
6222: PUSH
6223: LD_EXP 8
6227: PPUSH
6228: CALL_OW 310
6232: ST_TO_ADDR
// InGameOff ;
6233: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6237: LD_STRING M3
6239: PPUSH
6240: CALL_OW 337
// end ; 3 :
6244: GO 6281
6246: LD_INT 3
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6255: LD_EXP 8
6259: PPUSH
6260: LD_INT 17
6262: PPUSH
6263: CALL_OW 113
// wait ( 0 0$3 ) ;
6267: LD_INT 105
6269: PPUSH
6270: CALL_OW 67
// InGameOff ;
6274: CALL_OW 9
// end ; end ;
6278: GO 6281
6280: POP
// PrepareTigers ;
6281: CALL 15489 0 0
// RussianTrap ;
6285: CALL 10335 0 0
// tigersRespawn = 1 ;
6289: LD_ADDR_EXP 30
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// end ;
6297: PPOPN 3
6299: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: PUSH
6312: LD_INT 10
6314: PPUSH
6315: CALL_OW 255
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: CALL_OW 274
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 275
6340: PUSH
6341: LD_INT 100
6343: GREATEREQUAL
6344: AND
6345: IFFALSE 6494
6347: GO 6349
6349: DISABLE
6350: LD_INT 0
6352: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6353: LD_INT 2100
6355: PPUSH
6356: LD_INT 4200
6358: PPUSH
6359: CALL_OW 12
6363: PUSH
6364: LD_INT 1050
6366: PLUS
6367: PPUSH
6368: CALL_OW 67
// PrepareCargoBays ;
6372: CALL 13191 0 0
// cargoRespawn = 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6384: LD_ADDR_VAR 0 1
6388: PUSH
6389: LD_EXP 15
6393: PUSH
6394: LD_EXP 16
6398: PUSH
6399: LD_EXP 17
6403: PUSH
6404: LD_EXP 18
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_INT 17
6422: PPUSH
6423: LD_INT 10
6425: PPUSH
6426: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6430: LD_VAR 0 1
6434: PPUSH
6435: LD_INT 36
6437: PPUSH
6438: LD_INT 13
6440: PPUSH
6441: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 40
6452: PPUSH
6453: LD_INT 20
6455: PPUSH
6456: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 53
6467: PPUSH
6468: LD_INT 16
6470: PPUSH
6471: CALL_OW 171
// wait ( 0 0$5 ) ;
6475: LD_INT 175
6477: PPUSH
6478: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6482: LD_EXP 17
6486: PPUSH
6487: LD_STRING D5-Rus2-1
6489: PPUSH
6490: CALL_OW 88
// end ;
6494: PPOPN 1
6496: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6497: LD_EXP 28
6501: PUSH
6502: LD_INT 1
6504: EQUAL
6505: IFFALSE 6660
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6513: LD_ADDR_VAR 0 1
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 21
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 34
6540: PUSH
6541: LD_INT 51
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6558: LD_INT 105
6560: PPUSH
6561: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6565: LD_VAR 0 1
6569: PPUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 60
6575: PUSH
6576: EMPTY
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 72
6587: PUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 24
6598: PUSH
6599: LD_INT 980
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: OR
6615: IFFALSE 6558
// ComMoveXY ( cargos , 7 , 9 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 7
6624: PPUSH
6625: LD_INT 9
6627: PPUSH
6628: CALL_OW 111
// cargoSee = 1 ;
6632: LD_ADDR_EXP 29
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// cargoEscape = 1 ;
6640: LD_ADDR_EXP 20
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6648: LD_EXP 17
6652: PPUSH
6653: LD_STRING D5-Rus2-1a
6655: PPUSH
6656: CALL_OW 88
// end ;
6660: PPOPN 1
6662: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6663: LD_EXP 20
6667: PUSH
6668: LD_EXP 15
6672: PUSH
6673: LD_EXP 16
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: LD_INT 50
6684: PUSH
6685: EMPTY
6686: LIST
6687: PUSH
6688: LD_INT 22
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 52
6700: PUSH
6701: EMPTY
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: AND
6714: IFFALSE 7047
6716: GO 6718
6718: DISABLE
6719: LD_INT 0
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
// begin enable ;
6725: ENABLE
// for i in [ cargo1 , cargo2 ] do
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_EXP 15
6735: PUSH
6736: LD_EXP 16
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: FOR_IN
6746: IFFALSE 7045
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_VAR 0 2
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 2
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 6
6775: PPUSH
6776: CALL 78393 0 3
6780: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6781: LD_VAR 0 1
6785: PUSH
6786: LD_VAR 0 2
6790: PPUSH
6791: CALL 79616 0 1
6795: PUSH
6796: LD_INT 4
6798: ARRAY
6799: PUSH
6800: LD_INT 60
6802: LESS
6803: AND
6804: IFFALSE 6843
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6806: LD_VAR 0 2
6810: PPUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_VAR 0 1
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 2
6835: ARRAY
6836: PPUSH
6837: CALL_OW 117
6841: GO 7043
// if not IsInArea ( i , RemoveArea ) then
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 32
6850: PPUSH
6851: CALL_OW 308
6855: NOT
6856: IFFALSE 7004
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 250
6872: PPUSH
6873: LD_INT 4
6875: PPUSH
6876: LD_INT 3
6878: PPUSH
6879: CALL_OW 272
6883: ST_TO_ADDR
// y := GetY ( i ) ;
6884: LD_ADDR_VAR 0 4
6888: PUSH
6889: LD_VAR 0 2
6893: PPUSH
6894: CALL_OW 251
6898: ST_TO_ADDR
// if HexInfo ( x , y ) then
6899: LD_VAR 0 3
6903: PPUSH
6904: LD_VAR 0 4
6908: PPUSH
6909: CALL_OW 428
6913: IFFALSE 6936
// x := ShiftX ( x , 4 , 3 ) ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: CALL_OW 272
6935: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6936: LD_VAR 0 3
6940: PPUSH
6941: LD_VAR 0 4
6945: PPUSH
6946: CALL_OW 428
6950: PUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_VAR 0 4
6960: PPUSH
6961: CALL_OW 488
6965: NOT
6966: OR
6967: IFFALSE 6983
// ComMoveToArea ( i , RemoveArea ) else
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 32
6976: PPUSH
6977: CALL_OW 113
6981: GO 7002
// ComMoveXY ( i , x , y ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 111
// end else
7002: GO 7043
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7004: LD_VAR 0 2
7008: PPUSH
7009: CALL_OW 311
7013: PPUSH
7014: CALL_OW 64
// RemoveUnit ( i ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7027: LD_ADDR_EXP 20
7031: PUSH
7032: LD_EXP 20
7036: PUSH
7037: LD_INT 1
7039: PLUS
7040: ST_TO_ADDR
// continue ;
7041: GO 6745
// end ; end ;
7043: GO 6745
7045: POP
7046: POP
// end ;
7047: PPOPN 4
7049: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7050: LD_EXP 20
7054: PUSH
7055: LD_INT 1
7057: GREATER
7058: IFFALSE 7307
7060: GO 7062
7062: DISABLE
7063: LD_INT 0
7065: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7066: LD_INT 4
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7079: LD_INT 31
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 324
// Hint ( Bunker ) ;
7092: LD_STRING Bunker
7094: PPUSH
7095: CALL_OW 339
// if IsOK ( Jerry ) then
7099: LD_EXP 7
7103: PPUSH
7104: CALL_OW 302
7108: IFFALSE 7124
// Say ( Jerry , D5a-Sol1-1 ) else
7110: LD_EXP 7
7114: PPUSH
7115: LD_STRING D5a-Sol1-1
7117: PPUSH
7118: CALL_OW 88
7122: GO 7210
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 22
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 26
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_EXP 1
7162: PUSH
7163: LD_EXP 2
7167: PUSH
7168: LD_EXP 3
7172: PUSH
7173: LD_EXP 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: DIFF
7184: ST_TO_ADDR
// if not speaker then
7185: LD_VAR 0 1
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 7307
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PPUSH
7203: LD_STRING D5a-Sol1-1
7205: PPUSH
7206: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7210: LD_EXP 1
7214: PPUSH
7215: LD_STRING D5a-JMM-1
7217: PPUSH
7218: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7222: LD_INT 22
7224: PPUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 70
7253: IFFALSE 7307
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7255: LD_INT 22
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: LD_INT 31
7293: PPUSH
7294: LD_INT 44
7296: PPUSH
7297: LD_INT 13
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 145
// end ;
7307: PPOPN 1
7309: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 255
7317: PUSH
7318: LD_INT 3
7320: EQUAL
7321: PUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 256
7329: PUSH
7330: LD_INT 1000
7332: LESS
7333: AND
7334: PUSH
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 255
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: PUSH
7347: LD_INT 10
7349: PPUSH
7350: CALL_OW 256
7354: PUSH
7355: LD_INT 1000
7357: LESS
7358: AND
7359: OR
7360: IFFALSE 7377
7362: GO 7364
7364: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7365: LD_EXP 1
7369: PPUSH
7370: LD_STRING D8-JMM-1
7372: PPUSH
7373: CALL_OW 88
7377: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7378: LD_EXP 8
7382: PPUSH
7383: CALL_OW 310
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: PUSH
7392: LD_EXP 22
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: NOT
7401: AND
7402: IFFALSE 7424
7404: GO 7406
7406: DISABLE
// begin enable ;
7407: ENABLE
// mikhailInBase = 1 ;
7408: LD_ADDR_EXP 22
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// mikhailStatus = 1 ;
7416: LD_ADDR_EXP 21
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// end ;
7424: END
// export function AskMikhail ; begin
7425: LD_INT 0
7427: PPUSH
// case Query ( QMikh2 ) of 1 :
7428: LD_STRING QMikh2
7430: PPUSH
7431: CALL_OW 97
7435: PUSH
7436: LD_INT 1
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7511
7444: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 6
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7461: LD_EXP 8
7465: PPUSH
7466: LD_INT 6
7468: PPUSH
7469: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7473: LD_EXP 8
7477: PPUSH
7478: CALL_OW 122
// wait ( 0 0$1 ) ;
7482: LD_INT 35
7484: PPUSH
7485: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 17
7496: PPUSH
7497: CALL_OW 113
// mikhailInbase = 0 ;
7501: LD_ADDR_EXP 22
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// end ; 2 :
7509: GO 7752
7511: LD_INT 2
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7692
7519: POP
// begin mikhailInBase = 2 ;
7520: LD_ADDR_EXP 22
7524: PUSH
7525: LD_INT 2
7527: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 6
7535: PPUSH
7536: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7540: LD_EXP 8
7544: PPUSH
7545: CALL_OW 122
// wait ( 0 0$1 ) ;
7549: LD_INT 35
7551: PPUSH
7552: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7556: LD_EXP 8
7560: PPUSH
7561: LD_EXP 8
7565: PPUSH
7566: CALL_OW 250
7570: PUSH
7571: LD_INT 2
7573: PLUS
7574: PPUSH
7575: LD_EXP 8
7579: PPUSH
7580: CALL_OW 251
7584: PUSH
7585: LD_INT 2
7587: PLUS
7588: PPUSH
7589: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7593: LD_EXP 8
7597: PPUSH
7598: LD_EXP 8
7602: PPUSH
7603: CALL_OW 250
7607: PUSH
7608: LD_INT 1
7610: PLUS
7611: PPUSH
7612: LD_EXP 8
7616: PPUSH
7617: CALL_OW 251
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_EXP 8
7639: PPUSH
7640: CALL_OW 250
7644: PUSH
7645: LD_INT 2
7647: PLUS
7648: PPUSH
7649: LD_EXP 8
7653: PPUSH
7654: CALL_OW 251
7658: PPUSH
7659: CALL_OW 171
// wait ( 0 0$5 ) ;
7663: LD_INT 175
7665: PPUSH
7666: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7670: LD_EXP 8
7674: PPUSH
7675: LD_INT 25
7677: PPUSH
7678: CALL_OW 113
// mikhailInBase = 4 ;
7682: LD_ADDR_EXP 22
7686: PUSH
7687: LD_INT 4
7689: ST_TO_ADDR
// end ; 3 :
7690: GO 7752
7692: LD_INT 3
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7751
7700: POP
// begin SetSide ( Mikhail , 6 ) ;
7701: LD_EXP 8
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7713: LD_EXP 8
7717: PPUSH
7718: CALL_OW 122
// wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7729: LD_EXP 8
7733: PPUSH
7734: LD_INT 17
7736: PPUSH
7737: CALL_OW 113
// mikhailInbase = 3 ;
7741: LD_ADDR_EXP 22
7745: PUSH
7746: LD_INT 3
7748: ST_TO_ADDR
// end ; end ;
7749: GO 7752
7751: POP
// end ;
7752: LD_VAR 0 1
7756: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7757: LD_EXP 8
7761: PPUSH
7762: LD_INT 25
7764: PPUSH
7765: CALL_OW 308
7769: PUSH
7770: LD_EXP 22
7774: PUSH
7775: LD_INT 4
7777: EQUAL
7778: AND
7779: IFFALSE 7883
7781: GO 7783
7783: DISABLE
// begin enable ;
7784: ENABLE
// mikhailInBase = 1 ;
7785: LD_ADDR_EXP 22
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// InGameOn ;
7793: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 6
7802: PPUSH
7803: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7807: LD_INT 35
7809: PPUSH
7810: CALL_OW 67
// if Carry ( Mikhail ) then
7814: LD_EXP 8
7818: PPUSH
7819: CALL_OW 281
7823: IFFALSE 7834
// ComUnload ( Mikhail ) ;
7825: LD_EXP 8
7829: PPUSH
7830: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7834: LD_EXP 8
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7846: LD_EXP 8
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7807
// SetSide ( dep1 , 1 ) ;
7857: LD_INT 1
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7867: LD_EXP 8
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 235
// InGameOff ;
7879: CALL_OW 9
// end ;
7883: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7884: LD_EXP 8
7888: PPUSH
7889: CALL_OW 310
7893: PUSH
7894: LD_EXP 22
7898: PUSH
7899: LD_INT 3
7901: EQUAL
7902: NOT
7903: AND
7904: IFFALSE 8039
7906: GO 7908
7908: DISABLE
// begin enable ;
7909: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7910: LD_INT 22
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 91
7932: PUSH
7933: LD_EXP 8
7937: PPUSH
7938: CALL_OW 310
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: LD_INT 1
7963: EQUAL
7964: IFFALSE 8039
// begin mikhailStatus = 4 ;
7966: LD_ADDR_EXP 21
7970: PUSH
7971: LD_INT 4
7973: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7974: LD_INT 1
7976: PPUSH
7977: LD_INT 6
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 6
7997: PPUSH
7998: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8002: LD_EXP 8
8006: PPUSH
8007: CALL_OW 122
// wait ( 0 0$1 ) ;
8011: LD_INT 35
8013: PPUSH
8014: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_INT 17
8025: PPUSH
8026: CALL_OW 113
// mikhailStatus = 3 ;
8030: LD_ADDR_EXP 21
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// disable ;
8038: DISABLE
// end ; end ;
8039: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8040: LD_EXP 1
8044: PPUSH
8045: LD_EXP 23
8049: PPUSH
8050: CALL_OW 296
8054: PUSH
8055: LD_INT 5
8057: LESS
8058: PUSH
8059: LD_EXP 21
8063: PUSH
8064: LD_INT 3
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_EXP 22
8073: PUSH
8074: LD_INT 3
8076: EQUAL
8077: NOT
8078: AND
8079: IFFALSE 8310
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 26
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 69
8131: PUSH
8132: LD_EXP 1
8136: PUSH
8137: LD_EXP 5
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: DIFF
8146: ST_TO_ADDR
// if not tmp then
8147: LD_VAR 0 1
8151: NOT
8152: IFFALSE 8156
// exit ;
8154: GO 8310
// DialogueOn ;
8156: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D7-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8172: LD_VAR 0 1
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PPUSH
8181: LD_STRING D7-Sol1-1
8183: PPUSH
8184: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8188: LD_EXP 1
8192: PPUSH
8193: LD_STRING D7-JMM-2
8195: PPUSH
8196: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8200: LD_VAR 0 1
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_STRING D7-Sol1-2
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D7-JMM-3
8223: PPUSH
8224: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_STRING D7-Sol1-3
8239: PPUSH
8240: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8244: LD_EXP 3
8248: PPUSH
8249: CALL_OW 302
8253: PUSH
8254: LD_EXP 4
8258: PPUSH
8259: CALL_OW 302
8263: AND
8264: IFFALSE 8306
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8266: LD_EXP 3
8270: PPUSH
8271: LD_STRING D7-Cyrus-3
8273: PPUSH
8274: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING D7-Sol1-4
8289: PPUSH
8290: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8294: LD_EXP 4
8298: PPUSH
8299: LD_STRING D7-Lisa-4
8301: PPUSH
8302: CALL_OW 88
// end ; DialogueOff ;
8306: CALL_OW 7
// end ;
8310: PPOPN 1
8312: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8313: LD_EXP 8
8317: PPUSH
8318: CALL_OW 303
8322: PUSH
8323: LD_EXP 21
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: AND
8332: IFFALSE 8346
8334: GO 8336
8336: DISABLE
// begin enable ;
8337: ENABLE
// mikhailStatus = 2 ;
8338: LD_ADDR_EXP 21
8342: PUSH
8343: LD_INT 2
8345: ST_TO_ADDR
// end ;
8346: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8347: LD_EXP 8
8351: PPUSH
8352: LD_INT 17
8354: PPUSH
8355: CALL_OW 308
8359: PUSH
8360: LD_EXP 8
8364: PPUSH
8365: CALL_OW 255
8369: PUSH
8370: LD_INT 6
8372: EQUAL
8373: AND
8374: IFFALSE 8407
8376: GO 8378
8378: DISABLE
// begin if not mikhailInBase = 3 then
8379: LD_EXP 22
8383: PUSH
8384: LD_INT 3
8386: EQUAL
8387: NOT
8388: IFFALSE 8398
// mikhailStatus = 3 ;
8390: LD_ADDR_EXP 21
8394: PUSH
8395: LD_INT 3
8397: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8398: LD_EXP 8
8402: PPUSH
8403: CALL_OW 64
// end ;
8407: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8408: LD_EXP 21
8412: PUSH
8413: LD_INT 3
8415: EQUAL
8416: PUSH
8417: LD_EXP 8
8421: PPUSH
8422: CALL_OW 255
8426: PUSH
8427: LD_INT 6
8429: EQUAL
8430: AND
8431: IFFALSE 8624
8433: GO 8435
8435: DISABLE
8436: LD_INT 0
8438: PPUSH
8439: PPUSH
// begin enable ;
8440: ENABLE
// if IsOk ( Mikhail ) then
8441: LD_EXP 8
8445: PPUSH
8446: CALL_OW 302
8450: IFFALSE 8624
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_EXP 8
8461: PPUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: PPUSH
8491: CALL 10527 0 2
8495: PUSH
8496: LD_EXP 1
8500: PUSH
8501: LD_EXP 2
8505: PUSH
8506: LD_EXP 3
8510: PUSH
8511: LD_EXP 4
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: DIFF
8522: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_EXP 8
8532: PPUSH
8533: CALL_OW 296
8537: PUSH
8538: LD_INT 10
8540: LESS
8541: IFFALSE 8624
// begin if GetSex ( attacker ) = sex_male then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 258
8552: PUSH
8553: LD_INT 1
8555: EQUAL
8556: IFFALSE 8592
// begin disable ;
8558: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8559: LD_VAR 0 2
8563: PPUSH
8564: LD_STRING D7a-Sol1-1
8566: PPUSH
8567: CALL_OW 88
// wait ( 0 0$2 ) ;
8571: LD_INT 70
8573: PPUSH
8574: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8578: LD_VAR 0 2
8582: PPUSH
8583: LD_STRING D7a-Sol1-1a
8585: PPUSH
8586: CALL_OW 88
// end else
8590: GO 8624
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-FSol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-FSol1-1a
8619: PPUSH
8620: CALL_OW 88
// end ; end ; end ; end ;
8624: PPOPN 2
8626: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8627: LD_EXP 27
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: PUSH
8636: LD_INT 22
8638: PPUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: PUSH
8668: LD_INT 2
8670: GREATER
8671: AND
8672: PUSH
8673: LD_INT 22
8675: PPUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 21
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 59
8701: PUSH
8702: EMPTY
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 70
8718: PUSH
8719: LD_INT 0
8721: EQUAL
8722: AND
8723: IFFALSE 8738
8725: GO 8727
8727: DISABLE
// SetSide ( dep1 , 3 ) ;
8728: LD_INT 1
8730: PPUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 235
8738: END
// export function JMMTraitor ; var i ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
// if traitor then
8743: LD_EXP 33
8747: IFFALSE 8751
// exit ;
8749: GO 8888
// traitor := true ;
8751: LD_ADDR_EXP 33
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if IsOk ( Lisa ) then
8759: LD_EXP 4
8763: PPUSH
8764: CALL_OW 302
8768: IFFALSE 8790
// begin DialogueOn ;
8770: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8774: LD_EXP 4
8778: PPUSH
8779: LD_STRING D10-Lisa-Traitor
8781: PPUSH
8782: CALL_OW 88
// DialogueOff ;
8786: CALL_OW 7
// end ; ComExit ( JMM ) ;
8790: LD_EXP 1
8794: PPUSH
8795: CALL 76439 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 4
8804: PPUSH
8805: LD_INT 2
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: PUSH
8835: LD_EXP 1
8839: DIFF
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8872
// begin SetSide ( i , 4 ) ;
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 4
8851: PPUSH
8852: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_EXP 1
8865: PPUSH
8866: CALL_OW 115
// end ;
8870: GO 8841
8872: POP
8873: POP
// wait ( 0 0$30 ) ;
8874: LD_INT 1050
8876: PPUSH
8877: CALL_OW 67
// YouLost ( Traitor ) ;
8881: LD_STRING Traitor
8883: PPUSH
8884: CALL_OW 104
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8893: LD_EXP 30
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 14
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PUSH
8931: LD_INT 0
8933: EQUAL
8934: AND
8935: IFFALSE 9036
8937: GO 8939
8939: DISABLE
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: ST_TO_ADDR
// for i in tmp do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: FOR_IN
9000: IFFALSE 9027
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 12
9017: PPUSH
9018: LD_INT 300
9020: PPUSH
9021: CALL_OW 492
9025: GO 8999
9027: POP
9028: POP
// SetAchievement ( ACH_TIGER ) ;
9029: LD_STRING ACH_TIGER
9031: PPUSH
9032: CALL_OW 543
// end ;
9036: PPOPN 2
9038: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9039: LD_INT 22
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 34
9051: PUSH
9052: LD_INT 51
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: LD_INT 2
9070: GREATEREQUAL
9071: IFFALSE 9083
9073: GO 9075
9075: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9076: LD_STRING ACH_CARGO
9078: PPUSH
9079: CALL_OW 543
9083: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
// for i = 1 to count do
9089: LD_ADDR_VAR 0 8
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_VAR 0 6
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9186
// begin uc_side = side ;
9107: LD_ADDR_OWVAR 20
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// uc_nation = nation ;
9117: LD_ADDR_OWVAR 21
9121: PUSH
9122: LD_VAR 0 2
9126: ST_TO_ADDR
// hc_gallery =  ;
9127: LD_ADDR_OWVAR 33
9131: PUSH
9132: LD_STRING 
9134: ST_TO_ADDR
// hc_name =  ;
9135: LD_ADDR_OWVAR 26
9139: PUSH
9140: LD_STRING 
9142: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9143: LD_INT 0
9145: PPUSH
9146: LD_VAR 0 5
9150: PPUSH
9151: LD_VAR 0 4
9155: PPUSH
9156: CALL_OW 380
// un = CreateHuman ;
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: CALL_OW 44
9169: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9170: LD_VAR 0 9
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: CALL_OW 52
// end ;
9184: GO 9104
9186: POP
9187: POP
// end ;
9188: LD_VAR 0 7
9192: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
9197: PPUSH
// uc_side := GetSide ( b ) ;
9198: LD_ADDR_OWVAR 20
9202: PUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 255
9212: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9213: LD_ADDR_OWVAR 21
9217: PUSH
9218: LD_VAR 0 2
9222: PPUSH
9223: CALL_OW 248
9227: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9228: LD_INT 0
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 380
// un = CreateHuman ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: CALL_OW 44
9252: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9253: LD_ADDR_VAR 0 5
9257: PUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: CALL_OW 254
9267: PUSH
9268: LD_INT 3
9270: MINUS
9271: ST_TO_ADDR
// if dir < 0 then
9272: LD_VAR 0 5
9276: PUSH
9277: LD_INT 0
9279: LESS
9280: IFFALSE 9296
// dir := 6 + dir ;
9282: LD_ADDR_VAR 0 5
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: LD_VAR 0 5
9294: PLUS
9295: ST_TO_ADDR
// SetDir ( un , dir ) ;
9296: LD_VAR 0 4
9300: PPUSH
9301: LD_VAR 0 5
9305: PPUSH
9306: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9310: LD_VAR 0 4
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 52
// end ;
9324: LD_VAR 0 3
9328: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9329: LD_INT 0
9331: PPUSH
9332: PPUSH
9333: PPUSH
9334: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_VAR 0 1
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 24
9364: PUSH
9365: LD_INT 1000
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 21
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 24
9419: PUSH
9420: LD_INT 1000
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9444: LD_VAR 0 5
9448: NOT
9449: PUSH
9450: LD_VAR 0 7
9454: NOT
9455: AND
9456: IFFALSE 9460
// exit ;
9458: GO 9656
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9460: LD_VAR 0 5
9464: NOT
9465: PUSH
9466: LD_VAR 0 7
9470: PPUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 54
9476: PUSH
9477: EMPTY
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 72
9488: AND
9489: PUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL_OW 302
9499: AND
9500: IFFALSE 9534
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9502: LD_VAR 0 7
9506: PPUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 54
9512: PUSH
9513: EMPTY
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 72
9524: PPUSH
9525: LD_VAR 0 2
9529: PPUSH
9530: CALL_OW 120
// if buildingsList then
9534: LD_VAR 0 5
9538: IFFALSE 9656
// begin for i in engineerOkList do
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9654
// if IsInUnit ( i ) then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 310
9562: IFFALSE 9575
// ComExitBuilding ( i ) else
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 122
9573: GO 9652
// if GetLives ( i ) > 650 then
9575: LD_VAR 0 6
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: GREATER
9588: IFFALSE 9616
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9590: LD_VAR 0 6
9594: PPUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 6
9604: PPUSH
9605: CALL_OW 74
9609: PPUSH
9610: CALL_OW 130
9614: GO 9652
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9616: LD_VAR 0 6
9620: PPUSH
9621: LD_INT 56
9623: PPUSH
9624: LD_INT 10
9626: PPUSH
9627: CALL_OW 297
9631: PUSH
9632: LD_INT 8
9634: GREATER
9635: IFFALSE 9652
// ComMoveXY ( i , 56 , 10 ) ;
9637: LD_VAR 0 6
9641: PPUSH
9642: LD_INT 56
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 111
9652: GO 9550
9654: POP
9655: POP
// end ; end ;
9656: LD_VAR 0 4
9660: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 250
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 69
9713: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9714: LD_ADDR_VAR 0 8
9718: PUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 22
9726: PUSH
9727: LD_VAR 0 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 650
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 70
9772: ST_TO_ADDR
// if not damageUnits and not sciList then
9773: LD_VAR 0 8
9777: NOT
9778: PUSH
9779: LD_VAR 0 6
9783: NOT
9784: AND
9785: IFFALSE 9789
// exit ;
9787: GO 9928
// if damageUnits then
9789: LD_VAR 0 8
9793: IFFALSE 9872
// begin for i in sciList do
9795: LD_ADDR_VAR 0 7
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: FOR_IN
9806: IFFALSE 9868
// if IsInUnit ( i ) then
9808: LD_VAR 0 7
9812: PPUSH
9813: CALL_OW 310
9817: IFFALSE 9830
// ComExitBuilding ( i ) else
9819: LD_VAR 0 7
9823: PPUSH
9824: CALL_OW 122
9828: GO 9866
// if not HasTask ( i ) then
9830: LD_VAR 0 7
9834: PPUSH
9835: CALL_OW 314
9839: NOT
9840: IFFALSE 9866
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9842: LD_VAR 0 7
9846: PPUSH
9847: LD_VAR 0 8
9851: PPUSH
9852: LD_VAR 0 7
9856: PPUSH
9857: CALL_OW 74
9861: PPUSH
9862: CALL_OW 128
9866: GO 9805
9868: POP
9869: POP
// end else
9870: GO 9928
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9872: LD_VAR 0 6
9876: PPUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 54
9882: PUSH
9883: EMPTY
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 72
9894: IFFALSE 9928
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9896: LD_VAR 0 6
9900: PPUSH
9901: LD_INT 3
9903: PUSH
9904: LD_INT 54
9906: PUSH
9907: EMPTY
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 72
9918: PPUSH
9919: LD_VAR 0 4
9923: PPUSH
9924: CALL_OW 120
// end ;
9928: LD_VAR 0 5
9932: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9933: LD_INT 0
9935: PPUSH
9936: PPUSH
9937: PPUSH
9938: PPUSH
// if not defendersList then
9939: LD_VAR 0 3
9943: NOT
9944: IFFALSE 9948
// exit ;
9946: GO 10330
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9948: LD_ADDR_VAR 0 7
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: ST_TO_ADDR
// if enemy then
10007: LD_VAR 0 7
10011: IFFALSE 10232
// begin for i in defendersList do
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10228
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 310
10035: PUSH
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 256
10045: PUSH
10046: LD_INT 500
10048: GREATER
10049: AND
10050: IFFALSE 10063
// ComExitBuilding ( i ) else
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 122
10061: GO 10226
// if GetLives ( i ) > 650 then
10063: LD_VAR 0 6
10067: PPUSH
10068: CALL_OW 256
10072: PUSH
10073: LD_INT 650
10075: GREATER
10076: IFFALSE 10129
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10078: LD_ADDR_VAR 0 8
10082: PUSH
10083: LD_VAR 0 7
10087: PPUSH
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 74
10097: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10098: LD_VAR 0 6
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 250
10112: PPUSH
10113: LD_VAR 0 8
10117: PPUSH
10118: CALL_OW 251
10122: PPUSH
10123: CALL_OW 114
// end else
10127: GO 10226
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 69
10157: IFFALSE 10197
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_INT 56
10166: PPUSH
10167: LD_INT 10
10169: PPUSH
10170: CALL_OW 297
10174: PUSH
10175: LD_INT 8
10177: GREATER
10178: IFFALSE 10195
// ComMoveXY ( i , 56 , 10 ) ;
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 56
10187: PPUSH
10188: LD_INT 10
10190: PPUSH
10191: CALL_OW 111
// end else
10195: GO 10226
// if GetLives ( i ) <= 500 then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 256
10206: PUSH
10207: LD_INT 500
10209: LESSEQUAL
10210: IFFALSE 10226
// ComEnterUnit ( i , building ) ;
10212: LD_VAR 0 6
10216: PPUSH
10217: LD_VAR 0 4
10221: PPUSH
10222: CALL_OW 120
// end ;
10226: GO 10023
10228: POP
10229: POP
// end else
10230: GO 10330
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 56
10239: PUSH
10240: EMPTY
10241: LIST
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: EMPTY
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 24
10258: PUSH
10259: LD_INT 1000
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 72
10275: IFFALSE 10330
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 56
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: LD_INT 3
10290: PUSH
10291: LD_INT 60
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 24
10303: PUSH
10304: LD_INT 1000
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 72
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 120
// end ;
10330: LD_VAR 0 5
10334: RET
// export function RussianTrap ; var i ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
// if GetSide ( Brian ) = 4 then
10339: LD_EXP 6
10343: PPUSH
10344: CALL_OW 255
10348: PUSH
10349: LD_INT 4
10351: EQUAL
10352: IFFALSE 10375
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10354: LD_EXP 6
10358: PUSH
10359: LD_EXP 7
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: LD_INT 0
10370: PPUSH
10371: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10375: LD_ADDR_VAR 0 2
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: FOR_IN
10410: IFFALSE 10520
// begin ComExitBuilding ( i ) ;
10412: LD_VAR 0 2
10416: PPUSH
10417: CALL_OW 122
// wait ( 0 0$1 ) ;
10421: LD_INT 35
10423: PPUSH
10424: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 120
10435: PPUSH
10436: LD_INT 56
10438: PPUSH
10439: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_INT 111
10450: PPUSH
10451: LD_INT 37
10453: PPUSH
10454: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10458: LD_INT 33
10460: PPUSH
10461: CALL_OW 255
10465: PUSH
10466: LD_INT 3
10468: EQUAL
10469: PUSH
10470: LD_INT 33
10472: PPUSH
10473: CALL_OW 302
10477: AND
10478: IFFALSE 10494
// AddComEnterUnit ( i , arm2 ) else
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 33
10487: PPUSH
10488: CALL_OW 180
10492: GO 10518
// begin AddComCrawl ( i ) ;
10494: LD_VAR 0 2
10498: PPUSH
10499: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_INT 109
10510: PPUSH
10511: LD_INT 30
10513: PPUSH
10514: CALL_OW 174
// end ; end ;
10518: GO 10409
10520: POP
10521: POP
// end ;
10522: LD_VAR 0 1
10526: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
// nearestDist := 1000 ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 1000
10541: ST_TO_ADDR
// nearestUn := un ;
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: LD_VAR 0 1
10551: ST_TO_ADDR
// for sold in units do
10552: LD_ADDR_VAR 0 6
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10619
// begin dist := GetDistUnits ( un , sold ) ;
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 296
10584: ST_TO_ADDR
// if dist < nearestDist then
10585: LD_VAR 0 7
10589: PUSH
10590: LD_VAR 0 4
10594: LESS
10595: IFFALSE 10617
// begin nearestUn := sold ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 6
10606: ST_TO_ADDR
// nearestDist := dist ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_VAR 0 7
10616: ST_TO_ADDR
// end ; end ;
10617: GO 10562
10619: POP
10620: POP
// result := NearestUn ;
10621: LD_ADDR_VAR 0 3
10625: PUSH
10626: LD_VAR 0 5
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 3
10635: RET
// export function PrepareDifficulty ; begin
10636: LD_INT 0
10638: PPUSH
// if Difficulty = 1 then
10639: LD_OWVAR 67
10643: PUSH
10644: LD_INT 1
10646: EQUAL
10647: IFFALSE 10710
// begin RemoveUnit ( brw2 ) ;
10649: LD_INT 9
10651: PPUSH
10652: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10656: LD_INT 30
10658: PPUSH
10659: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10663: LD_INT 52
10665: PPUSH
10666: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10670: LD_INT 63
10672: PPUSH
10673: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10677: LD_INT 5
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: LD_INT 60
10689: PPUSH
10690: CALL_OW 240
// RuSoldMinLevel = 0 ;
10694: LD_ADDR_EXP 13
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10702: LD_ADDR_EXP 14
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// end ; if Difficulty = 2 then
10710: LD_OWVAR 67
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10760
// begin RemoveUnit ( brw4 ) ;
10720: LD_INT 52
10722: PPUSH
10723: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10727: LD_INT 5
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: LD_INT 50
10739: PPUSH
10740: CALL_OW 240
// RuSoldMinLevel = 1 ;
10744: LD_ADDR_EXP 13
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10752: LD_ADDR_EXP 14
10756: PUSH
10757: LD_INT 2
10759: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10760: LD_OWVAR 67
10764: PUSH
10765: LD_INT 3
10767: GREATEREQUAL
10768: IFFALSE 10803
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10770: LD_INT 5
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: LD_INT 40
10782: PPUSH
10783: CALL_OW 240
// RuSoldMinLevel = 2 ;
10787: LD_ADDR_EXP 13
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10795: LD_ADDR_EXP 14
10799: PUSH
10800: LD_INT 3
10802: ST_TO_ADDR
// end ; end ;
10803: LD_VAR 0 1
10807: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10808: LD_INT 0
10810: PPUSH
10811: PPUSH
10812: PPUSH
// if not vehicles then
10813: LD_VAR 0 1
10817: NOT
10818: IFFALSE 10822
// exit ;
10820: GO 10952
// tmp := [ ] ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// for i in vehicles do
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10936
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10842: LD_ADDR_VAR 0 5
10846: PUSH
10847: LD_VAR 0 5
10851: PPUSH
10852: LD_VAR 0 5
10856: PUSH
10857: LD_INT 1
10859: PLUS
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 265
10870: PUSH
10871: LD_VAR 0 4
10875: PPUSH
10876: CALL_OW 262
10880: PUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 263
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: CALL_OW 264
10900: PUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 261
10910: PUSH
10911: LD_VAR 0 4
10915: PPUSH
10916: CALL_OW 256
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 1
10933: ST_TO_ADDR
10934: GO 10839
10936: POP
10937: POP
// SaveVariable ( tmp , ident ) ;
10938: LD_VAR 0 5
10942: PPUSH
10943: LD_VAR 0 2
10947: PPUSH
10948: CALL_OW 39
// end ; end_of_file
10952: LD_VAR 0 3
10956: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10957: LD_INT 0
10959: PPUSH
10960: PPUSH
10961: PPUSH
// prefix := 01_ ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_STRING 01_
10969: ST_TO_ADDR
// uc_side := 1 ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10978: LD_ADDR_EXP 1
10982: PUSH
10983: LD_STRING JMM
10985: PPUSH
10986: LD_EXP 35
10990: NOT
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL 38246 0 3
11001: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_STRING 01_JMMLifePoints_1
11009: PPUSH
11010: LD_INT 1000
11012: PPUSH
11013: CALL_OW 30
11017: ST_TO_ADDR
// if plive < 250 then
11018: LD_VAR 0 2
11022: PUSH
11023: LD_INT 250
11025: LESS
11026: IFFALSE 11036
// plive := 300 ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 300
11035: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11050: LD_ADDR_EXP 9
11054: PUSH
11055: LD_STRING Powell
11057: PPUSH
11058: CALL_OW 25
11062: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11063: LD_ADDR_EXP 2
11067: PUSH
11068: LD_STRING Bobby
11070: PPUSH
11071: LD_EXP 35
11075: NOT
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: CALL 38246 0 3
11086: ST_TO_ADDR
// if Bobby then
11087: LD_EXP 2
11091: IFFALSE 11141
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_STRING 01_BobbyLifePoints_1
11100: PPUSH
11101: LD_INT 1000
11103: PPUSH
11104: CALL_OW 30
11108: ST_TO_ADDR
// if plive < 250 then
11109: LD_VAR 0 2
11113: PUSH
11114: LD_INT 250
11116: LESS
11117: IFFALSE 11127
// plive := 300 ;
11119: LD_ADDR_VAR 0 2
11123: PUSH
11124: LD_INT 300
11126: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11127: LD_EXP 2
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11141: LD_ADDR_EXP 3
11145: PUSH
11146: LD_STRING Cyrus
11148: PPUSH
11149: LD_EXP 35
11153: NOT
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL 38246 0 3
11164: ST_TO_ADDR
// if Cyrus then
11165: LD_EXP 3
11169: IFFALSE 11219
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_STRING 01_CyrusLifePoints_1
11178: PPUSH
11179: LD_INT 1000
11181: PPUSH
11182: CALL_OW 30
11186: ST_TO_ADDR
// if plive < 250 then
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 250
11194: LESS
11195: IFFALSE 11205
// plive := 300 ;
11197: LD_ADDR_VAR 0 2
11201: PUSH
11202: LD_INT 300
11204: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11205: LD_EXP 3
11209: PPUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11219: LD_ADDR_EXP 5
11223: PUSH
11224: LD_STRING Khatam
11226: PPUSH
11227: CALL_OW 25
11231: ST_TO_ADDR
// uc_side := 4 ;
11232: LD_ADDR_OWVAR 20
11236: PUSH
11237: LD_INT 4
11239: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11240: LD_ADDR_EXP 4
11244: PUSH
11245: LD_STRING Lisa
11247: PPUSH
11248: CALL_OW 25
11252: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11253: LD_EXP 1
11257: PPUSH
11258: LD_INT 3
11260: PPUSH
11261: LD_INT 0
11263: PPUSH
11264: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_INT 3
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11283: LD_EXP 3
11287: PPUSH
11288: LD_INT 3
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11298: LD_EXP 4
11302: PPUSH
11303: LD_INT 5
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 49
// ComCrawl ( Lisa ) ;
11313: LD_EXP 4
11317: PPUSH
11318: CALL_OW 137
// end ;
11322: LD_VAR 0 1
11326: RET
// export function PrepareLisSquad ; var i , un ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
// uc_side := 4 ;
11332: LD_ADDR_OWVAR 20
11336: PUSH
11337: LD_INT 4
11339: ST_TO_ADDR
// uc_nation := 1 ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_class := 2 ;
11348: LD_ADDR_OWVAR 28
11352: PUSH
11353: LD_INT 2
11355: ST_TO_ADDR
// hc_sex := sex_male ;
11356: LD_ADDR_OWVAR 27
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// hc_gallery :=  ;
11364: LD_ADDR_OWVAR 33
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// hc_name :=  ;
11372: LD_ADDR_OWVAR 26
11376: PUSH
11377: LD_STRING 
11379: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11380: LD_ADDR_OWVAR 30
11384: PUSH
11385: LD_INT 0
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 0
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11403: LD_ADDR_OWVAR 31
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 0
11416: PUSH
11417: LD_INT 0
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// un := CreateHuman ;
11426: LD_ADDR_VAR 0 3
11430: PUSH
11431: CALL_OW 44
11435: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 6
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: CALL_OW 49
// hc_sex := sex_female ;
11451: LD_ADDR_OWVAR 27
11455: PUSH
11456: LD_INT 2
11458: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11459: LD_ADDR_OWVAR 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: LD_INT 0
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11482: LD_ADDR_OWVAR 31
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// un := CreateHuman ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: CALL_OW 44
11514: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 6
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 49
// if not Bobby and not Cyrus then
11530: LD_EXP 2
11534: NOT
11535: PUSH
11536: LD_EXP 3
11540: NOT
11541: AND
11542: IFFALSE 11631
// begin hc_class := 1 ;
11544: LD_ADDR_OWVAR 28
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// hc_sex := sex_male ;
11552: LD_ADDR_OWVAR 27
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11560: LD_ADDR_OWVAR 30
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11583: LD_ADDR_OWVAR 31
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: ST_TO_ADDR
// un := CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 31
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// end ; InitHc ;
11631: CALL_OW 19
// end ;
11635: LD_VAR 0 1
11639: RET
// export function PrepareOtherAmericans ; begin
11640: LD_INT 0
11642: PPUSH
// uc_side := 4 ;
11643: LD_ADDR_OWVAR 20
11647: PUSH
11648: LD_INT 4
11650: ST_TO_ADDR
// uc_nation := 1 ;
11651: LD_ADDR_OWVAR 21
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// hc_gallery :=  ;
11659: LD_ADDR_OWVAR 33
11663: PUSH
11664: LD_STRING 
11666: ST_TO_ADDR
// hc_name := Tom Garvin ;
11667: LD_ADDR_OWVAR 26
11671: PUSH
11672: LD_STRING Tom Garvin
11674: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 380
// Brian := CreateHuman ;
11688: LD_ADDR_EXP 6
11692: PUSH
11693: CALL_OW 44
11697: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11698: LD_EXP 6
11702: PPUSH
11703: LD_INT 10
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 49
// hc_name := Jerry White ;
11713: LD_ADDR_OWVAR 26
11717: PUSH
11718: LD_STRING Jerry White
11720: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 3
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 380
// Jerry := CreateHuman ;
11734: LD_ADDR_EXP 7
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_INT 10
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 140
// end ;
11777: LD_VAR 0 1
11781: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_INT 16
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 517
11803: ST_TO_ADDR
// for i = 1 to 6 do
11804: LD_ADDR_VAR 0 2
11808: PUSH
11809: DOUBLE
11810: LD_INT 1
11812: DEC
11813: ST_TO_ADDR
11814: LD_INT 6
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11964
// begin uc_side := 4 ;
11820: LD_ADDR_OWVAR 20
11824: PUSH
11825: LD_INT 4
11827: ST_TO_ADDR
// uc_nation := 1 ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// hc_gallery :=  ;
11836: LD_ADDR_OWVAR 33
11840: PUSH
11841: LD_STRING 
11843: ST_TO_ADDR
// hc_name :=  ;
11844: LD_ADDR_OWVAR 26
11848: PUSH
11849: LD_STRING 
11851: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11852: LD_INT 0
11854: PPUSH
11855: LD_INT 1
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: LD_INT 4
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: LD_INT 3
11876: MOD
11877: PUSH
11878: LD_INT 1
11880: PLUS
11881: ARRAY
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 380
// un := CreateHuman ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: CALL_OW 44
11899: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: LD_INT 5
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_VAR 0 4
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PUSH
11934: LD_VAR 0 2
11938: ARRAY
11939: PPUSH
11940: LD_VAR 0 4
11944: PUSH
11945: LD_INT 2
11947: ARRAY
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 601
// end ;
11962: GO 11817
11964: POP
11965: POP
// DyingSold := CreateHuman ;
11966: LD_ADDR_EXP 36
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11976: LD_EXP 36
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11991: LD_EXP 36
11995: PPUSH
11996: LD_INT 250
11998: PPUSH
11999: CALL_OW 234
// end ; end_of_file
12003: LD_VAR 0 1
12007: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 23
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 50
12049: PUSH
12050: EMPTY
12051: LIST
12052: PUSH
12053: LD_INT 56
12055: PUSH
12056: EMPTY
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: PUSH
12071: LD_EXP 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: DIFF
12079: ST_TO_ADDR
// if not tmp then
12080: LD_VAR 0 2
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12165
// uc_side = 6 ;
12089: LD_ADDR_OWVAR 20
12093: PUSH
12094: LD_INT 6
12096: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12097: LD_ADDR_EXP 8
12101: PUSH
12102: LD_STRING Mikhail
12104: PPUSH
12105: CALL_OW 25
12109: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12110: LD_EXP 8
12114: PPUSH
12115: LD_INT 3
12117: PPUSH
12118: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12122: LD_EXP 8
12126: PPUSH
12127: LD_VAR 0 2
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 1
12148: ARRAY
12149: PPUSH
12150: CALL_OW 251
12154: PPUSH
12155: LD_INT 5
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 50
// end ;
12165: LD_VAR 0 1
12169: RET
// export function PrepareRussianCommander ; begin
12170: LD_INT 0
12172: PPUSH
// uc_side = 3 ;
12173: LD_ADDR_OWVAR 20
12177: PUSH
12178: LD_INT 3
12180: ST_TO_ADDR
// uc_nation = 3 ;
12181: LD_ADDR_OWVAR 21
12185: PUSH
12186: LD_INT 3
12188: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12189: LD_ADDR_EXP 19
12193: PUSH
12194: LD_STRING Natasza
12196: PPUSH
12197: CALL_OW 25
12201: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12202: LD_EXP 19
12206: PPUSH
12207: LD_INT 24
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12217: LD_EXP 19
12221: PPUSH
12222: LD_INT 56
12224: PPUSH
12225: LD_INT 16
12227: PPUSH
12228: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12232: LD_ADDR_EXP 24
12236: PUSH
12237: LD_EXP 24
12241: PPUSH
12242: LD_EXP 24
12246: PUSH
12247: LD_INT 1
12249: PLUS
12250: PPUSH
12251: LD_EXP 19
12255: PPUSH
12256: CALL_OW 1
12260: ST_TO_ADDR
// end ;
12261: LD_VAR 0 1
12265: RET
// export function PrepareSouthBase ; var i , un ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
// for i = 1 to 2 do
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_INT 2
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12394
// begin uc_side = 3 ;
12287: LD_ADDR_OWVAR 20
12291: PUSH
12292: LD_INT 3
12294: ST_TO_ADDR
// uc_nation = 3 ;
12295: LD_ADDR_OWVAR 21
12299: PUSH
12300: LD_INT 3
12302: ST_TO_ADDR
// hc_gallery =  ;
12303: LD_ADDR_OWVAR 33
12307: PUSH
12308: LD_STRING 
12310: ST_TO_ADDR
// hc_name =  ;
12311: LD_ADDR_OWVAR 26
12315: PUSH
12316: LD_STRING 
12318: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_EXP 13
12329: PPUSH
12330: LD_EXP 14
12334: PPUSH
12335: CALL_OW 12
12339: PPUSH
12340: CALL_OW 380
// hc_importance = 0 ;
12344: LD_ADDR_OWVAR 32
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// un = CreateHuman ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: CALL_OW 44
12361: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 11
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 111
12384: PPUSH
12385: LD_INT 38
12387: PPUSH
12388: CALL_OW 118
// end ;
12392: GO 12284
12394: POP
12395: POP
// for i = 1 to 2 do
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_INT 2
12408: PUSH
12409: FOR_TO
12410: IFFALSE 12493
// begin uc_side = 3 ;
12412: LD_ADDR_OWVAR 20
12416: PUSH
12417: LD_INT 3
12419: ST_TO_ADDR
// uc_nation = 3 ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// hc_gallery =  ;
12428: LD_ADDR_OWVAR 33
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// hc_name =  ;
12436: LD_ADDR_OWVAR 26
12440: PUSH
12441: LD_STRING 
12443: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12444: LD_INT 0
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: LD_EXP 13
12454: PPUSH
12455: LD_EXP 14
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: CALL_OW 380
// un = CreateHuman ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: CALL_OW 44
12478: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 10
12486: PPUSH
12487: CALL_OW 52
// end ;
12491: GO 12409
12493: POP
12494: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12495: LD_INT 3
12497: PPUSH
12498: LD_INT 3
12500: PPUSH
12501: LD_INT 33
12503: PPUSH
12504: LD_EXP 13
12508: PPUSH
12509: LD_EXP 14
12513: PPUSH
12514: CALL_OW 12
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: LD_INT 1
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 3
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_OWVAR 67
12544: ARRAY
12545: PPUSH
12546: CALL 9084 0 6
// for i in UnitsInside ( arm2 ) do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 33
12557: PPUSH
12558: CALL_OW 313
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12597
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12566: LD_ADDR_EXP 25
12570: PUSH
12571: LD_EXP 25
12575: PPUSH
12576: LD_EXP 25
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: LD_VAR 0 2
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
12595: GO 12563
12597: POP
12598: POP
// end ;
12599: LD_VAR 0 1
12603: RET
// export function PrepareNorthBase ; var i , un ; begin
12604: LD_INT 0
12606: PPUSH
12607: PPUSH
12608: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_INT 1
12621: PPUSH
12622: LD_INT 2
12624: PPUSH
12625: CALL_OW 12
12629: PUSH
12630: LD_INT 2
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 12
12640: PUSH
12641: LD_INT 3
12643: PPUSH
12644: LD_INT 4
12646: PPUSH
12647: CALL_OW 12
12651: PUSH
12652: LD_INT 4
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12754
// begin uc_side = 3 ;
12670: LD_ADDR_OWVAR 20
12674: PUSH
12675: LD_INT 3
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// hc_gallery =  ;
12686: LD_ADDR_OWVAR 33
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// hc_name =  ;
12694: LD_ADDR_OWVAR 26
12698: PUSH
12699: LD_STRING 
12701: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_EXP 13
12712: PPUSH
12713: LD_EXP 14
12717: PPUSH
12718: CALL_OW 12
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 14
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 49
// end ;
12752: GO 12667
12754: POP
12755: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12756: LD_INT 3
12758: PPUSH
12759: LD_INT 3
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: LD_EXP 13
12769: PPUSH
12770: LD_EXP 14
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 2
12788: PPUSH
12789: CALL_OW 12
12793: PUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 12
12804: PUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 12
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_OWVAR 67
12829: ARRAY
12830: PPUSH
12831: CALL 9084 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12835: LD_INT 3
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: LD_INT 23
12843: PPUSH
12844: LD_EXP 13
12848: PPUSH
12849: LD_EXP 14
12853: PPUSH
12854: CALL_OW 12
12858: PPUSH
12859: LD_INT 4
12861: PPUSH
12862: LD_INT 0
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_OWVAR 67
12884: ARRAY
12885: PPUSH
12886: CALL 9084 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12890: LD_INT 3
12892: PPUSH
12893: LD_INT 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_EXP 13
12903: PPUSH
12904: LD_EXP 14
12908: PPUSH
12909: CALL_OW 12
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_INT 1
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_OWVAR 67
12939: ARRAY
12940: PPUSH
12941: CALL 9084 0 6
// for i in UnitsInside ( arm1 ) do
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_INT 2
12952: PPUSH
12953: CALL_OW 313
12957: PUSH
12958: FOR_IN
12959: IFFALSE 12992
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12961: LD_ADDR_EXP 24
12965: PUSH
12966: LD_EXP 24
12970: PPUSH
12971: LD_EXP 24
12975: PUSH
12976: LD_INT 1
12978: PLUS
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
12990: GO 12958
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 1
12998: RET
// export function PrepareOtherRussians ; var i , un ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
// for i = 1 to 2 do
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_INT 2
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13119
// begin uc_side = 3 ;
13020: LD_ADDR_OWVAR 20
13024: PUSH
13025: LD_INT 3
13027: ST_TO_ADDR
// uc_nation = 3 ;
13028: LD_ADDR_OWVAR 21
13032: PUSH
13033: LD_INT 3
13035: ST_TO_ADDR
// hc_gallery =  ;
13036: LD_ADDR_OWVAR 33
13040: PUSH
13041: LD_STRING 
13043: ST_TO_ADDR
// hc_name =  ;
13044: LD_ADDR_OWVAR 26
13048: PUSH
13049: LD_STRING 
13051: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_EXP 13
13062: PPUSH
13063: LD_EXP 14
13067: PPUSH
13068: CALL_OW 12
13072: PPUSH
13073: CALL_OW 380
// un = CreateHuman ;
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: CALL_OW 44
13086: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 9
13094: PPUSH
13095: LD_INT 0
13097: PPUSH
13098: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 80
13109: PPUSH
13110: LD_INT 73
13112: PPUSH
13113: CALL_OW 118
// end ;
13117: GO 13017
13119: POP
13120: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: LD_INT 31
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PPUSH
13150: CALL_OW 69
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13184
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13158: LD_EXP 13
13162: PPUSH
13163: LD_EXP 14
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: CALL 9193 0 2
13182: GO 13155
13184: POP
13185: POP
// end ;
13186: LD_VAR 0 1
13190: RET
// export function PrepareCargoBays ; begin
13191: LD_INT 0
13193: PPUSH
// uc_side = 3 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 3
13201: ST_TO_ADDR
// uc_nation = 3 ;
13202: LD_ADDR_OWVAR 21
13206: PUSH
13207: LD_INT 3
13209: ST_TO_ADDR
// vc_engine = 1 ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// vc_control = 1 ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon = 51 ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 51
13233: ST_TO_ADDR
// vc_chassis = 22 ;
13234: LD_ADDR_OWVAR 37
13238: PUSH
13239: LD_INT 22
13241: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13242: LD_ADDR_EXP 15
13246: PUSH
13247: CALL_OW 45
13251: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13252: LD_ADDR_EXP 16
13256: PUSH
13257: CALL_OW 45
13261: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13262: LD_EXP 15
13266: PPUSH
13267: LD_INT 13
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13277: LD_EXP 16
13281: PPUSH
13282: LD_INT 13
13284: PPUSH
13285: LD_INT 0
13287: PPUSH
13288: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13292: LD_EXP 15
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: LD_INT 70
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 20
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_OWVAR 67
13322: ARRAY
13323: PPUSH
13324: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13328: LD_EXP 16
13332: PPUSH
13333: LD_INT 2
13335: PPUSH
13336: LD_INT 70
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 30
13344: PUSH
13345: LD_INT 20
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: LD_OWVAR 67
13358: ARRAY
13359: PPUSH
13360: CALL_OW 291
// hc_gallery =  ;
13364: LD_ADDR_OWVAR 33
13368: PUSH
13369: LD_STRING 
13371: ST_TO_ADDR
// hc_name =  ;
13372: LD_ADDR_OWVAR 26
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13380: LD_INT 1
13382: PPUSH
13383: LD_INT 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 12
13396: PPUSH
13397: CALL_OW 380
// driver1 = CreateHuman ;
13401: LD_ADDR_EXP 17
13405: PUSH
13406: CALL_OW 44
13410: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13411: LD_EXP 17
13415: PPUSH
13416: LD_EXP 15
13420: PPUSH
13421: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13425: LD_ADDR_OWVAR 26
13429: PUSH
13430: LD_STRING Nikolai Andreyev
13432: ST_TO_ADDR
// driver2 = CreateHuman ;
13433: LD_ADDR_EXP 18
13437: PUSH
13438: CALL_OW 44
13442: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13443: LD_EXP 18
13447: PPUSH
13448: LD_EXP 16
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: LD_VAR 0 1
13461: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13462: LD_INT 0
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
// uc_side = 3 ;
13470: LD_ADDR_OWVAR 20
13474: PUSH
13475: LD_INT 3
13477: ST_TO_ADDR
// uc_nation = 3 ;
13478: LD_ADDR_OWVAR 21
13482: PUSH
13483: LD_INT 3
13485: ST_TO_ADDR
// for i := 1 to count do
13486: LD_ADDR_VAR 0 4
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_VAR 0 1
13500: PUSH
13501: FOR_TO
13502: IFFALSE 13764
// begin vc_engine = 1 ;
13504: LD_ADDR_OWVAR 39
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// vc_control = 1 ;
13512: LD_ADDR_OWVAR 38
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13520: LD_ADDR_OWVAR 40
13524: PUSH
13525: LD_INT 42
13527: ST_TO_ADDR
// if Difficulty = 3 then
13528: LD_OWVAR 67
13532: PUSH
13533: LD_INT 3
13535: EQUAL
13536: IFFALSE 13565
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13538: LD_ADDR_OWVAR 40
13542: PUSH
13543: LD_INT 42
13545: PUSH
13546: LD_INT 43
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 2
13558: PPUSH
13559: CALL_OW 12
13563: ARRAY
13564: ST_TO_ADDR
// if Difficulty = 4 then
13565: LD_OWVAR 67
13569: PUSH
13570: LD_INT 4
13572: EQUAL
13573: IFFALSE 13610
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13575: LD_ADDR_OWVAR 40
13579: PUSH
13580: LD_INT 42
13582: PUSH
13583: LD_INT 43
13585: PUSH
13586: LD_INT 43
13588: PUSH
13589: LD_INT 44
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 4
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13610: LD_ADDR_OWVAR 37
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_INT 22
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_OWVAR 67
13637: ARRAY
13638: ST_TO_ADDR
// veh = CreateVehicle ;
13639: LD_ADDR_VAR 0 5
13643: PUSH
13644: CALL_OW 45
13648: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13649: LD_VAR 0 5
13653: PPUSH
13654: LD_VAR 0 2
13658: PPUSH
13659: LD_INT 0
13661: PPUSH
13662: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13666: LD_ADDR_EXP 26
13670: PUSH
13671: LD_EXP 26
13675: PUSH
13676: LD_VAR 0 5
13680: ADD
13681: ST_TO_ADDR
// hc_gallery =  ;
13682: LD_ADDR_OWVAR 33
13686: PUSH
13687: LD_STRING 
13689: ST_TO_ADDR
// hc_name =  ;
13690: LD_ADDR_OWVAR 26
13694: PUSH
13695: LD_STRING 
13697: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13698: LD_INT 0
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: LD_EXP 13
13708: PPUSH
13709: LD_EXP 14
13713: PPUSH
13714: CALL_OW 12
13718: PPUSH
13719: CALL_OW 380
// un = CreateHuman ;
13723: LD_ADDR_VAR 0 6
13727: PUSH
13728: CALL_OW 44
13732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13733: LD_VAR 0 6
13737: PPUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_INT 14
13754: PPUSH
13755: LD_INT 9
13757: PPUSH
13758: CALL_OW 111
// end ;
13762: GO 13501
13764: POP
13765: POP
// wait ( 0 0$1 ) ;
13766: LD_INT 35
13768: PPUSH
13769: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13773: LD_INT 0
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_EXP 13
13783: PPUSH
13784: LD_EXP 14
13788: PPUSH
13789: CALL_OW 12
13793: PPUSH
13794: CALL_OW 380
// un = CreateHuman ;
13798: LD_ADDR_VAR 0 6
13802: PUSH
13803: CALL_OW 44
13807: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: DOUBLE
13814: LD_INT 1
13816: DEC
13817: ST_TO_ADDR
13818: LD_VAR 0 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: MUL
13829: PLUS
13830: PUSH
13831: FOR_TO
13832: IFFALSE 13924
// begin hc_gallery =  ;
13834: LD_ADDR_OWVAR 33
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hc_name =  ;
13842: LD_ADDR_OWVAR 26
13846: PUSH
13847: LD_STRING 
13849: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_EXP 13
13860: PPUSH
13861: LD_EXP 14
13865: PPUSH
13866: CALL_OW 12
13870: PPUSH
13871: CALL_OW 380
// un = CreateHuman ;
13875: LD_ADDR_VAR 0 6
13879: PUSH
13880: CALL_OW 44
13884: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13885: LD_VAR 0 6
13889: PPUSH
13890: LD_INT 9
13892: PPUSH
13893: LD_INT 13
13895: PPUSH
13896: LD_INT 4
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13906: LD_ADDR_EXP 26
13910: PUSH
13911: LD_EXP 26
13915: PUSH
13916: LD_VAR 0 6
13920: ADD
13921: ST_TO_ADDR
// end ;
13922: GO 13831
13924: POP
13925: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_INT 26
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 70
13973: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13974: LD_VAR 0 7
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D9-Rus3-1
13985: PPUSH
13986: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13990: LD_VAR 0 7
13994: PUSH
13995: LD_INT 2
13997: ARRAY
13998: PPUSH
13999: LD_STRING D9-Russ-1
14001: PPUSH
14002: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14006: LD_EXP 26
14010: PPUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_INT 13
14016: PPUSH
14017: CALL_OW 114
// wait ( 0 0$3 ) ;
14021: LD_INT 105
14023: PPUSH
14024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// for i in attackGroup do
14035: LD_ADDR_VAR 0 4
14039: PUSH
14040: LD_EXP 26
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14413
// begin if IsDead ( i ) then
14048: LD_VAR 0 4
14052: PPUSH
14053: CALL_OW 301
14057: IFFALSE 14077
// begin attackGroup := attackGroup diff i ;
14059: LD_ADDR_EXP 26
14063: PUSH
14064: LD_EXP 26
14068: PUSH
14069: LD_VAR 0 4
14073: DIFF
14074: ST_TO_ADDR
// continue ;
14075: GO 14045
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14077: LD_VAR 0 4
14081: PPUSH
14082: CALL_OW 314
14086: NOT
14087: PUSH
14088: LD_VAR 0 4
14092: PPUSH
14093: CALL_OW 110
14097: NOT
14098: AND
14099: IFFALSE 14135
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14101: LD_VAR 0 4
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: PPUSH
14121: LD_VAR 0 4
14125: PPUSH
14126: CALL_OW 74
14130: PPUSH
14131: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14135: LD_VAR 0 4
14139: PPUSH
14140: CALL_OW 110
14144: NOT
14145: PUSH
14146: LD_VAR 0 4
14150: PPUSH
14151: CALL_OW 256
14155: PUSH
14156: LD_INT 650
14158: LESS
14159: AND
14160: PUSH
14161: LD_VAR 0 4
14165: PPUSH
14166: CALL_OW 247
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// begin SetTag ( i , 1 ) ;
14177: LD_VAR 0 4
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14189: LD_VAR 0 4
14193: PPUSH
14194: LD_INT 20
14196: PPUSH
14197: LD_INT 8
14199: PPUSH
14200: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14204: LD_VAR 0 4
14208: PPUSH
14209: CALL_OW 110
14213: PUSH
14214: LD_INT 1
14216: EQUAL
14217: PUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 20
14225: PPUSH
14226: LD_INT 8
14228: PPUSH
14229: CALL_OW 297
14233: PUSH
14234: LD_INT 6
14236: LESS
14237: AND
14238: IFFALSE 14252
// SetTag ( i , 2 ) ;
14240: LD_VAR 0 4
14244: PPUSH
14245: LD_INT 2
14247: PPUSH
14248: CALL_OW 109
// if GetTag ( i ) = 2 then
14252: LD_VAR 0 4
14256: PPUSH
14257: CALL_OW 110
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: IFFALSE 14373
// begin if GetLives ( i ) = 1000 then
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 256
14276: PUSH
14277: LD_INT 1000
14279: EQUAL
14280: IFFALSE 14296
// SetTag ( i , 3 ) else
14282: LD_VAR 0 4
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 109
14294: GO 14373
// if IsDrivenBy ( i ) then
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 311
14305: IFFALSE 14373
// begin mech := IsDrivenBy ( i ) ;
14307: LD_ADDR_VAR 0 8
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: CALL_OW 311
14321: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 8
14329: PPUSH
14330: CALL_OW 292
14334: NOT
14335: PUSH
14336: LD_VAR 0 8
14340: PPUSH
14341: CALL_OW 256
14345: PUSH
14346: LD_INT 1000
14348: LESS
14349: AND
14350: IFFALSE 14364
// SetLives ( mech , 1000 ) ;
14352: LD_VAR 0 8
14356: PPUSH
14357: LD_INT 1000
14359: PPUSH
14360: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14364: LD_VAR 0 8
14368: PPUSH
14369: CALL 77741 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14373: LD_VAR 0 4
14377: PPUSH
14378: CALL_OW 110
14382: PUSH
14383: LD_INT 3
14385: EQUAL
14386: PUSH
14387: LD_VAR 0 4
14391: PPUSH
14392: CALL_OW 311
14396: AND
14397: IFFALSE 14411
// SetTag ( i , 0 ) ;
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 109
// end ;
14411: GO 14045
14413: POP
14414: POP
// until not attackGroup ;
14415: LD_EXP 26
14419: NOT
14420: IFFALSE 14028
// end ;
14422: LD_VAR 0 3
14426: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14427: LD_EXP 26
14431: PPUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 72
14446: IFFALSE 14514
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
// begin enable ;
14454: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14455: LD_ADDR_VAR 0 1
14459: PUSH
14460: LD_EXP 26
14464: PPUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: PUSH
14480: FOR_IN
14481: IFFALSE 14512
// if GetFuel ( i ) < 3 then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 261
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14510
// SetFuel ( i , 3 ) ;
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_INT 3
14505: PPUSH
14506: CALL_OW 240
14510: GO 14480
14512: POP
14513: POP
// end ; end_of_file
14514: PPOPN 1
14516: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14517: LD_INT 22
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 25
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: IFFALSE 14564
14547: GO 14549
14549: DISABLE
// begin enable ;
14550: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 22
14559: PPUSH
14560: CALL 9329 0 3
// end ;
14564: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 69
14593: IFFALSE 14615
14595: GO 14597
14597: DISABLE
// begin enable ;
14598: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14599: LD_INT 3
14601: PPUSH
14602: LD_INT 20
14604: PPUSH
14605: LD_INT 22
14607: PPUSH
14608: LD_INT 23
14610: PPUSH
14611: CALL 9661 0 4
// end ;
14615: END
// every 0 0$1 trigger northBaseDefenders do
14616: LD_EXP 24
14620: IFFALSE 14644
14622: GO 14624
14624: DISABLE
// begin enable ;
14625: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14626: LD_INT 22
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_EXP 24
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL 9933 0 4
// end ;
14644: END
// every 0 0$1 trigger southBaseDefenders do
14645: LD_EXP 25
14649: IFFALSE 14673
14651: GO 14653
14653: DISABLE
// begin enable ;
14654: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14655: LD_INT 23
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_EXP 25
14665: PPUSH
14666: LD_INT 33
14668: PPUSH
14669: CALL 9933 0 4
// end ; end_of_file
14673: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL 32882 0 1
// if unit = JMM then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_EXP 1
14692: EQUAL
14693: IFFALSE 14702
// YouLost ( JMM ) ;
14695: LD_STRING JMM
14697: PPUSH
14698: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14724
// YouLost ( DepotDestroyed ) ;
14717: LD_STRING DepotDestroyed
14719: PPUSH
14720: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 1
14736: EQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 247
14747: PUSH
14748: LD_INT 1
14750: EQUAL
14751: AND
14752: IFFALSE 14768
// deadsCounter = deadsCounter + 1 ;
14754: LD_ADDR_EXP 31
14758: PUSH
14759: LD_EXP 31
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ;
14768: PPOPN 1
14770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14771: LD_VAR 0 1
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: IN
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 1
14824: EQUAL
14825: AND
14826: IFFALSE 14832
// JMMTraitor ;
14828: CALL 8739 0 0
// end ;
14832: PPOPN 3
14834: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: IFFALSE 14926
// begin ComMoveXY ( driver , 6 , 10 ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 6
14857: PPUSH
14858: LD_INT 10
14860: PPUSH
14861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14865: LD_INT 35
14867: PPUSH
14868: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 6
14879: PPUSH
14880: LD_INT 10
14882: PPUSH
14883: CALL_OW 111
// if IsDead ( driver ) then
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: IFFALSE 14900
// exit ;
14898: GO 14926
// until IsAt ( driver , 6 , 10 ) ;
14900: LD_VAR 0 1
14904: PPUSH
14905: LD_INT 6
14907: PPUSH
14908: LD_INT 10
14910: PPUSH
14911: CALL_OW 307
14915: IFFALSE 14865
// RemoveUnit ( driver ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 64
// end ; end ;
14926: PPOPN 4
14928: END
// on Command ( cmd ) do var i , j , tmp ;
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// begin SOS_Command ( cmd ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL 32924 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15099
// begin if GetTaskList ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 437
14989: IFFALSE 15097
// begin for j = 1 to GetTaskList ( i ) do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 437
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15095
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_VAR 0 2
15023: PPUSH
15024: CALL_OW 437
15028: PUSH
15029: LD_VAR 0 3
15033: ARRAY
15034: PUSH
15035: LD_INT 4
15037: ARRAY
15038: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15039: LD_VAR 0 4
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 3
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: CALL_OW 247
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: CALL_OW 264
15077: PUSH
15078: LD_INT 51
15080: EQUAL
15081: AND
15082: IFFALSE 15093
// ComStop ( i ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: CALL_OW 141
// end ;
15093: GO 15011
15095: POP
15096: POP
// end ; end ;
15097: GO 14977
15099: POP
15100: POP
// end ;
15101: PPOPN 4
15103: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_EXP 8
15113: EQUAL
15114: PUSH
15115: LD_EXP 21
15119: PUSH
15120: LD_INT 4
15122: NONEQUAL
15123: AND
15124: IFFALSE 15276
// begin if IsOk ( Mikhail ) then
15126: LD_EXP 8
15130: PPUSH
15131: CALL_OW 302
15135: IFFALSE 15143
// AskMikhail else
15137: CALL 7425 0 0
15141: GO 15276
// if IsOk ( llab1 ) then
15143: LD_INT 23
15145: PPUSH
15146: CALL_OW 302
15150: IFFALSE 15239
// begin InGameOn ;
15152: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15156: LD_EXP 8
15160: PPUSH
15161: LD_INT 6
15163: PPUSH
15164: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15168: LD_INT 23
15170: PPUSH
15171: LD_INT 6
15173: PPUSH
15174: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15178: LD_EXP 8
15182: PPUSH
15183: LD_INT 23
15185: PPUSH
15186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15197: LD_EXP 8
15201: PPUSH
15202: CALL_OW 310
15206: PUSH
15207: LD_INT 23
15209: EQUAL
15210: PUSH
15211: LD_EXP 8
15215: PPUSH
15216: CALL_OW 301
15220: OR
15221: IFFALSE 15190
// SetSide ( llab1 , 1 ) ;
15223: LD_INT 23
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 235
// InGameOff ;
15233: CALL_OW 9
// end else
15237: GO 15276
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15239: LD_INT 3
15241: PPUSH
15242: LD_INT 6
15244: PPUSH
15245: LD_INT 2
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15255: LD_EXP 8
15259: PPUSH
15260: LD_INT 6
15262: PPUSH
15263: CALL_OW 235
// ComHold ( Mikhail ) ;
15267: LD_EXP 8
15271: PPUSH
15272: CALL_OW 140
// end ; end ; end ;
15276: PPOPN 2
15278: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 2
15288: PPUSH
15289: CALL 32940 0 2
// end ;
15293: PPOPN 2
15295: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15296: LD_EXP 8
15300: PPUSH
15301: CALL_OW 257
15305: PUSH
15306: LD_INT 3
15308: NONEQUAL
15309: IFFALSE 15327
15311: GO 15313
15313: DISABLE
// begin enable ;
15314: ENABLE
// SetClass ( Mikhail , 3 ) ;
15315: LD_EXP 8
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: CALL_OW 336
// end ; end_of_file
15327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: AND
15416: PUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 255
15424: PUSH
15425: LD_INT 3
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: AND
15442: IFFALSE 15454
15444: GO 15446
15446: DISABLE
// YouLost ( Engineer ) ;
15447: LD_STRING Engineer
15449: PPUSH
15450: CALL_OW 104
15454: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 3
15465: EQUAL
15466: PUSH
15467: LD_EXP 27
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: AND
15476: IFFALSE 15488
15478: GO 15480
15480: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15481: LD_STRING DepotCaptured
15483: PPUSH
15484: CALL_OW 104
15488: END
// export function PrepareTigers ; var i , un ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 2
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: LD_INT 4
15512: PUSH
15513: LD_INT 5
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_OWVAR 67
15526: ARRAY
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15644
// begin uc_side := 0 ;
15531: LD_ADDR_OWVAR 20
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// uc_nation := nation_nature ;
15539: LD_ADDR_OWVAR 21
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
// hc_sex := sex_male ;
15547: LD_ADDR_OWVAR 27
15551: PUSH
15552: LD_INT 1
15554: ST_TO_ADDR
// hc_class := class_tiger ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 14
15562: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15563: LD_ADDR_OWVAR 31
15567: PUSH
15568: LD_EXP 14
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15588: LD_ADDR_OWVAR 35
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 45
15601: PUSH
15602: LD_INT 50
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: LD_OWVAR 67
15615: ARRAY
15616: ST_TO_ADDR
// un = CreateHuman ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 27
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: CALL_OW 49
// end ;
15642: GO 15528
15644: POP
15645: POP
// end ; end_of_file
15646: LD_VAR 0 1
15650: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 255
15658: PUSH
15659: LD_INT 1
15661: EQUAL
15662: PUSH
15663: LD_INT 10
15665: PPUSH
15666: CALL_OW 255
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: PUSH
15676: LD_EXP 20
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: AND
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 51
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: LD_INT 58
15721: PUSH
15722: EMPTY
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: PUSH
15740: LD_INT 0
15742: EQUAL
15743: AND
15744: IFFALSE 15835
15746: GO 15748
15748: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15749: LD_INT 9450
15751: PUSH
15752: LD_INT 8400
15754: PUSH
15755: LD_INT 6300
15757: PUSH
15758: LD_INT 6300
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_OWVAR 67
15771: ARRAY
15772: PPUSH
15773: CALL_OW 67
// if cargoEscape then
15777: LD_EXP 20
15781: IFFALSE 15835
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15783: LD_EXP 9
15787: PPUSH
15788: LD_STRING D6-Pow-1
15790: PPUSH
15791: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15795: LD_EXP 1
15799: PPUSH
15800: LD_STRING D6-JMM-1
15802: PPUSH
15803: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15807: LD_EXP 9
15811: PPUSH
15812: LD_STRING D6-Pow-2
15814: PPUSH
15815: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15819: LD_EXP 1
15823: PPUSH
15824: LD_STRING D6-JMM-2
15826: PPUSH
15827: CALL_OW 88
// FinishMission ;
15831: CALL 16051 0 0
// end ; end ;
15835: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 255
15843: PUSH
15844: LD_INT 1
15846: EQUAL
15847: PUSH
15848: LD_INT 10
15850: PPUSH
15851: CALL_OW 255
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: AND
15860: PUSH
15861: LD_EXP 20
15865: PUSH
15866: LD_INT 1
15868: GREATER
15869: AND
15870: IFFALSE 15945
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15878: LD_INT 11550
15880: PUSH
15881: LD_INT 10500
15883: PUSH
15884: LD_INT 9450
15886: PUSH
15887: LD_INT 8400
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_OWVAR 67
15900: ARRAY
15901: PPUSH
15902: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15906: LD_INT 1
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 3
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: LD_OWVAR 67
15928: ARRAY
15929: PPUSH
15930: LD_INT 13
15932: PPUSH
15933: CALL 13462 0 2
// lastBattle = 1 ;
15937: LD_ADDR_EXP 27
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// end ;
15945: PPOPN 1
15947: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15948: LD_EXP 27
15952: PUSH
15953: LD_INT 1
15955: EQUAL
15956: PUSH
15957: LD_INT 26
15959: PPUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 70
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: AND
15993: IFFALSE 16050
15995: GO 15997
15997: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15998: LD_EXP 9
16002: PPUSH
16003: LD_STRING D6-Pow-1
16005: PPUSH
16006: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16010: LD_EXP 1
16014: PPUSH
16015: LD_STRING D6-JMM-1
16017: PPUSH
16018: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16022: LD_EXP 9
16026: PPUSH
16027: LD_STRING D6-Pow-2
16029: PPUSH
16030: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16034: LD_EXP 1
16038: PPUSH
16039: LD_STRING D6-JMM-2
16041: PPUSH
16042: CALL_OW 88
// FinishMission ;
16046: CALL 16051 0 0
// end ;
16050: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
// if traitor then
16058: LD_EXP 33
16062: IFFALSE 16066
// exit ;
16064: GO 16930
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16066: LD_INT 22
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 21
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 23
16088: PUSH
16089: LD_INT 1
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 50
16098: PUSH
16099: EMPTY
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: PPUSH
16108: CALL_OW 69
16112: PUSH
16113: LD_INT 2
16115: LESS
16116: IFFALSE 16125
// YouLost ( Troops ) ;
16118: LD_STRING Troops
16120: PPUSH
16121: CALL_OW 104
// if tick <= 18 18$00 then
16125: LD_OWVAR 1
16129: PUSH
16130: LD_INT 37800
16132: LESSEQUAL
16133: IFFALSE 16142
// SetAchievement ( ACH_ASPEED_2 ) ;
16135: LD_STRING ACH_ASPEED_2
16137: PPUSH
16138: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 24
16169: PUSH
16170: LD_INT 251
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if tmp then
16187: LD_VAR 0 2
16191: IFFALSE 16205
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_STRING 02_tanks_1
16200: PPUSH
16201: CALL 10808 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16205: LD_EXP 21
16209: PUSH
16210: LD_INT 1
16212: EQUAL
16213: PUSH
16214: LD_EXP 8
16218: PPUSH
16219: CALL_OW 300
16223: AND
16224: IFFALSE 16238
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16226: LD_EXP 21
16230: PPUSH
16231: LD_STRING 02_mikhailStatus_1
16233: PPUSH
16234: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 274
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 275
16253: PPUSH
16254: LD_STRING 02_resources_4
16256: PPUSH
16257: CALL_OW 39
// m1 := false ;
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// m2 := false ;
16269: LD_ADDR_VAR 0 4
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// m3 := false ;
16277: LD_ADDR_VAR 0 5
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 274
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 275
16300: PUSH
16301: LD_INT 200
16303: GREATEREQUAL
16304: IFFALSE 16326
// begin AddMedal ( Cans , 1 ) ;
16306: LD_STRING Cans
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 101
// m1 := true ;
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// end else
16324: GO 16337
// begin AddMedal ( Cans , - 1 ) ;
16326: LD_STRING Cans
16328: PPUSH
16329: LD_INT 1
16331: NEG
16332: PPUSH
16333: CALL_OW 101
// end ; if deadsCounter < 2 then
16337: LD_EXP 31
16341: PUSH
16342: LD_INT 2
16344: LESS
16345: IFFALSE 16367
// begin AddMedal ( Deaths , 1 ) ;
16347: LD_STRING Deaths
16349: PPUSH
16350: LD_INT 1
16352: PPUSH
16353: CALL_OW 101
// m2 := true ;
16357: LD_ADDR_VAR 0 4
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// end else
16365: GO 16378
// begin AddMedal ( Deaths , - 1 ) ;
16367: LD_STRING Deaths
16369: PPUSH
16370: LD_INT 1
16372: NEG
16373: PPUSH
16374: CALL_OW 101
// end ; if mikhailStatus = 0 then
16378: LD_EXP 21
16382: PUSH
16383: LD_INT 0
16385: EQUAL
16386: IFFALSE 16399
// AddMedal ( Prisoner , - 1 ) ;
16388: LD_STRING Prisoner
16390: PPUSH
16391: LD_INT 1
16393: NEG
16394: PPUSH
16395: CALL_OW 101
// if mikhailStatus = 1 then
16399: LD_EXP 21
16403: PUSH
16404: LD_INT 1
16406: EQUAL
16407: IFFALSE 16427
// begin AddMedal ( Prisoner , 1 ) ;
16409: LD_STRING Prisoner
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 101
// m3 := true ;
16419: LD_ADDR_VAR 0 5
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16427: LD_EXP 21
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16455
// begin AddMedal ( Prisoner , 2 ) ;
16437: LD_STRING Prisoner
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: CALL_OW 101
// m3 := true ;
16447: LD_ADDR_VAR 0 5
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16455: LD_EXP 21
16459: PUSH
16460: LD_INT 3
16462: EQUAL
16463: IFFALSE 16476
// AddMedal ( Prisoner , - 2 ) ;
16465: LD_STRING Prisoner
16467: PPUSH
16468: LD_INT 2
16470: NEG
16471: PPUSH
16472: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16476: LD_OWVAR 67
16480: PUSH
16481: LD_INT 3
16483: GREATEREQUAL
16484: PUSH
16485: LD_VAR 0 3
16489: AND
16490: PUSH
16491: LD_VAR 0 4
16495: AND
16496: PUSH
16497: LD_VAR 0 5
16501: AND
16502: IFFALSE 16514
// SetAchievementEX ( ACH_AMER , 2 ) ;
16504: LD_STRING ACH_AMER
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 564
// GiveMedals ( MAIN ) ;
16514: LD_STRING MAIN
16516: PPUSH
16517: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16521: LD_INT 22
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: PPUSH
16561: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16565: LD_EXP 1
16569: PPUSH
16570: LD_EXP 34
16574: PUSH
16575: LD_STRING JMM
16577: STR
16578: PPUSH
16579: CALL_OW 38
// if IsOK ( Bobby ) then
16583: LD_EXP 2
16587: PPUSH
16588: CALL_OW 302
16592: IFFALSE 16612
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16594: LD_EXP 2
16598: PPUSH
16599: LD_EXP 34
16603: PUSH
16604: LD_STRING Bobby
16606: STR
16607: PPUSH
16608: CALL_OW 38
// if IsOK ( Cyrus ) then
16612: LD_EXP 3
16616: PPUSH
16617: CALL_OW 302
16621: IFFALSE 16641
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16623: LD_EXP 3
16627: PPUSH
16628: LD_EXP 34
16632: PUSH
16633: LD_STRING Cyrus
16635: STR
16636: PPUSH
16637: CALL_OW 38
// if IsOK ( Lisa ) then
16641: LD_EXP 4
16645: PPUSH
16646: CALL_OW 302
16650: IFFALSE 16677
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16652: LD_STRING enableBioCharacter(BIO_LISA)
16654: PPUSH
16655: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16659: LD_EXP 4
16663: PPUSH
16664: LD_EXP 34
16668: PUSH
16669: LD_STRING Lisa
16671: STR
16672: PPUSH
16673: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16677: LD_EXP 5
16681: PPUSH
16682: CALL_OW 302
16686: IFFALSE 16713
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16688: LD_STRING enableBioCharacter(BIO_KHAT)
16690: PPUSH
16691: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16695: LD_EXP 5
16699: PPUSH
16700: LD_EXP 34
16704: PUSH
16705: LD_STRING Khatam
16707: STR
16708: PPUSH
16709: CALL_OW 38
// end ; if IsOK ( Brian ) then
16713: LD_EXP 6
16717: PPUSH
16718: CALL_OW 302
16722: IFFALSE 16742
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16724: LD_EXP 6
16728: PPUSH
16729: LD_EXP 34
16733: PUSH
16734: LD_STRING Brian
16736: STR
16737: PPUSH
16738: CALL_OW 38
// if IsOk ( Jerry ) then
16742: LD_EXP 7
16746: PPUSH
16747: CALL_OW 302
16751: IFFALSE 16771
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16753: LD_EXP 7
16757: PPUSH
16758: LD_EXP 34
16762: PUSH
16763: LD_STRING Jerry
16765: STR
16766: PPUSH
16767: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16771: LD_EXP 21
16775: PUSH
16776: LD_INT 1
16778: EQUAL
16779: PUSH
16780: LD_EXP 8
16784: PPUSH
16785: CALL_OW 255
16789: PUSH
16790: LD_INT 1
16792: EQUAL
16793: AND
16794: PUSH
16795: LD_EXP 8
16799: PPUSH
16800: CALL_OW 302
16804: AND
16805: IFFALSE 16832
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16807: LD_STRING enableBioCharacter(BIO_MICH)
16809: PPUSH
16810: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16814: LD_EXP 8
16818: PPUSH
16819: LD_EXP 34
16823: PUSH
16824: LD_STRING Mikhail
16826: STR
16827: PPUSH
16828: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16832: LD_INT 50
16834: PUSH
16835: EMPTY
16836: LIST
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 21
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: LD_EXP 1
16872: PUSH
16873: LD_EXP 2
16877: PUSH
16878: LD_EXP 3
16882: PUSH
16883: LD_EXP 4
16887: PUSH
16888: LD_EXP 5
16892: PUSH
16893: LD_EXP 6
16897: PUSH
16898: LD_EXP 7
16902: PUSH
16903: LD_EXP 8
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: DIFF
16918: PPUSH
16919: LD_STRING 02_other_survivors
16921: PPUSH
16922: CALL_OW 38
// YouWin ;
16926: CALL_OW 103
// end ; end_of_file end_of_file
16930: LD_VAR 0 1
16934: RET
// export globalGameSaveCounter ; every 0 0$1 do
16935: GO 16937
16937: DISABLE
// begin enable ;
16938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16939: LD_STRING updateTimer(
16941: PUSH
16942: LD_OWVAR 1
16946: STR
16947: PUSH
16948: LD_STRING );
16950: STR
16951: PPUSH
16952: CALL_OW 559
// end ;
16956: END
// every 0 0$1 do
16957: GO 16959
16959: DISABLE
// begin globalGameSaveCounter := 0 ;
16960: LD_ADDR_EXP 37
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16968: LD_STRING setGameSaveCounter(0)
16970: PPUSH
16971: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16975: LD_STRING initStreamRollete();
16977: PPUSH
16978: CALL_OW 559
// InitStreamMode ;
16982: CALL 18325 0 0
// DefineStreamItems ( false ) ;
16986: LD_INT 0
16988: PPUSH
16989: CALL 18789 0 1
// end ;
16993: END
// export function SOS_MapStart ( ) ; begin
16994: LD_INT 0
16996: PPUSH
// if streamModeActive then
16997: LD_EXP 38
17001: IFFALSE 17010
// DefineStreamItems ( true ) ;
17003: LD_INT 1
17005: PPUSH
17006: CALL 18789 0 1
// UpdateLuaVariables ( ) ;
17010: CALL 17027 0 0
// UpdateFactoryWaypoints ( ) ;
17014: CALL 31791 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17018: CALL 32043 0 0
// end ;
17022: LD_VAR 0 1
17026: RET
// function UpdateLuaVariables ( ) ; begin
17027: LD_INT 0
17029: PPUSH
// if globalGameSaveCounter then
17030: LD_EXP 37
17034: IFFALSE 17068
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17036: LD_ADDR_EXP 37
17040: PUSH
17041: LD_EXP 37
17045: PPUSH
17046: CALL 77402 0 1
17050: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17051: LD_STRING setGameSaveCounter(
17053: PUSH
17054: LD_EXP 37
17058: STR
17059: PUSH
17060: LD_STRING )
17062: STR
17063: PPUSH
17064: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17068: LD_STRING setGameDifficulty(
17070: PUSH
17071: LD_OWVAR 67
17075: STR
17076: PUSH
17077: LD_STRING )
17079: STR
17080: PPUSH
17081: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17085: LD_STRING displayDifficulty(
17087: PUSH
17088: LD_OWVAR 67
17092: STR
17093: PUSH
17094: LD_STRING )
17096: STR
17097: PPUSH
17098: CALL_OW 559
// end ;
17102: LD_VAR 0 1
17106: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17107: LD_INT 0
17109: PPUSH
// if p2 = stream_mode then
17110: LD_VAR 0 2
17114: PUSH
17115: LD_INT 100
17117: EQUAL
17118: IFFALSE 18121
// begin if not StreamModeActive then
17120: LD_EXP 38
17124: NOT
17125: IFFALSE 17135
// StreamModeActive := true ;
17127: LD_ADDR_EXP 38
17131: PUSH
17132: LD_INT 1
17134: ST_TO_ADDR
// if p3 = 0 then
17135: LD_VAR 0 3
17139: PUSH
17140: LD_INT 0
17142: EQUAL
17143: IFFALSE 17149
// InitStreamMode ;
17145: CALL 18325 0 0
// if p3 = 1 then
17149: LD_VAR 0 3
17153: PUSH
17154: LD_INT 1
17156: EQUAL
17157: IFFALSE 17167
// sRocket := true ;
17159: LD_ADDR_EXP 43
17163: PUSH
17164: LD_INT 1
17166: ST_TO_ADDR
// if p3 = 2 then
17167: LD_VAR 0 3
17171: PUSH
17172: LD_INT 2
17174: EQUAL
17175: IFFALSE 17185
// sSpeed := true ;
17177: LD_ADDR_EXP 42
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// if p3 = 3 then
17185: LD_VAR 0 3
17189: PUSH
17190: LD_INT 3
17192: EQUAL
17193: IFFALSE 17203
// sEngine := true ;
17195: LD_ADDR_EXP 44
17199: PUSH
17200: LD_INT 1
17202: ST_TO_ADDR
// if p3 = 4 then
17203: LD_VAR 0 3
17207: PUSH
17208: LD_INT 4
17210: EQUAL
17211: IFFALSE 17221
// sSpec := true ;
17213: LD_ADDR_EXP 41
17217: PUSH
17218: LD_INT 1
17220: ST_TO_ADDR
// if p3 = 5 then
17221: LD_VAR 0 3
17225: PUSH
17226: LD_INT 5
17228: EQUAL
17229: IFFALSE 17239
// sLevel := true ;
17231: LD_ADDR_EXP 45
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// if p3 = 6 then
17239: LD_VAR 0 3
17243: PUSH
17244: LD_INT 6
17246: EQUAL
17247: IFFALSE 17257
// sArmoury := true ;
17249: LD_ADDR_EXP 46
17253: PUSH
17254: LD_INT 1
17256: ST_TO_ADDR
// if p3 = 7 then
17257: LD_VAR 0 3
17261: PUSH
17262: LD_INT 7
17264: EQUAL
17265: IFFALSE 17275
// sRadar := true ;
17267: LD_ADDR_EXP 47
17271: PUSH
17272: LD_INT 1
17274: ST_TO_ADDR
// if p3 = 8 then
17275: LD_VAR 0 3
17279: PUSH
17280: LD_INT 8
17282: EQUAL
17283: IFFALSE 17293
// sBunker := true ;
17285: LD_ADDR_EXP 48
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// if p3 = 9 then
17293: LD_VAR 0 3
17297: PUSH
17298: LD_INT 9
17300: EQUAL
17301: IFFALSE 17311
// sHack := true ;
17303: LD_ADDR_EXP 49
17307: PUSH
17308: LD_INT 1
17310: ST_TO_ADDR
// if p3 = 10 then
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: EQUAL
17319: IFFALSE 17329
// sFire := true ;
17321: LD_ADDR_EXP 50
17325: PUSH
17326: LD_INT 1
17328: ST_TO_ADDR
// if p3 = 11 then
17329: LD_VAR 0 3
17333: PUSH
17334: LD_INT 11
17336: EQUAL
17337: IFFALSE 17347
// sRefresh := true ;
17339: LD_ADDR_EXP 51
17343: PUSH
17344: LD_INT 1
17346: ST_TO_ADDR
// if p3 = 12 then
17347: LD_VAR 0 3
17351: PUSH
17352: LD_INT 12
17354: EQUAL
17355: IFFALSE 17365
// sExp := true ;
17357: LD_ADDR_EXP 52
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
// if p3 = 13 then
17365: LD_VAR 0 3
17369: PUSH
17370: LD_INT 13
17372: EQUAL
17373: IFFALSE 17383
// sDepot := true ;
17375: LD_ADDR_EXP 53
17379: PUSH
17380: LD_INT 1
17382: ST_TO_ADDR
// if p3 = 14 then
17383: LD_VAR 0 3
17387: PUSH
17388: LD_INT 14
17390: EQUAL
17391: IFFALSE 17401
// sFlag := true ;
17393: LD_ADDR_EXP 54
17397: PUSH
17398: LD_INT 1
17400: ST_TO_ADDR
// if p3 = 15 then
17401: LD_VAR 0 3
17405: PUSH
17406: LD_INT 15
17408: EQUAL
17409: IFFALSE 17419
// sKamikadze := true ;
17411: LD_ADDR_EXP 62
17415: PUSH
17416: LD_INT 1
17418: ST_TO_ADDR
// if p3 = 16 then
17419: LD_VAR 0 3
17423: PUSH
17424: LD_INT 16
17426: EQUAL
17427: IFFALSE 17437
// sTroll := true ;
17429: LD_ADDR_EXP 63
17433: PUSH
17434: LD_INT 1
17436: ST_TO_ADDR
// if p3 = 17 then
17437: LD_VAR 0 3
17441: PUSH
17442: LD_INT 17
17444: EQUAL
17445: IFFALSE 17455
// sSlow := true ;
17447: LD_ADDR_EXP 64
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
// if p3 = 18 then
17455: LD_VAR 0 3
17459: PUSH
17460: LD_INT 18
17462: EQUAL
17463: IFFALSE 17473
// sLack := true ;
17465: LD_ADDR_EXP 65
17469: PUSH
17470: LD_INT 1
17472: ST_TO_ADDR
// if p3 = 19 then
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 19
17480: EQUAL
17481: IFFALSE 17491
// sTank := true ;
17483: LD_ADDR_EXP 67
17487: PUSH
17488: LD_INT 1
17490: ST_TO_ADDR
// if p3 = 20 then
17491: LD_VAR 0 3
17495: PUSH
17496: LD_INT 20
17498: EQUAL
17499: IFFALSE 17509
// sRemote := true ;
17501: LD_ADDR_EXP 68
17505: PUSH
17506: LD_INT 1
17508: ST_TO_ADDR
// if p3 = 21 then
17509: LD_VAR 0 3
17513: PUSH
17514: LD_INT 21
17516: EQUAL
17517: IFFALSE 17527
// sPowell := true ;
17519: LD_ADDR_EXP 69
17523: PUSH
17524: LD_INT 1
17526: ST_TO_ADDR
// if p3 = 22 then
17527: LD_VAR 0 3
17531: PUSH
17532: LD_INT 22
17534: EQUAL
17535: IFFALSE 17545
// sTeleport := true ;
17537: LD_ADDR_EXP 72
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// if p3 = 23 then
17545: LD_VAR 0 3
17549: PUSH
17550: LD_INT 23
17552: EQUAL
17553: IFFALSE 17563
// sOilTower := true ;
17555: LD_ADDR_EXP 74
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// if p3 = 24 then
17563: LD_VAR 0 3
17567: PUSH
17568: LD_INT 24
17570: EQUAL
17571: IFFALSE 17581
// sShovel := true ;
17573: LD_ADDR_EXP 75
17577: PUSH
17578: LD_INT 1
17580: ST_TO_ADDR
// if p3 = 25 then
17581: LD_VAR 0 3
17585: PUSH
17586: LD_INT 25
17588: EQUAL
17589: IFFALSE 17599
// sSheik := true ;
17591: LD_ADDR_EXP 76
17595: PUSH
17596: LD_INT 1
17598: ST_TO_ADDR
// if p3 = 26 then
17599: LD_VAR 0 3
17603: PUSH
17604: LD_INT 26
17606: EQUAL
17607: IFFALSE 17617
// sEarthquake := true ;
17609: LD_ADDR_EXP 78
17613: PUSH
17614: LD_INT 1
17616: ST_TO_ADDR
// if p3 = 27 then
17617: LD_VAR 0 3
17621: PUSH
17622: LD_INT 27
17624: EQUAL
17625: IFFALSE 17635
// sAI := true ;
17627: LD_ADDR_EXP 79
17631: PUSH
17632: LD_INT 1
17634: ST_TO_ADDR
// if p3 = 28 then
17635: LD_VAR 0 3
17639: PUSH
17640: LD_INT 28
17642: EQUAL
17643: IFFALSE 17653
// sCargo := true ;
17645: LD_ADDR_EXP 82
17649: PUSH
17650: LD_INT 1
17652: ST_TO_ADDR
// if p3 = 29 then
17653: LD_VAR 0 3
17657: PUSH
17658: LD_INT 29
17660: EQUAL
17661: IFFALSE 17671
// sDLaser := true ;
17663: LD_ADDR_EXP 83
17667: PUSH
17668: LD_INT 1
17670: ST_TO_ADDR
// if p3 = 30 then
17671: LD_VAR 0 3
17675: PUSH
17676: LD_INT 30
17678: EQUAL
17679: IFFALSE 17689
// sExchange := true ;
17681: LD_ADDR_EXP 84
17685: PUSH
17686: LD_INT 1
17688: ST_TO_ADDR
// if p3 = 31 then
17689: LD_VAR 0 3
17693: PUSH
17694: LD_INT 31
17696: EQUAL
17697: IFFALSE 17707
// sFac := true ;
17699: LD_ADDR_EXP 85
17703: PUSH
17704: LD_INT 1
17706: ST_TO_ADDR
// if p3 = 32 then
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 32
17714: EQUAL
17715: IFFALSE 17725
// sPower := true ;
17717: LD_ADDR_EXP 86
17721: PUSH
17722: LD_INT 1
17724: ST_TO_ADDR
// if p3 = 33 then
17725: LD_VAR 0 3
17729: PUSH
17730: LD_INT 33
17732: EQUAL
17733: IFFALSE 17743
// sRandom := true ;
17735: LD_ADDR_EXP 87
17739: PUSH
17740: LD_INT 1
17742: ST_TO_ADDR
// if p3 = 34 then
17743: LD_VAR 0 3
17747: PUSH
17748: LD_INT 34
17750: EQUAL
17751: IFFALSE 17761
// sShield := true ;
17753: LD_ADDR_EXP 88
17757: PUSH
17758: LD_INT 1
17760: ST_TO_ADDR
// if p3 = 35 then
17761: LD_VAR 0 3
17765: PUSH
17766: LD_INT 35
17768: EQUAL
17769: IFFALSE 17779
// sTime := true ;
17771: LD_ADDR_EXP 89
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// if p3 = 36 then
17779: LD_VAR 0 3
17783: PUSH
17784: LD_INT 36
17786: EQUAL
17787: IFFALSE 17797
// sTools := true ;
17789: LD_ADDR_EXP 90
17793: PUSH
17794: LD_INT 1
17796: ST_TO_ADDR
// if p3 = 101 then
17797: LD_VAR 0 3
17801: PUSH
17802: LD_INT 101
17804: EQUAL
17805: IFFALSE 17815
// sSold := true ;
17807: LD_ADDR_EXP 55
17811: PUSH
17812: LD_INT 1
17814: ST_TO_ADDR
// if p3 = 102 then
17815: LD_VAR 0 3
17819: PUSH
17820: LD_INT 102
17822: EQUAL
17823: IFFALSE 17833
// sDiff := true ;
17825: LD_ADDR_EXP 56
17829: PUSH
17830: LD_INT 1
17832: ST_TO_ADDR
// if p3 = 103 then
17833: LD_VAR 0 3
17837: PUSH
17838: LD_INT 103
17840: EQUAL
17841: IFFALSE 17851
// sFog := true ;
17843: LD_ADDR_EXP 59
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// if p3 = 104 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 104
17858: EQUAL
17859: IFFALSE 17869
// sReset := true ;
17861: LD_ADDR_EXP 60
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// if p3 = 105 then
17869: LD_VAR 0 3
17873: PUSH
17874: LD_INT 105
17876: EQUAL
17877: IFFALSE 17887
// sSun := true ;
17879: LD_ADDR_EXP 61
17883: PUSH
17884: LD_INT 1
17886: ST_TO_ADDR
// if p3 = 106 then
17887: LD_VAR 0 3
17891: PUSH
17892: LD_INT 106
17894: EQUAL
17895: IFFALSE 17905
// sTiger := true ;
17897: LD_ADDR_EXP 57
17901: PUSH
17902: LD_INT 1
17904: ST_TO_ADDR
// if p3 = 107 then
17905: LD_VAR 0 3
17909: PUSH
17910: LD_INT 107
17912: EQUAL
17913: IFFALSE 17923
// sBomb := true ;
17915: LD_ADDR_EXP 58
17919: PUSH
17920: LD_INT 1
17922: ST_TO_ADDR
// if p3 = 108 then
17923: LD_VAR 0 3
17927: PUSH
17928: LD_INT 108
17930: EQUAL
17931: IFFALSE 17941
// sWound := true ;
17933: LD_ADDR_EXP 66
17937: PUSH
17938: LD_INT 1
17940: ST_TO_ADDR
// if p3 = 109 then
17941: LD_VAR 0 3
17945: PUSH
17946: LD_INT 109
17948: EQUAL
17949: IFFALSE 17959
// sBetray := true ;
17951: LD_ADDR_EXP 70
17955: PUSH
17956: LD_INT 1
17958: ST_TO_ADDR
// if p3 = 110 then
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 110
17966: EQUAL
17967: IFFALSE 17977
// sContamin := true ;
17969: LD_ADDR_EXP 71
17973: PUSH
17974: LD_INT 1
17976: ST_TO_ADDR
// if p3 = 111 then
17977: LD_VAR 0 3
17981: PUSH
17982: LD_INT 111
17984: EQUAL
17985: IFFALSE 17995
// sOil := true ;
17987: LD_ADDR_EXP 73
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
// if p3 = 112 then
17995: LD_VAR 0 3
17999: PUSH
18000: LD_INT 112
18002: EQUAL
18003: IFFALSE 18013
// sStu := true ;
18005: LD_ADDR_EXP 77
18009: PUSH
18010: LD_INT 1
18012: ST_TO_ADDR
// if p3 = 113 then
18013: LD_VAR 0 3
18017: PUSH
18018: LD_INT 113
18020: EQUAL
18021: IFFALSE 18031
// sBazooka := true ;
18023: LD_ADDR_EXP 80
18027: PUSH
18028: LD_INT 1
18030: ST_TO_ADDR
// if p3 = 114 then
18031: LD_VAR 0 3
18035: PUSH
18036: LD_INT 114
18038: EQUAL
18039: IFFALSE 18049
// sMortar := true ;
18041: LD_ADDR_EXP 81
18045: PUSH
18046: LD_INT 1
18048: ST_TO_ADDR
// if p3 = 115 then
18049: LD_VAR 0 3
18053: PUSH
18054: LD_INT 115
18056: EQUAL
18057: IFFALSE 18067
// sRanger := true ;
18059: LD_ADDR_EXP 91
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// if p3 = 116 then
18067: LD_VAR 0 3
18071: PUSH
18072: LD_INT 116
18074: EQUAL
18075: IFFALSE 18085
// sComputer := true ;
18077: LD_ADDR_EXP 92
18081: PUSH
18082: LD_INT 1
18084: ST_TO_ADDR
// if p3 = 117 then
18085: LD_VAR 0 3
18089: PUSH
18090: LD_INT 117
18092: EQUAL
18093: IFFALSE 18103
// s30 := true ;
18095: LD_ADDR_EXP 93
18099: PUSH
18100: LD_INT 1
18102: ST_TO_ADDR
// if p3 = 118 then
18103: LD_VAR 0 3
18107: PUSH
18108: LD_INT 118
18110: EQUAL
18111: IFFALSE 18121
// s60 := true ;
18113: LD_ADDR_EXP 94
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// end ; if p2 = hack_mode then
18121: LD_VAR 0 2
18125: PUSH
18126: LD_INT 101
18128: EQUAL
18129: IFFALSE 18257
// begin case p3 of 1 :
18131: LD_VAR 0 3
18135: PUSH
18136: LD_INT 1
18138: DOUBLE
18139: EQUAL
18140: IFTRUE 18144
18142: GO 18151
18144: POP
// hHackUnlimitedResources ; 2 :
18145: CALL 30404 0 0
18149: GO 18257
18151: LD_INT 2
18153: DOUBLE
18154: EQUAL
18155: IFTRUE 18159
18157: GO 18166
18159: POP
// hHackSetLevel10 ; 3 :
18160: CALL 30537 0 0
18164: GO 18257
18166: LD_INT 3
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18181
18174: POP
// hHackSetLevel10YourUnits ; 4 :
18175: CALL 30622 0 0
18179: GO 18257
18181: LD_INT 4
18183: DOUBLE
18184: EQUAL
18185: IFTRUE 18189
18187: GO 18196
18189: POP
// hHackInvincible ; 5 :
18190: CALL 31070 0 0
18194: GO 18257
18196: LD_INT 5
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18211
18204: POP
// hHackInvisible ; 6 :
18205: CALL 31181 0 0
18209: GO 18257
18211: LD_INT 6
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18226
18219: POP
// hHackChangeYourSide ; 7 :
18220: CALL 31238 0 0
18224: GO 18257
18226: LD_INT 7
18228: DOUBLE
18229: EQUAL
18230: IFTRUE 18234
18232: GO 18241
18234: POP
// hHackChangeUnitSide ; 8 :
18235: CALL 31280 0 0
18239: GO 18257
18241: LD_INT 8
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18256
18249: POP
// hHackFog ; end ;
18250: CALL 31381 0 0
18254: GO 18257
18256: POP
// end ; if p2 = game_save_mode then
18257: LD_VAR 0 2
18261: PUSH
18262: LD_INT 102
18264: EQUAL
18265: IFFALSE 18320
// begin if p3 = 1 then
18267: LD_VAR 0 3
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: IFFALSE 18287
// globalGameSaveCounter := p4 ;
18277: LD_ADDR_EXP 37
18281: PUSH
18282: LD_VAR 0 4
18286: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18287: LD_VAR 0 3
18291: PUSH
18292: LD_INT 2
18294: EQUAL
18295: PUSH
18296: LD_EXP 37
18300: AND
18301: IFFALSE 18320
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18303: LD_STRING setGameSaveCounter(
18305: PUSH
18306: LD_EXP 37
18310: STR
18311: PUSH
18312: LD_STRING )
18314: STR
18315: PPUSH
18316: CALL_OW 559
// end ; end ;
18320: LD_VAR 0 7
18324: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18325: LD_INT 0
18327: PPUSH
// streamModeActive := false ;
18328: LD_ADDR_EXP 38
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// normalCounter := 36 ;
18336: LD_ADDR_EXP 39
18340: PUSH
18341: LD_INT 36
18343: ST_TO_ADDR
// hardcoreCounter := 18 ;
18344: LD_ADDR_EXP 40
18348: PUSH
18349: LD_INT 18
18351: ST_TO_ADDR
// sRocket := false ;
18352: LD_ADDR_EXP 43
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sSpeed := false ;
18360: LD_ADDR_EXP 42
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sEngine := false ;
18368: LD_ADDR_EXP 44
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sSpec := false ;
18376: LD_ADDR_EXP 41
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sLevel := false ;
18384: LD_ADDR_EXP 45
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sArmoury := false ;
18392: LD_ADDR_EXP 46
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sRadar := false ;
18400: LD_ADDR_EXP 47
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sBunker := false ;
18408: LD_ADDR_EXP 48
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sHack := false ;
18416: LD_ADDR_EXP 49
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sFire := false ;
18424: LD_ADDR_EXP 50
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sRefresh := false ;
18432: LD_ADDR_EXP 51
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sExp := false ;
18440: LD_ADDR_EXP 52
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// sDepot := false ;
18448: LD_ADDR_EXP 53
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// sFlag := false ;
18456: LD_ADDR_EXP 54
18460: PUSH
18461: LD_INT 0
18463: ST_TO_ADDR
// sKamikadze := false ;
18464: LD_ADDR_EXP 62
18468: PUSH
18469: LD_INT 0
18471: ST_TO_ADDR
// sTroll := false ;
18472: LD_ADDR_EXP 63
18476: PUSH
18477: LD_INT 0
18479: ST_TO_ADDR
// sSlow := false ;
18480: LD_ADDR_EXP 64
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// sLack := false ;
18488: LD_ADDR_EXP 65
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// sTank := false ;
18496: LD_ADDR_EXP 67
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// sRemote := false ;
18504: LD_ADDR_EXP 68
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sPowell := false ;
18512: LD_ADDR_EXP 69
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// sTeleport := false ;
18520: LD_ADDR_EXP 72
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
// sOilTower := false ;
18528: LD_ADDR_EXP 74
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// sShovel := false ;
18536: LD_ADDR_EXP 75
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// sSheik := false ;
18544: LD_ADDR_EXP 76
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// sEarthquake := false ;
18552: LD_ADDR_EXP 78
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// sAI := false ;
18560: LD_ADDR_EXP 79
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// sCargo := false ;
18568: LD_ADDR_EXP 82
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// sDLaser := false ;
18576: LD_ADDR_EXP 83
18580: PUSH
18581: LD_INT 0
18583: ST_TO_ADDR
// sExchange := false ;
18584: LD_ADDR_EXP 84
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// sFac := false ;
18592: LD_ADDR_EXP 85
18596: PUSH
18597: LD_INT 0
18599: ST_TO_ADDR
// sPower := false ;
18600: LD_ADDR_EXP 86
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
// sRandom := false ;
18608: LD_ADDR_EXP 87
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// sShield := false ;
18616: LD_ADDR_EXP 88
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// sTime := false ;
18624: LD_ADDR_EXP 89
18628: PUSH
18629: LD_INT 0
18631: ST_TO_ADDR
// sTools := false ;
18632: LD_ADDR_EXP 90
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
// sSold := false ;
18640: LD_ADDR_EXP 55
18644: PUSH
18645: LD_INT 0
18647: ST_TO_ADDR
// sDiff := false ;
18648: LD_ADDR_EXP 56
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// sFog := false ;
18656: LD_ADDR_EXP 59
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// sReset := false ;
18664: LD_ADDR_EXP 60
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// sSun := false ;
18672: LD_ADDR_EXP 61
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// sTiger := false ;
18680: LD_ADDR_EXP 57
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// sBomb := false ;
18688: LD_ADDR_EXP 58
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// sWound := false ;
18696: LD_ADDR_EXP 66
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// sBetray := false ;
18704: LD_ADDR_EXP 70
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// sContamin := false ;
18712: LD_ADDR_EXP 71
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// sOil := false ;
18720: LD_ADDR_EXP 73
18724: PUSH
18725: LD_INT 0
18727: ST_TO_ADDR
// sStu := false ;
18728: LD_ADDR_EXP 77
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// sBazooka := false ;
18736: LD_ADDR_EXP 80
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// sMortar := false ;
18744: LD_ADDR_EXP 81
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// sRanger := false ;
18752: LD_ADDR_EXP 91
18756: PUSH
18757: LD_INT 0
18759: ST_TO_ADDR
// sComputer := false ;
18760: LD_ADDR_EXP 92
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// s30 := false ;
18768: LD_ADDR_EXP 93
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// s60 := false ;
18776: LD_ADDR_EXP 94
18780: PUSH
18781: LD_INT 0
18783: ST_TO_ADDR
// end ;
18784: LD_VAR 0 1
18788: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18789: LD_INT 0
18791: PPUSH
18792: PPUSH
18793: PPUSH
18794: PPUSH
18795: PPUSH
18796: PPUSH
18797: PPUSH
// result := [ ] ;
18798: LD_ADDR_VAR 0 2
18802: PUSH
18803: EMPTY
18804: ST_TO_ADDR
// if campaign_id = 1 then
18805: LD_OWVAR 69
18809: PUSH
18810: LD_INT 1
18812: EQUAL
18813: IFFALSE 21979
// begin case mission_number of 1 :
18815: LD_OWVAR 70
18819: PUSH
18820: LD_INT 1
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18904
18828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: LD_INT 11
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 15
18848: PUSH
18849: LD_INT 16
18851: PUSH
18852: LD_INT 22
18854: PUSH
18855: LD_INT 23
18857: PUSH
18858: LD_INT 26
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 101
18874: PUSH
18875: LD_INT 102
18877: PUSH
18878: LD_INT 106
18880: PUSH
18881: LD_INT 116
18883: PUSH
18884: LD_INT 117
18886: PUSH
18887: LD_INT 118
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: ST_TO_ADDR
18902: GO 21977
18904: LD_INT 2
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18996
18912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18913: LD_ADDR_VAR 0 2
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 4
18923: PUSH
18924: LD_INT 11
18926: PUSH
18927: LD_INT 12
18929: PUSH
18930: LD_INT 15
18932: PUSH
18933: LD_INT 16
18935: PUSH
18936: LD_INT 22
18938: PUSH
18939: LD_INT 23
18941: PUSH
18942: LD_INT 26
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 101
18958: PUSH
18959: LD_INT 102
18961: PUSH
18962: LD_INT 105
18964: PUSH
18965: LD_INT 106
18967: PUSH
18968: LD_INT 108
18970: PUSH
18971: LD_INT 116
18973: PUSH
18974: LD_INT 117
18976: PUSH
18977: LD_INT 118
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 21977
18996: LD_INT 3
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19092
19004: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 11
19021: PUSH
19022: LD_INT 12
19024: PUSH
19025: LD_INT 15
19027: PUSH
19028: LD_INT 16
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_INT 26
19036: PUSH
19037: LD_INT 36
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 101
19054: PUSH
19055: LD_INT 102
19057: PUSH
19058: LD_INT 105
19060: PUSH
19061: LD_INT 106
19063: PUSH
19064: LD_INT 108
19066: PUSH
19067: LD_INT 116
19069: PUSH
19070: LD_INT 117
19072: PUSH
19073: LD_INT 118
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 21977
19092: LD_INT 4
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19196
19100: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19101: LD_ADDR_VAR 0 2
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: LD_INT 8
19117: PUSH
19118: LD_INT 11
19120: PUSH
19121: LD_INT 12
19123: PUSH
19124: LD_INT 15
19126: PUSH
19127: LD_INT 16
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_INT 23
19135: PUSH
19136: LD_INT 26
19138: PUSH
19139: LD_INT 36
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 101
19158: PUSH
19159: LD_INT 102
19161: PUSH
19162: LD_INT 105
19164: PUSH
19165: LD_INT 106
19167: PUSH
19168: LD_INT 108
19170: PUSH
19171: LD_INT 116
19173: PUSH
19174: LD_INT 117
19176: PUSH
19177: LD_INT 118
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: ST_TO_ADDR
19194: GO 21977
19196: LD_INT 5
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19316
19204: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 5
19218: PUSH
19219: LD_INT 6
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: LD_INT 11
19227: PUSH
19228: LD_INT 12
19230: PUSH
19231: LD_INT 15
19233: PUSH
19234: LD_INT 16
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_INT 23
19242: PUSH
19243: LD_INT 25
19245: PUSH
19246: LD_INT 26
19248: PUSH
19249: LD_INT 36
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 101
19270: PUSH
19271: LD_INT 102
19273: PUSH
19274: LD_INT 105
19276: PUSH
19277: LD_INT 106
19279: PUSH
19280: LD_INT 108
19282: PUSH
19283: LD_INT 109
19285: PUSH
19286: LD_INT 112
19288: PUSH
19289: LD_INT 116
19291: PUSH
19292: LD_INT 117
19294: PUSH
19295: LD_INT 118
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 21977
19316: LD_INT 6
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19456
19324: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 4
19335: PUSH
19336: LD_INT 5
19338: PUSH
19339: LD_INT 6
19341: PUSH
19342: LD_INT 8
19344: PUSH
19345: LD_INT 11
19347: PUSH
19348: LD_INT 12
19350: PUSH
19351: LD_INT 15
19353: PUSH
19354: LD_INT 16
19356: PUSH
19357: LD_INT 20
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 22
19365: PUSH
19366: LD_INT 23
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 26
19374: PUSH
19375: LD_INT 30
19377: PUSH
19378: LD_INT 31
19380: PUSH
19381: LD_INT 32
19383: PUSH
19384: LD_INT 36
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 101
19410: PUSH
19411: LD_INT 102
19413: PUSH
19414: LD_INT 105
19416: PUSH
19417: LD_INT 106
19419: PUSH
19420: LD_INT 108
19422: PUSH
19423: LD_INT 109
19425: PUSH
19426: LD_INT 112
19428: PUSH
19429: LD_INT 116
19431: PUSH
19432: LD_INT 117
19434: PUSH
19435: LD_INT 118
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21977
19456: LD_INT 7
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19576
19464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 7
19481: PUSH
19482: LD_INT 11
19484: PUSH
19485: LD_INT 12
19487: PUSH
19488: LD_INT 15
19490: PUSH
19491: LD_INT 16
19493: PUSH
19494: LD_INT 20
19496: PUSH
19497: LD_INT 21
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_INT 23
19505: PUSH
19506: LD_INT 25
19508: PUSH
19509: LD_INT 26
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 101
19530: PUSH
19531: LD_INT 102
19533: PUSH
19534: LD_INT 103
19536: PUSH
19537: LD_INT 105
19539: PUSH
19540: LD_INT 106
19542: PUSH
19543: LD_INT 108
19545: PUSH
19546: LD_INT 112
19548: PUSH
19549: LD_INT 116
19551: PUSH
19552: LD_INT 117
19554: PUSH
19555: LD_INT 118
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 21977
19576: LD_INT 8
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19724
19584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: LD_INT 7
19604: PUSH
19605: LD_INT 8
19607: PUSH
19608: LD_INT 11
19610: PUSH
19611: LD_INT 12
19613: PUSH
19614: LD_INT 15
19616: PUSH
19617: LD_INT 16
19619: PUSH
19620: LD_INT 20
19622: PUSH
19623: LD_INT 21
19625: PUSH
19626: LD_INT 22
19628: PUSH
19629: LD_INT 23
19631: PUSH
19632: LD_INT 25
19634: PUSH
19635: LD_INT 26
19637: PUSH
19638: LD_INT 30
19640: PUSH
19641: LD_INT 31
19643: PUSH
19644: LD_INT 32
19646: PUSH
19647: LD_INT 36
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 101
19674: PUSH
19675: LD_INT 102
19677: PUSH
19678: LD_INT 103
19680: PUSH
19681: LD_INT 105
19683: PUSH
19684: LD_INT 106
19686: PUSH
19687: LD_INT 108
19689: PUSH
19690: LD_INT 109
19692: PUSH
19693: LD_INT 112
19695: PUSH
19696: LD_INT 116
19698: PUSH
19699: LD_INT 117
19701: PUSH
19702: LD_INT 118
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
19722: GO 21977
19724: LD_INT 9
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19880
19732: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 6
19749: PUSH
19750: LD_INT 7
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 11
19758: PUSH
19759: LD_INT 12
19761: PUSH
19762: LD_INT 15
19764: PUSH
19765: LD_INT 16
19767: PUSH
19768: LD_INT 20
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: LD_INT 23
19779: PUSH
19780: LD_INT 25
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: LD_INT 28
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 31
19794: PUSH
19795: LD_INT 32
19797: PUSH
19798: LD_INT 36
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 101
19826: PUSH
19827: LD_INT 102
19829: PUSH
19830: LD_INT 103
19832: PUSH
19833: LD_INT 105
19835: PUSH
19836: LD_INT 106
19838: PUSH
19839: LD_INT 108
19841: PUSH
19842: LD_INT 109
19844: PUSH
19845: LD_INT 112
19847: PUSH
19848: LD_INT 114
19850: PUSH
19851: LD_INT 116
19853: PUSH
19854: LD_INT 117
19856: PUSH
19857: LD_INT 118
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: ST_TO_ADDR
19878: GO 21977
19880: LD_INT 10
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 20084
19888: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 5
19902: PUSH
19903: LD_INT 6
19905: PUSH
19906: LD_INT 7
19908: PUSH
19909: LD_INT 8
19911: PUSH
19912: LD_INT 9
19914: PUSH
19915: LD_INT 10
19917: PUSH
19918: LD_INT 11
19920: PUSH
19921: LD_INT 12
19923: PUSH
19924: LD_INT 13
19926: PUSH
19927: LD_INT 14
19929: PUSH
19930: LD_INT 15
19932: PUSH
19933: LD_INT 16
19935: PUSH
19936: LD_INT 17
19938: PUSH
19939: LD_INT 18
19941: PUSH
19942: LD_INT 19
19944: PUSH
19945: LD_INT 20
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_INT 23
19956: PUSH
19957: LD_INT 24
19959: PUSH
19960: LD_INT 25
19962: PUSH
19963: LD_INT 26
19965: PUSH
19966: LD_INT 28
19968: PUSH
19969: LD_INT 30
19971: PUSH
19972: LD_INT 31
19974: PUSH
19975: LD_INT 32
19977: PUSH
19978: LD_INT 36
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 101
20014: PUSH
20015: LD_INT 102
20017: PUSH
20018: LD_INT 103
20020: PUSH
20021: LD_INT 104
20023: PUSH
20024: LD_INT 105
20026: PUSH
20027: LD_INT 106
20029: PUSH
20030: LD_INT 107
20032: PUSH
20033: LD_INT 108
20035: PUSH
20036: LD_INT 109
20038: PUSH
20039: LD_INT 110
20041: PUSH
20042: LD_INT 111
20044: PUSH
20045: LD_INT 112
20047: PUSH
20048: LD_INT 114
20050: PUSH
20051: LD_INT 116
20053: PUSH
20054: LD_INT 117
20056: PUSH
20057: LD_INT 118
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: ST_TO_ADDR
20082: GO 21977
20084: LD_INT 11
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20296
20092: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20093: LD_ADDR_VAR 0 2
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 3
20103: PUSH
20104: LD_INT 4
20106: PUSH
20107: LD_INT 5
20109: PUSH
20110: LD_INT 6
20112: PUSH
20113: LD_INT 7
20115: PUSH
20116: LD_INT 8
20118: PUSH
20119: LD_INT 9
20121: PUSH
20122: LD_INT 10
20124: PUSH
20125: LD_INT 11
20127: PUSH
20128: LD_INT 12
20130: PUSH
20131: LD_INT 13
20133: PUSH
20134: LD_INT 14
20136: PUSH
20137: LD_INT 15
20139: PUSH
20140: LD_INT 16
20142: PUSH
20143: LD_INT 17
20145: PUSH
20146: LD_INT 18
20148: PUSH
20149: LD_INT 19
20151: PUSH
20152: LD_INT 20
20154: PUSH
20155: LD_INT 21
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_INT 23
20163: PUSH
20164: LD_INT 24
20166: PUSH
20167: LD_INT 25
20169: PUSH
20170: LD_INT 26
20172: PUSH
20173: LD_INT 28
20175: PUSH
20176: LD_INT 30
20178: PUSH
20179: LD_INT 31
20181: PUSH
20182: LD_INT 32
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_INT 36
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 101
20226: PUSH
20227: LD_INT 102
20229: PUSH
20230: LD_INT 103
20232: PUSH
20233: LD_INT 104
20235: PUSH
20236: LD_INT 105
20238: PUSH
20239: LD_INT 106
20241: PUSH
20242: LD_INT 107
20244: PUSH
20245: LD_INT 108
20247: PUSH
20248: LD_INT 109
20250: PUSH
20251: LD_INT 110
20253: PUSH
20254: LD_INT 111
20256: PUSH
20257: LD_INT 112
20259: PUSH
20260: LD_INT 114
20262: PUSH
20263: LD_INT 116
20265: PUSH
20266: LD_INT 117
20268: PUSH
20269: LD_INT 118
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: ST_TO_ADDR
20294: GO 21977
20296: LD_INT 12
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20524
20304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20305: LD_ADDR_VAR 0 2
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: LD_INT 4
20321: PUSH
20322: LD_INT 5
20324: PUSH
20325: LD_INT 6
20327: PUSH
20328: LD_INT 7
20330: PUSH
20331: LD_INT 8
20333: PUSH
20334: LD_INT 9
20336: PUSH
20337: LD_INT 10
20339: PUSH
20340: LD_INT 11
20342: PUSH
20343: LD_INT 12
20345: PUSH
20346: LD_INT 13
20348: PUSH
20349: LD_INT 14
20351: PUSH
20352: LD_INT 15
20354: PUSH
20355: LD_INT 16
20357: PUSH
20358: LD_INT 17
20360: PUSH
20361: LD_INT 18
20363: PUSH
20364: LD_INT 19
20366: PUSH
20367: LD_INT 20
20369: PUSH
20370: LD_INT 21
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_INT 23
20378: PUSH
20379: LD_INT 24
20381: PUSH
20382: LD_INT 25
20384: PUSH
20385: LD_INT 26
20387: PUSH
20388: LD_INT 27
20390: PUSH
20391: LD_INT 28
20393: PUSH
20394: LD_INT 30
20396: PUSH
20397: LD_INT 31
20399: PUSH
20400: LD_INT 32
20402: PUSH
20403: LD_INT 33
20405: PUSH
20406: LD_INT 34
20408: PUSH
20409: LD_INT 36
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 101
20450: PUSH
20451: LD_INT 102
20453: PUSH
20454: LD_INT 103
20456: PUSH
20457: LD_INT 104
20459: PUSH
20460: LD_INT 105
20462: PUSH
20463: LD_INT 106
20465: PUSH
20466: LD_INT 107
20468: PUSH
20469: LD_INT 108
20471: PUSH
20472: LD_INT 109
20474: PUSH
20475: LD_INT 110
20477: PUSH
20478: LD_INT 111
20480: PUSH
20481: LD_INT 112
20483: PUSH
20484: LD_INT 113
20486: PUSH
20487: LD_INT 114
20489: PUSH
20490: LD_INT 116
20492: PUSH
20493: LD_INT 117
20495: PUSH
20496: LD_INT 118
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: ST_TO_ADDR
20522: GO 21977
20524: LD_INT 13
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20740
20532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20533: LD_ADDR_VAR 0 2
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: LD_INT 4
20549: PUSH
20550: LD_INT 5
20552: PUSH
20553: LD_INT 8
20555: PUSH
20556: LD_INT 9
20558: PUSH
20559: LD_INT 10
20561: PUSH
20562: LD_INT 11
20564: PUSH
20565: LD_INT 12
20567: PUSH
20568: LD_INT 14
20570: PUSH
20571: LD_INT 15
20573: PUSH
20574: LD_INT 16
20576: PUSH
20577: LD_INT 17
20579: PUSH
20580: LD_INT 18
20582: PUSH
20583: LD_INT 19
20585: PUSH
20586: LD_INT 20
20588: PUSH
20589: LD_INT 21
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_INT 23
20597: PUSH
20598: LD_INT 24
20600: PUSH
20601: LD_INT 25
20603: PUSH
20604: LD_INT 26
20606: PUSH
20607: LD_INT 27
20609: PUSH
20610: LD_INT 28
20612: PUSH
20613: LD_INT 30
20615: PUSH
20616: LD_INT 31
20618: PUSH
20619: LD_INT 32
20621: PUSH
20622: LD_INT 33
20624: PUSH
20625: LD_INT 34
20627: PUSH
20628: LD_INT 36
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 102
20669: PUSH
20670: LD_INT 103
20672: PUSH
20673: LD_INT 104
20675: PUSH
20676: LD_INT 105
20678: PUSH
20679: LD_INT 106
20681: PUSH
20682: LD_INT 107
20684: PUSH
20685: LD_INT 108
20687: PUSH
20688: LD_INT 109
20690: PUSH
20691: LD_INT 110
20693: PUSH
20694: LD_INT 111
20696: PUSH
20697: LD_INT 112
20699: PUSH
20700: LD_INT 113
20702: PUSH
20703: LD_INT 114
20705: PUSH
20706: LD_INT 116
20708: PUSH
20709: LD_INT 117
20711: PUSH
20712: LD_INT 118
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 21977
20740: LD_INT 14
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20972
20748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20749: LD_ADDR_VAR 0 2
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 3
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: LD_INT 6
20771: PUSH
20772: LD_INT 7
20774: PUSH
20775: LD_INT 8
20777: PUSH
20778: LD_INT 9
20780: PUSH
20781: LD_INT 10
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: LD_INT 15
20798: PUSH
20799: LD_INT 16
20801: PUSH
20802: LD_INT 17
20804: PUSH
20805: LD_INT 18
20807: PUSH
20808: LD_INT 19
20810: PUSH
20811: LD_INT 20
20813: PUSH
20814: LD_INT 21
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_INT 23
20822: PUSH
20823: LD_INT 24
20825: PUSH
20826: LD_INT 25
20828: PUSH
20829: LD_INT 26
20831: PUSH
20832: LD_INT 27
20834: PUSH
20835: LD_INT 28
20837: PUSH
20838: LD_INT 29
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 31
20846: PUSH
20847: LD_INT 32
20849: PUSH
20850: LD_INT 33
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 36
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 101
20898: PUSH
20899: LD_INT 102
20901: PUSH
20902: LD_INT 103
20904: PUSH
20905: LD_INT 104
20907: PUSH
20908: LD_INT 105
20910: PUSH
20911: LD_INT 106
20913: PUSH
20914: LD_INT 107
20916: PUSH
20917: LD_INT 108
20919: PUSH
20920: LD_INT 109
20922: PUSH
20923: LD_INT 110
20925: PUSH
20926: LD_INT 111
20928: PUSH
20929: LD_INT 112
20931: PUSH
20932: LD_INT 113
20934: PUSH
20935: LD_INT 114
20937: PUSH
20938: LD_INT 116
20940: PUSH
20941: LD_INT 117
20943: PUSH
20944: LD_INT 118
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: ST_TO_ADDR
20970: GO 21977
20972: LD_INT 15
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 21204
20980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20981: LD_ADDR_VAR 0 2
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 3
20994: PUSH
20995: LD_INT 4
20997: PUSH
20998: LD_INT 5
21000: PUSH
21001: LD_INT 6
21003: PUSH
21004: LD_INT 7
21006: PUSH
21007: LD_INT 8
21009: PUSH
21010: LD_INT 9
21012: PUSH
21013: LD_INT 10
21015: PUSH
21016: LD_INT 11
21018: PUSH
21019: LD_INT 12
21021: PUSH
21022: LD_INT 13
21024: PUSH
21025: LD_INT 14
21027: PUSH
21028: LD_INT 15
21030: PUSH
21031: LD_INT 16
21033: PUSH
21034: LD_INT 17
21036: PUSH
21037: LD_INT 18
21039: PUSH
21040: LD_INT 19
21042: PUSH
21043: LD_INT 20
21045: PUSH
21046: LD_INT 21
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 24
21057: PUSH
21058: LD_INT 25
21060: PUSH
21061: LD_INT 26
21063: PUSH
21064: LD_INT 27
21066: PUSH
21067: LD_INT 28
21069: PUSH
21070: LD_INT 29
21072: PUSH
21073: LD_INT 30
21075: PUSH
21076: LD_INT 31
21078: PUSH
21079: LD_INT 32
21081: PUSH
21082: LD_INT 33
21084: PUSH
21085: LD_INT 34
21087: PUSH
21088: LD_INT 36
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 103
21136: PUSH
21137: LD_INT 104
21139: PUSH
21140: LD_INT 105
21142: PUSH
21143: LD_INT 106
21145: PUSH
21146: LD_INT 107
21148: PUSH
21149: LD_INT 108
21151: PUSH
21152: LD_INT 109
21154: PUSH
21155: LD_INT 110
21157: PUSH
21158: LD_INT 111
21160: PUSH
21161: LD_INT 112
21163: PUSH
21164: LD_INT 113
21166: PUSH
21167: LD_INT 114
21169: PUSH
21170: LD_INT 116
21172: PUSH
21173: LD_INT 117
21175: PUSH
21176: LD_INT 118
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: ST_TO_ADDR
21202: GO 21977
21204: LD_INT 16
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21348
21212: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 4
21223: PUSH
21224: LD_INT 5
21226: PUSH
21227: LD_INT 7
21229: PUSH
21230: LD_INT 11
21232: PUSH
21233: LD_INT 12
21235: PUSH
21236: LD_INT 15
21238: PUSH
21239: LD_INT 16
21241: PUSH
21242: LD_INT 20
21244: PUSH
21245: LD_INT 21
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 25
21256: PUSH
21257: LD_INT 26
21259: PUSH
21260: LD_INT 30
21262: PUSH
21263: LD_INT 31
21265: PUSH
21266: LD_INT 32
21268: PUSH
21269: LD_INT 33
21271: PUSH
21272: LD_INT 34
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 101
21298: PUSH
21299: LD_INT 102
21301: PUSH
21302: LD_INT 103
21304: PUSH
21305: LD_INT 106
21307: PUSH
21308: LD_INT 108
21310: PUSH
21311: LD_INT 112
21313: PUSH
21314: LD_INT 113
21316: PUSH
21317: LD_INT 114
21319: PUSH
21320: LD_INT 116
21322: PUSH
21323: LD_INT 117
21325: PUSH
21326: LD_INT 118
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: ST_TO_ADDR
21346: GO 21977
21348: LD_INT 17
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21580
21356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 4
21373: PUSH
21374: LD_INT 5
21376: PUSH
21377: LD_INT 6
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: LD_INT 8
21385: PUSH
21386: LD_INT 9
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 11
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 14
21403: PUSH
21404: LD_INT 15
21406: PUSH
21407: LD_INT 16
21409: PUSH
21410: LD_INT 17
21412: PUSH
21413: LD_INT 18
21415: PUSH
21416: LD_INT 19
21418: PUSH
21419: LD_INT 20
21421: PUSH
21422: LD_INT 21
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_INT 23
21430: PUSH
21431: LD_INT 24
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 27
21442: PUSH
21443: LD_INT 28
21445: PUSH
21446: LD_INT 29
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 31
21454: PUSH
21455: LD_INT 32
21457: PUSH
21458: LD_INT 33
21460: PUSH
21461: LD_INT 34
21463: PUSH
21464: LD_INT 36
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 101
21506: PUSH
21507: LD_INT 102
21509: PUSH
21510: LD_INT 103
21512: PUSH
21513: LD_INT 104
21515: PUSH
21516: LD_INT 105
21518: PUSH
21519: LD_INT 106
21521: PUSH
21522: LD_INT 107
21524: PUSH
21525: LD_INT 108
21527: PUSH
21528: LD_INT 109
21530: PUSH
21531: LD_INT 110
21533: PUSH
21534: LD_INT 111
21536: PUSH
21537: LD_INT 112
21539: PUSH
21540: LD_INT 113
21542: PUSH
21543: LD_INT 114
21545: PUSH
21546: LD_INT 116
21548: PUSH
21549: LD_INT 117
21551: PUSH
21552: LD_INT 118
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: ST_TO_ADDR
21578: GO 21977
21580: LD_INT 18
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21736
21588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 5
21602: PUSH
21603: LD_INT 7
21605: PUSH
21606: LD_INT 11
21608: PUSH
21609: LD_INT 12
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 16
21617: PUSH
21618: LD_INT 20
21620: PUSH
21621: LD_INT 21
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_INT 23
21629: PUSH
21630: LD_INT 25
21632: PUSH
21633: LD_INT 26
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: LD_INT 31
21641: PUSH
21642: LD_INT 32
21644: PUSH
21645: LD_INT 33
21647: PUSH
21648: LD_INT 34
21650: PUSH
21651: LD_INT 35
21653: PUSH
21654: LD_INT 36
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 101
21682: PUSH
21683: LD_INT 102
21685: PUSH
21686: LD_INT 103
21688: PUSH
21689: LD_INT 106
21691: PUSH
21692: LD_INT 108
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: LD_INT 115
21706: PUSH
21707: LD_INT 116
21709: PUSH
21710: LD_INT 117
21712: PUSH
21713: LD_INT 118
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
21734: GO 21977
21736: LD_INT 19
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21976
21744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 9
21776: PUSH
21777: LD_INT 10
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 13
21788: PUSH
21789: LD_INT 14
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 18
21803: PUSH
21804: LD_INT 19
21806: PUSH
21807: LD_INT 20
21809: PUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 23
21818: PUSH
21819: LD_INT 24
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 26
21827: PUSH
21828: LD_INT 27
21830: PUSH
21831: LD_INT 28
21833: PUSH
21834: LD_INT 29
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 31
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: LD_INT 34
21851: PUSH
21852: LD_INT 35
21854: PUSH
21855: LD_INT 36
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 101
21898: PUSH
21899: LD_INT 102
21901: PUSH
21902: LD_INT 103
21904: PUSH
21905: LD_INT 104
21907: PUSH
21908: LD_INT 105
21910: PUSH
21911: LD_INT 106
21913: PUSH
21914: LD_INT 107
21916: PUSH
21917: LD_INT 108
21919: PUSH
21920: LD_INT 109
21922: PUSH
21923: LD_INT 110
21925: PUSH
21926: LD_INT 111
21928: PUSH
21929: LD_INT 112
21931: PUSH
21932: LD_INT 113
21934: PUSH
21935: LD_INT 114
21937: PUSH
21938: LD_INT 115
21940: PUSH
21941: LD_INT 116
21943: PUSH
21944: LD_INT 117
21946: PUSH
21947: LD_INT 118
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: ST_TO_ADDR
21974: GO 21977
21976: POP
// end else
21977: GO 22208
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21979: LD_ADDR_VAR 0 2
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: LD_INT 4
21995: PUSH
21996: LD_INT 5
21998: PUSH
21999: LD_INT 6
22001: PUSH
22002: LD_INT 7
22004: PUSH
22005: LD_INT 8
22007: PUSH
22008: LD_INT 9
22010: PUSH
22011: LD_INT 10
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 13
22022: PUSH
22023: LD_INT 14
22025: PUSH
22026: LD_INT 15
22028: PUSH
22029: LD_INT 16
22031: PUSH
22032: LD_INT 17
22034: PUSH
22035: LD_INT 18
22037: PUSH
22038: LD_INT 19
22040: PUSH
22041: LD_INT 20
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_INT 23
22052: PUSH
22053: LD_INT 24
22055: PUSH
22056: LD_INT 25
22058: PUSH
22059: LD_INT 26
22061: PUSH
22062: LD_INT 27
22064: PUSH
22065: LD_INT 28
22067: PUSH
22068: LD_INT 29
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 31
22076: PUSH
22077: LD_INT 32
22079: PUSH
22080: LD_INT 33
22082: PUSH
22083: LD_INT 34
22085: PUSH
22086: LD_INT 35
22088: PUSH
22089: LD_INT 36
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 101
22132: PUSH
22133: LD_INT 102
22135: PUSH
22136: LD_INT 103
22138: PUSH
22139: LD_INT 104
22141: PUSH
22142: LD_INT 105
22144: PUSH
22145: LD_INT 106
22147: PUSH
22148: LD_INT 107
22150: PUSH
22151: LD_INT 108
22153: PUSH
22154: LD_INT 109
22156: PUSH
22157: LD_INT 110
22159: PUSH
22160: LD_INT 111
22162: PUSH
22163: LD_INT 112
22165: PUSH
22166: LD_INT 113
22168: PUSH
22169: LD_INT 114
22171: PUSH
22172: LD_INT 115
22174: PUSH
22175: LD_INT 116
22177: PUSH
22178: LD_INT 117
22180: PUSH
22181: LD_INT 118
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: ST_TO_ADDR
// if result then
22208: LD_VAR 0 2
22212: IFFALSE 22998
// begin normal :=  ;
22214: LD_ADDR_VAR 0 5
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hardcore :=  ;
22222: LD_ADDR_VAR 0 6
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// active :=  ;
22230: LD_ADDR_VAR 0 7
22234: PUSH
22235: LD_STRING 
22237: ST_TO_ADDR
// for i = 1 to normalCounter do
22238: LD_ADDR_VAR 0 8
22242: PUSH
22243: DOUBLE
22244: LD_INT 1
22246: DEC
22247: ST_TO_ADDR
22248: LD_EXP 39
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22355
// begin tmp := 0 ;
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: LD_STRING 0
22263: ST_TO_ADDR
// if result [ 1 ] then
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: IFFALSE 22337
// if result [ 1 ] [ 1 ] = i then
22274: LD_VAR 0 2
22278: PUSH
22279: LD_INT 1
22281: ARRAY
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 8
22291: EQUAL
22292: IFFALSE 22337
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22294: LD_ADDR_VAR 0 2
22298: PUSH
22299: LD_VAR 0 2
22303: PPUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: LD_INT 1
22318: PPUSH
22319: CALL_OW 3
22323: PPUSH
22324: CALL_OW 1
22328: ST_TO_ADDR
// tmp := 1 ;
22329: LD_ADDR_VAR 0 3
22333: PUSH
22334: LD_STRING 1
22336: ST_TO_ADDR
// end ; normal := normal & tmp ;
22337: LD_ADDR_VAR 0 5
22341: PUSH
22342: LD_VAR 0 5
22346: PUSH
22347: LD_VAR 0 3
22351: STR
22352: ST_TO_ADDR
// end ;
22353: GO 22253
22355: POP
22356: POP
// for i = 1 to hardcoreCounter do
22357: LD_ADDR_VAR 0 8
22361: PUSH
22362: DOUBLE
22363: LD_INT 1
22365: DEC
22366: ST_TO_ADDR
22367: LD_EXP 40
22371: PUSH
22372: FOR_TO
22373: IFFALSE 22478
// begin tmp := 0 ;
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_STRING 0
22382: ST_TO_ADDR
// if result [ 2 ] then
22383: LD_VAR 0 2
22387: PUSH
22388: LD_INT 2
22390: ARRAY
22391: IFFALSE 22460
// if result [ 2 ] [ 1 ] = 100 + i then
22393: LD_VAR 0 2
22397: PUSH
22398: LD_INT 2
22400: ARRAY
22401: PUSH
22402: LD_INT 1
22404: ARRAY
22405: PUSH
22406: LD_INT 100
22408: PUSH
22409: LD_VAR 0 8
22413: PLUS
22414: EQUAL
22415: IFFALSE 22460
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22417: LD_ADDR_VAR 0 2
22421: PUSH
22422: LD_VAR 0 2
22426: PPUSH
22427: LD_INT 2
22429: PPUSH
22430: LD_VAR 0 2
22434: PUSH
22435: LD_INT 2
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 3
22446: PPUSH
22447: CALL_OW 1
22451: ST_TO_ADDR
// tmp := 1 ;
22452: LD_ADDR_VAR 0 3
22456: PUSH
22457: LD_STRING 1
22459: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22460: LD_ADDR_VAR 0 6
22464: PUSH
22465: LD_VAR 0 6
22469: PUSH
22470: LD_VAR 0 3
22474: STR
22475: ST_TO_ADDR
// end ;
22476: GO 22372
22478: POP
22479: POP
// if isGameLoad then
22480: LD_VAR 0 1
22484: IFFALSE 22959
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22486: LD_ADDR_VAR 0 4
22490: PUSH
22491: LD_EXP 43
22495: PUSH
22496: LD_EXP 42
22500: PUSH
22501: LD_EXP 44
22505: PUSH
22506: LD_EXP 41
22510: PUSH
22511: LD_EXP 45
22515: PUSH
22516: LD_EXP 46
22520: PUSH
22521: LD_EXP 47
22525: PUSH
22526: LD_EXP 48
22530: PUSH
22531: LD_EXP 49
22535: PUSH
22536: LD_EXP 50
22540: PUSH
22541: LD_EXP 51
22545: PUSH
22546: LD_EXP 52
22550: PUSH
22551: LD_EXP 53
22555: PUSH
22556: LD_EXP 54
22560: PUSH
22561: LD_EXP 62
22565: PUSH
22566: LD_EXP 63
22570: PUSH
22571: LD_EXP 64
22575: PUSH
22576: LD_EXP 65
22580: PUSH
22581: LD_EXP 67
22585: PUSH
22586: LD_EXP 68
22590: PUSH
22591: LD_EXP 69
22595: PUSH
22596: LD_EXP 72
22600: PUSH
22601: LD_EXP 74
22605: PUSH
22606: LD_EXP 75
22610: PUSH
22611: LD_EXP 76
22615: PUSH
22616: LD_EXP 78
22620: PUSH
22621: LD_EXP 79
22625: PUSH
22626: LD_EXP 82
22630: PUSH
22631: LD_EXP 83
22635: PUSH
22636: LD_EXP 84
22640: PUSH
22641: LD_EXP 85
22645: PUSH
22646: LD_EXP 86
22650: PUSH
22651: LD_EXP 87
22655: PUSH
22656: LD_EXP 88
22660: PUSH
22661: LD_EXP 89
22665: PUSH
22666: LD_EXP 90
22670: PUSH
22671: LD_EXP 55
22675: PUSH
22676: LD_EXP 56
22680: PUSH
22681: LD_EXP 59
22685: PUSH
22686: LD_EXP 60
22690: PUSH
22691: LD_EXP 61
22695: PUSH
22696: LD_EXP 57
22700: PUSH
22701: LD_EXP 58
22705: PUSH
22706: LD_EXP 66
22710: PUSH
22711: LD_EXP 70
22715: PUSH
22716: LD_EXP 71
22720: PUSH
22721: LD_EXP 73
22725: PUSH
22726: LD_EXP 77
22730: PUSH
22731: LD_EXP 80
22735: PUSH
22736: LD_EXP 81
22740: PUSH
22741: LD_EXP 91
22745: PUSH
22746: LD_EXP 92
22750: PUSH
22751: LD_EXP 93
22755: PUSH
22756: LD_EXP 94
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// tmp :=  ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_STRING 
22824: ST_TO_ADDR
// for i = 1 to normalCounter do
22825: LD_ADDR_VAR 0 8
22829: PUSH
22830: DOUBLE
22831: LD_INT 1
22833: DEC
22834: ST_TO_ADDR
22835: LD_EXP 39
22839: PUSH
22840: FOR_TO
22841: IFFALSE 22877
// begin if flags [ i ] then
22843: LD_VAR 0 4
22847: PUSH
22848: LD_VAR 0 8
22852: ARRAY
22853: IFFALSE 22875
// tmp := tmp & i & ; ;
22855: LD_ADDR_VAR 0 3
22859: PUSH
22860: LD_VAR 0 3
22864: PUSH
22865: LD_VAR 0 8
22869: STR
22870: PUSH
22871: LD_STRING ;
22873: STR
22874: ST_TO_ADDR
// end ;
22875: GO 22840
22877: POP
22878: POP
// for i = 1 to hardcoreCounter do
22879: LD_ADDR_VAR 0 8
22883: PUSH
22884: DOUBLE
22885: LD_INT 1
22887: DEC
22888: ST_TO_ADDR
22889: LD_EXP 40
22893: PUSH
22894: FOR_TO
22895: IFFALSE 22941
// begin if flags [ normalCounter + i ] then
22897: LD_VAR 0 4
22901: PUSH
22902: LD_EXP 39
22906: PUSH
22907: LD_VAR 0 8
22911: PLUS
22912: ARRAY
22913: IFFALSE 22939
// tmp := tmp & ( 100 + i ) & ; ;
22915: LD_ADDR_VAR 0 3
22919: PUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 100
22927: PUSH
22928: LD_VAR 0 8
22932: PLUS
22933: STR
22934: PUSH
22935: LD_STRING ;
22937: STR
22938: ST_TO_ADDR
// end ;
22939: GO 22894
22941: POP
22942: POP
// if tmp then
22943: LD_VAR 0 3
22947: IFFALSE 22959
// active := tmp ;
22949: LD_ADDR_VAR 0 7
22953: PUSH
22954: LD_VAR 0 3
22958: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22959: LD_STRING getStreamItemsFromMission("
22961: PUSH
22962: LD_VAR 0 5
22966: STR
22967: PUSH
22968: LD_STRING ","
22970: STR
22971: PUSH
22972: LD_VAR 0 6
22976: STR
22977: PUSH
22978: LD_STRING ","
22980: STR
22981: PUSH
22982: LD_VAR 0 7
22986: STR
22987: PUSH
22988: LD_STRING ")
22990: STR
22991: PPUSH
22992: CALL_OW 559
// end else
22996: GO 23005
// ToLua ( getStreamItemsFromMission("","","") ) ;
22998: LD_STRING getStreamItemsFromMission("","","")
23000: PPUSH
23001: CALL_OW 559
// end ;
23005: LD_VAR 0 2
23009: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23010: LD_EXP 38
23014: PUSH
23015: LD_EXP 43
23019: AND
23020: IFFALSE 23144
23022: GO 23024
23024: DISABLE
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
// begin enable ;
23029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 22
23037: PUSH
23038: LD_OWVAR 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 34
23052: PUSH
23053: LD_INT 7
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 45
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: LD_INT 28
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 47
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23144
// for i in tmp do
23115: LD_ADDR_VAR 0 1
23119: PUSH
23120: LD_VAR 0 2
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23142
// begin SetLives ( i , 0 ) ;
23128: LD_VAR 0 1
23132: PPUSH
23133: LD_INT 0
23135: PPUSH
23136: CALL_OW 234
// end ;
23140: GO 23125
23142: POP
23143: POP
// end ;
23144: PPOPN 2
23146: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23147: LD_EXP 38
23151: PUSH
23152: LD_EXP 44
23156: AND
23157: IFFALSE 23241
23159: GO 23161
23161: DISABLE
23162: LD_INT 0
23164: PPUSH
23165: PPUSH
// begin enable ;
23166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 32
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 2
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23241
// for i in tmp do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: LD_VAR 0 2
23221: PUSH
23222: FOR_IN
23223: IFFALSE 23239
// begin SetLives ( i , 0 ) ;
23225: LD_VAR 0 1
23229: PPUSH
23230: LD_INT 0
23232: PPUSH
23233: CALL_OW 234
// end ;
23237: GO 23222
23239: POP
23240: POP
// end ;
23241: PPOPN 2
23243: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23244: LD_EXP 38
23248: PUSH
23249: LD_EXP 41
23253: AND
23254: IFFALSE 23347
23256: GO 23258
23258: DISABLE
23259: LD_INT 0
23261: PPUSH
// begin enable ;
23262: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23263: LD_ADDR_VAR 0 1
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_OWVAR 2
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 25
23285: PUSH
23286: LD_INT 5
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 25
23295: PUSH
23296: LD_INT 9
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 25
23305: PUSH
23306: LD_INT 8
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: PUSH
23328: FOR_IN
23329: IFFALSE 23345
// begin SetClass ( i , 1 ) ;
23331: LD_VAR 0 1
23335: PPUSH
23336: LD_INT 1
23338: PPUSH
23339: CALL_OW 336
// end ;
23343: GO 23328
23345: POP
23346: POP
// end ;
23347: PPOPN 1
23349: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23350: LD_EXP 38
23354: PUSH
23355: LD_EXP 42
23359: AND
23360: PUSH
23361: LD_OWVAR 65
23365: PUSH
23366: LD_INT 7
23368: LESS
23369: AND
23370: IFFALSE 23384
23372: GO 23374
23374: DISABLE
// begin enable ;
23375: ENABLE
// game_speed := 7 ;
23376: LD_ADDR_OWVAR 65
23380: PUSH
23381: LD_INT 7
23383: ST_TO_ADDR
// end ;
23384: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23385: LD_EXP 38
23389: PUSH
23390: LD_EXP 45
23394: AND
23395: IFFALSE 23597
23397: GO 23399
23399: DISABLE
23400: LD_INT 0
23402: PPUSH
23403: PPUSH
23404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_INT 81
23412: PUSH
23413: LD_OWVAR 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 69
23440: ST_TO_ADDR
// if not tmp then
23441: LD_VAR 0 3
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23597
// if tmp > 5 then
23450: LD_VAR 0 3
23454: PUSH
23455: LD_INT 5
23457: GREATER
23458: IFFALSE 23470
// k := 5 else
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: LD_INT 5
23467: ST_TO_ADDR
23468: GO 23480
// k := tmp ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_VAR 0 3
23479: ST_TO_ADDR
// for i := 1 to k do
23480: LD_ADDR_VAR 0 1
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_VAR 0 2
23494: PUSH
23495: FOR_TO
23496: IFFALSE 23595
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23498: LD_VAR 0 3
23502: PUSH
23503: LD_VAR 0 1
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 1
23513: PUSH
23514: LD_INT 4
23516: MOD
23517: PUSH
23518: LD_INT 1
23520: PLUS
23521: PPUSH
23522: CALL_OW 259
23526: PUSH
23527: LD_INT 10
23529: LESS
23530: IFFALSE 23593
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 1
23541: ARRAY
23542: PPUSH
23543: LD_VAR 0 1
23547: PUSH
23548: LD_INT 4
23550: MOD
23551: PUSH
23552: LD_INT 1
23554: PLUS
23555: PPUSH
23556: LD_VAR 0 3
23560: PUSH
23561: LD_VAR 0 1
23565: ARRAY
23566: PPUSH
23567: LD_VAR 0 1
23571: PUSH
23572: LD_INT 4
23574: MOD
23575: PUSH
23576: LD_INT 1
23578: PLUS
23579: PPUSH
23580: CALL_OW 259
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: PPUSH
23589: CALL_OW 237
23593: GO 23495
23595: POP
23596: POP
// end ;
23597: PPOPN 3
23599: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23600: LD_EXP 38
23604: PUSH
23605: LD_EXP 46
23609: AND
23610: IFFALSE 23630
23612: GO 23614
23614: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23615: LD_INT 4
23617: PPUSH
23618: LD_OWVAR 2
23622: PPUSH
23623: LD_INT 0
23625: PPUSH
23626: CALL_OW 324
23630: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23631: LD_EXP 38
23635: PUSH
23636: LD_EXP 75
23640: AND
23641: IFFALSE 23661
23643: GO 23645
23645: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23646: LD_INT 19
23648: PPUSH
23649: LD_OWVAR 2
23653: PPUSH
23654: LD_INT 0
23656: PPUSH
23657: CALL_OW 324
23661: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23662: LD_EXP 38
23666: PUSH
23667: LD_EXP 47
23671: AND
23672: IFFALSE 23774
23674: GO 23676
23676: DISABLE
23677: LD_INT 0
23679: PPUSH
23680: PPUSH
// begin enable ;
23681: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23682: LD_ADDR_VAR 0 2
23686: PUSH
23687: LD_INT 22
23689: PUSH
23690: LD_OWVAR 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 34
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 34
23714: PUSH
23715: LD_INT 30
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PPUSH
23731: CALL_OW 69
23735: ST_TO_ADDR
// if not tmp then
23736: LD_VAR 0 2
23740: NOT
23741: IFFALSE 23745
// exit ;
23743: GO 23774
// for i in tmp do
23745: LD_ADDR_VAR 0 1
23749: PUSH
23750: LD_VAR 0 2
23754: PUSH
23755: FOR_IN
23756: IFFALSE 23772
// begin SetLives ( i , 0 ) ;
23758: LD_VAR 0 1
23762: PPUSH
23763: LD_INT 0
23765: PPUSH
23766: CALL_OW 234
// end ;
23770: GO 23755
23772: POP
23773: POP
// end ;
23774: PPOPN 2
23776: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23777: LD_EXP 38
23781: PUSH
23782: LD_EXP 48
23786: AND
23787: IFFALSE 23807
23789: GO 23791
23791: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23792: LD_INT 32
23794: PPUSH
23795: LD_OWVAR 2
23799: PPUSH
23800: LD_INT 0
23802: PPUSH
23803: CALL_OW 324
23807: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23808: LD_EXP 38
23812: PUSH
23813: LD_EXP 49
23817: AND
23818: IFFALSE 23999
23820: GO 23822
23822: DISABLE
23823: LD_INT 0
23825: PPUSH
23826: PPUSH
23827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23828: LD_ADDR_VAR 0 2
23832: PUSH
23833: LD_INT 22
23835: PUSH
23836: LD_OWVAR 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 33
23847: PUSH
23848: LD_INT 3
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 69
23863: ST_TO_ADDR
// if not tmp then
23864: LD_VAR 0 2
23868: NOT
23869: IFFALSE 23873
// exit ;
23871: GO 23999
// side := 0 ;
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 0
23880: ST_TO_ADDR
// for i := 1 to 8 do
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: DOUBLE
23887: LD_INT 1
23889: DEC
23890: ST_TO_ADDR
23891: LD_INT 8
23893: PUSH
23894: FOR_TO
23895: IFFALSE 23943
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23897: LD_OWVAR 2
23901: PUSH
23902: LD_VAR 0 1
23906: NONEQUAL
23907: PUSH
23908: LD_OWVAR 2
23912: PPUSH
23913: LD_VAR 0 1
23917: PPUSH
23918: CALL_OW 81
23922: PUSH
23923: LD_INT 2
23925: EQUAL
23926: AND
23927: IFFALSE 23941
// begin side := i ;
23929: LD_ADDR_VAR 0 3
23933: PUSH
23934: LD_VAR 0 1
23938: ST_TO_ADDR
// break ;
23939: GO 23943
// end ;
23941: GO 23894
23943: POP
23944: POP
// if not side then
23945: LD_VAR 0 3
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 23999
// for i := 1 to tmp do
23954: LD_ADDR_VAR 0 1
23958: PUSH
23959: DOUBLE
23960: LD_INT 1
23962: DEC
23963: ST_TO_ADDR
23964: LD_VAR 0 2
23968: PUSH
23969: FOR_TO
23970: IFFALSE 23997
// if Prob ( 60 ) then
23972: LD_INT 60
23974: PPUSH
23975: CALL_OW 13
23979: IFFALSE 23995
// SetSide ( i , side ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: LD_VAR 0 3
23990: PPUSH
23991: CALL_OW 235
23995: GO 23969
23997: POP
23998: POP
// end ;
23999: PPOPN 3
24001: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24002: LD_EXP 38
24006: PUSH
24007: LD_EXP 51
24011: AND
24012: IFFALSE 24131
24014: GO 24016
24016: DISABLE
24017: LD_INT 0
24019: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24020: LD_ADDR_VAR 0 1
24024: PUSH
24025: LD_INT 22
24027: PUSH
24028: LD_OWVAR 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 21
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 23
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 69
24073: PUSH
24074: FOR_IN
24075: IFFALSE 24129
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24077: LD_VAR 0 1
24081: PPUSH
24082: CALL_OW 257
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 4
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: IN
24105: IFFALSE 24127
// SetClass ( un , rand ( 1 , 4 ) ) ;
24107: LD_VAR 0 1
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: LD_INT 4
24117: PPUSH
24118: CALL_OW 12
24122: PPUSH
24123: CALL_OW 336
24127: GO 24074
24129: POP
24130: POP
// end ;
24131: PPOPN 1
24133: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24134: LD_EXP 38
24138: PUSH
24139: LD_EXP 50
24143: AND
24144: IFFALSE 24223
24146: GO 24148
24148: DISABLE
24149: LD_INT 0
24151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24152: LD_ADDR_VAR 0 1
24156: PUSH
24157: LD_INT 22
24159: PUSH
24160: LD_OWVAR 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 21
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 69
24187: ST_TO_ADDR
// if not tmp then
24188: LD_VAR 0 1
24192: NOT
24193: IFFALSE 24197
// exit ;
24195: GO 24223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24197: LD_VAR 0 1
24201: PUSH
24202: LD_INT 1
24204: PPUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 12
24214: ARRAY
24215: PPUSH
24216: LD_INT 100
24218: PPUSH
24219: CALL_OW 234
// end ;
24223: PPOPN 1
24225: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24226: LD_EXP 38
24230: PUSH
24231: LD_EXP 52
24235: AND
24236: IFFALSE 24334
24238: GO 24240
24240: DISABLE
24241: LD_INT 0
24243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_OWVAR 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 21
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 69
24279: ST_TO_ADDR
// if not tmp then
24280: LD_VAR 0 1
24284: NOT
24285: IFFALSE 24289
// exit ;
24287: GO 24334
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24289: LD_VAR 0 1
24293: PUSH
24294: LD_INT 1
24296: PPUSH
24297: LD_VAR 0 1
24301: PPUSH
24302: CALL_OW 12
24306: ARRAY
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: LD_INT 4
24313: PPUSH
24314: CALL_OW 12
24318: PPUSH
24319: LD_INT 3000
24321: PPUSH
24322: LD_INT 9000
24324: PPUSH
24325: CALL_OW 12
24329: PPUSH
24330: CALL_OW 492
// end ;
24334: PPOPN 1
24336: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24337: LD_EXP 38
24341: PUSH
24342: LD_EXP 53
24346: AND
24347: IFFALSE 24367
24349: GO 24351
24351: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24352: LD_INT 1
24354: PPUSH
24355: LD_OWVAR 2
24359: PPUSH
24360: LD_INT 0
24362: PPUSH
24363: CALL_OW 324
24367: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24368: LD_EXP 38
24372: PUSH
24373: LD_EXP 54
24377: AND
24378: IFFALSE 24461
24380: GO 24382
24382: DISABLE
24383: LD_INT 0
24385: PPUSH
24386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24387: LD_ADDR_VAR 0 2
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 21
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: ST_TO_ADDR
// if not tmp then
24423: LD_VAR 0 2
24427: NOT
24428: IFFALSE 24432
// exit ;
24430: GO 24461
// for i in tmp do
24432: LD_ADDR_VAR 0 1
24436: PUSH
24437: LD_VAR 0 2
24441: PUSH
24442: FOR_IN
24443: IFFALSE 24459
// SetBLevel ( i , 10 ) ;
24445: LD_VAR 0 1
24449: PPUSH
24450: LD_INT 10
24452: PPUSH
24453: CALL_OW 241
24457: GO 24442
24459: POP
24460: POP
// end ;
24461: PPOPN 2
24463: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24464: LD_EXP 38
24468: PUSH
24469: LD_EXP 55
24473: AND
24474: IFFALSE 24585
24476: GO 24478
24478: DISABLE
24479: LD_INT 0
24481: PPUSH
24482: PPUSH
24483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 22
24491: PUSH
24492: LD_OWVAR 2
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 25
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PPUSH
24515: CALL_OW 69
24519: ST_TO_ADDR
// if not tmp then
24520: LD_VAR 0 3
24524: NOT
24525: IFFALSE 24529
// exit ;
24527: GO 24585
// un := tmp [ rand ( 1 , tmp ) ] ;
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_VAR 0 3
24538: PUSH
24539: LD_INT 1
24541: PPUSH
24542: LD_VAR 0 3
24546: PPUSH
24547: CALL_OW 12
24551: ARRAY
24552: ST_TO_ADDR
// if Crawls ( un ) then
24553: LD_VAR 0 2
24557: PPUSH
24558: CALL_OW 318
24562: IFFALSE 24573
// ComWalk ( un ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24573: LD_VAR 0 2
24577: PPUSH
24578: LD_INT 5
24580: PPUSH
24581: CALL_OW 336
// end ;
24585: PPOPN 3
24587: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24588: LD_EXP 38
24592: PUSH
24593: LD_EXP 56
24597: AND
24598: PUSH
24599: LD_OWVAR 67
24603: PUSH
24604: LD_INT 4
24606: LESS
24607: AND
24608: IFFALSE 24627
24610: GO 24612
24612: DISABLE
// begin Difficulty := Difficulty + 1 ;
24613: LD_ADDR_OWVAR 67
24617: PUSH
24618: LD_OWVAR 67
24622: PUSH
24623: LD_INT 1
24625: PLUS
24626: ST_TO_ADDR
// end ;
24627: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24628: LD_EXP 38
24632: PUSH
24633: LD_EXP 57
24637: AND
24638: IFFALSE 24741
24640: GO 24642
24642: DISABLE
24643: LD_INT 0
24645: PPUSH
// begin for i := 1 to 5 do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_INT 5
24658: PUSH
24659: FOR_TO
24660: IFFALSE 24739
// begin uc_nation := nation_nature ;
24662: LD_ADDR_OWVAR 21
24666: PUSH
24667: LD_INT 0
24669: ST_TO_ADDR
// uc_side := 0 ;
24670: LD_ADDR_OWVAR 20
24674: PUSH
24675: LD_INT 0
24677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24678: LD_ADDR_OWVAR 29
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: LD_INT 12
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: ST_TO_ADDR
// hc_agressivity := 20 ;
24693: LD_ADDR_OWVAR 35
24697: PUSH
24698: LD_INT 20
24700: ST_TO_ADDR
// hc_class := class_tiger ;
24701: LD_ADDR_OWVAR 28
24705: PUSH
24706: LD_INT 14
24708: ST_TO_ADDR
// hc_gallery :=  ;
24709: LD_ADDR_OWVAR 33
24713: PUSH
24714: LD_STRING 
24716: ST_TO_ADDR
// hc_name :=  ;
24717: LD_ADDR_OWVAR 26
24721: PUSH
24722: LD_STRING 
24724: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24725: CALL_OW 44
24729: PPUSH
24730: LD_INT 0
24732: PPUSH
24733: CALL_OW 51
// end ;
24737: GO 24659
24739: POP
24740: POP
// end ;
24741: PPOPN 1
24743: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24744: LD_EXP 38
24748: PUSH
24749: LD_EXP 58
24753: AND
24754: IFFALSE 24763
24756: GO 24758
24758: DISABLE
// StreamSibBomb ;
24759: CALL 24764 0 0
24763: END
// export function StreamSibBomb ; var i , x , y ; begin
24764: LD_INT 0
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
// result := false ;
24770: LD_ADDR_VAR 0 1
24774: PUSH
24775: LD_INT 0
24777: ST_TO_ADDR
// for i := 1 to 16 do
24778: LD_ADDR_VAR 0 2
24782: PUSH
24783: DOUBLE
24784: LD_INT 1
24786: DEC
24787: ST_TO_ADDR
24788: LD_INT 16
24790: PUSH
24791: FOR_TO
24792: IFFALSE 24991
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 10
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 40
24810: PUSH
24811: LD_INT 50
24813: PUSH
24814: LD_INT 60
24816: PUSH
24817: LD_INT 70
24819: PUSH
24820: LD_INT 80
24822: PUSH
24823: LD_INT 90
24825: PUSH
24826: LD_INT 100
24828: PUSH
24829: LD_INT 110
24831: PUSH
24832: LD_INT 120
24834: PUSH
24835: LD_INT 130
24837: PUSH
24838: LD_INT 140
24840: PUSH
24841: LD_INT 150
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: PPUSH
24864: LD_INT 15
24866: PPUSH
24867: CALL_OW 12
24871: ARRAY
24872: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24873: LD_ADDR_VAR 0 4
24877: PUSH
24878: LD_INT 10
24880: PUSH
24881: LD_INT 20
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 40
24889: PUSH
24890: LD_INT 50
24892: PUSH
24893: LD_INT 60
24895: PUSH
24896: LD_INT 70
24898: PUSH
24899: LD_INT 80
24901: PUSH
24902: LD_INT 90
24904: PUSH
24905: LD_INT 100
24907: PUSH
24908: LD_INT 110
24910: PUSH
24911: LD_INT 120
24913: PUSH
24914: LD_INT 130
24916: PUSH
24917: LD_INT 140
24919: PUSH
24920: LD_INT 150
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PPUSH
24943: LD_INT 15
24945: PPUSH
24946: CALL_OW 12
24950: ARRAY
24951: ST_TO_ADDR
// if ValidHex ( x , y ) then
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_VAR 0 4
24961: PPUSH
24962: CALL_OW 488
24966: IFFALSE 24989
// begin result := [ x , y ] ;
24968: LD_ADDR_VAR 0 1
24972: PUSH
24973: LD_VAR 0 3
24977: PUSH
24978: LD_VAR 0 4
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: ST_TO_ADDR
// break ;
24987: GO 24991
// end ; end ;
24989: GO 24791
24991: POP
24992: POP
// if result then
24993: LD_VAR 0 1
24997: IFFALSE 25057
// begin ToLua ( playSibBomb() ) ;
24999: LD_STRING playSibBomb()
25001: PPUSH
25002: CALL_OW 559
// wait ( 0 0$14 ) ;
25006: LD_INT 490
25008: PPUSH
25009: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25013: LD_VAR 0 1
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: PPUSH
25031: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25035: LD_VAR 0 1
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PPUSH
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 2
25051: ARRAY
25052: PPUSH
25053: CALL_OW 429
// end ; end ;
25057: LD_VAR 0 1
25061: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25062: LD_EXP 38
25066: PUSH
25067: LD_EXP 60
25071: AND
25072: IFFALSE 25084
25074: GO 25076
25076: DISABLE
// YouLost (  ) ;
25077: LD_STRING 
25079: PPUSH
25080: CALL_OW 104
25084: END
// every 0 0$1 trigger StreamModeActive and sFog do
25085: LD_EXP 38
25089: PUSH
25090: LD_EXP 59
25094: AND
25095: IFFALSE 25109
25097: GO 25099
25099: DISABLE
// FogOff ( your_side ) ;
25100: LD_OWVAR 2
25104: PPUSH
25105: CALL_OW 344
25109: END
// every 0 0$1 trigger StreamModeActive and sSun do
25110: LD_EXP 38
25114: PUSH
25115: LD_EXP 61
25119: AND
25120: IFFALSE 25148
25122: GO 25124
25124: DISABLE
// begin solar_recharge_percent := 0 ;
25125: LD_ADDR_OWVAR 79
25129: PUSH
25130: LD_INT 0
25132: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25133: LD_INT 10500
25135: PPUSH
25136: CALL_OW 67
// solar_recharge_percent := 100 ;
25140: LD_ADDR_OWVAR 79
25144: PUSH
25145: LD_INT 100
25147: ST_TO_ADDR
// end ;
25148: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25149: LD_EXP 38
25153: PUSH
25154: LD_EXP 62
25158: AND
25159: IFFALSE 25398
25161: GO 25163
25163: DISABLE
25164: LD_INT 0
25166: PPUSH
25167: PPUSH
25168: PPUSH
// begin tmp := [ ] ;
25169: LD_ADDR_VAR 0 3
25173: PUSH
25174: EMPTY
25175: ST_TO_ADDR
// for i := 1 to 6 do
25176: LD_ADDR_VAR 0 1
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_INT 6
25188: PUSH
25189: FOR_TO
25190: IFFALSE 25295
// begin uc_nation := nation_nature ;
25192: LD_ADDR_OWVAR 21
25196: PUSH
25197: LD_INT 0
25199: ST_TO_ADDR
// uc_side := 0 ;
25200: LD_ADDR_OWVAR 20
25204: PUSH
25205: LD_INT 0
25207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25208: LD_ADDR_OWVAR 29
25212: PUSH
25213: LD_INT 12
25215: PUSH
25216: LD_INT 12
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// hc_agressivity := 20 ;
25223: LD_ADDR_OWVAR 35
25227: PUSH
25228: LD_INT 20
25230: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25231: LD_ADDR_OWVAR 28
25235: PUSH
25236: LD_INT 17
25238: ST_TO_ADDR
// hc_gallery :=  ;
25239: LD_ADDR_OWVAR 33
25243: PUSH
25244: LD_STRING 
25246: ST_TO_ADDR
// hc_name :=  ;
25247: LD_ADDR_OWVAR 26
25251: PUSH
25252: LD_STRING 
25254: ST_TO_ADDR
// un := CreateHuman ;
25255: LD_ADDR_VAR 0 2
25259: PUSH
25260: CALL_OW 44
25264: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25265: LD_VAR 0 2
25269: PPUSH
25270: LD_INT 1
25272: PPUSH
25273: CALL_OW 51
// tmp := tmp ^ un ;
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_VAR 0 3
25286: PUSH
25287: LD_VAR 0 2
25291: ADD
25292: ST_TO_ADDR
// end ;
25293: GO 25189
25295: POP
25296: POP
// repeat wait ( 0 0$1 ) ;
25297: LD_INT 35
25299: PPUSH
25300: CALL_OW 67
// for un in tmp do
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: FOR_IN
25315: IFFALSE 25389
// begin if IsDead ( un ) then
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL_OW 301
25326: IFFALSE 25346
// begin tmp := tmp diff un ;
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_VAR 0 3
25337: PUSH
25338: LD_VAR 0 2
25342: DIFF
25343: ST_TO_ADDR
// continue ;
25344: GO 25314
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25346: LD_VAR 0 2
25350: PPUSH
25351: LD_INT 3
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: PPUSH
25373: LD_VAR 0 2
25377: PPUSH
25378: CALL_OW 74
25382: PPUSH
25383: CALL_OW 115
// end ;
25387: GO 25314
25389: POP
25390: POP
// until not tmp ;
25391: LD_VAR 0 3
25395: NOT
25396: IFFALSE 25297
// end ;
25398: PPOPN 3
25400: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25401: LD_EXP 38
25405: PUSH
25406: LD_EXP 63
25410: AND
25411: IFFALSE 25465
25413: GO 25415
25415: DISABLE
// begin ToLua ( displayTroll(); ) ;
25416: LD_STRING displayTroll();
25418: PPUSH
25419: CALL_OW 559
// wait ( 3 3$00 ) ;
25423: LD_INT 6300
25425: PPUSH
25426: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25430: LD_STRING hideTroll();
25432: PPUSH
25433: CALL_OW 559
// wait ( 1 1$00 ) ;
25437: LD_INT 2100
25439: PPUSH
25440: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25444: LD_STRING displayTroll();
25446: PPUSH
25447: CALL_OW 559
// wait ( 1 1$00 ) ;
25451: LD_INT 2100
25453: PPUSH
25454: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25458: LD_STRING hideTroll();
25460: PPUSH
25461: CALL_OW 559
// end ;
25465: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25466: LD_EXP 38
25470: PUSH
25471: LD_EXP 64
25475: AND
25476: IFFALSE 25539
25478: GO 25480
25480: DISABLE
25481: LD_INT 0
25483: PPUSH
// begin p := 0 ;
25484: LD_ADDR_VAR 0 1
25488: PUSH
25489: LD_INT 0
25491: ST_TO_ADDR
// repeat game_speed := 1 ;
25492: LD_ADDR_OWVAR 65
25496: PUSH
25497: LD_INT 1
25499: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25500: LD_INT 35
25502: PPUSH
25503: CALL_OW 67
// p := p + 1 ;
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_VAR 0 1
25516: PUSH
25517: LD_INT 1
25519: PLUS
25520: ST_TO_ADDR
// until p >= 60 ;
25521: LD_VAR 0 1
25525: PUSH
25526: LD_INT 60
25528: GREATEREQUAL
25529: IFFALSE 25492
// game_speed := 4 ;
25531: LD_ADDR_OWVAR 65
25535: PUSH
25536: LD_INT 4
25538: ST_TO_ADDR
// end ;
25539: PPOPN 1
25541: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25542: LD_EXP 38
25546: PUSH
25547: LD_EXP 65
25551: AND
25552: IFFALSE 25698
25554: GO 25556
25556: DISABLE
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 30
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 30
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PPUSH
25610: CALL_OW 69
25614: ST_TO_ADDR
// if not depot then
25615: LD_VAR 0 1
25619: NOT
25620: IFFALSE 25624
// exit ;
25622: GO 25698
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 12
25646: ARRAY
25647: PPUSH
25648: CALL_OW 274
25652: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: LD_INT 0
25663: PPUSH
25664: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25668: LD_VAR 0 2
25672: PPUSH
25673: LD_INT 2
25675: PPUSH
25676: LD_INT 0
25678: PPUSH
25679: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25683: LD_VAR 0 2
25687: PPUSH
25688: LD_INT 3
25690: PPUSH
25691: LD_INT 0
25693: PPUSH
25694: CALL_OW 277
// end ;
25698: PPOPN 2
25700: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25701: LD_EXP 38
25705: PUSH
25706: LD_EXP 66
25710: AND
25711: IFFALSE 25808
25713: GO 25715
25715: DISABLE
25716: LD_INT 0
25718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25719: LD_ADDR_VAR 0 1
25723: PUSH
25724: LD_INT 22
25726: PUSH
25727: LD_OWVAR 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 21
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 23
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 1
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 1
25789: PPUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 12
25799: ARRAY
25800: PPUSH
25801: LD_INT 200
25803: PPUSH
25804: CALL_OW 234
// end ;
25808: PPOPN 1
25810: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25811: LD_EXP 38
25815: PUSH
25816: LD_EXP 67
25820: AND
25821: IFFALSE 25900
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_INT 22
25836: PUSH
25837: LD_OWVAR 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 21
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PPUSH
25860: CALL_OW 69
25864: ST_TO_ADDR
// if not tmp then
25865: LD_VAR 0 1
25869: NOT
25870: IFFALSE 25874
// exit ;
25872: GO 25900
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 1
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 12
25891: ARRAY
25892: PPUSH
25893: LD_INT 60
25895: PPUSH
25896: CALL_OW 234
// end ;
25900: PPOPN 1
25902: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25903: LD_EXP 38
25907: PUSH
25908: LD_EXP 68
25912: AND
25913: IFFALSE 26012
25915: GO 25917
25917: DISABLE
25918: LD_INT 0
25920: PPUSH
25921: PPUSH
// begin enable ;
25922: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25923: LD_ADDR_VAR 0 1
25927: PUSH
25928: LD_INT 22
25930: PUSH
25931: LD_OWVAR 2
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 61
25942: PUSH
25943: EMPTY
25944: LIST
25945: PUSH
25946: LD_INT 33
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 69
25965: ST_TO_ADDR
// if not tmp then
25966: LD_VAR 0 1
25970: NOT
25971: IFFALSE 25975
// exit ;
25973: GO 26012
// for i in tmp do
25975: LD_ADDR_VAR 0 2
25979: PUSH
25980: LD_VAR 0 1
25984: PUSH
25985: FOR_IN
25986: IFFALSE 26010
// if IsControledBy ( i ) then
25988: LD_VAR 0 2
25992: PPUSH
25993: CALL_OW 312
25997: IFFALSE 26008
// ComUnlink ( i ) ;
25999: LD_VAR 0 2
26003: PPUSH
26004: CALL_OW 136
26008: GO 25985
26010: POP
26011: POP
// end ;
26012: PPOPN 2
26014: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26015: LD_EXP 38
26019: PUSH
26020: LD_EXP 69
26024: AND
26025: IFFALSE 26165
26027: GO 26029
26029: DISABLE
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
// begin ToLua ( displayPowell(); ) ;
26034: LD_STRING displayPowell();
26036: PPUSH
26037: CALL_OW 559
// uc_side := 0 ;
26041: LD_ADDR_OWVAR 20
26045: PUSH
26046: LD_INT 0
26048: ST_TO_ADDR
// uc_nation := 2 ;
26049: LD_ADDR_OWVAR 21
26053: PUSH
26054: LD_INT 2
26056: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26057: LD_ADDR_OWVAR 37
26061: PUSH
26062: LD_INT 14
26064: ST_TO_ADDR
// vc_engine := engine_siberite ;
26065: LD_ADDR_OWVAR 39
26069: PUSH
26070: LD_INT 3
26072: ST_TO_ADDR
// vc_control := control_apeman ;
26073: LD_ADDR_OWVAR 38
26077: PUSH
26078: LD_INT 5
26080: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26081: LD_ADDR_OWVAR 40
26085: PUSH
26086: LD_INT 29
26088: ST_TO_ADDR
// un := CreateVehicle ;
26089: LD_ADDR_VAR 0 2
26093: PUSH
26094: CALL_OW 45
26098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26111: LD_INT 35
26113: PPUSH
26114: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26118: LD_VAR 0 2
26122: PPUSH
26123: LD_INT 22
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: PPUSH
26140: LD_VAR 0 2
26144: PPUSH
26145: CALL_OW 74
26149: PPUSH
26150: CALL_OW 115
// until IsDead ( un ) ;
26154: LD_VAR 0 2
26158: PPUSH
26159: CALL_OW 301
26163: IFFALSE 26111
// end ;
26165: PPOPN 2
26167: END
// every 0 0$1 trigger StreamModeActive and sStu do
26168: LD_EXP 38
26172: PUSH
26173: LD_EXP 77
26177: AND
26178: IFFALSE 26194
26180: GO 26182
26182: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26183: LD_STRING displayStucuk();
26185: PPUSH
26186: CALL_OW 559
// ResetFog ;
26190: CALL_OW 335
// end ;
26194: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26195: LD_EXP 38
26199: PUSH
26200: LD_EXP 70
26204: AND
26205: IFFALSE 26346
26207: GO 26209
26209: DISABLE
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26214: LD_ADDR_VAR 0 2
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: LD_OWVAR 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 21
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26346
// un := tmp [ rand ( 1 , tmp ) ] ;
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: LD_INT 1
26271: PPUSH
26272: LD_VAR 0 2
26276: PPUSH
26277: CALL_OW 12
26281: ARRAY
26282: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_INT 0
26290: PPUSH
26291: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_OWVAR 3
26304: PUSH
26305: LD_VAR 0 1
26309: DIFF
26310: PPUSH
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 74
26320: PPUSH
26321: CALL_OW 115
// wait ( 0 0$20 ) ;
26325: LD_INT 700
26327: PPUSH
26328: CALL_OW 67
// SetSide ( un , your_side ) ;
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_OWVAR 2
26341: PPUSH
26342: CALL_OW 235
// end ;
26346: PPOPN 2
26348: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26349: LD_EXP 38
26353: PUSH
26354: LD_EXP 71
26358: AND
26359: IFFALSE 26465
26361: GO 26363
26363: DISABLE
26364: LD_INT 0
26366: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_INT 22
26374: PUSH
26375: LD_OWVAR 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PPUSH
26416: CALL_OW 69
26420: ST_TO_ADDR
// if not depot then
26421: LD_VAR 0 1
26425: NOT
26426: IFFALSE 26430
// exit ;
26428: GO 26465
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26430: LD_VAR 0 1
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PPUSH
26439: CALL_OW 250
26443: PPUSH
26444: LD_VAR 0 1
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: CALL_OW 251
26457: PPUSH
26458: LD_INT 70
26460: PPUSH
26461: CALL_OW 495
// end ;
26465: PPOPN 1
26467: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26468: LD_EXP 38
26472: PUSH
26473: LD_EXP 72
26477: AND
26478: IFFALSE 26689
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26490: LD_ADDR_VAR 0 5
26494: PUSH
26495: LD_INT 22
26497: PUSH
26498: LD_OWVAR 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 21
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PPUSH
26521: CALL_OW 69
26525: ST_TO_ADDR
// if not tmp then
26526: LD_VAR 0 5
26530: NOT
26531: IFFALSE 26535
// exit ;
26533: GO 26689
// for i in tmp do
26535: LD_ADDR_VAR 0 1
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: FOR_IN
26546: IFFALSE 26687
// begin d := rand ( 0 , 5 ) ;
26548: LD_ADDR_VAR 0 4
26552: PUSH
26553: LD_INT 0
26555: PPUSH
26556: LD_INT 5
26558: PPUSH
26559: CALL_OW 12
26563: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 250
26578: PPUSH
26579: LD_VAR 0 4
26583: PPUSH
26584: LD_INT 3
26586: PPUSH
26587: LD_INT 12
26589: PPUSH
26590: CALL_OW 12
26594: PPUSH
26595: CALL_OW 272
26599: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 251
26614: PPUSH
26615: LD_VAR 0 4
26619: PPUSH
26620: LD_INT 3
26622: PPUSH
26623: LD_INT 12
26625: PPUSH
26626: CALL_OW 12
26630: PPUSH
26631: CALL_OW 273
26635: ST_TO_ADDR
// if ValidHex ( x , y ) then
26636: LD_VAR 0 2
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 488
26650: IFFALSE 26685
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26652: LD_VAR 0 1
26656: PPUSH
26657: LD_VAR 0 2
26661: PPUSH
26662: LD_VAR 0 3
26666: PPUSH
26667: LD_INT 3
26669: PPUSH
26670: LD_INT 6
26672: PPUSH
26673: CALL_OW 12
26677: PPUSH
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 483
// end ;
26685: GO 26545
26687: POP
26688: POP
// end ;
26689: PPOPN 5
26691: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26692: LD_EXP 38
26696: PUSH
26697: LD_EXP 73
26701: AND
26702: IFFALSE 26796
26704: GO 26706
26706: DISABLE
26707: LD_INT 0
26709: PPUSH
26710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26711: LD_ADDR_VAR 0 2
26715: PUSH
26716: LD_INT 22
26718: PUSH
26719: LD_OWVAR 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 32
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: PPUSH
26753: CALL_OW 69
26757: ST_TO_ADDR
// if not tmp then
26758: LD_VAR 0 2
26762: NOT
26763: IFFALSE 26767
// exit ;
26765: GO 26796
// for i in tmp do
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_VAR 0 2
26776: PUSH
26777: FOR_IN
26778: IFFALSE 26794
// SetFuel ( i , 0 ) ;
26780: LD_VAR 0 1
26784: PPUSH
26785: LD_INT 0
26787: PPUSH
26788: CALL_OW 240
26792: GO 26777
26794: POP
26795: POP
// end ;
26796: PPOPN 2
26798: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26799: LD_EXP 38
26803: PUSH
26804: LD_EXP 74
26808: AND
26809: IFFALSE 26875
26811: GO 26813
26813: DISABLE
26814: LD_INT 0
26816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26817: LD_ADDR_VAR 0 1
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 30
26836: PUSH
26837: LD_INT 29
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 69
26852: ST_TO_ADDR
// if not tmp then
26853: LD_VAR 0 1
26857: NOT
26858: IFFALSE 26862
// exit ;
26860: GO 26875
// DestroyUnit ( tmp [ 1 ] ) ;
26862: LD_VAR 0 1
26866: PUSH
26867: LD_INT 1
26869: ARRAY
26870: PPUSH
26871: CALL_OW 65
// end ;
26875: PPOPN 1
26877: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26878: LD_EXP 38
26882: PUSH
26883: LD_EXP 76
26887: AND
26888: IFFALSE 27017
26890: GO 26892
26892: DISABLE
26893: LD_INT 0
26895: PPUSH
// begin uc_side := 0 ;
26896: LD_ADDR_OWVAR 20
26900: PUSH
26901: LD_INT 0
26903: ST_TO_ADDR
// uc_nation := nation_arabian ;
26904: LD_ADDR_OWVAR 21
26908: PUSH
26909: LD_INT 2
26911: ST_TO_ADDR
// hc_gallery :=  ;
26912: LD_ADDR_OWVAR 33
26916: PUSH
26917: LD_STRING 
26919: ST_TO_ADDR
// hc_name :=  ;
26920: LD_ADDR_OWVAR 26
26924: PUSH
26925: LD_STRING 
26927: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26928: LD_INT 1
26930: PPUSH
26931: LD_INT 11
26933: PPUSH
26934: LD_INT 10
26936: PPUSH
26937: CALL_OW 380
// un := CreateHuman ;
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: CALL_OW 44
26950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26951: LD_VAR 0 1
26955: PPUSH
26956: LD_INT 1
26958: PPUSH
26959: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26963: LD_INT 35
26965: PPUSH
26966: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26970: LD_VAR 0 1
26974: PPUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: PPUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 74
27001: PPUSH
27002: CALL_OW 115
// until IsDead ( un ) ;
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 301
27015: IFFALSE 26963
// end ;
27017: PPOPN 1
27019: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27020: LD_EXP 38
27024: PUSH
27025: LD_EXP 78
27029: AND
27030: IFFALSE 27042
27032: GO 27034
27034: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27035: LD_STRING earthquake(getX(game), 0, 32)
27037: PPUSH
27038: CALL_OW 559
27042: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27043: LD_EXP 38
27047: PUSH
27048: LD_EXP 79
27052: AND
27053: IFFALSE 27144
27055: GO 27057
27057: DISABLE
27058: LD_INT 0
27060: PPUSH
// begin enable ;
27061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27062: LD_ADDR_VAR 0 1
27066: PUSH
27067: LD_INT 22
27069: PUSH
27070: LD_OWVAR 2
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 21
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 33
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 69
27108: ST_TO_ADDR
// if not tmp then
27109: LD_VAR 0 1
27113: NOT
27114: IFFALSE 27118
// exit ;
27116: GO 27144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27118: LD_VAR 0 1
27122: PUSH
27123: LD_INT 1
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 12
27135: ARRAY
27136: PPUSH
27137: LD_INT 1
27139: PPUSH
27140: CALL_OW 234
// end ;
27144: PPOPN 1
27146: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27147: LD_EXP 38
27151: PUSH
27152: LD_EXP 80
27156: AND
27157: IFFALSE 27298
27159: GO 27161
27161: DISABLE
27162: LD_INT 0
27164: PPUSH
27165: PPUSH
27166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27167: LD_ADDR_VAR 0 3
27171: PUSH
27172: LD_INT 22
27174: PUSH
27175: LD_OWVAR 2
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 25
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PPUSH
27198: CALL_OW 69
27202: ST_TO_ADDR
// if not tmp then
27203: LD_VAR 0 3
27207: NOT
27208: IFFALSE 27212
// exit ;
27210: GO 27298
// un := tmp [ rand ( 1 , tmp ) ] ;
27212: LD_ADDR_VAR 0 2
27216: PUSH
27217: LD_VAR 0 3
27221: PUSH
27222: LD_INT 1
27224: PPUSH
27225: LD_VAR 0 3
27229: PPUSH
27230: CALL_OW 12
27234: ARRAY
27235: ST_TO_ADDR
// if Crawls ( un ) then
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 318
27245: IFFALSE 27256
// ComWalk ( un ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27256: LD_VAR 0 2
27260: PPUSH
27261: LD_INT 9
27263: PPUSH
27264: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27268: LD_INT 28
27270: PPUSH
27271: LD_OWVAR 2
27275: PPUSH
27276: LD_INT 2
27278: PPUSH
27279: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27283: LD_INT 29
27285: PPUSH
27286: LD_OWVAR 2
27290: PPUSH
27291: LD_INT 2
27293: PPUSH
27294: CALL_OW 322
// end ;
27298: PPOPN 3
27300: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27301: LD_EXP 38
27305: PUSH
27306: LD_EXP 81
27310: AND
27311: IFFALSE 27422
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
27320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_INT 22
27328: PUSH
27329: LD_OWVAR 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: CALL_OW 69
27356: ST_TO_ADDR
// if not tmp then
27357: LD_VAR 0 3
27361: NOT
27362: IFFALSE 27366
// exit ;
27364: GO 27422
// un := tmp [ rand ( 1 , tmp ) ] ;
27366: LD_ADDR_VAR 0 2
27370: PUSH
27371: LD_VAR 0 3
27375: PUSH
27376: LD_INT 1
27378: PPUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: CALL_OW 12
27388: ARRAY
27389: ST_TO_ADDR
// if Crawls ( un ) then
27390: LD_VAR 0 2
27394: PPUSH
27395: CALL_OW 318
27399: IFFALSE 27410
// ComWalk ( un ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: LD_INT 8
27417: PPUSH
27418: CALL_OW 336
// end ;
27422: PPOPN 3
27424: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27425: LD_EXP 38
27429: PUSH
27430: LD_EXP 82
27434: AND
27435: IFFALSE 27579
27437: GO 27439
27439: DISABLE
27440: LD_INT 0
27442: PPUSH
27443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27444: LD_ADDR_VAR 0 2
27448: PUSH
27449: LD_INT 22
27451: PUSH
27452: LD_OWVAR 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 21
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: LD_INT 34
27476: PUSH
27477: LD_INT 12
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 34
27486: PUSH
27487: LD_INT 51
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 34
27496: PUSH
27497: LD_INT 32
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: PPUSH
27515: CALL_OW 69
27519: ST_TO_ADDR
// if not tmp then
27520: LD_VAR 0 2
27524: NOT
27525: IFFALSE 27529
// exit ;
27527: GO 27579
// for i in tmp do
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_VAR 0 2
27538: PUSH
27539: FOR_IN
27540: IFFALSE 27577
// if GetCargo ( i , mat_artifact ) = 0 then
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_INT 4
27549: PPUSH
27550: CALL_OW 289
27554: PUSH
27555: LD_INT 0
27557: EQUAL
27558: IFFALSE 27575
// SetCargo ( i , mat_siberit , 100 ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_INT 3
27567: PPUSH
27568: LD_INT 100
27570: PPUSH
27571: CALL_OW 290
27575: GO 27539
27577: POP
27578: POP
// end ;
27579: PPOPN 2
27581: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27582: LD_EXP 38
27586: PUSH
27587: LD_EXP 83
27591: AND
27592: IFFALSE 27775
27594: GO 27596
27596: DISABLE
27597: LD_INT 0
27599: PPUSH
27600: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: LD_INT 22
27608: PUSH
27609: LD_OWVAR 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PPUSH
27618: CALL_OW 69
27622: ST_TO_ADDR
// if not tmp then
27623: LD_VAR 0 2
27627: NOT
27628: IFFALSE 27632
// exit ;
27630: GO 27775
// for i := 1 to 2 do
27632: LD_ADDR_VAR 0 1
27636: PUSH
27637: DOUBLE
27638: LD_INT 1
27640: DEC
27641: ST_TO_ADDR
27642: LD_INT 2
27644: PUSH
27645: FOR_TO
27646: IFFALSE 27773
// begin uc_side := your_side ;
27648: LD_ADDR_OWVAR 20
27652: PUSH
27653: LD_OWVAR 2
27657: ST_TO_ADDR
// uc_nation := nation_american ;
27658: LD_ADDR_OWVAR 21
27662: PUSH
27663: LD_INT 1
27665: ST_TO_ADDR
// vc_chassis := us_morphling ;
27666: LD_ADDR_OWVAR 37
27670: PUSH
27671: LD_INT 5
27673: ST_TO_ADDR
// vc_engine := engine_siberite ;
27674: LD_ADDR_OWVAR 39
27678: PUSH
27679: LD_INT 3
27681: ST_TO_ADDR
// vc_control := control_computer ;
27682: LD_ADDR_OWVAR 38
27686: PUSH
27687: LD_INT 3
27689: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27690: LD_ADDR_OWVAR 40
27694: PUSH
27695: LD_INT 10
27697: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27698: LD_VAR 0 2
27702: PUSH
27703: LD_INT 1
27705: ARRAY
27706: PPUSH
27707: CALL_OW 310
27711: NOT
27712: IFFALSE 27759
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27714: CALL_OW 45
27718: PPUSH
27719: LD_VAR 0 2
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: CALL_OW 250
27732: PPUSH
27733: LD_VAR 0 2
27737: PUSH
27738: LD_INT 1
27740: ARRAY
27741: PPUSH
27742: CALL_OW 251
27746: PPUSH
27747: LD_INT 12
27749: PPUSH
27750: LD_INT 1
27752: PPUSH
27753: CALL_OW 50
27757: GO 27771
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27759: CALL_OW 45
27763: PPUSH
27764: LD_INT 1
27766: PPUSH
27767: CALL_OW 51
// end ;
27771: GO 27645
27773: POP
27774: POP
// end ;
27775: PPOPN 2
27777: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27778: LD_EXP 38
27782: PUSH
27783: LD_EXP 84
27787: AND
27788: IFFALSE 28010
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27801: LD_ADDR_VAR 0 6
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_OWVAR 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 21
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 23
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: PPUSH
27850: CALL_OW 69
27854: ST_TO_ADDR
// if not tmp then
27855: LD_VAR 0 6
27859: NOT
27860: IFFALSE 27864
// exit ;
27862: GO 28010
// s1 := rand ( 1 , 4 ) ;
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: LD_INT 1
27871: PPUSH
27872: LD_INT 4
27874: PPUSH
27875: CALL_OW 12
27879: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27880: LD_ADDR_VAR 0 4
27884: PUSH
27885: LD_VAR 0 6
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: CALL_OW 259
27903: ST_TO_ADDR
// if s1 = 1 then
27904: LD_VAR 0 2
27908: PUSH
27909: LD_INT 1
27911: EQUAL
27912: IFFALSE 27932
// s2 := rand ( 2 , 4 ) else
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 2
27921: PPUSH
27922: LD_INT 4
27924: PPUSH
27925: CALL_OW 12
27929: ST_TO_ADDR
27930: GO 27940
// s2 := 1 ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 1
27939: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27940: LD_ADDR_VAR 0 5
27944: PUSH
27945: LD_VAR 0 6
27949: PUSH
27950: LD_INT 1
27952: ARRAY
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 259
27963: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27964: LD_VAR 0 6
27968: PUSH
27969: LD_INT 1
27971: ARRAY
27972: PPUSH
27973: LD_VAR 0 2
27977: PPUSH
27978: LD_VAR 0 5
27982: PPUSH
27983: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27987: LD_VAR 0 6
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: LD_VAR 0 3
28000: PPUSH
28001: LD_VAR 0 4
28005: PPUSH
28006: CALL_OW 237
// end ;
28010: PPOPN 6
28012: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28013: LD_EXP 38
28017: PUSH
28018: LD_EXP 85
28022: AND
28023: IFFALSE 28102
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 30
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 69
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 1
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28076: LD_VAR 0 1
28080: PUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 12
28093: ARRAY
28094: PPUSH
28095: LD_INT 1
28097: PPUSH
28098: CALL_OW 234
// end ;
28102: PPOPN 1
28104: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28105: LD_EXP 38
28109: PUSH
28110: LD_EXP 86
28114: AND
28115: IFFALSE 28227
28117: GO 28119
28119: DISABLE
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 30
28146: PUSH
28147: LD_INT 27
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 26
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 28
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 2
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28227
// for i in tmp do
28198: LD_ADDR_VAR 0 1
28202: PUSH
28203: LD_VAR 0 2
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28225
// SetLives ( i , 1 ) ;
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_INT 1
28218: PPUSH
28219: CALL_OW 234
28223: GO 28208
28225: POP
28226: POP
// end ;
28227: PPOPN 2
28229: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28230: LD_EXP 38
28234: PUSH
28235: LD_EXP 87
28239: AND
28240: IFFALSE 28527
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
28249: PPUSH
// begin i := rand ( 1 , 7 ) ;
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_INT 1
28257: PPUSH
28258: LD_INT 7
28260: PPUSH
28261: CALL_OW 12
28265: ST_TO_ADDR
// case i of 1 :
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28289
28279: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28280: LD_STRING earthquake(getX(game), 0, 32)
28282: PPUSH
28283: CALL_OW 559
28287: GO 28527
28289: LD_INT 2
28291: DOUBLE
28292: EQUAL
28293: IFTRUE 28297
28295: GO 28311
28297: POP
// begin ToLua ( displayStucuk(); ) ;
28298: LD_STRING displayStucuk();
28300: PPUSH
28301: CALL_OW 559
// ResetFog ;
28305: CALL_OW 335
// end ; 3 :
28309: GO 28527
28311: LD_INT 3
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28423
28319: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28320: LD_ADDR_VAR 0 2
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 25
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 2
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28527
// un := tmp [ rand ( 1 , tmp ) ] ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_VAR 0 2
28374: PUSH
28375: LD_INT 1
28377: PPUSH
28378: LD_VAR 0 2
28382: PPUSH
28383: CALL_OW 12
28387: ARRAY
28388: ST_TO_ADDR
// if Crawls ( un ) then
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL_OW 318
28398: IFFALSE 28409
// ComWalk ( un ) ;
28400: LD_VAR 0 3
28404: PPUSH
28405: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28409: LD_VAR 0 3
28413: PPUSH
28414: LD_INT 8
28416: PPUSH
28417: CALL_OW 336
// end ; 4 :
28421: GO 28527
28423: LD_INT 4
28425: DOUBLE
28426: EQUAL
28427: IFTRUE 28431
28429: GO 28505
28431: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28432: LD_ADDR_VAR 0 2
28436: PUSH
28437: LD_INT 22
28439: PUSH
28440: LD_OWVAR 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 29
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PPUSH
28463: CALL_OW 69
28467: ST_TO_ADDR
// if not tmp then
28468: LD_VAR 0 2
28472: NOT
28473: IFFALSE 28477
// exit ;
28475: GO 28527
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28477: LD_VAR 0 2
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PPUSH
28486: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: CALL_OW 65
// end ; 5 .. 7 :
28503: GO 28527
28505: LD_INT 5
28507: DOUBLE
28508: GREATEREQUAL
28509: IFFALSE 28517
28511: LD_INT 7
28513: DOUBLE
28514: LESSEQUAL
28515: IFTRUE 28519
28517: GO 28526
28519: POP
// StreamSibBomb ; end ;
28520: CALL 24764 0 0
28524: GO 28527
28526: POP
// end ;
28527: PPOPN 3
28529: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28530: LD_EXP 38
28534: PUSH
28535: LD_EXP 88
28539: AND
28540: IFFALSE 28696
28542: GO 28544
28544: DISABLE
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
28549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_INT 81
28557: PUSH
28558: LD_OWVAR 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 21
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 21
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 2
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28696
// p := 0 ;
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28621: LD_INT 35
28623: PPUSH
28624: CALL_OW 67
// p := p + 1 ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_VAR 0 3
28637: PUSH
28638: LD_INT 1
28640: PLUS
28641: ST_TO_ADDR
// for i in tmp do
28642: LD_ADDR_VAR 0 1
28646: PUSH
28647: LD_VAR 0 2
28651: PUSH
28652: FOR_IN
28653: IFFALSE 28684
// if GetLives ( i ) < 1000 then
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 256
28664: PUSH
28665: LD_INT 1000
28667: LESS
28668: IFFALSE 28682
// SetLives ( i , 1000 ) ;
28670: LD_VAR 0 1
28674: PPUSH
28675: LD_INT 1000
28677: PPUSH
28678: CALL_OW 234
28682: GO 28652
28684: POP
28685: POP
// until p > 20 ;
28686: LD_VAR 0 3
28690: PUSH
28691: LD_INT 20
28693: GREATER
28694: IFFALSE 28621
// end ;
28696: PPOPN 3
28698: END
// every 0 0$1 trigger StreamModeActive and sTime do
28699: LD_EXP 38
28703: PUSH
28704: LD_EXP 89
28708: AND
28709: IFFALSE 28744
28711: GO 28713
28713: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28714: LD_INT 28
28716: PPUSH
28717: LD_OWVAR 2
28721: PPUSH
28722: LD_INT 2
28724: PPUSH
28725: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28729: LD_INT 30
28731: PPUSH
28732: LD_OWVAR 2
28736: PPUSH
28737: LD_INT 2
28739: PPUSH
28740: CALL_OW 322
// end ;
28744: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28745: LD_EXP 38
28749: PUSH
28750: LD_EXP 90
28754: AND
28755: IFFALSE 28876
28757: GO 28759
28759: DISABLE
28760: LD_INT 0
28762: PPUSH
28763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28764: LD_ADDR_VAR 0 2
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_OWVAR 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 21
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 23
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: PPUSH
28813: CALL_OW 69
28817: ST_TO_ADDR
// if not tmp then
28818: LD_VAR 0 2
28822: NOT
28823: IFFALSE 28827
// exit ;
28825: GO 28876
// for i in tmp do
28827: LD_ADDR_VAR 0 1
28831: PUSH
28832: LD_VAR 0 2
28836: PUSH
28837: FOR_IN
28838: IFFALSE 28874
// begin if Crawls ( i ) then
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 318
28849: IFFALSE 28860
// ComWalk ( i ) ;
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 138
// SetClass ( i , 2 ) ;
28860: LD_VAR 0 1
28864: PPUSH
28865: LD_INT 2
28867: PPUSH
28868: CALL_OW 336
// end ;
28872: GO 28837
28874: POP
28875: POP
// end ;
28876: PPOPN 2
28878: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28879: LD_EXP 38
28883: PUSH
28884: LD_EXP 91
28888: AND
28889: IFFALSE 29177
28891: GO 28893
28893: DISABLE
28894: LD_INT 0
28896: PPUSH
28897: PPUSH
28898: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28899: LD_OWVAR 2
28903: PPUSH
28904: LD_INT 9
28906: PPUSH
28907: LD_INT 1
28909: PPUSH
28910: LD_INT 1
28912: PPUSH
28913: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28917: LD_INT 9
28919: PPUSH
28920: LD_OWVAR 2
28924: PPUSH
28925: CALL_OW 343
// uc_side := 9 ;
28929: LD_ADDR_OWVAR 20
28933: PUSH
28934: LD_INT 9
28936: ST_TO_ADDR
// uc_nation := 2 ;
28937: LD_ADDR_OWVAR 21
28941: PUSH
28942: LD_INT 2
28944: ST_TO_ADDR
// hc_name := Dark Warrior ;
28945: LD_ADDR_OWVAR 26
28949: PUSH
28950: LD_STRING Dark Warrior
28952: ST_TO_ADDR
// hc_gallery :=  ;
28953: LD_ADDR_OWVAR 33
28957: PUSH
28958: LD_STRING 
28960: ST_TO_ADDR
// hc_noskilllimit := true ;
28961: LD_ADDR_OWVAR 76
28965: PUSH
28966: LD_INT 1
28968: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28969: LD_ADDR_OWVAR 31
28973: PUSH
28974: LD_INT 30
28976: PUSH
28977: LD_INT 30
28979: PUSH
28980: LD_INT 30
28982: PUSH
28983: LD_INT 30
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// un := CreateHuman ;
28992: LD_ADDR_VAR 0 3
28996: PUSH
28997: CALL_OW 44
29001: ST_TO_ADDR
// hc_noskilllimit := false ;
29002: LD_ADDR_OWVAR 76
29006: PUSH
29007: LD_INT 0
29009: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29010: LD_VAR 0 3
29014: PPUSH
29015: LD_INT 1
29017: PPUSH
29018: CALL_OW 51
// ToLua ( playRanger() ) ;
29022: LD_STRING playRanger()
29024: PPUSH
29025: CALL_OW 559
// p := 0 ;
29029: LD_ADDR_VAR 0 2
29033: PUSH
29034: LD_INT 0
29036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29037: LD_INT 35
29039: PPUSH
29040: CALL_OW 67
// p := p + 1 ;
29044: LD_ADDR_VAR 0 2
29048: PUSH
29049: LD_VAR 0 2
29053: PUSH
29054: LD_INT 1
29056: PLUS
29057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29058: LD_VAR 0 3
29062: PPUSH
29063: CALL_OW 256
29067: PUSH
29068: LD_INT 1000
29070: LESS
29071: IFFALSE 29085
// SetLives ( un , 1000 ) ;
29073: LD_VAR 0 3
29077: PPUSH
29078: LD_INT 1000
29080: PPUSH
29081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29085: LD_VAR 0 3
29089: PPUSH
29090: LD_INT 81
29092: PUSH
29093: LD_OWVAR 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 91
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: LD_INT 30
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 74
29136: PPUSH
29137: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29141: LD_VAR 0 2
29145: PUSH
29146: LD_INT 80
29148: GREATER
29149: PUSH
29150: LD_VAR 0 3
29154: PPUSH
29155: CALL_OW 301
29159: OR
29160: IFFALSE 29037
// if un then
29162: LD_VAR 0 3
29166: IFFALSE 29177
// RemoveUnit ( un ) ;
29168: LD_VAR 0 3
29172: PPUSH
29173: CALL_OW 64
// end ;
29177: PPOPN 3
29179: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29180: LD_EXP 92
29184: IFFALSE 29300
29186: GO 29188
29188: DISABLE
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29194: LD_ADDR_VAR 0 2
29198: PUSH
29199: LD_INT 81
29201: PUSH
29202: LD_OWVAR 2
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 21
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PPUSH
29225: CALL_OW 69
29229: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29230: LD_STRING playComputer()
29232: PPUSH
29233: CALL_OW 559
// if not tmp then
29237: LD_VAR 0 2
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29300
// for i in tmp do
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: FOR_IN
29257: IFFALSE 29298
// for j := 1 to 4 do
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: DOUBLE
29265: LD_INT 1
29267: DEC
29268: ST_TO_ADDR
29269: LD_INT 4
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29294
// SetSkill ( i , j , 10 ) ;
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 3
29284: PPUSH
29285: LD_INT 10
29287: PPUSH
29288: CALL_OW 237
29292: GO 29272
29294: POP
29295: POP
29296: GO 29256
29298: POP
29299: POP
// end ;
29300: PPOPN 3
29302: END
// every 0 0$1 trigger s30 do var i , tmp ;
29303: LD_EXP 93
29307: IFFALSE 29376
29309: GO 29311
29311: DISABLE
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_INT 22
29323: PUSH
29324: LD_OWVAR 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: ST_TO_ADDR
// if not tmp then
29338: LD_VAR 0 2
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29376
// for i in tmp do
29347: LD_ADDR_VAR 0 1
29351: PUSH
29352: LD_VAR 0 2
29356: PUSH
29357: FOR_IN
29358: IFFALSE 29374
// SetLives ( i , 300 ) ;
29360: LD_VAR 0 1
29364: PPUSH
29365: LD_INT 300
29367: PPUSH
29368: CALL_OW 234
29372: GO 29357
29374: POP
29375: POP
// end ;
29376: PPOPN 2
29378: END
// every 0 0$1 trigger s60 do var i , tmp ;
29379: LD_EXP 94
29383: IFFALSE 29452
29385: GO 29387
29387: DISABLE
29388: LD_INT 0
29390: PPUSH
29391: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29392: LD_ADDR_VAR 0 2
29396: PUSH
29397: LD_INT 22
29399: PUSH
29400: LD_OWVAR 2
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 2
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29452
// for i in tmp do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29450
// SetLives ( i , 600 ) ;
29436: LD_VAR 0 1
29440: PPUSH
29441: LD_INT 600
29443: PPUSH
29444: CALL_OW 234
29448: GO 29433
29450: POP
29451: POP
// end ;
29452: PPOPN 2
29454: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29455: LD_INT 0
29457: PPUSH
// case cmd of 301 :
29458: LD_VAR 0 1
29462: PUSH
29463: LD_INT 301
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29471
29469: GO 29503
29471: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29472: LD_VAR 0 6
29476: PPUSH
29477: LD_VAR 0 7
29481: PPUSH
29482: LD_VAR 0 8
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_VAR 0 5
29496: PPUSH
29497: CALL 30712 0 5
29501: GO 29624
29503: LD_INT 302
29505: DOUBLE
29506: EQUAL
29507: IFTRUE 29511
29509: GO 29548
29511: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29512: LD_VAR 0 6
29516: PPUSH
29517: LD_VAR 0 7
29521: PPUSH
29522: LD_VAR 0 8
29526: PPUSH
29527: LD_VAR 0 9
29531: PPUSH
29532: LD_VAR 0 4
29536: PPUSH
29537: LD_VAR 0 5
29541: PPUSH
29542: CALL 30803 0 6
29546: GO 29624
29548: LD_INT 303
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29593
29556: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29557: LD_VAR 0 6
29561: PPUSH
29562: LD_VAR 0 7
29566: PPUSH
29567: LD_VAR 0 8
29571: PPUSH
29572: LD_VAR 0 9
29576: PPUSH
29577: LD_VAR 0 4
29581: PPUSH
29582: LD_VAR 0 5
29586: PPUSH
29587: CALL 29629 0 6
29591: GO 29624
29593: LD_INT 304
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 29623
29601: POP
// hHackTeleport ( unit , x , y ) ; end ;
29602: LD_VAR 0 2
29606: PPUSH
29607: LD_VAR 0 4
29611: PPUSH
29612: LD_VAR 0 5
29616: PPUSH
29617: CALL 31396 0 3
29621: GO 29624
29623: POP
// end ;
29624: LD_VAR 0 12
29628: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29633: LD_VAR 0 1
29637: PUSH
29638: LD_INT 1
29640: LESS
29641: PUSH
29642: LD_VAR 0 1
29646: PUSH
29647: LD_INT 3
29649: GREATER
29650: OR
29651: PUSH
29652: LD_VAR 0 5
29656: PPUSH
29657: LD_VAR 0 6
29661: PPUSH
29662: CALL_OW 428
29666: OR
29667: IFFALSE 29671
// exit ;
29669: GO 30399
// uc_side := your_side ;
29671: LD_ADDR_OWVAR 20
29675: PUSH
29676: LD_OWVAR 2
29680: ST_TO_ADDR
// uc_nation := nation ;
29681: LD_ADDR_OWVAR 21
29685: PUSH
29686: LD_VAR 0 1
29690: ST_TO_ADDR
// bc_level = 1 ;
29691: LD_ADDR_OWVAR 43
29695: PUSH
29696: LD_INT 1
29698: ST_TO_ADDR
// case btype of 1 :
29699: LD_VAR 0 2
29703: PUSH
29704: LD_INT 1
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29723
29712: POP
// bc_type := b_depot ; 2 :
29713: LD_ADDR_OWVAR 42
29717: PUSH
29718: LD_INT 0
29720: ST_TO_ADDR
29721: GO 30343
29723: LD_INT 2
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29731
29729: GO 29742
29731: POP
// bc_type := b_warehouse ; 3 :
29732: LD_ADDR_OWVAR 42
29736: PUSH
29737: LD_INT 1
29739: ST_TO_ADDR
29740: GO 30343
29742: LD_INT 3
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29761
29750: POP
// bc_type := b_lab ; 4 .. 9 :
29751: LD_ADDR_OWVAR 42
29755: PUSH
29756: LD_INT 6
29758: ST_TO_ADDR
29759: GO 30343
29761: LD_INT 4
29763: DOUBLE
29764: GREATEREQUAL
29765: IFFALSE 29773
29767: LD_INT 9
29769: DOUBLE
29770: LESSEQUAL
29771: IFTRUE 29775
29773: GO 29835
29775: POP
// begin bc_type := b_lab_half ;
29776: LD_ADDR_OWVAR 42
29780: PUSH
29781: LD_INT 7
29783: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29784: LD_ADDR_OWVAR 44
29788: PUSH
29789: LD_INT 10
29791: PUSH
29792: LD_INT 11
29794: PUSH
29795: LD_INT 12
29797: PUSH
29798: LD_INT 15
29800: PUSH
29801: LD_INT 14
29803: PUSH
29804: LD_INT 13
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: PUSH
29815: LD_VAR 0 2
29819: PUSH
29820: LD_INT 3
29822: MINUS
29823: ARRAY
29824: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29825: LD_ADDR_OWVAR 45
29829: PUSH
29830: LD_INT 9
29832: ST_TO_ADDR
// end ; 10 .. 13 :
29833: GO 30343
29835: LD_INT 10
29837: DOUBLE
29838: GREATEREQUAL
29839: IFFALSE 29847
29841: LD_INT 13
29843: DOUBLE
29844: LESSEQUAL
29845: IFTRUE 29849
29847: GO 29926
29849: POP
// begin bc_type := b_lab_full ;
29850: LD_ADDR_OWVAR 42
29854: PUSH
29855: LD_INT 8
29857: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29858: LD_ADDR_OWVAR 44
29862: PUSH
29863: LD_INT 10
29865: PUSH
29866: LD_INT 12
29868: PUSH
29869: LD_INT 14
29871: PUSH
29872: LD_INT 13
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: PUSH
29881: LD_VAR 0 2
29885: PUSH
29886: LD_INT 9
29888: MINUS
29889: ARRAY
29890: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29891: LD_ADDR_OWVAR 45
29895: PUSH
29896: LD_INT 11
29898: PUSH
29899: LD_INT 15
29901: PUSH
29902: LD_INT 12
29904: PUSH
29905: LD_INT 15
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: PUSH
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 9
29921: MINUS
29922: ARRAY
29923: ST_TO_ADDR
// end ; 14 :
29924: GO 30343
29926: LD_INT 14
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29945
29934: POP
// bc_type := b_workshop ; 15 :
29935: LD_ADDR_OWVAR 42
29939: PUSH
29940: LD_INT 2
29942: ST_TO_ADDR
29943: GO 30343
29945: LD_INT 15
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 29964
29953: POP
// bc_type := b_factory ; 16 :
29954: LD_ADDR_OWVAR 42
29958: PUSH
29959: LD_INT 3
29961: ST_TO_ADDR
29962: GO 30343
29964: LD_INT 16
29966: DOUBLE
29967: EQUAL
29968: IFTRUE 29972
29970: GO 29983
29972: POP
// bc_type := b_ext_gun ; 17 :
29973: LD_ADDR_OWVAR 42
29977: PUSH
29978: LD_INT 17
29980: ST_TO_ADDR
29981: GO 30343
29983: LD_INT 17
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30019
29991: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29992: LD_ADDR_OWVAR 42
29996: PUSH
29997: LD_INT 19
29999: PUSH
30000: LD_INT 23
30002: PUSH
30003: LD_INT 19
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: PUSH
30011: LD_VAR 0 1
30015: ARRAY
30016: ST_TO_ADDR
30017: GO 30343
30019: LD_INT 18
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30038
30027: POP
// bc_type := b_ext_radar ; 19 :
30028: LD_ADDR_OWVAR 42
30032: PUSH
30033: LD_INT 20
30035: ST_TO_ADDR
30036: GO 30343
30038: LD_INT 19
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30057
30046: POP
// bc_type := b_ext_radio ; 20 :
30047: LD_ADDR_OWVAR 42
30051: PUSH
30052: LD_INT 22
30054: ST_TO_ADDR
30055: GO 30343
30057: LD_INT 20
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30076
30065: POP
// bc_type := b_ext_siberium ; 21 :
30066: LD_ADDR_OWVAR 42
30070: PUSH
30071: LD_INT 21
30073: ST_TO_ADDR
30074: GO 30343
30076: LD_INT 21
30078: DOUBLE
30079: EQUAL
30080: IFTRUE 30084
30082: GO 30095
30084: POP
// bc_type := b_ext_computer ; 22 :
30085: LD_ADDR_OWVAR 42
30089: PUSH
30090: LD_INT 24
30092: ST_TO_ADDR
30093: GO 30343
30095: LD_INT 22
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30114
30103: POP
// bc_type := b_ext_track ; 23 :
30104: LD_ADDR_OWVAR 42
30108: PUSH
30109: LD_INT 16
30111: ST_TO_ADDR
30112: GO 30343
30114: LD_INT 23
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30133
30122: POP
// bc_type := b_ext_laser ; 24 :
30123: LD_ADDR_OWVAR 42
30127: PUSH
30128: LD_INT 25
30130: ST_TO_ADDR
30131: GO 30343
30133: LD_INT 24
30135: DOUBLE
30136: EQUAL
30137: IFTRUE 30141
30139: GO 30152
30141: POP
// bc_type := b_control_tower ; 25 :
30142: LD_ADDR_OWVAR 42
30146: PUSH
30147: LD_INT 36
30149: ST_TO_ADDR
30150: GO 30343
30152: LD_INT 25
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30171
30160: POP
// bc_type := b_breastwork ; 26 :
30161: LD_ADDR_OWVAR 42
30165: PUSH
30166: LD_INT 31
30168: ST_TO_ADDR
30169: GO 30343
30171: LD_INT 26
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30190
30179: POP
// bc_type := b_bunker ; 27 :
30180: LD_ADDR_OWVAR 42
30184: PUSH
30185: LD_INT 32
30187: ST_TO_ADDR
30188: GO 30343
30190: LD_INT 27
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30209
30198: POP
// bc_type := b_turret ; 28 :
30199: LD_ADDR_OWVAR 42
30203: PUSH
30204: LD_INT 33
30206: ST_TO_ADDR
30207: GO 30343
30209: LD_INT 28
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 30228
30217: POP
// bc_type := b_armoury ; 29 :
30218: LD_ADDR_OWVAR 42
30222: PUSH
30223: LD_INT 4
30225: ST_TO_ADDR
30226: GO 30343
30228: LD_INT 29
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30247
30236: POP
// bc_type := b_barracks ; 30 :
30237: LD_ADDR_OWVAR 42
30241: PUSH
30242: LD_INT 5
30244: ST_TO_ADDR
30245: GO 30343
30247: LD_INT 30
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30266
30255: POP
// bc_type := b_solar_power ; 31 :
30256: LD_ADDR_OWVAR 42
30260: PUSH
30261: LD_INT 27
30263: ST_TO_ADDR
30264: GO 30343
30266: LD_INT 31
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30285
30274: POP
// bc_type := b_oil_power ; 32 :
30275: LD_ADDR_OWVAR 42
30279: PUSH
30280: LD_INT 26
30282: ST_TO_ADDR
30283: GO 30343
30285: LD_INT 32
30287: DOUBLE
30288: EQUAL
30289: IFTRUE 30293
30291: GO 30304
30293: POP
// bc_type := b_siberite_power ; 33 :
30294: LD_ADDR_OWVAR 42
30298: PUSH
30299: LD_INT 28
30301: ST_TO_ADDR
30302: GO 30343
30304: LD_INT 33
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30323
30312: POP
// bc_type := b_oil_mine ; 34 :
30313: LD_ADDR_OWVAR 42
30317: PUSH
30318: LD_INT 29
30320: ST_TO_ADDR
30321: GO 30343
30323: LD_INT 34
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30342
30331: POP
// bc_type := b_siberite_mine ; end ;
30332: LD_ADDR_OWVAR 42
30336: PUSH
30337: LD_INT 30
30339: ST_TO_ADDR
30340: GO 30343
30342: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30343: LD_ADDR_VAR 0 8
30347: PUSH
30348: LD_VAR 0 5
30352: PPUSH
30353: LD_VAR 0 6
30357: PPUSH
30358: LD_VAR 0 3
30362: PPUSH
30363: CALL_OW 47
30367: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30368: LD_OWVAR 42
30372: PUSH
30373: LD_INT 32
30375: PUSH
30376: LD_INT 33
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: IN
30383: IFFALSE 30399
// PlaceWeaponTurret ( b , weapon ) ;
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: CALL_OW 431
// end ;
30399: LD_VAR 0 7
30403: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30410: LD_ADDR_VAR 0 4
30414: PUSH
30415: LD_INT 22
30417: PUSH
30418: LD_OWVAR 2
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 30
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 69
30463: ST_TO_ADDR
// if not tmp then
30464: LD_VAR 0 4
30468: NOT
30469: IFFALSE 30473
// exit ;
30471: GO 30532
// for i in tmp do
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_VAR 0 4
30482: PUSH
30483: FOR_IN
30484: IFFALSE 30530
// for j = 1 to 3 do
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: DOUBLE
30492: LD_INT 1
30494: DEC
30495: ST_TO_ADDR
30496: LD_INT 3
30498: PUSH
30499: FOR_TO
30500: IFFALSE 30526
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30502: LD_VAR 0 2
30506: PPUSH
30507: CALL_OW 274
30511: PPUSH
30512: LD_VAR 0 3
30516: PPUSH
30517: LD_INT 99999
30519: PPUSH
30520: CALL_OW 277
30524: GO 30499
30526: POP
30527: POP
30528: GO 30483
30530: POP
30531: POP
// end ;
30532: LD_VAR 0 1
30536: RET
// export function hHackSetLevel10 ; var i , j ; begin
30537: LD_INT 0
30539: PPUSH
30540: PPUSH
30541: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_INT 21
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PPUSH
30557: CALL_OW 69
30561: PUSH
30562: FOR_IN
30563: IFFALSE 30615
// if IsSelected ( i ) then
30565: LD_VAR 0 2
30569: PPUSH
30570: CALL_OW 306
30574: IFFALSE 30613
// begin for j := 1 to 4 do
30576: LD_ADDR_VAR 0 3
30580: PUSH
30581: DOUBLE
30582: LD_INT 1
30584: DEC
30585: ST_TO_ADDR
30586: LD_INT 4
30588: PUSH
30589: FOR_TO
30590: IFFALSE 30611
// SetSkill ( i , j , 10 ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: LD_INT 10
30604: PPUSH
30605: CALL_OW 237
30609: GO 30589
30611: POP
30612: POP
// end ;
30613: GO 30562
30615: POP
30616: POP
// end ;
30617: LD_VAR 0 1
30621: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
30626: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_INT 22
30634: PUSH
30635: LD_OWVAR 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 21
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 69
30662: PUSH
30663: FOR_IN
30664: IFFALSE 30705
// begin for j := 1 to 4 do
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: DOUBLE
30672: LD_INT 1
30674: DEC
30675: ST_TO_ADDR
30676: LD_INT 4
30678: PUSH
30679: FOR_TO
30680: IFFALSE 30701
// SetSkill ( i , j , 10 ) ;
30682: LD_VAR 0 2
30686: PPUSH
30687: LD_VAR 0 3
30691: PPUSH
30692: LD_INT 10
30694: PPUSH
30695: CALL_OW 237
30699: GO 30679
30701: POP
30702: POP
// end ;
30703: GO 30663
30705: POP
30706: POP
// end ;
30707: LD_VAR 0 1
30711: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30712: LD_INT 0
30714: PPUSH
// uc_side := your_side ;
30715: LD_ADDR_OWVAR 20
30719: PUSH
30720: LD_OWVAR 2
30724: ST_TO_ADDR
// uc_nation := nation ;
30725: LD_ADDR_OWVAR 21
30729: PUSH
30730: LD_VAR 0 1
30734: ST_TO_ADDR
// InitHc ;
30735: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30739: LD_INT 0
30741: PPUSH
30742: LD_VAR 0 2
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30756: LD_VAR 0 4
30760: PPUSH
30761: LD_VAR 0 5
30765: PPUSH
30766: CALL_OW 428
30770: PUSH
30771: LD_INT 0
30773: EQUAL
30774: IFFALSE 30798
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30776: CALL_OW 44
30780: PPUSH
30781: LD_VAR 0 4
30785: PPUSH
30786: LD_VAR 0 5
30790: PPUSH
30791: LD_INT 1
30793: PPUSH
30794: CALL_OW 48
// end ;
30798: LD_VAR 0 6
30802: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30803: LD_INT 0
30805: PPUSH
30806: PPUSH
// uc_side := your_side ;
30807: LD_ADDR_OWVAR 20
30811: PUSH
30812: LD_OWVAR 2
30816: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30817: LD_VAR 0 1
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 5
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: IN
30844: IFFALSE 30856
// uc_nation := nation_american else
30846: LD_ADDR_OWVAR 21
30850: PUSH
30851: LD_INT 1
30853: ST_TO_ADDR
30854: GO 30899
// if chassis in [ 11 , 12 , 13 , 14 ] then
30856: LD_VAR 0 1
30860: PUSH
30861: LD_INT 11
30863: PUSH
30864: LD_INT 12
30866: PUSH
30867: LD_INT 13
30869: PUSH
30870: LD_INT 14
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: IN
30879: IFFALSE 30891
// uc_nation := nation_arabian else
30881: LD_ADDR_OWVAR 21
30885: PUSH
30886: LD_INT 2
30888: ST_TO_ADDR
30889: GO 30899
// uc_nation := nation_russian ;
30891: LD_ADDR_OWVAR 21
30895: PUSH
30896: LD_INT 3
30898: ST_TO_ADDR
// vc_chassis := chassis ;
30899: LD_ADDR_OWVAR 37
30903: PUSH
30904: LD_VAR 0 1
30908: ST_TO_ADDR
// vc_engine := engine ;
30909: LD_ADDR_OWVAR 39
30913: PUSH
30914: LD_VAR 0 2
30918: ST_TO_ADDR
// vc_control := control ;
30919: LD_ADDR_OWVAR 38
30923: PUSH
30924: LD_VAR 0 3
30928: ST_TO_ADDR
// vc_weapon := weapon ;
30929: LD_ADDR_OWVAR 40
30933: PUSH
30934: LD_VAR 0 4
30938: ST_TO_ADDR
// un := CreateVehicle ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: CALL_OW 45
30948: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30949: LD_VAR 0 8
30953: PPUSH
30954: LD_INT 0
30956: PPUSH
30957: LD_INT 5
30959: PPUSH
30960: CALL_OW 12
30964: PPUSH
30965: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30969: LD_VAR 0 8
30973: PPUSH
30974: LD_VAR 0 5
30978: PPUSH
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_INT 1
30986: PPUSH
30987: CALL_OW 48
// end ;
30991: LD_VAR 0 7
30995: RET
// export hInvincible ; every 1 do
30996: GO 30998
30998: DISABLE
// hInvincible := [ ] ;
30999: LD_ADDR_EXP 95
31003: PUSH
31004: EMPTY
31005: ST_TO_ADDR
31006: END
// every 10 do var i ;
31007: GO 31009
31009: DISABLE
31010: LD_INT 0
31012: PPUSH
// begin enable ;
31013: ENABLE
// if not hInvincible then
31014: LD_EXP 95
31018: NOT
31019: IFFALSE 31023
// exit ;
31021: GO 31067
// for i in hInvincible do
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: LD_EXP 95
31032: PUSH
31033: FOR_IN
31034: IFFALSE 31065
// if GetLives ( i ) < 1000 then
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 256
31045: PUSH
31046: LD_INT 1000
31048: LESS
31049: IFFALSE 31063
// SetLives ( i , 1000 ) ;
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_INT 1000
31058: PPUSH
31059: CALL_OW 234
31063: GO 31033
31065: POP
31066: POP
// end ;
31067: PPOPN 1
31069: END
// export function hHackInvincible ; var i ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31074: LD_ADDR_VAR 0 2
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 21
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL_OW 69
31111: PUSH
31112: FOR_IN
31113: IFFALSE 31174
// if IsSelected ( i ) then
31115: LD_VAR 0 2
31119: PPUSH
31120: CALL_OW 306
31124: IFFALSE 31172
// begin if i in hInvincible then
31126: LD_VAR 0 2
31130: PUSH
31131: LD_EXP 95
31135: IN
31136: IFFALSE 31156
// hInvincible := hInvincible diff i else
31138: LD_ADDR_EXP 95
31142: PUSH
31143: LD_EXP 95
31147: PUSH
31148: LD_VAR 0 2
31152: DIFF
31153: ST_TO_ADDR
31154: GO 31172
// hInvincible := hInvincible union i ;
31156: LD_ADDR_EXP 95
31160: PUSH
31161: LD_EXP 95
31165: PUSH
31166: LD_VAR 0 2
31170: UNION
31171: ST_TO_ADDR
// end ;
31172: GO 31112
31174: POP
31175: POP
// end ;
31176: LD_VAR 0 1
31180: RET
// export function hHackInvisible ; var i , j ; begin
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31186: LD_ADDR_VAR 0 2
31190: PUSH
31191: LD_INT 21
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 69
31205: PUSH
31206: FOR_IN
31207: IFFALSE 31231
// if IsSelected ( i ) then
31209: LD_VAR 0 2
31213: PPUSH
31214: CALL_OW 306
31218: IFFALSE 31229
// ComForceInvisible ( i ) ;
31220: LD_VAR 0 2
31224: PPUSH
31225: CALL_OW 496
31229: GO 31206
31231: POP
31232: POP
// end ;
31233: LD_VAR 0 1
31237: RET
// export function hHackChangeYourSide ; begin
31238: LD_INT 0
31240: PPUSH
// if your_side = 8 then
31241: LD_OWVAR 2
31245: PUSH
31246: LD_INT 8
31248: EQUAL
31249: IFFALSE 31261
// your_side := 0 else
31251: LD_ADDR_OWVAR 2
31255: PUSH
31256: LD_INT 0
31258: ST_TO_ADDR
31259: GO 31275
// your_side := your_side + 1 ;
31261: LD_ADDR_OWVAR 2
31265: PUSH
31266: LD_OWVAR 2
31270: PUSH
31271: LD_INT 1
31273: PLUS
31274: ST_TO_ADDR
// end ;
31275: LD_VAR 0 1
31279: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31280: LD_INT 0
31282: PPUSH
31283: PPUSH
31284: PPUSH
// for i in all_units do
31285: LD_ADDR_VAR 0 2
31289: PUSH
31290: LD_OWVAR 3
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31374
// if IsSelected ( i ) then
31298: LD_VAR 0 2
31302: PPUSH
31303: CALL_OW 306
31307: IFFALSE 31372
// begin j := GetSide ( i ) ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 2
31318: PPUSH
31319: CALL_OW 255
31323: ST_TO_ADDR
// if j = 8 then
31324: LD_VAR 0 3
31328: PUSH
31329: LD_INT 8
31331: EQUAL
31332: IFFALSE 31344
// j := 0 else
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
31342: GO 31358
// j := j + 1 ;
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_INT 1
31356: PLUS
31357: ST_TO_ADDR
// SetSide ( i , j ) ;
31358: LD_VAR 0 2
31362: PPUSH
31363: LD_VAR 0 3
31367: PPUSH
31368: CALL_OW 235
// end ;
31372: GO 31295
31374: POP
31375: POP
// end ;
31376: LD_VAR 0 1
31380: RET
// export function hHackFog ; begin
31381: LD_INT 0
31383: PPUSH
// FogOff ( true ) ;
31384: LD_INT 1
31386: PPUSH
31387: CALL_OW 344
// end ;
31391: LD_VAR 0 1
31395: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31396: LD_INT 0
31398: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_VAR 0 3
31413: PPUSH
31414: LD_INT 1
31416: PPUSH
31417: LD_INT 1
31419: PPUSH
31420: CALL_OW 483
// CenterOnXY ( x , y ) ;
31424: LD_VAR 0 2
31428: PPUSH
31429: LD_VAR 0 3
31433: PPUSH
31434: CALL_OW 84
// end ;
31438: LD_VAR 0 4
31442: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31447: LD_VAR 0 1
31451: NOT
31452: PUSH
31453: LD_VAR 0 2
31457: PPUSH
31458: LD_VAR 0 3
31462: PPUSH
31463: CALL_OW 488
31467: NOT
31468: OR
31469: PUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: CALL_OW 266
31479: PUSH
31480: LD_INT 3
31482: NONEQUAL
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 247
31493: PUSH
31494: LD_INT 1
31496: EQUAL
31497: NOT
31498: AND
31499: OR
31500: IFFALSE 31504
// exit ;
31502: GO 31786
// if GetType ( factory ) = unit_human then
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 247
31513: PUSH
31514: LD_INT 1
31516: EQUAL
31517: IFFALSE 31534
// factory := IsInUnit ( factory ) ;
31519: LD_ADDR_VAR 0 1
31523: PUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 310
31533: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 266
31543: PUSH
31544: LD_INT 3
31546: NONEQUAL
31547: IFFALSE 31551
// exit ;
31549: GO 31786
// for i := 1 to Count ( factoryWaypoints ) do
31551: LD_ADDR_VAR 0 5
31555: PUSH
31556: DOUBLE
31557: LD_INT 1
31559: DEC
31560: ST_TO_ADDR
31561: LD_EXP 96
31565: PPUSH
31566: CALL 40432 0 1
31570: PUSH
31571: FOR_TO
31572: IFFALSE 31734
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
31574: LD_VAR 0 2
31578: PPUSH
31579: LD_VAR 0 3
31583: PPUSH
31584: CALL_OW 428
31588: PUSH
31589: LD_EXP 96
31593: PUSH
31594: LD_VAR 0 5
31598: ARRAY
31599: PUSH
31600: LD_INT 2
31602: ARRAY
31603: EQUAL
31604: IFFALSE 31636
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31606: LD_ADDR_EXP 96
31610: PUSH
31611: LD_EXP 96
31615: PPUSH
31616: LD_VAR 0 5
31620: PPUSH
31621: CALL_OW 3
31625: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31626: CALL 31791 0 0
// exit ;
31630: POP
31631: POP
31632: GO 31786
// end else
31634: GO 31732
// if factory = factoryWaypoints [ i ] [ 2 ] then
31636: LD_VAR 0 1
31640: PUSH
31641: LD_EXP 96
31645: PUSH
31646: LD_VAR 0 5
31650: ARRAY
31651: PUSH
31652: LD_INT 2
31654: ARRAY
31655: EQUAL
31656: IFFALSE 31732
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31658: LD_ADDR_EXP 96
31662: PUSH
31663: LD_EXP 96
31667: PPUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: CALL_OW 3
31677: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31678: LD_ADDR_EXP 96
31682: PUSH
31683: LD_EXP 96
31687: PPUSH
31688: LD_VAR 0 1
31692: PPUSH
31693: CALL_OW 255
31697: PUSH
31698: LD_VAR 0 1
31702: PUSH
31703: LD_VAR 0 2
31707: PUSH
31708: LD_VAR 0 3
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: PPUSH
31719: CALL 76041 0 2
31723: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31724: CALL 31791 0 0
// exit ;
31728: POP
31729: POP
31730: GO 31786
// end ; end ;
31732: GO 31571
31734: POP
31735: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31736: LD_ADDR_EXP 96
31740: PUSH
31741: LD_EXP 96
31745: PPUSH
31746: LD_VAR 0 1
31750: PPUSH
31751: CALL_OW 255
31755: PUSH
31756: LD_VAR 0 1
31760: PUSH
31761: LD_VAR 0 2
31765: PUSH
31766: LD_VAR 0 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: PPUSH
31777: CALL 76041 0 2
31781: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31782: CALL 31791 0 0
// end ;
31786: LD_VAR 0 4
31790: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31791: LD_INT 0
31793: PPUSH
31794: PPUSH
31795: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31796: LD_STRING resetFactoryWaypoint();
31798: PPUSH
31799: CALL_OW 559
// if factoryWaypoints then
31803: LD_EXP 96
31807: IFFALSE 31928
// begin list := factoryWaypoints ;
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_EXP 96
31818: ST_TO_ADDR
// for i := 1 to list do
31819: LD_ADDR_VAR 0 2
31823: PUSH
31824: DOUBLE
31825: LD_INT 1
31827: DEC
31828: ST_TO_ADDR
31829: LD_VAR 0 3
31833: PUSH
31834: FOR_TO
31835: IFFALSE 31926
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31837: LD_STRING setFactoryWaypointXY(
31839: PUSH
31840: LD_VAR 0 3
31844: PUSH
31845: LD_VAR 0 2
31849: ARRAY
31850: PUSH
31851: LD_INT 1
31853: ARRAY
31854: STR
31855: PUSH
31856: LD_STRING ,
31858: STR
31859: PUSH
31860: LD_VAR 0 3
31864: PUSH
31865: LD_VAR 0 2
31869: ARRAY
31870: PUSH
31871: LD_INT 2
31873: ARRAY
31874: STR
31875: PUSH
31876: LD_STRING ,
31878: STR
31879: PUSH
31880: LD_VAR 0 3
31884: PUSH
31885: LD_VAR 0 2
31889: ARRAY
31890: PUSH
31891: LD_INT 3
31893: ARRAY
31894: STR
31895: PUSH
31896: LD_STRING ,
31898: STR
31899: PUSH
31900: LD_VAR 0 3
31904: PUSH
31905: LD_VAR 0 2
31909: ARRAY
31910: PUSH
31911: LD_INT 4
31913: ARRAY
31914: STR
31915: PUSH
31916: LD_STRING )
31918: STR
31919: PPUSH
31920: CALL_OW 559
31924: GO 31834
31926: POP
31927: POP
// end ; end ;
31928: LD_VAR 0 1
31932: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31933: LD_INT 0
31935: PPUSH
// if HexInfo ( x , y ) = warehouse then
31936: LD_VAR 0 2
31940: PPUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: CALL_OW 428
31950: PUSH
31951: LD_VAR 0 1
31955: EQUAL
31956: IFFALSE 31983
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31958: LD_ADDR_EXP 98
31962: PUSH
31963: LD_EXP 98
31967: PPUSH
31968: LD_VAR 0 1
31972: PPUSH
31973: LD_INT 0
31975: PPUSH
31976: CALL_OW 1
31980: ST_TO_ADDR
31981: GO 32034
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31983: LD_ADDR_EXP 98
31987: PUSH
31988: LD_EXP 98
31992: PPUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: LD_VAR 0 1
32002: PPUSH
32003: CALL_OW 255
32007: PUSH
32008: LD_VAR 0 1
32012: PUSH
32013: LD_VAR 0 2
32017: PUSH
32018: LD_VAR 0 3
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 1
32033: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32034: CALL 32043 0 0
// end ;
32038: LD_VAR 0 4
32042: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32043: LD_INT 0
32045: PPUSH
32046: PPUSH
32047: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32048: LD_STRING resetWarehouseGatheringPoints();
32050: PPUSH
32051: CALL_OW 559
// if warehouseGatheringPoints then
32055: LD_EXP 98
32059: IFFALSE 32185
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32061: LD_ADDR_VAR 0 3
32065: PUSH
32066: LD_EXP 98
32070: PPUSH
32071: CALL 79809 0 1
32075: ST_TO_ADDR
// for i := 1 to list do
32076: LD_ADDR_VAR 0 2
32080: PUSH
32081: DOUBLE
32082: LD_INT 1
32084: DEC
32085: ST_TO_ADDR
32086: LD_VAR 0 3
32090: PUSH
32091: FOR_TO
32092: IFFALSE 32183
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32094: LD_STRING setWarehouseGatheringPointXY(
32096: PUSH
32097: LD_VAR 0 3
32101: PUSH
32102: LD_VAR 0 2
32106: ARRAY
32107: PUSH
32108: LD_INT 1
32110: ARRAY
32111: STR
32112: PUSH
32113: LD_STRING ,
32115: STR
32116: PUSH
32117: LD_VAR 0 3
32121: PUSH
32122: LD_VAR 0 2
32126: ARRAY
32127: PUSH
32128: LD_INT 2
32130: ARRAY
32131: STR
32132: PUSH
32133: LD_STRING ,
32135: STR
32136: PUSH
32137: LD_VAR 0 3
32141: PUSH
32142: LD_VAR 0 2
32146: ARRAY
32147: PUSH
32148: LD_INT 3
32150: ARRAY
32151: STR
32152: PUSH
32153: LD_STRING ,
32155: STR
32156: PUSH
32157: LD_VAR 0 3
32161: PUSH
32162: LD_VAR 0 2
32166: ARRAY
32167: PUSH
32168: LD_INT 4
32170: ARRAY
32171: STR
32172: PUSH
32173: LD_STRING )
32175: STR
32176: PPUSH
32177: CALL_OW 559
32181: GO 32091
32183: POP
32184: POP
// end ; end ;
32185: LD_VAR 0 1
32189: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32190: LD_EXP 98
32194: IFFALSE 32879
32196: GO 32198
32198: DISABLE
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
32205: PPUSH
32206: PPUSH
32207: PPUSH
32208: PPUSH
32209: PPUSH
// begin enable ;
32210: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_EXP 98
32220: PPUSH
32221: CALL 79809 0 1
32225: ST_TO_ADDR
// if not list then
32226: LD_VAR 0 3
32230: NOT
32231: IFFALSE 32235
// exit ;
32233: GO 32879
// for i := 1 to list do
32235: LD_ADDR_VAR 0 1
32239: PUSH
32240: DOUBLE
32241: LD_INT 1
32243: DEC
32244: ST_TO_ADDR
32245: LD_VAR 0 3
32249: PUSH
32250: FOR_TO
32251: IFFALSE 32877
// begin depot := list [ i ] [ 2 ] ;
32253: LD_ADDR_VAR 0 8
32257: PUSH
32258: LD_VAR 0 3
32262: PUSH
32263: LD_VAR 0 1
32267: ARRAY
32268: PUSH
32269: LD_INT 2
32271: ARRAY
32272: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32273: LD_ADDR_VAR 0 5
32277: PUSH
32278: LD_VAR 0 3
32282: PUSH
32283: LD_VAR 0 1
32287: ARRAY
32288: PUSH
32289: LD_INT 1
32291: ARRAY
32292: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32293: LD_VAR 0 8
32297: PPUSH
32298: CALL_OW 301
32302: PUSH
32303: LD_VAR 0 5
32307: PUSH
32308: LD_VAR 0 8
32312: PPUSH
32313: CALL_OW 255
32317: NONEQUAL
32318: OR
32319: IFFALSE 32348
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32321: LD_ADDR_EXP 98
32325: PUSH
32326: LD_EXP 98
32330: PPUSH
32331: LD_VAR 0 8
32335: PPUSH
32336: LD_INT 0
32338: PPUSH
32339: CALL_OW 1
32343: ST_TO_ADDR
// exit ;
32344: POP
32345: POP
32346: GO 32879
// end ; x := list [ i ] [ 3 ] ;
32348: LD_ADDR_VAR 0 6
32352: PUSH
32353: LD_VAR 0 3
32357: PUSH
32358: LD_VAR 0 1
32362: ARRAY
32363: PUSH
32364: LD_INT 3
32366: ARRAY
32367: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32368: LD_ADDR_VAR 0 7
32372: PUSH
32373: LD_VAR 0 3
32377: PUSH
32378: LD_VAR 0 1
32382: ARRAY
32383: PUSH
32384: LD_INT 4
32386: ARRAY
32387: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32388: LD_ADDR_VAR 0 9
32392: PUSH
32393: LD_VAR 0 6
32397: PPUSH
32398: LD_VAR 0 7
32402: PPUSH
32403: LD_INT 16
32405: PPUSH
32406: CALL 78393 0 3
32410: ST_TO_ADDR
// if not cratesNearbyPoint then
32411: LD_VAR 0 9
32415: NOT
32416: IFFALSE 32422
// exit ;
32418: POP
32419: POP
32420: GO 32879
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32422: LD_ADDR_VAR 0 4
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_VAR 0 5
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: LD_INT 60
32444: PUSH
32445: EMPTY
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 91
32454: PUSH
32455: LD_VAR 0 8
32459: PUSH
32460: LD_INT 6
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 25
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 25
32483: PUSH
32484: LD_INT 16
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: PPUSH
32502: CALL_OW 69
32506: PUSH
32507: LD_VAR 0 8
32511: PPUSH
32512: CALL_OW 313
32516: PPUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 60
32522: PUSH
32523: EMPTY
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 25
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 25
32545: PUSH
32546: LD_INT 16
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 72
32566: UNION
32567: ST_TO_ADDR
// if tmp then
32568: LD_VAR 0 4
32572: IFFALSE 32652
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32574: LD_ADDR_VAR 0 4
32578: PUSH
32579: LD_VAR 0 4
32583: PPUSH
32584: LD_INT 3
32586: PPUSH
32587: CALL 76356 0 2
32591: ST_TO_ADDR
// for j in tmp do
32592: LD_ADDR_VAR 0 2
32596: PUSH
32597: LD_VAR 0 4
32601: PUSH
32602: FOR_IN
32603: IFFALSE 32646
// begin if IsInUnit ( j ) then
32605: LD_VAR 0 2
32609: PPUSH
32610: CALL_OW 310
32614: IFFALSE 32625
// ComExit ( j ) ;
32616: LD_VAR 0 2
32620: PPUSH
32621: CALL 76439 0 1
// AddComCollect ( j , x , y ) ;
32625: LD_VAR 0 2
32629: PPUSH
32630: LD_VAR 0 6
32634: PPUSH
32635: LD_VAR 0 7
32639: PPUSH
32640: CALL_OW 177
// end ;
32644: GO 32602
32646: POP
32647: POP
// exit ;
32648: POP
32649: POP
32650: GO 32879
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32652: LD_ADDR_VAR 0 4
32656: PUSH
32657: LD_INT 22
32659: PUSH
32660: LD_VAR 0 5
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 91
32671: PUSH
32672: LD_VAR 0 8
32676: PUSH
32677: LD_INT 8
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 34
32690: PUSH
32691: LD_INT 12
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 34
32700: PUSH
32701: LD_INT 51
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 34
32710: PUSH
32711: LD_INT 32
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 34
32720: PUSH
32721: LD_INT 89
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: PPUSH
32740: CALL_OW 69
32744: ST_TO_ADDR
// if tmp then
32745: LD_VAR 0 4
32749: IFFALSE 32875
// begin for j in tmp do
32751: LD_ADDR_VAR 0 2
32755: PUSH
32756: LD_VAR 0 4
32760: PUSH
32761: FOR_IN
32762: IFFALSE 32873
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32764: LD_VAR 0 2
32768: PPUSH
32769: CALL_OW 262
32773: PUSH
32774: LD_INT 3
32776: EQUAL
32777: PUSH
32778: LD_VAR 0 2
32782: PPUSH
32783: CALL_OW 261
32787: PUSH
32788: LD_INT 20
32790: GREATER
32791: OR
32792: PUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: CALL_OW 314
32802: NOT
32803: AND
32804: PUSH
32805: LD_VAR 0 2
32809: PPUSH
32810: CALL_OW 263
32814: PUSH
32815: LD_INT 1
32817: NONEQUAL
32818: PUSH
32819: LD_VAR 0 2
32823: PPUSH
32824: CALL_OW 311
32828: OR
32829: AND
32830: IFFALSE 32871
// begin ComCollect ( j , x , y ) ;
32832: LD_VAR 0 2
32836: PPUSH
32837: LD_VAR 0 6
32841: PPUSH
32842: LD_VAR 0 7
32846: PPUSH
32847: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32851: LD_VAR 0 2
32855: PPUSH
32856: LD_VAR 0 8
32860: PPUSH
32861: CALL_OW 172
// exit ;
32865: POP
32866: POP
32867: POP
32868: POP
32869: GO 32879
// end ;
32871: GO 32761
32873: POP
32874: POP
// end ; end ;
32875: GO 32250
32877: POP
32878: POP
// end ; end_of_file
32879: PPOPN 9
32881: END
// export function SOS_UnitDestroyed ( un ) ; begin
32882: LD_INT 0
32884: PPUSH
// ComRadiation ( un ) ;
32885: LD_VAR 0 1
32889: PPUSH
32890: CALL 33951 0 1
// end ;
32894: LD_VAR 0 2
32898: RET
// export function SOS_UnitKamikazed ( un ) ; begin
32899: LD_INT 0
32901: PPUSH
// ComRadiation ( un ) ;
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL 33951 0 1
// end ;
32911: LD_VAR 0 2
32915: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32916: LD_INT 0
32918: PPUSH
// end ;
32919: LD_VAR 0 4
32923: RET
// export function SOS_Command ( cmd ) ; begin
32924: LD_INT 0
32926: PPUSH
// end ;
32927: LD_VAR 0 2
32931: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32932: LD_INT 0
32934: PPUSH
// end ;
32935: LD_VAR 0 6
32939: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
32940: LD_INT 0
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
// if not vehicle or not factory then
32946: LD_VAR 0 1
32950: NOT
32951: PUSH
32952: LD_VAR 0 2
32956: NOT
32957: OR
32958: IFFALSE 32962
// exit ;
32960: GO 33542
// if not factoryWaypoints then
32962: LD_EXP 96
32966: NOT
32967: IFFALSE 32971
// exit ;
32969: GO 33542
// for i := 1 to Count ( factoryWaypoints ) do
32971: LD_ADDR_VAR 0 4
32975: PUSH
32976: DOUBLE
32977: LD_INT 1
32979: DEC
32980: ST_TO_ADDR
32981: LD_EXP 96
32985: PPUSH
32986: CALL 40432 0 1
32990: PUSH
32991: FOR_TO
32992: IFFALSE 33540
// if factoryWaypoints [ i ] [ 2 ] = factory then
32994: LD_EXP 96
32998: PUSH
32999: LD_VAR 0 4
33003: ARRAY
33004: PUSH
33005: LD_INT 2
33007: ARRAY
33008: PUSH
33009: LD_VAR 0 2
33013: EQUAL
33014: IFFALSE 33538
// begin if GetControl ( vehicle ) = control_manual then
33016: LD_VAR 0 1
33020: PPUSH
33021: CALL_OW 263
33025: PUSH
33026: LD_INT 1
33028: EQUAL
33029: IFFALSE 33391
// begin driver := IsDrivenBy ( vehicle ) ;
33031: LD_ADDR_VAR 0 5
33035: PUSH
33036: LD_VAR 0 1
33040: PPUSH
33041: CALL_OW 311
33045: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
33046: LD_VAR 0 5
33050: PUSH
33051: LD_EXP 97
33055: IN
33056: PUSH
33057: LD_VAR 0 1
33061: PUSH
33062: LD_EXP 97
33066: IN
33067: OR
33068: IFFALSE 33074
// exit ;
33070: POP
33071: POP
33072: GO 33542
// if not HasTask ( driver ) then
33074: LD_VAR 0 5
33078: PPUSH
33079: CALL_OW 314
33083: NOT
33084: IFFALSE 33389
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
33086: LD_ADDR_EXP 97
33090: PUSH
33091: LD_EXP 97
33095: PPUSH
33096: LD_VAR 0 5
33100: PPUSH
33101: CALL 76041 0 2
33105: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
33106: LD_ADDR_EXP 97
33110: PUSH
33111: LD_EXP 97
33115: PPUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: CALL 76041 0 2
33125: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33126: LD_ADDR_VAR 0 6
33130: PUSH
33131: LD_EXP 96
33135: PUSH
33136: LD_VAR 0 4
33140: ARRAY
33141: PUSH
33142: LD_INT 3
33144: ARRAY
33145: PPUSH
33146: LD_EXP 96
33150: PUSH
33151: LD_VAR 0 4
33155: ARRAY
33156: PUSH
33157: LD_INT 4
33159: ARRAY
33160: PPUSH
33161: CALL_OW 428
33165: ST_TO_ADDR
// if hex then
33166: LD_VAR 0 6
33170: IFFALSE 33188
// ComMoveUnit ( driver , hex ) else
33172: LD_VAR 0 5
33176: PPUSH
33177: LD_VAR 0 6
33181: PPUSH
33182: CALL_OW 112
33186: GO 33272
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
33188: LD_VAR 0 1
33192: PPUSH
33193: LD_EXP 96
33197: PUSH
33198: LD_VAR 0 4
33202: ARRAY
33203: PUSH
33204: LD_INT 3
33206: ARRAY
33207: PPUSH
33208: LD_EXP 96
33212: PUSH
33213: LD_VAR 0 4
33217: ARRAY
33218: PUSH
33219: LD_INT 4
33221: ARRAY
33222: PPUSH
33223: CALL_OW 297
33227: PUSH
33228: LD_INT 0
33230: GREATER
33231: IFFALSE 33272
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33233: LD_VAR 0 5
33237: PPUSH
33238: LD_EXP 96
33242: PUSH
33243: LD_VAR 0 4
33247: ARRAY
33248: PUSH
33249: LD_INT 3
33251: ARRAY
33252: PPUSH
33253: LD_EXP 96
33257: PUSH
33258: LD_VAR 0 4
33262: ARRAY
33263: PUSH
33264: LD_INT 4
33266: ARRAY
33267: PPUSH
33268: CALL_OW 111
// AddComExitVehicle ( driver ) ;
33272: LD_VAR 0 5
33276: PPUSH
33277: CALL_OW 181
// if Multiplayer then
33281: LD_OWVAR 4
33285: IFFALSE 33334
// begin repeat wait ( 10 ) ;
33287: LD_INT 10
33289: PPUSH
33290: CALL_OW 67
// until not IsInUnit ( driver ) ;
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 310
33303: NOT
33304: IFFALSE 33287
// if not HasTask ( driver ) then
33306: LD_VAR 0 5
33310: PPUSH
33311: CALL_OW 314
33315: NOT
33316: IFFALSE 33332
// ComEnterUnit ( driver , factory ) ;
33318: LD_VAR 0 5
33322: PPUSH
33323: LD_VAR 0 2
33327: PPUSH
33328: CALL_OW 120
// end else
33332: GO 33348
// AddComEnterUnit ( driver , factory ) ;
33334: LD_VAR 0 5
33338: PPUSH
33339: LD_VAR 0 2
33343: PPUSH
33344: CALL_OW 180
// wait ( 0 0$1 ) ;
33348: LD_INT 35
33350: PPUSH
33351: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
33355: LD_ADDR_EXP 97
33359: PUSH
33360: LD_EXP 97
33364: PUSH
33365: LD_VAR 0 5
33369: DIFF
33370: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
33371: LD_ADDR_EXP 97
33375: PUSH
33376: LD_EXP 97
33380: PUSH
33381: LD_VAR 0 1
33385: DIFF
33386: ST_TO_ADDR
// break ;
33387: GO 33540
// end ; end else
33389: GO 33538
// if GetControl ( vehicle ) = control_remote then
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL_OW 263
33400: PUSH
33401: LD_INT 2
33403: EQUAL
33404: IFFALSE 33490
// begin wait ( 0 0$2 ) ;
33406: LD_INT 70
33408: PPUSH
33409: CALL_OW 67
// repeat wait ( 10 ) ;
33413: LD_INT 10
33415: PPUSH
33416: CALL_OW 67
// Connect ( vehicle ) ;
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL 46638 0 1
// until IsControledBy ( vehicle ) ;
33429: LD_VAR 0 1
33433: PPUSH
33434: CALL_OW 312
33438: IFFALSE 33413
// wait ( 10 ) ;
33440: LD_INT 10
33442: PPUSH
33443: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33447: LD_VAR 0 1
33451: PPUSH
33452: LD_EXP 96
33456: PUSH
33457: LD_VAR 0 4
33461: ARRAY
33462: PUSH
33463: LD_INT 3
33465: ARRAY
33466: PPUSH
33467: LD_EXP 96
33471: PUSH
33472: LD_VAR 0 4
33476: ARRAY
33477: PUSH
33478: LD_INT 4
33480: ARRAY
33481: PPUSH
33482: CALL_OW 111
// break ;
33486: GO 33540
// end else
33488: GO 33538
// begin wait ( 0 0$3 ) ;
33490: LD_INT 105
33492: PPUSH
33493: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33497: LD_VAR 0 1
33501: PPUSH
33502: LD_EXP 96
33506: PUSH
33507: LD_VAR 0 4
33511: ARRAY
33512: PUSH
33513: LD_INT 3
33515: ARRAY
33516: PPUSH
33517: LD_EXP 96
33521: PUSH
33522: LD_VAR 0 4
33526: ARRAY
33527: PUSH
33528: LD_INT 4
33530: ARRAY
33531: PPUSH
33532: CALL_OW 111
// break ;
33536: GO 33540
// end ; end ;
33538: GO 32991
33540: POP
33541: POP
// end ;
33542: LD_VAR 0 3
33546: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33547: LD_INT 0
33549: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33550: LD_VAR 0 1
33554: PUSH
33555: LD_INT 250
33557: EQUAL
33558: PUSH
33559: LD_VAR 0 2
33563: PPUSH
33564: CALL_OW 264
33568: PUSH
33569: LD_INT 81
33571: EQUAL
33572: AND
33573: IFFALSE 33594
// MinerPlaceMine ( unit , x , y ) ;
33575: LD_VAR 0 2
33579: PPUSH
33580: LD_VAR 0 4
33584: PPUSH
33585: LD_VAR 0 5
33589: PPUSH
33590: CALL 36686 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33594: LD_VAR 0 1
33598: PUSH
33599: LD_INT 251
33601: EQUAL
33602: PUSH
33603: LD_VAR 0 2
33607: PPUSH
33608: CALL_OW 264
33612: PUSH
33613: LD_INT 81
33615: EQUAL
33616: AND
33617: IFFALSE 33638
// MinerDetonateMine ( unit , x , y ) ;
33619: LD_VAR 0 2
33623: PPUSH
33624: LD_VAR 0 4
33628: PPUSH
33629: LD_VAR 0 5
33633: PPUSH
33634: CALL 36961 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33638: LD_VAR 0 1
33642: PUSH
33643: LD_INT 252
33645: EQUAL
33646: PUSH
33647: LD_VAR 0 2
33651: PPUSH
33652: CALL_OW 264
33656: PUSH
33657: LD_INT 81
33659: EQUAL
33660: AND
33661: IFFALSE 33682
// MinerCreateMinefield ( unit , x , y ) ;
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_VAR 0 4
33672: PPUSH
33673: LD_VAR 0 5
33677: PPUSH
33678: CALL 37378 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33682: LD_VAR 0 1
33686: PUSH
33687: LD_INT 253
33689: EQUAL
33690: PUSH
33691: LD_VAR 0 2
33695: PPUSH
33696: CALL_OW 257
33700: PUSH
33701: LD_INT 5
33703: EQUAL
33704: AND
33705: IFFALSE 33726
// ComBinocular ( unit , x , y ) ;
33707: LD_VAR 0 2
33711: PPUSH
33712: LD_VAR 0 4
33716: PPUSH
33717: LD_VAR 0 5
33721: PPUSH
33722: CALL 37747 0 3
// if selectedUnit then
33726: LD_VAR 0 3
33730: IFFALSE 33786
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33732: LD_VAR 0 1
33736: PUSH
33737: LD_INT 254
33739: EQUAL
33740: PUSH
33741: LD_VAR 0 2
33745: PPUSH
33746: CALL_OW 264
33750: PUSH
33751: LD_INT 99
33753: EQUAL
33754: AND
33755: PUSH
33756: LD_VAR 0 3
33760: PPUSH
33761: CALL_OW 263
33765: PUSH
33766: LD_INT 3
33768: EQUAL
33769: AND
33770: IFFALSE 33786
// HackDestroyVehicle ( unit , selectedUnit ) ;
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 3
33781: PPUSH
33782: CALL 36050 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33786: LD_VAR 0 1
33790: PUSH
33791: LD_INT 255
33793: EQUAL
33794: PUSH
33795: LD_VAR 0 2
33799: PPUSH
33800: CALL_OW 264
33804: PUSH
33805: LD_INT 14
33807: PUSH
33808: LD_INT 53
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: IN
33815: AND
33816: PUSH
33817: LD_VAR 0 4
33821: PPUSH
33822: LD_VAR 0 5
33826: PPUSH
33827: CALL_OW 488
33831: AND
33832: IFFALSE 33856
// CutTreeXYR ( unit , x , y , 12 ) ;
33834: LD_VAR 0 2
33838: PPUSH
33839: LD_VAR 0 4
33843: PPUSH
33844: LD_VAR 0 5
33848: PPUSH
33849: LD_INT 12
33851: PPUSH
33852: CALL 34047 0 4
// if cmd = 256 then
33856: LD_VAR 0 1
33860: PUSH
33861: LD_INT 256
33863: EQUAL
33864: IFFALSE 33885
// SetFactoryWaypoint ( unit , x , y ) ;
33866: LD_VAR 0 2
33870: PPUSH
33871: LD_VAR 0 4
33875: PPUSH
33876: LD_VAR 0 5
33880: PPUSH
33881: CALL 31443 0 3
// if cmd = 257 then
33885: LD_VAR 0 1
33889: PUSH
33890: LD_INT 257
33892: EQUAL
33893: IFFALSE 33914
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33895: LD_VAR 0 2
33899: PPUSH
33900: LD_VAR 0 4
33904: PPUSH
33905: LD_VAR 0 5
33909: PPUSH
33910: CALL 31933 0 3
// if cmd = 258 then
33914: LD_VAR 0 1
33918: PUSH
33919: LD_INT 258
33921: EQUAL
33922: IFFALSE 33946
// BurnTreeXYR ( unit , x , y , 8 ) ;
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 4
33933: PPUSH
33934: LD_VAR 0 5
33938: PPUSH
33939: LD_INT 8
33941: PPUSH
33942: CALL 34441 0 4
// end ;
33946: LD_VAR 0 6
33950: RET
// export function ComRadiation ( un ) ; var eff ; begin
33951: LD_INT 0
33953: PPUSH
33954: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 264
33964: PUSH
33965: LD_INT 91
33967: NONEQUAL
33968: IFFALSE 33972
// exit ;
33970: GO 34042
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33972: LD_INT 68
33974: PPUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: CALL_OW 255
33984: PPUSH
33985: CALL_OW 321
33989: PUSH
33990: LD_INT 2
33992: EQUAL
33993: IFFALSE 34005
// eff := 50 else
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_INT 50
34002: ST_TO_ADDR
34003: GO 34013
// eff := 25 ;
34005: LD_ADDR_VAR 0 3
34009: PUSH
34010: LD_INT 25
34012: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34013: LD_VAR 0 1
34017: PPUSH
34018: CALL_OW 250
34022: PPUSH
34023: LD_VAR 0 1
34027: PPUSH
34028: CALL_OW 251
34032: PPUSH
34033: LD_VAR 0 3
34037: PPUSH
34038: CALL_OW 495
// end ;
34042: LD_VAR 0 2
34046: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34047: LD_INT 0
34049: PPUSH
34050: PPUSH
34051: PPUSH
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
34057: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34058: LD_VAR 0 1
34062: PPUSH
34063: CALL_OW 302
34067: NOT
34068: PUSH
34069: LD_VAR 0 2
34073: PPUSH
34074: LD_VAR 0 3
34078: PPUSH
34079: CALL_OW 488
34083: NOT
34084: OR
34085: PUSH
34086: LD_VAR 0 4
34090: NOT
34091: OR
34092: IFFALSE 34096
// exit ;
34094: GO 34436
// list := [ ] ;
34096: LD_ADDR_VAR 0 13
34100: PUSH
34101: EMPTY
34102: ST_TO_ADDR
// if x - r < 0 then
34103: LD_VAR 0 2
34107: PUSH
34108: LD_VAR 0 4
34112: MINUS
34113: PUSH
34114: LD_INT 0
34116: LESS
34117: IFFALSE 34129
// min_x := 0 else
34119: LD_ADDR_VAR 0 7
34123: PUSH
34124: LD_INT 0
34126: ST_TO_ADDR
34127: GO 34145
// min_x := x - r ;
34129: LD_ADDR_VAR 0 7
34133: PUSH
34134: LD_VAR 0 2
34138: PUSH
34139: LD_VAR 0 4
34143: MINUS
34144: ST_TO_ADDR
// if y - r < 0 then
34145: LD_VAR 0 3
34149: PUSH
34150: LD_VAR 0 4
34154: MINUS
34155: PUSH
34156: LD_INT 0
34158: LESS
34159: IFFALSE 34171
// min_y := 0 else
34161: LD_ADDR_VAR 0 8
34165: PUSH
34166: LD_INT 0
34168: ST_TO_ADDR
34169: GO 34187
// min_y := y - r ;
34171: LD_ADDR_VAR 0 8
34175: PUSH
34176: LD_VAR 0 3
34180: PUSH
34181: LD_VAR 0 4
34185: MINUS
34186: ST_TO_ADDR
// max_x := x + r ;
34187: LD_ADDR_VAR 0 9
34191: PUSH
34192: LD_VAR 0 2
34196: PUSH
34197: LD_VAR 0 4
34201: PLUS
34202: ST_TO_ADDR
// max_y := y + r ;
34203: LD_ADDR_VAR 0 10
34207: PUSH
34208: LD_VAR 0 3
34212: PUSH
34213: LD_VAR 0 4
34217: PLUS
34218: ST_TO_ADDR
// for _x = min_x to max_x do
34219: LD_ADDR_VAR 0 11
34223: PUSH
34224: DOUBLE
34225: LD_VAR 0 7
34229: DEC
34230: ST_TO_ADDR
34231: LD_VAR 0 9
34235: PUSH
34236: FOR_TO
34237: IFFALSE 34354
// for _y = min_y to max_y do
34239: LD_ADDR_VAR 0 12
34243: PUSH
34244: DOUBLE
34245: LD_VAR 0 8
34249: DEC
34250: ST_TO_ADDR
34251: LD_VAR 0 10
34255: PUSH
34256: FOR_TO
34257: IFFALSE 34350
// begin if not ValidHex ( _x , _y ) then
34259: LD_VAR 0 11
34263: PPUSH
34264: LD_VAR 0 12
34268: PPUSH
34269: CALL_OW 488
34273: NOT
34274: IFFALSE 34278
// continue ;
34276: GO 34256
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34278: LD_VAR 0 11
34282: PPUSH
34283: LD_VAR 0 12
34287: PPUSH
34288: CALL_OW 351
34292: PUSH
34293: LD_VAR 0 11
34297: PPUSH
34298: LD_VAR 0 12
34302: PPUSH
34303: CALL_OW 554
34307: AND
34308: IFFALSE 34348
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34310: LD_ADDR_VAR 0 13
34314: PUSH
34315: LD_VAR 0 13
34319: PPUSH
34320: LD_VAR 0 13
34324: PUSH
34325: LD_INT 1
34327: PLUS
34328: PPUSH
34329: LD_VAR 0 11
34333: PUSH
34334: LD_VAR 0 12
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PPUSH
34343: CALL_OW 2
34347: ST_TO_ADDR
// end ;
34348: GO 34256
34350: POP
34351: POP
34352: GO 34236
34354: POP
34355: POP
// if not list then
34356: LD_VAR 0 13
34360: NOT
34361: IFFALSE 34365
// exit ;
34363: GO 34436
// for i in list do
34365: LD_ADDR_VAR 0 6
34369: PUSH
34370: LD_VAR 0 13
34374: PUSH
34375: FOR_IN
34376: IFFALSE 34434
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34378: LD_VAR 0 1
34382: PPUSH
34383: LD_STRING M
34385: PUSH
34386: LD_VAR 0 6
34390: PUSH
34391: LD_INT 1
34393: ARRAY
34394: PUSH
34395: LD_VAR 0 6
34399: PUSH
34400: LD_INT 2
34402: ARRAY
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: PUSH
34425: EMPTY
34426: LIST
34427: PPUSH
34428: CALL_OW 447
34432: GO 34375
34434: POP
34435: POP
// end ;
34436: LD_VAR 0 5
34440: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34441: LD_INT 0
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34453: LD_VAR 0 1
34457: PPUSH
34458: CALL_OW 302
34462: NOT
34463: PUSH
34464: LD_VAR 0 2
34468: PPUSH
34469: LD_VAR 0 3
34473: PPUSH
34474: CALL_OW 488
34478: NOT
34479: OR
34480: PUSH
34481: LD_VAR 0 4
34485: NOT
34486: OR
34487: IFFALSE 34491
// exit ;
34489: GO 35004
// list := [ ] ;
34491: LD_ADDR_VAR 0 13
34495: PUSH
34496: EMPTY
34497: ST_TO_ADDR
// if x - r < 0 then
34498: LD_VAR 0 2
34502: PUSH
34503: LD_VAR 0 4
34507: MINUS
34508: PUSH
34509: LD_INT 0
34511: LESS
34512: IFFALSE 34524
// min_x := 0 else
34514: LD_ADDR_VAR 0 7
34518: PUSH
34519: LD_INT 0
34521: ST_TO_ADDR
34522: GO 34540
// min_x := x - r ;
34524: LD_ADDR_VAR 0 7
34528: PUSH
34529: LD_VAR 0 2
34533: PUSH
34534: LD_VAR 0 4
34538: MINUS
34539: ST_TO_ADDR
// if y - r < 0 then
34540: LD_VAR 0 3
34544: PUSH
34545: LD_VAR 0 4
34549: MINUS
34550: PUSH
34551: LD_INT 0
34553: LESS
34554: IFFALSE 34566
// min_y := 0 else
34556: LD_ADDR_VAR 0 8
34560: PUSH
34561: LD_INT 0
34563: ST_TO_ADDR
34564: GO 34582
// min_y := y - r ;
34566: LD_ADDR_VAR 0 8
34570: PUSH
34571: LD_VAR 0 3
34575: PUSH
34576: LD_VAR 0 4
34580: MINUS
34581: ST_TO_ADDR
// max_x := x + r ;
34582: LD_ADDR_VAR 0 9
34586: PUSH
34587: LD_VAR 0 2
34591: PUSH
34592: LD_VAR 0 4
34596: PLUS
34597: ST_TO_ADDR
// max_y := y + r ;
34598: LD_ADDR_VAR 0 10
34602: PUSH
34603: LD_VAR 0 3
34607: PUSH
34608: LD_VAR 0 4
34612: PLUS
34613: ST_TO_ADDR
// for _x = min_x to max_x do
34614: LD_ADDR_VAR 0 11
34618: PUSH
34619: DOUBLE
34620: LD_VAR 0 7
34624: DEC
34625: ST_TO_ADDR
34626: LD_VAR 0 9
34630: PUSH
34631: FOR_TO
34632: IFFALSE 34749
// for _y = min_y to max_y do
34634: LD_ADDR_VAR 0 12
34638: PUSH
34639: DOUBLE
34640: LD_VAR 0 8
34644: DEC
34645: ST_TO_ADDR
34646: LD_VAR 0 10
34650: PUSH
34651: FOR_TO
34652: IFFALSE 34745
// begin if not ValidHex ( _x , _y ) then
34654: LD_VAR 0 11
34658: PPUSH
34659: LD_VAR 0 12
34663: PPUSH
34664: CALL_OW 488
34668: NOT
34669: IFFALSE 34673
// continue ;
34671: GO 34651
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34673: LD_VAR 0 11
34677: PPUSH
34678: LD_VAR 0 12
34682: PPUSH
34683: CALL_OW 351
34687: PUSH
34688: LD_VAR 0 11
34692: PPUSH
34693: LD_VAR 0 12
34697: PPUSH
34698: CALL_OW 554
34702: AND
34703: IFFALSE 34743
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34705: LD_ADDR_VAR 0 13
34709: PUSH
34710: LD_VAR 0 13
34714: PPUSH
34715: LD_VAR 0 13
34719: PUSH
34720: LD_INT 1
34722: PLUS
34723: PPUSH
34724: LD_VAR 0 11
34728: PUSH
34729: LD_VAR 0 12
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PPUSH
34738: CALL_OW 2
34742: ST_TO_ADDR
// end ;
34743: GO 34651
34745: POP
34746: POP
34747: GO 34631
34749: POP
34750: POP
// if not list then
34751: LD_VAR 0 13
34755: NOT
34756: IFFALSE 34760
// exit ;
34758: GO 35004
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
34760: LD_ADDR_VAR 0 13
34764: PUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: LD_VAR 0 13
34774: PPUSH
34775: LD_INT 1
34777: PPUSH
34778: LD_INT 1
34780: PPUSH
34781: CALL 43780 0 4
34785: ST_TO_ADDR
// ComStop ( flame ) ;
34786: LD_VAR 0 1
34790: PPUSH
34791: CALL_OW 141
// for i in list do
34795: LD_ADDR_VAR 0 6
34799: PUSH
34800: LD_VAR 0 13
34804: PUSH
34805: FOR_IN
34806: IFFALSE 34837
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34808: LD_VAR 0 1
34812: PPUSH
34813: LD_VAR 0 6
34817: PUSH
34818: LD_INT 1
34820: ARRAY
34821: PPUSH
34822: LD_VAR 0 6
34826: PUSH
34827: LD_INT 2
34829: ARRAY
34830: PPUSH
34831: CALL_OW 176
34835: GO 34805
34837: POP
34838: POP
// repeat wait ( 0 0$1 ) ;
34839: LD_INT 35
34841: PPUSH
34842: CALL_OW 67
// task := GetTaskList ( flame ) ;
34846: LD_ADDR_VAR 0 14
34850: PUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 437
34860: ST_TO_ADDR
// if not task then
34861: LD_VAR 0 14
34865: NOT
34866: IFFALSE 34870
// exit ;
34868: GO 35004
// if task [ 1 ] [ 1 ] <> | then
34870: LD_VAR 0 14
34874: PUSH
34875: LD_INT 1
34877: ARRAY
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: PUSH
34883: LD_STRING |
34885: NONEQUAL
34886: IFFALSE 34890
// exit ;
34888: GO 35004
// _x := task [ 1 ] [ 2 ] ;
34890: LD_ADDR_VAR 0 11
34894: PUSH
34895: LD_VAR 0 14
34899: PUSH
34900: LD_INT 1
34902: ARRAY
34903: PUSH
34904: LD_INT 2
34906: ARRAY
34907: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34908: LD_ADDR_VAR 0 12
34912: PUSH
34913: LD_VAR 0 14
34917: PUSH
34918: LD_INT 1
34920: ARRAY
34921: PUSH
34922: LD_INT 3
34924: ARRAY
34925: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34926: LD_VAR 0 11
34930: PPUSH
34931: LD_VAR 0 12
34935: PPUSH
34936: CALL_OW 351
34940: NOT
34941: PUSH
34942: LD_VAR 0 11
34946: PPUSH
34947: LD_VAR 0 12
34951: PPUSH
34952: CALL_OW 554
34956: NOT
34957: OR
34958: IFFALSE 34992
// begin task := Delete ( task , 1 ) ;
34960: LD_ADDR_VAR 0 14
34964: PUSH
34965: LD_VAR 0 14
34969: PPUSH
34970: LD_INT 1
34972: PPUSH
34973: CALL_OW 3
34977: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34978: LD_VAR 0 1
34982: PPUSH
34983: LD_VAR 0 14
34987: PPUSH
34988: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 314
35001: NOT
35002: IFFALSE 34839
// end ;
35004: LD_VAR 0 5
35008: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35009: LD_EXP 100
35013: NOT
35014: IFFALSE 35064
35016: GO 35018
35018: DISABLE
// begin initHack := true ;
35019: LD_ADDR_EXP 100
35023: PUSH
35024: LD_INT 1
35026: ST_TO_ADDR
// hackTanks := [ ] ;
35027: LD_ADDR_EXP 101
35031: PUSH
35032: EMPTY
35033: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35034: LD_ADDR_EXP 102
35038: PUSH
35039: EMPTY
35040: ST_TO_ADDR
// hackLimit := 3 ;
35041: LD_ADDR_EXP 103
35045: PUSH
35046: LD_INT 3
35048: ST_TO_ADDR
// hackDist := 12 ;
35049: LD_ADDR_EXP 104
35053: PUSH
35054: LD_INT 12
35056: ST_TO_ADDR
// hackCounter := [ ] ;
35057: LD_ADDR_EXP 105
35061: PUSH
35062: EMPTY
35063: ST_TO_ADDR
// end ;
35064: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35065: LD_EXP 100
35069: PUSH
35070: LD_INT 34
35072: PUSH
35073: LD_INT 99
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PPUSH
35080: CALL_OW 69
35084: AND
35085: IFFALSE 35338
35087: GO 35089
35089: DISABLE
35090: LD_INT 0
35092: PPUSH
35093: PPUSH
// begin enable ;
35094: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35095: LD_ADDR_VAR 0 1
35099: PUSH
35100: LD_INT 34
35102: PUSH
35103: LD_INT 99
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PPUSH
35110: CALL_OW 69
35114: PUSH
35115: FOR_IN
35116: IFFALSE 35336
// begin if not i in hackTanks then
35118: LD_VAR 0 1
35122: PUSH
35123: LD_EXP 101
35127: IN
35128: NOT
35129: IFFALSE 35212
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35131: LD_ADDR_EXP 101
35135: PUSH
35136: LD_EXP 101
35140: PPUSH
35141: LD_EXP 101
35145: PUSH
35146: LD_INT 1
35148: PLUS
35149: PPUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 1
35159: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35160: LD_ADDR_EXP 102
35164: PUSH
35165: LD_EXP 102
35169: PPUSH
35170: LD_EXP 102
35174: PUSH
35175: LD_INT 1
35177: PLUS
35178: PPUSH
35179: EMPTY
35180: PPUSH
35181: CALL_OW 1
35185: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35186: LD_ADDR_EXP 105
35190: PUSH
35191: LD_EXP 105
35195: PPUSH
35196: LD_EXP 105
35200: PUSH
35201: LD_INT 1
35203: PLUS
35204: PPUSH
35205: EMPTY
35206: PPUSH
35207: CALL_OW 1
35211: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35212: LD_VAR 0 1
35216: PPUSH
35217: CALL_OW 302
35221: NOT
35222: IFFALSE 35235
// begin HackUnlinkAll ( i ) ;
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL 35341 0 1
// continue ;
35233: GO 35115
// end ; HackCheckCapturedStatus ( i ) ;
35235: LD_VAR 0 1
35239: PPUSH
35240: CALL 35784 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35244: LD_ADDR_VAR 0 2
35248: PUSH
35249: LD_INT 81
35251: PUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL_OW 255
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 33
35268: PUSH
35269: LD_INT 3
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 91
35278: PUSH
35279: LD_VAR 0 1
35283: PUSH
35284: LD_EXP 104
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 50
35296: PUSH
35297: EMPTY
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: PPUSH
35306: CALL_OW 69
35310: ST_TO_ADDR
// if not tmp then
35311: LD_VAR 0 2
35315: NOT
35316: IFFALSE 35320
// continue ;
35318: GO 35115
// HackLink ( i , tmp ) ;
35320: LD_VAR 0 1
35324: PPUSH
35325: LD_VAR 0 2
35329: PPUSH
35330: CALL 35477 0 2
// end ;
35334: GO 35115
35336: POP
35337: POP
// end ;
35338: PPOPN 2
35340: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35341: LD_INT 0
35343: PPUSH
35344: PPUSH
35345: PPUSH
// if not hack in hackTanks then
35346: LD_VAR 0 1
35350: PUSH
35351: LD_EXP 101
35355: IN
35356: NOT
35357: IFFALSE 35361
// exit ;
35359: GO 35472
// index := GetElementIndex ( hackTanks , hack ) ;
35361: LD_ADDR_VAR 0 4
35365: PUSH
35366: LD_EXP 101
35370: PPUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL 43077 0 2
35380: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35381: LD_EXP 102
35385: PUSH
35386: LD_VAR 0 4
35390: ARRAY
35391: IFFALSE 35472
// begin for i in hackTanksCaptured [ index ] do
35393: LD_ADDR_VAR 0 3
35397: PUSH
35398: LD_EXP 102
35402: PUSH
35403: LD_VAR 0 4
35407: ARRAY
35408: PUSH
35409: FOR_IN
35410: IFFALSE 35436
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35412: LD_VAR 0 3
35416: PUSH
35417: LD_INT 1
35419: ARRAY
35420: PPUSH
35421: LD_VAR 0 3
35425: PUSH
35426: LD_INT 2
35428: ARRAY
35429: PPUSH
35430: CALL_OW 235
35434: GO 35409
35436: POP
35437: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35438: LD_ADDR_EXP 102
35442: PUSH
35443: LD_EXP 102
35447: PPUSH
35448: LD_VAR 0 4
35452: PPUSH
35453: EMPTY
35454: PPUSH
35455: CALL_OW 1
35459: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_INT 0
35467: PPUSH
35468: CALL_OW 505
// end ; end ;
35472: LD_VAR 0 2
35476: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35477: LD_INT 0
35479: PPUSH
35480: PPUSH
35481: PPUSH
// if not hack in hackTanks or not vehicles then
35482: LD_VAR 0 1
35486: PUSH
35487: LD_EXP 101
35491: IN
35492: NOT
35493: PUSH
35494: LD_VAR 0 2
35498: NOT
35499: OR
35500: IFFALSE 35504
// exit ;
35502: GO 35779
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35504: LD_ADDR_VAR 0 2
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: LD_VAR 0 2
35518: PPUSH
35519: LD_INT 1
35521: PPUSH
35522: LD_INT 1
35524: PPUSH
35525: CALL 43727 0 4
35529: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35530: LD_ADDR_VAR 0 5
35534: PUSH
35535: LD_EXP 101
35539: PPUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL 43077 0 2
35549: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35550: LD_EXP 102
35554: PUSH
35555: LD_VAR 0 5
35559: ARRAY
35560: PUSH
35561: LD_EXP 103
35565: LESS
35566: IFFALSE 35755
// begin for i := 1 to vehicles do
35568: LD_ADDR_VAR 0 4
35572: PUSH
35573: DOUBLE
35574: LD_INT 1
35576: DEC
35577: ST_TO_ADDR
35578: LD_VAR 0 2
35582: PUSH
35583: FOR_TO
35584: IFFALSE 35753
// begin if hackTanksCaptured [ index ] = hackLimit then
35586: LD_EXP 102
35590: PUSH
35591: LD_VAR 0 5
35595: ARRAY
35596: PUSH
35597: LD_EXP 103
35601: EQUAL
35602: IFFALSE 35606
// break ;
35604: GO 35753
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35606: LD_ADDR_EXP 105
35610: PUSH
35611: LD_EXP 105
35615: PPUSH
35616: LD_VAR 0 5
35620: PPUSH
35621: LD_EXP 105
35625: PUSH
35626: LD_VAR 0 5
35630: ARRAY
35631: PUSH
35632: LD_INT 1
35634: PLUS
35635: PPUSH
35636: CALL_OW 1
35640: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35641: LD_ADDR_EXP 102
35645: PUSH
35646: LD_EXP 102
35650: PPUSH
35651: LD_VAR 0 5
35655: PUSH
35656: LD_EXP 102
35660: PUSH
35661: LD_VAR 0 5
35665: ARRAY
35666: PUSH
35667: LD_INT 1
35669: PLUS
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PPUSH
35675: LD_VAR 0 2
35679: PUSH
35680: LD_VAR 0 4
35684: ARRAY
35685: PUSH
35686: LD_VAR 0 2
35690: PUSH
35691: LD_VAR 0 4
35695: ARRAY
35696: PPUSH
35697: CALL_OW 255
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PPUSH
35706: CALL 43292 0 3
35710: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35711: LD_VAR 0 2
35715: PUSH
35716: LD_VAR 0 4
35720: ARRAY
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 255
35731: PPUSH
35732: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35736: LD_VAR 0 2
35740: PUSH
35741: LD_VAR 0 4
35745: ARRAY
35746: PPUSH
35747: CALL_OW 141
// end ;
35751: GO 35583
35753: POP
35754: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35755: LD_VAR 0 1
35759: PPUSH
35760: LD_EXP 102
35764: PUSH
35765: LD_VAR 0 5
35769: ARRAY
35770: PUSH
35771: LD_INT 0
35773: PLUS
35774: PPUSH
35775: CALL_OW 505
// end ;
35779: LD_VAR 0 3
35783: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35784: LD_INT 0
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
// if not hack in hackTanks then
35790: LD_VAR 0 1
35794: PUSH
35795: LD_EXP 101
35799: IN
35800: NOT
35801: IFFALSE 35805
// exit ;
35803: GO 36045
// index := GetElementIndex ( hackTanks , hack ) ;
35805: LD_ADDR_VAR 0 4
35809: PUSH
35810: LD_EXP 101
35814: PPUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: CALL 43077 0 2
35824: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: DOUBLE
35831: LD_EXP 102
35835: PUSH
35836: LD_VAR 0 4
35840: ARRAY
35841: INC
35842: ST_TO_ADDR
35843: LD_INT 1
35845: PUSH
35846: FOR_DOWNTO
35847: IFFALSE 36019
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35849: LD_ADDR_VAR 0 5
35853: PUSH
35854: LD_EXP 102
35858: PUSH
35859: LD_VAR 0 4
35863: ARRAY
35864: PUSH
35865: LD_VAR 0 3
35869: ARRAY
35870: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35871: LD_VAR 0 5
35875: PUSH
35876: LD_INT 1
35878: ARRAY
35879: PPUSH
35880: CALL_OW 302
35884: NOT
35885: PUSH
35886: LD_VAR 0 5
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: PPUSH
35895: CALL_OW 255
35899: PUSH
35900: LD_VAR 0 1
35904: PPUSH
35905: CALL_OW 255
35909: NONEQUAL
35910: OR
35911: IFFALSE 36017
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35913: LD_VAR 0 5
35917: PUSH
35918: LD_INT 1
35920: ARRAY
35921: PPUSH
35922: CALL_OW 305
35926: PUSH
35927: LD_VAR 0 5
35931: PUSH
35932: LD_INT 1
35934: ARRAY
35935: PPUSH
35936: CALL_OW 255
35940: PUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 255
35950: EQUAL
35951: AND
35952: IFFALSE 35976
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35954: LD_VAR 0 5
35958: PUSH
35959: LD_INT 1
35961: ARRAY
35962: PPUSH
35963: LD_VAR 0 5
35967: PUSH
35968: LD_INT 2
35970: ARRAY
35971: PPUSH
35972: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35976: LD_ADDR_EXP 102
35980: PUSH
35981: LD_EXP 102
35985: PPUSH
35986: LD_VAR 0 4
35990: PPUSH
35991: LD_EXP 102
35995: PUSH
35996: LD_VAR 0 4
36000: ARRAY
36001: PPUSH
36002: LD_VAR 0 3
36006: PPUSH
36007: CALL_OW 3
36011: PPUSH
36012: CALL_OW 1
36016: ST_TO_ADDR
// end ; end ;
36017: GO 35846
36019: POP
36020: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36021: LD_VAR 0 1
36025: PPUSH
36026: LD_EXP 102
36030: PUSH
36031: LD_VAR 0 4
36035: ARRAY
36036: PUSH
36037: LD_INT 0
36039: PLUS
36040: PPUSH
36041: CALL_OW 505
// end ;
36045: LD_VAR 0 2
36049: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36050: LD_INT 0
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
// if not hack in hackTanks then
36056: LD_VAR 0 1
36060: PUSH
36061: LD_EXP 101
36065: IN
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 36156
// index := GetElementIndex ( hackTanks , hack ) ;
36071: LD_ADDR_VAR 0 5
36075: PUSH
36076: LD_EXP 101
36080: PPUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL 43077 0 2
36090: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36091: LD_ADDR_VAR 0 4
36095: PUSH
36096: DOUBLE
36097: LD_INT 1
36099: DEC
36100: ST_TO_ADDR
36101: LD_EXP 102
36105: PUSH
36106: LD_VAR 0 5
36110: ARRAY
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36154
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36115: LD_EXP 102
36119: PUSH
36120: LD_VAR 0 5
36124: ARRAY
36125: PUSH
36126: LD_VAR 0 4
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PUSH
36136: LD_VAR 0 2
36140: EQUAL
36141: IFFALSE 36152
// KillUnit ( vehicle ) ;
36143: LD_VAR 0 2
36147: PPUSH
36148: CALL_OW 66
36152: GO 36112
36154: POP
36155: POP
// end ;
36156: LD_VAR 0 3
36160: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36161: LD_EXP 106
36165: NOT
36166: IFFALSE 36201
36168: GO 36170
36170: DISABLE
// begin initMiner := true ;
36171: LD_ADDR_EXP 106
36175: PUSH
36176: LD_INT 1
36178: ST_TO_ADDR
// minersList := [ ] ;
36179: LD_ADDR_EXP 107
36183: PUSH
36184: EMPTY
36185: ST_TO_ADDR
// minerMinesList := [ ] ;
36186: LD_ADDR_EXP 108
36190: PUSH
36191: EMPTY
36192: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36193: LD_ADDR_EXP 109
36197: PUSH
36198: LD_INT 5
36200: ST_TO_ADDR
// end ;
36201: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36202: LD_EXP 106
36206: PUSH
36207: LD_INT 34
36209: PUSH
36210: LD_INT 81
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PPUSH
36217: CALL_OW 69
36221: AND
36222: IFFALSE 36683
36224: GO 36226
36226: DISABLE
36227: LD_INT 0
36229: PPUSH
36230: PPUSH
36231: PPUSH
36232: PPUSH
// begin enable ;
36233: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36234: LD_ADDR_VAR 0 1
36238: PUSH
36239: LD_INT 34
36241: PUSH
36242: LD_INT 81
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PPUSH
36249: CALL_OW 69
36253: PUSH
36254: FOR_IN
36255: IFFALSE 36327
// begin if not i in minersList then
36257: LD_VAR 0 1
36261: PUSH
36262: LD_EXP 107
36266: IN
36267: NOT
36268: IFFALSE 36325
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36270: LD_ADDR_EXP 107
36274: PUSH
36275: LD_EXP 107
36279: PPUSH
36280: LD_EXP 107
36284: PUSH
36285: LD_INT 1
36287: PLUS
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 1
36298: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36299: LD_ADDR_EXP 108
36303: PUSH
36304: LD_EXP 108
36308: PPUSH
36309: LD_EXP 108
36313: PUSH
36314: LD_INT 1
36316: PLUS
36317: PPUSH
36318: EMPTY
36319: PPUSH
36320: CALL_OW 1
36324: ST_TO_ADDR
// end end ;
36325: GO 36254
36327: POP
36328: POP
// for i := minerMinesList downto 1 do
36329: LD_ADDR_VAR 0 1
36333: PUSH
36334: DOUBLE
36335: LD_EXP 108
36339: INC
36340: ST_TO_ADDR
36341: LD_INT 1
36343: PUSH
36344: FOR_DOWNTO
36345: IFFALSE 36681
// begin if IsLive ( minersList [ i ] ) then
36347: LD_EXP 107
36351: PUSH
36352: LD_VAR 0 1
36356: ARRAY
36357: PPUSH
36358: CALL_OW 300
36362: IFFALSE 36390
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36364: LD_EXP 107
36368: PUSH
36369: LD_VAR 0 1
36373: ARRAY
36374: PPUSH
36375: LD_EXP 108
36379: PUSH
36380: LD_VAR 0 1
36384: ARRAY
36385: PPUSH
36386: CALL_OW 505
// if not minerMinesList [ i ] then
36390: LD_EXP 108
36394: PUSH
36395: LD_VAR 0 1
36399: ARRAY
36400: NOT
36401: IFFALSE 36405
// continue ;
36403: GO 36344
// for j := minerMinesList [ i ] downto 1 do
36405: LD_ADDR_VAR 0 2
36409: PUSH
36410: DOUBLE
36411: LD_EXP 108
36415: PUSH
36416: LD_VAR 0 1
36420: ARRAY
36421: INC
36422: ST_TO_ADDR
36423: LD_INT 1
36425: PUSH
36426: FOR_DOWNTO
36427: IFFALSE 36677
// begin side := GetSide ( minersList [ i ] ) ;
36429: LD_ADDR_VAR 0 3
36433: PUSH
36434: LD_EXP 107
36438: PUSH
36439: LD_VAR 0 1
36443: ARRAY
36444: PPUSH
36445: CALL_OW 255
36449: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36450: LD_ADDR_VAR 0 4
36454: PUSH
36455: LD_EXP 108
36459: PUSH
36460: LD_VAR 0 1
36464: ARRAY
36465: PUSH
36466: LD_VAR 0 2
36470: ARRAY
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: PPUSH
36476: LD_EXP 108
36480: PUSH
36481: LD_VAR 0 1
36485: ARRAY
36486: PUSH
36487: LD_VAR 0 2
36491: ARRAY
36492: PUSH
36493: LD_INT 2
36495: ARRAY
36496: PPUSH
36497: CALL_OW 428
36501: ST_TO_ADDR
// if not tmp then
36502: LD_VAR 0 4
36506: NOT
36507: IFFALSE 36511
// continue ;
36509: GO 36426
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36511: LD_VAR 0 4
36515: PUSH
36516: LD_INT 81
36518: PUSH
36519: LD_VAR 0 3
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 69
36532: IN
36533: PUSH
36534: LD_EXP 108
36538: PUSH
36539: LD_VAR 0 1
36543: ARRAY
36544: PUSH
36545: LD_VAR 0 2
36549: ARRAY
36550: PUSH
36551: LD_INT 1
36553: ARRAY
36554: PPUSH
36555: LD_EXP 108
36559: PUSH
36560: LD_VAR 0 1
36564: ARRAY
36565: PUSH
36566: LD_VAR 0 2
36570: ARRAY
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: PPUSH
36576: CALL_OW 458
36580: AND
36581: IFFALSE 36675
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36583: LD_EXP 108
36587: PUSH
36588: LD_VAR 0 1
36592: ARRAY
36593: PUSH
36594: LD_VAR 0 2
36598: ARRAY
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PPUSH
36604: LD_EXP 108
36608: PUSH
36609: LD_VAR 0 1
36613: ARRAY
36614: PUSH
36615: LD_VAR 0 2
36619: ARRAY
36620: PUSH
36621: LD_INT 2
36623: ARRAY
36624: PPUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36634: LD_ADDR_EXP 108
36638: PUSH
36639: LD_EXP 108
36643: PPUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: LD_EXP 108
36653: PUSH
36654: LD_VAR 0 1
36658: ARRAY
36659: PPUSH
36660: LD_VAR 0 2
36664: PPUSH
36665: CALL_OW 3
36669: PPUSH
36670: CALL_OW 1
36674: ST_TO_ADDR
// end ; end ;
36675: GO 36426
36677: POP
36678: POP
// end ;
36679: GO 36344
36681: POP
36682: POP
// end ;
36683: PPOPN 4
36685: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36686: LD_INT 0
36688: PPUSH
36689: PPUSH
// result := false ;
36690: LD_ADDR_VAR 0 4
36694: PUSH
36695: LD_INT 0
36697: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36698: LD_VAR 0 1
36702: PPUSH
36703: CALL_OW 264
36707: PUSH
36708: LD_INT 81
36710: EQUAL
36711: NOT
36712: IFFALSE 36716
// exit ;
36714: GO 36956
// index := GetElementIndex ( minersList , unit ) ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_EXP 107
36725: PPUSH
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL 43077 0 2
36735: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36736: LD_EXP 108
36740: PUSH
36741: LD_VAR 0 5
36745: ARRAY
36746: PUSH
36747: LD_EXP 109
36751: GREATEREQUAL
36752: IFFALSE 36756
// exit ;
36754: GO 36956
// ComMoveXY ( unit , x , y ) ;
36756: LD_VAR 0 1
36760: PPUSH
36761: LD_VAR 0 2
36765: PPUSH
36766: LD_VAR 0 3
36770: PPUSH
36771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36775: LD_INT 35
36777: PPUSH
36778: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36782: LD_VAR 0 1
36786: PPUSH
36787: LD_VAR 0 2
36791: PPUSH
36792: LD_VAR 0 3
36796: PPUSH
36797: CALL 74838 0 3
36801: NOT
36802: PUSH
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 314
36812: AND
36813: IFFALSE 36817
// exit ;
36815: GO 36956
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36817: LD_VAR 0 2
36821: PPUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: CALL_OW 428
36831: PUSH
36832: LD_VAR 0 1
36836: EQUAL
36837: PUSH
36838: LD_VAR 0 1
36842: PPUSH
36843: CALL_OW 314
36847: NOT
36848: AND
36849: IFFALSE 36775
// PlaySoundXY ( x , y , PlantMine ) ;
36851: LD_VAR 0 2
36855: PPUSH
36856: LD_VAR 0 3
36860: PPUSH
36861: LD_STRING PlantMine
36863: PPUSH
36864: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36868: LD_VAR 0 2
36872: PPUSH
36873: LD_VAR 0 3
36877: PPUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 255
36887: PPUSH
36888: LD_INT 0
36890: PPUSH
36891: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36895: LD_ADDR_EXP 108
36899: PUSH
36900: LD_EXP 108
36904: PPUSH
36905: LD_VAR 0 5
36909: PUSH
36910: LD_EXP 108
36914: PUSH
36915: LD_VAR 0 5
36919: ARRAY
36920: PUSH
36921: LD_INT 1
36923: PLUS
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PPUSH
36929: LD_VAR 0 2
36933: PUSH
36934: LD_VAR 0 3
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PPUSH
36943: CALL 43292 0 3
36947: ST_TO_ADDR
// result := true ;
36948: LD_ADDR_VAR 0 4
36952: PUSH
36953: LD_INT 1
36955: ST_TO_ADDR
// end ;
36956: LD_VAR 0 4
36960: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36961: LD_INT 0
36963: PPUSH
36964: PPUSH
36965: PPUSH
// if not unit in minersList then
36966: LD_VAR 0 1
36970: PUSH
36971: LD_EXP 107
36975: IN
36976: NOT
36977: IFFALSE 36981
// exit ;
36979: GO 37373
// index := GetElementIndex ( minersList , unit ) ;
36981: LD_ADDR_VAR 0 6
36985: PUSH
36986: LD_EXP 107
36990: PPUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL 43077 0 2
37000: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: DOUBLE
37007: LD_EXP 108
37011: PUSH
37012: LD_VAR 0 6
37016: ARRAY
37017: INC
37018: ST_TO_ADDR
37019: LD_INT 1
37021: PUSH
37022: FOR_DOWNTO
37023: IFFALSE 37184
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37025: LD_EXP 108
37029: PUSH
37030: LD_VAR 0 6
37034: ARRAY
37035: PUSH
37036: LD_VAR 0 5
37040: ARRAY
37041: PUSH
37042: LD_INT 1
37044: ARRAY
37045: PUSH
37046: LD_VAR 0 2
37050: EQUAL
37051: PUSH
37052: LD_EXP 108
37056: PUSH
37057: LD_VAR 0 6
37061: ARRAY
37062: PUSH
37063: LD_VAR 0 5
37067: ARRAY
37068: PUSH
37069: LD_INT 2
37071: ARRAY
37072: PUSH
37073: LD_VAR 0 3
37077: EQUAL
37078: AND
37079: IFFALSE 37182
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37081: LD_EXP 108
37085: PUSH
37086: LD_VAR 0 6
37090: ARRAY
37091: PUSH
37092: LD_VAR 0 5
37096: ARRAY
37097: PUSH
37098: LD_INT 1
37100: ARRAY
37101: PPUSH
37102: LD_EXP 108
37106: PUSH
37107: LD_VAR 0 6
37111: ARRAY
37112: PUSH
37113: LD_VAR 0 5
37117: ARRAY
37118: PUSH
37119: LD_INT 2
37121: ARRAY
37122: PPUSH
37123: LD_VAR 0 1
37127: PPUSH
37128: CALL_OW 255
37132: PPUSH
37133: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37137: LD_ADDR_EXP 108
37141: PUSH
37142: LD_EXP 108
37146: PPUSH
37147: LD_VAR 0 6
37151: PPUSH
37152: LD_EXP 108
37156: PUSH
37157: LD_VAR 0 6
37161: ARRAY
37162: PPUSH
37163: LD_VAR 0 5
37167: PPUSH
37168: CALL_OW 3
37172: PPUSH
37173: CALL_OW 1
37177: ST_TO_ADDR
// exit ;
37178: POP
37179: POP
37180: GO 37373
// end ; end ;
37182: GO 37022
37184: POP
37185: POP
// for i := minerMinesList [ index ] downto 1 do
37186: LD_ADDR_VAR 0 5
37190: PUSH
37191: DOUBLE
37192: LD_EXP 108
37196: PUSH
37197: LD_VAR 0 6
37201: ARRAY
37202: INC
37203: ST_TO_ADDR
37204: LD_INT 1
37206: PUSH
37207: FOR_DOWNTO
37208: IFFALSE 37371
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37210: LD_EXP 108
37214: PUSH
37215: LD_VAR 0 6
37219: ARRAY
37220: PUSH
37221: LD_VAR 0 5
37225: ARRAY
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PPUSH
37231: LD_EXP 108
37235: PUSH
37236: LD_VAR 0 6
37240: ARRAY
37241: PUSH
37242: LD_VAR 0 5
37246: ARRAY
37247: PUSH
37248: LD_INT 2
37250: ARRAY
37251: PPUSH
37252: LD_VAR 0 2
37256: PPUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: CALL_OW 298
37266: PUSH
37267: LD_INT 6
37269: LESS
37270: IFFALSE 37369
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37272: LD_EXP 108
37276: PUSH
37277: LD_VAR 0 6
37281: ARRAY
37282: PUSH
37283: LD_VAR 0 5
37287: ARRAY
37288: PUSH
37289: LD_INT 1
37291: ARRAY
37292: PPUSH
37293: LD_EXP 108
37297: PUSH
37298: LD_VAR 0 6
37302: ARRAY
37303: PUSH
37304: LD_VAR 0 5
37308: ARRAY
37309: PUSH
37310: LD_INT 2
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 255
37323: PPUSH
37324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37328: LD_ADDR_EXP 108
37332: PUSH
37333: LD_EXP 108
37337: PPUSH
37338: LD_VAR 0 6
37342: PPUSH
37343: LD_EXP 108
37347: PUSH
37348: LD_VAR 0 6
37352: ARRAY
37353: PPUSH
37354: LD_VAR 0 5
37358: PPUSH
37359: CALL_OW 3
37363: PPUSH
37364: CALL_OW 1
37368: ST_TO_ADDR
// end ; end ;
37369: GO 37207
37371: POP
37372: POP
// end ;
37373: LD_VAR 0 4
37377: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37378: LD_INT 0
37380: PPUSH
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37389: LD_VAR 0 1
37393: PPUSH
37394: CALL_OW 264
37398: PUSH
37399: LD_INT 81
37401: EQUAL
37402: NOT
37403: PUSH
37404: LD_VAR 0 1
37408: PUSH
37409: LD_EXP 107
37413: IN
37414: NOT
37415: OR
37416: IFFALSE 37420
// exit ;
37418: GO 37742
// index := GetElementIndex ( minersList , unit ) ;
37420: LD_ADDR_VAR 0 6
37424: PUSH
37425: LD_EXP 107
37429: PPUSH
37430: LD_VAR 0 1
37434: PPUSH
37435: CALL 43077 0 2
37439: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37440: LD_ADDR_VAR 0 8
37444: PUSH
37445: LD_EXP 109
37449: PUSH
37450: LD_EXP 108
37454: PUSH
37455: LD_VAR 0 6
37459: ARRAY
37460: MINUS
37461: ST_TO_ADDR
// if not minesFreeAmount then
37462: LD_VAR 0 8
37466: NOT
37467: IFFALSE 37471
// exit ;
37469: GO 37742
// tmp := [ ] ;
37471: LD_ADDR_VAR 0 7
37475: PUSH
37476: EMPTY
37477: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37478: LD_ADDR_VAR 0 5
37482: PUSH
37483: DOUBLE
37484: LD_INT 1
37486: DEC
37487: ST_TO_ADDR
37488: LD_VAR 0 8
37492: PUSH
37493: FOR_TO
37494: IFFALSE 37689
// begin _d := rand ( 0 , 5 ) ;
37496: LD_ADDR_VAR 0 11
37500: PUSH
37501: LD_INT 0
37503: PPUSH
37504: LD_INT 5
37506: PPUSH
37507: CALL_OW 12
37511: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37512: LD_ADDR_VAR 0 12
37516: PUSH
37517: LD_INT 2
37519: PPUSH
37520: LD_INT 6
37522: PPUSH
37523: CALL_OW 12
37527: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37528: LD_ADDR_VAR 0 9
37532: PUSH
37533: LD_VAR 0 2
37537: PPUSH
37538: LD_VAR 0 11
37542: PPUSH
37543: LD_VAR 0 12
37547: PPUSH
37548: CALL_OW 272
37552: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37553: LD_ADDR_VAR 0 10
37557: PUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: LD_VAR 0 11
37567: PPUSH
37568: LD_VAR 0 12
37572: PPUSH
37573: CALL_OW 273
37577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37578: LD_VAR 0 9
37582: PPUSH
37583: LD_VAR 0 10
37587: PPUSH
37588: CALL_OW 488
37592: PUSH
37593: LD_VAR 0 9
37597: PUSH
37598: LD_VAR 0 10
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_VAR 0 7
37611: IN
37612: NOT
37613: AND
37614: PUSH
37615: LD_VAR 0 9
37619: PPUSH
37620: LD_VAR 0 10
37624: PPUSH
37625: CALL_OW 458
37629: NOT
37630: AND
37631: IFFALSE 37673
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37633: LD_ADDR_VAR 0 7
37637: PUSH
37638: LD_VAR 0 7
37642: PPUSH
37643: LD_VAR 0 7
37647: PUSH
37648: LD_INT 1
37650: PLUS
37651: PPUSH
37652: LD_VAR 0 9
37656: PUSH
37657: LD_VAR 0 10
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PPUSH
37666: CALL_OW 1
37670: ST_TO_ADDR
37671: GO 37687
// i := i - 1 ;
37673: LD_ADDR_VAR 0 5
37677: PUSH
37678: LD_VAR 0 5
37682: PUSH
37683: LD_INT 1
37685: MINUS
37686: ST_TO_ADDR
// end ;
37687: GO 37493
37689: POP
37690: POP
// for i in tmp do
37691: LD_ADDR_VAR 0 5
37695: PUSH
37696: LD_VAR 0 7
37700: PUSH
37701: FOR_IN
37702: IFFALSE 37740
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37704: LD_VAR 0 1
37708: PPUSH
37709: LD_VAR 0 5
37713: PUSH
37714: LD_INT 1
37716: ARRAY
37717: PPUSH
37718: LD_VAR 0 5
37722: PUSH
37723: LD_INT 2
37725: ARRAY
37726: PPUSH
37727: CALL 36686 0 3
37731: NOT
37732: IFFALSE 37738
// exit ;
37734: POP
37735: POP
37736: GO 37742
37738: GO 37701
37740: POP
37741: POP
// end ;
37742: LD_VAR 0 4
37746: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
37747: LD_INT 0
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
// if GetClass ( unit ) <> class_sniper then
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 257
37767: PUSH
37768: LD_INT 5
37770: NONEQUAL
37771: IFFALSE 37775
// exit ;
37773: GO 38241
// dist := 8 ;
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: LD_INT 8
37782: ST_TO_ADDR
// viewRange := 12 ;
37783: LD_ADDR_VAR 0 8
37787: PUSH
37788: LD_INT 12
37790: ST_TO_ADDR
// side := GetSide ( unit ) ;
37791: LD_ADDR_VAR 0 6
37795: PUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 255
37805: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37806: LD_INT 61
37808: PPUSH
37809: LD_VAR 0 6
37813: PPUSH
37814: CALL_OW 321
37818: PUSH
37819: LD_INT 2
37821: EQUAL
37822: IFFALSE 37832
// viewRange := 16 ;
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_INT 16
37831: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37832: LD_VAR 0 1
37836: PPUSH
37837: LD_VAR 0 2
37841: PPUSH
37842: LD_VAR 0 3
37846: PPUSH
37847: CALL_OW 297
37851: PUSH
37852: LD_VAR 0 5
37856: GREATER
37857: IFFALSE 37936
// begin ComMoveXY ( unit , x , y ) ;
37859: LD_VAR 0 1
37863: PPUSH
37864: LD_VAR 0 2
37868: PPUSH
37869: LD_VAR 0 3
37873: PPUSH
37874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37878: LD_INT 35
37880: PPUSH
37881: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37885: LD_VAR 0 1
37889: PPUSH
37890: LD_VAR 0 2
37894: PPUSH
37895: LD_VAR 0 3
37899: PPUSH
37900: CALL 74838 0 3
37904: NOT
37905: IFFALSE 37909
// exit ;
37907: GO 38241
// until GetDistUnitXY ( unit , x , y ) < dist ;
37909: LD_VAR 0 1
37913: PPUSH
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_VAR 0 3
37923: PPUSH
37924: CALL_OW 297
37928: PUSH
37929: LD_VAR 0 5
37933: LESS
37934: IFFALSE 37878
// end ; ComTurnXY ( unit , x , y ) ;
37936: LD_VAR 0 1
37940: PPUSH
37941: LD_VAR 0 2
37945: PPUSH
37946: LD_VAR 0 3
37950: PPUSH
37951: CALL_OW 118
// repeat if Multiplayer then
37955: LD_OWVAR 4
37959: IFFALSE 37970
// wait ( 35 ) else
37961: LD_INT 35
37963: PPUSH
37964: CALL_OW 67
37968: GO 37977
// wait ( 5 ) ;
37970: LD_INT 5
37972: PPUSH
37973: CALL_OW 67
// _d := GetDir ( unit ) ;
37977: LD_ADDR_VAR 0 11
37981: PUSH
37982: LD_VAR 0 1
37986: PPUSH
37987: CALL_OW 254
37991: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37992: LD_ADDR_VAR 0 7
37996: PUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: CALL_OW 250
38006: PPUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 251
38016: PPUSH
38017: LD_VAR 0 2
38021: PPUSH
38022: LD_VAR 0 3
38026: PPUSH
38027: CALL 77446 0 4
38031: ST_TO_ADDR
// until dir = _d ;
38032: LD_VAR 0 7
38036: PUSH
38037: LD_VAR 0 11
38041: EQUAL
38042: IFFALSE 37955
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
38044: LD_ADDR_VAR 0 9
38048: PUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 250
38058: PPUSH
38059: LD_VAR 0 7
38063: PPUSH
38064: LD_VAR 0 5
38068: PPUSH
38069: CALL_OW 272
38073: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
38074: LD_ADDR_VAR 0 10
38078: PUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 251
38088: PPUSH
38089: LD_VAR 0 7
38093: PPUSH
38094: LD_VAR 0 5
38098: PPUSH
38099: CALL_OW 273
38103: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38104: LD_VAR 0 9
38108: PPUSH
38109: LD_VAR 0 10
38113: PPUSH
38114: CALL_OW 488
38118: NOT
38119: IFFALSE 38123
// exit ;
38121: GO 38241
// ComAnimCustom ( unit , 1 ) ;
38123: LD_VAR 0 1
38127: PPUSH
38128: LD_INT 1
38130: PPUSH
38131: CALL_OW 592
// p := 0 ;
38135: LD_ADDR_VAR 0 12
38139: PUSH
38140: LD_INT 0
38142: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38143: LD_VAR 0 9
38147: PPUSH
38148: LD_VAR 0 10
38152: PPUSH
38153: LD_VAR 0 6
38157: PPUSH
38158: LD_VAR 0 8
38162: PPUSH
38163: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
38167: LD_INT 35
38169: PPUSH
38170: CALL_OW 67
// p := Inc ( p ) ;
38174: LD_ADDR_VAR 0 12
38178: PUSH
38179: LD_VAR 0 12
38183: PPUSH
38184: CALL 77402 0 1
38188: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
38189: LD_VAR 0 12
38193: PUSH
38194: LD_INT 3
38196: EQUAL
38197: PUSH
38198: LD_VAR 0 1
38202: PPUSH
38203: CALL_OW 302
38207: NOT
38208: OR
38209: PUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 301
38219: OR
38220: IFFALSE 38167
// RemoveSeeing ( _x , _y , side ) ;
38222: LD_VAR 0 9
38226: PPUSH
38227: LD_VAR 0 10
38231: PPUSH
38232: LD_VAR 0 6
38236: PPUSH
38237: CALL_OW 331
// end ; end_of_file
38241: LD_VAR 0 4
38245: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38246: LD_INT 0
38248: PPUSH
38249: PPUSH
// if exist_mode then
38250: LD_VAR 0 2
38254: IFFALSE 38300
// begin unit := CreateCharacter ( prefix & ident ) ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: LD_VAR 0 3
38265: PUSH
38266: LD_VAR 0 1
38270: STR
38271: PPUSH
38272: CALL_OW 34
38276: ST_TO_ADDR
// if unit then
38277: LD_VAR 0 5
38281: IFFALSE 38298
// DeleteCharacters ( prefix & ident ) ;
38283: LD_VAR 0 3
38287: PUSH
38288: LD_VAR 0 1
38292: STR
38293: PPUSH
38294: CALL_OW 40
// end else
38298: GO 38315
// unit := NewCharacter ( ident ) ;
38300: LD_ADDR_VAR 0 5
38304: PUSH
38305: LD_VAR 0 1
38309: PPUSH
38310: CALL_OW 25
38314: ST_TO_ADDR
// result := unit ;
38315: LD_ADDR_VAR 0 4
38319: PUSH
38320: LD_VAR 0 5
38324: ST_TO_ADDR
// end ;
38325: LD_VAR 0 4
38329: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
// if exist_mode then
38334: LD_VAR 0 2
38338: IFFALSE 38363
// unit := CreateCharacter ( prefix & ident ) else
38340: LD_ADDR_VAR 0 5
38344: PUSH
38345: LD_VAR 0 3
38349: PUSH
38350: LD_VAR 0 1
38354: STR
38355: PPUSH
38356: CALL_OW 34
38360: ST_TO_ADDR
38361: GO 38378
// unit := NewCharacter ( ident ) ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 1
38372: PPUSH
38373: CALL_OW 25
38377: ST_TO_ADDR
// result := unit ;
38378: LD_ADDR_VAR 0 4
38382: PUSH
38383: LD_VAR 0 5
38387: ST_TO_ADDR
// end ;
38388: LD_VAR 0 4
38392: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38393: LD_INT 0
38395: PPUSH
38396: PPUSH
// if not side or not nation then
38397: LD_VAR 0 1
38401: NOT
38402: PUSH
38403: LD_VAR 0 2
38407: NOT
38408: OR
38409: IFFALSE 38413
// exit ;
38411: GO 39181
// case nation of nation_american :
38413: LD_VAR 0 2
38417: PUSH
38418: LD_INT 1
38420: DOUBLE
38421: EQUAL
38422: IFTRUE 38426
38424: GO 38640
38426: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38427: LD_ADDR_VAR 0 4
38431: PUSH
38432: LD_INT 35
38434: PUSH
38435: LD_INT 45
38437: PUSH
38438: LD_INT 46
38440: PUSH
38441: LD_INT 47
38443: PUSH
38444: LD_INT 82
38446: PUSH
38447: LD_INT 83
38449: PUSH
38450: LD_INT 84
38452: PUSH
38453: LD_INT 85
38455: PUSH
38456: LD_INT 86
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: LD_INT 6
38467: PUSH
38468: LD_INT 15
38470: PUSH
38471: LD_INT 16
38473: PUSH
38474: LD_INT 7
38476: PUSH
38477: LD_INT 12
38479: PUSH
38480: LD_INT 13
38482: PUSH
38483: LD_INT 10
38485: PUSH
38486: LD_INT 14
38488: PUSH
38489: LD_INT 20
38491: PUSH
38492: LD_INT 21
38494: PUSH
38495: LD_INT 22
38497: PUSH
38498: LD_INT 25
38500: PUSH
38501: LD_INT 32
38503: PUSH
38504: LD_INT 27
38506: PUSH
38507: LD_INT 36
38509: PUSH
38510: LD_INT 69
38512: PUSH
38513: LD_INT 39
38515: PUSH
38516: LD_INT 34
38518: PUSH
38519: LD_INT 40
38521: PUSH
38522: LD_INT 48
38524: PUSH
38525: LD_INT 49
38527: PUSH
38528: LD_INT 50
38530: PUSH
38531: LD_INT 51
38533: PUSH
38534: LD_INT 52
38536: PUSH
38537: LD_INT 53
38539: PUSH
38540: LD_INT 54
38542: PUSH
38543: LD_INT 55
38545: PUSH
38546: LD_INT 56
38548: PUSH
38549: LD_INT 57
38551: PUSH
38552: LD_INT 58
38554: PUSH
38555: LD_INT 59
38557: PUSH
38558: LD_INT 60
38560: PUSH
38561: LD_INT 61
38563: PUSH
38564: LD_INT 62
38566: PUSH
38567: LD_INT 80
38569: PUSH
38570: LD_INT 82
38572: PUSH
38573: LD_INT 83
38575: PUSH
38576: LD_INT 84
38578: PUSH
38579: LD_INT 85
38581: PUSH
38582: LD_INT 86
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: ST_TO_ADDR
38638: GO 39105
38640: LD_INT 2
38642: DOUBLE
38643: EQUAL
38644: IFTRUE 38648
38646: GO 38874
38648: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38649: LD_ADDR_VAR 0 4
38653: PUSH
38654: LD_INT 35
38656: PUSH
38657: LD_INT 45
38659: PUSH
38660: LD_INT 46
38662: PUSH
38663: LD_INT 47
38665: PUSH
38666: LD_INT 82
38668: PUSH
38669: LD_INT 83
38671: PUSH
38672: LD_INT 84
38674: PUSH
38675: LD_INT 85
38677: PUSH
38678: LD_INT 87
38680: PUSH
38681: LD_INT 70
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 11
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: LD_INT 4
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: LD_INT 6
38701: PUSH
38702: LD_INT 15
38704: PUSH
38705: LD_INT 18
38707: PUSH
38708: LD_INT 7
38710: PUSH
38711: LD_INT 17
38713: PUSH
38714: LD_INT 8
38716: PUSH
38717: LD_INT 20
38719: PUSH
38720: LD_INT 21
38722: PUSH
38723: LD_INT 22
38725: PUSH
38726: LD_INT 72
38728: PUSH
38729: LD_INT 26
38731: PUSH
38732: LD_INT 69
38734: PUSH
38735: LD_INT 39
38737: PUSH
38738: LD_INT 40
38740: PUSH
38741: LD_INT 41
38743: PUSH
38744: LD_INT 42
38746: PUSH
38747: LD_INT 43
38749: PUSH
38750: LD_INT 48
38752: PUSH
38753: LD_INT 49
38755: PUSH
38756: LD_INT 50
38758: PUSH
38759: LD_INT 51
38761: PUSH
38762: LD_INT 52
38764: PUSH
38765: LD_INT 53
38767: PUSH
38768: LD_INT 54
38770: PUSH
38771: LD_INT 55
38773: PUSH
38774: LD_INT 56
38776: PUSH
38777: LD_INT 60
38779: PUSH
38780: LD_INT 61
38782: PUSH
38783: LD_INT 62
38785: PUSH
38786: LD_INT 66
38788: PUSH
38789: LD_INT 67
38791: PUSH
38792: LD_INT 68
38794: PUSH
38795: LD_INT 81
38797: PUSH
38798: LD_INT 82
38800: PUSH
38801: LD_INT 83
38803: PUSH
38804: LD_INT 84
38806: PUSH
38807: LD_INT 85
38809: PUSH
38810: LD_INT 87
38812: PUSH
38813: LD_INT 88
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
38872: GO 39105
38874: LD_INT 3
38876: DOUBLE
38877: EQUAL
38878: IFTRUE 38882
38880: GO 39104
38882: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38883: LD_ADDR_VAR 0 4
38887: PUSH
38888: LD_INT 46
38890: PUSH
38891: LD_INT 47
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 82
38902: PUSH
38903: LD_INT 83
38905: PUSH
38906: LD_INT 84
38908: PUSH
38909: LD_INT 85
38911: PUSH
38912: LD_INT 86
38914: PUSH
38915: LD_INT 11
38917: PUSH
38918: LD_INT 9
38920: PUSH
38921: LD_INT 20
38923: PUSH
38924: LD_INT 19
38926: PUSH
38927: LD_INT 21
38929: PUSH
38930: LD_INT 24
38932: PUSH
38933: LD_INT 22
38935: PUSH
38936: LD_INT 25
38938: PUSH
38939: LD_INT 28
38941: PUSH
38942: LD_INT 29
38944: PUSH
38945: LD_INT 30
38947: PUSH
38948: LD_INT 31
38950: PUSH
38951: LD_INT 37
38953: PUSH
38954: LD_INT 38
38956: PUSH
38957: LD_INT 32
38959: PUSH
38960: LD_INT 27
38962: PUSH
38963: LD_INT 33
38965: PUSH
38966: LD_INT 69
38968: PUSH
38969: LD_INT 39
38971: PUSH
38972: LD_INT 34
38974: PUSH
38975: LD_INT 40
38977: PUSH
38978: LD_INT 71
38980: PUSH
38981: LD_INT 23
38983: PUSH
38984: LD_INT 44
38986: PUSH
38987: LD_INT 48
38989: PUSH
38990: LD_INT 49
38992: PUSH
38993: LD_INT 50
38995: PUSH
38996: LD_INT 51
38998: PUSH
38999: LD_INT 52
39001: PUSH
39002: LD_INT 53
39004: PUSH
39005: LD_INT 54
39007: PUSH
39008: LD_INT 55
39010: PUSH
39011: LD_INT 56
39013: PUSH
39014: LD_INT 57
39016: PUSH
39017: LD_INT 58
39019: PUSH
39020: LD_INT 59
39022: PUSH
39023: LD_INT 63
39025: PUSH
39026: LD_INT 64
39028: PUSH
39029: LD_INT 65
39031: PUSH
39032: LD_INT 82
39034: PUSH
39035: LD_INT 83
39037: PUSH
39038: LD_INT 84
39040: PUSH
39041: LD_INT 85
39043: PUSH
39044: LD_INT 86
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
39102: GO 39105
39104: POP
// if state > - 1 and state < 3 then
39105: LD_VAR 0 3
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: GREATER
39114: PUSH
39115: LD_VAR 0 3
39119: PUSH
39120: LD_INT 3
39122: LESS
39123: AND
39124: IFFALSE 39181
// for i in result do
39126: LD_ADDR_VAR 0 5
39130: PUSH
39131: LD_VAR 0 4
39135: PUSH
39136: FOR_IN
39137: IFFALSE 39179
// if GetTech ( i , side ) <> state then
39139: LD_VAR 0 5
39143: PPUSH
39144: LD_VAR 0 1
39148: PPUSH
39149: CALL_OW 321
39153: PUSH
39154: LD_VAR 0 3
39158: NONEQUAL
39159: IFFALSE 39177
// result := result diff i ;
39161: LD_ADDR_VAR 0 4
39165: PUSH
39166: LD_VAR 0 4
39170: PUSH
39171: LD_VAR 0 5
39175: DIFF
39176: ST_TO_ADDR
39177: GO 39136
39179: POP
39180: POP
// end ;
39181: LD_VAR 0 4
39185: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39186: LD_INT 0
39188: PPUSH
39189: PPUSH
39190: PPUSH
// result := true ;
39191: LD_ADDR_VAR 0 3
39195: PUSH
39196: LD_INT 1
39198: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39199: LD_ADDR_VAR 0 5
39203: PUSH
39204: LD_VAR 0 2
39208: PPUSH
39209: CALL_OW 480
39213: ST_TO_ADDR
// if not tmp then
39214: LD_VAR 0 5
39218: NOT
39219: IFFALSE 39223
// exit ;
39221: GO 39272
// for i in tmp do
39223: LD_ADDR_VAR 0 4
39227: PUSH
39228: LD_VAR 0 5
39232: PUSH
39233: FOR_IN
39234: IFFALSE 39270
// if GetTech ( i , side ) <> state_researched then
39236: LD_VAR 0 4
39240: PPUSH
39241: LD_VAR 0 1
39245: PPUSH
39246: CALL_OW 321
39250: PUSH
39251: LD_INT 2
39253: NONEQUAL
39254: IFFALSE 39268
// begin result := false ;
39256: LD_ADDR_VAR 0 3
39260: PUSH
39261: LD_INT 0
39263: ST_TO_ADDR
// exit ;
39264: POP
39265: POP
39266: GO 39272
// end ;
39268: GO 39233
39270: POP
39271: POP
// end ;
39272: LD_VAR 0 3
39276: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39277: LD_INT 0
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
39287: PPUSH
39288: PPUSH
39289: PPUSH
39290: PPUSH
39291: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39292: LD_VAR 0 1
39296: NOT
39297: PUSH
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 257
39307: PUSH
39308: LD_INT 9
39310: NONEQUAL
39311: OR
39312: IFFALSE 39316
// exit ;
39314: GO 39889
// side := GetSide ( unit ) ;
39316: LD_ADDR_VAR 0 9
39320: PUSH
39321: LD_VAR 0 1
39325: PPUSH
39326: CALL_OW 255
39330: ST_TO_ADDR
// tech_space := tech_spacanom ;
39331: LD_ADDR_VAR 0 12
39335: PUSH
39336: LD_INT 29
39338: ST_TO_ADDR
// tech_time := tech_taurad ;
39339: LD_ADDR_VAR 0 13
39343: PUSH
39344: LD_INT 28
39346: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39347: LD_ADDR_VAR 0 11
39351: PUSH
39352: LD_VAR 0 1
39356: PPUSH
39357: CALL_OW 310
39361: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39362: LD_VAR 0 11
39366: PPUSH
39367: CALL_OW 247
39371: PUSH
39372: LD_INT 2
39374: EQUAL
39375: IFFALSE 39379
// exit ;
39377: GO 39889
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39379: LD_ADDR_VAR 0 8
39383: PUSH
39384: LD_INT 81
39386: PUSH
39387: LD_VAR 0 9
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: LD_INT 21
39401: PUSH
39402: LD_INT 3
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PPUSH
39417: CALL_OW 69
39421: ST_TO_ADDR
// if not tmp then
39422: LD_VAR 0 8
39426: NOT
39427: IFFALSE 39431
// exit ;
39429: GO 39889
// if in_unit then
39431: LD_VAR 0 11
39435: IFFALSE 39459
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39437: LD_ADDR_VAR 0 10
39441: PUSH
39442: LD_VAR 0 8
39446: PPUSH
39447: LD_VAR 0 11
39451: PPUSH
39452: CALL_OW 74
39456: ST_TO_ADDR
39457: GO 39479
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39459: LD_ADDR_VAR 0 10
39463: PUSH
39464: LD_VAR 0 8
39468: PPUSH
39469: LD_VAR 0 1
39473: PPUSH
39474: CALL_OW 74
39478: ST_TO_ADDR
// if not enemy then
39479: LD_VAR 0 10
39483: NOT
39484: IFFALSE 39488
// exit ;
39486: GO 39889
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39488: LD_VAR 0 11
39492: PUSH
39493: LD_VAR 0 11
39497: PPUSH
39498: LD_VAR 0 10
39502: PPUSH
39503: CALL_OW 296
39507: PUSH
39508: LD_INT 13
39510: GREATER
39511: AND
39512: PUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: LD_VAR 0 10
39522: PPUSH
39523: CALL_OW 296
39527: PUSH
39528: LD_INT 12
39530: GREATER
39531: OR
39532: IFFALSE 39536
// exit ;
39534: GO 39889
// missile := [ 1 ] ;
39536: LD_ADDR_VAR 0 14
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39547: LD_VAR 0 9
39551: PPUSH
39552: LD_VAR 0 12
39556: PPUSH
39557: CALL_OW 325
39561: IFFALSE 39590
// missile := Replace ( missile , missile + 1 , 2 ) ;
39563: LD_ADDR_VAR 0 14
39567: PUSH
39568: LD_VAR 0 14
39572: PPUSH
39573: LD_VAR 0 14
39577: PUSH
39578: LD_INT 1
39580: PLUS
39581: PPUSH
39582: LD_INT 2
39584: PPUSH
39585: CALL_OW 1
39589: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39590: LD_VAR 0 9
39594: PPUSH
39595: LD_VAR 0 13
39599: PPUSH
39600: CALL_OW 325
39604: PUSH
39605: LD_VAR 0 10
39609: PPUSH
39610: CALL_OW 255
39614: PPUSH
39615: LD_VAR 0 13
39619: PPUSH
39620: CALL_OW 325
39624: NOT
39625: AND
39626: IFFALSE 39655
// missile := Replace ( missile , missile + 1 , 3 ) ;
39628: LD_ADDR_VAR 0 14
39632: PUSH
39633: LD_VAR 0 14
39637: PPUSH
39638: LD_VAR 0 14
39642: PUSH
39643: LD_INT 1
39645: PLUS
39646: PPUSH
39647: LD_INT 3
39649: PPUSH
39650: CALL_OW 1
39654: ST_TO_ADDR
// if missile < 2 then
39655: LD_VAR 0 14
39659: PUSH
39660: LD_INT 2
39662: LESS
39663: IFFALSE 39667
// exit ;
39665: GO 39889
// x := GetX ( enemy ) ;
39667: LD_ADDR_VAR 0 4
39671: PUSH
39672: LD_VAR 0 10
39676: PPUSH
39677: CALL_OW 250
39681: ST_TO_ADDR
// y := GetY ( enemy ) ;
39682: LD_ADDR_VAR 0 5
39686: PUSH
39687: LD_VAR 0 10
39691: PPUSH
39692: CALL_OW 251
39696: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39697: LD_ADDR_VAR 0 6
39701: PUSH
39702: LD_VAR 0 4
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PPUSH
39711: LD_INT 1
39713: PPUSH
39714: CALL_OW 12
39718: PLUS
39719: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39720: LD_ADDR_VAR 0 7
39724: PUSH
39725: LD_VAR 0 5
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PPUSH
39734: LD_INT 1
39736: PPUSH
39737: CALL_OW 12
39741: PLUS
39742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39743: LD_VAR 0 6
39747: PPUSH
39748: LD_VAR 0 7
39752: PPUSH
39753: CALL_OW 488
39757: NOT
39758: IFFALSE 39780
// begin _x := x ;
39760: LD_ADDR_VAR 0 6
39764: PUSH
39765: LD_VAR 0 4
39769: ST_TO_ADDR
// _y := y ;
39770: LD_ADDR_VAR 0 7
39774: PUSH
39775: LD_VAR 0 5
39779: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39780: LD_ADDR_VAR 0 3
39784: PUSH
39785: LD_INT 1
39787: PPUSH
39788: LD_VAR 0 14
39792: PPUSH
39793: CALL_OW 12
39797: ST_TO_ADDR
// case i of 1 :
39798: LD_VAR 0 3
39802: PUSH
39803: LD_INT 1
39805: DOUBLE
39806: EQUAL
39807: IFTRUE 39811
39809: GO 39828
39811: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39812: LD_VAR 0 1
39816: PPUSH
39817: LD_VAR 0 10
39821: PPUSH
39822: CALL_OW 115
39826: GO 39889
39828: LD_INT 2
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39858
39836: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39837: LD_VAR 0 1
39841: PPUSH
39842: LD_VAR 0 6
39846: PPUSH
39847: LD_VAR 0 7
39851: PPUSH
39852: CALL_OW 153
39856: GO 39889
39858: LD_INT 3
39860: DOUBLE
39861: EQUAL
39862: IFTRUE 39866
39864: GO 39888
39866: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39867: LD_VAR 0 1
39871: PPUSH
39872: LD_VAR 0 6
39876: PPUSH
39877: LD_VAR 0 7
39881: PPUSH
39882: CALL_OW 154
39886: GO 39889
39888: POP
// end ;
39889: LD_VAR 0 2
39893: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39894: LD_INT 0
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
// if not unit or not building then
39902: LD_VAR 0 1
39906: NOT
39907: PUSH
39908: LD_VAR 0 2
39912: NOT
39913: OR
39914: IFFALSE 39918
// exit ;
39916: GO 40076
// x := GetX ( building ) ;
39918: LD_ADDR_VAR 0 5
39922: PUSH
39923: LD_VAR 0 2
39927: PPUSH
39928: CALL_OW 250
39932: ST_TO_ADDR
// y := GetY ( building ) ;
39933: LD_ADDR_VAR 0 6
39937: PUSH
39938: LD_VAR 0 2
39942: PPUSH
39943: CALL_OW 251
39947: ST_TO_ADDR
// for i = 0 to 5 do
39948: LD_ADDR_VAR 0 4
39952: PUSH
39953: DOUBLE
39954: LD_INT 0
39956: DEC
39957: ST_TO_ADDR
39958: LD_INT 5
39960: PUSH
39961: FOR_TO
39962: IFFALSE 40074
// begin _x := ShiftX ( x , i , 3 ) ;
39964: LD_ADDR_VAR 0 7
39968: PUSH
39969: LD_VAR 0 5
39973: PPUSH
39974: LD_VAR 0 4
39978: PPUSH
39979: LD_INT 3
39981: PPUSH
39982: CALL_OW 272
39986: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39987: LD_ADDR_VAR 0 8
39991: PUSH
39992: LD_VAR 0 6
39996: PPUSH
39997: LD_VAR 0 4
40001: PPUSH
40002: LD_INT 3
40004: PPUSH
40005: CALL_OW 273
40009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40010: LD_VAR 0 7
40014: PPUSH
40015: LD_VAR 0 8
40019: PPUSH
40020: CALL_OW 488
40024: NOT
40025: IFFALSE 40029
// continue ;
40027: GO 39961
// if HexInfo ( _x , _y ) = 0 then
40029: LD_VAR 0 7
40033: PPUSH
40034: LD_VAR 0 8
40038: PPUSH
40039: CALL_OW 428
40043: PUSH
40044: LD_INT 0
40046: EQUAL
40047: IFFALSE 40072
// begin ComMoveXY ( unit , _x , _y ) ;
40049: LD_VAR 0 1
40053: PPUSH
40054: LD_VAR 0 7
40058: PPUSH
40059: LD_VAR 0 8
40063: PPUSH
40064: CALL_OW 111
// exit ;
40068: POP
40069: POP
40070: GO 40076
// end ; end ;
40072: GO 39961
40074: POP
40075: POP
// end ;
40076: LD_VAR 0 3
40080: RET
// export function ScanBase ( side , base_area ) ; begin
40081: LD_INT 0
40083: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40084: LD_ADDR_VAR 0 3
40088: PUSH
40089: LD_VAR 0 2
40093: PPUSH
40094: LD_INT 81
40096: PUSH
40097: LD_VAR 0 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PPUSH
40106: CALL_OW 70
40110: ST_TO_ADDR
// end ;
40111: LD_VAR 0 3
40115: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40116: LD_INT 0
40118: PPUSH
40119: PPUSH
40120: PPUSH
40121: PPUSH
// result := false ;
40122: LD_ADDR_VAR 0 2
40126: PUSH
40127: LD_INT 0
40129: ST_TO_ADDR
// side := GetSide ( unit ) ;
40130: LD_ADDR_VAR 0 3
40134: PUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 255
40144: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40145: LD_ADDR_VAR 0 4
40149: PUSH
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 248
40159: ST_TO_ADDR
// case nat of 1 :
40160: LD_VAR 0 4
40164: PUSH
40165: LD_INT 1
40167: DOUBLE
40168: EQUAL
40169: IFTRUE 40173
40171: GO 40184
40173: POP
// tech := tech_lassight ; 2 :
40174: LD_ADDR_VAR 0 5
40178: PUSH
40179: LD_INT 12
40181: ST_TO_ADDR
40182: GO 40223
40184: LD_INT 2
40186: DOUBLE
40187: EQUAL
40188: IFTRUE 40192
40190: GO 40203
40192: POP
// tech := tech_mortar ; 3 :
40193: LD_ADDR_VAR 0 5
40197: PUSH
40198: LD_INT 41
40200: ST_TO_ADDR
40201: GO 40223
40203: LD_INT 3
40205: DOUBLE
40206: EQUAL
40207: IFTRUE 40211
40209: GO 40222
40211: POP
// tech := tech_bazooka ; end ;
40212: LD_ADDR_VAR 0 5
40216: PUSH
40217: LD_INT 44
40219: ST_TO_ADDR
40220: GO 40223
40222: POP
// if Researched ( side , tech ) then
40223: LD_VAR 0 3
40227: PPUSH
40228: LD_VAR 0 5
40232: PPUSH
40233: CALL_OW 325
40237: IFFALSE 40264
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40239: LD_ADDR_VAR 0 2
40243: PUSH
40244: LD_INT 5
40246: PUSH
40247: LD_INT 8
40249: PUSH
40250: LD_INT 9
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: PUSH
40258: LD_VAR 0 4
40262: ARRAY
40263: ST_TO_ADDR
// end ;
40264: LD_VAR 0 2
40268: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
// if not mines then
40274: LD_VAR 0 2
40278: NOT
40279: IFFALSE 40283
// exit ;
40281: GO 40427
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40283: LD_ADDR_VAR 0 5
40287: PUSH
40288: LD_INT 81
40290: PUSH
40291: LD_VAR 0 1
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: LD_INT 21
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PPUSH
40321: CALL_OW 69
40325: ST_TO_ADDR
// for i in mines do
40326: LD_ADDR_VAR 0 4
40330: PUSH
40331: LD_VAR 0 2
40335: PUSH
40336: FOR_IN
40337: IFFALSE 40425
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40339: LD_VAR 0 4
40343: PUSH
40344: LD_INT 1
40346: ARRAY
40347: PPUSH
40348: LD_VAR 0 4
40352: PUSH
40353: LD_INT 2
40355: ARRAY
40356: PPUSH
40357: CALL_OW 458
40361: NOT
40362: IFFALSE 40366
// continue ;
40364: GO 40336
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40366: LD_VAR 0 4
40370: PUSH
40371: LD_INT 1
40373: ARRAY
40374: PPUSH
40375: LD_VAR 0 4
40379: PUSH
40380: LD_INT 2
40382: ARRAY
40383: PPUSH
40384: CALL_OW 428
40388: PUSH
40389: LD_VAR 0 5
40393: IN
40394: IFFALSE 40423
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40396: LD_VAR 0 4
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: PPUSH
40405: LD_VAR 0 4
40409: PUSH
40410: LD_INT 2
40412: ARRAY
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 456
// end ;
40423: GO 40336
40425: POP
40426: POP
// end ;
40427: LD_VAR 0 3
40431: RET
// export function Count ( array ) ; begin
40432: LD_INT 0
40434: PPUSH
// result := array + 0 ;
40435: LD_ADDR_VAR 0 2
40439: PUSH
40440: LD_VAR 0 1
40444: PUSH
40445: LD_INT 0
40447: PLUS
40448: ST_TO_ADDR
// end ;
40449: LD_VAR 0 2
40453: RET
// export function IsEmpty ( building ) ; begin
40454: LD_INT 0
40456: PPUSH
// if not building then
40457: LD_VAR 0 1
40461: NOT
40462: IFFALSE 40466
// exit ;
40464: GO 40509
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40466: LD_ADDR_VAR 0 2
40470: PUSH
40471: LD_VAR 0 1
40475: PUSH
40476: LD_INT 22
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 255
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 58
40495: PUSH
40496: EMPTY
40497: LIST
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PPUSH
40503: CALL_OW 69
40507: IN
40508: ST_TO_ADDR
// end ;
40509: LD_VAR 0 2
40513: RET
// export function IsNotFull ( building ) ; var places ; begin
40514: LD_INT 0
40516: PPUSH
40517: PPUSH
// if not building then
40518: LD_VAR 0 1
40522: NOT
40523: IFFALSE 40527
// exit ;
40525: GO 40555
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40527: LD_ADDR_VAR 0 2
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: LD_INT 3
40539: PUSH
40540: LD_INT 62
40542: PUSH
40543: EMPTY
40544: LIST
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PPUSH
40550: CALL_OW 72
40554: ST_TO_ADDR
// end ;
40555: LD_VAR 0 2
40559: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40560: LD_INT 0
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
// tmp := [ ] ;
40566: LD_ADDR_VAR 0 3
40570: PUSH
40571: EMPTY
40572: ST_TO_ADDR
// list := [ ] ;
40573: LD_ADDR_VAR 0 5
40577: PUSH
40578: EMPTY
40579: ST_TO_ADDR
// for i = 16 to 25 do
40580: LD_ADDR_VAR 0 4
40584: PUSH
40585: DOUBLE
40586: LD_INT 16
40588: DEC
40589: ST_TO_ADDR
40590: LD_INT 25
40592: PUSH
40593: FOR_TO
40594: IFFALSE 40667
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40596: LD_ADDR_VAR 0 3
40600: PUSH
40601: LD_VAR 0 3
40605: PUSH
40606: LD_INT 22
40608: PUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 255
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 91
40625: PUSH
40626: LD_VAR 0 1
40630: PUSH
40631: LD_INT 6
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 30
40641: PUSH
40642: LD_VAR 0 4
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: PPUSH
40659: CALL_OW 69
40663: ADD
40664: ST_TO_ADDR
40665: GO 40593
40667: POP
40668: POP
// for i = 1 to tmp do
40669: LD_ADDR_VAR 0 4
40673: PUSH
40674: DOUBLE
40675: LD_INT 1
40677: DEC
40678: ST_TO_ADDR
40679: LD_VAR 0 3
40683: PUSH
40684: FOR_TO
40685: IFFALSE 40773
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40687: LD_ADDR_VAR 0 5
40691: PUSH
40692: LD_VAR 0 5
40696: PUSH
40697: LD_VAR 0 3
40701: PUSH
40702: LD_VAR 0 4
40706: ARRAY
40707: PPUSH
40708: CALL_OW 266
40712: PUSH
40713: LD_VAR 0 3
40717: PUSH
40718: LD_VAR 0 4
40722: ARRAY
40723: PPUSH
40724: CALL_OW 250
40728: PUSH
40729: LD_VAR 0 3
40733: PUSH
40734: LD_VAR 0 4
40738: ARRAY
40739: PPUSH
40740: CALL_OW 251
40744: PUSH
40745: LD_VAR 0 3
40749: PUSH
40750: LD_VAR 0 4
40754: ARRAY
40755: PPUSH
40756: CALL_OW 254
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: PUSH
40767: EMPTY
40768: LIST
40769: ADD
40770: ST_TO_ADDR
40771: GO 40684
40773: POP
40774: POP
// result := list ;
40775: LD_ADDR_VAR 0 2
40779: PUSH
40780: LD_VAR 0 5
40784: ST_TO_ADDR
// end ;
40785: LD_VAR 0 2
40789: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
// if not factory then
40799: LD_VAR 0 1
40803: NOT
40804: IFFALSE 40808
// exit ;
40806: GO 41401
// if control = control_apeman then
40808: LD_VAR 0 4
40812: PUSH
40813: LD_INT 5
40815: EQUAL
40816: IFFALSE 40925
// begin tmp := UnitsInside ( factory ) ;
40818: LD_ADDR_VAR 0 8
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: CALL_OW 313
40832: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40833: LD_VAR 0 8
40837: PPUSH
40838: LD_INT 25
40840: PUSH
40841: LD_INT 12
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PPUSH
40848: CALL_OW 72
40852: NOT
40853: IFFALSE 40863
// control := control_manual ;
40855: LD_ADDR_VAR 0 4
40859: PUSH
40860: LD_INT 1
40862: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40863: LD_ADDR_VAR 0 8
40867: PUSH
40868: LD_VAR 0 1
40872: PPUSH
40873: CALL 40560 0 1
40877: ST_TO_ADDR
// if tmp then
40878: LD_VAR 0 8
40882: IFFALSE 40925
// begin for i in tmp do
40884: LD_ADDR_VAR 0 7
40888: PUSH
40889: LD_VAR 0 8
40893: PUSH
40894: FOR_IN
40895: IFFALSE 40923
// if i [ 1 ] = b_ext_radio then
40897: LD_VAR 0 7
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PUSH
40906: LD_INT 22
40908: EQUAL
40909: IFFALSE 40921
// begin control := control_remote ;
40911: LD_ADDR_VAR 0 4
40915: PUSH
40916: LD_INT 2
40918: ST_TO_ADDR
// break ;
40919: GO 40923
// end ;
40921: GO 40894
40923: POP
40924: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_VAR 0 2
40934: PPUSH
40935: LD_VAR 0 3
40939: PPUSH
40940: LD_VAR 0 4
40944: PPUSH
40945: LD_VAR 0 5
40949: PPUSH
40950: CALL_OW 448
40954: IFFALSE 40989
// begin result := [ chassis , engine , control , weapon ] ;
40956: LD_ADDR_VAR 0 6
40960: PUSH
40961: LD_VAR 0 2
40965: PUSH
40966: LD_VAR 0 3
40970: PUSH
40971: LD_VAR 0 4
40975: PUSH
40976: LD_VAR 0 5
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
// exit ;
40987: GO 41401
// end ; _chassis := AvailableChassisList ( factory ) ;
40989: LD_ADDR_VAR 0 9
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 475
41003: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41004: LD_ADDR_VAR 0 11
41008: PUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 476
41018: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41019: LD_ADDR_VAR 0 12
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 477
41033: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41034: LD_ADDR_VAR 0 10
41038: PUSH
41039: LD_VAR 0 1
41043: PPUSH
41044: CALL_OW 478
41048: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41049: LD_VAR 0 9
41053: NOT
41054: PUSH
41055: LD_VAR 0 11
41059: NOT
41060: OR
41061: PUSH
41062: LD_VAR 0 12
41066: NOT
41067: OR
41068: PUSH
41069: LD_VAR 0 10
41073: NOT
41074: OR
41075: IFFALSE 41110
// begin result := [ chassis , engine , control , weapon ] ;
41077: LD_ADDR_VAR 0 6
41081: PUSH
41082: LD_VAR 0 2
41086: PUSH
41087: LD_VAR 0 3
41091: PUSH
41092: LD_VAR 0 4
41096: PUSH
41097: LD_VAR 0 5
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
// exit ;
41108: GO 41401
// end ; if not chassis in _chassis then
41110: LD_VAR 0 2
41114: PUSH
41115: LD_VAR 0 9
41119: IN
41120: NOT
41121: IFFALSE 41147
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41123: LD_ADDR_VAR 0 2
41127: PUSH
41128: LD_VAR 0 9
41132: PUSH
41133: LD_INT 1
41135: PPUSH
41136: LD_VAR 0 9
41140: PPUSH
41141: CALL_OW 12
41145: ARRAY
41146: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41147: LD_VAR 0 2
41151: PPUSH
41152: LD_VAR 0 3
41156: PPUSH
41157: CALL 41406 0 2
41161: NOT
41162: IFFALSE 41221
// repeat engine := _engine [ 1 ] ;
41164: LD_ADDR_VAR 0 3
41168: PUSH
41169: LD_VAR 0 11
41173: PUSH
41174: LD_INT 1
41176: ARRAY
41177: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41178: LD_ADDR_VAR 0 11
41182: PUSH
41183: LD_VAR 0 11
41187: PPUSH
41188: LD_INT 1
41190: PPUSH
41191: CALL_OW 3
41195: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41196: LD_VAR 0 2
41200: PPUSH
41201: LD_VAR 0 3
41205: PPUSH
41206: CALL 41406 0 2
41210: PUSH
41211: LD_VAR 0 11
41215: PUSH
41216: EMPTY
41217: EQUAL
41218: OR
41219: IFFALSE 41164
// if not control in _control then
41221: LD_VAR 0 4
41225: PUSH
41226: LD_VAR 0 12
41230: IN
41231: NOT
41232: IFFALSE 41258
// control := _control [ rand ( 1 , _control ) ] ;
41234: LD_ADDR_VAR 0 4
41238: PUSH
41239: LD_VAR 0 12
41243: PUSH
41244: LD_INT 1
41246: PPUSH
41247: LD_VAR 0 12
41251: PPUSH
41252: CALL_OW 12
41256: ARRAY
41257: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41258: LD_VAR 0 2
41262: PPUSH
41263: LD_VAR 0 5
41267: PPUSH
41268: CALL 41626 0 2
41272: NOT
41273: IFFALSE 41332
// repeat weapon := _weapon [ 1 ] ;
41275: LD_ADDR_VAR 0 5
41279: PUSH
41280: LD_VAR 0 10
41284: PUSH
41285: LD_INT 1
41287: ARRAY
41288: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41289: LD_ADDR_VAR 0 10
41293: PUSH
41294: LD_VAR 0 10
41298: PPUSH
41299: LD_INT 1
41301: PPUSH
41302: CALL_OW 3
41306: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41307: LD_VAR 0 2
41311: PPUSH
41312: LD_VAR 0 5
41316: PPUSH
41317: CALL 41626 0 2
41321: PUSH
41322: LD_VAR 0 10
41326: PUSH
41327: EMPTY
41328: EQUAL
41329: OR
41330: IFFALSE 41275
// result := [ ] ;
41332: LD_ADDR_VAR 0 6
41336: PUSH
41337: EMPTY
41338: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41339: LD_VAR 0 1
41343: PPUSH
41344: LD_VAR 0 2
41348: PPUSH
41349: LD_VAR 0 3
41353: PPUSH
41354: LD_VAR 0 4
41358: PPUSH
41359: LD_VAR 0 5
41363: PPUSH
41364: CALL_OW 448
41368: IFFALSE 41401
// result := [ chassis , engine , control , weapon ] ;
41370: LD_ADDR_VAR 0 6
41374: PUSH
41375: LD_VAR 0 2
41379: PUSH
41380: LD_VAR 0 3
41384: PUSH
41385: LD_VAR 0 4
41389: PUSH
41390: LD_VAR 0 5
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
// end ;
41401: LD_VAR 0 6
41405: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41406: LD_INT 0
41408: PPUSH
// if not chassis or not engine then
41409: LD_VAR 0 1
41413: NOT
41414: PUSH
41415: LD_VAR 0 2
41419: NOT
41420: OR
41421: IFFALSE 41425
// exit ;
41423: GO 41621
// case engine of engine_solar :
41425: LD_VAR 0 2
41429: PUSH
41430: LD_INT 2
41432: DOUBLE
41433: EQUAL
41434: IFTRUE 41438
41436: GO 41476
41438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41439: LD_ADDR_VAR 0 3
41443: PUSH
41444: LD_INT 11
41446: PUSH
41447: LD_INT 12
41449: PUSH
41450: LD_INT 13
41452: PUSH
41453: LD_INT 14
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: ST_TO_ADDR
41474: GO 41605
41476: LD_INT 1
41478: DOUBLE
41479: EQUAL
41480: IFTRUE 41484
41482: GO 41546
41484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_INT 11
41492: PUSH
41493: LD_INT 12
41495: PUSH
41496: LD_INT 13
41498: PUSH
41499: LD_INT 14
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 3
41510: PUSH
41511: LD_INT 4
41513: PUSH
41514: LD_INT 5
41516: PUSH
41517: LD_INT 21
41519: PUSH
41520: LD_INT 23
41522: PUSH
41523: LD_INT 22
41525: PUSH
41526: LD_INT 24
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
41544: GO 41605
41546: LD_INT 3
41548: DOUBLE
41549: EQUAL
41550: IFTRUE 41554
41552: GO 41604
41554: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41555: LD_ADDR_VAR 0 3
41559: PUSH
41560: LD_INT 13
41562: PUSH
41563: LD_INT 14
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 4
41574: PUSH
41575: LD_INT 5
41577: PUSH
41578: LD_INT 21
41580: PUSH
41581: LD_INT 22
41583: PUSH
41584: LD_INT 23
41586: PUSH
41587: LD_INT 24
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: ST_TO_ADDR
41602: GO 41605
41604: POP
// result := ( chassis in result ) ;
41605: LD_ADDR_VAR 0 3
41609: PUSH
41610: LD_VAR 0 1
41614: PUSH
41615: LD_VAR 0 3
41619: IN
41620: ST_TO_ADDR
// end ;
41621: LD_VAR 0 3
41625: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41626: LD_INT 0
41628: PPUSH
// if not chassis or not weapon then
41629: LD_VAR 0 1
41633: NOT
41634: PUSH
41635: LD_VAR 0 2
41639: NOT
41640: OR
41641: IFFALSE 41645
// exit ;
41643: GO 42705
// case weapon of us_machine_gun :
41645: LD_VAR 0 2
41649: PUSH
41650: LD_INT 2
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41688
41658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41659: LD_ADDR_VAR 0 3
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: LD_INT 4
41675: PUSH
41676: LD_INT 5
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
41686: GO 42689
41688: LD_INT 3
41690: DOUBLE
41691: EQUAL
41692: IFTRUE 41696
41694: GO 41726
41696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: LD_INT 4
41713: PUSH
41714: LD_INT 5
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: ST_TO_ADDR
41724: GO 42689
41726: LD_INT 11
41728: DOUBLE
41729: EQUAL
41730: IFTRUE 41734
41732: GO 41764
41734: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41735: LD_ADDR_VAR 0 3
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 3
41748: PUSH
41749: LD_INT 4
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: ST_TO_ADDR
41762: GO 42689
41764: LD_INT 4
41766: DOUBLE
41767: EQUAL
41768: IFTRUE 41772
41770: GO 41798
41772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41773: LD_ADDR_VAR 0 3
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 4
41786: PUSH
41787: LD_INT 5
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: ST_TO_ADDR
41796: GO 42689
41798: LD_INT 5
41800: DOUBLE
41801: EQUAL
41802: IFTRUE 41806
41804: GO 41832
41806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41807: LD_ADDR_VAR 0 3
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 4
41820: PUSH
41821: LD_INT 5
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: ST_TO_ADDR
41830: GO 42689
41832: LD_INT 9
41834: DOUBLE
41835: EQUAL
41836: IFTRUE 41840
41838: GO 41866
41840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41841: LD_ADDR_VAR 0 3
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: LD_INT 5
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: ST_TO_ADDR
41864: GO 42689
41866: LD_INT 7
41868: DOUBLE
41869: EQUAL
41870: IFTRUE 41874
41872: GO 41900
41874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41875: LD_ADDR_VAR 0 3
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 4
41888: PUSH
41889: LD_INT 5
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
41898: GO 42689
41900: LD_INT 12
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41934
41908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 3
41919: PUSH
41920: LD_INT 4
41922: PUSH
41923: LD_INT 5
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: ST_TO_ADDR
41932: GO 42689
41934: LD_INT 13
41936: DOUBLE
41937: EQUAL
41938: IFTRUE 41942
41940: GO 41968
41942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 4
41956: PUSH
41957: LD_INT 5
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
41966: GO 42689
41968: LD_INT 14
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 41994
41976: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41977: LD_ADDR_VAR 0 3
41981: PUSH
41982: LD_INT 4
41984: PUSH
41985: LD_INT 5
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: ST_TO_ADDR
41992: GO 42689
41994: LD_INT 6
41996: DOUBLE
41997: EQUAL
41998: IFTRUE 42002
42000: GO 42020
42002: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_INT 4
42010: PUSH
42011: LD_INT 5
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: ST_TO_ADDR
42018: GO 42689
42020: LD_INT 10
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42046
42028: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_INT 4
42036: PUSH
42037: LD_INT 5
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: ST_TO_ADDR
42044: GO 42689
42046: LD_INT 22
42048: DOUBLE
42049: EQUAL
42050: IFTRUE 42054
42052: GO 42080
42054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: LD_INT 11
42062: PUSH
42063: LD_INT 12
42065: PUSH
42066: LD_INT 13
42068: PUSH
42069: LD_INT 14
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
42078: GO 42689
42080: LD_INT 23
42082: DOUBLE
42083: EQUAL
42084: IFTRUE 42088
42086: GO 42114
42088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: LD_INT 11
42096: PUSH
42097: LD_INT 12
42099: PUSH
42100: LD_INT 13
42102: PUSH
42103: LD_INT 14
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
42112: GO 42689
42114: LD_INT 24
42116: DOUBLE
42117: EQUAL
42118: IFTRUE 42122
42120: GO 42148
42122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: LD_INT 11
42130: PUSH
42131: LD_INT 12
42133: PUSH
42134: LD_INT 13
42136: PUSH
42137: LD_INT 14
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
42146: GO 42689
42148: LD_INT 30
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42182
42156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 11
42164: PUSH
42165: LD_INT 12
42167: PUSH
42168: LD_INT 13
42170: PUSH
42171: LD_INT 14
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
42180: GO 42689
42182: LD_INT 25
42184: DOUBLE
42185: EQUAL
42186: IFTRUE 42190
42188: GO 42208
42190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42191: LD_ADDR_VAR 0 3
42195: PUSH
42196: LD_INT 13
42198: PUSH
42199: LD_INT 14
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: ST_TO_ADDR
42206: GO 42689
42208: LD_INT 27
42210: DOUBLE
42211: EQUAL
42212: IFTRUE 42216
42214: GO 42234
42216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42217: LD_ADDR_VAR 0 3
42221: PUSH
42222: LD_INT 13
42224: PUSH
42225: LD_INT 14
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: ST_TO_ADDR
42232: GO 42689
42234: LD_INT 92
42236: DOUBLE
42237: EQUAL
42238: IFTRUE 42242
42240: GO 42268
42242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_INT 11
42250: PUSH
42251: LD_INT 12
42253: PUSH
42254: LD_INT 13
42256: PUSH
42257: LD_INT 14
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
42266: GO 42689
42268: LD_INT 28
42270: DOUBLE
42271: EQUAL
42272: IFTRUE 42276
42274: GO 42294
42276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: LD_INT 13
42284: PUSH
42285: LD_INT 14
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: ST_TO_ADDR
42292: GO 42689
42294: LD_INT 29
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42320
42302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42303: LD_ADDR_VAR 0 3
42307: PUSH
42308: LD_INT 13
42310: PUSH
42311: LD_INT 14
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: ST_TO_ADDR
42318: GO 42689
42320: LD_INT 31
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42328
42326: GO 42346
42328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: LD_INT 13
42336: PUSH
42337: LD_INT 14
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: ST_TO_ADDR
42344: GO 42689
42346: LD_INT 26
42348: DOUBLE
42349: EQUAL
42350: IFTRUE 42354
42352: GO 42372
42354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42355: LD_ADDR_VAR 0 3
42359: PUSH
42360: LD_INT 13
42362: PUSH
42363: LD_INT 14
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: ST_TO_ADDR
42370: GO 42689
42372: LD_INT 42
42374: DOUBLE
42375: EQUAL
42376: IFTRUE 42380
42378: GO 42406
42380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42381: LD_ADDR_VAR 0 3
42385: PUSH
42386: LD_INT 21
42388: PUSH
42389: LD_INT 22
42391: PUSH
42392: LD_INT 23
42394: PUSH
42395: LD_INT 24
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
42404: GO 42689
42406: LD_INT 43
42408: DOUBLE
42409: EQUAL
42410: IFTRUE 42414
42412: GO 42440
42414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_INT 21
42422: PUSH
42423: LD_INT 22
42425: PUSH
42426: LD_INT 23
42428: PUSH
42429: LD_INT 24
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
42438: GO 42689
42440: LD_INT 44
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42448
42446: GO 42474
42448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_INT 21
42456: PUSH
42457: LD_INT 22
42459: PUSH
42460: LD_INT 23
42462: PUSH
42463: LD_INT 24
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: ST_TO_ADDR
42472: GO 42689
42474: LD_INT 45
42476: DOUBLE
42477: EQUAL
42478: IFTRUE 42482
42480: GO 42508
42482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: LD_INT 21
42490: PUSH
42491: LD_INT 22
42493: PUSH
42494: LD_INT 23
42496: PUSH
42497: LD_INT 24
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: ST_TO_ADDR
42506: GO 42689
42508: LD_INT 49
42510: DOUBLE
42511: EQUAL
42512: IFTRUE 42516
42514: GO 42542
42516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_INT 21
42524: PUSH
42525: LD_INT 22
42527: PUSH
42528: LD_INT 23
42530: PUSH
42531: LD_INT 24
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: ST_TO_ADDR
42540: GO 42689
42542: LD_INT 51
42544: DOUBLE
42545: EQUAL
42546: IFTRUE 42550
42548: GO 42576
42550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42551: LD_ADDR_VAR 0 3
42555: PUSH
42556: LD_INT 21
42558: PUSH
42559: LD_INT 22
42561: PUSH
42562: LD_INT 23
42564: PUSH
42565: LD_INT 24
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
42574: GO 42689
42576: LD_INT 52
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 42610
42584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_INT 21
42592: PUSH
42593: LD_INT 22
42595: PUSH
42596: LD_INT 23
42598: PUSH
42599: LD_INT 24
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
42608: GO 42689
42610: LD_INT 53
42612: DOUBLE
42613: EQUAL
42614: IFTRUE 42618
42616: GO 42636
42618: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: LD_INT 23
42626: PUSH
42627: LD_INT 24
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 42689
42636: LD_INT 46
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42662
42644: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 23
42652: PUSH
42653: LD_INT 24
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: ST_TO_ADDR
42660: GO 42689
42662: LD_INT 47
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42688
42670: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_INT 23
42678: PUSH
42679: LD_INT 24
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 42689
42688: POP
// result := ( chassis in result ) ;
42689: LD_ADDR_VAR 0 3
42693: PUSH
42694: LD_VAR 0 1
42698: PUSH
42699: LD_VAR 0 3
42703: IN
42704: ST_TO_ADDR
// end ;
42705: LD_VAR 0 3
42709: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42710: LD_INT 0
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
// result := array ;
42719: LD_ADDR_VAR 0 5
42723: PUSH
42724: LD_VAR 0 1
42728: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42729: LD_VAR 0 1
42733: NOT
42734: PUSH
42735: LD_VAR 0 2
42739: NOT
42740: OR
42741: PUSH
42742: LD_VAR 0 3
42746: NOT
42747: OR
42748: PUSH
42749: LD_VAR 0 2
42753: PUSH
42754: LD_VAR 0 1
42758: GREATER
42759: OR
42760: PUSH
42761: LD_VAR 0 3
42765: PUSH
42766: LD_VAR 0 1
42770: GREATER
42771: OR
42772: IFFALSE 42776
// exit ;
42774: GO 43072
// if direction then
42776: LD_VAR 0 4
42780: IFFALSE 42844
// begin d := 1 ;
42782: LD_ADDR_VAR 0 9
42786: PUSH
42787: LD_INT 1
42789: ST_TO_ADDR
// if i_from > i_to then
42790: LD_VAR 0 2
42794: PUSH
42795: LD_VAR 0 3
42799: GREATER
42800: IFFALSE 42826
// length := ( array - i_from ) + i_to else
42802: LD_ADDR_VAR 0 11
42806: PUSH
42807: LD_VAR 0 1
42811: PUSH
42812: LD_VAR 0 2
42816: MINUS
42817: PUSH
42818: LD_VAR 0 3
42822: PLUS
42823: ST_TO_ADDR
42824: GO 42842
// length := i_to - i_from ;
42826: LD_ADDR_VAR 0 11
42830: PUSH
42831: LD_VAR 0 3
42835: PUSH
42836: LD_VAR 0 2
42840: MINUS
42841: ST_TO_ADDR
// end else
42842: GO 42905
// begin d := - 1 ;
42844: LD_ADDR_VAR 0 9
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: ST_TO_ADDR
// if i_from > i_to then
42853: LD_VAR 0 2
42857: PUSH
42858: LD_VAR 0 3
42862: GREATER
42863: IFFALSE 42883
// length := i_from - i_to else
42865: LD_ADDR_VAR 0 11
42869: PUSH
42870: LD_VAR 0 2
42874: PUSH
42875: LD_VAR 0 3
42879: MINUS
42880: ST_TO_ADDR
42881: GO 42905
// length := ( array - i_to ) + i_from ;
42883: LD_ADDR_VAR 0 11
42887: PUSH
42888: LD_VAR 0 1
42892: PUSH
42893: LD_VAR 0 3
42897: MINUS
42898: PUSH
42899: LD_VAR 0 2
42903: PLUS
42904: ST_TO_ADDR
// end ; if not length then
42905: LD_VAR 0 11
42909: NOT
42910: IFFALSE 42914
// exit ;
42912: GO 43072
// tmp := array ;
42914: LD_ADDR_VAR 0 10
42918: PUSH
42919: LD_VAR 0 1
42923: ST_TO_ADDR
// for i = 1 to length do
42924: LD_ADDR_VAR 0 6
42928: PUSH
42929: DOUBLE
42930: LD_INT 1
42932: DEC
42933: ST_TO_ADDR
42934: LD_VAR 0 11
42938: PUSH
42939: FOR_TO
42940: IFFALSE 43060
// begin for j = 1 to array do
42942: LD_ADDR_VAR 0 7
42946: PUSH
42947: DOUBLE
42948: LD_INT 1
42950: DEC
42951: ST_TO_ADDR
42952: LD_VAR 0 1
42956: PUSH
42957: FOR_TO
42958: IFFALSE 43046
// begin k := j + d ;
42960: LD_ADDR_VAR 0 8
42964: PUSH
42965: LD_VAR 0 7
42969: PUSH
42970: LD_VAR 0 9
42974: PLUS
42975: ST_TO_ADDR
// if k > array then
42976: LD_VAR 0 8
42980: PUSH
42981: LD_VAR 0 1
42985: GREATER
42986: IFFALSE 42996
// k := 1 ;
42988: LD_ADDR_VAR 0 8
42992: PUSH
42993: LD_INT 1
42995: ST_TO_ADDR
// if not k then
42996: LD_VAR 0 8
43000: NOT
43001: IFFALSE 43013
// k := array ;
43003: LD_ADDR_VAR 0 8
43007: PUSH
43008: LD_VAR 0 1
43012: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43013: LD_ADDR_VAR 0 10
43017: PUSH
43018: LD_VAR 0 10
43022: PPUSH
43023: LD_VAR 0 8
43027: PPUSH
43028: LD_VAR 0 1
43032: PUSH
43033: LD_VAR 0 7
43037: ARRAY
43038: PPUSH
43039: CALL_OW 1
43043: ST_TO_ADDR
// end ;
43044: GO 42957
43046: POP
43047: POP
// array := tmp ;
43048: LD_ADDR_VAR 0 1
43052: PUSH
43053: LD_VAR 0 10
43057: ST_TO_ADDR
// end ;
43058: GO 42939
43060: POP
43061: POP
// result := array ;
43062: LD_ADDR_VAR 0 5
43066: PUSH
43067: LD_VAR 0 1
43071: ST_TO_ADDR
// end ;
43072: LD_VAR 0 5
43076: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43077: LD_INT 0
43079: PPUSH
43080: PPUSH
// result := 0 ;
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_INT 0
43088: ST_TO_ADDR
// if not array or not value in array then
43089: LD_VAR 0 1
43093: NOT
43094: PUSH
43095: LD_VAR 0 2
43099: PUSH
43100: LD_VAR 0 1
43104: IN
43105: NOT
43106: OR
43107: IFFALSE 43111
// exit ;
43109: GO 43165
// for i = 1 to array do
43111: LD_ADDR_VAR 0 4
43115: PUSH
43116: DOUBLE
43117: LD_INT 1
43119: DEC
43120: ST_TO_ADDR
43121: LD_VAR 0 1
43125: PUSH
43126: FOR_TO
43127: IFFALSE 43163
// if value = array [ i ] then
43129: LD_VAR 0 2
43133: PUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_VAR 0 4
43143: ARRAY
43144: EQUAL
43145: IFFALSE 43161
// begin result := i ;
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: LD_VAR 0 4
43156: ST_TO_ADDR
// exit ;
43157: POP
43158: POP
43159: GO 43165
// end ;
43161: GO 43126
43163: POP
43164: POP
// end ;
43165: LD_VAR 0 3
43169: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43170: LD_INT 0
43172: PPUSH
// vc_chassis := chassis ;
43173: LD_ADDR_OWVAR 37
43177: PUSH
43178: LD_VAR 0 1
43182: ST_TO_ADDR
// vc_engine := engine ;
43183: LD_ADDR_OWVAR 39
43187: PUSH
43188: LD_VAR 0 2
43192: ST_TO_ADDR
// vc_control := control ;
43193: LD_ADDR_OWVAR 38
43197: PUSH
43198: LD_VAR 0 3
43202: ST_TO_ADDR
// vc_weapon := weapon ;
43203: LD_ADDR_OWVAR 40
43207: PUSH
43208: LD_VAR 0 4
43212: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43213: LD_ADDR_OWVAR 41
43217: PUSH
43218: LD_VAR 0 5
43222: ST_TO_ADDR
// end ;
43223: LD_VAR 0 6
43227: RET
// export function WantPlant ( unit ) ; var task ; begin
43228: LD_INT 0
43230: PPUSH
43231: PPUSH
// result := false ;
43232: LD_ADDR_VAR 0 2
43236: PUSH
43237: LD_INT 0
43239: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43240: LD_ADDR_VAR 0 3
43244: PUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: CALL_OW 437
43254: ST_TO_ADDR
// if task then
43255: LD_VAR 0 3
43259: IFFALSE 43287
// if task [ 1 ] [ 1 ] = p then
43261: LD_VAR 0 3
43265: PUSH
43266: LD_INT 1
43268: ARRAY
43269: PUSH
43270: LD_INT 1
43272: ARRAY
43273: PUSH
43274: LD_STRING p
43276: EQUAL
43277: IFFALSE 43287
// result := true ;
43279: LD_ADDR_VAR 0 2
43283: PUSH
43284: LD_INT 1
43286: ST_TO_ADDR
// end ;
43287: LD_VAR 0 2
43291: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43292: LD_INT 0
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
// if pos < 1 then
43298: LD_VAR 0 2
43302: PUSH
43303: LD_INT 1
43305: LESS
43306: IFFALSE 43310
// exit ;
43308: GO 43613
// if pos = 1 then
43310: LD_VAR 0 2
43314: PUSH
43315: LD_INT 1
43317: EQUAL
43318: IFFALSE 43351
// result := Replace ( arr , pos [ 1 ] , value ) else
43320: LD_ADDR_VAR 0 4
43324: PUSH
43325: LD_VAR 0 1
43329: PPUSH
43330: LD_VAR 0 2
43334: PUSH
43335: LD_INT 1
43337: ARRAY
43338: PPUSH
43339: LD_VAR 0 3
43343: PPUSH
43344: CALL_OW 1
43348: ST_TO_ADDR
43349: GO 43613
// begin tmp := arr ;
43351: LD_ADDR_VAR 0 6
43355: PUSH
43356: LD_VAR 0 1
43360: ST_TO_ADDR
// s_arr := [ tmp ] ;
43361: LD_ADDR_VAR 0 7
43365: PUSH
43366: LD_VAR 0 6
43370: PUSH
43371: EMPTY
43372: LIST
43373: ST_TO_ADDR
// for i = 1 to pos - 1 do
43374: LD_ADDR_VAR 0 5
43378: PUSH
43379: DOUBLE
43380: LD_INT 1
43382: DEC
43383: ST_TO_ADDR
43384: LD_VAR 0 2
43388: PUSH
43389: LD_INT 1
43391: MINUS
43392: PUSH
43393: FOR_TO
43394: IFFALSE 43439
// begin tmp := tmp [ pos [ i ] ] ;
43396: LD_ADDR_VAR 0 6
43400: PUSH
43401: LD_VAR 0 6
43405: PUSH
43406: LD_VAR 0 2
43410: PUSH
43411: LD_VAR 0 5
43415: ARRAY
43416: ARRAY
43417: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43418: LD_ADDR_VAR 0 7
43422: PUSH
43423: LD_VAR 0 7
43427: PUSH
43428: LD_VAR 0 6
43432: PUSH
43433: EMPTY
43434: LIST
43435: ADD
43436: ST_TO_ADDR
// end ;
43437: GO 43393
43439: POP
43440: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43441: LD_ADDR_VAR 0 6
43445: PUSH
43446: LD_VAR 0 6
43450: PPUSH
43451: LD_VAR 0 2
43455: PUSH
43456: LD_VAR 0 2
43460: ARRAY
43461: PPUSH
43462: LD_VAR 0 3
43466: PPUSH
43467: CALL_OW 1
43471: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43472: LD_ADDR_VAR 0 7
43476: PUSH
43477: LD_VAR 0 7
43481: PPUSH
43482: LD_VAR 0 7
43486: PPUSH
43487: LD_VAR 0 6
43491: PPUSH
43492: CALL_OW 1
43496: ST_TO_ADDR
// for i = s_arr downto 2 do
43497: LD_ADDR_VAR 0 5
43501: PUSH
43502: DOUBLE
43503: LD_VAR 0 7
43507: INC
43508: ST_TO_ADDR
43509: LD_INT 2
43511: PUSH
43512: FOR_DOWNTO
43513: IFFALSE 43597
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43515: LD_ADDR_VAR 0 6
43519: PUSH
43520: LD_VAR 0 7
43524: PUSH
43525: LD_VAR 0 5
43529: PUSH
43530: LD_INT 1
43532: MINUS
43533: ARRAY
43534: PPUSH
43535: LD_VAR 0 2
43539: PUSH
43540: LD_VAR 0 5
43544: PUSH
43545: LD_INT 1
43547: MINUS
43548: ARRAY
43549: PPUSH
43550: LD_VAR 0 7
43554: PUSH
43555: LD_VAR 0 5
43559: ARRAY
43560: PPUSH
43561: CALL_OW 1
43565: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43566: LD_ADDR_VAR 0 7
43570: PUSH
43571: LD_VAR 0 7
43575: PPUSH
43576: LD_VAR 0 5
43580: PUSH
43581: LD_INT 1
43583: MINUS
43584: PPUSH
43585: LD_VAR 0 6
43589: PPUSH
43590: CALL_OW 1
43594: ST_TO_ADDR
// end ;
43595: GO 43512
43597: POP
43598: POP
// result := s_arr [ 1 ] ;
43599: LD_ADDR_VAR 0 4
43603: PUSH
43604: LD_VAR 0 7
43608: PUSH
43609: LD_INT 1
43611: ARRAY
43612: ST_TO_ADDR
// end ; end ;
43613: LD_VAR 0 4
43617: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43618: LD_INT 0
43620: PPUSH
43621: PPUSH
// if not list then
43622: LD_VAR 0 1
43626: NOT
43627: IFFALSE 43631
// exit ;
43629: GO 43722
// i := list [ pos1 ] ;
43631: LD_ADDR_VAR 0 5
43635: PUSH
43636: LD_VAR 0 1
43640: PUSH
43641: LD_VAR 0 2
43645: ARRAY
43646: ST_TO_ADDR
// if not i then
43647: LD_VAR 0 5
43651: NOT
43652: IFFALSE 43656
// exit ;
43654: GO 43722
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43656: LD_ADDR_VAR 0 1
43660: PUSH
43661: LD_VAR 0 1
43665: PPUSH
43666: LD_VAR 0 2
43670: PPUSH
43671: LD_VAR 0 1
43675: PUSH
43676: LD_VAR 0 3
43680: ARRAY
43681: PPUSH
43682: CALL_OW 1
43686: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43687: LD_ADDR_VAR 0 1
43691: PUSH
43692: LD_VAR 0 1
43696: PPUSH
43697: LD_VAR 0 3
43701: PPUSH
43702: LD_VAR 0 5
43706: PPUSH
43707: CALL_OW 1
43711: ST_TO_ADDR
// result := list ;
43712: LD_ADDR_VAR 0 4
43716: PUSH
43717: LD_VAR 0 1
43721: ST_TO_ADDR
// end ;
43722: LD_VAR 0 4
43726: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43727: LD_INT 0
43729: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43730: LD_ADDR_VAR 0 5
43734: PUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: CALL_OW 250
43744: PPUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 251
43754: PPUSH
43755: LD_VAR 0 2
43759: PPUSH
43760: LD_VAR 0 3
43764: PPUSH
43765: LD_VAR 0 4
43769: PPUSH
43770: CALL 44148 0 5
43774: ST_TO_ADDR
// end ;
43775: LD_VAR 0 5
43779: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43780: LD_INT 0
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
// if not list or not unit then
43786: LD_VAR 0 2
43790: NOT
43791: PUSH
43792: LD_VAR 0 1
43796: NOT
43797: OR
43798: IFFALSE 43802
// exit ;
43800: GO 44143
// result := [ ] ;
43802: LD_ADDR_VAR 0 5
43806: PUSH
43807: EMPTY
43808: ST_TO_ADDR
// for i in list do
43809: LD_ADDR_VAR 0 6
43813: PUSH
43814: LD_VAR 0 2
43818: PUSH
43819: FOR_IN
43820: IFFALSE 44038
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43822: LD_ADDR_VAR 0 8
43826: PUSH
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_VAR 0 6
43836: PUSH
43837: LD_INT 1
43839: ARRAY
43840: PPUSH
43841: LD_VAR 0 6
43845: PUSH
43846: LD_INT 2
43848: ARRAY
43849: PPUSH
43850: CALL_OW 297
43854: ST_TO_ADDR
// if not Count ( result ) then
43855: LD_VAR 0 5
43859: PPUSH
43860: CALL 40432 0 1
43864: NOT
43865: IFFALSE 43898
// begin result := Join ( result , [ i , tmp ] ) ;
43867: LD_ADDR_VAR 0 5
43871: PUSH
43872: LD_VAR 0 5
43876: PPUSH
43877: LD_VAR 0 6
43881: PUSH
43882: LD_VAR 0 8
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PPUSH
43891: CALL 76041 0 2
43895: ST_TO_ADDR
// continue ;
43896: GO 43819
// end ; if result [ result ] [ 2 ] <= tmp then
43898: LD_VAR 0 5
43902: PUSH
43903: LD_VAR 0 5
43907: ARRAY
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: PUSH
43913: LD_VAR 0 8
43917: LESSEQUAL
43918: IFFALSE 43951
// result := Join ( result , [ i , tmp ] ) else
43920: LD_ADDR_VAR 0 5
43924: PUSH
43925: LD_VAR 0 5
43929: PPUSH
43930: LD_VAR 0 6
43934: PUSH
43935: LD_VAR 0 8
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PPUSH
43944: CALL 76041 0 2
43948: ST_TO_ADDR
43949: GO 44036
// begin for j := 1 to Count ( result ) do
43951: LD_ADDR_VAR 0 7
43955: PUSH
43956: DOUBLE
43957: LD_INT 1
43959: DEC
43960: ST_TO_ADDR
43961: LD_VAR 0 5
43965: PPUSH
43966: CALL 40432 0 1
43970: PUSH
43971: FOR_TO
43972: IFFALSE 44034
// begin if tmp < result [ j ] [ 2 ] then
43974: LD_VAR 0 8
43978: PUSH
43979: LD_VAR 0 5
43983: PUSH
43984: LD_VAR 0 7
43988: ARRAY
43989: PUSH
43990: LD_INT 2
43992: ARRAY
43993: LESS
43994: IFFALSE 44032
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43996: LD_ADDR_VAR 0 5
44000: PUSH
44001: LD_VAR 0 5
44005: PPUSH
44006: LD_VAR 0 7
44010: PPUSH
44011: LD_VAR 0 6
44015: PUSH
44016: LD_VAR 0 8
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PPUSH
44025: CALL_OW 2
44029: ST_TO_ADDR
// break ;
44030: GO 44034
// end ; end ;
44032: GO 43971
44034: POP
44035: POP
// end ; end ;
44036: GO 43819
44038: POP
44039: POP
// if result and not asc then
44040: LD_VAR 0 5
44044: PUSH
44045: LD_VAR 0 3
44049: NOT
44050: AND
44051: IFFALSE 44068
// result := ReverseArray ( result ) ;
44053: LD_ADDR_VAR 0 5
44057: PUSH
44058: LD_VAR 0 5
44062: PPUSH
44063: CALL 71308 0 1
44067: ST_TO_ADDR
// tmp := [ ] ;
44068: LD_ADDR_VAR 0 8
44072: PUSH
44073: EMPTY
44074: ST_TO_ADDR
// if mode then
44075: LD_VAR 0 4
44079: IFFALSE 44143
// begin for i := 1 to result do
44081: LD_ADDR_VAR 0 6
44085: PUSH
44086: DOUBLE
44087: LD_INT 1
44089: DEC
44090: ST_TO_ADDR
44091: LD_VAR 0 5
44095: PUSH
44096: FOR_TO
44097: IFFALSE 44131
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44099: LD_ADDR_VAR 0 8
44103: PUSH
44104: LD_VAR 0 8
44108: PPUSH
44109: LD_VAR 0 5
44113: PUSH
44114: LD_VAR 0 6
44118: ARRAY
44119: PUSH
44120: LD_INT 1
44122: ARRAY
44123: PPUSH
44124: CALL 76041 0 2
44128: ST_TO_ADDR
44129: GO 44096
44131: POP
44132: POP
// result := tmp ;
44133: LD_ADDR_VAR 0 5
44137: PUSH
44138: LD_VAR 0 8
44142: ST_TO_ADDR
// end ; end ;
44143: LD_VAR 0 5
44147: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44148: LD_INT 0
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
// if not list then
44154: LD_VAR 0 3
44158: NOT
44159: IFFALSE 44163
// exit ;
44161: GO 44551
// result := [ ] ;
44163: LD_ADDR_VAR 0 6
44167: PUSH
44168: EMPTY
44169: ST_TO_ADDR
// for i in list do
44170: LD_ADDR_VAR 0 7
44174: PUSH
44175: LD_VAR 0 3
44179: PUSH
44180: FOR_IN
44181: IFFALSE 44383
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44183: LD_ADDR_VAR 0 9
44187: PUSH
44188: LD_VAR 0 7
44192: PPUSH
44193: LD_VAR 0 1
44197: PPUSH
44198: LD_VAR 0 2
44202: PPUSH
44203: CALL_OW 297
44207: ST_TO_ADDR
// if not result then
44208: LD_VAR 0 6
44212: NOT
44213: IFFALSE 44239
// result := [ [ i , tmp ] ] else
44215: LD_ADDR_VAR 0 6
44219: PUSH
44220: LD_VAR 0 7
44224: PUSH
44225: LD_VAR 0 9
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: EMPTY
44235: LIST
44236: ST_TO_ADDR
44237: GO 44381
// begin if result [ result ] [ 2 ] <= tmp then
44239: LD_VAR 0 6
44243: PUSH
44244: LD_VAR 0 6
44248: ARRAY
44249: PUSH
44250: LD_INT 2
44252: ARRAY
44253: PUSH
44254: LD_VAR 0 9
44258: LESSEQUAL
44259: IFFALSE 44301
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44261: LD_ADDR_VAR 0 6
44265: PUSH
44266: LD_VAR 0 6
44270: PPUSH
44271: LD_VAR 0 6
44275: PUSH
44276: LD_INT 1
44278: PLUS
44279: PPUSH
44280: LD_VAR 0 7
44284: PUSH
44285: LD_VAR 0 9
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PPUSH
44294: CALL_OW 2
44298: ST_TO_ADDR
44299: GO 44381
// for j := 1 to result do
44301: LD_ADDR_VAR 0 8
44305: PUSH
44306: DOUBLE
44307: LD_INT 1
44309: DEC
44310: ST_TO_ADDR
44311: LD_VAR 0 6
44315: PUSH
44316: FOR_TO
44317: IFFALSE 44379
// begin if tmp < result [ j ] [ 2 ] then
44319: LD_VAR 0 9
44323: PUSH
44324: LD_VAR 0 6
44328: PUSH
44329: LD_VAR 0 8
44333: ARRAY
44334: PUSH
44335: LD_INT 2
44337: ARRAY
44338: LESS
44339: IFFALSE 44377
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_VAR 0 6
44350: PPUSH
44351: LD_VAR 0 8
44355: PPUSH
44356: LD_VAR 0 7
44360: PUSH
44361: LD_VAR 0 9
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PPUSH
44370: CALL_OW 2
44374: ST_TO_ADDR
// break ;
44375: GO 44379
// end ; end ;
44377: GO 44316
44379: POP
44380: POP
// end ; end ;
44381: GO 44180
44383: POP
44384: POP
// if result and not asc then
44385: LD_VAR 0 6
44389: PUSH
44390: LD_VAR 0 4
44394: NOT
44395: AND
44396: IFFALSE 44471
// begin tmp := result ;
44398: LD_ADDR_VAR 0 9
44402: PUSH
44403: LD_VAR 0 6
44407: ST_TO_ADDR
// for i = tmp downto 1 do
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: DOUBLE
44414: LD_VAR 0 9
44418: INC
44419: ST_TO_ADDR
44420: LD_INT 1
44422: PUSH
44423: FOR_DOWNTO
44424: IFFALSE 44469
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44426: LD_ADDR_VAR 0 6
44430: PUSH
44431: LD_VAR 0 6
44435: PPUSH
44436: LD_VAR 0 9
44440: PUSH
44441: LD_VAR 0 7
44445: MINUS
44446: PUSH
44447: LD_INT 1
44449: PLUS
44450: PPUSH
44451: LD_VAR 0 9
44455: PUSH
44456: LD_VAR 0 7
44460: ARRAY
44461: PPUSH
44462: CALL_OW 1
44466: ST_TO_ADDR
44467: GO 44423
44469: POP
44470: POP
// end ; tmp := [ ] ;
44471: LD_ADDR_VAR 0 9
44475: PUSH
44476: EMPTY
44477: ST_TO_ADDR
// if mode then
44478: LD_VAR 0 5
44482: IFFALSE 44551
// begin for i = 1 to result do
44484: LD_ADDR_VAR 0 7
44488: PUSH
44489: DOUBLE
44490: LD_INT 1
44492: DEC
44493: ST_TO_ADDR
44494: LD_VAR 0 6
44498: PUSH
44499: FOR_TO
44500: IFFALSE 44539
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44502: LD_ADDR_VAR 0 9
44506: PUSH
44507: LD_VAR 0 9
44511: PPUSH
44512: LD_VAR 0 7
44516: PPUSH
44517: LD_VAR 0 6
44521: PUSH
44522: LD_VAR 0 7
44526: ARRAY
44527: PUSH
44528: LD_INT 1
44530: ARRAY
44531: PPUSH
44532: CALL_OW 1
44536: ST_TO_ADDR
44537: GO 44499
44539: POP
44540: POP
// result := tmp ;
44541: LD_ADDR_VAR 0 6
44545: PUSH
44546: LD_VAR 0 9
44550: ST_TO_ADDR
// end ; end ;
44551: LD_VAR 0 6
44555: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44556: LD_INT 0
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44564: LD_ADDR_VAR 0 5
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// if not x or not y then
44586: LD_VAR 0 2
44590: NOT
44591: PUSH
44592: LD_VAR 0 3
44596: NOT
44597: OR
44598: IFFALSE 44602
// exit ;
44600: GO 46252
// if not range then
44602: LD_VAR 0 4
44606: NOT
44607: IFFALSE 44617
// range := 10 ;
44609: LD_ADDR_VAR 0 4
44613: PUSH
44614: LD_INT 10
44616: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44617: LD_ADDR_VAR 0 8
44621: PUSH
44622: LD_INT 81
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 92
44636: PUSH
44637: LD_VAR 0 2
44641: PUSH
44642: LD_VAR 0 3
44646: PUSH
44647: LD_VAR 0 4
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 3
44660: PUSH
44661: LD_INT 21
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: PPUSH
44680: CALL_OW 69
44684: ST_TO_ADDR
// if not tmp then
44685: LD_VAR 0 8
44689: NOT
44690: IFFALSE 44694
// exit ;
44692: GO 46252
// for i in tmp do
44694: LD_ADDR_VAR 0 6
44698: PUSH
44699: LD_VAR 0 8
44703: PUSH
44704: FOR_IN
44705: IFFALSE 46227
// begin points := [ 0 , 0 , 0 ] ;
44707: LD_ADDR_VAR 0 9
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// bpoints := 1 ;
44726: LD_ADDR_VAR 0 10
44730: PUSH
44731: LD_INT 1
44733: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44734: LD_VAR 0 6
44738: PPUSH
44739: CALL_OW 247
44743: PUSH
44744: LD_INT 1
44746: DOUBLE
44747: EQUAL
44748: IFTRUE 44752
44750: GO 45330
44752: POP
// begin if GetClass ( i ) = 1 then
44753: LD_VAR 0 6
44757: PPUSH
44758: CALL_OW 257
44762: PUSH
44763: LD_INT 1
44765: EQUAL
44766: IFFALSE 44787
// points := [ 10 , 5 , 3 ] ;
44768: LD_ADDR_VAR 0 9
44772: PUSH
44773: LD_INT 10
44775: PUSH
44776: LD_INT 5
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44787: LD_VAR 0 6
44791: PPUSH
44792: CALL_OW 257
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 4
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: IN
44811: IFFALSE 44832
// points := [ 3 , 2 , 1 ] ;
44813: LD_ADDR_VAR 0 9
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44832: LD_VAR 0 6
44836: PPUSH
44837: CALL_OW 257
44841: PUSH
44842: LD_INT 5
44844: EQUAL
44845: IFFALSE 44866
// points := [ 130 , 5 , 2 ] ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 130
44854: PUSH
44855: LD_INT 5
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44866: LD_VAR 0 6
44870: PPUSH
44871: CALL_OW 257
44875: PUSH
44876: LD_INT 8
44878: EQUAL
44879: IFFALSE 44900
// points := [ 35 , 35 , 30 ] ;
44881: LD_ADDR_VAR 0 9
44885: PUSH
44886: LD_INT 35
44888: PUSH
44889: LD_INT 35
44891: PUSH
44892: LD_INT 30
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44900: LD_VAR 0 6
44904: PPUSH
44905: CALL_OW 257
44909: PUSH
44910: LD_INT 9
44912: EQUAL
44913: IFFALSE 44934
// points := [ 20 , 55 , 40 ] ;
44915: LD_ADDR_VAR 0 9
44919: PUSH
44920: LD_INT 20
44922: PUSH
44923: LD_INT 55
44925: PUSH
44926: LD_INT 40
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44934: LD_VAR 0 6
44938: PPUSH
44939: CALL_OW 257
44943: PUSH
44944: LD_INT 12
44946: PUSH
44947: LD_INT 16
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: IN
44954: IFFALSE 44975
// points := [ 5 , 3 , 2 ] ;
44956: LD_ADDR_VAR 0 9
44960: PUSH
44961: LD_INT 5
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44975: LD_VAR 0 6
44979: PPUSH
44980: CALL_OW 257
44984: PUSH
44985: LD_INT 17
44987: EQUAL
44988: IFFALSE 45009
// points := [ 100 , 50 , 75 ] ;
44990: LD_ADDR_VAR 0 9
44994: PUSH
44995: LD_INT 100
44997: PUSH
44998: LD_INT 50
45000: PUSH
45001: LD_INT 75
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45009: LD_VAR 0 6
45013: PPUSH
45014: CALL_OW 257
45018: PUSH
45019: LD_INT 15
45021: EQUAL
45022: IFFALSE 45043
// points := [ 10 , 5 , 3 ] ;
45024: LD_ADDR_VAR 0 9
45028: PUSH
45029: LD_INT 10
45031: PUSH
45032: LD_INT 5
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45043: LD_VAR 0 6
45047: PPUSH
45048: CALL_OW 257
45052: PUSH
45053: LD_INT 14
45055: EQUAL
45056: IFFALSE 45077
// points := [ 10 , 0 , 0 ] ;
45058: LD_ADDR_VAR 0 9
45062: PUSH
45063: LD_INT 10
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45077: LD_VAR 0 6
45081: PPUSH
45082: CALL_OW 257
45086: PUSH
45087: LD_INT 11
45089: EQUAL
45090: IFFALSE 45111
// points := [ 30 , 10 , 5 ] ;
45092: LD_ADDR_VAR 0 9
45096: PUSH
45097: LD_INT 30
45099: PUSH
45100: LD_INT 10
45102: PUSH
45103: LD_INT 5
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45111: LD_VAR 0 1
45115: PPUSH
45116: LD_INT 5
45118: PPUSH
45119: CALL_OW 321
45123: PUSH
45124: LD_INT 2
45126: EQUAL
45127: IFFALSE 45144
// bpoints := bpoints * 1.8 ;
45129: LD_ADDR_VAR 0 10
45133: PUSH
45134: LD_VAR 0 10
45138: PUSH
45139: LD_REAL  1.80000000000000E+0000
45142: MUL
45143: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45144: LD_VAR 0 6
45148: PPUSH
45149: CALL_OW 257
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: LD_INT 4
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: IN
45172: PUSH
45173: LD_VAR 0 1
45177: PPUSH
45178: LD_INT 51
45180: PPUSH
45181: CALL_OW 321
45185: PUSH
45186: LD_INT 2
45188: EQUAL
45189: AND
45190: IFFALSE 45207
// bpoints := bpoints * 1.2 ;
45192: LD_ADDR_VAR 0 10
45196: PUSH
45197: LD_VAR 0 10
45201: PUSH
45202: LD_REAL  1.20000000000000E+0000
45205: MUL
45206: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45207: LD_VAR 0 6
45211: PPUSH
45212: CALL_OW 257
45216: PUSH
45217: LD_INT 5
45219: PUSH
45220: LD_INT 7
45222: PUSH
45223: LD_INT 9
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: IN
45231: PUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: LD_INT 52
45239: PPUSH
45240: CALL_OW 321
45244: PUSH
45245: LD_INT 2
45247: EQUAL
45248: AND
45249: IFFALSE 45266
// bpoints := bpoints * 1.5 ;
45251: LD_ADDR_VAR 0 10
45255: PUSH
45256: LD_VAR 0 10
45260: PUSH
45261: LD_REAL  1.50000000000000E+0000
45264: MUL
45265: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45266: LD_VAR 0 1
45270: PPUSH
45271: LD_INT 66
45273: PPUSH
45274: CALL_OW 321
45278: PUSH
45279: LD_INT 2
45281: EQUAL
45282: IFFALSE 45299
// bpoints := bpoints * 1.1 ;
45284: LD_ADDR_VAR 0 10
45288: PUSH
45289: LD_VAR 0 10
45293: PUSH
45294: LD_REAL  1.10000000000000E+0000
45297: MUL
45298: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45299: LD_ADDR_VAR 0 10
45303: PUSH
45304: LD_VAR 0 10
45308: PUSH
45309: LD_VAR 0 6
45313: PPUSH
45314: LD_INT 1
45316: PPUSH
45317: CALL_OW 259
45321: PUSH
45322: LD_REAL  1.15000000000000E+0000
45325: MUL
45326: MUL
45327: ST_TO_ADDR
// end ; unit_vehicle :
45328: GO 46156
45330: LD_INT 2
45332: DOUBLE
45333: EQUAL
45334: IFTRUE 45338
45336: GO 46144
45338: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45339: LD_VAR 0 6
45343: PPUSH
45344: CALL_OW 264
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 42
45354: PUSH
45355: LD_INT 24
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: LIST
45362: IN
45363: IFFALSE 45384
// points := [ 25 , 5 , 3 ] ;
45365: LD_ADDR_VAR 0 9
45369: PUSH
45370: LD_INT 25
45372: PUSH
45373: LD_INT 5
45375: PUSH
45376: LD_INT 3
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45384: LD_VAR 0 6
45388: PPUSH
45389: CALL_OW 264
45393: PUSH
45394: LD_INT 4
45396: PUSH
45397: LD_INT 43
45399: PUSH
45400: LD_INT 25
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: IN
45408: IFFALSE 45429
// points := [ 40 , 15 , 5 ] ;
45410: LD_ADDR_VAR 0 9
45414: PUSH
45415: LD_INT 40
45417: PUSH
45418: LD_INT 15
45420: PUSH
45421: LD_INT 5
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45429: LD_VAR 0 6
45433: PPUSH
45434: CALL_OW 264
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: LD_INT 23
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: IN
45449: IFFALSE 45470
// points := [ 7 , 25 , 8 ] ;
45451: LD_ADDR_VAR 0 9
45455: PUSH
45456: LD_INT 7
45458: PUSH
45459: LD_INT 25
45461: PUSH
45462: LD_INT 8
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45470: LD_VAR 0 6
45474: PPUSH
45475: CALL_OW 264
45479: PUSH
45480: LD_INT 5
45482: PUSH
45483: LD_INT 27
45485: PUSH
45486: LD_INT 44
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: IN
45494: IFFALSE 45515
// points := [ 14 , 50 , 16 ] ;
45496: LD_ADDR_VAR 0 9
45500: PUSH
45501: LD_INT 14
45503: PUSH
45504: LD_INT 50
45506: PUSH
45507: LD_INT 16
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45515: LD_VAR 0 6
45519: PPUSH
45520: CALL_OW 264
45524: PUSH
45525: LD_INT 6
45527: PUSH
45528: LD_INT 46
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: IN
45535: IFFALSE 45556
// points := [ 32 , 120 , 70 ] ;
45537: LD_ADDR_VAR 0 9
45541: PUSH
45542: LD_INT 32
45544: PUSH
45545: LD_INT 120
45547: PUSH
45548: LD_INT 70
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45556: LD_VAR 0 6
45560: PPUSH
45561: CALL_OW 264
45565: PUSH
45566: LD_INT 7
45568: PUSH
45569: LD_INT 28
45571: PUSH
45572: LD_INT 45
45574: PUSH
45575: LD_INT 92
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: IN
45584: IFFALSE 45605
// points := [ 35 , 20 , 45 ] ;
45586: LD_ADDR_VAR 0 9
45590: PUSH
45591: LD_INT 35
45593: PUSH
45594: LD_INT 20
45596: PUSH
45597: LD_INT 45
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45605: LD_VAR 0 6
45609: PPUSH
45610: CALL_OW 264
45614: PUSH
45615: LD_INT 47
45617: PUSH
45618: EMPTY
45619: LIST
45620: IN
45621: IFFALSE 45642
// points := [ 67 , 45 , 75 ] ;
45623: LD_ADDR_VAR 0 9
45627: PUSH
45628: LD_INT 67
45630: PUSH
45631: LD_INT 45
45633: PUSH
45634: LD_INT 75
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45642: LD_VAR 0 6
45646: PPUSH
45647: CALL_OW 264
45651: PUSH
45652: LD_INT 26
45654: PUSH
45655: EMPTY
45656: LIST
45657: IN
45658: IFFALSE 45679
// points := [ 120 , 30 , 80 ] ;
45660: LD_ADDR_VAR 0 9
45664: PUSH
45665: LD_INT 120
45667: PUSH
45668: LD_INT 30
45670: PUSH
45671: LD_INT 80
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45679: LD_VAR 0 6
45683: PPUSH
45684: CALL_OW 264
45688: PUSH
45689: LD_INT 22
45691: PUSH
45692: EMPTY
45693: LIST
45694: IN
45695: IFFALSE 45716
// points := [ 40 , 1 , 1 ] ;
45697: LD_ADDR_VAR 0 9
45701: PUSH
45702: LD_INT 40
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45716: LD_VAR 0 6
45720: PPUSH
45721: CALL_OW 264
45725: PUSH
45726: LD_INT 29
45728: PUSH
45729: EMPTY
45730: LIST
45731: IN
45732: IFFALSE 45753
// points := [ 70 , 200 , 400 ] ;
45734: LD_ADDR_VAR 0 9
45738: PUSH
45739: LD_INT 70
45741: PUSH
45742: LD_INT 200
45744: PUSH
45745: LD_INT 400
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45753: LD_VAR 0 6
45757: PPUSH
45758: CALL_OW 264
45762: PUSH
45763: LD_INT 14
45765: PUSH
45766: LD_INT 53
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: IN
45773: IFFALSE 45794
// points := [ 40 , 10 , 20 ] ;
45775: LD_ADDR_VAR 0 9
45779: PUSH
45780: LD_INT 40
45782: PUSH
45783: LD_INT 10
45785: PUSH
45786: LD_INT 20
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45794: LD_VAR 0 6
45798: PPUSH
45799: CALL_OW 264
45803: PUSH
45804: LD_INT 9
45806: PUSH
45807: EMPTY
45808: LIST
45809: IN
45810: IFFALSE 45831
// points := [ 5 , 70 , 20 ] ;
45812: LD_ADDR_VAR 0 9
45816: PUSH
45817: LD_INT 5
45819: PUSH
45820: LD_INT 70
45822: PUSH
45823: LD_INT 20
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45831: LD_VAR 0 6
45835: PPUSH
45836: CALL_OW 264
45840: PUSH
45841: LD_INT 10
45843: PUSH
45844: EMPTY
45845: LIST
45846: IN
45847: IFFALSE 45868
// points := [ 35 , 110 , 70 ] ;
45849: LD_ADDR_VAR 0 9
45853: PUSH
45854: LD_INT 35
45856: PUSH
45857: LD_INT 110
45859: PUSH
45860: LD_INT 70
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45868: LD_VAR 0 6
45872: PPUSH
45873: CALL_OW 265
45877: PUSH
45878: LD_INT 25
45880: EQUAL
45881: IFFALSE 45902
// points := [ 80 , 65 , 100 ] ;
45883: LD_ADDR_VAR 0 9
45887: PUSH
45888: LD_INT 80
45890: PUSH
45891: LD_INT 65
45893: PUSH
45894: LD_INT 100
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45902: LD_VAR 0 6
45906: PPUSH
45907: CALL_OW 263
45911: PUSH
45912: LD_INT 1
45914: EQUAL
45915: IFFALSE 45950
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45917: LD_ADDR_VAR 0 10
45921: PUSH
45922: LD_VAR 0 10
45926: PUSH
45927: LD_VAR 0 6
45931: PPUSH
45932: CALL_OW 311
45936: PPUSH
45937: LD_INT 3
45939: PPUSH
45940: CALL_OW 259
45944: PUSH
45945: LD_INT 4
45947: MUL
45948: MUL
45949: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45950: LD_VAR 0 6
45954: PPUSH
45955: CALL_OW 263
45959: PUSH
45960: LD_INT 2
45962: EQUAL
45963: IFFALSE 46014
// begin j := IsControledBy ( i ) ;
45965: LD_ADDR_VAR 0 7
45969: PUSH
45970: LD_VAR 0 6
45974: PPUSH
45975: CALL_OW 312
45979: ST_TO_ADDR
// if j then
45980: LD_VAR 0 7
45984: IFFALSE 46014
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45986: LD_ADDR_VAR 0 10
45990: PUSH
45991: LD_VAR 0 10
45995: PUSH
45996: LD_VAR 0 7
46000: PPUSH
46001: LD_INT 3
46003: PPUSH
46004: CALL_OW 259
46008: PUSH
46009: LD_INT 3
46011: MUL
46012: MUL
46013: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46014: LD_VAR 0 6
46018: PPUSH
46019: CALL_OW 264
46023: PUSH
46024: LD_INT 5
46026: PUSH
46027: LD_INT 6
46029: PUSH
46030: LD_INT 46
46032: PUSH
46033: LD_INT 44
46035: PUSH
46036: LD_INT 47
46038: PUSH
46039: LD_INT 45
46041: PUSH
46042: LD_INT 28
46044: PUSH
46045: LD_INT 7
46047: PUSH
46048: LD_INT 27
46050: PUSH
46051: LD_INT 29
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: IN
46066: PUSH
46067: LD_VAR 0 1
46071: PPUSH
46072: LD_INT 52
46074: PPUSH
46075: CALL_OW 321
46079: PUSH
46080: LD_INT 2
46082: EQUAL
46083: AND
46084: IFFALSE 46101
// bpoints := bpoints * 1.2 ;
46086: LD_ADDR_VAR 0 10
46090: PUSH
46091: LD_VAR 0 10
46095: PUSH
46096: LD_REAL  1.20000000000000E+0000
46099: MUL
46100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46101: LD_VAR 0 6
46105: PPUSH
46106: CALL_OW 264
46110: PUSH
46111: LD_INT 6
46113: PUSH
46114: LD_INT 46
46116: PUSH
46117: LD_INT 47
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: IN
46125: IFFALSE 46142
// bpoints := bpoints * 1.2 ;
46127: LD_ADDR_VAR 0 10
46131: PUSH
46132: LD_VAR 0 10
46136: PUSH
46137: LD_REAL  1.20000000000000E+0000
46140: MUL
46141: ST_TO_ADDR
// end ; unit_building :
46142: GO 46156
46144: LD_INT 3
46146: DOUBLE
46147: EQUAL
46148: IFTRUE 46152
46150: GO 46155
46152: POP
// ; end ;
46153: GO 46156
46155: POP
// for j = 1 to 3 do
46156: LD_ADDR_VAR 0 7
46160: PUSH
46161: DOUBLE
46162: LD_INT 1
46164: DEC
46165: ST_TO_ADDR
46166: LD_INT 3
46168: PUSH
46169: FOR_TO
46170: IFFALSE 46223
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46172: LD_ADDR_VAR 0 5
46176: PUSH
46177: LD_VAR 0 5
46181: PPUSH
46182: LD_VAR 0 7
46186: PPUSH
46187: LD_VAR 0 5
46191: PUSH
46192: LD_VAR 0 7
46196: ARRAY
46197: PUSH
46198: LD_VAR 0 9
46202: PUSH
46203: LD_VAR 0 7
46207: ARRAY
46208: PUSH
46209: LD_VAR 0 10
46213: MUL
46214: PLUS
46215: PPUSH
46216: CALL_OW 1
46220: ST_TO_ADDR
46221: GO 46169
46223: POP
46224: POP
// end ;
46225: GO 44704
46227: POP
46228: POP
// result := Replace ( result , 4 , tmp ) ;
46229: LD_ADDR_VAR 0 5
46233: PUSH
46234: LD_VAR 0 5
46238: PPUSH
46239: LD_INT 4
46241: PPUSH
46242: LD_VAR 0 8
46246: PPUSH
46247: CALL_OW 1
46251: ST_TO_ADDR
// end ;
46252: LD_VAR 0 5
46256: RET
// export function DangerAtRange ( unit , range ) ; begin
46257: LD_INT 0
46259: PPUSH
// if not unit then
46260: LD_VAR 0 1
46264: NOT
46265: IFFALSE 46269
// exit ;
46267: GO 46314
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46269: LD_ADDR_VAR 0 3
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 255
46283: PPUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 250
46293: PPUSH
46294: LD_VAR 0 1
46298: PPUSH
46299: CALL_OW 251
46303: PPUSH
46304: LD_VAR 0 2
46308: PPUSH
46309: CALL 44556 0 4
46313: ST_TO_ADDR
// end ;
46314: LD_VAR 0 3
46318: RET
// export function DangerInArea ( side , area ) ; begin
46319: LD_INT 0
46321: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46322: LD_ADDR_VAR 0 3
46326: PUSH
46327: LD_VAR 0 2
46331: PPUSH
46332: LD_INT 81
46334: PUSH
46335: LD_VAR 0 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PPUSH
46344: CALL_OW 70
46348: ST_TO_ADDR
// end ;
46349: LD_VAR 0 3
46353: RET
// export function IsExtension ( b ) ; begin
46354: LD_INT 0
46356: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46357: LD_ADDR_VAR 0 2
46361: PUSH
46362: LD_VAR 0 1
46366: PUSH
46367: LD_INT 23
46369: PUSH
46370: LD_INT 20
46372: PUSH
46373: LD_INT 22
46375: PUSH
46376: LD_INT 17
46378: PUSH
46379: LD_INT 24
46381: PUSH
46382: LD_INT 21
46384: PUSH
46385: LD_INT 19
46387: PUSH
46388: LD_INT 16
46390: PUSH
46391: LD_INT 25
46393: PUSH
46394: LD_INT 18
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: IN
46409: ST_TO_ADDR
// end ;
46410: LD_VAR 0 2
46414: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46415: LD_INT 0
46417: PPUSH
46418: PPUSH
46419: PPUSH
// result := [ ] ;
46420: LD_ADDR_VAR 0 4
46424: PUSH
46425: EMPTY
46426: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46427: LD_ADDR_VAR 0 5
46431: PUSH
46432: LD_VAR 0 2
46436: PPUSH
46437: LD_INT 21
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PPUSH
46447: CALL_OW 70
46451: ST_TO_ADDR
// if not tmp then
46452: LD_VAR 0 5
46456: NOT
46457: IFFALSE 46461
// exit ;
46459: GO 46525
// if checkLink then
46461: LD_VAR 0 3
46465: IFFALSE 46515
// begin for i in tmp do
46467: LD_ADDR_VAR 0 6
46471: PUSH
46472: LD_VAR 0 5
46476: PUSH
46477: FOR_IN
46478: IFFALSE 46513
// if GetBase ( i ) <> base then
46480: LD_VAR 0 6
46484: PPUSH
46485: CALL_OW 274
46489: PUSH
46490: LD_VAR 0 1
46494: NONEQUAL
46495: IFFALSE 46511
// ComLinkToBase ( base , i ) ;
46497: LD_VAR 0 1
46501: PPUSH
46502: LD_VAR 0 6
46506: PPUSH
46507: CALL_OW 169
46511: GO 46477
46513: POP
46514: POP
// end ; result := tmp ;
46515: LD_ADDR_VAR 0 4
46519: PUSH
46520: LD_VAR 0 5
46524: ST_TO_ADDR
// end ;
46525: LD_VAR 0 4
46529: RET
// export function ComComplete ( units , b ) ; var i ; begin
46530: LD_INT 0
46532: PPUSH
46533: PPUSH
// if not units then
46534: LD_VAR 0 1
46538: NOT
46539: IFFALSE 46543
// exit ;
46541: GO 46633
// for i in units do
46543: LD_ADDR_VAR 0 4
46547: PUSH
46548: LD_VAR 0 1
46552: PUSH
46553: FOR_IN
46554: IFFALSE 46631
// if BuildingStatus ( b ) = bs_build then
46556: LD_VAR 0 2
46560: PPUSH
46561: CALL_OW 461
46565: PUSH
46566: LD_INT 1
46568: EQUAL
46569: IFFALSE 46629
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46571: LD_VAR 0 4
46575: PPUSH
46576: LD_STRING h
46578: PUSH
46579: LD_VAR 0 2
46583: PPUSH
46584: CALL_OW 250
46588: PUSH
46589: LD_VAR 0 2
46593: PPUSH
46594: CALL_OW 251
46598: PUSH
46599: LD_VAR 0 2
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: PPUSH
46625: CALL_OW 446
46629: GO 46553
46631: POP
46632: POP
// end ;
46633: LD_VAR 0 3
46637: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46638: LD_INT 0
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
46645: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46646: LD_VAR 0 1
46650: NOT
46651: PUSH
46652: LD_VAR 0 1
46656: PPUSH
46657: CALL_OW 263
46661: PUSH
46662: LD_INT 2
46664: NONEQUAL
46665: OR
46666: IFFALSE 46670
// exit ;
46668: GO 46986
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46670: LD_ADDR_VAR 0 6
46674: PUSH
46675: LD_INT 22
46677: PUSH
46678: LD_VAR 0 1
46682: PPUSH
46683: CALL_OW 255
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 30
46697: PUSH
46698: LD_INT 36
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 34
46707: PUSH
46708: LD_INT 31
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PPUSH
46724: CALL_OW 69
46728: ST_TO_ADDR
// if not tmp then
46729: LD_VAR 0 6
46733: NOT
46734: IFFALSE 46738
// exit ;
46736: GO 46986
// result := [ ] ;
46738: LD_ADDR_VAR 0 2
46742: PUSH
46743: EMPTY
46744: ST_TO_ADDR
// for i in tmp do
46745: LD_ADDR_VAR 0 3
46749: PUSH
46750: LD_VAR 0 6
46754: PUSH
46755: FOR_IN
46756: IFFALSE 46827
// begin t := UnitsInside ( i ) ;
46758: LD_ADDR_VAR 0 4
46762: PUSH
46763: LD_VAR 0 3
46767: PPUSH
46768: CALL_OW 313
46772: ST_TO_ADDR
// if t then
46773: LD_VAR 0 4
46777: IFFALSE 46825
// for j in t do
46779: LD_ADDR_VAR 0 7
46783: PUSH
46784: LD_VAR 0 4
46788: PUSH
46789: FOR_IN
46790: IFFALSE 46823
// result := Replace ( result , result + 1 , j ) ;
46792: LD_ADDR_VAR 0 2
46796: PUSH
46797: LD_VAR 0 2
46801: PPUSH
46802: LD_VAR 0 2
46806: PUSH
46807: LD_INT 1
46809: PLUS
46810: PPUSH
46811: LD_VAR 0 7
46815: PPUSH
46816: CALL_OW 1
46820: ST_TO_ADDR
46821: GO 46789
46823: POP
46824: POP
// end ;
46825: GO 46755
46827: POP
46828: POP
// if not result then
46829: LD_VAR 0 2
46833: NOT
46834: IFFALSE 46838
// exit ;
46836: GO 46986
// mech := result [ 1 ] ;
46838: LD_ADDR_VAR 0 5
46842: PUSH
46843: LD_VAR 0 2
46847: PUSH
46848: LD_INT 1
46850: ARRAY
46851: ST_TO_ADDR
// if result > 1 then
46852: LD_VAR 0 2
46856: PUSH
46857: LD_INT 1
46859: GREATER
46860: IFFALSE 46972
// begin for i = 2 to result do
46862: LD_ADDR_VAR 0 3
46866: PUSH
46867: DOUBLE
46868: LD_INT 2
46870: DEC
46871: ST_TO_ADDR
46872: LD_VAR 0 2
46876: PUSH
46877: FOR_TO
46878: IFFALSE 46970
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46880: LD_ADDR_VAR 0 4
46884: PUSH
46885: LD_VAR 0 2
46889: PUSH
46890: LD_VAR 0 3
46894: ARRAY
46895: PPUSH
46896: LD_INT 3
46898: PPUSH
46899: CALL_OW 259
46903: PUSH
46904: LD_VAR 0 2
46908: PUSH
46909: LD_VAR 0 3
46913: ARRAY
46914: PPUSH
46915: CALL_OW 432
46919: MINUS
46920: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46921: LD_VAR 0 4
46925: PUSH
46926: LD_VAR 0 5
46930: PPUSH
46931: LD_INT 3
46933: PPUSH
46934: CALL_OW 259
46938: PUSH
46939: LD_VAR 0 5
46943: PPUSH
46944: CALL_OW 432
46948: MINUS
46949: GREATEREQUAL
46950: IFFALSE 46968
// mech := result [ i ] ;
46952: LD_ADDR_VAR 0 5
46956: PUSH
46957: LD_VAR 0 2
46961: PUSH
46962: LD_VAR 0 3
46966: ARRAY
46967: ST_TO_ADDR
// end ;
46968: GO 46877
46970: POP
46971: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46972: LD_VAR 0 1
46976: PPUSH
46977: LD_VAR 0 5
46981: PPUSH
46982: CALL_OW 135
// end ;
46986: LD_VAR 0 2
46990: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46991: LD_INT 0
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
// result := [ ] ;
47006: LD_ADDR_VAR 0 7
47010: PUSH
47011: EMPTY
47012: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 266
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: IN
47033: NOT
47034: IFFALSE 47038
// exit ;
47036: GO 48672
// if name then
47038: LD_VAR 0 3
47042: IFFALSE 47058
// SetBName ( base_dep , name ) ;
47044: LD_VAR 0 1
47048: PPUSH
47049: LD_VAR 0 3
47053: PPUSH
47054: CALL_OW 500
// base := GetBase ( base_dep ) ;
47058: LD_ADDR_VAR 0 15
47062: PUSH
47063: LD_VAR 0 1
47067: PPUSH
47068: CALL_OW 274
47072: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47073: LD_ADDR_VAR 0 16
47077: PUSH
47078: LD_VAR 0 1
47082: PPUSH
47083: CALL_OW 255
47087: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47088: LD_ADDR_VAR 0 17
47092: PUSH
47093: LD_VAR 0 1
47097: PPUSH
47098: CALL_OW 248
47102: ST_TO_ADDR
// if sources then
47103: LD_VAR 0 5
47107: IFFALSE 47154
// for i = 1 to 3 do
47109: LD_ADDR_VAR 0 8
47113: PUSH
47114: DOUBLE
47115: LD_INT 1
47117: DEC
47118: ST_TO_ADDR
47119: LD_INT 3
47121: PUSH
47122: FOR_TO
47123: IFFALSE 47152
// AddResourceType ( base , i , sources [ i ] ) ;
47125: LD_VAR 0 15
47129: PPUSH
47130: LD_VAR 0 8
47134: PPUSH
47135: LD_VAR 0 5
47139: PUSH
47140: LD_VAR 0 8
47144: ARRAY
47145: PPUSH
47146: CALL_OW 276
47150: GO 47122
47152: POP
47153: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47154: LD_ADDR_VAR 0 18
47158: PUSH
47159: LD_VAR 0 15
47163: PPUSH
47164: LD_VAR 0 2
47168: PPUSH
47169: LD_INT 1
47171: PPUSH
47172: CALL 46415 0 3
47176: ST_TO_ADDR
// InitHc ;
47177: CALL_OW 19
// InitUc ;
47181: CALL_OW 18
// uc_side := side ;
47185: LD_ADDR_OWVAR 20
47189: PUSH
47190: LD_VAR 0 16
47194: ST_TO_ADDR
// uc_nation := nation ;
47195: LD_ADDR_OWVAR 21
47199: PUSH
47200: LD_VAR 0 17
47204: ST_TO_ADDR
// if buildings then
47205: LD_VAR 0 18
47209: IFFALSE 48531
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47211: LD_ADDR_VAR 0 19
47215: PUSH
47216: LD_VAR 0 18
47220: PPUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 30
47226: PUSH
47227: LD_INT 29
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 30
47236: PUSH
47237: LD_INT 30
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: PPUSH
47249: CALL_OW 72
47253: ST_TO_ADDR
// if tmp then
47254: LD_VAR 0 19
47258: IFFALSE 47306
// for i in tmp do
47260: LD_ADDR_VAR 0 8
47264: PUSH
47265: LD_VAR 0 19
47269: PUSH
47270: FOR_IN
47271: IFFALSE 47304
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47273: LD_VAR 0 8
47277: PPUSH
47278: CALL_OW 250
47282: PPUSH
47283: LD_VAR 0 8
47287: PPUSH
47288: CALL_OW 251
47292: PPUSH
47293: LD_VAR 0 16
47297: PPUSH
47298: CALL_OW 441
47302: GO 47270
47304: POP
47305: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47306: LD_VAR 0 18
47310: PPUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 30
47316: PUSH
47317: LD_INT 32
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 30
47326: PUSH
47327: LD_INT 33
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: PPUSH
47339: CALL_OW 72
47343: IFFALSE 47431
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47345: LD_ADDR_VAR 0 8
47349: PUSH
47350: LD_VAR 0 18
47354: PPUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 30
47360: PUSH
47361: LD_INT 32
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 30
47370: PUSH
47371: LD_INT 33
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: PPUSH
47383: CALL_OW 72
47387: PUSH
47388: FOR_IN
47389: IFFALSE 47429
// begin if not GetBWeapon ( i ) then
47391: LD_VAR 0 8
47395: PPUSH
47396: CALL_OW 269
47400: NOT
47401: IFFALSE 47427
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47403: LD_VAR 0 8
47407: PPUSH
47408: LD_VAR 0 8
47412: PPUSH
47413: LD_VAR 0 2
47417: PPUSH
47418: CALL 48677 0 2
47422: PPUSH
47423: CALL_OW 431
// end ;
47427: GO 47388
47429: POP
47430: POP
// end ; for i = 1 to personel do
47431: LD_ADDR_VAR 0 8
47435: PUSH
47436: DOUBLE
47437: LD_INT 1
47439: DEC
47440: ST_TO_ADDR
47441: LD_VAR 0 6
47445: PUSH
47446: FOR_TO
47447: IFFALSE 48511
// begin if i > 4 then
47449: LD_VAR 0 8
47453: PUSH
47454: LD_INT 4
47456: GREATER
47457: IFFALSE 47461
// break ;
47459: GO 48511
// case i of 1 :
47461: LD_VAR 0 8
47465: PUSH
47466: LD_INT 1
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47474
47472: GO 47554
47474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47475: LD_ADDR_VAR 0 12
47479: PUSH
47480: LD_VAR 0 18
47484: PPUSH
47485: LD_INT 22
47487: PUSH
47488: LD_VAR 0 16
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 58
47499: PUSH
47500: EMPTY
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 30
47508: PUSH
47509: LD_INT 32
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 30
47518: PUSH
47519: LD_INT 4
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 30
47528: PUSH
47529: LD_INT 5
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: PPUSH
47547: CALL_OW 72
47551: ST_TO_ADDR
47552: GO 47776
47554: LD_INT 2
47556: DOUBLE
47557: EQUAL
47558: IFTRUE 47562
47560: GO 47624
47562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47563: LD_ADDR_VAR 0 12
47567: PUSH
47568: LD_VAR 0 18
47572: PPUSH
47573: LD_INT 22
47575: PUSH
47576: LD_VAR 0 16
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 30
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 30
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PPUSH
47617: CALL_OW 72
47621: ST_TO_ADDR
47622: GO 47776
47624: LD_INT 3
47626: DOUBLE
47627: EQUAL
47628: IFTRUE 47632
47630: GO 47694
47632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47633: LD_ADDR_VAR 0 12
47637: PUSH
47638: LD_VAR 0 18
47642: PPUSH
47643: LD_INT 22
47645: PUSH
47646: LD_VAR 0 16
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 30
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PPUSH
47687: CALL_OW 72
47691: ST_TO_ADDR
47692: GO 47776
47694: LD_INT 4
47696: DOUBLE
47697: EQUAL
47698: IFTRUE 47702
47700: GO 47775
47702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47703: LD_ADDR_VAR 0 12
47707: PUSH
47708: LD_VAR 0 18
47712: PPUSH
47713: LD_INT 22
47715: PUSH
47716: LD_VAR 0 16
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 30
47730: PUSH
47731: LD_INT 6
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 30
47740: PUSH
47741: LD_INT 7
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 30
47750: PUSH
47751: LD_INT 8
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PPUSH
47768: CALL_OW 72
47772: ST_TO_ADDR
47773: GO 47776
47775: POP
// if i = 1 then
47776: LD_VAR 0 8
47780: PUSH
47781: LD_INT 1
47783: EQUAL
47784: IFFALSE 47895
// begin tmp := [ ] ;
47786: LD_ADDR_VAR 0 19
47790: PUSH
47791: EMPTY
47792: ST_TO_ADDR
// for j in f do
47793: LD_ADDR_VAR 0 9
47797: PUSH
47798: LD_VAR 0 12
47802: PUSH
47803: FOR_IN
47804: IFFALSE 47877
// if GetBType ( j ) = b_bunker then
47806: LD_VAR 0 9
47810: PPUSH
47811: CALL_OW 266
47815: PUSH
47816: LD_INT 32
47818: EQUAL
47819: IFFALSE 47846
// tmp := Insert ( tmp , 1 , j ) else
47821: LD_ADDR_VAR 0 19
47825: PUSH
47826: LD_VAR 0 19
47830: PPUSH
47831: LD_INT 1
47833: PPUSH
47834: LD_VAR 0 9
47838: PPUSH
47839: CALL_OW 2
47843: ST_TO_ADDR
47844: GO 47875
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47846: LD_ADDR_VAR 0 19
47850: PUSH
47851: LD_VAR 0 19
47855: PPUSH
47856: LD_VAR 0 19
47860: PUSH
47861: LD_INT 1
47863: PLUS
47864: PPUSH
47865: LD_VAR 0 9
47869: PPUSH
47870: CALL_OW 2
47874: ST_TO_ADDR
47875: GO 47803
47877: POP
47878: POP
// if tmp then
47879: LD_VAR 0 19
47883: IFFALSE 47895
// f := tmp ;
47885: LD_ADDR_VAR 0 12
47889: PUSH
47890: LD_VAR 0 19
47894: ST_TO_ADDR
// end ; x := personel [ i ] ;
47895: LD_ADDR_VAR 0 13
47899: PUSH
47900: LD_VAR 0 6
47904: PUSH
47905: LD_VAR 0 8
47909: ARRAY
47910: ST_TO_ADDR
// if x = - 1 then
47911: LD_VAR 0 13
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: EQUAL
47920: IFFALSE 48129
// begin for j in f do
47922: LD_ADDR_VAR 0 9
47926: PUSH
47927: LD_VAR 0 12
47931: PUSH
47932: FOR_IN
47933: IFFALSE 48125
// repeat InitHc ;
47935: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47939: LD_VAR 0 9
47943: PPUSH
47944: CALL_OW 266
47948: PUSH
47949: LD_INT 5
47951: EQUAL
47952: IFFALSE 48022
// begin if UnitsInside ( j ) < 3 then
47954: LD_VAR 0 9
47958: PPUSH
47959: CALL_OW 313
47963: PUSH
47964: LD_INT 3
47966: LESS
47967: IFFALSE 48003
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47969: LD_INT 0
47971: PPUSH
47972: LD_INT 5
47974: PUSH
47975: LD_INT 8
47977: PUSH
47978: LD_INT 9
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: PUSH
47986: LD_VAR 0 17
47990: ARRAY
47991: PPUSH
47992: LD_VAR 0 4
47996: PPUSH
47997: CALL_OW 380
48001: GO 48020
// PrepareHuman ( false , i , skill ) ;
48003: LD_INT 0
48005: PPUSH
48006: LD_VAR 0 8
48010: PPUSH
48011: LD_VAR 0 4
48015: PPUSH
48016: CALL_OW 380
// end else
48020: GO 48039
// PrepareHuman ( false , i , skill ) ;
48022: LD_INT 0
48024: PPUSH
48025: LD_VAR 0 8
48029: PPUSH
48030: LD_VAR 0 4
48034: PPUSH
48035: CALL_OW 380
// un := CreateHuman ;
48039: LD_ADDR_VAR 0 14
48043: PUSH
48044: CALL_OW 44
48048: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48049: LD_ADDR_VAR 0 7
48053: PUSH
48054: LD_VAR 0 7
48058: PPUSH
48059: LD_INT 1
48061: PPUSH
48062: LD_VAR 0 14
48066: PPUSH
48067: CALL_OW 2
48071: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48072: LD_VAR 0 14
48076: PPUSH
48077: LD_VAR 0 9
48081: PPUSH
48082: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48086: LD_VAR 0 9
48090: PPUSH
48091: CALL_OW 313
48095: PUSH
48096: LD_INT 6
48098: EQUAL
48099: PUSH
48100: LD_VAR 0 9
48104: PPUSH
48105: CALL_OW 266
48109: PUSH
48110: LD_INT 32
48112: PUSH
48113: LD_INT 31
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: IN
48120: OR
48121: IFFALSE 47935
48123: GO 47932
48125: POP
48126: POP
// end else
48127: GO 48509
// for j = 1 to x do
48129: LD_ADDR_VAR 0 9
48133: PUSH
48134: DOUBLE
48135: LD_INT 1
48137: DEC
48138: ST_TO_ADDR
48139: LD_VAR 0 13
48143: PUSH
48144: FOR_TO
48145: IFFALSE 48507
// begin InitHc ;
48147: CALL_OW 19
// if not f then
48151: LD_VAR 0 12
48155: NOT
48156: IFFALSE 48245
// begin PrepareHuman ( false , i , skill ) ;
48158: LD_INT 0
48160: PPUSH
48161: LD_VAR 0 8
48165: PPUSH
48166: LD_VAR 0 4
48170: PPUSH
48171: CALL_OW 380
// un := CreateHuman ;
48175: LD_ADDR_VAR 0 14
48179: PUSH
48180: CALL_OW 44
48184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48185: LD_ADDR_VAR 0 7
48189: PUSH
48190: LD_VAR 0 7
48194: PPUSH
48195: LD_INT 1
48197: PPUSH
48198: LD_VAR 0 14
48202: PPUSH
48203: CALL_OW 2
48207: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48208: LD_VAR 0 14
48212: PPUSH
48213: LD_VAR 0 1
48217: PPUSH
48218: CALL_OW 250
48222: PPUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 251
48232: PPUSH
48233: LD_INT 10
48235: PPUSH
48236: LD_INT 0
48238: PPUSH
48239: CALL_OW 50
// continue ;
48243: GO 48144
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48245: LD_VAR 0 12
48249: PUSH
48250: LD_INT 1
48252: ARRAY
48253: PPUSH
48254: CALL_OW 313
48258: PUSH
48259: LD_VAR 0 12
48263: PUSH
48264: LD_INT 1
48266: ARRAY
48267: PPUSH
48268: CALL_OW 266
48272: PUSH
48273: LD_INT 32
48275: PUSH
48276: LD_INT 31
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: IN
48283: AND
48284: PUSH
48285: LD_VAR 0 12
48289: PUSH
48290: LD_INT 1
48292: ARRAY
48293: PPUSH
48294: CALL_OW 313
48298: PUSH
48299: LD_INT 6
48301: EQUAL
48302: OR
48303: IFFALSE 48323
// f := Delete ( f , 1 ) ;
48305: LD_ADDR_VAR 0 12
48309: PUSH
48310: LD_VAR 0 12
48314: PPUSH
48315: LD_INT 1
48317: PPUSH
48318: CALL_OW 3
48322: ST_TO_ADDR
// if not f then
48323: LD_VAR 0 12
48327: NOT
48328: IFFALSE 48346
// begin x := x + 2 ;
48330: LD_ADDR_VAR 0 13
48334: PUSH
48335: LD_VAR 0 13
48339: PUSH
48340: LD_INT 2
48342: PLUS
48343: ST_TO_ADDR
// continue ;
48344: GO 48144
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48346: LD_VAR 0 12
48350: PUSH
48351: LD_INT 1
48353: ARRAY
48354: PPUSH
48355: CALL_OW 266
48359: PUSH
48360: LD_INT 5
48362: EQUAL
48363: IFFALSE 48437
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48365: LD_VAR 0 12
48369: PUSH
48370: LD_INT 1
48372: ARRAY
48373: PPUSH
48374: CALL_OW 313
48378: PUSH
48379: LD_INT 3
48381: LESS
48382: IFFALSE 48418
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48384: LD_INT 0
48386: PPUSH
48387: LD_INT 5
48389: PUSH
48390: LD_INT 8
48392: PUSH
48393: LD_INT 9
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: PUSH
48401: LD_VAR 0 17
48405: ARRAY
48406: PPUSH
48407: LD_VAR 0 4
48411: PPUSH
48412: CALL_OW 380
48416: GO 48435
// PrepareHuman ( false , i , skill ) ;
48418: LD_INT 0
48420: PPUSH
48421: LD_VAR 0 8
48425: PPUSH
48426: LD_VAR 0 4
48430: PPUSH
48431: CALL_OW 380
// end else
48435: GO 48454
// PrepareHuman ( false , i , skill ) ;
48437: LD_INT 0
48439: PPUSH
48440: LD_VAR 0 8
48444: PPUSH
48445: LD_VAR 0 4
48449: PPUSH
48450: CALL_OW 380
// un := CreateHuman ;
48454: LD_ADDR_VAR 0 14
48458: PUSH
48459: CALL_OW 44
48463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48464: LD_ADDR_VAR 0 7
48468: PUSH
48469: LD_VAR 0 7
48473: PPUSH
48474: LD_INT 1
48476: PPUSH
48477: LD_VAR 0 14
48481: PPUSH
48482: CALL_OW 2
48486: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48487: LD_VAR 0 14
48491: PPUSH
48492: LD_VAR 0 12
48496: PUSH
48497: LD_INT 1
48499: ARRAY
48500: PPUSH
48501: CALL_OW 52
// end ;
48505: GO 48144
48507: POP
48508: POP
// end ;
48509: GO 47446
48511: POP
48512: POP
// result := result ^ buildings ;
48513: LD_ADDR_VAR 0 7
48517: PUSH
48518: LD_VAR 0 7
48522: PUSH
48523: LD_VAR 0 18
48527: ADD
48528: ST_TO_ADDR
// end else
48529: GO 48672
// begin for i = 1 to personel do
48531: LD_ADDR_VAR 0 8
48535: PUSH
48536: DOUBLE
48537: LD_INT 1
48539: DEC
48540: ST_TO_ADDR
48541: LD_VAR 0 6
48545: PUSH
48546: FOR_TO
48547: IFFALSE 48670
// begin if i > 4 then
48549: LD_VAR 0 8
48553: PUSH
48554: LD_INT 4
48556: GREATER
48557: IFFALSE 48561
// break ;
48559: GO 48670
// x := personel [ i ] ;
48561: LD_ADDR_VAR 0 13
48565: PUSH
48566: LD_VAR 0 6
48570: PUSH
48571: LD_VAR 0 8
48575: ARRAY
48576: ST_TO_ADDR
// if x = - 1 then
48577: LD_VAR 0 13
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: EQUAL
48586: IFFALSE 48590
// continue ;
48588: GO 48546
// PrepareHuman ( false , i , skill ) ;
48590: LD_INT 0
48592: PPUSH
48593: LD_VAR 0 8
48597: PPUSH
48598: LD_VAR 0 4
48602: PPUSH
48603: CALL_OW 380
// un := CreateHuman ;
48607: LD_ADDR_VAR 0 14
48611: PUSH
48612: CALL_OW 44
48616: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48617: LD_VAR 0 14
48621: PPUSH
48622: LD_VAR 0 1
48626: PPUSH
48627: CALL_OW 250
48631: PPUSH
48632: LD_VAR 0 1
48636: PPUSH
48637: CALL_OW 251
48641: PPUSH
48642: LD_INT 10
48644: PPUSH
48645: LD_INT 0
48647: PPUSH
48648: CALL_OW 50
// result := result ^ un ;
48652: LD_ADDR_VAR 0 7
48656: PUSH
48657: LD_VAR 0 7
48661: PUSH
48662: LD_VAR 0 14
48666: ADD
48667: ST_TO_ADDR
// end ;
48668: GO 48546
48670: POP
48671: POP
// end ; end ;
48672: LD_VAR 0 7
48676: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48677: LD_INT 0
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
// result := false ;
48695: LD_ADDR_VAR 0 3
48699: PUSH
48700: LD_INT 0
48702: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48703: LD_VAR 0 1
48707: NOT
48708: PUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: CALL_OW 266
48718: PUSH
48719: LD_INT 32
48721: PUSH
48722: LD_INT 33
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: IN
48729: NOT
48730: OR
48731: IFFALSE 48735
// exit ;
48733: GO 49844
// nat := GetNation ( tower ) ;
48735: LD_ADDR_VAR 0 12
48739: PUSH
48740: LD_VAR 0 1
48744: PPUSH
48745: CALL_OW 248
48749: ST_TO_ADDR
// side := GetSide ( tower ) ;
48750: LD_ADDR_VAR 0 16
48754: PUSH
48755: LD_VAR 0 1
48759: PPUSH
48760: CALL_OW 255
48764: ST_TO_ADDR
// x := GetX ( tower ) ;
48765: LD_ADDR_VAR 0 10
48769: PUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: CALL_OW 250
48779: ST_TO_ADDR
// y := GetY ( tower ) ;
48780: LD_ADDR_VAR 0 11
48784: PUSH
48785: LD_VAR 0 1
48789: PPUSH
48790: CALL_OW 251
48794: ST_TO_ADDR
// if not x or not y then
48795: LD_VAR 0 10
48799: NOT
48800: PUSH
48801: LD_VAR 0 11
48805: NOT
48806: OR
48807: IFFALSE 48811
// exit ;
48809: GO 49844
// weapon := 0 ;
48811: LD_ADDR_VAR 0 18
48815: PUSH
48816: LD_INT 0
48818: ST_TO_ADDR
// fac_list := [ ] ;
48819: LD_ADDR_VAR 0 17
48823: PUSH
48824: EMPTY
48825: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48826: LD_ADDR_VAR 0 6
48830: PUSH
48831: LD_VAR 0 1
48835: PPUSH
48836: CALL_OW 274
48840: PPUSH
48841: LD_VAR 0 2
48845: PPUSH
48846: LD_INT 0
48848: PPUSH
48849: CALL 46415 0 3
48853: PPUSH
48854: LD_INT 30
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PPUSH
48864: CALL_OW 72
48868: ST_TO_ADDR
// if not factories then
48869: LD_VAR 0 6
48873: NOT
48874: IFFALSE 48878
// exit ;
48876: GO 49844
// for i in factories do
48878: LD_ADDR_VAR 0 8
48882: PUSH
48883: LD_VAR 0 6
48887: PUSH
48888: FOR_IN
48889: IFFALSE 48914
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48891: LD_ADDR_VAR 0 17
48895: PUSH
48896: LD_VAR 0 17
48900: PUSH
48901: LD_VAR 0 8
48905: PPUSH
48906: CALL_OW 478
48910: UNION
48911: ST_TO_ADDR
48912: GO 48888
48914: POP
48915: POP
// if not fac_list then
48916: LD_VAR 0 17
48920: NOT
48921: IFFALSE 48925
// exit ;
48923: GO 49844
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48925: LD_ADDR_VAR 0 5
48929: PUSH
48930: LD_INT 4
48932: PUSH
48933: LD_INT 5
48935: PUSH
48936: LD_INT 9
48938: PUSH
48939: LD_INT 10
48941: PUSH
48942: LD_INT 6
48944: PUSH
48945: LD_INT 7
48947: PUSH
48948: LD_INT 11
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 27
48962: PUSH
48963: LD_INT 28
48965: PUSH
48966: LD_INT 26
48968: PUSH
48969: LD_INT 30
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 43
48980: PUSH
48981: LD_INT 44
48983: PUSH
48984: LD_INT 46
48986: PUSH
48987: LD_INT 45
48989: PUSH
48990: LD_INT 47
48992: PUSH
48993: LD_INT 49
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: PUSH
49009: LD_VAR 0 12
49013: ARRAY
49014: ST_TO_ADDR
// list := list isect fac_list ;
49015: LD_ADDR_VAR 0 5
49019: PUSH
49020: LD_VAR 0 5
49024: PUSH
49025: LD_VAR 0 17
49029: ISECT
49030: ST_TO_ADDR
// if not list then
49031: LD_VAR 0 5
49035: NOT
49036: IFFALSE 49040
// exit ;
49038: GO 49844
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49040: LD_VAR 0 12
49044: PUSH
49045: LD_INT 3
49047: EQUAL
49048: PUSH
49049: LD_INT 49
49051: PUSH
49052: LD_VAR 0 5
49056: IN
49057: AND
49058: PUSH
49059: LD_INT 31
49061: PPUSH
49062: LD_VAR 0 16
49066: PPUSH
49067: CALL_OW 321
49071: PUSH
49072: LD_INT 2
49074: EQUAL
49075: AND
49076: IFFALSE 49136
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49078: LD_INT 22
49080: PUSH
49081: LD_VAR 0 16
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 35
49092: PUSH
49093: LD_INT 49
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 91
49102: PUSH
49103: LD_VAR 0 1
49107: PUSH
49108: LD_INT 10
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: PPUSH
49121: CALL_OW 69
49125: NOT
49126: IFFALSE 49136
// weapon := ru_time_lapser ;
49128: LD_ADDR_VAR 0 18
49132: PUSH
49133: LD_INT 49
49135: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49136: LD_VAR 0 12
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: IN
49151: PUSH
49152: LD_INT 11
49154: PUSH
49155: LD_VAR 0 5
49159: IN
49160: PUSH
49161: LD_INT 30
49163: PUSH
49164: LD_VAR 0 5
49168: IN
49169: OR
49170: AND
49171: PUSH
49172: LD_INT 6
49174: PPUSH
49175: LD_VAR 0 16
49179: PPUSH
49180: CALL_OW 321
49184: PUSH
49185: LD_INT 2
49187: EQUAL
49188: AND
49189: IFFALSE 49354
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49191: LD_INT 22
49193: PUSH
49194: LD_VAR 0 16
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 35
49208: PUSH
49209: LD_INT 11
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 35
49218: PUSH
49219: LD_INT 30
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 91
49233: PUSH
49234: LD_VAR 0 1
49238: PUSH
49239: LD_INT 18
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: PPUSH
49252: CALL_OW 69
49256: NOT
49257: PUSH
49258: LD_INT 22
49260: PUSH
49261: LD_VAR 0 16
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 30
49275: PUSH
49276: LD_INT 32
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 30
49285: PUSH
49286: LD_INT 33
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 91
49300: PUSH
49301: LD_VAR 0 1
49305: PUSH
49306: LD_INT 12
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: PUSH
49319: EMPTY
49320: LIST
49321: PPUSH
49322: CALL_OW 69
49326: PUSH
49327: LD_INT 2
49329: GREATER
49330: AND
49331: IFFALSE 49354
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49333: LD_ADDR_VAR 0 18
49337: PUSH
49338: LD_INT 11
49340: PUSH
49341: LD_INT 30
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_VAR 0 12
49352: ARRAY
49353: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49354: LD_VAR 0 18
49358: NOT
49359: PUSH
49360: LD_INT 40
49362: PPUSH
49363: LD_VAR 0 16
49367: PPUSH
49368: CALL_OW 321
49372: PUSH
49373: LD_INT 2
49375: EQUAL
49376: AND
49377: PUSH
49378: LD_INT 7
49380: PUSH
49381: LD_VAR 0 5
49385: IN
49386: PUSH
49387: LD_INT 28
49389: PUSH
49390: LD_VAR 0 5
49394: IN
49395: OR
49396: PUSH
49397: LD_INT 45
49399: PUSH
49400: LD_VAR 0 5
49404: IN
49405: OR
49406: AND
49407: IFFALSE 49661
// begin hex := GetHexInfo ( x , y ) ;
49409: LD_ADDR_VAR 0 4
49413: PUSH
49414: LD_VAR 0 10
49418: PPUSH
49419: LD_VAR 0 11
49423: PPUSH
49424: CALL_OW 546
49428: ST_TO_ADDR
// if hex [ 1 ] then
49429: LD_VAR 0 4
49433: PUSH
49434: LD_INT 1
49436: ARRAY
49437: IFFALSE 49441
// exit ;
49439: GO 49844
// height := hex [ 2 ] ;
49441: LD_ADDR_VAR 0 15
49445: PUSH
49446: LD_VAR 0 4
49450: PUSH
49451: LD_INT 2
49453: ARRAY
49454: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49455: LD_ADDR_VAR 0 14
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: LD_INT 5
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: ST_TO_ADDR
// for i in tmp do
49478: LD_ADDR_VAR 0 8
49482: PUSH
49483: LD_VAR 0 14
49487: PUSH
49488: FOR_IN
49489: IFFALSE 49659
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49491: LD_ADDR_VAR 0 9
49495: PUSH
49496: LD_VAR 0 10
49500: PPUSH
49501: LD_VAR 0 8
49505: PPUSH
49506: LD_INT 5
49508: PPUSH
49509: CALL_OW 272
49513: PUSH
49514: LD_VAR 0 11
49518: PPUSH
49519: LD_VAR 0 8
49523: PPUSH
49524: LD_INT 5
49526: PPUSH
49527: CALL_OW 273
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49536: LD_VAR 0 9
49540: PUSH
49541: LD_INT 1
49543: ARRAY
49544: PPUSH
49545: LD_VAR 0 9
49549: PUSH
49550: LD_INT 2
49552: ARRAY
49553: PPUSH
49554: CALL_OW 488
49558: IFFALSE 49657
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49560: LD_ADDR_VAR 0 4
49564: PUSH
49565: LD_VAR 0 9
49569: PUSH
49570: LD_INT 1
49572: ARRAY
49573: PPUSH
49574: LD_VAR 0 9
49578: PUSH
49579: LD_INT 2
49581: ARRAY
49582: PPUSH
49583: CALL_OW 546
49587: ST_TO_ADDR
// if hex [ 1 ] then
49588: LD_VAR 0 4
49592: PUSH
49593: LD_INT 1
49595: ARRAY
49596: IFFALSE 49600
// continue ;
49598: GO 49488
// h := hex [ 2 ] ;
49600: LD_ADDR_VAR 0 13
49604: PUSH
49605: LD_VAR 0 4
49609: PUSH
49610: LD_INT 2
49612: ARRAY
49613: ST_TO_ADDR
// if h + 7 < height then
49614: LD_VAR 0 13
49618: PUSH
49619: LD_INT 7
49621: PLUS
49622: PUSH
49623: LD_VAR 0 15
49627: LESS
49628: IFFALSE 49657
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49630: LD_ADDR_VAR 0 18
49634: PUSH
49635: LD_INT 7
49637: PUSH
49638: LD_INT 28
49640: PUSH
49641: LD_INT 45
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: PUSH
49649: LD_VAR 0 12
49653: ARRAY
49654: ST_TO_ADDR
// break ;
49655: GO 49659
// end ; end ; end ;
49657: GO 49488
49659: POP
49660: POP
// end ; if not weapon then
49661: LD_VAR 0 18
49665: NOT
49666: IFFALSE 49726
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49668: LD_ADDR_VAR 0 5
49672: PUSH
49673: LD_VAR 0 5
49677: PUSH
49678: LD_INT 11
49680: PUSH
49681: LD_INT 30
49683: PUSH
49684: LD_INT 49
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: DIFF
49692: ST_TO_ADDR
// if not list then
49693: LD_VAR 0 5
49697: NOT
49698: IFFALSE 49702
// exit ;
49700: GO 49844
// weapon := list [ rand ( 1 , list ) ] ;
49702: LD_ADDR_VAR 0 18
49706: PUSH
49707: LD_VAR 0 5
49711: PUSH
49712: LD_INT 1
49714: PPUSH
49715: LD_VAR 0 5
49719: PPUSH
49720: CALL_OW 12
49724: ARRAY
49725: ST_TO_ADDR
// end ; if weapon then
49726: LD_VAR 0 18
49730: IFFALSE 49844
// begin tmp := CostOfWeapon ( weapon ) ;
49732: LD_ADDR_VAR 0 14
49736: PUSH
49737: LD_VAR 0 18
49741: PPUSH
49742: CALL_OW 451
49746: ST_TO_ADDR
// j := GetBase ( tower ) ;
49747: LD_ADDR_VAR 0 9
49751: PUSH
49752: LD_VAR 0 1
49756: PPUSH
49757: CALL_OW 274
49761: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49762: LD_VAR 0 9
49766: PPUSH
49767: LD_INT 1
49769: PPUSH
49770: CALL_OW 275
49774: PUSH
49775: LD_VAR 0 14
49779: PUSH
49780: LD_INT 1
49782: ARRAY
49783: GREATEREQUAL
49784: PUSH
49785: LD_VAR 0 9
49789: PPUSH
49790: LD_INT 2
49792: PPUSH
49793: CALL_OW 275
49797: PUSH
49798: LD_VAR 0 14
49802: PUSH
49803: LD_INT 2
49805: ARRAY
49806: GREATEREQUAL
49807: AND
49808: PUSH
49809: LD_VAR 0 9
49813: PPUSH
49814: LD_INT 3
49816: PPUSH
49817: CALL_OW 275
49821: PUSH
49822: LD_VAR 0 14
49826: PUSH
49827: LD_INT 3
49829: ARRAY
49830: GREATEREQUAL
49831: AND
49832: IFFALSE 49844
// result := weapon ;
49834: LD_ADDR_VAR 0 3
49838: PUSH
49839: LD_VAR 0 18
49843: ST_TO_ADDR
// end ; end ;
49844: LD_VAR 0 3
49848: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49849: LD_INT 0
49851: PPUSH
49852: PPUSH
// result := true ;
49853: LD_ADDR_VAR 0 3
49857: PUSH
49858: LD_INT 1
49860: ST_TO_ADDR
// if array1 = array2 then
49861: LD_VAR 0 1
49865: PUSH
49866: LD_VAR 0 2
49870: EQUAL
49871: IFFALSE 49931
// begin for i = 1 to array1 do
49873: LD_ADDR_VAR 0 4
49877: PUSH
49878: DOUBLE
49879: LD_INT 1
49881: DEC
49882: ST_TO_ADDR
49883: LD_VAR 0 1
49887: PUSH
49888: FOR_TO
49889: IFFALSE 49927
// if array1 [ i ] <> array2 [ i ] then
49891: LD_VAR 0 1
49895: PUSH
49896: LD_VAR 0 4
49900: ARRAY
49901: PUSH
49902: LD_VAR 0 2
49906: PUSH
49907: LD_VAR 0 4
49911: ARRAY
49912: NONEQUAL
49913: IFFALSE 49925
// begin result := false ;
49915: LD_ADDR_VAR 0 3
49919: PUSH
49920: LD_INT 0
49922: ST_TO_ADDR
// break ;
49923: GO 49927
// end ;
49925: GO 49888
49927: POP
49928: POP
// end else
49929: GO 49939
// result := false ;
49931: LD_ADDR_VAR 0 3
49935: PUSH
49936: LD_INT 0
49938: ST_TO_ADDR
// end ;
49939: LD_VAR 0 3
49943: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49944: LD_INT 0
49946: PPUSH
49947: PPUSH
// if not array1 or not array2 then
49948: LD_VAR 0 1
49952: NOT
49953: PUSH
49954: LD_VAR 0 2
49958: NOT
49959: OR
49960: IFFALSE 49964
// exit ;
49962: GO 50028
// result := true ;
49964: LD_ADDR_VAR 0 3
49968: PUSH
49969: LD_INT 1
49971: ST_TO_ADDR
// for i = 1 to array1 do
49972: LD_ADDR_VAR 0 4
49976: PUSH
49977: DOUBLE
49978: LD_INT 1
49980: DEC
49981: ST_TO_ADDR
49982: LD_VAR 0 1
49986: PUSH
49987: FOR_TO
49988: IFFALSE 50026
// if array1 [ i ] <> array2 [ i ] then
49990: LD_VAR 0 1
49994: PUSH
49995: LD_VAR 0 4
49999: ARRAY
50000: PUSH
50001: LD_VAR 0 2
50005: PUSH
50006: LD_VAR 0 4
50010: ARRAY
50011: NONEQUAL
50012: IFFALSE 50024
// begin result := false ;
50014: LD_ADDR_VAR 0 3
50018: PUSH
50019: LD_INT 0
50021: ST_TO_ADDR
// break ;
50022: GO 50026
// end ;
50024: GO 49987
50026: POP
50027: POP
// end ;
50028: LD_VAR 0 3
50032: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50033: LD_INT 0
50035: PPUSH
50036: PPUSH
50037: PPUSH
// pom := GetBase ( fac ) ;
50038: LD_ADDR_VAR 0 5
50042: PUSH
50043: LD_VAR 0 1
50047: PPUSH
50048: CALL_OW 274
50052: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50053: LD_ADDR_VAR 0 4
50057: PUSH
50058: LD_VAR 0 2
50062: PUSH
50063: LD_INT 1
50065: ARRAY
50066: PPUSH
50067: LD_VAR 0 2
50071: PUSH
50072: LD_INT 2
50074: ARRAY
50075: PPUSH
50076: LD_VAR 0 2
50080: PUSH
50081: LD_INT 3
50083: ARRAY
50084: PPUSH
50085: LD_VAR 0 2
50089: PUSH
50090: LD_INT 4
50092: ARRAY
50093: PPUSH
50094: CALL_OW 449
50098: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50099: LD_ADDR_VAR 0 3
50103: PUSH
50104: LD_VAR 0 5
50108: PPUSH
50109: LD_INT 1
50111: PPUSH
50112: CALL_OW 275
50116: PUSH
50117: LD_VAR 0 4
50121: PUSH
50122: LD_INT 1
50124: ARRAY
50125: GREATEREQUAL
50126: PUSH
50127: LD_VAR 0 5
50131: PPUSH
50132: LD_INT 2
50134: PPUSH
50135: CALL_OW 275
50139: PUSH
50140: LD_VAR 0 4
50144: PUSH
50145: LD_INT 2
50147: ARRAY
50148: GREATEREQUAL
50149: AND
50150: PUSH
50151: LD_VAR 0 5
50155: PPUSH
50156: LD_INT 3
50158: PPUSH
50159: CALL_OW 275
50163: PUSH
50164: LD_VAR 0 4
50168: PUSH
50169: LD_INT 3
50171: ARRAY
50172: GREATEREQUAL
50173: AND
50174: ST_TO_ADDR
// end ;
50175: LD_VAR 0 3
50179: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50180: LD_INT 0
50182: PPUSH
50183: PPUSH
50184: PPUSH
50185: PPUSH
// pom := GetBase ( building ) ;
50186: LD_ADDR_VAR 0 3
50190: PUSH
50191: LD_VAR 0 1
50195: PPUSH
50196: CALL_OW 274
50200: ST_TO_ADDR
// if not pom then
50201: LD_VAR 0 3
50205: NOT
50206: IFFALSE 50210
// exit ;
50208: GO 50380
// btype := GetBType ( building ) ;
50210: LD_ADDR_VAR 0 5
50214: PUSH
50215: LD_VAR 0 1
50219: PPUSH
50220: CALL_OW 266
50224: ST_TO_ADDR
// if btype = b_armoury then
50225: LD_VAR 0 5
50229: PUSH
50230: LD_INT 4
50232: EQUAL
50233: IFFALSE 50243
// btype := b_barracks ;
50235: LD_ADDR_VAR 0 5
50239: PUSH
50240: LD_INT 5
50242: ST_TO_ADDR
// if btype = b_depot then
50243: LD_VAR 0 5
50247: PUSH
50248: LD_INT 0
50250: EQUAL
50251: IFFALSE 50261
// btype := b_warehouse ;
50253: LD_ADDR_VAR 0 5
50257: PUSH
50258: LD_INT 1
50260: ST_TO_ADDR
// if btype = b_workshop then
50261: LD_VAR 0 5
50265: PUSH
50266: LD_INT 2
50268: EQUAL
50269: IFFALSE 50279
// btype := b_factory ;
50271: LD_ADDR_VAR 0 5
50275: PUSH
50276: LD_INT 3
50278: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50279: LD_ADDR_VAR 0 4
50283: PUSH
50284: LD_VAR 0 5
50288: PPUSH
50289: LD_VAR 0 1
50293: PPUSH
50294: CALL_OW 248
50298: PPUSH
50299: CALL_OW 450
50303: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50304: LD_ADDR_VAR 0 2
50308: PUSH
50309: LD_VAR 0 3
50313: PPUSH
50314: LD_INT 1
50316: PPUSH
50317: CALL_OW 275
50321: PUSH
50322: LD_VAR 0 4
50326: PUSH
50327: LD_INT 1
50329: ARRAY
50330: GREATEREQUAL
50331: PUSH
50332: LD_VAR 0 3
50336: PPUSH
50337: LD_INT 2
50339: PPUSH
50340: CALL_OW 275
50344: PUSH
50345: LD_VAR 0 4
50349: PUSH
50350: LD_INT 2
50352: ARRAY
50353: GREATEREQUAL
50354: AND
50355: PUSH
50356: LD_VAR 0 3
50360: PPUSH
50361: LD_INT 3
50363: PPUSH
50364: CALL_OW 275
50368: PUSH
50369: LD_VAR 0 4
50373: PUSH
50374: LD_INT 3
50376: ARRAY
50377: GREATEREQUAL
50378: AND
50379: ST_TO_ADDR
// end ;
50380: LD_VAR 0 2
50384: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50385: LD_INT 0
50387: PPUSH
50388: PPUSH
50389: PPUSH
// pom := GetBase ( building ) ;
50390: LD_ADDR_VAR 0 4
50394: PUSH
50395: LD_VAR 0 1
50399: PPUSH
50400: CALL_OW 274
50404: ST_TO_ADDR
// if not pom then
50405: LD_VAR 0 4
50409: NOT
50410: IFFALSE 50414
// exit ;
50412: GO 50515
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50414: LD_ADDR_VAR 0 5
50418: PUSH
50419: LD_VAR 0 2
50423: PPUSH
50424: LD_VAR 0 1
50428: PPUSH
50429: CALL_OW 248
50433: PPUSH
50434: CALL_OW 450
50438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50439: LD_ADDR_VAR 0 3
50443: PUSH
50444: LD_VAR 0 4
50448: PPUSH
50449: LD_INT 1
50451: PPUSH
50452: CALL_OW 275
50456: PUSH
50457: LD_VAR 0 5
50461: PUSH
50462: LD_INT 1
50464: ARRAY
50465: GREATEREQUAL
50466: PUSH
50467: LD_VAR 0 4
50471: PPUSH
50472: LD_INT 2
50474: PPUSH
50475: CALL_OW 275
50479: PUSH
50480: LD_VAR 0 5
50484: PUSH
50485: LD_INT 2
50487: ARRAY
50488: GREATEREQUAL
50489: AND
50490: PUSH
50491: LD_VAR 0 4
50495: PPUSH
50496: LD_INT 3
50498: PPUSH
50499: CALL_OW 275
50503: PUSH
50504: LD_VAR 0 5
50508: PUSH
50509: LD_INT 3
50511: ARRAY
50512: GREATEREQUAL
50513: AND
50514: ST_TO_ADDR
// end ;
50515: LD_VAR 0 3
50519: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50520: LD_INT 0
50522: PPUSH
50523: PPUSH
50524: PPUSH
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
// result := false ;
50533: LD_ADDR_VAR 0 8
50537: PUSH
50538: LD_INT 0
50540: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50541: LD_VAR 0 5
50545: NOT
50546: PUSH
50547: LD_VAR 0 1
50551: NOT
50552: OR
50553: PUSH
50554: LD_VAR 0 2
50558: NOT
50559: OR
50560: PUSH
50561: LD_VAR 0 3
50565: NOT
50566: OR
50567: IFFALSE 50571
// exit ;
50569: GO 51385
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50571: LD_ADDR_VAR 0 14
50575: PUSH
50576: LD_VAR 0 1
50580: PPUSH
50581: LD_VAR 0 2
50585: PPUSH
50586: LD_VAR 0 3
50590: PPUSH
50591: LD_VAR 0 4
50595: PPUSH
50596: LD_VAR 0 5
50600: PUSH
50601: LD_INT 1
50603: ARRAY
50604: PPUSH
50605: CALL_OW 248
50609: PPUSH
50610: LD_INT 0
50612: PPUSH
50613: CALL 52638 0 6
50617: ST_TO_ADDR
// if not hexes then
50618: LD_VAR 0 14
50622: NOT
50623: IFFALSE 50627
// exit ;
50625: GO 51385
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50627: LD_ADDR_VAR 0 17
50631: PUSH
50632: LD_VAR 0 5
50636: PPUSH
50637: LD_INT 22
50639: PUSH
50640: LD_VAR 0 13
50644: PPUSH
50645: CALL_OW 255
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 30
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 30
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PPUSH
50686: CALL_OW 72
50690: ST_TO_ADDR
// for i = 1 to hexes do
50691: LD_ADDR_VAR 0 9
50695: PUSH
50696: DOUBLE
50697: LD_INT 1
50699: DEC
50700: ST_TO_ADDR
50701: LD_VAR 0 14
50705: PUSH
50706: FOR_TO
50707: IFFALSE 51383
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50709: LD_ADDR_VAR 0 13
50713: PUSH
50714: LD_VAR 0 14
50718: PUSH
50719: LD_VAR 0 9
50723: ARRAY
50724: PUSH
50725: LD_INT 1
50727: ARRAY
50728: PPUSH
50729: LD_VAR 0 14
50733: PUSH
50734: LD_VAR 0 9
50738: ARRAY
50739: PUSH
50740: LD_INT 2
50742: ARRAY
50743: PPUSH
50744: CALL_OW 428
50748: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50749: LD_VAR 0 14
50753: PUSH
50754: LD_VAR 0 9
50758: ARRAY
50759: PUSH
50760: LD_INT 1
50762: ARRAY
50763: PPUSH
50764: LD_VAR 0 14
50768: PUSH
50769: LD_VAR 0 9
50773: ARRAY
50774: PUSH
50775: LD_INT 2
50777: ARRAY
50778: PPUSH
50779: CALL_OW 351
50783: PUSH
50784: LD_VAR 0 14
50788: PUSH
50789: LD_VAR 0 9
50793: ARRAY
50794: PUSH
50795: LD_INT 1
50797: ARRAY
50798: PPUSH
50799: LD_VAR 0 14
50803: PUSH
50804: LD_VAR 0 9
50808: ARRAY
50809: PUSH
50810: LD_INT 2
50812: ARRAY
50813: PPUSH
50814: CALL_OW 488
50818: NOT
50819: OR
50820: PUSH
50821: LD_VAR 0 13
50825: PPUSH
50826: CALL_OW 247
50830: PUSH
50831: LD_INT 3
50833: EQUAL
50834: OR
50835: IFFALSE 50841
// exit ;
50837: POP
50838: POP
50839: GO 51385
// if not tmp then
50841: LD_VAR 0 13
50845: NOT
50846: IFFALSE 50850
// continue ;
50848: GO 50706
// result := true ;
50850: LD_ADDR_VAR 0 8
50854: PUSH
50855: LD_INT 1
50857: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50858: LD_VAR 0 6
50862: PUSH
50863: LD_VAR 0 13
50867: PPUSH
50868: CALL_OW 247
50872: PUSH
50873: LD_INT 2
50875: EQUAL
50876: AND
50877: PUSH
50878: LD_VAR 0 13
50882: PPUSH
50883: CALL_OW 263
50887: PUSH
50888: LD_INT 1
50890: EQUAL
50891: AND
50892: IFFALSE 51056
// begin if IsDrivenBy ( tmp ) then
50894: LD_VAR 0 13
50898: PPUSH
50899: CALL_OW 311
50903: IFFALSE 50907
// continue ;
50905: GO 50706
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50907: LD_VAR 0 6
50911: PPUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 60
50917: PUSH
50918: EMPTY
50919: LIST
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: LD_INT 55
50930: PUSH
50931: EMPTY
50932: LIST
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PPUSH
50942: CALL_OW 72
50946: IFFALSE 51054
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50948: LD_ADDR_VAR 0 18
50952: PUSH
50953: LD_VAR 0 6
50957: PPUSH
50958: LD_INT 3
50960: PUSH
50961: LD_INT 60
50963: PUSH
50964: EMPTY
50965: LIST
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: LD_INT 55
50976: PUSH
50977: EMPTY
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PPUSH
50988: CALL_OW 72
50992: PUSH
50993: LD_INT 1
50995: ARRAY
50996: ST_TO_ADDR
// if IsInUnit ( driver ) then
50997: LD_VAR 0 18
51001: PPUSH
51002: CALL_OW 310
51006: IFFALSE 51017
// ComExit ( driver ) ;
51008: LD_VAR 0 18
51012: PPUSH
51013: CALL 76439 0 1
// AddComEnterUnit ( driver , tmp ) ;
51017: LD_VAR 0 18
51021: PPUSH
51022: LD_VAR 0 13
51026: PPUSH
51027: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51031: LD_VAR 0 18
51035: PPUSH
51036: LD_VAR 0 7
51040: PPUSH
51041: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51045: LD_VAR 0 18
51049: PPUSH
51050: CALL_OW 181
// end ; continue ;
51054: GO 50706
// end ; if not cleaners or not tmp in cleaners then
51056: LD_VAR 0 6
51060: NOT
51061: PUSH
51062: LD_VAR 0 13
51066: PUSH
51067: LD_VAR 0 6
51071: IN
51072: NOT
51073: OR
51074: IFFALSE 51381
// begin if dep then
51076: LD_VAR 0 17
51080: IFFALSE 51216
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51082: LD_ADDR_VAR 0 16
51086: PUSH
51087: LD_VAR 0 17
51091: PUSH
51092: LD_INT 1
51094: ARRAY
51095: PPUSH
51096: CALL_OW 250
51100: PPUSH
51101: LD_VAR 0 17
51105: PUSH
51106: LD_INT 1
51108: ARRAY
51109: PPUSH
51110: CALL_OW 254
51114: PPUSH
51115: LD_INT 5
51117: PPUSH
51118: CALL_OW 272
51122: PUSH
51123: LD_VAR 0 17
51127: PUSH
51128: LD_INT 1
51130: ARRAY
51131: PPUSH
51132: CALL_OW 251
51136: PPUSH
51137: LD_VAR 0 17
51141: PUSH
51142: LD_INT 1
51144: ARRAY
51145: PPUSH
51146: CALL_OW 254
51150: PPUSH
51151: LD_INT 5
51153: PPUSH
51154: CALL_OW 273
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51163: LD_VAR 0 16
51167: PUSH
51168: LD_INT 1
51170: ARRAY
51171: PPUSH
51172: LD_VAR 0 16
51176: PUSH
51177: LD_INT 2
51179: ARRAY
51180: PPUSH
51181: CALL_OW 488
51185: IFFALSE 51216
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51187: LD_VAR 0 13
51191: PPUSH
51192: LD_VAR 0 16
51196: PUSH
51197: LD_INT 1
51199: ARRAY
51200: PPUSH
51201: LD_VAR 0 16
51205: PUSH
51206: LD_INT 2
51208: ARRAY
51209: PPUSH
51210: CALL_OW 111
// continue ;
51214: GO 50706
// end ; end ; r := GetDir ( tmp ) ;
51216: LD_ADDR_VAR 0 15
51220: PUSH
51221: LD_VAR 0 13
51225: PPUSH
51226: CALL_OW 254
51230: ST_TO_ADDR
// if r = 5 then
51231: LD_VAR 0 15
51235: PUSH
51236: LD_INT 5
51238: EQUAL
51239: IFFALSE 51249
// r := 0 ;
51241: LD_ADDR_VAR 0 15
51245: PUSH
51246: LD_INT 0
51248: ST_TO_ADDR
// for j = r to 5 do
51249: LD_ADDR_VAR 0 10
51253: PUSH
51254: DOUBLE
51255: LD_VAR 0 15
51259: DEC
51260: ST_TO_ADDR
51261: LD_INT 5
51263: PUSH
51264: FOR_TO
51265: IFFALSE 51379
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51267: LD_ADDR_VAR 0 11
51271: PUSH
51272: LD_VAR 0 13
51276: PPUSH
51277: CALL_OW 250
51281: PPUSH
51282: LD_VAR 0 10
51286: PPUSH
51287: LD_INT 2
51289: PPUSH
51290: CALL_OW 272
51294: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51295: LD_ADDR_VAR 0 12
51299: PUSH
51300: LD_VAR 0 13
51304: PPUSH
51305: CALL_OW 251
51309: PPUSH
51310: LD_VAR 0 10
51314: PPUSH
51315: LD_INT 2
51317: PPUSH
51318: CALL_OW 273
51322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51323: LD_VAR 0 11
51327: PPUSH
51328: LD_VAR 0 12
51332: PPUSH
51333: CALL_OW 488
51337: PUSH
51338: LD_VAR 0 11
51342: PPUSH
51343: LD_VAR 0 12
51347: PPUSH
51348: CALL_OW 428
51352: NOT
51353: AND
51354: IFFALSE 51377
// begin ComMoveXY ( tmp , _x , _y ) ;
51356: LD_VAR 0 13
51360: PPUSH
51361: LD_VAR 0 11
51365: PPUSH
51366: LD_VAR 0 12
51370: PPUSH
51371: CALL_OW 111
// break ;
51375: GO 51379
// end ; end ;
51377: GO 51264
51379: POP
51380: POP
// end ; end ;
51381: GO 50706
51383: POP
51384: POP
// end ;
51385: LD_VAR 0 8
51389: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51390: LD_INT 0
51392: PPUSH
// result := true ;
51393: LD_ADDR_VAR 0 3
51397: PUSH
51398: LD_INT 1
51400: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51401: LD_VAR 0 2
51405: PUSH
51406: LD_INT 24
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51420
51412: LD_INT 33
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51420
51418: GO 51445
51420: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_INT 32
51428: PPUSH
51429: LD_VAR 0 1
51433: PPUSH
51434: CALL_OW 321
51438: PUSH
51439: LD_INT 2
51441: EQUAL
51442: ST_TO_ADDR
51443: GO 51761
51445: LD_INT 20
51447: DOUBLE
51448: EQUAL
51449: IFTRUE 51453
51451: GO 51478
51453: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51454: LD_ADDR_VAR 0 3
51458: PUSH
51459: LD_INT 6
51461: PPUSH
51462: LD_VAR 0 1
51466: PPUSH
51467: CALL_OW 321
51471: PUSH
51472: LD_INT 2
51474: EQUAL
51475: ST_TO_ADDR
51476: GO 51761
51478: LD_INT 22
51480: DOUBLE
51481: EQUAL
51482: IFTRUE 51492
51484: LD_INT 36
51486: DOUBLE
51487: EQUAL
51488: IFTRUE 51492
51490: GO 51517
51492: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51493: LD_ADDR_VAR 0 3
51497: PUSH
51498: LD_INT 15
51500: PPUSH
51501: LD_VAR 0 1
51505: PPUSH
51506: CALL_OW 321
51510: PUSH
51511: LD_INT 2
51513: EQUAL
51514: ST_TO_ADDR
51515: GO 51761
51517: LD_INT 30
51519: DOUBLE
51520: EQUAL
51521: IFTRUE 51525
51523: GO 51550
51525: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51526: LD_ADDR_VAR 0 3
51530: PUSH
51531: LD_INT 20
51533: PPUSH
51534: LD_VAR 0 1
51538: PPUSH
51539: CALL_OW 321
51543: PUSH
51544: LD_INT 2
51546: EQUAL
51547: ST_TO_ADDR
51548: GO 51761
51550: LD_INT 28
51552: DOUBLE
51553: EQUAL
51554: IFTRUE 51564
51556: LD_INT 21
51558: DOUBLE
51559: EQUAL
51560: IFTRUE 51564
51562: GO 51589
51564: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51565: LD_ADDR_VAR 0 3
51569: PUSH
51570: LD_INT 21
51572: PPUSH
51573: LD_VAR 0 1
51577: PPUSH
51578: CALL_OW 321
51582: PUSH
51583: LD_INT 2
51585: EQUAL
51586: ST_TO_ADDR
51587: GO 51761
51589: LD_INT 16
51591: DOUBLE
51592: EQUAL
51593: IFTRUE 51597
51595: GO 51622
51597: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51598: LD_ADDR_VAR 0 3
51602: PUSH
51603: LD_INT 84
51605: PPUSH
51606: LD_VAR 0 1
51610: PPUSH
51611: CALL_OW 321
51615: PUSH
51616: LD_INT 2
51618: EQUAL
51619: ST_TO_ADDR
51620: GO 51761
51622: LD_INT 19
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51636
51628: LD_INT 23
51630: DOUBLE
51631: EQUAL
51632: IFTRUE 51636
51634: GO 51661
51636: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51637: LD_ADDR_VAR 0 3
51641: PUSH
51642: LD_INT 83
51644: PPUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 321
51654: PUSH
51655: LD_INT 2
51657: EQUAL
51658: ST_TO_ADDR
51659: GO 51761
51661: LD_INT 17
51663: DOUBLE
51664: EQUAL
51665: IFTRUE 51669
51667: GO 51694
51669: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51670: LD_ADDR_VAR 0 3
51674: PUSH
51675: LD_INT 39
51677: PPUSH
51678: LD_VAR 0 1
51682: PPUSH
51683: CALL_OW 321
51687: PUSH
51688: LD_INT 2
51690: EQUAL
51691: ST_TO_ADDR
51692: GO 51761
51694: LD_INT 18
51696: DOUBLE
51697: EQUAL
51698: IFTRUE 51702
51700: GO 51727
51702: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51703: LD_ADDR_VAR 0 3
51707: PUSH
51708: LD_INT 40
51710: PPUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 321
51720: PUSH
51721: LD_INT 2
51723: EQUAL
51724: ST_TO_ADDR
51725: GO 51761
51727: LD_INT 27
51729: DOUBLE
51730: EQUAL
51731: IFTRUE 51735
51733: GO 51760
51735: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51736: LD_ADDR_VAR 0 3
51740: PUSH
51741: LD_INT 35
51743: PPUSH
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 321
51753: PUSH
51754: LD_INT 2
51756: EQUAL
51757: ST_TO_ADDR
51758: GO 51761
51760: POP
// end ;
51761: LD_VAR 0 3
51765: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51766: LD_INT 0
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
51775: PPUSH
51776: PPUSH
51777: PPUSH
51778: PPUSH
// result := false ;
51779: LD_ADDR_VAR 0 6
51783: PUSH
51784: LD_INT 0
51786: ST_TO_ADDR
// if btype = b_depot then
51787: LD_VAR 0 2
51791: PUSH
51792: LD_INT 0
51794: EQUAL
51795: IFFALSE 51807
// begin result := true ;
51797: LD_ADDR_VAR 0 6
51801: PUSH
51802: LD_INT 1
51804: ST_TO_ADDR
// exit ;
51805: GO 52633
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51807: LD_VAR 0 1
51811: NOT
51812: PUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 266
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: IN
51833: NOT
51834: OR
51835: PUSH
51836: LD_VAR 0 2
51840: NOT
51841: OR
51842: PUSH
51843: LD_VAR 0 5
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: LD_INT 4
51862: PUSH
51863: LD_INT 5
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: IN
51874: NOT
51875: OR
51876: PUSH
51877: LD_VAR 0 3
51881: PPUSH
51882: LD_VAR 0 4
51886: PPUSH
51887: CALL_OW 488
51891: NOT
51892: OR
51893: IFFALSE 51897
// exit ;
51895: GO 52633
// side := GetSide ( depot ) ;
51897: LD_ADDR_VAR 0 9
51901: PUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 255
51911: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51912: LD_VAR 0 9
51916: PPUSH
51917: LD_VAR 0 2
51921: PPUSH
51922: CALL 51390 0 2
51926: NOT
51927: IFFALSE 51931
// exit ;
51929: GO 52633
// pom := GetBase ( depot ) ;
51931: LD_ADDR_VAR 0 10
51935: PUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: CALL_OW 274
51945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51946: LD_ADDR_VAR 0 11
51950: PUSH
51951: LD_VAR 0 2
51955: PPUSH
51956: LD_VAR 0 1
51960: PPUSH
51961: CALL_OW 248
51965: PPUSH
51966: CALL_OW 450
51970: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51971: LD_VAR 0 10
51975: PPUSH
51976: LD_INT 1
51978: PPUSH
51979: CALL_OW 275
51983: PUSH
51984: LD_VAR 0 11
51988: PUSH
51989: LD_INT 1
51991: ARRAY
51992: GREATEREQUAL
51993: PUSH
51994: LD_VAR 0 10
51998: PPUSH
51999: LD_INT 2
52001: PPUSH
52002: CALL_OW 275
52006: PUSH
52007: LD_VAR 0 11
52011: PUSH
52012: LD_INT 2
52014: ARRAY
52015: GREATEREQUAL
52016: AND
52017: PUSH
52018: LD_VAR 0 10
52022: PPUSH
52023: LD_INT 3
52025: PPUSH
52026: CALL_OW 275
52030: PUSH
52031: LD_VAR 0 11
52035: PUSH
52036: LD_INT 3
52038: ARRAY
52039: GREATEREQUAL
52040: AND
52041: NOT
52042: IFFALSE 52046
// exit ;
52044: GO 52633
// if GetBType ( depot ) = b_depot then
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 266
52055: PUSH
52056: LD_INT 0
52058: EQUAL
52059: IFFALSE 52071
// dist := 28 else
52061: LD_ADDR_VAR 0 14
52065: PUSH
52066: LD_INT 28
52068: ST_TO_ADDR
52069: GO 52079
// dist := 36 ;
52071: LD_ADDR_VAR 0 14
52075: PUSH
52076: LD_INT 36
52078: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52079: LD_VAR 0 1
52083: PPUSH
52084: LD_VAR 0 3
52088: PPUSH
52089: LD_VAR 0 4
52093: PPUSH
52094: CALL_OW 297
52098: PUSH
52099: LD_VAR 0 14
52103: GREATER
52104: IFFALSE 52108
// exit ;
52106: GO 52633
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52108: LD_ADDR_VAR 0 12
52112: PUSH
52113: LD_VAR 0 2
52117: PPUSH
52118: LD_VAR 0 3
52122: PPUSH
52123: LD_VAR 0 4
52127: PPUSH
52128: LD_VAR 0 5
52132: PPUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 248
52142: PPUSH
52143: LD_INT 0
52145: PPUSH
52146: CALL 52638 0 6
52150: ST_TO_ADDR
// if not hexes then
52151: LD_VAR 0 12
52155: NOT
52156: IFFALSE 52160
// exit ;
52158: GO 52633
// hex := GetHexInfo ( x , y ) ;
52160: LD_ADDR_VAR 0 15
52164: PUSH
52165: LD_VAR 0 3
52169: PPUSH
52170: LD_VAR 0 4
52174: PPUSH
52175: CALL_OW 546
52179: ST_TO_ADDR
// if hex [ 1 ] then
52180: LD_VAR 0 15
52184: PUSH
52185: LD_INT 1
52187: ARRAY
52188: IFFALSE 52192
// exit ;
52190: GO 52633
// height := hex [ 2 ] ;
52192: LD_ADDR_VAR 0 13
52196: PUSH
52197: LD_VAR 0 15
52201: PUSH
52202: LD_INT 2
52204: ARRAY
52205: ST_TO_ADDR
// for i = 1 to hexes do
52206: LD_ADDR_VAR 0 7
52210: PUSH
52211: DOUBLE
52212: LD_INT 1
52214: DEC
52215: ST_TO_ADDR
52216: LD_VAR 0 12
52220: PUSH
52221: FOR_TO
52222: IFFALSE 52552
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52224: LD_VAR 0 12
52228: PUSH
52229: LD_VAR 0 7
52233: ARRAY
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: PPUSH
52239: LD_VAR 0 12
52243: PUSH
52244: LD_VAR 0 7
52248: ARRAY
52249: PUSH
52250: LD_INT 2
52252: ARRAY
52253: PPUSH
52254: CALL_OW 488
52258: NOT
52259: PUSH
52260: LD_VAR 0 12
52264: PUSH
52265: LD_VAR 0 7
52269: ARRAY
52270: PUSH
52271: LD_INT 1
52273: ARRAY
52274: PPUSH
52275: LD_VAR 0 12
52279: PUSH
52280: LD_VAR 0 7
52284: ARRAY
52285: PUSH
52286: LD_INT 2
52288: ARRAY
52289: PPUSH
52290: CALL_OW 428
52294: PUSH
52295: LD_INT 0
52297: GREATER
52298: OR
52299: PUSH
52300: LD_VAR 0 12
52304: PUSH
52305: LD_VAR 0 7
52309: ARRAY
52310: PUSH
52311: LD_INT 1
52313: ARRAY
52314: PPUSH
52315: LD_VAR 0 12
52319: PUSH
52320: LD_VAR 0 7
52324: ARRAY
52325: PUSH
52326: LD_INT 2
52328: ARRAY
52329: PPUSH
52330: CALL_OW 351
52334: OR
52335: IFFALSE 52341
// exit ;
52337: POP
52338: POP
52339: GO 52633
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52341: LD_ADDR_VAR 0 8
52345: PUSH
52346: LD_VAR 0 12
52350: PUSH
52351: LD_VAR 0 7
52355: ARRAY
52356: PUSH
52357: LD_INT 1
52359: ARRAY
52360: PPUSH
52361: LD_VAR 0 12
52365: PUSH
52366: LD_VAR 0 7
52370: ARRAY
52371: PUSH
52372: LD_INT 2
52374: ARRAY
52375: PPUSH
52376: CALL_OW 546
52380: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52381: LD_VAR 0 8
52385: PUSH
52386: LD_INT 1
52388: ARRAY
52389: PUSH
52390: LD_VAR 0 8
52394: PUSH
52395: LD_INT 2
52397: ARRAY
52398: PUSH
52399: LD_VAR 0 13
52403: PUSH
52404: LD_INT 2
52406: PLUS
52407: GREATER
52408: OR
52409: PUSH
52410: LD_VAR 0 8
52414: PUSH
52415: LD_INT 2
52417: ARRAY
52418: PUSH
52419: LD_VAR 0 13
52423: PUSH
52424: LD_INT 2
52426: MINUS
52427: LESS
52428: OR
52429: PUSH
52430: LD_VAR 0 8
52434: PUSH
52435: LD_INT 3
52437: ARRAY
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 8
52444: PUSH
52445: LD_INT 9
52447: PUSH
52448: LD_INT 10
52450: PUSH
52451: LD_INT 11
52453: PUSH
52454: LD_INT 12
52456: PUSH
52457: LD_INT 13
52459: PUSH
52460: LD_INT 16
52462: PUSH
52463: LD_INT 17
52465: PUSH
52466: LD_INT 18
52468: PUSH
52469: LD_INT 19
52471: PUSH
52472: LD_INT 20
52474: PUSH
52475: LD_INT 21
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: IN
52493: NOT
52494: OR
52495: PUSH
52496: LD_VAR 0 8
52500: PUSH
52501: LD_INT 5
52503: ARRAY
52504: NOT
52505: OR
52506: PUSH
52507: LD_VAR 0 8
52511: PUSH
52512: LD_INT 6
52514: ARRAY
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 7
52524: PUSH
52525: LD_INT 9
52527: PUSH
52528: LD_INT 10
52530: PUSH
52531: LD_INT 11
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: IN
52542: NOT
52543: OR
52544: IFFALSE 52550
// exit ;
52546: POP
52547: POP
52548: GO 52633
// end ;
52550: GO 52221
52552: POP
52553: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52554: LD_VAR 0 9
52558: PPUSH
52559: LD_VAR 0 3
52563: PPUSH
52564: LD_VAR 0 4
52568: PPUSH
52569: LD_INT 20
52571: PPUSH
52572: CALL 44556 0 4
52576: PUSH
52577: LD_INT 4
52579: ARRAY
52580: IFFALSE 52584
// exit ;
52582: GO 52633
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52584: LD_VAR 0 2
52588: PUSH
52589: LD_INT 29
52591: PUSH
52592: LD_INT 30
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: IN
52599: PUSH
52600: LD_VAR 0 3
52604: PPUSH
52605: LD_VAR 0 4
52609: PPUSH
52610: LD_VAR 0 9
52614: PPUSH
52615: CALL_OW 440
52619: NOT
52620: AND
52621: IFFALSE 52625
// exit ;
52623: GO 52633
// result := true ;
52625: LD_ADDR_VAR 0 6
52629: PUSH
52630: LD_INT 1
52632: ST_TO_ADDR
// end ;
52633: LD_VAR 0 6
52637: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52638: LD_INT 0
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
52645: PPUSH
52646: PPUSH
52647: PPUSH
52648: PPUSH
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
52671: PPUSH
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
52680: PPUSH
52681: PPUSH
52682: PPUSH
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
// result = [ ] ;
52698: LD_ADDR_VAR 0 7
52702: PUSH
52703: EMPTY
52704: ST_TO_ADDR
// temp_list = [ ] ;
52705: LD_ADDR_VAR 0 9
52709: PUSH
52710: EMPTY
52711: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52712: LD_VAR 0 4
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: LD_INT 5
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: IN
52743: NOT
52744: PUSH
52745: LD_VAR 0 1
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: IN
52760: PUSH
52761: LD_VAR 0 5
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: IN
52780: NOT
52781: AND
52782: OR
52783: IFFALSE 52787
// exit ;
52785: GO 71178
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52787: LD_VAR 0 1
52791: PUSH
52792: LD_INT 6
52794: PUSH
52795: LD_INT 7
52797: PUSH
52798: LD_INT 8
52800: PUSH
52801: LD_INT 13
52803: PUSH
52804: LD_INT 12
52806: PUSH
52807: LD_INT 15
52809: PUSH
52810: LD_INT 11
52812: PUSH
52813: LD_INT 14
52815: PUSH
52816: LD_INT 10
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: IN
52830: IFFALSE 52840
// btype = b_lab ;
52832: LD_ADDR_VAR 0 1
52836: PUSH
52837: LD_INT 6
52839: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52840: LD_VAR 0 6
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: IN
52859: NOT
52860: PUSH
52861: LD_VAR 0 1
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: LD_INT 6
52880: PUSH
52881: LD_INT 36
52883: PUSH
52884: LD_INT 4
52886: PUSH
52887: LD_INT 5
52889: PUSH
52890: LD_INT 31
52892: PUSH
52893: LD_INT 32
52895: PUSH
52896: LD_INT 33
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: IN
52912: NOT
52913: PUSH
52914: LD_VAR 0 6
52918: PUSH
52919: LD_INT 1
52921: EQUAL
52922: AND
52923: OR
52924: PUSH
52925: LD_VAR 0 1
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: IN
52940: NOT
52941: PUSH
52942: LD_VAR 0 6
52946: PUSH
52947: LD_INT 2
52949: EQUAL
52950: AND
52951: OR
52952: IFFALSE 52962
// mode = 0 ;
52954: LD_ADDR_VAR 0 6
52958: PUSH
52959: LD_INT 0
52961: ST_TO_ADDR
// case mode of 0 :
52962: LD_VAR 0 6
52966: PUSH
52967: LD_INT 0
52969: DOUBLE
52970: EQUAL
52971: IFTRUE 52975
52973: GO 64428
52975: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52976: LD_ADDR_VAR 0 11
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53169: LD_ADDR_VAR 0 12
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53365: LD_ADDR_VAR 0 13
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53564: LD_ADDR_VAR 0 14
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53760: LD_ADDR_VAR 0 15
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53953: LD_ADDR_VAR 0 16
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54146: LD_ADDR_VAR 0 17
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54376: LD_ADDR_VAR 0 18
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54606: LD_ADDR_VAR 0 19
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54836: LD_ADDR_VAR 0 20
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55066: LD_ADDR_VAR 0 21
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55296: LD_ADDR_VAR 0 22
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55526: LD_ADDR_VAR 0 23
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55806: LD_ADDR_VAR 0 24
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56082: LD_ADDR_VAR 0 25
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56356: LD_ADDR_VAR 0 26
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56632: LD_ADDR_VAR 0 27
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56912: LD_ADDR_VAR 0 28
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: LD_INT 3
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: LD_INT 3
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57194: LD_ADDR_VAR 0 29
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57473: LD_ADDR_VAR 0 30
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57751: LD_ADDR_VAR 0 31
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58029: LD_ADDR_VAR 0 32
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58307: LD_ADDR_VAR 0 33
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: NEG
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 3
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: NEG
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58586: LD_ADDR_VAR 0 34
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58866: LD_ADDR_VAR 0 35
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58978: LD_ADDR_VAR 0 36
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59090: LD_ADDR_VAR 0 37
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59202: LD_ADDR_VAR 0 38
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59314: LD_ADDR_VAR 0 39
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59426: LD_ADDR_VAR 0 40
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59538: LD_ADDR_VAR 0 41
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59888: LD_ADDR_VAR 0 42
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60238: LD_ADDR_VAR 0 43
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 3
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60586: LD_ADDR_VAR 0 44
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60936: LD_ADDR_VAR 0 45
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 3
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 3
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61286: LD_ADDR_VAR 0 46
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 3
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61634: LD_ADDR_VAR 0 47
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61785: LD_ADDR_VAR 0 48
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61932: LD_ADDR_VAR 0 49
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62076: LD_ADDR_VAR 0 50
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62220: LD_ADDR_VAR 0 51
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62367: LD_ADDR_VAR 0 52
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62518: LD_ADDR_VAR 0 53
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: LD_INT 2
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62748: LD_ADDR_VAR 0 54
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: LD_INT 2
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62978: LD_ADDR_VAR 0 55
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63208: LD_ADDR_VAR 0 56
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: LD_INT 2
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63438: LD_ADDR_VAR 0 57
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 2
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 2
63625: NEG
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63668: LD_ADDR_VAR 0 58
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63898: LD_ADDR_VAR 0 59
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63986: LD_ADDR_VAR 0 60
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64074: LD_ADDR_VAR 0 61
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64162: LD_ADDR_VAR 0 62
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64250: LD_ADDR_VAR 0 63
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64338: LD_ADDR_VAR 0 64
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: ST_TO_ADDR
// end ; 1 :
64426: GO 70323
64428: LD_INT 1
64430: DOUBLE
64431: EQUAL
64432: IFTRUE 64436
64434: GO 67059
64436: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64437: LD_ADDR_VAR 0 11
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: LD_INT 3
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64481: LD_ADDR_VAR 0 12
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64522: LD_ADDR_VAR 0 13
64526: PUSH
64527: LD_INT 3
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64562: LD_ADDR_VAR 0 14
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64603: LD_ADDR_VAR 0 15
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64647: LD_ADDR_VAR 0 16
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: LD_INT 3
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64693: LD_ADDR_VAR 0 17
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 3
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: LIST
64736: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64737: LD_ADDR_VAR 0 18
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64778: LD_ADDR_VAR 0 19
64782: PUSH
64783: LD_INT 3
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: LD_INT 3
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 3
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64818: LD_ADDR_VAR 0 20
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64859: LD_ADDR_VAR 0 21
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 3
64877: NEG
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: NEG
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64903: LD_ADDR_VAR 0 22
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: LD_INT 3
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: NEG
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: LD_INT 3
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64949: LD_ADDR_VAR 0 23
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: LD_INT 4
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64993: LD_ADDR_VAR 0 24
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65034: LD_ADDR_VAR 0 25
65038: PUSH
65039: LD_INT 3
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 3
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: LIST
65073: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65074: LD_ADDR_VAR 0 26
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: LD_INT 4
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: LD_INT 3
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65115: LD_ADDR_VAR 0 27
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 3
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 4
65144: NEG
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65159: LD_ADDR_VAR 0 28
65163: PUSH
65164: LD_INT 3
65166: NEG
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: LD_INT 4
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: LD_INT 3
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65205: LD_ADDR_VAR 0 29
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 2
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: NEG
65247: PUSH
65248: LD_INT 4
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 5
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: LD_INT 4
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: LD_INT 6
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 6
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 5
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65360: LD_ADDR_VAR 0 30
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 3
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 3
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 4
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 4
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 4
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 5
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 5
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 5
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 6
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 6
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65503: LD_ADDR_VAR 0 31
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 4
65550: PUSH
65551: LD_INT 4
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 4
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 5
65570: PUSH
65571: LD_INT 4
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 5
65580: PUSH
65581: LD_INT 5
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: LD_INT 5
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 6
65600: PUSH
65601: LD_INT 5
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 6
65610: PUSH
65611: LD_INT 6
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 5
65620: PUSH
65621: LD_INT 6
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65642: LD_ADDR_VAR 0 32
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 3
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 4
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: LD_INT 3
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: LD_INT 5
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 5
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: LD_INT 4
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 6
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: LD_INT 6
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 5
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65785: LD_ADDR_VAR 0 33
65789: PUSH
65790: LD_INT 2
65792: NEG
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 3
65803: NEG
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 3
65814: NEG
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 3
65826: NEG
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 4
65837: NEG
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 4
65848: NEG
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 4
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 5
65871: NEG
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 5
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 5
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 6
65905: NEG
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 6
65916: NEG
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65940: LD_ADDR_VAR 0 34
65944: PUSH
65945: LD_INT 2
65947: NEG
65948: PUSH
65949: LD_INT 3
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 3
65959: NEG
65960: PUSH
65961: LD_INT 2
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 3
65971: NEG
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: LD_INT 4
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 4
65995: NEG
65996: PUSH
65997: LD_INT 3
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 4
66007: NEG
66008: PUSH
66009: LD_INT 4
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 4
66019: NEG
66020: PUSH
66021: LD_INT 5
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 5
66031: NEG
66032: PUSH
66033: LD_INT 4
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 5
66043: NEG
66044: PUSH
66045: LD_INT 5
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 5
66055: NEG
66056: PUSH
66057: LD_INT 6
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 6
66067: NEG
66068: PUSH
66069: LD_INT 5
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 6
66079: NEG
66080: PUSH
66081: LD_INT 6
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66103: LD_ADDR_VAR 0 41
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: LD_INT 3
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66147: LD_ADDR_VAR 0 42
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 3
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66188: LD_ADDR_VAR 0 43
66192: PUSH
66193: LD_INT 2
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66228: LD_ADDR_VAR 0 44
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66269: LD_ADDR_VAR 0 45
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66313: LD_ADDR_VAR 0 46
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 3
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66359: LD_ADDR_VAR 0 47
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 3
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66392: LD_ADDR_VAR 0 48
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: LD_INT 2
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 2
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66423: LD_ADDR_VAR 0 49
66427: PUSH
66428: LD_INT 3
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66452: LD_ADDR_VAR 0 50
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66481: LD_ADDR_VAR 0 51
66485: PUSH
66486: LD_INT 1
66488: NEG
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66512: LD_ADDR_VAR 0 52
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: LD_INT 1
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: LD_INT 2
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66545: LD_ADDR_VAR 0 53
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: LD_INT 2
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66589: LD_ADDR_VAR 0 54
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66630: LD_ADDR_VAR 0 55
66634: PUSH
66635: LD_INT 3
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 3
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 2
66657: PUSH
66658: LD_INT 3
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66670: LD_ADDR_VAR 0 56
66674: PUSH
66675: LD_INT 1
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 2
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: LIST
66710: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66711: LD_ADDR_VAR 0 57
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: NEG
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: LIST
66754: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66755: LD_ADDR_VAR 0 58
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: LD_INT 2
66778: NEG
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 3
66786: NEG
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66801: LD_ADDR_VAR 0 59
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66845: LD_ADDR_VAR 0 60
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 2
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66886: LD_ADDR_VAR 0 61
66890: PUSH
66891: LD_INT 2
66893: PUSH
66894: LD_INT 1
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 2
66903: PUSH
66904: LD_INT 2
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66926: LD_ADDR_VAR 0 62
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66967: LD_ADDR_VAR 0 63
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: LIST
67010: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67011: LD_ADDR_VAR 0 64
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: LD_INT 2
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: NEG
67043: PUSH
67044: LD_INT 2
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: ST_TO_ADDR
// end ; 2 :
67057: GO 70323
67059: LD_INT 2
67061: DOUBLE
67062: EQUAL
67063: IFTRUE 67067
67065: GO 70322
67067: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67068: LD_ADDR_VAR 0 29
67072: PUSH
67073: LD_INT 4
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 5
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 5
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 4
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: LD_INT 2
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 5
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: LD_INT 3
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: LD_INT 4
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 4
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 4
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: LD_INT 4
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 1
67278: PUSH
67279: LD_INT 4
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: PUSH
67289: LD_INT 5
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: LD_INT 5
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: LD_INT 3
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: LD_INT 5
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 2
67340: NEG
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 3
67362: NEG
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 2
67385: NEG
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 3
67396: NEG
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 4
67407: NEG
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 4
67418: NEG
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 4
67430: NEG
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 4
67453: NEG
67454: PUSH
67455: LD_INT 4
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 4
67465: NEG
67466: PUSH
67467: LD_INT 5
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 3
67477: NEG
67478: PUSH
67479: LD_INT 4
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: NEG
67490: PUSH
67491: LD_INT 3
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 4
67501: NEG
67502: PUSH
67503: LD_INT 3
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 5
67513: NEG
67514: PUSH
67515: LD_INT 4
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 5
67525: NEG
67526: PUSH
67527: LD_INT 5
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 3
67537: NEG
67538: PUSH
67539: LD_INT 5
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 5
67549: NEG
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67606: LD_ADDR_VAR 0 30
67610: PUSH
67611: LD_INT 4
67613: PUSH
67614: LD_INT 4
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 4
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 5
67633: PUSH
67634: LD_INT 4
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 5
67643: PUSH
67644: LD_INT 5
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 4
67653: PUSH
67654: LD_INT 5
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 3
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 5
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 3
67693: PUSH
67694: LD_INT 5
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: NEG
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 2
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 4
67796: NEG
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 4
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 3
67819: NEG
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 3
67830: NEG
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 4
67841: NEG
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 5
67852: NEG
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 5
67863: NEG
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 5
67875: NEG
67876: PUSH
67877: LD_INT 2
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: LD_INT 2
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: LD_INT 4
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 3
67946: NEG
67947: PUSH
67948: LD_INT 2
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: NEG
67959: PUSH
67960: LD_INT 3
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 4
67970: NEG
67971: PUSH
67972: LD_INT 4
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: LD_INT 4
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: LD_INT 4
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 5
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 4
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: LD_INT 4
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 1
68073: NEG
68074: PUSH
68075: LD_INT 5
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 2
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 5
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68153: LD_ADDR_VAR 0 31
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: LD_INT 4
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: LD_INT 4
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: PUSH
68191: LD_INT 5
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 5
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 3
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 2
68232: PUSH
68233: LD_INT 5
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 2
68242: NEG
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 3
68253: NEG
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: NEG
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 2
68276: NEG
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 3
68298: NEG
68299: PUSH
68300: LD_INT 1
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 4
68309: NEG
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 4
68320: NEG
68321: PUSH
68322: LD_INT 1
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 4
68332: NEG
68333: PUSH
68334: LD_INT 2
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: LD_INT 2
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 4
68355: NEG
68356: PUSH
68357: LD_INT 4
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: LD_INT 5
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: LD_INT 4
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 4
68403: NEG
68404: PUSH
68405: LD_INT 3
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 5
68415: NEG
68416: PUSH
68417: LD_INT 4
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 5
68427: NEG
68428: PUSH
68429: LD_INT 5
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 3
68439: NEG
68440: PUSH
68441: LD_INT 5
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 5
68451: NEG
68452: PUSH
68453: LD_INT 3
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: LD_INT 3
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: LD_INT 4
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: LD_INT 3
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 2
68510: NEG
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 1
68518: NEG
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: LD_INT 2
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: LD_INT 4
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 4
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 4
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 5
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 5
68596: PUSH
68597: LD_INT 1
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: PUSH
68607: LD_INT 1
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 3
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 3
68637: PUSH
68638: LD_INT 2
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 5
68648: PUSH
68649: LD_INT 2
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68703: LD_ADDR_VAR 0 32
68707: PUSH
68708: LD_INT 4
68710: NEG
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 4
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 4
68755: NEG
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 5
68766: NEG
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 5
68777: NEG
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 5
68789: NEG
68790: PUSH
68791: LD_INT 2
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 3
68801: NEG
68802: PUSH
68803: LD_INT 2
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 3
68812: NEG
68813: PUSH
68814: LD_INT 3
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: LD_INT 4
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PUSH
68838: LD_INT 3
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 2
68848: NEG
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: LD_INT 2
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 4
68872: NEG
68873: PUSH
68874: LD_INT 3
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: LD_INT 4
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 2
68896: NEG
68897: PUSH
68898: LD_INT 4
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: LD_INT 2
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 4
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 5
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: LD_INT 4
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 3
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 1
68975: NEG
68976: PUSH
68977: LD_INT 4
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 1
68987: NEG
68988: PUSH
68989: LD_INT 5
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: LD_INT 5
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 3
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 4
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 4
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: LD_INT 2
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 4
69105: PUSH
69106: LD_INT 2
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 4
69115: PUSH
69116: LD_INT 4
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 4
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 5
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 5
69145: PUSH
69146: LD_INT 5
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 4
69155: PUSH
69156: LD_INT 5
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: LD_INT 4
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 3
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 5
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 3
69195: PUSH
69196: LD_INT 5
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69250: LD_ADDR_VAR 0 33
69254: PUSH
69255: LD_INT 4
69257: NEG
69258: PUSH
69259: LD_INT 4
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 4
69269: NEG
69270: PUSH
69271: LD_INT 5
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: LD_INT 4
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 3
69293: NEG
69294: PUSH
69295: LD_INT 3
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 4
69305: NEG
69306: PUSH
69307: LD_INT 3
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 5
69317: NEG
69318: PUSH
69319: LD_INT 4
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 5
69329: NEG
69330: PUSH
69331: LD_INT 5
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: LD_INT 5
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 5
69353: NEG
69354: PUSH
69355: LD_INT 3
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: LD_INT 3
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: LD_INT 4
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 1
69387: PUSH
69388: LD_INT 3
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: LD_INT 2
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 1
69432: NEG
69433: PUSH
69434: LD_INT 4
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 2
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: LD_INT 4
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 4
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 4
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 5
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 5
69498: PUSH
69499: LD_INT 1
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 4
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 3
69528: PUSH
69529: LD_INT 1
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: LD_INT 2
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 5
69550: PUSH
69551: LD_INT 2
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: LD_INT 3
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: LD_INT 2
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 4
69580: PUSH
69581: LD_INT 3
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 4
69590: PUSH
69591: LD_INT 4
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: LD_INT 4
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 4
69630: PUSH
69631: LD_INT 2
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: LD_INT 4
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 1
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 1
69680: PUSH
69681: LD_INT 5
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: LD_INT 5
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: LD_INT 4
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 1
69711: NEG
69712: PUSH
69713: LD_INT 3
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 2
69722: PUSH
69723: LD_INT 5
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: LD_INT 3
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69788: LD_ADDR_VAR 0 34
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: LD_INT 4
69798: NEG
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: LD_INT 5
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: LD_INT 4
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: LD_INT 3
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 0
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 1
69850: NEG
69851: PUSH
69852: LD_INT 4
69854: NEG
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: NEG
69863: PUSH
69864: LD_INT 5
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: LD_INT 3
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 2
69885: NEG
69886: PUSH
69887: LD_INT 5
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: LD_INT 0
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 1
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 4
69918: PUSH
69919: LD_INT 0
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 4
69928: PUSH
69929: LD_INT 1
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 3
69938: PUSH
69939: LD_INT 1
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 2
69948: PUSH
69949: LD_INT 0
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 2
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 2
69969: PUSH
69970: LD_INT 2
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: LD_INT 2
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 4
69990: PUSH
69991: LD_INT 4
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 3
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 5
70010: PUSH
70011: LD_INT 4
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 5
70020: PUSH
70021: LD_INT 5
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 4
70030: PUSH
70031: LD_INT 5
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 4
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 5
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 3
70070: PUSH
70071: LD_INT 5
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: LD_INT 2
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 1
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 1
70130: NEG
70131: PUSH
70132: LD_INT 3
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 2
70162: NEG
70163: PUSH
70164: LD_INT 2
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 4
70173: NEG
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 4
70184: NEG
70185: PUSH
70186: LD_INT 1
70188: NEG
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 3
70196: NEG
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 3
70207: NEG
70208: PUSH
70209: LD_INT 1
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 4
70218: NEG
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 5
70229: NEG
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 5
70240: NEG
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 5
70252: NEG
70253: PUSH
70254: LD_INT 2
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 3
70264: NEG
70265: PUSH
70266: LD_INT 2
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: ST_TO_ADDR
// end ; end ;
70320: GO 70323
70322: POP
// case btype of b_depot , b_warehouse :
70323: LD_VAR 0 1
70327: PUSH
70328: LD_INT 0
70330: DOUBLE
70331: EQUAL
70332: IFTRUE 70342
70334: LD_INT 1
70336: DOUBLE
70337: EQUAL
70338: IFTRUE 70342
70340: GO 70543
70342: POP
// case nation of nation_american :
70343: LD_VAR 0 5
70347: PUSH
70348: LD_INT 1
70350: DOUBLE
70351: EQUAL
70352: IFTRUE 70356
70354: GO 70412
70356: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70357: LD_ADDR_VAR 0 9
70361: PUSH
70362: LD_VAR 0 11
70366: PUSH
70367: LD_VAR 0 12
70371: PUSH
70372: LD_VAR 0 13
70376: PUSH
70377: LD_VAR 0 14
70381: PUSH
70382: LD_VAR 0 15
70386: PUSH
70387: LD_VAR 0 16
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: PUSH
70400: LD_VAR 0 4
70404: PUSH
70405: LD_INT 1
70407: PLUS
70408: ARRAY
70409: ST_TO_ADDR
70410: GO 70541
70412: LD_INT 2
70414: DOUBLE
70415: EQUAL
70416: IFTRUE 70420
70418: GO 70476
70420: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70421: LD_ADDR_VAR 0 9
70425: PUSH
70426: LD_VAR 0 17
70430: PUSH
70431: LD_VAR 0 18
70435: PUSH
70436: LD_VAR 0 19
70440: PUSH
70441: LD_VAR 0 20
70445: PUSH
70446: LD_VAR 0 21
70450: PUSH
70451: LD_VAR 0 22
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: PUSH
70464: LD_VAR 0 4
70468: PUSH
70469: LD_INT 1
70471: PLUS
70472: ARRAY
70473: ST_TO_ADDR
70474: GO 70541
70476: LD_INT 3
70478: DOUBLE
70479: EQUAL
70480: IFTRUE 70484
70482: GO 70540
70484: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70485: LD_ADDR_VAR 0 9
70489: PUSH
70490: LD_VAR 0 23
70494: PUSH
70495: LD_VAR 0 24
70499: PUSH
70500: LD_VAR 0 25
70504: PUSH
70505: LD_VAR 0 26
70509: PUSH
70510: LD_VAR 0 27
70514: PUSH
70515: LD_VAR 0 28
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 4
70532: PUSH
70533: LD_INT 1
70535: PLUS
70536: ARRAY
70537: ST_TO_ADDR
70538: GO 70541
70540: POP
70541: GO 71096
70543: LD_INT 2
70545: DOUBLE
70546: EQUAL
70547: IFTRUE 70557
70549: LD_INT 3
70551: DOUBLE
70552: EQUAL
70553: IFTRUE 70557
70555: GO 70613
70557: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70558: LD_ADDR_VAR 0 9
70562: PUSH
70563: LD_VAR 0 29
70567: PUSH
70568: LD_VAR 0 30
70572: PUSH
70573: LD_VAR 0 31
70577: PUSH
70578: LD_VAR 0 32
70582: PUSH
70583: LD_VAR 0 33
70587: PUSH
70588: LD_VAR 0 34
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: PUSH
70601: LD_VAR 0 4
70605: PUSH
70606: LD_INT 1
70608: PLUS
70609: ARRAY
70610: ST_TO_ADDR
70611: GO 71096
70613: LD_INT 16
70615: DOUBLE
70616: EQUAL
70617: IFTRUE 70675
70619: LD_INT 17
70621: DOUBLE
70622: EQUAL
70623: IFTRUE 70675
70625: LD_INT 18
70627: DOUBLE
70628: EQUAL
70629: IFTRUE 70675
70631: LD_INT 19
70633: DOUBLE
70634: EQUAL
70635: IFTRUE 70675
70637: LD_INT 22
70639: DOUBLE
70640: EQUAL
70641: IFTRUE 70675
70643: LD_INT 20
70645: DOUBLE
70646: EQUAL
70647: IFTRUE 70675
70649: LD_INT 21
70651: DOUBLE
70652: EQUAL
70653: IFTRUE 70675
70655: LD_INT 23
70657: DOUBLE
70658: EQUAL
70659: IFTRUE 70675
70661: LD_INT 24
70663: DOUBLE
70664: EQUAL
70665: IFTRUE 70675
70667: LD_INT 25
70669: DOUBLE
70670: EQUAL
70671: IFTRUE 70675
70673: GO 70731
70675: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70676: LD_ADDR_VAR 0 9
70680: PUSH
70681: LD_VAR 0 35
70685: PUSH
70686: LD_VAR 0 36
70690: PUSH
70691: LD_VAR 0 37
70695: PUSH
70696: LD_VAR 0 38
70700: PUSH
70701: LD_VAR 0 39
70705: PUSH
70706: LD_VAR 0 40
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: PUSH
70719: LD_VAR 0 4
70723: PUSH
70724: LD_INT 1
70726: PLUS
70727: ARRAY
70728: ST_TO_ADDR
70729: GO 71096
70731: LD_INT 6
70733: DOUBLE
70734: EQUAL
70735: IFTRUE 70787
70737: LD_INT 7
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70787
70743: LD_INT 8
70745: DOUBLE
70746: EQUAL
70747: IFTRUE 70787
70749: LD_INT 13
70751: DOUBLE
70752: EQUAL
70753: IFTRUE 70787
70755: LD_INT 12
70757: DOUBLE
70758: EQUAL
70759: IFTRUE 70787
70761: LD_INT 15
70763: DOUBLE
70764: EQUAL
70765: IFTRUE 70787
70767: LD_INT 11
70769: DOUBLE
70770: EQUAL
70771: IFTRUE 70787
70773: LD_INT 14
70775: DOUBLE
70776: EQUAL
70777: IFTRUE 70787
70779: LD_INT 10
70781: DOUBLE
70782: EQUAL
70783: IFTRUE 70787
70785: GO 70843
70787: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70788: LD_ADDR_VAR 0 9
70792: PUSH
70793: LD_VAR 0 41
70797: PUSH
70798: LD_VAR 0 42
70802: PUSH
70803: LD_VAR 0 43
70807: PUSH
70808: LD_VAR 0 44
70812: PUSH
70813: LD_VAR 0 45
70817: PUSH
70818: LD_VAR 0 46
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: PUSH
70831: LD_VAR 0 4
70835: PUSH
70836: LD_INT 1
70838: PLUS
70839: ARRAY
70840: ST_TO_ADDR
70841: GO 71096
70843: LD_INT 36
70845: DOUBLE
70846: EQUAL
70847: IFTRUE 70851
70849: GO 70907
70851: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70852: LD_ADDR_VAR 0 9
70856: PUSH
70857: LD_VAR 0 47
70861: PUSH
70862: LD_VAR 0 48
70866: PUSH
70867: LD_VAR 0 49
70871: PUSH
70872: LD_VAR 0 50
70876: PUSH
70877: LD_VAR 0 51
70881: PUSH
70882: LD_VAR 0 52
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: PUSH
70895: LD_VAR 0 4
70899: PUSH
70900: LD_INT 1
70902: PLUS
70903: ARRAY
70904: ST_TO_ADDR
70905: GO 71096
70907: LD_INT 4
70909: DOUBLE
70910: EQUAL
70911: IFTRUE 70933
70913: LD_INT 5
70915: DOUBLE
70916: EQUAL
70917: IFTRUE 70933
70919: LD_INT 34
70921: DOUBLE
70922: EQUAL
70923: IFTRUE 70933
70925: LD_INT 37
70927: DOUBLE
70928: EQUAL
70929: IFTRUE 70933
70931: GO 70989
70933: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70934: LD_ADDR_VAR 0 9
70938: PUSH
70939: LD_VAR 0 53
70943: PUSH
70944: LD_VAR 0 54
70948: PUSH
70949: LD_VAR 0 55
70953: PUSH
70954: LD_VAR 0 56
70958: PUSH
70959: LD_VAR 0 57
70963: PUSH
70964: LD_VAR 0 58
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: PUSH
70977: LD_VAR 0 4
70981: PUSH
70982: LD_INT 1
70984: PLUS
70985: ARRAY
70986: ST_TO_ADDR
70987: GO 71096
70989: LD_INT 31
70991: DOUBLE
70992: EQUAL
70993: IFTRUE 71039
70995: LD_INT 32
70997: DOUBLE
70998: EQUAL
70999: IFTRUE 71039
71001: LD_INT 33
71003: DOUBLE
71004: EQUAL
71005: IFTRUE 71039
71007: LD_INT 27
71009: DOUBLE
71010: EQUAL
71011: IFTRUE 71039
71013: LD_INT 26
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71039
71019: LD_INT 28
71021: DOUBLE
71022: EQUAL
71023: IFTRUE 71039
71025: LD_INT 29
71027: DOUBLE
71028: EQUAL
71029: IFTRUE 71039
71031: LD_INT 30
71033: DOUBLE
71034: EQUAL
71035: IFTRUE 71039
71037: GO 71095
71039: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71040: LD_ADDR_VAR 0 9
71044: PUSH
71045: LD_VAR 0 59
71049: PUSH
71050: LD_VAR 0 60
71054: PUSH
71055: LD_VAR 0 61
71059: PUSH
71060: LD_VAR 0 62
71064: PUSH
71065: LD_VAR 0 63
71069: PUSH
71070: LD_VAR 0 64
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: PUSH
71083: LD_VAR 0 4
71087: PUSH
71088: LD_INT 1
71090: PLUS
71091: ARRAY
71092: ST_TO_ADDR
71093: GO 71096
71095: POP
// temp_list2 = [ ] ;
71096: LD_ADDR_VAR 0 10
71100: PUSH
71101: EMPTY
71102: ST_TO_ADDR
// for i in temp_list do
71103: LD_ADDR_VAR 0 8
71107: PUSH
71108: LD_VAR 0 9
71112: PUSH
71113: FOR_IN
71114: IFFALSE 71166
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71116: LD_ADDR_VAR 0 10
71120: PUSH
71121: LD_VAR 0 10
71125: PUSH
71126: LD_VAR 0 8
71130: PUSH
71131: LD_INT 1
71133: ARRAY
71134: PUSH
71135: LD_VAR 0 2
71139: PLUS
71140: PUSH
71141: LD_VAR 0 8
71145: PUSH
71146: LD_INT 2
71148: ARRAY
71149: PUSH
71150: LD_VAR 0 3
71154: PLUS
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: EMPTY
71161: LIST
71162: ADD
71163: ST_TO_ADDR
71164: GO 71113
71166: POP
71167: POP
// result = temp_list2 ;
71168: LD_ADDR_VAR 0 7
71172: PUSH
71173: LD_VAR 0 10
71177: ST_TO_ADDR
// end ;
71178: LD_VAR 0 7
71182: RET
// export function EnemyInRange ( unit , dist ) ; begin
71183: LD_INT 0
71185: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71186: LD_ADDR_VAR 0 3
71190: PUSH
71191: LD_VAR 0 1
71195: PPUSH
71196: CALL_OW 255
71200: PPUSH
71201: LD_VAR 0 1
71205: PPUSH
71206: CALL_OW 250
71210: PPUSH
71211: LD_VAR 0 1
71215: PPUSH
71216: CALL_OW 251
71220: PPUSH
71221: LD_VAR 0 2
71225: PPUSH
71226: CALL 44556 0 4
71230: PUSH
71231: LD_INT 4
71233: ARRAY
71234: ST_TO_ADDR
// end ;
71235: LD_VAR 0 3
71239: RET
// export function PlayerSeeMe ( unit ) ; begin
71240: LD_INT 0
71242: PPUSH
// result := See ( your_side , unit ) ;
71243: LD_ADDR_VAR 0 2
71247: PUSH
71248: LD_OWVAR 2
71252: PPUSH
71253: LD_VAR 0 1
71257: PPUSH
71258: CALL_OW 292
71262: ST_TO_ADDR
// end ;
71263: LD_VAR 0 2
71267: RET
// export function ReverseDir ( unit ) ; begin
71268: LD_INT 0
71270: PPUSH
// if not unit then
71271: LD_VAR 0 1
71275: NOT
71276: IFFALSE 71280
// exit ;
71278: GO 71303
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71280: LD_ADDR_VAR 0 2
71284: PUSH
71285: LD_VAR 0 1
71289: PPUSH
71290: CALL_OW 254
71294: PUSH
71295: LD_INT 3
71297: PLUS
71298: PUSH
71299: LD_INT 6
71301: MOD
71302: ST_TO_ADDR
// end ;
71303: LD_VAR 0 2
71307: RET
// export function ReverseArray ( array ) ; var i ; begin
71308: LD_INT 0
71310: PPUSH
71311: PPUSH
// if not array then
71312: LD_VAR 0 1
71316: NOT
71317: IFFALSE 71321
// exit ;
71319: GO 71376
// result := [ ] ;
71321: LD_ADDR_VAR 0 2
71325: PUSH
71326: EMPTY
71327: ST_TO_ADDR
// for i := array downto 1 do
71328: LD_ADDR_VAR 0 3
71332: PUSH
71333: DOUBLE
71334: LD_VAR 0 1
71338: INC
71339: ST_TO_ADDR
71340: LD_INT 1
71342: PUSH
71343: FOR_DOWNTO
71344: IFFALSE 71374
// result := Join ( result , array [ i ] ) ;
71346: LD_ADDR_VAR 0 2
71350: PUSH
71351: LD_VAR 0 2
71355: PPUSH
71356: LD_VAR 0 1
71360: PUSH
71361: LD_VAR 0 3
71365: ARRAY
71366: PPUSH
71367: CALL 76041 0 2
71371: ST_TO_ADDR
71372: GO 71343
71374: POP
71375: POP
// end ;
71376: LD_VAR 0 2
71380: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71381: LD_INT 0
71383: PPUSH
71384: PPUSH
71385: PPUSH
71386: PPUSH
71387: PPUSH
71388: PPUSH
// if not unit or not hexes then
71389: LD_VAR 0 1
71393: NOT
71394: PUSH
71395: LD_VAR 0 2
71399: NOT
71400: OR
71401: IFFALSE 71405
// exit ;
71403: GO 71528
// dist := 9999 ;
71405: LD_ADDR_VAR 0 5
71409: PUSH
71410: LD_INT 9999
71412: ST_TO_ADDR
// for i = 1 to hexes do
71413: LD_ADDR_VAR 0 4
71417: PUSH
71418: DOUBLE
71419: LD_INT 1
71421: DEC
71422: ST_TO_ADDR
71423: LD_VAR 0 2
71427: PUSH
71428: FOR_TO
71429: IFFALSE 71516
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71431: LD_ADDR_VAR 0 6
71435: PUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: LD_VAR 0 2
71445: PUSH
71446: LD_VAR 0 4
71450: ARRAY
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PPUSH
71456: LD_VAR 0 2
71460: PUSH
71461: LD_VAR 0 4
71465: ARRAY
71466: PUSH
71467: LD_INT 2
71469: ARRAY
71470: PPUSH
71471: CALL_OW 297
71475: ST_TO_ADDR
// if tdist < dist then
71476: LD_VAR 0 6
71480: PUSH
71481: LD_VAR 0 5
71485: LESS
71486: IFFALSE 71514
// begin hex := hexes [ i ] ;
71488: LD_ADDR_VAR 0 8
71492: PUSH
71493: LD_VAR 0 2
71497: PUSH
71498: LD_VAR 0 4
71502: ARRAY
71503: ST_TO_ADDR
// dist := tdist ;
71504: LD_ADDR_VAR 0 5
71508: PUSH
71509: LD_VAR 0 6
71513: ST_TO_ADDR
// end ; end ;
71514: GO 71428
71516: POP
71517: POP
// result := hex ;
71518: LD_ADDR_VAR 0 3
71522: PUSH
71523: LD_VAR 0 8
71527: ST_TO_ADDR
// end ;
71528: LD_VAR 0 3
71532: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71533: LD_INT 0
71535: PPUSH
71536: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71537: LD_VAR 0 1
71541: NOT
71542: PUSH
71543: LD_VAR 0 1
71547: PUSH
71548: LD_INT 21
71550: PUSH
71551: LD_INT 2
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 23
71560: PUSH
71561: LD_INT 2
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PPUSH
71572: CALL_OW 69
71576: IN
71577: NOT
71578: OR
71579: IFFALSE 71583
// exit ;
71581: GO 71630
// for i = 1 to 3 do
71583: LD_ADDR_VAR 0 3
71587: PUSH
71588: DOUBLE
71589: LD_INT 1
71591: DEC
71592: ST_TO_ADDR
71593: LD_INT 3
71595: PUSH
71596: FOR_TO
71597: IFFALSE 71628
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71599: LD_VAR 0 1
71603: PPUSH
71604: CALL_OW 250
71608: PPUSH
71609: LD_VAR 0 1
71613: PPUSH
71614: CALL_OW 251
71618: PPUSH
71619: LD_INT 1
71621: PPUSH
71622: CALL_OW 453
71626: GO 71596
71628: POP
71629: POP
// end ;
71630: LD_VAR 0 2
71634: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71635: LD_INT 0
71637: PPUSH
71638: PPUSH
71639: PPUSH
71640: PPUSH
71641: PPUSH
71642: PPUSH
// if not unit or not enemy_unit then
71643: LD_VAR 0 1
71647: NOT
71648: PUSH
71649: LD_VAR 0 2
71653: NOT
71654: OR
71655: IFFALSE 71659
// exit ;
71657: GO 72126
// if GetLives ( i ) < 250 then
71659: LD_VAR 0 4
71663: PPUSH
71664: CALL_OW 256
71668: PUSH
71669: LD_INT 250
71671: LESS
71672: IFFALSE 71685
// begin ComAutodestruct ( i ) ;
71674: LD_VAR 0 4
71678: PPUSH
71679: CALL 71533 0 1
// exit ;
71683: GO 72126
// end ; x := GetX ( enemy_unit ) ;
71685: LD_ADDR_VAR 0 7
71689: PUSH
71690: LD_VAR 0 2
71694: PPUSH
71695: CALL_OW 250
71699: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71700: LD_ADDR_VAR 0 8
71704: PUSH
71705: LD_VAR 0 2
71709: PPUSH
71710: CALL_OW 251
71714: ST_TO_ADDR
// if not x or not y then
71715: LD_VAR 0 7
71719: NOT
71720: PUSH
71721: LD_VAR 0 8
71725: NOT
71726: OR
71727: IFFALSE 71731
// exit ;
71729: GO 72126
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71731: LD_ADDR_VAR 0 6
71735: PUSH
71736: LD_VAR 0 7
71740: PPUSH
71741: LD_INT 0
71743: PPUSH
71744: LD_INT 4
71746: PPUSH
71747: CALL_OW 272
71751: PUSH
71752: LD_VAR 0 8
71756: PPUSH
71757: LD_INT 0
71759: PPUSH
71760: LD_INT 4
71762: PPUSH
71763: CALL_OW 273
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_VAR 0 7
71776: PPUSH
71777: LD_INT 1
71779: PPUSH
71780: LD_INT 4
71782: PPUSH
71783: CALL_OW 272
71787: PUSH
71788: LD_VAR 0 8
71792: PPUSH
71793: LD_INT 1
71795: PPUSH
71796: LD_INT 4
71798: PPUSH
71799: CALL_OW 273
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_VAR 0 7
71812: PPUSH
71813: LD_INT 2
71815: PPUSH
71816: LD_INT 4
71818: PPUSH
71819: CALL_OW 272
71823: PUSH
71824: LD_VAR 0 8
71828: PPUSH
71829: LD_INT 2
71831: PPUSH
71832: LD_INT 4
71834: PPUSH
71835: CALL_OW 273
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_VAR 0 7
71848: PPUSH
71849: LD_INT 3
71851: PPUSH
71852: LD_INT 4
71854: PPUSH
71855: CALL_OW 272
71859: PUSH
71860: LD_VAR 0 8
71864: PPUSH
71865: LD_INT 3
71867: PPUSH
71868: LD_INT 4
71870: PPUSH
71871: CALL_OW 273
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_VAR 0 7
71884: PPUSH
71885: LD_INT 4
71887: PPUSH
71888: LD_INT 4
71890: PPUSH
71891: CALL_OW 272
71895: PUSH
71896: LD_VAR 0 8
71900: PPUSH
71901: LD_INT 4
71903: PPUSH
71904: LD_INT 4
71906: PPUSH
71907: CALL_OW 273
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_VAR 0 7
71920: PPUSH
71921: LD_INT 5
71923: PPUSH
71924: LD_INT 4
71926: PPUSH
71927: CALL_OW 272
71931: PUSH
71932: LD_VAR 0 8
71936: PPUSH
71937: LD_INT 5
71939: PPUSH
71940: LD_INT 4
71942: PPUSH
71943: CALL_OW 273
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: ST_TO_ADDR
// for i = tmp downto 1 do
71960: LD_ADDR_VAR 0 4
71964: PUSH
71965: DOUBLE
71966: LD_VAR 0 6
71970: INC
71971: ST_TO_ADDR
71972: LD_INT 1
71974: PUSH
71975: FOR_DOWNTO
71976: IFFALSE 72077
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71978: LD_VAR 0 6
71982: PUSH
71983: LD_VAR 0 4
71987: ARRAY
71988: PUSH
71989: LD_INT 1
71991: ARRAY
71992: PPUSH
71993: LD_VAR 0 6
71997: PUSH
71998: LD_VAR 0 4
72002: ARRAY
72003: PUSH
72004: LD_INT 2
72006: ARRAY
72007: PPUSH
72008: CALL_OW 488
72012: NOT
72013: PUSH
72014: LD_VAR 0 6
72018: PUSH
72019: LD_VAR 0 4
72023: ARRAY
72024: PUSH
72025: LD_INT 1
72027: ARRAY
72028: PPUSH
72029: LD_VAR 0 6
72033: PUSH
72034: LD_VAR 0 4
72038: ARRAY
72039: PUSH
72040: LD_INT 2
72042: ARRAY
72043: PPUSH
72044: CALL_OW 428
72048: PUSH
72049: LD_INT 0
72051: NONEQUAL
72052: OR
72053: IFFALSE 72075
// tmp := Delete ( tmp , i ) ;
72055: LD_ADDR_VAR 0 6
72059: PUSH
72060: LD_VAR 0 6
72064: PPUSH
72065: LD_VAR 0 4
72069: PPUSH
72070: CALL_OW 3
72074: ST_TO_ADDR
72075: GO 71975
72077: POP
72078: POP
// j := GetClosestHex ( unit , tmp ) ;
72079: LD_ADDR_VAR 0 5
72083: PUSH
72084: LD_VAR 0 1
72088: PPUSH
72089: LD_VAR 0 6
72093: PPUSH
72094: CALL 71381 0 2
72098: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72099: LD_VAR 0 1
72103: PPUSH
72104: LD_VAR 0 5
72108: PUSH
72109: LD_INT 1
72111: ARRAY
72112: PPUSH
72113: LD_VAR 0 5
72117: PUSH
72118: LD_INT 2
72120: ARRAY
72121: PPUSH
72122: CALL_OW 111
// end ;
72126: LD_VAR 0 3
72130: RET
// export function PrepareApemanSoldier ( ) ; begin
72131: LD_INT 0
72133: PPUSH
// uc_nation := 0 ;
72134: LD_ADDR_OWVAR 21
72138: PUSH
72139: LD_INT 0
72141: ST_TO_ADDR
// hc_sex := sex_male ;
72142: LD_ADDR_OWVAR 27
72146: PUSH
72147: LD_INT 1
72149: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72150: LD_ADDR_OWVAR 28
72154: PUSH
72155: LD_INT 15
72157: ST_TO_ADDR
// hc_gallery :=  ;
72158: LD_ADDR_OWVAR 33
72162: PUSH
72163: LD_STRING 
72165: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72166: LD_ADDR_OWVAR 31
72170: PUSH
72171: LD_INT 0
72173: PPUSH
72174: LD_INT 3
72176: PPUSH
72177: CALL_OW 12
72181: PUSH
72182: LD_INT 0
72184: PPUSH
72185: LD_INT 3
72187: PPUSH
72188: CALL_OW 12
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: ST_TO_ADDR
// end ;
72205: LD_VAR 0 1
72209: RET
// export function PrepareApemanEngineer ( ) ; begin
72210: LD_INT 0
72212: PPUSH
// uc_nation := 0 ;
72213: LD_ADDR_OWVAR 21
72217: PUSH
72218: LD_INT 0
72220: ST_TO_ADDR
// hc_sex := sex_male ;
72221: LD_ADDR_OWVAR 27
72225: PUSH
72226: LD_INT 1
72228: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72229: LD_ADDR_OWVAR 28
72233: PUSH
72234: LD_INT 16
72236: ST_TO_ADDR
// hc_gallery :=  ;
72237: LD_ADDR_OWVAR 33
72241: PUSH
72242: LD_STRING 
72244: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72245: LD_ADDR_OWVAR 31
72249: PUSH
72250: LD_INT 0
72252: PPUSH
72253: LD_INT 3
72255: PPUSH
72256: CALL_OW 12
72260: PUSH
72261: LD_INT 0
72263: PPUSH
72264: LD_INT 3
72266: PPUSH
72267: CALL_OW 12
72271: PUSH
72272: LD_INT 0
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: ST_TO_ADDR
// end ;
72284: LD_VAR 0 1
72288: RET
// export function PrepareApeman ( agressivity ) ; begin
72289: LD_INT 0
72291: PPUSH
// uc_side := 0 ;
72292: LD_ADDR_OWVAR 20
72296: PUSH
72297: LD_INT 0
72299: ST_TO_ADDR
// uc_nation := 0 ;
72300: LD_ADDR_OWVAR 21
72304: PUSH
72305: LD_INT 0
72307: ST_TO_ADDR
// hc_sex := sex_male ;
72308: LD_ADDR_OWVAR 27
72312: PUSH
72313: LD_INT 1
72315: ST_TO_ADDR
// hc_class := class_apeman ;
72316: LD_ADDR_OWVAR 28
72320: PUSH
72321: LD_INT 12
72323: ST_TO_ADDR
// hc_gallery :=  ;
72324: LD_ADDR_OWVAR 33
72328: PUSH
72329: LD_STRING 
72331: ST_TO_ADDR
// if agressivity = 0 then
72332: LD_VAR 0 1
72336: PUSH
72337: LD_INT 0
72339: EQUAL
72340: IFFALSE 72352
// hc_agressivity := 0 else
72342: LD_ADDR_OWVAR 35
72346: PUSH
72347: LD_INT 0
72349: ST_TO_ADDR
72350: GO 72373
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72352: LD_ADDR_OWVAR 35
72356: PUSH
72357: LD_VAR 0 1
72361: NEG
72362: PPUSH
72363: LD_VAR 0 1
72367: PPUSH
72368: CALL_OW 12
72372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72373: LD_ADDR_OWVAR 31
72377: PUSH
72378: LD_INT 0
72380: PPUSH
72381: LD_INT 3
72383: PPUSH
72384: CALL_OW 12
72388: PUSH
72389: LD_INT 0
72391: PPUSH
72392: LD_INT 3
72394: PPUSH
72395: CALL_OW 12
72399: PUSH
72400: LD_INT 0
72402: PUSH
72403: LD_INT 0
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: ST_TO_ADDR
// end ;
72412: LD_VAR 0 2
72416: RET
// export function PrepareTiger ( agressivity ) ; begin
72417: LD_INT 0
72419: PPUSH
// uc_side := 0 ;
72420: LD_ADDR_OWVAR 20
72424: PUSH
72425: LD_INT 0
72427: ST_TO_ADDR
// uc_nation := 0 ;
72428: LD_ADDR_OWVAR 21
72432: PUSH
72433: LD_INT 0
72435: ST_TO_ADDR
// hc_class := class_tiger ;
72436: LD_ADDR_OWVAR 28
72440: PUSH
72441: LD_INT 14
72443: ST_TO_ADDR
// hc_gallery :=  ;
72444: LD_ADDR_OWVAR 33
72448: PUSH
72449: LD_STRING 
72451: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72452: LD_ADDR_OWVAR 35
72456: PUSH
72457: LD_VAR 0 1
72461: NEG
72462: PPUSH
72463: LD_VAR 0 1
72467: PPUSH
72468: CALL_OW 12
72472: ST_TO_ADDR
// end ;
72473: LD_VAR 0 2
72477: RET
// export function PrepareEnchidna ( ) ; begin
72478: LD_INT 0
72480: PPUSH
// uc_side := 0 ;
72481: LD_ADDR_OWVAR 20
72485: PUSH
72486: LD_INT 0
72488: ST_TO_ADDR
// uc_nation := 0 ;
72489: LD_ADDR_OWVAR 21
72493: PUSH
72494: LD_INT 0
72496: ST_TO_ADDR
// hc_class := class_baggie ;
72497: LD_ADDR_OWVAR 28
72501: PUSH
72502: LD_INT 13
72504: ST_TO_ADDR
// hc_gallery :=  ;
72505: LD_ADDR_OWVAR 33
72509: PUSH
72510: LD_STRING 
72512: ST_TO_ADDR
// end ;
72513: LD_VAR 0 1
72517: RET
// export function PrepareFrog ( ) ; begin
72518: LD_INT 0
72520: PPUSH
// uc_side := 0 ;
72521: LD_ADDR_OWVAR 20
72525: PUSH
72526: LD_INT 0
72528: ST_TO_ADDR
// uc_nation := 0 ;
72529: LD_ADDR_OWVAR 21
72533: PUSH
72534: LD_INT 0
72536: ST_TO_ADDR
// hc_class := class_frog ;
72537: LD_ADDR_OWVAR 28
72541: PUSH
72542: LD_INT 19
72544: ST_TO_ADDR
// hc_gallery :=  ;
72545: LD_ADDR_OWVAR 33
72549: PUSH
72550: LD_STRING 
72552: ST_TO_ADDR
// end ;
72553: LD_VAR 0 1
72557: RET
// export function PrepareFish ( ) ; begin
72558: LD_INT 0
72560: PPUSH
// uc_side := 0 ;
72561: LD_ADDR_OWVAR 20
72565: PUSH
72566: LD_INT 0
72568: ST_TO_ADDR
// uc_nation := 0 ;
72569: LD_ADDR_OWVAR 21
72573: PUSH
72574: LD_INT 0
72576: ST_TO_ADDR
// hc_class := class_fish ;
72577: LD_ADDR_OWVAR 28
72581: PUSH
72582: LD_INT 20
72584: ST_TO_ADDR
// hc_gallery :=  ;
72585: LD_ADDR_OWVAR 33
72589: PUSH
72590: LD_STRING 
72592: ST_TO_ADDR
// end ;
72593: LD_VAR 0 1
72597: RET
// export function PrepareBird ( ) ; begin
72598: LD_INT 0
72600: PPUSH
// uc_side := 0 ;
72601: LD_ADDR_OWVAR 20
72605: PUSH
72606: LD_INT 0
72608: ST_TO_ADDR
// uc_nation := 0 ;
72609: LD_ADDR_OWVAR 21
72613: PUSH
72614: LD_INT 0
72616: ST_TO_ADDR
// hc_class := class_phororhacos ;
72617: LD_ADDR_OWVAR 28
72621: PUSH
72622: LD_INT 18
72624: ST_TO_ADDR
// hc_gallery :=  ;
72625: LD_ADDR_OWVAR 33
72629: PUSH
72630: LD_STRING 
72632: ST_TO_ADDR
// end ;
72633: LD_VAR 0 1
72637: RET
// export function PrepareHorse ( ) ; begin
72638: LD_INT 0
72640: PPUSH
// uc_side := 0 ;
72641: LD_ADDR_OWVAR 20
72645: PUSH
72646: LD_INT 0
72648: ST_TO_ADDR
// uc_nation := 0 ;
72649: LD_ADDR_OWVAR 21
72653: PUSH
72654: LD_INT 0
72656: ST_TO_ADDR
// hc_class := class_horse ;
72657: LD_ADDR_OWVAR 28
72661: PUSH
72662: LD_INT 21
72664: ST_TO_ADDR
// hc_gallery :=  ;
72665: LD_ADDR_OWVAR 33
72669: PUSH
72670: LD_STRING 
72672: ST_TO_ADDR
// end ;
72673: LD_VAR 0 1
72677: RET
// export function PrepareMastodont ( ) ; begin
72678: LD_INT 0
72680: PPUSH
// uc_side := 0 ;
72681: LD_ADDR_OWVAR 20
72685: PUSH
72686: LD_INT 0
72688: ST_TO_ADDR
// uc_nation := 0 ;
72689: LD_ADDR_OWVAR 21
72693: PUSH
72694: LD_INT 0
72696: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72697: LD_ADDR_OWVAR 37
72701: PUSH
72702: LD_INT 31
72704: ST_TO_ADDR
// vc_control := control_rider ;
72705: LD_ADDR_OWVAR 38
72709: PUSH
72710: LD_INT 4
72712: ST_TO_ADDR
// end ;
72713: LD_VAR 0 1
72717: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72718: LD_INT 0
72720: PPUSH
72721: PPUSH
72722: PPUSH
// uc_side = 0 ;
72723: LD_ADDR_OWVAR 20
72727: PUSH
72728: LD_INT 0
72730: ST_TO_ADDR
// uc_nation = 0 ;
72731: LD_ADDR_OWVAR 21
72735: PUSH
72736: LD_INT 0
72738: ST_TO_ADDR
// InitHc_All ( ) ;
72739: CALL_OW 584
// InitVc ;
72743: CALL_OW 20
// if mastodonts then
72747: LD_VAR 0 6
72751: IFFALSE 72818
// for i = 1 to mastodonts do
72753: LD_ADDR_VAR 0 11
72757: PUSH
72758: DOUBLE
72759: LD_INT 1
72761: DEC
72762: ST_TO_ADDR
72763: LD_VAR 0 6
72767: PUSH
72768: FOR_TO
72769: IFFALSE 72816
// begin vc_chassis := 31 ;
72771: LD_ADDR_OWVAR 37
72775: PUSH
72776: LD_INT 31
72778: ST_TO_ADDR
// vc_control := control_rider ;
72779: LD_ADDR_OWVAR 38
72783: PUSH
72784: LD_INT 4
72786: ST_TO_ADDR
// animal := CreateVehicle ;
72787: LD_ADDR_VAR 0 12
72791: PUSH
72792: CALL_OW 45
72796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72797: LD_VAR 0 12
72801: PPUSH
72802: LD_VAR 0 8
72806: PPUSH
72807: LD_INT 0
72809: PPUSH
72810: CALL 74946 0 3
// end ;
72814: GO 72768
72816: POP
72817: POP
// if horses then
72818: LD_VAR 0 5
72822: IFFALSE 72889
// for i = 1 to horses do
72824: LD_ADDR_VAR 0 11
72828: PUSH
72829: DOUBLE
72830: LD_INT 1
72832: DEC
72833: ST_TO_ADDR
72834: LD_VAR 0 5
72838: PUSH
72839: FOR_TO
72840: IFFALSE 72887
// begin hc_class := 21 ;
72842: LD_ADDR_OWVAR 28
72846: PUSH
72847: LD_INT 21
72849: ST_TO_ADDR
// hc_gallery :=  ;
72850: LD_ADDR_OWVAR 33
72854: PUSH
72855: LD_STRING 
72857: ST_TO_ADDR
// animal := CreateHuman ;
72858: LD_ADDR_VAR 0 12
72862: PUSH
72863: CALL_OW 44
72867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72868: LD_VAR 0 12
72872: PPUSH
72873: LD_VAR 0 8
72877: PPUSH
72878: LD_INT 0
72880: PPUSH
72881: CALL 74946 0 3
// end ;
72885: GO 72839
72887: POP
72888: POP
// if birds then
72889: LD_VAR 0 1
72893: IFFALSE 72960
// for i = 1 to birds do
72895: LD_ADDR_VAR 0 11
72899: PUSH
72900: DOUBLE
72901: LD_INT 1
72903: DEC
72904: ST_TO_ADDR
72905: LD_VAR 0 1
72909: PUSH
72910: FOR_TO
72911: IFFALSE 72958
// begin hc_class := 18 ;
72913: LD_ADDR_OWVAR 28
72917: PUSH
72918: LD_INT 18
72920: ST_TO_ADDR
// hc_gallery =  ;
72921: LD_ADDR_OWVAR 33
72925: PUSH
72926: LD_STRING 
72928: ST_TO_ADDR
// animal := CreateHuman ;
72929: LD_ADDR_VAR 0 12
72933: PUSH
72934: CALL_OW 44
72938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72939: LD_VAR 0 12
72943: PPUSH
72944: LD_VAR 0 8
72948: PPUSH
72949: LD_INT 0
72951: PPUSH
72952: CALL 74946 0 3
// end ;
72956: GO 72910
72958: POP
72959: POP
// if tigers then
72960: LD_VAR 0 2
72964: IFFALSE 73048
// for i = 1 to tigers do
72966: LD_ADDR_VAR 0 11
72970: PUSH
72971: DOUBLE
72972: LD_INT 1
72974: DEC
72975: ST_TO_ADDR
72976: LD_VAR 0 2
72980: PUSH
72981: FOR_TO
72982: IFFALSE 73046
// begin hc_class = class_tiger ;
72984: LD_ADDR_OWVAR 28
72988: PUSH
72989: LD_INT 14
72991: ST_TO_ADDR
// hc_gallery =  ;
72992: LD_ADDR_OWVAR 33
72996: PUSH
72997: LD_STRING 
72999: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73000: LD_ADDR_OWVAR 35
73004: PUSH
73005: LD_INT 7
73007: NEG
73008: PPUSH
73009: LD_INT 7
73011: PPUSH
73012: CALL_OW 12
73016: ST_TO_ADDR
// animal := CreateHuman ;
73017: LD_ADDR_VAR 0 12
73021: PUSH
73022: CALL_OW 44
73026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73027: LD_VAR 0 12
73031: PPUSH
73032: LD_VAR 0 8
73036: PPUSH
73037: LD_INT 0
73039: PPUSH
73040: CALL 74946 0 3
// end ;
73044: GO 72981
73046: POP
73047: POP
// if apemans then
73048: LD_VAR 0 3
73052: IFFALSE 73175
// for i = 1 to apemans do
73054: LD_ADDR_VAR 0 11
73058: PUSH
73059: DOUBLE
73060: LD_INT 1
73062: DEC
73063: ST_TO_ADDR
73064: LD_VAR 0 3
73068: PUSH
73069: FOR_TO
73070: IFFALSE 73173
// begin hc_class = class_apeman ;
73072: LD_ADDR_OWVAR 28
73076: PUSH
73077: LD_INT 12
73079: ST_TO_ADDR
// hc_gallery =  ;
73080: LD_ADDR_OWVAR 33
73084: PUSH
73085: LD_STRING 
73087: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73088: LD_ADDR_OWVAR 35
73092: PUSH
73093: LD_INT 2
73095: NEG
73096: PPUSH
73097: LD_INT 2
73099: PPUSH
73100: CALL_OW 12
73104: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73105: LD_ADDR_OWVAR 31
73109: PUSH
73110: LD_INT 1
73112: PPUSH
73113: LD_INT 3
73115: PPUSH
73116: CALL_OW 12
73120: PUSH
73121: LD_INT 1
73123: PPUSH
73124: LD_INT 3
73126: PPUSH
73127: CALL_OW 12
73131: PUSH
73132: LD_INT 0
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: ST_TO_ADDR
// animal := CreateHuman ;
73144: LD_ADDR_VAR 0 12
73148: PUSH
73149: CALL_OW 44
73153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73154: LD_VAR 0 12
73158: PPUSH
73159: LD_VAR 0 8
73163: PPUSH
73164: LD_INT 0
73166: PPUSH
73167: CALL 74946 0 3
// end ;
73171: GO 73069
73173: POP
73174: POP
// if enchidnas then
73175: LD_VAR 0 4
73179: IFFALSE 73246
// for i = 1 to enchidnas do
73181: LD_ADDR_VAR 0 11
73185: PUSH
73186: DOUBLE
73187: LD_INT 1
73189: DEC
73190: ST_TO_ADDR
73191: LD_VAR 0 4
73195: PUSH
73196: FOR_TO
73197: IFFALSE 73244
// begin hc_class = 13 ;
73199: LD_ADDR_OWVAR 28
73203: PUSH
73204: LD_INT 13
73206: ST_TO_ADDR
// hc_gallery =  ;
73207: LD_ADDR_OWVAR 33
73211: PUSH
73212: LD_STRING 
73214: ST_TO_ADDR
// animal := CreateHuman ;
73215: LD_ADDR_VAR 0 12
73219: PUSH
73220: CALL_OW 44
73224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73225: LD_VAR 0 12
73229: PPUSH
73230: LD_VAR 0 8
73234: PPUSH
73235: LD_INT 0
73237: PPUSH
73238: CALL 74946 0 3
// end ;
73242: GO 73196
73244: POP
73245: POP
// if fishes then
73246: LD_VAR 0 7
73250: IFFALSE 73317
// for i = 1 to fishes do
73252: LD_ADDR_VAR 0 11
73256: PUSH
73257: DOUBLE
73258: LD_INT 1
73260: DEC
73261: ST_TO_ADDR
73262: LD_VAR 0 7
73266: PUSH
73267: FOR_TO
73268: IFFALSE 73315
// begin hc_class = 20 ;
73270: LD_ADDR_OWVAR 28
73274: PUSH
73275: LD_INT 20
73277: ST_TO_ADDR
// hc_gallery =  ;
73278: LD_ADDR_OWVAR 33
73282: PUSH
73283: LD_STRING 
73285: ST_TO_ADDR
// animal := CreateHuman ;
73286: LD_ADDR_VAR 0 12
73290: PUSH
73291: CALL_OW 44
73295: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73296: LD_VAR 0 12
73300: PPUSH
73301: LD_VAR 0 9
73305: PPUSH
73306: LD_INT 0
73308: PPUSH
73309: CALL 74946 0 3
// end ;
73313: GO 73267
73315: POP
73316: POP
// end ;
73317: LD_VAR 0 10
73321: RET
// export function WantHeal ( sci , unit ) ; begin
73322: LD_INT 0
73324: PPUSH
// if GetTaskList ( sci ) > 0 then
73325: LD_VAR 0 1
73329: PPUSH
73330: CALL_OW 437
73334: PUSH
73335: LD_INT 0
73337: GREATER
73338: IFFALSE 73408
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73340: LD_VAR 0 1
73344: PPUSH
73345: CALL_OW 437
73349: PUSH
73350: LD_INT 1
73352: ARRAY
73353: PUSH
73354: LD_INT 1
73356: ARRAY
73357: PUSH
73358: LD_STRING l
73360: EQUAL
73361: PUSH
73362: LD_VAR 0 1
73366: PPUSH
73367: CALL_OW 437
73371: PUSH
73372: LD_INT 1
73374: ARRAY
73375: PUSH
73376: LD_INT 4
73378: ARRAY
73379: PUSH
73380: LD_VAR 0 2
73384: EQUAL
73385: AND
73386: IFFALSE 73398
// result := true else
73388: LD_ADDR_VAR 0 3
73392: PUSH
73393: LD_INT 1
73395: ST_TO_ADDR
73396: GO 73406
// result := false ;
73398: LD_ADDR_VAR 0 3
73402: PUSH
73403: LD_INT 0
73405: ST_TO_ADDR
// end else
73406: GO 73416
// result := false ;
73408: LD_ADDR_VAR 0 3
73412: PUSH
73413: LD_INT 0
73415: ST_TO_ADDR
// end ;
73416: LD_VAR 0 3
73420: RET
// export function HealTarget ( sci ) ; begin
73421: LD_INT 0
73423: PPUSH
// if not sci then
73424: LD_VAR 0 1
73428: NOT
73429: IFFALSE 73433
// exit ;
73431: GO 73498
// result := 0 ;
73433: LD_ADDR_VAR 0 2
73437: PUSH
73438: LD_INT 0
73440: ST_TO_ADDR
// if GetTaskList ( sci ) then
73441: LD_VAR 0 1
73445: PPUSH
73446: CALL_OW 437
73450: IFFALSE 73498
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73452: LD_VAR 0 1
73456: PPUSH
73457: CALL_OW 437
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PUSH
73466: LD_INT 1
73468: ARRAY
73469: PUSH
73470: LD_STRING l
73472: EQUAL
73473: IFFALSE 73498
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73475: LD_ADDR_VAR 0 2
73479: PUSH
73480: LD_VAR 0 1
73484: PPUSH
73485: CALL_OW 437
73489: PUSH
73490: LD_INT 1
73492: ARRAY
73493: PUSH
73494: LD_INT 4
73496: ARRAY
73497: ST_TO_ADDR
// end ;
73498: LD_VAR 0 2
73502: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73503: LD_INT 0
73505: PPUSH
73506: PPUSH
73507: PPUSH
73508: PPUSH
// if not base_units then
73509: LD_VAR 0 1
73513: NOT
73514: IFFALSE 73518
// exit ;
73516: GO 73605
// result := false ;
73518: LD_ADDR_VAR 0 2
73522: PUSH
73523: LD_INT 0
73525: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73526: LD_ADDR_VAR 0 5
73530: PUSH
73531: LD_VAR 0 1
73535: PPUSH
73536: LD_INT 21
73538: PUSH
73539: LD_INT 3
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PPUSH
73546: CALL_OW 72
73550: ST_TO_ADDR
// if not tmp then
73551: LD_VAR 0 5
73555: NOT
73556: IFFALSE 73560
// exit ;
73558: GO 73605
// for i in tmp do
73560: LD_ADDR_VAR 0 3
73564: PUSH
73565: LD_VAR 0 5
73569: PUSH
73570: FOR_IN
73571: IFFALSE 73603
// begin result := EnemyInRange ( i , 22 ) ;
73573: LD_ADDR_VAR 0 2
73577: PUSH
73578: LD_VAR 0 3
73582: PPUSH
73583: LD_INT 22
73585: PPUSH
73586: CALL 71183 0 2
73590: ST_TO_ADDR
// if result then
73591: LD_VAR 0 2
73595: IFFALSE 73601
// exit ;
73597: POP
73598: POP
73599: GO 73605
// end ;
73601: GO 73570
73603: POP
73604: POP
// end ;
73605: LD_VAR 0 2
73609: RET
// export function FilterByTag ( units , tag ) ; begin
73610: LD_INT 0
73612: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73613: LD_ADDR_VAR 0 3
73617: PUSH
73618: LD_VAR 0 1
73622: PPUSH
73623: LD_INT 120
73625: PUSH
73626: LD_VAR 0 2
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PPUSH
73635: CALL_OW 72
73639: ST_TO_ADDR
// end ;
73640: LD_VAR 0 3
73644: RET
// export function IsDriver ( un ) ; begin
73645: LD_INT 0
73647: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_VAR 0 1
73657: PUSH
73658: LD_INT 55
73660: PUSH
73661: EMPTY
73662: LIST
73663: PPUSH
73664: CALL_OW 69
73668: IN
73669: ST_TO_ADDR
// end ;
73670: LD_VAR 0 2
73674: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73675: LD_INT 0
73677: PPUSH
73678: PPUSH
// list := [ ] ;
73679: LD_ADDR_VAR 0 5
73683: PUSH
73684: EMPTY
73685: ST_TO_ADDR
// case d of 0 :
73686: LD_VAR 0 3
73690: PUSH
73691: LD_INT 0
73693: DOUBLE
73694: EQUAL
73695: IFTRUE 73699
73697: GO 73832
73699: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73700: LD_ADDR_VAR 0 5
73704: PUSH
73705: LD_VAR 0 1
73709: PUSH
73710: LD_INT 4
73712: MINUS
73713: PUSH
73714: LD_VAR 0 2
73718: PUSH
73719: LD_INT 4
73721: MINUS
73722: PUSH
73723: LD_INT 2
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: PUSH
73731: LD_VAR 0 1
73735: PUSH
73736: LD_INT 3
73738: MINUS
73739: PUSH
73740: LD_VAR 0 2
73744: PUSH
73745: LD_INT 1
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: LIST
73752: PUSH
73753: LD_VAR 0 1
73757: PUSH
73758: LD_INT 4
73760: PLUS
73761: PUSH
73762: LD_VAR 0 2
73766: PUSH
73767: LD_INT 4
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: LIST
73774: PUSH
73775: LD_VAR 0 1
73779: PUSH
73780: LD_INT 3
73782: PLUS
73783: PUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_INT 3
73791: PLUS
73792: PUSH
73793: LD_INT 5
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_VAR 0 1
73805: PUSH
73806: LD_VAR 0 2
73810: PUSH
73811: LD_INT 4
73813: PLUS
73814: PUSH
73815: LD_INT 0
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: ST_TO_ADDR
// end ; 1 :
73830: GO 74530
73832: LD_INT 1
73834: DOUBLE
73835: EQUAL
73836: IFTRUE 73840
73838: GO 73973
73840: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73841: LD_ADDR_VAR 0 5
73845: PUSH
73846: LD_VAR 0 1
73850: PUSH
73851: LD_VAR 0 2
73855: PUSH
73856: LD_INT 4
73858: MINUS
73859: PUSH
73860: LD_INT 3
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: LIST
73867: PUSH
73868: LD_VAR 0 1
73872: PUSH
73873: LD_INT 3
73875: MINUS
73876: PUSH
73877: LD_VAR 0 2
73881: PUSH
73882: LD_INT 3
73884: MINUS
73885: PUSH
73886: LD_INT 2
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: LIST
73893: PUSH
73894: LD_VAR 0 1
73898: PUSH
73899: LD_INT 4
73901: MINUS
73902: PUSH
73903: LD_VAR 0 2
73907: PUSH
73908: LD_INT 1
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: LIST
73915: PUSH
73916: LD_VAR 0 1
73920: PUSH
73921: LD_VAR 0 2
73925: PUSH
73926: LD_INT 3
73928: PLUS
73929: PUSH
73930: LD_INT 0
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: LIST
73937: PUSH
73938: LD_VAR 0 1
73942: PUSH
73943: LD_INT 4
73945: PLUS
73946: PUSH
73947: LD_VAR 0 2
73951: PUSH
73952: LD_INT 4
73954: PLUS
73955: PUSH
73956: LD_INT 5
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: LIST
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: ST_TO_ADDR
// end ; 2 :
73971: GO 74530
73973: LD_INT 2
73975: DOUBLE
73976: EQUAL
73977: IFTRUE 73981
73979: GO 74110
73981: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73982: LD_ADDR_VAR 0 5
73986: PUSH
73987: LD_VAR 0 1
73991: PUSH
73992: LD_VAR 0 2
73996: PUSH
73997: LD_INT 3
73999: MINUS
74000: PUSH
74001: LD_INT 3
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: LD_INT 4
74016: PLUS
74017: PUSH
74018: LD_VAR 0 2
74022: PUSH
74023: LD_INT 4
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_VAR 0 2
74040: PUSH
74041: LD_INT 4
74043: PLUS
74044: PUSH
74045: LD_INT 0
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: LIST
74052: PUSH
74053: LD_VAR 0 1
74057: PUSH
74058: LD_INT 3
74060: MINUS
74061: PUSH
74062: LD_VAR 0 2
74066: PUSH
74067: LD_INT 1
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: LIST
74074: PUSH
74075: LD_VAR 0 1
74079: PUSH
74080: LD_INT 4
74082: MINUS
74083: PUSH
74084: LD_VAR 0 2
74088: PUSH
74089: LD_INT 4
74091: MINUS
74092: PUSH
74093: LD_INT 2
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: ST_TO_ADDR
// end ; 3 :
74108: GO 74530
74110: LD_INT 3
74112: DOUBLE
74113: EQUAL
74114: IFTRUE 74118
74116: GO 74251
74118: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74119: LD_ADDR_VAR 0 5
74123: PUSH
74124: LD_VAR 0 1
74128: PUSH
74129: LD_INT 3
74131: PLUS
74132: PUSH
74133: LD_VAR 0 2
74137: PUSH
74138: LD_INT 4
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: LIST
74145: PUSH
74146: LD_VAR 0 1
74150: PUSH
74151: LD_INT 4
74153: PLUS
74154: PUSH
74155: LD_VAR 0 2
74159: PUSH
74160: LD_INT 4
74162: PLUS
74163: PUSH
74164: LD_INT 5
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: PUSH
74172: LD_VAR 0 1
74176: PUSH
74177: LD_INT 4
74179: MINUS
74180: PUSH
74181: LD_VAR 0 2
74185: PUSH
74186: LD_INT 1
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: LD_VAR 0 1
74198: PUSH
74199: LD_VAR 0 2
74203: PUSH
74204: LD_INT 4
74206: MINUS
74207: PUSH
74208: LD_INT 3
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: LIST
74215: PUSH
74216: LD_VAR 0 1
74220: PUSH
74221: LD_INT 3
74223: MINUS
74224: PUSH
74225: LD_VAR 0 2
74229: PUSH
74230: LD_INT 3
74232: MINUS
74233: PUSH
74234: LD_INT 2
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: ST_TO_ADDR
// end ; 4 :
74249: GO 74530
74251: LD_INT 4
74253: DOUBLE
74254: EQUAL
74255: IFTRUE 74259
74257: GO 74392
74259: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74260: LD_ADDR_VAR 0 5
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_VAR 0 2
74274: PUSH
74275: LD_INT 4
74277: PLUS
74278: PUSH
74279: LD_INT 0
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: LIST
74286: PUSH
74287: LD_VAR 0 1
74291: PUSH
74292: LD_INT 3
74294: PLUS
74295: PUSH
74296: LD_VAR 0 2
74300: PUSH
74301: LD_INT 3
74303: PLUS
74304: PUSH
74305: LD_INT 5
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: LIST
74312: PUSH
74313: LD_VAR 0 1
74317: PUSH
74318: LD_INT 4
74320: PLUS
74321: PUSH
74322: LD_VAR 0 2
74326: PUSH
74327: LD_INT 4
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: LD_VAR 0 1
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_INT 3
74347: MINUS
74348: PUSH
74349: LD_INT 3
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: LD_VAR 0 1
74361: PUSH
74362: LD_INT 4
74364: MINUS
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 4
74373: MINUS
74374: PUSH
74375: LD_INT 2
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: ST_TO_ADDR
// end ; 5 :
74390: GO 74530
74392: LD_INT 5
74394: DOUBLE
74395: EQUAL
74396: IFTRUE 74400
74398: GO 74529
74400: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74401: LD_ADDR_VAR 0 5
74405: PUSH
74406: LD_VAR 0 1
74410: PUSH
74411: LD_INT 4
74413: MINUS
74414: PUSH
74415: LD_VAR 0 2
74419: PUSH
74420: LD_INT 1
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: PUSH
74428: LD_VAR 0 1
74432: PUSH
74433: LD_VAR 0 2
74437: PUSH
74438: LD_INT 4
74440: MINUS
74441: PUSH
74442: LD_INT 3
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: LIST
74449: PUSH
74450: LD_VAR 0 1
74454: PUSH
74455: LD_INT 4
74457: PLUS
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_INT 4
74466: PLUS
74467: PUSH
74468: LD_INT 5
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: LIST
74475: PUSH
74476: LD_VAR 0 1
74480: PUSH
74481: LD_INT 3
74483: PLUS
74484: PUSH
74485: LD_VAR 0 2
74489: PUSH
74490: LD_INT 4
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: LD_VAR 0 1
74502: PUSH
74503: LD_VAR 0 2
74507: PUSH
74508: LD_INT 3
74510: PLUS
74511: PUSH
74512: LD_INT 0
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: LIST
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: ST_TO_ADDR
// end ; end ;
74527: GO 74530
74529: POP
// result := list ;
74530: LD_ADDR_VAR 0 4
74534: PUSH
74535: LD_VAR 0 5
74539: ST_TO_ADDR
// end ;
74540: LD_VAR 0 4
74544: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74545: LD_INT 0
74547: PPUSH
74548: PPUSH
74549: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74550: LD_VAR 0 1
74554: NOT
74555: PUSH
74556: LD_VAR 0 2
74560: PUSH
74561: LD_INT 1
74563: PUSH
74564: LD_INT 2
74566: PUSH
74567: LD_INT 3
74569: PUSH
74570: LD_INT 4
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: IN
74579: NOT
74580: OR
74581: IFFALSE 74585
// exit ;
74583: GO 74668
// tmp := [ ] ;
74585: LD_ADDR_VAR 0 5
74589: PUSH
74590: EMPTY
74591: ST_TO_ADDR
// for i in units do
74592: LD_ADDR_VAR 0 4
74596: PUSH
74597: LD_VAR 0 1
74601: PUSH
74602: FOR_IN
74603: IFFALSE 74637
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74605: LD_ADDR_VAR 0 5
74609: PUSH
74610: LD_VAR 0 5
74614: PPUSH
74615: LD_VAR 0 4
74619: PPUSH
74620: LD_VAR 0 2
74624: PPUSH
74625: CALL_OW 259
74629: PPUSH
74630: CALL 76041 0 2
74634: ST_TO_ADDR
74635: GO 74602
74637: POP
74638: POP
// if not tmp then
74639: LD_VAR 0 5
74643: NOT
74644: IFFALSE 74648
// exit ;
74646: GO 74668
// result := SortListByListDesc ( units , tmp ) ;
74648: LD_ADDR_VAR 0 3
74652: PUSH
74653: LD_VAR 0 1
74657: PPUSH
74658: LD_VAR 0 5
74662: PPUSH
74663: CALL_OW 77
74667: ST_TO_ADDR
// end ;
74668: LD_VAR 0 3
74672: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74673: LD_INT 0
74675: PPUSH
74676: PPUSH
74677: PPUSH
// result := false ;
74678: LD_ADDR_VAR 0 3
74682: PUSH
74683: LD_INT 0
74685: ST_TO_ADDR
// if not building then
74686: LD_VAR 0 2
74690: NOT
74691: IFFALSE 74695
// exit ;
74693: GO 74833
// x := GetX ( building ) ;
74695: LD_ADDR_VAR 0 4
74699: PUSH
74700: LD_VAR 0 2
74704: PPUSH
74705: CALL_OW 250
74709: ST_TO_ADDR
// y := GetY ( building ) ;
74710: LD_ADDR_VAR 0 5
74714: PUSH
74715: LD_VAR 0 2
74719: PPUSH
74720: CALL_OW 251
74724: ST_TO_ADDR
// if not x or not y then
74725: LD_VAR 0 4
74729: NOT
74730: PUSH
74731: LD_VAR 0 5
74735: NOT
74736: OR
74737: IFFALSE 74741
// exit ;
74739: GO 74833
// if GetTaskList ( unit ) then
74741: LD_VAR 0 1
74745: PPUSH
74746: CALL_OW 437
74750: IFFALSE 74833
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74752: LD_STRING e
74754: PUSH
74755: LD_VAR 0 1
74759: PPUSH
74760: CALL_OW 437
74764: PUSH
74765: LD_INT 1
74767: ARRAY
74768: PUSH
74769: LD_INT 1
74771: ARRAY
74772: EQUAL
74773: PUSH
74774: LD_VAR 0 4
74778: PUSH
74779: LD_VAR 0 1
74783: PPUSH
74784: CALL_OW 437
74788: PUSH
74789: LD_INT 1
74791: ARRAY
74792: PUSH
74793: LD_INT 2
74795: ARRAY
74796: EQUAL
74797: AND
74798: PUSH
74799: LD_VAR 0 5
74803: PUSH
74804: LD_VAR 0 1
74808: PPUSH
74809: CALL_OW 437
74813: PUSH
74814: LD_INT 1
74816: ARRAY
74817: PUSH
74818: LD_INT 3
74820: ARRAY
74821: EQUAL
74822: AND
74823: IFFALSE 74833
// result := true end ;
74825: LD_ADDR_VAR 0 3
74829: PUSH
74830: LD_INT 1
74832: ST_TO_ADDR
// end ;
74833: LD_VAR 0 3
74837: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74838: LD_INT 0
74840: PPUSH
// result := false ;
74841: LD_ADDR_VAR 0 4
74845: PUSH
74846: LD_INT 0
74848: ST_TO_ADDR
// if GetTaskList ( unit ) then
74849: LD_VAR 0 1
74853: PPUSH
74854: CALL_OW 437
74858: IFFALSE 74941
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74860: LD_STRING M
74862: PUSH
74863: LD_VAR 0 1
74867: PPUSH
74868: CALL_OW 437
74872: PUSH
74873: LD_INT 1
74875: ARRAY
74876: PUSH
74877: LD_INT 1
74879: ARRAY
74880: EQUAL
74881: PUSH
74882: LD_VAR 0 2
74886: PUSH
74887: LD_VAR 0 1
74891: PPUSH
74892: CALL_OW 437
74896: PUSH
74897: LD_INT 1
74899: ARRAY
74900: PUSH
74901: LD_INT 2
74903: ARRAY
74904: EQUAL
74905: AND
74906: PUSH
74907: LD_VAR 0 3
74911: PUSH
74912: LD_VAR 0 1
74916: PPUSH
74917: CALL_OW 437
74921: PUSH
74922: LD_INT 1
74924: ARRAY
74925: PUSH
74926: LD_INT 3
74928: ARRAY
74929: EQUAL
74930: AND
74931: IFFALSE 74941
// result := true ;
74933: LD_ADDR_VAR 0 4
74937: PUSH
74938: LD_INT 1
74940: ST_TO_ADDR
// end ; end ;
74941: LD_VAR 0 4
74945: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74946: LD_INT 0
74948: PPUSH
74949: PPUSH
74950: PPUSH
74951: PPUSH
// if not unit or not area then
74952: LD_VAR 0 1
74956: NOT
74957: PUSH
74958: LD_VAR 0 2
74962: NOT
74963: OR
74964: IFFALSE 74968
// exit ;
74966: GO 75144
// tmp := AreaToList ( area , i ) ;
74968: LD_ADDR_VAR 0 6
74972: PUSH
74973: LD_VAR 0 2
74977: PPUSH
74978: LD_VAR 0 5
74982: PPUSH
74983: CALL_OW 517
74987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74988: LD_ADDR_VAR 0 5
74992: PUSH
74993: DOUBLE
74994: LD_INT 1
74996: DEC
74997: ST_TO_ADDR
74998: LD_VAR 0 6
75002: PUSH
75003: LD_INT 1
75005: ARRAY
75006: PUSH
75007: FOR_TO
75008: IFFALSE 75142
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75010: LD_ADDR_VAR 0 7
75014: PUSH
75015: LD_VAR 0 6
75019: PUSH
75020: LD_INT 1
75022: ARRAY
75023: PUSH
75024: LD_VAR 0 5
75028: ARRAY
75029: PUSH
75030: LD_VAR 0 6
75034: PUSH
75035: LD_INT 2
75037: ARRAY
75038: PUSH
75039: LD_VAR 0 5
75043: ARRAY
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75049: LD_INT 92
75051: PUSH
75052: LD_VAR 0 7
75056: PUSH
75057: LD_INT 1
75059: ARRAY
75060: PUSH
75061: LD_VAR 0 7
75065: PUSH
75066: LD_INT 2
75068: ARRAY
75069: PUSH
75070: LD_INT 2
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: PPUSH
75079: CALL_OW 69
75083: PUSH
75084: LD_INT 0
75086: EQUAL
75087: IFFALSE 75140
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75089: LD_VAR 0 1
75093: PPUSH
75094: LD_VAR 0 7
75098: PUSH
75099: LD_INT 1
75101: ARRAY
75102: PPUSH
75103: LD_VAR 0 7
75107: PUSH
75108: LD_INT 2
75110: ARRAY
75111: PPUSH
75112: LD_VAR 0 3
75116: PPUSH
75117: CALL_OW 48
// result := IsPlaced ( unit ) ;
75121: LD_ADDR_VAR 0 4
75125: PUSH
75126: LD_VAR 0 1
75130: PPUSH
75131: CALL_OW 305
75135: ST_TO_ADDR
// exit ;
75136: POP
75137: POP
75138: GO 75144
// end ; end ;
75140: GO 75007
75142: POP
75143: POP
// end ;
75144: LD_VAR 0 4
75148: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75149: LD_INT 0
75151: PPUSH
75152: PPUSH
75153: PPUSH
// if not side or side > 8 then
75154: LD_VAR 0 1
75158: NOT
75159: PUSH
75160: LD_VAR 0 1
75164: PUSH
75165: LD_INT 8
75167: GREATER
75168: OR
75169: IFFALSE 75173
// exit ;
75171: GO 75360
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75173: LD_ADDR_VAR 0 4
75177: PUSH
75178: LD_INT 22
75180: PUSH
75181: LD_VAR 0 1
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 21
75192: PUSH
75193: LD_INT 3
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PPUSH
75204: CALL_OW 69
75208: ST_TO_ADDR
// if not tmp then
75209: LD_VAR 0 4
75213: NOT
75214: IFFALSE 75218
// exit ;
75216: GO 75360
// enable_addtolog := true ;
75218: LD_ADDR_OWVAR 81
75222: PUSH
75223: LD_INT 1
75225: ST_TO_ADDR
// AddToLog ( [ ) ;
75226: LD_STRING [
75228: PPUSH
75229: CALL_OW 561
// for i in tmp do
75233: LD_ADDR_VAR 0 3
75237: PUSH
75238: LD_VAR 0 4
75242: PUSH
75243: FOR_IN
75244: IFFALSE 75351
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75246: LD_STRING [
75248: PUSH
75249: LD_VAR 0 3
75253: PPUSH
75254: CALL_OW 266
75258: STR
75259: PUSH
75260: LD_STRING , 
75262: STR
75263: PUSH
75264: LD_VAR 0 3
75268: PPUSH
75269: CALL_OW 250
75273: STR
75274: PUSH
75275: LD_STRING , 
75277: STR
75278: PUSH
75279: LD_VAR 0 3
75283: PPUSH
75284: CALL_OW 251
75288: STR
75289: PUSH
75290: LD_STRING , 
75292: STR
75293: PUSH
75294: LD_VAR 0 3
75298: PPUSH
75299: CALL_OW 254
75303: STR
75304: PUSH
75305: LD_STRING , 
75307: STR
75308: PUSH
75309: LD_VAR 0 3
75313: PPUSH
75314: LD_INT 1
75316: PPUSH
75317: CALL_OW 268
75321: STR
75322: PUSH
75323: LD_STRING , 
75325: STR
75326: PUSH
75327: LD_VAR 0 3
75331: PPUSH
75332: LD_INT 2
75334: PPUSH
75335: CALL_OW 268
75339: STR
75340: PUSH
75341: LD_STRING ],
75343: STR
75344: PPUSH
75345: CALL_OW 561
// end ;
75349: GO 75243
75351: POP
75352: POP
// AddToLog ( ]; ) ;
75353: LD_STRING ];
75355: PPUSH
75356: CALL_OW 561
// end ;
75360: LD_VAR 0 2
75364: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75365: LD_INT 0
75367: PPUSH
75368: PPUSH
75369: PPUSH
75370: PPUSH
75371: PPUSH
// if not area or not rate or not max then
75372: LD_VAR 0 1
75376: NOT
75377: PUSH
75378: LD_VAR 0 2
75382: NOT
75383: OR
75384: PUSH
75385: LD_VAR 0 4
75389: NOT
75390: OR
75391: IFFALSE 75395
// exit ;
75393: GO 75584
// while 1 do
75395: LD_INT 1
75397: IFFALSE 75584
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75399: LD_ADDR_VAR 0 9
75403: PUSH
75404: LD_VAR 0 1
75408: PPUSH
75409: LD_INT 1
75411: PPUSH
75412: CALL_OW 287
75416: PUSH
75417: LD_INT 10
75419: MUL
75420: ST_TO_ADDR
// r := rate / 10 ;
75421: LD_ADDR_VAR 0 7
75425: PUSH
75426: LD_VAR 0 2
75430: PUSH
75431: LD_INT 10
75433: DIVREAL
75434: ST_TO_ADDR
// time := 1 1$00 ;
75435: LD_ADDR_VAR 0 8
75439: PUSH
75440: LD_INT 2100
75442: ST_TO_ADDR
// if amount < min then
75443: LD_VAR 0 9
75447: PUSH
75448: LD_VAR 0 3
75452: LESS
75453: IFFALSE 75471
// r := r * 2 else
75455: LD_ADDR_VAR 0 7
75459: PUSH
75460: LD_VAR 0 7
75464: PUSH
75465: LD_INT 2
75467: MUL
75468: ST_TO_ADDR
75469: GO 75497
// if amount > max then
75471: LD_VAR 0 9
75475: PUSH
75476: LD_VAR 0 4
75480: GREATER
75481: IFFALSE 75497
// r := r / 2 ;
75483: LD_ADDR_VAR 0 7
75487: PUSH
75488: LD_VAR 0 7
75492: PUSH
75493: LD_INT 2
75495: DIVREAL
75496: ST_TO_ADDR
// time := time / r ;
75497: LD_ADDR_VAR 0 8
75501: PUSH
75502: LD_VAR 0 8
75506: PUSH
75507: LD_VAR 0 7
75511: DIVREAL
75512: ST_TO_ADDR
// if time < 0 then
75513: LD_VAR 0 8
75517: PUSH
75518: LD_INT 0
75520: LESS
75521: IFFALSE 75538
// time := time * - 1 ;
75523: LD_ADDR_VAR 0 8
75527: PUSH
75528: LD_VAR 0 8
75532: PUSH
75533: LD_INT 1
75535: NEG
75536: MUL
75537: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75538: LD_VAR 0 8
75542: PUSH
75543: LD_INT 35
75545: PPUSH
75546: LD_INT 875
75548: PPUSH
75549: CALL_OW 12
75553: PLUS
75554: PPUSH
75555: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75559: LD_INT 1
75561: PPUSH
75562: LD_INT 5
75564: PPUSH
75565: CALL_OW 12
75569: PPUSH
75570: LD_VAR 0 1
75574: PPUSH
75575: LD_INT 1
75577: PPUSH
75578: CALL_OW 55
// end ;
75582: GO 75395
// end ;
75584: LD_VAR 0 5
75588: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75589: LD_INT 0
75591: PPUSH
75592: PPUSH
75593: PPUSH
75594: PPUSH
75595: PPUSH
75596: PPUSH
75597: PPUSH
75598: PPUSH
// if not turrets or not factories then
75599: LD_VAR 0 1
75603: NOT
75604: PUSH
75605: LD_VAR 0 2
75609: NOT
75610: OR
75611: IFFALSE 75615
// exit ;
75613: GO 75922
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75615: LD_ADDR_VAR 0 10
75619: PUSH
75620: LD_INT 5
75622: PUSH
75623: LD_INT 6
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: LD_INT 2
75632: PUSH
75633: LD_INT 4
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: LD_INT 3
75642: PUSH
75643: LD_INT 5
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 24
75657: PUSH
75658: LD_INT 25
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 23
75667: PUSH
75668: LD_INT 27
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 42
75681: PUSH
75682: LD_INT 43
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: LD_INT 44
75691: PUSH
75692: LD_INT 46
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: LD_INT 45
75701: PUSH
75702: LD_INT 47
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: EMPTY
75710: LIST
75711: LIST
75712: LIST
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: LIST
75718: ST_TO_ADDR
// result := [ ] ;
75719: LD_ADDR_VAR 0 3
75723: PUSH
75724: EMPTY
75725: ST_TO_ADDR
// for i in turrets do
75726: LD_ADDR_VAR 0 4
75730: PUSH
75731: LD_VAR 0 1
75735: PUSH
75736: FOR_IN
75737: IFFALSE 75920
// begin nat := GetNation ( i ) ;
75739: LD_ADDR_VAR 0 7
75743: PUSH
75744: LD_VAR 0 4
75748: PPUSH
75749: CALL_OW 248
75753: ST_TO_ADDR
// weapon := 0 ;
75754: LD_ADDR_VAR 0 8
75758: PUSH
75759: LD_INT 0
75761: ST_TO_ADDR
// if not nat then
75762: LD_VAR 0 7
75766: NOT
75767: IFFALSE 75771
// continue ;
75769: GO 75736
// for j in list [ nat ] do
75771: LD_ADDR_VAR 0 5
75775: PUSH
75776: LD_VAR 0 10
75780: PUSH
75781: LD_VAR 0 7
75785: ARRAY
75786: PUSH
75787: FOR_IN
75788: IFFALSE 75829
// if GetBWeapon ( i ) = j [ 1 ] then
75790: LD_VAR 0 4
75794: PPUSH
75795: CALL_OW 269
75799: PUSH
75800: LD_VAR 0 5
75804: PUSH
75805: LD_INT 1
75807: ARRAY
75808: EQUAL
75809: IFFALSE 75827
// begin weapon := j [ 2 ] ;
75811: LD_ADDR_VAR 0 8
75815: PUSH
75816: LD_VAR 0 5
75820: PUSH
75821: LD_INT 2
75823: ARRAY
75824: ST_TO_ADDR
// break ;
75825: GO 75829
// end ;
75827: GO 75787
75829: POP
75830: POP
// if not weapon then
75831: LD_VAR 0 8
75835: NOT
75836: IFFALSE 75840
// continue ;
75838: GO 75736
// for k in factories do
75840: LD_ADDR_VAR 0 6
75844: PUSH
75845: LD_VAR 0 2
75849: PUSH
75850: FOR_IN
75851: IFFALSE 75916
// begin weapons := AvailableWeaponList ( k ) ;
75853: LD_ADDR_VAR 0 9
75857: PUSH
75858: LD_VAR 0 6
75862: PPUSH
75863: CALL_OW 478
75867: ST_TO_ADDR
// if not weapons then
75868: LD_VAR 0 9
75872: NOT
75873: IFFALSE 75877
// continue ;
75875: GO 75850
// if weapon in weapons then
75877: LD_VAR 0 8
75881: PUSH
75882: LD_VAR 0 9
75886: IN
75887: IFFALSE 75914
// begin result := [ i , weapon ] ;
75889: LD_ADDR_VAR 0 3
75893: PUSH
75894: LD_VAR 0 4
75898: PUSH
75899: LD_VAR 0 8
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: ST_TO_ADDR
// exit ;
75908: POP
75909: POP
75910: POP
75911: POP
75912: GO 75922
// end ; end ;
75914: GO 75850
75916: POP
75917: POP
// end ;
75918: GO 75736
75920: POP
75921: POP
// end ;
75922: LD_VAR 0 3
75926: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75927: LD_INT 0
75929: PPUSH
// if not side or side > 8 then
75930: LD_VAR 0 3
75934: NOT
75935: PUSH
75936: LD_VAR 0 3
75940: PUSH
75941: LD_INT 8
75943: GREATER
75944: OR
75945: IFFALSE 75949
// exit ;
75947: GO 76008
// if not range then
75949: LD_VAR 0 4
75953: NOT
75954: IFFALSE 75965
// range := - 12 ;
75956: LD_ADDR_VAR 0 4
75960: PUSH
75961: LD_INT 12
75963: NEG
75964: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75965: LD_VAR 0 1
75969: PPUSH
75970: LD_VAR 0 2
75974: PPUSH
75975: LD_VAR 0 3
75979: PPUSH
75980: LD_VAR 0 4
75984: PPUSH
75985: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75989: LD_VAR 0 1
75993: PPUSH
75994: LD_VAR 0 2
75998: PPUSH
75999: LD_VAR 0 3
76003: PPUSH
76004: CALL_OW 331
// end ;
76008: LD_VAR 0 5
76012: RET
// export function Video ( mode ) ; begin
76013: LD_INT 0
76015: PPUSH
// ingame_video = mode ;
76016: LD_ADDR_OWVAR 52
76020: PUSH
76021: LD_VAR 0 1
76025: ST_TO_ADDR
// interface_hidden = mode ;
76026: LD_ADDR_OWVAR 54
76030: PUSH
76031: LD_VAR 0 1
76035: ST_TO_ADDR
// end ;
76036: LD_VAR 0 2
76040: RET
// export function Join ( array , element ) ; begin
76041: LD_INT 0
76043: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76044: LD_ADDR_VAR 0 3
76048: PUSH
76049: LD_VAR 0 1
76053: PPUSH
76054: LD_VAR 0 1
76058: PUSH
76059: LD_INT 1
76061: PLUS
76062: PPUSH
76063: LD_VAR 0 2
76067: PPUSH
76068: CALL_OW 1
76072: ST_TO_ADDR
// end ;
76073: LD_VAR 0 3
76077: RET
// export function JoinUnion ( array , element ) ; begin
76078: LD_INT 0
76080: PPUSH
// result := array union element ;
76081: LD_ADDR_VAR 0 3
76085: PUSH
76086: LD_VAR 0 1
76090: PUSH
76091: LD_VAR 0 2
76095: UNION
76096: ST_TO_ADDR
// end ;
76097: LD_VAR 0 3
76101: RET
// export function GetBehemoths ( side ) ; begin
76102: LD_INT 0
76104: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76105: LD_ADDR_VAR 0 2
76109: PUSH
76110: LD_INT 22
76112: PUSH
76113: LD_VAR 0 1
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: PUSH
76122: LD_INT 31
76124: PUSH
76125: LD_INT 25
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PPUSH
76136: CALL_OW 69
76140: ST_TO_ADDR
// end ;
76141: LD_VAR 0 2
76145: RET
// export function Shuffle ( array ) ; var i , index ; begin
76146: LD_INT 0
76148: PPUSH
76149: PPUSH
76150: PPUSH
// result := [ ] ;
76151: LD_ADDR_VAR 0 2
76155: PUSH
76156: EMPTY
76157: ST_TO_ADDR
// if not array then
76158: LD_VAR 0 1
76162: NOT
76163: IFFALSE 76167
// exit ;
76165: GO 76266
// Randomize ;
76167: CALL_OW 10
// for i = array downto 1 do
76171: LD_ADDR_VAR 0 3
76175: PUSH
76176: DOUBLE
76177: LD_VAR 0 1
76181: INC
76182: ST_TO_ADDR
76183: LD_INT 1
76185: PUSH
76186: FOR_DOWNTO
76187: IFFALSE 76264
// begin index := rand ( 1 , array ) ;
76189: LD_ADDR_VAR 0 4
76193: PUSH
76194: LD_INT 1
76196: PPUSH
76197: LD_VAR 0 1
76201: PPUSH
76202: CALL_OW 12
76206: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76207: LD_ADDR_VAR 0 2
76211: PUSH
76212: LD_VAR 0 2
76216: PPUSH
76217: LD_VAR 0 2
76221: PUSH
76222: LD_INT 1
76224: PLUS
76225: PPUSH
76226: LD_VAR 0 1
76230: PUSH
76231: LD_VAR 0 4
76235: ARRAY
76236: PPUSH
76237: CALL_OW 2
76241: ST_TO_ADDR
// array := Delete ( array , index ) ;
76242: LD_ADDR_VAR 0 1
76246: PUSH
76247: LD_VAR 0 1
76251: PPUSH
76252: LD_VAR 0 4
76256: PPUSH
76257: CALL_OW 3
76261: ST_TO_ADDR
// end ;
76262: GO 76186
76264: POP
76265: POP
// end ;
76266: LD_VAR 0 2
76270: RET
// export function GetBaseMaterials ( base ) ; begin
76271: LD_INT 0
76273: PPUSH
// result := [ 0 , 0 , 0 ] ;
76274: LD_ADDR_VAR 0 2
76278: PUSH
76279: LD_INT 0
76281: PUSH
76282: LD_INT 0
76284: PUSH
76285: LD_INT 0
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: ST_TO_ADDR
// if not base then
76293: LD_VAR 0 1
76297: NOT
76298: IFFALSE 76302
// exit ;
76300: GO 76351
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76302: LD_ADDR_VAR 0 2
76306: PUSH
76307: LD_VAR 0 1
76311: PPUSH
76312: LD_INT 1
76314: PPUSH
76315: CALL_OW 275
76319: PUSH
76320: LD_VAR 0 1
76324: PPUSH
76325: LD_INT 2
76327: PPUSH
76328: CALL_OW 275
76332: PUSH
76333: LD_VAR 0 1
76337: PPUSH
76338: LD_INT 3
76340: PPUSH
76341: CALL_OW 275
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: LIST
76350: ST_TO_ADDR
// end ;
76351: LD_VAR 0 2
76355: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76356: LD_INT 0
76358: PPUSH
76359: PPUSH
// result := array ;
76360: LD_ADDR_VAR 0 3
76364: PUSH
76365: LD_VAR 0 1
76369: ST_TO_ADDR
// if size >= result then
76370: LD_VAR 0 2
76374: PUSH
76375: LD_VAR 0 3
76379: GREATEREQUAL
76380: IFFALSE 76384
// exit ;
76382: GO 76434
// if size then
76384: LD_VAR 0 2
76388: IFFALSE 76434
// for i := array downto size do
76390: LD_ADDR_VAR 0 4
76394: PUSH
76395: DOUBLE
76396: LD_VAR 0 1
76400: INC
76401: ST_TO_ADDR
76402: LD_VAR 0 2
76406: PUSH
76407: FOR_DOWNTO
76408: IFFALSE 76432
// result := Delete ( result , result ) ;
76410: LD_ADDR_VAR 0 3
76414: PUSH
76415: LD_VAR 0 3
76419: PPUSH
76420: LD_VAR 0 3
76424: PPUSH
76425: CALL_OW 3
76429: ST_TO_ADDR
76430: GO 76407
76432: POP
76433: POP
// end ;
76434: LD_VAR 0 3
76438: RET
// export function ComExit ( unit ) ; var tmp ; begin
76439: LD_INT 0
76441: PPUSH
76442: PPUSH
// if not IsInUnit ( unit ) then
76443: LD_VAR 0 1
76447: PPUSH
76448: CALL_OW 310
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76517
// tmp := IsInUnit ( unit ) ;
76457: LD_ADDR_VAR 0 3
76461: PUSH
76462: LD_VAR 0 1
76466: PPUSH
76467: CALL_OW 310
76471: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76472: LD_VAR 0 3
76476: PPUSH
76477: CALL_OW 247
76481: PUSH
76482: LD_INT 2
76484: EQUAL
76485: IFFALSE 76498
// ComExitVehicle ( unit ) else
76487: LD_VAR 0 1
76491: PPUSH
76492: CALL_OW 121
76496: GO 76507
// ComExitBuilding ( unit ) ;
76498: LD_VAR 0 1
76502: PPUSH
76503: CALL_OW 122
// result := tmp ;
76507: LD_ADDR_VAR 0 2
76511: PUSH
76512: LD_VAR 0 3
76516: ST_TO_ADDR
// end ;
76517: LD_VAR 0 2
76521: RET
// export function ComExitAll ( units ) ; var i ; begin
76522: LD_INT 0
76524: PPUSH
76525: PPUSH
// if not units then
76526: LD_VAR 0 1
76530: NOT
76531: IFFALSE 76535
// exit ;
76533: GO 76561
// for i in units do
76535: LD_ADDR_VAR 0 3
76539: PUSH
76540: LD_VAR 0 1
76544: PUSH
76545: FOR_IN
76546: IFFALSE 76559
// ComExit ( i ) ;
76548: LD_VAR 0 3
76552: PPUSH
76553: CALL 76439 0 1
76557: GO 76545
76559: POP
76560: POP
// end ;
76561: LD_VAR 0 2
76565: RET
// export function ResetHc ; begin
76566: LD_INT 0
76568: PPUSH
// InitHc ;
76569: CALL_OW 19
// hc_importance := 0 ;
76573: LD_ADDR_OWVAR 32
76577: PUSH
76578: LD_INT 0
76580: ST_TO_ADDR
// end ;
76581: LD_VAR 0 1
76585: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76586: LD_INT 0
76588: PPUSH
76589: PPUSH
76590: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76591: LD_ADDR_VAR 0 6
76595: PUSH
76596: LD_VAR 0 1
76600: PUSH
76601: LD_VAR 0 3
76605: PLUS
76606: PUSH
76607: LD_INT 2
76609: DIV
76610: ST_TO_ADDR
// if _x < 0 then
76611: LD_VAR 0 6
76615: PUSH
76616: LD_INT 0
76618: LESS
76619: IFFALSE 76636
// _x := _x * - 1 ;
76621: LD_ADDR_VAR 0 6
76625: PUSH
76626: LD_VAR 0 6
76630: PUSH
76631: LD_INT 1
76633: NEG
76634: MUL
76635: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76636: LD_ADDR_VAR 0 7
76640: PUSH
76641: LD_VAR 0 2
76645: PUSH
76646: LD_VAR 0 4
76650: PLUS
76651: PUSH
76652: LD_INT 2
76654: DIV
76655: ST_TO_ADDR
// if _y < 0 then
76656: LD_VAR 0 7
76660: PUSH
76661: LD_INT 0
76663: LESS
76664: IFFALSE 76681
// _y := _y * - 1 ;
76666: LD_ADDR_VAR 0 7
76670: PUSH
76671: LD_VAR 0 7
76675: PUSH
76676: LD_INT 1
76678: NEG
76679: MUL
76680: ST_TO_ADDR
// result := [ _x , _y ] ;
76681: LD_ADDR_VAR 0 5
76685: PUSH
76686: LD_VAR 0 6
76690: PUSH
76691: LD_VAR 0 7
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: ST_TO_ADDR
// end ;
76700: LD_VAR 0 5
76704: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76705: LD_INT 0
76707: PPUSH
76708: PPUSH
76709: PPUSH
76710: PPUSH
// task := GetTaskList ( unit ) ;
76711: LD_ADDR_VAR 0 7
76715: PUSH
76716: LD_VAR 0 1
76720: PPUSH
76721: CALL_OW 437
76725: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76726: LD_VAR 0 7
76730: NOT
76731: PUSH
76732: LD_VAR 0 1
76736: PPUSH
76737: LD_VAR 0 2
76741: PPUSH
76742: CALL_OW 308
76746: NOT
76747: AND
76748: IFFALSE 76752
// exit ;
76750: GO 76870
// if IsInArea ( unit , area ) then
76752: LD_VAR 0 1
76756: PPUSH
76757: LD_VAR 0 2
76761: PPUSH
76762: CALL_OW 308
76766: IFFALSE 76784
// begin ComMoveToArea ( unit , goAway ) ;
76768: LD_VAR 0 1
76772: PPUSH
76773: LD_VAR 0 3
76777: PPUSH
76778: CALL_OW 113
// exit ;
76782: GO 76870
// end ; if task [ 1 ] [ 1 ] <> M then
76784: LD_VAR 0 7
76788: PUSH
76789: LD_INT 1
76791: ARRAY
76792: PUSH
76793: LD_INT 1
76795: ARRAY
76796: PUSH
76797: LD_STRING M
76799: NONEQUAL
76800: IFFALSE 76804
// exit ;
76802: GO 76870
// x := task [ 1 ] [ 2 ] ;
76804: LD_ADDR_VAR 0 5
76808: PUSH
76809: LD_VAR 0 7
76813: PUSH
76814: LD_INT 1
76816: ARRAY
76817: PUSH
76818: LD_INT 2
76820: ARRAY
76821: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76822: LD_ADDR_VAR 0 6
76826: PUSH
76827: LD_VAR 0 7
76831: PUSH
76832: LD_INT 1
76834: ARRAY
76835: PUSH
76836: LD_INT 3
76838: ARRAY
76839: ST_TO_ADDR
// if InArea ( x , y , area ) then
76840: LD_VAR 0 5
76844: PPUSH
76845: LD_VAR 0 6
76849: PPUSH
76850: LD_VAR 0 2
76854: PPUSH
76855: CALL_OW 309
76859: IFFALSE 76870
// ComStop ( unit ) ;
76861: LD_VAR 0 1
76865: PPUSH
76866: CALL_OW 141
// end ;
76870: LD_VAR 0 4
76874: RET
// export function Abs ( value ) ; begin
76875: LD_INT 0
76877: PPUSH
// result := value ;
76878: LD_ADDR_VAR 0 2
76882: PUSH
76883: LD_VAR 0 1
76887: ST_TO_ADDR
// if value < 0 then
76888: LD_VAR 0 1
76892: PUSH
76893: LD_INT 0
76895: LESS
76896: IFFALSE 76913
// result := value * - 1 ;
76898: LD_ADDR_VAR 0 2
76902: PUSH
76903: LD_VAR 0 1
76907: PUSH
76908: LD_INT 1
76910: NEG
76911: MUL
76912: ST_TO_ADDR
// end ;
76913: LD_VAR 0 2
76917: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76918: LD_INT 0
76920: PPUSH
76921: PPUSH
76922: PPUSH
76923: PPUSH
76924: PPUSH
76925: PPUSH
76926: PPUSH
76927: PPUSH
// if not unit or not building then
76928: LD_VAR 0 1
76932: NOT
76933: PUSH
76934: LD_VAR 0 2
76938: NOT
76939: OR
76940: IFFALSE 76944
// exit ;
76942: GO 77170
// x := GetX ( building ) ;
76944: LD_ADDR_VAR 0 4
76948: PUSH
76949: LD_VAR 0 2
76953: PPUSH
76954: CALL_OW 250
76958: ST_TO_ADDR
// y := GetY ( building ) ;
76959: LD_ADDR_VAR 0 6
76963: PUSH
76964: LD_VAR 0 2
76968: PPUSH
76969: CALL_OW 251
76973: ST_TO_ADDR
// d := GetDir ( building ) ;
76974: LD_ADDR_VAR 0 8
76978: PUSH
76979: LD_VAR 0 2
76983: PPUSH
76984: CALL_OW 254
76988: ST_TO_ADDR
// r := 4 ;
76989: LD_ADDR_VAR 0 9
76993: PUSH
76994: LD_INT 4
76996: ST_TO_ADDR
// for i := 1 to 5 do
76997: LD_ADDR_VAR 0 10
77001: PUSH
77002: DOUBLE
77003: LD_INT 1
77005: DEC
77006: ST_TO_ADDR
77007: LD_INT 5
77009: PUSH
77010: FOR_TO
77011: IFFALSE 77168
// begin _x := ShiftX ( x , d , r + i ) ;
77013: LD_ADDR_VAR 0 5
77017: PUSH
77018: LD_VAR 0 4
77022: PPUSH
77023: LD_VAR 0 8
77027: PPUSH
77028: LD_VAR 0 9
77032: PUSH
77033: LD_VAR 0 10
77037: PLUS
77038: PPUSH
77039: CALL_OW 272
77043: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77044: LD_ADDR_VAR 0 7
77048: PUSH
77049: LD_VAR 0 6
77053: PPUSH
77054: LD_VAR 0 8
77058: PPUSH
77059: LD_VAR 0 9
77063: PUSH
77064: LD_VAR 0 10
77068: PLUS
77069: PPUSH
77070: CALL_OW 273
77074: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77075: LD_VAR 0 5
77079: PPUSH
77080: LD_VAR 0 7
77084: PPUSH
77085: CALL_OW 488
77089: PUSH
77090: LD_VAR 0 5
77094: PPUSH
77095: LD_VAR 0 7
77099: PPUSH
77100: CALL_OW 428
77104: PPUSH
77105: CALL_OW 247
77109: PUSH
77110: LD_INT 3
77112: PUSH
77113: LD_INT 2
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: IN
77120: NOT
77121: AND
77122: IFFALSE 77166
// begin ComMoveXY ( unit , _x , _y ) ;
77124: LD_VAR 0 1
77128: PPUSH
77129: LD_VAR 0 5
77133: PPUSH
77134: LD_VAR 0 7
77138: PPUSH
77139: CALL_OW 111
// result := [ _x , _y ] ;
77143: LD_ADDR_VAR 0 3
77147: PUSH
77148: LD_VAR 0 5
77152: PUSH
77153: LD_VAR 0 7
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: ST_TO_ADDR
// exit ;
77162: POP
77163: POP
77164: GO 77170
// end ; end ;
77166: GO 77010
77168: POP
77169: POP
// end ;
77170: LD_VAR 0 3
77174: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77175: LD_INT 0
77177: PPUSH
77178: PPUSH
77179: PPUSH
// result := 0 ;
77180: LD_ADDR_VAR 0 3
77184: PUSH
77185: LD_INT 0
77187: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77188: LD_VAR 0 1
77192: PUSH
77193: LD_INT 0
77195: LESS
77196: PUSH
77197: LD_VAR 0 1
77201: PUSH
77202: LD_INT 8
77204: GREATER
77205: OR
77206: PUSH
77207: LD_VAR 0 2
77211: PUSH
77212: LD_INT 0
77214: LESS
77215: OR
77216: PUSH
77217: LD_VAR 0 2
77221: PUSH
77222: LD_INT 8
77224: GREATER
77225: OR
77226: IFFALSE 77230
// exit ;
77228: GO 77305
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77230: LD_ADDR_VAR 0 4
77234: PUSH
77235: LD_INT 22
77237: PUSH
77238: LD_VAR 0 2
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PPUSH
77247: CALL_OW 69
77251: PUSH
77252: FOR_IN
77253: IFFALSE 77303
// begin un := UnitShoot ( i ) ;
77255: LD_ADDR_VAR 0 5
77259: PUSH
77260: LD_VAR 0 4
77264: PPUSH
77265: CALL_OW 504
77269: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77270: LD_VAR 0 5
77274: PPUSH
77275: CALL_OW 255
77279: PUSH
77280: LD_VAR 0 1
77284: EQUAL
77285: IFFALSE 77301
// begin result := un ;
77287: LD_ADDR_VAR 0 3
77291: PUSH
77292: LD_VAR 0 5
77296: ST_TO_ADDR
// exit ;
77297: POP
77298: POP
77299: GO 77305
// end ; end ;
77301: GO 77252
77303: POP
77304: POP
// end ;
77305: LD_VAR 0 3
77309: RET
// export function GetCargoBay ( units ) ; begin
77310: LD_INT 0
77312: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77313: LD_ADDR_VAR 0 2
77317: PUSH
77318: LD_VAR 0 1
77322: PPUSH
77323: LD_INT 2
77325: PUSH
77326: LD_INT 34
77328: PUSH
77329: LD_INT 12
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PUSH
77336: LD_INT 34
77338: PUSH
77339: LD_INT 51
77341: PUSH
77342: EMPTY
77343: LIST
77344: LIST
77345: PUSH
77346: LD_INT 34
77348: PUSH
77349: LD_INT 32
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: PUSH
77356: LD_INT 34
77358: PUSH
77359: LD_INT 89
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: LIST
77372: PPUSH
77373: CALL_OW 72
77377: ST_TO_ADDR
// end ;
77378: LD_VAR 0 2
77382: RET
// export function Negate ( value ) ; begin
77383: LD_INT 0
77385: PPUSH
// result := not value ;
77386: LD_ADDR_VAR 0 2
77390: PUSH
77391: LD_VAR 0 1
77395: NOT
77396: ST_TO_ADDR
// end ;
77397: LD_VAR 0 2
77401: RET
// export function Inc ( value ) ; begin
77402: LD_INT 0
77404: PPUSH
// result := value + 1 ;
77405: LD_ADDR_VAR 0 2
77409: PUSH
77410: LD_VAR 0 1
77414: PUSH
77415: LD_INT 1
77417: PLUS
77418: ST_TO_ADDR
// end ;
77419: LD_VAR 0 2
77423: RET
// export function Dec ( value ) ; begin
77424: LD_INT 0
77426: PPUSH
// result := value - 1 ;
77427: LD_ADDR_VAR 0 2
77431: PUSH
77432: LD_VAR 0 1
77436: PUSH
77437: LD_INT 1
77439: MINUS
77440: ST_TO_ADDR
// end ;
77441: LD_VAR 0 2
77445: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77446: LD_INT 0
77448: PPUSH
77449: PPUSH
77450: PPUSH
77451: PPUSH
77452: PPUSH
77453: PPUSH
77454: PPUSH
77455: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77456: LD_VAR 0 1
77460: PPUSH
77461: LD_VAR 0 2
77465: PPUSH
77466: CALL_OW 488
77470: NOT
77471: PUSH
77472: LD_VAR 0 3
77476: PPUSH
77477: LD_VAR 0 4
77481: PPUSH
77482: CALL_OW 488
77486: NOT
77487: OR
77488: IFFALSE 77501
// begin result := - 1 ;
77490: LD_ADDR_VAR 0 5
77494: PUSH
77495: LD_INT 1
77497: NEG
77498: ST_TO_ADDR
// exit ;
77499: GO 77736
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77501: LD_ADDR_VAR 0 12
77505: PUSH
77506: LD_VAR 0 1
77510: PPUSH
77511: LD_VAR 0 2
77515: PPUSH
77516: LD_VAR 0 3
77520: PPUSH
77521: LD_VAR 0 4
77525: PPUSH
77526: CALL 76586 0 4
77530: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77531: LD_ADDR_VAR 0 11
77535: PUSH
77536: LD_VAR 0 1
77540: PPUSH
77541: LD_VAR 0 2
77545: PPUSH
77546: LD_VAR 0 12
77550: PUSH
77551: LD_INT 1
77553: ARRAY
77554: PPUSH
77555: LD_VAR 0 12
77559: PUSH
77560: LD_INT 2
77562: ARRAY
77563: PPUSH
77564: CALL_OW 298
77568: ST_TO_ADDR
// distance := 9999 ;
77569: LD_ADDR_VAR 0 10
77573: PUSH
77574: LD_INT 9999
77576: ST_TO_ADDR
// for i := 0 to 5 do
77577: LD_ADDR_VAR 0 6
77581: PUSH
77582: DOUBLE
77583: LD_INT 0
77585: DEC
77586: ST_TO_ADDR
77587: LD_INT 5
77589: PUSH
77590: FOR_TO
77591: IFFALSE 77734
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77593: LD_ADDR_VAR 0 7
77597: PUSH
77598: LD_VAR 0 1
77602: PPUSH
77603: LD_VAR 0 6
77607: PPUSH
77608: LD_VAR 0 11
77612: PPUSH
77613: CALL_OW 272
77617: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77618: LD_ADDR_VAR 0 8
77622: PUSH
77623: LD_VAR 0 2
77627: PPUSH
77628: LD_VAR 0 6
77632: PPUSH
77633: LD_VAR 0 11
77637: PPUSH
77638: CALL_OW 273
77642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77643: LD_VAR 0 7
77647: PPUSH
77648: LD_VAR 0 8
77652: PPUSH
77653: CALL_OW 488
77657: NOT
77658: IFFALSE 77662
// continue ;
77660: GO 77590
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77662: LD_ADDR_VAR 0 9
77666: PUSH
77667: LD_VAR 0 12
77671: PUSH
77672: LD_INT 1
77674: ARRAY
77675: PPUSH
77676: LD_VAR 0 12
77680: PUSH
77681: LD_INT 2
77683: ARRAY
77684: PPUSH
77685: LD_VAR 0 7
77689: PPUSH
77690: LD_VAR 0 8
77694: PPUSH
77695: CALL_OW 298
77699: ST_TO_ADDR
// if tmp < distance then
77700: LD_VAR 0 9
77704: PUSH
77705: LD_VAR 0 10
77709: LESS
77710: IFFALSE 77732
// begin result := i ;
77712: LD_ADDR_VAR 0 5
77716: PUSH
77717: LD_VAR 0 6
77721: ST_TO_ADDR
// distance := tmp ;
77722: LD_ADDR_VAR 0 10
77726: PUSH
77727: LD_VAR 0 9
77731: ST_TO_ADDR
// end ; end ;
77732: GO 77590
77734: POP
77735: POP
// end ;
77736: LD_VAR 0 5
77740: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77741: LD_INT 0
77743: PPUSH
77744: PPUSH
// if not driver or not IsInUnit ( driver ) then
77745: LD_VAR 0 1
77749: NOT
77750: PUSH
77751: LD_VAR 0 1
77755: PPUSH
77756: CALL_OW 310
77760: NOT
77761: OR
77762: IFFALSE 77766
// exit ;
77764: GO 77856
// vehicle := IsInUnit ( driver ) ;
77766: LD_ADDR_VAR 0 3
77770: PUSH
77771: LD_VAR 0 1
77775: PPUSH
77776: CALL_OW 310
77780: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77781: LD_VAR 0 1
77785: PPUSH
77786: LD_STRING \
77788: PUSH
77789: LD_INT 0
77791: PUSH
77792: LD_INT 0
77794: PUSH
77795: LD_INT 0
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: LD_INT 0
77803: PUSH
77804: LD_INT 0
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: PUSH
77816: LD_STRING E
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: LD_INT 0
77824: PUSH
77825: LD_VAR 0 3
77829: PUSH
77830: LD_INT 0
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: LD_INT 0
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PPUSH
77852: CALL_OW 446
// end ;
77856: LD_VAR 0 2
77860: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77861: LD_INT 0
77863: PPUSH
77864: PPUSH
// if not driver or not IsInUnit ( driver ) then
77865: LD_VAR 0 1
77869: NOT
77870: PUSH
77871: LD_VAR 0 1
77875: PPUSH
77876: CALL_OW 310
77880: NOT
77881: OR
77882: IFFALSE 77886
// exit ;
77884: GO 77976
// vehicle := IsInUnit ( driver ) ;
77886: LD_ADDR_VAR 0 3
77890: PUSH
77891: LD_VAR 0 1
77895: PPUSH
77896: CALL_OW 310
77900: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77901: LD_VAR 0 1
77905: PPUSH
77906: LD_STRING \
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: LD_INT 0
77914: PUSH
77915: LD_INT 0
77917: PUSH
77918: LD_INT 0
77920: PUSH
77921: LD_INT 0
77923: PUSH
77924: LD_INT 0
77926: PUSH
77927: EMPTY
77928: LIST
77929: LIST
77930: LIST
77931: LIST
77932: LIST
77933: LIST
77934: LIST
77935: PUSH
77936: LD_STRING E
77938: PUSH
77939: LD_INT 0
77941: PUSH
77942: LD_INT 0
77944: PUSH
77945: LD_VAR 0 3
77949: PUSH
77950: LD_INT 0
77952: PUSH
77953: LD_INT 0
77955: PUSH
77956: LD_INT 0
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PPUSH
77972: CALL_OW 447
// end ;
77976: LD_VAR 0 2
77980: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77981: LD_INT 0
77983: PPUSH
77984: PPUSH
77985: PPUSH
// tmp := [ ] ;
77986: LD_ADDR_VAR 0 5
77990: PUSH
77991: EMPTY
77992: ST_TO_ADDR
// for i in units do
77993: LD_ADDR_VAR 0 4
77997: PUSH
77998: LD_VAR 0 1
78002: PUSH
78003: FOR_IN
78004: IFFALSE 78042
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78006: LD_ADDR_VAR 0 5
78010: PUSH
78011: LD_VAR 0 5
78015: PPUSH
78016: LD_VAR 0 5
78020: PUSH
78021: LD_INT 1
78023: PLUS
78024: PPUSH
78025: LD_VAR 0 4
78029: PPUSH
78030: CALL_OW 256
78034: PPUSH
78035: CALL_OW 2
78039: ST_TO_ADDR
78040: GO 78003
78042: POP
78043: POP
// if not tmp then
78044: LD_VAR 0 5
78048: NOT
78049: IFFALSE 78053
// exit ;
78051: GO 78101
// if asc then
78053: LD_VAR 0 2
78057: IFFALSE 78081
// result := SortListByListAsc ( units , tmp ) else
78059: LD_ADDR_VAR 0 3
78063: PUSH
78064: LD_VAR 0 1
78068: PPUSH
78069: LD_VAR 0 5
78073: PPUSH
78074: CALL_OW 76
78078: ST_TO_ADDR
78079: GO 78101
// result := SortListByListDesc ( units , tmp ) ;
78081: LD_ADDR_VAR 0 3
78085: PUSH
78086: LD_VAR 0 1
78090: PPUSH
78091: LD_VAR 0 5
78095: PPUSH
78096: CALL_OW 77
78100: ST_TO_ADDR
// end ;
78101: LD_VAR 0 3
78105: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78106: LD_INT 0
78108: PPUSH
78109: PPUSH
// task := GetTaskList ( mech ) ;
78110: LD_ADDR_VAR 0 4
78114: PUSH
78115: LD_VAR 0 1
78119: PPUSH
78120: CALL_OW 437
78124: ST_TO_ADDR
// if not task then
78125: LD_VAR 0 4
78129: NOT
78130: IFFALSE 78134
// exit ;
78132: GO 78176
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78134: LD_ADDR_VAR 0 3
78138: PUSH
78139: LD_VAR 0 4
78143: PUSH
78144: LD_INT 1
78146: ARRAY
78147: PUSH
78148: LD_INT 1
78150: ARRAY
78151: PUSH
78152: LD_STRING r
78154: EQUAL
78155: PUSH
78156: LD_VAR 0 4
78160: PUSH
78161: LD_INT 1
78163: ARRAY
78164: PUSH
78165: LD_INT 4
78167: ARRAY
78168: PUSH
78169: LD_VAR 0 2
78173: EQUAL
78174: AND
78175: ST_TO_ADDR
// end ;
78176: LD_VAR 0 3
78180: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78181: LD_INT 0
78183: PPUSH
// SetDir ( unit , d ) ;
78184: LD_VAR 0 1
78188: PPUSH
78189: LD_VAR 0 4
78193: PPUSH
78194: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78198: LD_ADDR_VAR 0 6
78202: PUSH
78203: LD_VAR 0 1
78207: PPUSH
78208: LD_VAR 0 2
78212: PPUSH
78213: LD_VAR 0 3
78217: PPUSH
78218: LD_VAR 0 5
78222: PPUSH
78223: CALL_OW 48
78227: ST_TO_ADDR
// end ;
78228: LD_VAR 0 6
78232: RET
// export function ToNaturalNumber ( number ) ; begin
78233: LD_INT 0
78235: PPUSH
// result := number div 1 ;
78236: LD_ADDR_VAR 0 2
78240: PUSH
78241: LD_VAR 0 1
78245: PUSH
78246: LD_INT 1
78248: DIV
78249: ST_TO_ADDR
// if number < 0 then
78250: LD_VAR 0 1
78254: PUSH
78255: LD_INT 0
78257: LESS
78258: IFFALSE 78268
// result := 0 ;
78260: LD_ADDR_VAR 0 2
78264: PUSH
78265: LD_INT 0
78267: ST_TO_ADDR
// end ;
78268: LD_VAR 0 2
78272: RET
// export function SortByClass ( units , class ) ; var un ; begin
78273: LD_INT 0
78275: PPUSH
78276: PPUSH
// if not units or not class then
78277: LD_VAR 0 1
78281: NOT
78282: PUSH
78283: LD_VAR 0 2
78287: NOT
78288: OR
78289: IFFALSE 78293
// exit ;
78291: GO 78388
// result := [ ] ;
78293: LD_ADDR_VAR 0 3
78297: PUSH
78298: EMPTY
78299: ST_TO_ADDR
// for un in units do
78300: LD_ADDR_VAR 0 4
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: FOR_IN
78311: IFFALSE 78386
// if GetClass ( un ) = class then
78313: LD_VAR 0 4
78317: PPUSH
78318: CALL_OW 257
78322: PUSH
78323: LD_VAR 0 2
78327: EQUAL
78328: IFFALSE 78355
// result := Insert ( result , 1 , un ) else
78330: LD_ADDR_VAR 0 3
78334: PUSH
78335: LD_VAR 0 3
78339: PPUSH
78340: LD_INT 1
78342: PPUSH
78343: LD_VAR 0 4
78347: PPUSH
78348: CALL_OW 2
78352: ST_TO_ADDR
78353: GO 78384
// result := Replace ( result , result + 1 , un ) ;
78355: LD_ADDR_VAR 0 3
78359: PUSH
78360: LD_VAR 0 3
78364: PPUSH
78365: LD_VAR 0 3
78369: PUSH
78370: LD_INT 1
78372: PLUS
78373: PPUSH
78374: LD_VAR 0 4
78378: PPUSH
78379: CALL_OW 1
78383: ST_TO_ADDR
78384: GO 78310
78386: POP
78387: POP
// end ;
78388: LD_VAR 0 3
78392: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78393: LD_INT 0
78395: PPUSH
78396: PPUSH
78397: PPUSH
78398: PPUSH
78399: PPUSH
78400: PPUSH
78401: PPUSH
// result := [ ] ;
78402: LD_ADDR_VAR 0 4
78406: PUSH
78407: EMPTY
78408: ST_TO_ADDR
// if x - r < 0 then
78409: LD_VAR 0 1
78413: PUSH
78414: LD_VAR 0 3
78418: MINUS
78419: PUSH
78420: LD_INT 0
78422: LESS
78423: IFFALSE 78435
// min_x := 0 else
78425: LD_ADDR_VAR 0 8
78429: PUSH
78430: LD_INT 0
78432: ST_TO_ADDR
78433: GO 78451
// min_x := x - r ;
78435: LD_ADDR_VAR 0 8
78439: PUSH
78440: LD_VAR 0 1
78444: PUSH
78445: LD_VAR 0 3
78449: MINUS
78450: ST_TO_ADDR
// if y - r < 0 then
78451: LD_VAR 0 2
78455: PUSH
78456: LD_VAR 0 3
78460: MINUS
78461: PUSH
78462: LD_INT 0
78464: LESS
78465: IFFALSE 78477
// min_y := 0 else
78467: LD_ADDR_VAR 0 7
78471: PUSH
78472: LD_INT 0
78474: ST_TO_ADDR
78475: GO 78493
// min_y := y - r ;
78477: LD_ADDR_VAR 0 7
78481: PUSH
78482: LD_VAR 0 2
78486: PUSH
78487: LD_VAR 0 3
78491: MINUS
78492: ST_TO_ADDR
// max_x := x + r ;
78493: LD_ADDR_VAR 0 9
78497: PUSH
78498: LD_VAR 0 1
78502: PUSH
78503: LD_VAR 0 3
78507: PLUS
78508: ST_TO_ADDR
// max_y := y + r ;
78509: LD_ADDR_VAR 0 10
78513: PUSH
78514: LD_VAR 0 2
78518: PUSH
78519: LD_VAR 0 3
78523: PLUS
78524: ST_TO_ADDR
// for _x = min_x to max_x do
78525: LD_ADDR_VAR 0 5
78529: PUSH
78530: DOUBLE
78531: LD_VAR 0 8
78535: DEC
78536: ST_TO_ADDR
78537: LD_VAR 0 9
78541: PUSH
78542: FOR_TO
78543: IFFALSE 78644
// for _y = min_y to max_y do
78545: LD_ADDR_VAR 0 6
78549: PUSH
78550: DOUBLE
78551: LD_VAR 0 7
78555: DEC
78556: ST_TO_ADDR
78557: LD_VAR 0 10
78561: PUSH
78562: FOR_TO
78563: IFFALSE 78640
// begin if not ValidHex ( _x , _y ) then
78565: LD_VAR 0 5
78569: PPUSH
78570: LD_VAR 0 6
78574: PPUSH
78575: CALL_OW 488
78579: NOT
78580: IFFALSE 78584
// continue ;
78582: GO 78562
// if GetResourceTypeXY ( _x , _y ) then
78584: LD_VAR 0 5
78588: PPUSH
78589: LD_VAR 0 6
78593: PPUSH
78594: CALL_OW 283
78598: IFFALSE 78638
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78600: LD_ADDR_VAR 0 4
78604: PUSH
78605: LD_VAR 0 4
78609: PPUSH
78610: LD_VAR 0 4
78614: PUSH
78615: LD_INT 1
78617: PLUS
78618: PPUSH
78619: LD_VAR 0 5
78623: PUSH
78624: LD_VAR 0 6
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: PPUSH
78633: CALL_OW 1
78637: ST_TO_ADDR
// end ;
78638: GO 78562
78640: POP
78641: POP
78642: GO 78542
78644: POP
78645: POP
// end ;
78646: LD_VAR 0 4
78650: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78651: LD_INT 0
78653: PPUSH
78654: PPUSH
78655: PPUSH
78656: PPUSH
78657: PPUSH
78658: PPUSH
78659: PPUSH
78660: PPUSH
// if not units then
78661: LD_VAR 0 1
78665: NOT
78666: IFFALSE 78670
// exit ;
78668: GO 79198
// result := UnitFilter ( units , [ f_ok ] ) ;
78670: LD_ADDR_VAR 0 3
78674: PUSH
78675: LD_VAR 0 1
78679: PPUSH
78680: LD_INT 50
78682: PUSH
78683: EMPTY
78684: LIST
78685: PPUSH
78686: CALL_OW 72
78690: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78691: LD_ADDR_VAR 0 8
78695: PUSH
78696: LD_VAR 0 1
78700: PUSH
78701: LD_INT 1
78703: ARRAY
78704: PPUSH
78705: CALL_OW 255
78709: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78710: LD_ADDR_VAR 0 10
78714: PUSH
78715: LD_INT 29
78717: PUSH
78718: LD_INT 91
78720: PUSH
78721: LD_INT 49
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: LIST
78728: ST_TO_ADDR
// if not result then
78729: LD_VAR 0 3
78733: NOT
78734: IFFALSE 78738
// exit ;
78736: GO 79198
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78738: LD_ADDR_VAR 0 5
78742: PUSH
78743: LD_INT 81
78745: PUSH
78746: LD_VAR 0 8
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PPUSH
78755: CALL_OW 69
78759: ST_TO_ADDR
// for i in result do
78760: LD_ADDR_VAR 0 4
78764: PUSH
78765: LD_VAR 0 3
78769: PUSH
78770: FOR_IN
78771: IFFALSE 79196
// begin tag := GetTag ( i ) + 1 ;
78773: LD_ADDR_VAR 0 9
78777: PUSH
78778: LD_VAR 0 4
78782: PPUSH
78783: CALL_OW 110
78787: PUSH
78788: LD_INT 1
78790: PLUS
78791: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
78792: LD_ADDR_VAR 0 7
78796: PUSH
78797: LD_VAR 0 4
78801: PPUSH
78802: CALL_OW 250
78806: PPUSH
78807: LD_VAR 0 4
78811: PPUSH
78812: CALL_OW 251
78816: PPUSH
78817: LD_INT 4
78819: PPUSH
78820: CALL 78393 0 3
78824: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
78825: LD_VAR 0 4
78829: PPUSH
78830: CALL_OW 247
78834: PUSH
78835: LD_INT 2
78837: EQUAL
78838: PUSH
78839: LD_VAR 0 7
78843: PUSH
78844: LD_INT 2
78846: GREATER
78847: AND
78848: PUSH
78849: LD_VAR 0 4
78853: PPUSH
78854: CALL_OW 264
78858: PUSH
78859: LD_VAR 0 10
78863: IN
78864: NOT
78865: AND
78866: IFFALSE 78905
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78868: LD_VAR 0 4
78872: PPUSH
78873: LD_VAR 0 7
78877: PUSH
78878: LD_INT 1
78880: ARRAY
78881: PUSH
78882: LD_INT 1
78884: ARRAY
78885: PPUSH
78886: LD_VAR 0 7
78890: PUSH
78891: LD_INT 1
78893: ARRAY
78894: PUSH
78895: LD_INT 2
78897: ARRAY
78898: PPUSH
78899: CALL_OW 116
78903: GO 79194
// if path > tag then
78905: LD_VAR 0 2
78909: PUSH
78910: LD_VAR 0 9
78914: GREATER
78915: IFFALSE 79123
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78917: LD_ADDR_VAR 0 6
78921: PUSH
78922: LD_VAR 0 5
78926: PPUSH
78927: LD_INT 91
78929: PUSH
78930: LD_VAR 0 4
78934: PUSH
78935: LD_INT 8
78937: PUSH
78938: EMPTY
78939: LIST
78940: LIST
78941: LIST
78942: PPUSH
78943: CALL_OW 72
78947: ST_TO_ADDR
// if nearEnemy then
78948: LD_VAR 0 6
78952: IFFALSE 79021
// begin if GetWeapon ( i ) = ru_time_lapser then
78954: LD_VAR 0 4
78958: PPUSH
78959: CALL_OW 264
78963: PUSH
78964: LD_INT 49
78966: EQUAL
78967: IFFALSE 78995
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78969: LD_VAR 0 4
78973: PPUSH
78974: LD_VAR 0 6
78978: PPUSH
78979: LD_VAR 0 4
78983: PPUSH
78984: CALL_OW 74
78988: PPUSH
78989: CALL_OW 112
78993: GO 79019
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78995: LD_VAR 0 4
78999: PPUSH
79000: LD_VAR 0 6
79004: PPUSH
79005: LD_VAR 0 4
79009: PPUSH
79010: CALL_OW 74
79014: PPUSH
79015: CALL 80269 0 2
// end else
79019: GO 79121
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79021: LD_VAR 0 4
79025: PPUSH
79026: LD_VAR 0 2
79030: PUSH
79031: LD_VAR 0 9
79035: ARRAY
79036: PUSH
79037: LD_INT 1
79039: ARRAY
79040: PPUSH
79041: LD_VAR 0 2
79045: PUSH
79046: LD_VAR 0 9
79050: ARRAY
79051: PUSH
79052: LD_INT 2
79054: ARRAY
79055: PPUSH
79056: CALL_OW 297
79060: PUSH
79061: LD_INT 6
79063: GREATER
79064: IFFALSE 79107
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79066: LD_VAR 0 4
79070: PPUSH
79071: LD_VAR 0 2
79075: PUSH
79076: LD_VAR 0 9
79080: ARRAY
79081: PUSH
79082: LD_INT 1
79084: ARRAY
79085: PPUSH
79086: LD_VAR 0 2
79090: PUSH
79091: LD_VAR 0 9
79095: ARRAY
79096: PUSH
79097: LD_INT 2
79099: ARRAY
79100: PPUSH
79101: CALL_OW 114
79105: GO 79121
// SetTag ( i , tag ) ;
79107: LD_VAR 0 4
79111: PPUSH
79112: LD_VAR 0 9
79116: PPUSH
79117: CALL_OW 109
// end else
79121: GO 79194
// if enemy then
79123: LD_VAR 0 5
79127: IFFALSE 79194
// begin if GetWeapon ( i ) = ru_time_lapser then
79129: LD_VAR 0 4
79133: PPUSH
79134: CALL_OW 264
79138: PUSH
79139: LD_INT 49
79141: EQUAL
79142: IFFALSE 79170
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79144: LD_VAR 0 4
79148: PPUSH
79149: LD_VAR 0 5
79153: PPUSH
79154: LD_VAR 0 4
79158: PPUSH
79159: CALL_OW 74
79163: PPUSH
79164: CALL_OW 112
79168: GO 79194
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79170: LD_VAR 0 4
79174: PPUSH
79175: LD_VAR 0 5
79179: PPUSH
79180: LD_VAR 0 4
79184: PPUSH
79185: CALL_OW 74
79189: PPUSH
79190: CALL 80269 0 2
// end ; end ;
79194: GO 78770
79196: POP
79197: POP
// end ;
79198: LD_VAR 0 3
79202: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79203: LD_INT 0
79205: PPUSH
79206: PPUSH
79207: PPUSH
// if not unit or IsInUnit ( unit ) then
79208: LD_VAR 0 1
79212: NOT
79213: PUSH
79214: LD_VAR 0 1
79218: PPUSH
79219: CALL_OW 310
79223: OR
79224: IFFALSE 79228
// exit ;
79226: GO 79319
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79228: LD_ADDR_VAR 0 4
79232: PUSH
79233: LD_VAR 0 1
79237: PPUSH
79238: CALL_OW 250
79242: PPUSH
79243: LD_VAR 0 2
79247: PPUSH
79248: LD_INT 1
79250: PPUSH
79251: CALL_OW 272
79255: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79256: LD_ADDR_VAR 0 5
79260: PUSH
79261: LD_VAR 0 1
79265: PPUSH
79266: CALL_OW 251
79270: PPUSH
79271: LD_VAR 0 2
79275: PPUSH
79276: LD_INT 1
79278: PPUSH
79279: CALL_OW 273
79283: ST_TO_ADDR
// if ValidHex ( x , y ) then
79284: LD_VAR 0 4
79288: PPUSH
79289: LD_VAR 0 5
79293: PPUSH
79294: CALL_OW 488
79298: IFFALSE 79319
// ComTurnXY ( unit , x , y ) ;
79300: LD_VAR 0 1
79304: PPUSH
79305: LD_VAR 0 4
79309: PPUSH
79310: LD_VAR 0 5
79314: PPUSH
79315: CALL_OW 118
// end ;
79319: LD_VAR 0 3
79323: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79324: LD_INT 0
79326: PPUSH
79327: PPUSH
// result := false ;
79328: LD_ADDR_VAR 0 3
79332: PUSH
79333: LD_INT 0
79335: ST_TO_ADDR
// if not units then
79336: LD_VAR 0 2
79340: NOT
79341: IFFALSE 79345
// exit ;
79343: GO 79390
// for i in units do
79345: LD_ADDR_VAR 0 4
79349: PUSH
79350: LD_VAR 0 2
79354: PUSH
79355: FOR_IN
79356: IFFALSE 79388
// if See ( side , i ) then
79358: LD_VAR 0 1
79362: PPUSH
79363: LD_VAR 0 4
79367: PPUSH
79368: CALL_OW 292
79372: IFFALSE 79386
// begin result := true ;
79374: LD_ADDR_VAR 0 3
79378: PUSH
79379: LD_INT 1
79381: ST_TO_ADDR
// exit ;
79382: POP
79383: POP
79384: GO 79390
// end ;
79386: GO 79355
79388: POP
79389: POP
// end ;
79390: LD_VAR 0 3
79394: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79395: LD_INT 0
79397: PPUSH
79398: PPUSH
79399: PPUSH
79400: PPUSH
// if not unit or not points then
79401: LD_VAR 0 1
79405: NOT
79406: PUSH
79407: LD_VAR 0 2
79411: NOT
79412: OR
79413: IFFALSE 79417
// exit ;
79415: GO 79507
// dist := 99999 ;
79417: LD_ADDR_VAR 0 5
79421: PUSH
79422: LD_INT 99999
79424: ST_TO_ADDR
// for i in points do
79425: LD_ADDR_VAR 0 4
79429: PUSH
79430: LD_VAR 0 2
79434: PUSH
79435: FOR_IN
79436: IFFALSE 79505
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79438: LD_ADDR_VAR 0 6
79442: PUSH
79443: LD_VAR 0 1
79447: PPUSH
79448: LD_VAR 0 4
79452: PUSH
79453: LD_INT 1
79455: ARRAY
79456: PPUSH
79457: LD_VAR 0 4
79461: PUSH
79462: LD_INT 2
79464: ARRAY
79465: PPUSH
79466: CALL_OW 297
79470: ST_TO_ADDR
// if tmpDist < dist then
79471: LD_VAR 0 6
79475: PUSH
79476: LD_VAR 0 5
79480: LESS
79481: IFFALSE 79503
// begin result := i ;
79483: LD_ADDR_VAR 0 3
79487: PUSH
79488: LD_VAR 0 4
79492: ST_TO_ADDR
// dist := tmpDist ;
79493: LD_ADDR_VAR 0 5
79497: PUSH
79498: LD_VAR 0 6
79502: ST_TO_ADDR
// end ; end ;
79503: GO 79435
79505: POP
79506: POP
// end ;
79507: LD_VAR 0 3
79511: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79512: LD_INT 0
79514: PPUSH
// uc_side := side ;
79515: LD_ADDR_OWVAR 20
79519: PUSH
79520: LD_VAR 0 1
79524: ST_TO_ADDR
// uc_nation := 3 ;
79525: LD_ADDR_OWVAR 21
79529: PUSH
79530: LD_INT 3
79532: ST_TO_ADDR
// vc_chassis := 25 ;
79533: LD_ADDR_OWVAR 37
79537: PUSH
79538: LD_INT 25
79540: ST_TO_ADDR
// vc_engine := engine_siberite ;
79541: LD_ADDR_OWVAR 39
79545: PUSH
79546: LD_INT 3
79548: ST_TO_ADDR
// vc_control := control_computer ;
79549: LD_ADDR_OWVAR 38
79553: PUSH
79554: LD_INT 3
79556: ST_TO_ADDR
// vc_weapon := 59 ;
79557: LD_ADDR_OWVAR 40
79561: PUSH
79562: LD_INT 59
79564: ST_TO_ADDR
// result := CreateVehicle ;
79565: LD_ADDR_VAR 0 5
79569: PUSH
79570: CALL_OW 45
79574: ST_TO_ADDR
// SetDir ( result , d ) ;
79575: LD_VAR 0 5
79579: PPUSH
79580: LD_VAR 0 4
79584: PPUSH
79585: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79589: LD_VAR 0 5
79593: PPUSH
79594: LD_VAR 0 2
79598: PPUSH
79599: LD_VAR 0 3
79603: PPUSH
79604: LD_INT 0
79606: PPUSH
79607: CALL_OW 48
// end ;
79611: LD_VAR 0 5
79615: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79616: LD_INT 0
79618: PPUSH
79619: PPUSH
79620: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79621: LD_ADDR_VAR 0 2
79625: PUSH
79626: LD_INT 0
79628: PUSH
79629: LD_INT 0
79631: PUSH
79632: LD_INT 0
79634: PUSH
79635: LD_INT 0
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: LIST
79642: LIST
79643: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79644: LD_VAR 0 1
79648: NOT
79649: PUSH
79650: LD_VAR 0 1
79654: PPUSH
79655: CALL_OW 264
79659: PUSH
79660: LD_INT 12
79662: PUSH
79663: LD_INT 51
79665: PUSH
79666: LD_INT 32
79668: PUSH
79669: LD_INT 89
79671: PUSH
79672: EMPTY
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: IN
79678: NOT
79679: OR
79680: IFFALSE 79684
// exit ;
79682: GO 79782
// for i := 1 to 3 do
79684: LD_ADDR_VAR 0 3
79688: PUSH
79689: DOUBLE
79690: LD_INT 1
79692: DEC
79693: ST_TO_ADDR
79694: LD_INT 3
79696: PUSH
79697: FOR_TO
79698: IFFALSE 79780
// begin tmp := GetCargo ( cargo , i ) ;
79700: LD_ADDR_VAR 0 4
79704: PUSH
79705: LD_VAR 0 1
79709: PPUSH
79710: LD_VAR 0 3
79714: PPUSH
79715: CALL_OW 289
79719: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79720: LD_ADDR_VAR 0 2
79724: PUSH
79725: LD_VAR 0 2
79729: PPUSH
79730: LD_VAR 0 3
79734: PPUSH
79735: LD_VAR 0 4
79739: PPUSH
79740: CALL_OW 1
79744: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79745: LD_ADDR_VAR 0 2
79749: PUSH
79750: LD_VAR 0 2
79754: PPUSH
79755: LD_INT 4
79757: PPUSH
79758: LD_VAR 0 2
79762: PUSH
79763: LD_INT 4
79765: ARRAY
79766: PUSH
79767: LD_VAR 0 4
79771: PLUS
79772: PPUSH
79773: CALL_OW 1
79777: ST_TO_ADDR
// end ;
79778: GO 79697
79780: POP
79781: POP
// end ;
79782: LD_VAR 0 2
79786: RET
// export function Length ( array ) ; begin
79787: LD_INT 0
79789: PPUSH
// result := array + 0 ;
79790: LD_ADDR_VAR 0 2
79794: PUSH
79795: LD_VAR 0 1
79799: PUSH
79800: LD_INT 0
79802: PLUS
79803: ST_TO_ADDR
// end ;
79804: LD_VAR 0 2
79808: RET
// export function PrepareArray ( array ) ; begin
79809: LD_INT 0
79811: PPUSH
// result := array diff 0 ;
79812: LD_ADDR_VAR 0 2
79816: PUSH
79817: LD_VAR 0 1
79821: PUSH
79822: LD_INT 0
79824: DIFF
79825: ST_TO_ADDR
// if not result [ 1 ] then
79826: LD_VAR 0 2
79830: PUSH
79831: LD_INT 1
79833: ARRAY
79834: NOT
79835: IFFALSE 79855
// result := Delete ( result , 1 ) ;
79837: LD_ADDR_VAR 0 2
79841: PUSH
79842: LD_VAR 0 2
79846: PPUSH
79847: LD_INT 1
79849: PPUSH
79850: CALL_OW 3
79854: ST_TO_ADDR
// end ;
79855: LD_VAR 0 2
79859: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79860: LD_INT 0
79862: PPUSH
79863: PPUSH
79864: PPUSH
79865: PPUSH
// sibRocketRange := 25 ;
79866: LD_ADDR_VAR 0 6
79870: PUSH
79871: LD_INT 25
79873: ST_TO_ADDR
// result := false ;
79874: LD_ADDR_VAR 0 4
79878: PUSH
79879: LD_INT 0
79881: ST_TO_ADDR
// for i := 0 to 5 do
79882: LD_ADDR_VAR 0 5
79886: PUSH
79887: DOUBLE
79888: LD_INT 0
79890: DEC
79891: ST_TO_ADDR
79892: LD_INT 5
79894: PUSH
79895: FOR_TO
79896: IFFALSE 79963
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79898: LD_VAR 0 1
79902: PPUSH
79903: LD_VAR 0 5
79907: PPUSH
79908: LD_VAR 0 6
79912: PPUSH
79913: CALL_OW 272
79917: PPUSH
79918: LD_VAR 0 2
79922: PPUSH
79923: LD_VAR 0 5
79927: PPUSH
79928: LD_VAR 0 6
79932: PPUSH
79933: CALL_OW 273
79937: PPUSH
79938: LD_VAR 0 3
79942: PPUSH
79943: CALL_OW 309
79947: IFFALSE 79961
// begin result := true ;
79949: LD_ADDR_VAR 0 4
79953: PUSH
79954: LD_INT 1
79956: ST_TO_ADDR
// exit ;
79957: POP
79958: POP
79959: GO 79965
// end ;
79961: GO 79895
79963: POP
79964: POP
// end ;
79965: LD_VAR 0 4
79969: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
79970: LD_INT 0
79972: PPUSH
79973: PPUSH
79974: PPUSH
// if btype = b_depot then
79975: LD_VAR 0 2
79979: PUSH
79980: LD_INT 0
79982: EQUAL
79983: IFFALSE 79995
// begin result := true ;
79985: LD_ADDR_VAR 0 3
79989: PUSH
79990: LD_INT 1
79992: ST_TO_ADDR
// exit ;
79993: GO 80111
// end ; pom := GetBase ( depot ) ;
79995: LD_ADDR_VAR 0 4
79999: PUSH
80000: LD_VAR 0 1
80004: PPUSH
80005: CALL_OW 274
80009: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80010: LD_ADDR_VAR 0 5
80014: PUSH
80015: LD_VAR 0 2
80019: PPUSH
80020: LD_VAR 0 1
80024: PPUSH
80025: CALL_OW 248
80029: PPUSH
80030: CALL_OW 450
80034: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80035: LD_ADDR_VAR 0 3
80039: PUSH
80040: LD_VAR 0 4
80044: PPUSH
80045: LD_INT 1
80047: PPUSH
80048: CALL_OW 275
80052: PUSH
80053: LD_VAR 0 5
80057: PUSH
80058: LD_INT 1
80060: ARRAY
80061: GREATEREQUAL
80062: PUSH
80063: LD_VAR 0 4
80067: PPUSH
80068: LD_INT 2
80070: PPUSH
80071: CALL_OW 275
80075: PUSH
80076: LD_VAR 0 5
80080: PUSH
80081: LD_INT 2
80083: ARRAY
80084: GREATEREQUAL
80085: AND
80086: PUSH
80087: LD_VAR 0 4
80091: PPUSH
80092: LD_INT 3
80094: PPUSH
80095: CALL_OW 275
80099: PUSH
80100: LD_VAR 0 5
80104: PUSH
80105: LD_INT 3
80107: ARRAY
80108: GREATEREQUAL
80109: AND
80110: ST_TO_ADDR
// end ;
80111: LD_VAR 0 3
80115: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80116: LD_INT 0
80118: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80119: LD_VAR 0 1
80123: PPUSH
80124: LD_VAR 0 2
80128: PPUSH
80129: LD_INT 0
80131: PPUSH
80132: LD_INT 0
80134: PPUSH
80135: LD_INT 1
80137: PPUSH
80138: LD_INT 0
80140: PPUSH
80141: CALL_OW 587
// end ;
80145: LD_VAR 0 3
80149: RET
// export function CenterOnNow ( unit ) ; begin
80150: LD_INT 0
80152: PPUSH
// result := IsInUnit ( unit ) ;
80153: LD_ADDR_VAR 0 2
80157: PUSH
80158: LD_VAR 0 1
80162: PPUSH
80163: CALL_OW 310
80167: ST_TO_ADDR
// if not result then
80168: LD_VAR 0 2
80172: NOT
80173: IFFALSE 80185
// result := unit ;
80175: LD_ADDR_VAR 0 2
80179: PUSH
80180: LD_VAR 0 1
80184: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80185: LD_VAR 0 1
80189: PPUSH
80190: CALL_OW 87
// end ;
80194: LD_VAR 0 2
80198: RET
// export function ComMoveHex ( unit , hex ) ; begin
80199: LD_INT 0
80201: PPUSH
// if not hex then
80202: LD_VAR 0 2
80206: NOT
80207: IFFALSE 80211
// exit ;
80209: GO 80264
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80211: LD_VAR 0 2
80215: PUSH
80216: LD_INT 1
80218: ARRAY
80219: PPUSH
80220: LD_VAR 0 2
80224: PUSH
80225: LD_INT 2
80227: ARRAY
80228: PPUSH
80229: CALL_OW 428
80233: IFFALSE 80237
// exit ;
80235: GO 80264
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80237: LD_VAR 0 1
80241: PPUSH
80242: LD_VAR 0 2
80246: PUSH
80247: LD_INT 1
80249: ARRAY
80250: PPUSH
80251: LD_VAR 0 2
80255: PUSH
80256: LD_INT 2
80258: ARRAY
80259: PPUSH
80260: CALL_OW 111
// end ;
80264: LD_VAR 0 3
80268: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80269: LD_INT 0
80271: PPUSH
80272: PPUSH
80273: PPUSH
// if not unit or not enemy then
80274: LD_VAR 0 1
80278: NOT
80279: PUSH
80280: LD_VAR 0 2
80284: NOT
80285: OR
80286: IFFALSE 80290
// exit ;
80288: GO 80414
// x := GetX ( enemy ) ;
80290: LD_ADDR_VAR 0 4
80294: PUSH
80295: LD_VAR 0 2
80299: PPUSH
80300: CALL_OW 250
80304: ST_TO_ADDR
// y := GetY ( enemy ) ;
80305: LD_ADDR_VAR 0 5
80309: PUSH
80310: LD_VAR 0 2
80314: PPUSH
80315: CALL_OW 251
80319: ST_TO_ADDR
// if ValidHex ( x , y ) then
80320: LD_VAR 0 4
80324: PPUSH
80325: LD_VAR 0 5
80329: PPUSH
80330: CALL_OW 488
80334: IFFALSE 80414
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80336: LD_VAR 0 2
80340: PPUSH
80341: CALL_OW 247
80345: PUSH
80346: LD_INT 3
80348: PUSH
80349: LD_INT 2
80351: PUSH
80352: EMPTY
80353: LIST
80354: LIST
80355: IN
80356: PUSH
80357: LD_VAR 0 1
80361: PPUSH
80362: CALL_OW 255
80366: PPUSH
80367: LD_VAR 0 2
80371: PPUSH
80372: CALL_OW 292
80376: OR
80377: IFFALSE 80395
// ComAttackUnit ( unit , enemy ) else
80379: LD_VAR 0 1
80383: PPUSH
80384: LD_VAR 0 2
80388: PPUSH
80389: CALL_OW 115
80393: GO 80414
// ComAgressiveMove ( unit , x , y ) ;
80395: LD_VAR 0 1
80399: PPUSH
80400: LD_VAR 0 4
80404: PPUSH
80405: LD_VAR 0 5
80409: PPUSH
80410: CALL_OW 114
// end ;
80414: LD_VAR 0 3
80418: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80419: LD_INT 0
80421: PPUSH
80422: PPUSH
80423: PPUSH
// list := AreaToList ( area , 0 ) ;
80424: LD_ADDR_VAR 0 5
80428: PUSH
80429: LD_VAR 0 1
80433: PPUSH
80434: LD_INT 0
80436: PPUSH
80437: CALL_OW 517
80441: ST_TO_ADDR
// if not list then
80442: LD_VAR 0 5
80446: NOT
80447: IFFALSE 80451
// exit ;
80449: GO 80581
// if all then
80451: LD_VAR 0 2
80455: IFFALSE 80543
// begin for i := 1 to list [ 1 ] do
80457: LD_ADDR_VAR 0 4
80461: PUSH
80462: DOUBLE
80463: LD_INT 1
80465: DEC
80466: ST_TO_ADDR
80467: LD_VAR 0 5
80471: PUSH
80472: LD_INT 1
80474: ARRAY
80475: PUSH
80476: FOR_TO
80477: IFFALSE 80539
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80479: LD_ADDR_VAR 0 3
80483: PUSH
80484: LD_VAR 0 3
80488: PPUSH
80489: LD_VAR 0 3
80493: PUSH
80494: LD_INT 1
80496: PLUS
80497: PPUSH
80498: LD_VAR 0 5
80502: PUSH
80503: LD_INT 1
80505: ARRAY
80506: PUSH
80507: LD_VAR 0 4
80511: ARRAY
80512: PUSH
80513: LD_VAR 0 5
80517: PUSH
80518: LD_INT 2
80520: ARRAY
80521: PUSH
80522: LD_VAR 0 4
80526: ARRAY
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PPUSH
80532: CALL_OW 1
80536: ST_TO_ADDR
80537: GO 80476
80539: POP
80540: POP
// exit ;
80541: GO 80581
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80543: LD_ADDR_VAR 0 3
80547: PUSH
80548: LD_VAR 0 5
80552: PUSH
80553: LD_INT 1
80555: ARRAY
80556: PUSH
80557: LD_INT 1
80559: ARRAY
80560: PUSH
80561: LD_VAR 0 5
80565: PUSH
80566: LD_INT 2
80568: ARRAY
80569: PUSH
80570: LD_INT 1
80572: ARRAY
80573: PUSH
80574: EMPTY
80575: LIST
80576: LIST
80577: PUSH
80578: EMPTY
80579: LIST
80580: ST_TO_ADDR
// end ;
80581: LD_VAR 0 3
80585: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80586: LD_INT 0
80588: PPUSH
80589: PPUSH
// list := AreaToList ( area , 0 ) ;
80590: LD_ADDR_VAR 0 4
80594: PUSH
80595: LD_VAR 0 1
80599: PPUSH
80600: LD_INT 0
80602: PPUSH
80603: CALL_OW 517
80607: ST_TO_ADDR
// if not list then
80608: LD_VAR 0 4
80612: NOT
80613: IFFALSE 80617
// exit ;
80615: GO 80658
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80617: LD_ADDR_VAR 0 3
80621: PUSH
80622: LD_VAR 0 4
80626: PUSH
80627: LD_INT 1
80629: ARRAY
80630: PUSH
80631: LD_INT 1
80633: ARRAY
80634: PUSH
80635: LD_VAR 0 4
80639: PUSH
80640: LD_INT 2
80642: ARRAY
80643: PUSH
80644: LD_INT 1
80646: ARRAY
80647: PUSH
80648: LD_VAR 0 2
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: LIST
80657: ST_TO_ADDR
// end ;
80658: LD_VAR 0 3
80662: RET
// export function First ( array ) ; begin
80663: LD_INT 0
80665: PPUSH
// if not array then
80666: LD_VAR 0 1
80670: NOT
80671: IFFALSE 80675
// exit ;
80673: GO 80689
// result := array [ 1 ] ;
80675: LD_ADDR_VAR 0 2
80679: PUSH
80680: LD_VAR 0 1
80684: PUSH
80685: LD_INT 1
80687: ARRAY
80688: ST_TO_ADDR
// end ;
80689: LD_VAR 0 2
80693: RET
// export function Last ( array ) ; begin
80694: LD_INT 0
80696: PPUSH
// if not array then
80697: LD_VAR 0 1
80701: NOT
80702: IFFALSE 80706
// exit ;
80704: GO 80722
// result := array [ array ] ;
80706: LD_ADDR_VAR 0 2
80710: PUSH
80711: LD_VAR 0 1
80715: PUSH
80716: LD_VAR 0 1
80720: ARRAY
80721: ST_TO_ADDR
// end ;
80722: LD_VAR 0 2
80726: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80727: LD_INT 0
80729: PPUSH
80730: PPUSH
// result := [ ] ;
80731: LD_ADDR_VAR 0 5
80735: PUSH
80736: EMPTY
80737: ST_TO_ADDR
// if not array then
80738: LD_VAR 0 1
80742: NOT
80743: IFFALSE 80747
// exit ;
80745: GO 80859
// for i := 1 to array do
80747: LD_ADDR_VAR 0 6
80751: PUSH
80752: DOUBLE
80753: LD_INT 1
80755: DEC
80756: ST_TO_ADDR
80757: LD_VAR 0 1
80761: PUSH
80762: FOR_TO
80763: IFFALSE 80857
// if array [ i ] [ index ] = value then
80765: LD_VAR 0 1
80769: PUSH
80770: LD_VAR 0 6
80774: ARRAY
80775: PUSH
80776: LD_VAR 0 2
80780: ARRAY
80781: PUSH
80782: LD_VAR 0 3
80786: EQUAL
80787: IFFALSE 80855
// begin if indexColumn then
80789: LD_VAR 0 4
80793: IFFALSE 80829
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80795: LD_ADDR_VAR 0 5
80799: PUSH
80800: LD_VAR 0 5
80804: PPUSH
80805: LD_VAR 0 1
80809: PUSH
80810: LD_VAR 0 6
80814: ARRAY
80815: PUSH
80816: LD_VAR 0 4
80820: ARRAY
80821: PPUSH
80822: CALL 76041 0 2
80826: ST_TO_ADDR
80827: GO 80855
// result := Join ( result , array [ i ] ) ;
80829: LD_ADDR_VAR 0 5
80833: PUSH
80834: LD_VAR 0 5
80838: PPUSH
80839: LD_VAR 0 1
80843: PUSH
80844: LD_VAR 0 6
80848: ARRAY
80849: PPUSH
80850: CALL 76041 0 2
80854: ST_TO_ADDR
// end ;
80855: GO 80762
80857: POP
80858: POP
// end ;
80859: LD_VAR 0 5
80863: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80864: LD_INT 0
80866: PPUSH
// if not vehicles or not parkingPoint then
80867: LD_VAR 0 1
80871: NOT
80872: PUSH
80873: LD_VAR 0 2
80877: NOT
80878: OR
80879: IFFALSE 80883
// exit ;
80881: GO 80981
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80883: LD_ADDR_VAR 0 1
80887: PUSH
80888: LD_VAR 0 1
80892: PPUSH
80893: LD_INT 50
80895: PUSH
80896: EMPTY
80897: LIST
80898: PUSH
80899: LD_INT 3
80901: PUSH
80902: LD_INT 92
80904: PUSH
80905: LD_VAR 0 2
80909: PUSH
80910: LD_INT 1
80912: ARRAY
80913: PUSH
80914: LD_VAR 0 2
80918: PUSH
80919: LD_INT 2
80921: ARRAY
80922: PUSH
80923: LD_INT 8
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PPUSH
80940: CALL_OW 72
80944: ST_TO_ADDR
// if not vehicles then
80945: LD_VAR 0 1
80949: NOT
80950: IFFALSE 80954
// exit ;
80952: GO 80981
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
80954: LD_VAR 0 1
80958: PPUSH
80959: LD_VAR 0 2
80963: PUSH
80964: LD_INT 1
80966: ARRAY
80967: PPUSH
80968: LD_VAR 0 2
80972: PUSH
80973: LD_INT 2
80975: ARRAY
80976: PPUSH
80977: CALL_OW 111
// end ;
80981: LD_VAR 0 3
80985: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
80986: LD_INT 0
80988: PPUSH
80989: PPUSH
80990: PPUSH
// if not side or not area then
80991: LD_VAR 0 1
80995: NOT
80996: PUSH
80997: LD_VAR 0 2
81001: NOT
81002: OR
81003: IFFALSE 81007
// exit ;
81005: GO 81126
// tmp := AreaToList ( area , 0 ) ;
81007: LD_ADDR_VAR 0 5
81011: PUSH
81012: LD_VAR 0 2
81016: PPUSH
81017: LD_INT 0
81019: PPUSH
81020: CALL_OW 517
81024: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81025: LD_ADDR_VAR 0 4
81029: PUSH
81030: DOUBLE
81031: LD_INT 1
81033: DEC
81034: ST_TO_ADDR
81035: LD_VAR 0 5
81039: PUSH
81040: LD_INT 1
81042: ARRAY
81043: PUSH
81044: FOR_TO
81045: IFFALSE 81124
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81047: LD_VAR 0 5
81051: PUSH
81052: LD_INT 1
81054: ARRAY
81055: PUSH
81056: LD_VAR 0 4
81060: ARRAY
81061: PPUSH
81062: LD_VAR 0 5
81066: PUSH
81067: LD_INT 2
81069: ARRAY
81070: PUSH
81071: LD_VAR 0 4
81075: ARRAY
81076: PPUSH
81077: CALL_OW 351
81081: IFFALSE 81122
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81083: LD_VAR 0 5
81087: PUSH
81088: LD_INT 1
81090: ARRAY
81091: PUSH
81092: LD_VAR 0 4
81096: ARRAY
81097: PPUSH
81098: LD_VAR 0 5
81102: PUSH
81103: LD_INT 2
81105: ARRAY
81106: PUSH
81107: LD_VAR 0 4
81111: ARRAY
81112: PPUSH
81113: LD_VAR 0 1
81117: PPUSH
81118: CALL_OW 244
// end ;
81122: GO 81044
81124: POP
81125: POP
// end ; end_of_file
81126: LD_VAR 0 3
81130: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81131: LD_VAR 0 1
81135: PUSH
81136: LD_INT 200
81138: DOUBLE
81139: GREATEREQUAL
81140: IFFALSE 81148
81142: LD_INT 299
81144: DOUBLE
81145: LESSEQUAL
81146: IFTRUE 81150
81148: GO 81182
81150: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81151: LD_VAR 0 1
81155: PPUSH
81156: LD_VAR 0 2
81160: PPUSH
81161: LD_VAR 0 3
81165: PPUSH
81166: LD_VAR 0 4
81170: PPUSH
81171: LD_VAR 0 5
81175: PPUSH
81176: CALL 33547 0 5
81180: GO 81259
81182: LD_INT 300
81184: DOUBLE
81185: GREATEREQUAL
81186: IFFALSE 81194
81188: LD_INT 399
81190: DOUBLE
81191: LESSEQUAL
81192: IFTRUE 81196
81194: GO 81258
81196: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81197: LD_VAR 0 1
81201: PPUSH
81202: LD_VAR 0 2
81206: PPUSH
81207: LD_VAR 0 3
81211: PPUSH
81212: LD_VAR 0 4
81216: PPUSH
81217: LD_VAR 0 5
81221: PPUSH
81222: LD_VAR 0 6
81226: PPUSH
81227: LD_VAR 0 7
81231: PPUSH
81232: LD_VAR 0 8
81236: PPUSH
81237: LD_VAR 0 9
81241: PPUSH
81242: LD_VAR 0 10
81246: PPUSH
81247: LD_VAR 0 11
81251: PPUSH
81252: CALL 29455 0 11
81256: GO 81259
81258: POP
// end ;
81259: PPOPN 11
81261: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81262: LD_VAR 0 1
81266: PPUSH
81267: LD_VAR 0 2
81271: PPUSH
81272: LD_VAR 0 3
81276: PPUSH
81277: LD_VAR 0 4
81281: PPUSH
81282: LD_VAR 0 5
81286: PPUSH
81287: CALL 32932 0 5
// end ; end_of_file
81291: PPOPN 5
81293: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81294: LD_VAR 0 1
81298: PPUSH
81299: LD_VAR 0 2
81303: PPUSH
81304: LD_VAR 0 3
81308: PPUSH
81309: LD_VAR 0 4
81313: PPUSH
81314: LD_VAR 0 5
81318: PPUSH
81319: LD_VAR 0 6
81323: PPUSH
81324: CALL 17107 0 6
// end ;
81328: PPOPN 6
81330: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81331: LD_INT 0
81333: PPUSH
// begin if not units then
81334: LD_VAR 0 1
81338: NOT
81339: IFFALSE 81343
// exit ;
81341: GO 81343
// end ;
81343: PPOPN 7
81345: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81346: CALL 16994 0 0
// end ;
81350: PPOPN 1
81352: END
