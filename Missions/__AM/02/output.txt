// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10724 0 0
// PrepareRussianCommander ;
  44: CALL 12260 0 0
// PrepareSouthBase ;
  48: CALL 12356 0 0
// PrepareNorthBase ;
  52: CALL 12694 0 0
// PrepareOtherRussians ;
  56: CALL 13089 0 0
// PrepareHeroes ;
  60: CALL 11045 0 0
// PrepareLisSquad ;
  64: CALL 11415 0 0
// PrepareOtherAmericans ;
  68: CALL 11730 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: IFFALSE 322
 316: PUSH
 317: LD_EXP 2
 321: AND
 322: IFFALSE 652
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 324: LD_EXP 3
 328: PPUSH
 329: LD_INT 43
 331: PPUSH
 332: LD_INT 72
 334: PPUSH
 335: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 339: LD_EXP 2
 343: PPUSH
 344: LD_INT 44
 346: PPUSH
 347: LD_INT 70
 349: PPUSH
 350: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 354: LD_EXP 1
 358: PPUSH
 359: LD_INT 46
 361: PPUSH
 362: LD_INT 73
 364: PPUSH
 365: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 369: LD_EXP 3
 373: PPUSH
 374: LD_STRING D1a-Cyrus-1
 376: PPUSH
 377: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 381: LD_EXP 1
 385: PPUSH
 386: LD_STRING D1a-JMM-1
 388: PPUSH
 389: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 393: LD_EXP 3
 397: PPUSH
 398: LD_INT 37
 400: PPUSH
 401: LD_INT 66
 403: PPUSH
 404: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 408: LD_EXP 2
 412: PPUSH
 413: LD_INT 41
 415: PPUSH
 416: LD_INT 67
 418: PPUSH
 419: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 423: LD_EXP 1
 427: PPUSH
 428: LD_INT 38
 430: PPUSH
 431: LD_INT 64
 433: PPUSH
 434: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 438: LD_EXP 2
 442: PPUSH
 443: LD_STRING D1a-Bobby-2
 445: PPUSH
 446: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 450: LD_EXP 3
 454: PPUSH
 455: LD_INT 35
 457: PPUSH
 458: LD_INT 62
 460: PPUSH
 461: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 465: LD_EXP 2
 469: PPUSH
 470: LD_INT 32
 472: PPUSH
 473: LD_INT 60
 475: PPUSH
 476: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 480: LD_EXP 1
 484: PPUSH
 485: LD_INT 35
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 495: LD_EXP 1
 499: PPUSH
 500: LD_STRING D1a-JMM-2
 502: PPUSH
 503: CALL_OW 88
// ComWalk ( Lisa ) ;
 507: LD_EXP 4
 511: PPUSH
 512: CALL_OW 138
// wait ( 0 0$1 ) ;
 516: LD_INT 35
 518: PPUSH
 519: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 523: LD_EXP 4
 527: PPUSH
 528: LD_EXP 1
 532: PPUSH
 533: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 537: LD_EXP 1
 541: PUSH
 542: LD_EXP 3
 546: PUSH
 547: LD_EXP 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PPUSH
 557: LD_EXP 4
 561: PPUSH
 562: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 566: LD_VAR 0 2
 570: PUSH
 571: LD_INT 1
 573: ARRAY
 574: PPUSH
 575: LD_INT 33
 577: PPUSH
 578: LD_INT 55
 580: PPUSH
 581: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 585: LD_VAR 0 2
 589: PUSH
 590: LD_INT 2
 592: ARRAY
 593: PPUSH
 594: LD_INT 30
 596: PPUSH
 597: LD_INT 54
 599: PPUSH
 600: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 604: LD_VAR 0 2
 608: PUSH
 609: LD_INT 1
 611: ARRAY
 612: PPUSH
 613: LD_EXP 1
 617: PPUSH
 618: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: LD_EXP 1
 635: PPUSH
 636: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 640: LD_EXP 4
 644: PPUSH
 645: LD_STRING D1a-Lisa-2
 647: PPUSH
 648: CALL_OW 88
// end ; if Cyrus and not Bobby then
 652: LD_EXP 3
 656: IFFALSE 665
 658: PUSH
 659: LD_EXP 2
 663: NOT
 664: AND
 665: IFFALSE 870
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 667: LD_EXP 3
 671: PPUSH
 672: LD_INT 43
 674: PPUSH
 675: LD_INT 72
 677: PPUSH
 678: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 682: LD_EXP 1
 686: PPUSH
 687: LD_INT 46
 689: PPUSH
 690: LD_INT 73
 692: PPUSH
 693: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 697: LD_EXP 3
 701: PPUSH
 702: LD_STRING D1a-Cyrus-1
 704: PPUSH
 705: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING D1a-JMM-1
 716: PPUSH
 717: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 721: LD_EXP 3
 725: PPUSH
 726: LD_INT 37
 728: PPUSH
 729: LD_INT 66
 731: PPUSH
 732: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 736: LD_EXP 1
 740: PPUSH
 741: LD_INT 38
 743: PPUSH
 744: LD_INT 64
 746: PPUSH
 747: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 751: LD_EXP 3
 755: PPUSH
 756: LD_STRING D1a-Cyrus-2
 758: PPUSH
 759: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 763: LD_EXP 3
 767: PPUSH
 768: LD_INT 35
 770: PPUSH
 771: LD_INT 62
 773: PPUSH
 774: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 778: LD_EXP 1
 782: PPUSH
 783: LD_INT 35
 785: PPUSH
 786: LD_INT 60
 788: PPUSH
 789: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 793: LD_EXP 1
 797: PPUSH
 798: LD_STRING D1a-JMM-2
 800: PPUSH
 801: CALL_OW 88
// ComWalk ( Lisa ) ;
 805: LD_EXP 4
 809: PPUSH
 810: CALL_OW 138
// wait ( 0 0$1 ) ;
 814: LD_INT 35
 816: PPUSH
 817: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_EXP 1
 830: PPUSH
 831: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 835: LD_EXP 4
 839: PPUSH
 840: LD_STRING D1a-Lisa-2
 842: PPUSH
 843: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 847: LD_EXP 1
 851: PUSH
 852: LD_EXP 3
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: LD_EXP 4
 865: PPUSH
 866: CALL_OW 119
// end ; if not Cyrus and Bobby then
 870: LD_EXP 3
 874: NOT
 875: IFFALSE 883
 877: PUSH
 878: LD_EXP 2
 882: AND
 883: IFFALSE 1162
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 44
 892: PPUSH
 893: LD_INT 70
 895: PPUSH
 896: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 900: LD_EXP 1
 904: PPUSH
 905: LD_INT 46
 907: PPUSH
 908: LD_INT 73
 910: PPUSH
 911: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 915: LD_EXP 2
 919: PPUSH
 920: LD_STRING D1a-Bobby-1
 922: PPUSH
 923: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 927: LD_EXP 1
 931: PPUSH
 932: LD_STRING D1a-JMM-1
 934: PPUSH
 935: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 37
 946: PPUSH
 947: LD_INT 66
 949: PPUSH
 950: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_INT 38
 961: PPUSH
 962: LD_INT 64
 964: PPUSH
 965: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_STRING D1a-Bobby-2
 976: PPUSH
 977: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 981: LD_EXP 2
 985: PPUSH
 986: LD_INT 35
 988: PPUSH
 989: LD_INT 62
 991: PPUSH
 992: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 996: LD_EXP 1
1000: PPUSH
1001: LD_INT 35
1003: PPUSH
1004: LD_INT 60
1006: PPUSH
1007: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1011: LD_EXP 1
1015: PPUSH
1016: LD_STRING D1a-JMM-2
1018: PPUSH
1019: CALL_OW 88
// ComWalk ( Lisa ) ;
1023: LD_EXP 4
1027: PPUSH
1028: CALL_OW 138
// wait ( 0 0$1 ) ;
1032: LD_INT 35
1034: PPUSH
1035: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1039: LD_EXP 4
1043: PPUSH
1044: LD_EXP 1
1048: PPUSH
1049: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1053: LD_EXP 1
1057: PUSH
1058: LD_EXP 3
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PPUSH
1067: LD_EXP 4
1071: PPUSH
1072: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 1
1083: ARRAY
1084: PPUSH
1085: LD_INT 33
1087: PPUSH
1088: LD_INT 55
1090: PPUSH
1091: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1095: LD_VAR 0 2
1099: PUSH
1100: LD_INT 2
1102: ARRAY
1103: PPUSH
1104: LD_INT 30
1106: PPUSH
1107: LD_INT 54
1109: PPUSH
1110: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1114: LD_VAR 0 2
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: LD_EXP 1
1127: PPUSH
1128: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_EXP 1
1145: PPUSH
1146: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1150: LD_EXP 4
1154: PPUSH
1155: LD_STRING D1a-Lisa-2
1157: PPUSH
1158: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1162: LD_EXP 3
1166: NOT
1167: IFFALSE 1176
1169: PUSH
1170: LD_EXP 2
1174: NOT
1175: AND
1176: IFFALSE 1390
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1178: LD_EXP 1
1182: PPUSH
1183: LD_INT 37
1185: PPUSH
1186: LD_INT 66
1188: PPUSH
1189: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1193: LD_EXP 1
1197: PPUSH
1198: LD_STRING D1b-JMM-1
1200: PPUSH
1201: CALL_OW 88
// ComCrawl ( JMM ) ;
1205: LD_EXP 1
1209: PPUSH
1210: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 35
1221: PPUSH
1222: LD_INT 60
1224: PPUSH
1225: CALL_OW 171
// wait ( 0 0$8 ) ;
1229: LD_INT 280
1231: PPUSH
1232: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1236: LD_EXP 1
1240: PPUSH
1241: LD_STRING D1b-JMM-1a
1243: PPUSH
1244: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1248: LD_EXP 1
1252: PUSH
1253: LD_EXP 4
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 138
// wait ( 0 0$1 ) ;
1266: LD_INT 35
1268: PPUSH
1269: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1273: LD_EXP 4
1277: PPUSH
1278: LD_EXP 1
1282: PPUSH
1283: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1287: LD_EXP 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: PPUSH
1295: LD_EXP 4
1299: PPUSH
1300: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1304: LD_VAR 0 2
1308: PUSH
1309: LD_INT 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 33
1315: PPUSH
1316: LD_INT 55
1318: PPUSH
1319: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 2
1330: ARRAY
1331: PPUSH
1332: LD_INT 30
1334: PPUSH
1335: LD_INT 54
1337: PPUSH
1338: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: LD_EXP 1
1355: PPUSH
1356: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1360: LD_VAR 0 2
1364: PUSH
1365: LD_INT 2
1367: ARRAY
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1378: LD_EXP 4
1382: PPUSH
1383: LD_STRING D1b-Lisa-1
1385: PPUSH
1386: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-1
1397: PPUSH
1398: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1402: LD_EXP 4
1406: PPUSH
1407: LD_STRING D1-Lisa-1
1409: PPUSH
1410: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-2
1421: PPUSH
1422: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-2
1433: PPUSH
1434: CALL_OW 586
// if Cyrus then
1438: LD_EXP 3
1442: IFFALSE 1468
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1444: LD_EXP 3
1448: PPUSH
1449: LD_STRING D1-Cyrus-2
1451: PPUSH
1452: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1456: LD_EXP 1
1460: PPUSH
1461: LD_STRING D1-JMM-3
1463: PPUSH
1464: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1468: LD_EXP 9
1472: PPUSH
1473: LD_STRING D1-Pow-3
1475: PPUSH
1476: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1480: LD_EXP 1
1484: PPUSH
1485: LD_STRING D1-JMM-4
1487: PPUSH
1488: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1492: LD_EXP 9
1496: PPUSH
1497: LD_STRING D1-Pow-4
1499: PPUSH
1500: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1504: LD_EXP 9
1508: PPUSH
1509: LD_STRING D1-Pow-4a
1511: PPUSH
1512: CALL_OW 586
// if Cyrus then
1516: LD_EXP 3
1520: IFFALSE 1534
// Say ( Cyrus , D1-Cyrus-4 ) ;
1522: LD_EXP 3
1526: PPUSH
1527: LD_STRING D1-Cyrus-4
1529: PPUSH
1530: CALL_OW 88
// if Bobby then
1534: LD_EXP 2
1538: IFFALSE 1576
// begin Say ( Bobby , D1-Bobby-4 ) ;
1540: LD_EXP 2
1544: PPUSH
1545: LD_STRING D1-Bobby-4
1547: PPUSH
1548: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1552: LD_EXP 4
1556: PPUSH
1557: LD_STRING D1-Lisa-4
1559: PPUSH
1560: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1564: LD_EXP 1
1568: PPUSH
1569: LD_STRING D1-JMM-5
1571: PPUSH
1572: CALL_OW 88
// end ; InGameOff ;
1576: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1580: LD_INT 22
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PPUSH
1590: CALL_OW 69
1594: PUSH
1595: LD_EXP 6
1599: PUSH
1600: LD_EXP 7
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: DIFF
1609: PPUSH
1610: LD_INT 1
1612: PPUSH
1613: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1617: LD_STRING M1
1619: PPUSH
1620: CALL_OW 337
// SaveForQuickRestart ;
1624: CALL_OW 22
// end ;
1628: LD_VAR 0 1
1632: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1633: LD_INT 7
1635: PPUSH
1636: LD_INT 22
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PPUSH
1646: CALL_OW 70
1650: PUSH
1651: LD_INT 0
1653: GREATER
1654: IFFALSE 2067
1656: GO 1658
1658: DISABLE
// begin InGameOn ;
1659: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1663: LD_INT 22
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 21
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PPUSH
1687: CALL_OW 69
1691: PPUSH
1692: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1696: LD_INT 24
1698: PPUSH
1699: LD_INT 32
1701: PPUSH
1702: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1706: LD_EXP 5
1710: PPUSH
1711: LD_INT 4
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1721: LD_EXP 5
1725: PPUSH
1726: LD_INT 4
1728: PPUSH
1729: CALL_OW 336
// wait ( 0 0$1 ) ;
1733: LD_INT 35
1735: PPUSH
1736: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1740: LD_EXP 5
1744: PPUSH
1745: LD_INT 27
1747: PPUSH
1748: LD_INT 38
1750: PPUSH
1751: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_EXP 1
1764: PPUSH
1765: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1769: LD_INT 22
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 21
1781: PUSH
1782: LD_INT 1
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_EXP 5
1802: PUSH
1803: EMPTY
1804: LIST
1805: DIFF
1806: PPUSH
1807: LD_EXP 5
1811: PPUSH
1812: CALL_OW 119
// wait ( 0 0$1 ) ;
1816: LD_INT 35
1818: PPUSH
1819: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1823: LD_EXP 5
1827: PPUSH
1828: LD_STRING D2a-Khat-1
1830: PPUSH
1831: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1835: LD_EXP 1
1839: PPUSH
1840: LD_STRING D2a-JMM-1
1842: PPUSH
1843: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1847: LD_EXP 5
1851: PPUSH
1852: LD_STRING D2a-Khat-2
1854: PPUSH
1855: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1859: LD_EXP 1
1863: PPUSH
1864: LD_STRING D2a-JMM-2
1866: PPUSH
1867: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1871: LD_EXP 5
1875: PPUSH
1876: LD_STRING D2a-Khat-3
1878: PPUSH
1879: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1883: LD_EXP 1
1887: PPUSH
1888: LD_STRING D2a-JMM-3
1890: PPUSH
1891: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1895: LD_EXP 5
1899: PPUSH
1900: LD_STRING D2a-Khat-4
1902: PPUSH
1903: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1907: LD_EXP 1
1911: PPUSH
1912: LD_STRING D2a-JMM-4
1914: PPUSH
1915: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1919: LD_EXP 5
1923: PPUSH
1924: LD_STRING D2a-Khat-5
1926: PPUSH
1927: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1931: LD_EXP 1
1935: PPUSH
1936: LD_STRING D2a-JMM-5
1938: PPUSH
1939: CALL_OW 88
// InGameOff ;
1943: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1947: LD_INT 22
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 21
1959: PUSH
1960: LD_INT 1
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 3
1969: PUSH
1970: LD_INT 24
1972: PUSH
1973: LD_INT 800
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: IFFALSE 2067
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1995: LD_EXP 5
1999: PPUSH
2000: LD_INT 22
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 21
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 24
2025: PUSH
2026: LD_INT 1000
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL_OW 69
2046: PUSH
2047: LD_INT 1
2049: ARRAY
2050: PPUSH
2051: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2055: LD_EXP 5
2059: PPUSH
2060: LD_STRING D2b-Khat-1
2062: PPUSH
2063: CALL_OW 88
// end ; end ;
2067: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2068: LD_INT 15
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 70
2085: IFFALSE 3292
2087: GO 2089
2089: DISABLE
2090: LD_INT 0
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_INT 999
2104: PUSH
2105: LD_INT 999
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: LD_INT 22
2122: PUSH
2123: LD_INT 1
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 21
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PUSH
2149: LD_EXP 1
2153: PUSH
2154: LD_EXP 2
2158: PUSH
2159: LD_EXP 3
2163: PUSH
2164: LD_EXP 4
2168: PUSH
2169: LD_EXP 5
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: DIFF
2181: ST_TO_ADDR
// PrepareDeadSoldiers ;
2182: CALL 11872 0 0
// spotCorpses = 1 ;
2186: LD_ADDR_EXP 32
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// InGameOn ;
2201: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2205: LD_INT 23
2207: PPUSH
2208: LD_INT 12
2210: PPUSH
2211: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2215: LD_ADDR_VAR 0 3
2219: PUSH
2220: LD_VAR 0 2
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 2
2231: ARRAY
2232: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_INT 22
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 21
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PPUSH
2262: CALL_OW 69
2266: PUSH
2267: LD_EXP 1
2271: PUSH
2272: LD_EXP 5
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: DIFF
2281: PUSH
2282: FOR_IN
2283: IFFALSE 2334
// if IsOK ( i ) then
2285: LD_VAR 0 1
2289: PPUSH
2290: CALL_OW 302
2294: IFFALSE 2332
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2296: LD_ADDR_VAR 0 2
2300: PUSH
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 1
2315: PPUSH
2316: LD_INT 16
2318: PPUSH
2319: CALL_OW 299
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PUSH
2328: EMPTY
2329: LIST
2330: ADD
2331: ST_TO_ADDR
2332: GO 2282
2334: POP
2335: POP
// for i = 2 to distanceTab do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 2
2344: DEC
2345: ST_TO_ADDR
2346: LD_VAR 0 2
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2398
// if distanceTab [ i ] [ 2 ] < min then
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PUSH
2365: LD_INT 2
2367: ARRAY
2368: PUSH
2369: LD_VAR 0 3
2373: LESS
2374: IFFALSE 2396
// min = distanceTab [ i ] [ 2 ] ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: LD_VAR 0 2
2385: PUSH
2386: LD_VAR 0 1
2390: ARRAY
2391: PUSH
2392: LD_INT 2
2394: ARRAY
2395: ST_TO_ADDR
2396: GO 2351
2398: POP
2399: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2400: LD_ADDR_VAR 0 1
2404: PUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 1
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 21
2417: PUSH
2418: LD_INT 1
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: PUSH
2434: LD_EXP 1
2438: PUSH
2439: EMPTY
2440: LIST
2441: DIFF
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2514
// begin ComMoveToArea ( i , DeadCutscene ) ;
2446: LD_VAR 0 1
2450: PPUSH
2451: LD_INT 28
2453: PPUSH
2454: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2458: LD_EXP 1
2462: PPUSH
2463: LD_INT 30
2465: PPUSH
2466: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2470: LD_VAR 0 1
2474: PPUSH
2475: LD_INT 23
2477: PPUSH
2478: LD_INT 11
2480: PPUSH
2481: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2485: LD_EXP 1
2489: PPUSH
2490: LD_INT 23
2492: PPUSH
2493: LD_INT 11
2495: PPUSH
2496: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2500: LD_EXP 36
2504: PPUSH
2505: LD_INT 250
2507: PPUSH
2508: CALL_OW 234
// end ;
2512: GO 2443
2514: POP
2515: POP
// for i = 2 to distanceTab do
2516: LD_ADDR_VAR 0 1
2520: PUSH
2521: DOUBLE
2522: LD_INT 2
2524: DEC
2525: ST_TO_ADDR
2526: LD_VAR 0 2
2530: PUSH
2531: FOR_TO
2532: IFFALSE 2926
// begin if distanceTab [ i ] [ 2 ] = min then
2534: LD_VAR 0 2
2538: PUSH
2539: LD_VAR 0 1
2543: ARRAY
2544: PUSH
2545: LD_INT 2
2547: ARRAY
2548: PUSH
2549: LD_VAR 0 3
2553: EQUAL
2554: IFFALSE 2924
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 2
2575: EQUAL
2576: IFFALSE 2590
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2578: LD_EXP 2
2582: PPUSH
2583: LD_STRING DCorpses-Bobby-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_EXP 3
2609: EQUAL
2610: IFFALSE 2624
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2612: LD_EXP 3
2616: PPUSH
2617: LD_STRING DCorpses-Cyrus-1
2619: PPUSH
2620: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2624: LD_VAR 0 2
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PUSH
2639: LD_EXP 4
2643: EQUAL
2644: IFFALSE 2658
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2646: LD_EXP 4
2650: PPUSH
2651: LD_STRING DCorpses-Lisa-1
2653: PPUSH
2654: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 1
2667: ARRAY
2668: PUSH
2669: LD_INT 1
2671: ARRAY
2672: PUSH
2673: LD_VAR 0 4
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: EQUAL
2682: IFFALSE 2703
2684: PUSH
2685: LD_VAR 0 4
2689: PUSH
2690: LD_INT 1
2692: ARRAY
2693: PPUSH
2694: CALL_OW 258
2698: PUSH
2699: LD_INT 1
2701: EQUAL
2702: AND
2703: IFFALSE 2721
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2705: LD_VAR 0 4
2709: PUSH
2710: LD_INT 1
2712: ARRAY
2713: PPUSH
2714: LD_STRING DCorpses-Sol1-1
2716: PPUSH
2717: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2721: LD_VAR 0 2
2725: PUSH
2726: LD_VAR 0 1
2730: ARRAY
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: EQUAL
2745: IFFALSE 2766
2747: PUSH
2748: LD_VAR 0 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 258
2761: PUSH
2762: LD_INT 2
2764: EQUAL
2765: AND
2766: IFFALSE 2784
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: PPUSH
2777: LD_STRING DCorpses-FSol1-1
2779: PPUSH
2780: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2784: LD_VAR 0 2
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: PUSH
2795: LD_INT 1
2797: ARRAY
2798: PUSH
2799: LD_VAR 0 4
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: EQUAL
2808: IFFALSE 2829
2810: PUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 2
2818: ARRAY
2819: PPUSH
2820: CALL_OW 258
2824: PUSH
2825: LD_INT 1
2827: EQUAL
2828: AND
2829: IFFALSE 2847
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2831: LD_VAR 0 4
2835: PUSH
2836: LD_INT 2
2838: ARRAY
2839: PPUSH
2840: LD_STRING DCorpses-Sol1-1
2842: PPUSH
2843: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2847: LD_VAR 0 2
2851: PUSH
2852: LD_VAR 0 1
2856: ARRAY
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PUSH
2862: LD_VAR 0 4
2866: PUSH
2867: LD_INT 2
2869: ARRAY
2870: EQUAL
2871: IFFALSE 2892
2873: PUSH
2874: LD_VAR 0 4
2878: PUSH
2879: LD_INT 2
2881: ARRAY
2882: PPUSH
2883: CALL_OW 258
2887: PUSH
2888: LD_INT 2
2890: EQUAL
2891: AND
2892: IFFALSE 2910
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2894: LD_VAR 0 4
2898: PUSH
2899: LD_INT 2
2901: ARRAY
2902: PPUSH
2903: LD_STRING DCorpses-FSol1-1
2905: PPUSH
2906: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2910: LD_EXP 36
2914: PPUSH
2915: LD_INT 150
2917: PPUSH
2918: CALL_OW 234
// break ;
2922: GO 2926
// end ; end ;
2924: GO 2531
2926: POP
2927: POP
// p := 0 ;
2928: LD_ADDR_VAR 0 5
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2936: LD_INT 35
2938: PPUSH
2939: CALL_OW 67
// p := p + 1 ;
2943: LD_ADDR_VAR 0 5
2947: PUSH
2948: LD_VAR 0 5
2952: PUSH
2953: LD_INT 1
2955: PLUS
2956: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: LD_INT 22
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 21
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PPUSH
2986: CALL_OW 69
2990: PUSH
2991: LD_EXP 1
2995: PUSH
2996: EMPTY
2997: LIST
2998: DIFF
2999: PUSH
3000: FOR_IN
3001: IFFALSE 3071
// begin ComMoveToArea ( i , DeadCutscene ) ;
3003: LD_VAR 0 1
3007: PPUSH
3008: LD_INT 28
3010: PPUSH
3011: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3015: LD_EXP 1
3019: PPUSH
3020: LD_INT 30
3022: PPUSH
3023: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3027: LD_VAR 0 1
3031: PPUSH
3032: LD_INT 23
3034: PPUSH
3035: LD_INT 11
3037: PPUSH
3038: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3042: LD_EXP 1
3046: PPUSH
3047: LD_INT 23
3049: PPUSH
3050: LD_INT 11
3052: PPUSH
3053: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3057: LD_EXP 36
3061: PPUSH
3062: LD_INT 250
3064: PPUSH
3065: CALL_OW 234
// end ;
3069: GO 3000
3071: POP
3072: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3073: LD_EXP 1
3077: PPUSH
3078: LD_INT 30
3080: PPUSH
3081: CALL_OW 308
3085: IFTRUE 3097
3087: PUSH
3088: LD_VAR 0 5
3092: PUSH
3093: LD_INT 16
3095: GREATEREQUAL
3096: OR
3097: IFFALSE 2936
// wait ( 0 0$1 ) ;
3099: LD_INT 35
3101: PPUSH
3102: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3106: LD_EXP 1
3110: PPUSH
3111: LD_STRING DCorpses-JMM-1
3113: PPUSH
3114: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3118: LD_EXP 36
3122: PPUSH
3123: LD_INT 100
3125: PPUSH
3126: CALL_OW 234
// if IsOK ( Khatam ) then
3130: LD_EXP 5
3134: PPUSH
3135: CALL_OW 302
3139: IFFALSE 3276
// begin repeat wait ( 0 0$1 ) ;
3141: LD_INT 35
3143: PPUSH
3144: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3148: LD_EXP 5
3152: PPUSH
3153: LD_EXP 36
3157: PPUSH
3158: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3162: LD_EXP 5
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: CALL_OW 296
3176: PUSH
3177: LD_INT 2
3179: LESS
3180: IFFALSE 3141
// spotCorpses = 0 ;
3182: LD_ADDR_EXP 32
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3190: LD_EXP 36
3194: PPUSH
3195: LD_INT 10
3197: PPUSH
3198: CALL_OW 234
// wait ( 0 0$3 ) ;
3202: LD_INT 105
3204: PPUSH
3205: CALL_OW 67
// KillUnit ( DyingSold ) ;
3209: LD_EXP 36
3213: PPUSH
3214: CALL_OW 66
// wait ( 0 0$1 ) ;
3218: LD_INT 35
3220: PPUSH
3221: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3225: LD_EXP 1
3229: PUSH
3230: LD_EXP 5
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3243: LD_EXP 5
3247: PPUSH
3248: LD_EXP 1
3252: PPUSH
3253: CALL_OW 119
// wait ( 0 0$1 ) ;
3257: LD_INT 35
3259: PPUSH
3260: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3264: LD_EXP 5
3268: PPUSH
3269: LD_STRING DCorpses-Khat-1
3271: PPUSH
3272: CALL_OW 88
// end ; InGameOff ;
3276: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3280: LD_EXP 1
3284: PPUSH
3285: LD_STRING DCorpses-JMM-2
3287: PPUSH
3288: CALL_OW 88
// end ;
3292: PPOPN 5
3294: END
// every 0 0$1 trigger spotCorpses = 1 do
3295: LD_EXP 32
3299: PUSH
3300: LD_INT 1
3302: EQUAL
3303: IFFALSE 3321
3305: GO 3307
3307: DISABLE
// begin enable ;
3308: ENABLE
// SetLives ( DyingSold , 10 ) ;
3309: LD_EXP 36
3313: PPUSH
3314: LD_INT 10
3316: PPUSH
3317: CALL_OW 234
// end ;
3321: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3322: LD_INT 8
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 70
3339: IFTRUE 3381
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: CALL_OW 69
3356: PPUSH
3357: LD_EXP 7
3361: PPUSH
3362: CALL_OW 74
3366: PPUSH
3367: LD_EXP 7
3371: PPUSH
3372: CALL_OW 296
3376: PUSH
3377: LD_INT 13
3379: LESS
3380: OR
3381: IFFALSE 3562
3383: GO 3385
3385: DISABLE
3386: LD_INT 0
3388: PPUSH
// begin InGameOn ;
3389: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3393: LD_EXP 7
3397: PPUSH
3398: LD_INT 250
3400: PPUSH
3401: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3405: LD_EXP 6
3409: PPUSH
3410: LD_INT 1000
3412: PUSH
3413: LD_INT 800
3415: PUSH
3416: LD_INT 750
3418: PUSH
3419: LD_INT 700
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: LD_OWVAR 67
3432: ARRAY
3433: PPUSH
3434: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 4
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3454: LD_EXP 6
3458: PUSH
3459: LD_EXP 7
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PPUSH
3468: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: LD_INT 9
3479: PPUSH
3480: LD_INT 22
3482: PUSH
3483: LD_INT 3
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PPUSH
3490: CALL_OW 70
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 4
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: UNION
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3525
// ComFree ( i ) ;
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 139
3523: GO 3511
3525: POP
3526: POP
// wait ( 0 0$1 ) ;
3527: LD_INT 35
3529: PPUSH
3530: CALL_OW 67
// InGameOff ;
3534: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_STRING DF-Sol1-1
3545: PPUSH
3546: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3550: LD_EXP 1
3554: PPUSH
3555: LD_STRING DF-JMM-1
3557: PPUSH
3558: CALL_OW 88
// end ;
3562: PPOPN 1
3564: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3565: LD_INT 19
3567: PPUSH
3568: LD_INT 22
3570: PUSH
3571: LD_INT 3
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 70
3582: PUSH
3583: LD_INT 0
3585: EQUAL
3586: IFFALSE 3695
3588: GO 3590
3590: DISABLE
// begin if not IsDead ( Brian ) then
3591: LD_EXP 6
3595: PPUSH
3596: CALL_OW 301
3600: NOT
3601: IFFALSE 3615
// SetSide ( Brian , 1 ) ;
3603: LD_EXP 6
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: CALL_OW 235
// if not IsDead ( Jerry ) then
3615: LD_EXP 7
3619: PPUSH
3620: CALL_OW 301
3624: NOT
3625: IFFALSE 3639
// SetSide ( Jerry , 1 ) ;
3627: LD_EXP 7
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3639: LD_INT 22
3641: PUSH
3642: LD_INT 1
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 25
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PPUSH
3663: CALL_OW 69
3667: IFFALSE 3683
// Say ( JMM , DFa-JMM-1 ) else
3669: LD_EXP 1
3673: PPUSH
3674: LD_STRING DFa-JMM-1
3676: PPUSH
3677: CALL_OW 88
3681: GO 3695
// Say ( JMM , DFa-JMM-1a ) ;
3683: LD_EXP 1
3687: PPUSH
3688: LD_STRING DFa-JMM-1a
3690: PPUSH
3691: CALL_OW 88
// end ;
3695: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3696: LD_INT 19
3698: PPUSH
3699: LD_INT 22
3701: PUSH
3702: LD_INT 3
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PPUSH
3709: CALL_OW 70
3713: PUSH
3714: LD_INT 0
3716: EQUAL
3717: IFFALSE 3731
3719: PUSH
3720: LD_EXP 6
3724: PPUSH
3725: CALL_OW 302
3729: NOT
3730: AND
3731: IFFALSE 3817
3733: GO 3735
3735: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3736: LD_INT 35
3738: PPUSH
3739: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3743: LD_EXP 6
3747: PPUSH
3748: CALL_OW 256
3752: PUSH
3753: LD_INT 250
3755: GREATER
3756: IFFALSE 3736
// Say ( Brian , DFb-Sol1-1 ) ;
3758: LD_EXP 6
3762: PPUSH
3763: LD_STRING DFb-Sol1-1
3765: PPUSH
3766: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3770: LD_EXP 6
3774: PPUSH
3775: LD_INT 78
3777: PPUSH
3778: LD_INT 74
3780: PPUSH
3781: CALL_OW 111
// if IsDead ( Jerry ) then
3785: LD_EXP 7
3789: PPUSH
3790: CALL_OW 301
3794: IFFALSE 3810
// Say ( Brian , DFb-Sol1-1a ) else
3796: LD_EXP 6
3800: PPUSH
3801: LD_STRING DFb-Sol1-1a
3803: PPUSH
3804: CALL_OW 88
3808: GO 3817
// SetAchievement ( ACH_JERRY ) ;
3810: LD_STRING ACH_JERRY
3812: PPUSH
3813: CALL_OW 543
// end ;
3817: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3818: LD_INT 22
3820: PUSH
3821: LD_INT 1
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 21
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 0
3849: EQUAL
3850: IFFALSE 3942
3852: GO 3854
3854: DISABLE
3855: LD_INT 0
3857: PPUSH
// begin enable ;
3858: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3859: LD_ADDR_VAR 0 1
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 3
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 21
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: LD_INT 30
3886: PUSH
3887: LD_INT 31
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: FOR_IN
3905: IFFALSE 3940
// begin if See ( 1 , i ) then
3907: LD_INT 1
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 292
3919: IFFALSE 3938
// begin disable ;
3921: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3922: LD_EXP 1
3926: PPUSH
3927: LD_STRING DX1-JMM-1
3929: PPUSH
3930: CALL_OW 88
// exit ;
3934: POP
3935: POP
3936: GO 3942
// end ; end ;
3938: GO 3904
3940: POP
3941: POP
// end ;
3942: PPOPN 1
3944: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 11
3950: PPUSH
3951: CALL_OW 294
3955: IFFALSE 4218
3957: GO 3959
3959: DISABLE
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
3964: PPUSH
// begin DialogueOn ;
3965: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3969: LD_INT 11
3971: PPUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 21
3984: PUSH
3985: LD_INT 1
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 70
4000: PUSH
4001: LD_INT 1
4003: ARRAY
4004: PPUSH
4005: LD_STRING DX3-Rus1-1
4007: PPUSH
4008: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4012: LD_EXP 1
4016: PPUSH
4017: LD_STRING DX3-JMM-1
4019: PPUSH
4020: CALL_OW 88
// DialogueOff ;
4024: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4028: LD_ADDR_VAR 0 1
4032: PUSH
4033: LD_INT 11
4035: PPUSH
4036: LD_INT 22
4038: PUSH
4039: LD_INT 3
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 70
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4086
// southBaseDefenders = southBaseDefenders ^ i ;
4068: LD_ADDR_EXP 25
4072: PUSH
4073: LD_EXP 25
4077: PUSH
4078: LD_VAR 0 1
4082: ADD
4083: ST_TO_ADDR
4084: GO 4065
4086: POP
4087: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4088: LD_INT 175
4090: PUSH
4091: LD_INT 140
4093: PUSH
4094: LD_INT 105
4096: PUSH
4097: LD_INT 70
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_OWVAR 67
4110: ARRAY
4111: PPUSH
4112: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 1
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 25
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: ST_TO_ADDR
// if not mech then
4161: LD_VAR 0 3
4165: NOT
4166: IFFALSE 4170
// exit ;
4168: GO 4218
// ComExitBuilding ( mech ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: CALL_OW 122
// wait ( 0 0$1 ) ;
4179: LD_INT 35
4181: PPUSH
4182: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 1
4193: ARRAY
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4202: LD_VAR 0 3
4206: PUSH
4207: LD_INT 2
4209: ARRAY
4210: PPUSH
4211: LD_INT 4
4213: PPUSH
4214: CALL_OW 180
// end ;
4218: PPOPN 3
4220: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4221: LD_INT 1
4223: PPUSH
4224: LD_INT 5
4226: PPUSH
4227: CALL_OW 292
4231: IFTRUE 4245
4233: PUSH
4234: LD_INT 1
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: CALL_OW 292
4244: OR
4245: IFFALSE 4329
4247: GO 4249
4249: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4250: LD_INT 5
4252: PUSH
4253: LD_INT 4
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 85
// if IsOK ( Bobby ) then
4264: LD_EXP 2
4268: PPUSH
4269: CALL_OW 302
4273: IFFALSE 4309
// begin DialogueOn ;
4275: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4279: LD_EXP 2
4283: PPUSH
4284: LD_STRING DX2-Bobby-1
4286: PPUSH
4287: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4291: LD_EXP 1
4295: PPUSH
4296: LD_STRING DX2-JMM-1a
4298: PPUSH
4299: CALL_OW 88
// DialogueOff ;
4303: CALL_OW 7
// end else
4307: GO 4329
// begin DialogueOn ;
4309: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4313: LD_EXP 1
4317: PPUSH
4318: LD_STRING DX2-JMM-1
4320: PPUSH
4321: CALL_OW 88
// DialogueOff ;
4325: CALL_OW 7
// end ; end ;
4329: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4330: LD_INT 22
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 23
4342: PUSH
4343: LD_INT 3
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 21
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 34
4362: PUSH
4363: LD_INT 42
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: IFFALSE 4801
4382: GO 4384
4384: DISABLE
4385: LD_INT 0
4387: PPUSH
4388: PPUSH
4389: PPUSH
4390: PPUSH
4391: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4392: LD_ADDR_VAR 0 1
4396: PUSH
4397: LD_INT 22
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: LD_INT 23
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 34
4429: PUSH
4430: LD_INT 42
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 69
4447: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4448: LD_ADDR_VAR 0 3
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 26
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 1
4497: PUSH
4498: LD_EXP 3
4502: PUSH
4503: LD_EXP 2
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: DIFF
4513: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4514: LD_ADDR_VAR 0 4
4518: PUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 21
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 26
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 69
4558: PUSH
4559: LD_EXP 4
4563: PUSH
4564: EMPTY
4565: LIST
4566: DIFF
4567: ST_TO_ADDR
// if not tmp then
4568: LD_VAR 0 1
4572: NOT
4573: IFFALSE 4577
// exit ;
4575: GO 4801
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4577: LD_ADDR_VAR 0 2
4581: PUSH
4582: LD_VAR 0 1
4586: PUSH
4587: LD_INT 1
4589: ARRAY
4590: PPUSH
4591: CALL_OW 311
4595: ST_TO_ADDR
// if not speaker then
4596: LD_VAR 0 2
4600: NOT
4601: IFFALSE 4605
// exit ;
4603: GO 4801
// DialogueOn ;
4605: CALL_OW 6
// if speaker = JMM then
4609: LD_VAR 0 2
4613: PUSH
4614: LD_EXP 1
4618: EQUAL
4619: IFFALSE 4653
// begin if Lisa then
4621: LD_EXP 4
4625: IFFALSE 4639
// Say ( Lisa , DX2b-Lisa-1 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_STRING DX2b-Lisa-1
4634: PPUSH
4635: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4639: LD_EXP 1
4643: PPUSH
4644: LD_STRING DX2b-JMM-1
4646: PPUSH
4647: CALL_OW 88
// end else
4651: GO 4797
// begin Say ( JMM , DX2a-JMM-1 ) ;
4653: LD_EXP 1
4657: PPUSH
4658: LD_STRING DX2a-JMM-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Bobby then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 2
4674: EQUAL
4675: IFFALSE 4689
// Say ( Bobby , DX2a-Bobby-1 ) ;
4677: LD_EXP 2
4681: PPUSH
4682: LD_STRING DX2a-Bobby-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Cyrus then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 3
4698: EQUAL
4699: IFFALSE 4713
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4701: LD_EXP 3
4705: PPUSH
4706: LD_STRING DX2a-Cyrus-1
4708: PPUSH
4709: CALL_OW 88
// if speaker = Lisa then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_EXP 4
4722: EQUAL
4723: IFFALSE 4737
// Say ( Lisa , DX2a-Lisa-1 ) ;
4725: LD_EXP 4
4729: PPUSH
4730: LD_STRING DX2a-Lisa-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp1 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 3
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-Sol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-Sol1-1
4756: PPUSH
4757: CALL_OW 88
// if speaker in temp2 then
4761: LD_VAR 0 2
4765: PUSH
4766: LD_VAR 0 4
4770: IN
4771: IFFALSE 4785
// Say ( speaker , DX2a-FSol1-1 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_STRING DX2a-FSol1-1
4780: PPUSH
4781: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4785: LD_EXP 1
4789: PPUSH
4790: LD_STRING DX2a-JMM-2
4792: PPUSH
4793: CALL_OW 88
// end ; DialogueOff ;
4797: CALL_OW 7
// end ;
4801: PPOPN 5
4803: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 255
4811: PUSH
4812: LD_INT 1
4814: EQUAL
4815: IFTRUE 4830
4817: PUSH
4818: LD_INT 10
4820: PPUSH
4821: CALL_OW 255
4825: PUSH
4826: LD_INT 1
4828: EQUAL
4829: OR
4830: IFFALSE 4890
4832: GO 4834
4834: DISABLE
// begin DialogueOn ;
4835: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4839: LD_EXP 1
4843: PPUSH
4844: LD_STRING D3-JMM-1
4846: PPUSH
4847: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4851: LD_EXP 9
4855: PPUSH
4856: LD_STRING D3-Pow-1
4858: PPUSH
4859: CALL_OW 586
// if IsOK ( Cyrus ) then
4863: LD_EXP 3
4867: PPUSH
4868: CALL_OW 302
4872: IFFALSE 4886
// Say ( Cyrus , D3-Cyrus-1 ) ;
4874: LD_EXP 3
4878: PPUSH
4879: LD_STRING D3-Cyrus-1
4881: PPUSH
4882: CALL_OW 88
// DialogueOff ;
4886: CALL_OW 7
// end ;
4890: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4891: LD_INT 1
4893: PPUSH
4894: CALL_OW 255
4898: PUSH
4899: LD_INT 1
4901: EQUAL
4902: IFFALSE 4917
4904: PUSH
4905: LD_INT 10
4907: PPUSH
4908: CALL_OW 255
4912: PUSH
4913: LD_INT 1
4915: EQUAL
4916: AND
4917: IFFALSE 4928
4919: PUSH
4920: LD_INT 1
4922: PPUSH
4923: CALL_OW 302
4927: AND
4928: IFFALSE 4939
4930: PUSH
4931: LD_INT 10
4933: PPUSH
4934: CALL_OW 302
4938: AND
4939: IFFALSE 6331
4941: GO 4943
4943: DISABLE
4944: LD_INT 0
4946: PPUSH
4947: PPUSH
4948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PPUSH
4978: CALL_OW 69
4982: ST_TO_ADDR
// if tmp then
4983: LD_VAR 0 2
4987: IFFALSE 5048
// begin for i in tmp do
4989: LD_ADDR_VAR 0 3
4993: PUSH
4994: LD_VAR 0 2
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5046
// begin if IsInUnit ( i ) then
5002: LD_VAR 0 3
5006: PPUSH
5007: CALL_OW 310
5011: IFFALSE 5022
// ComExitBuilding ( i ) ;
5013: LD_VAR 0 3
5017: PPUSH
5018: CALL_OW 122
// wait ( 0 0$1 ) ;
5022: LD_INT 35
5024: PPUSH
5025: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_INT 54
5036: PPUSH
5037: LD_INT 17
5039: PPUSH
5040: CALL_OW 174
// end ;
5044: GO 4999
5046: POP
5047: POP
// end ; wait ( 0 0$03 ) ;
5048: LD_INT 105
5050: PPUSH
5051: CALL_OW 67
// DialogueOn ;
5055: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D3a-JMM-1
5066: PPUSH
5067: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5071: LD_EXP 9
5075: PPUSH
5076: LD_STRING D3a-Pow-1
5078: PPUSH
5079: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5083: LD_EXP 1
5087: PPUSH
5088: LD_STRING D3a-JMM-2
5090: PPUSH
5091: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5095: LD_EXP 9
5099: PPUSH
5100: LD_STRING D3a-Pow-2
5102: PPUSH
5103: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5107: LD_EXP 1
5111: PPUSH
5112: LD_STRING D3a-JMM-3
5114: PPUSH
5115: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5119: LD_EXP 9
5123: PPUSH
5124: LD_STRING D3a-Pow-3
5126: PPUSH
5127: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5131: LD_EXP 1
5135: PPUSH
5136: LD_STRING D3a-JMM-4
5138: PPUSH
5139: CALL_OW 88
// DialogueOff ;
5143: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5147: LD_STRING M2
5149: PPUSH
5150: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5154: LD_EXP 1
5158: PPUSH
5159: LD_STRING D3b-JMM-1
5161: PPUSH
5162: CALL_OW 88
// Hint ( Depot2 ) ;
5166: LD_STRING Depot2
5168: PPUSH
5169: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5173: LD_INT 35
5175: PPUSH
5176: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5180: LD_INT 22
5182: PPUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 25
5195: PUSH
5196: LD_INT 2
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 70
5211: IFFALSE 5244
5213: PUSH
5214: LD_INT 22
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 21
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: NOT
5243: AND
5244: IFFALSE 5173
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5246: LD_ADDR_VAR 0 1
5250: PUSH
5251: LD_INT 22
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 23
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 25
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 50
5283: PUSH
5284: EMPTY
5285: LIST
5286: PUSH
5287: LD_INT 56
5289: PUSH
5290: EMPTY
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: PUSH
5305: LD_EXP 1
5309: PUSH
5310: LD_EXP 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: DIFF
5319: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5320: LD_INT 35
5322: PPUSH
5323: CALL_OW 67
// until temp > 0 ;
5327: LD_VAR 0 1
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5246
// wait ( 0 0$5 ) ;
5337: LD_INT 175
5339: PPUSH
5340: CALL_OW 67
// PrepareRussianHeroes ;
5344: CALL 12098 0 0
// InGameOn ;
5348: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5352: LD_EXP 8
5356: PPUSH
5357: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5361: LD_EXP 1
5365: PUSH
5366: LD_VAR 0 1
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PPUSH
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5388: LD_EXP 8
5392: PPUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 119
// wait ( 0 0$02 ) ;
5406: LD_INT 70
5408: PPUSH
5409: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5413: LD_EXP 8
5417: PPUSH
5418: LD_STRING D4-Mikh-1
5420: PPUSH
5421: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5425: LD_VAR 0 1
5429: PUSH
5430: LD_INT 1
5432: ARRAY
5433: PPUSH
5434: CALL_OW 258
5438: PUSH
5439: LD_INT 1
5441: EQUAL
5442: IFFALSE 5460
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5444: LD_VAR 0 1
5448: PUSH
5449: LD_INT 1
5451: ARRAY
5452: PPUSH
5453: LD_STRING D4-Sol1-1
5455: PPUSH
5456: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5460: LD_VAR 0 1
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PPUSH
5469: CALL_OW 258
5473: PUSH
5474: LD_INT 2
5476: EQUAL
5477: IFFALSE 5495
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5479: LD_VAR 0 1
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: PPUSH
5488: LD_STRING D4-FSol1-1
5490: PPUSH
5491: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5495: LD_EXP 8
5499: PPUSH
5500: LD_STRING D4-Mikh-2
5502: PPUSH
5503: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5507: LD_VAR 0 1
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: CALL_OW 258
5520: PUSH
5521: LD_INT 1
5523: EQUAL
5524: IFFALSE 5542
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5526: LD_VAR 0 1
5530: PUSH
5531: LD_INT 1
5533: ARRAY
5534: PPUSH
5535: LD_STRING D4-Sol1-2
5537: PPUSH
5538: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5542: LD_VAR 0 1
5546: PUSH
5547: LD_INT 1
5549: ARRAY
5550: PPUSH
5551: CALL_OW 258
5555: PUSH
5556: LD_INT 2
5558: EQUAL
5559: IFFALSE 5577
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5561: LD_VAR 0 1
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: LD_STRING D4-FSol1-2
5572: PPUSH
5573: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5577: LD_EXP 8
5581: PPUSH
5582: LD_STRING D4-Mikh-3
5584: PPUSH
5585: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 258
5602: PUSH
5603: LD_INT 1
5605: EQUAL
5606: IFFALSE 5624
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5608: LD_VAR 0 1
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PPUSH
5617: LD_STRING D4-Sol1-3
5619: PPUSH
5620: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5624: LD_VAR 0 1
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 258
5637: PUSH
5638: LD_INT 2
5640: EQUAL
5641: IFFALSE 5659
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5643: LD_VAR 0 1
5647: PUSH
5648: LD_INT 1
5650: ARRAY
5651: PPUSH
5652: LD_STRING D4-FSol1-3
5654: PPUSH
5655: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5659: LD_EXP 8
5663: PPUSH
5664: LD_STRING D4-Mikh-4
5666: PPUSH
5667: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5671: LD_STRING Qs1
5673: PPUSH
5674: CALL_OW 97
5678: PUSH
5679: LD_INT 1
5681: DOUBLE
5682: EQUAL
5683: IFTRUE 5687
5685: GO 5722
5687: POP
// begin InGameOff ;
5688: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5692: LD_INT 1
5694: PPUSH
5695: LD_INT 6
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5708: LD_EXP 8
5712: PPUSH
5713: LD_INT 17
5715: PPUSH
5716: CALL_OW 113
// end ; 2 :
5720: GO 6315
5722: LD_INT 2
5724: DOUBLE
5725: EQUAL
5726: IFTRUE 5730
5728: GO 6280
5730: POP
// begin repeat wait ( 0 0$1 ) ;
5731: LD_INT 35
5733: PPUSH
5734: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5738: LD_VAR 0 1
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5751: LD_VAR 0 1
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PPUSH
5760: LD_EXP 1
5764: PPUSH
5765: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_EXP 8
5792: PPUSH
5793: CALL_OW 296
5797: PUSH
5798: LD_INT 5
5800: LESS
5801: IFFALSE 5731
// ComTurnUnit ( Mikhail , JMM ) ;
5803: LD_EXP 8
5807: PPUSH
5808: LD_EXP 1
5812: PPUSH
5813: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5817: LD_EXP 1
5821: PPUSH
5822: LD_STRING D4b-JMM-1
5824: PPUSH
5825: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5829: LD_EXP 8
5833: PPUSH
5834: LD_STRING D4b-Mikh-1
5836: PPUSH
5837: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5841: LD_EXP 1
5845: PPUSH
5846: LD_STRING D4b-JMM-2
5848: PPUSH
5849: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5853: LD_EXP 8
5857: PPUSH
5858: LD_STRING D4b-Mikh-2
5860: PPUSH
5861: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5865: LD_EXP 1
5869: PPUSH
5870: LD_STRING D4b-JMM-3
5872: PPUSH
5873: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5877: LD_EXP 8
5881: PPUSH
5882: LD_STRING D4b-Mikh-3
5884: PPUSH
5885: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5889: LD_EXP 1
5893: PPUSH
5894: LD_STRING D4b-JMM-4
5896: PPUSH
5897: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5901: LD_EXP 8
5905: PPUSH
5906: LD_STRING D4b-Mikh-4
5908: PPUSH
5909: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5913: LD_EXP 1
5917: PPUSH
5918: LD_STRING D4b-JMM-5
5920: PPUSH
5921: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5925: LD_EXP 8
5929: PPUSH
5930: LD_STRING D4b-Mikh-5
5932: PPUSH
5933: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5937: LD_EXP 1
5941: PPUSH
5942: LD_STRING D4b-JMM-6
5944: PPUSH
5945: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5949: LD_EXP 8
5953: PPUSH
5954: LD_STRING D4b-Mikh-6
5956: PPUSH
5957: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5961: LD_EXP 1
5965: PPUSH
5966: LD_STRING D4b-JMM-7
5968: PPUSH
5969: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5973: LD_EXP 8
5977: PPUSH
5978: LD_STRING D4b-Mikh-7
5980: PPUSH
5981: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5985: LD_VAR 0 1
5989: PUSH
5990: LD_INT 1
5992: ARRAY
5993: PPUSH
5994: CALL_OW 258
5998: PUSH
5999: LD_INT 1
6001: EQUAL
6002: IFFALSE 6020
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6004: LD_VAR 0 1
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_STRING D4b-Sol1-7
6015: PPUSH
6016: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6020: LD_VAR 0 1
6024: PUSH
6025: LD_INT 1
6027: ARRAY
6028: PPUSH
6029: CALL_OW 258
6033: PUSH
6034: LD_INT 2
6036: EQUAL
6037: IFFALSE 6055
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6039: LD_VAR 0 1
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_STRING D4b-FSol1-7
6050: PPUSH
6051: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D4b-JMM-8
6062: PPUSH
6063: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6067: LD_VAR 0 1
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PPUSH
6076: CALL_OW 258
6080: PUSH
6081: LD_INT 1
6083: EQUAL
6084: IFFALSE 6102
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6086: LD_VAR 0 1
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_STRING D4b-Sol1-8
6097: PPUSH
6098: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6102: LD_VAR 0 1
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: CALL_OW 258
6115: PUSH
6116: LD_INT 2
6118: EQUAL
6119: IFFALSE 6137
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6121: LD_VAR 0 1
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PPUSH
6130: LD_STRING D4b-FSol1-8
6132: PPUSH
6133: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D4b-JMM-9
6144: PPUSH
6145: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6149: LD_EXP 8
6153: PPUSH
6154: LD_INT 1
6156: PPUSH
6157: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: PPUSH
6179: CALL_OW 69
6183: PUSH
6184: FOR_IN
6185: IFFALSE 6198
// ComFree ( i ) ;
6187: LD_VAR 0 3
6191: PPUSH
6192: CALL_OW 139
6196: GO 6184
6198: POP
6199: POP
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6216: LD_EXP 8
6220: PUSH
6221: LD_VAR 0 1
6225: PUSH
6226: LD_INT 1
6228: ARRAY
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_INT 1
6236: PPUSH
6237: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6241: LD_EXP 8
6245: PPUSH
6246: CALL_OW 310
6250: IFFALSE 6200
// mikhailDepot = IsInUnit ( Mikhail ) ;
6252: LD_ADDR_EXP 23
6256: PUSH
6257: LD_EXP 8
6261: PPUSH
6262: CALL_OW 310
6266: ST_TO_ADDR
// InGameOff ;
6267: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6271: LD_STRING M3
6273: PPUSH
6274: CALL_OW 337
// end ; 3 :
6278: GO 6315
6280: LD_INT 3
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6314
6288: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6289: LD_EXP 8
6293: PPUSH
6294: LD_INT 17
6296: PPUSH
6297: CALL_OW 113
// wait ( 0 0$3 ) ;
6301: LD_INT 105
6303: PPUSH
6304: CALL_OW 67
// InGameOff ;
6308: CALL_OW 9
// end ; end ;
6312: GO 6315
6314: POP
// PrepareTigers ;
6315: CALL 15611 0 0
// RussianTrap ;
6319: CALL 10421 0 0
// tigersRespawn := true ;
6323: LD_ADDR_EXP 30
6327: PUSH
6328: LD_INT 1
6330: ST_TO_ADDR
// end ;
6331: PPOPN 3
6333: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6334: LD_INT 1
6336: PPUSH
6337: CALL_OW 255
6341: PUSH
6342: LD_INT 1
6344: EQUAL
6345: IFFALSE 6360
6347: PUSH
6348: LD_INT 10
6350: PPUSH
6351: CALL_OW 255
6355: PUSH
6356: LD_INT 1
6358: EQUAL
6359: AND
6360: IFFALSE 6383
6362: PUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 274
6370: PPUSH
6371: LD_INT 1
6373: PPUSH
6374: CALL_OW 275
6378: PUSH
6379: LD_INT 100
6381: GREATEREQUAL
6382: AND
6383: IFFALSE 6532
6385: GO 6387
6387: DISABLE
6388: LD_INT 0
6390: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6391: LD_INT 2100
6393: PPUSH
6394: LD_INT 4200
6396: PPUSH
6397: CALL_OW 12
6401: PUSH
6402: LD_INT 1050
6404: PLUS
6405: PPUSH
6406: CALL_OW 67
// PrepareCargoBays ;
6410: CALL 13281 0 0
// cargoRespawn = 1 ;
6414: LD_ADDR_EXP 28
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_EXP 15
6431: PUSH
6432: LD_EXP 16
6436: PUSH
6437: LD_EXP 17
6441: PUSH
6442: LD_EXP 18
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6453: LD_VAR 0 1
6457: PPUSH
6458: LD_INT 17
6460: PPUSH
6461: LD_INT 10
6463: PPUSH
6464: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_INT 36
6475: PPUSH
6476: LD_INT 13
6478: PPUSH
6479: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6483: LD_VAR 0 1
6487: PPUSH
6488: LD_INT 40
6490: PPUSH
6491: LD_INT 20
6493: PPUSH
6494: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 53
6505: PPUSH
6506: LD_INT 16
6508: PPUSH
6509: CALL_OW 171
// wait ( 0 0$5 ) ;
6513: LD_INT 175
6515: PPUSH
6516: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6520: LD_EXP 17
6524: PPUSH
6525: LD_STRING D5-Rus2-1
6527: PPUSH
6528: CALL_OW 88
// end ;
6532: PPOPN 1
6534: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6535: LD_EXP 28
6539: PUSH
6540: LD_INT 1
6542: EQUAL
6543: IFFALSE 6700
6545: GO 6547
6547: DISABLE
6548: LD_INT 0
6550: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 34
6578: PUSH
6579: LD_INT 51
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6596: LD_INT 105
6598: PPUSH
6599: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6603: LD_VAR 0 1
6607: PPUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 60
6613: PUSH
6614: EMPTY
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 72
6625: IFTRUE 6655
6627: PUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 980
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: CALL_OW 72
6654: OR
6655: IFFALSE 6596
// ComMoveXY ( cargos , 7 , 9 ) ;
6657: LD_VAR 0 1
6661: PPUSH
6662: LD_INT 7
6664: PPUSH
6665: LD_INT 9
6667: PPUSH
6668: CALL_OW 111
// cargoSee = 1 ;
6672: LD_ADDR_EXP 29
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// cargoEscape = 1 ;
6680: LD_ADDR_EXP 20
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6688: LD_EXP 17
6692: PPUSH
6693: LD_STRING D5-Rus2-1a
6695: PPUSH
6696: CALL_OW 88
// end ;
6700: PPOPN 1
6702: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6703: LD_EXP 20
6707: IFFALSE 6756
6709: PUSH
6710: LD_EXP 15
6714: PUSH
6715: LD_EXP 16
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: LD_INT 50
6726: PUSH
6727: EMPTY
6728: LIST
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_INT 3
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 52
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: PPUSH
6751: CALL_OW 72
6755: AND
6756: IFFALSE 7093
6758: GO 6760
6760: DISABLE
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
6766: PPUSH
// begin enable ;
6767: ENABLE
// for i in [ cargo1 , cargo2 ] do
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_EXP 15
6777: PUSH
6778: LD_EXP 16
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: FOR_IN
6788: IFFALSE 7091
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_VAR 0 2
6799: PPUSH
6800: CALL_OW 250
6804: PPUSH
6805: LD_VAR 0 2
6809: PPUSH
6810: CALL_OW 251
6814: PPUSH
6815: LD_INT 6
6817: PPUSH
6818: CALL 79226 0 3
6822: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6823: LD_VAR 0 1
6827: IFFALSE 6848
6829: PUSH
6830: LD_VAR 0 2
6834: PPUSH
6835: CALL 80457 0 1
6839: PUSH
6840: LD_INT 4
6842: ARRAY
6843: PUSH
6844: LD_INT 60
6846: LESS
6847: AND
6848: IFFALSE 6887
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_VAR 0 1
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: PUSH
6864: LD_INT 1
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 1
6875: ARRAY
6876: PUSH
6877: LD_INT 2
6879: ARRAY
6880: PPUSH
6881: CALL_OW 117
6885: GO 7089
// if not IsInArea ( i , RemoveArea ) then
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_INT 32
6894: PPUSH
6895: CALL_OW 308
6899: NOT
6900: IFFALSE 7050
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL_OW 250
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: LD_INT 3
6922: PPUSH
6923: CALL_OW 272
6927: ST_TO_ADDR
// y := GetY ( i ) ;
6928: LD_ADDR_VAR 0 4
6932: PUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: CALL_OW 251
6942: ST_TO_ADDR
// if HexInfo ( x , y ) then
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 428
6957: IFFALSE 6980
// x := ShiftX ( x , 4 , 3 ) ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: LD_VAR 0 3
6968: PPUSH
6969: LD_INT 4
6971: PPUSH
6972: LD_INT 3
6974: PPUSH
6975: CALL_OW 272
6979: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_VAR 0 4
6989: PPUSH
6990: CALL_OW 428
6994: IFTRUE 7013
6996: PUSH
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 488
7011: NOT
7012: OR
7013: IFFALSE 7029
// ComMoveToArea ( i , RemoveArea ) else
7015: LD_VAR 0 2
7019: PPUSH
7020: LD_INT 32
7022: PPUSH
7023: CALL_OW 113
7027: GO 7048
// ComMoveXY ( i , x , y ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: LD_VAR 0 4
7043: PPUSH
7044: CALL_OW 111
// end else
7048: GO 7089
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: CALL_OW 311
7059: PPUSH
7060: CALL_OW 64
// RemoveUnit ( i ) ;
7064: LD_VAR 0 2
7068: PPUSH
7069: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7073: LD_ADDR_EXP 20
7077: PUSH
7078: LD_EXP 20
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ST_TO_ADDR
// continue ;
7087: GO 6787
// end ; end ;
7089: GO 6787
7091: POP
7092: POP
// end ;
7093: PPOPN 4
7095: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7096: LD_EXP 20
7100: PUSH
7101: LD_INT 1
7103: GREATER
7104: IFFALSE 7353
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7112: LD_INT 4
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7125: LD_INT 31
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL_OW 324
// Hint ( Bunker ) ;
7138: LD_STRING Bunker
7140: PPUSH
7141: CALL_OW 339
// if IsOK ( Jerry ) then
7145: LD_EXP 7
7149: PPUSH
7150: CALL_OW 302
7154: IFFALSE 7170
// Say ( Jerry , D5a-Sol1-1 ) else
7156: LD_EXP 7
7160: PPUSH
7161: LD_STRING D5a-Sol1-1
7163: PPUSH
7164: CALL_OW 88
7168: GO 7256
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 1
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 26
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PUSH
7204: LD_EXP 1
7208: PUSH
7209: LD_EXP 2
7213: PUSH
7214: LD_EXP 3
7218: PUSH
7219: LD_EXP 5
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: DIFF
7230: ST_TO_ADDR
// if not speaker then
7231: LD_VAR 0 1
7235: NOT
7236: IFFALSE 7240
// exit ;
7238: GO 7353
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7240: LD_VAR 0 1
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: PPUSH
7249: LD_STRING D5a-Sol1-1
7251: PPUSH
7252: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7256: LD_EXP 1
7260: PPUSH
7261: LD_STRING D5a-JMM-1
7263: PPUSH
7264: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7268: LD_INT 22
7270: PPUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 25
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: IFFALSE 7353
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7301: LD_INT 22
7303: PPUSH
7304: LD_INT 22
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: PUSH
7333: LD_INT 1
7335: ARRAY
7336: PPUSH
7337: LD_INT 31
7339: PPUSH
7340: LD_INT 44
7342: PPUSH
7343: LD_INT 13
7345: PPUSH
7346: LD_INT 1
7348: PPUSH
7349: CALL_OW 145
// end ;
7353: PPOPN 1
7355: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7356: LD_INT 1
7358: PPUSH
7359: CALL_OW 255
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7382
7369: PUSH
7370: LD_INT 1
7372: PPUSH
7373: CALL_OW 256
7377: PUSH
7378: LD_INT 1000
7380: LESS
7381: AND
7382: IFTRUE 7412
7384: PUSH
7385: LD_INT 10
7387: PPUSH
7388: CALL_OW 255
7392: PUSH
7393: LD_INT 3
7395: EQUAL
7396: IFFALSE 7411
7398: PUSH
7399: LD_INT 10
7401: PPUSH
7402: CALL_OW 256
7406: PUSH
7407: LD_INT 1000
7409: LESS
7410: AND
7411: OR
7412: IFFALSE 7429
7414: GO 7416
7416: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7417: LD_EXP 1
7421: PPUSH
7422: LD_STRING D8-JMM-1
7424: PPUSH
7425: CALL_OW 88
7429: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7430: LD_EXP 8
7434: PPUSH
7435: CALL_OW 310
7439: PUSH
7440: LD_INT 1
7442: EQUAL
7443: IFFALSE 7456
7445: PUSH
7446: LD_EXP 22
7450: PUSH
7451: LD_INT 3
7453: EQUAL
7454: NOT
7455: AND
7456: IFFALSE 7478
7458: GO 7460
7460: DISABLE
// begin enable ;
7461: ENABLE
// mikhailInBase = 1 ;
7462: LD_ADDR_EXP 22
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// mikhailStatus = 1 ;
7470: LD_ADDR_EXP 21
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// end ;
7478: END
// export function AskMikhail ; begin
7479: LD_INT 0
7481: PPUSH
// case Query ( QMikh2 ) of 1 :
7482: LD_STRING QMikh2
7484: PPUSH
7485: CALL_OW 97
7489: PUSH
7490: LD_INT 1
7492: DOUBLE
7493: EQUAL
7494: IFTRUE 7498
7496: GO 7565
7498: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7499: LD_INT 1
7501: PPUSH
7502: LD_INT 6
7504: PPUSH
7505: LD_INT 2
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7515: LD_EXP 8
7519: PPUSH
7520: LD_INT 6
7522: PPUSH
7523: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7527: LD_EXP 8
7531: PPUSH
7532: CALL_OW 122
// wait ( 0 0$1 ) ;
7536: LD_INT 35
7538: PPUSH
7539: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7543: LD_EXP 8
7547: PPUSH
7548: LD_INT 17
7550: PPUSH
7551: CALL_OW 113
// mikhailInbase = 0 ;
7555: LD_ADDR_EXP 22
7559: PUSH
7560: LD_INT 0
7562: ST_TO_ADDR
// end ; 2 :
7563: GO 7806
7565: LD_INT 2
7567: DOUBLE
7568: EQUAL
7569: IFTRUE 7573
7571: GO 7746
7573: POP
// begin mikhailInBase = 2 ;
7574: LD_ADDR_EXP 22
7578: PUSH
7579: LD_INT 2
7581: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7582: LD_EXP 8
7586: PPUSH
7587: LD_INT 6
7589: PPUSH
7590: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7594: LD_EXP 8
7598: PPUSH
7599: CALL_OW 122
// wait ( 0 0$1 ) ;
7603: LD_INT 35
7605: PPUSH
7606: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7610: LD_EXP 8
7614: PPUSH
7615: LD_EXP 8
7619: PPUSH
7620: CALL_OW 250
7624: PUSH
7625: LD_INT 2
7627: PLUS
7628: PPUSH
7629: LD_EXP 8
7633: PPUSH
7634: CALL_OW 251
7638: PUSH
7639: LD_INT 2
7641: PLUS
7642: PPUSH
7643: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7647: LD_EXP 8
7651: PPUSH
7652: LD_EXP 8
7656: PPUSH
7657: CALL_OW 250
7661: PUSH
7662: LD_INT 1
7664: PLUS
7665: PPUSH
7666: LD_EXP 8
7670: PPUSH
7671: CALL_OW 251
7675: PUSH
7676: LD_INT 2
7678: PLUS
7679: PPUSH
7680: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7684: LD_EXP 8
7688: PPUSH
7689: LD_EXP 8
7693: PPUSH
7694: CALL_OW 250
7698: PUSH
7699: LD_INT 2
7701: PLUS
7702: PPUSH
7703: LD_EXP 8
7707: PPUSH
7708: CALL_OW 251
7712: PPUSH
7713: CALL_OW 171
// wait ( 0 0$5 ) ;
7717: LD_INT 175
7719: PPUSH
7720: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7724: LD_EXP 8
7728: PPUSH
7729: LD_INT 25
7731: PPUSH
7732: CALL_OW 113
// mikhailInBase = 4 ;
7736: LD_ADDR_EXP 22
7740: PUSH
7741: LD_INT 4
7743: ST_TO_ADDR
// end ; 3 :
7744: GO 7806
7746: LD_INT 3
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7805
7754: POP
// begin SetSide ( Mikhail , 6 ) ;
7755: LD_EXP 8
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7767: LD_EXP 8
7771: PPUSH
7772: CALL_OW 122
// wait ( 0 0$1 ) ;
7776: LD_INT 35
7778: PPUSH
7779: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7783: LD_EXP 8
7787: PPUSH
7788: LD_INT 17
7790: PPUSH
7791: CALL_OW 113
// mikhailInbase = 3 ;
7795: LD_ADDR_EXP 22
7799: PUSH
7800: LD_INT 3
7802: ST_TO_ADDR
// end ; end ;
7803: GO 7806
7805: POP
// end ;
7806: LD_VAR 0 1
7810: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7811: LD_EXP 8
7815: PPUSH
7816: LD_INT 25
7818: PPUSH
7819: CALL_OW 308
7823: IFFALSE 7835
7825: PUSH
7826: LD_EXP 22
7830: PUSH
7831: LD_INT 4
7833: EQUAL
7834: AND
7835: IFFALSE 7939
7837: GO 7839
7839: DISABLE
// begin enable ;
7840: ENABLE
// mikhailInBase = 1 ;
7841: LD_ADDR_EXP 22
7845: PUSH
7846: LD_INT 1
7848: ST_TO_ADDR
// InGameOn ;
7849: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7853: LD_INT 1
7855: PPUSH
7856: LD_INT 6
7858: PPUSH
7859: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7863: LD_INT 35
7865: PPUSH
7866: CALL_OW 67
// if Carry ( Mikhail ) then
7870: LD_EXP 8
7874: PPUSH
7875: CALL_OW 281
7879: IFFALSE 7890
// ComUnload ( Mikhail ) ;
7881: LD_EXP 8
7885: PPUSH
7886: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7890: LD_EXP 8
7894: PPUSH
7895: LD_INT 1
7897: PPUSH
7898: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7902: LD_EXP 8
7906: PPUSH
7907: CALL_OW 310
7911: IFFALSE 7863
// SetSide ( dep1 , 1 ) ;
7913: LD_INT 1
7915: PPUSH
7916: LD_INT 1
7918: PPUSH
7919: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7923: LD_EXP 8
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: CALL_OW 235
// InGameOff ;
7935: CALL_OW 9
// end ;
7939: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7940: LD_EXP 8
7944: PPUSH
7945: CALL_OW 310
7949: IFFALSE 7962
7951: PUSH
7952: LD_EXP 22
7956: PUSH
7957: LD_INT 3
7959: EQUAL
7960: NOT
7961: AND
7962: IFFALSE 8097
7964: GO 7966
7966: DISABLE
// begin enable ;
7967: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 91
7990: PUSH
7991: LD_EXP 8
7995: PPUSH
7996: CALL_OW 310
8000: PUSH
8001: LD_INT 10
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: IFFALSE 8097
// begin mikhailStatus = 4 ;
8024: LD_ADDR_EXP 21
8028: PUSH
8029: LD_INT 4
8031: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8032: LD_INT 1
8034: PPUSH
8035: LD_INT 6
8037: PPUSH
8038: LD_INT 2
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8048: LD_EXP 8
8052: PPUSH
8053: LD_INT 6
8055: PPUSH
8056: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8060: LD_EXP 8
8064: PPUSH
8065: CALL_OW 122
// wait ( 0 0$1 ) ;
8069: LD_INT 35
8071: PPUSH
8072: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8076: LD_EXP 8
8080: PPUSH
8081: LD_INT 17
8083: PPUSH
8084: CALL_OW 113
// mikhailStatus = 3 ;
8088: LD_ADDR_EXP 21
8092: PUSH
8093: LD_INT 3
8095: ST_TO_ADDR
// disable ;
8096: DISABLE
// end ; end ;
8097: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8098: LD_EXP 1
8102: PPUSH
8103: LD_EXP 23
8107: PPUSH
8108: CALL_OW 296
8112: PUSH
8113: LD_INT 5
8115: LESS
8116: IFFALSE 8128
8118: PUSH
8119: LD_EXP 21
8123: PUSH
8124: LD_INT 3
8126: EQUAL
8127: AND
8128: IFFALSE 8141
8130: PUSH
8131: LD_EXP 22
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: NOT
8140: AND
8141: IFFALSE 8374
8143: GO 8145
8145: DISABLE
8146: LD_INT 0
8148: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8149: LD_ADDR_VAR 0 1
8153: PUSH
8154: LD_INT 22
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 26
8176: PUSH
8177: LD_INT 1
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 69
8193: PUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_EXP 5
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: DIFF
8208: ST_TO_ADDR
// if not tmp then
8209: LD_VAR 0 1
8213: NOT
8214: IFFALSE 8218
// exit ;
8216: GO 8374
// DialogueOn ;
8218: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8222: LD_EXP 1
8226: PPUSH
8227: LD_STRING D7-JMM-1
8229: PPUSH
8230: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8234: LD_VAR 0 1
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: LD_STRING D7-Sol1-1
8245: PPUSH
8246: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8250: LD_EXP 1
8254: PPUSH
8255: LD_STRING D7-JMM-2
8257: PPUSH
8258: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8262: LD_VAR 0 1
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_STRING D7-Sol1-2
8273: PPUSH
8274: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8278: LD_EXP 1
8282: PPUSH
8283: LD_STRING D7-JMM-3
8285: PPUSH
8286: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8290: LD_VAR 0 1
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: PPUSH
8299: LD_STRING D7-Sol1-3
8301: PPUSH
8302: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8306: LD_EXP 3
8310: PPUSH
8311: CALL_OW 302
8315: IFFALSE 8328
8317: PUSH
8318: LD_EXP 4
8322: PPUSH
8323: CALL_OW 302
8327: AND
8328: IFFALSE 8370
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8330: LD_EXP 3
8334: PPUSH
8335: LD_STRING D7-Cyrus-3
8337: PPUSH
8338: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8342: LD_VAR 0 1
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: LD_STRING D7-Sol1-4
8353: PPUSH
8354: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8358: LD_EXP 4
8362: PPUSH
8363: LD_STRING D7-Lisa-4
8365: PPUSH
8366: CALL_OW 88
// end ; DialogueOff ;
8370: CALL_OW 7
// end ;
8374: PPOPN 1
8376: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8377: LD_EXP 8
8381: PPUSH
8382: CALL_OW 303
8386: IFFALSE 8398
8388: PUSH
8389: LD_EXP 21
8393: PUSH
8394: LD_INT 3
8396: EQUAL
8397: AND
8398: IFFALSE 8412
8400: GO 8402
8402: DISABLE
// begin enable ;
8403: ENABLE
// mikhailStatus = 2 ;
8404: LD_ADDR_EXP 21
8408: PUSH
8409: LD_INT 2
8411: ST_TO_ADDR
// end ;
8412: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8413: LD_EXP 8
8417: PPUSH
8418: LD_INT 17
8420: PPUSH
8421: CALL_OW 308
8425: IFFALSE 8442
8427: PUSH
8428: LD_EXP 8
8432: PPUSH
8433: CALL_OW 255
8437: PUSH
8438: LD_INT 6
8440: EQUAL
8441: AND
8442: IFFALSE 8475
8444: GO 8446
8446: DISABLE
// begin if not mikhailInBase = 3 then
8447: LD_EXP 22
8451: PUSH
8452: LD_INT 3
8454: EQUAL
8455: NOT
8456: IFFALSE 8466
// mikhailStatus = 3 ;
8458: LD_ADDR_EXP 21
8462: PUSH
8463: LD_INT 3
8465: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8466: LD_EXP 8
8470: PPUSH
8471: CALL_OW 64
// end ;
8475: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8476: LD_EXP 21
8480: PUSH
8481: LD_INT 3
8483: EQUAL
8484: IFFALSE 8501
8486: PUSH
8487: LD_EXP 8
8491: PPUSH
8492: CALL_OW 255
8496: PUSH
8497: LD_INT 6
8499: EQUAL
8500: AND
8501: IFFALSE 8694
8503: GO 8505
8505: DISABLE
8506: LD_INT 0
8508: PPUSH
8509: PPUSH
// begin enable ;
8510: ENABLE
// if IsOk ( Mikhail ) then
8511: LD_EXP 8
8515: PPUSH
8516: CALL_OW 302
8520: IFFALSE 8694
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8522: LD_ADDR_VAR 0 2
8526: PUSH
8527: LD_EXP 8
8531: PPUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 69
8560: PPUSH
8561: CALL 10615 0 2
8565: PUSH
8566: LD_EXP 1
8570: PUSH
8571: LD_EXP 2
8575: PUSH
8576: LD_EXP 3
8580: PUSH
8581: LD_EXP 4
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: DIFF
8592: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_EXP 8
8602: PPUSH
8603: CALL_OW 296
8607: PUSH
8608: LD_INT 10
8610: LESS
8611: IFFALSE 8694
// begin if GetSex ( attacker ) = sex_male then
8613: LD_VAR 0 2
8617: PPUSH
8618: CALL_OW 258
8622: PUSH
8623: LD_INT 1
8625: EQUAL
8626: IFFALSE 8662
// begin disable ;
8628: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_STRING D7a-Sol1-1
8636: PPUSH
8637: CALL_OW 88
// wait ( 0 0$2 ) ;
8641: LD_INT 70
8643: PPUSH
8644: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8648: LD_VAR 0 2
8652: PPUSH
8653: LD_STRING D7a-Sol1-1a
8655: PPUSH
8656: CALL_OW 88
// end else
8660: GO 8694
// begin disable ;
8662: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8663: LD_VAR 0 2
8667: PPUSH
8668: LD_STRING D7a-FSol1-1
8670: PPUSH
8671: CALL_OW 88
// wait ( 0 0$2 ) ;
8675: LD_INT 70
8677: PPUSH
8678: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8682: LD_VAR 0 2
8686: PPUSH
8687: LD_STRING D7a-FSol1-1a
8689: PPUSH
8690: CALL_OW 88
// end ; end ; end ; end ;
8694: PPOPN 2
8696: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8697: LD_EXP 27
8701: PUSH
8702: LD_INT 1
8704: EQUAL
8705: IFFALSE 8744
8707: PUSH
8708: LD_INT 22
8710: PPUSH
8711: LD_INT 22
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 21
8723: PUSH
8724: LD_INT 1
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 70
8739: PUSH
8740: LD_INT 2
8742: GREATER
8743: AND
8744: IFFALSE 8797
8746: PUSH
8747: LD_INT 22
8749: PPUSH
8750: LD_INT 22
8752: PUSH
8753: LD_INT 1
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 2
8762: PUSH
8763: LD_INT 21
8765: PUSH
8766: LD_INT 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 59
8775: PUSH
8776: EMPTY
8777: LIST
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 70
8792: PUSH
8793: LD_INT 0
8795: EQUAL
8796: AND
8797: IFFALSE 8812
8799: GO 8801
8801: DISABLE
// SetSide ( dep1 , 3 ) ;
8802: LD_INT 1
8804: PPUSH
8805: LD_INT 3
8807: PPUSH
8808: CALL_OW 235
8812: END
// export function JMMTraitor ; var i ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
// if traitor then
8817: LD_EXP 33
8821: IFFALSE 8825
// exit ;
8823: GO 8962
// traitor := true ;
8825: LD_ADDR_EXP 33
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if IsOk ( Lisa ) then
8833: LD_EXP 4
8837: PPUSH
8838: CALL_OW 302
8842: IFFALSE 8864
// begin DialogueOn ;
8844: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8848: LD_EXP 4
8852: PPUSH
8853: LD_STRING D10-Lisa-Traitor
8855: PPUSH
8856: CALL_OW 88
// DialogueOff ;
8860: CALL_OW 7
// end ; ComExit ( JMM ) ;
8864: LD_EXP 1
8868: PPUSH
8869: CALL 77116 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8873: LD_INT 1
8875: PPUSH
8876: LD_INT 4
8878: PPUSH
8879: LD_INT 2
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8889: LD_ADDR_VAR 0 2
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 69
8908: PUSH
8909: LD_EXP 1
8913: DIFF
8914: PUSH
8915: FOR_IN
8916: IFFALSE 8946
// begin SetSide ( i , 4 ) ;
8918: LD_VAR 0 2
8922: PPUSH
8923: LD_INT 4
8925: PPUSH
8926: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_EXP 1
8939: PPUSH
8940: CALL_OW 115
// end ;
8944: GO 8915
8946: POP
8947: POP
// wait ( 0 0$30 ) ;
8948: LD_INT 1050
8950: PPUSH
8951: CALL_OW 67
// YouLost ( Traitor ) ;
8955: LD_STRING Traitor
8957: PPUSH
8958: CALL_OW 104
// end ;
8962: LD_VAR 0 1
8966: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8967: LD_EXP 30
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9011
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 0
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 14
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 69
9006: PUSH
9007: LD_INT 0
9009: EQUAL
9010: AND
9011: IFFALSE 9112
9013: GO 9015
9015: DISABLE
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
9020: LD_ADDR_VAR 0 2
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 21
9037: PUSH
9038: LD_INT 1
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 23
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 69
9064: ST_TO_ADDR
// for i in tmp do
9065: LD_ADDR_VAR 0 1
9069: PUSH
9070: LD_VAR 0 2
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9103
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9078: LD_VAR 0 1
9082: PPUSH
9083: LD_INT 1
9085: PPUSH
9086: LD_INT 4
9088: PPUSH
9089: CALL_OW 12
9093: PPUSH
9094: LD_INT 300
9096: PPUSH
9097: CALL_OW 492
9101: GO 9075
9103: POP
9104: POP
// SetAchievement ( ACH_TIGER ) ;
9105: LD_STRING ACH_TIGER
9107: PPUSH
9108: CALL_OW 543
// end ;
9112: PPOPN 2
9114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9115: LD_INT 22
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 34
9127: PUSH
9128: LD_INT 51
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 69
9143: PUSH
9144: LD_INT 2
9146: GREATEREQUAL
9147: IFFALSE 9159
9149: GO 9151
9151: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9152: LD_STRING ACH_CARGO
9154: PPUSH
9155: CALL_OW 543
9159: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
9164: PPUSH
// for i = 1 to count do
9165: LD_ADDR_VAR 0 8
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_VAR 0 6
9179: PUSH
9180: FOR_TO
9181: IFFALSE 9262
// begin uc_side = side ;
9183: LD_ADDR_OWVAR 20
9187: PUSH
9188: LD_VAR 0 1
9192: ST_TO_ADDR
// uc_nation = nation ;
9193: LD_ADDR_OWVAR 21
9197: PUSH
9198: LD_VAR 0 2
9202: ST_TO_ADDR
// hc_gallery =  ;
9203: LD_ADDR_OWVAR 33
9207: PUSH
9208: LD_STRING 
9210: ST_TO_ADDR
// hc_name =  ;
9211: LD_ADDR_OWVAR 26
9215: PUSH
9216: LD_STRING 
9218: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9219: LD_INT 0
9221: PPUSH
9222: LD_VAR 0 5
9226: PPUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 380
// un = CreateHuman ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: CALL_OW 44
9245: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9246: LD_VAR 0 9
9250: PPUSH
9251: LD_VAR 0 3
9255: PPUSH
9256: CALL_OW 52
// end ;
9260: GO 9180
9262: POP
9263: POP
// end ;
9264: LD_VAR 0 7
9268: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
// uc_side := GetSide ( b ) ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_VAR 0 2
9283: PPUSH
9284: CALL_OW 255
9288: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9289: LD_ADDR_OWVAR 21
9293: PUSH
9294: LD_VAR 0 2
9298: PPUSH
9299: CALL_OW 248
9303: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9304: LD_INT 0
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 380
// un = CreateHuman ;
9319: LD_ADDR_VAR 0 4
9323: PUSH
9324: CALL_OW 44
9328: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9329: LD_ADDR_VAR 0 5
9333: PUSH
9334: LD_VAR 0 2
9338: PPUSH
9339: CALL_OW 254
9343: PUSH
9344: LD_INT 3
9346: MINUS
9347: ST_TO_ADDR
// if dir < 0 then
9348: LD_VAR 0 5
9352: PUSH
9353: LD_INT 0
9355: LESS
9356: IFFALSE 9372
// dir := 6 + dir ;
9358: LD_ADDR_VAR 0 5
9362: PUSH
9363: LD_INT 6
9365: PUSH
9366: LD_VAR 0 5
9370: PLUS
9371: ST_TO_ADDR
// SetDir ( un , dir ) ;
9372: LD_VAR 0 4
9376: PPUSH
9377: LD_VAR 0 5
9381: PPUSH
9382: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9386: LD_VAR 0 4
9390: PPUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: CALL_OW 52
// end ;
9400: LD_VAR 0 3
9404: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9411: LD_ADDR_VAR 0 7
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_VAR 0 1
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 25
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 24
9440: PUSH
9441: LD_INT 1000
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 69
9457: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 3
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_VAR 0 1
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 1000
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: PUSH
9512: EMPTY
9513: LIST
9514: PPUSH
9515: CALL_OW 70
9519: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9520: LD_VAR 0 5
9524: NOT
9525: IFFALSE 9534
9527: PUSH
9528: LD_VAR 0 7
9532: NOT
9533: AND
9534: IFFALSE 9538
// exit ;
9536: GO 9738
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9538: LD_VAR 0 5
9542: NOT
9543: IFFALSE 9569
9545: PUSH
9546: LD_VAR 0 7
9550: PPUSH
9551: LD_INT 3
9553: PUSH
9554: LD_INT 54
9556: PUSH
9557: EMPTY
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 72
9568: AND
9569: IFFALSE 9582
9571: PUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 302
9581: AND
9582: IFFALSE 9616
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9584: LD_VAR 0 7
9588: PPUSH
9589: LD_INT 3
9591: PUSH
9592: LD_INT 54
9594: PUSH
9595: EMPTY
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PPUSH
9602: CALL_OW 72
9606: PPUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: CALL_OW 120
// if buildingsList then
9616: LD_VAR 0 5
9620: IFFALSE 9738
// begin for i in engineerOkList do
9622: LD_ADDR_VAR 0 6
9626: PUSH
9627: LD_VAR 0 7
9631: PUSH
9632: FOR_IN
9633: IFFALSE 9736
// if IsInUnit ( i ) then
9635: LD_VAR 0 6
9639: PPUSH
9640: CALL_OW 310
9644: IFFALSE 9657
// ComExitBuilding ( i ) else
9646: LD_VAR 0 6
9650: PPUSH
9651: CALL_OW 122
9655: GO 9734
// if GetLives ( i ) > 650 then
9657: LD_VAR 0 6
9661: PPUSH
9662: CALL_OW 256
9666: PUSH
9667: LD_INT 650
9669: GREATER
9670: IFFALSE 9698
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9672: LD_VAR 0 6
9676: PPUSH
9677: LD_VAR 0 5
9681: PPUSH
9682: LD_VAR 0 6
9686: PPUSH
9687: CALL_OW 74
9691: PPUSH
9692: CALL_OW 130
9696: GO 9734
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9698: LD_VAR 0 6
9702: PPUSH
9703: LD_INT 56
9705: PPUSH
9706: LD_INT 10
9708: PPUSH
9709: CALL_OW 297
9713: PUSH
9714: LD_INT 8
9716: GREATER
9717: IFFALSE 9734
// ComMoveXY ( i , 56 , 10 ) ;
9719: LD_VAR 0 6
9723: PPUSH
9724: LD_INT 56
9726: PPUSH
9727: LD_INT 10
9729: PPUSH
9730: CALL_OW 111
9734: GO 9632
9736: POP
9737: POP
// end ; end ;
9738: LD_VAR 0 4
9742: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9743: LD_INT 0
9745: PPUSH
9746: PPUSH
9747: PPUSH
9748: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9749: LD_ADDR_VAR 0 6
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 24
9778: PUSH
9779: LD_INT 250
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9796: LD_ADDR_VAR 0 8
9800: PUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_INT 22
9808: PUSH
9809: LD_VAR 0 1
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 21
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 3
9830: PUSH
9831: LD_INT 24
9833: PUSH
9834: LD_INT 650
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 70
9854: ST_TO_ADDR
// if not damageUnits and not sciList then
9855: LD_VAR 0 8
9859: NOT
9860: IFFALSE 9869
9862: PUSH
9863: LD_VAR 0 6
9867: NOT
9868: AND
9869: IFFALSE 9873
// exit ;
9871: GO 10012
// if damageUnits then
9873: LD_VAR 0 8
9877: IFFALSE 9956
// begin for i in sciList do
9879: LD_ADDR_VAR 0 7
9883: PUSH
9884: LD_VAR 0 6
9888: PUSH
9889: FOR_IN
9890: IFFALSE 9952
// if IsInUnit ( i ) then
9892: LD_VAR 0 7
9896: PPUSH
9897: CALL_OW 310
9901: IFFALSE 9914
// ComExitBuilding ( i ) else
9903: LD_VAR 0 7
9907: PPUSH
9908: CALL_OW 122
9912: GO 9950
// if not HasTask ( i ) then
9914: LD_VAR 0 7
9918: PPUSH
9919: CALL_OW 314
9923: NOT
9924: IFFALSE 9950
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9926: LD_VAR 0 7
9930: PPUSH
9931: LD_VAR 0 8
9935: PPUSH
9936: LD_VAR 0 7
9940: PPUSH
9941: CALL_OW 74
9945: PPUSH
9946: CALL_OW 128
9950: GO 9889
9952: POP
9953: POP
// end else
9954: GO 10012
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9956: LD_VAR 0 6
9960: PPUSH
9961: LD_INT 3
9963: PUSH
9964: LD_INT 54
9966: PUSH
9967: EMPTY
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 72
9978: IFFALSE 10012
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9980: LD_VAR 0 6
9984: PPUSH
9985: LD_INT 3
9987: PUSH
9988: LD_INT 54
9990: PUSH
9991: EMPTY
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 72
10002: PPUSH
10003: LD_VAR 0 4
10007: PPUSH
10008: CALL_OW 120
// end ;
10012: LD_VAR 0 5
10016: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
// if not defendersList then
10023: LD_VAR 0 3
10027: NOT
10028: IFFALSE 10032
// exit ;
10030: GO 10416
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10032: LD_ADDR_VAR 0 7
10036: PUSH
10037: LD_VAR 0 1
10041: PPUSH
10042: LD_INT 22
10044: PUSH
10045: LD_VAR 0 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 21
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 21
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PPUSH
10086: CALL_OW 70
10090: ST_TO_ADDR
// if enemy then
10091: LD_VAR 0 7
10095: IFFALSE 10318
// begin for i in defendersList do
10097: LD_ADDR_VAR 0 6
10101: PUSH
10102: LD_VAR 0 3
10106: PUSH
10107: FOR_IN
10108: IFFALSE 10314
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10110: LD_VAR 0 6
10114: PPUSH
10115: CALL_OW 310
10119: IFFALSE 10136
10121: PUSH
10122: LD_VAR 0 6
10126: PPUSH
10127: CALL_OW 256
10131: PUSH
10132: LD_INT 500
10134: GREATER
10135: AND
10136: IFFALSE 10149
// ComExitBuilding ( i ) else
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 122
10147: GO 10312
// if GetLives ( i ) > 650 then
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 256
10158: PUSH
10159: LD_INT 650
10161: GREATER
10162: IFFALSE 10215
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10164: LD_ADDR_VAR 0 8
10168: PUSH
10169: LD_VAR 0 7
10173: PPUSH
10174: LD_VAR 0 6
10178: PPUSH
10179: CALL_OW 74
10183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10184: LD_VAR 0 6
10188: PPUSH
10189: LD_VAR 0 8
10193: PPUSH
10194: CALL_OW 250
10198: PPUSH
10199: LD_VAR 0 8
10203: PPUSH
10204: CALL_OW 251
10208: PPUSH
10209: CALL_OW 114
// end else
10213: GO 10312
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10215: LD_INT 22
10217: PUSH
10218: LD_INT 3
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 25
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 69
10243: IFFALSE 10283
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10245: LD_VAR 0 6
10249: PPUSH
10250: LD_INT 56
10252: PPUSH
10253: LD_INT 10
10255: PPUSH
10256: CALL_OW 297
10260: PUSH
10261: LD_INT 8
10263: GREATER
10264: IFFALSE 10281
// ComMoveXY ( i , 56 , 10 ) ;
10266: LD_VAR 0 6
10270: PPUSH
10271: LD_INT 56
10273: PPUSH
10274: LD_INT 10
10276: PPUSH
10277: CALL_OW 111
// end else
10281: GO 10312
// if GetLives ( i ) <= 500 then
10283: LD_VAR 0 6
10287: PPUSH
10288: CALL_OW 256
10292: PUSH
10293: LD_INT 500
10295: LESSEQUAL
10296: IFFALSE 10312
// ComEnterUnit ( i , building ) ;
10298: LD_VAR 0 6
10302: PPUSH
10303: LD_VAR 0 4
10307: PPUSH
10308: CALL_OW 120
// end ;
10312: GO 10107
10314: POP
10315: POP
// end else
10316: GO 10416
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_INT 56
10325: PUSH
10326: EMPTY
10327: LIST
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: LD_INT 60
10334: PUSH
10335: EMPTY
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 24
10344: PUSH
10345: LD_INT 1000
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: IFFALSE 10416
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 56
10370: PUSH
10371: EMPTY
10372: LIST
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 60
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 24
10389: PUSH
10390: LD_INT 1000
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 72
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 120
// end ;
10416: LD_VAR 0 5
10420: RET
// export function RussianTrap ; var i ; begin
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
// if GetSide ( Brian ) = 4 then
10425: LD_EXP 6
10429: PPUSH
10430: CALL_OW 255
10434: PUSH
10435: LD_INT 4
10437: EQUAL
10438: IFFALSE 10461
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10440: LD_EXP 6
10444: PUSH
10445: LD_EXP 7
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10461: LD_ADDR_VAR 0 2
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 3
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: PUSH
10495: FOR_IN
10496: IFFALSE 10608
// begin ComExitBuilding ( i ) ;
10498: LD_VAR 0 2
10502: PPUSH
10503: CALL_OW 122
// wait ( 0 0$1 ) ;
10507: LD_INT 35
10509: PPUSH
10510: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 120
10521: PPUSH
10522: LD_INT 56
10524: PPUSH
10525: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 111
10536: PPUSH
10537: LD_INT 37
10539: PPUSH
10540: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10544: LD_INT 33
10546: PPUSH
10547: CALL_OW 255
10551: PUSH
10552: LD_INT 3
10554: EQUAL
10555: IFFALSE 10566
10557: PUSH
10558: LD_INT 33
10560: PPUSH
10561: CALL_OW 302
10565: AND
10566: IFFALSE 10582
// AddComEnterUnit ( i , arm2 ) else
10568: LD_VAR 0 2
10572: PPUSH
10573: LD_INT 33
10575: PPUSH
10576: CALL_OW 180
10580: GO 10606
// begin AddComCrawl ( i ) ;
10582: LD_VAR 0 2
10586: PPUSH
10587: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10591: LD_VAR 0 2
10595: PPUSH
10596: LD_INT 109
10598: PPUSH
10599: LD_INT 30
10601: PPUSH
10602: CALL_OW 174
// end ; end ;
10606: GO 10495
10608: POP
10609: POP
// end ;
10610: LD_VAR 0 1
10614: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
// nearestDist := 1000 ;
10622: LD_ADDR_VAR 0 4
10626: PUSH
10627: LD_INT 1000
10629: ST_TO_ADDR
// nearestUn := un ;
10630: LD_ADDR_VAR 0 5
10634: PUSH
10635: LD_VAR 0 1
10639: ST_TO_ADDR
// for sold in units do
10640: LD_ADDR_VAR 0 6
10644: PUSH
10645: LD_VAR 0 2
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10707
// begin dist := GetDistUnits ( un , sold ) ;
10653: LD_ADDR_VAR 0 7
10657: PUSH
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_VAR 0 6
10667: PPUSH
10668: CALL_OW 296
10672: ST_TO_ADDR
// if dist < nearestDist then
10673: LD_VAR 0 7
10677: PUSH
10678: LD_VAR 0 4
10682: LESS
10683: IFFALSE 10705
// begin nearestUn := sold ;
10685: LD_ADDR_VAR 0 5
10689: PUSH
10690: LD_VAR 0 6
10694: ST_TO_ADDR
// nearestDist := dist ;
10695: LD_ADDR_VAR 0 4
10699: PUSH
10700: LD_VAR 0 7
10704: ST_TO_ADDR
// end ; end ;
10705: GO 10650
10707: POP
10708: POP
// result := NearestUn ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_VAR 0 5
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 3
10723: RET
// export function PrepareDifficulty ; begin
10724: LD_INT 0
10726: PPUSH
// if Difficulty = 1 then
10727: LD_OWVAR 67
10731: PUSH
10732: LD_INT 1
10734: EQUAL
10735: IFFALSE 10798
// begin RemoveUnit ( brw2 ) ;
10737: LD_INT 9
10739: PPUSH
10740: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10744: LD_INT 30
10746: PPUSH
10747: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10751: LD_INT 52
10753: PPUSH
10754: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10758: LD_INT 63
10760: PPUSH
10761: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10765: LD_INT 5
10767: PUSH
10768: LD_INT 4
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: LD_INT 60
10777: PPUSH
10778: CALL_OW 240
// RuSoldMinLevel = 0 ;
10782: LD_ADDR_EXP 13
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10790: LD_ADDR_EXP 14
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// end ; if Difficulty = 2 then
10798: LD_OWVAR 67
10802: PUSH
10803: LD_INT 2
10805: EQUAL
10806: IFFALSE 10848
// begin RemoveUnit ( brw4 ) ;
10808: LD_INT 52
10810: PPUSH
10811: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10815: LD_INT 5
10817: PUSH
10818: LD_INT 4
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: LD_INT 50
10827: PPUSH
10828: CALL_OW 240
// RuSoldMinLevel = 1 ;
10832: LD_ADDR_EXP 13
10836: PUSH
10837: LD_INT 1
10839: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10840: LD_ADDR_EXP 14
10844: PUSH
10845: LD_INT 2
10847: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10848: LD_OWVAR 67
10852: PUSH
10853: LD_INT 3
10855: GREATEREQUAL
10856: IFFALSE 10891
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10858: LD_INT 5
10860: PUSH
10861: LD_INT 4
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PPUSH
10868: LD_INT 40
10870: PPUSH
10871: CALL_OW 240
// RuSoldMinLevel = 2 ;
10875: LD_ADDR_EXP 13
10879: PUSH
10880: LD_INT 2
10882: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10883: LD_ADDR_EXP 14
10887: PUSH
10888: LD_INT 3
10890: ST_TO_ADDR
// end ; end ;
10891: LD_VAR 0 1
10895: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10896: LD_INT 0
10898: PPUSH
10899: PPUSH
10900: PPUSH
// if not vehicles then
10901: LD_VAR 0 1
10905: NOT
10906: IFFALSE 10910
// exit ;
10908: GO 11040
// tmp := [ ] ;
10910: LD_ADDR_VAR 0 5
10914: PUSH
10915: EMPTY
10916: ST_TO_ADDR
// for i in vehicles do
10917: LD_ADDR_VAR 0 4
10921: PUSH
10922: LD_VAR 0 1
10926: PUSH
10927: FOR_IN
10928: IFFALSE 11024
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10930: LD_ADDR_VAR 0 5
10934: PUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: LD_VAR 0 5
10944: PUSH
10945: LD_INT 1
10947: PLUS
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: CALL_OW 265
10958: PUSH
10959: LD_VAR 0 4
10963: PPUSH
10964: CALL_OW 262
10968: PUSH
10969: LD_VAR 0 4
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_VAR 0 4
10983: PPUSH
10984: CALL_OW 264
10988: PUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: CALL_OW 261
10998: PUSH
10999: LD_VAR 0 4
11003: PPUSH
11004: CALL_OW 256
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 1
11021: ST_TO_ADDR
11022: GO 10927
11024: POP
11025: POP
// SaveVariable ( tmp , ident ) ;
11026: LD_VAR 0 5
11030: PPUSH
11031: LD_VAR 0 2
11035: PPUSH
11036: CALL_OW 39
// end ; end_of_file
11040: LD_VAR 0 3
11044: RET
// export function PrepareHeroes ; var plive , prefix ; begin
11045: LD_INT 0
11047: PPUSH
11048: PPUSH
11049: PPUSH
// prefix := 01_ ;
11050: LD_ADDR_VAR 0 3
11054: PUSH
11055: LD_STRING 01_
11057: ST_TO_ADDR
// uc_side := 1 ;
11058: LD_ADDR_OWVAR 20
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
11066: LD_ADDR_EXP 1
11070: PUSH
11071: LD_STRING JMM
11073: PPUSH
11074: LD_EXP 35
11078: NOT
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: CALL 38586 0 3
11089: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_STRING 01_JMMLifePoints_1
11097: PPUSH
11098: LD_INT 1000
11100: PPUSH
11101: CALL_OW 30
11105: ST_TO_ADDR
// if plive < 250 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 250
11113: LESS
11114: IFFALSE 11124
// plive := 300 ;
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: LD_INT 300
11123: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11124: LD_EXP 1
11128: PPUSH
11129: LD_VAR 0 2
11133: PPUSH
11134: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11138: LD_ADDR_EXP 9
11142: PUSH
11143: LD_STRING Powell
11145: PPUSH
11146: CALL_OW 25
11150: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11151: LD_ADDR_EXP 2
11155: PUSH
11156: LD_STRING Bobby
11158: PPUSH
11159: LD_EXP 35
11163: NOT
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: CALL 38586 0 3
11174: ST_TO_ADDR
// if Bobby then
11175: LD_EXP 2
11179: IFFALSE 11229
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11181: LD_ADDR_VAR 0 2
11185: PUSH
11186: LD_STRING 01_BobbyLifePoints_1
11188: PPUSH
11189: LD_INT 1000
11191: PPUSH
11192: CALL_OW 30
11196: ST_TO_ADDR
// if plive < 250 then
11197: LD_VAR 0 2
11201: PUSH
11202: LD_INT 250
11204: LESS
11205: IFFALSE 11215
// plive := 300 ;
11207: LD_ADDR_VAR 0 2
11211: PUSH
11212: LD_INT 300
11214: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11215: LD_EXP 2
11219: PPUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11229: LD_ADDR_EXP 3
11233: PUSH
11234: LD_STRING Cyrus
11236: PPUSH
11237: LD_EXP 35
11241: NOT
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: CALL 38586 0 3
11252: ST_TO_ADDR
// if Cyrus then
11253: LD_EXP 3
11257: IFFALSE 11307
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_STRING 01_CyrusLifePoints_1
11266: PPUSH
11267: LD_INT 1000
11269: PPUSH
11270: CALL_OW 30
11274: ST_TO_ADDR
// if plive < 250 then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 250
11282: LESS
11283: IFFALSE 11293
// plive := 300 ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 300
11292: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11293: LD_EXP 3
11297: PPUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11307: LD_ADDR_EXP 5
11311: PUSH
11312: LD_STRING Khatam
11314: PPUSH
11315: CALL_OW 25
11319: ST_TO_ADDR
// uc_side := 4 ;
11320: LD_ADDR_OWVAR 20
11324: PUSH
11325: LD_INT 4
11327: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11328: LD_ADDR_EXP 4
11332: PUSH
11333: LD_STRING Lisa
11335: PPUSH
11336: CALL_OW 25
11340: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11341: LD_EXP 1
11345: PPUSH
11346: LD_INT 3
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11356: LD_EXP 2
11360: PPUSH
11361: LD_INT 3
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11371: LD_EXP 3
11375: PPUSH
11376: LD_INT 3
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11386: LD_EXP 4
11390: PPUSH
11391: LD_INT 5
11393: PPUSH
11394: LD_INT 0
11396: PPUSH
11397: CALL_OW 49
// ComCrawl ( Lisa ) ;
11401: LD_EXP 4
11405: PPUSH
11406: CALL_OW 137
// end ;
11410: LD_VAR 0 1
11414: RET
// export function PrepareLisSquad ; var i , un ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
11419: PPUSH
// uc_side := 4 ;
11420: LD_ADDR_OWVAR 20
11424: PUSH
11425: LD_INT 4
11427: ST_TO_ADDR
// uc_nation := 1 ;
11428: LD_ADDR_OWVAR 21
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// hc_class := 2 ;
11436: LD_ADDR_OWVAR 28
11440: PUSH
11441: LD_INT 2
11443: ST_TO_ADDR
// hc_sex := sex_male ;
11444: LD_ADDR_OWVAR 27
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// hc_gallery :=  ;
11452: LD_ADDR_OWVAR 33
11456: PUSH
11457: LD_STRING 
11459: ST_TO_ADDR
// hc_name :=  ;
11460: LD_ADDR_OWVAR 26
11464: PUSH
11465: LD_STRING 
11467: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11468: LD_ADDR_OWVAR 30
11472: PUSH
11473: LD_INT 0
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 0
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11491: LD_ADDR_OWVAR 31
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 0
11504: PUSH
11505: LD_INT 0
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: ST_TO_ADDR
// un := CreateHuman ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: CALL_OW 44
11523: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 6
11531: PPUSH
11532: LD_INT 0
11534: PPUSH
11535: CALL_OW 49
// hc_sex := sex_female ;
11539: LD_ADDR_OWVAR 27
11543: PUSH
11544: LD_INT 2
11546: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11547: LD_ADDR_OWVAR 30
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: LD_INT 0
11557: PUSH
11558: LD_INT 0
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11570: LD_ADDR_OWVAR 31
11574: PUSH
11575: LD_INT 0
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: LD_INT 0
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: ST_TO_ADDR
// un := CreateHuman ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: CALL_OW 44
11602: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 6
11610: PPUSH
11611: LD_INT 0
11613: PPUSH
11614: CALL_OW 49
// if not Bobby and not Cyrus then
11618: LD_EXP 2
11622: NOT
11623: IFFALSE 11632
11625: PUSH
11626: LD_EXP 3
11630: NOT
11631: AND
11632: IFFALSE 11721
// begin hc_class := 1 ;
11634: LD_ADDR_OWVAR 28
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// hc_sex := sex_male ;
11642: LD_ADDR_OWVAR 27
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11650: LD_ADDR_OWVAR 30
11654: PUSH
11655: LD_INT 2
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: LD_INT 0
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11673: LD_ADDR_OWVAR 31
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: LD_INT 0
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: ST_TO_ADDR
// un := CreateHuman ;
11696: LD_ADDR_VAR 0 3
11700: PUSH
11701: CALL_OW 44
11705: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 31
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: CALL_OW 49
// end ; InitHc ;
11721: CALL_OW 19
// end ;
11725: LD_VAR 0 1
11729: RET
// export function PrepareOtherAmericans ; begin
11730: LD_INT 0
11732: PPUSH
// uc_side := 4 ;
11733: LD_ADDR_OWVAR 20
11737: PUSH
11738: LD_INT 4
11740: ST_TO_ADDR
// uc_nation := 1 ;
11741: LD_ADDR_OWVAR 21
11745: PUSH
11746: LD_INT 1
11748: ST_TO_ADDR
// hc_gallery :=  ;
11749: LD_ADDR_OWVAR 33
11753: PUSH
11754: LD_STRING 
11756: ST_TO_ADDR
// hc_name := Tom Garvin ;
11757: LD_ADDR_OWVAR 26
11761: PUSH
11762: LD_STRING Tom Garvin
11764: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: CALL_OW 380
// Brian := CreateHuman ;
11778: LD_ADDR_EXP 6
11782: PUSH
11783: CALL_OW 44
11787: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11788: LD_EXP 6
11792: PPUSH
11793: LD_INT 10
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 49
// hc_name := Jerry White ;
11803: LD_ADDR_OWVAR 26
11807: PUSH
11808: LD_STRING Jerry White
11810: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 3
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: CALL_OW 380
// Jerry := CreateHuman ;
11824: LD_ADDR_EXP 7
11828: PUSH
11829: CALL_OW 44
11833: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11834: LD_EXP 7
11838: PPUSH
11839: LD_INT 10
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11849: LD_EXP 6
11853: PUSH
11854: LD_EXP 7
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 140
// end ;
11867: LD_VAR 0 1
11871: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11878: LD_ADDR_VAR 0 4
11882: PUSH
11883: LD_INT 16
11885: PPUSH
11886: LD_INT 0
11888: PPUSH
11889: CALL_OW 517
11893: ST_TO_ADDR
// for i = 1 to 6 do
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: DOUBLE
11900: LD_INT 1
11902: DEC
11903: ST_TO_ADDR
11904: LD_INT 6
11906: PUSH
11907: FOR_TO
11908: IFFALSE 12054
// begin uc_side := 4 ;
11910: LD_ADDR_OWVAR 20
11914: PUSH
11915: LD_INT 4
11917: ST_TO_ADDR
// uc_nation := 1 ;
11918: LD_ADDR_OWVAR 21
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// hc_gallery :=  ;
11926: LD_ADDR_OWVAR 33
11930: PUSH
11931: LD_STRING 
11933: ST_TO_ADDR
// hc_name :=  ;
11934: LD_ADDR_OWVAR 26
11938: PUSH
11939: LD_STRING 
11941: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11942: LD_INT 0
11944: PPUSH
11945: LD_INT 1
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: LD_INT 4
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_VAR 0 2
11963: PUSH
11964: LD_INT 3
11966: MOD
11967: PUSH
11968: LD_INT 1
11970: PLUS
11971: ARRAY
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 380
// un := CreateHuman ;
11980: LD_ADDR_VAR 0 3
11984: PUSH
11985: CALL_OW 44
11989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 0
11997: PPUSH
11998: LD_INT 5
12000: PPUSH
12001: CALL_OW 12
12005: PPUSH
12006: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_VAR 0 4
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PUSH
12024: LD_VAR 0 2
12028: ARRAY
12029: PPUSH
12030: LD_VAR 0 4
12034: PUSH
12035: LD_INT 2
12037: ARRAY
12038: PUSH
12039: LD_VAR 0 2
12043: ARRAY
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 601
// end ;
12052: GO 11907
12054: POP
12055: POP
// DyingSold := CreateHuman ;
12056: LD_ADDR_EXP 36
12060: PUSH
12061: CALL_OW 44
12065: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
12066: LD_EXP 36
12070: PPUSH
12071: LD_INT 16
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
12081: LD_EXP 36
12085: PPUSH
12086: LD_INT 250
12088: PPUSH
12089: CALL_OW 234
// end ; end_of_file
12093: LD_VAR 0 1
12097: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12098: LD_INT 0
12100: PPUSH
12101: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 23
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 50
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: LD_INT 56
12145: PUSH
12146: EMPTY
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PPUSH
12156: CALL_OW 69
12160: PUSH
12161: LD_EXP 1
12165: PUSH
12166: EMPTY
12167: LIST
12168: DIFF
12169: ST_TO_ADDR
// if not tmp then
12170: LD_VAR 0 2
12174: NOT
12175: IFFALSE 12179
// exit ;
12177: GO 12255
// uc_side = 6 ;
12179: LD_ADDR_OWVAR 20
12183: PUSH
12184: LD_INT 6
12186: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12187: LD_ADDR_EXP 8
12191: PUSH
12192: LD_STRING Mikhail
12194: PPUSH
12195: CALL_OW 25
12199: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12200: LD_EXP 8
12204: PPUSH
12205: LD_INT 3
12207: PPUSH
12208: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12212: LD_EXP 8
12216: PPUSH
12217: LD_VAR 0 2
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: CALL_OW 250
12230: PPUSH
12231: LD_VAR 0 2
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: PPUSH
12240: CALL_OW 251
12244: PPUSH
12245: LD_INT 5
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 50
// end ;
12255: LD_VAR 0 1
12259: RET
// export function PrepareRussianCommander ; begin
12260: LD_INT 0
12262: PPUSH
// uc_side = 3 ;
12263: LD_ADDR_OWVAR 20
12267: PUSH
12268: LD_INT 3
12270: ST_TO_ADDR
// uc_nation = 3 ;
12271: LD_ADDR_OWVAR 21
12275: PUSH
12276: LD_INT 3
12278: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12279: LD_ADDR_EXP 19
12283: PUSH
12284: LD_STRING Natasza
12286: PPUSH
12287: CALL_OW 25
12291: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12292: LD_EXP 19
12296: PPUSH
12297: LD_INT 24
12299: PPUSH
12300: LD_INT 0
12302: PPUSH
12303: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12307: LD_EXP 19
12311: PPUSH
12312: LD_INT 56
12314: PPUSH
12315: LD_INT 16
12317: PPUSH
12318: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12322: LD_ADDR_EXP 24
12326: PUSH
12327: LD_EXP 24
12331: PPUSH
12332: LD_EXP 24
12336: PUSH
12337: LD_INT 1
12339: PLUS
12340: PPUSH
12341: LD_EXP 19
12345: PPUSH
12346: CALL_OW 1
12350: ST_TO_ADDR
// end ;
12351: LD_VAR 0 1
12355: RET
// export function PrepareSouthBase ; var i , un ; begin
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
// for i = 1 to 2 do
12361: LD_ADDR_VAR 0 2
12365: PUSH
12366: DOUBLE
12367: LD_INT 1
12369: DEC
12370: ST_TO_ADDR
12371: LD_INT 2
12373: PUSH
12374: FOR_TO
12375: IFFALSE 12484
// begin uc_side = 3 ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_INT 3
12384: ST_TO_ADDR
// uc_nation = 3 ;
12385: LD_ADDR_OWVAR 21
12389: PUSH
12390: LD_INT 3
12392: ST_TO_ADDR
// hc_gallery =  ;
12393: LD_ADDR_OWVAR 33
12397: PUSH
12398: LD_STRING 
12400: ST_TO_ADDR
// hc_name =  ;
12401: LD_ADDR_OWVAR 26
12405: PUSH
12406: LD_STRING 
12408: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12409: LD_INT 1
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: LD_EXP 13
12419: PPUSH
12420: LD_EXP 14
12424: PPUSH
12425: CALL_OW 12
12429: PPUSH
12430: CALL_OW 380
// hc_importance = 0 ;
12434: LD_ADDR_OWVAR 32
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// un = CreateHuman ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: CALL_OW 44
12451: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 11
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 111
12474: PPUSH
12475: LD_INT 38
12477: PPUSH
12478: CALL_OW 118
// end ;
12482: GO 12374
12484: POP
12485: POP
// for i = 1 to 2 do
12486: LD_ADDR_VAR 0 2
12490: PUSH
12491: DOUBLE
12492: LD_INT 1
12494: DEC
12495: ST_TO_ADDR
12496: LD_INT 2
12498: PUSH
12499: FOR_TO
12500: IFFALSE 12583
// begin uc_side = 3 ;
12502: LD_ADDR_OWVAR 20
12506: PUSH
12507: LD_INT 3
12509: ST_TO_ADDR
// uc_nation = 3 ;
12510: LD_ADDR_OWVAR 21
12514: PUSH
12515: LD_INT 3
12517: ST_TO_ADDR
// hc_gallery =  ;
12518: LD_ADDR_OWVAR 33
12522: PUSH
12523: LD_STRING 
12525: ST_TO_ADDR
// hc_name =  ;
12526: LD_ADDR_OWVAR 26
12530: PUSH
12531: LD_STRING 
12533: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12534: LD_INT 0
12536: PPUSH
12537: LD_INT 3
12539: PPUSH
12540: LD_EXP 13
12544: PPUSH
12545: LD_EXP 14
12549: PPUSH
12550: CALL_OW 12
12554: PPUSH
12555: CALL_OW 380
// un = CreateHuman ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: CALL_OW 44
12568: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 10
12576: PPUSH
12577: CALL_OW 52
// end ;
12581: GO 12499
12583: POP
12584: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12585: LD_INT 3
12587: PPUSH
12588: LD_INT 3
12590: PPUSH
12591: LD_INT 33
12593: PPUSH
12594: LD_EXP 13
12598: PPUSH
12599: LD_EXP 14
12603: PPUSH
12604: CALL_OW 12
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: LD_INT 1
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: LD_OWVAR 67
12634: ARRAY
12635: PPUSH
12636: CALL 9160 0 6
// for i in UnitsInside ( arm2 ) do
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_INT 33
12647: PPUSH
12648: CALL_OW 313
12652: PUSH
12653: FOR_IN
12654: IFFALSE 12687
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12656: LD_ADDR_EXP 25
12660: PUSH
12661: LD_EXP 25
12665: PPUSH
12666: LD_EXP 25
12670: PUSH
12671: LD_INT 1
12673: PLUS
12674: PPUSH
12675: LD_VAR 0 2
12679: PPUSH
12680: CALL_OW 1
12684: ST_TO_ADDR
12685: GO 12653
12687: POP
12688: POP
// end ;
12689: LD_VAR 0 1
12693: RET
// export function PrepareNorthBase ; var i , un ; begin
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
12698: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12699: LD_ADDR_VAR 0 2
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_INT 1
12711: PPUSH
12712: LD_INT 2
12714: PPUSH
12715: CALL_OW 12
12719: PUSH
12720: LD_INT 2
12722: PPUSH
12723: LD_INT 3
12725: PPUSH
12726: CALL_OW 12
12730: PUSH
12731: LD_INT 3
12733: PPUSH
12734: LD_INT 4
12736: PPUSH
12737: CALL_OW 12
12741: PUSH
12742: LD_INT 4
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_OWVAR 67
12755: ARRAY
12756: PUSH
12757: FOR_TO
12758: IFFALSE 12844
// begin uc_side = 3 ;
12760: LD_ADDR_OWVAR 20
12764: PUSH
12765: LD_INT 3
12767: ST_TO_ADDR
// uc_nation = 3 ;
12768: LD_ADDR_OWVAR 21
12772: PUSH
12773: LD_INT 3
12775: ST_TO_ADDR
// hc_gallery =  ;
12776: LD_ADDR_OWVAR 33
12780: PUSH
12781: LD_STRING 
12783: ST_TO_ADDR
// hc_name =  ;
12784: LD_ADDR_OWVAR 26
12788: PUSH
12789: LD_STRING 
12791: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12792: LD_INT 0
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_EXP 13
12802: PPUSH
12803: LD_EXP 14
12807: PPUSH
12808: CALL_OW 12
12812: PPUSH
12813: CALL_OW 380
// un = CreateHuman ;
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: CALL_OW 44
12826: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 14
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 49
// end ;
12842: GO 12757
12844: POP
12845: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12846: LD_INT 3
12848: PPUSH
12849: LD_INT 3
12851: PPUSH
12852: LD_INT 2
12854: PPUSH
12855: LD_EXP 13
12859: PPUSH
12860: LD_EXP 14
12864: PPUSH
12865: CALL_OW 12
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: LD_INT 2
12878: PPUSH
12879: CALL_OW 12
12883: PUSH
12884: LD_INT 1
12886: PPUSH
12887: LD_INT 3
12889: PPUSH
12890: CALL_OW 12
12894: PUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 3
12900: PPUSH
12901: CALL_OW 12
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_OWVAR 67
12919: ARRAY
12920: PPUSH
12921: CALL 9160 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12925: LD_INT 3
12927: PPUSH
12928: LD_INT 3
12930: PPUSH
12931: LD_INT 23
12933: PPUSH
12934: LD_EXP 13
12938: PPUSH
12939: LD_EXP 14
12943: PPUSH
12944: CALL_OW 12
12948: PPUSH
12949: LD_INT 4
12951: PPUSH
12952: LD_INT 0
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: LD_INT 2
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_OWVAR 67
12974: ARRAY
12975: PPUSH
12976: CALL 9160 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12980: LD_INT 3
12982: PPUSH
12983: LD_INT 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: LD_EXP 13
12993: PPUSH
12994: LD_EXP 14
12998: PPUSH
12999: CALL_OW 12
13003: PPUSH
13004: LD_INT 2
13006: PPUSH
13007: LD_INT 1
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 3
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: LD_OWVAR 67
13029: ARRAY
13030: PPUSH
13031: CALL 9160 0 6
// for i in UnitsInside ( arm1 ) do
13035: LD_ADDR_VAR 0 2
13039: PUSH
13040: LD_INT 2
13042: PPUSH
13043: CALL_OW 313
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13082
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
13051: LD_ADDR_EXP 24
13055: PUSH
13056: LD_EXP 24
13060: PPUSH
13061: LD_EXP 24
13065: PUSH
13066: LD_INT 1
13068: PLUS
13069: PPUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: CALL_OW 1
13079: ST_TO_ADDR
13080: GO 13048
13082: POP
13083: POP
// end ;
13084: LD_VAR 0 1
13088: RET
// export function PrepareOtherRussians ; var i , un ; begin
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
13093: PPUSH
// for i = 1 to 2 do
13094: LD_ADDR_VAR 0 2
13098: PUSH
13099: DOUBLE
13100: LD_INT 1
13102: DEC
13103: ST_TO_ADDR
13104: LD_INT 2
13106: PUSH
13107: FOR_TO
13108: IFFALSE 13209
// begin uc_side = 3 ;
13110: LD_ADDR_OWVAR 20
13114: PUSH
13115: LD_INT 3
13117: ST_TO_ADDR
// uc_nation = 3 ;
13118: LD_ADDR_OWVAR 21
13122: PUSH
13123: LD_INT 3
13125: ST_TO_ADDR
// hc_gallery =  ;
13126: LD_ADDR_OWVAR 33
13130: PUSH
13131: LD_STRING 
13133: ST_TO_ADDR
// hc_name =  ;
13134: LD_ADDR_OWVAR 26
13138: PUSH
13139: LD_STRING 
13141: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13142: LD_INT 0
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_EXP 13
13152: PPUSH
13153: LD_EXP 14
13157: PPUSH
13158: CALL_OW 12
13162: PPUSH
13163: CALL_OW 380
// un = CreateHuman ;
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: CALL_OW 44
13176: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_INT 9
13184: PPUSH
13185: LD_INT 0
13187: PPUSH
13188: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13192: LD_VAR 0 3
13196: PPUSH
13197: LD_INT 80
13199: PPUSH
13200: LD_INT 73
13202: PPUSH
13203: CALL_OW 118
// end ;
13207: GO 13107
13209: POP
13210: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 30
13228: PUSH
13229: LD_INT 31
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: PUSH
13245: FOR_IN
13246: IFFALSE 13274
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13248: LD_EXP 13
13252: PPUSH
13253: LD_EXP 14
13257: PPUSH
13258: CALL_OW 12
13262: PPUSH
13263: LD_VAR 0 2
13267: PPUSH
13268: CALL 9269 0 2
13272: GO 13245
13274: POP
13275: POP
// end ;
13276: LD_VAR 0 1
13280: RET
// export function PrepareCargoBays ; begin
13281: LD_INT 0
13283: PPUSH
// uc_side = 3 ;
13284: LD_ADDR_OWVAR 20
13288: PUSH
13289: LD_INT 3
13291: ST_TO_ADDR
// uc_nation = 3 ;
13292: LD_ADDR_OWVAR 21
13296: PUSH
13297: LD_INT 3
13299: ST_TO_ADDR
// vc_engine = 1 ;
13300: LD_ADDR_OWVAR 39
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// vc_control = 1 ;
13308: LD_ADDR_OWVAR 38
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// vc_weapon = 51 ;
13316: LD_ADDR_OWVAR 40
13320: PUSH
13321: LD_INT 51
13323: ST_TO_ADDR
// vc_chassis = 22 ;
13324: LD_ADDR_OWVAR 37
13328: PUSH
13329: LD_INT 22
13331: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13332: LD_ADDR_EXP 15
13336: PUSH
13337: CALL_OW 45
13341: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13342: LD_ADDR_EXP 16
13346: PUSH
13347: CALL_OW 45
13351: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13352: LD_EXP 15
13356: PPUSH
13357: LD_INT 13
13359: PPUSH
13360: LD_INT 0
13362: PPUSH
13363: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13367: LD_EXP 16
13371: PPUSH
13372: LD_INT 13
13374: PPUSH
13375: LD_INT 0
13377: PPUSH
13378: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13382: LD_EXP 15
13386: PPUSH
13387: LD_INT 2
13389: PPUSH
13390: LD_INT 70
13392: PUSH
13393: LD_INT 50
13395: PUSH
13396: LD_INT 30
13398: PUSH
13399: LD_INT 20
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: PUSH
13408: LD_OWVAR 67
13412: ARRAY
13413: PPUSH
13414: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13418: LD_EXP 16
13422: PPUSH
13423: LD_INT 2
13425: PPUSH
13426: LD_INT 70
13428: PUSH
13429: LD_INT 50
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 20
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: LD_OWVAR 67
13448: ARRAY
13449: PPUSH
13450: CALL_OW 291
// hc_gallery =  ;
13454: LD_ADDR_OWVAR 33
13458: PUSH
13459: LD_STRING 
13461: ST_TO_ADDR
// hc_name =  ;
13462: LD_ADDR_OWVAR 26
13466: PUSH
13467: LD_STRING 
13469: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13470: LD_INT 1
13472: PPUSH
13473: LD_INT 3
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: LD_INT 2
13481: PPUSH
13482: CALL_OW 12
13486: PPUSH
13487: CALL_OW 380
// driver1 = CreateHuman ;
13491: LD_ADDR_EXP 17
13495: PUSH
13496: CALL_OW 44
13500: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13501: LD_EXP 17
13505: PPUSH
13506: LD_EXP 15
13510: PPUSH
13511: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13515: LD_ADDR_OWVAR 26
13519: PUSH
13520: LD_STRING Nikolai Andreyev
13522: ST_TO_ADDR
// driver2 = CreateHuman ;
13523: LD_ADDR_EXP 18
13527: PUSH
13528: CALL_OW 44
13532: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13533: LD_EXP 18
13537: PPUSH
13538: LD_EXP 16
13542: PPUSH
13543: CALL_OW 52
// end ;
13547: LD_VAR 0 1
13551: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
// uc_side = 3 ;
13560: LD_ADDR_OWVAR 20
13564: PUSH
13565: LD_INT 3
13567: ST_TO_ADDR
// uc_nation = 3 ;
13568: LD_ADDR_OWVAR 21
13572: PUSH
13573: LD_INT 3
13575: ST_TO_ADDR
// for i := 1 to count do
13576: LD_ADDR_VAR 0 4
13580: PUSH
13581: DOUBLE
13582: LD_INT 1
13584: DEC
13585: ST_TO_ADDR
13586: LD_VAR 0 1
13590: PUSH
13591: FOR_TO
13592: IFFALSE 13854
// begin vc_engine = 1 ;
13594: LD_ADDR_OWVAR 39
13598: PUSH
13599: LD_INT 1
13601: ST_TO_ADDR
// vc_control = 1 ;
13602: LD_ADDR_OWVAR 38
13606: PUSH
13607: LD_INT 1
13609: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13610: LD_ADDR_OWVAR 40
13614: PUSH
13615: LD_INT 42
13617: ST_TO_ADDR
// if Difficulty = 3 then
13618: LD_OWVAR 67
13622: PUSH
13623: LD_INT 3
13625: EQUAL
13626: IFFALSE 13655
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13628: LD_ADDR_OWVAR 40
13632: PUSH
13633: LD_INT 42
13635: PUSH
13636: LD_INT 43
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 1
13645: PPUSH
13646: LD_INT 2
13648: PPUSH
13649: CALL_OW 12
13653: ARRAY
13654: ST_TO_ADDR
// if Difficulty = 4 then
13655: LD_OWVAR 67
13659: PUSH
13660: LD_INT 4
13662: EQUAL
13663: IFFALSE 13700
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13665: LD_ADDR_OWVAR 40
13669: PUSH
13670: LD_INT 42
13672: PUSH
13673: LD_INT 43
13675: PUSH
13676: LD_INT 43
13678: PUSH
13679: LD_INT 44
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 1
13690: PPUSH
13691: LD_INT 4
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13700: LD_ADDR_OWVAR 37
13704: PUSH
13705: LD_INT 21
13707: PUSH
13708: LD_INT 22
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: LD_OWVAR 67
13727: ARRAY
13728: ST_TO_ADDR
// veh = CreateVehicle ;
13729: LD_ADDR_VAR 0 5
13733: PUSH
13734: CALL_OW 45
13738: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13739: LD_VAR 0 5
13743: PPUSH
13744: LD_VAR 0 2
13748: PPUSH
13749: LD_INT 0
13751: PPUSH
13752: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13756: LD_ADDR_EXP 26
13760: PUSH
13761: LD_EXP 26
13765: PUSH
13766: LD_VAR 0 5
13770: ADD
13771: ST_TO_ADDR
// hc_gallery =  ;
13772: LD_ADDR_OWVAR 33
13776: PUSH
13777: LD_STRING 
13779: ST_TO_ADDR
// hc_name =  ;
13780: LD_ADDR_OWVAR 26
13784: PUSH
13785: LD_STRING 
13787: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13788: LD_INT 0
13790: PPUSH
13791: LD_INT 3
13793: PPUSH
13794: LD_EXP 13
13798: PPUSH
13799: LD_EXP 14
13803: PPUSH
13804: CALL_OW 12
13808: PPUSH
13809: CALL_OW 380
// un = CreateHuman ;
13813: LD_ADDR_VAR 0 6
13817: PUSH
13818: CALL_OW 44
13822: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13823: LD_VAR 0 6
13827: PPUSH
13828: LD_VAR 0 5
13832: PPUSH
13833: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13837: LD_VAR 0 6
13841: PPUSH
13842: LD_INT 14
13844: PPUSH
13845: LD_INT 9
13847: PPUSH
13848: CALL_OW 111
// end ;
13852: GO 13591
13854: POP
13855: POP
// wait ( 0 0$1 ) ;
13856: LD_INT 35
13858: PPUSH
13859: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13863: LD_INT 0
13865: PPUSH
13866: LD_INT 2
13868: PPUSH
13869: LD_EXP 13
13873: PPUSH
13874: LD_EXP 14
13878: PPUSH
13879: CALL_OW 12
13883: PPUSH
13884: CALL_OW 380
// un = CreateHuman ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: CALL_OW 44
13897: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: DOUBLE
13904: LD_INT 1
13906: DEC
13907: ST_TO_ADDR
13908: LD_VAR 0 1
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 2
13918: MUL
13919: PLUS
13920: PUSH
13921: FOR_TO
13922: IFFALSE 14014
// begin hc_gallery =  ;
13924: LD_ADDR_OWVAR 33
13928: PUSH
13929: LD_STRING 
13931: ST_TO_ADDR
// hc_name =  ;
13932: LD_ADDR_OWVAR 26
13936: PUSH
13937: LD_STRING 
13939: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13940: LD_INT 1
13942: PPUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_EXP 13
13950: PPUSH
13951: LD_EXP 14
13955: PPUSH
13956: CALL_OW 12
13960: PPUSH
13961: CALL_OW 380
// un = CreateHuman ;
13965: LD_ADDR_VAR 0 6
13969: PUSH
13970: CALL_OW 44
13974: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13975: LD_VAR 0 6
13979: PPUSH
13980: LD_INT 9
13982: PPUSH
13983: LD_INT 13
13985: PPUSH
13986: LD_INT 4
13988: PPUSH
13989: LD_INT 0
13991: PPUSH
13992: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13996: LD_ADDR_EXP 26
14000: PUSH
14001: LD_EXP 26
14005: PUSH
14006: LD_VAR 0 6
14010: ADD
14011: ST_TO_ADDR
// end ;
14012: GO 13921
14014: POP
14015: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14016: LD_ADDR_VAR 0 7
14020: PUSH
14021: LD_INT 26
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 21
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 26
14046: PUSH
14047: LD_INT 1
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 70
14063: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
14064: LD_VAR 0 7
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_STRING D9-Rus3-1
14075: PPUSH
14076: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
14080: LD_VAR 0 7
14084: PUSH
14085: LD_INT 2
14087: ARRAY
14088: PPUSH
14089: LD_STRING D9-Russ-1
14091: PPUSH
14092: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14096: LD_EXP 26
14100: PPUSH
14101: LD_INT 31
14103: PPUSH
14104: LD_INT 13
14106: PPUSH
14107: CALL_OW 114
// wait ( 0 0$3 ) ;
14111: LD_INT 105
14113: PPUSH
14114: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// for i in attackGroup do
14125: LD_ADDR_VAR 0 4
14129: PUSH
14130: LD_EXP 26
14134: PUSH
14135: FOR_IN
14136: IFFALSE 14515
// begin if IsDead ( i ) then
14138: LD_VAR 0 4
14142: PPUSH
14143: CALL_OW 301
14147: IFFALSE 14167
// begin attackGroup := attackGroup diff i ;
14149: LD_ADDR_EXP 26
14153: PUSH
14154: LD_EXP 26
14158: PUSH
14159: LD_VAR 0 4
14163: DIFF
14164: ST_TO_ADDR
// continue ;
14165: GO 14135
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14167: LD_VAR 0 4
14171: PPUSH
14172: CALL_OW 314
14176: NOT
14177: IFFALSE 14191
14179: PUSH
14180: LD_VAR 0 4
14184: PPUSH
14185: CALL_OW 110
14189: NOT
14190: AND
14191: IFFALSE 14227
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14193: LD_VAR 0 4
14197: PPUSH
14198: LD_INT 22
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL_OW 69
14212: PPUSH
14213: LD_VAR 0 4
14217: PPUSH
14218: CALL_OW 74
14222: PPUSH
14223: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14227: LD_VAR 0 4
14231: PPUSH
14232: CALL_OW 110
14236: NOT
14237: IFFALSE 14254
14239: PUSH
14240: LD_VAR 0 4
14244: PPUSH
14245: CALL_OW 256
14249: PUSH
14250: LD_INT 650
14252: LESS
14253: AND
14254: IFFALSE 14271
14256: PUSH
14257: LD_VAR 0 4
14261: PPUSH
14262: CALL_OW 247
14266: PUSH
14267: LD_INT 2
14269: EQUAL
14270: AND
14271: IFFALSE 14300
// begin SetTag ( i , 1 ) ;
14273: LD_VAR 0 4
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14285: LD_VAR 0 4
14289: PPUSH
14290: LD_INT 20
14292: PPUSH
14293: LD_INT 8
14295: PPUSH
14296: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14300: LD_VAR 0 4
14304: PPUSH
14305: CALL_OW 110
14309: PUSH
14310: LD_INT 1
14312: EQUAL
14313: IFFALSE 14336
14315: PUSH
14316: LD_VAR 0 4
14320: PPUSH
14321: LD_INT 20
14323: PPUSH
14324: LD_INT 8
14326: PPUSH
14327: CALL_OW 297
14331: PUSH
14332: LD_INT 6
14334: LESS
14335: AND
14336: IFFALSE 14350
// SetTag ( i , 2 ) ;
14338: LD_VAR 0 4
14342: PPUSH
14343: LD_INT 2
14345: PPUSH
14346: CALL_OW 109
// if GetTag ( i ) = 2 then
14350: LD_VAR 0 4
14354: PPUSH
14355: CALL_OW 110
14359: PUSH
14360: LD_INT 2
14362: EQUAL
14363: IFFALSE 14473
// begin if GetLives ( i ) = 1000 then
14365: LD_VAR 0 4
14369: PPUSH
14370: CALL_OW 256
14374: PUSH
14375: LD_INT 1000
14377: EQUAL
14378: IFFALSE 14394
// SetTag ( i , 3 ) else
14380: LD_VAR 0 4
14384: PPUSH
14385: LD_INT 3
14387: PPUSH
14388: CALL_OW 109
14392: GO 14473
// if IsDrivenBy ( i ) then
14394: LD_VAR 0 4
14398: PPUSH
14399: CALL_OW 311
14403: IFFALSE 14473
// begin mech := IsDrivenBy ( i ) ;
14405: LD_ADDR_VAR 0 8
14409: PUSH
14410: LD_VAR 0 4
14414: PPUSH
14415: CALL_OW 311
14419: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14420: LD_INT 1
14422: PPUSH
14423: LD_VAR 0 8
14427: PPUSH
14428: CALL_OW 292
14432: NOT
14433: IFFALSE 14450
14435: PUSH
14436: LD_VAR 0 8
14440: PPUSH
14441: CALL_OW 256
14445: PUSH
14446: LD_INT 1000
14448: LESS
14449: AND
14450: IFFALSE 14464
// SetLives ( mech , 1000 ) ;
14452: LD_VAR 0 8
14456: PPUSH
14457: LD_INT 1000
14459: PPUSH
14460: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14464: LD_VAR 0 8
14468: PPUSH
14469: CALL 78432 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14473: LD_VAR 0 4
14477: PPUSH
14478: CALL_OW 110
14482: PUSH
14483: LD_INT 3
14485: EQUAL
14486: IFFALSE 14499
14488: PUSH
14489: LD_VAR 0 4
14493: PPUSH
14494: CALL_OW 311
14498: AND
14499: IFFALSE 14513
// SetTag ( i , 0 ) ;
14501: LD_VAR 0 4
14505: PPUSH
14506: LD_INT 0
14508: PPUSH
14509: CALL_OW 109
// end ;
14513: GO 14135
14515: POP
14516: POP
// until not attackGroup ;
14517: LD_EXP 26
14521: NOT
14522: IFFALSE 14118
// end ;
14524: LD_VAR 0 3
14528: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14529: LD_EXP 26
14533: PPUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 72
14548: IFFALSE 14616
14550: GO 14552
14552: DISABLE
14553: LD_INT 0
14555: PPUSH
// begin enable ;
14556: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_EXP 26
14566: PPUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 72
14581: PUSH
14582: FOR_IN
14583: IFFALSE 14614
// if GetFuel ( i ) < 3 then
14585: LD_VAR 0 1
14589: PPUSH
14590: CALL_OW 261
14594: PUSH
14595: LD_INT 3
14597: LESS
14598: IFFALSE 14612
// SetFuel ( i , 3 ) ;
14600: LD_VAR 0 1
14604: PPUSH
14605: LD_INT 3
14607: PPUSH
14608: CALL_OW 240
14612: GO 14582
14614: POP
14615: POP
// end ; end_of_file
14616: PPOPN 1
14618: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14619: LD_INT 22
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: IFFALSE 14666
14649: GO 14651
14651: DISABLE
// begin enable ;
14652: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14653: LD_INT 3
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_INT 22
14661: PPUSH
14662: CALL 9405 0 3
// end ;
14666: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14667: LD_INT 22
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 4
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: IFFALSE 14717
14697: GO 14699
14699: DISABLE
// begin enable ;
14700: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14701: LD_INT 3
14703: PPUSH
14704: LD_INT 20
14706: PPUSH
14707: LD_INT 22
14709: PPUSH
14710: LD_INT 23
14712: PPUSH
14713: CALL 9743 0 4
// end ;
14717: END
// every 0 0$1 trigger northBaseDefenders do
14718: LD_EXP 24
14722: IFFALSE 14746
14724: GO 14726
14726: DISABLE
// begin enable ;
14727: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14728: LD_INT 22
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: LD_EXP 24
14738: PPUSH
14739: LD_INT 2
14741: PPUSH
14742: CALL 10017 0 4
// end ;
14746: END
// every 0 0$1 trigger southBaseDefenders do
14747: LD_EXP 25
14751: IFFALSE 14775
14753: GO 14755
14755: DISABLE
// begin enable ;
14756: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14757: LD_INT 23
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: LD_EXP 25
14767: PPUSH
14768: LD_INT 33
14770: PPUSH
14771: CALL 10017 0 4
// end ; end_of_file
14775: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14776: LD_VAR 0 1
14780: PPUSH
14781: CALL 33160 0 1
// if unit = JMM then
14785: LD_VAR 0 1
14789: PUSH
14790: LD_EXP 1
14794: EQUAL
14795: IFFALSE 14804
// YouLost ( JMM ) ;
14797: LD_STRING JMM
14799: PPUSH
14800: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 266
14813: PUSH
14814: LD_INT 0
14816: EQUAL
14817: IFFALSE 14826
// YouLost ( DepotDestroyed ) ;
14819: LD_STRING DepotDestroyed
14821: PPUSH
14822: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 255
14835: PUSH
14836: LD_INT 1
14838: EQUAL
14839: IFFALSE 14856
14841: PUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 247
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: AND
14856: IFFALSE 14872
// deadsCounter = deadsCounter + 1 ;
14858: LD_ADDR_EXP 31
14862: PUSH
14863: LD_EXP 31
14867: PUSH
14868: LD_INT 1
14870: PLUS
14871: ST_TO_ADDR
// end ;
14872: PPOPN 1
14874: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14875: LD_VAR 0 1
14879: PUSH
14880: LD_INT 22
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 23
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 21
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: IN
14920: IFFALSE 14932
14922: PUSH
14923: LD_VAR 0 2
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: AND
14932: IFFALSE 14938
// JMMTraitor ;
14934: CALL 8813 0 0
// end ;
14938: PPOPN 3
14940: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 255
14950: PUSH
14951: LD_INT 3
14953: EQUAL
14954: IFFALSE 15032
// begin ComMoveXY ( driver , 6 , 10 ) ;
14956: LD_VAR 0 1
14960: PPUSH
14961: LD_INT 6
14963: PPUSH
14964: LD_INT 10
14966: PPUSH
14967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14971: LD_INT 35
14973: PPUSH
14974: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14978: LD_VAR 0 1
14982: PPUSH
14983: LD_INT 6
14985: PPUSH
14986: LD_INT 10
14988: PPUSH
14989: CALL_OW 111
// if IsDead ( driver ) then
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL_OW 301
15002: IFFALSE 15006
// exit ;
15004: GO 15032
// until IsAt ( driver , 6 , 10 ) ;
15006: LD_VAR 0 1
15010: PPUSH
15011: LD_INT 6
15013: PPUSH
15014: LD_INT 10
15016: PPUSH
15017: CALL_OW 307
15021: IFFALSE 14971
// RemoveUnit ( driver ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 64
// end ; end ;
15032: PPOPN 4
15034: END
// on Command ( cmd ) do var i , j , tmp ;
15035: LD_INT 0
15037: PPUSH
15038: PPUSH
15039: PPUSH
// begin SOS_Command ( cmd ) ;
15040: LD_VAR 0 1
15044: PPUSH
15045: CALL 33202 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: LD_INT 22
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PPUSH
15078: CALL_OW 69
15082: PUSH
15083: FOR_IN
15084: IFFALSE 15209
// begin if GetTaskList ( i ) then
15086: LD_VAR 0 2
15090: PPUSH
15091: CALL_OW 437
15095: IFFALSE 15207
// begin for j = 1 to GetTaskList ( i ) do
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: DOUBLE
15103: LD_INT 1
15105: DEC
15106: ST_TO_ADDR
15107: LD_VAR 0 2
15111: PPUSH
15112: CALL_OW 437
15116: PUSH
15117: FOR_TO
15118: IFFALSE 15205
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_VAR 0 2
15129: PPUSH
15130: CALL_OW 437
15134: PUSH
15135: LD_VAR 0 3
15139: ARRAY
15140: PUSH
15141: LD_INT 4
15143: ARRAY
15144: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15145: LD_VAR 0 4
15149: PPUSH
15150: CALL_OW 255
15154: PUSH
15155: LD_INT 3
15157: EQUAL
15158: IFFALSE 15175
15160: PUSH
15161: LD_VAR 0 4
15165: PPUSH
15166: CALL_OW 247
15170: PUSH
15171: LD_INT 2
15173: EQUAL
15174: AND
15175: IFFALSE 15192
15177: PUSH
15178: LD_VAR 0 4
15182: PPUSH
15183: CALL_OW 264
15187: PUSH
15188: LD_INT 51
15190: EQUAL
15191: AND
15192: IFFALSE 15203
// ComStop ( i ) ;
15194: LD_VAR 0 2
15198: PPUSH
15199: CALL_OW 141
// end ;
15203: GO 15117
15205: POP
15206: POP
// end ; end ;
15207: GO 15083
15209: POP
15210: POP
// end ;
15211: PPOPN 4
15213: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15214: LD_VAR 0 2
15218: PUSH
15219: LD_EXP 8
15223: EQUAL
15224: IFFALSE 15236
15226: PUSH
15227: LD_EXP 21
15231: PUSH
15232: LD_INT 4
15234: NONEQUAL
15235: AND
15236: IFFALSE 15390
// begin if IsOk ( Mikhail ) then
15238: LD_EXP 8
15242: PPUSH
15243: CALL_OW 302
15247: IFFALSE 15255
// AskMikhail else
15249: CALL 7479 0 0
15253: GO 15390
// if IsOk ( llab1 ) then
15255: LD_INT 23
15257: PPUSH
15258: CALL_OW 302
15262: IFFALSE 15353
// begin InGameOn ;
15264: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15268: LD_EXP 8
15272: PPUSH
15273: LD_INT 6
15275: PPUSH
15276: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15280: LD_INT 23
15282: PPUSH
15283: LD_INT 6
15285: PPUSH
15286: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15290: LD_EXP 8
15294: PPUSH
15295: LD_INT 23
15297: PPUSH
15298: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15302: LD_INT 35
15304: PPUSH
15305: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15309: LD_EXP 8
15313: PPUSH
15314: CALL_OW 310
15318: PUSH
15319: LD_INT 23
15321: EQUAL
15322: IFTRUE 15335
15324: PUSH
15325: LD_EXP 8
15329: PPUSH
15330: CALL_OW 301
15334: OR
15335: IFFALSE 15302
// SetSide ( llab1 , 1 ) ;
15337: LD_INT 23
15339: PPUSH
15340: LD_INT 1
15342: PPUSH
15343: CALL_OW 235
// InGameOff ;
15347: CALL_OW 9
// end else
15351: GO 15390
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15353: LD_INT 3
15355: PPUSH
15356: LD_INT 6
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: LD_INT 1
15364: PPUSH
15365: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15369: LD_EXP 8
15373: PPUSH
15374: LD_INT 6
15376: PPUSH
15377: CALL_OW 235
// ComHold ( Mikhail ) ;
15381: LD_EXP 8
15385: PPUSH
15386: CALL_OW 140
// end ; end ; end ;
15390: PPOPN 2
15392: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_VAR 0 2
15402: PPUSH
15403: CALL 33218 0 2
// end ;
15407: PPOPN 2
15409: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15410: LD_EXP 8
15414: PPUSH
15415: CALL_OW 257
15419: PUSH
15420: LD_INT 3
15422: NONEQUAL
15423: IFFALSE 15441
15425: GO 15427
15427: DISABLE
// begin enable ;
15428: ENABLE
// SetClass ( Mikhail , 3 ) ;
15429: LD_EXP 8
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: CALL_OW 336
// end ; end_of_file
15441: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15442: LD_INT 22
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 25
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: PUSH
15482: LD_INT 0
15484: EQUAL
15485: IFFALSE 15532
15487: PUSH
15488: LD_INT 22
15490: PUSH
15491: LD_INT 4
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 25
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: PUSH
15528: LD_INT 0
15530: EQUAL
15531: AND
15532: IFFALSE 15547
15534: PUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 255
15542: PUSH
15543: LD_INT 3
15545: EQUAL
15546: AND
15547: IFFALSE 15562
15549: PUSH
15550: LD_INT 10
15552: PPUSH
15553: CALL_OW 255
15557: PUSH
15558: LD_INT 3
15560: EQUAL
15561: AND
15562: IFFALSE 15574
15564: GO 15566
15566: DISABLE
// YouLost ( Engineer ) ;
15567: LD_STRING Engineer
15569: PPUSH
15570: CALL_OW 104
15574: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 255
15582: PUSH
15583: LD_INT 3
15585: EQUAL
15586: IFFALSE 15598
15588: PUSH
15589: LD_EXP 27
15593: PUSH
15594: LD_INT 1
15596: EQUAL
15597: AND
15598: IFFALSE 15610
15600: GO 15602
15602: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15603: LD_STRING DepotCaptured
15605: PPUSH
15606: CALL_OW 104
15610: END
// export function PrepareTigers ; var i , un ; begin
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
15615: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: DOUBLE
15622: LD_INT 1
15624: DEC
15625: ST_TO_ADDR
15626: LD_INT 2
15628: PUSH
15629: LD_INT 3
15631: PUSH
15632: LD_INT 4
15634: PUSH
15635: LD_INT 5
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: PUSH
15644: LD_OWVAR 67
15648: ARRAY
15649: PUSH
15650: FOR_TO
15651: IFFALSE 15766
// begin uc_side := 0 ;
15653: LD_ADDR_OWVAR 20
15657: PUSH
15658: LD_INT 0
15660: ST_TO_ADDR
// uc_nation := nation_nature ;
15661: LD_ADDR_OWVAR 21
15665: PUSH
15666: LD_INT 0
15668: ST_TO_ADDR
// hc_sex := sex_male ;
15669: LD_ADDR_OWVAR 27
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// hc_class := class_tiger ;
15677: LD_ADDR_OWVAR 28
15681: PUSH
15682: LD_INT 14
15684: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15685: LD_ADDR_OWVAR 31
15689: PUSH
15690: LD_EXP 14
15694: PUSH
15695: LD_INT 0
15697: PUSH
15698: LD_INT 0
15700: PUSH
15701: LD_INT 0
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15710: LD_ADDR_OWVAR 35
15714: PUSH
15715: LD_INT 30
15717: PUSH
15718: LD_INT 40
15720: PUSH
15721: LD_INT 45
15723: PUSH
15724: LD_INT 50
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_OWVAR 67
15737: ARRAY
15738: ST_TO_ADDR
// un = CreateHuman ;
15739: LD_ADDR_VAR 0 3
15743: PUSH
15744: CALL_OW 44
15748: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_INT 27
15756: PPUSH
15757: LD_INT 0
15759: PPUSH
15760: CALL_OW 49
// end ;
15764: GO 15650
15766: POP
15767: POP
// end ; end_of_file
15768: LD_VAR 0 1
15772: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 255
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15799
15786: PUSH
15787: LD_INT 10
15789: PPUSH
15790: CALL_OW 255
15794: PUSH
15795: LD_INT 1
15797: EQUAL
15798: AND
15799: IFFALSE 15811
15801: PUSH
15802: LD_EXP 20
15806: PUSH
15807: LD_INT 1
15809: EQUAL
15810: AND
15811: IFFALSE 15872
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 3
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 21
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 34
15836: PUSH
15837: LD_INT 51
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: PUSH
15847: LD_INT 58
15849: PUSH
15850: EMPTY
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: PUSH
15868: LD_INT 0
15870: EQUAL
15871: AND
15872: IFFALSE 15963
15874: GO 15876
15876: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15877: LD_INT 9450
15879: PUSH
15880: LD_INT 8400
15882: PUSH
15883: LD_INT 6300
15885: PUSH
15886: LD_INT 6300
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: PUSH
15895: LD_OWVAR 67
15899: ARRAY
15900: PPUSH
15901: CALL_OW 67
// if cargoEscape then
15905: LD_EXP 20
15909: IFFALSE 15963
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15911: LD_EXP 9
15915: PPUSH
15916: LD_STRING D6-Pow-1
15918: PPUSH
15919: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15923: LD_EXP 1
15927: PPUSH
15928: LD_STRING D6-JMM-1
15930: PPUSH
15931: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15935: LD_EXP 9
15939: PPUSH
15940: LD_STRING D6-Pow-2
15942: PPUSH
15943: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15947: LD_EXP 1
15951: PPUSH
15952: LD_STRING D6-JMM-2
15954: PPUSH
15955: CALL_OW 88
// FinishMission ;
15959: CALL 16185 0 0
// end ; end ;
15963: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 255
15971: PUSH
15972: LD_INT 1
15974: EQUAL
15975: IFFALSE 15990
15977: PUSH
15978: LD_INT 10
15980: PPUSH
15981: CALL_OW 255
15985: PUSH
15986: LD_INT 1
15988: EQUAL
15989: AND
15990: IFFALSE 16002
15992: PUSH
15993: LD_EXP 20
15997: PUSH
15998: LD_INT 1
16000: GREATER
16001: AND
16002: IFFALSE 16077
16004: GO 16006
16006: DISABLE
16007: LD_INT 0
16009: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
16010: LD_INT 11550
16012: PUSH
16013: LD_INT 10500
16015: PUSH
16016: LD_INT 9450
16018: PUSH
16019: LD_INT 8400
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: PUSH
16028: LD_OWVAR 67
16032: ARRAY
16033: PPUSH
16034: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
16038: LD_INT 1
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: LD_OWVAR 67
16060: ARRAY
16061: PPUSH
16062: LD_INT 13
16064: PPUSH
16065: CALL 13552 0 2
// lastBattle = 1 ;
16069: LD_ADDR_EXP 27
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// end ;
16077: PPOPN 1
16079: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16080: LD_EXP 27
16084: PUSH
16085: LD_INT 1
16087: EQUAL
16088: IFFALSE 16127
16090: PUSH
16091: LD_INT 26
16093: PPUSH
16094: LD_INT 22
16096: PUSH
16097: LD_INT 3
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 70
16122: PUSH
16123: LD_INT 0
16125: EQUAL
16126: AND
16127: IFFALSE 16184
16129: GO 16131
16131: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
16132: LD_EXP 9
16136: PPUSH
16137: LD_STRING D6-Pow-1
16139: PPUSH
16140: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16144: LD_EXP 1
16148: PPUSH
16149: LD_STRING D6-JMM-1
16151: PPUSH
16152: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16156: LD_EXP 9
16160: PPUSH
16161: LD_STRING D6-Pow-2
16163: PPUSH
16164: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING D6-JMM-2
16175: PPUSH
16176: CALL_OW 88
// FinishMission ;
16180: CALL 16185 0 0
// end ;
16184: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
16189: PPUSH
16190: PPUSH
16191: PPUSH
// if traitor then
16192: LD_EXP 33
16196: IFFALSE 16200
// exit ;
16198: GO 17076
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16200: LD_INT 22
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 21
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 23
16222: PUSH
16223: LD_INT 1
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 50
16232: PUSH
16233: EMPTY
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: PUSH
16247: LD_INT 2
16249: LESS
16250: IFFALSE 16259
// YouLost ( Troops ) ;
16252: LD_STRING Troops
16254: PPUSH
16255: CALL_OW 104
// if tick <= 18 18$00 then
16259: LD_OWVAR 1
16263: PUSH
16264: LD_INT 37800
16266: LESSEQUAL
16267: IFFALSE 16276
// SetAchievement ( ACH_ASPEED_2 ) ;
16269: LD_STRING ACH_ASPEED_2
16271: PPUSH
16272: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16276: LD_ADDR_VAR 0 2
16280: PUSH
16281: LD_INT 22
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 21
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 251
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if tmp then
16321: LD_VAR 0 2
16325: IFFALSE 16339
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_STRING 02_tanks_1
16334: PPUSH
16335: CALL 10896 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16339: LD_EXP 21
16343: PUSH
16344: LD_INT 1
16346: EQUAL
16347: IFFALSE 16360
16349: PUSH
16350: LD_EXP 8
16354: PPUSH
16355: CALL_OW 300
16359: AND
16360: IFFALSE 16374
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16362: LD_EXP 21
16366: PPUSH
16367: LD_STRING 02_mikhailStatus_1
16369: PPUSH
16370: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 274
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 275
16389: PPUSH
16390: LD_STRING 02_resources_4
16392: PPUSH
16393: CALL_OW 39
// m1 := false ;
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: LD_INT 0
16404: ST_TO_ADDR
// m2 := false ;
16405: LD_ADDR_VAR 0 4
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// m3 := false ;
16413: LD_ADDR_VAR 0 5
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 274
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 275
16436: PUSH
16437: LD_INT 200
16439: GREATEREQUAL
16440: IFFALSE 16462
// begin AddMedal ( Cans , 1 ) ;
16442: LD_STRING Cans
16444: PPUSH
16445: LD_INT 1
16447: PPUSH
16448: CALL_OW 101
// m1 := true ;
16452: LD_ADDR_VAR 0 3
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// end else
16460: GO 16473
// begin AddMedal ( Cans , - 1 ) ;
16462: LD_STRING Cans
16464: PPUSH
16465: LD_INT 1
16467: NEG
16468: PPUSH
16469: CALL_OW 101
// end ; if deadsCounter < 2 then
16473: LD_EXP 31
16477: PUSH
16478: LD_INT 2
16480: LESS
16481: IFFALSE 16503
// begin AddMedal ( Deaths , 1 ) ;
16483: LD_STRING Deaths
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 101
// m2 := true ;
16493: LD_ADDR_VAR 0 4
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// end else
16501: GO 16514
// begin AddMedal ( Deaths , - 1 ) ;
16503: LD_STRING Deaths
16505: PPUSH
16506: LD_INT 1
16508: NEG
16509: PPUSH
16510: CALL_OW 101
// end ; if mikhailStatus = 0 then
16514: LD_EXP 21
16518: PUSH
16519: LD_INT 0
16521: EQUAL
16522: IFFALSE 16535
// AddMedal ( Prisoner , - 1 ) ;
16524: LD_STRING Prisoner
16526: PPUSH
16527: LD_INT 1
16529: NEG
16530: PPUSH
16531: CALL_OW 101
// if mikhailStatus = 1 then
16535: LD_EXP 21
16539: PUSH
16540: LD_INT 1
16542: EQUAL
16543: IFFALSE 16563
// begin AddMedal ( Prisoner , 1 ) ;
16545: LD_STRING Prisoner
16547: PPUSH
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 101
// m3 := true ;
16555: LD_ADDR_VAR 0 5
16559: PUSH
16560: LD_INT 1
16562: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16563: LD_EXP 21
16567: PUSH
16568: LD_INT 2
16570: EQUAL
16571: IFFALSE 16591
// begin AddMedal ( Prisoner , 2 ) ;
16573: LD_STRING Prisoner
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 101
// m3 := true ;
16583: LD_ADDR_VAR 0 5
16587: PUSH
16588: LD_INT 1
16590: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16591: LD_EXP 21
16595: PUSH
16596: LD_INT 3
16598: EQUAL
16599: IFFALSE 16612
// AddMedal ( Prisoner , - 2 ) ;
16601: LD_STRING Prisoner
16603: PPUSH
16604: LD_INT 2
16606: NEG
16607: PPUSH
16608: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16612: LD_OWVAR 67
16616: PUSH
16617: LD_INT 3
16619: GREATEREQUAL
16620: IFFALSE 16628
16622: PUSH
16623: LD_VAR 0 3
16627: AND
16628: IFFALSE 16636
16630: PUSH
16631: LD_VAR 0 4
16635: AND
16636: IFFALSE 16644
16638: PUSH
16639: LD_VAR 0 5
16643: AND
16644: IFFALSE 16656
// SetAchievementEX ( ACH_AMER , 2 ) ;
16646: LD_STRING ACH_AMER
16648: PPUSH
16649: LD_INT 2
16651: PPUSH
16652: CALL_OW 564
// GiveMedals ( MAIN ) ;
16656: LD_STRING MAIN
16658: PPUSH
16659: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16663: LD_INT 22
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 23
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 21
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 69
16702: PPUSH
16703: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16707: LD_EXP 1
16711: PPUSH
16712: LD_EXP 34
16716: PUSH
16717: LD_STRING JMM
16719: STR
16720: PPUSH
16721: CALL_OW 38
// if IsOK ( Bobby ) then
16725: LD_EXP 2
16729: PPUSH
16730: CALL_OW 302
16734: IFFALSE 16754
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16736: LD_EXP 2
16740: PPUSH
16741: LD_EXP 34
16745: PUSH
16746: LD_STRING Bobby
16748: STR
16749: PPUSH
16750: CALL_OW 38
// if IsOK ( Cyrus ) then
16754: LD_EXP 3
16758: PPUSH
16759: CALL_OW 302
16763: IFFALSE 16783
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16765: LD_EXP 3
16769: PPUSH
16770: LD_EXP 34
16774: PUSH
16775: LD_STRING Cyrus
16777: STR
16778: PPUSH
16779: CALL_OW 38
// if IsOK ( Lisa ) then
16783: LD_EXP 4
16787: PPUSH
16788: CALL_OW 302
16792: IFFALSE 16819
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16794: LD_STRING enableBioCharacter(BIO_LISA)
16796: PPUSH
16797: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16801: LD_EXP 4
16805: PPUSH
16806: LD_EXP 34
16810: PUSH
16811: LD_STRING Lisa
16813: STR
16814: PPUSH
16815: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16819: LD_EXP 5
16823: PPUSH
16824: CALL_OW 302
16828: IFFALSE 16855
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16830: LD_STRING enableBioCharacter(BIO_KHAT)
16832: PPUSH
16833: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16837: LD_EXP 5
16841: PPUSH
16842: LD_EXP 34
16846: PUSH
16847: LD_STRING Khatam
16849: STR
16850: PPUSH
16851: CALL_OW 38
// end ; if IsOK ( Brian ) then
16855: LD_EXP 6
16859: PPUSH
16860: CALL_OW 302
16864: IFFALSE 16884
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16866: LD_EXP 6
16870: PPUSH
16871: LD_EXP 34
16875: PUSH
16876: LD_STRING Brian
16878: STR
16879: PPUSH
16880: CALL_OW 38
// if IsOk ( Jerry ) then
16884: LD_EXP 7
16888: PPUSH
16889: CALL_OW 302
16893: IFFALSE 16913
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16895: LD_EXP 7
16899: PPUSH
16900: LD_EXP 34
16904: PUSH
16905: LD_STRING Jerry
16907: STR
16908: PPUSH
16909: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16913: LD_EXP 21
16917: PUSH
16918: LD_INT 1
16920: EQUAL
16921: IFFALSE 16938
16923: PUSH
16924: LD_EXP 8
16928: PPUSH
16929: CALL_OW 255
16933: PUSH
16934: LD_INT 1
16936: EQUAL
16937: AND
16938: IFFALSE 16951
16940: PUSH
16941: LD_EXP 8
16945: PPUSH
16946: CALL_OW 302
16950: AND
16951: IFFALSE 16978
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16953: LD_STRING enableBioCharacter(BIO_MICH)
16955: PPUSH
16956: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16960: LD_EXP 8
16964: PPUSH
16965: LD_EXP 34
16969: PUSH
16970: LD_STRING Mikhail
16972: STR
16973: PPUSH
16974: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16978: LD_INT 50
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: PPUSH
17009: CALL_OW 69
17013: PUSH
17014: LD_EXP 1
17018: PUSH
17019: LD_EXP 2
17023: PUSH
17024: LD_EXP 3
17028: PUSH
17029: LD_EXP 4
17033: PUSH
17034: LD_EXP 5
17038: PUSH
17039: LD_EXP 6
17043: PUSH
17044: LD_EXP 7
17048: PUSH
17049: LD_EXP 8
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: DIFF
17064: PPUSH
17065: LD_STRING 02_other_survivors
17067: PPUSH
17068: CALL_OW 38
// YouWin ;
17072: CALL_OW 103
// end ; end_of_file end_of_file
17076: LD_VAR 0 1
17080: RET
// export globalGameSaveCounter ; every 0 0$1 do
17081: GO 17083
17083: DISABLE
// begin enable ;
17084: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17085: LD_STRING updateTimer(
17087: PUSH
17088: LD_OWVAR 1
17092: STR
17093: PUSH
17094: LD_STRING );
17096: STR
17097: PPUSH
17098: CALL_OW 559
// end ;
17102: END
// every 0 0$1 do
17103: GO 17105
17105: DISABLE
// begin globalGameSaveCounter := 0 ;
17106: LD_ADDR_EXP 37
17110: PUSH
17111: LD_INT 0
17113: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17114: LD_STRING setGameSaveCounter(0)
17116: PPUSH
17117: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17121: LD_STRING initStreamRollete();
17123: PPUSH
17124: CALL_OW 559
// InitStreamMode ;
17128: CALL 18473 0 0
// DefineStreamItems ( false ) ;
17132: LD_INT 0
17134: PPUSH
17135: CALL 18937 0 1
// end ;
17139: END
// export function SOS_MapStart ( ) ; begin
17140: LD_INT 0
17142: PPUSH
// if streamModeActive then
17143: LD_EXP 38
17147: IFFALSE 17156
// DefineStreamItems ( true ) ;
17149: LD_INT 1
17151: PPUSH
17152: CALL 18937 0 1
// UpdateLuaVariables ( ) ;
17156: CALL 17173 0 0
// UpdateFactoryWaypoints ( ) ;
17160: CALL 32059 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17164: CALL 32311 0 0
// end ;
17168: LD_VAR 0 1
17172: RET
// function UpdateLuaVariables ( ) ; begin
17173: LD_INT 0
17175: PPUSH
// if globalGameSaveCounter then
17176: LD_EXP 37
17180: IFFALSE 17214
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17182: LD_ADDR_EXP 37
17186: PUSH
17187: LD_EXP 37
17191: PPUSH
17192: CALL 78091 0 1
17196: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17197: LD_STRING setGameSaveCounter(
17199: PUSH
17200: LD_EXP 37
17204: STR
17205: PUSH
17206: LD_STRING )
17208: STR
17209: PPUSH
17210: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17214: LD_STRING setGameDifficulty(
17216: PUSH
17217: LD_OWVAR 67
17221: STR
17222: PUSH
17223: LD_STRING )
17225: STR
17226: PPUSH
17227: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17231: LD_STRING displayDifficulty(
17233: PUSH
17234: LD_OWVAR 67
17238: STR
17239: PUSH
17240: LD_STRING )
17242: STR
17243: PPUSH
17244: CALL_OW 559
// end ;
17248: LD_VAR 0 1
17252: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17253: LD_INT 0
17255: PPUSH
// if p2 = stream_mode then
17256: LD_VAR 0 2
17260: PUSH
17261: LD_INT 100
17263: EQUAL
17264: IFFALSE 18267
// begin if not StreamModeActive then
17266: LD_EXP 38
17270: NOT
17271: IFFALSE 17281
// StreamModeActive := true ;
17273: LD_ADDR_EXP 38
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// if p3 = 0 then
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 0
17288: EQUAL
17289: IFFALSE 17295
// InitStreamMode ;
17291: CALL 18473 0 0
// if p3 = 1 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_INT 1
17302: EQUAL
17303: IFFALSE 17313
// sRocket := true ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// if p3 = 2 then
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 2
17320: EQUAL
17321: IFFALSE 17331
// sSpeed := true ;
17323: LD_ADDR_EXP 42
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// if p3 = 3 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 3
17338: EQUAL
17339: IFFALSE 17349
// sEngine := true ;
17341: LD_ADDR_EXP 44
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// if p3 = 4 then
17349: LD_VAR 0 3
17353: PUSH
17354: LD_INT 4
17356: EQUAL
17357: IFFALSE 17367
// sSpec := true ;
17359: LD_ADDR_EXP 41
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// if p3 = 5 then
17367: LD_VAR 0 3
17371: PUSH
17372: LD_INT 5
17374: EQUAL
17375: IFFALSE 17385
// sLevel := true ;
17377: LD_ADDR_EXP 45
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// if p3 = 6 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_INT 6
17392: EQUAL
17393: IFFALSE 17403
// sArmoury := true ;
17395: LD_ADDR_EXP 46
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// if p3 = 7 then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_INT 7
17410: EQUAL
17411: IFFALSE 17421
// sRadar := true ;
17413: LD_ADDR_EXP 47
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// if p3 = 8 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 8
17428: EQUAL
17429: IFFALSE 17439
// sBunker := true ;
17431: LD_ADDR_EXP 48
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if p3 = 9 then
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 9
17446: EQUAL
17447: IFFALSE 17457
// sHack := true ;
17449: LD_ADDR_EXP 49
17453: PUSH
17454: LD_INT 1
17456: ST_TO_ADDR
// if p3 = 10 then
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 10
17464: EQUAL
17465: IFFALSE 17475
// sFire := true ;
17467: LD_ADDR_EXP 50
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// if p3 = 11 then
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 11
17482: EQUAL
17483: IFFALSE 17493
// sRefresh := true ;
17485: LD_ADDR_EXP 51
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// if p3 = 12 then
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 12
17500: EQUAL
17501: IFFALSE 17511
// sExp := true ;
17503: LD_ADDR_EXP 52
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if p3 = 13 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 13
17518: EQUAL
17519: IFFALSE 17529
// sDepot := true ;
17521: LD_ADDR_EXP 53
17525: PUSH
17526: LD_INT 1
17528: ST_TO_ADDR
// if p3 = 14 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_INT 14
17536: EQUAL
17537: IFFALSE 17547
// sFlag := true ;
17539: LD_ADDR_EXP 54
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if p3 = 15 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 15
17554: EQUAL
17555: IFFALSE 17565
// sKamikadze := true ;
17557: LD_ADDR_EXP 62
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// if p3 = 16 then
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 16
17572: EQUAL
17573: IFFALSE 17583
// sTroll := true ;
17575: LD_ADDR_EXP 63
17579: PUSH
17580: LD_INT 1
17582: ST_TO_ADDR
// if p3 = 17 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 17
17590: EQUAL
17591: IFFALSE 17601
// sSlow := true ;
17593: LD_ADDR_EXP 64
17597: PUSH
17598: LD_INT 1
17600: ST_TO_ADDR
// if p3 = 18 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_INT 18
17608: EQUAL
17609: IFFALSE 17619
// sLack := true ;
17611: LD_ADDR_EXP 65
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// if p3 = 19 then
17619: LD_VAR 0 3
17623: PUSH
17624: LD_INT 19
17626: EQUAL
17627: IFFALSE 17637
// sTank := true ;
17629: LD_ADDR_EXP 67
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// if p3 = 20 then
17637: LD_VAR 0 3
17641: PUSH
17642: LD_INT 20
17644: EQUAL
17645: IFFALSE 17655
// sRemote := true ;
17647: LD_ADDR_EXP 68
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// if p3 = 21 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 21
17662: EQUAL
17663: IFFALSE 17673
// sPowell := true ;
17665: LD_ADDR_EXP 69
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// if p3 = 22 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 22
17680: EQUAL
17681: IFFALSE 17691
// sTeleport := true ;
17683: LD_ADDR_EXP 72
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// if p3 = 23 then
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 23
17698: EQUAL
17699: IFFALSE 17709
// sOilTower := true ;
17701: LD_ADDR_EXP 74
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// if p3 = 24 then
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 24
17716: EQUAL
17717: IFFALSE 17727
// sShovel := true ;
17719: LD_ADDR_EXP 75
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// if p3 = 25 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 25
17734: EQUAL
17735: IFFALSE 17745
// sSheik := true ;
17737: LD_ADDR_EXP 76
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// if p3 = 26 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 26
17752: EQUAL
17753: IFFALSE 17763
// sEarthquake := true ;
17755: LD_ADDR_EXP 78
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
// if p3 = 27 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_INT 27
17770: EQUAL
17771: IFFALSE 17781
// sAI := true ;
17773: LD_ADDR_EXP 79
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// if p3 = 28 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_INT 28
17788: EQUAL
17789: IFFALSE 17799
// sCargo := true ;
17791: LD_ADDR_EXP 82
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
// if p3 = 29 then
17799: LD_VAR 0 3
17803: PUSH
17804: LD_INT 29
17806: EQUAL
17807: IFFALSE 17817
// sDLaser := true ;
17809: LD_ADDR_EXP 83
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// if p3 = 30 then
17817: LD_VAR 0 3
17821: PUSH
17822: LD_INT 30
17824: EQUAL
17825: IFFALSE 17835
// sExchange := true ;
17827: LD_ADDR_EXP 84
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// if p3 = 31 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_INT 31
17842: EQUAL
17843: IFFALSE 17853
// sFac := true ;
17845: LD_ADDR_EXP 85
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// if p3 = 32 then
17853: LD_VAR 0 3
17857: PUSH
17858: LD_INT 32
17860: EQUAL
17861: IFFALSE 17871
// sPower := true ;
17863: LD_ADDR_EXP 86
17867: PUSH
17868: LD_INT 1
17870: ST_TO_ADDR
// if p3 = 33 then
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 33
17878: EQUAL
17879: IFFALSE 17889
// sRandom := true ;
17881: LD_ADDR_EXP 87
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// if p3 = 34 then
17889: LD_VAR 0 3
17893: PUSH
17894: LD_INT 34
17896: EQUAL
17897: IFFALSE 17907
// sShield := true ;
17899: LD_ADDR_EXP 88
17903: PUSH
17904: LD_INT 1
17906: ST_TO_ADDR
// if p3 = 35 then
17907: LD_VAR 0 3
17911: PUSH
17912: LD_INT 35
17914: EQUAL
17915: IFFALSE 17925
// sTime := true ;
17917: LD_ADDR_EXP 89
17921: PUSH
17922: LD_INT 1
17924: ST_TO_ADDR
// if p3 = 36 then
17925: LD_VAR 0 3
17929: PUSH
17930: LD_INT 36
17932: EQUAL
17933: IFFALSE 17943
// sTools := true ;
17935: LD_ADDR_EXP 90
17939: PUSH
17940: LD_INT 1
17942: ST_TO_ADDR
// if p3 = 101 then
17943: LD_VAR 0 3
17947: PUSH
17948: LD_INT 101
17950: EQUAL
17951: IFFALSE 17961
// sSold := true ;
17953: LD_ADDR_EXP 55
17957: PUSH
17958: LD_INT 1
17960: ST_TO_ADDR
// if p3 = 102 then
17961: LD_VAR 0 3
17965: PUSH
17966: LD_INT 102
17968: EQUAL
17969: IFFALSE 17979
// sDiff := true ;
17971: LD_ADDR_EXP 56
17975: PUSH
17976: LD_INT 1
17978: ST_TO_ADDR
// if p3 = 103 then
17979: LD_VAR 0 3
17983: PUSH
17984: LD_INT 103
17986: EQUAL
17987: IFFALSE 17997
// sFog := true ;
17989: LD_ADDR_EXP 59
17993: PUSH
17994: LD_INT 1
17996: ST_TO_ADDR
// if p3 = 104 then
17997: LD_VAR 0 3
18001: PUSH
18002: LD_INT 104
18004: EQUAL
18005: IFFALSE 18015
// sReset := true ;
18007: LD_ADDR_EXP 60
18011: PUSH
18012: LD_INT 1
18014: ST_TO_ADDR
// if p3 = 105 then
18015: LD_VAR 0 3
18019: PUSH
18020: LD_INT 105
18022: EQUAL
18023: IFFALSE 18033
// sSun := true ;
18025: LD_ADDR_EXP 61
18029: PUSH
18030: LD_INT 1
18032: ST_TO_ADDR
// if p3 = 106 then
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 106
18040: EQUAL
18041: IFFALSE 18051
// sTiger := true ;
18043: LD_ADDR_EXP 57
18047: PUSH
18048: LD_INT 1
18050: ST_TO_ADDR
// if p3 = 107 then
18051: LD_VAR 0 3
18055: PUSH
18056: LD_INT 107
18058: EQUAL
18059: IFFALSE 18069
// sBomb := true ;
18061: LD_ADDR_EXP 58
18065: PUSH
18066: LD_INT 1
18068: ST_TO_ADDR
// if p3 = 108 then
18069: LD_VAR 0 3
18073: PUSH
18074: LD_INT 108
18076: EQUAL
18077: IFFALSE 18087
// sWound := true ;
18079: LD_ADDR_EXP 66
18083: PUSH
18084: LD_INT 1
18086: ST_TO_ADDR
// if p3 = 109 then
18087: LD_VAR 0 3
18091: PUSH
18092: LD_INT 109
18094: EQUAL
18095: IFFALSE 18105
// sBetray := true ;
18097: LD_ADDR_EXP 70
18101: PUSH
18102: LD_INT 1
18104: ST_TO_ADDR
// if p3 = 110 then
18105: LD_VAR 0 3
18109: PUSH
18110: LD_INT 110
18112: EQUAL
18113: IFFALSE 18123
// sContamin := true ;
18115: LD_ADDR_EXP 71
18119: PUSH
18120: LD_INT 1
18122: ST_TO_ADDR
// if p3 = 111 then
18123: LD_VAR 0 3
18127: PUSH
18128: LD_INT 111
18130: EQUAL
18131: IFFALSE 18141
// sOil := true ;
18133: LD_ADDR_EXP 73
18137: PUSH
18138: LD_INT 1
18140: ST_TO_ADDR
// if p3 = 112 then
18141: LD_VAR 0 3
18145: PUSH
18146: LD_INT 112
18148: EQUAL
18149: IFFALSE 18159
// sStu := true ;
18151: LD_ADDR_EXP 77
18155: PUSH
18156: LD_INT 1
18158: ST_TO_ADDR
// if p3 = 113 then
18159: LD_VAR 0 3
18163: PUSH
18164: LD_INT 113
18166: EQUAL
18167: IFFALSE 18177
// sBazooka := true ;
18169: LD_ADDR_EXP 80
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// if p3 = 114 then
18177: LD_VAR 0 3
18181: PUSH
18182: LD_INT 114
18184: EQUAL
18185: IFFALSE 18195
// sMortar := true ;
18187: LD_ADDR_EXP 81
18191: PUSH
18192: LD_INT 1
18194: ST_TO_ADDR
// if p3 = 115 then
18195: LD_VAR 0 3
18199: PUSH
18200: LD_INT 115
18202: EQUAL
18203: IFFALSE 18213
// sRanger := true ;
18205: LD_ADDR_EXP 91
18209: PUSH
18210: LD_INT 1
18212: ST_TO_ADDR
// if p3 = 116 then
18213: LD_VAR 0 3
18217: PUSH
18218: LD_INT 116
18220: EQUAL
18221: IFFALSE 18231
// sComputer := true ;
18223: LD_ADDR_EXP 92
18227: PUSH
18228: LD_INT 1
18230: ST_TO_ADDR
// if p3 = 117 then
18231: LD_VAR 0 3
18235: PUSH
18236: LD_INT 117
18238: EQUAL
18239: IFFALSE 18249
// s30 := true ;
18241: LD_ADDR_EXP 93
18245: PUSH
18246: LD_INT 1
18248: ST_TO_ADDR
// if p3 = 118 then
18249: LD_VAR 0 3
18253: PUSH
18254: LD_INT 118
18256: EQUAL
18257: IFFALSE 18267
// s60 := true ;
18259: LD_ADDR_EXP 94
18263: PUSH
18264: LD_INT 1
18266: ST_TO_ADDR
// end ; if p2 = hack_mode then
18267: LD_VAR 0 2
18271: PUSH
18272: LD_INT 101
18274: EQUAL
18275: IFFALSE 18403
// begin case p3 of 1 :
18277: LD_VAR 0 3
18281: PUSH
18282: LD_INT 1
18284: DOUBLE
18285: EQUAL
18286: IFTRUE 18290
18288: GO 18297
18290: POP
// hHackUnlimitedResources ; 2 :
18291: CALL 30666 0 0
18295: GO 18403
18297: LD_INT 2
18299: DOUBLE
18300: EQUAL
18301: IFTRUE 18305
18303: GO 18312
18305: POP
// hHackSetLevel10 ; 3 :
18306: CALL 30799 0 0
18310: GO 18403
18312: LD_INT 3
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18327
18320: POP
// hHackSetLevel10YourUnits ; 4 :
18321: CALL 30884 0 0
18325: GO 18403
18327: LD_INT 4
18329: DOUBLE
18330: EQUAL
18331: IFTRUE 18335
18333: GO 18342
18335: POP
// hHackInvincible ; 5 :
18336: CALL 31332 0 0
18340: GO 18403
18342: LD_INT 5
18344: DOUBLE
18345: EQUAL
18346: IFTRUE 18350
18348: GO 18357
18350: POP
// hHackInvisible ; 6 :
18351: CALL 31443 0 0
18355: GO 18403
18357: LD_INT 6
18359: DOUBLE
18360: EQUAL
18361: IFTRUE 18365
18363: GO 18372
18365: POP
// hHackChangeYourSide ; 7 :
18366: CALL 31500 0 0
18370: GO 18403
18372: LD_INT 7
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18387
18380: POP
// hHackChangeUnitSide ; 8 :
18381: CALL 31542 0 0
18385: GO 18403
18387: LD_INT 8
18389: DOUBLE
18390: EQUAL
18391: IFTRUE 18395
18393: GO 18402
18395: POP
// hHackFog ; end ;
18396: CALL 31643 0 0
18400: GO 18403
18402: POP
// end ; if p2 = game_save_mode then
18403: LD_VAR 0 2
18407: PUSH
18408: LD_INT 102
18410: EQUAL
18411: IFFALSE 18468
// begin if p3 = 1 then
18413: LD_VAR 0 3
18417: PUSH
18418: LD_INT 1
18420: EQUAL
18421: IFFALSE 18433
// globalGameSaveCounter := p4 ;
18423: LD_ADDR_EXP 37
18427: PUSH
18428: LD_VAR 0 4
18432: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18433: LD_VAR 0 3
18437: PUSH
18438: LD_INT 2
18440: EQUAL
18441: IFFALSE 18449
18443: PUSH
18444: LD_EXP 37
18448: AND
18449: IFFALSE 18468
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18451: LD_STRING setGameSaveCounter(
18453: PUSH
18454: LD_EXP 37
18458: STR
18459: PUSH
18460: LD_STRING )
18462: STR
18463: PPUSH
18464: CALL_OW 559
// end ; end ;
18468: LD_VAR 0 7
18472: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18473: LD_INT 0
18475: PPUSH
// streamModeActive := false ;
18476: LD_ADDR_EXP 38
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// normalCounter := 36 ;
18484: LD_ADDR_EXP 39
18488: PUSH
18489: LD_INT 36
18491: ST_TO_ADDR
// hardcoreCounter := 18 ;
18492: LD_ADDR_EXP 40
18496: PUSH
18497: LD_INT 18
18499: ST_TO_ADDR
// sRocket := false ;
18500: LD_ADDR_EXP 43
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// sSpeed := false ;
18508: LD_ADDR_EXP 42
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// sEngine := false ;
18516: LD_ADDR_EXP 44
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// sSpec := false ;
18524: LD_ADDR_EXP 41
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// sLevel := false ;
18532: LD_ADDR_EXP 45
18536: PUSH
18537: LD_INT 0
18539: ST_TO_ADDR
// sArmoury := false ;
18540: LD_ADDR_EXP 46
18544: PUSH
18545: LD_INT 0
18547: ST_TO_ADDR
// sRadar := false ;
18548: LD_ADDR_EXP 47
18552: PUSH
18553: LD_INT 0
18555: ST_TO_ADDR
// sBunker := false ;
18556: LD_ADDR_EXP 48
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// sHack := false ;
18564: LD_ADDR_EXP 49
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// sFire := false ;
18572: LD_ADDR_EXP 50
18576: PUSH
18577: LD_INT 0
18579: ST_TO_ADDR
// sRefresh := false ;
18580: LD_ADDR_EXP 51
18584: PUSH
18585: LD_INT 0
18587: ST_TO_ADDR
// sExp := false ;
18588: LD_ADDR_EXP 52
18592: PUSH
18593: LD_INT 0
18595: ST_TO_ADDR
// sDepot := false ;
18596: LD_ADDR_EXP 53
18600: PUSH
18601: LD_INT 0
18603: ST_TO_ADDR
// sFlag := false ;
18604: LD_ADDR_EXP 54
18608: PUSH
18609: LD_INT 0
18611: ST_TO_ADDR
// sKamikadze := false ;
18612: LD_ADDR_EXP 62
18616: PUSH
18617: LD_INT 0
18619: ST_TO_ADDR
// sTroll := false ;
18620: LD_ADDR_EXP 63
18624: PUSH
18625: LD_INT 0
18627: ST_TO_ADDR
// sSlow := false ;
18628: LD_ADDR_EXP 64
18632: PUSH
18633: LD_INT 0
18635: ST_TO_ADDR
// sLack := false ;
18636: LD_ADDR_EXP 65
18640: PUSH
18641: LD_INT 0
18643: ST_TO_ADDR
// sTank := false ;
18644: LD_ADDR_EXP 67
18648: PUSH
18649: LD_INT 0
18651: ST_TO_ADDR
// sRemote := false ;
18652: LD_ADDR_EXP 68
18656: PUSH
18657: LD_INT 0
18659: ST_TO_ADDR
// sPowell := false ;
18660: LD_ADDR_EXP 69
18664: PUSH
18665: LD_INT 0
18667: ST_TO_ADDR
// sTeleport := false ;
18668: LD_ADDR_EXP 72
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
// sOilTower := false ;
18676: LD_ADDR_EXP 74
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// sShovel := false ;
18684: LD_ADDR_EXP 75
18688: PUSH
18689: LD_INT 0
18691: ST_TO_ADDR
// sSheik := false ;
18692: LD_ADDR_EXP 76
18696: PUSH
18697: LD_INT 0
18699: ST_TO_ADDR
// sEarthquake := false ;
18700: LD_ADDR_EXP 78
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
// sAI := false ;
18708: LD_ADDR_EXP 79
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
// sCargo := false ;
18716: LD_ADDR_EXP 82
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// sDLaser := false ;
18724: LD_ADDR_EXP 83
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// sExchange := false ;
18732: LD_ADDR_EXP 84
18736: PUSH
18737: LD_INT 0
18739: ST_TO_ADDR
// sFac := false ;
18740: LD_ADDR_EXP 85
18744: PUSH
18745: LD_INT 0
18747: ST_TO_ADDR
// sPower := false ;
18748: LD_ADDR_EXP 86
18752: PUSH
18753: LD_INT 0
18755: ST_TO_ADDR
// sRandom := false ;
18756: LD_ADDR_EXP 87
18760: PUSH
18761: LD_INT 0
18763: ST_TO_ADDR
// sShield := false ;
18764: LD_ADDR_EXP 88
18768: PUSH
18769: LD_INT 0
18771: ST_TO_ADDR
// sTime := false ;
18772: LD_ADDR_EXP 89
18776: PUSH
18777: LD_INT 0
18779: ST_TO_ADDR
// sTools := false ;
18780: LD_ADDR_EXP 90
18784: PUSH
18785: LD_INT 0
18787: ST_TO_ADDR
// sSold := false ;
18788: LD_ADDR_EXP 55
18792: PUSH
18793: LD_INT 0
18795: ST_TO_ADDR
// sDiff := false ;
18796: LD_ADDR_EXP 56
18800: PUSH
18801: LD_INT 0
18803: ST_TO_ADDR
// sFog := false ;
18804: LD_ADDR_EXP 59
18808: PUSH
18809: LD_INT 0
18811: ST_TO_ADDR
// sReset := false ;
18812: LD_ADDR_EXP 60
18816: PUSH
18817: LD_INT 0
18819: ST_TO_ADDR
// sSun := false ;
18820: LD_ADDR_EXP 61
18824: PUSH
18825: LD_INT 0
18827: ST_TO_ADDR
// sTiger := false ;
18828: LD_ADDR_EXP 57
18832: PUSH
18833: LD_INT 0
18835: ST_TO_ADDR
// sBomb := false ;
18836: LD_ADDR_EXP 58
18840: PUSH
18841: LD_INT 0
18843: ST_TO_ADDR
// sWound := false ;
18844: LD_ADDR_EXP 66
18848: PUSH
18849: LD_INT 0
18851: ST_TO_ADDR
// sBetray := false ;
18852: LD_ADDR_EXP 70
18856: PUSH
18857: LD_INT 0
18859: ST_TO_ADDR
// sContamin := false ;
18860: LD_ADDR_EXP 71
18864: PUSH
18865: LD_INT 0
18867: ST_TO_ADDR
// sOil := false ;
18868: LD_ADDR_EXP 73
18872: PUSH
18873: LD_INT 0
18875: ST_TO_ADDR
// sStu := false ;
18876: LD_ADDR_EXP 77
18880: PUSH
18881: LD_INT 0
18883: ST_TO_ADDR
// sBazooka := false ;
18884: LD_ADDR_EXP 80
18888: PUSH
18889: LD_INT 0
18891: ST_TO_ADDR
// sMortar := false ;
18892: LD_ADDR_EXP 81
18896: PUSH
18897: LD_INT 0
18899: ST_TO_ADDR
// sRanger := false ;
18900: LD_ADDR_EXP 91
18904: PUSH
18905: LD_INT 0
18907: ST_TO_ADDR
// sComputer := false ;
18908: LD_ADDR_EXP 92
18912: PUSH
18913: LD_INT 0
18915: ST_TO_ADDR
// s30 := false ;
18916: LD_ADDR_EXP 93
18920: PUSH
18921: LD_INT 0
18923: ST_TO_ADDR
// s60 := false ;
18924: LD_ADDR_EXP 94
18928: PUSH
18929: LD_INT 0
18931: ST_TO_ADDR
// end ;
18932: LD_VAR 0 1
18936: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18937: LD_INT 0
18939: PPUSH
18940: PPUSH
18941: PPUSH
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
// result := [ ] ;
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: EMPTY
18952: ST_TO_ADDR
// if campaign_id = 1 then
18953: LD_OWVAR 69
18957: PUSH
18958: LD_INT 1
18960: EQUAL
18961: IFFALSE 22127
// begin case mission_number of 1 :
18963: LD_OWVAR 70
18967: PUSH
18968: LD_INT 1
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19052
18976: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 4
18987: PUSH
18988: LD_INT 11
18990: PUSH
18991: LD_INT 12
18993: PUSH
18994: LD_INT 15
18996: PUSH
18997: LD_INT 16
18999: PUSH
19000: LD_INT 22
19002: PUSH
19003: LD_INT 23
19005: PUSH
19006: LD_INT 26
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 101
19022: PUSH
19023: LD_INT 102
19025: PUSH
19026: LD_INT 106
19028: PUSH
19029: LD_INT 116
19031: PUSH
19032: LD_INT 117
19034: PUSH
19035: LD_INT 118
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: ST_TO_ADDR
19050: GO 22125
19052: LD_INT 2
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19144
19060: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19061: LD_ADDR_VAR 0 2
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 4
19071: PUSH
19072: LD_INT 11
19074: PUSH
19075: LD_INT 12
19077: PUSH
19078: LD_INT 15
19080: PUSH
19081: LD_INT 16
19083: PUSH
19084: LD_INT 22
19086: PUSH
19087: LD_INT 23
19089: PUSH
19090: LD_INT 26
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 101
19106: PUSH
19107: LD_INT 102
19109: PUSH
19110: LD_INT 105
19112: PUSH
19113: LD_INT 106
19115: PUSH
19116: LD_INT 108
19118: PUSH
19119: LD_INT 116
19121: PUSH
19122: LD_INT 117
19124: PUSH
19125: LD_INT 118
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: ST_TO_ADDR
19142: GO 22125
19144: LD_INT 3
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 19240
19152: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19153: LD_ADDR_VAR 0 2
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: LD_INT 4
19163: PUSH
19164: LD_INT 5
19166: PUSH
19167: LD_INT 11
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: LD_INT 15
19175: PUSH
19176: LD_INT 16
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 36
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 101
19202: PUSH
19203: LD_INT 102
19205: PUSH
19206: LD_INT 105
19208: PUSH
19209: LD_INT 106
19211: PUSH
19212: LD_INT 108
19214: PUSH
19215: LD_INT 116
19217: PUSH
19218: LD_INT 117
19220: PUSH
19221: LD_INT 118
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: ST_TO_ADDR
19238: GO 22125
19240: LD_INT 4
19242: DOUBLE
19243: EQUAL
19244: IFTRUE 19248
19246: GO 19344
19248: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19249: LD_ADDR_VAR 0 2
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 4
19259: PUSH
19260: LD_INT 5
19262: PUSH
19263: LD_INT 8
19265: PUSH
19266: LD_INT 11
19268: PUSH
19269: LD_INT 12
19271: PUSH
19272: LD_INT 15
19274: PUSH
19275: LD_INT 16
19277: PUSH
19278: LD_INT 22
19280: PUSH
19281: LD_INT 23
19283: PUSH
19284: LD_INT 26
19286: PUSH
19287: LD_INT 36
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 101
19306: PUSH
19307: LD_INT 102
19309: PUSH
19310: LD_INT 105
19312: PUSH
19313: LD_INT 106
19315: PUSH
19316: LD_INT 108
19318: PUSH
19319: LD_INT 116
19321: PUSH
19322: LD_INT 117
19324: PUSH
19325: LD_INT 118
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: ST_TO_ADDR
19342: GO 22125
19344: LD_INT 5
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19464
19352: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 4
19363: PUSH
19364: LD_INT 5
19366: PUSH
19367: LD_INT 6
19369: PUSH
19370: LD_INT 8
19372: PUSH
19373: LD_INT 11
19375: PUSH
19376: LD_INT 12
19378: PUSH
19379: LD_INT 15
19381: PUSH
19382: LD_INT 16
19384: PUSH
19385: LD_INT 22
19387: PUSH
19388: LD_INT 23
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 26
19396: PUSH
19397: LD_INT 36
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 101
19418: PUSH
19419: LD_INT 102
19421: PUSH
19422: LD_INT 105
19424: PUSH
19425: LD_INT 106
19427: PUSH
19428: LD_INT 108
19430: PUSH
19431: LD_INT 109
19433: PUSH
19434: LD_INT 112
19436: PUSH
19437: LD_INT 116
19439: PUSH
19440: LD_INT 117
19442: PUSH
19443: LD_INT 118
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: ST_TO_ADDR
19462: GO 22125
19464: LD_INT 6
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19604
19472: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19473: LD_ADDR_VAR 0 2
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 4
19483: PUSH
19484: LD_INT 5
19486: PUSH
19487: LD_INT 6
19489: PUSH
19490: LD_INT 8
19492: PUSH
19493: LD_INT 11
19495: PUSH
19496: LD_INT 12
19498: PUSH
19499: LD_INT 15
19501: PUSH
19502: LD_INT 16
19504: PUSH
19505: LD_INT 20
19507: PUSH
19508: LD_INT 21
19510: PUSH
19511: LD_INT 22
19513: PUSH
19514: LD_INT 23
19516: PUSH
19517: LD_INT 25
19519: PUSH
19520: LD_INT 26
19522: PUSH
19523: LD_INT 30
19525: PUSH
19526: LD_INT 31
19528: PUSH
19529: LD_INT 32
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 101
19558: PUSH
19559: LD_INT 102
19561: PUSH
19562: LD_INT 105
19564: PUSH
19565: LD_INT 106
19567: PUSH
19568: LD_INT 108
19570: PUSH
19571: LD_INT 109
19573: PUSH
19574: LD_INT 112
19576: PUSH
19577: LD_INT 116
19579: PUSH
19580: LD_INT 117
19582: PUSH
19583: LD_INT 118
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: ST_TO_ADDR
19602: GO 22125
19604: LD_INT 7
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19724
19612: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 4
19623: PUSH
19624: LD_INT 5
19626: PUSH
19627: LD_INT 7
19629: PUSH
19630: LD_INT 11
19632: PUSH
19633: LD_INT 12
19635: PUSH
19636: LD_INT 15
19638: PUSH
19639: LD_INT 16
19641: PUSH
19642: LD_INT 20
19644: PUSH
19645: LD_INT 21
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_INT 23
19653: PUSH
19654: LD_INT 25
19656: PUSH
19657: LD_INT 26
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 101
19678: PUSH
19679: LD_INT 102
19681: PUSH
19682: LD_INT 103
19684: PUSH
19685: LD_INT 105
19687: PUSH
19688: LD_INT 106
19690: PUSH
19691: LD_INT 108
19693: PUSH
19694: LD_INT 112
19696: PUSH
19697: LD_INT 116
19699: PUSH
19700: LD_INT 117
19702: PUSH
19703: LD_INT 118
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
19722: GO 22125
19724: LD_INT 8
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19872
19732: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 6
19749: PUSH
19750: LD_INT 7
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 11
19758: PUSH
19759: LD_INT 12
19761: PUSH
19762: LD_INT 15
19764: PUSH
19765: LD_INT 16
19767: PUSH
19768: LD_INT 20
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: LD_INT 23
19779: PUSH
19780: LD_INT 25
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_INT 31
19791: PUSH
19792: LD_INT 32
19794: PUSH
19795: LD_INT 36
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 101
19822: PUSH
19823: LD_INT 102
19825: PUSH
19826: LD_INT 103
19828: PUSH
19829: LD_INT 105
19831: PUSH
19832: LD_INT 106
19834: PUSH
19835: LD_INT 108
19837: PUSH
19838: LD_INT 109
19840: PUSH
19841: LD_INT 112
19843: PUSH
19844: LD_INT 116
19846: PUSH
19847: LD_INT 117
19849: PUSH
19850: LD_INT 118
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: ST_TO_ADDR
19870: GO 22125
19872: LD_INT 9
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 20028
19880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19881: LD_ADDR_VAR 0 2
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: LD_INT 4
19891: PUSH
19892: LD_INT 5
19894: PUSH
19895: LD_INT 6
19897: PUSH
19898: LD_INT 7
19900: PUSH
19901: LD_INT 8
19903: PUSH
19904: LD_INT 11
19906: PUSH
19907: LD_INT 12
19909: PUSH
19910: LD_INT 15
19912: PUSH
19913: LD_INT 16
19915: PUSH
19916: LD_INT 20
19918: PUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 22
19924: PUSH
19925: LD_INT 23
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: LD_INT 26
19933: PUSH
19934: LD_INT 28
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 31
19942: PUSH
19943: LD_INT 32
19945: PUSH
19946: LD_INT 36
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 101
19974: PUSH
19975: LD_INT 102
19977: PUSH
19978: LD_INT 103
19980: PUSH
19981: LD_INT 105
19983: PUSH
19984: LD_INT 106
19986: PUSH
19987: LD_INT 108
19989: PUSH
19990: LD_INT 109
19992: PUSH
19993: LD_INT 112
19995: PUSH
19996: LD_INT 114
19998: PUSH
19999: LD_INT 116
20001: PUSH
20002: LD_INT 117
20004: PUSH
20005: LD_INT 118
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 22125
20028: LD_INT 10
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20232
20036: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: LD_INT 4
20047: PUSH
20048: LD_INT 5
20050: PUSH
20051: LD_INT 6
20053: PUSH
20054: LD_INT 7
20056: PUSH
20057: LD_INT 8
20059: PUSH
20060: LD_INT 9
20062: PUSH
20063: LD_INT 10
20065: PUSH
20066: LD_INT 11
20068: PUSH
20069: LD_INT 12
20071: PUSH
20072: LD_INT 13
20074: PUSH
20075: LD_INT 14
20077: PUSH
20078: LD_INT 15
20080: PUSH
20081: LD_INT 16
20083: PUSH
20084: LD_INT 17
20086: PUSH
20087: LD_INT 18
20089: PUSH
20090: LD_INT 19
20092: PUSH
20093: LD_INT 20
20095: PUSH
20096: LD_INT 21
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_INT 23
20104: PUSH
20105: LD_INT 24
20107: PUSH
20108: LD_INT 25
20110: PUSH
20111: LD_INT 26
20113: PUSH
20114: LD_INT 28
20116: PUSH
20117: LD_INT 30
20119: PUSH
20120: LD_INT 31
20122: PUSH
20123: LD_INT 32
20125: PUSH
20126: LD_INT 36
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 101
20162: PUSH
20163: LD_INT 102
20165: PUSH
20166: LD_INT 103
20168: PUSH
20169: LD_INT 104
20171: PUSH
20172: LD_INT 105
20174: PUSH
20175: LD_INT 106
20177: PUSH
20178: LD_INT 107
20180: PUSH
20181: LD_INT 108
20183: PUSH
20184: LD_INT 109
20186: PUSH
20187: LD_INT 110
20189: PUSH
20190: LD_INT 111
20192: PUSH
20193: LD_INT 112
20195: PUSH
20196: LD_INT 114
20198: PUSH
20199: LD_INT 116
20201: PUSH
20202: LD_INT 117
20204: PUSH
20205: LD_INT 118
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: ST_TO_ADDR
20230: GO 22125
20232: LD_INT 11
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20444
20240: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: LD_INT 3
20251: PUSH
20252: LD_INT 4
20254: PUSH
20255: LD_INT 5
20257: PUSH
20258: LD_INT 6
20260: PUSH
20261: LD_INT 7
20263: PUSH
20264: LD_INT 8
20266: PUSH
20267: LD_INT 9
20269: PUSH
20270: LD_INT 10
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 13
20281: PUSH
20282: LD_INT 14
20284: PUSH
20285: LD_INT 15
20287: PUSH
20288: LD_INT 16
20290: PUSH
20291: LD_INT 17
20293: PUSH
20294: LD_INT 18
20296: PUSH
20297: LD_INT 19
20299: PUSH
20300: LD_INT 20
20302: PUSH
20303: LD_INT 21
20305: PUSH
20306: LD_INT 22
20308: PUSH
20309: LD_INT 23
20311: PUSH
20312: LD_INT 24
20314: PUSH
20315: LD_INT 25
20317: PUSH
20318: LD_INT 26
20320: PUSH
20321: LD_INT 28
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 31
20329: PUSH
20330: LD_INT 32
20332: PUSH
20333: LD_INT 34
20335: PUSH
20336: LD_INT 36
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 101
20374: PUSH
20375: LD_INT 102
20377: PUSH
20378: LD_INT 103
20380: PUSH
20381: LD_INT 104
20383: PUSH
20384: LD_INT 105
20386: PUSH
20387: LD_INT 106
20389: PUSH
20390: LD_INT 107
20392: PUSH
20393: LD_INT 108
20395: PUSH
20396: LD_INT 109
20398: PUSH
20399: LD_INT 110
20401: PUSH
20402: LD_INT 111
20404: PUSH
20405: LD_INT 112
20407: PUSH
20408: LD_INT 114
20410: PUSH
20411: LD_INT 116
20413: PUSH
20414: LD_INT 117
20416: PUSH
20417: LD_INT 118
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: ST_TO_ADDR
20442: GO 22125
20444: LD_INT 12
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 20672
20452: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20453: LD_ADDR_VAR 0 2
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 4
20469: PUSH
20470: LD_INT 5
20472: PUSH
20473: LD_INT 6
20475: PUSH
20476: LD_INT 7
20478: PUSH
20479: LD_INT 8
20481: PUSH
20482: LD_INT 9
20484: PUSH
20485: LD_INT 10
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 12
20493: PUSH
20494: LD_INT 13
20496: PUSH
20497: LD_INT 14
20499: PUSH
20500: LD_INT 15
20502: PUSH
20503: LD_INT 16
20505: PUSH
20506: LD_INT 17
20508: PUSH
20509: LD_INT 18
20511: PUSH
20512: LD_INT 19
20514: PUSH
20515: LD_INT 20
20517: PUSH
20518: LD_INT 21
20520: PUSH
20521: LD_INT 22
20523: PUSH
20524: LD_INT 23
20526: PUSH
20527: LD_INT 24
20529: PUSH
20530: LD_INT 25
20532: PUSH
20533: LD_INT 26
20535: PUSH
20536: LD_INT 27
20538: PUSH
20539: LD_INT 28
20541: PUSH
20542: LD_INT 30
20544: PUSH
20545: LD_INT 31
20547: PUSH
20548: LD_INT 32
20550: PUSH
20551: LD_INT 33
20553: PUSH
20554: LD_INT 34
20556: PUSH
20557: LD_INT 36
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 101
20598: PUSH
20599: LD_INT 102
20601: PUSH
20602: LD_INT 103
20604: PUSH
20605: LD_INT 104
20607: PUSH
20608: LD_INT 105
20610: PUSH
20611: LD_INT 106
20613: PUSH
20614: LD_INT 107
20616: PUSH
20617: LD_INT 108
20619: PUSH
20620: LD_INT 109
20622: PUSH
20623: LD_INT 110
20625: PUSH
20626: LD_INT 111
20628: PUSH
20629: LD_INT 112
20631: PUSH
20632: LD_INT 113
20634: PUSH
20635: LD_INT 114
20637: PUSH
20638: LD_INT 116
20640: PUSH
20641: LD_INT 117
20643: PUSH
20644: LD_INT 118
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 22125
20672: LD_INT 13
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20888
20680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: LD_INT 3
20694: PUSH
20695: LD_INT 4
20697: PUSH
20698: LD_INT 5
20700: PUSH
20701: LD_INT 8
20703: PUSH
20704: LD_INT 9
20706: PUSH
20707: LD_INT 10
20709: PUSH
20710: LD_INT 11
20712: PUSH
20713: LD_INT 12
20715: PUSH
20716: LD_INT 14
20718: PUSH
20719: LD_INT 15
20721: PUSH
20722: LD_INT 16
20724: PUSH
20725: LD_INT 17
20727: PUSH
20728: LD_INT 18
20730: PUSH
20731: LD_INT 19
20733: PUSH
20734: LD_INT 20
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 22
20742: PUSH
20743: LD_INT 23
20745: PUSH
20746: LD_INT 24
20748: PUSH
20749: LD_INT 25
20751: PUSH
20752: LD_INT 26
20754: PUSH
20755: LD_INT 27
20757: PUSH
20758: LD_INT 28
20760: PUSH
20761: LD_INT 30
20763: PUSH
20764: LD_INT 31
20766: PUSH
20767: LD_INT 32
20769: PUSH
20770: LD_INT 33
20772: PUSH
20773: LD_INT 34
20775: PUSH
20776: LD_INT 36
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 101
20814: PUSH
20815: LD_INT 102
20817: PUSH
20818: LD_INT 103
20820: PUSH
20821: LD_INT 104
20823: PUSH
20824: LD_INT 105
20826: PUSH
20827: LD_INT 106
20829: PUSH
20830: LD_INT 107
20832: PUSH
20833: LD_INT 108
20835: PUSH
20836: LD_INT 109
20838: PUSH
20839: LD_INT 110
20841: PUSH
20842: LD_INT 111
20844: PUSH
20845: LD_INT 112
20847: PUSH
20848: LD_INT 113
20850: PUSH
20851: LD_INT 114
20853: PUSH
20854: LD_INT 116
20856: PUSH
20857: LD_INT 117
20859: PUSH
20860: LD_INT 118
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: ST_TO_ADDR
20886: GO 22125
20888: LD_INT 14
20890: DOUBLE
20891: EQUAL
20892: IFTRUE 20896
20894: GO 21120
20896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20897: LD_ADDR_VAR 0 2
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: LD_INT 4
20913: PUSH
20914: LD_INT 5
20916: PUSH
20917: LD_INT 6
20919: PUSH
20920: LD_INT 7
20922: PUSH
20923: LD_INT 8
20925: PUSH
20926: LD_INT 9
20928: PUSH
20929: LD_INT 10
20931: PUSH
20932: LD_INT 11
20934: PUSH
20935: LD_INT 12
20937: PUSH
20938: LD_INT 13
20940: PUSH
20941: LD_INT 14
20943: PUSH
20944: LD_INT 15
20946: PUSH
20947: LD_INT 16
20949: PUSH
20950: LD_INT 17
20952: PUSH
20953: LD_INT 18
20955: PUSH
20956: LD_INT 19
20958: PUSH
20959: LD_INT 20
20961: PUSH
20962: LD_INT 21
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 24
20973: PUSH
20974: LD_INT 25
20976: PUSH
20977: LD_INT 26
20979: PUSH
20980: LD_INT 27
20982: PUSH
20983: LD_INT 28
20985: PUSH
20986: LD_INT 29
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: LD_INT 31
20994: PUSH
20995: LD_INT 32
20997: PUSH
20998: LD_INT 33
21000: PUSH
21001: LD_INT 34
21003: PUSH
21004: LD_INT 36
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 101
21046: PUSH
21047: LD_INT 102
21049: PUSH
21050: LD_INT 103
21052: PUSH
21053: LD_INT 104
21055: PUSH
21056: LD_INT 105
21058: PUSH
21059: LD_INT 106
21061: PUSH
21062: LD_INT 107
21064: PUSH
21065: LD_INT 108
21067: PUSH
21068: LD_INT 109
21070: PUSH
21071: LD_INT 110
21073: PUSH
21074: LD_INT 111
21076: PUSH
21077: LD_INT 112
21079: PUSH
21080: LD_INT 113
21082: PUSH
21083: LD_INT 114
21085: PUSH
21086: LD_INT 116
21088: PUSH
21089: LD_INT 117
21091: PUSH
21092: LD_INT 118
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 22125
21120: LD_INT 15
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21352
21128: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: LD_INT 4
21145: PUSH
21146: LD_INT 5
21148: PUSH
21149: LD_INT 6
21151: PUSH
21152: LD_INT 7
21154: PUSH
21155: LD_INT 8
21157: PUSH
21158: LD_INT 9
21160: PUSH
21161: LD_INT 10
21163: PUSH
21164: LD_INT 11
21166: PUSH
21167: LD_INT 12
21169: PUSH
21170: LD_INT 13
21172: PUSH
21173: LD_INT 14
21175: PUSH
21176: LD_INT 15
21178: PUSH
21179: LD_INT 16
21181: PUSH
21182: LD_INT 17
21184: PUSH
21185: LD_INT 18
21187: PUSH
21188: LD_INT 19
21190: PUSH
21191: LD_INT 20
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 22
21199: PUSH
21200: LD_INT 23
21202: PUSH
21203: LD_INT 24
21205: PUSH
21206: LD_INT 25
21208: PUSH
21209: LD_INT 26
21211: PUSH
21212: LD_INT 27
21214: PUSH
21215: LD_INT 28
21217: PUSH
21218: LD_INT 29
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: LD_INT 31
21226: PUSH
21227: LD_INT 32
21229: PUSH
21230: LD_INT 33
21232: PUSH
21233: LD_INT 34
21235: PUSH
21236: LD_INT 36
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 101
21278: PUSH
21279: LD_INT 102
21281: PUSH
21282: LD_INT 103
21284: PUSH
21285: LD_INT 104
21287: PUSH
21288: LD_INT 105
21290: PUSH
21291: LD_INT 106
21293: PUSH
21294: LD_INT 107
21296: PUSH
21297: LD_INT 108
21299: PUSH
21300: LD_INT 109
21302: PUSH
21303: LD_INT 110
21305: PUSH
21306: LD_INT 111
21308: PUSH
21309: LD_INT 112
21311: PUSH
21312: LD_INT 113
21314: PUSH
21315: LD_INT 114
21317: PUSH
21318: LD_INT 116
21320: PUSH
21321: LD_INT 117
21323: PUSH
21324: LD_INT 118
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: ST_TO_ADDR
21350: GO 22125
21352: LD_INT 16
21354: DOUBLE
21355: EQUAL
21356: IFTRUE 21360
21358: GO 21496
21360: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: LD_INT 4
21371: PUSH
21372: LD_INT 5
21374: PUSH
21375: LD_INT 7
21377: PUSH
21378: LD_INT 11
21380: PUSH
21381: LD_INT 12
21383: PUSH
21384: LD_INT 15
21386: PUSH
21387: LD_INT 16
21389: PUSH
21390: LD_INT 20
21392: PUSH
21393: LD_INT 21
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_INT 23
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 26
21407: PUSH
21408: LD_INT 30
21410: PUSH
21411: LD_INT 31
21413: PUSH
21414: LD_INT 32
21416: PUSH
21417: LD_INT 33
21419: PUSH
21420: LD_INT 34
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 103
21452: PUSH
21453: LD_INT 106
21455: PUSH
21456: LD_INT 108
21458: PUSH
21459: LD_INT 112
21461: PUSH
21462: LD_INT 113
21464: PUSH
21465: LD_INT 114
21467: PUSH
21468: LD_INT 116
21470: PUSH
21471: LD_INT 117
21473: PUSH
21474: LD_INT 118
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: ST_TO_ADDR
21494: GO 22125
21496: LD_INT 17
21498: DOUBLE
21499: EQUAL
21500: IFTRUE 21504
21502: GO 21728
21504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21505: LD_ADDR_VAR 0 2
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 3
21518: PUSH
21519: LD_INT 4
21521: PUSH
21522: LD_INT 5
21524: PUSH
21525: LD_INT 6
21527: PUSH
21528: LD_INT 7
21530: PUSH
21531: LD_INT 8
21533: PUSH
21534: LD_INT 9
21536: PUSH
21537: LD_INT 10
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: LD_INT 12
21545: PUSH
21546: LD_INT 13
21548: PUSH
21549: LD_INT 14
21551: PUSH
21552: LD_INT 15
21554: PUSH
21555: LD_INT 16
21557: PUSH
21558: LD_INT 17
21560: PUSH
21561: LD_INT 18
21563: PUSH
21564: LD_INT 19
21566: PUSH
21567: LD_INT 20
21569: PUSH
21570: LD_INT 21
21572: PUSH
21573: LD_INT 22
21575: PUSH
21576: LD_INT 23
21578: PUSH
21579: LD_INT 24
21581: PUSH
21582: LD_INT 25
21584: PUSH
21585: LD_INT 26
21587: PUSH
21588: LD_INT 27
21590: PUSH
21591: LD_INT 28
21593: PUSH
21594: LD_INT 29
21596: PUSH
21597: LD_INT 30
21599: PUSH
21600: LD_INT 31
21602: PUSH
21603: LD_INT 32
21605: PUSH
21606: LD_INT 33
21608: PUSH
21609: LD_INT 34
21611: PUSH
21612: LD_INT 36
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 101
21654: PUSH
21655: LD_INT 102
21657: PUSH
21658: LD_INT 103
21660: PUSH
21661: LD_INT 104
21663: PUSH
21664: LD_INT 105
21666: PUSH
21667: LD_INT 106
21669: PUSH
21670: LD_INT 107
21672: PUSH
21673: LD_INT 108
21675: PUSH
21676: LD_INT 109
21678: PUSH
21679: LD_INT 110
21681: PUSH
21682: LD_INT 111
21684: PUSH
21685: LD_INT 112
21687: PUSH
21688: LD_INT 113
21690: PUSH
21691: LD_INT 114
21693: PUSH
21694: LD_INT 116
21696: PUSH
21697: LD_INT 117
21699: PUSH
21700: LD_INT 118
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: ST_TO_ADDR
21726: GO 22125
21728: LD_INT 18
21730: DOUBLE
21731: EQUAL
21732: IFTRUE 21736
21734: GO 21884
21736: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21737: LD_ADDR_VAR 0 2
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 4
21747: PUSH
21748: LD_INT 5
21750: PUSH
21751: LD_INT 7
21753: PUSH
21754: LD_INT 11
21756: PUSH
21757: LD_INT 12
21759: PUSH
21760: LD_INT 15
21762: PUSH
21763: LD_INT 16
21765: PUSH
21766: LD_INT 20
21768: PUSH
21769: LD_INT 21
21771: PUSH
21772: LD_INT 22
21774: PUSH
21775: LD_INT 23
21777: PUSH
21778: LD_INT 25
21780: PUSH
21781: LD_INT 26
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 31
21789: PUSH
21790: LD_INT 32
21792: PUSH
21793: LD_INT 33
21795: PUSH
21796: LD_INT 34
21798: PUSH
21799: LD_INT 35
21801: PUSH
21802: LD_INT 36
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 101
21830: PUSH
21831: LD_INT 102
21833: PUSH
21834: LD_INT 103
21836: PUSH
21837: LD_INT 106
21839: PUSH
21840: LD_INT 108
21842: PUSH
21843: LD_INT 112
21845: PUSH
21846: LD_INT 113
21848: PUSH
21849: LD_INT 114
21851: PUSH
21852: LD_INT 115
21854: PUSH
21855: LD_INT 116
21857: PUSH
21858: LD_INT 117
21860: PUSH
21861: LD_INT 118
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: ST_TO_ADDR
21882: GO 22125
21884: LD_INT 19
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 22124
21892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21893: LD_ADDR_VAR 0 2
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 4
21909: PUSH
21910: LD_INT 5
21912: PUSH
21913: LD_INT 6
21915: PUSH
21916: LD_INT 7
21918: PUSH
21919: LD_INT 8
21921: PUSH
21922: LD_INT 9
21924: PUSH
21925: LD_INT 10
21927: PUSH
21928: LD_INT 11
21930: PUSH
21931: LD_INT 12
21933: PUSH
21934: LD_INT 13
21936: PUSH
21937: LD_INT 14
21939: PUSH
21940: LD_INT 15
21942: PUSH
21943: LD_INT 16
21945: PUSH
21946: LD_INT 17
21948: PUSH
21949: LD_INT 18
21951: PUSH
21952: LD_INT 19
21954: PUSH
21955: LD_INT 20
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 24
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 27
21978: PUSH
21979: LD_INT 28
21981: PUSH
21982: LD_INT 29
21984: PUSH
21985: LD_INT 30
21987: PUSH
21988: LD_INT 31
21990: PUSH
21991: LD_INT 32
21993: PUSH
21994: LD_INT 33
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 35
22002: PUSH
22003: LD_INT 36
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 101
22046: PUSH
22047: LD_INT 102
22049: PUSH
22050: LD_INT 103
22052: PUSH
22053: LD_INT 104
22055: PUSH
22056: LD_INT 105
22058: PUSH
22059: LD_INT 106
22061: PUSH
22062: LD_INT 107
22064: PUSH
22065: LD_INT 108
22067: PUSH
22068: LD_INT 109
22070: PUSH
22071: LD_INT 110
22073: PUSH
22074: LD_INT 111
22076: PUSH
22077: LD_INT 112
22079: PUSH
22080: LD_INT 113
22082: PUSH
22083: LD_INT 114
22085: PUSH
22086: LD_INT 115
22088: PUSH
22089: LD_INT 116
22091: PUSH
22092: LD_INT 117
22094: PUSH
22095: LD_INT 118
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: ST_TO_ADDR
22122: GO 22125
22124: POP
// end else
22125: GO 22356
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22127: LD_ADDR_VAR 0 2
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: LD_INT 5
22146: PUSH
22147: LD_INT 6
22149: PUSH
22150: LD_INT 7
22152: PUSH
22153: LD_INT 8
22155: PUSH
22156: LD_INT 9
22158: PUSH
22159: LD_INT 10
22161: PUSH
22162: LD_INT 11
22164: PUSH
22165: LD_INT 12
22167: PUSH
22168: LD_INT 13
22170: PUSH
22171: LD_INT 14
22173: PUSH
22174: LD_INT 15
22176: PUSH
22177: LD_INT 16
22179: PUSH
22180: LD_INT 17
22182: PUSH
22183: LD_INT 18
22185: PUSH
22186: LD_INT 19
22188: PUSH
22189: LD_INT 20
22191: PUSH
22192: LD_INT 21
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_INT 23
22200: PUSH
22201: LD_INT 24
22203: PUSH
22204: LD_INT 25
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 27
22212: PUSH
22213: LD_INT 28
22215: PUSH
22216: LD_INT 29
22218: PUSH
22219: LD_INT 30
22221: PUSH
22222: LD_INT 31
22224: PUSH
22225: LD_INT 32
22227: PUSH
22228: LD_INT 33
22230: PUSH
22231: LD_INT 34
22233: PUSH
22234: LD_INT 35
22236: PUSH
22237: LD_INT 36
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 101
22280: PUSH
22281: LD_INT 102
22283: PUSH
22284: LD_INT 103
22286: PUSH
22287: LD_INT 104
22289: PUSH
22290: LD_INT 105
22292: PUSH
22293: LD_INT 106
22295: PUSH
22296: LD_INT 107
22298: PUSH
22299: LD_INT 108
22301: PUSH
22302: LD_INT 109
22304: PUSH
22305: LD_INT 110
22307: PUSH
22308: LD_INT 111
22310: PUSH
22311: LD_INT 112
22313: PUSH
22314: LD_INT 113
22316: PUSH
22317: LD_INT 114
22319: PUSH
22320: LD_INT 115
22322: PUSH
22323: LD_INT 116
22325: PUSH
22326: LD_INT 117
22328: PUSH
22329: LD_INT 118
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: ST_TO_ADDR
// if result then
22356: LD_VAR 0 2
22360: IFFALSE 23146
// begin normal :=  ;
22362: LD_ADDR_VAR 0 5
22366: PUSH
22367: LD_STRING 
22369: ST_TO_ADDR
// hardcore :=  ;
22370: LD_ADDR_VAR 0 6
22374: PUSH
22375: LD_STRING 
22377: ST_TO_ADDR
// active :=  ;
22378: LD_ADDR_VAR 0 7
22382: PUSH
22383: LD_STRING 
22385: ST_TO_ADDR
// for i = 1 to normalCounter do
22386: LD_ADDR_VAR 0 8
22390: PUSH
22391: DOUBLE
22392: LD_INT 1
22394: DEC
22395: ST_TO_ADDR
22396: LD_EXP 39
22400: PUSH
22401: FOR_TO
22402: IFFALSE 22503
// begin tmp := 0 ;
22404: LD_ADDR_VAR 0 3
22408: PUSH
22409: LD_STRING 0
22411: ST_TO_ADDR
// if result [ 1 ] then
22412: LD_VAR 0 2
22416: PUSH
22417: LD_INT 1
22419: ARRAY
22420: IFFALSE 22485
// if result [ 1 ] [ 1 ] = i then
22422: LD_VAR 0 2
22426: PUSH
22427: LD_INT 1
22429: ARRAY
22430: PUSH
22431: LD_INT 1
22433: ARRAY
22434: PUSH
22435: LD_VAR 0 8
22439: EQUAL
22440: IFFALSE 22485
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_VAR 0 2
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: LD_VAR 0 2
22459: PUSH
22460: LD_INT 1
22462: ARRAY
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 3
22471: PPUSH
22472: CALL_OW 1
22476: ST_TO_ADDR
// tmp := 1 ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_STRING 1
22484: ST_TO_ADDR
// end ; normal := normal & tmp ;
22485: LD_ADDR_VAR 0 5
22489: PUSH
22490: LD_VAR 0 5
22494: PUSH
22495: LD_VAR 0 3
22499: STR
22500: ST_TO_ADDR
// end ;
22501: GO 22401
22503: POP
22504: POP
// for i = 1 to hardcoreCounter do
22505: LD_ADDR_VAR 0 8
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_EXP 40
22519: PUSH
22520: FOR_TO
22521: IFFALSE 22626
// begin tmp := 0 ;
22523: LD_ADDR_VAR 0 3
22527: PUSH
22528: LD_STRING 0
22530: ST_TO_ADDR
// if result [ 2 ] then
22531: LD_VAR 0 2
22535: PUSH
22536: LD_INT 2
22538: ARRAY
22539: IFFALSE 22608
// if result [ 2 ] [ 1 ] = 100 + i then
22541: LD_VAR 0 2
22545: PUSH
22546: LD_INT 2
22548: ARRAY
22549: PUSH
22550: LD_INT 1
22552: ARRAY
22553: PUSH
22554: LD_INT 100
22556: PUSH
22557: LD_VAR 0 8
22561: PLUS
22562: EQUAL
22563: IFFALSE 22608
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22565: LD_ADDR_VAR 0 2
22569: PUSH
22570: LD_VAR 0 2
22574: PPUSH
22575: LD_INT 2
22577: PPUSH
22578: LD_VAR 0 2
22582: PUSH
22583: LD_INT 2
22585: ARRAY
22586: PPUSH
22587: LD_INT 1
22589: PPUSH
22590: CALL_OW 3
22594: PPUSH
22595: CALL_OW 1
22599: ST_TO_ADDR
// tmp := 1 ;
22600: LD_ADDR_VAR 0 3
22604: PUSH
22605: LD_STRING 1
22607: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22608: LD_ADDR_VAR 0 6
22612: PUSH
22613: LD_VAR 0 6
22617: PUSH
22618: LD_VAR 0 3
22622: STR
22623: ST_TO_ADDR
// end ;
22624: GO 22520
22626: POP
22627: POP
// if isGameLoad then
22628: LD_VAR 0 1
22632: IFFALSE 23107
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22634: LD_ADDR_VAR 0 4
22638: PUSH
22639: LD_EXP 43
22643: PUSH
22644: LD_EXP 42
22648: PUSH
22649: LD_EXP 44
22653: PUSH
22654: LD_EXP 41
22658: PUSH
22659: LD_EXP 45
22663: PUSH
22664: LD_EXP 46
22668: PUSH
22669: LD_EXP 47
22673: PUSH
22674: LD_EXP 48
22678: PUSH
22679: LD_EXP 49
22683: PUSH
22684: LD_EXP 50
22688: PUSH
22689: LD_EXP 51
22693: PUSH
22694: LD_EXP 52
22698: PUSH
22699: LD_EXP 53
22703: PUSH
22704: LD_EXP 54
22708: PUSH
22709: LD_EXP 62
22713: PUSH
22714: LD_EXP 63
22718: PUSH
22719: LD_EXP 64
22723: PUSH
22724: LD_EXP 65
22728: PUSH
22729: LD_EXP 67
22733: PUSH
22734: LD_EXP 68
22738: PUSH
22739: LD_EXP 69
22743: PUSH
22744: LD_EXP 72
22748: PUSH
22749: LD_EXP 74
22753: PUSH
22754: LD_EXP 75
22758: PUSH
22759: LD_EXP 76
22763: PUSH
22764: LD_EXP 78
22768: PUSH
22769: LD_EXP 79
22773: PUSH
22774: LD_EXP 82
22778: PUSH
22779: LD_EXP 83
22783: PUSH
22784: LD_EXP 84
22788: PUSH
22789: LD_EXP 85
22793: PUSH
22794: LD_EXP 86
22798: PUSH
22799: LD_EXP 87
22803: PUSH
22804: LD_EXP 88
22808: PUSH
22809: LD_EXP 89
22813: PUSH
22814: LD_EXP 90
22818: PUSH
22819: LD_EXP 55
22823: PUSH
22824: LD_EXP 56
22828: PUSH
22829: LD_EXP 59
22833: PUSH
22834: LD_EXP 60
22838: PUSH
22839: LD_EXP 61
22843: PUSH
22844: LD_EXP 57
22848: PUSH
22849: LD_EXP 58
22853: PUSH
22854: LD_EXP 66
22858: PUSH
22859: LD_EXP 70
22863: PUSH
22864: LD_EXP 71
22868: PUSH
22869: LD_EXP 73
22873: PUSH
22874: LD_EXP 77
22878: PUSH
22879: LD_EXP 80
22883: PUSH
22884: LD_EXP 81
22888: PUSH
22889: LD_EXP 91
22893: PUSH
22894: LD_EXP 92
22898: PUSH
22899: LD_EXP 93
22903: PUSH
22904: LD_EXP 94
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// tmp :=  ;
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_STRING 
22972: ST_TO_ADDR
// for i = 1 to normalCounter do
22973: LD_ADDR_VAR 0 8
22977: PUSH
22978: DOUBLE
22979: LD_INT 1
22981: DEC
22982: ST_TO_ADDR
22983: LD_EXP 39
22987: PUSH
22988: FOR_TO
22989: IFFALSE 23025
// begin if flags [ i ] then
22991: LD_VAR 0 4
22995: PUSH
22996: LD_VAR 0 8
23000: ARRAY
23001: IFFALSE 23023
// tmp := tmp & i & ; ;
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: LD_VAR 0 8
23017: STR
23018: PUSH
23019: LD_STRING ;
23021: STR
23022: ST_TO_ADDR
// end ;
23023: GO 22988
23025: POP
23026: POP
// for i = 1 to hardcoreCounter do
23027: LD_ADDR_VAR 0 8
23031: PUSH
23032: DOUBLE
23033: LD_INT 1
23035: DEC
23036: ST_TO_ADDR
23037: LD_EXP 40
23041: PUSH
23042: FOR_TO
23043: IFFALSE 23089
// begin if flags [ normalCounter + i ] then
23045: LD_VAR 0 4
23049: PUSH
23050: LD_EXP 39
23054: PUSH
23055: LD_VAR 0 8
23059: PLUS
23060: ARRAY
23061: IFFALSE 23087
// tmp := tmp & ( 100 + i ) & ; ;
23063: LD_ADDR_VAR 0 3
23067: PUSH
23068: LD_VAR 0 3
23072: PUSH
23073: LD_INT 100
23075: PUSH
23076: LD_VAR 0 8
23080: PLUS
23081: STR
23082: PUSH
23083: LD_STRING ;
23085: STR
23086: ST_TO_ADDR
// end ;
23087: GO 23042
23089: POP
23090: POP
// if tmp then
23091: LD_VAR 0 3
23095: IFFALSE 23107
// active := tmp ;
23097: LD_ADDR_VAR 0 7
23101: PUSH
23102: LD_VAR 0 3
23106: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23107: LD_STRING getStreamItemsFromMission("
23109: PUSH
23110: LD_VAR 0 5
23114: STR
23115: PUSH
23116: LD_STRING ","
23118: STR
23119: PUSH
23120: LD_VAR 0 6
23124: STR
23125: PUSH
23126: LD_STRING ","
23128: STR
23129: PUSH
23130: LD_VAR 0 7
23134: STR
23135: PUSH
23136: LD_STRING ")
23138: STR
23139: PPUSH
23140: CALL_OW 559
// end else
23144: GO 23153
// ToLua ( getStreamItemsFromMission("","","") ) ;
23146: LD_STRING getStreamItemsFromMission("","","")
23148: PPUSH
23149: CALL_OW 559
// end ;
23153: LD_VAR 0 2
23157: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23158: LD_EXP 38
23162: IFFALSE 23170
23164: PUSH
23165: LD_EXP 43
23169: AND
23170: IFFALSE 23294
23172: GO 23174
23174: DISABLE
23175: LD_INT 0
23177: PPUSH
23178: PPUSH
// begin enable ;
23179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23180: LD_ADDR_VAR 0 2
23184: PUSH
23185: LD_INT 22
23187: PUSH
23188: LD_OWVAR 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 34
23202: PUSH
23203: LD_INT 7
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 34
23212: PUSH
23213: LD_INT 45
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 34
23222: PUSH
23223: LD_INT 28
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 34
23232: PUSH
23233: LD_INT 47
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: ST_TO_ADDR
// if not tmp then
23256: LD_VAR 0 2
23260: NOT
23261: IFFALSE 23265
// exit ;
23263: GO 23294
// for i in tmp do
23265: LD_ADDR_VAR 0 1
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23292
// begin SetLives ( i , 0 ) ;
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_INT 0
23285: PPUSH
23286: CALL_OW 234
// end ;
23290: GO 23275
23292: POP
23293: POP
// end ;
23294: PPOPN 2
23296: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23297: LD_EXP 38
23301: IFFALSE 23309
23303: PUSH
23304: LD_EXP 44
23308: AND
23309: IFFALSE 23393
23311: GO 23313
23313: DISABLE
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
// begin enable ;
23318: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_INT 22
23326: PUSH
23327: LD_OWVAR 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 32
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: ST_TO_ADDR
// if not tmp then
23355: LD_VAR 0 2
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23393
// for i in tmp do
23364: LD_ADDR_VAR 0 1
23368: PUSH
23369: LD_VAR 0 2
23373: PUSH
23374: FOR_IN
23375: IFFALSE 23391
// begin SetLives ( i , 0 ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: LD_INT 0
23384: PPUSH
23385: CALL_OW 234
// end ;
23389: GO 23374
23391: POP
23392: POP
// end ;
23393: PPOPN 2
23395: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23396: LD_EXP 38
23400: IFFALSE 23408
23402: PUSH
23403: LD_EXP 41
23407: AND
23408: IFFALSE 23501
23410: GO 23412
23412: DISABLE
23413: LD_INT 0
23415: PPUSH
// begin enable ;
23416: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23417: LD_ADDR_VAR 0 1
23421: PUSH
23422: LD_INT 22
23424: PUSH
23425: LD_OWVAR 2
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 25
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 9
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 25
23459: PUSH
23460: LD_INT 8
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PPUSH
23477: CALL_OW 69
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// begin SetClass ( i , 1 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 1
23492: PPUSH
23493: CALL_OW 336
// end ;
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 1
23503: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23504: LD_EXP 38
23508: IFFALSE 23516
23510: PUSH
23511: LD_EXP 42
23515: AND
23516: IFFALSE 23528
23518: PUSH
23519: LD_OWVAR 65
23523: PUSH
23524: LD_INT 7
23526: LESS
23527: AND
23528: IFFALSE 23542
23530: GO 23532
23532: DISABLE
// begin enable ;
23533: ENABLE
// game_speed := 7 ;
23534: LD_ADDR_OWVAR 65
23538: PUSH
23539: LD_INT 7
23541: ST_TO_ADDR
// end ;
23542: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23543: LD_EXP 38
23547: IFFALSE 23555
23549: PUSH
23550: LD_EXP 45
23554: AND
23555: IFFALSE 23757
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
23563: PPUSH
23564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23565: LD_ADDR_VAR 0 3
23569: PUSH
23570: LD_INT 81
23572: PUSH
23573: LD_OWVAR 2
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 21
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 69
23600: ST_TO_ADDR
// if not tmp then
23601: LD_VAR 0 3
23605: NOT
23606: IFFALSE 23610
// exit ;
23608: GO 23757
// if tmp > 5 then
23610: LD_VAR 0 3
23614: PUSH
23615: LD_INT 5
23617: GREATER
23618: IFFALSE 23630
// k := 5 else
23620: LD_ADDR_VAR 0 2
23624: PUSH
23625: LD_INT 5
23627: ST_TO_ADDR
23628: GO 23640
// k := tmp ;
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_VAR 0 3
23639: ST_TO_ADDR
// for i := 1 to k do
23640: LD_ADDR_VAR 0 1
23644: PUSH
23645: DOUBLE
23646: LD_INT 1
23648: DEC
23649: ST_TO_ADDR
23650: LD_VAR 0 2
23654: PUSH
23655: FOR_TO
23656: IFFALSE 23755
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23658: LD_VAR 0 3
23662: PUSH
23663: LD_VAR 0 1
23667: ARRAY
23668: PPUSH
23669: LD_VAR 0 1
23673: PUSH
23674: LD_INT 4
23676: MOD
23677: PUSH
23678: LD_INT 1
23680: PLUS
23681: PPUSH
23682: CALL_OW 259
23686: PUSH
23687: LD_INT 10
23689: LESS
23690: IFFALSE 23753
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23692: LD_VAR 0 3
23696: PUSH
23697: LD_VAR 0 1
23701: ARRAY
23702: PPUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_INT 4
23710: MOD
23711: PUSH
23712: LD_INT 1
23714: PLUS
23715: PPUSH
23716: LD_VAR 0 3
23720: PUSH
23721: LD_VAR 0 1
23725: ARRAY
23726: PPUSH
23727: LD_VAR 0 1
23731: PUSH
23732: LD_INT 4
23734: MOD
23735: PUSH
23736: LD_INT 1
23738: PLUS
23739: PPUSH
23740: CALL_OW 259
23744: PUSH
23745: LD_INT 1
23747: PLUS
23748: PPUSH
23749: CALL_OW 237
23753: GO 23655
23755: POP
23756: POP
// end ;
23757: PPOPN 3
23759: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23760: LD_EXP 38
23764: IFFALSE 23772
23766: PUSH
23767: LD_EXP 46
23771: AND
23772: IFFALSE 23792
23774: GO 23776
23776: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23777: LD_INT 4
23779: PPUSH
23780: LD_OWVAR 2
23784: PPUSH
23785: LD_INT 0
23787: PPUSH
23788: CALL_OW 324
23792: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23793: LD_EXP 38
23797: IFFALSE 23805
23799: PUSH
23800: LD_EXP 75
23804: AND
23805: IFFALSE 23825
23807: GO 23809
23809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23810: LD_INT 19
23812: PPUSH
23813: LD_OWVAR 2
23817: PPUSH
23818: LD_INT 0
23820: PPUSH
23821: CALL_OW 324
23825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23826: LD_EXP 38
23830: IFFALSE 23838
23832: PUSH
23833: LD_EXP 47
23837: AND
23838: IFFALSE 23940
23840: GO 23842
23842: DISABLE
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
// begin enable ;
23847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 22
23855: PUSH
23856: LD_OWVAR 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 34
23870: PUSH
23871: LD_INT 11
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 34
23880: PUSH
23881: LD_INT 30
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PPUSH
23897: CALL_OW 69
23901: ST_TO_ADDR
// if not tmp then
23902: LD_VAR 0 2
23906: NOT
23907: IFFALSE 23911
// exit ;
23909: GO 23940
// for i in tmp do
23911: LD_ADDR_VAR 0 1
23915: PUSH
23916: LD_VAR 0 2
23920: PUSH
23921: FOR_IN
23922: IFFALSE 23938
// begin SetLives ( i , 0 ) ;
23924: LD_VAR 0 1
23928: PPUSH
23929: LD_INT 0
23931: PPUSH
23932: CALL_OW 234
// end ;
23936: GO 23921
23938: POP
23939: POP
// end ;
23940: PPOPN 2
23942: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23943: LD_EXP 38
23947: IFFALSE 23955
23949: PUSH
23950: LD_EXP 48
23954: AND
23955: IFFALSE 23975
23957: GO 23959
23959: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23960: LD_INT 32
23962: PPUSH
23963: LD_OWVAR 2
23967: PPUSH
23968: LD_INT 0
23970: PPUSH
23971: CALL_OW 324
23975: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23976: LD_EXP 38
23980: IFFALSE 23988
23982: PUSH
23983: LD_EXP 49
23987: AND
23988: IFFALSE 24171
23990: GO 23992
23992: DISABLE
23993: LD_INT 0
23995: PPUSH
23996: PPUSH
23997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23998: LD_ADDR_VAR 0 2
24002: PUSH
24003: LD_INT 22
24005: PUSH
24006: LD_OWVAR 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 33
24017: PUSH
24018: LD_INT 3
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 69
24033: ST_TO_ADDR
// if not tmp then
24034: LD_VAR 0 2
24038: NOT
24039: IFFALSE 24043
// exit ;
24041: GO 24171
// side := 0 ;
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_INT 0
24050: ST_TO_ADDR
// for i := 1 to 8 do
24051: LD_ADDR_VAR 0 1
24055: PUSH
24056: DOUBLE
24057: LD_INT 1
24059: DEC
24060: ST_TO_ADDR
24061: LD_INT 8
24063: PUSH
24064: FOR_TO
24065: IFFALSE 24115
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24067: LD_OWVAR 2
24071: PUSH
24072: LD_VAR 0 1
24076: NONEQUAL
24077: IFFALSE 24099
24079: PUSH
24080: LD_OWVAR 2
24084: PPUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL_OW 81
24094: PUSH
24095: LD_INT 2
24097: EQUAL
24098: AND
24099: IFFALSE 24113
// begin side := i ;
24101: LD_ADDR_VAR 0 3
24105: PUSH
24106: LD_VAR 0 1
24110: ST_TO_ADDR
// break ;
24111: GO 24115
// end ;
24113: GO 24064
24115: POP
24116: POP
// if not side then
24117: LD_VAR 0 3
24121: NOT
24122: IFFALSE 24126
// exit ;
24124: GO 24171
// for i := 1 to tmp do
24126: LD_ADDR_VAR 0 1
24130: PUSH
24131: DOUBLE
24132: LD_INT 1
24134: DEC
24135: ST_TO_ADDR
24136: LD_VAR 0 2
24140: PUSH
24141: FOR_TO
24142: IFFALSE 24169
// if Prob ( 60 ) then
24144: LD_INT 60
24146: PPUSH
24147: CALL_OW 13
24151: IFFALSE 24167
// SetSide ( i , side ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: LD_VAR 0 3
24162: PPUSH
24163: CALL_OW 235
24167: GO 24141
24169: POP
24170: POP
// end ;
24171: PPOPN 3
24173: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24174: LD_EXP 38
24178: IFFALSE 24186
24180: PUSH
24181: LD_EXP 51
24185: AND
24186: IFFALSE 24305
24188: GO 24190
24190: DISABLE
24191: LD_INT 0
24193: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24194: LD_ADDR_VAR 0 1
24198: PUSH
24199: LD_INT 22
24201: PUSH
24202: LD_OWVAR 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 21
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 3
24223: PUSH
24224: LD_INT 23
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: PPUSH
24243: CALL_OW 69
24247: PUSH
24248: FOR_IN
24249: IFFALSE 24303
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL_OW 257
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: LD_INT 4
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: IN
24279: IFFALSE 24301
// SetClass ( un , rand ( 1 , 4 ) ) ;
24281: LD_VAR 0 1
24285: PPUSH
24286: LD_INT 1
24288: PPUSH
24289: LD_INT 4
24291: PPUSH
24292: CALL_OW 12
24296: PPUSH
24297: CALL_OW 336
24301: GO 24248
24303: POP
24304: POP
// end ;
24305: PPOPN 1
24307: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24308: LD_EXP 38
24312: IFFALSE 24320
24314: PUSH
24315: LD_EXP 50
24319: AND
24320: IFFALSE 24399
24322: GO 24324
24324: DISABLE
24325: LD_INT 0
24327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24328: LD_ADDR_VAR 0 1
24332: PUSH
24333: LD_INT 22
24335: PUSH
24336: LD_OWVAR 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 21
24347: PUSH
24348: LD_INT 3
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PPUSH
24359: CALL_OW 69
24363: ST_TO_ADDR
// if not tmp then
24364: LD_VAR 0 1
24368: NOT
24369: IFFALSE 24373
// exit ;
24371: GO 24399
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24373: LD_VAR 0 1
24377: PUSH
24378: LD_INT 1
24380: PPUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 12
24390: ARRAY
24391: PPUSH
24392: LD_INT 100
24394: PPUSH
24395: CALL_OW 234
// end ;
24399: PPOPN 1
24401: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24402: LD_EXP 38
24406: IFFALSE 24414
24408: PUSH
24409: LD_EXP 52
24413: AND
24414: IFFALSE 24512
24416: GO 24418
24418: DISABLE
24419: LD_INT 0
24421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24422: LD_ADDR_VAR 0 1
24426: PUSH
24427: LD_INT 22
24429: PUSH
24430: LD_OWVAR 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PPUSH
24453: CALL_OW 69
24457: ST_TO_ADDR
// if not tmp then
24458: LD_VAR 0 1
24462: NOT
24463: IFFALSE 24467
// exit ;
24465: GO 24512
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24467: LD_VAR 0 1
24471: PUSH
24472: LD_INT 1
24474: PPUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 12
24484: ARRAY
24485: PPUSH
24486: LD_INT 1
24488: PPUSH
24489: LD_INT 4
24491: PPUSH
24492: CALL_OW 12
24496: PPUSH
24497: LD_INT 3000
24499: PPUSH
24500: LD_INT 9000
24502: PPUSH
24503: CALL_OW 12
24507: PPUSH
24508: CALL_OW 492
// end ;
24512: PPOPN 1
24514: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24515: LD_EXP 38
24519: IFFALSE 24527
24521: PUSH
24522: LD_EXP 53
24526: AND
24527: IFFALSE 24547
24529: GO 24531
24531: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24532: LD_INT 1
24534: PPUSH
24535: LD_OWVAR 2
24539: PPUSH
24540: LD_INT 0
24542: PPUSH
24543: CALL_OW 324
24547: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24548: LD_EXP 38
24552: IFFALSE 24560
24554: PUSH
24555: LD_EXP 54
24559: AND
24560: IFFALSE 24643
24562: GO 24564
24564: DISABLE
24565: LD_INT 0
24567: PPUSH
24568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24569: LD_ADDR_VAR 0 2
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_OWVAR 2
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PPUSH
24600: CALL_OW 69
24604: ST_TO_ADDR
// if not tmp then
24605: LD_VAR 0 2
24609: NOT
24610: IFFALSE 24614
// exit ;
24612: GO 24643
// for i in tmp do
24614: LD_ADDR_VAR 0 1
24618: PUSH
24619: LD_VAR 0 2
24623: PUSH
24624: FOR_IN
24625: IFFALSE 24641
// SetBLevel ( i , 10 ) ;
24627: LD_VAR 0 1
24631: PPUSH
24632: LD_INT 10
24634: PPUSH
24635: CALL_OW 241
24639: GO 24624
24641: POP
24642: POP
// end ;
24643: PPOPN 2
24645: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24646: LD_EXP 38
24650: IFFALSE 24658
24652: PUSH
24653: LD_EXP 55
24657: AND
24658: IFFALSE 24769
24660: GO 24662
24662: DISABLE
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
24667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_OWVAR 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 25
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: ST_TO_ADDR
// if not tmp then
24704: LD_VAR 0 3
24708: NOT
24709: IFFALSE 24713
// exit ;
24711: GO 24769
// un := tmp [ rand ( 1 , tmp ) ] ;
24713: LD_ADDR_VAR 0 2
24717: PUSH
24718: LD_VAR 0 3
24722: PUSH
24723: LD_INT 1
24725: PPUSH
24726: LD_VAR 0 3
24730: PPUSH
24731: CALL_OW 12
24735: ARRAY
24736: ST_TO_ADDR
// if Crawls ( un ) then
24737: LD_VAR 0 2
24741: PPUSH
24742: CALL_OW 318
24746: IFFALSE 24757
// ComWalk ( un ) ;
24748: LD_VAR 0 2
24752: PPUSH
24753: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24757: LD_VAR 0 2
24761: PPUSH
24762: LD_INT 5
24764: PPUSH
24765: CALL_OW 336
// end ;
24769: PPOPN 3
24771: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24772: LD_EXP 38
24776: IFFALSE 24784
24778: PUSH
24779: LD_EXP 56
24783: AND
24784: IFFALSE 24796
24786: PUSH
24787: LD_OWVAR 67
24791: PUSH
24792: LD_INT 4
24794: LESS
24795: AND
24796: IFFALSE 24815
24798: GO 24800
24800: DISABLE
// begin Difficulty := Difficulty + 1 ;
24801: LD_ADDR_OWVAR 67
24805: PUSH
24806: LD_OWVAR 67
24810: PUSH
24811: LD_INT 1
24813: PLUS
24814: ST_TO_ADDR
// end ;
24815: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24816: LD_EXP 38
24820: IFFALSE 24828
24822: PUSH
24823: LD_EXP 57
24827: AND
24828: IFFALSE 24931
24830: GO 24832
24832: DISABLE
24833: LD_INT 0
24835: PPUSH
// begin for i := 1 to 5 do
24836: LD_ADDR_VAR 0 1
24840: PUSH
24841: DOUBLE
24842: LD_INT 1
24844: DEC
24845: ST_TO_ADDR
24846: LD_INT 5
24848: PUSH
24849: FOR_TO
24850: IFFALSE 24929
// begin uc_nation := nation_nature ;
24852: LD_ADDR_OWVAR 21
24856: PUSH
24857: LD_INT 0
24859: ST_TO_ADDR
// uc_side := 0 ;
24860: LD_ADDR_OWVAR 20
24864: PUSH
24865: LD_INT 0
24867: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24868: LD_ADDR_OWVAR 29
24872: PUSH
24873: LD_INT 12
24875: PUSH
24876: LD_INT 12
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: ST_TO_ADDR
// hc_agressivity := 20 ;
24883: LD_ADDR_OWVAR 35
24887: PUSH
24888: LD_INT 20
24890: ST_TO_ADDR
// hc_class := class_tiger ;
24891: LD_ADDR_OWVAR 28
24895: PUSH
24896: LD_INT 14
24898: ST_TO_ADDR
// hc_gallery :=  ;
24899: LD_ADDR_OWVAR 33
24903: PUSH
24904: LD_STRING 
24906: ST_TO_ADDR
// hc_name :=  ;
24907: LD_ADDR_OWVAR 26
24911: PUSH
24912: LD_STRING 
24914: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24915: CALL_OW 44
24919: PPUSH
24920: LD_INT 0
24922: PPUSH
24923: CALL_OW 51
// end ;
24927: GO 24849
24929: POP
24930: POP
// end ;
24931: PPOPN 1
24933: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24934: LD_EXP 38
24938: IFFALSE 24946
24940: PUSH
24941: LD_EXP 58
24945: AND
24946: IFFALSE 24955
24948: GO 24950
24950: DISABLE
// StreamSibBomb ;
24951: CALL 24956 0 0
24955: END
// export function StreamSibBomb ; var i , x , y ; begin
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
// result := false ;
24962: LD_ADDR_VAR 0 1
24966: PUSH
24967: LD_INT 0
24969: ST_TO_ADDR
// for i := 1 to 16 do
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: DOUBLE
24976: LD_INT 1
24978: DEC
24979: ST_TO_ADDR
24980: LD_INT 16
24982: PUSH
24983: FOR_TO
24984: IFFALSE 25183
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: LD_INT 10
24993: PUSH
24994: LD_INT 20
24996: PUSH
24997: LD_INT 30
24999: PUSH
25000: LD_INT 40
25002: PUSH
25003: LD_INT 50
25005: PUSH
25006: LD_INT 60
25008: PUSH
25009: LD_INT 70
25011: PUSH
25012: LD_INT 80
25014: PUSH
25015: LD_INT 90
25017: PUSH
25018: LD_INT 100
25020: PUSH
25021: LD_INT 110
25023: PUSH
25024: LD_INT 120
25026: PUSH
25027: LD_INT 130
25029: PUSH
25030: LD_INT 140
25032: PUSH
25033: LD_INT 150
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PPUSH
25056: LD_INT 15
25058: PPUSH
25059: CALL_OW 12
25063: ARRAY
25064: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25065: LD_ADDR_VAR 0 4
25069: PUSH
25070: LD_INT 10
25072: PUSH
25073: LD_INT 20
25075: PUSH
25076: LD_INT 30
25078: PUSH
25079: LD_INT 40
25081: PUSH
25082: LD_INT 50
25084: PUSH
25085: LD_INT 60
25087: PUSH
25088: LD_INT 70
25090: PUSH
25091: LD_INT 80
25093: PUSH
25094: LD_INT 90
25096: PUSH
25097: LD_INT 100
25099: PUSH
25100: LD_INT 110
25102: PUSH
25103: LD_INT 120
25105: PUSH
25106: LD_INT 130
25108: PUSH
25109: LD_INT 140
25111: PUSH
25112: LD_INT 150
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PPUSH
25135: LD_INT 15
25137: PPUSH
25138: CALL_OW 12
25142: ARRAY
25143: ST_TO_ADDR
// if ValidHex ( x , y ) then
25144: LD_VAR 0 3
25148: PPUSH
25149: LD_VAR 0 4
25153: PPUSH
25154: CALL_OW 488
25158: IFFALSE 25181
// begin result := [ x , y ] ;
25160: LD_ADDR_VAR 0 1
25164: PUSH
25165: LD_VAR 0 3
25169: PUSH
25170: LD_VAR 0 4
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: ST_TO_ADDR
// break ;
25179: GO 25183
// end ; end ;
25181: GO 24983
25183: POP
25184: POP
// if result then
25185: LD_VAR 0 1
25189: IFFALSE 25249
// begin ToLua ( playSibBomb() ) ;
25191: LD_STRING playSibBomb()
25193: PPUSH
25194: CALL_OW 559
// wait ( 0 0$14 ) ;
25198: LD_INT 490
25200: PPUSH
25201: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25205: LD_VAR 0 1
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: PPUSH
25214: LD_VAR 0 1
25218: PUSH
25219: LD_INT 2
25221: ARRAY
25222: PPUSH
25223: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25227: LD_VAR 0 1
25231: PUSH
25232: LD_INT 1
25234: ARRAY
25235: PPUSH
25236: LD_VAR 0 1
25240: PUSH
25241: LD_INT 2
25243: ARRAY
25244: PPUSH
25245: CALL_OW 429
// end ; end ;
25249: LD_VAR 0 1
25253: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25254: LD_EXP 38
25258: IFFALSE 25266
25260: PUSH
25261: LD_EXP 60
25265: AND
25266: IFFALSE 25278
25268: GO 25270
25270: DISABLE
// YouLost (  ) ;
25271: LD_STRING 
25273: PPUSH
25274: CALL_OW 104
25278: END
// every 0 0$1 trigger StreamModeActive and sFog do
25279: LD_EXP 38
25283: IFFALSE 25291
25285: PUSH
25286: LD_EXP 59
25290: AND
25291: IFFALSE 25305
25293: GO 25295
25295: DISABLE
// FogOff ( your_side ) ;
25296: LD_OWVAR 2
25300: PPUSH
25301: CALL_OW 344
25305: END
// every 0 0$1 trigger StreamModeActive and sSun do
25306: LD_EXP 38
25310: IFFALSE 25318
25312: PUSH
25313: LD_EXP 61
25317: AND
25318: IFFALSE 25346
25320: GO 25322
25322: DISABLE
// begin solar_recharge_percent := 0 ;
25323: LD_ADDR_OWVAR 79
25327: PUSH
25328: LD_INT 0
25330: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25331: LD_INT 10500
25333: PPUSH
25334: CALL_OW 67
// solar_recharge_percent := 100 ;
25338: LD_ADDR_OWVAR 79
25342: PUSH
25343: LD_INT 100
25345: ST_TO_ADDR
// end ;
25346: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25347: LD_EXP 38
25351: IFFALSE 25359
25353: PUSH
25354: LD_EXP 62
25358: AND
25359: IFFALSE 25598
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
25367: PPUSH
25368: PPUSH
// begin tmp := [ ] ;
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: EMPTY
25375: ST_TO_ADDR
// for i := 1 to 6 do
25376: LD_ADDR_VAR 0 1
25380: PUSH
25381: DOUBLE
25382: LD_INT 1
25384: DEC
25385: ST_TO_ADDR
25386: LD_INT 6
25388: PUSH
25389: FOR_TO
25390: IFFALSE 25495
// begin uc_nation := nation_nature ;
25392: LD_ADDR_OWVAR 21
25396: PUSH
25397: LD_INT 0
25399: ST_TO_ADDR
// uc_side := 0 ;
25400: LD_ADDR_OWVAR 20
25404: PUSH
25405: LD_INT 0
25407: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25408: LD_ADDR_OWVAR 29
25412: PUSH
25413: LD_INT 12
25415: PUSH
25416: LD_INT 12
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
// hc_agressivity := 20 ;
25423: LD_ADDR_OWVAR 35
25427: PUSH
25428: LD_INT 20
25430: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25431: LD_ADDR_OWVAR 28
25435: PUSH
25436: LD_INT 17
25438: ST_TO_ADDR
// hc_gallery :=  ;
25439: LD_ADDR_OWVAR 33
25443: PUSH
25444: LD_STRING 
25446: ST_TO_ADDR
// hc_name :=  ;
25447: LD_ADDR_OWVAR 26
25451: PUSH
25452: LD_STRING 
25454: ST_TO_ADDR
// un := CreateHuman ;
25455: LD_ADDR_VAR 0 2
25459: PUSH
25460: CALL_OW 44
25464: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_INT 1
25472: PPUSH
25473: CALL_OW 51
// tmp := tmp ^ un ;
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_VAR 0 3
25486: PUSH
25487: LD_VAR 0 2
25491: ADD
25492: ST_TO_ADDR
// end ;
25493: GO 25389
25495: POP
25496: POP
// repeat wait ( 0 0$1 ) ;
25497: LD_INT 35
25499: PPUSH
25500: CALL_OW 67
// for un in tmp do
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_VAR 0 3
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25589
// begin if IsDead ( un ) then
25517: LD_VAR 0 2
25521: PPUSH
25522: CALL_OW 301
25526: IFFALSE 25546
// begin tmp := tmp diff un ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_VAR 0 3
25537: PUSH
25538: LD_VAR 0 2
25542: DIFF
25543: ST_TO_ADDR
// continue ;
25544: GO 25514
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25546: LD_VAR 0 2
25550: PPUSH
25551: LD_INT 3
25553: PUSH
25554: LD_INT 22
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 69
25572: PPUSH
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 74
25582: PPUSH
25583: CALL_OW 115
// end ;
25587: GO 25514
25589: POP
25590: POP
// until not tmp ;
25591: LD_VAR 0 3
25595: NOT
25596: IFFALSE 25497
// end ;
25598: PPOPN 3
25600: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25601: LD_EXP 38
25605: IFFALSE 25613
25607: PUSH
25608: LD_EXP 63
25612: AND
25613: IFFALSE 25667
25615: GO 25617
25617: DISABLE
// begin ToLua ( displayTroll(); ) ;
25618: LD_STRING displayTroll();
25620: PPUSH
25621: CALL_OW 559
// wait ( 3 3$00 ) ;
25625: LD_INT 6300
25627: PPUSH
25628: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25632: LD_STRING hideTroll();
25634: PPUSH
25635: CALL_OW 559
// wait ( 1 1$00 ) ;
25639: LD_INT 2100
25641: PPUSH
25642: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25646: LD_STRING displayTroll();
25648: PPUSH
25649: CALL_OW 559
// wait ( 1 1$00 ) ;
25653: LD_INT 2100
25655: PPUSH
25656: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25660: LD_STRING hideTroll();
25662: PPUSH
25663: CALL_OW 559
// end ;
25667: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25668: LD_EXP 38
25672: IFFALSE 25680
25674: PUSH
25675: LD_EXP 64
25679: AND
25680: IFFALSE 25743
25682: GO 25684
25684: DISABLE
25685: LD_INT 0
25687: PPUSH
// begin p := 0 ;
25688: LD_ADDR_VAR 0 1
25692: PUSH
25693: LD_INT 0
25695: ST_TO_ADDR
// repeat game_speed := 1 ;
25696: LD_ADDR_OWVAR 65
25700: PUSH
25701: LD_INT 1
25703: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25704: LD_INT 35
25706: PPUSH
25707: CALL_OW 67
// p := p + 1 ;
25711: LD_ADDR_VAR 0 1
25715: PUSH
25716: LD_VAR 0 1
25720: PUSH
25721: LD_INT 1
25723: PLUS
25724: ST_TO_ADDR
// until p >= 60 ;
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 60
25732: GREATEREQUAL
25733: IFFALSE 25696
// game_speed := 4 ;
25735: LD_ADDR_OWVAR 65
25739: PUSH
25740: LD_INT 4
25742: ST_TO_ADDR
// end ;
25743: PPOPN 1
25745: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25746: LD_EXP 38
25750: IFFALSE 25758
25752: PUSH
25753: LD_EXP 65
25757: AND
25758: IFFALSE 25904
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25767: LD_ADDR_VAR 0 1
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_OWVAR 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 30
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 30
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: CALL_OW 69
25820: ST_TO_ADDR
// if not depot then
25821: LD_VAR 0 1
25825: NOT
25826: IFFALSE 25830
// exit ;
25828: GO 25904
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_VAR 0 1
25839: PUSH
25840: LD_INT 1
25842: PPUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: CALL_OW 12
25852: ARRAY
25853: PPUSH
25854: CALL_OW 274
25858: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25859: LD_VAR 0 2
25863: PPUSH
25864: LD_INT 1
25866: PPUSH
25867: LD_INT 0
25869: PPUSH
25870: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: LD_INT 2
25881: PPUSH
25882: LD_INT 0
25884: PPUSH
25885: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25889: LD_VAR 0 2
25893: PPUSH
25894: LD_INT 3
25896: PPUSH
25897: LD_INT 0
25899: PPUSH
25900: CALL_OW 277
// end ;
25904: PPOPN 2
25906: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25907: LD_EXP 38
25911: IFFALSE 25919
25913: PUSH
25914: LD_EXP 66
25918: AND
25919: IFFALSE 26016
25921: GO 25923
25923: DISABLE
25924: LD_INT 0
25926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25927: LD_ADDR_VAR 0 1
25931: PUSH
25932: LD_INT 22
25934: PUSH
25935: LD_OWVAR 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 21
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 23
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 1
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25990: LD_VAR 0 1
25994: PUSH
25995: LD_INT 1
25997: PPUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 12
26007: ARRAY
26008: PPUSH
26009: LD_INT 200
26011: PPUSH
26012: CALL_OW 234
// end ;
26016: PPOPN 1
26018: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26019: LD_EXP 38
26023: IFFALSE 26031
26025: PUSH
26026: LD_EXP 67
26030: AND
26031: IFFALSE 26110
26033: GO 26035
26035: DISABLE
26036: LD_INT 0
26038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26039: LD_ADDR_VAR 0 1
26043: PUSH
26044: LD_INT 22
26046: PUSH
26047: LD_OWVAR 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 21
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PPUSH
26070: CALL_OW 69
26074: ST_TO_ADDR
// if not tmp then
26075: LD_VAR 0 1
26079: NOT
26080: IFFALSE 26084
// exit ;
26082: GO 26110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26084: LD_VAR 0 1
26088: PUSH
26089: LD_INT 1
26091: PPUSH
26092: LD_VAR 0 1
26096: PPUSH
26097: CALL_OW 12
26101: ARRAY
26102: PPUSH
26103: LD_INT 60
26105: PPUSH
26106: CALL_OW 234
// end ;
26110: PPOPN 1
26112: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26113: LD_EXP 38
26117: IFFALSE 26125
26119: PUSH
26120: LD_EXP 68
26124: AND
26125: IFFALSE 26224
26127: GO 26129
26129: DISABLE
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
// begin enable ;
26134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26135: LD_ADDR_VAR 0 1
26139: PUSH
26140: LD_INT 22
26142: PUSH
26143: LD_OWVAR 2
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 61
26154: PUSH
26155: EMPTY
26156: LIST
26157: PUSH
26158: LD_INT 33
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: PPUSH
26173: CALL_OW 69
26177: ST_TO_ADDR
// if not tmp then
26178: LD_VAR 0 1
26182: NOT
26183: IFFALSE 26187
// exit ;
26185: GO 26224
// for i in tmp do
26187: LD_ADDR_VAR 0 2
26191: PUSH
26192: LD_VAR 0 1
26196: PUSH
26197: FOR_IN
26198: IFFALSE 26222
// if IsControledBy ( i ) then
26200: LD_VAR 0 2
26204: PPUSH
26205: CALL_OW 312
26209: IFFALSE 26220
// ComUnlink ( i ) ;
26211: LD_VAR 0 2
26215: PPUSH
26216: CALL_OW 136
26220: GO 26197
26222: POP
26223: POP
// end ;
26224: PPOPN 2
26226: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26227: LD_EXP 38
26231: IFFALSE 26239
26233: PUSH
26234: LD_EXP 69
26238: AND
26239: IFFALSE 26379
26241: GO 26243
26243: DISABLE
26244: LD_INT 0
26246: PPUSH
26247: PPUSH
// begin ToLua ( displayPowell(); ) ;
26248: LD_STRING displayPowell();
26250: PPUSH
26251: CALL_OW 559
// uc_side := 0 ;
26255: LD_ADDR_OWVAR 20
26259: PUSH
26260: LD_INT 0
26262: ST_TO_ADDR
// uc_nation := 2 ;
26263: LD_ADDR_OWVAR 21
26267: PUSH
26268: LD_INT 2
26270: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26271: LD_ADDR_OWVAR 37
26275: PUSH
26276: LD_INT 14
26278: ST_TO_ADDR
// vc_engine := engine_siberite ;
26279: LD_ADDR_OWVAR 39
26283: PUSH
26284: LD_INT 3
26286: ST_TO_ADDR
// vc_control := control_apeman ;
26287: LD_ADDR_OWVAR 38
26291: PUSH
26292: LD_INT 5
26294: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26295: LD_ADDR_OWVAR 40
26299: PUSH
26300: LD_INT 29
26302: ST_TO_ADDR
// un := CreateVehicle ;
26303: LD_ADDR_VAR 0 2
26307: PUSH
26308: CALL_OW 45
26312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26313: LD_VAR 0 2
26317: PPUSH
26318: LD_INT 1
26320: PPUSH
26321: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26325: LD_INT 35
26327: PPUSH
26328: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26332: LD_VAR 0 2
26336: PPUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 69
26353: PPUSH
26354: LD_VAR 0 2
26358: PPUSH
26359: CALL_OW 74
26363: PPUSH
26364: CALL_OW 115
// until IsDead ( un ) ;
26368: LD_VAR 0 2
26372: PPUSH
26373: CALL_OW 301
26377: IFFALSE 26325
// end ;
26379: PPOPN 2
26381: END
// every 0 0$1 trigger StreamModeActive and sStu do
26382: LD_EXP 38
26386: IFFALSE 26394
26388: PUSH
26389: LD_EXP 77
26393: AND
26394: IFFALSE 26410
26396: GO 26398
26398: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26399: LD_STRING displayStucuk();
26401: PPUSH
26402: CALL_OW 559
// ResetFog ;
26406: CALL_OW 335
// end ;
26410: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26411: LD_EXP 38
26415: IFFALSE 26423
26417: PUSH
26418: LD_EXP 70
26422: AND
26423: IFFALSE 26564
26425: GO 26427
26427: DISABLE
26428: LD_INT 0
26430: PPUSH
26431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26432: LD_ADDR_VAR 0 2
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_OWVAR 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: ST_TO_ADDR
// if not tmp then
26468: LD_VAR 0 2
26472: NOT
26473: IFFALSE 26477
// exit ;
26475: GO 26564
// un := tmp [ rand ( 1 , tmp ) ] ;
26477: LD_ADDR_VAR 0 1
26481: PUSH
26482: LD_VAR 0 2
26486: PUSH
26487: LD_INT 1
26489: PPUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: CALL_OW 12
26499: ARRAY
26500: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26501: LD_VAR 0 1
26505: PPUSH
26506: LD_INT 0
26508: PPUSH
26509: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_OWVAR 3
26522: PUSH
26523: LD_VAR 0 1
26527: DIFF
26528: PPUSH
26529: LD_VAR 0 1
26533: PPUSH
26534: CALL_OW 74
26538: PPUSH
26539: CALL_OW 115
// wait ( 0 0$20 ) ;
26543: LD_INT 700
26545: PPUSH
26546: CALL_OW 67
// SetSide ( un , your_side ) ;
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_OWVAR 2
26559: PPUSH
26560: CALL_OW 235
// end ;
26564: PPOPN 2
26566: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26567: LD_EXP 38
26571: IFFALSE 26579
26573: PUSH
26574: LD_EXP 71
26578: AND
26579: IFFALSE 26685
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26587: LD_ADDR_VAR 0 1
26591: PUSH
26592: LD_INT 22
26594: PUSH
26595: LD_OWVAR 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: LD_INT 30
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 30
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: ST_TO_ADDR
// if not depot then
26641: LD_VAR 0 1
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26685
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 1
26657: ARRAY
26658: PPUSH
26659: CALL_OW 250
26663: PPUSH
26664: LD_VAR 0 1
26668: PUSH
26669: LD_INT 1
26671: ARRAY
26672: PPUSH
26673: CALL_OW 251
26677: PPUSH
26678: LD_INT 70
26680: PPUSH
26681: CALL_OW 495
// end ;
26685: PPOPN 1
26687: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26688: LD_EXP 38
26692: IFFALSE 26700
26694: PUSH
26695: LD_EXP 72
26699: AND
26700: IFFALSE 26911
26702: GO 26704
26704: DISABLE
26705: LD_INT 0
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26712: LD_ADDR_VAR 0 5
26716: PUSH
26717: LD_INT 22
26719: PUSH
26720: LD_OWVAR 2
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 21
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PPUSH
26743: CALL_OW 69
26747: ST_TO_ADDR
// if not tmp then
26748: LD_VAR 0 5
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 26911
// for i in tmp do
26757: LD_ADDR_VAR 0 1
26761: PUSH
26762: LD_VAR 0 5
26766: PUSH
26767: FOR_IN
26768: IFFALSE 26909
// begin d := rand ( 0 , 5 ) ;
26770: LD_ADDR_VAR 0 4
26774: PUSH
26775: LD_INT 0
26777: PPUSH
26778: LD_INT 5
26780: PPUSH
26781: CALL_OW 12
26785: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26786: LD_ADDR_VAR 0 2
26790: PUSH
26791: LD_VAR 0 1
26795: PPUSH
26796: CALL_OW 250
26800: PPUSH
26801: LD_VAR 0 4
26805: PPUSH
26806: LD_INT 3
26808: PPUSH
26809: LD_INT 12
26811: PPUSH
26812: CALL_OW 12
26816: PPUSH
26817: CALL_OW 272
26821: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 251
26836: PPUSH
26837: LD_VAR 0 4
26841: PPUSH
26842: LD_INT 3
26844: PPUSH
26845: LD_INT 12
26847: PPUSH
26848: CALL_OW 12
26852: PPUSH
26853: CALL_OW 273
26857: ST_TO_ADDR
// if ValidHex ( x , y ) then
26858: LD_VAR 0 2
26862: PPUSH
26863: LD_VAR 0 3
26867: PPUSH
26868: CALL_OW 488
26872: IFFALSE 26907
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: LD_INT 3
26891: PPUSH
26892: LD_INT 6
26894: PPUSH
26895: CALL_OW 12
26899: PPUSH
26900: LD_INT 1
26902: PPUSH
26903: CALL_OW 483
// end ;
26907: GO 26767
26909: POP
26910: POP
// end ;
26911: PPOPN 5
26913: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26914: LD_EXP 38
26918: IFFALSE 26926
26920: PUSH
26921: LD_EXP 73
26925: AND
26926: IFFALSE 27020
26928: GO 26930
26930: DISABLE
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: LD_INT 22
26942: PUSH
26943: LD_OWVAR 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 32
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 21
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: PPUSH
26977: CALL_OW 69
26981: ST_TO_ADDR
// if not tmp then
26982: LD_VAR 0 2
26986: NOT
26987: IFFALSE 26991
// exit ;
26989: GO 27020
// for i in tmp do
26991: LD_ADDR_VAR 0 1
26995: PUSH
26996: LD_VAR 0 2
27000: PUSH
27001: FOR_IN
27002: IFFALSE 27018
// SetFuel ( i , 0 ) ;
27004: LD_VAR 0 1
27008: PPUSH
27009: LD_INT 0
27011: PPUSH
27012: CALL_OW 240
27016: GO 27001
27018: POP
27019: POP
// end ;
27020: PPOPN 2
27022: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27023: LD_EXP 38
27027: IFFALSE 27035
27029: PUSH
27030: LD_EXP 74
27034: AND
27035: IFFALSE 27101
27037: GO 27039
27039: DISABLE
27040: LD_INT 0
27042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27043: LD_ADDR_VAR 0 1
27047: PUSH
27048: LD_INT 22
27050: PUSH
27051: LD_OWVAR 2
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 30
27062: PUSH
27063: LD_INT 29
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 69
27078: ST_TO_ADDR
// if not tmp then
27079: LD_VAR 0 1
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 27101
// DestroyUnit ( tmp [ 1 ] ) ;
27088: LD_VAR 0 1
27092: PUSH
27093: LD_INT 1
27095: ARRAY
27096: PPUSH
27097: CALL_OW 65
// end ;
27101: PPOPN 1
27103: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27104: LD_EXP 38
27108: IFFALSE 27116
27110: PUSH
27111: LD_EXP 76
27115: AND
27116: IFFALSE 27245
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
// begin uc_side := 0 ;
27124: LD_ADDR_OWVAR 20
27128: PUSH
27129: LD_INT 0
27131: ST_TO_ADDR
// uc_nation := nation_arabian ;
27132: LD_ADDR_OWVAR 21
27136: PUSH
27137: LD_INT 2
27139: ST_TO_ADDR
// hc_gallery :=  ;
27140: LD_ADDR_OWVAR 33
27144: PUSH
27145: LD_STRING 
27147: ST_TO_ADDR
// hc_name :=  ;
27148: LD_ADDR_OWVAR 26
27152: PUSH
27153: LD_STRING 
27155: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27156: LD_INT 1
27158: PPUSH
27159: LD_INT 11
27161: PPUSH
27162: LD_INT 10
27164: PPUSH
27165: CALL_OW 380
// un := CreateHuman ;
27169: LD_ADDR_VAR 0 1
27173: PUSH
27174: CALL_OW 44
27178: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27179: LD_VAR 0 1
27183: PPUSH
27184: LD_INT 1
27186: PPUSH
27187: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27191: LD_INT 35
27193: PPUSH
27194: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27198: LD_VAR 0 1
27202: PPUSH
27203: LD_INT 22
27205: PUSH
27206: LD_OWVAR 2
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PPUSH
27215: CALL_OW 69
27219: PPUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 74
27229: PPUSH
27230: CALL_OW 115
// until IsDead ( un ) ;
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 301
27243: IFFALSE 27191
// end ;
27245: PPOPN 1
27247: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27248: LD_EXP 38
27252: IFFALSE 27260
27254: PUSH
27255: LD_EXP 78
27259: AND
27260: IFFALSE 27272
27262: GO 27264
27264: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27265: LD_STRING earthquake(getX(game), 0, 32)
27267: PPUSH
27268: CALL_OW 559
27272: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27273: LD_EXP 38
27277: IFFALSE 27285
27279: PUSH
27280: LD_EXP 79
27284: AND
27285: IFFALSE 27376
27287: GO 27289
27289: DISABLE
27290: LD_INT 0
27292: PPUSH
// begin enable ;
27293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27294: LD_ADDR_VAR 0 1
27298: PUSH
27299: LD_INT 22
27301: PUSH
27302: LD_OWVAR 2
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 21
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 33
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: LIST
27335: PPUSH
27336: CALL_OW 69
27340: ST_TO_ADDR
// if not tmp then
27341: LD_VAR 0 1
27345: NOT
27346: IFFALSE 27350
// exit ;
27348: GO 27376
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27350: LD_VAR 0 1
27354: PUSH
27355: LD_INT 1
27357: PPUSH
27358: LD_VAR 0 1
27362: PPUSH
27363: CALL_OW 12
27367: ARRAY
27368: PPUSH
27369: LD_INT 1
27371: PPUSH
27372: CALL_OW 234
// end ;
27376: PPOPN 1
27378: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27379: LD_EXP 38
27383: IFFALSE 27391
27385: PUSH
27386: LD_EXP 80
27390: AND
27391: IFFALSE 27532
27393: GO 27395
27395: DISABLE
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
27400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 22
27408: PUSH
27409: LD_OWVAR 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 25
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PPUSH
27432: CALL_OW 69
27436: ST_TO_ADDR
// if not tmp then
27437: LD_VAR 0 3
27441: NOT
27442: IFFALSE 27446
// exit ;
27444: GO 27532
// un := tmp [ rand ( 1 , tmp ) ] ;
27446: LD_ADDR_VAR 0 2
27450: PUSH
27451: LD_VAR 0 3
27455: PUSH
27456: LD_INT 1
27458: PPUSH
27459: LD_VAR 0 3
27463: PPUSH
27464: CALL_OW 12
27468: ARRAY
27469: ST_TO_ADDR
// if Crawls ( un ) then
27470: LD_VAR 0 2
27474: PPUSH
27475: CALL_OW 318
27479: IFFALSE 27490
// ComWalk ( un ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_INT 9
27497: PPUSH
27498: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27502: LD_INT 28
27504: PPUSH
27505: LD_OWVAR 2
27509: PPUSH
27510: LD_INT 2
27512: PPUSH
27513: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27517: LD_INT 29
27519: PPUSH
27520: LD_OWVAR 2
27524: PPUSH
27525: LD_INT 2
27527: PPUSH
27528: CALL_OW 322
// end ;
27532: PPOPN 3
27534: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27535: LD_EXP 38
27539: IFFALSE 27547
27541: PUSH
27542: LD_EXP 81
27546: AND
27547: IFFALSE 27658
27549: GO 27551
27551: DISABLE
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
27556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_INT 22
27564: PUSH
27565: LD_OWVAR 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 25
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PPUSH
27588: CALL_OW 69
27592: ST_TO_ADDR
// if not tmp then
27593: LD_VAR 0 3
27597: NOT
27598: IFFALSE 27602
// exit ;
27600: GO 27658
// un := tmp [ rand ( 1 , tmp ) ] ;
27602: LD_ADDR_VAR 0 2
27606: PUSH
27607: LD_VAR 0 3
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_VAR 0 3
27619: PPUSH
27620: CALL_OW 12
27624: ARRAY
27625: ST_TO_ADDR
// if Crawls ( un ) then
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 318
27635: IFFALSE 27646
// ComWalk ( un ) ;
27637: LD_VAR 0 2
27641: PPUSH
27642: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_INT 8
27653: PPUSH
27654: CALL_OW 336
// end ;
27658: PPOPN 3
27660: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27661: LD_EXP 38
27665: IFFALSE 27673
27667: PUSH
27668: LD_EXP 82
27672: AND
27673: IFFALSE 27817
27675: GO 27677
27677: DISABLE
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27682: LD_ADDR_VAR 0 2
27686: PUSH
27687: LD_INT 22
27689: PUSH
27690: LD_OWVAR 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 21
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 34
27714: PUSH
27715: LD_INT 12
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 34
27724: PUSH
27725: LD_INT 51
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 34
27734: PUSH
27735: LD_INT 32
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: PPUSH
27753: CALL_OW 69
27757: ST_TO_ADDR
// if not tmp then
27758: LD_VAR 0 2
27762: NOT
27763: IFFALSE 27767
// exit ;
27765: GO 27817
// for i in tmp do
27767: LD_ADDR_VAR 0 1
27771: PUSH
27772: LD_VAR 0 2
27776: PUSH
27777: FOR_IN
27778: IFFALSE 27815
// if GetCargo ( i , mat_artifact ) = 0 then
27780: LD_VAR 0 1
27784: PPUSH
27785: LD_INT 4
27787: PPUSH
27788: CALL_OW 289
27792: PUSH
27793: LD_INT 0
27795: EQUAL
27796: IFFALSE 27813
// SetCargo ( i , mat_siberit , 100 ) ;
27798: LD_VAR 0 1
27802: PPUSH
27803: LD_INT 3
27805: PPUSH
27806: LD_INT 100
27808: PPUSH
27809: CALL_OW 290
27813: GO 27777
27815: POP
27816: POP
// end ;
27817: PPOPN 2
27819: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27820: LD_EXP 38
27824: IFFALSE 27832
27826: PUSH
27827: LD_EXP 83
27831: AND
27832: IFFALSE 28015
27834: GO 27836
27836: DISABLE
27837: LD_INT 0
27839: PPUSH
27840: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27841: LD_ADDR_VAR 0 2
27845: PUSH
27846: LD_INT 22
27848: PUSH
27849: LD_OWVAR 2
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 69
27862: ST_TO_ADDR
// if not tmp then
27863: LD_VAR 0 2
27867: NOT
27868: IFFALSE 27872
// exit ;
27870: GO 28015
// for i := 1 to 2 do
27872: LD_ADDR_VAR 0 1
27876: PUSH
27877: DOUBLE
27878: LD_INT 1
27880: DEC
27881: ST_TO_ADDR
27882: LD_INT 2
27884: PUSH
27885: FOR_TO
27886: IFFALSE 28013
// begin uc_side := your_side ;
27888: LD_ADDR_OWVAR 20
27892: PUSH
27893: LD_OWVAR 2
27897: ST_TO_ADDR
// uc_nation := nation_american ;
27898: LD_ADDR_OWVAR 21
27902: PUSH
27903: LD_INT 1
27905: ST_TO_ADDR
// vc_chassis := us_morphling ;
27906: LD_ADDR_OWVAR 37
27910: PUSH
27911: LD_INT 5
27913: ST_TO_ADDR
// vc_engine := engine_siberite ;
27914: LD_ADDR_OWVAR 39
27918: PUSH
27919: LD_INT 3
27921: ST_TO_ADDR
// vc_control := control_computer ;
27922: LD_ADDR_OWVAR 38
27926: PUSH
27927: LD_INT 3
27929: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27930: LD_ADDR_OWVAR 40
27934: PUSH
27935: LD_INT 10
27937: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27938: LD_VAR 0 2
27942: PUSH
27943: LD_INT 1
27945: ARRAY
27946: PPUSH
27947: CALL_OW 310
27951: NOT
27952: IFFALSE 27999
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27954: CALL_OW 45
27958: PPUSH
27959: LD_VAR 0 2
27963: PUSH
27964: LD_INT 1
27966: ARRAY
27967: PPUSH
27968: CALL_OW 250
27972: PPUSH
27973: LD_VAR 0 2
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: PPUSH
27982: CALL_OW 251
27986: PPUSH
27987: LD_INT 12
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: CALL_OW 50
27997: GO 28011
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27999: CALL_OW 45
28003: PPUSH
28004: LD_INT 1
28006: PPUSH
28007: CALL_OW 51
// end ;
28011: GO 27885
28013: POP
28014: POP
// end ;
28015: PPOPN 2
28017: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28018: LD_EXP 38
28022: IFFALSE 28030
28024: PUSH
28025: LD_EXP 84
28029: AND
28030: IFFALSE 28252
28032: GO 28034
28034: DISABLE
28035: LD_INT 0
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28043: LD_ADDR_VAR 0 6
28047: PUSH
28048: LD_INT 22
28050: PUSH
28051: LD_OWVAR 2
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 21
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 23
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 69
28096: ST_TO_ADDR
// if not tmp then
28097: LD_VAR 0 6
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28252
// s1 := rand ( 1 , 4 ) ;
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_INT 1
28113: PPUSH
28114: LD_INT 4
28116: PPUSH
28117: CALL_OW 12
28121: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28122: LD_ADDR_VAR 0 4
28126: PUSH
28127: LD_VAR 0 6
28131: PUSH
28132: LD_INT 1
28134: ARRAY
28135: PPUSH
28136: LD_VAR 0 2
28140: PPUSH
28141: CALL_OW 259
28145: ST_TO_ADDR
// if s1 = 1 then
28146: LD_VAR 0 2
28150: PUSH
28151: LD_INT 1
28153: EQUAL
28154: IFFALSE 28174
// s2 := rand ( 2 , 4 ) else
28156: LD_ADDR_VAR 0 3
28160: PUSH
28161: LD_INT 2
28163: PPUSH
28164: LD_INT 4
28166: PPUSH
28167: CALL_OW 12
28171: ST_TO_ADDR
28172: GO 28182
// s2 := 1 ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28182: LD_ADDR_VAR 0 5
28186: PUSH
28187: LD_VAR 0 6
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PPUSH
28196: LD_VAR 0 3
28200: PPUSH
28201: CALL_OW 259
28205: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28206: LD_VAR 0 6
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PPUSH
28215: LD_VAR 0 2
28219: PPUSH
28220: LD_VAR 0 5
28224: PPUSH
28225: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28229: LD_VAR 0 6
28233: PUSH
28234: LD_INT 1
28236: ARRAY
28237: PPUSH
28238: LD_VAR 0 3
28242: PPUSH
28243: LD_VAR 0 4
28247: PPUSH
28248: CALL_OW 237
// end ;
28252: PPOPN 6
28254: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28255: LD_EXP 38
28259: IFFALSE 28267
28261: PUSH
28262: LD_EXP 85
28266: AND
28267: IFFALSE 28346
28269: GO 28271
28271: DISABLE
28272: LD_INT 0
28274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28275: LD_ADDR_VAR 0 1
28279: PUSH
28280: LD_INT 22
28282: PUSH
28283: LD_OWVAR 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 30
28294: PUSH
28295: LD_INT 3
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PPUSH
28306: CALL_OW 69
28310: ST_TO_ADDR
// if not tmp then
28311: LD_VAR 0 1
28315: NOT
28316: IFFALSE 28320
// exit ;
28318: GO 28346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28320: LD_VAR 0 1
28324: PUSH
28325: LD_INT 1
28327: PPUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 12
28337: ARRAY
28338: PPUSH
28339: LD_INT 1
28341: PPUSH
28342: CALL_OW 234
// end ;
28346: PPOPN 1
28348: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28349: LD_EXP 38
28353: IFFALSE 28361
28355: PUSH
28356: LD_EXP 86
28360: AND
28361: IFFALSE 28473
28363: GO 28365
28365: DISABLE
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28370: LD_ADDR_VAR 0 2
28374: PUSH
28375: LD_INT 22
28377: PUSH
28378: LD_OWVAR 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 30
28392: PUSH
28393: LD_INT 27
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 30
28402: PUSH
28403: LD_INT 26
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 30
28412: PUSH
28413: LD_INT 28
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 69
28434: ST_TO_ADDR
// if not tmp then
28435: LD_VAR 0 2
28439: NOT
28440: IFFALSE 28444
// exit ;
28442: GO 28473
// for i in tmp do
28444: LD_ADDR_VAR 0 1
28448: PUSH
28449: LD_VAR 0 2
28453: PUSH
28454: FOR_IN
28455: IFFALSE 28471
// SetLives ( i , 1 ) ;
28457: LD_VAR 0 1
28461: PPUSH
28462: LD_INT 1
28464: PPUSH
28465: CALL_OW 234
28469: GO 28454
28471: POP
28472: POP
// end ;
28473: PPOPN 2
28475: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28476: LD_EXP 38
28480: IFFALSE 28488
28482: PUSH
28483: LD_EXP 87
28487: AND
28488: IFFALSE 28775
28490: GO 28492
28492: DISABLE
28493: LD_INT 0
28495: PPUSH
28496: PPUSH
28497: PPUSH
// begin i := rand ( 1 , 7 ) ;
28498: LD_ADDR_VAR 0 1
28502: PUSH
28503: LD_INT 1
28505: PPUSH
28506: LD_INT 7
28508: PPUSH
28509: CALL_OW 12
28513: ST_TO_ADDR
// case i of 1 :
28514: LD_VAR 0 1
28518: PUSH
28519: LD_INT 1
28521: DOUBLE
28522: EQUAL
28523: IFTRUE 28527
28525: GO 28537
28527: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28528: LD_STRING earthquake(getX(game), 0, 32)
28530: PPUSH
28531: CALL_OW 559
28535: GO 28775
28537: LD_INT 2
28539: DOUBLE
28540: EQUAL
28541: IFTRUE 28545
28543: GO 28559
28545: POP
// begin ToLua ( displayStucuk(); ) ;
28546: LD_STRING displayStucuk();
28548: PPUSH
28549: CALL_OW 559
// ResetFog ;
28553: CALL_OW 335
// end ; 3 :
28557: GO 28775
28559: LD_INT 3
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28671
28567: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28568: LD_ADDR_VAR 0 2
28572: PUSH
28573: LD_INT 22
28575: PUSH
28576: LD_OWVAR 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 25
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 2
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28775
// un := tmp [ rand ( 1 , tmp ) ] ;
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_VAR 0 2
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 2
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: ST_TO_ADDR
// if Crawls ( un ) then
28637: LD_VAR 0 3
28641: PPUSH
28642: CALL_OW 318
28646: IFFALSE 28657
// ComWalk ( un ) ;
28648: LD_VAR 0 3
28652: PPUSH
28653: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28657: LD_VAR 0 3
28661: PPUSH
28662: LD_INT 8
28664: PPUSH
28665: CALL_OW 336
// end ; 4 :
28669: GO 28775
28671: LD_INT 4
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28753
28679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28680: LD_ADDR_VAR 0 2
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 30
28699: PUSH
28700: LD_INT 29
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 2
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28775
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28725: LD_VAR 0 2
28729: PUSH
28730: LD_INT 1
28732: ARRAY
28733: PPUSH
28734: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28738: LD_VAR 0 2
28742: PUSH
28743: LD_INT 1
28745: ARRAY
28746: PPUSH
28747: CALL_OW 65
// end ; 5 .. 7 :
28751: GO 28775
28753: LD_INT 5
28755: DOUBLE
28756: GREATEREQUAL
28757: IFFALSE 28765
28759: LD_INT 7
28761: DOUBLE
28762: LESSEQUAL
28763: IFTRUE 28767
28765: GO 28774
28767: POP
// StreamSibBomb ; end ;
28768: CALL 24956 0 0
28772: GO 28775
28774: POP
// end ;
28775: PPOPN 3
28777: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28778: LD_EXP 38
28782: IFFALSE 28790
28784: PUSH
28785: LD_EXP 88
28789: AND
28790: IFFALSE 28946
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
28799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28800: LD_ADDR_VAR 0 2
28804: PUSH
28805: LD_INT 81
28807: PUSH
28808: LD_OWVAR 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 21
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 21
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PPUSH
28849: CALL_OW 69
28853: ST_TO_ADDR
// if not tmp then
28854: LD_VAR 0 2
28858: NOT
28859: IFFALSE 28863
// exit ;
28861: GO 28946
// p := 0 ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 0
28870: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28871: LD_INT 35
28873: PPUSH
28874: CALL_OW 67
// p := p + 1 ;
28878: LD_ADDR_VAR 0 3
28882: PUSH
28883: LD_VAR 0 3
28887: PUSH
28888: LD_INT 1
28890: PLUS
28891: ST_TO_ADDR
// for i in tmp do
28892: LD_ADDR_VAR 0 1
28896: PUSH
28897: LD_VAR 0 2
28901: PUSH
28902: FOR_IN
28903: IFFALSE 28934
// if GetLives ( i ) < 1000 then
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 256
28914: PUSH
28915: LD_INT 1000
28917: LESS
28918: IFFALSE 28932
// SetLives ( i , 1000 ) ;
28920: LD_VAR 0 1
28924: PPUSH
28925: LD_INT 1000
28927: PPUSH
28928: CALL_OW 234
28932: GO 28902
28934: POP
28935: POP
// until p > 20 ;
28936: LD_VAR 0 3
28940: PUSH
28941: LD_INT 20
28943: GREATER
28944: IFFALSE 28871
// end ;
28946: PPOPN 3
28948: END
// every 0 0$1 trigger StreamModeActive and sTime do
28949: LD_EXP 38
28953: IFFALSE 28961
28955: PUSH
28956: LD_EXP 89
28960: AND
28961: IFFALSE 28996
28963: GO 28965
28965: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28966: LD_INT 28
28968: PPUSH
28969: LD_OWVAR 2
28973: PPUSH
28974: LD_INT 2
28976: PPUSH
28977: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28981: LD_INT 30
28983: PPUSH
28984: LD_OWVAR 2
28988: PPUSH
28989: LD_INT 2
28991: PPUSH
28992: CALL_OW 322
// end ;
28996: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28997: LD_EXP 38
29001: IFFALSE 29009
29003: PUSH
29004: LD_EXP 90
29008: AND
29009: IFFALSE 29130
29011: GO 29013
29013: DISABLE
29014: LD_INT 0
29016: PPUSH
29017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29018: LD_ADDR_VAR 0 2
29022: PUSH
29023: LD_INT 22
29025: PUSH
29026: LD_OWVAR 2
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 21
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 23
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: PPUSH
29067: CALL_OW 69
29071: ST_TO_ADDR
// if not tmp then
29072: LD_VAR 0 2
29076: NOT
29077: IFFALSE 29081
// exit ;
29079: GO 29130
// for i in tmp do
29081: LD_ADDR_VAR 0 1
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: FOR_IN
29092: IFFALSE 29128
// begin if Crawls ( i ) then
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 318
29103: IFFALSE 29114
// ComWalk ( i ) ;
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 138
// SetClass ( i , 2 ) ;
29114: LD_VAR 0 1
29118: PPUSH
29119: LD_INT 2
29121: PPUSH
29122: CALL_OW 336
// end ;
29126: GO 29091
29128: POP
29129: POP
// end ;
29130: PPOPN 2
29132: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29133: LD_EXP 38
29137: IFFALSE 29145
29139: PUSH
29140: LD_EXP 91
29144: AND
29145: IFFALSE 29435
29147: GO 29149
29149: DISABLE
29150: LD_INT 0
29152: PPUSH
29153: PPUSH
29154: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29155: LD_OWVAR 2
29159: PPUSH
29160: LD_INT 9
29162: PPUSH
29163: LD_INT 1
29165: PPUSH
29166: LD_INT 1
29168: PPUSH
29169: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29173: LD_INT 9
29175: PPUSH
29176: LD_OWVAR 2
29180: PPUSH
29181: CALL_OW 343
// uc_side := 9 ;
29185: LD_ADDR_OWVAR 20
29189: PUSH
29190: LD_INT 9
29192: ST_TO_ADDR
// uc_nation := 2 ;
29193: LD_ADDR_OWVAR 21
29197: PUSH
29198: LD_INT 2
29200: ST_TO_ADDR
// hc_name := Dark Warrior ;
29201: LD_ADDR_OWVAR 26
29205: PUSH
29206: LD_STRING Dark Warrior
29208: ST_TO_ADDR
// hc_gallery :=  ;
29209: LD_ADDR_OWVAR 33
29213: PUSH
29214: LD_STRING 
29216: ST_TO_ADDR
// hc_noskilllimit := true ;
29217: LD_ADDR_OWVAR 76
29221: PUSH
29222: LD_INT 1
29224: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29225: LD_ADDR_OWVAR 31
29229: PUSH
29230: LD_INT 30
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 30
29238: PUSH
29239: LD_INT 30
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: ST_TO_ADDR
// un := CreateHuman ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: CALL_OW 44
29257: ST_TO_ADDR
// hc_noskilllimit := false ;
29258: LD_ADDR_OWVAR 76
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29266: LD_VAR 0 3
29270: PPUSH
29271: LD_INT 1
29273: PPUSH
29274: CALL_OW 51
// ToLua ( playRanger() ) ;
29278: LD_STRING playRanger()
29280: PPUSH
29281: CALL_OW 559
// p := 0 ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_INT 0
29292: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29293: LD_INT 35
29295: PPUSH
29296: CALL_OW 67
// p := p + 1 ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_VAR 0 2
29309: PUSH
29310: LD_INT 1
29312: PLUS
29313: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29314: LD_VAR 0 3
29318: PPUSH
29319: CALL_OW 256
29323: PUSH
29324: LD_INT 1000
29326: LESS
29327: IFFALSE 29341
// SetLives ( un , 1000 ) ;
29329: LD_VAR 0 3
29333: PPUSH
29334: LD_INT 1000
29336: PPUSH
29337: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29341: LD_VAR 0 3
29345: PPUSH
29346: LD_INT 81
29348: PUSH
29349: LD_OWVAR 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 91
29360: PUSH
29361: LD_VAR 0 3
29365: PUSH
29366: LD_INT 30
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PPUSH
29378: CALL_OW 69
29382: PPUSH
29383: LD_VAR 0 3
29387: PPUSH
29388: CALL_OW 74
29392: PPUSH
29393: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29397: LD_VAR 0 2
29401: PUSH
29402: LD_INT 80
29404: GREATER
29405: IFTRUE 29418
29407: PUSH
29408: LD_VAR 0 3
29412: PPUSH
29413: CALL_OW 301
29417: OR
29418: IFFALSE 29293
// if un then
29420: LD_VAR 0 3
29424: IFFALSE 29435
// RemoveUnit ( un ) ;
29426: LD_VAR 0 3
29430: PPUSH
29431: CALL_OW 64
// end ;
29435: PPOPN 3
29437: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29438: LD_EXP 92
29442: IFFALSE 29558
29444: GO 29446
29446: DISABLE
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
29451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_INT 81
29459: PUSH
29460: LD_OWVAR 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 21
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PPUSH
29483: CALL_OW 69
29487: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29488: LD_STRING playComputer()
29490: PPUSH
29491: CALL_OW 559
// if not tmp then
29495: LD_VAR 0 2
29499: NOT
29500: IFFALSE 29504
// exit ;
29502: GO 29558
// for i in tmp do
29504: LD_ADDR_VAR 0 1
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: FOR_IN
29515: IFFALSE 29556
// for j := 1 to 4 do
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: DOUBLE
29523: LD_INT 1
29525: DEC
29526: ST_TO_ADDR
29527: LD_INT 4
29529: PUSH
29530: FOR_TO
29531: IFFALSE 29552
// SetSkill ( i , j , 10 ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_VAR 0 3
29542: PPUSH
29543: LD_INT 10
29545: PPUSH
29546: CALL_OW 237
29550: GO 29530
29552: POP
29553: POP
29554: GO 29514
29556: POP
29557: POP
// end ;
29558: PPOPN 3
29560: END
// every 0 0$1 trigger s30 do var i , tmp ;
29561: LD_EXP 93
29565: IFFALSE 29634
29567: GO 29569
29569: DISABLE
29570: LD_INT 0
29572: PPUSH
29573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29574: LD_ADDR_VAR 0 2
29578: PUSH
29579: LD_INT 22
29581: PUSH
29582: LD_OWVAR 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 69
29595: ST_TO_ADDR
// if not tmp then
29596: LD_VAR 0 2
29600: NOT
29601: IFFALSE 29605
// exit ;
29603: GO 29634
// for i in tmp do
29605: LD_ADDR_VAR 0 1
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: FOR_IN
29616: IFFALSE 29632
// SetLives ( i , 300 ) ;
29618: LD_VAR 0 1
29622: PPUSH
29623: LD_INT 300
29625: PPUSH
29626: CALL_OW 234
29630: GO 29615
29632: POP
29633: POP
// end ;
29634: PPOPN 2
29636: END
// every 0 0$1 trigger s60 do var i , tmp ;
29637: LD_EXP 94
29641: IFFALSE 29710
29643: GO 29645
29645: DISABLE
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_INT 22
29657: PUSH
29658: LD_OWVAR 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: ST_TO_ADDR
// if not tmp then
29672: LD_VAR 0 2
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 29710
// for i in tmp do
29681: LD_ADDR_VAR 0 1
29685: PUSH
29686: LD_VAR 0 2
29690: PUSH
29691: FOR_IN
29692: IFFALSE 29708
// SetLives ( i , 600 ) ;
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_INT 600
29701: PPUSH
29702: CALL_OW 234
29706: GO 29691
29708: POP
29709: POP
// end ;
29710: PPOPN 2
29712: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29713: LD_INT 0
29715: PPUSH
// case cmd of 301 :
29716: LD_VAR 0 1
29720: PUSH
29721: LD_INT 301
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29761
29729: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29730: LD_VAR 0 6
29734: PPUSH
29735: LD_VAR 0 7
29739: PPUSH
29740: LD_VAR 0 8
29744: PPUSH
29745: LD_VAR 0 4
29749: PPUSH
29750: LD_VAR 0 5
29754: PPUSH
29755: CALL 30974 0 5
29759: GO 29882
29761: LD_INT 302
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29806
29769: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29770: LD_VAR 0 6
29774: PPUSH
29775: LD_VAR 0 7
29779: PPUSH
29780: LD_VAR 0 8
29784: PPUSH
29785: LD_VAR 0 9
29789: PPUSH
29790: LD_VAR 0 4
29794: PPUSH
29795: LD_VAR 0 5
29799: PPUSH
29800: CALL 31065 0 6
29804: GO 29882
29806: LD_INT 303
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29851
29814: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29815: LD_VAR 0 6
29819: PPUSH
29820: LD_VAR 0 7
29824: PPUSH
29825: LD_VAR 0 8
29829: PPUSH
29830: LD_VAR 0 9
29834: PPUSH
29835: LD_VAR 0 4
29839: PPUSH
29840: LD_VAR 0 5
29844: PPUSH
29845: CALL 29887 0 6
29849: GO 29882
29851: LD_INT 304
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 29881
29859: POP
// hHackTeleport ( unit , x , y ) ; end ;
29860: LD_VAR 0 2
29864: PPUSH
29865: LD_VAR 0 4
29869: PPUSH
29870: LD_VAR 0 5
29874: PPUSH
29875: CALL 31658 0 3
29879: GO 29882
29881: POP
// end ;
29882: LD_VAR 0 12
29886: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29887: LD_INT 0
29889: PPUSH
29890: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29891: LD_VAR 0 1
29895: PUSH
29896: LD_INT 1
29898: LESS
29899: IFTRUE 29911
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 3
29909: GREATER
29910: OR
29911: IFTRUE 29929
29913: PUSH
29914: LD_VAR 0 5
29918: PPUSH
29919: LD_VAR 0 6
29923: PPUSH
29924: CALL_OW 428
29928: OR
29929: IFFALSE 29933
// exit ;
29931: GO 30661
// uc_side := your_side ;
29933: LD_ADDR_OWVAR 20
29937: PUSH
29938: LD_OWVAR 2
29942: ST_TO_ADDR
// uc_nation := nation ;
29943: LD_ADDR_OWVAR 21
29947: PUSH
29948: LD_VAR 0 1
29952: ST_TO_ADDR
// bc_level = 1 ;
29953: LD_ADDR_OWVAR 43
29957: PUSH
29958: LD_INT 1
29960: ST_TO_ADDR
// case btype of 1 :
29961: LD_VAR 0 2
29965: PUSH
29966: LD_INT 1
29968: DOUBLE
29969: EQUAL
29970: IFTRUE 29974
29972: GO 29985
29974: POP
// bc_type := b_depot ; 2 :
29975: LD_ADDR_OWVAR 42
29979: PUSH
29980: LD_INT 0
29982: ST_TO_ADDR
29983: GO 30605
29985: LD_INT 2
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30004
29993: POP
// bc_type := b_warehouse ; 3 :
29994: LD_ADDR_OWVAR 42
29998: PUSH
29999: LD_INT 1
30001: ST_TO_ADDR
30002: GO 30605
30004: LD_INT 3
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30023
30012: POP
// bc_type := b_lab ; 4 .. 9 :
30013: LD_ADDR_OWVAR 42
30017: PUSH
30018: LD_INT 6
30020: ST_TO_ADDR
30021: GO 30605
30023: LD_INT 4
30025: DOUBLE
30026: GREATEREQUAL
30027: IFFALSE 30035
30029: LD_INT 9
30031: DOUBLE
30032: LESSEQUAL
30033: IFTRUE 30037
30035: GO 30097
30037: POP
// begin bc_type := b_lab_half ;
30038: LD_ADDR_OWVAR 42
30042: PUSH
30043: LD_INT 7
30045: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30046: LD_ADDR_OWVAR 44
30050: PUSH
30051: LD_INT 10
30053: PUSH
30054: LD_INT 11
30056: PUSH
30057: LD_INT 12
30059: PUSH
30060: LD_INT 15
30062: PUSH
30063: LD_INT 14
30065: PUSH
30066: LD_INT 13
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: PUSH
30077: LD_VAR 0 2
30081: PUSH
30082: LD_INT 3
30084: MINUS
30085: ARRAY
30086: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30087: LD_ADDR_OWVAR 45
30091: PUSH
30092: LD_INT 9
30094: ST_TO_ADDR
// end ; 10 .. 13 :
30095: GO 30605
30097: LD_INT 10
30099: DOUBLE
30100: GREATEREQUAL
30101: IFFALSE 30109
30103: LD_INT 13
30105: DOUBLE
30106: LESSEQUAL
30107: IFTRUE 30111
30109: GO 30188
30111: POP
// begin bc_type := b_lab_full ;
30112: LD_ADDR_OWVAR 42
30116: PUSH
30117: LD_INT 8
30119: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30120: LD_ADDR_OWVAR 44
30124: PUSH
30125: LD_INT 10
30127: PUSH
30128: LD_INT 12
30130: PUSH
30131: LD_INT 14
30133: PUSH
30134: LD_INT 13
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: PUSH
30143: LD_VAR 0 2
30147: PUSH
30148: LD_INT 9
30150: MINUS
30151: ARRAY
30152: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30153: LD_ADDR_OWVAR 45
30157: PUSH
30158: LD_INT 11
30160: PUSH
30161: LD_INT 15
30163: PUSH
30164: LD_INT 12
30166: PUSH
30167: LD_INT 15
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: PUSH
30176: LD_VAR 0 2
30180: PUSH
30181: LD_INT 9
30183: MINUS
30184: ARRAY
30185: ST_TO_ADDR
// end ; 14 :
30186: GO 30605
30188: LD_INT 14
30190: DOUBLE
30191: EQUAL
30192: IFTRUE 30196
30194: GO 30207
30196: POP
// bc_type := b_workshop ; 15 :
30197: LD_ADDR_OWVAR 42
30201: PUSH
30202: LD_INT 2
30204: ST_TO_ADDR
30205: GO 30605
30207: LD_INT 15
30209: DOUBLE
30210: EQUAL
30211: IFTRUE 30215
30213: GO 30226
30215: POP
// bc_type := b_factory ; 16 :
30216: LD_ADDR_OWVAR 42
30220: PUSH
30221: LD_INT 3
30223: ST_TO_ADDR
30224: GO 30605
30226: LD_INT 16
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30245
30234: POP
// bc_type := b_ext_gun ; 17 :
30235: LD_ADDR_OWVAR 42
30239: PUSH
30240: LD_INT 17
30242: ST_TO_ADDR
30243: GO 30605
30245: LD_INT 17
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30281
30253: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30254: LD_ADDR_OWVAR 42
30258: PUSH
30259: LD_INT 19
30261: PUSH
30262: LD_INT 23
30264: PUSH
30265: LD_INT 19
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: PUSH
30273: LD_VAR 0 1
30277: ARRAY
30278: ST_TO_ADDR
30279: GO 30605
30281: LD_INT 18
30283: DOUBLE
30284: EQUAL
30285: IFTRUE 30289
30287: GO 30300
30289: POP
// bc_type := b_ext_radar ; 19 :
30290: LD_ADDR_OWVAR 42
30294: PUSH
30295: LD_INT 20
30297: ST_TO_ADDR
30298: GO 30605
30300: LD_INT 19
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30319
30308: POP
// bc_type := b_ext_radio ; 20 :
30309: LD_ADDR_OWVAR 42
30313: PUSH
30314: LD_INT 22
30316: ST_TO_ADDR
30317: GO 30605
30319: LD_INT 20
30321: DOUBLE
30322: EQUAL
30323: IFTRUE 30327
30325: GO 30338
30327: POP
// bc_type := b_ext_siberium ; 21 :
30328: LD_ADDR_OWVAR 42
30332: PUSH
30333: LD_INT 21
30335: ST_TO_ADDR
30336: GO 30605
30338: LD_INT 21
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30357
30346: POP
// bc_type := b_ext_computer ; 22 :
30347: LD_ADDR_OWVAR 42
30351: PUSH
30352: LD_INT 24
30354: ST_TO_ADDR
30355: GO 30605
30357: LD_INT 22
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30376
30365: POP
// bc_type := b_ext_track ; 23 :
30366: LD_ADDR_OWVAR 42
30370: PUSH
30371: LD_INT 16
30373: ST_TO_ADDR
30374: GO 30605
30376: LD_INT 23
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30395
30384: POP
// bc_type := b_ext_laser ; 24 :
30385: LD_ADDR_OWVAR 42
30389: PUSH
30390: LD_INT 25
30392: ST_TO_ADDR
30393: GO 30605
30395: LD_INT 24
30397: DOUBLE
30398: EQUAL
30399: IFTRUE 30403
30401: GO 30414
30403: POP
// bc_type := b_control_tower ; 25 :
30404: LD_ADDR_OWVAR 42
30408: PUSH
30409: LD_INT 36
30411: ST_TO_ADDR
30412: GO 30605
30414: LD_INT 25
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30433
30422: POP
// bc_type := b_breastwork ; 26 :
30423: LD_ADDR_OWVAR 42
30427: PUSH
30428: LD_INT 31
30430: ST_TO_ADDR
30431: GO 30605
30433: LD_INT 26
30435: DOUBLE
30436: EQUAL
30437: IFTRUE 30441
30439: GO 30452
30441: POP
// bc_type := b_bunker ; 27 :
30442: LD_ADDR_OWVAR 42
30446: PUSH
30447: LD_INT 32
30449: ST_TO_ADDR
30450: GO 30605
30452: LD_INT 27
30454: DOUBLE
30455: EQUAL
30456: IFTRUE 30460
30458: GO 30471
30460: POP
// bc_type := b_turret ; 28 :
30461: LD_ADDR_OWVAR 42
30465: PUSH
30466: LD_INT 33
30468: ST_TO_ADDR
30469: GO 30605
30471: LD_INT 28
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30490
30479: POP
// bc_type := b_armoury ; 29 :
30480: LD_ADDR_OWVAR 42
30484: PUSH
30485: LD_INT 4
30487: ST_TO_ADDR
30488: GO 30605
30490: LD_INT 29
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30509
30498: POP
// bc_type := b_barracks ; 30 :
30499: LD_ADDR_OWVAR 42
30503: PUSH
30504: LD_INT 5
30506: ST_TO_ADDR
30507: GO 30605
30509: LD_INT 30
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// bc_type := b_solar_power ; 31 :
30518: LD_ADDR_OWVAR 42
30522: PUSH
30523: LD_INT 27
30525: ST_TO_ADDR
30526: GO 30605
30528: LD_INT 31
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// bc_type := b_oil_power ; 32 :
30537: LD_ADDR_OWVAR 42
30541: PUSH
30542: LD_INT 26
30544: ST_TO_ADDR
30545: GO 30605
30547: LD_INT 32
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30566
30555: POP
// bc_type := b_siberite_power ; 33 :
30556: LD_ADDR_OWVAR 42
30560: PUSH
30561: LD_INT 28
30563: ST_TO_ADDR
30564: GO 30605
30566: LD_INT 33
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30574
30572: GO 30585
30574: POP
// bc_type := b_oil_mine ; 34 :
30575: LD_ADDR_OWVAR 42
30579: PUSH
30580: LD_INT 29
30582: ST_TO_ADDR
30583: GO 30605
30585: LD_INT 34
30587: DOUBLE
30588: EQUAL
30589: IFTRUE 30593
30591: GO 30604
30593: POP
// bc_type := b_siberite_mine ; end ;
30594: LD_ADDR_OWVAR 42
30598: PUSH
30599: LD_INT 30
30601: ST_TO_ADDR
30602: GO 30605
30604: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30605: LD_ADDR_VAR 0 8
30609: PUSH
30610: LD_VAR 0 5
30614: PPUSH
30615: LD_VAR 0 6
30619: PPUSH
30620: LD_VAR 0 3
30624: PPUSH
30625: CALL_OW 47
30629: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30630: LD_OWVAR 42
30634: PUSH
30635: LD_INT 32
30637: PUSH
30638: LD_INT 33
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: IN
30645: IFFALSE 30661
// PlaceWeaponTurret ( b , weapon ) ;
30647: LD_VAR 0 8
30651: PPUSH
30652: LD_VAR 0 4
30656: PPUSH
30657: CALL_OW 431
// end ;
30661: LD_VAR 0 7
30665: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30672: LD_ADDR_VAR 0 4
30676: PUSH
30677: LD_INT 22
30679: PUSH
30680: LD_OWVAR 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: LD_INT 30
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 30
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PPUSH
30721: CALL_OW 69
30725: ST_TO_ADDR
// if not tmp then
30726: LD_VAR 0 4
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 30794
// for i in tmp do
30735: LD_ADDR_VAR 0 2
30739: PUSH
30740: LD_VAR 0 4
30744: PUSH
30745: FOR_IN
30746: IFFALSE 30792
// for j = 1 to 3 do
30748: LD_ADDR_VAR 0 3
30752: PUSH
30753: DOUBLE
30754: LD_INT 1
30756: DEC
30757: ST_TO_ADDR
30758: LD_INT 3
30760: PUSH
30761: FOR_TO
30762: IFFALSE 30788
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30764: LD_VAR 0 2
30768: PPUSH
30769: CALL_OW 274
30773: PPUSH
30774: LD_VAR 0 3
30778: PPUSH
30779: LD_INT 99999
30781: PPUSH
30782: CALL_OW 277
30786: GO 30761
30788: POP
30789: POP
30790: GO 30745
30792: POP
30793: POP
// end ;
30794: LD_VAR 0 1
30798: RET
// export function hHackSetLevel10 ; var i , j ; begin
30799: LD_INT 0
30801: PPUSH
30802: PPUSH
30803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30804: LD_ADDR_VAR 0 2
30808: PUSH
30809: LD_INT 21
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PPUSH
30819: CALL_OW 69
30823: PUSH
30824: FOR_IN
30825: IFFALSE 30877
// if IsSelected ( i ) then
30827: LD_VAR 0 2
30831: PPUSH
30832: CALL_OW 306
30836: IFFALSE 30875
// begin for j := 1 to 4 do
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: DOUBLE
30844: LD_INT 1
30846: DEC
30847: ST_TO_ADDR
30848: LD_INT 4
30850: PUSH
30851: FOR_TO
30852: IFFALSE 30873
// SetSkill ( i , j , 10 ) ;
30854: LD_VAR 0 2
30858: PPUSH
30859: LD_VAR 0 3
30863: PPUSH
30864: LD_INT 10
30866: PPUSH
30867: CALL_OW 237
30871: GO 30851
30873: POP
30874: POP
// end ;
30875: GO 30824
30877: POP
30878: POP
// end ;
30879: LD_VAR 0 1
30883: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30884: LD_INT 0
30886: PPUSH
30887: PPUSH
30888: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30889: LD_ADDR_VAR 0 2
30893: PUSH
30894: LD_INT 22
30896: PUSH
30897: LD_OWVAR 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 21
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PPUSH
30920: CALL_OW 69
30924: PUSH
30925: FOR_IN
30926: IFFALSE 30967
// begin for j := 1 to 4 do
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: DOUBLE
30934: LD_INT 1
30936: DEC
30937: ST_TO_ADDR
30938: LD_INT 4
30940: PUSH
30941: FOR_TO
30942: IFFALSE 30963
// SetSkill ( i , j , 10 ) ;
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 3
30953: PPUSH
30954: LD_INT 10
30956: PPUSH
30957: CALL_OW 237
30961: GO 30941
30963: POP
30964: POP
// end ;
30965: GO 30925
30967: POP
30968: POP
// end ;
30969: LD_VAR 0 1
30973: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30974: LD_INT 0
30976: PPUSH
// uc_side := your_side ;
30977: LD_ADDR_OWVAR 20
30981: PUSH
30982: LD_OWVAR 2
30986: ST_TO_ADDR
// uc_nation := nation ;
30987: LD_ADDR_OWVAR 21
30991: PUSH
30992: LD_VAR 0 1
30996: ST_TO_ADDR
// InitHc ;
30997: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31001: LD_INT 0
31003: PPUSH
31004: LD_VAR 0 2
31008: PPUSH
31009: LD_VAR 0 3
31013: PPUSH
31014: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31018: LD_VAR 0 4
31022: PPUSH
31023: LD_VAR 0 5
31027: PPUSH
31028: CALL_OW 428
31032: PUSH
31033: LD_INT 0
31035: EQUAL
31036: IFFALSE 31060
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31038: CALL_OW 44
31042: PPUSH
31043: LD_VAR 0 4
31047: PPUSH
31048: LD_VAR 0 5
31052: PPUSH
31053: LD_INT 1
31055: PPUSH
31056: CALL_OW 48
// end ;
31060: LD_VAR 0 6
31064: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31065: LD_INT 0
31067: PPUSH
31068: PPUSH
// uc_side := your_side ;
31069: LD_ADDR_OWVAR 20
31073: PUSH
31074: LD_OWVAR 2
31078: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31079: LD_VAR 0 1
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: IN
31106: IFFALSE 31118
// uc_nation := nation_american else
31108: LD_ADDR_OWVAR 21
31112: PUSH
31113: LD_INT 1
31115: ST_TO_ADDR
31116: GO 31161
// if chassis in [ 11 , 12 , 13 , 14 ] then
31118: LD_VAR 0 1
31122: PUSH
31123: LD_INT 11
31125: PUSH
31126: LD_INT 12
31128: PUSH
31129: LD_INT 13
31131: PUSH
31132: LD_INT 14
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: IN
31141: IFFALSE 31153
// uc_nation := nation_arabian else
31143: LD_ADDR_OWVAR 21
31147: PUSH
31148: LD_INT 2
31150: ST_TO_ADDR
31151: GO 31161
// uc_nation := nation_russian ;
31153: LD_ADDR_OWVAR 21
31157: PUSH
31158: LD_INT 3
31160: ST_TO_ADDR
// vc_chassis := chassis ;
31161: LD_ADDR_OWVAR 37
31165: PUSH
31166: LD_VAR 0 1
31170: ST_TO_ADDR
// vc_engine := engine ;
31171: LD_ADDR_OWVAR 39
31175: PUSH
31176: LD_VAR 0 2
31180: ST_TO_ADDR
// vc_control := control ;
31181: LD_ADDR_OWVAR 38
31185: PUSH
31186: LD_VAR 0 3
31190: ST_TO_ADDR
// vc_weapon := weapon ;
31191: LD_ADDR_OWVAR 40
31195: PUSH
31196: LD_VAR 0 4
31200: ST_TO_ADDR
// un := CreateVehicle ;
31201: LD_ADDR_VAR 0 8
31205: PUSH
31206: CALL_OW 45
31210: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_INT 0
31218: PPUSH
31219: LD_INT 5
31221: PPUSH
31222: CALL_OW 12
31226: PPUSH
31227: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31231: LD_VAR 0 8
31235: PPUSH
31236: LD_VAR 0 5
31240: PPUSH
31241: LD_VAR 0 6
31245: PPUSH
31246: LD_INT 1
31248: PPUSH
31249: CALL_OW 48
// end ;
31253: LD_VAR 0 7
31257: RET
// export hInvincible ; every 1 do
31258: GO 31260
31260: DISABLE
// hInvincible := [ ] ;
31261: LD_ADDR_EXP 95
31265: PUSH
31266: EMPTY
31267: ST_TO_ADDR
31268: END
// every 10 do var i ;
31269: GO 31271
31271: DISABLE
31272: LD_INT 0
31274: PPUSH
// begin enable ;
31275: ENABLE
// if not hInvincible then
31276: LD_EXP 95
31280: NOT
31281: IFFALSE 31285
// exit ;
31283: GO 31329
// for i in hInvincible do
31285: LD_ADDR_VAR 0 1
31289: PUSH
31290: LD_EXP 95
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31327
// if GetLives ( i ) < 1000 then
31298: LD_VAR 0 1
31302: PPUSH
31303: CALL_OW 256
31307: PUSH
31308: LD_INT 1000
31310: LESS
31311: IFFALSE 31325
// SetLives ( i , 1000 ) ;
31313: LD_VAR 0 1
31317: PPUSH
31318: LD_INT 1000
31320: PPUSH
31321: CALL_OW 234
31325: GO 31295
31327: POP
31328: POP
// end ;
31329: PPOPN 1
31331: END
// export function hHackInvincible ; var i ; begin
31332: LD_INT 0
31334: PPUSH
31335: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31336: LD_ADDR_VAR 0 2
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 21
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: PPUSH
31369: CALL_OW 69
31373: PUSH
31374: FOR_IN
31375: IFFALSE 31436
// if IsSelected ( i ) then
31377: LD_VAR 0 2
31381: PPUSH
31382: CALL_OW 306
31386: IFFALSE 31434
// begin if i in hInvincible then
31388: LD_VAR 0 2
31392: PUSH
31393: LD_EXP 95
31397: IN
31398: IFFALSE 31418
// hInvincible := hInvincible diff i else
31400: LD_ADDR_EXP 95
31404: PUSH
31405: LD_EXP 95
31409: PUSH
31410: LD_VAR 0 2
31414: DIFF
31415: ST_TO_ADDR
31416: GO 31434
// hInvincible := hInvincible union i ;
31418: LD_ADDR_EXP 95
31422: PUSH
31423: LD_EXP 95
31427: PUSH
31428: LD_VAR 0 2
31432: UNION
31433: ST_TO_ADDR
// end ;
31434: GO 31374
31436: POP
31437: POP
// end ;
31438: LD_VAR 0 1
31442: RET
// export function hHackInvisible ; var i , j ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
31447: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31448: LD_ADDR_VAR 0 2
31452: PUSH
31453: LD_INT 21
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PPUSH
31463: CALL_OW 69
31467: PUSH
31468: FOR_IN
31469: IFFALSE 31493
// if IsSelected ( i ) then
31471: LD_VAR 0 2
31475: PPUSH
31476: CALL_OW 306
31480: IFFALSE 31491
// ComForceInvisible ( i ) ;
31482: LD_VAR 0 2
31486: PPUSH
31487: CALL_OW 496
31491: GO 31468
31493: POP
31494: POP
// end ;
31495: LD_VAR 0 1
31499: RET
// export function hHackChangeYourSide ; begin
31500: LD_INT 0
31502: PPUSH
// if your_side = 8 then
31503: LD_OWVAR 2
31507: PUSH
31508: LD_INT 8
31510: EQUAL
31511: IFFALSE 31523
// your_side := 0 else
31513: LD_ADDR_OWVAR 2
31517: PUSH
31518: LD_INT 0
31520: ST_TO_ADDR
31521: GO 31537
// your_side := your_side + 1 ;
31523: LD_ADDR_OWVAR 2
31527: PUSH
31528: LD_OWVAR 2
31532: PUSH
31533: LD_INT 1
31535: PLUS
31536: ST_TO_ADDR
// end ;
31537: LD_VAR 0 1
31541: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31542: LD_INT 0
31544: PPUSH
31545: PPUSH
31546: PPUSH
// for i in all_units do
31547: LD_ADDR_VAR 0 2
31551: PUSH
31552: LD_OWVAR 3
31556: PUSH
31557: FOR_IN
31558: IFFALSE 31636
// if IsSelected ( i ) then
31560: LD_VAR 0 2
31564: PPUSH
31565: CALL_OW 306
31569: IFFALSE 31634
// begin j := GetSide ( i ) ;
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: LD_VAR 0 2
31580: PPUSH
31581: CALL_OW 255
31585: ST_TO_ADDR
// if j = 8 then
31586: LD_VAR 0 3
31590: PUSH
31591: LD_INT 8
31593: EQUAL
31594: IFFALSE 31606
// j := 0 else
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_INT 0
31603: ST_TO_ADDR
31604: GO 31620
// j := j + 1 ;
31606: LD_ADDR_VAR 0 3
31610: PUSH
31611: LD_VAR 0 3
31615: PUSH
31616: LD_INT 1
31618: PLUS
31619: ST_TO_ADDR
// SetSide ( i , j ) ;
31620: LD_VAR 0 2
31624: PPUSH
31625: LD_VAR 0 3
31629: PPUSH
31630: CALL_OW 235
// end ;
31634: GO 31557
31636: POP
31637: POP
// end ;
31638: LD_VAR 0 1
31642: RET
// export function hHackFog ; begin
31643: LD_INT 0
31645: PPUSH
// FogOff ( true ) ;
31646: LD_INT 1
31648: PPUSH
31649: CALL_OW 344
// end ;
31653: LD_VAR 0 1
31657: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31658: LD_INT 0
31660: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31661: LD_VAR 0 1
31665: PPUSH
31666: LD_VAR 0 2
31670: PPUSH
31671: LD_VAR 0 3
31675: PPUSH
31676: LD_INT 1
31678: PPUSH
31679: LD_INT 1
31681: PPUSH
31682: CALL_OW 483
// CenterOnXY ( x , y ) ;
31686: LD_VAR 0 2
31690: PPUSH
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 84
// end ;
31700: LD_VAR 0 4
31704: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31705: LD_INT 0
31707: PPUSH
31708: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31709: LD_VAR 0 1
31713: NOT
31714: IFTRUE 31733
31716: PUSH
31717: LD_VAR 0 2
31721: PPUSH
31722: LD_VAR 0 3
31726: PPUSH
31727: CALL_OW 488
31731: NOT
31732: OR
31733: IFTRUE 31768
31735: PUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL_OW 266
31745: PUSH
31746: LD_INT 3
31748: NONEQUAL
31749: IFFALSE 31767
31751: PUSH
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 247
31761: PUSH
31762: LD_INT 1
31764: EQUAL
31765: NOT
31766: AND
31767: OR
31768: IFFALSE 31772
// exit ;
31770: GO 32054
// if GetType ( factory ) = unit_human then
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 247
31781: PUSH
31782: LD_INT 1
31784: EQUAL
31785: IFFALSE 31802
// factory := IsInUnit ( factory ) ;
31787: LD_ADDR_VAR 0 1
31791: PUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL_OW 310
31801: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 266
31811: PUSH
31812: LD_INT 3
31814: NONEQUAL
31815: IFFALSE 31819
// exit ;
31817: GO 32054
// for i := 1 to Count ( factoryWaypoints ) do
31819: LD_ADDR_VAR 0 5
31823: PUSH
31824: DOUBLE
31825: LD_INT 1
31827: DEC
31828: ST_TO_ADDR
31829: LD_EXP 96
31833: PPUSH
31834: CALL 40786 0 1
31838: PUSH
31839: FOR_TO
31840: IFFALSE 32002
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
31842: LD_VAR 0 2
31846: PPUSH
31847: LD_VAR 0 3
31851: PPUSH
31852: CALL_OW 428
31856: PUSH
31857: LD_EXP 96
31861: PUSH
31862: LD_VAR 0 5
31866: ARRAY
31867: PUSH
31868: LD_INT 2
31870: ARRAY
31871: EQUAL
31872: IFFALSE 31904
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31874: LD_ADDR_EXP 96
31878: PUSH
31879: LD_EXP 96
31883: PPUSH
31884: LD_VAR 0 5
31888: PPUSH
31889: CALL_OW 3
31893: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31894: CALL 32059 0 0
// exit ;
31898: POP
31899: POP
31900: GO 32054
// end else
31902: GO 32000
// if factory = factoryWaypoints [ i ] [ 2 ] then
31904: LD_VAR 0 1
31908: PUSH
31909: LD_EXP 96
31913: PUSH
31914: LD_VAR 0 5
31918: ARRAY
31919: PUSH
31920: LD_INT 2
31922: ARRAY
31923: EQUAL
31924: IFFALSE 32000
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31926: LD_ADDR_EXP 96
31930: PUSH
31931: LD_EXP 96
31935: PPUSH
31936: LD_VAR 0 5
31940: PPUSH
31941: CALL_OW 3
31945: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31946: LD_ADDR_EXP 96
31950: PUSH
31951: LD_EXP 96
31955: PPUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 255
31965: PUSH
31966: LD_VAR 0 1
31970: PUSH
31971: LD_VAR 0 2
31975: PUSH
31976: LD_VAR 0 3
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: PPUSH
31987: CALL 76718 0 2
31991: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31992: CALL 32059 0 0
// exit ;
31996: POP
31997: POP
31998: GO 32054
// end ; end ;
32000: GO 31839
32002: POP
32003: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32004: LD_ADDR_EXP 96
32008: PUSH
32009: LD_EXP 96
32013: PPUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 255
32023: PUSH
32024: LD_VAR 0 1
32028: PUSH
32029: LD_VAR 0 2
32033: PUSH
32034: LD_VAR 0 3
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: PPUSH
32045: CALL 76718 0 2
32049: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32050: CALL 32059 0 0
// end ;
32054: LD_VAR 0 4
32058: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32064: LD_STRING resetFactoryWaypoint();
32066: PPUSH
32067: CALL_OW 559
// if factoryWaypoints then
32071: LD_EXP 96
32075: IFFALSE 32196
// begin list := factoryWaypoints ;
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_EXP 96
32086: ST_TO_ADDR
// for i := 1 to list do
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: DOUBLE
32093: LD_INT 1
32095: DEC
32096: ST_TO_ADDR
32097: LD_VAR 0 3
32101: PUSH
32102: FOR_TO
32103: IFFALSE 32194
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32105: LD_STRING setFactoryWaypointXY(
32107: PUSH
32108: LD_VAR 0 3
32112: PUSH
32113: LD_VAR 0 2
32117: ARRAY
32118: PUSH
32119: LD_INT 1
32121: ARRAY
32122: STR
32123: PUSH
32124: LD_STRING ,
32126: STR
32127: PUSH
32128: LD_VAR 0 3
32132: PUSH
32133: LD_VAR 0 2
32137: ARRAY
32138: PUSH
32139: LD_INT 2
32141: ARRAY
32142: STR
32143: PUSH
32144: LD_STRING ,
32146: STR
32147: PUSH
32148: LD_VAR 0 3
32152: PUSH
32153: LD_VAR 0 2
32157: ARRAY
32158: PUSH
32159: LD_INT 3
32161: ARRAY
32162: STR
32163: PUSH
32164: LD_STRING ,
32166: STR
32167: PUSH
32168: LD_VAR 0 3
32172: PUSH
32173: LD_VAR 0 2
32177: ARRAY
32178: PUSH
32179: LD_INT 4
32181: ARRAY
32182: STR
32183: PUSH
32184: LD_STRING )
32186: STR
32187: PPUSH
32188: CALL_OW 559
32192: GO 32102
32194: POP
32195: POP
// end ; end ;
32196: LD_VAR 0 1
32200: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32201: LD_INT 0
32203: PPUSH
// if HexInfo ( x , y ) = warehouse then
32204: LD_VAR 0 2
32208: PPUSH
32209: LD_VAR 0 3
32213: PPUSH
32214: CALL_OW 428
32218: PUSH
32219: LD_VAR 0 1
32223: EQUAL
32224: IFFALSE 32251
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32226: LD_ADDR_EXP 98
32230: PUSH
32231: LD_EXP 98
32235: PPUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: LD_INT 0
32243: PPUSH
32244: CALL_OW 1
32248: ST_TO_ADDR
32249: GO 32302
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32251: LD_ADDR_EXP 98
32255: PUSH
32256: LD_EXP 98
32260: PPUSH
32261: LD_VAR 0 1
32265: PPUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 255
32275: PUSH
32276: LD_VAR 0 1
32280: PUSH
32281: LD_VAR 0 2
32285: PUSH
32286: LD_VAR 0 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: PPUSH
32297: CALL_OW 1
32301: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32302: CALL 32311 0 0
// end ;
32306: LD_VAR 0 4
32310: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32311: LD_INT 0
32313: PPUSH
32314: PPUSH
32315: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32316: LD_STRING resetWarehouseGatheringPoints();
32318: PPUSH
32319: CALL_OW 559
// if warehouseGatheringPoints then
32323: LD_EXP 98
32327: IFFALSE 32453
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32329: LD_ADDR_VAR 0 3
32333: PUSH
32334: LD_EXP 98
32338: PPUSH
32339: CALL 80652 0 1
32343: ST_TO_ADDR
// for i := 1 to list do
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: DOUBLE
32350: LD_INT 1
32352: DEC
32353: ST_TO_ADDR
32354: LD_VAR 0 3
32358: PUSH
32359: FOR_TO
32360: IFFALSE 32451
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32362: LD_STRING setWarehouseGatheringPointXY(
32364: PUSH
32365: LD_VAR 0 3
32369: PUSH
32370: LD_VAR 0 2
32374: ARRAY
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: STR
32380: PUSH
32381: LD_STRING ,
32383: STR
32384: PUSH
32385: LD_VAR 0 3
32389: PUSH
32390: LD_VAR 0 2
32394: ARRAY
32395: PUSH
32396: LD_INT 2
32398: ARRAY
32399: STR
32400: PUSH
32401: LD_STRING ,
32403: STR
32404: PUSH
32405: LD_VAR 0 3
32409: PUSH
32410: LD_VAR 0 2
32414: ARRAY
32415: PUSH
32416: LD_INT 3
32418: ARRAY
32419: STR
32420: PUSH
32421: LD_STRING ,
32423: STR
32424: PUSH
32425: LD_VAR 0 3
32429: PUSH
32430: LD_VAR 0 2
32434: ARRAY
32435: PUSH
32436: LD_INT 4
32438: ARRAY
32439: STR
32440: PUSH
32441: LD_STRING )
32443: STR
32444: PPUSH
32445: CALL_OW 559
32449: GO 32359
32451: POP
32452: POP
// end ; end ;
32453: LD_VAR 0 1
32457: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32458: LD_EXP 98
32462: IFFALSE 33157
32464: GO 32466
32466: DISABLE
32467: LD_INT 0
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
// begin enable ;
32478: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_EXP 98
32488: PPUSH
32489: CALL 80652 0 1
32493: ST_TO_ADDR
// if not list then
32494: LD_VAR 0 3
32498: NOT
32499: IFFALSE 32503
// exit ;
32501: GO 33157
// for i := 1 to list do
32503: LD_ADDR_VAR 0 1
32507: PUSH
32508: DOUBLE
32509: LD_INT 1
32511: DEC
32512: ST_TO_ADDR
32513: LD_VAR 0 3
32517: PUSH
32518: FOR_TO
32519: IFFALSE 33155
// begin depot := list [ i ] [ 2 ] ;
32521: LD_ADDR_VAR 0 8
32525: PUSH
32526: LD_VAR 0 3
32530: PUSH
32531: LD_VAR 0 1
32535: ARRAY
32536: PUSH
32537: LD_INT 2
32539: ARRAY
32540: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32541: LD_ADDR_VAR 0 5
32545: PUSH
32546: LD_VAR 0 3
32550: PUSH
32551: LD_VAR 0 1
32555: ARRAY
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32561: LD_VAR 0 8
32565: PPUSH
32566: CALL_OW 301
32570: IFTRUE 32589
32572: PUSH
32573: LD_VAR 0 5
32577: PUSH
32578: LD_VAR 0 8
32582: PPUSH
32583: CALL_OW 255
32587: NONEQUAL
32588: OR
32589: IFFALSE 32618
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32591: LD_ADDR_EXP 98
32595: PUSH
32596: LD_EXP 98
32600: PPUSH
32601: LD_VAR 0 8
32605: PPUSH
32606: LD_INT 0
32608: PPUSH
32609: CALL_OW 1
32613: ST_TO_ADDR
// exit ;
32614: POP
32615: POP
32616: GO 33157
// end ; x := list [ i ] [ 3 ] ;
32618: LD_ADDR_VAR 0 6
32622: PUSH
32623: LD_VAR 0 3
32627: PUSH
32628: LD_VAR 0 1
32632: ARRAY
32633: PUSH
32634: LD_INT 3
32636: ARRAY
32637: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32638: LD_ADDR_VAR 0 7
32642: PUSH
32643: LD_VAR 0 3
32647: PUSH
32648: LD_VAR 0 1
32652: ARRAY
32653: PUSH
32654: LD_INT 4
32656: ARRAY
32657: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32658: LD_ADDR_VAR 0 9
32662: PUSH
32663: LD_VAR 0 6
32667: PPUSH
32668: LD_VAR 0 7
32672: PPUSH
32673: LD_INT 16
32675: PPUSH
32676: CALL 79226 0 3
32680: ST_TO_ADDR
// if not cratesNearbyPoint then
32681: LD_VAR 0 9
32685: NOT
32686: IFFALSE 32692
// exit ;
32688: POP
32689: POP
32690: GO 33157
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32692: LD_ADDR_VAR 0 4
32696: PUSH
32697: LD_INT 22
32699: PUSH
32700: LD_VAR 0 5
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: LD_INT 60
32714: PUSH
32715: EMPTY
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 91
32724: PUSH
32725: LD_VAR 0 8
32729: PUSH
32730: LD_INT 6
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 25
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 25
32753: PUSH
32754: LD_INT 16
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: PPUSH
32772: CALL_OW 69
32776: PUSH
32777: LD_VAR 0 8
32781: PPUSH
32782: CALL_OW 313
32786: PPUSH
32787: LD_INT 3
32789: PUSH
32790: LD_INT 60
32792: PUSH
32793: EMPTY
32794: LIST
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: LD_INT 25
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 25
32815: PUSH
32816: LD_INT 16
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PPUSH
32832: CALL_OW 72
32836: UNION
32837: ST_TO_ADDR
// if tmp then
32838: LD_VAR 0 4
32842: IFFALSE 32922
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32844: LD_ADDR_VAR 0 4
32848: PUSH
32849: LD_VAR 0 4
32853: PPUSH
32854: LD_INT 3
32856: PPUSH
32857: CALL 77033 0 2
32861: ST_TO_ADDR
// for j in tmp do
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: LD_VAR 0 4
32871: PUSH
32872: FOR_IN
32873: IFFALSE 32916
// begin if IsInUnit ( j ) then
32875: LD_VAR 0 2
32879: PPUSH
32880: CALL_OW 310
32884: IFFALSE 32895
// ComExit ( j ) ;
32886: LD_VAR 0 2
32890: PPUSH
32891: CALL 77116 0 1
// AddComCollect ( j , x , y ) ;
32895: LD_VAR 0 2
32899: PPUSH
32900: LD_VAR 0 6
32904: PPUSH
32905: LD_VAR 0 7
32909: PPUSH
32910: CALL_OW 177
// end ;
32914: GO 32872
32916: POP
32917: POP
// exit ;
32918: POP
32919: POP
32920: GO 33157
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32922: LD_ADDR_VAR 0 4
32926: PUSH
32927: LD_INT 22
32929: PUSH
32930: LD_VAR 0 5
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 91
32941: PUSH
32942: LD_VAR 0 8
32946: PUSH
32947: LD_INT 8
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 34
32960: PUSH
32961: LD_INT 12
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 34
32970: PUSH
32971: LD_INT 51
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 34
32980: PUSH
32981: LD_INT 32
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 34
32990: PUSH
32991: LD_INT 89
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: PPUSH
33010: CALL_OW 69
33014: ST_TO_ADDR
// if tmp then
33015: LD_VAR 0 4
33019: IFFALSE 33153
// begin for j in tmp do
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_VAR 0 4
33030: PUSH
33031: FOR_IN
33032: IFFALSE 33151
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33034: LD_VAR 0 2
33038: PPUSH
33039: CALL_OW 262
33043: PUSH
33044: LD_INT 3
33046: EQUAL
33047: IFTRUE 33064
33049: PUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 261
33059: PUSH
33060: LD_INT 20
33062: GREATER
33063: OR
33064: IFFALSE 33078
33066: PUSH
33067: LD_VAR 0 2
33071: PPUSH
33072: CALL_OW 314
33076: NOT
33077: AND
33078: IFFALSE 33108
33080: PUSH
33081: LD_VAR 0 2
33085: PPUSH
33086: CALL_OW 263
33090: PUSH
33091: LD_INT 1
33093: NONEQUAL
33094: IFTRUE 33107
33096: PUSH
33097: LD_VAR 0 2
33101: PPUSH
33102: CALL_OW 311
33106: OR
33107: AND
33108: IFFALSE 33149
// begin ComCollect ( j , x , y ) ;
33110: LD_VAR 0 2
33114: PPUSH
33115: LD_VAR 0 6
33119: PPUSH
33120: LD_VAR 0 7
33124: PPUSH
33125: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_VAR 0 8
33138: PPUSH
33139: CALL_OW 172
// exit ;
33143: POP
33144: POP
33145: POP
33146: POP
33147: GO 33157
// end ;
33149: GO 33031
33151: POP
33152: POP
// end ; end ;
33153: GO 32518
33155: POP
33156: POP
// end ; end_of_file
33157: PPOPN 9
33159: END
// export function SOS_UnitDestroyed ( un ) ; begin
33160: LD_INT 0
33162: PPUSH
// ComRadiation ( un ) ;
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL 34249 0 1
// end ;
33172: LD_VAR 0 2
33176: RET
// export function SOS_UnitKamikazed ( un ) ; begin
33177: LD_INT 0
33179: PPUSH
// ComRadiation ( un ) ;
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL 34249 0 1
// end ;
33189: LD_VAR 0 2
33193: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33194: LD_INT 0
33196: PPUSH
// end ;
33197: LD_VAR 0 4
33201: RET
// export function SOS_Command ( cmd ) ; begin
33202: LD_INT 0
33204: PPUSH
// end ;
33205: LD_VAR 0 2
33209: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33210: LD_INT 0
33212: PPUSH
// end ;
33213: LD_VAR 0 6
33217: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
// if not vehicle or not factory then
33224: LD_VAR 0 1
33228: NOT
33229: IFTRUE 33238
33231: PUSH
33232: LD_VAR 0 2
33236: NOT
33237: OR
33238: IFFALSE 33242
// exit ;
33240: GO 33824
// if not factoryWaypoints then
33242: LD_EXP 96
33246: NOT
33247: IFFALSE 33251
// exit ;
33249: GO 33824
// for i := 1 to Count ( factoryWaypoints ) do
33251: LD_ADDR_VAR 0 4
33255: PUSH
33256: DOUBLE
33257: LD_INT 1
33259: DEC
33260: ST_TO_ADDR
33261: LD_EXP 96
33265: PPUSH
33266: CALL 40786 0 1
33270: PUSH
33271: FOR_TO
33272: IFFALSE 33822
// if factoryWaypoints [ i ] [ 2 ] = factory then
33274: LD_EXP 96
33278: PUSH
33279: LD_VAR 0 4
33283: ARRAY
33284: PUSH
33285: LD_INT 2
33287: ARRAY
33288: PUSH
33289: LD_VAR 0 2
33293: EQUAL
33294: IFFALSE 33820
// begin if GetControl ( vehicle ) = control_manual then
33296: LD_VAR 0 1
33300: PPUSH
33301: CALL_OW 263
33305: PUSH
33306: LD_INT 1
33308: EQUAL
33309: IFFALSE 33673
// begin driver := IsDrivenBy ( vehicle ) ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 311
33325: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
33326: LD_VAR 0 5
33330: PUSH
33331: LD_EXP 97
33335: IN
33336: IFTRUE 33350
33338: PUSH
33339: LD_VAR 0 1
33343: PUSH
33344: LD_EXP 97
33348: IN
33349: OR
33350: IFFALSE 33356
// exit ;
33352: POP
33353: POP
33354: GO 33824
// if not HasTask ( driver ) then
33356: LD_VAR 0 5
33360: PPUSH
33361: CALL_OW 314
33365: NOT
33366: IFFALSE 33671
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
33368: LD_ADDR_EXP 97
33372: PUSH
33373: LD_EXP 97
33377: PPUSH
33378: LD_VAR 0 5
33382: PPUSH
33383: CALL 76718 0 2
33387: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
33388: LD_ADDR_EXP 97
33392: PUSH
33393: LD_EXP 97
33397: PPUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: CALL 76718 0 2
33407: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33408: LD_ADDR_VAR 0 6
33412: PUSH
33413: LD_EXP 96
33417: PUSH
33418: LD_VAR 0 4
33422: ARRAY
33423: PUSH
33424: LD_INT 3
33426: ARRAY
33427: PPUSH
33428: LD_EXP 96
33432: PUSH
33433: LD_VAR 0 4
33437: ARRAY
33438: PUSH
33439: LD_INT 4
33441: ARRAY
33442: PPUSH
33443: CALL_OW 428
33447: ST_TO_ADDR
// if hex then
33448: LD_VAR 0 6
33452: IFFALSE 33470
// ComMoveUnit ( driver , hex ) else
33454: LD_VAR 0 5
33458: PPUSH
33459: LD_VAR 0 6
33463: PPUSH
33464: CALL_OW 112
33468: GO 33554
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
33470: LD_VAR 0 1
33474: PPUSH
33475: LD_EXP 96
33479: PUSH
33480: LD_VAR 0 4
33484: ARRAY
33485: PUSH
33486: LD_INT 3
33488: ARRAY
33489: PPUSH
33490: LD_EXP 96
33494: PUSH
33495: LD_VAR 0 4
33499: ARRAY
33500: PUSH
33501: LD_INT 4
33503: ARRAY
33504: PPUSH
33505: CALL_OW 297
33509: PUSH
33510: LD_INT 0
33512: GREATER
33513: IFFALSE 33554
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33515: LD_VAR 0 5
33519: PPUSH
33520: LD_EXP 96
33524: PUSH
33525: LD_VAR 0 4
33529: ARRAY
33530: PUSH
33531: LD_INT 3
33533: ARRAY
33534: PPUSH
33535: LD_EXP 96
33539: PUSH
33540: LD_VAR 0 4
33544: ARRAY
33545: PUSH
33546: LD_INT 4
33548: ARRAY
33549: PPUSH
33550: CALL_OW 111
// AddComExitVehicle ( driver ) ;
33554: LD_VAR 0 5
33558: PPUSH
33559: CALL_OW 181
// if Multiplayer then
33563: LD_OWVAR 4
33567: IFFALSE 33616
// begin repeat wait ( 10 ) ;
33569: LD_INT 10
33571: PPUSH
33572: CALL_OW 67
// until not IsInUnit ( driver ) ;
33576: LD_VAR 0 5
33580: PPUSH
33581: CALL_OW 310
33585: NOT
33586: IFFALSE 33569
// if not HasTask ( driver ) then
33588: LD_VAR 0 5
33592: PPUSH
33593: CALL_OW 314
33597: NOT
33598: IFFALSE 33614
// ComEnterUnit ( driver , factory ) ;
33600: LD_VAR 0 5
33604: PPUSH
33605: LD_VAR 0 2
33609: PPUSH
33610: CALL_OW 120
// end else
33614: GO 33630
// AddComEnterUnit ( driver , factory ) ;
33616: LD_VAR 0 5
33620: PPUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: CALL_OW 180
// wait ( 0 0$1 ) ;
33630: LD_INT 35
33632: PPUSH
33633: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
33637: LD_ADDR_EXP 97
33641: PUSH
33642: LD_EXP 97
33646: PUSH
33647: LD_VAR 0 5
33651: DIFF
33652: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
33653: LD_ADDR_EXP 97
33657: PUSH
33658: LD_EXP 97
33662: PUSH
33663: LD_VAR 0 1
33667: DIFF
33668: ST_TO_ADDR
// break ;
33669: GO 33822
// end ; end else
33671: GO 33820
// if GetControl ( vehicle ) = control_remote then
33673: LD_VAR 0 1
33677: PPUSH
33678: CALL_OW 263
33682: PUSH
33683: LD_INT 2
33685: EQUAL
33686: IFFALSE 33772
// begin wait ( 0 0$2 ) ;
33688: LD_INT 70
33690: PPUSH
33691: CALL_OW 67
// repeat wait ( 10 ) ;
33695: LD_INT 10
33697: PPUSH
33698: CALL_OW 67
// Connect ( vehicle ) ;
33702: LD_VAR 0 1
33706: PPUSH
33707: CALL 47030 0 1
// until IsControledBy ( vehicle ) ;
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 312
33720: IFFALSE 33695
// wait ( 10 ) ;
33722: LD_INT 10
33724: PPUSH
33725: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_EXP 96
33738: PUSH
33739: LD_VAR 0 4
33743: ARRAY
33744: PUSH
33745: LD_INT 3
33747: ARRAY
33748: PPUSH
33749: LD_EXP 96
33753: PUSH
33754: LD_VAR 0 4
33758: ARRAY
33759: PUSH
33760: LD_INT 4
33762: ARRAY
33763: PPUSH
33764: CALL_OW 111
// break ;
33768: GO 33822
// end else
33770: GO 33820
// begin wait ( 0 0$3 ) ;
33772: LD_INT 105
33774: PPUSH
33775: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33779: LD_VAR 0 1
33783: PPUSH
33784: LD_EXP 96
33788: PUSH
33789: LD_VAR 0 4
33793: ARRAY
33794: PUSH
33795: LD_INT 3
33797: ARRAY
33798: PPUSH
33799: LD_EXP 96
33803: PUSH
33804: LD_VAR 0 4
33808: ARRAY
33809: PUSH
33810: LD_INT 4
33812: ARRAY
33813: PPUSH
33814: CALL_OW 111
// break ;
33818: GO 33822
// end ; end ;
33820: GO 33271
33822: POP
33823: POP
// end ;
33824: LD_VAR 0 3
33828: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33829: LD_INT 0
33831: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33832: LD_VAR 0 1
33836: PUSH
33837: LD_INT 250
33839: EQUAL
33840: IFFALSE 33857
33842: PUSH
33843: LD_VAR 0 2
33847: PPUSH
33848: CALL_OW 264
33852: PUSH
33853: LD_INT 81
33855: EQUAL
33856: AND
33857: IFFALSE 33878
// MinerPlaceMine ( unit , x , y ) ;
33859: LD_VAR 0 2
33863: PPUSH
33864: LD_VAR 0 4
33868: PPUSH
33869: LD_VAR 0 5
33873: PPUSH
33874: CALL 37010 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33878: LD_VAR 0 1
33882: PUSH
33883: LD_INT 251
33885: EQUAL
33886: IFFALSE 33903
33888: PUSH
33889: LD_VAR 0 2
33893: PPUSH
33894: CALL_OW 264
33898: PUSH
33899: LD_INT 81
33901: EQUAL
33902: AND
33903: IFFALSE 33924
// MinerDetonateMine ( unit , x , y ) ;
33905: LD_VAR 0 2
33909: PPUSH
33910: LD_VAR 0 4
33914: PPUSH
33915: LD_VAR 0 5
33919: PPUSH
33920: CALL 37289 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33924: LD_VAR 0 1
33928: PUSH
33929: LD_INT 252
33931: EQUAL
33932: IFFALSE 33949
33934: PUSH
33935: LD_VAR 0 2
33939: PPUSH
33940: CALL_OW 264
33944: PUSH
33945: LD_INT 81
33947: EQUAL
33948: AND
33949: IFFALSE 33970
// MinerCreateMinefield ( unit , x , y ) ;
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 4
33960: PPUSH
33961: LD_VAR 0 5
33965: PPUSH
33966: CALL 37708 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33970: LD_VAR 0 1
33974: PUSH
33975: LD_INT 253
33977: EQUAL
33978: IFFALSE 33995
33980: PUSH
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 257
33990: PUSH
33991: LD_INT 5
33993: EQUAL
33994: AND
33995: IFFALSE 34016
// ComBinocular ( unit , x , y ) ;
33997: LD_VAR 0 2
34001: PPUSH
34002: LD_VAR 0 4
34006: PPUSH
34007: LD_VAR 0 5
34011: PPUSH
34012: CALL 38083 0 3
// if selectedUnit then
34016: LD_VAR 0 3
34020: IFFALSE 34080
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34022: LD_VAR 0 1
34026: PUSH
34027: LD_INT 254
34029: EQUAL
34030: IFFALSE 34047
34032: PUSH
34033: LD_VAR 0 2
34037: PPUSH
34038: CALL_OW 264
34042: PUSH
34043: LD_INT 99
34045: EQUAL
34046: AND
34047: IFFALSE 34064
34049: PUSH
34050: LD_VAR 0 3
34054: PPUSH
34055: CALL_OW 263
34059: PUSH
34060: LD_INT 3
34062: EQUAL
34063: AND
34064: IFFALSE 34080
// HackDestroyVehicle ( unit , selectedUnit ) ;
34066: LD_VAR 0 2
34070: PPUSH
34071: LD_VAR 0 3
34075: PPUSH
34076: CALL 36370 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34080: LD_VAR 0 1
34084: PUSH
34085: LD_INT 255
34087: EQUAL
34088: IFFALSE 34112
34090: PUSH
34091: LD_VAR 0 2
34095: PPUSH
34096: CALL_OW 264
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: LD_INT 53
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: IN
34111: AND
34112: IFFALSE 34130
34114: PUSH
34115: LD_VAR 0 4
34119: PPUSH
34120: LD_VAR 0 5
34124: PPUSH
34125: CALL_OW 488
34129: AND
34130: IFFALSE 34154
// CutTreeXYR ( unit , x , y , 12 ) ;
34132: LD_VAR 0 2
34136: PPUSH
34137: LD_VAR 0 4
34141: PPUSH
34142: LD_VAR 0 5
34146: PPUSH
34147: LD_INT 12
34149: PPUSH
34150: CALL 34345 0 4
// if cmd = 256 then
34154: LD_VAR 0 1
34158: PUSH
34159: LD_INT 256
34161: EQUAL
34162: IFFALSE 34183
// SetFactoryWaypoint ( unit , x , y ) ;
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_VAR 0 4
34173: PPUSH
34174: LD_VAR 0 5
34178: PPUSH
34179: CALL 31705 0 3
// if cmd = 257 then
34183: LD_VAR 0 1
34187: PUSH
34188: LD_INT 257
34190: EQUAL
34191: IFFALSE 34212
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34193: LD_VAR 0 2
34197: PPUSH
34198: LD_VAR 0 4
34202: PPUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL 32201 0 3
// if cmd = 258 then
34212: LD_VAR 0 1
34216: PUSH
34217: LD_INT 258
34219: EQUAL
34220: IFFALSE 34244
// BurnTreeXYR ( unit , x , y , 8 ) ;
34222: LD_VAR 0 2
34226: PPUSH
34227: LD_VAR 0 4
34231: PPUSH
34232: LD_VAR 0 5
34236: PPUSH
34237: LD_INT 8
34239: PPUSH
34240: CALL 34745 0 4
// end ;
34244: LD_VAR 0 6
34248: RET
// export function ComRadiation ( un ) ; var eff ; begin
34249: LD_INT 0
34251: PPUSH
34252: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
34253: LD_VAR 0 1
34257: PPUSH
34258: CALL_OW 264
34262: PUSH
34263: LD_INT 91
34265: NONEQUAL
34266: IFFALSE 34270
// exit ;
34268: GO 34340
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34270: LD_INT 68
34272: PPUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 255
34282: PPUSH
34283: CALL_OW 321
34287: PUSH
34288: LD_INT 2
34290: EQUAL
34291: IFFALSE 34303
// eff := 50 else
34293: LD_ADDR_VAR 0 3
34297: PUSH
34298: LD_INT 50
34300: ST_TO_ADDR
34301: GO 34311
// eff := 25 ;
34303: LD_ADDR_VAR 0 3
34307: PUSH
34308: LD_INT 25
34310: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34311: LD_VAR 0 1
34315: PPUSH
34316: CALL_OW 250
34320: PPUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 251
34330: PPUSH
34331: LD_VAR 0 3
34335: PPUSH
34336: CALL_OW 495
// end ;
34340: LD_VAR 0 2
34344: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 302
34365: NOT
34366: IFTRUE 34385
34368: PUSH
34369: LD_VAR 0 2
34373: PPUSH
34374: LD_VAR 0 3
34378: PPUSH
34379: CALL_OW 488
34383: NOT
34384: OR
34385: IFTRUE 34394
34387: PUSH
34388: LD_VAR 0 4
34392: NOT
34393: OR
34394: IFFALSE 34398
// exit ;
34396: GO 34740
// list := [ ] ;
34398: LD_ADDR_VAR 0 13
34402: PUSH
34403: EMPTY
34404: ST_TO_ADDR
// if x - r < 0 then
34405: LD_VAR 0 2
34409: PUSH
34410: LD_VAR 0 4
34414: MINUS
34415: PUSH
34416: LD_INT 0
34418: LESS
34419: IFFALSE 34431
// min_x := 0 else
34421: LD_ADDR_VAR 0 7
34425: PUSH
34426: LD_INT 0
34428: ST_TO_ADDR
34429: GO 34447
// min_x := x - r ;
34431: LD_ADDR_VAR 0 7
34435: PUSH
34436: LD_VAR 0 2
34440: PUSH
34441: LD_VAR 0 4
34445: MINUS
34446: ST_TO_ADDR
// if y - r < 0 then
34447: LD_VAR 0 3
34451: PUSH
34452: LD_VAR 0 4
34456: MINUS
34457: PUSH
34458: LD_INT 0
34460: LESS
34461: IFFALSE 34473
// min_y := 0 else
34463: LD_ADDR_VAR 0 8
34467: PUSH
34468: LD_INT 0
34470: ST_TO_ADDR
34471: GO 34489
// min_y := y - r ;
34473: LD_ADDR_VAR 0 8
34477: PUSH
34478: LD_VAR 0 3
34482: PUSH
34483: LD_VAR 0 4
34487: MINUS
34488: ST_TO_ADDR
// max_x := x + r ;
34489: LD_ADDR_VAR 0 9
34493: PUSH
34494: LD_VAR 0 2
34498: PUSH
34499: LD_VAR 0 4
34503: PLUS
34504: ST_TO_ADDR
// max_y := y + r ;
34505: LD_ADDR_VAR 0 10
34509: PUSH
34510: LD_VAR 0 3
34514: PUSH
34515: LD_VAR 0 4
34519: PLUS
34520: ST_TO_ADDR
// for _x = min_x to max_x do
34521: LD_ADDR_VAR 0 11
34525: PUSH
34526: DOUBLE
34527: LD_VAR 0 7
34531: DEC
34532: ST_TO_ADDR
34533: LD_VAR 0 9
34537: PUSH
34538: FOR_TO
34539: IFFALSE 34658
// for _y = min_y to max_y do
34541: LD_ADDR_VAR 0 12
34545: PUSH
34546: DOUBLE
34547: LD_VAR 0 8
34551: DEC
34552: ST_TO_ADDR
34553: LD_VAR 0 10
34557: PUSH
34558: FOR_TO
34559: IFFALSE 34654
// begin if not ValidHex ( _x , _y ) then
34561: LD_VAR 0 11
34565: PPUSH
34566: LD_VAR 0 12
34570: PPUSH
34571: CALL_OW 488
34575: NOT
34576: IFFALSE 34580
// continue ;
34578: GO 34558
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34580: LD_VAR 0 11
34584: PPUSH
34585: LD_VAR 0 12
34589: PPUSH
34590: CALL_OW 351
34594: IFFALSE 34612
34596: PUSH
34597: LD_VAR 0 11
34601: PPUSH
34602: LD_VAR 0 12
34606: PPUSH
34607: CALL_OW 554
34611: AND
34612: IFFALSE 34652
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34614: LD_ADDR_VAR 0 13
34618: PUSH
34619: LD_VAR 0 13
34623: PPUSH
34624: LD_VAR 0 13
34628: PUSH
34629: LD_INT 1
34631: PLUS
34632: PPUSH
34633: LD_VAR 0 11
34637: PUSH
34638: LD_VAR 0 12
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 2
34651: ST_TO_ADDR
// end ;
34652: GO 34558
34654: POP
34655: POP
34656: GO 34538
34658: POP
34659: POP
// if not list then
34660: LD_VAR 0 13
34664: NOT
34665: IFFALSE 34669
// exit ;
34667: GO 34740
// for i in list do
34669: LD_ADDR_VAR 0 6
34673: PUSH
34674: LD_VAR 0 13
34678: PUSH
34679: FOR_IN
34680: IFFALSE 34738
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34682: LD_VAR 0 1
34686: PPUSH
34687: LD_STRING M
34689: PUSH
34690: LD_VAR 0 6
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: PUSH
34699: LD_VAR 0 6
34703: PUSH
34704: LD_INT 2
34706: ARRAY
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: PUSH
34729: EMPTY
34730: LIST
34731: PPUSH
34732: CALL_OW 447
34736: GO 34679
34738: POP
34739: POP
// end ;
34740: LD_VAR 0 5
34744: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34745: LD_INT 0
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 302
34766: NOT
34767: IFTRUE 34786
34769: PUSH
34770: LD_VAR 0 2
34774: PPUSH
34775: LD_VAR 0 3
34779: PPUSH
34780: CALL_OW 488
34784: NOT
34785: OR
34786: IFTRUE 34795
34788: PUSH
34789: LD_VAR 0 4
34793: NOT
34794: OR
34795: IFFALSE 34799
// exit ;
34797: GO 35316
// list := [ ] ;
34799: LD_ADDR_VAR 0 13
34803: PUSH
34804: EMPTY
34805: ST_TO_ADDR
// if x - r < 0 then
34806: LD_VAR 0 2
34810: PUSH
34811: LD_VAR 0 4
34815: MINUS
34816: PUSH
34817: LD_INT 0
34819: LESS
34820: IFFALSE 34832
// min_x := 0 else
34822: LD_ADDR_VAR 0 7
34826: PUSH
34827: LD_INT 0
34829: ST_TO_ADDR
34830: GO 34848
// min_x := x - r ;
34832: LD_ADDR_VAR 0 7
34836: PUSH
34837: LD_VAR 0 2
34841: PUSH
34842: LD_VAR 0 4
34846: MINUS
34847: ST_TO_ADDR
// if y - r < 0 then
34848: LD_VAR 0 3
34852: PUSH
34853: LD_VAR 0 4
34857: MINUS
34858: PUSH
34859: LD_INT 0
34861: LESS
34862: IFFALSE 34874
// min_y := 0 else
34864: LD_ADDR_VAR 0 8
34868: PUSH
34869: LD_INT 0
34871: ST_TO_ADDR
34872: GO 34890
// min_y := y - r ;
34874: LD_ADDR_VAR 0 8
34878: PUSH
34879: LD_VAR 0 3
34883: PUSH
34884: LD_VAR 0 4
34888: MINUS
34889: ST_TO_ADDR
// max_x := x + r ;
34890: LD_ADDR_VAR 0 9
34894: PUSH
34895: LD_VAR 0 2
34899: PUSH
34900: LD_VAR 0 4
34904: PLUS
34905: ST_TO_ADDR
// max_y := y + r ;
34906: LD_ADDR_VAR 0 10
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_VAR 0 4
34920: PLUS
34921: ST_TO_ADDR
// for _x = min_x to max_x do
34922: LD_ADDR_VAR 0 11
34926: PUSH
34927: DOUBLE
34928: LD_VAR 0 7
34932: DEC
34933: ST_TO_ADDR
34934: LD_VAR 0 9
34938: PUSH
34939: FOR_TO
34940: IFFALSE 35059
// for _y = min_y to max_y do
34942: LD_ADDR_VAR 0 12
34946: PUSH
34947: DOUBLE
34948: LD_VAR 0 8
34952: DEC
34953: ST_TO_ADDR
34954: LD_VAR 0 10
34958: PUSH
34959: FOR_TO
34960: IFFALSE 35055
// begin if not ValidHex ( _x , _y ) then
34962: LD_VAR 0 11
34966: PPUSH
34967: LD_VAR 0 12
34971: PPUSH
34972: CALL_OW 488
34976: NOT
34977: IFFALSE 34981
// continue ;
34979: GO 34959
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34981: LD_VAR 0 11
34985: PPUSH
34986: LD_VAR 0 12
34990: PPUSH
34991: CALL_OW 351
34995: IFFALSE 35013
34997: PUSH
34998: LD_VAR 0 11
35002: PPUSH
35003: LD_VAR 0 12
35007: PPUSH
35008: CALL_OW 554
35012: AND
35013: IFFALSE 35053
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35015: LD_ADDR_VAR 0 13
35019: PUSH
35020: LD_VAR 0 13
35024: PPUSH
35025: LD_VAR 0 13
35029: PUSH
35030: LD_INT 1
35032: PLUS
35033: PPUSH
35034: LD_VAR 0 11
35038: PUSH
35039: LD_VAR 0 12
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PPUSH
35048: CALL_OW 2
35052: ST_TO_ADDR
// end ;
35053: GO 34959
35055: POP
35056: POP
35057: GO 34939
35059: POP
35060: POP
// if not list then
35061: LD_VAR 0 13
35065: NOT
35066: IFFALSE 35070
// exit ;
35068: GO 35316
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35070: LD_ADDR_VAR 0 13
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 13
35084: PPUSH
35085: LD_INT 1
35087: PPUSH
35088: LD_INT 1
35090: PPUSH
35091: CALL 44158 0 4
35095: ST_TO_ADDR
// ComStop ( flame ) ;
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 141
// for i in list do
35105: LD_ADDR_VAR 0 6
35109: PUSH
35110: LD_VAR 0 13
35114: PUSH
35115: FOR_IN
35116: IFFALSE 35147
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35118: LD_VAR 0 1
35122: PPUSH
35123: LD_VAR 0 6
35127: PUSH
35128: LD_INT 1
35130: ARRAY
35131: PPUSH
35132: LD_VAR 0 6
35136: PUSH
35137: LD_INT 2
35139: ARRAY
35140: PPUSH
35141: CALL_OW 176
35145: GO 35115
35147: POP
35148: POP
// repeat wait ( 0 0$1 ) ;
35149: LD_INT 35
35151: PPUSH
35152: CALL_OW 67
// task := GetTaskList ( flame ) ;
35156: LD_ADDR_VAR 0 14
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 437
35170: ST_TO_ADDR
// if not task then
35171: LD_VAR 0 14
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 35316
// if task [ 1 ] [ 1 ] <> | then
35180: LD_VAR 0 14
35184: PUSH
35185: LD_INT 1
35187: ARRAY
35188: PUSH
35189: LD_INT 1
35191: ARRAY
35192: PUSH
35193: LD_STRING |
35195: NONEQUAL
35196: IFFALSE 35200
// exit ;
35198: GO 35316
// _x := task [ 1 ] [ 2 ] ;
35200: LD_ADDR_VAR 0 11
35204: PUSH
35205: LD_VAR 0 14
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: PUSH
35214: LD_INT 2
35216: ARRAY
35217: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35218: LD_ADDR_VAR 0 12
35222: PUSH
35223: LD_VAR 0 14
35227: PUSH
35228: LD_INT 1
35230: ARRAY
35231: PUSH
35232: LD_INT 3
35234: ARRAY
35235: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35236: LD_VAR 0 11
35240: PPUSH
35241: LD_VAR 0 12
35245: PPUSH
35246: CALL_OW 351
35250: NOT
35251: IFTRUE 35270
35253: PUSH
35254: LD_VAR 0 11
35258: PPUSH
35259: LD_VAR 0 12
35263: PPUSH
35264: CALL_OW 554
35268: NOT
35269: OR
35270: IFFALSE 35304
// begin task := Delete ( task , 1 ) ;
35272: LD_ADDR_VAR 0 14
35276: PUSH
35277: LD_VAR 0 14
35281: PPUSH
35282: LD_INT 1
35284: PPUSH
35285: CALL_OW 3
35289: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35290: LD_VAR 0 1
35294: PPUSH
35295: LD_VAR 0 14
35299: PPUSH
35300: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 314
35313: NOT
35314: IFFALSE 35149
// end ;
35316: LD_VAR 0 5
35320: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35321: LD_EXP 100
35325: NOT
35326: IFFALSE 35376
35328: GO 35330
35330: DISABLE
// begin initHack := true ;
35331: LD_ADDR_EXP 100
35335: PUSH
35336: LD_INT 1
35338: ST_TO_ADDR
// hackTanks := [ ] ;
35339: LD_ADDR_EXP 101
35343: PUSH
35344: EMPTY
35345: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35346: LD_ADDR_EXP 102
35350: PUSH
35351: EMPTY
35352: ST_TO_ADDR
// hackLimit := 3 ;
35353: LD_ADDR_EXP 103
35357: PUSH
35358: LD_INT 3
35360: ST_TO_ADDR
// hackDist := 12 ;
35361: LD_ADDR_EXP 104
35365: PUSH
35366: LD_INT 12
35368: ST_TO_ADDR
// hackCounter := [ ] ;
35369: LD_ADDR_EXP 105
35373: PUSH
35374: EMPTY
35375: ST_TO_ADDR
// end ;
35376: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35377: LD_EXP 100
35381: IFFALSE 35399
35383: PUSH
35384: LD_INT 34
35386: PUSH
35387: LD_INT 99
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 69
35398: AND
35399: IFFALSE 35652
35401: GO 35403
35403: DISABLE
35404: LD_INT 0
35406: PPUSH
35407: PPUSH
// begin enable ;
35408: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35409: LD_ADDR_VAR 0 1
35413: PUSH
35414: LD_INT 34
35416: PUSH
35417: LD_INT 99
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PPUSH
35424: CALL_OW 69
35428: PUSH
35429: FOR_IN
35430: IFFALSE 35650
// begin if not i in hackTanks then
35432: LD_VAR 0 1
35436: PUSH
35437: LD_EXP 101
35441: IN
35442: NOT
35443: IFFALSE 35526
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35445: LD_ADDR_EXP 101
35449: PUSH
35450: LD_EXP 101
35454: PPUSH
35455: LD_EXP 101
35459: PUSH
35460: LD_INT 1
35462: PLUS
35463: PPUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL_OW 1
35473: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35474: LD_ADDR_EXP 102
35478: PUSH
35479: LD_EXP 102
35483: PPUSH
35484: LD_EXP 102
35488: PUSH
35489: LD_INT 1
35491: PLUS
35492: PPUSH
35493: EMPTY
35494: PPUSH
35495: CALL_OW 1
35499: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35500: LD_ADDR_EXP 105
35504: PUSH
35505: LD_EXP 105
35509: PPUSH
35510: LD_EXP 105
35514: PUSH
35515: LD_INT 1
35517: PLUS
35518: PPUSH
35519: EMPTY
35520: PPUSH
35521: CALL_OW 1
35525: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 302
35535: NOT
35536: IFFALSE 35549
// begin HackUnlinkAll ( i ) ;
35538: LD_VAR 0 1
35542: PPUSH
35543: CALL 35655 0 1
// continue ;
35547: GO 35429
// end ; HackCheckCapturedStatus ( i ) ;
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL 36100 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35558: LD_ADDR_VAR 0 2
35562: PUSH
35563: LD_INT 81
35565: PUSH
35566: LD_VAR 0 1
35570: PPUSH
35571: CALL_OW 255
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 33
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 91
35592: PUSH
35593: LD_VAR 0 1
35597: PUSH
35598: LD_EXP 104
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 50
35610: PUSH
35611: EMPTY
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 69
35624: ST_TO_ADDR
// if not tmp then
35625: LD_VAR 0 2
35629: NOT
35630: IFFALSE 35634
// continue ;
35632: GO 35429
// HackLink ( i , tmp ) ;
35634: LD_VAR 0 1
35638: PPUSH
35639: LD_VAR 0 2
35643: PPUSH
35644: CALL 35791 0 2
// end ;
35648: GO 35429
35650: POP
35651: POP
// end ;
35652: PPOPN 2
35654: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35655: LD_INT 0
35657: PPUSH
35658: PPUSH
35659: PPUSH
// if not hack in hackTanks then
35660: LD_VAR 0 1
35664: PUSH
35665: LD_EXP 101
35669: IN
35670: NOT
35671: IFFALSE 35675
// exit ;
35673: GO 35786
// index := GetElementIndex ( hackTanks , hack ) ;
35675: LD_ADDR_VAR 0 4
35679: PUSH
35680: LD_EXP 101
35684: PPUSH
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL 43453 0 2
35694: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35695: LD_EXP 102
35699: PUSH
35700: LD_VAR 0 4
35704: ARRAY
35705: IFFALSE 35786
// begin for i in hackTanksCaptured [ index ] do
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_EXP 102
35716: PUSH
35717: LD_VAR 0 4
35721: ARRAY
35722: PUSH
35723: FOR_IN
35724: IFFALSE 35750
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35726: LD_VAR 0 3
35730: PUSH
35731: LD_INT 1
35733: ARRAY
35734: PPUSH
35735: LD_VAR 0 3
35739: PUSH
35740: LD_INT 2
35742: ARRAY
35743: PPUSH
35744: CALL_OW 235
35748: GO 35723
35750: POP
35751: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35752: LD_ADDR_EXP 102
35756: PUSH
35757: LD_EXP 102
35761: PPUSH
35762: LD_VAR 0 4
35766: PPUSH
35767: EMPTY
35768: PPUSH
35769: CALL_OW 1
35773: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35774: LD_VAR 0 1
35778: PPUSH
35779: LD_INT 0
35781: PPUSH
35782: CALL_OW 505
// end ; end ;
35786: LD_VAR 0 2
35790: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35791: LD_INT 0
35793: PPUSH
35794: PPUSH
35795: PPUSH
// if not hack in hackTanks or not vehicles then
35796: LD_VAR 0 1
35800: PUSH
35801: LD_EXP 101
35805: IN
35806: NOT
35807: IFTRUE 35816
35809: PUSH
35810: LD_VAR 0 2
35814: NOT
35815: OR
35816: IFFALSE 35820
// exit ;
35818: GO 36095
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35820: LD_ADDR_VAR 0 2
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: LD_VAR 0 2
35834: PPUSH
35835: LD_INT 1
35837: PPUSH
35838: LD_INT 1
35840: PPUSH
35841: CALL 44105 0 4
35845: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35846: LD_ADDR_VAR 0 5
35850: PUSH
35851: LD_EXP 101
35855: PPUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL 43453 0 2
35865: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35866: LD_EXP 102
35870: PUSH
35871: LD_VAR 0 5
35875: ARRAY
35876: PUSH
35877: LD_EXP 103
35881: LESS
35882: IFFALSE 36071
// begin for i := 1 to vehicles do
35884: LD_ADDR_VAR 0 4
35888: PUSH
35889: DOUBLE
35890: LD_INT 1
35892: DEC
35893: ST_TO_ADDR
35894: LD_VAR 0 2
35898: PUSH
35899: FOR_TO
35900: IFFALSE 36069
// begin if hackTanksCaptured [ index ] = hackLimit then
35902: LD_EXP 102
35906: PUSH
35907: LD_VAR 0 5
35911: ARRAY
35912: PUSH
35913: LD_EXP 103
35917: EQUAL
35918: IFFALSE 35922
// break ;
35920: GO 36069
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35922: LD_ADDR_EXP 105
35926: PUSH
35927: LD_EXP 105
35931: PPUSH
35932: LD_VAR 0 5
35936: PPUSH
35937: LD_EXP 105
35941: PUSH
35942: LD_VAR 0 5
35946: ARRAY
35947: PUSH
35948: LD_INT 1
35950: PLUS
35951: PPUSH
35952: CALL_OW 1
35956: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35957: LD_ADDR_EXP 102
35961: PUSH
35962: LD_EXP 102
35966: PPUSH
35967: LD_VAR 0 5
35971: PUSH
35972: LD_EXP 102
35976: PUSH
35977: LD_VAR 0 5
35981: ARRAY
35982: PUSH
35983: LD_INT 1
35985: PLUS
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PPUSH
35991: LD_VAR 0 2
35995: PUSH
35996: LD_VAR 0 4
36000: ARRAY
36001: PUSH
36002: LD_VAR 0 2
36006: PUSH
36007: LD_VAR 0 4
36011: ARRAY
36012: PPUSH
36013: CALL_OW 255
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PPUSH
36022: CALL 43670 0 3
36026: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36027: LD_VAR 0 2
36031: PUSH
36032: LD_VAR 0 4
36036: ARRAY
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL_OW 255
36047: PPUSH
36048: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36052: LD_VAR 0 2
36056: PUSH
36057: LD_VAR 0 4
36061: ARRAY
36062: PPUSH
36063: CALL_OW 141
// end ;
36067: GO 35899
36069: POP
36070: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36071: LD_VAR 0 1
36075: PPUSH
36076: LD_EXP 102
36080: PUSH
36081: LD_VAR 0 5
36085: ARRAY
36086: PUSH
36087: LD_INT 0
36089: PLUS
36090: PPUSH
36091: CALL_OW 505
// end ;
36095: LD_VAR 0 3
36099: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
// if not hack in hackTanks then
36106: LD_VAR 0 1
36110: PUSH
36111: LD_EXP 101
36115: IN
36116: NOT
36117: IFFALSE 36121
// exit ;
36119: GO 36365
// index := GetElementIndex ( hackTanks , hack ) ;
36121: LD_ADDR_VAR 0 4
36125: PUSH
36126: LD_EXP 101
36130: PPUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL 43453 0 2
36140: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36141: LD_ADDR_VAR 0 3
36145: PUSH
36146: DOUBLE
36147: LD_EXP 102
36151: PUSH
36152: LD_VAR 0 4
36156: ARRAY
36157: INC
36158: ST_TO_ADDR
36159: LD_INT 1
36161: PUSH
36162: FOR_DOWNTO
36163: IFFALSE 36339
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36165: LD_ADDR_VAR 0 5
36169: PUSH
36170: LD_EXP 102
36174: PUSH
36175: LD_VAR 0 4
36179: ARRAY
36180: PUSH
36181: LD_VAR 0 3
36185: ARRAY
36186: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36187: LD_VAR 0 5
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PPUSH
36196: CALL_OW 302
36200: NOT
36201: IFTRUE 36229
36203: PUSH
36204: LD_VAR 0 5
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: PPUSH
36213: CALL_OW 255
36217: PUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: CALL_OW 255
36227: NONEQUAL
36228: OR
36229: IFFALSE 36337
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36231: LD_VAR 0 5
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: CALL_OW 305
36244: IFFALSE 36272
36246: PUSH
36247: LD_VAR 0 5
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: CALL_OW 255
36260: PUSH
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 255
36270: EQUAL
36271: AND
36272: IFFALSE 36296
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36274: LD_VAR 0 5
36278: PUSH
36279: LD_INT 1
36281: ARRAY
36282: PPUSH
36283: LD_VAR 0 5
36287: PUSH
36288: LD_INT 2
36290: ARRAY
36291: PPUSH
36292: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36296: LD_ADDR_EXP 102
36300: PUSH
36301: LD_EXP 102
36305: PPUSH
36306: LD_VAR 0 4
36310: PPUSH
36311: LD_EXP 102
36315: PUSH
36316: LD_VAR 0 4
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: CALL_OW 3
36331: PPUSH
36332: CALL_OW 1
36336: ST_TO_ADDR
// end ; end ;
36337: GO 36162
36339: POP
36340: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36341: LD_VAR 0 1
36345: PPUSH
36346: LD_EXP 102
36350: PUSH
36351: LD_VAR 0 4
36355: ARRAY
36356: PUSH
36357: LD_INT 0
36359: PLUS
36360: PPUSH
36361: CALL_OW 505
// end ;
36365: LD_VAR 0 2
36369: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36370: LD_INT 0
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
// if not hack in hackTanks then
36376: LD_VAR 0 1
36380: PUSH
36381: LD_EXP 101
36385: IN
36386: NOT
36387: IFFALSE 36391
// exit ;
36389: GO 36476
// index := GetElementIndex ( hackTanks , hack ) ;
36391: LD_ADDR_VAR 0 5
36395: PUSH
36396: LD_EXP 101
36400: PPUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL 43453 0 2
36410: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: DOUBLE
36417: LD_INT 1
36419: DEC
36420: ST_TO_ADDR
36421: LD_EXP 102
36425: PUSH
36426: LD_VAR 0 5
36430: ARRAY
36431: PUSH
36432: FOR_TO
36433: IFFALSE 36474
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36435: LD_EXP 102
36439: PUSH
36440: LD_VAR 0 5
36444: ARRAY
36445: PUSH
36446: LD_VAR 0 4
36450: ARRAY
36451: PUSH
36452: LD_INT 1
36454: ARRAY
36455: PUSH
36456: LD_VAR 0 2
36460: EQUAL
36461: IFFALSE 36472
// KillUnit ( vehicle ) ;
36463: LD_VAR 0 2
36467: PPUSH
36468: CALL_OW 66
36472: GO 36432
36474: POP
36475: POP
// end ;
36476: LD_VAR 0 3
36480: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36481: LD_EXP 106
36485: NOT
36486: IFFALSE 36521
36488: GO 36490
36490: DISABLE
// begin initMiner := true ;
36491: LD_ADDR_EXP 106
36495: PUSH
36496: LD_INT 1
36498: ST_TO_ADDR
// minersList := [ ] ;
36499: LD_ADDR_EXP 107
36503: PUSH
36504: EMPTY
36505: ST_TO_ADDR
// minerMinesList := [ ] ;
36506: LD_ADDR_EXP 108
36510: PUSH
36511: EMPTY
36512: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36513: LD_ADDR_EXP 109
36517: PUSH
36518: LD_INT 5
36520: ST_TO_ADDR
// end ;
36521: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36522: LD_EXP 106
36526: IFFALSE 36544
36528: PUSH
36529: LD_INT 34
36531: PUSH
36532: LD_INT 81
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PPUSH
36539: CALL_OW 69
36543: AND
36544: IFFALSE 37007
36546: GO 36548
36548: DISABLE
36549: LD_INT 0
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
// begin enable ;
36555: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36556: LD_ADDR_VAR 0 1
36560: PUSH
36561: LD_INT 34
36563: PUSH
36564: LD_INT 81
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PPUSH
36571: CALL_OW 69
36575: PUSH
36576: FOR_IN
36577: IFFALSE 36649
// begin if not i in minersList then
36579: LD_VAR 0 1
36583: PUSH
36584: LD_EXP 107
36588: IN
36589: NOT
36590: IFFALSE 36647
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36592: LD_ADDR_EXP 107
36596: PUSH
36597: LD_EXP 107
36601: PPUSH
36602: LD_EXP 107
36606: PUSH
36607: LD_INT 1
36609: PLUS
36610: PPUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 1
36620: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36621: LD_ADDR_EXP 108
36625: PUSH
36626: LD_EXP 108
36630: PPUSH
36631: LD_EXP 108
36635: PUSH
36636: LD_INT 1
36638: PLUS
36639: PPUSH
36640: EMPTY
36641: PPUSH
36642: CALL_OW 1
36646: ST_TO_ADDR
// end end ;
36647: GO 36576
36649: POP
36650: POP
// for i := minerMinesList downto 1 do
36651: LD_ADDR_VAR 0 1
36655: PUSH
36656: DOUBLE
36657: LD_EXP 108
36661: INC
36662: ST_TO_ADDR
36663: LD_INT 1
36665: PUSH
36666: FOR_DOWNTO
36667: IFFALSE 37005
// begin if IsLive ( minersList [ i ] ) then
36669: LD_EXP 107
36673: PUSH
36674: LD_VAR 0 1
36678: ARRAY
36679: PPUSH
36680: CALL_OW 300
36684: IFFALSE 36712
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36686: LD_EXP 107
36690: PUSH
36691: LD_VAR 0 1
36695: ARRAY
36696: PPUSH
36697: LD_EXP 108
36701: PUSH
36702: LD_VAR 0 1
36706: ARRAY
36707: PPUSH
36708: CALL_OW 505
// if not minerMinesList [ i ] then
36712: LD_EXP 108
36716: PUSH
36717: LD_VAR 0 1
36721: ARRAY
36722: NOT
36723: IFFALSE 36727
// continue ;
36725: GO 36666
// for j := minerMinesList [ i ] downto 1 do
36727: LD_ADDR_VAR 0 2
36731: PUSH
36732: DOUBLE
36733: LD_EXP 108
36737: PUSH
36738: LD_VAR 0 1
36742: ARRAY
36743: INC
36744: ST_TO_ADDR
36745: LD_INT 1
36747: PUSH
36748: FOR_DOWNTO
36749: IFFALSE 37001
// begin side := GetSide ( minersList [ i ] ) ;
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_EXP 107
36760: PUSH
36761: LD_VAR 0 1
36765: ARRAY
36766: PPUSH
36767: CALL_OW 255
36771: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36772: LD_ADDR_VAR 0 4
36776: PUSH
36777: LD_EXP 108
36781: PUSH
36782: LD_VAR 0 1
36786: ARRAY
36787: PUSH
36788: LD_VAR 0 2
36792: ARRAY
36793: PUSH
36794: LD_INT 1
36796: ARRAY
36797: PPUSH
36798: LD_EXP 108
36802: PUSH
36803: LD_VAR 0 1
36807: ARRAY
36808: PUSH
36809: LD_VAR 0 2
36813: ARRAY
36814: PUSH
36815: LD_INT 2
36817: ARRAY
36818: PPUSH
36819: CALL_OW 428
36823: ST_TO_ADDR
// if not tmp then
36824: LD_VAR 0 4
36828: NOT
36829: IFFALSE 36833
// continue ;
36831: GO 36748
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36833: LD_VAR 0 4
36837: PUSH
36838: LD_INT 81
36840: PUSH
36841: LD_VAR 0 3
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PPUSH
36850: CALL_OW 69
36854: IN
36855: IFFALSE 36905
36857: PUSH
36858: LD_EXP 108
36862: PUSH
36863: LD_VAR 0 1
36867: ARRAY
36868: PUSH
36869: LD_VAR 0 2
36873: ARRAY
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: LD_EXP 108
36883: PUSH
36884: LD_VAR 0 1
36888: ARRAY
36889: PUSH
36890: LD_VAR 0 2
36894: ARRAY
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PPUSH
36900: CALL_OW 458
36904: AND
36905: IFFALSE 36999
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36907: LD_EXP 108
36911: PUSH
36912: LD_VAR 0 1
36916: ARRAY
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PPUSH
36928: LD_EXP 108
36932: PUSH
36933: LD_VAR 0 1
36937: ARRAY
36938: PUSH
36939: LD_VAR 0 2
36943: ARRAY
36944: PUSH
36945: LD_INT 2
36947: ARRAY
36948: PPUSH
36949: LD_VAR 0 3
36953: PPUSH
36954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36958: LD_ADDR_EXP 108
36962: PUSH
36963: LD_EXP 108
36967: PPUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: LD_EXP 108
36977: PUSH
36978: LD_VAR 0 1
36982: ARRAY
36983: PPUSH
36984: LD_VAR 0 2
36988: PPUSH
36989: CALL_OW 3
36993: PPUSH
36994: CALL_OW 1
36998: ST_TO_ADDR
// end ; end ;
36999: GO 36748
37001: POP
37002: POP
// end ;
37003: GO 36666
37005: POP
37006: POP
// end ;
37007: PPOPN 4
37009: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37010: LD_INT 0
37012: PPUSH
37013: PPUSH
// result := false ;
37014: LD_ADDR_VAR 0 4
37018: PUSH
37019: LD_INT 0
37021: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37022: LD_VAR 0 1
37026: PPUSH
37027: CALL_OW 264
37031: PUSH
37032: LD_INT 81
37034: EQUAL
37035: NOT
37036: IFFALSE 37040
// exit ;
37038: GO 37284
// index := GetElementIndex ( minersList , unit ) ;
37040: LD_ADDR_VAR 0 5
37044: PUSH
37045: LD_EXP 107
37049: PPUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL 43453 0 2
37059: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37060: LD_EXP 108
37064: PUSH
37065: LD_VAR 0 5
37069: ARRAY
37070: PUSH
37071: LD_EXP 109
37075: GREATEREQUAL
37076: IFFALSE 37080
// exit ;
37078: GO 37284
// ComMoveXY ( unit , x , y ) ;
37080: LD_VAR 0 1
37084: PPUSH
37085: LD_VAR 0 2
37089: PPUSH
37090: LD_VAR 0 3
37094: PPUSH
37095: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37099: LD_INT 35
37101: PPUSH
37102: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37106: LD_VAR 0 1
37110: PPUSH
37111: LD_VAR 0 2
37115: PPUSH
37116: LD_VAR 0 3
37120: PPUSH
37121: CALL 75499 0 3
37125: NOT
37126: IFFALSE 37139
37128: PUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 314
37138: AND
37139: IFFALSE 37143
// exit ;
37141: GO 37284
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_VAR 0 3
37152: PPUSH
37153: CALL_OW 428
37157: PUSH
37158: LD_VAR 0 1
37162: EQUAL
37163: IFFALSE 37177
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 314
37175: NOT
37176: AND
37177: IFFALSE 37099
// PlaySoundXY ( x , y , PlantMine ) ;
37179: LD_VAR 0 2
37183: PPUSH
37184: LD_VAR 0 3
37188: PPUSH
37189: LD_STRING PlantMine
37191: PPUSH
37192: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37196: LD_VAR 0 2
37200: PPUSH
37201: LD_VAR 0 3
37205: PPUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 255
37215: PPUSH
37216: LD_INT 0
37218: PPUSH
37219: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37223: LD_ADDR_EXP 108
37227: PUSH
37228: LD_EXP 108
37232: PPUSH
37233: LD_VAR 0 5
37237: PUSH
37238: LD_EXP 108
37242: PUSH
37243: LD_VAR 0 5
37247: ARRAY
37248: PUSH
37249: LD_INT 1
37251: PLUS
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PPUSH
37257: LD_VAR 0 2
37261: PUSH
37262: LD_VAR 0 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PPUSH
37271: CALL 43670 0 3
37275: ST_TO_ADDR
// result := true ;
37276: LD_ADDR_VAR 0 4
37280: PUSH
37281: LD_INT 1
37283: ST_TO_ADDR
// end ;
37284: LD_VAR 0 4
37288: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
// if not unit in minersList then
37294: LD_VAR 0 1
37298: PUSH
37299: LD_EXP 107
37303: IN
37304: NOT
37305: IFFALSE 37309
// exit ;
37307: GO 37703
// index := GetElementIndex ( minersList , unit ) ;
37309: LD_ADDR_VAR 0 6
37313: PUSH
37314: LD_EXP 107
37318: PPUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL 43453 0 2
37328: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37329: LD_ADDR_VAR 0 5
37333: PUSH
37334: DOUBLE
37335: LD_EXP 108
37339: PUSH
37340: LD_VAR 0 6
37344: ARRAY
37345: INC
37346: ST_TO_ADDR
37347: LD_INT 1
37349: PUSH
37350: FOR_DOWNTO
37351: IFFALSE 37514
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37353: LD_EXP 108
37357: PUSH
37358: LD_VAR 0 6
37362: ARRAY
37363: PUSH
37364: LD_VAR 0 5
37368: ARRAY
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PUSH
37374: LD_VAR 0 2
37378: EQUAL
37379: IFFALSE 37409
37381: PUSH
37382: LD_EXP 108
37386: PUSH
37387: LD_VAR 0 6
37391: ARRAY
37392: PUSH
37393: LD_VAR 0 5
37397: ARRAY
37398: PUSH
37399: LD_INT 2
37401: ARRAY
37402: PUSH
37403: LD_VAR 0 3
37407: EQUAL
37408: AND
37409: IFFALSE 37512
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37411: LD_EXP 108
37415: PUSH
37416: LD_VAR 0 6
37420: ARRAY
37421: PUSH
37422: LD_VAR 0 5
37426: ARRAY
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PPUSH
37432: LD_EXP 108
37436: PUSH
37437: LD_VAR 0 6
37441: ARRAY
37442: PUSH
37443: LD_VAR 0 5
37447: ARRAY
37448: PUSH
37449: LD_INT 2
37451: ARRAY
37452: PPUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: PPUSH
37463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37467: LD_ADDR_EXP 108
37471: PUSH
37472: LD_EXP 108
37476: PPUSH
37477: LD_VAR 0 6
37481: PPUSH
37482: LD_EXP 108
37486: PUSH
37487: LD_VAR 0 6
37491: ARRAY
37492: PPUSH
37493: LD_VAR 0 5
37497: PPUSH
37498: CALL_OW 3
37502: PPUSH
37503: CALL_OW 1
37507: ST_TO_ADDR
// exit ;
37508: POP
37509: POP
37510: GO 37703
// end ; end ;
37512: GO 37350
37514: POP
37515: POP
// for i := minerMinesList [ index ] downto 1 do
37516: LD_ADDR_VAR 0 5
37520: PUSH
37521: DOUBLE
37522: LD_EXP 108
37526: PUSH
37527: LD_VAR 0 6
37531: ARRAY
37532: INC
37533: ST_TO_ADDR
37534: LD_INT 1
37536: PUSH
37537: FOR_DOWNTO
37538: IFFALSE 37701
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37540: LD_EXP 108
37544: PUSH
37545: LD_VAR 0 6
37549: ARRAY
37550: PUSH
37551: LD_VAR 0 5
37555: ARRAY
37556: PUSH
37557: LD_INT 1
37559: ARRAY
37560: PPUSH
37561: LD_EXP 108
37565: PUSH
37566: LD_VAR 0 6
37570: ARRAY
37571: PUSH
37572: LD_VAR 0 5
37576: ARRAY
37577: PUSH
37578: LD_INT 2
37580: ARRAY
37581: PPUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: CALL_OW 298
37596: PUSH
37597: LD_INT 6
37599: LESS
37600: IFFALSE 37699
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37602: LD_EXP 108
37606: PUSH
37607: LD_VAR 0 6
37611: ARRAY
37612: PUSH
37613: LD_VAR 0 5
37617: ARRAY
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: PPUSH
37623: LD_EXP 108
37627: PUSH
37628: LD_VAR 0 6
37632: ARRAY
37633: PUSH
37634: LD_VAR 0 5
37638: ARRAY
37639: PUSH
37640: LD_INT 2
37642: ARRAY
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 255
37653: PPUSH
37654: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37658: LD_ADDR_EXP 108
37662: PUSH
37663: LD_EXP 108
37667: PPUSH
37668: LD_VAR 0 6
37672: PPUSH
37673: LD_EXP 108
37677: PUSH
37678: LD_VAR 0 6
37682: ARRAY
37683: PPUSH
37684: LD_VAR 0 5
37688: PPUSH
37689: CALL_OW 3
37693: PPUSH
37694: CALL_OW 1
37698: ST_TO_ADDR
// end ; end ;
37699: GO 37537
37701: POP
37702: POP
// end ;
37703: LD_VAR 0 4
37707: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 264
37728: PUSH
37729: LD_INT 81
37731: EQUAL
37732: NOT
37733: IFTRUE 37748
37735: PUSH
37736: LD_VAR 0 1
37740: PUSH
37741: LD_EXP 107
37745: IN
37746: NOT
37747: OR
37748: IFFALSE 37752
// exit ;
37750: GO 38078
// index := GetElementIndex ( minersList , unit ) ;
37752: LD_ADDR_VAR 0 6
37756: PUSH
37757: LD_EXP 107
37761: PPUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: CALL 43453 0 2
37771: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37772: LD_ADDR_VAR 0 8
37776: PUSH
37777: LD_EXP 109
37781: PUSH
37782: LD_EXP 108
37786: PUSH
37787: LD_VAR 0 6
37791: ARRAY
37792: MINUS
37793: ST_TO_ADDR
// if not minesFreeAmount then
37794: LD_VAR 0 8
37798: NOT
37799: IFFALSE 37803
// exit ;
37801: GO 38078
// tmp := [ ] ;
37803: LD_ADDR_VAR 0 7
37807: PUSH
37808: EMPTY
37809: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37810: LD_ADDR_VAR 0 5
37814: PUSH
37815: DOUBLE
37816: LD_INT 1
37818: DEC
37819: ST_TO_ADDR
37820: LD_VAR 0 8
37824: PUSH
37825: FOR_TO
37826: IFFALSE 38025
// begin _d := rand ( 0 , 5 ) ;
37828: LD_ADDR_VAR 0 11
37832: PUSH
37833: LD_INT 0
37835: PPUSH
37836: LD_INT 5
37838: PPUSH
37839: CALL_OW 12
37843: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37844: LD_ADDR_VAR 0 12
37848: PUSH
37849: LD_INT 2
37851: PPUSH
37852: LD_INT 6
37854: PPUSH
37855: CALL_OW 12
37859: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37860: LD_ADDR_VAR 0 9
37864: PUSH
37865: LD_VAR 0 2
37869: PPUSH
37870: LD_VAR 0 11
37874: PPUSH
37875: LD_VAR 0 12
37879: PPUSH
37880: CALL_OW 272
37884: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37885: LD_ADDR_VAR 0 10
37889: PUSH
37890: LD_VAR 0 3
37894: PPUSH
37895: LD_VAR 0 11
37899: PPUSH
37900: LD_VAR 0 12
37904: PPUSH
37905: CALL_OW 273
37909: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37910: LD_VAR 0 9
37914: PPUSH
37915: LD_VAR 0 10
37919: PPUSH
37920: CALL_OW 488
37924: IFFALSE 37948
37926: PUSH
37927: LD_VAR 0 9
37931: PUSH
37932: LD_VAR 0 10
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_VAR 0 7
37945: IN
37946: NOT
37947: AND
37948: IFFALSE 37967
37950: PUSH
37951: LD_VAR 0 9
37955: PPUSH
37956: LD_VAR 0 10
37960: PPUSH
37961: CALL_OW 458
37965: NOT
37966: AND
37967: IFFALSE 38009
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37969: LD_ADDR_VAR 0 7
37973: PUSH
37974: LD_VAR 0 7
37978: PPUSH
37979: LD_VAR 0 7
37983: PUSH
37984: LD_INT 1
37986: PLUS
37987: PPUSH
37988: LD_VAR 0 9
37992: PUSH
37993: LD_VAR 0 10
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PPUSH
38002: CALL_OW 1
38006: ST_TO_ADDR
38007: GO 38023
// i := i - 1 ;
38009: LD_ADDR_VAR 0 5
38013: PUSH
38014: LD_VAR 0 5
38018: PUSH
38019: LD_INT 1
38021: MINUS
38022: ST_TO_ADDR
// end ;
38023: GO 37825
38025: POP
38026: POP
// for i in tmp do
38027: LD_ADDR_VAR 0 5
38031: PUSH
38032: LD_VAR 0 7
38036: PUSH
38037: FOR_IN
38038: IFFALSE 38076
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38040: LD_VAR 0 1
38044: PPUSH
38045: LD_VAR 0 5
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PPUSH
38054: LD_VAR 0 5
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: PPUSH
38063: CALL 37010 0 3
38067: NOT
38068: IFFALSE 38074
// exit ;
38070: POP
38071: POP
38072: GO 38078
38074: GO 38037
38076: POP
38077: POP
// end ;
38078: LD_VAR 0 4
38082: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
38083: LD_INT 0
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
// if GetClass ( unit ) <> class_sniper then
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 257
38103: PUSH
38104: LD_INT 5
38106: NONEQUAL
38107: IFFALSE 38111
// exit ;
38109: GO 38581
// dist := 8 ;
38111: LD_ADDR_VAR 0 5
38115: PUSH
38116: LD_INT 8
38118: ST_TO_ADDR
// viewRange := 12 ;
38119: LD_ADDR_VAR 0 8
38123: PUSH
38124: LD_INT 12
38126: ST_TO_ADDR
// side := GetSide ( unit ) ;
38127: LD_ADDR_VAR 0 6
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 255
38141: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38142: LD_INT 61
38144: PPUSH
38145: LD_VAR 0 6
38149: PPUSH
38150: CALL_OW 321
38154: PUSH
38155: LD_INT 2
38157: EQUAL
38158: IFFALSE 38168
// viewRange := 16 ;
38160: LD_ADDR_VAR 0 8
38164: PUSH
38165: LD_INT 16
38167: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_VAR 0 2
38177: PPUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL_OW 297
38187: PUSH
38188: LD_VAR 0 5
38192: GREATER
38193: IFFALSE 38272
// begin ComMoveXY ( unit , x , y ) ;
38195: LD_VAR 0 1
38199: PPUSH
38200: LD_VAR 0 2
38204: PPUSH
38205: LD_VAR 0 3
38209: PPUSH
38210: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38214: LD_INT 35
38216: PPUSH
38217: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38221: LD_VAR 0 1
38225: PPUSH
38226: LD_VAR 0 2
38230: PPUSH
38231: LD_VAR 0 3
38235: PPUSH
38236: CALL 75499 0 3
38240: NOT
38241: IFFALSE 38245
// exit ;
38243: GO 38581
// until GetDistUnitXY ( unit , x , y ) < dist ;
38245: LD_VAR 0 1
38249: PPUSH
38250: LD_VAR 0 2
38254: PPUSH
38255: LD_VAR 0 3
38259: PPUSH
38260: CALL_OW 297
38264: PUSH
38265: LD_VAR 0 5
38269: LESS
38270: IFFALSE 38214
// end ; ComTurnXY ( unit , x , y ) ;
38272: LD_VAR 0 1
38276: PPUSH
38277: LD_VAR 0 2
38281: PPUSH
38282: LD_VAR 0 3
38286: PPUSH
38287: CALL_OW 118
// repeat if Multiplayer then
38291: LD_OWVAR 4
38295: IFFALSE 38306
// wait ( 35 ) else
38297: LD_INT 35
38299: PPUSH
38300: CALL_OW 67
38304: GO 38313
// wait ( 5 ) ;
38306: LD_INT 5
38308: PPUSH
38309: CALL_OW 67
// _d := GetDir ( unit ) ;
38313: LD_ADDR_VAR 0 11
38317: PUSH
38318: LD_VAR 0 1
38322: PPUSH
38323: CALL_OW 254
38327: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
38328: LD_ADDR_VAR 0 7
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL_OW 250
38342: PPUSH
38343: LD_VAR 0 1
38347: PPUSH
38348: CALL_OW 251
38352: PPUSH
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_VAR 0 3
38362: PPUSH
38363: CALL 78135 0 4
38367: ST_TO_ADDR
// until dir = _d ;
38368: LD_VAR 0 7
38372: PUSH
38373: LD_VAR 0 11
38377: EQUAL
38378: IFFALSE 38291
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
38380: LD_ADDR_VAR 0 9
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL_OW 250
38394: PPUSH
38395: LD_VAR 0 7
38399: PPUSH
38400: LD_VAR 0 5
38404: PPUSH
38405: CALL_OW 272
38409: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
38410: LD_ADDR_VAR 0 10
38414: PUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 251
38424: PPUSH
38425: LD_VAR 0 7
38429: PPUSH
38430: LD_VAR 0 5
38434: PPUSH
38435: CALL_OW 273
38439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38440: LD_VAR 0 9
38444: PPUSH
38445: LD_VAR 0 10
38449: PPUSH
38450: CALL_OW 488
38454: NOT
38455: IFFALSE 38459
// exit ;
38457: GO 38581
// ComAnimCustom ( unit , 1 ) ;
38459: LD_VAR 0 1
38463: PPUSH
38464: LD_INT 1
38466: PPUSH
38467: CALL_OW 592
// p := 0 ;
38471: LD_ADDR_VAR 0 12
38475: PUSH
38476: LD_INT 0
38478: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38479: LD_VAR 0 9
38483: PPUSH
38484: LD_VAR 0 10
38488: PPUSH
38489: LD_VAR 0 6
38493: PPUSH
38494: LD_VAR 0 8
38498: PPUSH
38499: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
38503: LD_INT 35
38505: PPUSH
38506: CALL_OW 67
// p := Inc ( p ) ;
38510: LD_ADDR_VAR 0 12
38514: PUSH
38515: LD_VAR 0 12
38519: PPUSH
38520: CALL 78091 0 1
38524: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
38525: LD_VAR 0 12
38529: PUSH
38530: LD_INT 3
38532: EQUAL
38533: IFTRUE 38547
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 302
38545: NOT
38546: OR
38547: IFTRUE 38560
38549: PUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 301
38559: OR
38560: IFFALSE 38503
// RemoveSeeing ( _x , _y , side ) ;
38562: LD_VAR 0 9
38566: PPUSH
38567: LD_VAR 0 10
38571: PPUSH
38572: LD_VAR 0 6
38576: PPUSH
38577: CALL_OW 331
// end ; end_of_file
38581: LD_VAR 0 4
38585: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38586: LD_INT 0
38588: PPUSH
38589: PPUSH
// if exist_mode then
38590: LD_VAR 0 2
38594: IFFALSE 38640
// begin unit := CreateCharacter ( prefix & ident ) ;
38596: LD_ADDR_VAR 0 5
38600: PUSH
38601: LD_VAR 0 3
38605: PUSH
38606: LD_VAR 0 1
38610: STR
38611: PPUSH
38612: CALL_OW 34
38616: ST_TO_ADDR
// if unit then
38617: LD_VAR 0 5
38621: IFFALSE 38638
// DeleteCharacters ( prefix & ident ) ;
38623: LD_VAR 0 3
38627: PUSH
38628: LD_VAR 0 1
38632: STR
38633: PPUSH
38634: CALL_OW 40
// end else
38638: GO 38655
// unit := NewCharacter ( ident ) ;
38640: LD_ADDR_VAR 0 5
38644: PUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 25
38654: ST_TO_ADDR
// result := unit ;
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: LD_VAR 0 5
38664: ST_TO_ADDR
// end ;
38665: LD_VAR 0 4
38669: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
38670: LD_INT 0
38672: PPUSH
38673: PPUSH
// if exist_mode then
38674: LD_VAR 0 2
38678: IFFALSE 38703
// unit := CreateCharacter ( prefix & ident ) else
38680: LD_ADDR_VAR 0 5
38684: PUSH
38685: LD_VAR 0 3
38689: PUSH
38690: LD_VAR 0 1
38694: STR
38695: PPUSH
38696: CALL_OW 34
38700: ST_TO_ADDR
38701: GO 38718
// unit := NewCharacter ( ident ) ;
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 25
38717: ST_TO_ADDR
// result := unit ;
38718: LD_ADDR_VAR 0 4
38722: PUSH
38723: LD_VAR 0 5
38727: ST_TO_ADDR
// end ;
38728: LD_VAR 0 4
38732: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38733: LD_INT 0
38735: PPUSH
38736: PPUSH
// if not side or not nation then
38737: LD_VAR 0 1
38741: NOT
38742: IFTRUE 38751
38744: PUSH
38745: LD_VAR 0 2
38749: NOT
38750: OR
38751: IFFALSE 38755
// exit ;
38753: GO 39525
// case nation of nation_american :
38755: LD_VAR 0 2
38759: PUSH
38760: LD_INT 1
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38768
38766: GO 38982
38768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38769: LD_ADDR_VAR 0 4
38773: PUSH
38774: LD_INT 35
38776: PUSH
38777: LD_INT 45
38779: PUSH
38780: LD_INT 46
38782: PUSH
38783: LD_INT 47
38785: PUSH
38786: LD_INT 82
38788: PUSH
38789: LD_INT 83
38791: PUSH
38792: LD_INT 84
38794: PUSH
38795: LD_INT 85
38797: PUSH
38798: LD_INT 86
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 6
38809: PUSH
38810: LD_INT 15
38812: PUSH
38813: LD_INT 16
38815: PUSH
38816: LD_INT 7
38818: PUSH
38819: LD_INT 12
38821: PUSH
38822: LD_INT 13
38824: PUSH
38825: LD_INT 10
38827: PUSH
38828: LD_INT 14
38830: PUSH
38831: LD_INT 20
38833: PUSH
38834: LD_INT 21
38836: PUSH
38837: LD_INT 22
38839: PUSH
38840: LD_INT 25
38842: PUSH
38843: LD_INT 32
38845: PUSH
38846: LD_INT 27
38848: PUSH
38849: LD_INT 36
38851: PUSH
38852: LD_INT 69
38854: PUSH
38855: LD_INT 39
38857: PUSH
38858: LD_INT 34
38860: PUSH
38861: LD_INT 40
38863: PUSH
38864: LD_INT 48
38866: PUSH
38867: LD_INT 49
38869: PUSH
38870: LD_INT 50
38872: PUSH
38873: LD_INT 51
38875: PUSH
38876: LD_INT 52
38878: PUSH
38879: LD_INT 53
38881: PUSH
38882: LD_INT 54
38884: PUSH
38885: LD_INT 55
38887: PUSH
38888: LD_INT 56
38890: PUSH
38891: LD_INT 57
38893: PUSH
38894: LD_INT 58
38896: PUSH
38897: LD_INT 59
38899: PUSH
38900: LD_INT 60
38902: PUSH
38903: LD_INT 61
38905: PUSH
38906: LD_INT 62
38908: PUSH
38909: LD_INT 80
38911: PUSH
38912: LD_INT 82
38914: PUSH
38915: LD_INT 83
38917: PUSH
38918: LD_INT 84
38920: PUSH
38921: LD_INT 85
38923: PUSH
38924: LD_INT 86
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
38980: GO 39447
38982: LD_INT 2
38984: DOUBLE
38985: EQUAL
38986: IFTRUE 38990
38988: GO 39216
38990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38991: LD_ADDR_VAR 0 4
38995: PUSH
38996: LD_INT 35
38998: PUSH
38999: LD_INT 45
39001: PUSH
39002: LD_INT 46
39004: PUSH
39005: LD_INT 47
39007: PUSH
39008: LD_INT 82
39010: PUSH
39011: LD_INT 83
39013: PUSH
39014: LD_INT 84
39016: PUSH
39017: LD_INT 85
39019: PUSH
39020: LD_INT 87
39022: PUSH
39023: LD_INT 70
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 11
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: LD_INT 4
39037: PUSH
39038: LD_INT 5
39040: PUSH
39041: LD_INT 6
39043: PUSH
39044: LD_INT 15
39046: PUSH
39047: LD_INT 18
39049: PUSH
39050: LD_INT 7
39052: PUSH
39053: LD_INT 17
39055: PUSH
39056: LD_INT 8
39058: PUSH
39059: LD_INT 20
39061: PUSH
39062: LD_INT 21
39064: PUSH
39065: LD_INT 22
39067: PUSH
39068: LD_INT 72
39070: PUSH
39071: LD_INT 26
39073: PUSH
39074: LD_INT 69
39076: PUSH
39077: LD_INT 39
39079: PUSH
39080: LD_INT 40
39082: PUSH
39083: LD_INT 41
39085: PUSH
39086: LD_INT 42
39088: PUSH
39089: LD_INT 43
39091: PUSH
39092: LD_INT 48
39094: PUSH
39095: LD_INT 49
39097: PUSH
39098: LD_INT 50
39100: PUSH
39101: LD_INT 51
39103: PUSH
39104: LD_INT 52
39106: PUSH
39107: LD_INT 53
39109: PUSH
39110: LD_INT 54
39112: PUSH
39113: LD_INT 55
39115: PUSH
39116: LD_INT 56
39118: PUSH
39119: LD_INT 60
39121: PUSH
39122: LD_INT 61
39124: PUSH
39125: LD_INT 62
39127: PUSH
39128: LD_INT 66
39130: PUSH
39131: LD_INT 67
39133: PUSH
39134: LD_INT 68
39136: PUSH
39137: LD_INT 81
39139: PUSH
39140: LD_INT 82
39142: PUSH
39143: LD_INT 83
39145: PUSH
39146: LD_INT 84
39148: PUSH
39149: LD_INT 85
39151: PUSH
39152: LD_INT 87
39154: PUSH
39155: LD_INT 88
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
39214: GO 39447
39216: LD_INT 3
39218: DOUBLE
39219: EQUAL
39220: IFTRUE 39224
39222: GO 39446
39224: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39225: LD_ADDR_VAR 0 4
39229: PUSH
39230: LD_INT 46
39232: PUSH
39233: LD_INT 47
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 82
39244: PUSH
39245: LD_INT 83
39247: PUSH
39248: LD_INT 84
39250: PUSH
39251: LD_INT 85
39253: PUSH
39254: LD_INT 86
39256: PUSH
39257: LD_INT 11
39259: PUSH
39260: LD_INT 9
39262: PUSH
39263: LD_INT 20
39265: PUSH
39266: LD_INT 19
39268: PUSH
39269: LD_INT 21
39271: PUSH
39272: LD_INT 24
39274: PUSH
39275: LD_INT 22
39277: PUSH
39278: LD_INT 25
39280: PUSH
39281: LD_INT 28
39283: PUSH
39284: LD_INT 29
39286: PUSH
39287: LD_INT 30
39289: PUSH
39290: LD_INT 31
39292: PUSH
39293: LD_INT 37
39295: PUSH
39296: LD_INT 38
39298: PUSH
39299: LD_INT 32
39301: PUSH
39302: LD_INT 27
39304: PUSH
39305: LD_INT 33
39307: PUSH
39308: LD_INT 69
39310: PUSH
39311: LD_INT 39
39313: PUSH
39314: LD_INT 34
39316: PUSH
39317: LD_INT 40
39319: PUSH
39320: LD_INT 71
39322: PUSH
39323: LD_INT 23
39325: PUSH
39326: LD_INT 44
39328: PUSH
39329: LD_INT 48
39331: PUSH
39332: LD_INT 49
39334: PUSH
39335: LD_INT 50
39337: PUSH
39338: LD_INT 51
39340: PUSH
39341: LD_INT 52
39343: PUSH
39344: LD_INT 53
39346: PUSH
39347: LD_INT 54
39349: PUSH
39350: LD_INT 55
39352: PUSH
39353: LD_INT 56
39355: PUSH
39356: LD_INT 57
39358: PUSH
39359: LD_INT 58
39361: PUSH
39362: LD_INT 59
39364: PUSH
39365: LD_INT 63
39367: PUSH
39368: LD_INT 64
39370: PUSH
39371: LD_INT 65
39373: PUSH
39374: LD_INT 82
39376: PUSH
39377: LD_INT 83
39379: PUSH
39380: LD_INT 84
39382: PUSH
39383: LD_INT 85
39385: PUSH
39386: LD_INT 86
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: ST_TO_ADDR
39444: GO 39447
39446: POP
// if state > - 1 and state < 3 then
39447: LD_VAR 0 3
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: GREATER
39456: IFFALSE 39468
39458: PUSH
39459: LD_VAR 0 3
39463: PUSH
39464: LD_INT 3
39466: LESS
39467: AND
39468: IFFALSE 39525
// for i in result do
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: LD_VAR 0 4
39479: PUSH
39480: FOR_IN
39481: IFFALSE 39523
// if GetTech ( i , side ) <> state then
39483: LD_VAR 0 5
39487: PPUSH
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 321
39497: PUSH
39498: LD_VAR 0 3
39502: NONEQUAL
39503: IFFALSE 39521
// result := result diff i ;
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: LD_VAR 0 4
39514: PUSH
39515: LD_VAR 0 5
39519: DIFF
39520: ST_TO_ADDR
39521: GO 39480
39523: POP
39524: POP
// end ;
39525: LD_VAR 0 4
39529: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39530: LD_INT 0
39532: PPUSH
39533: PPUSH
39534: PPUSH
// result := true ;
39535: LD_ADDR_VAR 0 3
39539: PUSH
39540: LD_INT 1
39542: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39543: LD_ADDR_VAR 0 5
39547: PUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: CALL_OW 480
39557: ST_TO_ADDR
// if not tmp then
39558: LD_VAR 0 5
39562: NOT
39563: IFFALSE 39567
// exit ;
39565: GO 39616
// for i in tmp do
39567: LD_ADDR_VAR 0 4
39571: PUSH
39572: LD_VAR 0 5
39576: PUSH
39577: FOR_IN
39578: IFFALSE 39614
// if GetTech ( i , side ) <> state_researched then
39580: LD_VAR 0 4
39584: PPUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 321
39594: PUSH
39595: LD_INT 2
39597: NONEQUAL
39598: IFFALSE 39612
// begin result := false ;
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_INT 0
39607: ST_TO_ADDR
// exit ;
39608: POP
39609: POP
39610: GO 39616
// end ;
39612: GO 39577
39614: POP
39615: POP
// end ;
39616: LD_VAR 0 3
39620: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39621: LD_INT 0
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39636: LD_VAR 0 1
39640: NOT
39641: IFTRUE 39658
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 257
39653: PUSH
39654: LD_INT 9
39656: NONEQUAL
39657: OR
39658: IFFALSE 39662
// exit ;
39660: GO 40241
// side := GetSide ( unit ) ;
39662: LD_ADDR_VAR 0 9
39666: PUSH
39667: LD_VAR 0 1
39671: PPUSH
39672: CALL_OW 255
39676: ST_TO_ADDR
// tech_space := tech_spacanom ;
39677: LD_ADDR_VAR 0 12
39681: PUSH
39682: LD_INT 29
39684: ST_TO_ADDR
// tech_time := tech_taurad ;
39685: LD_ADDR_VAR 0 13
39689: PUSH
39690: LD_INT 28
39692: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39693: LD_ADDR_VAR 0 11
39697: PUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 310
39707: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39708: LD_VAR 0 11
39712: PPUSH
39713: CALL_OW 247
39717: PUSH
39718: LD_INT 2
39720: EQUAL
39721: IFFALSE 39725
// exit ;
39723: GO 40241
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39725: LD_ADDR_VAR 0 8
39729: PUSH
39730: LD_INT 81
39732: PUSH
39733: LD_VAR 0 9
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 21
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PPUSH
39763: CALL_OW 69
39767: ST_TO_ADDR
// if not tmp then
39768: LD_VAR 0 8
39772: NOT
39773: IFFALSE 39777
// exit ;
39775: GO 40241
// if in_unit then
39777: LD_VAR 0 11
39781: IFFALSE 39805
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39783: LD_ADDR_VAR 0 10
39787: PUSH
39788: LD_VAR 0 8
39792: PPUSH
39793: LD_VAR 0 11
39797: PPUSH
39798: CALL_OW 74
39802: ST_TO_ADDR
39803: GO 39825
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39805: LD_ADDR_VAR 0 10
39809: PUSH
39810: LD_VAR 0 8
39814: PPUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: CALL_OW 74
39824: ST_TO_ADDR
// if not enemy then
39825: LD_VAR 0 10
39829: NOT
39830: IFFALSE 39834
// exit ;
39832: GO 40241
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39834: LD_VAR 0 11
39838: IFFALSE 39860
39840: PUSH
39841: LD_VAR 0 11
39845: PPUSH
39846: LD_VAR 0 10
39850: PPUSH
39851: CALL_OW 296
39855: PUSH
39856: LD_INT 13
39858: GREATER
39859: AND
39860: IFTRUE 39882
39862: PUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: LD_VAR 0 10
39872: PPUSH
39873: CALL_OW 296
39877: PUSH
39878: LD_INT 12
39880: GREATER
39881: OR
39882: IFFALSE 39886
// exit ;
39884: GO 40241
// missile := [ 1 ] ;
39886: LD_ADDR_VAR 0 14
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39897: LD_VAR 0 9
39901: PPUSH
39902: LD_VAR 0 12
39906: PPUSH
39907: CALL_OW 325
39911: IFFALSE 39940
// missile := Replace ( missile , missile + 1 , 2 ) ;
39913: LD_ADDR_VAR 0 14
39917: PUSH
39918: LD_VAR 0 14
39922: PPUSH
39923: LD_VAR 0 14
39927: PUSH
39928: LD_INT 1
39930: PLUS
39931: PPUSH
39932: LD_INT 2
39934: PPUSH
39935: CALL_OW 1
39939: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39940: LD_VAR 0 9
39944: PPUSH
39945: LD_VAR 0 13
39949: PPUSH
39950: CALL_OW 325
39954: IFFALSE 39978
39956: PUSH
39957: LD_VAR 0 10
39961: PPUSH
39962: CALL_OW 255
39966: PPUSH
39967: LD_VAR 0 13
39971: PPUSH
39972: CALL_OW 325
39976: NOT
39977: AND
39978: IFFALSE 40007
// missile := Replace ( missile , missile + 1 , 3 ) ;
39980: LD_ADDR_VAR 0 14
39984: PUSH
39985: LD_VAR 0 14
39989: PPUSH
39990: LD_VAR 0 14
39994: PUSH
39995: LD_INT 1
39997: PLUS
39998: PPUSH
39999: LD_INT 3
40001: PPUSH
40002: CALL_OW 1
40006: ST_TO_ADDR
// if missile < 2 then
40007: LD_VAR 0 14
40011: PUSH
40012: LD_INT 2
40014: LESS
40015: IFFALSE 40019
// exit ;
40017: GO 40241
// x := GetX ( enemy ) ;
40019: LD_ADDR_VAR 0 4
40023: PUSH
40024: LD_VAR 0 10
40028: PPUSH
40029: CALL_OW 250
40033: ST_TO_ADDR
// y := GetY ( enemy ) ;
40034: LD_ADDR_VAR 0 5
40038: PUSH
40039: LD_VAR 0 10
40043: PPUSH
40044: CALL_OW 251
40048: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40049: LD_ADDR_VAR 0 6
40053: PUSH
40054: LD_VAR 0 4
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PPUSH
40063: LD_INT 1
40065: PPUSH
40066: CALL_OW 12
40070: PLUS
40071: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40072: LD_ADDR_VAR 0 7
40076: PUSH
40077: LD_VAR 0 5
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PPUSH
40086: LD_INT 1
40088: PPUSH
40089: CALL_OW 12
40093: PLUS
40094: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40095: LD_VAR 0 6
40099: PPUSH
40100: LD_VAR 0 7
40104: PPUSH
40105: CALL_OW 488
40109: NOT
40110: IFFALSE 40132
// begin _x := x ;
40112: LD_ADDR_VAR 0 6
40116: PUSH
40117: LD_VAR 0 4
40121: ST_TO_ADDR
// _y := y ;
40122: LD_ADDR_VAR 0 7
40126: PUSH
40127: LD_VAR 0 5
40131: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40132: LD_ADDR_VAR 0 3
40136: PUSH
40137: LD_INT 1
40139: PPUSH
40140: LD_VAR 0 14
40144: PPUSH
40145: CALL_OW 12
40149: ST_TO_ADDR
// case i of 1 :
40150: LD_VAR 0 3
40154: PUSH
40155: LD_INT 1
40157: DOUBLE
40158: EQUAL
40159: IFTRUE 40163
40161: GO 40180
40163: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40164: LD_VAR 0 1
40168: PPUSH
40169: LD_VAR 0 10
40173: PPUSH
40174: CALL_OW 115
40178: GO 40241
40180: LD_INT 2
40182: DOUBLE
40183: EQUAL
40184: IFTRUE 40188
40186: GO 40210
40188: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40189: LD_VAR 0 1
40193: PPUSH
40194: LD_VAR 0 6
40198: PPUSH
40199: LD_VAR 0 7
40203: PPUSH
40204: CALL_OW 153
40208: GO 40241
40210: LD_INT 3
40212: DOUBLE
40213: EQUAL
40214: IFTRUE 40218
40216: GO 40240
40218: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40219: LD_VAR 0 1
40223: PPUSH
40224: LD_VAR 0 6
40228: PPUSH
40229: LD_VAR 0 7
40233: PPUSH
40234: CALL_OW 154
40238: GO 40241
40240: POP
// end ;
40241: LD_VAR 0 2
40245: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40246: LD_INT 0
40248: PPUSH
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
// if not unit or not building then
40254: LD_VAR 0 1
40258: NOT
40259: IFTRUE 40268
40261: PUSH
40262: LD_VAR 0 2
40266: NOT
40267: OR
40268: IFFALSE 40272
// exit ;
40270: GO 40430
// x := GetX ( building ) ;
40272: LD_ADDR_VAR 0 5
40276: PUSH
40277: LD_VAR 0 2
40281: PPUSH
40282: CALL_OW 250
40286: ST_TO_ADDR
// y := GetY ( building ) ;
40287: LD_ADDR_VAR 0 6
40291: PUSH
40292: LD_VAR 0 2
40296: PPUSH
40297: CALL_OW 251
40301: ST_TO_ADDR
// for i := 0 to 5 do
40302: LD_ADDR_VAR 0 4
40306: PUSH
40307: DOUBLE
40308: LD_INT 0
40310: DEC
40311: ST_TO_ADDR
40312: LD_INT 5
40314: PUSH
40315: FOR_TO
40316: IFFALSE 40428
// begin _x := ShiftX ( x , i , 3 ) ;
40318: LD_ADDR_VAR 0 7
40322: PUSH
40323: LD_VAR 0 5
40327: PPUSH
40328: LD_VAR 0 4
40332: PPUSH
40333: LD_INT 3
40335: PPUSH
40336: CALL_OW 272
40340: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40341: LD_ADDR_VAR 0 8
40345: PUSH
40346: LD_VAR 0 6
40350: PPUSH
40351: LD_VAR 0 4
40355: PPUSH
40356: LD_INT 3
40358: PPUSH
40359: CALL_OW 273
40363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40364: LD_VAR 0 7
40368: PPUSH
40369: LD_VAR 0 8
40373: PPUSH
40374: CALL_OW 488
40378: NOT
40379: IFFALSE 40383
// continue ;
40381: GO 40315
// if HexInfo ( _x , _y ) = 0 then
40383: LD_VAR 0 7
40387: PPUSH
40388: LD_VAR 0 8
40392: PPUSH
40393: CALL_OW 428
40397: PUSH
40398: LD_INT 0
40400: EQUAL
40401: IFFALSE 40426
// begin ComMoveXY ( unit , _x , _y ) ;
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 7
40412: PPUSH
40413: LD_VAR 0 8
40417: PPUSH
40418: CALL_OW 111
// exit ;
40422: POP
40423: POP
40424: GO 40430
// end ; end ;
40426: GO 40315
40428: POP
40429: POP
// end ;
40430: LD_VAR 0 3
40434: RET
// export function ScanBase ( side , base_area ) ; begin
40435: LD_INT 0
40437: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40438: LD_ADDR_VAR 0 3
40442: PUSH
40443: LD_VAR 0 2
40447: PPUSH
40448: LD_INT 81
40450: PUSH
40451: LD_VAR 0 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PPUSH
40460: CALL_OW 70
40464: ST_TO_ADDR
// end ;
40465: LD_VAR 0 3
40469: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40470: LD_INT 0
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
// result := false ;
40476: LD_ADDR_VAR 0 2
40480: PUSH
40481: LD_INT 0
40483: ST_TO_ADDR
// side := GetSide ( unit ) ;
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_VAR 0 1
40493: PPUSH
40494: CALL_OW 255
40498: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40499: LD_ADDR_VAR 0 4
40503: PUSH
40504: LD_VAR 0 1
40508: PPUSH
40509: CALL_OW 248
40513: ST_TO_ADDR
// case nat of 1 :
40514: LD_VAR 0 4
40518: PUSH
40519: LD_INT 1
40521: DOUBLE
40522: EQUAL
40523: IFTRUE 40527
40525: GO 40538
40527: POP
// tech := tech_lassight ; 2 :
40528: LD_ADDR_VAR 0 5
40532: PUSH
40533: LD_INT 12
40535: ST_TO_ADDR
40536: GO 40577
40538: LD_INT 2
40540: DOUBLE
40541: EQUAL
40542: IFTRUE 40546
40544: GO 40557
40546: POP
// tech := tech_mortar ; 3 :
40547: LD_ADDR_VAR 0 5
40551: PUSH
40552: LD_INT 41
40554: ST_TO_ADDR
40555: GO 40577
40557: LD_INT 3
40559: DOUBLE
40560: EQUAL
40561: IFTRUE 40565
40563: GO 40576
40565: POP
// tech := tech_bazooka ; end ;
40566: LD_ADDR_VAR 0 5
40570: PUSH
40571: LD_INT 44
40573: ST_TO_ADDR
40574: GO 40577
40576: POP
// if Researched ( side , tech ) then
40577: LD_VAR 0 3
40581: PPUSH
40582: LD_VAR 0 5
40586: PPUSH
40587: CALL_OW 325
40591: IFFALSE 40618
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40593: LD_ADDR_VAR 0 2
40597: PUSH
40598: LD_INT 5
40600: PUSH
40601: LD_INT 8
40603: PUSH
40604: LD_INT 9
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: PUSH
40612: LD_VAR 0 4
40616: ARRAY
40617: ST_TO_ADDR
// end ;
40618: LD_VAR 0 2
40622: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40623: LD_INT 0
40625: PPUSH
40626: PPUSH
40627: PPUSH
// if not mines then
40628: LD_VAR 0 2
40632: NOT
40633: IFFALSE 40637
// exit ;
40635: GO 40781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40637: LD_ADDR_VAR 0 5
40641: PUSH
40642: LD_INT 81
40644: PUSH
40645: LD_VAR 0 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: LD_INT 21
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PPUSH
40675: CALL_OW 69
40679: ST_TO_ADDR
// for i in mines do
40680: LD_ADDR_VAR 0 4
40684: PUSH
40685: LD_VAR 0 2
40689: PUSH
40690: FOR_IN
40691: IFFALSE 40779
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40693: LD_VAR 0 4
40697: PUSH
40698: LD_INT 1
40700: ARRAY
40701: PPUSH
40702: LD_VAR 0 4
40706: PUSH
40707: LD_INT 2
40709: ARRAY
40710: PPUSH
40711: CALL_OW 458
40715: NOT
40716: IFFALSE 40720
// continue ;
40718: GO 40690
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40720: LD_VAR 0 4
40724: PUSH
40725: LD_INT 1
40727: ARRAY
40728: PPUSH
40729: LD_VAR 0 4
40733: PUSH
40734: LD_INT 2
40736: ARRAY
40737: PPUSH
40738: CALL_OW 428
40742: PUSH
40743: LD_VAR 0 5
40747: IN
40748: IFFALSE 40777
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40750: LD_VAR 0 4
40754: PUSH
40755: LD_INT 1
40757: ARRAY
40758: PPUSH
40759: LD_VAR 0 4
40763: PUSH
40764: LD_INT 2
40766: ARRAY
40767: PPUSH
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 456
// end ;
40777: GO 40690
40779: POP
40780: POP
// end ;
40781: LD_VAR 0 3
40785: RET
// export function Count ( array ) ; begin
40786: LD_INT 0
40788: PPUSH
// result := array + 0 ;
40789: LD_ADDR_VAR 0 2
40793: PUSH
40794: LD_VAR 0 1
40798: PUSH
40799: LD_INT 0
40801: PLUS
40802: ST_TO_ADDR
// end ;
40803: LD_VAR 0 2
40807: RET
// export function IsEmpty ( building ) ; begin
40808: LD_INT 0
40810: PPUSH
// if not building then
40811: LD_VAR 0 1
40815: NOT
40816: IFFALSE 40820
// exit ;
40818: GO 40863
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40820: LD_ADDR_VAR 0 2
40824: PUSH
40825: LD_VAR 0 1
40829: PUSH
40830: LD_INT 22
40832: PUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL_OW 255
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 58
40849: PUSH
40850: EMPTY
40851: LIST
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PPUSH
40857: CALL_OW 69
40861: IN
40862: ST_TO_ADDR
// end ;
40863: LD_VAR 0 2
40867: RET
// export function IsNotFull ( building ) ; var places ; begin
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
// if not building then
40872: LD_VAR 0 1
40876: NOT
40877: IFFALSE 40881
// exit ;
40879: GO 40909
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40881: LD_ADDR_VAR 0 2
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: LD_INT 3
40893: PUSH
40894: LD_INT 62
40896: PUSH
40897: EMPTY
40898: LIST
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PPUSH
40904: CALL_OW 72
40908: ST_TO_ADDR
// end ;
40909: LD_VAR 0 2
40913: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40914: LD_INT 0
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
// tmp := [ ] ;
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: EMPTY
40926: ST_TO_ADDR
// list := [ ] ;
40927: LD_ADDR_VAR 0 5
40931: PUSH
40932: EMPTY
40933: ST_TO_ADDR
// for i = 16 to 25 do
40934: LD_ADDR_VAR 0 4
40938: PUSH
40939: DOUBLE
40940: LD_INT 16
40942: DEC
40943: ST_TO_ADDR
40944: LD_INT 25
40946: PUSH
40947: FOR_TO
40948: IFFALSE 41021
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40950: LD_ADDR_VAR 0 3
40954: PUSH
40955: LD_VAR 0 3
40959: PUSH
40960: LD_INT 22
40962: PUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 255
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 91
40979: PUSH
40980: LD_VAR 0 1
40984: PUSH
40985: LD_INT 6
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 30
40995: PUSH
40996: LD_VAR 0 4
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: PUSH
41010: EMPTY
41011: LIST
41012: PPUSH
41013: CALL_OW 69
41017: ADD
41018: ST_TO_ADDR
41019: GO 40947
41021: POP
41022: POP
// for i = 1 to tmp do
41023: LD_ADDR_VAR 0 4
41027: PUSH
41028: DOUBLE
41029: LD_INT 1
41031: DEC
41032: ST_TO_ADDR
41033: LD_VAR 0 3
41037: PUSH
41038: FOR_TO
41039: IFFALSE 41127
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41041: LD_ADDR_VAR 0 5
41045: PUSH
41046: LD_VAR 0 5
41050: PUSH
41051: LD_VAR 0 3
41055: PUSH
41056: LD_VAR 0 4
41060: ARRAY
41061: PPUSH
41062: CALL_OW 266
41066: PUSH
41067: LD_VAR 0 3
41071: PUSH
41072: LD_VAR 0 4
41076: ARRAY
41077: PPUSH
41078: CALL_OW 250
41082: PUSH
41083: LD_VAR 0 3
41087: PUSH
41088: LD_VAR 0 4
41092: ARRAY
41093: PPUSH
41094: CALL_OW 251
41098: PUSH
41099: LD_VAR 0 3
41103: PUSH
41104: LD_VAR 0 4
41108: ARRAY
41109: PPUSH
41110: CALL_OW 254
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: PUSH
41121: EMPTY
41122: LIST
41123: ADD
41124: ST_TO_ADDR
41125: GO 41038
41127: POP
41128: POP
// result := list ;
41129: LD_ADDR_VAR 0 2
41133: PUSH
41134: LD_VAR 0 5
41138: ST_TO_ADDR
// end ;
41139: LD_VAR 0 2
41143: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41144: LD_INT 0
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
// if not factory then
41153: LD_VAR 0 1
41157: NOT
41158: IFFALSE 41162
// exit ;
41160: GO 41765
// if control = control_apeman then
41162: LD_VAR 0 4
41166: PUSH
41167: LD_INT 5
41169: EQUAL
41170: IFFALSE 41279
// begin tmp := UnitsInside ( factory ) ;
41172: LD_ADDR_VAR 0 8
41176: PUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 313
41186: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41187: LD_VAR 0 8
41191: PPUSH
41192: LD_INT 25
41194: PUSH
41195: LD_INT 12
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PPUSH
41202: CALL_OW 72
41206: NOT
41207: IFFALSE 41217
// control := control_manual ;
41209: LD_ADDR_VAR 0 4
41213: PUSH
41214: LD_INT 1
41216: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41217: LD_ADDR_VAR 0 8
41221: PUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: CALL 40914 0 1
41231: ST_TO_ADDR
// if tmp then
41232: LD_VAR 0 8
41236: IFFALSE 41279
// begin for i in tmp do
41238: LD_ADDR_VAR 0 7
41242: PUSH
41243: LD_VAR 0 8
41247: PUSH
41248: FOR_IN
41249: IFFALSE 41277
// if i [ 1 ] = b_ext_radio then
41251: LD_VAR 0 7
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: PUSH
41260: LD_INT 22
41262: EQUAL
41263: IFFALSE 41275
// begin control := control_remote ;
41265: LD_ADDR_VAR 0 4
41269: PUSH
41270: LD_INT 2
41272: ST_TO_ADDR
// break ;
41273: GO 41277
// end ;
41275: GO 41248
41277: POP
41278: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41279: LD_VAR 0 1
41283: PPUSH
41284: LD_VAR 0 2
41288: PPUSH
41289: LD_VAR 0 3
41293: PPUSH
41294: LD_VAR 0 4
41298: PPUSH
41299: LD_VAR 0 5
41303: PPUSH
41304: CALL_OW 448
41308: IFFALSE 41343
// begin result := [ chassis , engine , control , weapon ] ;
41310: LD_ADDR_VAR 0 6
41314: PUSH
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 3
41324: PUSH
41325: LD_VAR 0 4
41329: PUSH
41330: LD_VAR 0 5
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// exit ;
41341: GO 41765
// end ; _chassis := AvailableChassisList ( factory ) ;
41343: LD_ADDR_VAR 0 9
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: CALL_OW 475
41357: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41358: LD_ADDR_VAR 0 11
41362: PUSH
41363: LD_VAR 0 1
41367: PPUSH
41368: CALL_OW 476
41372: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41373: LD_ADDR_VAR 0 12
41377: PUSH
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 477
41387: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41388: LD_ADDR_VAR 0 10
41392: PUSH
41393: LD_VAR 0 1
41397: PPUSH
41398: CALL_OW 478
41402: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41403: LD_VAR 0 9
41407: NOT
41408: IFTRUE 41417
41410: PUSH
41411: LD_VAR 0 11
41415: NOT
41416: OR
41417: IFTRUE 41426
41419: PUSH
41420: LD_VAR 0 12
41424: NOT
41425: OR
41426: IFTRUE 41435
41428: PUSH
41429: LD_VAR 0 10
41433: NOT
41434: OR
41435: IFFALSE 41470
// begin result := [ chassis , engine , control , weapon ] ;
41437: LD_ADDR_VAR 0 6
41441: PUSH
41442: LD_VAR 0 2
41446: PUSH
41447: LD_VAR 0 3
41451: PUSH
41452: LD_VAR 0 4
41456: PUSH
41457: LD_VAR 0 5
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// exit ;
41468: GO 41765
// end ; if not chassis in _chassis then
41470: LD_VAR 0 2
41474: PUSH
41475: LD_VAR 0 9
41479: IN
41480: NOT
41481: IFFALSE 41507
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41483: LD_ADDR_VAR 0 2
41487: PUSH
41488: LD_VAR 0 9
41492: PUSH
41493: LD_INT 1
41495: PPUSH
41496: LD_VAR 0 9
41500: PPUSH
41501: CALL_OW 12
41505: ARRAY
41506: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41507: LD_VAR 0 2
41511: PPUSH
41512: LD_VAR 0 3
41516: PPUSH
41517: CALL 41770 0 2
41521: NOT
41522: IFFALSE 41583
// repeat engine := _engine [ 1 ] ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_VAR 0 11
41533: PUSH
41534: LD_INT 1
41536: ARRAY
41537: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41538: LD_ADDR_VAR 0 11
41542: PUSH
41543: LD_VAR 0 11
41547: PPUSH
41548: LD_INT 1
41550: PPUSH
41551: CALL_OW 3
41555: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41556: LD_VAR 0 2
41560: PPUSH
41561: LD_VAR 0 3
41565: PPUSH
41566: CALL 41770 0 2
41570: IFTRUE 41581
41572: PUSH
41573: LD_VAR 0 11
41577: PUSH
41578: EMPTY
41579: EQUAL
41580: OR
41581: IFFALSE 41524
// if not control in _control then
41583: LD_VAR 0 4
41587: PUSH
41588: LD_VAR 0 12
41592: IN
41593: NOT
41594: IFFALSE 41620
// control := _control [ rand ( 1 , _control ) ] ;
41596: LD_ADDR_VAR 0 4
41600: PUSH
41601: LD_VAR 0 12
41605: PUSH
41606: LD_INT 1
41608: PPUSH
41609: LD_VAR 0 12
41613: PPUSH
41614: CALL_OW 12
41618: ARRAY
41619: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41620: LD_VAR 0 2
41624: PPUSH
41625: LD_VAR 0 5
41629: PPUSH
41630: CALL 41992 0 2
41634: NOT
41635: IFFALSE 41696
// repeat weapon := _weapon [ 1 ] ;
41637: LD_ADDR_VAR 0 5
41641: PUSH
41642: LD_VAR 0 10
41646: PUSH
41647: LD_INT 1
41649: ARRAY
41650: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41651: LD_ADDR_VAR 0 10
41655: PUSH
41656: LD_VAR 0 10
41660: PPUSH
41661: LD_INT 1
41663: PPUSH
41664: CALL_OW 3
41668: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41669: LD_VAR 0 2
41673: PPUSH
41674: LD_VAR 0 5
41678: PPUSH
41679: CALL 41992 0 2
41683: IFTRUE 41694
41685: PUSH
41686: LD_VAR 0 10
41690: PUSH
41691: EMPTY
41692: EQUAL
41693: OR
41694: IFFALSE 41637
// result := [ ] ;
41696: LD_ADDR_VAR 0 6
41700: PUSH
41701: EMPTY
41702: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41703: LD_VAR 0 1
41707: PPUSH
41708: LD_VAR 0 2
41712: PPUSH
41713: LD_VAR 0 3
41717: PPUSH
41718: LD_VAR 0 4
41722: PPUSH
41723: LD_VAR 0 5
41727: PPUSH
41728: CALL_OW 448
41732: IFFALSE 41765
// result := [ chassis , engine , control , weapon ] ;
41734: LD_ADDR_VAR 0 6
41738: PUSH
41739: LD_VAR 0 2
41743: PUSH
41744: LD_VAR 0 3
41748: PUSH
41749: LD_VAR 0 4
41753: PUSH
41754: LD_VAR 0 5
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: ST_TO_ADDR
// end ;
41765: LD_VAR 0 6
41769: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41770: LD_INT 0
41772: PPUSH
// if not chassis or not engine then
41773: LD_VAR 0 1
41777: NOT
41778: IFTRUE 41787
41780: PUSH
41781: LD_VAR 0 2
41785: NOT
41786: OR
41787: IFFALSE 41791
// exit ;
41789: GO 41987
// case engine of engine_solar :
41791: LD_VAR 0 2
41795: PUSH
41796: LD_INT 2
41798: DOUBLE
41799: EQUAL
41800: IFTRUE 41804
41802: GO 41842
41804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41805: LD_ADDR_VAR 0 3
41809: PUSH
41810: LD_INT 11
41812: PUSH
41813: LD_INT 12
41815: PUSH
41816: LD_INT 13
41818: PUSH
41819: LD_INT 14
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: ST_TO_ADDR
41840: GO 41971
41842: LD_INT 1
41844: DOUBLE
41845: EQUAL
41846: IFTRUE 41850
41848: GO 41912
41850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41851: LD_ADDR_VAR 0 3
41855: PUSH
41856: LD_INT 11
41858: PUSH
41859: LD_INT 12
41861: PUSH
41862: LD_INT 13
41864: PUSH
41865: LD_INT 14
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 4
41879: PUSH
41880: LD_INT 5
41882: PUSH
41883: LD_INT 21
41885: PUSH
41886: LD_INT 23
41888: PUSH
41889: LD_INT 22
41891: PUSH
41892: LD_INT 24
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: ST_TO_ADDR
41910: GO 41971
41912: LD_INT 3
41914: DOUBLE
41915: EQUAL
41916: IFTRUE 41920
41918: GO 41970
41920: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: LD_INT 13
41928: PUSH
41929: LD_INT 14
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: LD_INT 5
41943: PUSH
41944: LD_INT 21
41946: PUSH
41947: LD_INT 22
41949: PUSH
41950: LD_INT 23
41952: PUSH
41953: LD_INT 24
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: ST_TO_ADDR
41968: GO 41971
41970: POP
// result := ( chassis in result ) ;
41971: LD_ADDR_VAR 0 3
41975: PUSH
41976: LD_VAR 0 1
41980: PUSH
41981: LD_VAR 0 3
41985: IN
41986: ST_TO_ADDR
// end ;
41987: LD_VAR 0 3
41991: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41992: LD_INT 0
41994: PPUSH
// if not chassis or not weapon then
41995: LD_VAR 0 1
41999: NOT
42000: IFTRUE 42009
42002: PUSH
42003: LD_VAR 0 2
42007: NOT
42008: OR
42009: IFFALSE 42013
// exit ;
42011: GO 43073
// case weapon of us_machine_gun :
42013: LD_VAR 0 2
42017: PUSH
42018: LD_INT 2
42020: DOUBLE
42021: EQUAL
42022: IFTRUE 42026
42024: GO 42056
42026: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42027: LD_ADDR_VAR 0 3
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 4
42043: PUSH
42044: LD_INT 5
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: ST_TO_ADDR
42054: GO 43057
42056: LD_INT 3
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42064
42062: GO 42094
42064: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42065: LD_ADDR_VAR 0 3
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: LD_INT 4
42081: PUSH
42082: LD_INT 5
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
42092: GO 43057
42094: LD_INT 11
42096: DOUBLE
42097: EQUAL
42098: IFTRUE 42102
42100: GO 42132
42102: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42103: LD_ADDR_VAR 0 3
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 4
42119: PUSH
42120: LD_INT 5
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
42130: GO 43057
42132: LD_INT 4
42134: DOUBLE
42135: EQUAL
42136: IFTRUE 42140
42138: GO 42166
42140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42141: LD_ADDR_VAR 0 3
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: LD_INT 4
42154: PUSH
42155: LD_INT 5
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
42164: GO 43057
42166: LD_INT 5
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42174
42172: GO 42200
42174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42175: LD_ADDR_VAR 0 3
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 3
42185: PUSH
42186: LD_INT 4
42188: PUSH
42189: LD_INT 5
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
42198: GO 43057
42200: LD_INT 9
42202: DOUBLE
42203: EQUAL
42204: IFTRUE 42208
42206: GO 42234
42208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42209: LD_ADDR_VAR 0 3
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: LD_INT 4
42222: PUSH
42223: LD_INT 5
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
42232: GO 43057
42234: LD_INT 7
42236: DOUBLE
42237: EQUAL
42238: IFTRUE 42242
42240: GO 42268
42242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 3
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: LD_INT 5
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
42266: GO 43057
42268: LD_INT 12
42270: DOUBLE
42271: EQUAL
42272: IFTRUE 42276
42274: GO 42302
42276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: LD_INT 4
42290: PUSH
42291: LD_INT 5
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
42300: GO 43057
42302: LD_INT 13
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42310
42308: GO 42336
42310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: LD_INT 4
42324: PUSH
42325: LD_INT 5
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
42334: GO 43057
42336: LD_INT 14
42338: DOUBLE
42339: EQUAL
42340: IFTRUE 42344
42342: GO 42362
42344: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42345: LD_ADDR_VAR 0 3
42349: PUSH
42350: LD_INT 4
42352: PUSH
42353: LD_INT 5
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: ST_TO_ADDR
42360: GO 43057
42362: LD_INT 6
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42388
42370: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 4
42378: PUSH
42379: LD_INT 5
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: ST_TO_ADDR
42386: GO 43057
42388: LD_INT 10
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42414
42396: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 4
42404: PUSH
42405: LD_INT 5
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: ST_TO_ADDR
42412: GO 43057
42414: LD_INT 22
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42448
42422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 11
42430: PUSH
42431: LD_INT 12
42433: PUSH
42434: LD_INT 13
42436: PUSH
42437: LD_INT 14
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
42446: GO 43057
42448: LD_INT 23
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42482
42456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_INT 11
42464: PUSH
42465: LD_INT 12
42467: PUSH
42468: LD_INT 13
42470: PUSH
42471: LD_INT 14
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
42480: GO 43057
42482: LD_INT 24
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42490
42488: GO 42516
42490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: LD_INT 11
42498: PUSH
42499: LD_INT 12
42501: PUSH
42502: LD_INT 13
42504: PUSH
42505: LD_INT 14
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
42514: GO 43057
42516: LD_INT 30
42518: DOUBLE
42519: EQUAL
42520: IFTRUE 42524
42522: GO 42550
42524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42525: LD_ADDR_VAR 0 3
42529: PUSH
42530: LD_INT 11
42532: PUSH
42533: LD_INT 12
42535: PUSH
42536: LD_INT 13
42538: PUSH
42539: LD_INT 14
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
42548: GO 43057
42550: LD_INT 25
42552: DOUBLE
42553: EQUAL
42554: IFTRUE 42558
42556: GO 42576
42558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 13
42566: PUSH
42567: LD_INT 14
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: ST_TO_ADDR
42574: GO 43057
42576: LD_INT 27
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 42602
42584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_INT 13
42592: PUSH
42593: LD_INT 14
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: ST_TO_ADDR
42600: GO 43057
42602: LD_INT 92
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42636
42610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 11
42618: PUSH
42619: LD_INT 12
42621: PUSH
42622: LD_INT 13
42624: PUSH
42625: LD_INT 14
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 43057
42636: LD_INT 28
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42662
42644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 13
42652: PUSH
42653: LD_INT 14
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: ST_TO_ADDR
42660: GO 43057
42662: LD_INT 29
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42688
42670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_INT 13
42678: PUSH
42679: LD_INT 14
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 43057
42688: LD_INT 31
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42714
42696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 13
42704: PUSH
42705: LD_INT 14
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: ST_TO_ADDR
42712: GO 43057
42714: LD_INT 26
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 42740
42722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 13
42730: PUSH
42731: LD_INT 14
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: ST_TO_ADDR
42738: GO 43057
42740: LD_INT 42
42742: DOUBLE
42743: EQUAL
42744: IFTRUE 42748
42746: GO 42774
42748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42749: LD_ADDR_VAR 0 3
42753: PUSH
42754: LD_INT 21
42756: PUSH
42757: LD_INT 22
42759: PUSH
42760: LD_INT 23
42762: PUSH
42763: LD_INT 24
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
42772: GO 43057
42774: LD_INT 43
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42808
42782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: LD_INT 21
42790: PUSH
42791: LD_INT 22
42793: PUSH
42794: LD_INT 23
42796: PUSH
42797: LD_INT 24
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: ST_TO_ADDR
42806: GO 43057
42808: LD_INT 44
42810: DOUBLE
42811: EQUAL
42812: IFTRUE 42816
42814: GO 42842
42816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_INT 21
42824: PUSH
42825: LD_INT 22
42827: PUSH
42828: LD_INT 23
42830: PUSH
42831: LD_INT 24
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 43057
42842: LD_INT 45
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42876
42850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42851: LD_ADDR_VAR 0 3
42855: PUSH
42856: LD_INT 21
42858: PUSH
42859: LD_INT 22
42861: PUSH
42862: LD_INT 23
42864: PUSH
42865: LD_INT 24
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
42874: GO 43057
42876: LD_INT 49
42878: DOUBLE
42879: EQUAL
42880: IFTRUE 42884
42882: GO 42910
42884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_INT 21
42892: PUSH
42893: LD_INT 22
42895: PUSH
42896: LD_INT 23
42898: PUSH
42899: LD_INT 24
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: ST_TO_ADDR
42908: GO 43057
42910: LD_INT 51
42912: DOUBLE
42913: EQUAL
42914: IFTRUE 42918
42916: GO 42944
42918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 21
42926: PUSH
42927: LD_INT 22
42929: PUSH
42930: LD_INT 23
42932: PUSH
42933: LD_INT 24
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
42942: GO 43057
42944: LD_INT 52
42946: DOUBLE
42947: EQUAL
42948: IFTRUE 42952
42950: GO 42978
42952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42953: LD_ADDR_VAR 0 3
42957: PUSH
42958: LD_INT 21
42960: PUSH
42961: LD_INT 22
42963: PUSH
42964: LD_INT 23
42966: PUSH
42967: LD_INT 24
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
42976: GO 43057
42978: LD_INT 53
42980: DOUBLE
42981: EQUAL
42982: IFTRUE 42986
42984: GO 43004
42986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42987: LD_ADDR_VAR 0 3
42991: PUSH
42992: LD_INT 23
42994: PUSH
42995: LD_INT 24
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: ST_TO_ADDR
43002: GO 43057
43004: LD_INT 46
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43030
43012: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 23
43020: PUSH
43021: LD_INT 24
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: ST_TO_ADDR
43028: GO 43057
43030: LD_INT 47
43032: DOUBLE
43033: EQUAL
43034: IFTRUE 43038
43036: GO 43056
43038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43039: LD_ADDR_VAR 0 3
43043: PUSH
43044: LD_INT 23
43046: PUSH
43047: LD_INT 24
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: ST_TO_ADDR
43054: GO 43057
43056: POP
// result := ( chassis in result ) ;
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_VAR 0 3
43071: IN
43072: ST_TO_ADDR
// end ;
43073: LD_VAR 0 3
43077: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43078: LD_INT 0
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
// result := array ;
43087: LD_ADDR_VAR 0 5
43091: PUSH
43092: LD_VAR 0 1
43096: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43097: LD_VAR 0 1
43101: NOT
43102: IFTRUE 43111
43104: PUSH
43105: LD_VAR 0 2
43109: NOT
43110: OR
43111: IFTRUE 43120
43113: PUSH
43114: LD_VAR 0 3
43118: NOT
43119: OR
43120: IFTRUE 43134
43122: PUSH
43123: LD_VAR 0 2
43127: PUSH
43128: LD_VAR 0 1
43132: GREATER
43133: OR
43134: IFTRUE 43148
43136: PUSH
43137: LD_VAR 0 3
43141: PUSH
43142: LD_VAR 0 1
43146: GREATER
43147: OR
43148: IFFALSE 43152
// exit ;
43150: GO 43448
// if direction then
43152: LD_VAR 0 4
43156: IFFALSE 43220
// begin d := 1 ;
43158: LD_ADDR_VAR 0 9
43162: PUSH
43163: LD_INT 1
43165: ST_TO_ADDR
// if i_from > i_to then
43166: LD_VAR 0 2
43170: PUSH
43171: LD_VAR 0 3
43175: GREATER
43176: IFFALSE 43202
// length := ( array - i_from ) + i_to else
43178: LD_ADDR_VAR 0 11
43182: PUSH
43183: LD_VAR 0 1
43187: PUSH
43188: LD_VAR 0 2
43192: MINUS
43193: PUSH
43194: LD_VAR 0 3
43198: PLUS
43199: ST_TO_ADDR
43200: GO 43218
// length := i_to - i_from ;
43202: LD_ADDR_VAR 0 11
43206: PUSH
43207: LD_VAR 0 3
43211: PUSH
43212: LD_VAR 0 2
43216: MINUS
43217: ST_TO_ADDR
// end else
43218: GO 43281
// begin d := - 1 ;
43220: LD_ADDR_VAR 0 9
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: ST_TO_ADDR
// if i_from > i_to then
43229: LD_VAR 0 2
43233: PUSH
43234: LD_VAR 0 3
43238: GREATER
43239: IFFALSE 43259
// length := i_from - i_to else
43241: LD_ADDR_VAR 0 11
43245: PUSH
43246: LD_VAR 0 2
43250: PUSH
43251: LD_VAR 0 3
43255: MINUS
43256: ST_TO_ADDR
43257: GO 43281
// length := ( array - i_to ) + i_from ;
43259: LD_ADDR_VAR 0 11
43263: PUSH
43264: LD_VAR 0 1
43268: PUSH
43269: LD_VAR 0 3
43273: MINUS
43274: PUSH
43275: LD_VAR 0 2
43279: PLUS
43280: ST_TO_ADDR
// end ; if not length then
43281: LD_VAR 0 11
43285: NOT
43286: IFFALSE 43290
// exit ;
43288: GO 43448
// tmp := array ;
43290: LD_ADDR_VAR 0 10
43294: PUSH
43295: LD_VAR 0 1
43299: ST_TO_ADDR
// for i = 1 to length do
43300: LD_ADDR_VAR 0 6
43304: PUSH
43305: DOUBLE
43306: LD_INT 1
43308: DEC
43309: ST_TO_ADDR
43310: LD_VAR 0 11
43314: PUSH
43315: FOR_TO
43316: IFFALSE 43436
// begin for j = 1 to array do
43318: LD_ADDR_VAR 0 7
43322: PUSH
43323: DOUBLE
43324: LD_INT 1
43326: DEC
43327: ST_TO_ADDR
43328: LD_VAR 0 1
43332: PUSH
43333: FOR_TO
43334: IFFALSE 43422
// begin k := j + d ;
43336: LD_ADDR_VAR 0 8
43340: PUSH
43341: LD_VAR 0 7
43345: PUSH
43346: LD_VAR 0 9
43350: PLUS
43351: ST_TO_ADDR
// if k > array then
43352: LD_VAR 0 8
43356: PUSH
43357: LD_VAR 0 1
43361: GREATER
43362: IFFALSE 43372
// k := 1 ;
43364: LD_ADDR_VAR 0 8
43368: PUSH
43369: LD_INT 1
43371: ST_TO_ADDR
// if not k then
43372: LD_VAR 0 8
43376: NOT
43377: IFFALSE 43389
// k := array ;
43379: LD_ADDR_VAR 0 8
43383: PUSH
43384: LD_VAR 0 1
43388: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43389: LD_ADDR_VAR 0 10
43393: PUSH
43394: LD_VAR 0 10
43398: PPUSH
43399: LD_VAR 0 8
43403: PPUSH
43404: LD_VAR 0 1
43408: PUSH
43409: LD_VAR 0 7
43413: ARRAY
43414: PPUSH
43415: CALL_OW 1
43419: ST_TO_ADDR
// end ;
43420: GO 43333
43422: POP
43423: POP
// array := tmp ;
43424: LD_ADDR_VAR 0 1
43428: PUSH
43429: LD_VAR 0 10
43433: ST_TO_ADDR
// end ;
43434: GO 43315
43436: POP
43437: POP
// result := array ;
43438: LD_ADDR_VAR 0 5
43442: PUSH
43443: LD_VAR 0 1
43447: ST_TO_ADDR
// end ;
43448: LD_VAR 0 5
43452: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43453: LD_INT 0
43455: PPUSH
43456: PPUSH
// result := 0 ;
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 0
43464: ST_TO_ADDR
// if not array or not value in array then
43465: LD_VAR 0 1
43469: NOT
43470: IFTRUE 43485
43472: PUSH
43473: LD_VAR 0 2
43477: PUSH
43478: LD_VAR 0 1
43482: IN
43483: NOT
43484: OR
43485: IFFALSE 43489
// exit ;
43487: GO 43543
// for i = 1 to array do
43489: LD_ADDR_VAR 0 4
43493: PUSH
43494: DOUBLE
43495: LD_INT 1
43497: DEC
43498: ST_TO_ADDR
43499: LD_VAR 0 1
43503: PUSH
43504: FOR_TO
43505: IFFALSE 43541
// if value = array [ i ] then
43507: LD_VAR 0 2
43511: PUSH
43512: LD_VAR 0 1
43516: PUSH
43517: LD_VAR 0 4
43521: ARRAY
43522: EQUAL
43523: IFFALSE 43539
// begin result := i ;
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_VAR 0 4
43534: ST_TO_ADDR
// exit ;
43535: POP
43536: POP
43537: GO 43543
// end ;
43539: GO 43504
43541: POP
43542: POP
// end ;
43543: LD_VAR 0 3
43547: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43548: LD_INT 0
43550: PPUSH
// vc_chassis := chassis ;
43551: LD_ADDR_OWVAR 37
43555: PUSH
43556: LD_VAR 0 1
43560: ST_TO_ADDR
// vc_engine := engine ;
43561: LD_ADDR_OWVAR 39
43565: PUSH
43566: LD_VAR 0 2
43570: ST_TO_ADDR
// vc_control := control ;
43571: LD_ADDR_OWVAR 38
43575: PUSH
43576: LD_VAR 0 3
43580: ST_TO_ADDR
// vc_weapon := weapon ;
43581: LD_ADDR_OWVAR 40
43585: PUSH
43586: LD_VAR 0 4
43590: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43591: LD_ADDR_OWVAR 41
43595: PUSH
43596: LD_VAR 0 5
43600: ST_TO_ADDR
// end ;
43601: LD_VAR 0 6
43605: RET
// export function WantPlant ( unit ) ; var task ; begin
43606: LD_INT 0
43608: PPUSH
43609: PPUSH
// result := false ;
43610: LD_ADDR_VAR 0 2
43614: PUSH
43615: LD_INT 0
43617: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_VAR 0 1
43627: PPUSH
43628: CALL_OW 437
43632: ST_TO_ADDR
// if task then
43633: LD_VAR 0 3
43637: IFFALSE 43665
// if task [ 1 ] [ 1 ] = p then
43639: LD_VAR 0 3
43643: PUSH
43644: LD_INT 1
43646: ARRAY
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PUSH
43652: LD_STRING p
43654: EQUAL
43655: IFFALSE 43665
// result := true ;
43657: LD_ADDR_VAR 0 2
43661: PUSH
43662: LD_INT 1
43664: ST_TO_ADDR
// end ;
43665: LD_VAR 0 2
43669: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43670: LD_INT 0
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
// if pos < 1 then
43676: LD_VAR 0 2
43680: PUSH
43681: LD_INT 1
43683: LESS
43684: IFFALSE 43688
// exit ;
43686: GO 43991
// if pos = 1 then
43688: LD_VAR 0 2
43692: PUSH
43693: LD_INT 1
43695: EQUAL
43696: IFFALSE 43729
// result := Replace ( arr , pos [ 1 ] , value ) else
43698: LD_ADDR_VAR 0 4
43702: PUSH
43703: LD_VAR 0 1
43707: PPUSH
43708: LD_VAR 0 2
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PPUSH
43717: LD_VAR 0 3
43721: PPUSH
43722: CALL_OW 1
43726: ST_TO_ADDR
43727: GO 43991
// begin tmp := arr ;
43729: LD_ADDR_VAR 0 6
43733: PUSH
43734: LD_VAR 0 1
43738: ST_TO_ADDR
// s_arr := [ tmp ] ;
43739: LD_ADDR_VAR 0 7
43743: PUSH
43744: LD_VAR 0 6
43748: PUSH
43749: EMPTY
43750: LIST
43751: ST_TO_ADDR
// for i = 1 to pos - 1 do
43752: LD_ADDR_VAR 0 5
43756: PUSH
43757: DOUBLE
43758: LD_INT 1
43760: DEC
43761: ST_TO_ADDR
43762: LD_VAR 0 2
43766: PUSH
43767: LD_INT 1
43769: MINUS
43770: PUSH
43771: FOR_TO
43772: IFFALSE 43817
// begin tmp := tmp [ pos [ i ] ] ;
43774: LD_ADDR_VAR 0 6
43778: PUSH
43779: LD_VAR 0 6
43783: PUSH
43784: LD_VAR 0 2
43788: PUSH
43789: LD_VAR 0 5
43793: ARRAY
43794: ARRAY
43795: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43796: LD_ADDR_VAR 0 7
43800: PUSH
43801: LD_VAR 0 7
43805: PUSH
43806: LD_VAR 0 6
43810: PUSH
43811: EMPTY
43812: LIST
43813: ADD
43814: ST_TO_ADDR
// end ;
43815: GO 43771
43817: POP
43818: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43819: LD_ADDR_VAR 0 6
43823: PUSH
43824: LD_VAR 0 6
43828: PPUSH
43829: LD_VAR 0 2
43833: PUSH
43834: LD_VAR 0 2
43838: ARRAY
43839: PPUSH
43840: LD_VAR 0 3
43844: PPUSH
43845: CALL_OW 1
43849: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43850: LD_ADDR_VAR 0 7
43854: PUSH
43855: LD_VAR 0 7
43859: PPUSH
43860: LD_VAR 0 7
43864: PPUSH
43865: LD_VAR 0 6
43869: PPUSH
43870: CALL_OW 1
43874: ST_TO_ADDR
// for i = s_arr downto 2 do
43875: LD_ADDR_VAR 0 5
43879: PUSH
43880: DOUBLE
43881: LD_VAR 0 7
43885: INC
43886: ST_TO_ADDR
43887: LD_INT 2
43889: PUSH
43890: FOR_DOWNTO
43891: IFFALSE 43975
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43893: LD_ADDR_VAR 0 6
43897: PUSH
43898: LD_VAR 0 7
43902: PUSH
43903: LD_VAR 0 5
43907: PUSH
43908: LD_INT 1
43910: MINUS
43911: ARRAY
43912: PPUSH
43913: LD_VAR 0 2
43917: PUSH
43918: LD_VAR 0 5
43922: PUSH
43923: LD_INT 1
43925: MINUS
43926: ARRAY
43927: PPUSH
43928: LD_VAR 0 7
43932: PUSH
43933: LD_VAR 0 5
43937: ARRAY
43938: PPUSH
43939: CALL_OW 1
43943: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43944: LD_ADDR_VAR 0 7
43948: PUSH
43949: LD_VAR 0 7
43953: PPUSH
43954: LD_VAR 0 5
43958: PUSH
43959: LD_INT 1
43961: MINUS
43962: PPUSH
43963: LD_VAR 0 6
43967: PPUSH
43968: CALL_OW 1
43972: ST_TO_ADDR
// end ;
43973: GO 43890
43975: POP
43976: POP
// result := s_arr [ 1 ] ;
43977: LD_ADDR_VAR 0 4
43981: PUSH
43982: LD_VAR 0 7
43986: PUSH
43987: LD_INT 1
43989: ARRAY
43990: ST_TO_ADDR
// end ; end ;
43991: LD_VAR 0 4
43995: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43996: LD_INT 0
43998: PPUSH
43999: PPUSH
// if not list then
44000: LD_VAR 0 1
44004: NOT
44005: IFFALSE 44009
// exit ;
44007: GO 44100
// i := list [ pos1 ] ;
44009: LD_ADDR_VAR 0 5
44013: PUSH
44014: LD_VAR 0 1
44018: PUSH
44019: LD_VAR 0 2
44023: ARRAY
44024: ST_TO_ADDR
// if not i then
44025: LD_VAR 0 5
44029: NOT
44030: IFFALSE 44034
// exit ;
44032: GO 44100
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44034: LD_ADDR_VAR 0 1
44038: PUSH
44039: LD_VAR 0 1
44043: PPUSH
44044: LD_VAR 0 2
44048: PPUSH
44049: LD_VAR 0 1
44053: PUSH
44054: LD_VAR 0 3
44058: ARRAY
44059: PPUSH
44060: CALL_OW 1
44064: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44065: LD_ADDR_VAR 0 1
44069: PUSH
44070: LD_VAR 0 1
44074: PPUSH
44075: LD_VAR 0 3
44079: PPUSH
44080: LD_VAR 0 5
44084: PPUSH
44085: CALL_OW 1
44089: ST_TO_ADDR
// result := list ;
44090: LD_ADDR_VAR 0 4
44094: PUSH
44095: LD_VAR 0 1
44099: ST_TO_ADDR
// end ;
44100: LD_VAR 0 4
44104: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44105: LD_INT 0
44107: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44108: LD_ADDR_VAR 0 5
44112: PUSH
44113: LD_VAR 0 1
44117: PPUSH
44118: CALL_OW 250
44122: PPUSH
44123: LD_VAR 0 1
44127: PPUSH
44128: CALL_OW 251
44132: PPUSH
44133: LD_VAR 0 2
44137: PPUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: LD_VAR 0 4
44147: PPUSH
44148: CALL 44530 0 5
44152: ST_TO_ADDR
// end ;
44153: LD_VAR 0 5
44157: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44158: LD_INT 0
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
// if not list or not unit then
44164: LD_VAR 0 2
44168: NOT
44169: IFTRUE 44178
44171: PUSH
44172: LD_VAR 0 1
44176: NOT
44177: OR
44178: IFFALSE 44182
// exit ;
44180: GO 44525
// result := [ ] ;
44182: LD_ADDR_VAR 0 5
44186: PUSH
44187: EMPTY
44188: ST_TO_ADDR
// for i in list do
44189: LD_ADDR_VAR 0 6
44193: PUSH
44194: LD_VAR 0 2
44198: PUSH
44199: FOR_IN
44200: IFFALSE 44418
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44202: LD_ADDR_VAR 0 8
44206: PUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: LD_VAR 0 6
44216: PUSH
44217: LD_INT 1
44219: ARRAY
44220: PPUSH
44221: LD_VAR 0 6
44225: PUSH
44226: LD_INT 2
44228: ARRAY
44229: PPUSH
44230: CALL_OW 297
44234: ST_TO_ADDR
// if not Count ( result ) then
44235: LD_VAR 0 5
44239: PPUSH
44240: CALL 40786 0 1
44244: NOT
44245: IFFALSE 44278
// begin result := Join ( result , [ i , tmp ] ) ;
44247: LD_ADDR_VAR 0 5
44251: PUSH
44252: LD_VAR 0 5
44256: PPUSH
44257: LD_VAR 0 6
44261: PUSH
44262: LD_VAR 0 8
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PPUSH
44271: CALL 76718 0 2
44275: ST_TO_ADDR
// continue ;
44276: GO 44199
// end ; if result [ result ] [ 2 ] <= tmp then
44278: LD_VAR 0 5
44282: PUSH
44283: LD_VAR 0 5
44287: ARRAY
44288: PUSH
44289: LD_INT 2
44291: ARRAY
44292: PUSH
44293: LD_VAR 0 8
44297: LESSEQUAL
44298: IFFALSE 44331
// result := Join ( result , [ i , tmp ] ) else
44300: LD_ADDR_VAR 0 5
44304: PUSH
44305: LD_VAR 0 5
44309: PPUSH
44310: LD_VAR 0 6
44314: PUSH
44315: LD_VAR 0 8
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PPUSH
44324: CALL 76718 0 2
44328: ST_TO_ADDR
44329: GO 44416
// begin for j := 1 to Count ( result ) do
44331: LD_ADDR_VAR 0 7
44335: PUSH
44336: DOUBLE
44337: LD_INT 1
44339: DEC
44340: ST_TO_ADDR
44341: LD_VAR 0 5
44345: PPUSH
44346: CALL 40786 0 1
44350: PUSH
44351: FOR_TO
44352: IFFALSE 44414
// begin if tmp < result [ j ] [ 2 ] then
44354: LD_VAR 0 8
44358: PUSH
44359: LD_VAR 0 5
44363: PUSH
44364: LD_VAR 0 7
44368: ARRAY
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: LESS
44374: IFFALSE 44412
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44376: LD_ADDR_VAR 0 5
44380: PUSH
44381: LD_VAR 0 5
44385: PPUSH
44386: LD_VAR 0 7
44390: PPUSH
44391: LD_VAR 0 6
44395: PUSH
44396: LD_VAR 0 8
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PPUSH
44405: CALL_OW 2
44409: ST_TO_ADDR
// break ;
44410: GO 44414
// end ; end ;
44412: GO 44351
44414: POP
44415: POP
// end ; end ;
44416: GO 44199
44418: POP
44419: POP
// if result and not asc then
44420: LD_VAR 0 5
44424: IFFALSE 44433
44426: PUSH
44427: LD_VAR 0 3
44431: NOT
44432: AND
44433: IFFALSE 44450
// result := ReverseArray ( result ) ;
44435: LD_ADDR_VAR 0 5
44439: PUSH
44440: LD_VAR 0 5
44444: PPUSH
44445: CALL 71808 0 1
44449: ST_TO_ADDR
// tmp := [ ] ;
44450: LD_ADDR_VAR 0 8
44454: PUSH
44455: EMPTY
44456: ST_TO_ADDR
// if mode then
44457: LD_VAR 0 4
44461: IFFALSE 44525
// begin for i := 1 to result do
44463: LD_ADDR_VAR 0 6
44467: PUSH
44468: DOUBLE
44469: LD_INT 1
44471: DEC
44472: ST_TO_ADDR
44473: LD_VAR 0 5
44477: PUSH
44478: FOR_TO
44479: IFFALSE 44513
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44481: LD_ADDR_VAR 0 8
44485: PUSH
44486: LD_VAR 0 8
44490: PPUSH
44491: LD_VAR 0 5
44495: PUSH
44496: LD_VAR 0 6
44500: ARRAY
44501: PUSH
44502: LD_INT 1
44504: ARRAY
44505: PPUSH
44506: CALL 76718 0 2
44510: ST_TO_ADDR
44511: GO 44478
44513: POP
44514: POP
// result := tmp ;
44515: LD_ADDR_VAR 0 5
44519: PUSH
44520: LD_VAR 0 8
44524: ST_TO_ADDR
// end ; end ;
44525: LD_VAR 0 5
44529: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44530: LD_INT 0
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
// if not list then
44536: LD_VAR 0 3
44540: NOT
44541: IFFALSE 44545
// exit ;
44543: GO 44935
// result := [ ] ;
44545: LD_ADDR_VAR 0 6
44549: PUSH
44550: EMPTY
44551: ST_TO_ADDR
// for i in list do
44552: LD_ADDR_VAR 0 7
44556: PUSH
44557: LD_VAR 0 3
44561: PUSH
44562: FOR_IN
44563: IFFALSE 44765
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44565: LD_ADDR_VAR 0 9
44569: PUSH
44570: LD_VAR 0 7
44574: PPUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 2
44584: PPUSH
44585: CALL_OW 297
44589: ST_TO_ADDR
// if not result then
44590: LD_VAR 0 6
44594: NOT
44595: IFFALSE 44621
// result := [ [ i , tmp ] ] else
44597: LD_ADDR_VAR 0 6
44601: PUSH
44602: LD_VAR 0 7
44606: PUSH
44607: LD_VAR 0 9
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: EMPTY
44617: LIST
44618: ST_TO_ADDR
44619: GO 44763
// begin if result [ result ] [ 2 ] <= tmp then
44621: LD_VAR 0 6
44625: PUSH
44626: LD_VAR 0 6
44630: ARRAY
44631: PUSH
44632: LD_INT 2
44634: ARRAY
44635: PUSH
44636: LD_VAR 0 9
44640: LESSEQUAL
44641: IFFALSE 44683
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44643: LD_ADDR_VAR 0 6
44647: PUSH
44648: LD_VAR 0 6
44652: PPUSH
44653: LD_VAR 0 6
44657: PUSH
44658: LD_INT 1
44660: PLUS
44661: PPUSH
44662: LD_VAR 0 7
44666: PUSH
44667: LD_VAR 0 9
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PPUSH
44676: CALL_OW 2
44680: ST_TO_ADDR
44681: GO 44763
// for j := 1 to result do
44683: LD_ADDR_VAR 0 8
44687: PUSH
44688: DOUBLE
44689: LD_INT 1
44691: DEC
44692: ST_TO_ADDR
44693: LD_VAR 0 6
44697: PUSH
44698: FOR_TO
44699: IFFALSE 44761
// begin if tmp < result [ j ] [ 2 ] then
44701: LD_VAR 0 9
44705: PUSH
44706: LD_VAR 0 6
44710: PUSH
44711: LD_VAR 0 8
44715: ARRAY
44716: PUSH
44717: LD_INT 2
44719: ARRAY
44720: LESS
44721: IFFALSE 44759
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44723: LD_ADDR_VAR 0 6
44727: PUSH
44728: LD_VAR 0 6
44732: PPUSH
44733: LD_VAR 0 8
44737: PPUSH
44738: LD_VAR 0 7
44742: PUSH
44743: LD_VAR 0 9
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PPUSH
44752: CALL_OW 2
44756: ST_TO_ADDR
// break ;
44757: GO 44761
// end ; end ;
44759: GO 44698
44761: POP
44762: POP
// end ; end ;
44763: GO 44562
44765: POP
44766: POP
// if result and not asc then
44767: LD_VAR 0 6
44771: IFFALSE 44780
44773: PUSH
44774: LD_VAR 0 4
44778: NOT
44779: AND
44780: IFFALSE 44855
// begin tmp := result ;
44782: LD_ADDR_VAR 0 9
44786: PUSH
44787: LD_VAR 0 6
44791: ST_TO_ADDR
// for i = tmp downto 1 do
44792: LD_ADDR_VAR 0 7
44796: PUSH
44797: DOUBLE
44798: LD_VAR 0 9
44802: INC
44803: ST_TO_ADDR
44804: LD_INT 1
44806: PUSH
44807: FOR_DOWNTO
44808: IFFALSE 44853
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44810: LD_ADDR_VAR 0 6
44814: PUSH
44815: LD_VAR 0 6
44819: PPUSH
44820: LD_VAR 0 9
44824: PUSH
44825: LD_VAR 0 7
44829: MINUS
44830: PUSH
44831: LD_INT 1
44833: PLUS
44834: PPUSH
44835: LD_VAR 0 9
44839: PUSH
44840: LD_VAR 0 7
44844: ARRAY
44845: PPUSH
44846: CALL_OW 1
44850: ST_TO_ADDR
44851: GO 44807
44853: POP
44854: POP
// end ; tmp := [ ] ;
44855: LD_ADDR_VAR 0 9
44859: PUSH
44860: EMPTY
44861: ST_TO_ADDR
// if mode then
44862: LD_VAR 0 5
44866: IFFALSE 44935
// begin for i = 1 to result do
44868: LD_ADDR_VAR 0 7
44872: PUSH
44873: DOUBLE
44874: LD_INT 1
44876: DEC
44877: ST_TO_ADDR
44878: LD_VAR 0 6
44882: PUSH
44883: FOR_TO
44884: IFFALSE 44923
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44886: LD_ADDR_VAR 0 9
44890: PUSH
44891: LD_VAR 0 9
44895: PPUSH
44896: LD_VAR 0 7
44900: PPUSH
44901: LD_VAR 0 6
44905: PUSH
44906: LD_VAR 0 7
44910: ARRAY
44911: PUSH
44912: LD_INT 1
44914: ARRAY
44915: PPUSH
44916: CALL_OW 1
44920: ST_TO_ADDR
44921: GO 44883
44923: POP
44924: POP
// result := tmp ;
44925: LD_ADDR_VAR 0 6
44929: PUSH
44930: LD_VAR 0 9
44934: ST_TO_ADDR
// end ; end ;
44935: LD_VAR 0 6
44939: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44940: LD_INT 0
44942: PPUSH
44943: PPUSH
44944: PPUSH
44945: PPUSH
44946: PPUSH
44947: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44948: LD_ADDR_VAR 0 5
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: ST_TO_ADDR
// if not x or not y then
44970: LD_VAR 0 2
44974: NOT
44975: IFTRUE 44984
44977: PUSH
44978: LD_VAR 0 3
44982: NOT
44983: OR
44984: IFFALSE 44988
// exit ;
44986: GO 46644
// if not range then
44988: LD_VAR 0 4
44992: NOT
44993: IFFALSE 45003
// range := 10 ;
44995: LD_ADDR_VAR 0 4
44999: PUSH
45000: LD_INT 10
45002: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45003: LD_ADDR_VAR 0 8
45007: PUSH
45008: LD_INT 81
45010: PUSH
45011: LD_VAR 0 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 92
45022: PUSH
45023: LD_VAR 0 2
45027: PUSH
45028: LD_VAR 0 3
45032: PUSH
45033: LD_VAR 0 4
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: LD_INT 21
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: PPUSH
45066: CALL_OW 69
45070: ST_TO_ADDR
// if not tmp then
45071: LD_VAR 0 8
45075: NOT
45076: IFFALSE 45080
// exit ;
45078: GO 46644
// for i in tmp do
45080: LD_ADDR_VAR 0 6
45084: PUSH
45085: LD_VAR 0 8
45089: PUSH
45090: FOR_IN
45091: IFFALSE 46619
// begin points := [ 0 , 0 , 0 ] ;
45093: LD_ADDR_VAR 0 9
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// bpoints := 1 ;
45112: LD_ADDR_VAR 0 10
45116: PUSH
45117: LD_INT 1
45119: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45120: LD_VAR 0 6
45124: PPUSH
45125: CALL_OW 247
45129: PUSH
45130: LD_INT 1
45132: DOUBLE
45133: EQUAL
45134: IFTRUE 45138
45136: GO 45720
45138: POP
// begin if GetClass ( i ) = 1 then
45139: LD_VAR 0 6
45143: PPUSH
45144: CALL_OW 257
45148: PUSH
45149: LD_INT 1
45151: EQUAL
45152: IFFALSE 45173
// points := [ 10 , 5 , 3 ] ;
45154: LD_ADDR_VAR 0 9
45158: PUSH
45159: LD_INT 10
45161: PUSH
45162: LD_INT 5
45164: PUSH
45165: LD_INT 3
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45173: LD_VAR 0 6
45177: PPUSH
45178: CALL_OW 257
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: LD_INT 4
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: IN
45197: IFFALSE 45218
// points := [ 3 , 2 , 1 ] ;
45199: LD_ADDR_VAR 0 9
45203: PUSH
45204: LD_INT 3
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45218: LD_VAR 0 6
45222: PPUSH
45223: CALL_OW 257
45227: PUSH
45228: LD_INT 5
45230: EQUAL
45231: IFFALSE 45252
// points := [ 130 , 5 , 2 ] ;
45233: LD_ADDR_VAR 0 9
45237: PUSH
45238: LD_INT 130
45240: PUSH
45241: LD_INT 5
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45252: LD_VAR 0 6
45256: PPUSH
45257: CALL_OW 257
45261: PUSH
45262: LD_INT 8
45264: EQUAL
45265: IFFALSE 45286
// points := [ 35 , 35 , 30 ] ;
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_INT 35
45274: PUSH
45275: LD_INT 35
45277: PUSH
45278: LD_INT 30
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45286: LD_VAR 0 6
45290: PPUSH
45291: CALL_OW 257
45295: PUSH
45296: LD_INT 9
45298: EQUAL
45299: IFFALSE 45320
// points := [ 20 , 55 , 40 ] ;
45301: LD_ADDR_VAR 0 9
45305: PUSH
45306: LD_INT 20
45308: PUSH
45309: LD_INT 55
45311: PUSH
45312: LD_INT 40
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45320: LD_VAR 0 6
45324: PPUSH
45325: CALL_OW 257
45329: PUSH
45330: LD_INT 12
45332: PUSH
45333: LD_INT 16
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: IN
45340: IFFALSE 45361
// points := [ 5 , 3 , 2 ] ;
45342: LD_ADDR_VAR 0 9
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45361: LD_VAR 0 6
45365: PPUSH
45366: CALL_OW 257
45370: PUSH
45371: LD_INT 17
45373: EQUAL
45374: IFFALSE 45395
// points := [ 100 , 50 , 75 ] ;
45376: LD_ADDR_VAR 0 9
45380: PUSH
45381: LD_INT 100
45383: PUSH
45384: LD_INT 50
45386: PUSH
45387: LD_INT 75
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45395: LD_VAR 0 6
45399: PPUSH
45400: CALL_OW 257
45404: PUSH
45405: LD_INT 15
45407: EQUAL
45408: IFFALSE 45429
// points := [ 10 , 5 , 3 ] ;
45410: LD_ADDR_VAR 0 9
45414: PUSH
45415: LD_INT 10
45417: PUSH
45418: LD_INT 5
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45429: LD_VAR 0 6
45433: PPUSH
45434: CALL_OW 257
45438: PUSH
45439: LD_INT 14
45441: EQUAL
45442: IFFALSE 45463
// points := [ 10 , 0 , 0 ] ;
45444: LD_ADDR_VAR 0 9
45448: PUSH
45449: LD_INT 10
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45463: LD_VAR 0 6
45467: PPUSH
45468: CALL_OW 257
45472: PUSH
45473: LD_INT 11
45475: EQUAL
45476: IFFALSE 45497
// points := [ 30 , 10 , 5 ] ;
45478: LD_ADDR_VAR 0 9
45482: PUSH
45483: LD_INT 30
45485: PUSH
45486: LD_INT 10
45488: PUSH
45489: LD_INT 5
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45497: LD_VAR 0 1
45501: PPUSH
45502: LD_INT 5
45504: PPUSH
45505: CALL_OW 321
45509: PUSH
45510: LD_INT 2
45512: EQUAL
45513: IFFALSE 45530
// bpoints := bpoints * 1.8 ;
45515: LD_ADDR_VAR 0 10
45519: PUSH
45520: LD_VAR 0 10
45524: PUSH
45525: LD_REAL  1.80000000000000E+0000
45528: MUL
45529: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45530: LD_VAR 0 6
45534: PPUSH
45535: CALL_OW 257
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 3
45548: PUSH
45549: LD_INT 4
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: IN
45558: IFFALSE 45578
45560: PUSH
45561: LD_VAR 0 1
45565: PPUSH
45566: LD_INT 51
45568: PPUSH
45569: CALL_OW 321
45573: PUSH
45574: LD_INT 2
45576: EQUAL
45577: AND
45578: IFFALSE 45595
// bpoints := bpoints * 1.2 ;
45580: LD_ADDR_VAR 0 10
45584: PUSH
45585: LD_VAR 0 10
45589: PUSH
45590: LD_REAL  1.20000000000000E+0000
45593: MUL
45594: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45595: LD_VAR 0 6
45599: PPUSH
45600: CALL_OW 257
45604: PUSH
45605: LD_INT 5
45607: PUSH
45608: LD_INT 7
45610: PUSH
45611: LD_INT 9
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: IN
45619: IFFALSE 45639
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: LD_INT 52
45629: PPUSH
45630: CALL_OW 321
45634: PUSH
45635: LD_INT 2
45637: EQUAL
45638: AND
45639: IFFALSE 45656
// bpoints := bpoints * 1.5 ;
45641: LD_ADDR_VAR 0 10
45645: PUSH
45646: LD_VAR 0 10
45650: PUSH
45651: LD_REAL  1.50000000000000E+0000
45654: MUL
45655: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45656: LD_VAR 0 1
45660: PPUSH
45661: LD_INT 66
45663: PPUSH
45664: CALL_OW 321
45668: PUSH
45669: LD_INT 2
45671: EQUAL
45672: IFFALSE 45689
// bpoints := bpoints * 1.1 ;
45674: LD_ADDR_VAR 0 10
45678: PUSH
45679: LD_VAR 0 10
45683: PUSH
45684: LD_REAL  1.10000000000000E+0000
45687: MUL
45688: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45689: LD_ADDR_VAR 0 10
45693: PUSH
45694: LD_VAR 0 10
45698: PUSH
45699: LD_VAR 0 6
45703: PPUSH
45704: LD_INT 1
45706: PPUSH
45707: CALL_OW 259
45711: PUSH
45712: LD_REAL  1.15000000000000E+0000
45715: MUL
45716: MUL
45717: ST_TO_ADDR
// end ; unit_vehicle :
45718: GO 46548
45720: LD_INT 2
45722: DOUBLE
45723: EQUAL
45724: IFTRUE 45728
45726: GO 46536
45728: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45729: LD_VAR 0 6
45733: PPUSH
45734: CALL_OW 264
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 42
45744: PUSH
45745: LD_INT 24
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: IN
45753: IFFALSE 45774
// points := [ 25 , 5 , 3 ] ;
45755: LD_ADDR_VAR 0 9
45759: PUSH
45760: LD_INT 25
45762: PUSH
45763: LD_INT 5
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45774: LD_VAR 0 6
45778: PPUSH
45779: CALL_OW 264
45783: PUSH
45784: LD_INT 4
45786: PUSH
45787: LD_INT 43
45789: PUSH
45790: LD_INT 25
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: IN
45798: IFFALSE 45819
// points := [ 40 , 15 , 5 ] ;
45800: LD_ADDR_VAR 0 9
45804: PUSH
45805: LD_INT 40
45807: PUSH
45808: LD_INT 15
45810: PUSH
45811: LD_INT 5
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45819: LD_VAR 0 6
45823: PPUSH
45824: CALL_OW 264
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 23
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: IN
45839: IFFALSE 45860
// points := [ 7 , 25 , 8 ] ;
45841: LD_ADDR_VAR 0 9
45845: PUSH
45846: LD_INT 7
45848: PUSH
45849: LD_INT 25
45851: PUSH
45852: LD_INT 8
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45860: LD_VAR 0 6
45864: PPUSH
45865: CALL_OW 264
45869: PUSH
45870: LD_INT 5
45872: PUSH
45873: LD_INT 27
45875: PUSH
45876: LD_INT 44
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: IN
45884: IFFALSE 45905
// points := [ 14 , 50 , 16 ] ;
45886: LD_ADDR_VAR 0 9
45890: PUSH
45891: LD_INT 14
45893: PUSH
45894: LD_INT 50
45896: PUSH
45897: LD_INT 16
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45905: LD_VAR 0 6
45909: PPUSH
45910: CALL_OW 264
45914: PUSH
45915: LD_INT 6
45917: PUSH
45918: LD_INT 46
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: IN
45925: IFFALSE 45946
// points := [ 32 , 120 , 70 ] ;
45927: LD_ADDR_VAR 0 9
45931: PUSH
45932: LD_INT 32
45934: PUSH
45935: LD_INT 120
45937: PUSH
45938: LD_INT 70
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45946: LD_VAR 0 6
45950: PPUSH
45951: CALL_OW 264
45955: PUSH
45956: LD_INT 7
45958: PUSH
45959: LD_INT 28
45961: PUSH
45962: LD_INT 45
45964: PUSH
45965: LD_INT 92
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: IN
45974: IFFALSE 45995
// points := [ 35 , 20 , 45 ] ;
45976: LD_ADDR_VAR 0 9
45980: PUSH
45981: LD_INT 35
45983: PUSH
45984: LD_INT 20
45986: PUSH
45987: LD_INT 45
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45995: LD_VAR 0 6
45999: PPUSH
46000: CALL_OW 264
46004: PUSH
46005: LD_INT 47
46007: PUSH
46008: EMPTY
46009: LIST
46010: IN
46011: IFFALSE 46032
// points := [ 67 , 45 , 75 ] ;
46013: LD_ADDR_VAR 0 9
46017: PUSH
46018: LD_INT 67
46020: PUSH
46021: LD_INT 45
46023: PUSH
46024: LD_INT 75
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46032: LD_VAR 0 6
46036: PPUSH
46037: CALL_OW 264
46041: PUSH
46042: LD_INT 26
46044: PUSH
46045: EMPTY
46046: LIST
46047: IN
46048: IFFALSE 46069
// points := [ 120 , 30 , 80 ] ;
46050: LD_ADDR_VAR 0 9
46054: PUSH
46055: LD_INT 120
46057: PUSH
46058: LD_INT 30
46060: PUSH
46061: LD_INT 80
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46069: LD_VAR 0 6
46073: PPUSH
46074: CALL_OW 264
46078: PUSH
46079: LD_INT 22
46081: PUSH
46082: EMPTY
46083: LIST
46084: IN
46085: IFFALSE 46106
// points := [ 40 , 1 , 1 ] ;
46087: LD_ADDR_VAR 0 9
46091: PUSH
46092: LD_INT 40
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46106: LD_VAR 0 6
46110: PPUSH
46111: CALL_OW 264
46115: PUSH
46116: LD_INT 29
46118: PUSH
46119: EMPTY
46120: LIST
46121: IN
46122: IFFALSE 46143
// points := [ 70 , 200 , 400 ] ;
46124: LD_ADDR_VAR 0 9
46128: PUSH
46129: LD_INT 70
46131: PUSH
46132: LD_INT 200
46134: PUSH
46135: LD_INT 400
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46143: LD_VAR 0 6
46147: PPUSH
46148: CALL_OW 264
46152: PUSH
46153: LD_INT 14
46155: PUSH
46156: LD_INT 53
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: IN
46163: IFFALSE 46184
// points := [ 40 , 10 , 20 ] ;
46165: LD_ADDR_VAR 0 9
46169: PUSH
46170: LD_INT 40
46172: PUSH
46173: LD_INT 10
46175: PUSH
46176: LD_INT 20
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 264
46193: PUSH
46194: LD_INT 9
46196: PUSH
46197: EMPTY
46198: LIST
46199: IN
46200: IFFALSE 46221
// points := [ 5 , 70 , 20 ] ;
46202: LD_ADDR_VAR 0 9
46206: PUSH
46207: LD_INT 5
46209: PUSH
46210: LD_INT 70
46212: PUSH
46213: LD_INT 20
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46221: LD_VAR 0 6
46225: PPUSH
46226: CALL_OW 264
46230: PUSH
46231: LD_INT 10
46233: PUSH
46234: EMPTY
46235: LIST
46236: IN
46237: IFFALSE 46258
// points := [ 35 , 110 , 70 ] ;
46239: LD_ADDR_VAR 0 9
46243: PUSH
46244: LD_INT 35
46246: PUSH
46247: LD_INT 110
46249: PUSH
46250: LD_INT 70
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46258: LD_VAR 0 6
46262: PPUSH
46263: CALL_OW 265
46267: PUSH
46268: LD_INT 25
46270: EQUAL
46271: IFFALSE 46292
// points := [ 80 , 65 , 100 ] ;
46273: LD_ADDR_VAR 0 9
46277: PUSH
46278: LD_INT 80
46280: PUSH
46281: LD_INT 65
46283: PUSH
46284: LD_INT 100
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46292: LD_VAR 0 6
46296: PPUSH
46297: CALL_OW 263
46301: PUSH
46302: LD_INT 1
46304: EQUAL
46305: IFFALSE 46340
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46307: LD_ADDR_VAR 0 10
46311: PUSH
46312: LD_VAR 0 10
46316: PUSH
46317: LD_VAR 0 6
46321: PPUSH
46322: CALL_OW 311
46326: PPUSH
46327: LD_INT 3
46329: PPUSH
46330: CALL_OW 259
46334: PUSH
46335: LD_INT 4
46337: MUL
46338: MUL
46339: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46340: LD_VAR 0 6
46344: PPUSH
46345: CALL_OW 263
46349: PUSH
46350: LD_INT 2
46352: EQUAL
46353: IFFALSE 46404
// begin j := IsControledBy ( i ) ;
46355: LD_ADDR_VAR 0 7
46359: PUSH
46360: LD_VAR 0 6
46364: PPUSH
46365: CALL_OW 312
46369: ST_TO_ADDR
// if j then
46370: LD_VAR 0 7
46374: IFFALSE 46404
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46376: LD_ADDR_VAR 0 10
46380: PUSH
46381: LD_VAR 0 10
46385: PUSH
46386: LD_VAR 0 7
46390: PPUSH
46391: LD_INT 3
46393: PPUSH
46394: CALL_OW 259
46398: PUSH
46399: LD_INT 3
46401: MUL
46402: MUL
46403: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46404: LD_VAR 0 6
46408: PPUSH
46409: CALL_OW 264
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: LD_INT 6
46419: PUSH
46420: LD_INT 46
46422: PUSH
46423: LD_INT 44
46425: PUSH
46426: LD_INT 47
46428: PUSH
46429: LD_INT 45
46431: PUSH
46432: LD_INT 28
46434: PUSH
46435: LD_INT 7
46437: PUSH
46438: LD_INT 27
46440: PUSH
46441: LD_INT 29
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: IN
46456: IFFALSE 46476
46458: PUSH
46459: LD_VAR 0 1
46463: PPUSH
46464: LD_INT 52
46466: PPUSH
46467: CALL_OW 321
46471: PUSH
46472: LD_INT 2
46474: EQUAL
46475: AND
46476: IFFALSE 46493
// bpoints := bpoints * 1.2 ;
46478: LD_ADDR_VAR 0 10
46482: PUSH
46483: LD_VAR 0 10
46487: PUSH
46488: LD_REAL  1.20000000000000E+0000
46491: MUL
46492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46493: LD_VAR 0 6
46497: PPUSH
46498: CALL_OW 264
46502: PUSH
46503: LD_INT 6
46505: PUSH
46506: LD_INT 46
46508: PUSH
46509: LD_INT 47
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: IN
46517: IFFALSE 46534
// bpoints := bpoints * 1.2 ;
46519: LD_ADDR_VAR 0 10
46523: PUSH
46524: LD_VAR 0 10
46528: PUSH
46529: LD_REAL  1.20000000000000E+0000
46532: MUL
46533: ST_TO_ADDR
// end ; unit_building :
46534: GO 46548
46536: LD_INT 3
46538: DOUBLE
46539: EQUAL
46540: IFTRUE 46544
46542: GO 46547
46544: POP
// ; end ;
46545: GO 46548
46547: POP
// for j = 1 to 3 do
46548: LD_ADDR_VAR 0 7
46552: PUSH
46553: DOUBLE
46554: LD_INT 1
46556: DEC
46557: ST_TO_ADDR
46558: LD_INT 3
46560: PUSH
46561: FOR_TO
46562: IFFALSE 46615
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46564: LD_ADDR_VAR 0 5
46568: PUSH
46569: LD_VAR 0 5
46573: PPUSH
46574: LD_VAR 0 7
46578: PPUSH
46579: LD_VAR 0 5
46583: PUSH
46584: LD_VAR 0 7
46588: ARRAY
46589: PUSH
46590: LD_VAR 0 9
46594: PUSH
46595: LD_VAR 0 7
46599: ARRAY
46600: PUSH
46601: LD_VAR 0 10
46605: MUL
46606: PLUS
46607: PPUSH
46608: CALL_OW 1
46612: ST_TO_ADDR
46613: GO 46561
46615: POP
46616: POP
// end ;
46617: GO 45090
46619: POP
46620: POP
// result := Replace ( result , 4 , tmp ) ;
46621: LD_ADDR_VAR 0 5
46625: PUSH
46626: LD_VAR 0 5
46630: PPUSH
46631: LD_INT 4
46633: PPUSH
46634: LD_VAR 0 8
46638: PPUSH
46639: CALL_OW 1
46643: ST_TO_ADDR
// end ;
46644: LD_VAR 0 5
46648: RET
// export function DangerAtRange ( unit , range ) ; begin
46649: LD_INT 0
46651: PPUSH
// if not unit then
46652: LD_VAR 0 1
46656: NOT
46657: IFFALSE 46661
// exit ;
46659: GO 46706
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46661: LD_ADDR_VAR 0 3
46665: PUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: CALL_OW 255
46675: PPUSH
46676: LD_VAR 0 1
46680: PPUSH
46681: CALL_OW 250
46685: PPUSH
46686: LD_VAR 0 1
46690: PPUSH
46691: CALL_OW 251
46695: PPUSH
46696: LD_VAR 0 2
46700: PPUSH
46701: CALL 44940 0 4
46705: ST_TO_ADDR
// end ;
46706: LD_VAR 0 3
46710: RET
// export function DangerInArea ( side , area ) ; begin
46711: LD_INT 0
46713: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46714: LD_ADDR_VAR 0 3
46718: PUSH
46719: LD_VAR 0 2
46723: PPUSH
46724: LD_INT 81
46726: PUSH
46727: LD_VAR 0 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PPUSH
46736: CALL_OW 70
46740: ST_TO_ADDR
// end ;
46741: LD_VAR 0 3
46745: RET
// export function IsExtension ( b ) ; begin
46746: LD_INT 0
46748: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46749: LD_ADDR_VAR 0 2
46753: PUSH
46754: LD_VAR 0 1
46758: PUSH
46759: LD_INT 23
46761: PUSH
46762: LD_INT 20
46764: PUSH
46765: LD_INT 22
46767: PUSH
46768: LD_INT 17
46770: PUSH
46771: LD_INT 24
46773: PUSH
46774: LD_INT 21
46776: PUSH
46777: LD_INT 19
46779: PUSH
46780: LD_INT 16
46782: PUSH
46783: LD_INT 25
46785: PUSH
46786: LD_INT 18
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: IN
46801: ST_TO_ADDR
// end ;
46802: LD_VAR 0 2
46806: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46807: LD_INT 0
46809: PPUSH
46810: PPUSH
46811: PPUSH
// result := [ ] ;
46812: LD_ADDR_VAR 0 4
46816: PUSH
46817: EMPTY
46818: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46819: LD_ADDR_VAR 0 5
46823: PUSH
46824: LD_VAR 0 2
46828: PPUSH
46829: LD_INT 21
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PPUSH
46839: CALL_OW 70
46843: ST_TO_ADDR
// if not tmp then
46844: LD_VAR 0 5
46848: NOT
46849: IFFALSE 46853
// exit ;
46851: GO 46917
// if checkLink then
46853: LD_VAR 0 3
46857: IFFALSE 46907
// begin for i in tmp do
46859: LD_ADDR_VAR 0 6
46863: PUSH
46864: LD_VAR 0 5
46868: PUSH
46869: FOR_IN
46870: IFFALSE 46905
// if GetBase ( i ) <> base then
46872: LD_VAR 0 6
46876: PPUSH
46877: CALL_OW 274
46881: PUSH
46882: LD_VAR 0 1
46886: NONEQUAL
46887: IFFALSE 46903
// ComLinkToBase ( base , i ) ;
46889: LD_VAR 0 1
46893: PPUSH
46894: LD_VAR 0 6
46898: PPUSH
46899: CALL_OW 169
46903: GO 46869
46905: POP
46906: POP
// end ; result := tmp ;
46907: LD_ADDR_VAR 0 4
46911: PUSH
46912: LD_VAR 0 5
46916: ST_TO_ADDR
// end ;
46917: LD_VAR 0 4
46921: RET
// export function ComComplete ( units , b ) ; var i ; begin
46922: LD_INT 0
46924: PPUSH
46925: PPUSH
// if not units then
46926: LD_VAR 0 1
46930: NOT
46931: IFFALSE 46935
// exit ;
46933: GO 47025
// for i in units do
46935: LD_ADDR_VAR 0 4
46939: PUSH
46940: LD_VAR 0 1
46944: PUSH
46945: FOR_IN
46946: IFFALSE 47023
// if BuildingStatus ( b ) = bs_build then
46948: LD_VAR 0 2
46952: PPUSH
46953: CALL_OW 461
46957: PUSH
46958: LD_INT 1
46960: EQUAL
46961: IFFALSE 47021
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46963: LD_VAR 0 4
46967: PPUSH
46968: LD_STRING h
46970: PUSH
46971: LD_VAR 0 2
46975: PPUSH
46976: CALL_OW 250
46980: PUSH
46981: LD_VAR 0 2
46985: PPUSH
46986: CALL_OW 251
46990: PUSH
46991: LD_VAR 0 2
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: PUSH
47014: EMPTY
47015: LIST
47016: PPUSH
47017: CALL_OW 446
47021: GO 46945
47023: POP
47024: POP
// end ;
47025: LD_VAR 0 3
47029: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47030: LD_INT 0
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
47036: PPUSH
47037: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47038: LD_VAR 0 1
47042: NOT
47043: IFTRUE 47060
47045: PUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: CALL_OW 263
47055: PUSH
47056: LD_INT 2
47058: NONEQUAL
47059: OR
47060: IFFALSE 47064
// exit ;
47062: GO 47380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47064: LD_ADDR_VAR 0 6
47068: PUSH
47069: LD_INT 22
47071: PUSH
47072: LD_VAR 0 1
47076: PPUSH
47077: CALL_OW 255
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 30
47091: PUSH
47092: LD_INT 36
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 34
47101: PUSH
47102: LD_INT 31
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PPUSH
47118: CALL_OW 69
47122: ST_TO_ADDR
// if not tmp then
47123: LD_VAR 0 6
47127: NOT
47128: IFFALSE 47132
// exit ;
47130: GO 47380
// result := [ ] ;
47132: LD_ADDR_VAR 0 2
47136: PUSH
47137: EMPTY
47138: ST_TO_ADDR
// for i in tmp do
47139: LD_ADDR_VAR 0 3
47143: PUSH
47144: LD_VAR 0 6
47148: PUSH
47149: FOR_IN
47150: IFFALSE 47221
// begin t := UnitsInside ( i ) ;
47152: LD_ADDR_VAR 0 4
47156: PUSH
47157: LD_VAR 0 3
47161: PPUSH
47162: CALL_OW 313
47166: ST_TO_ADDR
// if t then
47167: LD_VAR 0 4
47171: IFFALSE 47219
// for j in t do
47173: LD_ADDR_VAR 0 7
47177: PUSH
47178: LD_VAR 0 4
47182: PUSH
47183: FOR_IN
47184: IFFALSE 47217
// result := Replace ( result , result + 1 , j ) ;
47186: LD_ADDR_VAR 0 2
47190: PUSH
47191: LD_VAR 0 2
47195: PPUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 1
47203: PLUS
47204: PPUSH
47205: LD_VAR 0 7
47209: PPUSH
47210: CALL_OW 1
47214: ST_TO_ADDR
47215: GO 47183
47217: POP
47218: POP
// end ;
47219: GO 47149
47221: POP
47222: POP
// if not result then
47223: LD_VAR 0 2
47227: NOT
47228: IFFALSE 47232
// exit ;
47230: GO 47380
// mech := result [ 1 ] ;
47232: LD_ADDR_VAR 0 5
47236: PUSH
47237: LD_VAR 0 2
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: ST_TO_ADDR
// if result > 1 then
47246: LD_VAR 0 2
47250: PUSH
47251: LD_INT 1
47253: GREATER
47254: IFFALSE 47366
// begin for i = 2 to result do
47256: LD_ADDR_VAR 0 3
47260: PUSH
47261: DOUBLE
47262: LD_INT 2
47264: DEC
47265: ST_TO_ADDR
47266: LD_VAR 0 2
47270: PUSH
47271: FOR_TO
47272: IFFALSE 47364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47274: LD_ADDR_VAR 0 4
47278: PUSH
47279: LD_VAR 0 2
47283: PUSH
47284: LD_VAR 0 3
47288: ARRAY
47289: PPUSH
47290: LD_INT 3
47292: PPUSH
47293: CALL_OW 259
47297: PUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_VAR 0 3
47307: ARRAY
47308: PPUSH
47309: CALL_OW 432
47313: MINUS
47314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47315: LD_VAR 0 4
47319: PUSH
47320: LD_VAR 0 5
47324: PPUSH
47325: LD_INT 3
47327: PPUSH
47328: CALL_OW 259
47332: PUSH
47333: LD_VAR 0 5
47337: PPUSH
47338: CALL_OW 432
47342: MINUS
47343: GREATEREQUAL
47344: IFFALSE 47362
// mech := result [ i ] ;
47346: LD_ADDR_VAR 0 5
47350: PUSH
47351: LD_VAR 0 2
47355: PUSH
47356: LD_VAR 0 3
47360: ARRAY
47361: ST_TO_ADDR
// end ;
47362: GO 47271
47364: POP
47365: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47366: LD_VAR 0 1
47370: PPUSH
47371: LD_VAR 0 5
47375: PPUSH
47376: CALL_OW 135
// end ;
47380: LD_VAR 0 2
47384: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47385: LD_INT 0
47387: PPUSH
47388: PPUSH
47389: PPUSH
47390: PPUSH
47391: PPUSH
47392: PPUSH
47393: PPUSH
47394: PPUSH
47395: PPUSH
47396: PPUSH
47397: PPUSH
47398: PPUSH
47399: PPUSH
// result := [ ] ;
47400: LD_ADDR_VAR 0 7
47404: PUSH
47405: EMPTY
47406: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47407: LD_VAR 0 1
47411: PPUSH
47412: CALL_OW 266
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: IN
47427: NOT
47428: IFFALSE 47432
// exit ;
47430: GO 49072
// if name then
47432: LD_VAR 0 3
47436: IFFALSE 47452
// SetBName ( base_dep , name ) ;
47438: LD_VAR 0 1
47442: PPUSH
47443: LD_VAR 0 3
47447: PPUSH
47448: CALL_OW 500
// base := GetBase ( base_dep ) ;
47452: LD_ADDR_VAR 0 15
47456: PUSH
47457: LD_VAR 0 1
47461: PPUSH
47462: CALL_OW 274
47466: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47467: LD_ADDR_VAR 0 16
47471: PUSH
47472: LD_VAR 0 1
47476: PPUSH
47477: CALL_OW 255
47481: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47482: LD_ADDR_VAR 0 17
47486: PUSH
47487: LD_VAR 0 1
47491: PPUSH
47492: CALL_OW 248
47496: ST_TO_ADDR
// if sources then
47497: LD_VAR 0 5
47501: IFFALSE 47548
// for i = 1 to 3 do
47503: LD_ADDR_VAR 0 8
47507: PUSH
47508: DOUBLE
47509: LD_INT 1
47511: DEC
47512: ST_TO_ADDR
47513: LD_INT 3
47515: PUSH
47516: FOR_TO
47517: IFFALSE 47546
// AddResourceType ( base , i , sources [ i ] ) ;
47519: LD_VAR 0 15
47523: PPUSH
47524: LD_VAR 0 8
47528: PPUSH
47529: LD_VAR 0 5
47533: PUSH
47534: LD_VAR 0 8
47538: ARRAY
47539: PPUSH
47540: CALL_OW 276
47544: GO 47516
47546: POP
47547: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47548: LD_ADDR_VAR 0 18
47552: PUSH
47553: LD_VAR 0 15
47557: PPUSH
47558: LD_VAR 0 2
47562: PPUSH
47563: LD_INT 1
47565: PPUSH
47566: CALL 46807 0 3
47570: ST_TO_ADDR
// InitHc ;
47571: CALL_OW 19
// InitUc ;
47575: CALL_OW 18
// uc_side := side ;
47579: LD_ADDR_OWVAR 20
47583: PUSH
47584: LD_VAR 0 16
47588: ST_TO_ADDR
// uc_nation := nation ;
47589: LD_ADDR_OWVAR 21
47593: PUSH
47594: LD_VAR 0 17
47598: ST_TO_ADDR
// if buildings then
47599: LD_VAR 0 18
47603: IFFALSE 48931
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47605: LD_ADDR_VAR 0 19
47609: PUSH
47610: LD_VAR 0 18
47614: PPUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 30
47620: PUSH
47621: LD_INT 29
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 30
47630: PUSH
47631: LD_INT 30
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: PPUSH
47643: CALL_OW 72
47647: ST_TO_ADDR
// if tmp then
47648: LD_VAR 0 19
47652: IFFALSE 47700
// for i in tmp do
47654: LD_ADDR_VAR 0 8
47658: PUSH
47659: LD_VAR 0 19
47663: PUSH
47664: FOR_IN
47665: IFFALSE 47698
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47667: LD_VAR 0 8
47671: PPUSH
47672: CALL_OW 250
47676: PPUSH
47677: LD_VAR 0 8
47681: PPUSH
47682: CALL_OW 251
47686: PPUSH
47687: LD_VAR 0 16
47691: PPUSH
47692: CALL_OW 441
47696: GO 47664
47698: POP
47699: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47700: LD_VAR 0 18
47704: PPUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 30
47710: PUSH
47711: LD_INT 32
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 30
47720: PUSH
47721: LD_INT 33
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: PPUSH
47733: CALL_OW 72
47737: IFFALSE 47825
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47739: LD_ADDR_VAR 0 8
47743: PUSH
47744: LD_VAR 0 18
47748: PPUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 30
47754: PUSH
47755: LD_INT 32
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 30
47764: PUSH
47765: LD_INT 33
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: PPUSH
47777: CALL_OW 72
47781: PUSH
47782: FOR_IN
47783: IFFALSE 47823
// begin if not GetBWeapon ( i ) then
47785: LD_VAR 0 8
47789: PPUSH
47790: CALL_OW 269
47794: NOT
47795: IFFALSE 47821
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47797: LD_VAR 0 8
47801: PPUSH
47802: LD_VAR 0 8
47806: PPUSH
47807: LD_VAR 0 2
47811: PPUSH
47812: CALL 49077 0 2
47816: PPUSH
47817: CALL_OW 431
// end ;
47821: GO 47782
47823: POP
47824: POP
// end ; for i = 1 to personel do
47825: LD_ADDR_VAR 0 8
47829: PUSH
47830: DOUBLE
47831: LD_INT 1
47833: DEC
47834: ST_TO_ADDR
47835: LD_VAR 0 6
47839: PUSH
47840: FOR_TO
47841: IFFALSE 48911
// begin if i > 4 then
47843: LD_VAR 0 8
47847: PUSH
47848: LD_INT 4
47850: GREATER
47851: IFFALSE 47855
// break ;
47853: GO 48911
// case i of 1 :
47855: LD_VAR 0 8
47859: PUSH
47860: LD_INT 1
47862: DOUBLE
47863: EQUAL
47864: IFTRUE 47868
47866: GO 47948
47868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47869: LD_ADDR_VAR 0 12
47873: PUSH
47874: LD_VAR 0 18
47878: PPUSH
47879: LD_INT 22
47881: PUSH
47882: LD_VAR 0 16
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 58
47893: PUSH
47894: EMPTY
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 30
47902: PUSH
47903: LD_INT 32
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 30
47912: PUSH
47913: LD_INT 4
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 30
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: PPUSH
47941: CALL_OW 72
47945: ST_TO_ADDR
47946: GO 48170
47948: LD_INT 2
47950: DOUBLE
47951: EQUAL
47952: IFTRUE 47956
47954: GO 48018
47956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47957: LD_ADDR_VAR 0 12
47961: PUSH
47962: LD_VAR 0 18
47966: PPUSH
47967: LD_INT 22
47969: PUSH
47970: LD_VAR 0 16
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 30
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 30
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PPUSH
48011: CALL_OW 72
48015: ST_TO_ADDR
48016: GO 48170
48018: LD_INT 3
48020: DOUBLE
48021: EQUAL
48022: IFTRUE 48026
48024: GO 48088
48026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48027: LD_ADDR_VAR 0 12
48031: PUSH
48032: LD_VAR 0 18
48036: PPUSH
48037: LD_INT 22
48039: PUSH
48040: LD_VAR 0 16
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 30
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 30
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PPUSH
48081: CALL_OW 72
48085: ST_TO_ADDR
48086: GO 48170
48088: LD_INT 4
48090: DOUBLE
48091: EQUAL
48092: IFTRUE 48096
48094: GO 48169
48096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48097: LD_ADDR_VAR 0 12
48101: PUSH
48102: LD_VAR 0 18
48106: PPUSH
48107: LD_INT 22
48109: PUSH
48110: LD_VAR 0 16
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 30
48124: PUSH
48125: LD_INT 6
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 30
48134: PUSH
48135: LD_INT 7
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 30
48144: PUSH
48145: LD_INT 8
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PPUSH
48162: CALL_OW 72
48166: ST_TO_ADDR
48167: GO 48170
48169: POP
// if i = 1 then
48170: LD_VAR 0 8
48174: PUSH
48175: LD_INT 1
48177: EQUAL
48178: IFFALSE 48289
// begin tmp := [ ] ;
48180: LD_ADDR_VAR 0 19
48184: PUSH
48185: EMPTY
48186: ST_TO_ADDR
// for j in f do
48187: LD_ADDR_VAR 0 9
48191: PUSH
48192: LD_VAR 0 12
48196: PUSH
48197: FOR_IN
48198: IFFALSE 48271
// if GetBType ( j ) = b_bunker then
48200: LD_VAR 0 9
48204: PPUSH
48205: CALL_OW 266
48209: PUSH
48210: LD_INT 32
48212: EQUAL
48213: IFFALSE 48240
// tmp := Insert ( tmp , 1 , j ) else
48215: LD_ADDR_VAR 0 19
48219: PUSH
48220: LD_VAR 0 19
48224: PPUSH
48225: LD_INT 1
48227: PPUSH
48228: LD_VAR 0 9
48232: PPUSH
48233: CALL_OW 2
48237: ST_TO_ADDR
48238: GO 48269
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48240: LD_ADDR_VAR 0 19
48244: PUSH
48245: LD_VAR 0 19
48249: PPUSH
48250: LD_VAR 0 19
48254: PUSH
48255: LD_INT 1
48257: PLUS
48258: PPUSH
48259: LD_VAR 0 9
48263: PPUSH
48264: CALL_OW 2
48268: ST_TO_ADDR
48269: GO 48197
48271: POP
48272: POP
// if tmp then
48273: LD_VAR 0 19
48277: IFFALSE 48289
// f := tmp ;
48279: LD_ADDR_VAR 0 12
48283: PUSH
48284: LD_VAR 0 19
48288: ST_TO_ADDR
// end ; x := personel [ i ] ;
48289: LD_ADDR_VAR 0 13
48293: PUSH
48294: LD_VAR 0 6
48298: PUSH
48299: LD_VAR 0 8
48303: ARRAY
48304: ST_TO_ADDR
// if x = - 1 then
48305: LD_VAR 0 13
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: EQUAL
48314: IFFALSE 48525
// begin for j in f do
48316: LD_ADDR_VAR 0 9
48320: PUSH
48321: LD_VAR 0 12
48325: PUSH
48326: FOR_IN
48327: IFFALSE 48521
// repeat InitHc ;
48329: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48333: LD_VAR 0 9
48337: PPUSH
48338: CALL_OW 266
48342: PUSH
48343: LD_INT 5
48345: EQUAL
48346: IFFALSE 48416
// begin if UnitsInside ( j ) < 3 then
48348: LD_VAR 0 9
48352: PPUSH
48353: CALL_OW 313
48357: PUSH
48358: LD_INT 3
48360: LESS
48361: IFFALSE 48397
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48363: LD_INT 0
48365: PPUSH
48366: LD_INT 5
48368: PUSH
48369: LD_INT 8
48371: PUSH
48372: LD_INT 9
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: PUSH
48380: LD_VAR 0 17
48384: ARRAY
48385: PPUSH
48386: LD_VAR 0 4
48390: PPUSH
48391: CALL_OW 380
48395: GO 48414
// PrepareHuman ( false , i , skill ) ;
48397: LD_INT 0
48399: PPUSH
48400: LD_VAR 0 8
48404: PPUSH
48405: LD_VAR 0 4
48409: PPUSH
48410: CALL_OW 380
// end else
48414: GO 48433
// PrepareHuman ( false , i , skill ) ;
48416: LD_INT 0
48418: PPUSH
48419: LD_VAR 0 8
48423: PPUSH
48424: LD_VAR 0 4
48428: PPUSH
48429: CALL_OW 380
// un := CreateHuman ;
48433: LD_ADDR_VAR 0 14
48437: PUSH
48438: CALL_OW 44
48442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48443: LD_ADDR_VAR 0 7
48447: PUSH
48448: LD_VAR 0 7
48452: PPUSH
48453: LD_INT 1
48455: PPUSH
48456: LD_VAR 0 14
48460: PPUSH
48461: CALL_OW 2
48465: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48466: LD_VAR 0 14
48470: PPUSH
48471: LD_VAR 0 9
48475: PPUSH
48476: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48480: LD_VAR 0 9
48484: PPUSH
48485: CALL_OW 313
48489: PUSH
48490: LD_INT 6
48492: EQUAL
48493: IFTRUE 48517
48495: PUSH
48496: LD_VAR 0 9
48500: PPUSH
48501: CALL_OW 266
48505: PUSH
48506: LD_INT 32
48508: PUSH
48509: LD_INT 31
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: IN
48516: OR
48517: IFFALSE 48329
48519: GO 48326
48521: POP
48522: POP
// end else
48523: GO 48909
// for j = 1 to x do
48525: LD_ADDR_VAR 0 9
48529: PUSH
48530: DOUBLE
48531: LD_INT 1
48533: DEC
48534: ST_TO_ADDR
48535: LD_VAR 0 13
48539: PUSH
48540: FOR_TO
48541: IFFALSE 48907
// begin InitHc ;
48543: CALL_OW 19
// if not f then
48547: LD_VAR 0 12
48551: NOT
48552: IFFALSE 48641
// begin PrepareHuman ( false , i , skill ) ;
48554: LD_INT 0
48556: PPUSH
48557: LD_VAR 0 8
48561: PPUSH
48562: LD_VAR 0 4
48566: PPUSH
48567: CALL_OW 380
// un := CreateHuman ;
48571: LD_ADDR_VAR 0 14
48575: PUSH
48576: CALL_OW 44
48580: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48581: LD_ADDR_VAR 0 7
48585: PUSH
48586: LD_VAR 0 7
48590: PPUSH
48591: LD_INT 1
48593: PPUSH
48594: LD_VAR 0 14
48598: PPUSH
48599: CALL_OW 2
48603: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48604: LD_VAR 0 14
48608: PPUSH
48609: LD_VAR 0 1
48613: PPUSH
48614: CALL_OW 250
48618: PPUSH
48619: LD_VAR 0 1
48623: PPUSH
48624: CALL_OW 251
48628: PPUSH
48629: LD_INT 10
48631: PPUSH
48632: LD_INT 0
48634: PPUSH
48635: CALL_OW 50
// continue ;
48639: GO 48540
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48641: LD_VAR 0 12
48645: PUSH
48646: LD_INT 1
48648: ARRAY
48649: PPUSH
48650: CALL_OW 313
48654: IFFALSE 48682
48656: PUSH
48657: LD_VAR 0 12
48661: PUSH
48662: LD_INT 1
48664: ARRAY
48665: PPUSH
48666: CALL_OW 266
48670: PUSH
48671: LD_INT 32
48673: PUSH
48674: LD_INT 31
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: IN
48681: AND
48682: IFTRUE 48703
48684: PUSH
48685: LD_VAR 0 12
48689: PUSH
48690: LD_INT 1
48692: ARRAY
48693: PPUSH
48694: CALL_OW 313
48698: PUSH
48699: LD_INT 6
48701: EQUAL
48702: OR
48703: IFFALSE 48723
// f := Delete ( f , 1 ) ;
48705: LD_ADDR_VAR 0 12
48709: PUSH
48710: LD_VAR 0 12
48714: PPUSH
48715: LD_INT 1
48717: PPUSH
48718: CALL_OW 3
48722: ST_TO_ADDR
// if not f then
48723: LD_VAR 0 12
48727: NOT
48728: IFFALSE 48746
// begin x := x + 2 ;
48730: LD_ADDR_VAR 0 13
48734: PUSH
48735: LD_VAR 0 13
48739: PUSH
48740: LD_INT 2
48742: PLUS
48743: ST_TO_ADDR
// continue ;
48744: GO 48540
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48746: LD_VAR 0 12
48750: PUSH
48751: LD_INT 1
48753: ARRAY
48754: PPUSH
48755: CALL_OW 266
48759: PUSH
48760: LD_INT 5
48762: EQUAL
48763: IFFALSE 48837
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48765: LD_VAR 0 12
48769: PUSH
48770: LD_INT 1
48772: ARRAY
48773: PPUSH
48774: CALL_OW 313
48778: PUSH
48779: LD_INT 3
48781: LESS
48782: IFFALSE 48818
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48784: LD_INT 0
48786: PPUSH
48787: LD_INT 5
48789: PUSH
48790: LD_INT 8
48792: PUSH
48793: LD_INT 9
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: PUSH
48801: LD_VAR 0 17
48805: ARRAY
48806: PPUSH
48807: LD_VAR 0 4
48811: PPUSH
48812: CALL_OW 380
48816: GO 48835
// PrepareHuman ( false , i , skill ) ;
48818: LD_INT 0
48820: PPUSH
48821: LD_VAR 0 8
48825: PPUSH
48826: LD_VAR 0 4
48830: PPUSH
48831: CALL_OW 380
// end else
48835: GO 48854
// PrepareHuman ( false , i , skill ) ;
48837: LD_INT 0
48839: PPUSH
48840: LD_VAR 0 8
48844: PPUSH
48845: LD_VAR 0 4
48849: PPUSH
48850: CALL_OW 380
// un := CreateHuman ;
48854: LD_ADDR_VAR 0 14
48858: PUSH
48859: CALL_OW 44
48863: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48864: LD_ADDR_VAR 0 7
48868: PUSH
48869: LD_VAR 0 7
48873: PPUSH
48874: LD_INT 1
48876: PPUSH
48877: LD_VAR 0 14
48881: PPUSH
48882: CALL_OW 2
48886: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48887: LD_VAR 0 14
48891: PPUSH
48892: LD_VAR 0 12
48896: PUSH
48897: LD_INT 1
48899: ARRAY
48900: PPUSH
48901: CALL_OW 52
// end ;
48905: GO 48540
48907: POP
48908: POP
// end ;
48909: GO 47840
48911: POP
48912: POP
// result := result ^ buildings ;
48913: LD_ADDR_VAR 0 7
48917: PUSH
48918: LD_VAR 0 7
48922: PUSH
48923: LD_VAR 0 18
48927: ADD
48928: ST_TO_ADDR
// end else
48929: GO 49072
// begin for i = 1 to personel do
48931: LD_ADDR_VAR 0 8
48935: PUSH
48936: DOUBLE
48937: LD_INT 1
48939: DEC
48940: ST_TO_ADDR
48941: LD_VAR 0 6
48945: PUSH
48946: FOR_TO
48947: IFFALSE 49070
// begin if i > 4 then
48949: LD_VAR 0 8
48953: PUSH
48954: LD_INT 4
48956: GREATER
48957: IFFALSE 48961
// break ;
48959: GO 49070
// x := personel [ i ] ;
48961: LD_ADDR_VAR 0 13
48965: PUSH
48966: LD_VAR 0 6
48970: PUSH
48971: LD_VAR 0 8
48975: ARRAY
48976: ST_TO_ADDR
// if x = - 1 then
48977: LD_VAR 0 13
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: EQUAL
48986: IFFALSE 48990
// continue ;
48988: GO 48946
// PrepareHuman ( false , i , skill ) ;
48990: LD_INT 0
48992: PPUSH
48993: LD_VAR 0 8
48997: PPUSH
48998: LD_VAR 0 4
49002: PPUSH
49003: CALL_OW 380
// un := CreateHuman ;
49007: LD_ADDR_VAR 0 14
49011: PUSH
49012: CALL_OW 44
49016: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49017: LD_VAR 0 14
49021: PPUSH
49022: LD_VAR 0 1
49026: PPUSH
49027: CALL_OW 250
49031: PPUSH
49032: LD_VAR 0 1
49036: PPUSH
49037: CALL_OW 251
49041: PPUSH
49042: LD_INT 10
49044: PPUSH
49045: LD_INT 0
49047: PPUSH
49048: CALL_OW 50
// result := result ^ un ;
49052: LD_ADDR_VAR 0 7
49056: PUSH
49057: LD_VAR 0 7
49061: PUSH
49062: LD_VAR 0 14
49066: ADD
49067: ST_TO_ADDR
// end ;
49068: GO 48946
49070: POP
49071: POP
// end ; end ;
49072: LD_VAR 0 7
49076: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49077: LD_INT 0
49079: PPUSH
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
49094: PPUSH
// result := false ;
49095: LD_ADDR_VAR 0 3
49099: PUSH
49100: LD_INT 0
49102: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49103: LD_VAR 0 1
49107: NOT
49108: IFTRUE 49133
49110: PUSH
49111: LD_VAR 0 1
49115: PPUSH
49116: CALL_OW 266
49120: PUSH
49121: LD_INT 32
49123: PUSH
49124: LD_INT 33
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: IN
49131: NOT
49132: OR
49133: IFFALSE 49137
// exit ;
49135: GO 50272
// nat := GetNation ( tower ) ;
49137: LD_ADDR_VAR 0 12
49141: PUSH
49142: LD_VAR 0 1
49146: PPUSH
49147: CALL_OW 248
49151: ST_TO_ADDR
// side := GetSide ( tower ) ;
49152: LD_ADDR_VAR 0 16
49156: PUSH
49157: LD_VAR 0 1
49161: PPUSH
49162: CALL_OW 255
49166: ST_TO_ADDR
// x := GetX ( tower ) ;
49167: LD_ADDR_VAR 0 10
49171: PUSH
49172: LD_VAR 0 1
49176: PPUSH
49177: CALL_OW 250
49181: ST_TO_ADDR
// y := GetY ( tower ) ;
49182: LD_ADDR_VAR 0 11
49186: PUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 251
49196: ST_TO_ADDR
// if not x or not y then
49197: LD_VAR 0 10
49201: NOT
49202: IFTRUE 49211
49204: PUSH
49205: LD_VAR 0 11
49209: NOT
49210: OR
49211: IFFALSE 49215
// exit ;
49213: GO 50272
// weapon := 0 ;
49215: LD_ADDR_VAR 0 18
49219: PUSH
49220: LD_INT 0
49222: ST_TO_ADDR
// fac_list := [ ] ;
49223: LD_ADDR_VAR 0 17
49227: PUSH
49228: EMPTY
49229: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49230: LD_ADDR_VAR 0 6
49234: PUSH
49235: LD_VAR 0 1
49239: PPUSH
49240: CALL_OW 274
49244: PPUSH
49245: LD_VAR 0 2
49249: PPUSH
49250: LD_INT 0
49252: PPUSH
49253: CALL 46807 0 3
49257: PPUSH
49258: LD_INT 30
49260: PUSH
49261: LD_INT 3
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PPUSH
49268: CALL_OW 72
49272: ST_TO_ADDR
// if not factories then
49273: LD_VAR 0 6
49277: NOT
49278: IFFALSE 49282
// exit ;
49280: GO 50272
// for i in factories do
49282: LD_ADDR_VAR 0 8
49286: PUSH
49287: LD_VAR 0 6
49291: PUSH
49292: FOR_IN
49293: IFFALSE 49318
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49295: LD_ADDR_VAR 0 17
49299: PUSH
49300: LD_VAR 0 17
49304: PUSH
49305: LD_VAR 0 8
49309: PPUSH
49310: CALL_OW 478
49314: UNION
49315: ST_TO_ADDR
49316: GO 49292
49318: POP
49319: POP
// if not fac_list then
49320: LD_VAR 0 17
49324: NOT
49325: IFFALSE 49329
// exit ;
49327: GO 50272
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49329: LD_ADDR_VAR 0 5
49333: PUSH
49334: LD_INT 4
49336: PUSH
49337: LD_INT 5
49339: PUSH
49340: LD_INT 9
49342: PUSH
49343: LD_INT 10
49345: PUSH
49346: LD_INT 6
49348: PUSH
49349: LD_INT 7
49351: PUSH
49352: LD_INT 11
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 27
49366: PUSH
49367: LD_INT 28
49369: PUSH
49370: LD_INT 26
49372: PUSH
49373: LD_INT 30
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 43
49384: PUSH
49385: LD_INT 44
49387: PUSH
49388: LD_INT 46
49390: PUSH
49391: LD_INT 45
49393: PUSH
49394: LD_INT 47
49396: PUSH
49397: LD_INT 49
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: PUSH
49413: LD_VAR 0 12
49417: ARRAY
49418: ST_TO_ADDR
// list := list isect fac_list ;
49419: LD_ADDR_VAR 0 5
49423: PUSH
49424: LD_VAR 0 5
49428: PUSH
49429: LD_VAR 0 17
49433: ISECT
49434: ST_TO_ADDR
// if not list then
49435: LD_VAR 0 5
49439: NOT
49440: IFFALSE 49444
// exit ;
49442: GO 50272
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49444: LD_VAR 0 12
49448: PUSH
49449: LD_INT 3
49451: EQUAL
49452: IFFALSE 49464
49454: PUSH
49455: LD_INT 49
49457: PUSH
49458: LD_VAR 0 5
49462: IN
49463: AND
49464: IFFALSE 49484
49466: PUSH
49467: LD_INT 31
49469: PPUSH
49470: LD_VAR 0 16
49474: PPUSH
49475: CALL_OW 321
49479: PUSH
49480: LD_INT 2
49482: EQUAL
49483: AND
49484: IFFALSE 49544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49486: LD_INT 22
49488: PUSH
49489: LD_VAR 0 16
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 35
49500: PUSH
49501: LD_INT 49
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 91
49510: PUSH
49511: LD_VAR 0 1
49515: PUSH
49516: LD_INT 10
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: PPUSH
49529: CALL_OW 69
49533: NOT
49534: IFFALSE 49544
// weapon := ru_time_lapser ;
49536: LD_ADDR_VAR 0 18
49540: PUSH
49541: LD_INT 49
49543: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49544: LD_VAR 0 12
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: IN
49559: IFFALSE 49583
49561: PUSH
49562: LD_INT 11
49564: PUSH
49565: LD_VAR 0 5
49569: IN
49570: IFTRUE 49582
49572: PUSH
49573: LD_INT 30
49575: PUSH
49576: LD_VAR 0 5
49580: IN
49581: OR
49582: AND
49583: IFFALSE 49603
49585: PUSH
49586: LD_INT 6
49588: PPUSH
49589: LD_VAR 0 16
49593: PPUSH
49594: CALL_OW 321
49598: PUSH
49599: LD_INT 2
49601: EQUAL
49602: AND
49603: IFFALSE 49770
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49605: LD_INT 22
49607: PUSH
49608: LD_VAR 0 16
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: LD_INT 35
49622: PUSH
49623: LD_INT 11
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 35
49632: PUSH
49633: LD_INT 30
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 91
49647: PUSH
49648: LD_VAR 0 1
49652: PUSH
49653: LD_INT 18
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: PPUSH
49666: CALL_OW 69
49670: NOT
49671: IFFALSE 49747
49673: PUSH
49674: LD_INT 22
49676: PUSH
49677: LD_VAR 0 16
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 30
49691: PUSH
49692: LD_INT 32
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 30
49701: PUSH
49702: LD_INT 33
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 91
49716: PUSH
49717: LD_VAR 0 1
49721: PUSH
49722: LD_INT 12
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: PUSH
49735: EMPTY
49736: LIST
49737: PPUSH
49738: CALL_OW 69
49742: PUSH
49743: LD_INT 2
49745: GREATER
49746: AND
49747: IFFALSE 49770
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49749: LD_ADDR_VAR 0 18
49753: PUSH
49754: LD_INT 11
49756: PUSH
49757: LD_INT 30
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_VAR 0 12
49768: ARRAY
49769: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49770: LD_VAR 0 18
49774: NOT
49775: IFFALSE 49795
49777: PUSH
49778: LD_INT 40
49780: PPUSH
49781: LD_VAR 0 16
49785: PPUSH
49786: CALL_OW 321
49790: PUSH
49791: LD_INT 2
49793: EQUAL
49794: AND
49795: IFFALSE 49831
49797: PUSH
49798: LD_INT 7
49800: PUSH
49801: LD_VAR 0 5
49805: IN
49806: IFTRUE 49818
49808: PUSH
49809: LD_INT 28
49811: PUSH
49812: LD_VAR 0 5
49816: IN
49817: OR
49818: IFTRUE 49830
49820: PUSH
49821: LD_INT 45
49823: PUSH
49824: LD_VAR 0 5
49828: IN
49829: OR
49830: AND
49831: IFFALSE 50085
// begin hex := GetHexInfo ( x , y ) ;
49833: LD_ADDR_VAR 0 4
49837: PUSH
49838: LD_VAR 0 10
49842: PPUSH
49843: LD_VAR 0 11
49847: PPUSH
49848: CALL_OW 546
49852: ST_TO_ADDR
// if hex [ 1 ] then
49853: LD_VAR 0 4
49857: PUSH
49858: LD_INT 1
49860: ARRAY
49861: IFFALSE 49865
// exit ;
49863: GO 50272
// height := hex [ 2 ] ;
49865: LD_ADDR_VAR 0 15
49869: PUSH
49870: LD_VAR 0 4
49874: PUSH
49875: LD_INT 2
49877: ARRAY
49878: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49879: LD_ADDR_VAR 0 14
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: LD_INT 5
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// for i in tmp do
49902: LD_ADDR_VAR 0 8
49906: PUSH
49907: LD_VAR 0 14
49911: PUSH
49912: FOR_IN
49913: IFFALSE 50083
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49915: LD_ADDR_VAR 0 9
49919: PUSH
49920: LD_VAR 0 10
49924: PPUSH
49925: LD_VAR 0 8
49929: PPUSH
49930: LD_INT 5
49932: PPUSH
49933: CALL_OW 272
49937: PUSH
49938: LD_VAR 0 11
49942: PPUSH
49943: LD_VAR 0 8
49947: PPUSH
49948: LD_INT 5
49950: PPUSH
49951: CALL_OW 273
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49960: LD_VAR 0 9
49964: PUSH
49965: LD_INT 1
49967: ARRAY
49968: PPUSH
49969: LD_VAR 0 9
49973: PUSH
49974: LD_INT 2
49976: ARRAY
49977: PPUSH
49978: CALL_OW 488
49982: IFFALSE 50081
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49984: LD_ADDR_VAR 0 4
49988: PUSH
49989: LD_VAR 0 9
49993: PUSH
49994: LD_INT 1
49996: ARRAY
49997: PPUSH
49998: LD_VAR 0 9
50002: PUSH
50003: LD_INT 2
50005: ARRAY
50006: PPUSH
50007: CALL_OW 546
50011: ST_TO_ADDR
// if hex [ 1 ] then
50012: LD_VAR 0 4
50016: PUSH
50017: LD_INT 1
50019: ARRAY
50020: IFFALSE 50024
// continue ;
50022: GO 49912
// h := hex [ 2 ] ;
50024: LD_ADDR_VAR 0 13
50028: PUSH
50029: LD_VAR 0 4
50033: PUSH
50034: LD_INT 2
50036: ARRAY
50037: ST_TO_ADDR
// if h + 7 < height then
50038: LD_VAR 0 13
50042: PUSH
50043: LD_INT 7
50045: PLUS
50046: PUSH
50047: LD_VAR 0 15
50051: LESS
50052: IFFALSE 50081
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50054: LD_ADDR_VAR 0 18
50058: PUSH
50059: LD_INT 7
50061: PUSH
50062: LD_INT 28
50064: PUSH
50065: LD_INT 45
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: PUSH
50073: LD_VAR 0 12
50077: ARRAY
50078: ST_TO_ADDR
// break ;
50079: GO 50083
// end ; end ; end ;
50081: GO 49912
50083: POP
50084: POP
// end ; if not weapon then
50085: LD_VAR 0 18
50089: NOT
50090: IFFALSE 50150
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50092: LD_ADDR_VAR 0 5
50096: PUSH
50097: LD_VAR 0 5
50101: PUSH
50102: LD_INT 11
50104: PUSH
50105: LD_INT 30
50107: PUSH
50108: LD_INT 49
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: DIFF
50116: ST_TO_ADDR
// if not list then
50117: LD_VAR 0 5
50121: NOT
50122: IFFALSE 50126
// exit ;
50124: GO 50272
// weapon := list [ rand ( 1 , list ) ] ;
50126: LD_ADDR_VAR 0 18
50130: PUSH
50131: LD_VAR 0 5
50135: PUSH
50136: LD_INT 1
50138: PPUSH
50139: LD_VAR 0 5
50143: PPUSH
50144: CALL_OW 12
50148: ARRAY
50149: ST_TO_ADDR
// end ; if weapon then
50150: LD_VAR 0 18
50154: IFFALSE 50272
// begin tmp := CostOfWeapon ( weapon ) ;
50156: LD_ADDR_VAR 0 14
50160: PUSH
50161: LD_VAR 0 18
50165: PPUSH
50166: CALL_OW 451
50170: ST_TO_ADDR
// j := GetBase ( tower ) ;
50171: LD_ADDR_VAR 0 9
50175: PUSH
50176: LD_VAR 0 1
50180: PPUSH
50181: CALL_OW 274
50185: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50186: LD_VAR 0 9
50190: PPUSH
50191: LD_INT 1
50193: PPUSH
50194: CALL_OW 275
50198: PUSH
50199: LD_VAR 0 14
50203: PUSH
50204: LD_INT 1
50206: ARRAY
50207: GREATEREQUAL
50208: IFFALSE 50234
50210: PUSH
50211: LD_VAR 0 9
50215: PPUSH
50216: LD_INT 2
50218: PPUSH
50219: CALL_OW 275
50223: PUSH
50224: LD_VAR 0 14
50228: PUSH
50229: LD_INT 2
50231: ARRAY
50232: GREATEREQUAL
50233: AND
50234: IFFALSE 50260
50236: PUSH
50237: LD_VAR 0 9
50241: PPUSH
50242: LD_INT 3
50244: PPUSH
50245: CALL_OW 275
50249: PUSH
50250: LD_VAR 0 14
50254: PUSH
50255: LD_INT 3
50257: ARRAY
50258: GREATEREQUAL
50259: AND
50260: IFFALSE 50272
// result := weapon ;
50262: LD_ADDR_VAR 0 3
50266: PUSH
50267: LD_VAR 0 18
50271: ST_TO_ADDR
// end ; end ;
50272: LD_VAR 0 3
50276: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50277: LD_INT 0
50279: PPUSH
50280: PPUSH
// result := true ;
50281: LD_ADDR_VAR 0 3
50285: PUSH
50286: LD_INT 1
50288: ST_TO_ADDR
// if array1 = array2 then
50289: LD_VAR 0 1
50293: PUSH
50294: LD_VAR 0 2
50298: EQUAL
50299: IFFALSE 50359
// begin for i = 1 to array1 do
50301: LD_ADDR_VAR 0 4
50305: PUSH
50306: DOUBLE
50307: LD_INT 1
50309: DEC
50310: ST_TO_ADDR
50311: LD_VAR 0 1
50315: PUSH
50316: FOR_TO
50317: IFFALSE 50355
// if array1 [ i ] <> array2 [ i ] then
50319: LD_VAR 0 1
50323: PUSH
50324: LD_VAR 0 4
50328: ARRAY
50329: PUSH
50330: LD_VAR 0 2
50334: PUSH
50335: LD_VAR 0 4
50339: ARRAY
50340: NONEQUAL
50341: IFFALSE 50353
// begin result := false ;
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_INT 0
50350: ST_TO_ADDR
// break ;
50351: GO 50355
// end ;
50353: GO 50316
50355: POP
50356: POP
// end else
50357: GO 50367
// result := false ;
50359: LD_ADDR_VAR 0 3
50363: PUSH
50364: LD_INT 0
50366: ST_TO_ADDR
// end ;
50367: LD_VAR 0 3
50371: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50372: LD_INT 0
50374: PPUSH
50375: PPUSH
// if not array1 or not array2 then
50376: LD_VAR 0 1
50380: NOT
50381: IFTRUE 50390
50383: PUSH
50384: LD_VAR 0 2
50388: NOT
50389: OR
50390: IFFALSE 50394
// exit ;
50392: GO 50458
// result := true ;
50394: LD_ADDR_VAR 0 3
50398: PUSH
50399: LD_INT 1
50401: ST_TO_ADDR
// for i = 1 to array1 do
50402: LD_ADDR_VAR 0 4
50406: PUSH
50407: DOUBLE
50408: LD_INT 1
50410: DEC
50411: ST_TO_ADDR
50412: LD_VAR 0 1
50416: PUSH
50417: FOR_TO
50418: IFFALSE 50456
// if array1 [ i ] <> array2 [ i ] then
50420: LD_VAR 0 1
50424: PUSH
50425: LD_VAR 0 4
50429: ARRAY
50430: PUSH
50431: LD_VAR 0 2
50435: PUSH
50436: LD_VAR 0 4
50440: ARRAY
50441: NONEQUAL
50442: IFFALSE 50454
// begin result := false ;
50444: LD_ADDR_VAR 0 3
50448: PUSH
50449: LD_INT 0
50451: ST_TO_ADDR
// break ;
50452: GO 50456
// end ;
50454: GO 50417
50456: POP
50457: POP
// end ;
50458: LD_VAR 0 3
50462: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50463: LD_INT 0
50465: PPUSH
50466: PPUSH
50467: PPUSH
// pom := GetBase ( fac ) ;
50468: LD_ADDR_VAR 0 5
50472: PUSH
50473: LD_VAR 0 1
50477: PPUSH
50478: CALL_OW 274
50482: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50483: LD_ADDR_VAR 0 4
50487: PUSH
50488: LD_VAR 0 2
50492: PUSH
50493: LD_INT 1
50495: ARRAY
50496: PPUSH
50497: LD_VAR 0 2
50501: PUSH
50502: LD_INT 2
50504: ARRAY
50505: PPUSH
50506: LD_VAR 0 2
50510: PUSH
50511: LD_INT 3
50513: ARRAY
50514: PPUSH
50515: LD_VAR 0 2
50519: PUSH
50520: LD_INT 4
50522: ARRAY
50523: PPUSH
50524: CALL_OW 449
50528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50529: LD_ADDR_VAR 0 3
50533: PUSH
50534: LD_VAR 0 5
50538: PPUSH
50539: LD_INT 1
50541: PPUSH
50542: CALL_OW 275
50546: PUSH
50547: LD_VAR 0 4
50551: PUSH
50552: LD_INT 1
50554: ARRAY
50555: GREATEREQUAL
50556: IFFALSE 50582
50558: PUSH
50559: LD_VAR 0 5
50563: PPUSH
50564: LD_INT 2
50566: PPUSH
50567: CALL_OW 275
50571: PUSH
50572: LD_VAR 0 4
50576: PUSH
50577: LD_INT 2
50579: ARRAY
50580: GREATEREQUAL
50581: AND
50582: IFFALSE 50608
50584: PUSH
50585: LD_VAR 0 5
50589: PPUSH
50590: LD_INT 3
50592: PPUSH
50593: CALL_OW 275
50597: PUSH
50598: LD_VAR 0 4
50602: PUSH
50603: LD_INT 3
50605: ARRAY
50606: GREATEREQUAL
50607: AND
50608: ST_TO_ADDR
// end ;
50609: LD_VAR 0 3
50613: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50614: LD_INT 0
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
// pom := GetBase ( building ) ;
50620: LD_ADDR_VAR 0 3
50624: PUSH
50625: LD_VAR 0 1
50629: PPUSH
50630: CALL_OW 274
50634: ST_TO_ADDR
// if not pom then
50635: LD_VAR 0 3
50639: NOT
50640: IFFALSE 50644
// exit ;
50642: GO 50818
// btype := GetBType ( building ) ;
50644: LD_ADDR_VAR 0 5
50648: PUSH
50649: LD_VAR 0 1
50653: PPUSH
50654: CALL_OW 266
50658: ST_TO_ADDR
// if btype = b_armoury then
50659: LD_VAR 0 5
50663: PUSH
50664: LD_INT 4
50666: EQUAL
50667: IFFALSE 50677
// btype := b_barracks ;
50669: LD_ADDR_VAR 0 5
50673: PUSH
50674: LD_INT 5
50676: ST_TO_ADDR
// if btype = b_depot then
50677: LD_VAR 0 5
50681: PUSH
50682: LD_INT 0
50684: EQUAL
50685: IFFALSE 50695
// btype := b_warehouse ;
50687: LD_ADDR_VAR 0 5
50691: PUSH
50692: LD_INT 1
50694: ST_TO_ADDR
// if btype = b_workshop then
50695: LD_VAR 0 5
50699: PUSH
50700: LD_INT 2
50702: EQUAL
50703: IFFALSE 50713
// btype := b_factory ;
50705: LD_ADDR_VAR 0 5
50709: PUSH
50710: LD_INT 3
50712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50713: LD_ADDR_VAR 0 4
50717: PUSH
50718: LD_VAR 0 5
50722: PPUSH
50723: LD_VAR 0 1
50727: PPUSH
50728: CALL_OW 248
50732: PPUSH
50733: CALL_OW 450
50737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50738: LD_ADDR_VAR 0 2
50742: PUSH
50743: LD_VAR 0 3
50747: PPUSH
50748: LD_INT 1
50750: PPUSH
50751: CALL_OW 275
50755: PUSH
50756: LD_VAR 0 4
50760: PUSH
50761: LD_INT 1
50763: ARRAY
50764: GREATEREQUAL
50765: IFFALSE 50791
50767: PUSH
50768: LD_VAR 0 3
50772: PPUSH
50773: LD_INT 2
50775: PPUSH
50776: CALL_OW 275
50780: PUSH
50781: LD_VAR 0 4
50785: PUSH
50786: LD_INT 2
50788: ARRAY
50789: GREATEREQUAL
50790: AND
50791: IFFALSE 50817
50793: PUSH
50794: LD_VAR 0 3
50798: PPUSH
50799: LD_INT 3
50801: PPUSH
50802: CALL_OW 275
50806: PUSH
50807: LD_VAR 0 4
50811: PUSH
50812: LD_INT 3
50814: ARRAY
50815: GREATEREQUAL
50816: AND
50817: ST_TO_ADDR
// end ;
50818: LD_VAR 0 2
50822: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50823: LD_INT 0
50825: PPUSH
50826: PPUSH
50827: PPUSH
// pom := GetBase ( building ) ;
50828: LD_ADDR_VAR 0 4
50832: PUSH
50833: LD_VAR 0 1
50837: PPUSH
50838: CALL_OW 274
50842: ST_TO_ADDR
// if not pom then
50843: LD_VAR 0 4
50847: NOT
50848: IFFALSE 50852
// exit ;
50850: GO 50957
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50852: LD_ADDR_VAR 0 5
50856: PUSH
50857: LD_VAR 0 2
50861: PPUSH
50862: LD_VAR 0 1
50866: PPUSH
50867: CALL_OW 248
50871: PPUSH
50872: CALL_OW 450
50876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50877: LD_ADDR_VAR 0 3
50881: PUSH
50882: LD_VAR 0 4
50886: PPUSH
50887: LD_INT 1
50889: PPUSH
50890: CALL_OW 275
50894: PUSH
50895: LD_VAR 0 5
50899: PUSH
50900: LD_INT 1
50902: ARRAY
50903: GREATEREQUAL
50904: IFFALSE 50930
50906: PUSH
50907: LD_VAR 0 4
50911: PPUSH
50912: LD_INT 2
50914: PPUSH
50915: CALL_OW 275
50919: PUSH
50920: LD_VAR 0 5
50924: PUSH
50925: LD_INT 2
50927: ARRAY
50928: GREATEREQUAL
50929: AND
50930: IFFALSE 50956
50932: PUSH
50933: LD_VAR 0 4
50937: PPUSH
50938: LD_INT 3
50940: PPUSH
50941: CALL_OW 275
50945: PUSH
50946: LD_VAR 0 5
50950: PUSH
50951: LD_INT 3
50953: ARRAY
50954: GREATEREQUAL
50955: AND
50956: ST_TO_ADDR
// end ;
50957: LD_VAR 0 3
50961: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50962: LD_INT 0
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
50973: PPUSH
50974: PPUSH
// result := false ;
50975: LD_ADDR_VAR 0 8
50979: PUSH
50980: LD_INT 0
50982: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50983: LD_VAR 0 5
50987: NOT
50988: IFTRUE 50997
50990: PUSH
50991: LD_VAR 0 1
50995: NOT
50996: OR
50997: IFTRUE 51006
50999: PUSH
51000: LD_VAR 0 2
51004: NOT
51005: OR
51006: IFTRUE 51015
51008: PUSH
51009: LD_VAR 0 3
51013: NOT
51014: OR
51015: IFFALSE 51019
// exit ;
51017: GO 51845
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51019: LD_ADDR_VAR 0 14
51023: PUSH
51024: LD_VAR 0 1
51028: PPUSH
51029: LD_VAR 0 2
51033: PPUSH
51034: LD_VAR 0 3
51038: PPUSH
51039: LD_VAR 0 4
51043: PPUSH
51044: LD_VAR 0 5
51048: PUSH
51049: LD_INT 1
51051: ARRAY
51052: PPUSH
51053: CALL_OW 248
51057: PPUSH
51058: LD_INT 0
51060: PPUSH
51061: CALL 53126 0 6
51065: ST_TO_ADDR
// if not hexes then
51066: LD_VAR 0 14
51070: NOT
51071: IFFALSE 51075
// exit ;
51073: GO 51845
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51075: LD_ADDR_VAR 0 17
51079: PUSH
51080: LD_VAR 0 5
51084: PPUSH
51085: LD_INT 22
51087: PUSH
51088: LD_VAR 0 13
51092: PPUSH
51093: CALL_OW 255
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 30
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 30
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PPUSH
51134: CALL_OW 72
51138: ST_TO_ADDR
// for i = 1 to hexes do
51139: LD_ADDR_VAR 0 9
51143: PUSH
51144: DOUBLE
51145: LD_INT 1
51147: DEC
51148: ST_TO_ADDR
51149: LD_VAR 0 14
51153: PUSH
51154: FOR_TO
51155: IFFALSE 51843
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51157: LD_ADDR_VAR 0 13
51161: PUSH
51162: LD_VAR 0 14
51166: PUSH
51167: LD_VAR 0 9
51171: ARRAY
51172: PUSH
51173: LD_INT 1
51175: ARRAY
51176: PPUSH
51177: LD_VAR 0 14
51181: PUSH
51182: LD_VAR 0 9
51186: ARRAY
51187: PUSH
51188: LD_INT 2
51190: ARRAY
51191: PPUSH
51192: CALL_OW 428
51196: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51197: LD_VAR 0 14
51201: PUSH
51202: LD_VAR 0 9
51206: ARRAY
51207: PUSH
51208: LD_INT 1
51210: ARRAY
51211: PPUSH
51212: LD_VAR 0 14
51216: PUSH
51217: LD_VAR 0 9
51221: ARRAY
51222: PUSH
51223: LD_INT 2
51225: ARRAY
51226: PPUSH
51227: CALL_OW 351
51231: IFTRUE 51270
51233: PUSH
51234: LD_VAR 0 14
51238: PUSH
51239: LD_VAR 0 9
51243: ARRAY
51244: PUSH
51245: LD_INT 1
51247: ARRAY
51248: PPUSH
51249: LD_VAR 0 14
51253: PUSH
51254: LD_VAR 0 9
51258: ARRAY
51259: PUSH
51260: LD_INT 2
51262: ARRAY
51263: PPUSH
51264: CALL_OW 488
51268: NOT
51269: OR
51270: IFTRUE 51287
51272: PUSH
51273: LD_VAR 0 13
51277: PPUSH
51278: CALL_OW 247
51282: PUSH
51283: LD_INT 3
51285: EQUAL
51286: OR
51287: IFFALSE 51293
// exit ;
51289: POP
51290: POP
51291: GO 51845
// if not tmp then
51293: LD_VAR 0 13
51297: NOT
51298: IFFALSE 51302
// continue ;
51300: GO 51154
// result := true ;
51302: LD_ADDR_VAR 0 8
51306: PUSH
51307: LD_INT 1
51309: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51310: LD_VAR 0 6
51314: IFFALSE 51331
51316: PUSH
51317: LD_VAR 0 13
51321: PPUSH
51322: CALL_OW 247
51326: PUSH
51327: LD_INT 2
51329: EQUAL
51330: AND
51331: IFFALSE 51348
51333: PUSH
51334: LD_VAR 0 13
51338: PPUSH
51339: CALL_OW 263
51343: PUSH
51344: LD_INT 1
51346: EQUAL
51347: AND
51348: IFFALSE 51512
// begin if IsDrivenBy ( tmp ) then
51350: LD_VAR 0 13
51354: PPUSH
51355: CALL_OW 311
51359: IFFALSE 51363
// continue ;
51361: GO 51154
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51363: LD_VAR 0 6
51367: PPUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 60
51373: PUSH
51374: EMPTY
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 55
51386: PUSH
51387: EMPTY
51388: LIST
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PPUSH
51398: CALL_OW 72
51402: IFFALSE 51510
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51404: LD_ADDR_VAR 0 18
51408: PUSH
51409: LD_VAR 0 6
51413: PPUSH
51414: LD_INT 3
51416: PUSH
51417: LD_INT 60
51419: PUSH
51420: EMPTY
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 3
51429: PUSH
51430: LD_INT 55
51432: PUSH
51433: EMPTY
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PPUSH
51444: CALL_OW 72
51448: PUSH
51449: LD_INT 1
51451: ARRAY
51452: ST_TO_ADDR
// if IsInUnit ( driver ) then
51453: LD_VAR 0 18
51457: PPUSH
51458: CALL_OW 310
51462: IFFALSE 51473
// ComExit ( driver ) ;
51464: LD_VAR 0 18
51468: PPUSH
51469: CALL 77116 0 1
// AddComEnterUnit ( driver , tmp ) ;
51473: LD_VAR 0 18
51477: PPUSH
51478: LD_VAR 0 13
51482: PPUSH
51483: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51487: LD_VAR 0 18
51491: PPUSH
51492: LD_VAR 0 7
51496: PPUSH
51497: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51501: LD_VAR 0 18
51505: PPUSH
51506: CALL_OW 181
// end ; continue ;
51510: GO 51154
// end ; if not cleaners or not tmp in cleaners then
51512: LD_VAR 0 6
51516: NOT
51517: IFTRUE 51532
51519: PUSH
51520: LD_VAR 0 13
51524: PUSH
51525: LD_VAR 0 6
51529: IN
51530: NOT
51531: OR
51532: IFFALSE 51841
// begin if dep then
51534: LD_VAR 0 17
51538: IFFALSE 51674
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51540: LD_ADDR_VAR 0 16
51544: PUSH
51545: LD_VAR 0 17
51549: PUSH
51550: LD_INT 1
51552: ARRAY
51553: PPUSH
51554: CALL_OW 250
51558: PPUSH
51559: LD_VAR 0 17
51563: PUSH
51564: LD_INT 1
51566: ARRAY
51567: PPUSH
51568: CALL_OW 254
51572: PPUSH
51573: LD_INT 5
51575: PPUSH
51576: CALL_OW 272
51580: PUSH
51581: LD_VAR 0 17
51585: PUSH
51586: LD_INT 1
51588: ARRAY
51589: PPUSH
51590: CALL_OW 251
51594: PPUSH
51595: LD_VAR 0 17
51599: PUSH
51600: LD_INT 1
51602: ARRAY
51603: PPUSH
51604: CALL_OW 254
51608: PPUSH
51609: LD_INT 5
51611: PPUSH
51612: CALL_OW 273
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51621: LD_VAR 0 16
51625: PUSH
51626: LD_INT 1
51628: ARRAY
51629: PPUSH
51630: LD_VAR 0 16
51634: PUSH
51635: LD_INT 2
51637: ARRAY
51638: PPUSH
51639: CALL_OW 488
51643: IFFALSE 51674
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51645: LD_VAR 0 13
51649: PPUSH
51650: LD_VAR 0 16
51654: PUSH
51655: LD_INT 1
51657: ARRAY
51658: PPUSH
51659: LD_VAR 0 16
51663: PUSH
51664: LD_INT 2
51666: ARRAY
51667: PPUSH
51668: CALL_OW 111
// continue ;
51672: GO 51154
// end ; end ; r := GetDir ( tmp ) ;
51674: LD_ADDR_VAR 0 15
51678: PUSH
51679: LD_VAR 0 13
51683: PPUSH
51684: CALL_OW 254
51688: ST_TO_ADDR
// if r = 5 then
51689: LD_VAR 0 15
51693: PUSH
51694: LD_INT 5
51696: EQUAL
51697: IFFALSE 51707
// r := 0 ;
51699: LD_ADDR_VAR 0 15
51703: PUSH
51704: LD_INT 0
51706: ST_TO_ADDR
// for j = r to 5 do
51707: LD_ADDR_VAR 0 10
51711: PUSH
51712: DOUBLE
51713: LD_VAR 0 15
51717: DEC
51718: ST_TO_ADDR
51719: LD_INT 5
51721: PUSH
51722: FOR_TO
51723: IFFALSE 51839
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51725: LD_ADDR_VAR 0 11
51729: PUSH
51730: LD_VAR 0 13
51734: PPUSH
51735: CALL_OW 250
51739: PPUSH
51740: LD_VAR 0 10
51744: PPUSH
51745: LD_INT 2
51747: PPUSH
51748: CALL_OW 272
51752: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51753: LD_ADDR_VAR 0 12
51757: PUSH
51758: LD_VAR 0 13
51762: PPUSH
51763: CALL_OW 251
51767: PPUSH
51768: LD_VAR 0 10
51772: PPUSH
51773: LD_INT 2
51775: PPUSH
51776: CALL_OW 273
51780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51781: LD_VAR 0 11
51785: PPUSH
51786: LD_VAR 0 12
51790: PPUSH
51791: CALL_OW 488
51795: IFFALSE 51814
51797: PUSH
51798: LD_VAR 0 11
51802: PPUSH
51803: LD_VAR 0 12
51807: PPUSH
51808: CALL_OW 428
51812: NOT
51813: AND
51814: IFFALSE 51837
// begin ComMoveXY ( tmp , _x , _y ) ;
51816: LD_VAR 0 13
51820: PPUSH
51821: LD_VAR 0 11
51825: PPUSH
51826: LD_VAR 0 12
51830: PPUSH
51831: CALL_OW 111
// break ;
51835: GO 51839
// end ; end ;
51837: GO 51722
51839: POP
51840: POP
// end ; end ;
51841: GO 51154
51843: POP
51844: POP
// end ;
51845: LD_VAR 0 8
51849: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51850: LD_INT 0
51852: PPUSH
// result := true ;
51853: LD_ADDR_VAR 0 3
51857: PUSH
51858: LD_INT 1
51860: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51861: LD_VAR 0 2
51865: PUSH
51866: LD_INT 24
51868: DOUBLE
51869: EQUAL
51870: IFTRUE 51880
51872: LD_INT 33
51874: DOUBLE
51875: EQUAL
51876: IFTRUE 51880
51878: GO 51905
51880: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51881: LD_ADDR_VAR 0 3
51885: PUSH
51886: LD_INT 32
51888: PPUSH
51889: LD_VAR 0 1
51893: PPUSH
51894: CALL_OW 321
51898: PUSH
51899: LD_INT 2
51901: EQUAL
51902: ST_TO_ADDR
51903: GO 52221
51905: LD_INT 20
51907: DOUBLE
51908: EQUAL
51909: IFTRUE 51913
51911: GO 51938
51913: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51914: LD_ADDR_VAR 0 3
51918: PUSH
51919: LD_INT 6
51921: PPUSH
51922: LD_VAR 0 1
51926: PPUSH
51927: CALL_OW 321
51931: PUSH
51932: LD_INT 2
51934: EQUAL
51935: ST_TO_ADDR
51936: GO 52221
51938: LD_INT 22
51940: DOUBLE
51941: EQUAL
51942: IFTRUE 51952
51944: LD_INT 36
51946: DOUBLE
51947: EQUAL
51948: IFTRUE 51952
51950: GO 51977
51952: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51953: LD_ADDR_VAR 0 3
51957: PUSH
51958: LD_INT 15
51960: PPUSH
51961: LD_VAR 0 1
51965: PPUSH
51966: CALL_OW 321
51970: PUSH
51971: LD_INT 2
51973: EQUAL
51974: ST_TO_ADDR
51975: GO 52221
51977: LD_INT 30
51979: DOUBLE
51980: EQUAL
51981: IFTRUE 51985
51983: GO 52010
51985: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51986: LD_ADDR_VAR 0 3
51990: PUSH
51991: LD_INT 20
51993: PPUSH
51994: LD_VAR 0 1
51998: PPUSH
51999: CALL_OW 321
52003: PUSH
52004: LD_INT 2
52006: EQUAL
52007: ST_TO_ADDR
52008: GO 52221
52010: LD_INT 28
52012: DOUBLE
52013: EQUAL
52014: IFTRUE 52024
52016: LD_INT 21
52018: DOUBLE
52019: EQUAL
52020: IFTRUE 52024
52022: GO 52049
52024: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52025: LD_ADDR_VAR 0 3
52029: PUSH
52030: LD_INT 21
52032: PPUSH
52033: LD_VAR 0 1
52037: PPUSH
52038: CALL_OW 321
52042: PUSH
52043: LD_INT 2
52045: EQUAL
52046: ST_TO_ADDR
52047: GO 52221
52049: LD_INT 16
52051: DOUBLE
52052: EQUAL
52053: IFTRUE 52057
52055: GO 52082
52057: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52058: LD_ADDR_VAR 0 3
52062: PUSH
52063: LD_INT 84
52065: PPUSH
52066: LD_VAR 0 1
52070: PPUSH
52071: CALL_OW 321
52075: PUSH
52076: LD_INT 2
52078: EQUAL
52079: ST_TO_ADDR
52080: GO 52221
52082: LD_INT 19
52084: DOUBLE
52085: EQUAL
52086: IFTRUE 52096
52088: LD_INT 23
52090: DOUBLE
52091: EQUAL
52092: IFTRUE 52096
52094: GO 52121
52096: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52097: LD_ADDR_VAR 0 3
52101: PUSH
52102: LD_INT 83
52104: PPUSH
52105: LD_VAR 0 1
52109: PPUSH
52110: CALL_OW 321
52114: PUSH
52115: LD_INT 2
52117: EQUAL
52118: ST_TO_ADDR
52119: GO 52221
52121: LD_INT 17
52123: DOUBLE
52124: EQUAL
52125: IFTRUE 52129
52127: GO 52154
52129: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52130: LD_ADDR_VAR 0 3
52134: PUSH
52135: LD_INT 39
52137: PPUSH
52138: LD_VAR 0 1
52142: PPUSH
52143: CALL_OW 321
52147: PUSH
52148: LD_INT 2
52150: EQUAL
52151: ST_TO_ADDR
52152: GO 52221
52154: LD_INT 18
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52162
52160: GO 52187
52162: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52163: LD_ADDR_VAR 0 3
52167: PUSH
52168: LD_INT 40
52170: PPUSH
52171: LD_VAR 0 1
52175: PPUSH
52176: CALL_OW 321
52180: PUSH
52181: LD_INT 2
52183: EQUAL
52184: ST_TO_ADDR
52185: GO 52221
52187: LD_INT 27
52189: DOUBLE
52190: EQUAL
52191: IFTRUE 52195
52193: GO 52220
52195: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52196: LD_ADDR_VAR 0 3
52200: PUSH
52201: LD_INT 35
52203: PPUSH
52204: LD_VAR 0 1
52208: PPUSH
52209: CALL_OW 321
52213: PUSH
52214: LD_INT 2
52216: EQUAL
52217: ST_TO_ADDR
52218: GO 52221
52220: POP
// end ;
52221: LD_VAR 0 3
52225: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52226: LD_INT 0
52228: PPUSH
52229: PPUSH
52230: PPUSH
52231: PPUSH
52232: PPUSH
52233: PPUSH
52234: PPUSH
52235: PPUSH
52236: PPUSH
52237: PPUSH
52238: PPUSH
// result := false ;
52239: LD_ADDR_VAR 0 6
52243: PUSH
52244: LD_INT 0
52246: ST_TO_ADDR
// if btype = b_depot then
52247: LD_VAR 0 2
52251: PUSH
52252: LD_INT 0
52254: EQUAL
52255: IFFALSE 52267
// begin result := true ;
52257: LD_ADDR_VAR 0 6
52261: PUSH
52262: LD_INT 1
52264: ST_TO_ADDR
// exit ;
52265: GO 53121
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52267: LD_VAR 0 1
52271: NOT
52272: IFTRUE 52297
52274: PUSH
52275: LD_VAR 0 1
52279: PPUSH
52280: CALL_OW 266
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: IN
52295: NOT
52296: OR
52297: IFTRUE 52306
52299: PUSH
52300: LD_VAR 0 2
52304: NOT
52305: OR
52306: IFTRUE 52342
52308: PUSH
52309: LD_VAR 0 5
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 4
52328: PUSH
52329: LD_INT 5
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: IN
52340: NOT
52341: OR
52342: IFTRUE 52361
52344: PUSH
52345: LD_VAR 0 3
52349: PPUSH
52350: LD_VAR 0 4
52354: PPUSH
52355: CALL_OW 488
52359: NOT
52360: OR
52361: IFFALSE 52365
// exit ;
52363: GO 53121
// side := GetSide ( depot ) ;
52365: LD_ADDR_VAR 0 9
52369: PUSH
52370: LD_VAR 0 1
52374: PPUSH
52375: CALL_OW 255
52379: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52380: LD_VAR 0 9
52384: PPUSH
52385: LD_VAR 0 2
52389: PPUSH
52390: CALL 51850 0 2
52394: NOT
52395: IFFALSE 52399
// exit ;
52397: GO 53121
// pom := GetBase ( depot ) ;
52399: LD_ADDR_VAR 0 10
52403: PUSH
52404: LD_VAR 0 1
52408: PPUSH
52409: CALL_OW 274
52413: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52414: LD_ADDR_VAR 0 11
52418: PUSH
52419: LD_VAR 0 2
52423: PPUSH
52424: LD_VAR 0 1
52428: PPUSH
52429: CALL_OW 248
52433: PPUSH
52434: CALL_OW 450
52438: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52439: LD_VAR 0 10
52443: PPUSH
52444: LD_INT 1
52446: PPUSH
52447: CALL_OW 275
52451: PUSH
52452: LD_VAR 0 11
52456: PUSH
52457: LD_INT 1
52459: ARRAY
52460: GREATEREQUAL
52461: IFFALSE 52487
52463: PUSH
52464: LD_VAR 0 10
52468: PPUSH
52469: LD_INT 2
52471: PPUSH
52472: CALL_OW 275
52476: PUSH
52477: LD_VAR 0 11
52481: PUSH
52482: LD_INT 2
52484: ARRAY
52485: GREATEREQUAL
52486: AND
52487: IFFALSE 52513
52489: PUSH
52490: LD_VAR 0 10
52494: PPUSH
52495: LD_INT 3
52497: PPUSH
52498: CALL_OW 275
52502: PUSH
52503: LD_VAR 0 11
52507: PUSH
52508: LD_INT 3
52510: ARRAY
52511: GREATEREQUAL
52512: AND
52513: NOT
52514: IFFALSE 52518
// exit ;
52516: GO 53121
// if GetBType ( depot ) = b_depot then
52518: LD_VAR 0 1
52522: PPUSH
52523: CALL_OW 266
52527: PUSH
52528: LD_INT 0
52530: EQUAL
52531: IFFALSE 52543
// dist := 28 else
52533: LD_ADDR_VAR 0 14
52537: PUSH
52538: LD_INT 28
52540: ST_TO_ADDR
52541: GO 52551
// dist := 36 ;
52543: LD_ADDR_VAR 0 14
52547: PUSH
52548: LD_INT 36
52550: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52551: LD_VAR 0 1
52555: PPUSH
52556: LD_VAR 0 3
52560: PPUSH
52561: LD_VAR 0 4
52565: PPUSH
52566: CALL_OW 297
52570: PUSH
52571: LD_VAR 0 14
52575: GREATER
52576: IFFALSE 52580
// exit ;
52578: GO 53121
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52580: LD_ADDR_VAR 0 12
52584: PUSH
52585: LD_VAR 0 2
52589: PPUSH
52590: LD_VAR 0 3
52594: PPUSH
52595: LD_VAR 0 4
52599: PPUSH
52600: LD_VAR 0 5
52604: PPUSH
52605: LD_VAR 0 1
52609: PPUSH
52610: CALL_OW 248
52614: PPUSH
52615: LD_INT 0
52617: PPUSH
52618: CALL 53126 0 6
52622: ST_TO_ADDR
// if not hexes then
52623: LD_VAR 0 12
52627: NOT
52628: IFFALSE 52632
// exit ;
52630: GO 53121
// hex := GetHexInfo ( x , y ) ;
52632: LD_ADDR_VAR 0 15
52636: PUSH
52637: LD_VAR 0 3
52641: PPUSH
52642: LD_VAR 0 4
52646: PPUSH
52647: CALL_OW 546
52651: ST_TO_ADDR
// if hex [ 1 ] then
52652: LD_VAR 0 15
52656: PUSH
52657: LD_INT 1
52659: ARRAY
52660: IFFALSE 52664
// exit ;
52662: GO 53121
// height := hex [ 2 ] ;
52664: LD_ADDR_VAR 0 13
52668: PUSH
52669: LD_VAR 0 15
52673: PUSH
52674: LD_INT 2
52676: ARRAY
52677: ST_TO_ADDR
// for i = 1 to hexes do
52678: LD_ADDR_VAR 0 7
52682: PUSH
52683: DOUBLE
52684: LD_INT 1
52686: DEC
52687: ST_TO_ADDR
52688: LD_VAR 0 12
52692: PUSH
52693: FOR_TO
52694: IFFALSE 53038
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52696: LD_VAR 0 12
52700: PUSH
52701: LD_VAR 0 7
52705: ARRAY
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PPUSH
52711: LD_VAR 0 12
52715: PUSH
52716: LD_VAR 0 7
52720: ARRAY
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: PPUSH
52726: CALL_OW 488
52730: NOT
52731: IFTRUE 52773
52733: PUSH
52734: LD_VAR 0 12
52738: PUSH
52739: LD_VAR 0 7
52743: ARRAY
52744: PUSH
52745: LD_INT 1
52747: ARRAY
52748: PPUSH
52749: LD_VAR 0 12
52753: PUSH
52754: LD_VAR 0 7
52758: ARRAY
52759: PUSH
52760: LD_INT 2
52762: ARRAY
52763: PPUSH
52764: CALL_OW 428
52768: PUSH
52769: LD_INT 0
52771: GREATER
52772: OR
52773: IFTRUE 52811
52775: PUSH
52776: LD_VAR 0 12
52780: PUSH
52781: LD_VAR 0 7
52785: ARRAY
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PPUSH
52791: LD_VAR 0 12
52795: PUSH
52796: LD_VAR 0 7
52800: ARRAY
52801: PUSH
52802: LD_INT 2
52804: ARRAY
52805: PPUSH
52806: CALL_OW 351
52810: OR
52811: IFFALSE 52817
// exit ;
52813: POP
52814: POP
52815: GO 53121
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52817: LD_ADDR_VAR 0 8
52821: PUSH
52822: LD_VAR 0 12
52826: PUSH
52827: LD_VAR 0 7
52831: ARRAY
52832: PUSH
52833: LD_INT 1
52835: ARRAY
52836: PPUSH
52837: LD_VAR 0 12
52841: PUSH
52842: LD_VAR 0 7
52846: ARRAY
52847: PUSH
52848: LD_INT 2
52850: ARRAY
52851: PPUSH
52852: CALL_OW 546
52856: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52857: LD_VAR 0 8
52861: PUSH
52862: LD_INT 1
52864: ARRAY
52865: IFTRUE 52887
52867: PUSH
52868: LD_VAR 0 8
52872: PUSH
52873: LD_INT 2
52875: ARRAY
52876: PUSH
52877: LD_VAR 0 13
52881: PUSH
52882: LD_INT 2
52884: PLUS
52885: GREATER
52886: OR
52887: IFTRUE 52909
52889: PUSH
52890: LD_VAR 0 8
52894: PUSH
52895: LD_INT 2
52897: ARRAY
52898: PUSH
52899: LD_VAR 0 13
52903: PUSH
52904: LD_INT 2
52906: MINUS
52907: LESS
52908: OR
52909: IFTRUE 52977
52911: PUSH
52912: LD_VAR 0 8
52916: PUSH
52917: LD_INT 3
52919: ARRAY
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 8
52926: PUSH
52927: LD_INT 9
52929: PUSH
52930: LD_INT 10
52932: PUSH
52933: LD_INT 11
52935: PUSH
52936: LD_INT 12
52938: PUSH
52939: LD_INT 13
52941: PUSH
52942: LD_INT 16
52944: PUSH
52945: LD_INT 17
52947: PUSH
52948: LD_INT 18
52950: PUSH
52951: LD_INT 19
52953: PUSH
52954: LD_INT 20
52956: PUSH
52957: LD_INT 21
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: IN
52975: NOT
52976: OR
52977: IFTRUE 52990
52979: PUSH
52980: LD_VAR 0 8
52984: PUSH
52985: LD_INT 5
52987: ARRAY
52988: NOT
52989: OR
52990: IFTRUE 53030
52992: PUSH
52993: LD_VAR 0 8
52997: PUSH
52998: LD_INT 6
53000: ARRAY
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 7
53010: PUSH
53011: LD_INT 9
53013: PUSH
53014: LD_INT 10
53016: PUSH
53017: LD_INT 11
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: IN
53028: NOT
53029: OR
53030: IFFALSE 53036
// exit ;
53032: POP
53033: POP
53034: GO 53121
// end ;
53036: GO 52693
53038: POP
53039: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53040: LD_VAR 0 9
53044: PPUSH
53045: LD_VAR 0 3
53049: PPUSH
53050: LD_VAR 0 4
53054: PPUSH
53055: LD_INT 20
53057: PPUSH
53058: CALL 44940 0 4
53062: PUSH
53063: LD_INT 4
53065: ARRAY
53066: IFFALSE 53070
// exit ;
53068: GO 53121
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53070: LD_VAR 0 2
53074: PUSH
53075: LD_INT 29
53077: PUSH
53078: LD_INT 30
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: IN
53085: IFFALSE 53109
53087: PUSH
53088: LD_VAR 0 3
53092: PPUSH
53093: LD_VAR 0 4
53097: PPUSH
53098: LD_VAR 0 9
53102: PPUSH
53103: CALL_OW 440
53107: NOT
53108: AND
53109: IFFALSE 53113
// exit ;
53111: GO 53121
// result := true ;
53113: LD_ADDR_VAR 0 6
53117: PUSH
53118: LD_INT 1
53120: ST_TO_ADDR
// end ;
53121: LD_VAR 0 6
53125: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53126: LD_INT 0
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
53136: PPUSH
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
53146: PPUSH
53147: PPUSH
53148: PPUSH
53149: PPUSH
53150: PPUSH
53151: PPUSH
53152: PPUSH
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
53157: PPUSH
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
// result = [ ] ;
53186: LD_ADDR_VAR 0 7
53190: PUSH
53191: EMPTY
53192: ST_TO_ADDR
// temp_list = [ ] ;
53193: LD_ADDR_VAR 0 9
53197: PUSH
53198: EMPTY
53199: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53200: LD_VAR 0 4
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: LD_INT 5
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: IN
53231: NOT
53232: IFTRUE 53275
53234: PUSH
53235: LD_VAR 0 1
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: IN
53250: IFFALSE 53274
53252: PUSH
53253: LD_VAR 0 5
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: IN
53272: NOT
53273: AND
53274: OR
53275: IFFALSE 53279
// exit ;
53277: GO 71678
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53279: LD_VAR 0 1
53283: PUSH
53284: LD_INT 6
53286: PUSH
53287: LD_INT 7
53289: PUSH
53290: LD_INT 8
53292: PUSH
53293: LD_INT 13
53295: PUSH
53296: LD_INT 12
53298: PUSH
53299: LD_INT 15
53301: PUSH
53302: LD_INT 11
53304: PUSH
53305: LD_INT 14
53307: PUSH
53308: LD_INT 10
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: IN
53322: IFFALSE 53332
// btype = b_lab ;
53324: LD_ADDR_VAR 0 1
53328: PUSH
53329: LD_INT 6
53331: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53332: LD_VAR 0 6
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: IN
53351: NOT
53352: IFTRUE 53420
53354: PUSH
53355: LD_VAR 0 1
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 6
53374: PUSH
53375: LD_INT 36
53377: PUSH
53378: LD_INT 4
53380: PUSH
53381: LD_INT 5
53383: PUSH
53384: LD_INT 31
53386: PUSH
53387: LD_INT 32
53389: PUSH
53390: LD_INT 33
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: IN
53406: NOT
53407: IFFALSE 53419
53409: PUSH
53410: LD_VAR 0 6
53414: PUSH
53415: LD_INT 1
53417: EQUAL
53418: AND
53419: OR
53420: IFTRUE 53452
53422: PUSH
53423: LD_VAR 0 1
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: IN
53438: NOT
53439: IFFALSE 53451
53441: PUSH
53442: LD_VAR 0 6
53446: PUSH
53447: LD_INT 2
53449: EQUAL
53450: AND
53451: OR
53452: IFFALSE 53462
// mode = 0 ;
53454: LD_ADDR_VAR 0 6
53458: PUSH
53459: LD_INT 0
53461: ST_TO_ADDR
// case mode of 0 :
53462: LD_VAR 0 6
53466: PUSH
53467: LD_INT 0
53469: DOUBLE
53470: EQUAL
53471: IFTRUE 53475
53473: GO 64928
53475: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53476: LD_ADDR_VAR 0 11
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53669: LD_ADDR_VAR 0 12
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53865: LD_ADDR_VAR 0 13
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54064: LD_ADDR_VAR 0 14
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54260: LD_ADDR_VAR 0 15
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54453: LD_ADDR_VAR 0 16
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54646: LD_ADDR_VAR 0 17
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54876: LD_ADDR_VAR 0 18
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55106: LD_ADDR_VAR 0 19
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55336: LD_ADDR_VAR 0 20
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55566: LD_ADDR_VAR 0 21
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55796: LD_ADDR_VAR 0 22
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56026: LD_ADDR_VAR 0 23
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56306: LD_ADDR_VAR 0 24
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56582: LD_ADDR_VAR 0 25
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56856: LD_ADDR_VAR 0 26
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57132: LD_ADDR_VAR 0 27
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57412: LD_ADDR_VAR 0 28
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57694: LD_ADDR_VAR 0 29
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57973: LD_ADDR_VAR 0 30
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58251: LD_ADDR_VAR 0 31
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58529: LD_ADDR_VAR 0 32
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58807: LD_ADDR_VAR 0 33
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59086: LD_ADDR_VAR 0 34
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59366: LD_ADDR_VAR 0 35
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59478: LD_ADDR_VAR 0 36
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59590: LD_ADDR_VAR 0 37
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59702: LD_ADDR_VAR 0 38
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59814: LD_ADDR_VAR 0 39
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59926: LD_ADDR_VAR 0 40
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60038: LD_ADDR_VAR 0 41
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60388: LD_ADDR_VAR 0 42
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: LD_INT 3
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60738: LD_ADDR_VAR 0 43
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 3
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61086: LD_ADDR_VAR 0 44
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61436: LD_ADDR_VAR 0 45
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 2
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 2
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 2
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 3
61745: NEG
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61786: LD_ADDR_VAR 0 46
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: NEG
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 3
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62134: LD_ADDR_VAR 0 47
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62285: LD_ADDR_VAR 0 48
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: LD_INT 2
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62432: LD_ADDR_VAR 0 49
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62576: LD_ADDR_VAR 0 50
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62720: LD_ADDR_VAR 0 51
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62867: LD_ADDR_VAR 0 52
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63018: LD_ADDR_VAR 0 53
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63248: LD_ADDR_VAR 0 54
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 2
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63478: LD_ADDR_VAR 0 55
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: LD_INT 2
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63708: LD_ADDR_VAR 0 56
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: NEG
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: NEG
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63938: LD_ADDR_VAR 0 57
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: NEG
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64168: LD_ADDR_VAR 0 58
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: LD_INT 2
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64398: LD_ADDR_VAR 0 59
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64486: LD_ADDR_VAR 0 60
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64574: LD_ADDR_VAR 0 61
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64662: LD_ADDR_VAR 0 62
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64750: LD_ADDR_VAR 0 63
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64838: LD_ADDR_VAR 0 64
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// end ; 1 :
64926: GO 70823
64928: LD_INT 1
64930: DOUBLE
64931: EQUAL
64932: IFTRUE 64936
64934: GO 67559
64936: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64937: LD_ADDR_VAR 0 11
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64981: LD_ADDR_VAR 0 12
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 3
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65022: LD_ADDR_VAR 0 13
65026: PUSH
65027: LD_INT 3
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 3
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 3
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65062: LD_ADDR_VAR 0 14
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: LD_INT 3
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 3
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: LIST
65102: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65103: LD_ADDR_VAR 0 15
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65147: LD_ADDR_VAR 0 16
65151: PUSH
65152: LD_INT 2
65154: NEG
65155: PUSH
65156: LD_INT 3
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 3
65166: NEG
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: LIST
65192: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65193: LD_ADDR_VAR 0 17
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65237: LD_ADDR_VAR 0 18
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65278: LD_ADDR_VAR 0 19
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65318: LD_ADDR_VAR 0 20
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 3
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65359: LD_ADDR_VAR 0 21
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: LIST
65402: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65403: LD_ADDR_VAR 0 22
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 3
65434: NEG
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65449: LD_ADDR_VAR 0 23
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 3
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: LD_INT 4
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 3
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65493: LD_ADDR_VAR 0 24
65497: PUSH
65498: LD_INT 3
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 4
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65534: LD_ADDR_VAR 0 25
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 4
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: LD_INT 4
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65574: LD_ADDR_VAR 0 26
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: LD_INT 3
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 4
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: LD_INT 3
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65615: LD_ADDR_VAR 0 27
65619: PUSH
65620: LD_INT 3
65622: NEG
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 3
65633: NEG
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 4
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65659: LD_ADDR_VAR 0 28
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: LD_INT 4
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 4
65690: NEG
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: LIST
65704: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65705: LD_ADDR_VAR 0 29
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 4
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 4
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: LD_INT 3
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 5
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 5
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: LD_INT 4
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: LD_INT 6
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 6
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 5
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65860: LD_ADDR_VAR 0 30
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 3
65888: PUSH
65889: LD_INT 1
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 3
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 5
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 5
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 5
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 6
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 6
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66003: LD_ADDR_VAR 0 31
66007: PUSH
66008: LD_INT 3
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 3
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: LD_INT 3
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: LD_INT 3
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 4
66050: PUSH
66051: LD_INT 4
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 3
66060: PUSH
66061: LD_INT 4
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 5
66070: PUSH
66071: LD_INT 4
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 5
66080: PUSH
66081: LD_INT 5
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: LD_INT 5
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 6
66100: PUSH
66101: LD_INT 5
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 6
66110: PUSH
66111: LD_INT 6
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 5
66120: PUSH
66121: LD_INT 6
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66142: LD_ADDR_VAR 0 32
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 3
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: LD_INT 3
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 4
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 4
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: LD_INT 3
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: LD_INT 5
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 5
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 6
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 6
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 5
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66285: LD_ADDR_VAR 0 33
66289: PUSH
66290: LD_INT 2
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: NEG
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 3
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 3
66326: NEG
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 4
66337: NEG
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 4
66348: NEG
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 4
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 5
66371: NEG
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 5
66382: NEG
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 5
66394: NEG
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 6
66405: NEG
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 6
66416: NEG
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66440: LD_ADDR_VAR 0 34
66444: PUSH
66445: LD_INT 2
66447: NEG
66448: PUSH
66449: LD_INT 3
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: NEG
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: LD_INT 3
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: LD_INT 4
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 4
66495: NEG
66496: PUSH
66497: LD_INT 3
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 4
66507: NEG
66508: PUSH
66509: LD_INT 4
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: LD_INT 5
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 5
66531: NEG
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 5
66543: NEG
66544: PUSH
66545: LD_INT 5
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 5
66555: NEG
66556: PUSH
66557: LD_INT 6
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 6
66567: NEG
66568: PUSH
66569: LD_INT 5
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 6
66579: NEG
66580: PUSH
66581: LD_INT 6
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66603: LD_ADDR_VAR 0 41
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: PUSH
66634: LD_INT 2
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66647: LD_ADDR_VAR 0 42
66651: PUSH
66652: LD_INT 2
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 2
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 3
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66688: LD_ADDR_VAR 0 43
66692: PUSH
66693: LD_INT 2
66695: PUSH
66696: LD_INT 2
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 3
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 3
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66728: LD_ADDR_VAR 0 44
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 2
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66769: LD_ADDR_VAR 0 45
66773: PUSH
66774: LD_INT 2
66776: NEG
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66813: LD_ADDR_VAR 0 46
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66859: LD_ADDR_VAR 0 47
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: LD_INT 3
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66892: LD_ADDR_VAR 0 48
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66923: LD_ADDR_VAR 0 49
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66952: LD_ADDR_VAR 0 50
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: LD_INT 3
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 3
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66981: LD_ADDR_VAR 0 51
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 2
66999: NEG
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67012: LD_ADDR_VAR 0 52
67016: PUSH
67017: LD_INT 3
67019: NEG
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 3
67031: NEG
67032: PUSH
67033: LD_INT 2
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67045: LD_ADDR_VAR 0 53
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: LIST
67088: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67089: LD_ADDR_VAR 0 54
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67130: LD_ADDR_VAR 0 55
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 2
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67170: LD_ADDR_VAR 0 56
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67211: LD_ADDR_VAR 0 57
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67255: LD_ADDR_VAR 0 58
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: NEG
67275: PUSH
67276: LD_INT 2
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 3
67286: NEG
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: LIST
67300: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67301: LD_ADDR_VAR 0 59
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67345: LD_ADDR_VAR 0 60
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: LD_INT 1
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67386: LD_ADDR_VAR 0 61
67390: PUSH
67391: LD_INT 2
67393: PUSH
67394: LD_INT 1
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67426: LD_ADDR_VAR 0 62
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 1
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67467: LD_ADDR_VAR 0 63
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67511: LD_ADDR_VAR 0 64
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: LD_INT 2
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 2
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// end ; 2 :
67557: GO 70823
67559: LD_INT 2
67561: DOUBLE
67562: EQUAL
67563: IFTRUE 67567
67565: GO 70822
67567: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67568: LD_ADDR_VAR 0 29
67572: PUSH
67573: LD_INT 4
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 4
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 3
67647: PUSH
67648: LD_INT 2
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 5
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 3
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 3
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 4
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 4
67698: PUSH
67699: LD_INT 4
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: LD_INT 4
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: LD_INT 3
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 4
67738: PUSH
67739: LD_INT 2
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: LD_INT 4
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 4
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: LD_INT 4
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: LD_INT 5
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 5
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: LD_INT 4
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 2
67830: PUSH
67831: LD_INT 5
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 2
67840: NEG
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 1
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 2
67874: NEG
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 2
67885: NEG
67886: PUSH
67887: LD_INT 1
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 3
67896: NEG
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: NEG
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 4
67918: NEG
67919: PUSH
67920: LD_INT 1
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 4
67930: NEG
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: NEG
67943: PUSH
67944: LD_INT 2
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: NEG
67954: PUSH
67955: LD_INT 4
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 4
67965: NEG
67966: PUSH
67967: LD_INT 5
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: LD_INT 4
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 4
68001: NEG
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 5
68013: NEG
68014: PUSH
68015: LD_INT 4
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 5
68025: NEG
68026: PUSH
68027: LD_INT 5
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: NEG
68038: PUSH
68039: LD_INT 5
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 5
68049: NEG
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68106: LD_ADDR_VAR 0 30
68110: PUSH
68111: LD_INT 4
68113: PUSH
68114: LD_INT 4
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 4
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: LD_INT 4
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 5
68143: PUSH
68144: LD_INT 5
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: LD_INT 5
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: PUSH
68164: LD_INT 4
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 5
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 3
68193: PUSH
68194: LD_INT 5
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: LD_INT 3
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 4
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 4
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: NEG
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 4
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: LD_INT 2
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 4
68296: NEG
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: LD_INT 1
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 5
68352: NEG
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 5
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 5
68375: NEG
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 3
68387: NEG
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 3
68398: NEG
68399: PUSH
68400: LD_INT 3
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 3
68410: NEG
68411: PUSH
68412: LD_INT 4
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 2
68422: NEG
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 2
68434: NEG
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: NEG
68447: PUSH
68448: LD_INT 2
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 4
68458: NEG
68459: PUSH
68460: LD_INT 3
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 4
68470: NEG
68471: PUSH
68472: LD_INT 4
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 2
68482: NEG
68483: PUSH
68484: LD_INT 4
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: LD_INT 2
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 5
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: LD_INT 4
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: LD_INT 3
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: NEG
68562: PUSH
68563: LD_INT 4
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: LD_INT 5
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: LD_INT 3
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: LD_INT 5
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68653: LD_ADDR_VAR 0 31
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 4
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 1
68690: PUSH
68691: LD_INT 5
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: LD_INT 5
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: NEG
68711: PUSH
68712: LD_INT 4
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 3
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 2
68732: PUSH
68733: LD_INT 5
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: NEG
68777: PUSH
68778: LD_INT 0
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 2
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 4
68809: NEG
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 4
68820: NEG
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 4
68832: NEG
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: LD_INT 2
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 4
68855: NEG
68856: PUSH
68857: LD_INT 4
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: LD_INT 5
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: LD_INT 4
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 4
68903: NEG
68904: PUSH
68905: LD_INT 3
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 5
68915: NEG
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 5
68927: NEG
68928: PUSH
68929: LD_INT 5
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: LD_INT 5
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 4
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 3
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 2
69042: PUSH
69043: LD_INT 2
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 2
69053: NEG
69054: PUSH
69055: LD_INT 4
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 4
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 4
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 5
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 5
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 4
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 5
69148: PUSH
69149: LD_INT 2
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69203: LD_ADDR_VAR 0 32
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 0
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 4
69221: NEG
69222: PUSH
69223: LD_INT 1
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 3
69233: NEG
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 4
69255: NEG
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 5
69277: NEG
69278: PUSH
69279: LD_INT 1
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 5
69289: NEG
69290: PUSH
69291: LD_INT 2
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: LD_INT 2
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: LD_INT 3
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: LD_INT 4
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 2
69336: NEG
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: LD_INT 2
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: LD_INT 2
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 2
69396: NEG
69397: PUSH
69398: LD_INT 4
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 4
69408: NEG
69409: PUSH
69410: LD_INT 2
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: LD_INT 5
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: LD_INT 4
69445: NEG
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 1
69453: PUSH
69454: LD_INT 3
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 0
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 4
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 1
69487: NEG
69488: PUSH
69489: LD_INT 5
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 2
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: LD_INT 5
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 3
69532: PUSH
69533: LD_INT 1
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 4
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 4
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 3
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 2
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 4
69605: PUSH
69606: LD_INT 2
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 4
69615: PUSH
69616: LD_INT 4
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: LD_INT 3
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 5
69635: PUSH
69636: LD_INT 4
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 5
69645: PUSH
69646: LD_INT 5
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 4
69655: PUSH
69656: LD_INT 5
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: LD_INT 4
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 3
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 5
69685: PUSH
69686: LD_INT 3
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: LD_INT 5
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69750: LD_ADDR_VAR 0 33
69754: PUSH
69755: LD_INT 4
69757: NEG
69758: PUSH
69759: LD_INT 4
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 4
69769: NEG
69770: PUSH
69771: LD_INT 5
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 3
69781: NEG
69782: PUSH
69783: LD_INT 4
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 3
69793: NEG
69794: PUSH
69795: LD_INT 3
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: LD_INT 3
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 5
69817: NEG
69818: PUSH
69819: LD_INT 4
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 5
69829: NEG
69830: PUSH
69831: LD_INT 5
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: LD_INT 5
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 3
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 4
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 3
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 2
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: LD_INT 2
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: LD_INT 3
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: NEG
69933: PUSH
69934: LD_INT 4
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: LD_INT 4
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 4
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 4
69977: PUSH
69978: LD_INT 1
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 5
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 4
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 5
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 3
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 3
70070: PUSH
70071: LD_INT 2
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 4
70090: PUSH
70091: LD_INT 4
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: LD_INT 4
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: LD_INT 3
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 2
70120: PUSH
70121: LD_INT 2
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 4
70130: PUSH
70131: LD_INT 2
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 2
70140: PUSH
70141: LD_INT 4
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 4
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: LD_INT 3
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: LD_INT 4
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: LD_INT 5
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: LD_INT 5
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 1
70200: NEG
70201: PUSH
70202: LD_INT 4
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 1
70211: NEG
70212: PUSH
70213: LD_INT 3
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: LD_INT 5
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 2
70232: NEG
70233: PUSH
70234: LD_INT 3
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70288: LD_ADDR_VAR 0 34
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 4
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: LD_INT 5
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: LD_INT 4
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 1
70328: PUSH
70329: LD_INT 3
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: LD_INT 3
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: LD_INT 4
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 1
70362: NEG
70363: PUSH
70364: LD_INT 5
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 2
70385: NEG
70386: PUSH
70387: LD_INT 5
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 3
70407: PUSH
70408: LD_INT 1
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 4
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 4
70428: PUSH
70429: LD_INT 1
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 3
70438: PUSH
70439: LD_INT 1
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 2
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 4
70480: PUSH
70481: LD_INT 2
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 4
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 5
70510: PUSH
70511: LD_INT 4
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 5
70520: PUSH
70521: LD_INT 5
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 4
70530: PUSH
70531: LD_INT 5
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 3
70540: PUSH
70541: LD_INT 4
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: PUSH
70551: LD_INT 3
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 5
70560: PUSH
70561: LD_INT 3
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 3
70570: PUSH
70571: LD_INT 5
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 2
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 1
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: PUSH
70611: LD_INT 4
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 0
70620: PUSH
70621: LD_INT 4
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 1
70630: NEG
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 2
70652: PUSH
70653: LD_INT 4
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 2
70662: NEG
70663: PUSH
70664: LD_INT 2
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 4
70673: NEG
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 4
70684: NEG
70685: PUSH
70686: LD_INT 1
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 3
70696: NEG
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 3
70707: NEG
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 4
70718: NEG
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 5
70729: NEG
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 5
70740: NEG
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 5
70752: NEG
70753: PUSH
70754: LD_INT 2
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 3
70764: NEG
70765: PUSH
70766: LD_INT 2
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: ST_TO_ADDR
// end ; end ;
70820: GO 70823
70822: POP
// case btype of b_depot , b_warehouse :
70823: LD_VAR 0 1
70827: PUSH
70828: LD_INT 0
70830: DOUBLE
70831: EQUAL
70832: IFTRUE 70842
70834: LD_INT 1
70836: DOUBLE
70837: EQUAL
70838: IFTRUE 70842
70840: GO 71043
70842: POP
// case nation of nation_american :
70843: LD_VAR 0 5
70847: PUSH
70848: LD_INT 1
70850: DOUBLE
70851: EQUAL
70852: IFTRUE 70856
70854: GO 70912
70856: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70857: LD_ADDR_VAR 0 9
70861: PUSH
70862: LD_VAR 0 11
70866: PUSH
70867: LD_VAR 0 12
70871: PUSH
70872: LD_VAR 0 13
70876: PUSH
70877: LD_VAR 0 14
70881: PUSH
70882: LD_VAR 0 15
70886: PUSH
70887: LD_VAR 0 16
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: PUSH
70900: LD_VAR 0 4
70904: PUSH
70905: LD_INT 1
70907: PLUS
70908: ARRAY
70909: ST_TO_ADDR
70910: GO 71041
70912: LD_INT 2
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70920
70918: GO 70976
70920: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70921: LD_ADDR_VAR 0 9
70925: PUSH
70926: LD_VAR 0 17
70930: PUSH
70931: LD_VAR 0 18
70935: PUSH
70936: LD_VAR 0 19
70940: PUSH
70941: LD_VAR 0 20
70945: PUSH
70946: LD_VAR 0 21
70950: PUSH
70951: LD_VAR 0 22
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: PUSH
70964: LD_VAR 0 4
70968: PUSH
70969: LD_INT 1
70971: PLUS
70972: ARRAY
70973: ST_TO_ADDR
70974: GO 71041
70976: LD_INT 3
70978: DOUBLE
70979: EQUAL
70980: IFTRUE 70984
70982: GO 71040
70984: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70985: LD_ADDR_VAR 0 9
70989: PUSH
70990: LD_VAR 0 23
70994: PUSH
70995: LD_VAR 0 24
70999: PUSH
71000: LD_VAR 0 25
71004: PUSH
71005: LD_VAR 0 26
71009: PUSH
71010: LD_VAR 0 27
71014: PUSH
71015: LD_VAR 0 28
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: PUSH
71028: LD_VAR 0 4
71032: PUSH
71033: LD_INT 1
71035: PLUS
71036: ARRAY
71037: ST_TO_ADDR
71038: GO 71041
71040: POP
71041: GO 71596
71043: LD_INT 2
71045: DOUBLE
71046: EQUAL
71047: IFTRUE 71057
71049: LD_INT 3
71051: DOUBLE
71052: EQUAL
71053: IFTRUE 71057
71055: GO 71113
71057: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71058: LD_ADDR_VAR 0 9
71062: PUSH
71063: LD_VAR 0 29
71067: PUSH
71068: LD_VAR 0 30
71072: PUSH
71073: LD_VAR 0 31
71077: PUSH
71078: LD_VAR 0 32
71082: PUSH
71083: LD_VAR 0 33
71087: PUSH
71088: LD_VAR 0 34
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: PUSH
71101: LD_VAR 0 4
71105: PUSH
71106: LD_INT 1
71108: PLUS
71109: ARRAY
71110: ST_TO_ADDR
71111: GO 71596
71113: LD_INT 16
71115: DOUBLE
71116: EQUAL
71117: IFTRUE 71175
71119: LD_INT 17
71121: DOUBLE
71122: EQUAL
71123: IFTRUE 71175
71125: LD_INT 18
71127: DOUBLE
71128: EQUAL
71129: IFTRUE 71175
71131: LD_INT 19
71133: DOUBLE
71134: EQUAL
71135: IFTRUE 71175
71137: LD_INT 22
71139: DOUBLE
71140: EQUAL
71141: IFTRUE 71175
71143: LD_INT 20
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71175
71149: LD_INT 21
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71175
71155: LD_INT 23
71157: DOUBLE
71158: EQUAL
71159: IFTRUE 71175
71161: LD_INT 24
71163: DOUBLE
71164: EQUAL
71165: IFTRUE 71175
71167: LD_INT 25
71169: DOUBLE
71170: EQUAL
71171: IFTRUE 71175
71173: GO 71231
71175: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71176: LD_ADDR_VAR 0 9
71180: PUSH
71181: LD_VAR 0 35
71185: PUSH
71186: LD_VAR 0 36
71190: PUSH
71191: LD_VAR 0 37
71195: PUSH
71196: LD_VAR 0 38
71200: PUSH
71201: LD_VAR 0 39
71205: PUSH
71206: LD_VAR 0 40
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: PUSH
71219: LD_VAR 0 4
71223: PUSH
71224: LD_INT 1
71226: PLUS
71227: ARRAY
71228: ST_TO_ADDR
71229: GO 71596
71231: LD_INT 6
71233: DOUBLE
71234: EQUAL
71235: IFTRUE 71287
71237: LD_INT 7
71239: DOUBLE
71240: EQUAL
71241: IFTRUE 71287
71243: LD_INT 8
71245: DOUBLE
71246: EQUAL
71247: IFTRUE 71287
71249: LD_INT 13
71251: DOUBLE
71252: EQUAL
71253: IFTRUE 71287
71255: LD_INT 12
71257: DOUBLE
71258: EQUAL
71259: IFTRUE 71287
71261: LD_INT 15
71263: DOUBLE
71264: EQUAL
71265: IFTRUE 71287
71267: LD_INT 11
71269: DOUBLE
71270: EQUAL
71271: IFTRUE 71287
71273: LD_INT 14
71275: DOUBLE
71276: EQUAL
71277: IFTRUE 71287
71279: LD_INT 10
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71287
71285: GO 71343
71287: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71288: LD_ADDR_VAR 0 9
71292: PUSH
71293: LD_VAR 0 41
71297: PUSH
71298: LD_VAR 0 42
71302: PUSH
71303: LD_VAR 0 43
71307: PUSH
71308: LD_VAR 0 44
71312: PUSH
71313: LD_VAR 0 45
71317: PUSH
71318: LD_VAR 0 46
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: PUSH
71331: LD_VAR 0 4
71335: PUSH
71336: LD_INT 1
71338: PLUS
71339: ARRAY
71340: ST_TO_ADDR
71341: GO 71596
71343: LD_INT 36
71345: DOUBLE
71346: EQUAL
71347: IFTRUE 71351
71349: GO 71407
71351: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71352: LD_ADDR_VAR 0 9
71356: PUSH
71357: LD_VAR 0 47
71361: PUSH
71362: LD_VAR 0 48
71366: PUSH
71367: LD_VAR 0 49
71371: PUSH
71372: LD_VAR 0 50
71376: PUSH
71377: LD_VAR 0 51
71381: PUSH
71382: LD_VAR 0 52
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: PUSH
71395: LD_VAR 0 4
71399: PUSH
71400: LD_INT 1
71402: PLUS
71403: ARRAY
71404: ST_TO_ADDR
71405: GO 71596
71407: LD_INT 4
71409: DOUBLE
71410: EQUAL
71411: IFTRUE 71433
71413: LD_INT 5
71415: DOUBLE
71416: EQUAL
71417: IFTRUE 71433
71419: LD_INT 34
71421: DOUBLE
71422: EQUAL
71423: IFTRUE 71433
71425: LD_INT 37
71427: DOUBLE
71428: EQUAL
71429: IFTRUE 71433
71431: GO 71489
71433: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71434: LD_ADDR_VAR 0 9
71438: PUSH
71439: LD_VAR 0 53
71443: PUSH
71444: LD_VAR 0 54
71448: PUSH
71449: LD_VAR 0 55
71453: PUSH
71454: LD_VAR 0 56
71458: PUSH
71459: LD_VAR 0 57
71463: PUSH
71464: LD_VAR 0 58
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: PUSH
71477: LD_VAR 0 4
71481: PUSH
71482: LD_INT 1
71484: PLUS
71485: ARRAY
71486: ST_TO_ADDR
71487: GO 71596
71489: LD_INT 31
71491: DOUBLE
71492: EQUAL
71493: IFTRUE 71539
71495: LD_INT 32
71497: DOUBLE
71498: EQUAL
71499: IFTRUE 71539
71501: LD_INT 33
71503: DOUBLE
71504: EQUAL
71505: IFTRUE 71539
71507: LD_INT 27
71509: DOUBLE
71510: EQUAL
71511: IFTRUE 71539
71513: LD_INT 26
71515: DOUBLE
71516: EQUAL
71517: IFTRUE 71539
71519: LD_INT 28
71521: DOUBLE
71522: EQUAL
71523: IFTRUE 71539
71525: LD_INT 29
71527: DOUBLE
71528: EQUAL
71529: IFTRUE 71539
71531: LD_INT 30
71533: DOUBLE
71534: EQUAL
71535: IFTRUE 71539
71537: GO 71595
71539: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71540: LD_ADDR_VAR 0 9
71544: PUSH
71545: LD_VAR 0 59
71549: PUSH
71550: LD_VAR 0 60
71554: PUSH
71555: LD_VAR 0 61
71559: PUSH
71560: LD_VAR 0 62
71564: PUSH
71565: LD_VAR 0 63
71569: PUSH
71570: LD_VAR 0 64
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: PUSH
71583: LD_VAR 0 4
71587: PUSH
71588: LD_INT 1
71590: PLUS
71591: ARRAY
71592: ST_TO_ADDR
71593: GO 71596
71595: POP
// temp_list2 = [ ] ;
71596: LD_ADDR_VAR 0 10
71600: PUSH
71601: EMPTY
71602: ST_TO_ADDR
// for i in temp_list do
71603: LD_ADDR_VAR 0 8
71607: PUSH
71608: LD_VAR 0 9
71612: PUSH
71613: FOR_IN
71614: IFFALSE 71666
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71616: LD_ADDR_VAR 0 10
71620: PUSH
71621: LD_VAR 0 10
71625: PUSH
71626: LD_VAR 0 8
71630: PUSH
71631: LD_INT 1
71633: ARRAY
71634: PUSH
71635: LD_VAR 0 2
71639: PLUS
71640: PUSH
71641: LD_VAR 0 8
71645: PUSH
71646: LD_INT 2
71648: ARRAY
71649: PUSH
71650: LD_VAR 0 3
71654: PLUS
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: EMPTY
71661: LIST
71662: ADD
71663: ST_TO_ADDR
71664: GO 71613
71666: POP
71667: POP
// result = temp_list2 ;
71668: LD_ADDR_VAR 0 7
71672: PUSH
71673: LD_VAR 0 10
71677: ST_TO_ADDR
// end ;
71678: LD_VAR 0 7
71682: RET
// export function EnemyInRange ( unit , dist ) ; begin
71683: LD_INT 0
71685: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71686: LD_ADDR_VAR 0 3
71690: PUSH
71691: LD_VAR 0 1
71695: PPUSH
71696: CALL_OW 255
71700: PPUSH
71701: LD_VAR 0 1
71705: PPUSH
71706: CALL_OW 250
71710: PPUSH
71711: LD_VAR 0 1
71715: PPUSH
71716: CALL_OW 251
71720: PPUSH
71721: LD_VAR 0 2
71725: PPUSH
71726: CALL 44940 0 4
71730: PUSH
71731: LD_INT 4
71733: ARRAY
71734: ST_TO_ADDR
// end ;
71735: LD_VAR 0 3
71739: RET
// export function PlayerSeeMe ( unit ) ; begin
71740: LD_INT 0
71742: PPUSH
// result := See ( your_side , unit ) ;
71743: LD_ADDR_VAR 0 2
71747: PUSH
71748: LD_OWVAR 2
71752: PPUSH
71753: LD_VAR 0 1
71757: PPUSH
71758: CALL_OW 292
71762: ST_TO_ADDR
// end ;
71763: LD_VAR 0 2
71767: RET
// export function ReverseDir ( unit ) ; begin
71768: LD_INT 0
71770: PPUSH
// if not unit then
71771: LD_VAR 0 1
71775: NOT
71776: IFFALSE 71780
// exit ;
71778: GO 71803
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71780: LD_ADDR_VAR 0 2
71784: PUSH
71785: LD_VAR 0 1
71789: PPUSH
71790: CALL_OW 254
71794: PUSH
71795: LD_INT 3
71797: PLUS
71798: PUSH
71799: LD_INT 6
71801: MOD
71802: ST_TO_ADDR
// end ;
71803: LD_VAR 0 2
71807: RET
// export function ReverseArray ( array ) ; var i ; begin
71808: LD_INT 0
71810: PPUSH
71811: PPUSH
// if not array then
71812: LD_VAR 0 1
71816: NOT
71817: IFFALSE 71821
// exit ;
71819: GO 71876
// result := [ ] ;
71821: LD_ADDR_VAR 0 2
71825: PUSH
71826: EMPTY
71827: ST_TO_ADDR
// for i := array downto 1 do
71828: LD_ADDR_VAR 0 3
71832: PUSH
71833: DOUBLE
71834: LD_VAR 0 1
71838: INC
71839: ST_TO_ADDR
71840: LD_INT 1
71842: PUSH
71843: FOR_DOWNTO
71844: IFFALSE 71874
// result := Join ( result , array [ i ] ) ;
71846: LD_ADDR_VAR 0 2
71850: PUSH
71851: LD_VAR 0 2
71855: PPUSH
71856: LD_VAR 0 1
71860: PUSH
71861: LD_VAR 0 3
71865: ARRAY
71866: PPUSH
71867: CALL 76718 0 2
71871: ST_TO_ADDR
71872: GO 71843
71874: POP
71875: POP
// end ;
71876: LD_VAR 0 2
71880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71881: LD_INT 0
71883: PPUSH
71884: PPUSH
71885: PPUSH
71886: PPUSH
71887: PPUSH
71888: PPUSH
// if not unit or not hexes then
71889: LD_VAR 0 1
71893: NOT
71894: IFTRUE 71903
71896: PUSH
71897: LD_VAR 0 2
71901: NOT
71902: OR
71903: IFFALSE 71907
// exit ;
71905: GO 72030
// dist := 9999 ;
71907: LD_ADDR_VAR 0 5
71911: PUSH
71912: LD_INT 9999
71914: ST_TO_ADDR
// for i = 1 to hexes do
71915: LD_ADDR_VAR 0 4
71919: PUSH
71920: DOUBLE
71921: LD_INT 1
71923: DEC
71924: ST_TO_ADDR
71925: LD_VAR 0 2
71929: PUSH
71930: FOR_TO
71931: IFFALSE 72018
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71933: LD_ADDR_VAR 0 6
71937: PUSH
71938: LD_VAR 0 1
71942: PPUSH
71943: LD_VAR 0 2
71947: PUSH
71948: LD_VAR 0 4
71952: ARRAY
71953: PUSH
71954: LD_INT 1
71956: ARRAY
71957: PPUSH
71958: LD_VAR 0 2
71962: PUSH
71963: LD_VAR 0 4
71967: ARRAY
71968: PUSH
71969: LD_INT 2
71971: ARRAY
71972: PPUSH
71973: CALL_OW 297
71977: ST_TO_ADDR
// if tdist < dist then
71978: LD_VAR 0 6
71982: PUSH
71983: LD_VAR 0 5
71987: LESS
71988: IFFALSE 72016
// begin hex := hexes [ i ] ;
71990: LD_ADDR_VAR 0 8
71994: PUSH
71995: LD_VAR 0 2
71999: PUSH
72000: LD_VAR 0 4
72004: ARRAY
72005: ST_TO_ADDR
// dist := tdist ;
72006: LD_ADDR_VAR 0 5
72010: PUSH
72011: LD_VAR 0 6
72015: ST_TO_ADDR
// end ; end ;
72016: GO 71930
72018: POP
72019: POP
// result := hex ;
72020: LD_ADDR_VAR 0 3
72024: PUSH
72025: LD_VAR 0 8
72029: ST_TO_ADDR
// end ;
72030: LD_VAR 0 3
72034: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72035: LD_INT 0
72037: PPUSH
72038: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72039: LD_VAR 0 1
72043: NOT
72044: IFTRUE 72083
72046: PUSH
72047: LD_VAR 0 1
72051: PUSH
72052: LD_INT 21
72054: PUSH
72055: LD_INT 2
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 23
72064: PUSH
72065: LD_INT 2
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PPUSH
72076: CALL_OW 69
72080: IN
72081: NOT
72082: OR
72083: IFFALSE 72087
// exit ;
72085: GO 72134
// for i = 1 to 3 do
72087: LD_ADDR_VAR 0 3
72091: PUSH
72092: DOUBLE
72093: LD_INT 1
72095: DEC
72096: ST_TO_ADDR
72097: LD_INT 3
72099: PUSH
72100: FOR_TO
72101: IFFALSE 72132
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72103: LD_VAR 0 1
72107: PPUSH
72108: CALL_OW 250
72112: PPUSH
72113: LD_VAR 0 1
72117: PPUSH
72118: CALL_OW 251
72122: PPUSH
72123: LD_INT 1
72125: PPUSH
72126: CALL_OW 453
72130: GO 72100
72132: POP
72133: POP
// end ;
72134: LD_VAR 0 2
72138: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72139: LD_INT 0
72141: PPUSH
72142: PPUSH
72143: PPUSH
72144: PPUSH
72145: PPUSH
72146: PPUSH
// if not unit or not enemy_unit then
72147: LD_VAR 0 1
72151: NOT
72152: IFTRUE 72161
72154: PUSH
72155: LD_VAR 0 2
72159: NOT
72160: OR
72161: IFFALSE 72165
// exit ;
72163: GO 72636
// if GetLives ( i ) < 250 then
72165: LD_VAR 0 4
72169: PPUSH
72170: CALL_OW 256
72174: PUSH
72175: LD_INT 250
72177: LESS
72178: IFFALSE 72191
// begin ComAutodestruct ( i ) ;
72180: LD_VAR 0 4
72184: PPUSH
72185: CALL 72035 0 1
// exit ;
72189: GO 72636
// end ; x := GetX ( enemy_unit ) ;
72191: LD_ADDR_VAR 0 7
72195: PUSH
72196: LD_VAR 0 2
72200: PPUSH
72201: CALL_OW 250
72205: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72206: LD_ADDR_VAR 0 8
72210: PUSH
72211: LD_VAR 0 2
72215: PPUSH
72216: CALL_OW 251
72220: ST_TO_ADDR
// if not x or not y then
72221: LD_VAR 0 7
72225: NOT
72226: IFTRUE 72235
72228: PUSH
72229: LD_VAR 0 8
72233: NOT
72234: OR
72235: IFFALSE 72239
// exit ;
72237: GO 72636
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72239: LD_ADDR_VAR 0 6
72243: PUSH
72244: LD_VAR 0 7
72248: PPUSH
72249: LD_INT 0
72251: PPUSH
72252: LD_INT 4
72254: PPUSH
72255: CALL_OW 272
72259: PUSH
72260: LD_VAR 0 8
72264: PPUSH
72265: LD_INT 0
72267: PPUSH
72268: LD_INT 4
72270: PPUSH
72271: CALL_OW 273
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_VAR 0 7
72284: PPUSH
72285: LD_INT 1
72287: PPUSH
72288: LD_INT 4
72290: PPUSH
72291: CALL_OW 272
72295: PUSH
72296: LD_VAR 0 8
72300: PPUSH
72301: LD_INT 1
72303: PPUSH
72304: LD_INT 4
72306: PPUSH
72307: CALL_OW 273
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_VAR 0 7
72320: PPUSH
72321: LD_INT 2
72323: PPUSH
72324: LD_INT 4
72326: PPUSH
72327: CALL_OW 272
72331: PUSH
72332: LD_VAR 0 8
72336: PPUSH
72337: LD_INT 2
72339: PPUSH
72340: LD_INT 4
72342: PPUSH
72343: CALL_OW 273
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PUSH
72352: LD_VAR 0 7
72356: PPUSH
72357: LD_INT 3
72359: PPUSH
72360: LD_INT 4
72362: PPUSH
72363: CALL_OW 272
72367: PUSH
72368: LD_VAR 0 8
72372: PPUSH
72373: LD_INT 3
72375: PPUSH
72376: LD_INT 4
72378: PPUSH
72379: CALL_OW 273
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_VAR 0 7
72392: PPUSH
72393: LD_INT 4
72395: PPUSH
72396: LD_INT 4
72398: PPUSH
72399: CALL_OW 272
72403: PUSH
72404: LD_VAR 0 8
72408: PPUSH
72409: LD_INT 4
72411: PPUSH
72412: LD_INT 4
72414: PPUSH
72415: CALL_OW 273
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_VAR 0 7
72428: PPUSH
72429: LD_INT 5
72431: PPUSH
72432: LD_INT 4
72434: PPUSH
72435: CALL_OW 272
72439: PUSH
72440: LD_VAR 0 8
72444: PPUSH
72445: LD_INT 5
72447: PPUSH
72448: LD_INT 4
72450: PPUSH
72451: CALL_OW 273
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: ST_TO_ADDR
// for i = tmp downto 1 do
72468: LD_ADDR_VAR 0 4
72472: PUSH
72473: DOUBLE
72474: LD_VAR 0 6
72478: INC
72479: ST_TO_ADDR
72480: LD_INT 1
72482: PUSH
72483: FOR_DOWNTO
72484: IFFALSE 72587
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72486: LD_VAR 0 6
72490: PUSH
72491: LD_VAR 0 4
72495: ARRAY
72496: PUSH
72497: LD_INT 1
72499: ARRAY
72500: PPUSH
72501: LD_VAR 0 6
72505: PUSH
72506: LD_VAR 0 4
72510: ARRAY
72511: PUSH
72512: LD_INT 2
72514: ARRAY
72515: PPUSH
72516: CALL_OW 488
72520: NOT
72521: IFTRUE 72563
72523: PUSH
72524: LD_VAR 0 6
72528: PUSH
72529: LD_VAR 0 4
72533: ARRAY
72534: PUSH
72535: LD_INT 1
72537: ARRAY
72538: PPUSH
72539: LD_VAR 0 6
72543: PUSH
72544: LD_VAR 0 4
72548: ARRAY
72549: PUSH
72550: LD_INT 2
72552: ARRAY
72553: PPUSH
72554: CALL_OW 428
72558: PUSH
72559: LD_INT 0
72561: NONEQUAL
72562: OR
72563: IFFALSE 72585
// tmp := Delete ( tmp , i ) ;
72565: LD_ADDR_VAR 0 6
72569: PUSH
72570: LD_VAR 0 6
72574: PPUSH
72575: LD_VAR 0 4
72579: PPUSH
72580: CALL_OW 3
72584: ST_TO_ADDR
72585: GO 72483
72587: POP
72588: POP
// j := GetClosestHex ( unit , tmp ) ;
72589: LD_ADDR_VAR 0 5
72593: PUSH
72594: LD_VAR 0 1
72598: PPUSH
72599: LD_VAR 0 6
72603: PPUSH
72604: CALL 71881 0 2
72608: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72609: LD_VAR 0 1
72613: PPUSH
72614: LD_VAR 0 5
72618: PUSH
72619: LD_INT 1
72621: ARRAY
72622: PPUSH
72623: LD_VAR 0 5
72627: PUSH
72628: LD_INT 2
72630: ARRAY
72631: PPUSH
72632: CALL_OW 111
// end ;
72636: LD_VAR 0 3
72640: RET
// export function PrepareApemanSoldier ( ) ; begin
72641: LD_INT 0
72643: PPUSH
// uc_nation := 0 ;
72644: LD_ADDR_OWVAR 21
72648: PUSH
72649: LD_INT 0
72651: ST_TO_ADDR
// hc_sex := sex_male ;
72652: LD_ADDR_OWVAR 27
72656: PUSH
72657: LD_INT 1
72659: ST_TO_ADDR
// hc_name :=  ;
72660: LD_ADDR_OWVAR 26
72664: PUSH
72665: LD_STRING 
72667: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72668: LD_ADDR_OWVAR 28
72672: PUSH
72673: LD_INT 15
72675: ST_TO_ADDR
// hc_gallery :=  ;
72676: LD_ADDR_OWVAR 33
72680: PUSH
72681: LD_STRING 
72683: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72684: LD_ADDR_OWVAR 31
72688: PUSH
72689: LD_INT 0
72691: PPUSH
72692: LD_INT 3
72694: PPUSH
72695: CALL_OW 12
72699: PUSH
72700: LD_INT 0
72702: PPUSH
72703: LD_INT 3
72705: PPUSH
72706: CALL_OW 12
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72723: LD_ADDR_OWVAR 29
72727: PUSH
72728: LD_INT 12
72730: PUSH
72731: LD_INT 12
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: ST_TO_ADDR
// end ;
72738: LD_VAR 0 1
72742: RET
// export function PrepareApemanEngineer ( ) ; begin
72743: LD_INT 0
72745: PPUSH
// uc_nation := 0 ;
72746: LD_ADDR_OWVAR 21
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// hc_sex := sex_male ;
72754: LD_ADDR_OWVAR 27
72758: PUSH
72759: LD_INT 1
72761: ST_TO_ADDR
// hc_name :=  ;
72762: LD_ADDR_OWVAR 26
72766: PUSH
72767: LD_STRING 
72769: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72770: LD_ADDR_OWVAR 28
72774: PUSH
72775: LD_INT 16
72777: ST_TO_ADDR
// hc_gallery :=  ;
72778: LD_ADDR_OWVAR 33
72782: PUSH
72783: LD_STRING 
72785: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72786: LD_ADDR_OWVAR 31
72790: PUSH
72791: LD_INT 0
72793: PPUSH
72794: LD_INT 3
72796: PPUSH
72797: CALL_OW 12
72801: PUSH
72802: LD_INT 0
72804: PPUSH
72805: LD_INT 3
72807: PPUSH
72808: CALL_OW 12
72812: PUSH
72813: LD_INT 0
72815: PUSH
72816: LD_INT 0
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72825: LD_ADDR_OWVAR 29
72829: PUSH
72830: LD_INT 12
72832: PUSH
72833: LD_INT 12
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: ST_TO_ADDR
// end ;
72840: LD_VAR 0 1
72844: RET
// export function PrepareApeman ( agressivity ) ; begin
72845: LD_INT 0
72847: PPUSH
// uc_side := 0 ;
72848: LD_ADDR_OWVAR 20
72852: PUSH
72853: LD_INT 0
72855: ST_TO_ADDR
// uc_nation := 0 ;
72856: LD_ADDR_OWVAR 21
72860: PUSH
72861: LD_INT 0
72863: ST_TO_ADDR
// hc_sex := sex_male ;
72864: LD_ADDR_OWVAR 27
72868: PUSH
72869: LD_INT 1
72871: ST_TO_ADDR
// hc_class := class_apeman ;
72872: LD_ADDR_OWVAR 28
72876: PUSH
72877: LD_INT 12
72879: ST_TO_ADDR
// hc_gallery :=  ;
72880: LD_ADDR_OWVAR 33
72884: PUSH
72885: LD_STRING 
72887: ST_TO_ADDR
// hc_name :=  ;
72888: LD_ADDR_OWVAR 26
72892: PUSH
72893: LD_STRING 
72895: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72896: LD_ADDR_OWVAR 29
72900: PUSH
72901: LD_INT 12
72903: PUSH
72904: LD_INT 12
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: ST_TO_ADDR
// if agressivity = 0 then
72911: LD_VAR 0 1
72915: PUSH
72916: LD_INT 0
72918: EQUAL
72919: IFFALSE 72931
// hc_agressivity := 0 else
72921: LD_ADDR_OWVAR 35
72925: PUSH
72926: LD_INT 0
72928: ST_TO_ADDR
72929: GO 72952
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72931: LD_ADDR_OWVAR 35
72935: PUSH
72936: LD_VAR 0 1
72940: NEG
72941: PPUSH
72942: LD_VAR 0 1
72946: PPUSH
72947: CALL_OW 12
72951: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72952: LD_ADDR_OWVAR 31
72956: PUSH
72957: LD_INT 0
72959: PPUSH
72960: LD_INT 3
72962: PPUSH
72963: CALL_OW 12
72967: PUSH
72968: LD_INT 0
72970: PPUSH
72971: LD_INT 3
72973: PPUSH
72974: CALL_OW 12
72978: PUSH
72979: LD_INT 0
72981: PUSH
72982: LD_INT 0
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: ST_TO_ADDR
// end ;
72991: LD_VAR 0 2
72995: RET
// export function PrepareTiger ( agressivity ) ; begin
72996: LD_INT 0
72998: PPUSH
// uc_side := 0 ;
72999: LD_ADDR_OWVAR 20
73003: PUSH
73004: LD_INT 0
73006: ST_TO_ADDR
// uc_nation := 0 ;
73007: LD_ADDR_OWVAR 21
73011: PUSH
73012: LD_INT 0
73014: ST_TO_ADDR
// InitHc ;
73015: CALL_OW 19
// hc_class := class_tiger ;
73019: LD_ADDR_OWVAR 28
73023: PUSH
73024: LD_INT 14
73026: ST_TO_ADDR
// hc_gallery :=  ;
73027: LD_ADDR_OWVAR 33
73031: PUSH
73032: LD_STRING 
73034: ST_TO_ADDR
// hc_name :=  ;
73035: LD_ADDR_OWVAR 26
73039: PUSH
73040: LD_STRING 
73042: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73043: LD_ADDR_OWVAR 35
73047: PUSH
73048: LD_VAR 0 1
73052: NEG
73053: PPUSH
73054: LD_VAR 0 1
73058: PPUSH
73059: CALL_OW 12
73063: ST_TO_ADDR
// end ;
73064: LD_VAR 0 2
73068: RET
// export function PrepareEnchidna ( ) ; begin
73069: LD_INT 0
73071: PPUSH
// uc_side := 0 ;
73072: LD_ADDR_OWVAR 20
73076: PUSH
73077: LD_INT 0
73079: ST_TO_ADDR
// uc_nation := 0 ;
73080: LD_ADDR_OWVAR 21
73084: PUSH
73085: LD_INT 0
73087: ST_TO_ADDR
// InitHc ;
73088: CALL_OW 19
// hc_class := class_baggie ;
73092: LD_ADDR_OWVAR 28
73096: PUSH
73097: LD_INT 13
73099: ST_TO_ADDR
// hc_gallery :=  ;
73100: LD_ADDR_OWVAR 33
73104: PUSH
73105: LD_STRING 
73107: ST_TO_ADDR
// hc_name :=  ;
73108: LD_ADDR_OWVAR 26
73112: PUSH
73113: LD_STRING 
73115: ST_TO_ADDR
// end ;
73116: LD_VAR 0 1
73120: RET
// export function PrepareFrog ( ) ; begin
73121: LD_INT 0
73123: PPUSH
// uc_side := 0 ;
73124: LD_ADDR_OWVAR 20
73128: PUSH
73129: LD_INT 0
73131: ST_TO_ADDR
// uc_nation := 0 ;
73132: LD_ADDR_OWVAR 21
73136: PUSH
73137: LD_INT 0
73139: ST_TO_ADDR
// InitHc ;
73140: CALL_OW 19
// hc_class := class_frog ;
73144: LD_ADDR_OWVAR 28
73148: PUSH
73149: LD_INT 19
73151: ST_TO_ADDR
// hc_gallery :=  ;
73152: LD_ADDR_OWVAR 33
73156: PUSH
73157: LD_STRING 
73159: ST_TO_ADDR
// hc_name :=  ;
73160: LD_ADDR_OWVAR 26
73164: PUSH
73165: LD_STRING 
73167: ST_TO_ADDR
// end ;
73168: LD_VAR 0 1
73172: RET
// export function PrepareFish ( ) ; begin
73173: LD_INT 0
73175: PPUSH
// uc_side := 0 ;
73176: LD_ADDR_OWVAR 20
73180: PUSH
73181: LD_INT 0
73183: ST_TO_ADDR
// uc_nation := 0 ;
73184: LD_ADDR_OWVAR 21
73188: PUSH
73189: LD_INT 0
73191: ST_TO_ADDR
// InitHc ;
73192: CALL_OW 19
// hc_class := class_fish ;
73196: LD_ADDR_OWVAR 28
73200: PUSH
73201: LD_INT 20
73203: ST_TO_ADDR
// hc_gallery :=  ;
73204: LD_ADDR_OWVAR 33
73208: PUSH
73209: LD_STRING 
73211: ST_TO_ADDR
// hc_name :=  ;
73212: LD_ADDR_OWVAR 26
73216: PUSH
73217: LD_STRING 
73219: ST_TO_ADDR
// end ;
73220: LD_VAR 0 1
73224: RET
// export function PrepareBird ( ) ; begin
73225: LD_INT 0
73227: PPUSH
// uc_side := 0 ;
73228: LD_ADDR_OWVAR 20
73232: PUSH
73233: LD_INT 0
73235: ST_TO_ADDR
// uc_nation := 0 ;
73236: LD_ADDR_OWVAR 21
73240: PUSH
73241: LD_INT 0
73243: ST_TO_ADDR
// InitHc ;
73244: CALL_OW 19
// hc_class := class_phororhacos ;
73248: LD_ADDR_OWVAR 28
73252: PUSH
73253: LD_INT 18
73255: ST_TO_ADDR
// hc_gallery :=  ;
73256: LD_ADDR_OWVAR 33
73260: PUSH
73261: LD_STRING 
73263: ST_TO_ADDR
// hc_name :=  ;
73264: LD_ADDR_OWVAR 26
73268: PUSH
73269: LD_STRING 
73271: ST_TO_ADDR
// end ;
73272: LD_VAR 0 1
73276: RET
// export function PrepareHorse ( ) ; begin
73277: LD_INT 0
73279: PPUSH
// uc_side := 0 ;
73280: LD_ADDR_OWVAR 20
73284: PUSH
73285: LD_INT 0
73287: ST_TO_ADDR
// uc_nation := 0 ;
73288: LD_ADDR_OWVAR 21
73292: PUSH
73293: LD_INT 0
73295: ST_TO_ADDR
// InitHc ;
73296: CALL_OW 19
// hc_class := class_horse ;
73300: LD_ADDR_OWVAR 28
73304: PUSH
73305: LD_INT 21
73307: ST_TO_ADDR
// hc_gallery :=  ;
73308: LD_ADDR_OWVAR 33
73312: PUSH
73313: LD_STRING 
73315: ST_TO_ADDR
// hc_name :=  ;
73316: LD_ADDR_OWVAR 26
73320: PUSH
73321: LD_STRING 
73323: ST_TO_ADDR
// end ;
73324: LD_VAR 0 1
73328: RET
// export function PrepareMastodont ( ) ; begin
73329: LD_INT 0
73331: PPUSH
// uc_side := 0 ;
73332: LD_ADDR_OWVAR 20
73336: PUSH
73337: LD_INT 0
73339: ST_TO_ADDR
// uc_nation := 0 ;
73340: LD_ADDR_OWVAR 21
73344: PUSH
73345: LD_INT 0
73347: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73348: LD_ADDR_OWVAR 37
73352: PUSH
73353: LD_INT 31
73355: ST_TO_ADDR
// vc_control := control_rider ;
73356: LD_ADDR_OWVAR 38
73360: PUSH
73361: LD_INT 4
73363: ST_TO_ADDR
// end ;
73364: LD_VAR 0 1
73368: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73369: LD_INT 0
73371: PPUSH
73372: PPUSH
73373: PPUSH
// uc_side = 0 ;
73374: LD_ADDR_OWVAR 20
73378: PUSH
73379: LD_INT 0
73381: ST_TO_ADDR
// uc_nation = 0 ;
73382: LD_ADDR_OWVAR 21
73386: PUSH
73387: LD_INT 0
73389: ST_TO_ADDR
// InitHc_All ( ) ;
73390: CALL_OW 584
// InitVc ;
73394: CALL_OW 20
// if mastodonts then
73398: LD_VAR 0 6
73402: IFFALSE 73469
// for i = 1 to mastodonts do
73404: LD_ADDR_VAR 0 11
73408: PUSH
73409: DOUBLE
73410: LD_INT 1
73412: DEC
73413: ST_TO_ADDR
73414: LD_VAR 0 6
73418: PUSH
73419: FOR_TO
73420: IFFALSE 73467
// begin vc_chassis := 31 ;
73422: LD_ADDR_OWVAR 37
73426: PUSH
73427: LD_INT 31
73429: ST_TO_ADDR
// vc_control := control_rider ;
73430: LD_ADDR_OWVAR 38
73434: PUSH
73435: LD_INT 4
73437: ST_TO_ADDR
// animal := CreateVehicle ;
73438: LD_ADDR_VAR 0 12
73442: PUSH
73443: CALL_OW 45
73447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73448: LD_VAR 0 12
73452: PPUSH
73453: LD_VAR 0 8
73457: PPUSH
73458: LD_INT 0
73460: PPUSH
73461: CALL 75611 0 3
// end ;
73465: GO 73419
73467: POP
73468: POP
// if horses then
73469: LD_VAR 0 5
73473: IFFALSE 73540
// for i = 1 to horses do
73475: LD_ADDR_VAR 0 11
73479: PUSH
73480: DOUBLE
73481: LD_INT 1
73483: DEC
73484: ST_TO_ADDR
73485: LD_VAR 0 5
73489: PUSH
73490: FOR_TO
73491: IFFALSE 73538
// begin hc_class := 21 ;
73493: LD_ADDR_OWVAR 28
73497: PUSH
73498: LD_INT 21
73500: ST_TO_ADDR
// hc_gallery :=  ;
73501: LD_ADDR_OWVAR 33
73505: PUSH
73506: LD_STRING 
73508: ST_TO_ADDR
// animal := CreateHuman ;
73509: LD_ADDR_VAR 0 12
73513: PUSH
73514: CALL_OW 44
73518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73519: LD_VAR 0 12
73523: PPUSH
73524: LD_VAR 0 8
73528: PPUSH
73529: LD_INT 0
73531: PPUSH
73532: CALL 75611 0 3
// end ;
73536: GO 73490
73538: POP
73539: POP
// if birds then
73540: LD_VAR 0 1
73544: IFFALSE 73611
// for i = 1 to birds do
73546: LD_ADDR_VAR 0 11
73550: PUSH
73551: DOUBLE
73552: LD_INT 1
73554: DEC
73555: ST_TO_ADDR
73556: LD_VAR 0 1
73560: PUSH
73561: FOR_TO
73562: IFFALSE 73609
// begin hc_class := 18 ;
73564: LD_ADDR_OWVAR 28
73568: PUSH
73569: LD_INT 18
73571: ST_TO_ADDR
// hc_gallery =  ;
73572: LD_ADDR_OWVAR 33
73576: PUSH
73577: LD_STRING 
73579: ST_TO_ADDR
// animal := CreateHuman ;
73580: LD_ADDR_VAR 0 12
73584: PUSH
73585: CALL_OW 44
73589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73590: LD_VAR 0 12
73594: PPUSH
73595: LD_VAR 0 8
73599: PPUSH
73600: LD_INT 0
73602: PPUSH
73603: CALL 75611 0 3
// end ;
73607: GO 73561
73609: POP
73610: POP
// if tigers then
73611: LD_VAR 0 2
73615: IFFALSE 73699
// for i = 1 to tigers do
73617: LD_ADDR_VAR 0 11
73621: PUSH
73622: DOUBLE
73623: LD_INT 1
73625: DEC
73626: ST_TO_ADDR
73627: LD_VAR 0 2
73631: PUSH
73632: FOR_TO
73633: IFFALSE 73697
// begin hc_class = class_tiger ;
73635: LD_ADDR_OWVAR 28
73639: PUSH
73640: LD_INT 14
73642: ST_TO_ADDR
// hc_gallery =  ;
73643: LD_ADDR_OWVAR 33
73647: PUSH
73648: LD_STRING 
73650: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73651: LD_ADDR_OWVAR 35
73655: PUSH
73656: LD_INT 7
73658: NEG
73659: PPUSH
73660: LD_INT 7
73662: PPUSH
73663: CALL_OW 12
73667: ST_TO_ADDR
// animal := CreateHuman ;
73668: LD_ADDR_VAR 0 12
73672: PUSH
73673: CALL_OW 44
73677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73678: LD_VAR 0 12
73682: PPUSH
73683: LD_VAR 0 8
73687: PPUSH
73688: LD_INT 0
73690: PPUSH
73691: CALL 75611 0 3
// end ;
73695: GO 73632
73697: POP
73698: POP
// if apemans then
73699: LD_VAR 0 3
73703: IFFALSE 73826
// for i = 1 to apemans do
73705: LD_ADDR_VAR 0 11
73709: PUSH
73710: DOUBLE
73711: LD_INT 1
73713: DEC
73714: ST_TO_ADDR
73715: LD_VAR 0 3
73719: PUSH
73720: FOR_TO
73721: IFFALSE 73824
// begin hc_class = class_apeman ;
73723: LD_ADDR_OWVAR 28
73727: PUSH
73728: LD_INT 12
73730: ST_TO_ADDR
// hc_gallery =  ;
73731: LD_ADDR_OWVAR 33
73735: PUSH
73736: LD_STRING 
73738: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73739: LD_ADDR_OWVAR 35
73743: PUSH
73744: LD_INT 2
73746: NEG
73747: PPUSH
73748: LD_INT 2
73750: PPUSH
73751: CALL_OW 12
73755: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73756: LD_ADDR_OWVAR 31
73760: PUSH
73761: LD_INT 1
73763: PPUSH
73764: LD_INT 3
73766: PPUSH
73767: CALL_OW 12
73771: PUSH
73772: LD_INT 1
73774: PPUSH
73775: LD_INT 3
73777: PPUSH
73778: CALL_OW 12
73782: PUSH
73783: LD_INT 0
73785: PUSH
73786: LD_INT 0
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: ST_TO_ADDR
// animal := CreateHuman ;
73795: LD_ADDR_VAR 0 12
73799: PUSH
73800: CALL_OW 44
73804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73805: LD_VAR 0 12
73809: PPUSH
73810: LD_VAR 0 8
73814: PPUSH
73815: LD_INT 0
73817: PPUSH
73818: CALL 75611 0 3
// end ;
73822: GO 73720
73824: POP
73825: POP
// if enchidnas then
73826: LD_VAR 0 4
73830: IFFALSE 73897
// for i = 1 to enchidnas do
73832: LD_ADDR_VAR 0 11
73836: PUSH
73837: DOUBLE
73838: LD_INT 1
73840: DEC
73841: ST_TO_ADDR
73842: LD_VAR 0 4
73846: PUSH
73847: FOR_TO
73848: IFFALSE 73895
// begin hc_class = 13 ;
73850: LD_ADDR_OWVAR 28
73854: PUSH
73855: LD_INT 13
73857: ST_TO_ADDR
// hc_gallery =  ;
73858: LD_ADDR_OWVAR 33
73862: PUSH
73863: LD_STRING 
73865: ST_TO_ADDR
// animal := CreateHuman ;
73866: LD_ADDR_VAR 0 12
73870: PUSH
73871: CALL_OW 44
73875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73876: LD_VAR 0 12
73880: PPUSH
73881: LD_VAR 0 8
73885: PPUSH
73886: LD_INT 0
73888: PPUSH
73889: CALL 75611 0 3
// end ;
73893: GO 73847
73895: POP
73896: POP
// if fishes then
73897: LD_VAR 0 7
73901: IFFALSE 73968
// for i = 1 to fishes do
73903: LD_ADDR_VAR 0 11
73907: PUSH
73908: DOUBLE
73909: LD_INT 1
73911: DEC
73912: ST_TO_ADDR
73913: LD_VAR 0 7
73917: PUSH
73918: FOR_TO
73919: IFFALSE 73966
// begin hc_class = 20 ;
73921: LD_ADDR_OWVAR 28
73925: PUSH
73926: LD_INT 20
73928: ST_TO_ADDR
// hc_gallery =  ;
73929: LD_ADDR_OWVAR 33
73933: PUSH
73934: LD_STRING 
73936: ST_TO_ADDR
// animal := CreateHuman ;
73937: LD_ADDR_VAR 0 12
73941: PUSH
73942: CALL_OW 44
73946: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73947: LD_VAR 0 12
73951: PPUSH
73952: LD_VAR 0 9
73956: PPUSH
73957: LD_INT 0
73959: PPUSH
73960: CALL 75611 0 3
// end ;
73964: GO 73918
73966: POP
73967: POP
// end ;
73968: LD_VAR 0 10
73972: RET
// export function WantHeal ( sci , unit ) ; begin
73973: LD_INT 0
73975: PPUSH
// if GetTaskList ( sci ) > 0 then
73976: LD_VAR 0 1
73980: PPUSH
73981: CALL_OW 437
73985: PUSH
73986: LD_INT 0
73988: GREATER
73989: IFFALSE 74061
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73991: LD_VAR 0 1
73995: PPUSH
73996: CALL_OW 437
74000: PUSH
74001: LD_INT 1
74003: ARRAY
74004: PUSH
74005: LD_INT 1
74007: ARRAY
74008: PUSH
74009: LD_STRING l
74011: EQUAL
74012: IFFALSE 74039
74014: PUSH
74015: LD_VAR 0 1
74019: PPUSH
74020: CALL_OW 437
74024: PUSH
74025: LD_INT 1
74027: ARRAY
74028: PUSH
74029: LD_INT 4
74031: ARRAY
74032: PUSH
74033: LD_VAR 0 2
74037: EQUAL
74038: AND
74039: IFFALSE 74051
// result := true else
74041: LD_ADDR_VAR 0 3
74045: PUSH
74046: LD_INT 1
74048: ST_TO_ADDR
74049: GO 74059
// result := false ;
74051: LD_ADDR_VAR 0 3
74055: PUSH
74056: LD_INT 0
74058: ST_TO_ADDR
// end else
74059: GO 74069
// result := false ;
74061: LD_ADDR_VAR 0 3
74065: PUSH
74066: LD_INT 0
74068: ST_TO_ADDR
// end ;
74069: LD_VAR 0 3
74073: RET
// export function HealTarget ( sci ) ; begin
74074: LD_INT 0
74076: PPUSH
// if not sci then
74077: LD_VAR 0 1
74081: NOT
74082: IFFALSE 74086
// exit ;
74084: GO 74151
// result := 0 ;
74086: LD_ADDR_VAR 0 2
74090: PUSH
74091: LD_INT 0
74093: ST_TO_ADDR
// if GetTaskList ( sci ) then
74094: LD_VAR 0 1
74098: PPUSH
74099: CALL_OW 437
74103: IFFALSE 74151
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74105: LD_VAR 0 1
74109: PPUSH
74110: CALL_OW 437
74114: PUSH
74115: LD_INT 1
74117: ARRAY
74118: PUSH
74119: LD_INT 1
74121: ARRAY
74122: PUSH
74123: LD_STRING l
74125: EQUAL
74126: IFFALSE 74151
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74128: LD_ADDR_VAR 0 2
74132: PUSH
74133: LD_VAR 0 1
74137: PPUSH
74138: CALL_OW 437
74142: PUSH
74143: LD_INT 1
74145: ARRAY
74146: PUSH
74147: LD_INT 4
74149: ARRAY
74150: ST_TO_ADDR
// end ;
74151: LD_VAR 0 2
74155: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74156: LD_INT 0
74158: PPUSH
74159: PPUSH
74160: PPUSH
74161: PPUSH
// if not base_units then
74162: LD_VAR 0 1
74166: NOT
74167: IFFALSE 74171
// exit ;
74169: GO 74258
// result := false ;
74171: LD_ADDR_VAR 0 2
74175: PUSH
74176: LD_INT 0
74178: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74179: LD_ADDR_VAR 0 5
74183: PUSH
74184: LD_VAR 0 1
74188: PPUSH
74189: LD_INT 21
74191: PUSH
74192: LD_INT 3
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PPUSH
74199: CALL_OW 72
74203: ST_TO_ADDR
// if not tmp then
74204: LD_VAR 0 5
74208: NOT
74209: IFFALSE 74213
// exit ;
74211: GO 74258
// for i in tmp do
74213: LD_ADDR_VAR 0 3
74217: PUSH
74218: LD_VAR 0 5
74222: PUSH
74223: FOR_IN
74224: IFFALSE 74256
// begin result := EnemyInRange ( i , 22 ) ;
74226: LD_ADDR_VAR 0 2
74230: PUSH
74231: LD_VAR 0 3
74235: PPUSH
74236: LD_INT 22
74238: PPUSH
74239: CALL 71683 0 2
74243: ST_TO_ADDR
// if result then
74244: LD_VAR 0 2
74248: IFFALSE 74254
// exit ;
74250: POP
74251: POP
74252: GO 74258
// end ;
74254: GO 74223
74256: POP
74257: POP
// end ;
74258: LD_VAR 0 2
74262: RET
// export function FilterByTag ( units , tag ) ; begin
74263: LD_INT 0
74265: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74266: LD_ADDR_VAR 0 3
74270: PUSH
74271: LD_VAR 0 1
74275: PPUSH
74276: LD_INT 120
74278: PUSH
74279: LD_VAR 0 2
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PPUSH
74288: CALL_OW 72
74292: ST_TO_ADDR
// end ;
74293: LD_VAR 0 3
74297: RET
// export function IsDriver ( un ) ; begin
74298: LD_INT 0
74300: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74301: LD_ADDR_VAR 0 2
74305: PUSH
74306: LD_VAR 0 1
74310: PUSH
74311: LD_INT 55
74313: PUSH
74314: EMPTY
74315: LIST
74316: PPUSH
74317: CALL_OW 69
74321: IN
74322: ST_TO_ADDR
// end ;
74323: LD_VAR 0 2
74327: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74328: LD_INT 0
74330: PPUSH
74331: PPUSH
// list := [ ] ;
74332: LD_ADDR_VAR 0 5
74336: PUSH
74337: EMPTY
74338: ST_TO_ADDR
// case d of 0 :
74339: LD_VAR 0 3
74343: PUSH
74344: LD_INT 0
74346: DOUBLE
74347: EQUAL
74348: IFTRUE 74352
74350: GO 74485
74352: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74353: LD_ADDR_VAR 0 5
74357: PUSH
74358: LD_VAR 0 1
74362: PUSH
74363: LD_INT 4
74365: MINUS
74366: PUSH
74367: LD_VAR 0 2
74371: PUSH
74372: LD_INT 4
74374: MINUS
74375: PUSH
74376: LD_INT 2
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: LIST
74383: PUSH
74384: LD_VAR 0 1
74388: PUSH
74389: LD_INT 3
74391: MINUS
74392: PUSH
74393: LD_VAR 0 2
74397: PUSH
74398: LD_INT 1
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: PUSH
74406: LD_VAR 0 1
74410: PUSH
74411: LD_INT 4
74413: PLUS
74414: PUSH
74415: LD_VAR 0 2
74419: PUSH
74420: LD_INT 4
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: PUSH
74428: LD_VAR 0 1
74432: PUSH
74433: LD_INT 3
74435: PLUS
74436: PUSH
74437: LD_VAR 0 2
74441: PUSH
74442: LD_INT 3
74444: PLUS
74445: PUSH
74446: LD_INT 5
74448: PUSH
74449: EMPTY
74450: LIST
74451: LIST
74452: LIST
74453: PUSH
74454: LD_VAR 0 1
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_INT 4
74466: PLUS
74467: PUSH
74468: LD_INT 0
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: LIST
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: ST_TO_ADDR
// end ; 1 :
74483: GO 75183
74485: LD_INT 1
74487: DOUBLE
74488: EQUAL
74489: IFTRUE 74493
74491: GO 74626
74493: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74494: LD_ADDR_VAR 0 5
74498: PUSH
74499: LD_VAR 0 1
74503: PUSH
74504: LD_VAR 0 2
74508: PUSH
74509: LD_INT 4
74511: MINUS
74512: PUSH
74513: LD_INT 3
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: LIST
74520: PUSH
74521: LD_VAR 0 1
74525: PUSH
74526: LD_INT 3
74528: MINUS
74529: PUSH
74530: LD_VAR 0 2
74534: PUSH
74535: LD_INT 3
74537: MINUS
74538: PUSH
74539: LD_INT 2
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: LIST
74546: PUSH
74547: LD_VAR 0 1
74551: PUSH
74552: LD_INT 4
74554: MINUS
74555: PUSH
74556: LD_VAR 0 2
74560: PUSH
74561: LD_INT 1
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: PUSH
74569: LD_VAR 0 1
74573: PUSH
74574: LD_VAR 0 2
74578: PUSH
74579: LD_INT 3
74581: PLUS
74582: PUSH
74583: LD_INT 0
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: LIST
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_INT 4
74598: PLUS
74599: PUSH
74600: LD_VAR 0 2
74604: PUSH
74605: LD_INT 4
74607: PLUS
74608: PUSH
74609: LD_INT 5
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: LIST
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: ST_TO_ADDR
// end ; 2 :
74624: GO 75183
74626: LD_INT 2
74628: DOUBLE
74629: EQUAL
74630: IFTRUE 74634
74632: GO 74763
74634: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74635: LD_ADDR_VAR 0 5
74639: PUSH
74640: LD_VAR 0 1
74644: PUSH
74645: LD_VAR 0 2
74649: PUSH
74650: LD_INT 3
74652: MINUS
74653: PUSH
74654: LD_INT 3
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: LIST
74661: PUSH
74662: LD_VAR 0 1
74666: PUSH
74667: LD_INT 4
74669: PLUS
74670: PUSH
74671: LD_VAR 0 2
74675: PUSH
74676: LD_INT 4
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: PUSH
74684: LD_VAR 0 1
74688: PUSH
74689: LD_VAR 0 2
74693: PUSH
74694: LD_INT 4
74696: PLUS
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: LIST
74705: PUSH
74706: LD_VAR 0 1
74710: PUSH
74711: LD_INT 3
74713: MINUS
74714: PUSH
74715: LD_VAR 0 2
74719: PUSH
74720: LD_INT 1
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: LIST
74727: PUSH
74728: LD_VAR 0 1
74732: PUSH
74733: LD_INT 4
74735: MINUS
74736: PUSH
74737: LD_VAR 0 2
74741: PUSH
74742: LD_INT 4
74744: MINUS
74745: PUSH
74746: LD_INT 2
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: LIST
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: ST_TO_ADDR
// end ; 3 :
74761: GO 75183
74763: LD_INT 3
74765: DOUBLE
74766: EQUAL
74767: IFTRUE 74771
74769: GO 74904
74771: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74772: LD_ADDR_VAR 0 5
74776: PUSH
74777: LD_VAR 0 1
74781: PUSH
74782: LD_INT 3
74784: PLUS
74785: PUSH
74786: LD_VAR 0 2
74790: PUSH
74791: LD_INT 4
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: PUSH
74799: LD_VAR 0 1
74803: PUSH
74804: LD_INT 4
74806: PLUS
74807: PUSH
74808: LD_VAR 0 2
74812: PUSH
74813: LD_INT 4
74815: PLUS
74816: PUSH
74817: LD_INT 5
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: LIST
74824: PUSH
74825: LD_VAR 0 1
74829: PUSH
74830: LD_INT 4
74832: MINUS
74833: PUSH
74834: LD_VAR 0 2
74838: PUSH
74839: LD_INT 1
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: LIST
74846: PUSH
74847: LD_VAR 0 1
74851: PUSH
74852: LD_VAR 0 2
74856: PUSH
74857: LD_INT 4
74859: MINUS
74860: PUSH
74861: LD_INT 3
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: PUSH
74869: LD_VAR 0 1
74873: PUSH
74874: LD_INT 3
74876: MINUS
74877: PUSH
74878: LD_VAR 0 2
74882: PUSH
74883: LD_INT 3
74885: MINUS
74886: PUSH
74887: LD_INT 2
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: LIST
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: ST_TO_ADDR
// end ; 4 :
74902: GO 75183
74904: LD_INT 4
74906: DOUBLE
74907: EQUAL
74908: IFTRUE 74912
74910: GO 75045
74912: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74913: LD_ADDR_VAR 0 5
74917: PUSH
74918: LD_VAR 0 1
74922: PUSH
74923: LD_VAR 0 2
74927: PUSH
74928: LD_INT 4
74930: PLUS
74931: PUSH
74932: LD_INT 0
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: PUSH
74940: LD_VAR 0 1
74944: PUSH
74945: LD_INT 3
74947: PLUS
74948: PUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_INT 3
74956: PLUS
74957: PUSH
74958: LD_INT 5
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: LIST
74965: PUSH
74966: LD_VAR 0 1
74970: PUSH
74971: LD_INT 4
74973: PLUS
74974: PUSH
74975: LD_VAR 0 2
74979: PUSH
74980: LD_INT 4
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: LIST
74987: PUSH
74988: LD_VAR 0 1
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_INT 3
75000: MINUS
75001: PUSH
75002: LD_INT 3
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PUSH
75010: LD_VAR 0 1
75014: PUSH
75015: LD_INT 4
75017: MINUS
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: LD_INT 4
75026: MINUS
75027: PUSH
75028: LD_INT 2
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: LIST
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: ST_TO_ADDR
// end ; 5 :
75043: GO 75183
75045: LD_INT 5
75047: DOUBLE
75048: EQUAL
75049: IFTRUE 75053
75051: GO 75182
75053: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75054: LD_ADDR_VAR 0 5
75058: PUSH
75059: LD_VAR 0 1
75063: PUSH
75064: LD_INT 4
75066: MINUS
75067: PUSH
75068: LD_VAR 0 2
75072: PUSH
75073: LD_INT 1
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: LIST
75080: PUSH
75081: LD_VAR 0 1
75085: PUSH
75086: LD_VAR 0 2
75090: PUSH
75091: LD_INT 4
75093: MINUS
75094: PUSH
75095: LD_INT 3
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: LIST
75102: PUSH
75103: LD_VAR 0 1
75107: PUSH
75108: LD_INT 4
75110: PLUS
75111: PUSH
75112: LD_VAR 0 2
75116: PUSH
75117: LD_INT 4
75119: PLUS
75120: PUSH
75121: LD_INT 5
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: PUSH
75129: LD_VAR 0 1
75133: PUSH
75134: LD_INT 3
75136: PLUS
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_INT 4
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: LIST
75150: PUSH
75151: LD_VAR 0 1
75155: PUSH
75156: LD_VAR 0 2
75160: PUSH
75161: LD_INT 3
75163: PLUS
75164: PUSH
75165: LD_INT 0
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: ST_TO_ADDR
// end ; end ;
75180: GO 75183
75182: POP
// result := list ;
75183: LD_ADDR_VAR 0 4
75187: PUSH
75188: LD_VAR 0 5
75192: ST_TO_ADDR
// end ;
75193: LD_VAR 0 4
75197: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75198: LD_INT 0
75200: PPUSH
75201: PPUSH
75202: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75203: LD_VAR 0 1
75207: NOT
75208: IFTRUE 75236
75210: PUSH
75211: LD_VAR 0 2
75215: PUSH
75216: LD_INT 1
75218: PUSH
75219: LD_INT 2
75221: PUSH
75222: LD_INT 3
75224: PUSH
75225: LD_INT 4
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: IN
75234: NOT
75235: OR
75236: IFFALSE 75240
// exit ;
75238: GO 75323
// tmp := [ ] ;
75240: LD_ADDR_VAR 0 5
75244: PUSH
75245: EMPTY
75246: ST_TO_ADDR
// for i in units do
75247: LD_ADDR_VAR 0 4
75251: PUSH
75252: LD_VAR 0 1
75256: PUSH
75257: FOR_IN
75258: IFFALSE 75292
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75260: LD_ADDR_VAR 0 5
75264: PUSH
75265: LD_VAR 0 5
75269: PPUSH
75270: LD_VAR 0 4
75274: PPUSH
75275: LD_VAR 0 2
75279: PPUSH
75280: CALL_OW 259
75284: PPUSH
75285: CALL 76718 0 2
75289: ST_TO_ADDR
75290: GO 75257
75292: POP
75293: POP
// if not tmp then
75294: LD_VAR 0 5
75298: NOT
75299: IFFALSE 75303
// exit ;
75301: GO 75323
// result := SortListByListDesc ( units , tmp ) ;
75303: LD_ADDR_VAR 0 3
75307: PUSH
75308: LD_VAR 0 1
75312: PPUSH
75313: LD_VAR 0 5
75317: PPUSH
75318: CALL_OW 77
75322: ST_TO_ADDR
// end ;
75323: LD_VAR 0 3
75327: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75328: LD_INT 0
75330: PPUSH
75331: PPUSH
75332: PPUSH
// result := false ;
75333: LD_ADDR_VAR 0 3
75337: PUSH
75338: LD_INT 0
75340: ST_TO_ADDR
// if not building then
75341: LD_VAR 0 2
75345: NOT
75346: IFFALSE 75350
// exit ;
75348: GO 75494
// x := GetX ( building ) ;
75350: LD_ADDR_VAR 0 4
75354: PUSH
75355: LD_VAR 0 2
75359: PPUSH
75360: CALL_OW 250
75364: ST_TO_ADDR
// y := GetY ( building ) ;
75365: LD_ADDR_VAR 0 5
75369: PUSH
75370: LD_VAR 0 2
75374: PPUSH
75375: CALL_OW 251
75379: ST_TO_ADDR
// if not x or not y then
75380: LD_VAR 0 4
75384: NOT
75385: IFTRUE 75394
75387: PUSH
75388: LD_VAR 0 5
75392: NOT
75393: OR
75394: IFFALSE 75398
// exit ;
75396: GO 75494
// if GetTaskList ( unit ) then
75398: LD_VAR 0 1
75402: PPUSH
75403: CALL_OW 437
75407: IFFALSE 75494
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75409: LD_STRING e
75411: PUSH
75412: LD_VAR 0 1
75416: PPUSH
75417: CALL_OW 437
75421: PUSH
75422: LD_INT 1
75424: ARRAY
75425: PUSH
75426: LD_INT 1
75428: ARRAY
75429: EQUAL
75430: IFFALSE 75457
75432: PUSH
75433: LD_VAR 0 4
75437: PUSH
75438: LD_VAR 0 1
75442: PPUSH
75443: CALL_OW 437
75447: PUSH
75448: LD_INT 1
75450: ARRAY
75451: PUSH
75452: LD_INT 2
75454: ARRAY
75455: EQUAL
75456: AND
75457: IFFALSE 75484
75459: PUSH
75460: LD_VAR 0 5
75464: PUSH
75465: LD_VAR 0 1
75469: PPUSH
75470: CALL_OW 437
75474: PUSH
75475: LD_INT 1
75477: ARRAY
75478: PUSH
75479: LD_INT 3
75481: ARRAY
75482: EQUAL
75483: AND
75484: IFFALSE 75494
// result := true end ;
75486: LD_ADDR_VAR 0 3
75490: PUSH
75491: LD_INT 1
75493: ST_TO_ADDR
// end ;
75494: LD_VAR 0 3
75498: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75499: LD_INT 0
75501: PPUSH
// result := false ;
75502: LD_ADDR_VAR 0 4
75506: PUSH
75507: LD_INT 0
75509: ST_TO_ADDR
// if GetTaskList ( unit ) then
75510: LD_VAR 0 1
75514: PPUSH
75515: CALL_OW 437
75519: IFFALSE 75606
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75521: LD_STRING M
75523: PUSH
75524: LD_VAR 0 1
75528: PPUSH
75529: CALL_OW 437
75533: PUSH
75534: LD_INT 1
75536: ARRAY
75537: PUSH
75538: LD_INT 1
75540: ARRAY
75541: EQUAL
75542: IFFALSE 75569
75544: PUSH
75545: LD_VAR 0 2
75549: PUSH
75550: LD_VAR 0 1
75554: PPUSH
75555: CALL_OW 437
75559: PUSH
75560: LD_INT 1
75562: ARRAY
75563: PUSH
75564: LD_INT 2
75566: ARRAY
75567: EQUAL
75568: AND
75569: IFFALSE 75596
75571: PUSH
75572: LD_VAR 0 3
75576: PUSH
75577: LD_VAR 0 1
75581: PPUSH
75582: CALL_OW 437
75586: PUSH
75587: LD_INT 1
75589: ARRAY
75590: PUSH
75591: LD_INT 3
75593: ARRAY
75594: EQUAL
75595: AND
75596: IFFALSE 75606
// result := true ;
75598: LD_ADDR_VAR 0 4
75602: PUSH
75603: LD_INT 1
75605: ST_TO_ADDR
// end ; end ;
75606: LD_VAR 0 4
75610: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75611: LD_INT 0
75613: PPUSH
75614: PPUSH
75615: PPUSH
75616: PPUSH
// if not unit or not area then
75617: LD_VAR 0 1
75621: NOT
75622: IFTRUE 75631
75624: PUSH
75625: LD_VAR 0 2
75629: NOT
75630: OR
75631: IFFALSE 75635
// exit ;
75633: GO 75811
// tmp := AreaToList ( area , i ) ;
75635: LD_ADDR_VAR 0 6
75639: PUSH
75640: LD_VAR 0 2
75644: PPUSH
75645: LD_VAR 0 5
75649: PPUSH
75650: CALL_OW 517
75654: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75655: LD_ADDR_VAR 0 5
75659: PUSH
75660: DOUBLE
75661: LD_INT 1
75663: DEC
75664: ST_TO_ADDR
75665: LD_VAR 0 6
75669: PUSH
75670: LD_INT 1
75672: ARRAY
75673: PUSH
75674: FOR_TO
75675: IFFALSE 75809
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75677: LD_ADDR_VAR 0 7
75681: PUSH
75682: LD_VAR 0 6
75686: PUSH
75687: LD_INT 1
75689: ARRAY
75690: PUSH
75691: LD_VAR 0 5
75695: ARRAY
75696: PUSH
75697: LD_VAR 0 6
75701: PUSH
75702: LD_INT 2
75704: ARRAY
75705: PUSH
75706: LD_VAR 0 5
75710: ARRAY
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75716: LD_INT 92
75718: PUSH
75719: LD_VAR 0 7
75723: PUSH
75724: LD_INT 1
75726: ARRAY
75727: PUSH
75728: LD_VAR 0 7
75732: PUSH
75733: LD_INT 2
75735: ARRAY
75736: PUSH
75737: LD_INT 2
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: PPUSH
75746: CALL_OW 69
75750: PUSH
75751: LD_INT 0
75753: EQUAL
75754: IFFALSE 75807
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75756: LD_VAR 0 1
75760: PPUSH
75761: LD_VAR 0 7
75765: PUSH
75766: LD_INT 1
75768: ARRAY
75769: PPUSH
75770: LD_VAR 0 7
75774: PUSH
75775: LD_INT 2
75777: ARRAY
75778: PPUSH
75779: LD_VAR 0 3
75783: PPUSH
75784: CALL_OW 48
// result := IsPlaced ( unit ) ;
75788: LD_ADDR_VAR 0 4
75792: PUSH
75793: LD_VAR 0 1
75797: PPUSH
75798: CALL_OW 305
75802: ST_TO_ADDR
// exit ;
75803: POP
75804: POP
75805: GO 75811
// end ; end ;
75807: GO 75674
75809: POP
75810: POP
// end ;
75811: LD_VAR 0 4
75815: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75816: LD_INT 0
75818: PPUSH
75819: PPUSH
75820: PPUSH
// if not side or side > 8 then
75821: LD_VAR 0 1
75825: NOT
75826: IFTRUE 75838
75828: PUSH
75829: LD_VAR 0 1
75833: PUSH
75834: LD_INT 8
75836: GREATER
75837: OR
75838: IFFALSE 75842
// exit ;
75840: GO 76029
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75842: LD_ADDR_VAR 0 4
75846: PUSH
75847: LD_INT 22
75849: PUSH
75850: LD_VAR 0 1
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 21
75861: PUSH
75862: LD_INT 3
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PPUSH
75873: CALL_OW 69
75877: ST_TO_ADDR
// if not tmp then
75878: LD_VAR 0 4
75882: NOT
75883: IFFALSE 75887
// exit ;
75885: GO 76029
// enable_addtolog := true ;
75887: LD_ADDR_OWVAR 81
75891: PUSH
75892: LD_INT 1
75894: ST_TO_ADDR
// AddToLog ( [ ) ;
75895: LD_STRING [
75897: PPUSH
75898: CALL_OW 561
// for i in tmp do
75902: LD_ADDR_VAR 0 3
75906: PUSH
75907: LD_VAR 0 4
75911: PUSH
75912: FOR_IN
75913: IFFALSE 76020
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75915: LD_STRING [
75917: PUSH
75918: LD_VAR 0 3
75922: PPUSH
75923: CALL_OW 266
75927: STR
75928: PUSH
75929: LD_STRING , 
75931: STR
75932: PUSH
75933: LD_VAR 0 3
75937: PPUSH
75938: CALL_OW 250
75942: STR
75943: PUSH
75944: LD_STRING , 
75946: STR
75947: PUSH
75948: LD_VAR 0 3
75952: PPUSH
75953: CALL_OW 251
75957: STR
75958: PUSH
75959: LD_STRING , 
75961: STR
75962: PUSH
75963: LD_VAR 0 3
75967: PPUSH
75968: CALL_OW 254
75972: STR
75973: PUSH
75974: LD_STRING , 
75976: STR
75977: PUSH
75978: LD_VAR 0 3
75982: PPUSH
75983: LD_INT 1
75985: PPUSH
75986: CALL_OW 268
75990: STR
75991: PUSH
75992: LD_STRING , 
75994: STR
75995: PUSH
75996: LD_VAR 0 3
76000: PPUSH
76001: LD_INT 2
76003: PPUSH
76004: CALL_OW 268
76008: STR
76009: PUSH
76010: LD_STRING ],
76012: STR
76013: PPUSH
76014: CALL_OW 561
// end ;
76018: GO 75912
76020: POP
76021: POP
// AddToLog ( ]; ) ;
76022: LD_STRING ];
76024: PPUSH
76025: CALL_OW 561
// end ;
76029: LD_VAR 0 2
76033: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76034: LD_INT 0
76036: PPUSH
76037: PPUSH
76038: PPUSH
76039: PPUSH
76040: PPUSH
// if not area or not rate or not max then
76041: LD_VAR 0 1
76045: NOT
76046: IFTRUE 76055
76048: PUSH
76049: LD_VAR 0 2
76053: NOT
76054: OR
76055: IFTRUE 76064
76057: PUSH
76058: LD_VAR 0 4
76062: NOT
76063: OR
76064: IFFALSE 76068
// exit ;
76066: GO 76257
// while 1 do
76068: LD_INT 1
76070: IFFALSE 76257
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76072: LD_ADDR_VAR 0 9
76076: PUSH
76077: LD_VAR 0 1
76081: PPUSH
76082: LD_INT 1
76084: PPUSH
76085: CALL_OW 287
76089: PUSH
76090: LD_INT 10
76092: MUL
76093: ST_TO_ADDR
// r := rate / 10 ;
76094: LD_ADDR_VAR 0 7
76098: PUSH
76099: LD_VAR 0 2
76103: PUSH
76104: LD_INT 10
76106: DIVREAL
76107: ST_TO_ADDR
// time := 1 1$00 ;
76108: LD_ADDR_VAR 0 8
76112: PUSH
76113: LD_INT 2100
76115: ST_TO_ADDR
// if amount < min then
76116: LD_VAR 0 9
76120: PUSH
76121: LD_VAR 0 3
76125: LESS
76126: IFFALSE 76144
// r := r * 2 else
76128: LD_ADDR_VAR 0 7
76132: PUSH
76133: LD_VAR 0 7
76137: PUSH
76138: LD_INT 2
76140: MUL
76141: ST_TO_ADDR
76142: GO 76170
// if amount > max then
76144: LD_VAR 0 9
76148: PUSH
76149: LD_VAR 0 4
76153: GREATER
76154: IFFALSE 76170
// r := r / 2 ;
76156: LD_ADDR_VAR 0 7
76160: PUSH
76161: LD_VAR 0 7
76165: PUSH
76166: LD_INT 2
76168: DIVREAL
76169: ST_TO_ADDR
// time := time / r ;
76170: LD_ADDR_VAR 0 8
76174: PUSH
76175: LD_VAR 0 8
76179: PUSH
76180: LD_VAR 0 7
76184: DIVREAL
76185: ST_TO_ADDR
// if time < 0 then
76186: LD_VAR 0 8
76190: PUSH
76191: LD_INT 0
76193: LESS
76194: IFFALSE 76211
// time := time * - 1 ;
76196: LD_ADDR_VAR 0 8
76200: PUSH
76201: LD_VAR 0 8
76205: PUSH
76206: LD_INT 1
76208: NEG
76209: MUL
76210: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76211: LD_VAR 0 8
76215: PUSH
76216: LD_INT 35
76218: PPUSH
76219: LD_INT 875
76221: PPUSH
76222: CALL_OW 12
76226: PLUS
76227: PPUSH
76228: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76232: LD_INT 1
76234: PPUSH
76235: LD_INT 5
76237: PPUSH
76238: CALL_OW 12
76242: PPUSH
76243: LD_VAR 0 1
76247: PPUSH
76248: LD_INT 1
76250: PPUSH
76251: CALL_OW 55
// end ;
76255: GO 76068
// end ;
76257: LD_VAR 0 5
76261: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76262: LD_INT 0
76264: PPUSH
76265: PPUSH
76266: PPUSH
76267: PPUSH
76268: PPUSH
76269: PPUSH
76270: PPUSH
76271: PPUSH
// if not turrets or not factories then
76272: LD_VAR 0 1
76276: NOT
76277: IFTRUE 76286
76279: PUSH
76280: LD_VAR 0 2
76284: NOT
76285: OR
76286: IFFALSE 76290
// exit ;
76288: GO 76597
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76290: LD_ADDR_VAR 0 10
76294: PUSH
76295: LD_INT 5
76297: PUSH
76298: LD_INT 6
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: LD_INT 2
76307: PUSH
76308: LD_INT 4
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: PUSH
76315: LD_INT 3
76317: PUSH
76318: LD_INT 5
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 24
76332: PUSH
76333: LD_INT 25
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 23
76342: PUSH
76343: LD_INT 27
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 42
76356: PUSH
76357: LD_INT 43
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 44
76366: PUSH
76367: LD_INT 46
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 45
76376: PUSH
76377: LD_INT 47
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: LIST
76393: ST_TO_ADDR
// result := [ ] ;
76394: LD_ADDR_VAR 0 3
76398: PUSH
76399: EMPTY
76400: ST_TO_ADDR
// for i in turrets do
76401: LD_ADDR_VAR 0 4
76405: PUSH
76406: LD_VAR 0 1
76410: PUSH
76411: FOR_IN
76412: IFFALSE 76595
// begin nat := GetNation ( i ) ;
76414: LD_ADDR_VAR 0 7
76418: PUSH
76419: LD_VAR 0 4
76423: PPUSH
76424: CALL_OW 248
76428: ST_TO_ADDR
// weapon := 0 ;
76429: LD_ADDR_VAR 0 8
76433: PUSH
76434: LD_INT 0
76436: ST_TO_ADDR
// if not nat then
76437: LD_VAR 0 7
76441: NOT
76442: IFFALSE 76446
// continue ;
76444: GO 76411
// for j in list [ nat ] do
76446: LD_ADDR_VAR 0 5
76450: PUSH
76451: LD_VAR 0 10
76455: PUSH
76456: LD_VAR 0 7
76460: ARRAY
76461: PUSH
76462: FOR_IN
76463: IFFALSE 76504
// if GetBWeapon ( i ) = j [ 1 ] then
76465: LD_VAR 0 4
76469: PPUSH
76470: CALL_OW 269
76474: PUSH
76475: LD_VAR 0 5
76479: PUSH
76480: LD_INT 1
76482: ARRAY
76483: EQUAL
76484: IFFALSE 76502
// begin weapon := j [ 2 ] ;
76486: LD_ADDR_VAR 0 8
76490: PUSH
76491: LD_VAR 0 5
76495: PUSH
76496: LD_INT 2
76498: ARRAY
76499: ST_TO_ADDR
// break ;
76500: GO 76504
// end ;
76502: GO 76462
76504: POP
76505: POP
// if not weapon then
76506: LD_VAR 0 8
76510: NOT
76511: IFFALSE 76515
// continue ;
76513: GO 76411
// for k in factories do
76515: LD_ADDR_VAR 0 6
76519: PUSH
76520: LD_VAR 0 2
76524: PUSH
76525: FOR_IN
76526: IFFALSE 76591
// begin weapons := AvailableWeaponList ( k ) ;
76528: LD_ADDR_VAR 0 9
76532: PUSH
76533: LD_VAR 0 6
76537: PPUSH
76538: CALL_OW 478
76542: ST_TO_ADDR
// if not weapons then
76543: LD_VAR 0 9
76547: NOT
76548: IFFALSE 76552
// continue ;
76550: GO 76525
// if weapon in weapons then
76552: LD_VAR 0 8
76556: PUSH
76557: LD_VAR 0 9
76561: IN
76562: IFFALSE 76589
// begin result := [ i , weapon ] ;
76564: LD_ADDR_VAR 0 3
76568: PUSH
76569: LD_VAR 0 4
76573: PUSH
76574: LD_VAR 0 8
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: ST_TO_ADDR
// exit ;
76583: POP
76584: POP
76585: POP
76586: POP
76587: GO 76597
// end ; end ;
76589: GO 76525
76591: POP
76592: POP
// end ;
76593: GO 76411
76595: POP
76596: POP
// end ;
76597: LD_VAR 0 3
76601: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76602: LD_INT 0
76604: PPUSH
// if not side or side > 8 then
76605: LD_VAR 0 3
76609: NOT
76610: IFTRUE 76622
76612: PUSH
76613: LD_VAR 0 3
76617: PUSH
76618: LD_INT 8
76620: GREATER
76621: OR
76622: IFFALSE 76626
// exit ;
76624: GO 76685
// if not range then
76626: LD_VAR 0 4
76630: NOT
76631: IFFALSE 76642
// range := - 12 ;
76633: LD_ADDR_VAR 0 4
76637: PUSH
76638: LD_INT 12
76640: NEG
76641: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76642: LD_VAR 0 1
76646: PPUSH
76647: LD_VAR 0 2
76651: PPUSH
76652: LD_VAR 0 3
76656: PPUSH
76657: LD_VAR 0 4
76661: PPUSH
76662: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76666: LD_VAR 0 1
76670: PPUSH
76671: LD_VAR 0 2
76675: PPUSH
76676: LD_VAR 0 3
76680: PPUSH
76681: CALL_OW 331
// end ;
76685: LD_VAR 0 5
76689: RET
// export function Video ( mode ) ; begin
76690: LD_INT 0
76692: PPUSH
// ingame_video = mode ;
76693: LD_ADDR_OWVAR 52
76697: PUSH
76698: LD_VAR 0 1
76702: ST_TO_ADDR
// interface_hidden = mode ;
76703: LD_ADDR_OWVAR 54
76707: PUSH
76708: LD_VAR 0 1
76712: ST_TO_ADDR
// end ;
76713: LD_VAR 0 2
76717: RET
// export function Join ( array , element ) ; begin
76718: LD_INT 0
76720: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76721: LD_ADDR_VAR 0 3
76725: PUSH
76726: LD_VAR 0 1
76730: PPUSH
76731: LD_VAR 0 1
76735: PUSH
76736: LD_INT 1
76738: PLUS
76739: PPUSH
76740: LD_VAR 0 2
76744: PPUSH
76745: CALL_OW 1
76749: ST_TO_ADDR
// end ;
76750: LD_VAR 0 3
76754: RET
// export function JoinUnion ( array , element ) ; begin
76755: LD_INT 0
76757: PPUSH
// result := array union element ;
76758: LD_ADDR_VAR 0 3
76762: PUSH
76763: LD_VAR 0 1
76767: PUSH
76768: LD_VAR 0 2
76772: UNION
76773: ST_TO_ADDR
// end ;
76774: LD_VAR 0 3
76778: RET
// export function GetBehemoths ( side ) ; begin
76779: LD_INT 0
76781: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76782: LD_ADDR_VAR 0 2
76786: PUSH
76787: LD_INT 22
76789: PUSH
76790: LD_VAR 0 1
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 31
76801: PUSH
76802: LD_INT 25
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PPUSH
76813: CALL_OW 69
76817: ST_TO_ADDR
// end ;
76818: LD_VAR 0 2
76822: RET
// export function Shuffle ( array ) ; var i , index ; begin
76823: LD_INT 0
76825: PPUSH
76826: PPUSH
76827: PPUSH
// result := [ ] ;
76828: LD_ADDR_VAR 0 2
76832: PUSH
76833: EMPTY
76834: ST_TO_ADDR
// if not array then
76835: LD_VAR 0 1
76839: NOT
76840: IFFALSE 76844
// exit ;
76842: GO 76943
// Randomize ;
76844: CALL_OW 10
// for i = array downto 1 do
76848: LD_ADDR_VAR 0 3
76852: PUSH
76853: DOUBLE
76854: LD_VAR 0 1
76858: INC
76859: ST_TO_ADDR
76860: LD_INT 1
76862: PUSH
76863: FOR_DOWNTO
76864: IFFALSE 76941
// begin index := rand ( 1 , array ) ;
76866: LD_ADDR_VAR 0 4
76870: PUSH
76871: LD_INT 1
76873: PPUSH
76874: LD_VAR 0 1
76878: PPUSH
76879: CALL_OW 12
76883: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76884: LD_ADDR_VAR 0 2
76888: PUSH
76889: LD_VAR 0 2
76893: PPUSH
76894: LD_VAR 0 2
76898: PUSH
76899: LD_INT 1
76901: PLUS
76902: PPUSH
76903: LD_VAR 0 1
76907: PUSH
76908: LD_VAR 0 4
76912: ARRAY
76913: PPUSH
76914: CALL_OW 2
76918: ST_TO_ADDR
// array := Delete ( array , index ) ;
76919: LD_ADDR_VAR 0 1
76923: PUSH
76924: LD_VAR 0 1
76928: PPUSH
76929: LD_VAR 0 4
76933: PPUSH
76934: CALL_OW 3
76938: ST_TO_ADDR
// end ;
76939: GO 76863
76941: POP
76942: POP
// end ;
76943: LD_VAR 0 2
76947: RET
// export function GetBaseMaterials ( base ) ; begin
76948: LD_INT 0
76950: PPUSH
// result := [ 0 , 0 , 0 ] ;
76951: LD_ADDR_VAR 0 2
76955: PUSH
76956: LD_INT 0
76958: PUSH
76959: LD_INT 0
76961: PUSH
76962: LD_INT 0
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: LIST
76969: ST_TO_ADDR
// if not base then
76970: LD_VAR 0 1
76974: NOT
76975: IFFALSE 76979
// exit ;
76977: GO 77028
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76979: LD_ADDR_VAR 0 2
76983: PUSH
76984: LD_VAR 0 1
76988: PPUSH
76989: LD_INT 1
76991: PPUSH
76992: CALL_OW 275
76996: PUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: LD_INT 2
77004: PPUSH
77005: CALL_OW 275
77009: PUSH
77010: LD_VAR 0 1
77014: PPUSH
77015: LD_INT 3
77017: PPUSH
77018: CALL_OW 275
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: LIST
77027: ST_TO_ADDR
// end ;
77028: LD_VAR 0 2
77032: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77033: LD_INT 0
77035: PPUSH
77036: PPUSH
// result := array ;
77037: LD_ADDR_VAR 0 3
77041: PUSH
77042: LD_VAR 0 1
77046: ST_TO_ADDR
// if size >= result then
77047: LD_VAR 0 2
77051: PUSH
77052: LD_VAR 0 3
77056: GREATEREQUAL
77057: IFFALSE 77061
// exit ;
77059: GO 77111
// if size then
77061: LD_VAR 0 2
77065: IFFALSE 77111
// for i := array downto size do
77067: LD_ADDR_VAR 0 4
77071: PUSH
77072: DOUBLE
77073: LD_VAR 0 1
77077: INC
77078: ST_TO_ADDR
77079: LD_VAR 0 2
77083: PUSH
77084: FOR_DOWNTO
77085: IFFALSE 77109
// result := Delete ( result , result ) ;
77087: LD_ADDR_VAR 0 3
77091: PUSH
77092: LD_VAR 0 3
77096: PPUSH
77097: LD_VAR 0 3
77101: PPUSH
77102: CALL_OW 3
77106: ST_TO_ADDR
77107: GO 77084
77109: POP
77110: POP
// end ;
77111: LD_VAR 0 3
77115: RET
// export function ComExit ( unit ) ; var tmp ; begin
77116: LD_INT 0
77118: PPUSH
77119: PPUSH
// if not IsInUnit ( unit ) then
77120: LD_VAR 0 1
77124: PPUSH
77125: CALL_OW 310
77129: NOT
77130: IFFALSE 77134
// exit ;
77132: GO 77194
// tmp := IsInUnit ( unit ) ;
77134: LD_ADDR_VAR 0 3
77138: PUSH
77139: LD_VAR 0 1
77143: PPUSH
77144: CALL_OW 310
77148: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77149: LD_VAR 0 3
77153: PPUSH
77154: CALL_OW 247
77158: PUSH
77159: LD_INT 2
77161: EQUAL
77162: IFFALSE 77175
// ComExitVehicle ( unit ) else
77164: LD_VAR 0 1
77168: PPUSH
77169: CALL_OW 121
77173: GO 77184
// ComExitBuilding ( unit ) ;
77175: LD_VAR 0 1
77179: PPUSH
77180: CALL_OW 122
// result := tmp ;
77184: LD_ADDR_VAR 0 2
77188: PUSH
77189: LD_VAR 0 3
77193: ST_TO_ADDR
// end ;
77194: LD_VAR 0 2
77198: RET
// export function ComExitAll ( units ) ; var i ; begin
77199: LD_INT 0
77201: PPUSH
77202: PPUSH
// if not units then
77203: LD_VAR 0 1
77207: NOT
77208: IFFALSE 77212
// exit ;
77210: GO 77238
// for i in units do
77212: LD_ADDR_VAR 0 3
77216: PUSH
77217: LD_VAR 0 1
77221: PUSH
77222: FOR_IN
77223: IFFALSE 77236
// ComExit ( i ) ;
77225: LD_VAR 0 3
77229: PPUSH
77230: CALL 77116 0 1
77234: GO 77222
77236: POP
77237: POP
// end ;
77238: LD_VAR 0 2
77242: RET
// export function ResetHc ; begin
77243: LD_INT 0
77245: PPUSH
// InitHc ;
77246: CALL_OW 19
// hc_importance := 0 ;
77250: LD_ADDR_OWVAR 32
77254: PUSH
77255: LD_INT 0
77257: ST_TO_ADDR
// end ;
77258: LD_VAR 0 1
77262: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77263: LD_INT 0
77265: PPUSH
77266: PPUSH
77267: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77268: LD_ADDR_VAR 0 6
77272: PUSH
77273: LD_VAR 0 1
77277: PUSH
77278: LD_VAR 0 3
77282: PLUS
77283: PUSH
77284: LD_INT 2
77286: DIV
77287: ST_TO_ADDR
// if _x < 0 then
77288: LD_VAR 0 6
77292: PUSH
77293: LD_INT 0
77295: LESS
77296: IFFALSE 77313
// _x := _x * - 1 ;
77298: LD_ADDR_VAR 0 6
77302: PUSH
77303: LD_VAR 0 6
77307: PUSH
77308: LD_INT 1
77310: NEG
77311: MUL
77312: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77313: LD_ADDR_VAR 0 7
77317: PUSH
77318: LD_VAR 0 2
77322: PUSH
77323: LD_VAR 0 4
77327: PLUS
77328: PUSH
77329: LD_INT 2
77331: DIV
77332: ST_TO_ADDR
// if _y < 0 then
77333: LD_VAR 0 7
77337: PUSH
77338: LD_INT 0
77340: LESS
77341: IFFALSE 77358
// _y := _y * - 1 ;
77343: LD_ADDR_VAR 0 7
77347: PUSH
77348: LD_VAR 0 7
77352: PUSH
77353: LD_INT 1
77355: NEG
77356: MUL
77357: ST_TO_ADDR
// result := [ _x , _y ] ;
77358: LD_ADDR_VAR 0 5
77362: PUSH
77363: LD_VAR 0 6
77367: PUSH
77368: LD_VAR 0 7
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: ST_TO_ADDR
// end ;
77377: LD_VAR 0 5
77381: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77382: LD_INT 0
77384: PPUSH
77385: PPUSH
77386: PPUSH
77387: PPUSH
// task := GetTaskList ( unit ) ;
77388: LD_ADDR_VAR 0 7
77392: PUSH
77393: LD_VAR 0 1
77397: PPUSH
77398: CALL_OW 437
77402: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77403: LD_VAR 0 7
77407: NOT
77408: IFFALSE 77427
77410: PUSH
77411: LD_VAR 0 1
77415: PPUSH
77416: LD_VAR 0 2
77420: PPUSH
77421: CALL_OW 308
77425: NOT
77426: AND
77427: IFFALSE 77431
// exit ;
77429: GO 77549
// if IsInArea ( unit , area ) then
77431: LD_VAR 0 1
77435: PPUSH
77436: LD_VAR 0 2
77440: PPUSH
77441: CALL_OW 308
77445: IFFALSE 77463
// begin ComMoveToArea ( unit , goAway ) ;
77447: LD_VAR 0 1
77451: PPUSH
77452: LD_VAR 0 3
77456: PPUSH
77457: CALL_OW 113
// exit ;
77461: GO 77549
// end ; if task [ 1 ] [ 1 ] <> M then
77463: LD_VAR 0 7
77467: PUSH
77468: LD_INT 1
77470: ARRAY
77471: PUSH
77472: LD_INT 1
77474: ARRAY
77475: PUSH
77476: LD_STRING M
77478: NONEQUAL
77479: IFFALSE 77483
// exit ;
77481: GO 77549
// x := task [ 1 ] [ 2 ] ;
77483: LD_ADDR_VAR 0 5
77487: PUSH
77488: LD_VAR 0 7
77492: PUSH
77493: LD_INT 1
77495: ARRAY
77496: PUSH
77497: LD_INT 2
77499: ARRAY
77500: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77501: LD_ADDR_VAR 0 6
77505: PUSH
77506: LD_VAR 0 7
77510: PUSH
77511: LD_INT 1
77513: ARRAY
77514: PUSH
77515: LD_INT 3
77517: ARRAY
77518: ST_TO_ADDR
// if InArea ( x , y , area ) then
77519: LD_VAR 0 5
77523: PPUSH
77524: LD_VAR 0 6
77528: PPUSH
77529: LD_VAR 0 2
77533: PPUSH
77534: CALL_OW 309
77538: IFFALSE 77549
// ComStop ( unit ) ;
77540: LD_VAR 0 1
77544: PPUSH
77545: CALL_OW 141
// end ;
77549: LD_VAR 0 4
77553: RET
// export function Abs ( value ) ; begin
77554: LD_INT 0
77556: PPUSH
// result := value ;
77557: LD_ADDR_VAR 0 2
77561: PUSH
77562: LD_VAR 0 1
77566: ST_TO_ADDR
// if value < 0 then
77567: LD_VAR 0 1
77571: PUSH
77572: LD_INT 0
77574: LESS
77575: IFFALSE 77592
// result := value * - 1 ;
77577: LD_ADDR_VAR 0 2
77581: PUSH
77582: LD_VAR 0 1
77586: PUSH
77587: LD_INT 1
77589: NEG
77590: MUL
77591: ST_TO_ADDR
// end ;
77592: LD_VAR 0 2
77596: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77597: LD_INT 0
77599: PPUSH
77600: PPUSH
77601: PPUSH
77602: PPUSH
77603: PPUSH
77604: PPUSH
77605: PPUSH
77606: PPUSH
// if not unit or not building then
77607: LD_VAR 0 1
77611: NOT
77612: IFTRUE 77621
77614: PUSH
77615: LD_VAR 0 2
77619: NOT
77620: OR
77621: IFFALSE 77625
// exit ;
77623: GO 77853
// x := GetX ( building ) ;
77625: LD_ADDR_VAR 0 4
77629: PUSH
77630: LD_VAR 0 2
77634: PPUSH
77635: CALL_OW 250
77639: ST_TO_ADDR
// y := GetY ( building ) ;
77640: LD_ADDR_VAR 0 6
77644: PUSH
77645: LD_VAR 0 2
77649: PPUSH
77650: CALL_OW 251
77654: ST_TO_ADDR
// d := GetDir ( building ) ;
77655: LD_ADDR_VAR 0 8
77659: PUSH
77660: LD_VAR 0 2
77664: PPUSH
77665: CALL_OW 254
77669: ST_TO_ADDR
// r := 4 ;
77670: LD_ADDR_VAR 0 9
77674: PUSH
77675: LD_INT 4
77677: ST_TO_ADDR
// for i := 1 to 5 do
77678: LD_ADDR_VAR 0 10
77682: PUSH
77683: DOUBLE
77684: LD_INT 1
77686: DEC
77687: ST_TO_ADDR
77688: LD_INT 5
77690: PUSH
77691: FOR_TO
77692: IFFALSE 77851
// begin _x := ShiftX ( x , d , r + i ) ;
77694: LD_ADDR_VAR 0 5
77698: PUSH
77699: LD_VAR 0 4
77703: PPUSH
77704: LD_VAR 0 8
77708: PPUSH
77709: LD_VAR 0 9
77713: PUSH
77714: LD_VAR 0 10
77718: PLUS
77719: PPUSH
77720: CALL_OW 272
77724: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77725: LD_ADDR_VAR 0 7
77729: PUSH
77730: LD_VAR 0 6
77734: PPUSH
77735: LD_VAR 0 8
77739: PPUSH
77740: LD_VAR 0 9
77744: PUSH
77745: LD_VAR 0 10
77749: PLUS
77750: PPUSH
77751: CALL_OW 273
77755: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77756: LD_VAR 0 5
77760: PPUSH
77761: LD_VAR 0 7
77765: PPUSH
77766: CALL_OW 488
77770: IFFALSE 77805
77772: PUSH
77773: LD_VAR 0 5
77777: PPUSH
77778: LD_VAR 0 7
77782: PPUSH
77783: CALL_OW 428
77787: PPUSH
77788: CALL_OW 247
77792: PUSH
77793: LD_INT 3
77795: PUSH
77796: LD_INT 2
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: IN
77803: NOT
77804: AND
77805: IFFALSE 77849
// begin ComMoveXY ( unit , _x , _y ) ;
77807: LD_VAR 0 1
77811: PPUSH
77812: LD_VAR 0 5
77816: PPUSH
77817: LD_VAR 0 7
77821: PPUSH
77822: CALL_OW 111
// result := [ _x , _y ] ;
77826: LD_ADDR_VAR 0 3
77830: PUSH
77831: LD_VAR 0 5
77835: PUSH
77836: LD_VAR 0 7
77840: PUSH
77841: EMPTY
77842: LIST
77843: LIST
77844: ST_TO_ADDR
// exit ;
77845: POP
77846: POP
77847: GO 77853
// end ; end ;
77849: GO 77691
77851: POP
77852: POP
// end ;
77853: LD_VAR 0 3
77857: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77858: LD_INT 0
77860: PPUSH
77861: PPUSH
77862: PPUSH
// result := 0 ;
77863: LD_ADDR_VAR 0 3
77867: PUSH
77868: LD_INT 0
77870: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77871: LD_VAR 0 1
77875: PUSH
77876: LD_INT 0
77878: LESS
77879: IFTRUE 77891
77881: PUSH
77882: LD_VAR 0 1
77886: PUSH
77887: LD_INT 8
77889: GREATER
77890: OR
77891: IFTRUE 77903
77893: PUSH
77894: LD_VAR 0 2
77898: PUSH
77899: LD_INT 0
77901: LESS
77902: OR
77903: IFTRUE 77915
77905: PUSH
77906: LD_VAR 0 2
77910: PUSH
77911: LD_INT 8
77913: GREATER
77914: OR
77915: IFFALSE 77919
// exit ;
77917: GO 77994
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77919: LD_ADDR_VAR 0 4
77923: PUSH
77924: LD_INT 22
77926: PUSH
77927: LD_VAR 0 2
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PPUSH
77936: CALL_OW 69
77940: PUSH
77941: FOR_IN
77942: IFFALSE 77992
// begin un := UnitShoot ( i ) ;
77944: LD_ADDR_VAR 0 5
77948: PUSH
77949: LD_VAR 0 4
77953: PPUSH
77954: CALL_OW 504
77958: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77959: LD_VAR 0 5
77963: PPUSH
77964: CALL_OW 255
77968: PUSH
77969: LD_VAR 0 1
77973: EQUAL
77974: IFFALSE 77990
// begin result := un ;
77976: LD_ADDR_VAR 0 3
77980: PUSH
77981: LD_VAR 0 5
77985: ST_TO_ADDR
// exit ;
77986: POP
77987: POP
77988: GO 77994
// end ; end ;
77990: GO 77941
77992: POP
77993: POP
// end ;
77994: LD_VAR 0 3
77998: RET
// export function GetCargoBay ( units ) ; begin
77999: LD_INT 0
78001: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78002: LD_ADDR_VAR 0 2
78006: PUSH
78007: LD_VAR 0 1
78011: PPUSH
78012: LD_INT 2
78014: PUSH
78015: LD_INT 34
78017: PUSH
78018: LD_INT 12
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 34
78027: PUSH
78028: LD_INT 51
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 34
78037: PUSH
78038: LD_INT 32
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: LD_INT 34
78047: PUSH
78048: LD_INT 89
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: PPUSH
78062: CALL_OW 72
78066: ST_TO_ADDR
// end ;
78067: LD_VAR 0 2
78071: RET
// export function Negate ( value ) ; begin
78072: LD_INT 0
78074: PPUSH
// result := not value ;
78075: LD_ADDR_VAR 0 2
78079: PUSH
78080: LD_VAR 0 1
78084: NOT
78085: ST_TO_ADDR
// end ;
78086: LD_VAR 0 2
78090: RET
// export function Inc ( value ) ; begin
78091: LD_INT 0
78093: PPUSH
// result := value + 1 ;
78094: LD_ADDR_VAR 0 2
78098: PUSH
78099: LD_VAR 0 1
78103: PUSH
78104: LD_INT 1
78106: PLUS
78107: ST_TO_ADDR
// end ;
78108: LD_VAR 0 2
78112: RET
// export function Dec ( value ) ; begin
78113: LD_INT 0
78115: PPUSH
// result := value - 1 ;
78116: LD_ADDR_VAR 0 2
78120: PUSH
78121: LD_VAR 0 1
78125: PUSH
78126: LD_INT 1
78128: MINUS
78129: ST_TO_ADDR
// end ;
78130: LD_VAR 0 2
78134: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78135: LD_INT 0
78137: PPUSH
78138: PPUSH
78139: PPUSH
78140: PPUSH
78141: PPUSH
78142: PPUSH
78143: PPUSH
78144: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78145: LD_VAR 0 1
78149: PPUSH
78150: LD_VAR 0 2
78154: PPUSH
78155: CALL_OW 488
78159: NOT
78160: IFTRUE 78179
78162: PUSH
78163: LD_VAR 0 3
78167: PPUSH
78168: LD_VAR 0 4
78172: PPUSH
78173: CALL_OW 488
78177: NOT
78178: OR
78179: IFFALSE 78192
// begin result := - 1 ;
78181: LD_ADDR_VAR 0 5
78185: PUSH
78186: LD_INT 1
78188: NEG
78189: ST_TO_ADDR
// exit ;
78190: GO 78427
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78192: LD_ADDR_VAR 0 12
78196: PUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: LD_VAR 0 2
78206: PPUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: LD_VAR 0 4
78216: PPUSH
78217: CALL 77263 0 4
78221: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78222: LD_ADDR_VAR 0 11
78226: PUSH
78227: LD_VAR 0 1
78231: PPUSH
78232: LD_VAR 0 2
78236: PPUSH
78237: LD_VAR 0 12
78241: PUSH
78242: LD_INT 1
78244: ARRAY
78245: PPUSH
78246: LD_VAR 0 12
78250: PUSH
78251: LD_INT 2
78253: ARRAY
78254: PPUSH
78255: CALL_OW 298
78259: ST_TO_ADDR
// distance := 9999 ;
78260: LD_ADDR_VAR 0 10
78264: PUSH
78265: LD_INT 9999
78267: ST_TO_ADDR
// for i := 0 to 5 do
78268: LD_ADDR_VAR 0 6
78272: PUSH
78273: DOUBLE
78274: LD_INT 0
78276: DEC
78277: ST_TO_ADDR
78278: LD_INT 5
78280: PUSH
78281: FOR_TO
78282: IFFALSE 78425
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78284: LD_ADDR_VAR 0 7
78288: PUSH
78289: LD_VAR 0 1
78293: PPUSH
78294: LD_VAR 0 6
78298: PPUSH
78299: LD_VAR 0 11
78303: PPUSH
78304: CALL_OW 272
78308: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78309: LD_ADDR_VAR 0 8
78313: PUSH
78314: LD_VAR 0 2
78318: PPUSH
78319: LD_VAR 0 6
78323: PPUSH
78324: LD_VAR 0 11
78328: PPUSH
78329: CALL_OW 273
78333: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78334: LD_VAR 0 7
78338: PPUSH
78339: LD_VAR 0 8
78343: PPUSH
78344: CALL_OW 488
78348: NOT
78349: IFFALSE 78353
// continue ;
78351: GO 78281
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78353: LD_ADDR_VAR 0 9
78357: PUSH
78358: LD_VAR 0 12
78362: PUSH
78363: LD_INT 1
78365: ARRAY
78366: PPUSH
78367: LD_VAR 0 12
78371: PUSH
78372: LD_INT 2
78374: ARRAY
78375: PPUSH
78376: LD_VAR 0 7
78380: PPUSH
78381: LD_VAR 0 8
78385: PPUSH
78386: CALL_OW 298
78390: ST_TO_ADDR
// if tmp < distance then
78391: LD_VAR 0 9
78395: PUSH
78396: LD_VAR 0 10
78400: LESS
78401: IFFALSE 78423
// begin result := i ;
78403: LD_ADDR_VAR 0 5
78407: PUSH
78408: LD_VAR 0 6
78412: ST_TO_ADDR
// distance := tmp ;
78413: LD_ADDR_VAR 0 10
78417: PUSH
78418: LD_VAR 0 9
78422: ST_TO_ADDR
// end ; end ;
78423: GO 78281
78425: POP
78426: POP
// end ;
78427: LD_VAR 0 5
78431: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78432: LD_INT 0
78434: PPUSH
78435: PPUSH
// if not driver or not IsInUnit ( driver ) then
78436: LD_VAR 0 1
78440: NOT
78441: IFTRUE 78455
78443: PUSH
78444: LD_VAR 0 1
78448: PPUSH
78449: CALL_OW 310
78453: NOT
78454: OR
78455: IFFALSE 78459
// exit ;
78457: GO 78549
// vehicle := IsInUnit ( driver ) ;
78459: LD_ADDR_VAR 0 3
78463: PUSH
78464: LD_VAR 0 1
78468: PPUSH
78469: CALL_OW 310
78473: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78474: LD_VAR 0 1
78478: PPUSH
78479: LD_STRING \
78481: PUSH
78482: LD_INT 0
78484: PUSH
78485: LD_INT 0
78487: PUSH
78488: LD_INT 0
78490: PUSH
78491: LD_INT 0
78493: PUSH
78494: LD_INT 0
78496: PUSH
78497: LD_INT 0
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: PUSH
78509: LD_STRING E
78511: PUSH
78512: LD_INT 0
78514: PUSH
78515: LD_INT 0
78517: PUSH
78518: LD_VAR 0 3
78522: PUSH
78523: LD_INT 0
78525: PUSH
78526: LD_INT 0
78528: PUSH
78529: LD_INT 0
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PPUSH
78545: CALL_OW 446
// end ;
78549: LD_VAR 0 2
78553: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78554: LD_INT 0
78556: PPUSH
78557: PPUSH
// if not driver or not IsInUnit ( driver ) then
78558: LD_VAR 0 1
78562: NOT
78563: IFTRUE 78577
78565: PUSH
78566: LD_VAR 0 1
78570: PPUSH
78571: CALL_OW 310
78575: NOT
78576: OR
78577: IFFALSE 78581
// exit ;
78579: GO 78671
// vehicle := IsInUnit ( driver ) ;
78581: LD_ADDR_VAR 0 3
78585: PUSH
78586: LD_VAR 0 1
78590: PPUSH
78591: CALL_OW 310
78595: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78596: LD_VAR 0 1
78600: PPUSH
78601: LD_STRING \
78603: PUSH
78604: LD_INT 0
78606: PUSH
78607: LD_INT 0
78609: PUSH
78610: LD_INT 0
78612: PUSH
78613: LD_INT 0
78615: PUSH
78616: LD_INT 0
78618: PUSH
78619: LD_INT 0
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: LIST
78626: LIST
78627: LIST
78628: LIST
78629: LIST
78630: PUSH
78631: LD_STRING E
78633: PUSH
78634: LD_INT 0
78636: PUSH
78637: LD_INT 0
78639: PUSH
78640: LD_VAR 0 3
78644: PUSH
78645: LD_INT 0
78647: PUSH
78648: LD_INT 0
78650: PUSH
78651: LD_INT 0
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: LIST
78660: LIST
78661: LIST
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PPUSH
78667: CALL_OW 447
// end ;
78671: LD_VAR 0 2
78675: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78676: LD_INT 0
78678: PPUSH
78679: PPUSH
78680: PPUSH
// tmp := [ ] ;
78681: LD_ADDR_VAR 0 5
78685: PUSH
78686: EMPTY
78687: ST_TO_ADDR
// for i in units do
78688: LD_ADDR_VAR 0 4
78692: PUSH
78693: LD_VAR 0 1
78697: PUSH
78698: FOR_IN
78699: IFFALSE 78737
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78701: LD_ADDR_VAR 0 5
78705: PUSH
78706: LD_VAR 0 5
78710: PPUSH
78711: LD_VAR 0 5
78715: PUSH
78716: LD_INT 1
78718: PLUS
78719: PPUSH
78720: LD_VAR 0 4
78724: PPUSH
78725: CALL_OW 256
78729: PPUSH
78730: CALL_OW 2
78734: ST_TO_ADDR
78735: GO 78698
78737: POP
78738: POP
// if not tmp then
78739: LD_VAR 0 5
78743: NOT
78744: IFFALSE 78748
// exit ;
78746: GO 78796
// if asc then
78748: LD_VAR 0 2
78752: IFFALSE 78776
// result := SortListByListAsc ( units , tmp ) else
78754: LD_ADDR_VAR 0 3
78758: PUSH
78759: LD_VAR 0 1
78763: PPUSH
78764: LD_VAR 0 5
78768: PPUSH
78769: CALL_OW 76
78773: ST_TO_ADDR
78774: GO 78796
// result := SortListByListDesc ( units , tmp ) ;
78776: LD_ADDR_VAR 0 3
78780: PUSH
78781: LD_VAR 0 1
78785: PPUSH
78786: LD_VAR 0 5
78790: PPUSH
78791: CALL_OW 77
78795: ST_TO_ADDR
// end ;
78796: LD_VAR 0 3
78800: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78801: LD_INT 0
78803: PPUSH
78804: PPUSH
// task := GetTaskList ( mech ) ;
78805: LD_ADDR_VAR 0 4
78809: PUSH
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL_OW 437
78819: ST_TO_ADDR
// if not task then
78820: LD_VAR 0 4
78824: NOT
78825: IFFALSE 78829
// exit ;
78827: GO 78873
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78829: LD_ADDR_VAR 0 3
78833: PUSH
78834: LD_VAR 0 4
78838: PUSH
78839: LD_INT 1
78841: ARRAY
78842: PUSH
78843: LD_INT 1
78845: ARRAY
78846: PUSH
78847: LD_STRING r
78849: EQUAL
78850: IFFALSE 78872
78852: PUSH
78853: LD_VAR 0 4
78857: PUSH
78858: LD_INT 1
78860: ARRAY
78861: PUSH
78862: LD_INT 4
78864: ARRAY
78865: PUSH
78866: LD_VAR 0 2
78870: EQUAL
78871: AND
78872: ST_TO_ADDR
// end ;
78873: LD_VAR 0 3
78877: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78878: LD_INT 0
78880: PPUSH
// SetDir ( unit , d ) ;
78881: LD_VAR 0 1
78885: PPUSH
78886: LD_VAR 0 4
78890: PPUSH
78891: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78895: LD_ADDR_VAR 0 6
78899: PUSH
78900: LD_VAR 0 1
78904: PPUSH
78905: LD_VAR 0 2
78909: PPUSH
78910: LD_VAR 0 3
78914: PPUSH
78915: LD_VAR 0 5
78919: PPUSH
78920: CALL_OW 48
78924: ST_TO_ADDR
// end ;
78925: LD_VAR 0 6
78929: RET
// export function ToNaturalNumber ( number ) ; begin
78930: LD_INT 0
78932: PPUSH
// result := number div 1 ;
78933: LD_ADDR_VAR 0 2
78937: PUSH
78938: LD_VAR 0 1
78942: PUSH
78943: LD_INT 1
78945: DIV
78946: ST_TO_ADDR
// if number < 0 then
78947: LD_VAR 0 1
78951: PUSH
78952: LD_INT 0
78954: LESS
78955: IFFALSE 78965
// result := 0 ;
78957: LD_ADDR_VAR 0 2
78961: PUSH
78962: LD_INT 0
78964: ST_TO_ADDR
// end ;
78965: LD_VAR 0 2
78969: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78970: LD_INT 0
78972: PPUSH
78973: PPUSH
78974: PPUSH
// if not buildings then
78975: LD_VAR 0 1
78979: NOT
78980: IFFALSE 78984
// exit ;
78982: GO 79099
// tmp := [ ] ;
78984: LD_ADDR_VAR 0 5
78988: PUSH
78989: EMPTY
78990: ST_TO_ADDR
// for b in buildings do
78991: LD_ADDR_VAR 0 4
78995: PUSH
78996: LD_VAR 0 1
79000: PUSH
79001: FOR_IN
79002: IFFALSE 79040
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
79004: LD_ADDR_VAR 0 5
79008: PUSH
79009: LD_VAR 0 5
79013: PPUSH
79014: LD_VAR 0 5
79018: PUSH
79019: LD_INT 1
79021: PLUS
79022: PPUSH
79023: LD_VAR 0 4
79027: PPUSH
79028: CALL_OW 266
79032: PPUSH
79033: CALL_OW 1
79037: ST_TO_ADDR
79038: GO 79001
79040: POP
79041: POP
// if not tmp then
79042: LD_VAR 0 5
79046: NOT
79047: IFFALSE 79051
// exit ;
79049: GO 79099
// if asc then
79051: LD_VAR 0 2
79055: IFFALSE 79079
// result := SortListByListAsc ( buildings , tmp ) else
79057: LD_ADDR_VAR 0 3
79061: PUSH
79062: LD_VAR 0 1
79066: PPUSH
79067: LD_VAR 0 5
79071: PPUSH
79072: CALL_OW 76
79076: ST_TO_ADDR
79077: GO 79099
// result := SortListByListDesc ( buildings , tmp ) ;
79079: LD_ADDR_VAR 0 3
79083: PUSH
79084: LD_VAR 0 1
79088: PPUSH
79089: LD_VAR 0 5
79093: PPUSH
79094: CALL_OW 77
79098: ST_TO_ADDR
// end ;
79099: LD_VAR 0 3
79103: RET
// export function SortByClass ( units , class ) ; var un ; begin
79104: LD_INT 0
79106: PPUSH
79107: PPUSH
// if not units or not class then
79108: LD_VAR 0 1
79112: NOT
79113: IFTRUE 79122
79115: PUSH
79116: LD_VAR 0 2
79120: NOT
79121: OR
79122: IFFALSE 79126
// exit ;
79124: GO 79221
// result := [ ] ;
79126: LD_ADDR_VAR 0 3
79130: PUSH
79131: EMPTY
79132: ST_TO_ADDR
// for un in units do
79133: LD_ADDR_VAR 0 4
79137: PUSH
79138: LD_VAR 0 1
79142: PUSH
79143: FOR_IN
79144: IFFALSE 79219
// if GetClass ( un ) = class then
79146: LD_VAR 0 4
79150: PPUSH
79151: CALL_OW 257
79155: PUSH
79156: LD_VAR 0 2
79160: EQUAL
79161: IFFALSE 79188
// result := Insert ( result , 1 , un ) else
79163: LD_ADDR_VAR 0 3
79167: PUSH
79168: LD_VAR 0 3
79172: PPUSH
79173: LD_INT 1
79175: PPUSH
79176: LD_VAR 0 4
79180: PPUSH
79181: CALL_OW 2
79185: ST_TO_ADDR
79186: GO 79217
// result := Replace ( result , result + 1 , un ) ;
79188: LD_ADDR_VAR 0 3
79192: PUSH
79193: LD_VAR 0 3
79197: PPUSH
79198: LD_VAR 0 3
79202: PUSH
79203: LD_INT 1
79205: PLUS
79206: PPUSH
79207: LD_VAR 0 4
79211: PPUSH
79212: CALL_OW 1
79216: ST_TO_ADDR
79217: GO 79143
79219: POP
79220: POP
// end ;
79221: LD_VAR 0 3
79225: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79226: LD_INT 0
79228: PPUSH
79229: PPUSH
79230: PPUSH
79231: PPUSH
79232: PPUSH
79233: PPUSH
79234: PPUSH
// result := [ ] ;
79235: LD_ADDR_VAR 0 4
79239: PUSH
79240: EMPTY
79241: ST_TO_ADDR
// if x - r < 0 then
79242: LD_VAR 0 1
79246: PUSH
79247: LD_VAR 0 3
79251: MINUS
79252: PUSH
79253: LD_INT 0
79255: LESS
79256: IFFALSE 79268
// min_x := 0 else
79258: LD_ADDR_VAR 0 8
79262: PUSH
79263: LD_INT 0
79265: ST_TO_ADDR
79266: GO 79284
// min_x := x - r ;
79268: LD_ADDR_VAR 0 8
79272: PUSH
79273: LD_VAR 0 1
79277: PUSH
79278: LD_VAR 0 3
79282: MINUS
79283: ST_TO_ADDR
// if y - r < 0 then
79284: LD_VAR 0 2
79288: PUSH
79289: LD_VAR 0 3
79293: MINUS
79294: PUSH
79295: LD_INT 0
79297: LESS
79298: IFFALSE 79310
// min_y := 0 else
79300: LD_ADDR_VAR 0 7
79304: PUSH
79305: LD_INT 0
79307: ST_TO_ADDR
79308: GO 79326
// min_y := y - r ;
79310: LD_ADDR_VAR 0 7
79314: PUSH
79315: LD_VAR 0 2
79319: PUSH
79320: LD_VAR 0 3
79324: MINUS
79325: ST_TO_ADDR
// max_x := x + r ;
79326: LD_ADDR_VAR 0 9
79330: PUSH
79331: LD_VAR 0 1
79335: PUSH
79336: LD_VAR 0 3
79340: PLUS
79341: ST_TO_ADDR
// max_y := y + r ;
79342: LD_ADDR_VAR 0 10
79346: PUSH
79347: LD_VAR 0 2
79351: PUSH
79352: LD_VAR 0 3
79356: PLUS
79357: ST_TO_ADDR
// for _x = min_x to max_x do
79358: LD_ADDR_VAR 0 5
79362: PUSH
79363: DOUBLE
79364: LD_VAR 0 8
79368: DEC
79369: ST_TO_ADDR
79370: LD_VAR 0 9
79374: PUSH
79375: FOR_TO
79376: IFFALSE 79477
// for _y = min_y to max_y do
79378: LD_ADDR_VAR 0 6
79382: PUSH
79383: DOUBLE
79384: LD_VAR 0 7
79388: DEC
79389: ST_TO_ADDR
79390: LD_VAR 0 10
79394: PUSH
79395: FOR_TO
79396: IFFALSE 79473
// begin if not ValidHex ( _x , _y ) then
79398: LD_VAR 0 5
79402: PPUSH
79403: LD_VAR 0 6
79407: PPUSH
79408: CALL_OW 488
79412: NOT
79413: IFFALSE 79417
// continue ;
79415: GO 79395
// if GetResourceTypeXY ( _x , _y ) then
79417: LD_VAR 0 5
79421: PPUSH
79422: LD_VAR 0 6
79426: PPUSH
79427: CALL_OW 283
79431: IFFALSE 79471
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79433: LD_ADDR_VAR 0 4
79437: PUSH
79438: LD_VAR 0 4
79442: PPUSH
79443: LD_VAR 0 4
79447: PUSH
79448: LD_INT 1
79450: PLUS
79451: PPUSH
79452: LD_VAR 0 5
79456: PUSH
79457: LD_VAR 0 6
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: PPUSH
79466: CALL_OW 1
79470: ST_TO_ADDR
// end ;
79471: GO 79395
79473: POP
79474: POP
79475: GO 79375
79477: POP
79478: POP
// end ;
79479: LD_VAR 0 4
79483: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79484: LD_INT 0
79486: PPUSH
79487: PPUSH
79488: PPUSH
79489: PPUSH
79490: PPUSH
79491: PPUSH
79492: PPUSH
79493: PPUSH
// if not units then
79494: LD_VAR 0 1
79498: NOT
79499: IFFALSE 79503
// exit ;
79501: GO 80035
// result := UnitFilter ( units , [ f_ok ] ) ;
79503: LD_ADDR_VAR 0 3
79507: PUSH
79508: LD_VAR 0 1
79512: PPUSH
79513: LD_INT 50
79515: PUSH
79516: EMPTY
79517: LIST
79518: PPUSH
79519: CALL_OW 72
79523: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79524: LD_ADDR_VAR 0 8
79528: PUSH
79529: LD_VAR 0 1
79533: PUSH
79534: LD_INT 1
79536: ARRAY
79537: PPUSH
79538: CALL_OW 255
79542: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79543: LD_ADDR_VAR 0 10
79547: PUSH
79548: LD_INT 29
79550: PUSH
79551: LD_INT 91
79553: PUSH
79554: LD_INT 49
79556: PUSH
79557: EMPTY
79558: LIST
79559: LIST
79560: LIST
79561: ST_TO_ADDR
// if not result then
79562: LD_VAR 0 3
79566: NOT
79567: IFFALSE 79571
// exit ;
79569: GO 80035
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79571: LD_ADDR_VAR 0 5
79575: PUSH
79576: LD_INT 81
79578: PUSH
79579: LD_VAR 0 8
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: PPUSH
79588: CALL_OW 69
79592: ST_TO_ADDR
// for i in result do
79593: LD_ADDR_VAR 0 4
79597: PUSH
79598: LD_VAR 0 3
79602: PUSH
79603: FOR_IN
79604: IFFALSE 80033
// begin tag := GetTag ( i ) + 1 ;
79606: LD_ADDR_VAR 0 9
79610: PUSH
79611: LD_VAR 0 4
79615: PPUSH
79616: CALL_OW 110
79620: PUSH
79621: LD_INT 1
79623: PLUS
79624: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
79625: LD_ADDR_VAR 0 7
79629: PUSH
79630: LD_VAR 0 4
79634: PPUSH
79635: CALL_OW 250
79639: PPUSH
79640: LD_VAR 0 4
79644: PPUSH
79645: CALL_OW 251
79649: PPUSH
79650: LD_INT 4
79652: PPUSH
79653: CALL 79226 0 3
79657: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
79658: LD_VAR 0 4
79662: PPUSH
79663: CALL_OW 247
79667: PUSH
79668: LD_INT 2
79670: EQUAL
79671: IFFALSE 79683
79673: PUSH
79674: LD_VAR 0 7
79678: PUSH
79679: LD_INT 2
79681: GREATER
79682: AND
79683: IFFALSE 79703
79685: PUSH
79686: LD_VAR 0 4
79690: PPUSH
79691: CALL_OW 264
79695: PUSH
79696: LD_VAR 0 10
79700: IN
79701: NOT
79702: AND
79703: IFFALSE 79742
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79705: LD_VAR 0 4
79709: PPUSH
79710: LD_VAR 0 7
79714: PUSH
79715: LD_INT 1
79717: ARRAY
79718: PUSH
79719: LD_INT 1
79721: ARRAY
79722: PPUSH
79723: LD_VAR 0 7
79727: PUSH
79728: LD_INT 1
79730: ARRAY
79731: PUSH
79732: LD_INT 2
79734: ARRAY
79735: PPUSH
79736: CALL_OW 116
79740: GO 80031
// if path > tag then
79742: LD_VAR 0 2
79746: PUSH
79747: LD_VAR 0 9
79751: GREATER
79752: IFFALSE 79960
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79754: LD_ADDR_VAR 0 6
79758: PUSH
79759: LD_VAR 0 5
79763: PPUSH
79764: LD_INT 91
79766: PUSH
79767: LD_VAR 0 4
79771: PUSH
79772: LD_INT 8
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: LIST
79779: PPUSH
79780: CALL_OW 72
79784: ST_TO_ADDR
// if nearEnemy then
79785: LD_VAR 0 6
79789: IFFALSE 79858
// begin if GetWeapon ( i ) = ru_time_lapser then
79791: LD_VAR 0 4
79795: PPUSH
79796: CALL_OW 264
79800: PUSH
79801: LD_INT 49
79803: EQUAL
79804: IFFALSE 79832
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79806: LD_VAR 0 4
79810: PPUSH
79811: LD_VAR 0 6
79815: PPUSH
79816: LD_VAR 0 4
79820: PPUSH
79821: CALL_OW 74
79825: PPUSH
79826: CALL_OW 112
79830: GO 79856
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79832: LD_VAR 0 4
79836: PPUSH
79837: LD_VAR 0 6
79841: PPUSH
79842: LD_VAR 0 4
79846: PPUSH
79847: CALL_OW 74
79851: PPUSH
79852: CALL 81116 0 2
// end else
79856: GO 79958
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79858: LD_VAR 0 4
79862: PPUSH
79863: LD_VAR 0 2
79867: PUSH
79868: LD_VAR 0 9
79872: ARRAY
79873: PUSH
79874: LD_INT 1
79876: ARRAY
79877: PPUSH
79878: LD_VAR 0 2
79882: PUSH
79883: LD_VAR 0 9
79887: ARRAY
79888: PUSH
79889: LD_INT 2
79891: ARRAY
79892: PPUSH
79893: CALL_OW 297
79897: PUSH
79898: LD_INT 6
79900: GREATER
79901: IFFALSE 79944
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79903: LD_VAR 0 4
79907: PPUSH
79908: LD_VAR 0 2
79912: PUSH
79913: LD_VAR 0 9
79917: ARRAY
79918: PUSH
79919: LD_INT 1
79921: ARRAY
79922: PPUSH
79923: LD_VAR 0 2
79927: PUSH
79928: LD_VAR 0 9
79932: ARRAY
79933: PUSH
79934: LD_INT 2
79936: ARRAY
79937: PPUSH
79938: CALL_OW 114
79942: GO 79958
// SetTag ( i , tag ) ;
79944: LD_VAR 0 4
79948: PPUSH
79949: LD_VAR 0 9
79953: PPUSH
79954: CALL_OW 109
// end else
79958: GO 80031
// if enemy then
79960: LD_VAR 0 5
79964: IFFALSE 80031
// begin if GetWeapon ( i ) = ru_time_lapser then
79966: LD_VAR 0 4
79970: PPUSH
79971: CALL_OW 264
79975: PUSH
79976: LD_INT 49
79978: EQUAL
79979: IFFALSE 80007
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79981: LD_VAR 0 4
79985: PPUSH
79986: LD_VAR 0 5
79990: PPUSH
79991: LD_VAR 0 4
79995: PPUSH
79996: CALL_OW 74
80000: PPUSH
80001: CALL_OW 112
80005: GO 80031
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80007: LD_VAR 0 4
80011: PPUSH
80012: LD_VAR 0 5
80016: PPUSH
80017: LD_VAR 0 4
80021: PPUSH
80022: CALL_OW 74
80026: PPUSH
80027: CALL 81116 0 2
// end ; end ;
80031: GO 79603
80033: POP
80034: POP
// end ;
80035: LD_VAR 0 3
80039: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80040: LD_INT 0
80042: PPUSH
80043: PPUSH
80044: PPUSH
// if not unit or IsInUnit ( unit ) then
80045: LD_VAR 0 1
80049: NOT
80050: IFTRUE 80063
80052: PUSH
80053: LD_VAR 0 1
80057: PPUSH
80058: CALL_OW 310
80062: OR
80063: IFFALSE 80067
// exit ;
80065: GO 80158
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80067: LD_ADDR_VAR 0 4
80071: PUSH
80072: LD_VAR 0 1
80076: PPUSH
80077: CALL_OW 250
80081: PPUSH
80082: LD_VAR 0 2
80086: PPUSH
80087: LD_INT 1
80089: PPUSH
80090: CALL_OW 272
80094: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80095: LD_ADDR_VAR 0 5
80099: PUSH
80100: LD_VAR 0 1
80104: PPUSH
80105: CALL_OW 251
80109: PPUSH
80110: LD_VAR 0 2
80114: PPUSH
80115: LD_INT 1
80117: PPUSH
80118: CALL_OW 273
80122: ST_TO_ADDR
// if ValidHex ( x , y ) then
80123: LD_VAR 0 4
80127: PPUSH
80128: LD_VAR 0 5
80132: PPUSH
80133: CALL_OW 488
80137: IFFALSE 80158
// ComTurnXY ( unit , x , y ) ;
80139: LD_VAR 0 1
80143: PPUSH
80144: LD_VAR 0 4
80148: PPUSH
80149: LD_VAR 0 5
80153: PPUSH
80154: CALL_OW 118
// end ;
80158: LD_VAR 0 3
80162: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80163: LD_INT 0
80165: PPUSH
80166: PPUSH
// result := false ;
80167: LD_ADDR_VAR 0 3
80171: PUSH
80172: LD_INT 0
80174: ST_TO_ADDR
// if not units then
80175: LD_VAR 0 2
80179: NOT
80180: IFFALSE 80184
// exit ;
80182: GO 80229
// for i in units do
80184: LD_ADDR_VAR 0 4
80188: PUSH
80189: LD_VAR 0 2
80193: PUSH
80194: FOR_IN
80195: IFFALSE 80227
// if See ( side , i ) then
80197: LD_VAR 0 1
80201: PPUSH
80202: LD_VAR 0 4
80206: PPUSH
80207: CALL_OW 292
80211: IFFALSE 80225
// begin result := true ;
80213: LD_ADDR_VAR 0 3
80217: PUSH
80218: LD_INT 1
80220: ST_TO_ADDR
// exit ;
80221: POP
80222: POP
80223: GO 80229
// end ;
80225: GO 80194
80227: POP
80228: POP
// end ;
80229: LD_VAR 0 3
80233: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80234: LD_INT 0
80236: PPUSH
80237: PPUSH
80238: PPUSH
80239: PPUSH
// if not unit or not points then
80240: LD_VAR 0 1
80244: NOT
80245: IFTRUE 80254
80247: PUSH
80248: LD_VAR 0 2
80252: NOT
80253: OR
80254: IFFALSE 80258
// exit ;
80256: GO 80348
// dist := 99999 ;
80258: LD_ADDR_VAR 0 5
80262: PUSH
80263: LD_INT 99999
80265: ST_TO_ADDR
// for i in points do
80266: LD_ADDR_VAR 0 4
80270: PUSH
80271: LD_VAR 0 2
80275: PUSH
80276: FOR_IN
80277: IFFALSE 80346
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80279: LD_ADDR_VAR 0 6
80283: PUSH
80284: LD_VAR 0 1
80288: PPUSH
80289: LD_VAR 0 4
80293: PUSH
80294: LD_INT 1
80296: ARRAY
80297: PPUSH
80298: LD_VAR 0 4
80302: PUSH
80303: LD_INT 2
80305: ARRAY
80306: PPUSH
80307: CALL_OW 297
80311: ST_TO_ADDR
// if tmpDist < dist then
80312: LD_VAR 0 6
80316: PUSH
80317: LD_VAR 0 5
80321: LESS
80322: IFFALSE 80344
// begin result := i ;
80324: LD_ADDR_VAR 0 3
80328: PUSH
80329: LD_VAR 0 4
80333: ST_TO_ADDR
// dist := tmpDist ;
80334: LD_ADDR_VAR 0 5
80338: PUSH
80339: LD_VAR 0 6
80343: ST_TO_ADDR
// end ; end ;
80344: GO 80276
80346: POP
80347: POP
// end ;
80348: LD_VAR 0 3
80352: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80353: LD_INT 0
80355: PPUSH
// uc_side := side ;
80356: LD_ADDR_OWVAR 20
80360: PUSH
80361: LD_VAR 0 1
80365: ST_TO_ADDR
// uc_nation := 3 ;
80366: LD_ADDR_OWVAR 21
80370: PUSH
80371: LD_INT 3
80373: ST_TO_ADDR
// vc_chassis := 25 ;
80374: LD_ADDR_OWVAR 37
80378: PUSH
80379: LD_INT 25
80381: ST_TO_ADDR
// vc_engine := engine_siberite ;
80382: LD_ADDR_OWVAR 39
80386: PUSH
80387: LD_INT 3
80389: ST_TO_ADDR
// vc_control := control_computer ;
80390: LD_ADDR_OWVAR 38
80394: PUSH
80395: LD_INT 3
80397: ST_TO_ADDR
// vc_weapon := 59 ;
80398: LD_ADDR_OWVAR 40
80402: PUSH
80403: LD_INT 59
80405: ST_TO_ADDR
// result := CreateVehicle ;
80406: LD_ADDR_VAR 0 5
80410: PUSH
80411: CALL_OW 45
80415: ST_TO_ADDR
// SetDir ( result , d ) ;
80416: LD_VAR 0 5
80420: PPUSH
80421: LD_VAR 0 4
80425: PPUSH
80426: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80430: LD_VAR 0 5
80434: PPUSH
80435: LD_VAR 0 2
80439: PPUSH
80440: LD_VAR 0 3
80444: PPUSH
80445: LD_INT 0
80447: PPUSH
80448: CALL_OW 48
// end ;
80452: LD_VAR 0 5
80456: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80457: LD_INT 0
80459: PPUSH
80460: PPUSH
80461: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80462: LD_ADDR_VAR 0 2
80466: PUSH
80467: LD_INT 0
80469: PUSH
80470: LD_INT 0
80472: PUSH
80473: LD_INT 0
80475: PUSH
80476: LD_INT 0
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: LIST
80483: LIST
80484: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80485: LD_VAR 0 1
80489: NOT
80490: IFTRUE 80523
80492: PUSH
80493: LD_VAR 0 1
80497: PPUSH
80498: CALL_OW 264
80502: PUSH
80503: LD_INT 12
80505: PUSH
80506: LD_INT 51
80508: PUSH
80509: LD_INT 32
80511: PUSH
80512: LD_INT 89
80514: PUSH
80515: EMPTY
80516: LIST
80517: LIST
80518: LIST
80519: LIST
80520: IN
80521: NOT
80522: OR
80523: IFFALSE 80527
// exit ;
80525: GO 80625
// for i := 1 to 3 do
80527: LD_ADDR_VAR 0 3
80531: PUSH
80532: DOUBLE
80533: LD_INT 1
80535: DEC
80536: ST_TO_ADDR
80537: LD_INT 3
80539: PUSH
80540: FOR_TO
80541: IFFALSE 80623
// begin tmp := GetCargo ( cargo , i ) ;
80543: LD_ADDR_VAR 0 4
80547: PUSH
80548: LD_VAR 0 1
80552: PPUSH
80553: LD_VAR 0 3
80557: PPUSH
80558: CALL_OW 289
80562: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80563: LD_ADDR_VAR 0 2
80567: PUSH
80568: LD_VAR 0 2
80572: PPUSH
80573: LD_VAR 0 3
80577: PPUSH
80578: LD_VAR 0 4
80582: PPUSH
80583: CALL_OW 1
80587: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80588: LD_ADDR_VAR 0 2
80592: PUSH
80593: LD_VAR 0 2
80597: PPUSH
80598: LD_INT 4
80600: PPUSH
80601: LD_VAR 0 2
80605: PUSH
80606: LD_INT 4
80608: ARRAY
80609: PUSH
80610: LD_VAR 0 4
80614: PLUS
80615: PPUSH
80616: CALL_OW 1
80620: ST_TO_ADDR
// end ;
80621: GO 80540
80623: POP
80624: POP
// end ;
80625: LD_VAR 0 2
80629: RET
// export function Length ( array ) ; begin
80630: LD_INT 0
80632: PPUSH
// result := array + 0 ;
80633: LD_ADDR_VAR 0 2
80637: PUSH
80638: LD_VAR 0 1
80642: PUSH
80643: LD_INT 0
80645: PLUS
80646: ST_TO_ADDR
// end ;
80647: LD_VAR 0 2
80651: RET
// export function PrepareArray ( array ) ; begin
80652: LD_INT 0
80654: PPUSH
// result := array diff 0 ;
80655: LD_ADDR_VAR 0 2
80659: PUSH
80660: LD_VAR 0 1
80664: PUSH
80665: LD_INT 0
80667: DIFF
80668: ST_TO_ADDR
// if not result [ 1 ] then
80669: LD_VAR 0 2
80673: PUSH
80674: LD_INT 1
80676: ARRAY
80677: NOT
80678: IFFALSE 80698
// result := Delete ( result , 1 ) ;
80680: LD_ADDR_VAR 0 2
80684: PUSH
80685: LD_VAR 0 2
80689: PPUSH
80690: LD_INT 1
80692: PPUSH
80693: CALL_OW 3
80697: ST_TO_ADDR
// end ;
80698: LD_VAR 0 2
80702: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80703: LD_INT 0
80705: PPUSH
80706: PPUSH
80707: PPUSH
80708: PPUSH
// sibRocketRange := 25 ;
80709: LD_ADDR_VAR 0 6
80713: PUSH
80714: LD_INT 25
80716: ST_TO_ADDR
// result := false ;
80717: LD_ADDR_VAR 0 4
80721: PUSH
80722: LD_INT 0
80724: ST_TO_ADDR
// for i := 0 to 5 do
80725: LD_ADDR_VAR 0 5
80729: PUSH
80730: DOUBLE
80731: LD_INT 0
80733: DEC
80734: ST_TO_ADDR
80735: LD_INT 5
80737: PUSH
80738: FOR_TO
80739: IFFALSE 80806
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80741: LD_VAR 0 1
80745: PPUSH
80746: LD_VAR 0 5
80750: PPUSH
80751: LD_VAR 0 6
80755: PPUSH
80756: CALL_OW 272
80760: PPUSH
80761: LD_VAR 0 2
80765: PPUSH
80766: LD_VAR 0 5
80770: PPUSH
80771: LD_VAR 0 6
80775: PPUSH
80776: CALL_OW 273
80780: PPUSH
80781: LD_VAR 0 3
80785: PPUSH
80786: CALL_OW 309
80790: IFFALSE 80804
// begin result := true ;
80792: LD_ADDR_VAR 0 4
80796: PUSH
80797: LD_INT 1
80799: ST_TO_ADDR
// exit ;
80800: POP
80801: POP
80802: GO 80808
// end ;
80804: GO 80738
80806: POP
80807: POP
// end ;
80808: LD_VAR 0 4
80812: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80813: LD_INT 0
80815: PPUSH
80816: PPUSH
80817: PPUSH
// if btype = b_depot then
80818: LD_VAR 0 2
80822: PUSH
80823: LD_INT 0
80825: EQUAL
80826: IFFALSE 80838
// begin result := true ;
80828: LD_ADDR_VAR 0 3
80832: PUSH
80833: LD_INT 1
80835: ST_TO_ADDR
// exit ;
80836: GO 80958
// end ; pom := GetBase ( depot ) ;
80838: LD_ADDR_VAR 0 4
80842: PUSH
80843: LD_VAR 0 1
80847: PPUSH
80848: CALL_OW 274
80852: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80853: LD_ADDR_VAR 0 5
80857: PUSH
80858: LD_VAR 0 2
80862: PPUSH
80863: LD_VAR 0 1
80867: PPUSH
80868: CALL_OW 248
80872: PPUSH
80873: CALL_OW 450
80877: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80878: LD_ADDR_VAR 0 3
80882: PUSH
80883: LD_VAR 0 4
80887: PPUSH
80888: LD_INT 1
80890: PPUSH
80891: CALL_OW 275
80895: PUSH
80896: LD_VAR 0 5
80900: PUSH
80901: LD_INT 1
80903: ARRAY
80904: GREATEREQUAL
80905: IFFALSE 80931
80907: PUSH
80908: LD_VAR 0 4
80912: PPUSH
80913: LD_INT 2
80915: PPUSH
80916: CALL_OW 275
80920: PUSH
80921: LD_VAR 0 5
80925: PUSH
80926: LD_INT 2
80928: ARRAY
80929: GREATEREQUAL
80930: AND
80931: IFFALSE 80957
80933: PUSH
80934: LD_VAR 0 4
80938: PPUSH
80939: LD_INT 3
80941: PPUSH
80942: CALL_OW 275
80946: PUSH
80947: LD_VAR 0 5
80951: PUSH
80952: LD_INT 3
80954: ARRAY
80955: GREATEREQUAL
80956: AND
80957: ST_TO_ADDR
// end ;
80958: LD_VAR 0 3
80962: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80963: LD_INT 0
80965: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80966: LD_VAR 0 1
80970: PPUSH
80971: LD_VAR 0 2
80975: PPUSH
80976: LD_INT 0
80978: PPUSH
80979: LD_INT 0
80981: PPUSH
80982: LD_INT 1
80984: PPUSH
80985: LD_INT 0
80987: PPUSH
80988: CALL_OW 587
// end ;
80992: LD_VAR 0 3
80996: RET
// export function CenterOnNow ( unit ) ; begin
80997: LD_INT 0
80999: PPUSH
// result := IsInUnit ( unit ) ;
81000: LD_ADDR_VAR 0 2
81004: PUSH
81005: LD_VAR 0 1
81009: PPUSH
81010: CALL_OW 310
81014: ST_TO_ADDR
// if not result then
81015: LD_VAR 0 2
81019: NOT
81020: IFFALSE 81032
// result := unit ;
81022: LD_ADDR_VAR 0 2
81026: PUSH
81027: LD_VAR 0 1
81031: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81032: LD_VAR 0 1
81036: PPUSH
81037: CALL_OW 87
// end ;
81041: LD_VAR 0 2
81045: RET
// export function ComMoveHex ( unit , hex ) ; begin
81046: LD_INT 0
81048: PPUSH
// if not hex then
81049: LD_VAR 0 2
81053: NOT
81054: IFFALSE 81058
// exit ;
81056: GO 81111
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81058: LD_VAR 0 2
81062: PUSH
81063: LD_INT 1
81065: ARRAY
81066: PPUSH
81067: LD_VAR 0 2
81071: PUSH
81072: LD_INT 2
81074: ARRAY
81075: PPUSH
81076: CALL_OW 428
81080: IFFALSE 81084
// exit ;
81082: GO 81111
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81084: LD_VAR 0 1
81088: PPUSH
81089: LD_VAR 0 2
81093: PUSH
81094: LD_INT 1
81096: ARRAY
81097: PPUSH
81098: LD_VAR 0 2
81102: PUSH
81103: LD_INT 2
81105: ARRAY
81106: PPUSH
81107: CALL_OW 111
// end ;
81111: LD_VAR 0 3
81115: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81116: LD_INT 0
81118: PPUSH
81119: PPUSH
81120: PPUSH
// if not unit or not enemy then
81121: LD_VAR 0 1
81125: NOT
81126: IFTRUE 81135
81128: PUSH
81129: LD_VAR 0 2
81133: NOT
81134: OR
81135: IFFALSE 81139
// exit ;
81137: GO 81265
// x := GetX ( enemy ) ;
81139: LD_ADDR_VAR 0 4
81143: PUSH
81144: LD_VAR 0 2
81148: PPUSH
81149: CALL_OW 250
81153: ST_TO_ADDR
// y := GetY ( enemy ) ;
81154: LD_ADDR_VAR 0 5
81158: PUSH
81159: LD_VAR 0 2
81163: PPUSH
81164: CALL_OW 251
81168: ST_TO_ADDR
// if ValidHex ( x , y ) then
81169: LD_VAR 0 4
81173: PPUSH
81174: LD_VAR 0 5
81178: PPUSH
81179: CALL_OW 488
81183: IFFALSE 81265
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81185: LD_VAR 0 2
81189: PPUSH
81190: CALL_OW 247
81194: PUSH
81195: LD_INT 3
81197: PUSH
81198: LD_INT 2
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: IN
81205: IFTRUE 81228
81207: PUSH
81208: LD_VAR 0 1
81212: PPUSH
81213: CALL_OW 255
81217: PPUSH
81218: LD_VAR 0 2
81222: PPUSH
81223: CALL_OW 292
81227: OR
81228: IFFALSE 81246
// ComAttackUnit ( unit , enemy ) else
81230: LD_VAR 0 1
81234: PPUSH
81235: LD_VAR 0 2
81239: PPUSH
81240: CALL_OW 115
81244: GO 81265
// ComAgressiveMove ( unit , x , y ) ;
81246: LD_VAR 0 1
81250: PPUSH
81251: LD_VAR 0 4
81255: PPUSH
81256: LD_VAR 0 5
81260: PPUSH
81261: CALL_OW 114
// end ;
81265: LD_VAR 0 3
81269: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81270: LD_INT 0
81272: PPUSH
81273: PPUSH
81274: PPUSH
// list := AreaToList ( area , 0 ) ;
81275: LD_ADDR_VAR 0 5
81279: PUSH
81280: LD_VAR 0 1
81284: PPUSH
81285: LD_INT 0
81287: PPUSH
81288: CALL_OW 517
81292: ST_TO_ADDR
// if not list then
81293: LD_VAR 0 5
81297: NOT
81298: IFFALSE 81302
// exit ;
81300: GO 81432
// if all then
81302: LD_VAR 0 2
81306: IFFALSE 81394
// begin for i := 1 to list [ 1 ] do
81308: LD_ADDR_VAR 0 4
81312: PUSH
81313: DOUBLE
81314: LD_INT 1
81316: DEC
81317: ST_TO_ADDR
81318: LD_VAR 0 5
81322: PUSH
81323: LD_INT 1
81325: ARRAY
81326: PUSH
81327: FOR_TO
81328: IFFALSE 81390
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81330: LD_ADDR_VAR 0 3
81334: PUSH
81335: LD_VAR 0 3
81339: PPUSH
81340: LD_VAR 0 3
81344: PUSH
81345: LD_INT 1
81347: PLUS
81348: PPUSH
81349: LD_VAR 0 5
81353: PUSH
81354: LD_INT 1
81356: ARRAY
81357: PUSH
81358: LD_VAR 0 4
81362: ARRAY
81363: PUSH
81364: LD_VAR 0 5
81368: PUSH
81369: LD_INT 2
81371: ARRAY
81372: PUSH
81373: LD_VAR 0 4
81377: ARRAY
81378: PUSH
81379: EMPTY
81380: LIST
81381: LIST
81382: PPUSH
81383: CALL_OW 1
81387: ST_TO_ADDR
81388: GO 81327
81390: POP
81391: POP
// exit ;
81392: GO 81432
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81394: LD_ADDR_VAR 0 3
81398: PUSH
81399: LD_VAR 0 5
81403: PUSH
81404: LD_INT 1
81406: ARRAY
81407: PUSH
81408: LD_INT 1
81410: ARRAY
81411: PUSH
81412: LD_VAR 0 5
81416: PUSH
81417: LD_INT 2
81419: ARRAY
81420: PUSH
81421: LD_INT 1
81423: ARRAY
81424: PUSH
81425: EMPTY
81426: LIST
81427: LIST
81428: PUSH
81429: EMPTY
81430: LIST
81431: ST_TO_ADDR
// end ;
81432: LD_VAR 0 3
81436: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81437: LD_INT 0
81439: PPUSH
81440: PPUSH
// list := AreaToList ( area , 0 ) ;
81441: LD_ADDR_VAR 0 4
81445: PUSH
81446: LD_VAR 0 1
81450: PPUSH
81451: LD_INT 0
81453: PPUSH
81454: CALL_OW 517
81458: ST_TO_ADDR
// if not list then
81459: LD_VAR 0 4
81463: NOT
81464: IFFALSE 81468
// exit ;
81466: GO 81509
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81468: LD_ADDR_VAR 0 3
81472: PUSH
81473: LD_VAR 0 4
81477: PUSH
81478: LD_INT 1
81480: ARRAY
81481: PUSH
81482: LD_INT 1
81484: ARRAY
81485: PUSH
81486: LD_VAR 0 4
81490: PUSH
81491: LD_INT 2
81493: ARRAY
81494: PUSH
81495: LD_INT 1
81497: ARRAY
81498: PUSH
81499: LD_VAR 0 2
81503: PUSH
81504: EMPTY
81505: LIST
81506: LIST
81507: LIST
81508: ST_TO_ADDR
// end ;
81509: LD_VAR 0 3
81513: RET
// export function First ( array ) ; begin
81514: LD_INT 0
81516: PPUSH
// if not array then
81517: LD_VAR 0 1
81521: NOT
81522: IFFALSE 81526
// exit ;
81524: GO 81540
// result := array [ 1 ] ;
81526: LD_ADDR_VAR 0 2
81530: PUSH
81531: LD_VAR 0 1
81535: PUSH
81536: LD_INT 1
81538: ARRAY
81539: ST_TO_ADDR
// end ;
81540: LD_VAR 0 2
81544: RET
// export function Last ( array ) ; begin
81545: LD_INT 0
81547: PPUSH
// if not array then
81548: LD_VAR 0 1
81552: NOT
81553: IFFALSE 81557
// exit ;
81555: GO 81573
// result := array [ array ] ;
81557: LD_ADDR_VAR 0 2
81561: PUSH
81562: LD_VAR 0 1
81566: PUSH
81567: LD_VAR 0 1
81571: ARRAY
81572: ST_TO_ADDR
// end ;
81573: LD_VAR 0 2
81577: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81578: LD_INT 0
81580: PPUSH
81581: PPUSH
// result := [ ] ;
81582: LD_ADDR_VAR 0 5
81586: PUSH
81587: EMPTY
81588: ST_TO_ADDR
// if not array then
81589: LD_VAR 0 1
81593: NOT
81594: IFFALSE 81598
// exit ;
81596: GO 81710
// for i := 1 to array do
81598: LD_ADDR_VAR 0 6
81602: PUSH
81603: DOUBLE
81604: LD_INT 1
81606: DEC
81607: ST_TO_ADDR
81608: LD_VAR 0 1
81612: PUSH
81613: FOR_TO
81614: IFFALSE 81708
// if array [ i ] [ index ] = value then
81616: LD_VAR 0 1
81620: PUSH
81621: LD_VAR 0 6
81625: ARRAY
81626: PUSH
81627: LD_VAR 0 2
81631: ARRAY
81632: PUSH
81633: LD_VAR 0 3
81637: EQUAL
81638: IFFALSE 81706
// begin if indexColumn then
81640: LD_VAR 0 4
81644: IFFALSE 81680
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81646: LD_ADDR_VAR 0 5
81650: PUSH
81651: LD_VAR 0 5
81655: PPUSH
81656: LD_VAR 0 1
81660: PUSH
81661: LD_VAR 0 6
81665: ARRAY
81666: PUSH
81667: LD_VAR 0 4
81671: ARRAY
81672: PPUSH
81673: CALL 76718 0 2
81677: ST_TO_ADDR
81678: GO 81706
// result := Join ( result , array [ i ] ) ;
81680: LD_ADDR_VAR 0 5
81684: PUSH
81685: LD_VAR 0 5
81689: PPUSH
81690: LD_VAR 0 1
81694: PUSH
81695: LD_VAR 0 6
81699: ARRAY
81700: PPUSH
81701: CALL 76718 0 2
81705: ST_TO_ADDR
// end ;
81706: GO 81613
81708: POP
81709: POP
// end ;
81710: LD_VAR 0 5
81714: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81715: LD_INT 0
81717: PPUSH
// if not vehicles or not parkingPoint then
81718: LD_VAR 0 1
81722: NOT
81723: IFTRUE 81732
81725: PUSH
81726: LD_VAR 0 2
81730: NOT
81731: OR
81732: IFFALSE 81736
// exit ;
81734: GO 81834
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81736: LD_ADDR_VAR 0 1
81740: PUSH
81741: LD_VAR 0 1
81745: PPUSH
81746: LD_INT 50
81748: PUSH
81749: EMPTY
81750: LIST
81751: PUSH
81752: LD_INT 3
81754: PUSH
81755: LD_INT 92
81757: PUSH
81758: LD_VAR 0 2
81762: PUSH
81763: LD_INT 1
81765: ARRAY
81766: PUSH
81767: LD_VAR 0 2
81771: PUSH
81772: LD_INT 2
81774: ARRAY
81775: PUSH
81776: LD_INT 8
81778: PUSH
81779: EMPTY
81780: LIST
81781: LIST
81782: LIST
81783: LIST
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PUSH
81789: EMPTY
81790: LIST
81791: LIST
81792: PPUSH
81793: CALL_OW 72
81797: ST_TO_ADDR
// if not vehicles then
81798: LD_VAR 0 1
81802: NOT
81803: IFFALSE 81807
// exit ;
81805: GO 81834
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81807: LD_VAR 0 1
81811: PPUSH
81812: LD_VAR 0 2
81816: PUSH
81817: LD_INT 1
81819: ARRAY
81820: PPUSH
81821: LD_VAR 0 2
81825: PUSH
81826: LD_INT 2
81828: ARRAY
81829: PPUSH
81830: CALL_OW 111
// end ;
81834: LD_VAR 0 3
81838: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81839: LD_INT 0
81841: PPUSH
81842: PPUSH
81843: PPUSH
// if not side or not area then
81844: LD_VAR 0 1
81848: NOT
81849: IFTRUE 81858
81851: PUSH
81852: LD_VAR 0 2
81856: NOT
81857: OR
81858: IFFALSE 81862
// exit ;
81860: GO 81981
// tmp := AreaToList ( area , 0 ) ;
81862: LD_ADDR_VAR 0 5
81866: PUSH
81867: LD_VAR 0 2
81871: PPUSH
81872: LD_INT 0
81874: PPUSH
81875: CALL_OW 517
81879: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81880: LD_ADDR_VAR 0 4
81884: PUSH
81885: DOUBLE
81886: LD_INT 1
81888: DEC
81889: ST_TO_ADDR
81890: LD_VAR 0 5
81894: PUSH
81895: LD_INT 1
81897: ARRAY
81898: PUSH
81899: FOR_TO
81900: IFFALSE 81979
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81902: LD_VAR 0 5
81906: PUSH
81907: LD_INT 1
81909: ARRAY
81910: PUSH
81911: LD_VAR 0 4
81915: ARRAY
81916: PPUSH
81917: LD_VAR 0 5
81921: PUSH
81922: LD_INT 2
81924: ARRAY
81925: PUSH
81926: LD_VAR 0 4
81930: ARRAY
81931: PPUSH
81932: CALL_OW 351
81936: IFFALSE 81977
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81938: LD_VAR 0 5
81942: PUSH
81943: LD_INT 1
81945: ARRAY
81946: PUSH
81947: LD_VAR 0 4
81951: ARRAY
81952: PPUSH
81953: LD_VAR 0 5
81957: PUSH
81958: LD_INT 2
81960: ARRAY
81961: PUSH
81962: LD_VAR 0 4
81966: ARRAY
81967: PPUSH
81968: LD_VAR 0 1
81972: PPUSH
81973: CALL_OW 244
// end ;
81977: GO 81899
81979: POP
81980: POP
// end ;
81981: LD_VAR 0 3
81985: RET
// export function UniqueArray ( array ) ; var i ; begin
81986: LD_INT 0
81988: PPUSH
81989: PPUSH
// result := [ ] ;
81990: LD_ADDR_VAR 0 2
81994: PUSH
81995: EMPTY
81996: ST_TO_ADDR
// if not array then
81997: LD_VAR 0 1
82001: NOT
82002: IFFALSE 82006
// exit ;
82004: GO 82067
// for i := 1 to array do
82006: LD_ADDR_VAR 0 3
82010: PUSH
82011: DOUBLE
82012: LD_INT 1
82014: DEC
82015: ST_TO_ADDR
82016: LD_VAR 0 1
82020: PUSH
82021: FOR_TO
82022: IFFALSE 82065
// if not array [ i ] in result then
82024: LD_VAR 0 1
82028: PUSH
82029: LD_VAR 0 3
82033: ARRAY
82034: PUSH
82035: LD_VAR 0 2
82039: IN
82040: NOT
82041: IFFALSE 82063
// result := Join ( result , i ) ;
82043: LD_ADDR_VAR 0 2
82047: PUSH
82048: LD_VAR 0 2
82052: PPUSH
82053: LD_VAR 0 3
82057: PPUSH
82058: CALL 76718 0 2
82062: ST_TO_ADDR
82063: GO 82021
82065: POP
82066: POP
// end ; end_of_file
82067: LD_VAR 0 2
82071: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82072: LD_VAR 0 1
82076: PUSH
82077: LD_INT 200
82079: DOUBLE
82080: GREATEREQUAL
82081: IFFALSE 82089
82083: LD_INT 299
82085: DOUBLE
82086: LESSEQUAL
82087: IFTRUE 82091
82089: GO 82123
82091: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82092: LD_VAR 0 1
82096: PPUSH
82097: LD_VAR 0 2
82101: PPUSH
82102: LD_VAR 0 3
82106: PPUSH
82107: LD_VAR 0 4
82111: PPUSH
82112: LD_VAR 0 5
82116: PPUSH
82117: CALL 33829 0 5
82121: GO 82200
82123: LD_INT 300
82125: DOUBLE
82126: GREATEREQUAL
82127: IFFALSE 82135
82129: LD_INT 399
82131: DOUBLE
82132: LESSEQUAL
82133: IFTRUE 82137
82135: GO 82199
82137: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82138: LD_VAR 0 1
82142: PPUSH
82143: LD_VAR 0 2
82147: PPUSH
82148: LD_VAR 0 3
82152: PPUSH
82153: LD_VAR 0 4
82157: PPUSH
82158: LD_VAR 0 5
82162: PPUSH
82163: LD_VAR 0 6
82167: PPUSH
82168: LD_VAR 0 7
82172: PPUSH
82173: LD_VAR 0 8
82177: PPUSH
82178: LD_VAR 0 9
82182: PPUSH
82183: LD_VAR 0 10
82187: PPUSH
82188: LD_VAR 0 11
82192: PPUSH
82193: CALL 29713 0 11
82197: GO 82200
82199: POP
// end ;
82200: PPOPN 11
82202: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82203: LD_VAR 0 1
82207: PPUSH
82208: LD_VAR 0 2
82212: PPUSH
82213: LD_VAR 0 3
82217: PPUSH
82218: LD_VAR 0 4
82222: PPUSH
82223: LD_VAR 0 5
82227: PPUSH
82228: CALL 33210 0 5
// end ; end_of_file
82232: PPOPN 5
82234: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82235: LD_VAR 0 1
82239: PPUSH
82240: LD_VAR 0 2
82244: PPUSH
82245: LD_VAR 0 3
82249: PPUSH
82250: LD_VAR 0 4
82254: PPUSH
82255: LD_VAR 0 5
82259: PPUSH
82260: LD_VAR 0 6
82264: PPUSH
82265: CALL 17253 0 6
// end ;
82269: PPOPN 6
82271: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82272: LD_INT 0
82274: PPUSH
// begin if not units then
82275: LD_VAR 0 1
82279: NOT
82280: IFFALSE 82284
// exit ;
82282: GO 82284
// end ;
82284: PPOPN 7
82286: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82287: CALL 17140 0 0
// end ;
82291: PPOPN 1
82293: END
