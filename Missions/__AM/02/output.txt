// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10724 0 0
// PrepareRussianCommander ;
  44: CALL 12260 0 0
// PrepareSouthBase ;
  48: CALL 12356 0 0
// PrepareNorthBase ;
  52: CALL 12694 0 0
// PrepareOtherRussians ;
  56: CALL 13089 0 0
// PrepareHeroes ;
  60: CALL 11045 0 0
// PrepareLisSquad ;
  64: CALL 11415 0 0
// PrepareOtherAmericans ;
  68: CALL 11730 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: IFFALSE 322
 316: PUSH
 317: LD_EXP 2
 321: AND
 322: IFFALSE 652
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 324: LD_EXP 3
 328: PPUSH
 329: LD_INT 43
 331: PPUSH
 332: LD_INT 72
 334: PPUSH
 335: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 339: LD_EXP 2
 343: PPUSH
 344: LD_INT 44
 346: PPUSH
 347: LD_INT 70
 349: PPUSH
 350: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 354: LD_EXP 1
 358: PPUSH
 359: LD_INT 46
 361: PPUSH
 362: LD_INT 73
 364: PPUSH
 365: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 369: LD_EXP 3
 373: PPUSH
 374: LD_STRING D1a-Cyrus-1
 376: PPUSH
 377: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 381: LD_EXP 1
 385: PPUSH
 386: LD_STRING D1a-JMM-1
 388: PPUSH
 389: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 393: LD_EXP 3
 397: PPUSH
 398: LD_INT 37
 400: PPUSH
 401: LD_INT 66
 403: PPUSH
 404: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 408: LD_EXP 2
 412: PPUSH
 413: LD_INT 41
 415: PPUSH
 416: LD_INT 67
 418: PPUSH
 419: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 423: LD_EXP 1
 427: PPUSH
 428: LD_INT 38
 430: PPUSH
 431: LD_INT 64
 433: PPUSH
 434: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 438: LD_EXP 2
 442: PPUSH
 443: LD_STRING D1a-Bobby-2
 445: PPUSH
 446: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 450: LD_EXP 3
 454: PPUSH
 455: LD_INT 35
 457: PPUSH
 458: LD_INT 62
 460: PPUSH
 461: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 465: LD_EXP 2
 469: PPUSH
 470: LD_INT 32
 472: PPUSH
 473: LD_INT 60
 475: PPUSH
 476: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 480: LD_EXP 1
 484: PPUSH
 485: LD_INT 35
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 495: LD_EXP 1
 499: PPUSH
 500: LD_STRING D1a-JMM-2
 502: PPUSH
 503: CALL_OW 88
// ComWalk ( Lisa ) ;
 507: LD_EXP 4
 511: PPUSH
 512: CALL_OW 138
// wait ( 0 0$1 ) ;
 516: LD_INT 35
 518: PPUSH
 519: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 523: LD_EXP 4
 527: PPUSH
 528: LD_EXP 1
 532: PPUSH
 533: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 537: LD_EXP 1
 541: PUSH
 542: LD_EXP 3
 546: PUSH
 547: LD_EXP 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PPUSH
 557: LD_EXP 4
 561: PPUSH
 562: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 566: LD_VAR 0 2
 570: PUSH
 571: LD_INT 1
 573: ARRAY
 574: PPUSH
 575: LD_INT 33
 577: PPUSH
 578: LD_INT 55
 580: PPUSH
 581: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 585: LD_VAR 0 2
 589: PUSH
 590: LD_INT 2
 592: ARRAY
 593: PPUSH
 594: LD_INT 30
 596: PPUSH
 597: LD_INT 54
 599: PPUSH
 600: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 604: LD_VAR 0 2
 608: PUSH
 609: LD_INT 1
 611: ARRAY
 612: PPUSH
 613: LD_EXP 1
 617: PPUSH
 618: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: LD_EXP 1
 635: PPUSH
 636: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 640: LD_EXP 4
 644: PPUSH
 645: LD_STRING D1a-Lisa-2
 647: PPUSH
 648: CALL_OW 88
// end ; if Cyrus and not Bobby then
 652: LD_EXP 3
 656: IFFALSE 665
 658: PUSH
 659: LD_EXP 2
 663: NOT
 664: AND
 665: IFFALSE 870
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 667: LD_EXP 3
 671: PPUSH
 672: LD_INT 43
 674: PPUSH
 675: LD_INT 72
 677: PPUSH
 678: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 682: LD_EXP 1
 686: PPUSH
 687: LD_INT 46
 689: PPUSH
 690: LD_INT 73
 692: PPUSH
 693: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 697: LD_EXP 3
 701: PPUSH
 702: LD_STRING D1a-Cyrus-1
 704: PPUSH
 705: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING D1a-JMM-1
 716: PPUSH
 717: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 721: LD_EXP 3
 725: PPUSH
 726: LD_INT 37
 728: PPUSH
 729: LD_INT 66
 731: PPUSH
 732: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 736: LD_EXP 1
 740: PPUSH
 741: LD_INT 38
 743: PPUSH
 744: LD_INT 64
 746: PPUSH
 747: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 751: LD_EXP 3
 755: PPUSH
 756: LD_STRING D1a-Cyrus-2
 758: PPUSH
 759: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 763: LD_EXP 3
 767: PPUSH
 768: LD_INT 35
 770: PPUSH
 771: LD_INT 62
 773: PPUSH
 774: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 778: LD_EXP 1
 782: PPUSH
 783: LD_INT 35
 785: PPUSH
 786: LD_INT 60
 788: PPUSH
 789: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 793: LD_EXP 1
 797: PPUSH
 798: LD_STRING D1a-JMM-2
 800: PPUSH
 801: CALL_OW 88
// ComWalk ( Lisa ) ;
 805: LD_EXP 4
 809: PPUSH
 810: CALL_OW 138
// wait ( 0 0$1 ) ;
 814: LD_INT 35
 816: PPUSH
 817: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_EXP 1
 830: PPUSH
 831: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 835: LD_EXP 4
 839: PPUSH
 840: LD_STRING D1a-Lisa-2
 842: PPUSH
 843: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 847: LD_EXP 1
 851: PUSH
 852: LD_EXP 3
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: LD_EXP 4
 865: PPUSH
 866: CALL_OW 119
// end ; if not Cyrus and Bobby then
 870: LD_EXP 3
 874: NOT
 875: IFFALSE 883
 877: PUSH
 878: LD_EXP 2
 882: AND
 883: IFFALSE 1162
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 44
 892: PPUSH
 893: LD_INT 70
 895: PPUSH
 896: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 900: LD_EXP 1
 904: PPUSH
 905: LD_INT 46
 907: PPUSH
 908: LD_INT 73
 910: PPUSH
 911: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 915: LD_EXP 2
 919: PPUSH
 920: LD_STRING D1a-Bobby-1
 922: PPUSH
 923: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 927: LD_EXP 1
 931: PPUSH
 932: LD_STRING D1a-JMM-1
 934: PPUSH
 935: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 37
 946: PPUSH
 947: LD_INT 66
 949: PPUSH
 950: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_INT 38
 961: PPUSH
 962: LD_INT 64
 964: PPUSH
 965: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_STRING D1a-Bobby-2
 976: PPUSH
 977: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 981: LD_EXP 2
 985: PPUSH
 986: LD_INT 35
 988: PPUSH
 989: LD_INT 62
 991: PPUSH
 992: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 996: LD_EXP 1
1000: PPUSH
1001: LD_INT 35
1003: PPUSH
1004: LD_INT 60
1006: PPUSH
1007: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1011: LD_EXP 1
1015: PPUSH
1016: LD_STRING D1a-JMM-2
1018: PPUSH
1019: CALL_OW 88
// ComWalk ( Lisa ) ;
1023: LD_EXP 4
1027: PPUSH
1028: CALL_OW 138
// wait ( 0 0$1 ) ;
1032: LD_INT 35
1034: PPUSH
1035: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1039: LD_EXP 4
1043: PPUSH
1044: LD_EXP 1
1048: PPUSH
1049: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1053: LD_EXP 1
1057: PUSH
1058: LD_EXP 3
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PPUSH
1067: LD_EXP 4
1071: PPUSH
1072: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 1
1083: ARRAY
1084: PPUSH
1085: LD_INT 33
1087: PPUSH
1088: LD_INT 55
1090: PPUSH
1091: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1095: LD_VAR 0 2
1099: PUSH
1100: LD_INT 2
1102: ARRAY
1103: PPUSH
1104: LD_INT 30
1106: PPUSH
1107: LD_INT 54
1109: PPUSH
1110: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1114: LD_VAR 0 2
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: LD_EXP 1
1127: PPUSH
1128: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_EXP 1
1145: PPUSH
1146: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1150: LD_EXP 4
1154: PPUSH
1155: LD_STRING D1a-Lisa-2
1157: PPUSH
1158: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1162: LD_EXP 3
1166: NOT
1167: IFFALSE 1176
1169: PUSH
1170: LD_EXP 2
1174: NOT
1175: AND
1176: IFFALSE 1390
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1178: LD_EXP 1
1182: PPUSH
1183: LD_INT 37
1185: PPUSH
1186: LD_INT 66
1188: PPUSH
1189: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1193: LD_EXP 1
1197: PPUSH
1198: LD_STRING D1b-JMM-1
1200: PPUSH
1201: CALL_OW 88
// ComCrawl ( JMM ) ;
1205: LD_EXP 1
1209: PPUSH
1210: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 35
1221: PPUSH
1222: LD_INT 60
1224: PPUSH
1225: CALL_OW 171
// wait ( 0 0$8 ) ;
1229: LD_INT 280
1231: PPUSH
1232: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1236: LD_EXP 1
1240: PPUSH
1241: LD_STRING D1b-JMM-1a
1243: PPUSH
1244: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1248: LD_EXP 1
1252: PUSH
1253: LD_EXP 4
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 138
// wait ( 0 0$1 ) ;
1266: LD_INT 35
1268: PPUSH
1269: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1273: LD_EXP 4
1277: PPUSH
1278: LD_EXP 1
1282: PPUSH
1283: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1287: LD_EXP 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: PPUSH
1295: LD_EXP 4
1299: PPUSH
1300: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1304: LD_VAR 0 2
1308: PUSH
1309: LD_INT 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 33
1315: PPUSH
1316: LD_INT 55
1318: PPUSH
1319: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 2
1330: ARRAY
1331: PPUSH
1332: LD_INT 30
1334: PPUSH
1335: LD_INT 54
1337: PPUSH
1338: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: LD_EXP 1
1355: PPUSH
1356: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1360: LD_VAR 0 2
1364: PUSH
1365: LD_INT 2
1367: ARRAY
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1378: LD_EXP 4
1382: PPUSH
1383: LD_STRING D1b-Lisa-1
1385: PPUSH
1386: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-1
1397: PPUSH
1398: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1402: LD_EXP 4
1406: PPUSH
1407: LD_STRING D1-Lisa-1
1409: PPUSH
1410: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-2
1421: PPUSH
1422: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-2
1433: PPUSH
1434: CALL_OW 586
// if Cyrus then
1438: LD_EXP 3
1442: IFFALSE 1468
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1444: LD_EXP 3
1448: PPUSH
1449: LD_STRING D1-Cyrus-2
1451: PPUSH
1452: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1456: LD_EXP 1
1460: PPUSH
1461: LD_STRING D1-JMM-3
1463: PPUSH
1464: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1468: LD_EXP 9
1472: PPUSH
1473: LD_STRING D1-Pow-3
1475: PPUSH
1476: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1480: LD_EXP 1
1484: PPUSH
1485: LD_STRING D1-JMM-4
1487: PPUSH
1488: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1492: LD_EXP 9
1496: PPUSH
1497: LD_STRING D1-Pow-4
1499: PPUSH
1500: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1504: LD_EXP 9
1508: PPUSH
1509: LD_STRING D1-Pow-4a
1511: PPUSH
1512: CALL_OW 586
// if Cyrus then
1516: LD_EXP 3
1520: IFFALSE 1534
// Say ( Cyrus , D1-Cyrus-4 ) ;
1522: LD_EXP 3
1526: PPUSH
1527: LD_STRING D1-Cyrus-4
1529: PPUSH
1530: CALL_OW 88
// if Bobby then
1534: LD_EXP 2
1538: IFFALSE 1576
// begin Say ( Bobby , D1-Bobby-4 ) ;
1540: LD_EXP 2
1544: PPUSH
1545: LD_STRING D1-Bobby-4
1547: PPUSH
1548: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1552: LD_EXP 4
1556: PPUSH
1557: LD_STRING D1-Lisa-4
1559: PPUSH
1560: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1564: LD_EXP 1
1568: PPUSH
1569: LD_STRING D1-JMM-5
1571: PPUSH
1572: CALL_OW 88
// end ; InGameOff ;
1576: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1580: LD_INT 22
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PPUSH
1590: CALL_OW 69
1594: PUSH
1595: LD_EXP 6
1599: PUSH
1600: LD_EXP 7
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: DIFF
1609: PPUSH
1610: LD_INT 1
1612: PPUSH
1613: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1617: LD_STRING M1
1619: PPUSH
1620: CALL_OW 337
// SaveForQuickRestart ;
1624: CALL_OW 22
// end ;
1628: LD_VAR 0 1
1632: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1633: LD_INT 7
1635: PPUSH
1636: LD_INT 22
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PPUSH
1646: CALL_OW 70
1650: PUSH
1651: LD_INT 0
1653: GREATER
1654: IFFALSE 2067
1656: GO 1658
1658: DISABLE
// begin InGameOn ;
1659: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1663: LD_INT 22
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 21
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PPUSH
1687: CALL_OW 69
1691: PPUSH
1692: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1696: LD_INT 24
1698: PPUSH
1699: LD_INT 32
1701: PPUSH
1702: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1706: LD_EXP 5
1710: PPUSH
1711: LD_INT 4
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1721: LD_EXP 5
1725: PPUSH
1726: LD_INT 4
1728: PPUSH
1729: CALL_OW 336
// wait ( 0 0$1 ) ;
1733: LD_INT 35
1735: PPUSH
1736: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1740: LD_EXP 5
1744: PPUSH
1745: LD_INT 27
1747: PPUSH
1748: LD_INT 38
1750: PPUSH
1751: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_EXP 1
1764: PPUSH
1765: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1769: LD_INT 22
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 21
1781: PUSH
1782: LD_INT 1
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_EXP 5
1802: PUSH
1803: EMPTY
1804: LIST
1805: DIFF
1806: PPUSH
1807: LD_EXP 5
1811: PPUSH
1812: CALL_OW 119
// wait ( 0 0$1 ) ;
1816: LD_INT 35
1818: PPUSH
1819: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1823: LD_EXP 5
1827: PPUSH
1828: LD_STRING D2a-Khat-1
1830: PPUSH
1831: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1835: LD_EXP 1
1839: PPUSH
1840: LD_STRING D2a-JMM-1
1842: PPUSH
1843: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1847: LD_EXP 5
1851: PPUSH
1852: LD_STRING D2a-Khat-2
1854: PPUSH
1855: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1859: LD_EXP 1
1863: PPUSH
1864: LD_STRING D2a-JMM-2
1866: PPUSH
1867: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1871: LD_EXP 5
1875: PPUSH
1876: LD_STRING D2a-Khat-3
1878: PPUSH
1879: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1883: LD_EXP 1
1887: PPUSH
1888: LD_STRING D2a-JMM-3
1890: PPUSH
1891: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1895: LD_EXP 5
1899: PPUSH
1900: LD_STRING D2a-Khat-4
1902: PPUSH
1903: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1907: LD_EXP 1
1911: PPUSH
1912: LD_STRING D2a-JMM-4
1914: PPUSH
1915: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1919: LD_EXP 5
1923: PPUSH
1924: LD_STRING D2a-Khat-5
1926: PPUSH
1927: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1931: LD_EXP 1
1935: PPUSH
1936: LD_STRING D2a-JMM-5
1938: PPUSH
1939: CALL_OW 88
// InGameOff ;
1943: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1947: LD_INT 22
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 21
1959: PUSH
1960: LD_INT 1
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 3
1969: PUSH
1970: LD_INT 24
1972: PUSH
1973: LD_INT 800
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: IFFALSE 2067
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1995: LD_EXP 5
1999: PPUSH
2000: LD_INT 22
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 21
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 24
2025: PUSH
2026: LD_INT 1000
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL_OW 69
2046: PUSH
2047: LD_INT 1
2049: ARRAY
2050: PPUSH
2051: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2055: LD_EXP 5
2059: PPUSH
2060: LD_STRING D2b-Khat-1
2062: PPUSH
2063: CALL_OW 88
// end ; end ;
2067: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2068: LD_INT 15
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 70
2085: IFFALSE 3292
2087: GO 2089
2089: DISABLE
2090: LD_INT 0
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_INT 999
2104: PUSH
2105: LD_INT 999
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: LD_INT 22
2122: PUSH
2123: LD_INT 1
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 21
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PUSH
2149: LD_EXP 1
2153: PUSH
2154: LD_EXP 2
2158: PUSH
2159: LD_EXP 3
2163: PUSH
2164: LD_EXP 4
2168: PUSH
2169: LD_EXP 5
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: DIFF
2181: ST_TO_ADDR
// PrepareDeadSoldiers ;
2182: CALL 11872 0 0
// spotCorpses = 1 ;
2186: LD_ADDR_EXP 32
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// InGameOn ;
2201: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2205: LD_INT 23
2207: PPUSH
2208: LD_INT 12
2210: PPUSH
2211: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2215: LD_ADDR_VAR 0 3
2219: PUSH
2220: LD_VAR 0 2
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 2
2231: ARRAY
2232: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_INT 22
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 21
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PPUSH
2262: CALL_OW 69
2266: PUSH
2267: LD_EXP 1
2271: PUSH
2272: LD_EXP 5
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: DIFF
2281: PUSH
2282: FOR_IN
2283: IFFALSE 2334
// if IsOK ( i ) then
2285: LD_VAR 0 1
2289: PPUSH
2290: CALL_OW 302
2294: IFFALSE 2332
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2296: LD_ADDR_VAR 0 2
2300: PUSH
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 1
2315: PPUSH
2316: LD_INT 16
2318: PPUSH
2319: CALL_OW 299
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PUSH
2328: EMPTY
2329: LIST
2330: ADD
2331: ST_TO_ADDR
2332: GO 2282
2334: POP
2335: POP
// for i = 2 to distanceTab do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 2
2344: DEC
2345: ST_TO_ADDR
2346: LD_VAR 0 2
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2398
// if distanceTab [ i ] [ 2 ] < min then
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PUSH
2365: LD_INT 2
2367: ARRAY
2368: PUSH
2369: LD_VAR 0 3
2373: LESS
2374: IFFALSE 2396
// min = distanceTab [ i ] [ 2 ] ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: LD_VAR 0 2
2385: PUSH
2386: LD_VAR 0 1
2390: ARRAY
2391: PUSH
2392: LD_INT 2
2394: ARRAY
2395: ST_TO_ADDR
2396: GO 2351
2398: POP
2399: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2400: LD_ADDR_VAR 0 1
2404: PUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 1
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 21
2417: PUSH
2418: LD_INT 1
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: PUSH
2434: LD_EXP 1
2438: PUSH
2439: EMPTY
2440: LIST
2441: DIFF
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2514
// begin ComMoveToArea ( i , DeadCutscene ) ;
2446: LD_VAR 0 1
2450: PPUSH
2451: LD_INT 28
2453: PPUSH
2454: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2458: LD_EXP 1
2462: PPUSH
2463: LD_INT 30
2465: PPUSH
2466: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2470: LD_VAR 0 1
2474: PPUSH
2475: LD_INT 23
2477: PPUSH
2478: LD_INT 11
2480: PPUSH
2481: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2485: LD_EXP 1
2489: PPUSH
2490: LD_INT 23
2492: PPUSH
2493: LD_INT 11
2495: PPUSH
2496: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2500: LD_EXP 36
2504: PPUSH
2505: LD_INT 250
2507: PPUSH
2508: CALL_OW 234
// end ;
2512: GO 2443
2514: POP
2515: POP
// for i = 2 to distanceTab do
2516: LD_ADDR_VAR 0 1
2520: PUSH
2521: DOUBLE
2522: LD_INT 2
2524: DEC
2525: ST_TO_ADDR
2526: LD_VAR 0 2
2530: PUSH
2531: FOR_TO
2532: IFFALSE 2926
// begin if distanceTab [ i ] [ 2 ] = min then
2534: LD_VAR 0 2
2538: PUSH
2539: LD_VAR 0 1
2543: ARRAY
2544: PUSH
2545: LD_INT 2
2547: ARRAY
2548: PUSH
2549: LD_VAR 0 3
2553: EQUAL
2554: IFFALSE 2924
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 2
2575: EQUAL
2576: IFFALSE 2590
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2578: LD_EXP 2
2582: PPUSH
2583: LD_STRING DCorpses-Bobby-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_EXP 3
2609: EQUAL
2610: IFFALSE 2624
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2612: LD_EXP 3
2616: PPUSH
2617: LD_STRING DCorpses-Cyrus-1
2619: PPUSH
2620: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2624: LD_VAR 0 2
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PUSH
2639: LD_EXP 4
2643: EQUAL
2644: IFFALSE 2658
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2646: LD_EXP 4
2650: PPUSH
2651: LD_STRING DCorpses-Lisa-1
2653: PPUSH
2654: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 1
2667: ARRAY
2668: PUSH
2669: LD_INT 1
2671: ARRAY
2672: PUSH
2673: LD_VAR 0 4
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: EQUAL
2682: IFFALSE 2703
2684: PUSH
2685: LD_VAR 0 4
2689: PUSH
2690: LD_INT 1
2692: ARRAY
2693: PPUSH
2694: CALL_OW 258
2698: PUSH
2699: LD_INT 1
2701: EQUAL
2702: AND
2703: IFFALSE 2721
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2705: LD_VAR 0 4
2709: PUSH
2710: LD_INT 1
2712: ARRAY
2713: PPUSH
2714: LD_STRING DCorpses-Sol1-1
2716: PPUSH
2717: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2721: LD_VAR 0 2
2725: PUSH
2726: LD_VAR 0 1
2730: ARRAY
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: EQUAL
2745: IFFALSE 2766
2747: PUSH
2748: LD_VAR 0 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 258
2761: PUSH
2762: LD_INT 2
2764: EQUAL
2765: AND
2766: IFFALSE 2784
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: PPUSH
2777: LD_STRING DCorpses-FSol1-1
2779: PPUSH
2780: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2784: LD_VAR 0 2
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: PUSH
2795: LD_INT 1
2797: ARRAY
2798: PUSH
2799: LD_VAR 0 4
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: EQUAL
2808: IFFALSE 2829
2810: PUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 2
2818: ARRAY
2819: PPUSH
2820: CALL_OW 258
2824: PUSH
2825: LD_INT 1
2827: EQUAL
2828: AND
2829: IFFALSE 2847
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2831: LD_VAR 0 4
2835: PUSH
2836: LD_INT 2
2838: ARRAY
2839: PPUSH
2840: LD_STRING DCorpses-Sol1-1
2842: PPUSH
2843: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2847: LD_VAR 0 2
2851: PUSH
2852: LD_VAR 0 1
2856: ARRAY
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PUSH
2862: LD_VAR 0 4
2866: PUSH
2867: LD_INT 2
2869: ARRAY
2870: EQUAL
2871: IFFALSE 2892
2873: PUSH
2874: LD_VAR 0 4
2878: PUSH
2879: LD_INT 2
2881: ARRAY
2882: PPUSH
2883: CALL_OW 258
2887: PUSH
2888: LD_INT 2
2890: EQUAL
2891: AND
2892: IFFALSE 2910
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2894: LD_VAR 0 4
2898: PUSH
2899: LD_INT 2
2901: ARRAY
2902: PPUSH
2903: LD_STRING DCorpses-FSol1-1
2905: PPUSH
2906: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2910: LD_EXP 36
2914: PPUSH
2915: LD_INT 150
2917: PPUSH
2918: CALL_OW 234
// break ;
2922: GO 2926
// end ; end ;
2924: GO 2531
2926: POP
2927: POP
// p := 0 ;
2928: LD_ADDR_VAR 0 5
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2936: LD_INT 35
2938: PPUSH
2939: CALL_OW 67
// p := p + 1 ;
2943: LD_ADDR_VAR 0 5
2947: PUSH
2948: LD_VAR 0 5
2952: PUSH
2953: LD_INT 1
2955: PLUS
2956: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: LD_INT 22
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 21
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PPUSH
2986: CALL_OW 69
2990: PUSH
2991: LD_EXP 1
2995: PUSH
2996: EMPTY
2997: LIST
2998: DIFF
2999: PUSH
3000: FOR_IN
3001: IFFALSE 3071
// begin ComMoveToArea ( i , DeadCutscene ) ;
3003: LD_VAR 0 1
3007: PPUSH
3008: LD_INT 28
3010: PPUSH
3011: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3015: LD_EXP 1
3019: PPUSH
3020: LD_INT 30
3022: PPUSH
3023: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3027: LD_VAR 0 1
3031: PPUSH
3032: LD_INT 23
3034: PPUSH
3035: LD_INT 11
3037: PPUSH
3038: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3042: LD_EXP 1
3046: PPUSH
3047: LD_INT 23
3049: PPUSH
3050: LD_INT 11
3052: PPUSH
3053: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3057: LD_EXP 36
3061: PPUSH
3062: LD_INT 250
3064: PPUSH
3065: CALL_OW 234
// end ;
3069: GO 3000
3071: POP
3072: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3073: LD_EXP 1
3077: PPUSH
3078: LD_INT 30
3080: PPUSH
3081: CALL_OW 308
3085: IFTRUE 3097
3087: PUSH
3088: LD_VAR 0 5
3092: PUSH
3093: LD_INT 16
3095: GREATEREQUAL
3096: OR
3097: IFFALSE 2936
// wait ( 0 0$1 ) ;
3099: LD_INT 35
3101: PPUSH
3102: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3106: LD_EXP 1
3110: PPUSH
3111: LD_STRING DCorpses-JMM-1
3113: PPUSH
3114: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3118: LD_EXP 36
3122: PPUSH
3123: LD_INT 100
3125: PPUSH
3126: CALL_OW 234
// if IsOK ( Khatam ) then
3130: LD_EXP 5
3134: PPUSH
3135: CALL_OW 302
3139: IFFALSE 3276
// begin repeat wait ( 0 0$1 ) ;
3141: LD_INT 35
3143: PPUSH
3144: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3148: LD_EXP 5
3152: PPUSH
3153: LD_EXP 36
3157: PPUSH
3158: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3162: LD_EXP 5
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: CALL_OW 296
3176: PUSH
3177: LD_INT 2
3179: LESS
3180: IFFALSE 3141
// spotCorpses = 0 ;
3182: LD_ADDR_EXP 32
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3190: LD_EXP 36
3194: PPUSH
3195: LD_INT 10
3197: PPUSH
3198: CALL_OW 234
// wait ( 0 0$3 ) ;
3202: LD_INT 105
3204: PPUSH
3205: CALL_OW 67
// KillUnit ( DyingSold ) ;
3209: LD_EXP 36
3213: PPUSH
3214: CALL_OW 66
// wait ( 0 0$1 ) ;
3218: LD_INT 35
3220: PPUSH
3221: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3225: LD_EXP 1
3229: PUSH
3230: LD_EXP 5
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3243: LD_EXP 5
3247: PPUSH
3248: LD_EXP 1
3252: PPUSH
3253: CALL_OW 119
// wait ( 0 0$1 ) ;
3257: LD_INT 35
3259: PPUSH
3260: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3264: LD_EXP 5
3268: PPUSH
3269: LD_STRING DCorpses-Khat-1
3271: PPUSH
3272: CALL_OW 88
// end ; InGameOff ;
3276: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3280: LD_EXP 1
3284: PPUSH
3285: LD_STRING DCorpses-JMM-2
3287: PPUSH
3288: CALL_OW 88
// end ;
3292: PPOPN 5
3294: END
// every 0 0$1 trigger spotCorpses = 1 do
3295: LD_EXP 32
3299: PUSH
3300: LD_INT 1
3302: EQUAL
3303: IFFALSE 3321
3305: GO 3307
3307: DISABLE
// begin enable ;
3308: ENABLE
// SetLives ( DyingSold , 10 ) ;
3309: LD_EXP 36
3313: PPUSH
3314: LD_INT 10
3316: PPUSH
3317: CALL_OW 234
// end ;
3321: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3322: LD_INT 8
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 70
3339: IFTRUE 3381
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: CALL_OW 69
3356: PPUSH
3357: LD_EXP 7
3361: PPUSH
3362: CALL_OW 74
3366: PPUSH
3367: LD_EXP 7
3371: PPUSH
3372: CALL_OW 296
3376: PUSH
3377: LD_INT 13
3379: LESS
3380: OR
3381: IFFALSE 3562
3383: GO 3385
3385: DISABLE
3386: LD_INT 0
3388: PPUSH
// begin InGameOn ;
3389: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3393: LD_EXP 7
3397: PPUSH
3398: LD_INT 250
3400: PPUSH
3401: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3405: LD_EXP 6
3409: PPUSH
3410: LD_INT 1000
3412: PUSH
3413: LD_INT 800
3415: PUSH
3416: LD_INT 750
3418: PUSH
3419: LD_INT 700
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: LD_OWVAR 67
3432: ARRAY
3433: PPUSH
3434: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 4
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3454: LD_EXP 6
3458: PUSH
3459: LD_EXP 7
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PPUSH
3468: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: LD_INT 9
3479: PPUSH
3480: LD_INT 22
3482: PUSH
3483: LD_INT 3
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PPUSH
3490: CALL_OW 70
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 4
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: UNION
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3525
// ComFree ( i ) ;
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 139
3523: GO 3511
3525: POP
3526: POP
// wait ( 0 0$1 ) ;
3527: LD_INT 35
3529: PPUSH
3530: CALL_OW 67
// InGameOff ;
3534: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_STRING DF-Sol1-1
3545: PPUSH
3546: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3550: LD_EXP 1
3554: PPUSH
3555: LD_STRING DF-JMM-1
3557: PPUSH
3558: CALL_OW 88
// end ;
3562: PPOPN 1
3564: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3565: LD_INT 19
3567: PPUSH
3568: LD_INT 22
3570: PUSH
3571: LD_INT 3
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 70
3582: PUSH
3583: LD_INT 0
3585: EQUAL
3586: IFFALSE 3695
3588: GO 3590
3590: DISABLE
// begin if not IsDead ( Brian ) then
3591: LD_EXP 6
3595: PPUSH
3596: CALL_OW 301
3600: NOT
3601: IFFALSE 3615
// SetSide ( Brian , 1 ) ;
3603: LD_EXP 6
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: CALL_OW 235
// if not IsDead ( Jerry ) then
3615: LD_EXP 7
3619: PPUSH
3620: CALL_OW 301
3624: NOT
3625: IFFALSE 3639
// SetSide ( Jerry , 1 ) ;
3627: LD_EXP 7
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3639: LD_INT 22
3641: PUSH
3642: LD_INT 1
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 25
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PPUSH
3663: CALL_OW 69
3667: IFFALSE 3683
// Say ( JMM , DFa-JMM-1 ) else
3669: LD_EXP 1
3673: PPUSH
3674: LD_STRING DFa-JMM-1
3676: PPUSH
3677: CALL_OW 88
3681: GO 3695
// Say ( JMM , DFa-JMM-1a ) ;
3683: LD_EXP 1
3687: PPUSH
3688: LD_STRING DFa-JMM-1a
3690: PPUSH
3691: CALL_OW 88
// end ;
3695: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3696: LD_INT 19
3698: PPUSH
3699: LD_INT 22
3701: PUSH
3702: LD_INT 3
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PPUSH
3709: CALL_OW 70
3713: PUSH
3714: LD_INT 0
3716: EQUAL
3717: IFFALSE 3731
3719: PUSH
3720: LD_EXP 6
3724: PPUSH
3725: CALL_OW 302
3729: NOT
3730: AND
3731: IFFALSE 3817
3733: GO 3735
3735: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3736: LD_INT 35
3738: PPUSH
3739: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3743: LD_EXP 6
3747: PPUSH
3748: CALL_OW 256
3752: PUSH
3753: LD_INT 250
3755: GREATER
3756: IFFALSE 3736
// Say ( Brian , DFb-Sol1-1 ) ;
3758: LD_EXP 6
3762: PPUSH
3763: LD_STRING DFb-Sol1-1
3765: PPUSH
3766: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3770: LD_EXP 6
3774: PPUSH
3775: LD_INT 78
3777: PPUSH
3778: LD_INT 74
3780: PPUSH
3781: CALL_OW 111
// if IsDead ( Jerry ) then
3785: LD_EXP 7
3789: PPUSH
3790: CALL_OW 301
3794: IFFALSE 3810
// Say ( Brian , DFb-Sol1-1a ) else
3796: LD_EXP 6
3800: PPUSH
3801: LD_STRING DFb-Sol1-1a
3803: PPUSH
3804: CALL_OW 88
3808: GO 3817
// SetAchievement ( ACH_JERRY ) ;
3810: LD_STRING ACH_JERRY
3812: PPUSH
3813: CALL_OW 543
// end ;
3817: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3818: LD_INT 22
3820: PUSH
3821: LD_INT 1
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 21
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 0
3849: EQUAL
3850: IFFALSE 3942
3852: GO 3854
3854: DISABLE
3855: LD_INT 0
3857: PPUSH
// begin enable ;
3858: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3859: LD_ADDR_VAR 0 1
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 3
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 21
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: LD_INT 30
3886: PUSH
3887: LD_INT 31
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: FOR_IN
3905: IFFALSE 3940
// begin if See ( 1 , i ) then
3907: LD_INT 1
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 292
3919: IFFALSE 3938
// begin disable ;
3921: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3922: LD_EXP 1
3926: PPUSH
3927: LD_STRING DX1-JMM-1
3929: PPUSH
3930: CALL_OW 88
// exit ;
3934: POP
3935: POP
3936: GO 3942
// end ; end ;
3938: GO 3904
3940: POP
3941: POP
// end ;
3942: PPOPN 1
3944: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 11
3950: PPUSH
3951: CALL_OW 294
3955: IFFALSE 4218
3957: GO 3959
3959: DISABLE
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
3964: PPUSH
// begin DialogueOn ;
3965: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3969: LD_INT 11
3971: PPUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 21
3984: PUSH
3985: LD_INT 1
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 70
4000: PUSH
4001: LD_INT 1
4003: ARRAY
4004: PPUSH
4005: LD_STRING DX3-Rus1-1
4007: PPUSH
4008: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4012: LD_EXP 1
4016: PPUSH
4017: LD_STRING DX3-JMM-1
4019: PPUSH
4020: CALL_OW 88
// DialogueOff ;
4024: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4028: LD_ADDR_VAR 0 1
4032: PUSH
4033: LD_INT 11
4035: PPUSH
4036: LD_INT 22
4038: PUSH
4039: LD_INT 3
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 70
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4086
// southBaseDefenders = southBaseDefenders ^ i ;
4068: LD_ADDR_EXP 25
4072: PUSH
4073: LD_EXP 25
4077: PUSH
4078: LD_VAR 0 1
4082: ADD
4083: ST_TO_ADDR
4084: GO 4065
4086: POP
4087: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4088: LD_INT 175
4090: PUSH
4091: LD_INT 140
4093: PUSH
4094: LD_INT 105
4096: PUSH
4097: LD_INT 70
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_OWVAR 67
4110: ARRAY
4111: PPUSH
4112: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 1
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 25
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: ST_TO_ADDR
// if not mech then
4161: LD_VAR 0 3
4165: NOT
4166: IFFALSE 4170
// exit ;
4168: GO 4218
// ComExitBuilding ( mech ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: CALL_OW 122
// wait ( 0 0$1 ) ;
4179: LD_INT 35
4181: PPUSH
4182: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 1
4193: ARRAY
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4202: LD_VAR 0 3
4206: PUSH
4207: LD_INT 2
4209: ARRAY
4210: PPUSH
4211: LD_INT 4
4213: PPUSH
4214: CALL_OW 180
// end ;
4218: PPOPN 3
4220: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4221: LD_INT 1
4223: PPUSH
4224: LD_INT 5
4226: PPUSH
4227: CALL_OW 292
4231: IFTRUE 4245
4233: PUSH
4234: LD_INT 1
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: CALL_OW 292
4244: OR
4245: IFFALSE 4329
4247: GO 4249
4249: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4250: LD_INT 5
4252: PUSH
4253: LD_INT 4
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 85
// if IsOK ( Bobby ) then
4264: LD_EXP 2
4268: PPUSH
4269: CALL_OW 302
4273: IFFALSE 4309
// begin DialogueOn ;
4275: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4279: LD_EXP 2
4283: PPUSH
4284: LD_STRING DX2-Bobby-1
4286: PPUSH
4287: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4291: LD_EXP 1
4295: PPUSH
4296: LD_STRING DX2-JMM-1a
4298: PPUSH
4299: CALL_OW 88
// DialogueOff ;
4303: CALL_OW 7
// end else
4307: GO 4329
// begin DialogueOn ;
4309: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4313: LD_EXP 1
4317: PPUSH
4318: LD_STRING DX2-JMM-1
4320: PPUSH
4321: CALL_OW 88
// DialogueOff ;
4325: CALL_OW 7
// end ; end ;
4329: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4330: LD_INT 22
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 23
4342: PUSH
4343: LD_INT 3
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 21
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 34
4362: PUSH
4363: LD_INT 42
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: IFFALSE 4801
4382: GO 4384
4384: DISABLE
4385: LD_INT 0
4387: PPUSH
4388: PPUSH
4389: PPUSH
4390: PPUSH
4391: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4392: LD_ADDR_VAR 0 1
4396: PUSH
4397: LD_INT 22
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: LD_INT 23
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 34
4429: PUSH
4430: LD_INT 42
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 69
4447: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4448: LD_ADDR_VAR 0 3
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 26
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 1
4497: PUSH
4498: LD_EXP 3
4502: PUSH
4503: LD_EXP 2
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: DIFF
4513: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4514: LD_ADDR_VAR 0 4
4518: PUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 21
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 26
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 69
4558: PUSH
4559: LD_EXP 4
4563: PUSH
4564: EMPTY
4565: LIST
4566: DIFF
4567: ST_TO_ADDR
// if not tmp then
4568: LD_VAR 0 1
4572: NOT
4573: IFFALSE 4577
// exit ;
4575: GO 4801
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4577: LD_ADDR_VAR 0 2
4581: PUSH
4582: LD_VAR 0 1
4586: PUSH
4587: LD_INT 1
4589: ARRAY
4590: PPUSH
4591: CALL_OW 311
4595: ST_TO_ADDR
// if not speaker then
4596: LD_VAR 0 2
4600: NOT
4601: IFFALSE 4605
// exit ;
4603: GO 4801
// DialogueOn ;
4605: CALL_OW 6
// if speaker = JMM then
4609: LD_VAR 0 2
4613: PUSH
4614: LD_EXP 1
4618: EQUAL
4619: IFFALSE 4653
// begin if Lisa then
4621: LD_EXP 4
4625: IFFALSE 4639
// Say ( Lisa , DX2b-Lisa-1 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_STRING DX2b-Lisa-1
4634: PPUSH
4635: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4639: LD_EXP 1
4643: PPUSH
4644: LD_STRING DX2b-JMM-1
4646: PPUSH
4647: CALL_OW 88
// end else
4651: GO 4797
// begin Say ( JMM , DX2a-JMM-1 ) ;
4653: LD_EXP 1
4657: PPUSH
4658: LD_STRING DX2a-JMM-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Bobby then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 2
4674: EQUAL
4675: IFFALSE 4689
// Say ( Bobby , DX2a-Bobby-1 ) ;
4677: LD_EXP 2
4681: PPUSH
4682: LD_STRING DX2a-Bobby-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Cyrus then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 3
4698: EQUAL
4699: IFFALSE 4713
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4701: LD_EXP 3
4705: PPUSH
4706: LD_STRING DX2a-Cyrus-1
4708: PPUSH
4709: CALL_OW 88
// if speaker = Lisa then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_EXP 4
4722: EQUAL
4723: IFFALSE 4737
// Say ( Lisa , DX2a-Lisa-1 ) ;
4725: LD_EXP 4
4729: PPUSH
4730: LD_STRING DX2a-Lisa-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp1 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 3
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-Sol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-Sol1-1
4756: PPUSH
4757: CALL_OW 88
// if speaker in temp2 then
4761: LD_VAR 0 2
4765: PUSH
4766: LD_VAR 0 4
4770: IN
4771: IFFALSE 4785
// Say ( speaker , DX2a-FSol1-1 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_STRING DX2a-FSol1-1
4780: PPUSH
4781: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4785: LD_EXP 1
4789: PPUSH
4790: LD_STRING DX2a-JMM-2
4792: PPUSH
4793: CALL_OW 88
// end ; DialogueOff ;
4797: CALL_OW 7
// end ;
4801: PPOPN 5
4803: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 255
4811: PUSH
4812: LD_INT 1
4814: EQUAL
4815: IFTRUE 4830
4817: PUSH
4818: LD_INT 10
4820: PPUSH
4821: CALL_OW 255
4825: PUSH
4826: LD_INT 1
4828: EQUAL
4829: OR
4830: IFFALSE 4890
4832: GO 4834
4834: DISABLE
// begin DialogueOn ;
4835: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4839: LD_EXP 1
4843: PPUSH
4844: LD_STRING D3-JMM-1
4846: PPUSH
4847: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4851: LD_EXP 9
4855: PPUSH
4856: LD_STRING D3-Pow-1
4858: PPUSH
4859: CALL_OW 586
// if IsOK ( Cyrus ) then
4863: LD_EXP 3
4867: PPUSH
4868: CALL_OW 302
4872: IFFALSE 4886
// Say ( Cyrus , D3-Cyrus-1 ) ;
4874: LD_EXP 3
4878: PPUSH
4879: LD_STRING D3-Cyrus-1
4881: PPUSH
4882: CALL_OW 88
// DialogueOff ;
4886: CALL_OW 7
// end ;
4890: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4891: LD_INT 1
4893: PPUSH
4894: CALL_OW 255
4898: PUSH
4899: LD_INT 1
4901: EQUAL
4902: IFFALSE 4917
4904: PUSH
4905: LD_INT 10
4907: PPUSH
4908: CALL_OW 255
4912: PUSH
4913: LD_INT 1
4915: EQUAL
4916: AND
4917: IFFALSE 4928
4919: PUSH
4920: LD_INT 1
4922: PPUSH
4923: CALL_OW 302
4927: AND
4928: IFFALSE 4939
4930: PUSH
4931: LD_INT 10
4933: PPUSH
4934: CALL_OW 302
4938: AND
4939: IFFALSE 6331
4941: GO 4943
4943: DISABLE
4944: LD_INT 0
4946: PPUSH
4947: PPUSH
4948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PPUSH
4978: CALL_OW 69
4982: ST_TO_ADDR
// if tmp then
4983: LD_VAR 0 2
4987: IFFALSE 5048
// begin for i in tmp do
4989: LD_ADDR_VAR 0 3
4993: PUSH
4994: LD_VAR 0 2
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5046
// begin if IsInUnit ( i ) then
5002: LD_VAR 0 3
5006: PPUSH
5007: CALL_OW 310
5011: IFFALSE 5022
// ComExitBuilding ( i ) ;
5013: LD_VAR 0 3
5017: PPUSH
5018: CALL_OW 122
// wait ( 0 0$1 ) ;
5022: LD_INT 35
5024: PPUSH
5025: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_INT 54
5036: PPUSH
5037: LD_INT 17
5039: PPUSH
5040: CALL_OW 174
// end ;
5044: GO 4999
5046: POP
5047: POP
// end ; wait ( 0 0$03 ) ;
5048: LD_INT 105
5050: PPUSH
5051: CALL_OW 67
// DialogueOn ;
5055: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D3a-JMM-1
5066: PPUSH
5067: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5071: LD_EXP 9
5075: PPUSH
5076: LD_STRING D3a-Pow-1
5078: PPUSH
5079: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5083: LD_EXP 1
5087: PPUSH
5088: LD_STRING D3a-JMM-2
5090: PPUSH
5091: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5095: LD_EXP 9
5099: PPUSH
5100: LD_STRING D3a-Pow-2
5102: PPUSH
5103: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5107: LD_EXP 1
5111: PPUSH
5112: LD_STRING D3a-JMM-3
5114: PPUSH
5115: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5119: LD_EXP 9
5123: PPUSH
5124: LD_STRING D3a-Pow-3
5126: PPUSH
5127: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5131: LD_EXP 1
5135: PPUSH
5136: LD_STRING D3a-JMM-4
5138: PPUSH
5139: CALL_OW 88
// DialogueOff ;
5143: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5147: LD_STRING M2
5149: PPUSH
5150: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5154: LD_EXP 1
5158: PPUSH
5159: LD_STRING D3b-JMM-1
5161: PPUSH
5162: CALL_OW 88
// Hint ( Depot2 ) ;
5166: LD_STRING Depot2
5168: PPUSH
5169: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5173: LD_INT 35
5175: PPUSH
5176: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5180: LD_INT 22
5182: PPUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 25
5195: PUSH
5196: LD_INT 2
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 70
5211: IFFALSE 5244
5213: PUSH
5214: LD_INT 22
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 21
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: NOT
5243: AND
5244: IFFALSE 5173
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5246: LD_ADDR_VAR 0 1
5250: PUSH
5251: LD_INT 22
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 23
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 25
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 50
5283: PUSH
5284: EMPTY
5285: LIST
5286: PUSH
5287: LD_INT 56
5289: PUSH
5290: EMPTY
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: PUSH
5305: LD_EXP 1
5309: PUSH
5310: LD_EXP 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: DIFF
5319: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5320: LD_INT 35
5322: PPUSH
5323: CALL_OW 67
// until temp > 0 ;
5327: LD_VAR 0 1
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5246
// wait ( 0 0$5 ) ;
5337: LD_INT 175
5339: PPUSH
5340: CALL_OW 67
// PrepareRussianHeroes ;
5344: CALL 12098 0 0
// InGameOn ;
5348: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5352: LD_EXP 8
5356: PPUSH
5357: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5361: LD_EXP 1
5365: PUSH
5366: LD_VAR 0 1
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PPUSH
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5388: LD_EXP 8
5392: PPUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 119
// wait ( 0 0$02 ) ;
5406: LD_INT 70
5408: PPUSH
5409: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5413: LD_EXP 8
5417: PPUSH
5418: LD_STRING D4-Mikh-1
5420: PPUSH
5421: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5425: LD_VAR 0 1
5429: PUSH
5430: LD_INT 1
5432: ARRAY
5433: PPUSH
5434: CALL_OW 258
5438: PUSH
5439: LD_INT 1
5441: EQUAL
5442: IFFALSE 5460
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5444: LD_VAR 0 1
5448: PUSH
5449: LD_INT 1
5451: ARRAY
5452: PPUSH
5453: LD_STRING D4-Sol1-1
5455: PPUSH
5456: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5460: LD_VAR 0 1
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PPUSH
5469: CALL_OW 258
5473: PUSH
5474: LD_INT 2
5476: EQUAL
5477: IFFALSE 5495
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5479: LD_VAR 0 1
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: PPUSH
5488: LD_STRING D4-FSol1-1
5490: PPUSH
5491: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5495: LD_EXP 8
5499: PPUSH
5500: LD_STRING D4-Mikh-2
5502: PPUSH
5503: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5507: LD_VAR 0 1
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: CALL_OW 258
5520: PUSH
5521: LD_INT 1
5523: EQUAL
5524: IFFALSE 5542
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5526: LD_VAR 0 1
5530: PUSH
5531: LD_INT 1
5533: ARRAY
5534: PPUSH
5535: LD_STRING D4-Sol1-2
5537: PPUSH
5538: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5542: LD_VAR 0 1
5546: PUSH
5547: LD_INT 1
5549: ARRAY
5550: PPUSH
5551: CALL_OW 258
5555: PUSH
5556: LD_INT 2
5558: EQUAL
5559: IFFALSE 5577
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5561: LD_VAR 0 1
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: LD_STRING D4-FSol1-2
5572: PPUSH
5573: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5577: LD_EXP 8
5581: PPUSH
5582: LD_STRING D4-Mikh-3
5584: PPUSH
5585: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 258
5602: PUSH
5603: LD_INT 1
5605: EQUAL
5606: IFFALSE 5624
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5608: LD_VAR 0 1
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PPUSH
5617: LD_STRING D4-Sol1-3
5619: PPUSH
5620: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5624: LD_VAR 0 1
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 258
5637: PUSH
5638: LD_INT 2
5640: EQUAL
5641: IFFALSE 5659
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5643: LD_VAR 0 1
5647: PUSH
5648: LD_INT 1
5650: ARRAY
5651: PPUSH
5652: LD_STRING D4-FSol1-3
5654: PPUSH
5655: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5659: LD_EXP 8
5663: PPUSH
5664: LD_STRING D4-Mikh-4
5666: PPUSH
5667: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5671: LD_STRING Qs1
5673: PPUSH
5674: CALL_OW 97
5678: PUSH
5679: LD_INT 1
5681: DOUBLE
5682: EQUAL
5683: IFTRUE 5687
5685: GO 5722
5687: POP
// begin InGameOff ;
5688: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5692: LD_INT 1
5694: PPUSH
5695: LD_INT 6
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5708: LD_EXP 8
5712: PPUSH
5713: LD_INT 17
5715: PPUSH
5716: CALL_OW 113
// end ; 2 :
5720: GO 6315
5722: LD_INT 2
5724: DOUBLE
5725: EQUAL
5726: IFTRUE 5730
5728: GO 6280
5730: POP
// begin repeat wait ( 0 0$1 ) ;
5731: LD_INT 35
5733: PPUSH
5734: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5738: LD_VAR 0 1
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5751: LD_VAR 0 1
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PPUSH
5760: LD_EXP 1
5764: PPUSH
5765: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_EXP 8
5792: PPUSH
5793: CALL_OW 296
5797: PUSH
5798: LD_INT 5
5800: LESS
5801: IFFALSE 5731
// ComTurnUnit ( Mikhail , JMM ) ;
5803: LD_EXP 8
5807: PPUSH
5808: LD_EXP 1
5812: PPUSH
5813: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5817: LD_EXP 1
5821: PPUSH
5822: LD_STRING D4b-JMM-1
5824: PPUSH
5825: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5829: LD_EXP 8
5833: PPUSH
5834: LD_STRING D4b-Mikh-1
5836: PPUSH
5837: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5841: LD_EXP 1
5845: PPUSH
5846: LD_STRING D4b-JMM-2
5848: PPUSH
5849: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5853: LD_EXP 8
5857: PPUSH
5858: LD_STRING D4b-Mikh-2
5860: PPUSH
5861: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5865: LD_EXP 1
5869: PPUSH
5870: LD_STRING D4b-JMM-3
5872: PPUSH
5873: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5877: LD_EXP 8
5881: PPUSH
5882: LD_STRING D4b-Mikh-3
5884: PPUSH
5885: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5889: LD_EXP 1
5893: PPUSH
5894: LD_STRING D4b-JMM-4
5896: PPUSH
5897: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5901: LD_EXP 8
5905: PPUSH
5906: LD_STRING D4b-Mikh-4
5908: PPUSH
5909: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5913: LD_EXP 1
5917: PPUSH
5918: LD_STRING D4b-JMM-5
5920: PPUSH
5921: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5925: LD_EXP 8
5929: PPUSH
5930: LD_STRING D4b-Mikh-5
5932: PPUSH
5933: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5937: LD_EXP 1
5941: PPUSH
5942: LD_STRING D4b-JMM-6
5944: PPUSH
5945: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5949: LD_EXP 8
5953: PPUSH
5954: LD_STRING D4b-Mikh-6
5956: PPUSH
5957: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5961: LD_EXP 1
5965: PPUSH
5966: LD_STRING D4b-JMM-7
5968: PPUSH
5969: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5973: LD_EXP 8
5977: PPUSH
5978: LD_STRING D4b-Mikh-7
5980: PPUSH
5981: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5985: LD_VAR 0 1
5989: PUSH
5990: LD_INT 1
5992: ARRAY
5993: PPUSH
5994: CALL_OW 258
5998: PUSH
5999: LD_INT 1
6001: EQUAL
6002: IFFALSE 6020
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6004: LD_VAR 0 1
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_STRING D4b-Sol1-7
6015: PPUSH
6016: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6020: LD_VAR 0 1
6024: PUSH
6025: LD_INT 1
6027: ARRAY
6028: PPUSH
6029: CALL_OW 258
6033: PUSH
6034: LD_INT 2
6036: EQUAL
6037: IFFALSE 6055
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6039: LD_VAR 0 1
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_STRING D4b-FSol1-7
6050: PPUSH
6051: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D4b-JMM-8
6062: PPUSH
6063: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6067: LD_VAR 0 1
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PPUSH
6076: CALL_OW 258
6080: PUSH
6081: LD_INT 1
6083: EQUAL
6084: IFFALSE 6102
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6086: LD_VAR 0 1
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_STRING D4b-Sol1-8
6097: PPUSH
6098: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6102: LD_VAR 0 1
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: CALL_OW 258
6115: PUSH
6116: LD_INT 2
6118: EQUAL
6119: IFFALSE 6137
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6121: LD_VAR 0 1
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PPUSH
6130: LD_STRING D4b-FSol1-8
6132: PPUSH
6133: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D4b-JMM-9
6144: PPUSH
6145: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6149: LD_EXP 8
6153: PPUSH
6154: LD_INT 1
6156: PPUSH
6157: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: PPUSH
6179: CALL_OW 69
6183: PUSH
6184: FOR_IN
6185: IFFALSE 6198
// ComFree ( i ) ;
6187: LD_VAR 0 3
6191: PPUSH
6192: CALL_OW 139
6196: GO 6184
6198: POP
6199: POP
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6216: LD_EXP 8
6220: PUSH
6221: LD_VAR 0 1
6225: PUSH
6226: LD_INT 1
6228: ARRAY
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_INT 1
6236: PPUSH
6237: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6241: LD_EXP 8
6245: PPUSH
6246: CALL_OW 310
6250: IFFALSE 6200
// mikhailDepot = IsInUnit ( Mikhail ) ;
6252: LD_ADDR_EXP 23
6256: PUSH
6257: LD_EXP 8
6261: PPUSH
6262: CALL_OW 310
6266: ST_TO_ADDR
// InGameOff ;
6267: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6271: LD_STRING M3
6273: PPUSH
6274: CALL_OW 337
// end ; 3 :
6278: GO 6315
6280: LD_INT 3
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6314
6288: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6289: LD_EXP 8
6293: PPUSH
6294: LD_INT 17
6296: PPUSH
6297: CALL_OW 113
// wait ( 0 0$3 ) ;
6301: LD_INT 105
6303: PPUSH
6304: CALL_OW 67
// InGameOff ;
6308: CALL_OW 9
// end ; end ;
6312: GO 6315
6314: POP
// PrepareTigers ;
6315: CALL 15611 0 0
// RussianTrap ;
6319: CALL 10421 0 0
// tigersRespawn := true ;
6323: LD_ADDR_EXP 30
6327: PUSH
6328: LD_INT 1
6330: ST_TO_ADDR
// end ;
6331: PPOPN 3
6333: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6334: LD_INT 1
6336: PPUSH
6337: CALL_OW 255
6341: PUSH
6342: LD_INT 1
6344: EQUAL
6345: IFFALSE 6360
6347: PUSH
6348: LD_INT 10
6350: PPUSH
6351: CALL_OW 255
6355: PUSH
6356: LD_INT 1
6358: EQUAL
6359: AND
6360: IFFALSE 6383
6362: PUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 274
6370: PPUSH
6371: LD_INT 1
6373: PPUSH
6374: CALL_OW 275
6378: PUSH
6379: LD_INT 100
6381: GREATEREQUAL
6382: AND
6383: IFFALSE 6532
6385: GO 6387
6387: DISABLE
6388: LD_INT 0
6390: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6391: LD_INT 2100
6393: PPUSH
6394: LD_INT 4200
6396: PPUSH
6397: CALL_OW 12
6401: PUSH
6402: LD_INT 1050
6404: PLUS
6405: PPUSH
6406: CALL_OW 67
// PrepareCargoBays ;
6410: CALL 13281 0 0
// cargoRespawn = 1 ;
6414: LD_ADDR_EXP 28
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_EXP 15
6431: PUSH
6432: LD_EXP 16
6436: PUSH
6437: LD_EXP 17
6441: PUSH
6442: LD_EXP 18
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6453: LD_VAR 0 1
6457: PPUSH
6458: LD_INT 17
6460: PPUSH
6461: LD_INT 10
6463: PPUSH
6464: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_INT 36
6475: PPUSH
6476: LD_INT 13
6478: PPUSH
6479: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6483: LD_VAR 0 1
6487: PPUSH
6488: LD_INT 40
6490: PPUSH
6491: LD_INT 20
6493: PPUSH
6494: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 53
6505: PPUSH
6506: LD_INT 16
6508: PPUSH
6509: CALL_OW 171
// wait ( 0 0$5 ) ;
6513: LD_INT 175
6515: PPUSH
6516: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6520: LD_EXP 17
6524: PPUSH
6525: LD_STRING D5-Rus2-1
6527: PPUSH
6528: CALL_OW 88
// end ;
6532: PPOPN 1
6534: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6535: LD_EXP 28
6539: PUSH
6540: LD_INT 1
6542: EQUAL
6543: IFFALSE 6700
6545: GO 6547
6547: DISABLE
6548: LD_INT 0
6550: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 34
6578: PUSH
6579: LD_INT 51
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6596: LD_INT 105
6598: PPUSH
6599: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6603: LD_VAR 0 1
6607: PPUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 60
6613: PUSH
6614: EMPTY
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 72
6625: IFTRUE 6655
6627: PUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 980
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: CALL_OW 72
6654: OR
6655: IFFALSE 6596
// ComMoveXY ( cargos , 7 , 9 ) ;
6657: LD_VAR 0 1
6661: PPUSH
6662: LD_INT 7
6664: PPUSH
6665: LD_INT 9
6667: PPUSH
6668: CALL_OW 111
// cargoSee = 1 ;
6672: LD_ADDR_EXP 29
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// cargoEscape = 1 ;
6680: LD_ADDR_EXP 20
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6688: LD_EXP 17
6692: PPUSH
6693: LD_STRING D5-Rus2-1a
6695: PPUSH
6696: CALL_OW 88
// end ;
6700: PPOPN 1
6702: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6703: LD_EXP 20
6707: IFFALSE 6756
6709: PUSH
6710: LD_EXP 15
6714: PUSH
6715: LD_EXP 16
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: LD_INT 50
6726: PUSH
6727: EMPTY
6728: LIST
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_INT 3
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 52
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: PPUSH
6751: CALL_OW 72
6755: AND
6756: IFFALSE 7093
6758: GO 6760
6760: DISABLE
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
6766: PPUSH
// begin enable ;
6767: ENABLE
// for i in [ cargo1 , cargo2 ] do
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_EXP 15
6777: PUSH
6778: LD_EXP 16
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: FOR_IN
6788: IFFALSE 7091
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_VAR 0 2
6799: PPUSH
6800: CALL_OW 250
6804: PPUSH
6805: LD_VAR 0 2
6809: PPUSH
6810: CALL_OW 251
6814: PPUSH
6815: LD_INT 6
6817: PPUSH
6818: CALL 80027 0 3
6822: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6823: LD_VAR 0 1
6827: IFFALSE 6848
6829: PUSH
6830: LD_VAR 0 2
6834: PPUSH
6835: CALL 81258 0 1
6839: PUSH
6840: LD_INT 4
6842: ARRAY
6843: PUSH
6844: LD_INT 60
6846: LESS
6847: AND
6848: IFFALSE 6887
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_VAR 0 1
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: PUSH
6864: LD_INT 1
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 1
6875: ARRAY
6876: PUSH
6877: LD_INT 2
6879: ARRAY
6880: PPUSH
6881: CALL_OW 117
6885: GO 7089
// if not IsInArea ( i , RemoveArea ) then
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_INT 32
6894: PPUSH
6895: CALL_OW 308
6899: NOT
6900: IFFALSE 7050
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL_OW 250
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: LD_INT 3
6922: PPUSH
6923: CALL_OW 272
6927: ST_TO_ADDR
// y := GetY ( i ) ;
6928: LD_ADDR_VAR 0 4
6932: PUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: CALL_OW 251
6942: ST_TO_ADDR
// if HexInfo ( x , y ) then
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 428
6957: IFFALSE 6980
// x := ShiftX ( x , 4 , 3 ) ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: LD_VAR 0 3
6968: PPUSH
6969: LD_INT 4
6971: PPUSH
6972: LD_INT 3
6974: PPUSH
6975: CALL_OW 272
6979: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_VAR 0 4
6989: PPUSH
6990: CALL_OW 428
6994: IFTRUE 7013
6996: PUSH
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 488
7011: NOT
7012: OR
7013: IFFALSE 7029
// ComMoveToArea ( i , RemoveArea ) else
7015: LD_VAR 0 2
7019: PPUSH
7020: LD_INT 32
7022: PPUSH
7023: CALL_OW 113
7027: GO 7048
// ComMoveXY ( i , x , y ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: LD_VAR 0 4
7043: PPUSH
7044: CALL_OW 111
// end else
7048: GO 7089
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: CALL_OW 311
7059: PPUSH
7060: CALL_OW 64
// RemoveUnit ( i ) ;
7064: LD_VAR 0 2
7068: PPUSH
7069: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7073: LD_ADDR_EXP 20
7077: PUSH
7078: LD_EXP 20
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ST_TO_ADDR
// continue ;
7087: GO 6787
// end ; end ;
7089: GO 6787
7091: POP
7092: POP
// end ;
7093: PPOPN 4
7095: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7096: LD_EXP 20
7100: PUSH
7101: LD_INT 1
7103: GREATER
7104: IFFALSE 7353
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7112: LD_INT 4
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7125: LD_INT 31
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL_OW 324
// Hint ( Bunker ) ;
7138: LD_STRING Bunker
7140: PPUSH
7141: CALL_OW 339
// if IsOK ( Jerry ) then
7145: LD_EXP 7
7149: PPUSH
7150: CALL_OW 302
7154: IFFALSE 7170
// Say ( Jerry , D5a-Sol1-1 ) else
7156: LD_EXP 7
7160: PPUSH
7161: LD_STRING D5a-Sol1-1
7163: PPUSH
7164: CALL_OW 88
7168: GO 7256
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 1
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 26
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PUSH
7204: LD_EXP 1
7208: PUSH
7209: LD_EXP 2
7213: PUSH
7214: LD_EXP 3
7218: PUSH
7219: LD_EXP 5
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: DIFF
7230: ST_TO_ADDR
// if not speaker then
7231: LD_VAR 0 1
7235: NOT
7236: IFFALSE 7240
// exit ;
7238: GO 7353
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7240: LD_VAR 0 1
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: PPUSH
7249: LD_STRING D5a-Sol1-1
7251: PPUSH
7252: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7256: LD_EXP 1
7260: PPUSH
7261: LD_STRING D5a-JMM-1
7263: PPUSH
7264: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7268: LD_INT 22
7270: PPUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 25
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: IFFALSE 7353
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7301: LD_INT 22
7303: PPUSH
7304: LD_INT 22
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: PUSH
7333: LD_INT 1
7335: ARRAY
7336: PPUSH
7337: LD_INT 31
7339: PPUSH
7340: LD_INT 44
7342: PPUSH
7343: LD_INT 13
7345: PPUSH
7346: LD_INT 1
7348: PPUSH
7349: CALL_OW 145
// end ;
7353: PPOPN 1
7355: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7356: LD_INT 1
7358: PPUSH
7359: CALL_OW 255
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7382
7369: PUSH
7370: LD_INT 1
7372: PPUSH
7373: CALL_OW 256
7377: PUSH
7378: LD_INT 1000
7380: LESS
7381: AND
7382: IFTRUE 7412
7384: PUSH
7385: LD_INT 10
7387: PPUSH
7388: CALL_OW 255
7392: PUSH
7393: LD_INT 3
7395: EQUAL
7396: IFFALSE 7411
7398: PUSH
7399: LD_INT 10
7401: PPUSH
7402: CALL_OW 256
7406: PUSH
7407: LD_INT 1000
7409: LESS
7410: AND
7411: OR
7412: IFFALSE 7429
7414: GO 7416
7416: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7417: LD_EXP 1
7421: PPUSH
7422: LD_STRING D8-JMM-1
7424: PPUSH
7425: CALL_OW 88
7429: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7430: LD_EXP 8
7434: PPUSH
7435: CALL_OW 310
7439: PUSH
7440: LD_INT 1
7442: EQUAL
7443: IFFALSE 7456
7445: PUSH
7446: LD_EXP 22
7450: PUSH
7451: LD_INT 3
7453: EQUAL
7454: NOT
7455: AND
7456: IFFALSE 7478
7458: GO 7460
7460: DISABLE
// begin enable ;
7461: ENABLE
// mikhailInBase = 1 ;
7462: LD_ADDR_EXP 22
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// mikhailStatus = 1 ;
7470: LD_ADDR_EXP 21
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// end ;
7478: END
// export function AskMikhail ; begin
7479: LD_INT 0
7481: PPUSH
// case Query ( QMikh2 ) of 1 :
7482: LD_STRING QMikh2
7484: PPUSH
7485: CALL_OW 97
7489: PUSH
7490: LD_INT 1
7492: DOUBLE
7493: EQUAL
7494: IFTRUE 7498
7496: GO 7565
7498: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7499: LD_INT 1
7501: PPUSH
7502: LD_INT 6
7504: PPUSH
7505: LD_INT 2
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7515: LD_EXP 8
7519: PPUSH
7520: LD_INT 6
7522: PPUSH
7523: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7527: LD_EXP 8
7531: PPUSH
7532: CALL_OW 122
// wait ( 0 0$1 ) ;
7536: LD_INT 35
7538: PPUSH
7539: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7543: LD_EXP 8
7547: PPUSH
7548: LD_INT 17
7550: PPUSH
7551: CALL_OW 113
// mikhailInbase = 0 ;
7555: LD_ADDR_EXP 22
7559: PUSH
7560: LD_INT 0
7562: ST_TO_ADDR
// end ; 2 :
7563: GO 7806
7565: LD_INT 2
7567: DOUBLE
7568: EQUAL
7569: IFTRUE 7573
7571: GO 7746
7573: POP
// begin mikhailInBase = 2 ;
7574: LD_ADDR_EXP 22
7578: PUSH
7579: LD_INT 2
7581: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7582: LD_EXP 8
7586: PPUSH
7587: LD_INT 6
7589: PPUSH
7590: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7594: LD_EXP 8
7598: PPUSH
7599: CALL_OW 122
// wait ( 0 0$1 ) ;
7603: LD_INT 35
7605: PPUSH
7606: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7610: LD_EXP 8
7614: PPUSH
7615: LD_EXP 8
7619: PPUSH
7620: CALL_OW 250
7624: PUSH
7625: LD_INT 2
7627: PLUS
7628: PPUSH
7629: LD_EXP 8
7633: PPUSH
7634: CALL_OW 251
7638: PUSH
7639: LD_INT 2
7641: PLUS
7642: PPUSH
7643: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7647: LD_EXP 8
7651: PPUSH
7652: LD_EXP 8
7656: PPUSH
7657: CALL_OW 250
7661: PUSH
7662: LD_INT 1
7664: PLUS
7665: PPUSH
7666: LD_EXP 8
7670: PPUSH
7671: CALL_OW 251
7675: PUSH
7676: LD_INT 2
7678: PLUS
7679: PPUSH
7680: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7684: LD_EXP 8
7688: PPUSH
7689: LD_EXP 8
7693: PPUSH
7694: CALL_OW 250
7698: PUSH
7699: LD_INT 2
7701: PLUS
7702: PPUSH
7703: LD_EXP 8
7707: PPUSH
7708: CALL_OW 251
7712: PPUSH
7713: CALL_OW 171
// wait ( 0 0$5 ) ;
7717: LD_INT 175
7719: PPUSH
7720: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7724: LD_EXP 8
7728: PPUSH
7729: LD_INT 25
7731: PPUSH
7732: CALL_OW 113
// mikhailInBase = 4 ;
7736: LD_ADDR_EXP 22
7740: PUSH
7741: LD_INT 4
7743: ST_TO_ADDR
// end ; 3 :
7744: GO 7806
7746: LD_INT 3
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7805
7754: POP
// begin SetSide ( Mikhail , 6 ) ;
7755: LD_EXP 8
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7767: LD_EXP 8
7771: PPUSH
7772: CALL_OW 122
// wait ( 0 0$1 ) ;
7776: LD_INT 35
7778: PPUSH
7779: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7783: LD_EXP 8
7787: PPUSH
7788: LD_INT 17
7790: PPUSH
7791: CALL_OW 113
// mikhailInbase = 3 ;
7795: LD_ADDR_EXP 22
7799: PUSH
7800: LD_INT 3
7802: ST_TO_ADDR
// end ; end ;
7803: GO 7806
7805: POP
// end ;
7806: LD_VAR 0 1
7810: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7811: LD_EXP 8
7815: PPUSH
7816: LD_INT 25
7818: PPUSH
7819: CALL_OW 308
7823: IFFALSE 7835
7825: PUSH
7826: LD_EXP 22
7830: PUSH
7831: LD_INT 4
7833: EQUAL
7834: AND
7835: IFFALSE 7939
7837: GO 7839
7839: DISABLE
// begin enable ;
7840: ENABLE
// mikhailInBase = 1 ;
7841: LD_ADDR_EXP 22
7845: PUSH
7846: LD_INT 1
7848: ST_TO_ADDR
// InGameOn ;
7849: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7853: LD_INT 1
7855: PPUSH
7856: LD_INT 6
7858: PPUSH
7859: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7863: LD_INT 35
7865: PPUSH
7866: CALL_OW 67
// if Carry ( Mikhail ) then
7870: LD_EXP 8
7874: PPUSH
7875: CALL_OW 281
7879: IFFALSE 7890
// ComUnload ( Mikhail ) ;
7881: LD_EXP 8
7885: PPUSH
7886: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7890: LD_EXP 8
7894: PPUSH
7895: LD_INT 1
7897: PPUSH
7898: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7902: LD_EXP 8
7906: PPUSH
7907: CALL_OW 310
7911: IFFALSE 7863
// SetSide ( dep1 , 1 ) ;
7913: LD_INT 1
7915: PPUSH
7916: LD_INT 1
7918: PPUSH
7919: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7923: LD_EXP 8
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: CALL_OW 235
// InGameOff ;
7935: CALL_OW 9
// end ;
7939: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7940: LD_EXP 8
7944: PPUSH
7945: CALL_OW 310
7949: IFFALSE 7962
7951: PUSH
7952: LD_EXP 22
7956: PUSH
7957: LD_INT 3
7959: EQUAL
7960: NOT
7961: AND
7962: IFFALSE 8097
7964: GO 7966
7966: DISABLE
// begin enable ;
7967: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 91
7990: PUSH
7991: LD_EXP 8
7995: PPUSH
7996: CALL_OW 310
8000: PUSH
8001: LD_INT 10
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: IFFALSE 8097
// begin mikhailStatus = 4 ;
8024: LD_ADDR_EXP 21
8028: PUSH
8029: LD_INT 4
8031: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8032: LD_INT 1
8034: PPUSH
8035: LD_INT 6
8037: PPUSH
8038: LD_INT 2
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8048: LD_EXP 8
8052: PPUSH
8053: LD_INT 6
8055: PPUSH
8056: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8060: LD_EXP 8
8064: PPUSH
8065: CALL_OW 122
// wait ( 0 0$1 ) ;
8069: LD_INT 35
8071: PPUSH
8072: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8076: LD_EXP 8
8080: PPUSH
8081: LD_INT 17
8083: PPUSH
8084: CALL_OW 113
// mikhailStatus = 3 ;
8088: LD_ADDR_EXP 21
8092: PUSH
8093: LD_INT 3
8095: ST_TO_ADDR
// disable ;
8096: DISABLE
// end ; end ;
8097: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8098: LD_EXP 1
8102: PPUSH
8103: LD_EXP 23
8107: PPUSH
8108: CALL_OW 296
8112: PUSH
8113: LD_INT 5
8115: LESS
8116: IFFALSE 8128
8118: PUSH
8119: LD_EXP 21
8123: PUSH
8124: LD_INT 3
8126: EQUAL
8127: AND
8128: IFFALSE 8141
8130: PUSH
8131: LD_EXP 22
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: NOT
8140: AND
8141: IFFALSE 8374
8143: GO 8145
8145: DISABLE
8146: LD_INT 0
8148: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8149: LD_ADDR_VAR 0 1
8153: PUSH
8154: LD_INT 22
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 26
8176: PUSH
8177: LD_INT 1
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 69
8193: PUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_EXP 5
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: DIFF
8208: ST_TO_ADDR
// if not tmp then
8209: LD_VAR 0 1
8213: NOT
8214: IFFALSE 8218
// exit ;
8216: GO 8374
// DialogueOn ;
8218: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8222: LD_EXP 1
8226: PPUSH
8227: LD_STRING D7-JMM-1
8229: PPUSH
8230: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8234: LD_VAR 0 1
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: LD_STRING D7-Sol1-1
8245: PPUSH
8246: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8250: LD_EXP 1
8254: PPUSH
8255: LD_STRING D7-JMM-2
8257: PPUSH
8258: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8262: LD_VAR 0 1
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_STRING D7-Sol1-2
8273: PPUSH
8274: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8278: LD_EXP 1
8282: PPUSH
8283: LD_STRING D7-JMM-3
8285: PPUSH
8286: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8290: LD_VAR 0 1
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: PPUSH
8299: LD_STRING D7-Sol1-3
8301: PPUSH
8302: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8306: LD_EXP 3
8310: PPUSH
8311: CALL_OW 302
8315: IFFALSE 8328
8317: PUSH
8318: LD_EXP 4
8322: PPUSH
8323: CALL_OW 302
8327: AND
8328: IFFALSE 8370
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8330: LD_EXP 3
8334: PPUSH
8335: LD_STRING D7-Cyrus-3
8337: PPUSH
8338: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8342: LD_VAR 0 1
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: LD_STRING D7-Sol1-4
8353: PPUSH
8354: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8358: LD_EXP 4
8362: PPUSH
8363: LD_STRING D7-Lisa-4
8365: PPUSH
8366: CALL_OW 88
// end ; DialogueOff ;
8370: CALL_OW 7
// end ;
8374: PPOPN 1
8376: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8377: LD_EXP 8
8381: PPUSH
8382: CALL_OW 303
8386: IFFALSE 8398
8388: PUSH
8389: LD_EXP 21
8393: PUSH
8394: LD_INT 3
8396: EQUAL
8397: AND
8398: IFFALSE 8412
8400: GO 8402
8402: DISABLE
// begin enable ;
8403: ENABLE
// mikhailStatus = 2 ;
8404: LD_ADDR_EXP 21
8408: PUSH
8409: LD_INT 2
8411: ST_TO_ADDR
// end ;
8412: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8413: LD_EXP 8
8417: PPUSH
8418: LD_INT 17
8420: PPUSH
8421: CALL_OW 308
8425: IFFALSE 8442
8427: PUSH
8428: LD_EXP 8
8432: PPUSH
8433: CALL_OW 255
8437: PUSH
8438: LD_INT 6
8440: EQUAL
8441: AND
8442: IFFALSE 8475
8444: GO 8446
8446: DISABLE
// begin if not mikhailInBase = 3 then
8447: LD_EXP 22
8451: PUSH
8452: LD_INT 3
8454: EQUAL
8455: NOT
8456: IFFALSE 8466
// mikhailStatus = 3 ;
8458: LD_ADDR_EXP 21
8462: PUSH
8463: LD_INT 3
8465: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8466: LD_EXP 8
8470: PPUSH
8471: CALL_OW 64
// end ;
8475: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8476: LD_EXP 21
8480: PUSH
8481: LD_INT 3
8483: EQUAL
8484: IFFALSE 8501
8486: PUSH
8487: LD_EXP 8
8491: PPUSH
8492: CALL_OW 255
8496: PUSH
8497: LD_INT 6
8499: EQUAL
8500: AND
8501: IFFALSE 8694
8503: GO 8505
8505: DISABLE
8506: LD_INT 0
8508: PPUSH
8509: PPUSH
// begin enable ;
8510: ENABLE
// if IsOk ( Mikhail ) then
8511: LD_EXP 8
8515: PPUSH
8516: CALL_OW 302
8520: IFFALSE 8694
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8522: LD_ADDR_VAR 0 2
8526: PUSH
8527: LD_EXP 8
8531: PPUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 69
8560: PPUSH
8561: CALL 10615 0 2
8565: PUSH
8566: LD_EXP 1
8570: PUSH
8571: LD_EXP 2
8575: PUSH
8576: LD_EXP 3
8580: PUSH
8581: LD_EXP 4
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: DIFF
8592: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_EXP 8
8602: PPUSH
8603: CALL_OW 296
8607: PUSH
8608: LD_INT 10
8610: LESS
8611: IFFALSE 8694
// begin if GetSex ( attacker ) = sex_male then
8613: LD_VAR 0 2
8617: PPUSH
8618: CALL_OW 258
8622: PUSH
8623: LD_INT 1
8625: EQUAL
8626: IFFALSE 8662
// begin disable ;
8628: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_STRING D7a-Sol1-1
8636: PPUSH
8637: CALL_OW 88
// wait ( 0 0$2 ) ;
8641: LD_INT 70
8643: PPUSH
8644: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8648: LD_VAR 0 2
8652: PPUSH
8653: LD_STRING D7a-Sol1-1a
8655: PPUSH
8656: CALL_OW 88
// end else
8660: GO 8694
// begin disable ;
8662: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8663: LD_VAR 0 2
8667: PPUSH
8668: LD_STRING D7a-FSol1-1
8670: PPUSH
8671: CALL_OW 88
// wait ( 0 0$2 ) ;
8675: LD_INT 70
8677: PPUSH
8678: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8682: LD_VAR 0 2
8686: PPUSH
8687: LD_STRING D7a-FSol1-1a
8689: PPUSH
8690: CALL_OW 88
// end ; end ; end ; end ;
8694: PPOPN 2
8696: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8697: LD_EXP 27
8701: PUSH
8702: LD_INT 1
8704: EQUAL
8705: IFFALSE 8744
8707: PUSH
8708: LD_INT 22
8710: PPUSH
8711: LD_INT 22
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 21
8723: PUSH
8724: LD_INT 1
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 70
8739: PUSH
8740: LD_INT 2
8742: GREATER
8743: AND
8744: IFFALSE 8797
8746: PUSH
8747: LD_INT 22
8749: PPUSH
8750: LD_INT 22
8752: PUSH
8753: LD_INT 1
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 2
8762: PUSH
8763: LD_INT 21
8765: PUSH
8766: LD_INT 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 59
8775: PUSH
8776: EMPTY
8777: LIST
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 70
8792: PUSH
8793: LD_INT 0
8795: EQUAL
8796: AND
8797: IFFALSE 8812
8799: GO 8801
8801: DISABLE
// SetSide ( dep1 , 3 ) ;
8802: LD_INT 1
8804: PPUSH
8805: LD_INT 3
8807: PPUSH
8808: CALL_OW 235
8812: END
// export function JMMTraitor ; var i ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
// if traitor then
8817: LD_EXP 33
8821: IFFALSE 8825
// exit ;
8823: GO 8962
// traitor := true ;
8825: LD_ADDR_EXP 33
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if IsOk ( Lisa ) then
8833: LD_EXP 4
8837: PPUSH
8838: CALL_OW 302
8842: IFFALSE 8864
// begin DialogueOn ;
8844: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8848: LD_EXP 4
8852: PPUSH
8853: LD_STRING D10-Lisa-Traitor
8855: PPUSH
8856: CALL_OW 88
// DialogueOff ;
8860: CALL_OW 7
// end ; ComExit ( JMM ) ;
8864: LD_EXP 1
8868: PPUSH
8869: CALL 77917 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8873: LD_INT 1
8875: PPUSH
8876: LD_INT 4
8878: PPUSH
8879: LD_INT 2
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8889: LD_ADDR_VAR 0 2
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 69
8908: PUSH
8909: LD_EXP 1
8913: DIFF
8914: PUSH
8915: FOR_IN
8916: IFFALSE 8946
// begin SetSide ( i , 4 ) ;
8918: LD_VAR 0 2
8922: PPUSH
8923: LD_INT 4
8925: PPUSH
8926: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_EXP 1
8939: PPUSH
8940: CALL_OW 115
// end ;
8944: GO 8915
8946: POP
8947: POP
// wait ( 0 0$30 ) ;
8948: LD_INT 1050
8950: PPUSH
8951: CALL_OW 67
// YouLost ( Traitor ) ;
8955: LD_STRING Traitor
8957: PPUSH
8958: CALL_OW 104
// end ;
8962: LD_VAR 0 1
8966: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8967: LD_EXP 30
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9011
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 0
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 14
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 69
9006: PUSH
9007: LD_INT 0
9009: EQUAL
9010: AND
9011: IFFALSE 9112
9013: GO 9015
9015: DISABLE
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
9020: LD_ADDR_VAR 0 2
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 21
9037: PUSH
9038: LD_INT 1
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 23
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 69
9064: ST_TO_ADDR
// for i in tmp do
9065: LD_ADDR_VAR 0 1
9069: PUSH
9070: LD_VAR 0 2
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9103
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9078: LD_VAR 0 1
9082: PPUSH
9083: LD_INT 1
9085: PPUSH
9086: LD_INT 4
9088: PPUSH
9089: CALL_OW 12
9093: PPUSH
9094: LD_INT 300
9096: PPUSH
9097: CALL_OW 492
9101: GO 9075
9103: POP
9104: POP
// SetAchievement ( ACH_TIGER ) ;
9105: LD_STRING ACH_TIGER
9107: PPUSH
9108: CALL_OW 543
// end ;
9112: PPOPN 2
9114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9115: LD_INT 22
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 34
9127: PUSH
9128: LD_INT 51
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 69
9143: PUSH
9144: LD_INT 2
9146: GREATEREQUAL
9147: IFFALSE 9159
9149: GO 9151
9151: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9152: LD_STRING ACH_CARGO
9154: PPUSH
9155: CALL_OW 543
9159: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
9164: PPUSH
// for i = 1 to count do
9165: LD_ADDR_VAR 0 8
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_VAR 0 6
9179: PUSH
9180: FOR_TO
9181: IFFALSE 9262
// begin uc_side = side ;
9183: LD_ADDR_OWVAR 20
9187: PUSH
9188: LD_VAR 0 1
9192: ST_TO_ADDR
// uc_nation = nation ;
9193: LD_ADDR_OWVAR 21
9197: PUSH
9198: LD_VAR 0 2
9202: ST_TO_ADDR
// hc_gallery =  ;
9203: LD_ADDR_OWVAR 33
9207: PUSH
9208: LD_STRING 
9210: ST_TO_ADDR
// hc_name =  ;
9211: LD_ADDR_OWVAR 26
9215: PUSH
9216: LD_STRING 
9218: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9219: LD_INT 0
9221: PPUSH
9222: LD_VAR 0 5
9226: PPUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 380
// un = CreateHuman ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: CALL_OW 44
9245: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9246: LD_VAR 0 9
9250: PPUSH
9251: LD_VAR 0 3
9255: PPUSH
9256: CALL_OW 52
// end ;
9260: GO 9180
9262: POP
9263: POP
// end ;
9264: LD_VAR 0 7
9268: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
// uc_side := GetSide ( b ) ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_VAR 0 2
9283: PPUSH
9284: CALL_OW 255
9288: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9289: LD_ADDR_OWVAR 21
9293: PUSH
9294: LD_VAR 0 2
9298: PPUSH
9299: CALL_OW 248
9303: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9304: LD_INT 0
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 380
// un = CreateHuman ;
9319: LD_ADDR_VAR 0 4
9323: PUSH
9324: CALL_OW 44
9328: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9329: LD_ADDR_VAR 0 5
9333: PUSH
9334: LD_VAR 0 2
9338: PPUSH
9339: CALL_OW 254
9343: PUSH
9344: LD_INT 3
9346: MINUS
9347: ST_TO_ADDR
// if dir < 0 then
9348: LD_VAR 0 5
9352: PUSH
9353: LD_INT 0
9355: LESS
9356: IFFALSE 9372
// dir := 6 + dir ;
9358: LD_ADDR_VAR 0 5
9362: PUSH
9363: LD_INT 6
9365: PUSH
9366: LD_VAR 0 5
9370: PLUS
9371: ST_TO_ADDR
// SetDir ( un , dir ) ;
9372: LD_VAR 0 4
9376: PPUSH
9377: LD_VAR 0 5
9381: PPUSH
9382: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9386: LD_VAR 0 4
9390: PPUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: CALL_OW 52
// end ;
9400: LD_VAR 0 3
9404: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9411: LD_ADDR_VAR 0 7
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_VAR 0 1
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 25
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 24
9440: PUSH
9441: LD_INT 1000
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 69
9457: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 3
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_VAR 0 1
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 1000
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: PUSH
9512: EMPTY
9513: LIST
9514: PPUSH
9515: CALL_OW 70
9519: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9520: LD_VAR 0 5
9524: NOT
9525: IFFALSE 9534
9527: PUSH
9528: LD_VAR 0 7
9532: NOT
9533: AND
9534: IFFALSE 9538
// exit ;
9536: GO 9738
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9538: LD_VAR 0 5
9542: NOT
9543: IFFALSE 9569
9545: PUSH
9546: LD_VAR 0 7
9550: PPUSH
9551: LD_INT 3
9553: PUSH
9554: LD_INT 54
9556: PUSH
9557: EMPTY
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 72
9568: AND
9569: IFFALSE 9582
9571: PUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 302
9581: AND
9582: IFFALSE 9616
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9584: LD_VAR 0 7
9588: PPUSH
9589: LD_INT 3
9591: PUSH
9592: LD_INT 54
9594: PUSH
9595: EMPTY
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PPUSH
9602: CALL_OW 72
9606: PPUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: CALL_OW 120
// if buildingsList then
9616: LD_VAR 0 5
9620: IFFALSE 9738
// begin for i in engineerOkList do
9622: LD_ADDR_VAR 0 6
9626: PUSH
9627: LD_VAR 0 7
9631: PUSH
9632: FOR_IN
9633: IFFALSE 9736
// if IsInUnit ( i ) then
9635: LD_VAR 0 6
9639: PPUSH
9640: CALL_OW 310
9644: IFFALSE 9657
// ComExitBuilding ( i ) else
9646: LD_VAR 0 6
9650: PPUSH
9651: CALL_OW 122
9655: GO 9734
// if GetLives ( i ) > 650 then
9657: LD_VAR 0 6
9661: PPUSH
9662: CALL_OW 256
9666: PUSH
9667: LD_INT 650
9669: GREATER
9670: IFFALSE 9698
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9672: LD_VAR 0 6
9676: PPUSH
9677: LD_VAR 0 5
9681: PPUSH
9682: LD_VAR 0 6
9686: PPUSH
9687: CALL_OW 74
9691: PPUSH
9692: CALL_OW 130
9696: GO 9734
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9698: LD_VAR 0 6
9702: PPUSH
9703: LD_INT 56
9705: PPUSH
9706: LD_INT 10
9708: PPUSH
9709: CALL_OW 297
9713: PUSH
9714: LD_INT 8
9716: GREATER
9717: IFFALSE 9734
// ComMoveXY ( i , 56 , 10 ) ;
9719: LD_VAR 0 6
9723: PPUSH
9724: LD_INT 56
9726: PPUSH
9727: LD_INT 10
9729: PPUSH
9730: CALL_OW 111
9734: GO 9632
9736: POP
9737: POP
// end ; end ;
9738: LD_VAR 0 4
9742: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9743: LD_INT 0
9745: PPUSH
9746: PPUSH
9747: PPUSH
9748: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9749: LD_ADDR_VAR 0 6
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 24
9778: PUSH
9779: LD_INT 250
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9796: LD_ADDR_VAR 0 8
9800: PUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_INT 22
9808: PUSH
9809: LD_VAR 0 1
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 21
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 3
9830: PUSH
9831: LD_INT 24
9833: PUSH
9834: LD_INT 650
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 70
9854: ST_TO_ADDR
// if not damageUnits and not sciList then
9855: LD_VAR 0 8
9859: NOT
9860: IFFALSE 9869
9862: PUSH
9863: LD_VAR 0 6
9867: NOT
9868: AND
9869: IFFALSE 9873
// exit ;
9871: GO 10012
// if damageUnits then
9873: LD_VAR 0 8
9877: IFFALSE 9956
// begin for i in sciList do
9879: LD_ADDR_VAR 0 7
9883: PUSH
9884: LD_VAR 0 6
9888: PUSH
9889: FOR_IN
9890: IFFALSE 9952
// if IsInUnit ( i ) then
9892: LD_VAR 0 7
9896: PPUSH
9897: CALL_OW 310
9901: IFFALSE 9914
// ComExitBuilding ( i ) else
9903: LD_VAR 0 7
9907: PPUSH
9908: CALL_OW 122
9912: GO 9950
// if not HasTask ( i ) then
9914: LD_VAR 0 7
9918: PPUSH
9919: CALL_OW 314
9923: NOT
9924: IFFALSE 9950
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9926: LD_VAR 0 7
9930: PPUSH
9931: LD_VAR 0 8
9935: PPUSH
9936: LD_VAR 0 7
9940: PPUSH
9941: CALL_OW 74
9945: PPUSH
9946: CALL_OW 128
9950: GO 9889
9952: POP
9953: POP
// end else
9954: GO 10012
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9956: LD_VAR 0 6
9960: PPUSH
9961: LD_INT 3
9963: PUSH
9964: LD_INT 54
9966: PUSH
9967: EMPTY
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 72
9978: IFFALSE 10012
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9980: LD_VAR 0 6
9984: PPUSH
9985: LD_INT 3
9987: PUSH
9988: LD_INT 54
9990: PUSH
9991: EMPTY
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 72
10002: PPUSH
10003: LD_VAR 0 4
10007: PPUSH
10008: CALL_OW 120
// end ;
10012: LD_VAR 0 5
10016: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
// if not defendersList then
10023: LD_VAR 0 3
10027: NOT
10028: IFFALSE 10032
// exit ;
10030: GO 10416
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10032: LD_ADDR_VAR 0 7
10036: PUSH
10037: LD_VAR 0 1
10041: PPUSH
10042: LD_INT 22
10044: PUSH
10045: LD_VAR 0 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 21
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 21
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PPUSH
10086: CALL_OW 70
10090: ST_TO_ADDR
// if enemy then
10091: LD_VAR 0 7
10095: IFFALSE 10318
// begin for i in defendersList do
10097: LD_ADDR_VAR 0 6
10101: PUSH
10102: LD_VAR 0 3
10106: PUSH
10107: FOR_IN
10108: IFFALSE 10314
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10110: LD_VAR 0 6
10114: PPUSH
10115: CALL_OW 310
10119: IFFALSE 10136
10121: PUSH
10122: LD_VAR 0 6
10126: PPUSH
10127: CALL_OW 256
10131: PUSH
10132: LD_INT 500
10134: GREATER
10135: AND
10136: IFFALSE 10149
// ComExitBuilding ( i ) else
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 122
10147: GO 10312
// if GetLives ( i ) > 650 then
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 256
10158: PUSH
10159: LD_INT 650
10161: GREATER
10162: IFFALSE 10215
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10164: LD_ADDR_VAR 0 8
10168: PUSH
10169: LD_VAR 0 7
10173: PPUSH
10174: LD_VAR 0 6
10178: PPUSH
10179: CALL_OW 74
10183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10184: LD_VAR 0 6
10188: PPUSH
10189: LD_VAR 0 8
10193: PPUSH
10194: CALL_OW 250
10198: PPUSH
10199: LD_VAR 0 8
10203: PPUSH
10204: CALL_OW 251
10208: PPUSH
10209: CALL_OW 114
// end else
10213: GO 10312
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10215: LD_INT 22
10217: PUSH
10218: LD_INT 3
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 25
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 69
10243: IFFALSE 10283
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10245: LD_VAR 0 6
10249: PPUSH
10250: LD_INT 56
10252: PPUSH
10253: LD_INT 10
10255: PPUSH
10256: CALL_OW 297
10260: PUSH
10261: LD_INT 8
10263: GREATER
10264: IFFALSE 10281
// ComMoveXY ( i , 56 , 10 ) ;
10266: LD_VAR 0 6
10270: PPUSH
10271: LD_INT 56
10273: PPUSH
10274: LD_INT 10
10276: PPUSH
10277: CALL_OW 111
// end else
10281: GO 10312
// if GetLives ( i ) <= 500 then
10283: LD_VAR 0 6
10287: PPUSH
10288: CALL_OW 256
10292: PUSH
10293: LD_INT 500
10295: LESSEQUAL
10296: IFFALSE 10312
// ComEnterUnit ( i , building ) ;
10298: LD_VAR 0 6
10302: PPUSH
10303: LD_VAR 0 4
10307: PPUSH
10308: CALL_OW 120
// end ;
10312: GO 10107
10314: POP
10315: POP
// end else
10316: GO 10416
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_INT 56
10325: PUSH
10326: EMPTY
10327: LIST
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: LD_INT 60
10334: PUSH
10335: EMPTY
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 24
10344: PUSH
10345: LD_INT 1000
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: IFFALSE 10416
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 56
10370: PUSH
10371: EMPTY
10372: LIST
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 60
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 24
10389: PUSH
10390: LD_INT 1000
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 72
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 120
// end ;
10416: LD_VAR 0 5
10420: RET
// export function RussianTrap ; var i ; begin
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
// if GetSide ( Brian ) = 4 then
10425: LD_EXP 6
10429: PPUSH
10430: CALL_OW 255
10434: PUSH
10435: LD_INT 4
10437: EQUAL
10438: IFFALSE 10461
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10440: LD_EXP 6
10444: PUSH
10445: LD_EXP 7
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10461: LD_ADDR_VAR 0 2
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 3
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: PUSH
10495: FOR_IN
10496: IFFALSE 10608
// begin ComExitBuilding ( i ) ;
10498: LD_VAR 0 2
10502: PPUSH
10503: CALL_OW 122
// wait ( 0 0$1 ) ;
10507: LD_INT 35
10509: PPUSH
10510: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 120
10521: PPUSH
10522: LD_INT 56
10524: PPUSH
10525: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 111
10536: PPUSH
10537: LD_INT 37
10539: PPUSH
10540: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10544: LD_INT 33
10546: PPUSH
10547: CALL_OW 255
10551: PUSH
10552: LD_INT 3
10554: EQUAL
10555: IFFALSE 10566
10557: PUSH
10558: LD_INT 33
10560: PPUSH
10561: CALL_OW 302
10565: AND
10566: IFFALSE 10582
// AddComEnterUnit ( i , arm2 ) else
10568: LD_VAR 0 2
10572: PPUSH
10573: LD_INT 33
10575: PPUSH
10576: CALL_OW 180
10580: GO 10606
// begin AddComCrawl ( i ) ;
10582: LD_VAR 0 2
10586: PPUSH
10587: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10591: LD_VAR 0 2
10595: PPUSH
10596: LD_INT 109
10598: PPUSH
10599: LD_INT 30
10601: PPUSH
10602: CALL_OW 174
// end ; end ;
10606: GO 10495
10608: POP
10609: POP
// end ;
10610: LD_VAR 0 1
10614: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
// nearestDist := 1000 ;
10622: LD_ADDR_VAR 0 4
10626: PUSH
10627: LD_INT 1000
10629: ST_TO_ADDR
// nearestUn := un ;
10630: LD_ADDR_VAR 0 5
10634: PUSH
10635: LD_VAR 0 1
10639: ST_TO_ADDR
// for sold in units do
10640: LD_ADDR_VAR 0 6
10644: PUSH
10645: LD_VAR 0 2
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10707
// begin dist := GetDistUnits ( un , sold ) ;
10653: LD_ADDR_VAR 0 7
10657: PUSH
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_VAR 0 6
10667: PPUSH
10668: CALL_OW 296
10672: ST_TO_ADDR
// if dist < nearestDist then
10673: LD_VAR 0 7
10677: PUSH
10678: LD_VAR 0 4
10682: LESS
10683: IFFALSE 10705
// begin nearestUn := sold ;
10685: LD_ADDR_VAR 0 5
10689: PUSH
10690: LD_VAR 0 6
10694: ST_TO_ADDR
// nearestDist := dist ;
10695: LD_ADDR_VAR 0 4
10699: PUSH
10700: LD_VAR 0 7
10704: ST_TO_ADDR
// end ; end ;
10705: GO 10650
10707: POP
10708: POP
// result := NearestUn ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_VAR 0 5
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 3
10723: RET
// export function PrepareDifficulty ; begin
10724: LD_INT 0
10726: PPUSH
// if Difficulty = 1 then
10727: LD_OWVAR 67
10731: PUSH
10732: LD_INT 1
10734: EQUAL
10735: IFFALSE 10798
// begin RemoveUnit ( brw2 ) ;
10737: LD_INT 9
10739: PPUSH
10740: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10744: LD_INT 30
10746: PPUSH
10747: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10751: LD_INT 52
10753: PPUSH
10754: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10758: LD_INT 63
10760: PPUSH
10761: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10765: LD_INT 5
10767: PUSH
10768: LD_INT 4
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: LD_INT 60
10777: PPUSH
10778: CALL_OW 240
// RuSoldMinLevel = 0 ;
10782: LD_ADDR_EXP 13
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10790: LD_ADDR_EXP 14
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// end ; if Difficulty = 2 then
10798: LD_OWVAR 67
10802: PUSH
10803: LD_INT 2
10805: EQUAL
10806: IFFALSE 10848
// begin RemoveUnit ( brw4 ) ;
10808: LD_INT 52
10810: PPUSH
10811: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10815: LD_INT 5
10817: PUSH
10818: LD_INT 4
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: LD_INT 50
10827: PPUSH
10828: CALL_OW 240
// RuSoldMinLevel = 1 ;
10832: LD_ADDR_EXP 13
10836: PUSH
10837: LD_INT 1
10839: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10840: LD_ADDR_EXP 14
10844: PUSH
10845: LD_INT 2
10847: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10848: LD_OWVAR 67
10852: PUSH
10853: LD_INT 3
10855: GREATEREQUAL
10856: IFFALSE 10891
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10858: LD_INT 5
10860: PUSH
10861: LD_INT 4
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PPUSH
10868: LD_INT 40
10870: PPUSH
10871: CALL_OW 240
// RuSoldMinLevel = 2 ;
10875: LD_ADDR_EXP 13
10879: PUSH
10880: LD_INT 2
10882: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10883: LD_ADDR_EXP 14
10887: PUSH
10888: LD_INT 3
10890: ST_TO_ADDR
// end ; end ;
10891: LD_VAR 0 1
10895: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10896: LD_INT 0
10898: PPUSH
10899: PPUSH
10900: PPUSH
// if not vehicles then
10901: LD_VAR 0 1
10905: NOT
10906: IFFALSE 10910
// exit ;
10908: GO 11040
// tmp := [ ] ;
10910: LD_ADDR_VAR 0 5
10914: PUSH
10915: EMPTY
10916: ST_TO_ADDR
// for i in vehicles do
10917: LD_ADDR_VAR 0 4
10921: PUSH
10922: LD_VAR 0 1
10926: PUSH
10927: FOR_IN
10928: IFFALSE 11024
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10930: LD_ADDR_VAR 0 5
10934: PUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: LD_VAR 0 5
10944: PUSH
10945: LD_INT 1
10947: PLUS
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: CALL_OW 265
10958: PUSH
10959: LD_VAR 0 4
10963: PPUSH
10964: CALL_OW 262
10968: PUSH
10969: LD_VAR 0 4
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_VAR 0 4
10983: PPUSH
10984: CALL_OW 264
10988: PUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: CALL_OW 261
10998: PUSH
10999: LD_VAR 0 4
11003: PPUSH
11004: CALL_OW 256
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 1
11021: ST_TO_ADDR
11022: GO 10927
11024: POP
11025: POP
// SaveVariable ( tmp , ident ) ;
11026: LD_VAR 0 5
11030: PPUSH
11031: LD_VAR 0 2
11035: PPUSH
11036: CALL_OW 39
// end ; end_of_file
11040: LD_VAR 0 3
11044: RET
// export function PrepareHeroes ; var plive , prefix ; begin
11045: LD_INT 0
11047: PPUSH
11048: PPUSH
11049: PPUSH
// prefix := 01_ ;
11050: LD_ADDR_VAR 0 3
11054: PUSH
11055: LD_STRING 01_
11057: ST_TO_ADDR
// uc_side := 1 ;
11058: LD_ADDR_OWVAR 20
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
11066: LD_ADDR_EXP 1
11070: PUSH
11071: LD_STRING JMM
11073: PPUSH
11074: LD_EXP 35
11078: NOT
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: CALL 39363 0 3
11089: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_STRING 01_JMMLifePoints_1
11097: PPUSH
11098: LD_INT 1000
11100: PPUSH
11101: CALL_OW 30
11105: ST_TO_ADDR
// if plive < 250 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 250
11113: LESS
11114: IFFALSE 11124
// plive := 300 ;
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: LD_INT 300
11123: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11124: LD_EXP 1
11128: PPUSH
11129: LD_VAR 0 2
11133: PPUSH
11134: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11138: LD_ADDR_EXP 9
11142: PUSH
11143: LD_STRING Powell
11145: PPUSH
11146: CALL_OW 25
11150: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11151: LD_ADDR_EXP 2
11155: PUSH
11156: LD_STRING Bobby
11158: PPUSH
11159: LD_EXP 35
11163: NOT
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: CALL 39363 0 3
11174: ST_TO_ADDR
// if Bobby then
11175: LD_EXP 2
11179: IFFALSE 11229
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11181: LD_ADDR_VAR 0 2
11185: PUSH
11186: LD_STRING 01_BobbyLifePoints_1
11188: PPUSH
11189: LD_INT 1000
11191: PPUSH
11192: CALL_OW 30
11196: ST_TO_ADDR
// if plive < 250 then
11197: LD_VAR 0 2
11201: PUSH
11202: LD_INT 250
11204: LESS
11205: IFFALSE 11215
// plive := 300 ;
11207: LD_ADDR_VAR 0 2
11211: PUSH
11212: LD_INT 300
11214: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11215: LD_EXP 2
11219: PPUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11229: LD_ADDR_EXP 3
11233: PUSH
11234: LD_STRING Cyrus
11236: PPUSH
11237: LD_EXP 35
11241: NOT
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: CALL 39363 0 3
11252: ST_TO_ADDR
// if Cyrus then
11253: LD_EXP 3
11257: IFFALSE 11307
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_STRING 01_CyrusLifePoints_1
11266: PPUSH
11267: LD_INT 1000
11269: PPUSH
11270: CALL_OW 30
11274: ST_TO_ADDR
// if plive < 250 then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 250
11282: LESS
11283: IFFALSE 11293
// plive := 300 ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 300
11292: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11293: LD_EXP 3
11297: PPUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11307: LD_ADDR_EXP 5
11311: PUSH
11312: LD_STRING Khatam
11314: PPUSH
11315: CALL_OW 25
11319: ST_TO_ADDR
// uc_side := 4 ;
11320: LD_ADDR_OWVAR 20
11324: PUSH
11325: LD_INT 4
11327: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11328: LD_ADDR_EXP 4
11332: PUSH
11333: LD_STRING Lisa
11335: PPUSH
11336: CALL_OW 25
11340: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11341: LD_EXP 1
11345: PPUSH
11346: LD_INT 3
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11356: LD_EXP 2
11360: PPUSH
11361: LD_INT 3
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11371: LD_EXP 3
11375: PPUSH
11376: LD_INT 3
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11386: LD_EXP 4
11390: PPUSH
11391: LD_INT 5
11393: PPUSH
11394: LD_INT 0
11396: PPUSH
11397: CALL_OW 49
// ComCrawl ( Lisa ) ;
11401: LD_EXP 4
11405: PPUSH
11406: CALL_OW 137
// end ;
11410: LD_VAR 0 1
11414: RET
// export function PrepareLisSquad ; var i , un ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
11419: PPUSH
// uc_side := 4 ;
11420: LD_ADDR_OWVAR 20
11424: PUSH
11425: LD_INT 4
11427: ST_TO_ADDR
// uc_nation := 1 ;
11428: LD_ADDR_OWVAR 21
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// hc_class := 2 ;
11436: LD_ADDR_OWVAR 28
11440: PUSH
11441: LD_INT 2
11443: ST_TO_ADDR
// hc_sex := sex_male ;
11444: LD_ADDR_OWVAR 27
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// hc_gallery :=  ;
11452: LD_ADDR_OWVAR 33
11456: PUSH
11457: LD_STRING 
11459: ST_TO_ADDR
// hc_name :=  ;
11460: LD_ADDR_OWVAR 26
11464: PUSH
11465: LD_STRING 
11467: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11468: LD_ADDR_OWVAR 30
11472: PUSH
11473: LD_INT 0
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 0
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11491: LD_ADDR_OWVAR 31
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 0
11504: PUSH
11505: LD_INT 0
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: ST_TO_ADDR
// un := CreateHuman ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: CALL_OW 44
11523: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 6
11531: PPUSH
11532: LD_INT 0
11534: PPUSH
11535: CALL_OW 49
// hc_sex := sex_female ;
11539: LD_ADDR_OWVAR 27
11543: PUSH
11544: LD_INT 2
11546: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11547: LD_ADDR_OWVAR 30
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: LD_INT 0
11557: PUSH
11558: LD_INT 0
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11570: LD_ADDR_OWVAR 31
11574: PUSH
11575: LD_INT 0
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: LD_INT 0
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: ST_TO_ADDR
// un := CreateHuman ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: CALL_OW 44
11602: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 6
11610: PPUSH
11611: LD_INT 0
11613: PPUSH
11614: CALL_OW 49
// if not Bobby and not Cyrus then
11618: LD_EXP 2
11622: NOT
11623: IFFALSE 11632
11625: PUSH
11626: LD_EXP 3
11630: NOT
11631: AND
11632: IFFALSE 11721
// begin hc_class := 1 ;
11634: LD_ADDR_OWVAR 28
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// hc_sex := sex_male ;
11642: LD_ADDR_OWVAR 27
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11650: LD_ADDR_OWVAR 30
11654: PUSH
11655: LD_INT 2
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: LD_INT 0
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11673: LD_ADDR_OWVAR 31
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: LD_INT 0
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: ST_TO_ADDR
// un := CreateHuman ;
11696: LD_ADDR_VAR 0 3
11700: PUSH
11701: CALL_OW 44
11705: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 31
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: CALL_OW 49
// end ; InitHc ;
11721: CALL_OW 19
// end ;
11725: LD_VAR 0 1
11729: RET
// export function PrepareOtherAmericans ; begin
11730: LD_INT 0
11732: PPUSH
// uc_side := 4 ;
11733: LD_ADDR_OWVAR 20
11737: PUSH
11738: LD_INT 4
11740: ST_TO_ADDR
// uc_nation := 1 ;
11741: LD_ADDR_OWVAR 21
11745: PUSH
11746: LD_INT 1
11748: ST_TO_ADDR
// hc_gallery :=  ;
11749: LD_ADDR_OWVAR 33
11753: PUSH
11754: LD_STRING 
11756: ST_TO_ADDR
// hc_name := Tom Garvin ;
11757: LD_ADDR_OWVAR 26
11761: PUSH
11762: LD_STRING Tom Garvin
11764: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: CALL_OW 380
// Brian := CreateHuman ;
11778: LD_ADDR_EXP 6
11782: PUSH
11783: CALL_OW 44
11787: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11788: LD_EXP 6
11792: PPUSH
11793: LD_INT 10
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 49
// hc_name := Jerry White ;
11803: LD_ADDR_OWVAR 26
11807: PUSH
11808: LD_STRING Jerry White
11810: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 3
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: CALL_OW 380
// Jerry := CreateHuman ;
11824: LD_ADDR_EXP 7
11828: PUSH
11829: CALL_OW 44
11833: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11834: LD_EXP 7
11838: PPUSH
11839: LD_INT 10
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11849: LD_EXP 6
11853: PUSH
11854: LD_EXP 7
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 140
// end ;
11867: LD_VAR 0 1
11871: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11878: LD_ADDR_VAR 0 4
11882: PUSH
11883: LD_INT 16
11885: PPUSH
11886: LD_INT 0
11888: PPUSH
11889: CALL_OW 517
11893: ST_TO_ADDR
// for i = 1 to 6 do
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: DOUBLE
11900: LD_INT 1
11902: DEC
11903: ST_TO_ADDR
11904: LD_INT 6
11906: PUSH
11907: FOR_TO
11908: IFFALSE 12054
// begin uc_side := 4 ;
11910: LD_ADDR_OWVAR 20
11914: PUSH
11915: LD_INT 4
11917: ST_TO_ADDR
// uc_nation := 1 ;
11918: LD_ADDR_OWVAR 21
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// hc_gallery :=  ;
11926: LD_ADDR_OWVAR 33
11930: PUSH
11931: LD_STRING 
11933: ST_TO_ADDR
// hc_name :=  ;
11934: LD_ADDR_OWVAR 26
11938: PUSH
11939: LD_STRING 
11941: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11942: LD_INT 0
11944: PPUSH
11945: LD_INT 1
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: LD_INT 4
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_VAR 0 2
11963: PUSH
11964: LD_INT 3
11966: MOD
11967: PUSH
11968: LD_INT 1
11970: PLUS
11971: ARRAY
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 380
// un := CreateHuman ;
11980: LD_ADDR_VAR 0 3
11984: PUSH
11985: CALL_OW 44
11989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 0
11997: PPUSH
11998: LD_INT 5
12000: PPUSH
12001: CALL_OW 12
12005: PPUSH
12006: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_VAR 0 4
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PUSH
12024: LD_VAR 0 2
12028: ARRAY
12029: PPUSH
12030: LD_VAR 0 4
12034: PUSH
12035: LD_INT 2
12037: ARRAY
12038: PUSH
12039: LD_VAR 0 2
12043: ARRAY
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 601
// end ;
12052: GO 11907
12054: POP
12055: POP
// DyingSold := CreateHuman ;
12056: LD_ADDR_EXP 36
12060: PUSH
12061: CALL_OW 44
12065: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
12066: LD_EXP 36
12070: PPUSH
12071: LD_INT 16
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
12081: LD_EXP 36
12085: PPUSH
12086: LD_INT 250
12088: PPUSH
12089: CALL_OW 234
// end ; end_of_file
12093: LD_VAR 0 1
12097: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12098: LD_INT 0
12100: PPUSH
12101: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 23
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 50
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: LD_INT 56
12145: PUSH
12146: EMPTY
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PPUSH
12156: CALL_OW 69
12160: PUSH
12161: LD_EXP 1
12165: PUSH
12166: EMPTY
12167: LIST
12168: DIFF
12169: ST_TO_ADDR
// if not tmp then
12170: LD_VAR 0 2
12174: NOT
12175: IFFALSE 12179
// exit ;
12177: GO 12255
// uc_side = 6 ;
12179: LD_ADDR_OWVAR 20
12183: PUSH
12184: LD_INT 6
12186: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12187: LD_ADDR_EXP 8
12191: PUSH
12192: LD_STRING Mikhail
12194: PPUSH
12195: CALL_OW 25
12199: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12200: LD_EXP 8
12204: PPUSH
12205: LD_INT 3
12207: PPUSH
12208: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12212: LD_EXP 8
12216: PPUSH
12217: LD_VAR 0 2
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: CALL_OW 250
12230: PPUSH
12231: LD_VAR 0 2
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: PPUSH
12240: CALL_OW 251
12244: PPUSH
12245: LD_INT 5
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 50
// end ;
12255: LD_VAR 0 1
12259: RET
// export function PrepareRussianCommander ; begin
12260: LD_INT 0
12262: PPUSH
// uc_side = 3 ;
12263: LD_ADDR_OWVAR 20
12267: PUSH
12268: LD_INT 3
12270: ST_TO_ADDR
// uc_nation = 3 ;
12271: LD_ADDR_OWVAR 21
12275: PUSH
12276: LD_INT 3
12278: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12279: LD_ADDR_EXP 19
12283: PUSH
12284: LD_STRING Natasza
12286: PPUSH
12287: CALL_OW 25
12291: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12292: LD_EXP 19
12296: PPUSH
12297: LD_INT 24
12299: PPUSH
12300: LD_INT 0
12302: PPUSH
12303: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12307: LD_EXP 19
12311: PPUSH
12312: LD_INT 56
12314: PPUSH
12315: LD_INT 16
12317: PPUSH
12318: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12322: LD_ADDR_EXP 24
12326: PUSH
12327: LD_EXP 24
12331: PPUSH
12332: LD_EXP 24
12336: PUSH
12337: LD_INT 1
12339: PLUS
12340: PPUSH
12341: LD_EXP 19
12345: PPUSH
12346: CALL_OW 1
12350: ST_TO_ADDR
// end ;
12351: LD_VAR 0 1
12355: RET
// export function PrepareSouthBase ; var i , un ; begin
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
// for i = 1 to 2 do
12361: LD_ADDR_VAR 0 2
12365: PUSH
12366: DOUBLE
12367: LD_INT 1
12369: DEC
12370: ST_TO_ADDR
12371: LD_INT 2
12373: PUSH
12374: FOR_TO
12375: IFFALSE 12484
// begin uc_side = 3 ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_INT 3
12384: ST_TO_ADDR
// uc_nation = 3 ;
12385: LD_ADDR_OWVAR 21
12389: PUSH
12390: LD_INT 3
12392: ST_TO_ADDR
// hc_gallery =  ;
12393: LD_ADDR_OWVAR 33
12397: PUSH
12398: LD_STRING 
12400: ST_TO_ADDR
// hc_name =  ;
12401: LD_ADDR_OWVAR 26
12405: PUSH
12406: LD_STRING 
12408: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12409: LD_INT 1
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: LD_EXP 13
12419: PPUSH
12420: LD_EXP 14
12424: PPUSH
12425: CALL_OW 12
12429: PPUSH
12430: CALL_OW 380
// hc_importance = 0 ;
12434: LD_ADDR_OWVAR 32
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// un = CreateHuman ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: CALL_OW 44
12451: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 11
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 111
12474: PPUSH
12475: LD_INT 38
12477: PPUSH
12478: CALL_OW 118
// end ;
12482: GO 12374
12484: POP
12485: POP
// for i = 1 to 2 do
12486: LD_ADDR_VAR 0 2
12490: PUSH
12491: DOUBLE
12492: LD_INT 1
12494: DEC
12495: ST_TO_ADDR
12496: LD_INT 2
12498: PUSH
12499: FOR_TO
12500: IFFALSE 12583
// begin uc_side = 3 ;
12502: LD_ADDR_OWVAR 20
12506: PUSH
12507: LD_INT 3
12509: ST_TO_ADDR
// uc_nation = 3 ;
12510: LD_ADDR_OWVAR 21
12514: PUSH
12515: LD_INT 3
12517: ST_TO_ADDR
// hc_gallery =  ;
12518: LD_ADDR_OWVAR 33
12522: PUSH
12523: LD_STRING 
12525: ST_TO_ADDR
// hc_name =  ;
12526: LD_ADDR_OWVAR 26
12530: PUSH
12531: LD_STRING 
12533: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12534: LD_INT 0
12536: PPUSH
12537: LD_INT 3
12539: PPUSH
12540: LD_EXP 13
12544: PPUSH
12545: LD_EXP 14
12549: PPUSH
12550: CALL_OW 12
12554: PPUSH
12555: CALL_OW 380
// un = CreateHuman ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: CALL_OW 44
12568: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 10
12576: PPUSH
12577: CALL_OW 52
// end ;
12581: GO 12499
12583: POP
12584: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12585: LD_INT 3
12587: PPUSH
12588: LD_INT 3
12590: PPUSH
12591: LD_INT 33
12593: PPUSH
12594: LD_EXP 13
12598: PPUSH
12599: LD_EXP 14
12603: PPUSH
12604: CALL_OW 12
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: LD_INT 1
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: LD_OWVAR 67
12634: ARRAY
12635: PPUSH
12636: CALL 9160 0 6
// for i in UnitsInside ( arm2 ) do
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_INT 33
12647: PPUSH
12648: CALL_OW 313
12652: PUSH
12653: FOR_IN
12654: IFFALSE 12687
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12656: LD_ADDR_EXP 25
12660: PUSH
12661: LD_EXP 25
12665: PPUSH
12666: LD_EXP 25
12670: PUSH
12671: LD_INT 1
12673: PLUS
12674: PPUSH
12675: LD_VAR 0 2
12679: PPUSH
12680: CALL_OW 1
12684: ST_TO_ADDR
12685: GO 12653
12687: POP
12688: POP
// end ;
12689: LD_VAR 0 1
12693: RET
// export function PrepareNorthBase ; var i , un ; begin
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
12698: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12699: LD_ADDR_VAR 0 2
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_INT 1
12711: PPUSH
12712: LD_INT 2
12714: PPUSH
12715: CALL_OW 12
12719: PUSH
12720: LD_INT 2
12722: PPUSH
12723: LD_INT 3
12725: PPUSH
12726: CALL_OW 12
12730: PUSH
12731: LD_INT 3
12733: PPUSH
12734: LD_INT 4
12736: PPUSH
12737: CALL_OW 12
12741: PUSH
12742: LD_INT 4
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_OWVAR 67
12755: ARRAY
12756: PUSH
12757: FOR_TO
12758: IFFALSE 12844
// begin uc_side = 3 ;
12760: LD_ADDR_OWVAR 20
12764: PUSH
12765: LD_INT 3
12767: ST_TO_ADDR
// uc_nation = 3 ;
12768: LD_ADDR_OWVAR 21
12772: PUSH
12773: LD_INT 3
12775: ST_TO_ADDR
// hc_gallery =  ;
12776: LD_ADDR_OWVAR 33
12780: PUSH
12781: LD_STRING 
12783: ST_TO_ADDR
// hc_name =  ;
12784: LD_ADDR_OWVAR 26
12788: PUSH
12789: LD_STRING 
12791: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12792: LD_INT 0
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_EXP 13
12802: PPUSH
12803: LD_EXP 14
12807: PPUSH
12808: CALL_OW 12
12812: PPUSH
12813: CALL_OW 380
// un = CreateHuman ;
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: CALL_OW 44
12826: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 14
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 49
// end ;
12842: GO 12757
12844: POP
12845: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12846: LD_INT 3
12848: PPUSH
12849: LD_INT 3
12851: PPUSH
12852: LD_INT 2
12854: PPUSH
12855: LD_EXP 13
12859: PPUSH
12860: LD_EXP 14
12864: PPUSH
12865: CALL_OW 12
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: LD_INT 2
12878: PPUSH
12879: CALL_OW 12
12883: PUSH
12884: LD_INT 1
12886: PPUSH
12887: LD_INT 3
12889: PPUSH
12890: CALL_OW 12
12894: PUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 3
12900: PPUSH
12901: CALL_OW 12
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_OWVAR 67
12919: ARRAY
12920: PPUSH
12921: CALL 9160 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12925: LD_INT 3
12927: PPUSH
12928: LD_INT 3
12930: PPUSH
12931: LD_INT 23
12933: PPUSH
12934: LD_EXP 13
12938: PPUSH
12939: LD_EXP 14
12943: PPUSH
12944: CALL_OW 12
12948: PPUSH
12949: LD_INT 4
12951: PPUSH
12952: LD_INT 0
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: LD_INT 2
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_OWVAR 67
12974: ARRAY
12975: PPUSH
12976: CALL 9160 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12980: LD_INT 3
12982: PPUSH
12983: LD_INT 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: LD_EXP 13
12993: PPUSH
12994: LD_EXP 14
12998: PPUSH
12999: CALL_OW 12
13003: PPUSH
13004: LD_INT 2
13006: PPUSH
13007: LD_INT 1
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 3
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: LD_OWVAR 67
13029: ARRAY
13030: PPUSH
13031: CALL 9160 0 6
// for i in UnitsInside ( arm1 ) do
13035: LD_ADDR_VAR 0 2
13039: PUSH
13040: LD_INT 2
13042: PPUSH
13043: CALL_OW 313
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13082
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
13051: LD_ADDR_EXP 24
13055: PUSH
13056: LD_EXP 24
13060: PPUSH
13061: LD_EXP 24
13065: PUSH
13066: LD_INT 1
13068: PLUS
13069: PPUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: CALL_OW 1
13079: ST_TO_ADDR
13080: GO 13048
13082: POP
13083: POP
// end ;
13084: LD_VAR 0 1
13088: RET
// export function PrepareOtherRussians ; var i , un ; begin
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
13093: PPUSH
// for i = 1 to 2 do
13094: LD_ADDR_VAR 0 2
13098: PUSH
13099: DOUBLE
13100: LD_INT 1
13102: DEC
13103: ST_TO_ADDR
13104: LD_INT 2
13106: PUSH
13107: FOR_TO
13108: IFFALSE 13209
// begin uc_side = 3 ;
13110: LD_ADDR_OWVAR 20
13114: PUSH
13115: LD_INT 3
13117: ST_TO_ADDR
// uc_nation = 3 ;
13118: LD_ADDR_OWVAR 21
13122: PUSH
13123: LD_INT 3
13125: ST_TO_ADDR
// hc_gallery =  ;
13126: LD_ADDR_OWVAR 33
13130: PUSH
13131: LD_STRING 
13133: ST_TO_ADDR
// hc_name =  ;
13134: LD_ADDR_OWVAR 26
13138: PUSH
13139: LD_STRING 
13141: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13142: LD_INT 0
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_EXP 13
13152: PPUSH
13153: LD_EXP 14
13157: PPUSH
13158: CALL_OW 12
13162: PPUSH
13163: CALL_OW 380
// un = CreateHuman ;
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: CALL_OW 44
13176: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_INT 9
13184: PPUSH
13185: LD_INT 0
13187: PPUSH
13188: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13192: LD_VAR 0 3
13196: PPUSH
13197: LD_INT 80
13199: PPUSH
13200: LD_INT 73
13202: PPUSH
13203: CALL_OW 118
// end ;
13207: GO 13107
13209: POP
13210: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 30
13228: PUSH
13229: LD_INT 31
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: PUSH
13245: FOR_IN
13246: IFFALSE 13274
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13248: LD_EXP 13
13252: PPUSH
13253: LD_EXP 14
13257: PPUSH
13258: CALL_OW 12
13262: PPUSH
13263: LD_VAR 0 2
13267: PPUSH
13268: CALL 9269 0 2
13272: GO 13245
13274: POP
13275: POP
// end ;
13276: LD_VAR 0 1
13280: RET
// export function PrepareCargoBays ; begin
13281: LD_INT 0
13283: PPUSH
// uc_side = 3 ;
13284: LD_ADDR_OWVAR 20
13288: PUSH
13289: LD_INT 3
13291: ST_TO_ADDR
// uc_nation = 3 ;
13292: LD_ADDR_OWVAR 21
13296: PUSH
13297: LD_INT 3
13299: ST_TO_ADDR
// vc_engine = 1 ;
13300: LD_ADDR_OWVAR 39
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// vc_control = 1 ;
13308: LD_ADDR_OWVAR 38
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// vc_weapon = 51 ;
13316: LD_ADDR_OWVAR 40
13320: PUSH
13321: LD_INT 51
13323: ST_TO_ADDR
// vc_chassis = 22 ;
13324: LD_ADDR_OWVAR 37
13328: PUSH
13329: LD_INT 22
13331: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13332: LD_ADDR_EXP 15
13336: PUSH
13337: CALL_OW 45
13341: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13342: LD_ADDR_EXP 16
13346: PUSH
13347: CALL_OW 45
13351: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13352: LD_EXP 15
13356: PPUSH
13357: LD_INT 13
13359: PPUSH
13360: LD_INT 0
13362: PPUSH
13363: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13367: LD_EXP 16
13371: PPUSH
13372: LD_INT 13
13374: PPUSH
13375: LD_INT 0
13377: PPUSH
13378: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13382: LD_EXP 15
13386: PPUSH
13387: LD_INT 2
13389: PPUSH
13390: LD_INT 70
13392: PUSH
13393: LD_INT 50
13395: PUSH
13396: LD_INT 30
13398: PUSH
13399: LD_INT 20
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: PUSH
13408: LD_OWVAR 67
13412: ARRAY
13413: PPUSH
13414: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13418: LD_EXP 16
13422: PPUSH
13423: LD_INT 2
13425: PPUSH
13426: LD_INT 70
13428: PUSH
13429: LD_INT 50
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 20
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: LD_OWVAR 67
13448: ARRAY
13449: PPUSH
13450: CALL_OW 291
// hc_gallery =  ;
13454: LD_ADDR_OWVAR 33
13458: PUSH
13459: LD_STRING 
13461: ST_TO_ADDR
// hc_name =  ;
13462: LD_ADDR_OWVAR 26
13466: PUSH
13467: LD_STRING 
13469: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13470: LD_INT 1
13472: PPUSH
13473: LD_INT 3
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: LD_INT 2
13481: PPUSH
13482: CALL_OW 12
13486: PPUSH
13487: CALL_OW 380
// driver1 = CreateHuman ;
13491: LD_ADDR_EXP 17
13495: PUSH
13496: CALL_OW 44
13500: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13501: LD_EXP 17
13505: PPUSH
13506: LD_EXP 15
13510: PPUSH
13511: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13515: LD_ADDR_OWVAR 26
13519: PUSH
13520: LD_STRING Nikolai Andreyev
13522: ST_TO_ADDR
// driver2 = CreateHuman ;
13523: LD_ADDR_EXP 18
13527: PUSH
13528: CALL_OW 44
13532: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13533: LD_EXP 18
13537: PPUSH
13538: LD_EXP 16
13542: PPUSH
13543: CALL_OW 52
// end ;
13547: LD_VAR 0 1
13551: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
// uc_side = 3 ;
13560: LD_ADDR_OWVAR 20
13564: PUSH
13565: LD_INT 3
13567: ST_TO_ADDR
// uc_nation = 3 ;
13568: LD_ADDR_OWVAR 21
13572: PUSH
13573: LD_INT 3
13575: ST_TO_ADDR
// for i := 1 to count do
13576: LD_ADDR_VAR 0 4
13580: PUSH
13581: DOUBLE
13582: LD_INT 1
13584: DEC
13585: ST_TO_ADDR
13586: LD_VAR 0 1
13590: PUSH
13591: FOR_TO
13592: IFFALSE 13854
// begin vc_engine = 1 ;
13594: LD_ADDR_OWVAR 39
13598: PUSH
13599: LD_INT 1
13601: ST_TO_ADDR
// vc_control = 1 ;
13602: LD_ADDR_OWVAR 38
13606: PUSH
13607: LD_INT 1
13609: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13610: LD_ADDR_OWVAR 40
13614: PUSH
13615: LD_INT 42
13617: ST_TO_ADDR
// if Difficulty = 3 then
13618: LD_OWVAR 67
13622: PUSH
13623: LD_INT 3
13625: EQUAL
13626: IFFALSE 13655
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13628: LD_ADDR_OWVAR 40
13632: PUSH
13633: LD_INT 42
13635: PUSH
13636: LD_INT 43
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 1
13645: PPUSH
13646: LD_INT 2
13648: PPUSH
13649: CALL_OW 12
13653: ARRAY
13654: ST_TO_ADDR
// if Difficulty = 4 then
13655: LD_OWVAR 67
13659: PUSH
13660: LD_INT 4
13662: EQUAL
13663: IFFALSE 13700
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13665: LD_ADDR_OWVAR 40
13669: PUSH
13670: LD_INT 42
13672: PUSH
13673: LD_INT 43
13675: PUSH
13676: LD_INT 43
13678: PUSH
13679: LD_INT 44
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 1
13690: PPUSH
13691: LD_INT 4
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13700: LD_ADDR_OWVAR 37
13704: PUSH
13705: LD_INT 21
13707: PUSH
13708: LD_INT 22
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: LD_OWVAR 67
13727: ARRAY
13728: ST_TO_ADDR
// veh = CreateVehicle ;
13729: LD_ADDR_VAR 0 5
13733: PUSH
13734: CALL_OW 45
13738: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13739: LD_VAR 0 5
13743: PPUSH
13744: LD_VAR 0 2
13748: PPUSH
13749: LD_INT 0
13751: PPUSH
13752: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13756: LD_ADDR_EXP 26
13760: PUSH
13761: LD_EXP 26
13765: PUSH
13766: LD_VAR 0 5
13770: ADD
13771: ST_TO_ADDR
// hc_gallery =  ;
13772: LD_ADDR_OWVAR 33
13776: PUSH
13777: LD_STRING 
13779: ST_TO_ADDR
// hc_name =  ;
13780: LD_ADDR_OWVAR 26
13784: PUSH
13785: LD_STRING 
13787: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13788: LD_INT 0
13790: PPUSH
13791: LD_INT 3
13793: PPUSH
13794: LD_EXP 13
13798: PPUSH
13799: LD_EXP 14
13803: PPUSH
13804: CALL_OW 12
13808: PPUSH
13809: CALL_OW 380
// un = CreateHuman ;
13813: LD_ADDR_VAR 0 6
13817: PUSH
13818: CALL_OW 44
13822: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13823: LD_VAR 0 6
13827: PPUSH
13828: LD_VAR 0 5
13832: PPUSH
13833: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13837: LD_VAR 0 6
13841: PPUSH
13842: LD_INT 14
13844: PPUSH
13845: LD_INT 9
13847: PPUSH
13848: CALL_OW 111
// end ;
13852: GO 13591
13854: POP
13855: POP
// wait ( 0 0$1 ) ;
13856: LD_INT 35
13858: PPUSH
13859: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13863: LD_INT 0
13865: PPUSH
13866: LD_INT 2
13868: PPUSH
13869: LD_EXP 13
13873: PPUSH
13874: LD_EXP 14
13878: PPUSH
13879: CALL_OW 12
13883: PPUSH
13884: CALL_OW 380
// un = CreateHuman ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: CALL_OW 44
13897: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: DOUBLE
13904: LD_INT 1
13906: DEC
13907: ST_TO_ADDR
13908: LD_VAR 0 1
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 2
13918: MUL
13919: PLUS
13920: PUSH
13921: FOR_TO
13922: IFFALSE 14014
// begin hc_gallery =  ;
13924: LD_ADDR_OWVAR 33
13928: PUSH
13929: LD_STRING 
13931: ST_TO_ADDR
// hc_name =  ;
13932: LD_ADDR_OWVAR 26
13936: PUSH
13937: LD_STRING 
13939: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13940: LD_INT 1
13942: PPUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_EXP 13
13950: PPUSH
13951: LD_EXP 14
13955: PPUSH
13956: CALL_OW 12
13960: PPUSH
13961: CALL_OW 380
// un = CreateHuman ;
13965: LD_ADDR_VAR 0 6
13969: PUSH
13970: CALL_OW 44
13974: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13975: LD_VAR 0 6
13979: PPUSH
13980: LD_INT 9
13982: PPUSH
13983: LD_INT 13
13985: PPUSH
13986: LD_INT 4
13988: PPUSH
13989: LD_INT 0
13991: PPUSH
13992: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13996: LD_ADDR_EXP 26
14000: PUSH
14001: LD_EXP 26
14005: PUSH
14006: LD_VAR 0 6
14010: ADD
14011: ST_TO_ADDR
// end ;
14012: GO 13921
14014: POP
14015: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14016: LD_ADDR_VAR 0 7
14020: PUSH
14021: LD_INT 26
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 21
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 26
14046: PUSH
14047: LD_INT 1
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 70
14063: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
14064: LD_VAR 0 7
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_STRING D9-Rus3-1
14075: PPUSH
14076: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
14080: LD_VAR 0 7
14084: PUSH
14085: LD_INT 2
14087: ARRAY
14088: PPUSH
14089: LD_STRING D9-Russ-1
14091: PPUSH
14092: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14096: LD_EXP 26
14100: PPUSH
14101: LD_INT 31
14103: PPUSH
14104: LD_INT 13
14106: PPUSH
14107: CALL_OW 114
// wait ( 0 0$3 ) ;
14111: LD_INT 105
14113: PPUSH
14114: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// for i in attackGroup do
14125: LD_ADDR_VAR 0 4
14129: PUSH
14130: LD_EXP 26
14134: PUSH
14135: FOR_IN
14136: IFFALSE 14515
// begin if IsDead ( i ) then
14138: LD_VAR 0 4
14142: PPUSH
14143: CALL_OW 301
14147: IFFALSE 14167
// begin attackGroup := attackGroup diff i ;
14149: LD_ADDR_EXP 26
14153: PUSH
14154: LD_EXP 26
14158: PUSH
14159: LD_VAR 0 4
14163: DIFF
14164: ST_TO_ADDR
// continue ;
14165: GO 14135
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14167: LD_VAR 0 4
14171: PPUSH
14172: CALL_OW 314
14176: NOT
14177: IFFALSE 14191
14179: PUSH
14180: LD_VAR 0 4
14184: PPUSH
14185: CALL_OW 110
14189: NOT
14190: AND
14191: IFFALSE 14227
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14193: LD_VAR 0 4
14197: PPUSH
14198: LD_INT 22
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL_OW 69
14212: PPUSH
14213: LD_VAR 0 4
14217: PPUSH
14218: CALL_OW 74
14222: PPUSH
14223: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14227: LD_VAR 0 4
14231: PPUSH
14232: CALL_OW 110
14236: NOT
14237: IFFALSE 14254
14239: PUSH
14240: LD_VAR 0 4
14244: PPUSH
14245: CALL_OW 256
14249: PUSH
14250: LD_INT 650
14252: LESS
14253: AND
14254: IFFALSE 14271
14256: PUSH
14257: LD_VAR 0 4
14261: PPUSH
14262: CALL_OW 247
14266: PUSH
14267: LD_INT 2
14269: EQUAL
14270: AND
14271: IFFALSE 14300
// begin SetTag ( i , 1 ) ;
14273: LD_VAR 0 4
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14285: LD_VAR 0 4
14289: PPUSH
14290: LD_INT 20
14292: PPUSH
14293: LD_INT 8
14295: PPUSH
14296: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14300: LD_VAR 0 4
14304: PPUSH
14305: CALL_OW 110
14309: PUSH
14310: LD_INT 1
14312: EQUAL
14313: IFFALSE 14336
14315: PUSH
14316: LD_VAR 0 4
14320: PPUSH
14321: LD_INT 20
14323: PPUSH
14324: LD_INT 8
14326: PPUSH
14327: CALL_OW 297
14331: PUSH
14332: LD_INT 6
14334: LESS
14335: AND
14336: IFFALSE 14350
// SetTag ( i , 2 ) ;
14338: LD_VAR 0 4
14342: PPUSH
14343: LD_INT 2
14345: PPUSH
14346: CALL_OW 109
// if GetTag ( i ) = 2 then
14350: LD_VAR 0 4
14354: PPUSH
14355: CALL_OW 110
14359: PUSH
14360: LD_INT 2
14362: EQUAL
14363: IFFALSE 14473
// begin if GetLives ( i ) = 1000 then
14365: LD_VAR 0 4
14369: PPUSH
14370: CALL_OW 256
14374: PUSH
14375: LD_INT 1000
14377: EQUAL
14378: IFFALSE 14394
// SetTag ( i , 3 ) else
14380: LD_VAR 0 4
14384: PPUSH
14385: LD_INT 3
14387: PPUSH
14388: CALL_OW 109
14392: GO 14473
// if IsDrivenBy ( i ) then
14394: LD_VAR 0 4
14398: PPUSH
14399: CALL_OW 311
14403: IFFALSE 14473
// begin mech := IsDrivenBy ( i ) ;
14405: LD_ADDR_VAR 0 8
14409: PUSH
14410: LD_VAR 0 4
14414: PPUSH
14415: CALL_OW 311
14419: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14420: LD_INT 1
14422: PPUSH
14423: LD_VAR 0 8
14427: PPUSH
14428: CALL_OW 292
14432: NOT
14433: IFFALSE 14450
14435: PUSH
14436: LD_VAR 0 8
14440: PPUSH
14441: CALL_OW 256
14445: PUSH
14446: LD_INT 1000
14448: LESS
14449: AND
14450: IFFALSE 14464
// SetLives ( mech , 1000 ) ;
14452: LD_VAR 0 8
14456: PPUSH
14457: LD_INT 1000
14459: PPUSH
14460: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14464: LD_VAR 0 8
14468: PPUSH
14469: CALL 79233 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14473: LD_VAR 0 4
14477: PPUSH
14478: CALL_OW 110
14482: PUSH
14483: LD_INT 3
14485: EQUAL
14486: IFFALSE 14499
14488: PUSH
14489: LD_VAR 0 4
14493: PPUSH
14494: CALL_OW 311
14498: AND
14499: IFFALSE 14513
// SetTag ( i , 0 ) ;
14501: LD_VAR 0 4
14505: PPUSH
14506: LD_INT 0
14508: PPUSH
14509: CALL_OW 109
// end ;
14513: GO 14135
14515: POP
14516: POP
// until not attackGroup ;
14517: LD_EXP 26
14521: NOT
14522: IFFALSE 14118
// end ;
14524: LD_VAR 0 3
14528: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14529: LD_EXP 26
14533: PPUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 72
14548: IFFALSE 14616
14550: GO 14552
14552: DISABLE
14553: LD_INT 0
14555: PPUSH
// begin enable ;
14556: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_EXP 26
14566: PPUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 72
14581: PUSH
14582: FOR_IN
14583: IFFALSE 14614
// if GetFuel ( i ) < 3 then
14585: LD_VAR 0 1
14589: PPUSH
14590: CALL_OW 261
14594: PUSH
14595: LD_INT 3
14597: LESS
14598: IFFALSE 14612
// SetFuel ( i , 3 ) ;
14600: LD_VAR 0 1
14604: PPUSH
14605: LD_INT 3
14607: PPUSH
14608: CALL_OW 240
14612: GO 14582
14614: POP
14615: POP
// end ; end_of_file
14616: PPOPN 1
14618: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14619: LD_INT 22
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: IFFALSE 14666
14649: GO 14651
14651: DISABLE
// begin enable ;
14652: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14653: LD_INT 3
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_INT 22
14661: PPUSH
14662: CALL 9405 0 3
// end ;
14666: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14667: LD_INT 22
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 4
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: IFFALSE 14717
14697: GO 14699
14699: DISABLE
// begin enable ;
14700: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14701: LD_INT 3
14703: PPUSH
14704: LD_INT 20
14706: PPUSH
14707: LD_INT 22
14709: PPUSH
14710: LD_INT 23
14712: PPUSH
14713: CALL 9743 0 4
// end ;
14717: END
// every 0 0$1 trigger northBaseDefenders do
14718: LD_EXP 24
14722: IFFALSE 14746
14724: GO 14726
14726: DISABLE
// begin enable ;
14727: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14728: LD_INT 22
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: LD_EXP 24
14738: PPUSH
14739: LD_INT 2
14741: PPUSH
14742: CALL 10017 0 4
// end ;
14746: END
// every 0 0$1 trigger southBaseDefenders do
14747: LD_EXP 25
14751: IFFALSE 14775
14753: GO 14755
14755: DISABLE
// begin enable ;
14756: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14757: LD_INT 23
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: LD_EXP 25
14767: PPUSH
14768: LD_INT 33
14770: PPUSH
14771: CALL 10017 0 4
// end ; end_of_file
14775: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14776: LD_VAR 0 1
14780: PPUSH
14781: CALL 33160 0 1
// if unit = JMM then
14785: LD_VAR 0 1
14789: PUSH
14790: LD_EXP 1
14794: EQUAL
14795: IFFALSE 14804
// YouLost ( JMM ) ;
14797: LD_STRING JMM
14799: PPUSH
14800: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 266
14813: PUSH
14814: LD_INT 0
14816: EQUAL
14817: IFFALSE 14826
// YouLost ( DepotDestroyed ) ;
14819: LD_STRING DepotDestroyed
14821: PPUSH
14822: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 255
14835: PUSH
14836: LD_INT 1
14838: EQUAL
14839: IFFALSE 14856
14841: PUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 247
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: AND
14856: IFFALSE 14872
// deadsCounter = deadsCounter + 1 ;
14858: LD_ADDR_EXP 31
14862: PUSH
14863: LD_EXP 31
14867: PUSH
14868: LD_INT 1
14870: PLUS
14871: ST_TO_ADDR
// end ;
14872: PPOPN 1
14874: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14875: LD_VAR 0 1
14879: PUSH
14880: LD_INT 22
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 23
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 21
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: IN
14920: IFFALSE 14932
14922: PUSH
14923: LD_VAR 0 2
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: AND
14932: IFFALSE 14938
// JMMTraitor ;
14934: CALL 8813 0 0
// end ;
14938: PPOPN 3
14940: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 255
14950: PUSH
14951: LD_INT 3
14953: EQUAL
14954: IFFALSE 15032
// begin ComMoveXY ( driver , 6 , 10 ) ;
14956: LD_VAR 0 1
14960: PPUSH
14961: LD_INT 6
14963: PPUSH
14964: LD_INT 10
14966: PPUSH
14967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14971: LD_INT 35
14973: PPUSH
14974: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14978: LD_VAR 0 1
14982: PPUSH
14983: LD_INT 6
14985: PPUSH
14986: LD_INT 10
14988: PPUSH
14989: CALL_OW 111
// if IsDead ( driver ) then
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL_OW 301
15002: IFFALSE 15006
// exit ;
15004: GO 15032
// until IsAt ( driver , 6 , 10 ) ;
15006: LD_VAR 0 1
15010: PPUSH
15011: LD_INT 6
15013: PPUSH
15014: LD_INT 10
15016: PPUSH
15017: CALL_OW 307
15021: IFFALSE 14971
// RemoveUnit ( driver ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 64
// end ; end ;
15032: PPOPN 4
15034: END
// on Command ( cmd ) do var i , j , tmp ;
15035: LD_INT 0
15037: PPUSH
15038: PPUSH
15039: PPUSH
// begin SOS_Command ( cmd ) ;
15040: LD_VAR 0 1
15044: PPUSH
15045: CALL 33202 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: LD_INT 22
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PPUSH
15078: CALL_OW 69
15082: PUSH
15083: FOR_IN
15084: IFFALSE 15209
// begin if GetTaskList ( i ) then
15086: LD_VAR 0 2
15090: PPUSH
15091: CALL_OW 437
15095: IFFALSE 15207
// begin for j = 1 to GetTaskList ( i ) do
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: DOUBLE
15103: LD_INT 1
15105: DEC
15106: ST_TO_ADDR
15107: LD_VAR 0 2
15111: PPUSH
15112: CALL_OW 437
15116: PUSH
15117: FOR_TO
15118: IFFALSE 15205
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_VAR 0 2
15129: PPUSH
15130: CALL_OW 437
15134: PUSH
15135: LD_VAR 0 3
15139: ARRAY
15140: PUSH
15141: LD_INT 4
15143: ARRAY
15144: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15145: LD_VAR 0 4
15149: PPUSH
15150: CALL_OW 255
15154: PUSH
15155: LD_INT 3
15157: EQUAL
15158: IFFALSE 15175
15160: PUSH
15161: LD_VAR 0 4
15165: PPUSH
15166: CALL_OW 247
15170: PUSH
15171: LD_INT 2
15173: EQUAL
15174: AND
15175: IFFALSE 15192
15177: PUSH
15178: LD_VAR 0 4
15182: PPUSH
15183: CALL_OW 264
15187: PUSH
15188: LD_INT 51
15190: EQUAL
15191: AND
15192: IFFALSE 15203
// ComStop ( i ) ;
15194: LD_VAR 0 2
15198: PPUSH
15199: CALL_OW 141
// end ;
15203: GO 15117
15205: POP
15206: POP
// end ; end ;
15207: GO 15083
15209: POP
15210: POP
// end ;
15211: PPOPN 4
15213: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15214: LD_VAR 0 2
15218: PUSH
15219: LD_EXP 8
15223: EQUAL
15224: IFFALSE 15236
15226: PUSH
15227: LD_EXP 21
15231: PUSH
15232: LD_INT 4
15234: NONEQUAL
15235: AND
15236: IFFALSE 15390
// begin if IsOk ( Mikhail ) then
15238: LD_EXP 8
15242: PPUSH
15243: CALL_OW 302
15247: IFFALSE 15255
// AskMikhail else
15249: CALL 7479 0 0
15253: GO 15390
// if IsOk ( llab1 ) then
15255: LD_INT 23
15257: PPUSH
15258: CALL_OW 302
15262: IFFALSE 15353
// begin InGameOn ;
15264: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15268: LD_EXP 8
15272: PPUSH
15273: LD_INT 6
15275: PPUSH
15276: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15280: LD_INT 23
15282: PPUSH
15283: LD_INT 6
15285: PPUSH
15286: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15290: LD_EXP 8
15294: PPUSH
15295: LD_INT 23
15297: PPUSH
15298: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15302: LD_INT 35
15304: PPUSH
15305: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15309: LD_EXP 8
15313: PPUSH
15314: CALL_OW 310
15318: PUSH
15319: LD_INT 23
15321: EQUAL
15322: IFTRUE 15335
15324: PUSH
15325: LD_EXP 8
15329: PPUSH
15330: CALL_OW 301
15334: OR
15335: IFFALSE 15302
// SetSide ( llab1 , 1 ) ;
15337: LD_INT 23
15339: PPUSH
15340: LD_INT 1
15342: PPUSH
15343: CALL_OW 235
// InGameOff ;
15347: CALL_OW 9
// end else
15351: GO 15390
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15353: LD_INT 3
15355: PPUSH
15356: LD_INT 6
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: LD_INT 1
15364: PPUSH
15365: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15369: LD_EXP 8
15373: PPUSH
15374: LD_INT 6
15376: PPUSH
15377: CALL_OW 235
// ComHold ( Mikhail ) ;
15381: LD_EXP 8
15385: PPUSH
15386: CALL_OW 140
// end ; end ; end ;
15390: PPOPN 2
15392: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_VAR 0 2
15402: PPUSH
15403: CALL 33218 0 2
// end ;
15407: PPOPN 2
15409: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15410: LD_EXP 8
15414: PPUSH
15415: CALL_OW 257
15419: PUSH
15420: LD_INT 3
15422: NONEQUAL
15423: IFFALSE 15441
15425: GO 15427
15427: DISABLE
// begin enable ;
15428: ENABLE
// SetClass ( Mikhail , 3 ) ;
15429: LD_EXP 8
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: CALL_OW 336
// end ; end_of_file
15441: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15442: LD_INT 22
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 25
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: PUSH
15482: LD_INT 0
15484: EQUAL
15485: IFFALSE 15532
15487: PUSH
15488: LD_INT 22
15490: PUSH
15491: LD_INT 4
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 25
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: PUSH
15528: LD_INT 0
15530: EQUAL
15531: AND
15532: IFFALSE 15547
15534: PUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 255
15542: PUSH
15543: LD_INT 3
15545: EQUAL
15546: AND
15547: IFFALSE 15562
15549: PUSH
15550: LD_INT 10
15552: PPUSH
15553: CALL_OW 255
15557: PUSH
15558: LD_INT 3
15560: EQUAL
15561: AND
15562: IFFALSE 15574
15564: GO 15566
15566: DISABLE
// YouLost ( Engineer ) ;
15567: LD_STRING Engineer
15569: PPUSH
15570: CALL_OW 104
15574: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 255
15582: PUSH
15583: LD_INT 3
15585: EQUAL
15586: IFFALSE 15598
15588: PUSH
15589: LD_EXP 27
15593: PUSH
15594: LD_INT 1
15596: EQUAL
15597: AND
15598: IFFALSE 15610
15600: GO 15602
15602: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15603: LD_STRING DepotCaptured
15605: PPUSH
15606: CALL_OW 104
15610: END
// export function PrepareTigers ; var i , un ; begin
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
15615: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: DOUBLE
15622: LD_INT 1
15624: DEC
15625: ST_TO_ADDR
15626: LD_INT 2
15628: PUSH
15629: LD_INT 3
15631: PUSH
15632: LD_INT 4
15634: PUSH
15635: LD_INT 5
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: PUSH
15644: LD_OWVAR 67
15648: ARRAY
15649: PUSH
15650: FOR_TO
15651: IFFALSE 15766
// begin uc_side := 0 ;
15653: LD_ADDR_OWVAR 20
15657: PUSH
15658: LD_INT 0
15660: ST_TO_ADDR
// uc_nation := nation_nature ;
15661: LD_ADDR_OWVAR 21
15665: PUSH
15666: LD_INT 0
15668: ST_TO_ADDR
// hc_sex := sex_male ;
15669: LD_ADDR_OWVAR 27
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// hc_class := class_tiger ;
15677: LD_ADDR_OWVAR 28
15681: PUSH
15682: LD_INT 14
15684: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15685: LD_ADDR_OWVAR 31
15689: PUSH
15690: LD_EXP 14
15694: PUSH
15695: LD_INT 0
15697: PUSH
15698: LD_INT 0
15700: PUSH
15701: LD_INT 0
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15710: LD_ADDR_OWVAR 35
15714: PUSH
15715: LD_INT 30
15717: PUSH
15718: LD_INT 40
15720: PUSH
15721: LD_INT 45
15723: PUSH
15724: LD_INT 50
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_OWVAR 67
15737: ARRAY
15738: ST_TO_ADDR
// un = CreateHuman ;
15739: LD_ADDR_VAR 0 3
15743: PUSH
15744: CALL_OW 44
15748: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_INT 27
15756: PPUSH
15757: LD_INT 0
15759: PPUSH
15760: CALL_OW 49
// end ;
15764: GO 15650
15766: POP
15767: POP
// end ; end_of_file
15768: LD_VAR 0 1
15772: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 255
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15799
15786: PUSH
15787: LD_INT 10
15789: PPUSH
15790: CALL_OW 255
15794: PUSH
15795: LD_INT 1
15797: EQUAL
15798: AND
15799: IFFALSE 15811
15801: PUSH
15802: LD_EXP 20
15806: PUSH
15807: LD_INT 1
15809: EQUAL
15810: AND
15811: IFFALSE 15872
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 3
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 21
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 34
15836: PUSH
15837: LD_INT 51
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: PUSH
15847: LD_INT 58
15849: PUSH
15850: EMPTY
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: PUSH
15868: LD_INT 0
15870: EQUAL
15871: AND
15872: IFFALSE 15963
15874: GO 15876
15876: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15877: LD_INT 9450
15879: PUSH
15880: LD_INT 8400
15882: PUSH
15883: LD_INT 6300
15885: PUSH
15886: LD_INT 6300
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: PUSH
15895: LD_OWVAR 67
15899: ARRAY
15900: PPUSH
15901: CALL_OW 67
// if cargoEscape then
15905: LD_EXP 20
15909: IFFALSE 15963
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15911: LD_EXP 9
15915: PPUSH
15916: LD_STRING D6-Pow-1
15918: PPUSH
15919: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15923: LD_EXP 1
15927: PPUSH
15928: LD_STRING D6-JMM-1
15930: PPUSH
15931: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15935: LD_EXP 9
15939: PPUSH
15940: LD_STRING D6-Pow-2
15942: PPUSH
15943: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15947: LD_EXP 1
15951: PPUSH
15952: LD_STRING D6-JMM-2
15954: PPUSH
15955: CALL_OW 88
// FinishMission ;
15959: CALL 16185 0 0
// end ; end ;
15963: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 255
15971: PUSH
15972: LD_INT 1
15974: EQUAL
15975: IFFALSE 15990
15977: PUSH
15978: LD_INT 10
15980: PPUSH
15981: CALL_OW 255
15985: PUSH
15986: LD_INT 1
15988: EQUAL
15989: AND
15990: IFFALSE 16002
15992: PUSH
15993: LD_EXP 20
15997: PUSH
15998: LD_INT 1
16000: GREATER
16001: AND
16002: IFFALSE 16077
16004: GO 16006
16006: DISABLE
16007: LD_INT 0
16009: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
16010: LD_INT 11550
16012: PUSH
16013: LD_INT 10500
16015: PUSH
16016: LD_INT 9450
16018: PUSH
16019: LD_INT 8400
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: PUSH
16028: LD_OWVAR 67
16032: ARRAY
16033: PPUSH
16034: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
16038: LD_INT 1
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: LD_OWVAR 67
16060: ARRAY
16061: PPUSH
16062: LD_INT 13
16064: PPUSH
16065: CALL 13552 0 2
// lastBattle = 1 ;
16069: LD_ADDR_EXP 27
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// end ;
16077: PPOPN 1
16079: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16080: LD_EXP 27
16084: PUSH
16085: LD_INT 1
16087: EQUAL
16088: IFFALSE 16127
16090: PUSH
16091: LD_INT 26
16093: PPUSH
16094: LD_INT 22
16096: PUSH
16097: LD_INT 3
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 70
16122: PUSH
16123: LD_INT 0
16125: EQUAL
16126: AND
16127: IFFALSE 16184
16129: GO 16131
16131: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
16132: LD_EXP 9
16136: PPUSH
16137: LD_STRING D6-Pow-1
16139: PPUSH
16140: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16144: LD_EXP 1
16148: PPUSH
16149: LD_STRING D6-JMM-1
16151: PPUSH
16152: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16156: LD_EXP 9
16160: PPUSH
16161: LD_STRING D6-Pow-2
16163: PPUSH
16164: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING D6-JMM-2
16175: PPUSH
16176: CALL_OW 88
// FinishMission ;
16180: CALL 16185 0 0
// end ;
16184: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
16189: PPUSH
16190: PPUSH
16191: PPUSH
// if traitor then
16192: LD_EXP 33
16196: IFFALSE 16200
// exit ;
16198: GO 17076
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16200: LD_INT 22
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 21
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 23
16222: PUSH
16223: LD_INT 1
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 50
16232: PUSH
16233: EMPTY
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: PUSH
16247: LD_INT 2
16249: LESS
16250: IFFALSE 16259
// YouLost ( Troops ) ;
16252: LD_STRING Troops
16254: PPUSH
16255: CALL_OW 104
// if tick <= 18 18$00 then
16259: LD_OWVAR 1
16263: PUSH
16264: LD_INT 37800
16266: LESSEQUAL
16267: IFFALSE 16276
// SetAchievement ( ACH_ASPEED_2 ) ;
16269: LD_STRING ACH_ASPEED_2
16271: PPUSH
16272: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16276: LD_ADDR_VAR 0 2
16280: PUSH
16281: LD_INT 22
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 21
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 251
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if tmp then
16321: LD_VAR 0 2
16325: IFFALSE 16339
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_STRING 02_tanks_1
16334: PPUSH
16335: CALL 10896 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16339: LD_EXP 21
16343: PUSH
16344: LD_INT 1
16346: EQUAL
16347: IFFALSE 16360
16349: PUSH
16350: LD_EXP 8
16354: PPUSH
16355: CALL_OW 300
16359: AND
16360: IFFALSE 16374
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16362: LD_EXP 21
16366: PPUSH
16367: LD_STRING 02_mikhailStatus_1
16369: PPUSH
16370: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 274
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 275
16389: PPUSH
16390: LD_STRING 02_resources_4
16392: PPUSH
16393: CALL_OW 39
// m1 := false ;
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: LD_INT 0
16404: ST_TO_ADDR
// m2 := false ;
16405: LD_ADDR_VAR 0 4
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// m3 := false ;
16413: LD_ADDR_VAR 0 5
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 274
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 275
16436: PUSH
16437: LD_INT 200
16439: GREATEREQUAL
16440: IFFALSE 16462
// begin AddMedal ( Cans , 1 ) ;
16442: LD_STRING Cans
16444: PPUSH
16445: LD_INT 1
16447: PPUSH
16448: CALL_OW 101
// m1 := true ;
16452: LD_ADDR_VAR 0 3
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// end else
16460: GO 16473
// begin AddMedal ( Cans , - 1 ) ;
16462: LD_STRING Cans
16464: PPUSH
16465: LD_INT 1
16467: NEG
16468: PPUSH
16469: CALL_OW 101
// end ; if deadsCounter < 2 then
16473: LD_EXP 31
16477: PUSH
16478: LD_INT 2
16480: LESS
16481: IFFALSE 16503
// begin AddMedal ( Deaths , 1 ) ;
16483: LD_STRING Deaths
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 101
// m2 := true ;
16493: LD_ADDR_VAR 0 4
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// end else
16501: GO 16514
// begin AddMedal ( Deaths , - 1 ) ;
16503: LD_STRING Deaths
16505: PPUSH
16506: LD_INT 1
16508: NEG
16509: PPUSH
16510: CALL_OW 101
// end ; if mikhailStatus = 0 then
16514: LD_EXP 21
16518: PUSH
16519: LD_INT 0
16521: EQUAL
16522: IFFALSE 16535
// AddMedal ( Prisoner , - 1 ) ;
16524: LD_STRING Prisoner
16526: PPUSH
16527: LD_INT 1
16529: NEG
16530: PPUSH
16531: CALL_OW 101
// if mikhailStatus = 1 then
16535: LD_EXP 21
16539: PUSH
16540: LD_INT 1
16542: EQUAL
16543: IFFALSE 16563
// begin AddMedal ( Prisoner , 1 ) ;
16545: LD_STRING Prisoner
16547: PPUSH
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 101
// m3 := true ;
16555: LD_ADDR_VAR 0 5
16559: PUSH
16560: LD_INT 1
16562: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16563: LD_EXP 21
16567: PUSH
16568: LD_INT 2
16570: EQUAL
16571: IFFALSE 16591
// begin AddMedal ( Prisoner , 2 ) ;
16573: LD_STRING Prisoner
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 101
// m3 := true ;
16583: LD_ADDR_VAR 0 5
16587: PUSH
16588: LD_INT 1
16590: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16591: LD_EXP 21
16595: PUSH
16596: LD_INT 3
16598: EQUAL
16599: IFFALSE 16612
// AddMedal ( Prisoner , - 2 ) ;
16601: LD_STRING Prisoner
16603: PPUSH
16604: LD_INT 2
16606: NEG
16607: PPUSH
16608: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16612: LD_OWVAR 67
16616: PUSH
16617: LD_INT 3
16619: GREATEREQUAL
16620: IFFALSE 16628
16622: PUSH
16623: LD_VAR 0 3
16627: AND
16628: IFFALSE 16636
16630: PUSH
16631: LD_VAR 0 4
16635: AND
16636: IFFALSE 16644
16638: PUSH
16639: LD_VAR 0 5
16643: AND
16644: IFFALSE 16656
// SetAchievementEX ( ACH_AMER , 2 ) ;
16646: LD_STRING ACH_AMER
16648: PPUSH
16649: LD_INT 2
16651: PPUSH
16652: CALL_OW 564
// GiveMedals ( MAIN ) ;
16656: LD_STRING MAIN
16658: PPUSH
16659: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16663: LD_INT 22
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 23
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 21
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 69
16702: PPUSH
16703: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16707: LD_EXP 1
16711: PPUSH
16712: LD_EXP 34
16716: PUSH
16717: LD_STRING JMM
16719: STR
16720: PPUSH
16721: CALL_OW 38
// if IsOK ( Bobby ) then
16725: LD_EXP 2
16729: PPUSH
16730: CALL_OW 302
16734: IFFALSE 16754
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16736: LD_EXP 2
16740: PPUSH
16741: LD_EXP 34
16745: PUSH
16746: LD_STRING Bobby
16748: STR
16749: PPUSH
16750: CALL_OW 38
// if IsOK ( Cyrus ) then
16754: LD_EXP 3
16758: PPUSH
16759: CALL_OW 302
16763: IFFALSE 16783
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16765: LD_EXP 3
16769: PPUSH
16770: LD_EXP 34
16774: PUSH
16775: LD_STRING Cyrus
16777: STR
16778: PPUSH
16779: CALL_OW 38
// if IsOK ( Lisa ) then
16783: LD_EXP 4
16787: PPUSH
16788: CALL_OW 302
16792: IFFALSE 16819
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16794: LD_STRING enableBioCharacter(BIO_LISA)
16796: PPUSH
16797: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16801: LD_EXP 4
16805: PPUSH
16806: LD_EXP 34
16810: PUSH
16811: LD_STRING Lisa
16813: STR
16814: PPUSH
16815: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16819: LD_EXP 5
16823: PPUSH
16824: CALL_OW 302
16828: IFFALSE 16855
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16830: LD_STRING enableBioCharacter(BIO_KHAT)
16832: PPUSH
16833: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16837: LD_EXP 5
16841: PPUSH
16842: LD_EXP 34
16846: PUSH
16847: LD_STRING Khatam
16849: STR
16850: PPUSH
16851: CALL_OW 38
// end ; if IsOK ( Brian ) then
16855: LD_EXP 6
16859: PPUSH
16860: CALL_OW 302
16864: IFFALSE 16884
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16866: LD_EXP 6
16870: PPUSH
16871: LD_EXP 34
16875: PUSH
16876: LD_STRING Brian
16878: STR
16879: PPUSH
16880: CALL_OW 38
// if IsOk ( Jerry ) then
16884: LD_EXP 7
16888: PPUSH
16889: CALL_OW 302
16893: IFFALSE 16913
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16895: LD_EXP 7
16899: PPUSH
16900: LD_EXP 34
16904: PUSH
16905: LD_STRING Jerry
16907: STR
16908: PPUSH
16909: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16913: LD_EXP 21
16917: PUSH
16918: LD_INT 1
16920: EQUAL
16921: IFFALSE 16938
16923: PUSH
16924: LD_EXP 8
16928: PPUSH
16929: CALL_OW 255
16933: PUSH
16934: LD_INT 1
16936: EQUAL
16937: AND
16938: IFFALSE 16951
16940: PUSH
16941: LD_EXP 8
16945: PPUSH
16946: CALL_OW 302
16950: AND
16951: IFFALSE 16978
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16953: LD_STRING enableBioCharacter(BIO_MICH)
16955: PPUSH
16956: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16960: LD_EXP 8
16964: PPUSH
16965: LD_EXP 34
16969: PUSH
16970: LD_STRING Mikhail
16972: STR
16973: PPUSH
16974: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16978: LD_INT 50
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: PPUSH
17009: CALL_OW 69
17013: PUSH
17014: LD_EXP 1
17018: PUSH
17019: LD_EXP 2
17023: PUSH
17024: LD_EXP 3
17028: PUSH
17029: LD_EXP 4
17033: PUSH
17034: LD_EXP 5
17038: PUSH
17039: LD_EXP 6
17043: PUSH
17044: LD_EXP 7
17048: PUSH
17049: LD_EXP 8
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: DIFF
17064: PPUSH
17065: LD_STRING 02_other_survivors
17067: PPUSH
17068: CALL_OW 38
// YouWin ;
17072: CALL_OW 103
// end ; end_of_file end_of_file
17076: LD_VAR 0 1
17080: RET
// export globalGameSaveCounter ; every 0 0$1 do
17081: GO 17083
17083: DISABLE
// begin enable ;
17084: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17085: LD_STRING updateTimer(
17087: PUSH
17088: LD_OWVAR 1
17092: STR
17093: PUSH
17094: LD_STRING );
17096: STR
17097: PPUSH
17098: CALL_OW 559
// end ;
17102: END
// every 0 0$1 do
17103: GO 17105
17105: DISABLE
// begin globalGameSaveCounter := 0 ;
17106: LD_ADDR_EXP 37
17110: PUSH
17111: LD_INT 0
17113: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17114: LD_STRING setGameSaveCounter(0)
17116: PPUSH
17117: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17121: LD_STRING initStreamRollete();
17123: PPUSH
17124: CALL_OW 559
// InitStreamMode ;
17128: CALL 18473 0 0
// DefineStreamItems ( false ) ;
17132: LD_INT 0
17134: PPUSH
17135: CALL 18937 0 1
// end ;
17139: END
// export function SOS_MapStart ( ) ; begin
17140: LD_INT 0
17142: PPUSH
// if streamModeActive then
17143: LD_EXP 38
17147: IFFALSE 17156
// DefineStreamItems ( true ) ;
17149: LD_INT 1
17151: PPUSH
17152: CALL 18937 0 1
// UpdateLuaVariables ( ) ;
17156: CALL 17173 0 0
// UpdateFactoryWaypoints ( ) ;
17160: CALL 32059 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17164: CALL 32311 0 0
// end ;
17168: LD_VAR 0 1
17172: RET
// function UpdateLuaVariables ( ) ; begin
17173: LD_INT 0
17175: PPUSH
// if globalGameSaveCounter then
17176: LD_EXP 37
17180: IFFALSE 17214
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17182: LD_ADDR_EXP 37
17186: PUSH
17187: LD_EXP 37
17191: PPUSH
17192: CALL 78892 0 1
17196: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17197: LD_STRING setGameSaveCounter(
17199: PUSH
17200: LD_EXP 37
17204: STR
17205: PUSH
17206: LD_STRING )
17208: STR
17209: PPUSH
17210: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17214: LD_STRING setGameDifficulty(
17216: PUSH
17217: LD_OWVAR 67
17221: STR
17222: PUSH
17223: LD_STRING )
17225: STR
17226: PPUSH
17227: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17231: LD_STRING displayDifficulty(
17233: PUSH
17234: LD_OWVAR 67
17238: STR
17239: PUSH
17240: LD_STRING )
17242: STR
17243: PPUSH
17244: CALL_OW 559
// end ;
17248: LD_VAR 0 1
17252: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17253: LD_INT 0
17255: PPUSH
// if p2 = stream_mode then
17256: LD_VAR 0 2
17260: PUSH
17261: LD_INT 100
17263: EQUAL
17264: IFFALSE 18267
// begin if not StreamModeActive then
17266: LD_EXP 38
17270: NOT
17271: IFFALSE 17281
// StreamModeActive := true ;
17273: LD_ADDR_EXP 38
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// if p3 = 0 then
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 0
17288: EQUAL
17289: IFFALSE 17295
// InitStreamMode ;
17291: CALL 18473 0 0
// if p3 = 1 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_INT 1
17302: EQUAL
17303: IFFALSE 17313
// sRocket := true ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// if p3 = 2 then
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 2
17320: EQUAL
17321: IFFALSE 17331
// sSpeed := true ;
17323: LD_ADDR_EXP 42
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// if p3 = 3 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 3
17338: EQUAL
17339: IFFALSE 17349
// sEngine := true ;
17341: LD_ADDR_EXP 44
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// if p3 = 4 then
17349: LD_VAR 0 3
17353: PUSH
17354: LD_INT 4
17356: EQUAL
17357: IFFALSE 17367
// sSpec := true ;
17359: LD_ADDR_EXP 41
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// if p3 = 5 then
17367: LD_VAR 0 3
17371: PUSH
17372: LD_INT 5
17374: EQUAL
17375: IFFALSE 17385
// sLevel := true ;
17377: LD_ADDR_EXP 45
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// if p3 = 6 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_INT 6
17392: EQUAL
17393: IFFALSE 17403
// sArmoury := true ;
17395: LD_ADDR_EXP 46
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// if p3 = 7 then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_INT 7
17410: EQUAL
17411: IFFALSE 17421
// sRadar := true ;
17413: LD_ADDR_EXP 47
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// if p3 = 8 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 8
17428: EQUAL
17429: IFFALSE 17439
// sBunker := true ;
17431: LD_ADDR_EXP 48
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if p3 = 9 then
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 9
17446: EQUAL
17447: IFFALSE 17457
// sHack := true ;
17449: LD_ADDR_EXP 49
17453: PUSH
17454: LD_INT 1
17456: ST_TO_ADDR
// if p3 = 10 then
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 10
17464: EQUAL
17465: IFFALSE 17475
// sFire := true ;
17467: LD_ADDR_EXP 50
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// if p3 = 11 then
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 11
17482: EQUAL
17483: IFFALSE 17493
// sRefresh := true ;
17485: LD_ADDR_EXP 51
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// if p3 = 12 then
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 12
17500: EQUAL
17501: IFFALSE 17511
// sExp := true ;
17503: LD_ADDR_EXP 52
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if p3 = 13 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 13
17518: EQUAL
17519: IFFALSE 17529
// sDepot := true ;
17521: LD_ADDR_EXP 53
17525: PUSH
17526: LD_INT 1
17528: ST_TO_ADDR
// if p3 = 14 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_INT 14
17536: EQUAL
17537: IFFALSE 17547
// sFlag := true ;
17539: LD_ADDR_EXP 54
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if p3 = 15 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 15
17554: EQUAL
17555: IFFALSE 17565
// sKamikadze := true ;
17557: LD_ADDR_EXP 62
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// if p3 = 16 then
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 16
17572: EQUAL
17573: IFFALSE 17583
// sTroll := true ;
17575: LD_ADDR_EXP 63
17579: PUSH
17580: LD_INT 1
17582: ST_TO_ADDR
// if p3 = 17 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 17
17590: EQUAL
17591: IFFALSE 17601
// sSlow := true ;
17593: LD_ADDR_EXP 64
17597: PUSH
17598: LD_INT 1
17600: ST_TO_ADDR
// if p3 = 18 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_INT 18
17608: EQUAL
17609: IFFALSE 17619
// sLack := true ;
17611: LD_ADDR_EXP 65
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// if p3 = 19 then
17619: LD_VAR 0 3
17623: PUSH
17624: LD_INT 19
17626: EQUAL
17627: IFFALSE 17637
// sTank := true ;
17629: LD_ADDR_EXP 67
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// if p3 = 20 then
17637: LD_VAR 0 3
17641: PUSH
17642: LD_INT 20
17644: EQUAL
17645: IFFALSE 17655
// sRemote := true ;
17647: LD_ADDR_EXP 68
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// if p3 = 21 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 21
17662: EQUAL
17663: IFFALSE 17673
// sPowell := true ;
17665: LD_ADDR_EXP 69
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// if p3 = 22 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 22
17680: EQUAL
17681: IFFALSE 17691
// sTeleport := true ;
17683: LD_ADDR_EXP 72
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// if p3 = 23 then
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 23
17698: EQUAL
17699: IFFALSE 17709
// sOilTower := true ;
17701: LD_ADDR_EXP 74
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// if p3 = 24 then
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 24
17716: EQUAL
17717: IFFALSE 17727
// sShovel := true ;
17719: LD_ADDR_EXP 75
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// if p3 = 25 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 25
17734: EQUAL
17735: IFFALSE 17745
// sSheik := true ;
17737: LD_ADDR_EXP 76
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// if p3 = 26 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 26
17752: EQUAL
17753: IFFALSE 17763
// sEarthquake := true ;
17755: LD_ADDR_EXP 78
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
// if p3 = 27 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_INT 27
17770: EQUAL
17771: IFFALSE 17781
// sAI := true ;
17773: LD_ADDR_EXP 79
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// if p3 = 28 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_INT 28
17788: EQUAL
17789: IFFALSE 17799
// sCargo := true ;
17791: LD_ADDR_EXP 82
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
// if p3 = 29 then
17799: LD_VAR 0 3
17803: PUSH
17804: LD_INT 29
17806: EQUAL
17807: IFFALSE 17817
// sDLaser := true ;
17809: LD_ADDR_EXP 83
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// if p3 = 30 then
17817: LD_VAR 0 3
17821: PUSH
17822: LD_INT 30
17824: EQUAL
17825: IFFALSE 17835
// sExchange := true ;
17827: LD_ADDR_EXP 84
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// if p3 = 31 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_INT 31
17842: EQUAL
17843: IFFALSE 17853
// sFac := true ;
17845: LD_ADDR_EXP 85
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// if p3 = 32 then
17853: LD_VAR 0 3
17857: PUSH
17858: LD_INT 32
17860: EQUAL
17861: IFFALSE 17871
// sPower := true ;
17863: LD_ADDR_EXP 86
17867: PUSH
17868: LD_INT 1
17870: ST_TO_ADDR
// if p3 = 33 then
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 33
17878: EQUAL
17879: IFFALSE 17889
// sRandom := true ;
17881: LD_ADDR_EXP 87
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// if p3 = 34 then
17889: LD_VAR 0 3
17893: PUSH
17894: LD_INT 34
17896: EQUAL
17897: IFFALSE 17907
// sShield := true ;
17899: LD_ADDR_EXP 88
17903: PUSH
17904: LD_INT 1
17906: ST_TO_ADDR
// if p3 = 35 then
17907: LD_VAR 0 3
17911: PUSH
17912: LD_INT 35
17914: EQUAL
17915: IFFALSE 17925
// sTime := true ;
17917: LD_ADDR_EXP 89
17921: PUSH
17922: LD_INT 1
17924: ST_TO_ADDR
// if p3 = 36 then
17925: LD_VAR 0 3
17929: PUSH
17930: LD_INT 36
17932: EQUAL
17933: IFFALSE 17943
// sTools := true ;
17935: LD_ADDR_EXP 90
17939: PUSH
17940: LD_INT 1
17942: ST_TO_ADDR
// if p3 = 101 then
17943: LD_VAR 0 3
17947: PUSH
17948: LD_INT 101
17950: EQUAL
17951: IFFALSE 17961
// sSold := true ;
17953: LD_ADDR_EXP 55
17957: PUSH
17958: LD_INT 1
17960: ST_TO_ADDR
// if p3 = 102 then
17961: LD_VAR 0 3
17965: PUSH
17966: LD_INT 102
17968: EQUAL
17969: IFFALSE 17979
// sDiff := true ;
17971: LD_ADDR_EXP 56
17975: PUSH
17976: LD_INT 1
17978: ST_TO_ADDR
// if p3 = 103 then
17979: LD_VAR 0 3
17983: PUSH
17984: LD_INT 103
17986: EQUAL
17987: IFFALSE 17997
// sFog := true ;
17989: LD_ADDR_EXP 59
17993: PUSH
17994: LD_INT 1
17996: ST_TO_ADDR
// if p3 = 104 then
17997: LD_VAR 0 3
18001: PUSH
18002: LD_INT 104
18004: EQUAL
18005: IFFALSE 18015
// sReset := true ;
18007: LD_ADDR_EXP 60
18011: PUSH
18012: LD_INT 1
18014: ST_TO_ADDR
// if p3 = 105 then
18015: LD_VAR 0 3
18019: PUSH
18020: LD_INT 105
18022: EQUAL
18023: IFFALSE 18033
// sSun := true ;
18025: LD_ADDR_EXP 61
18029: PUSH
18030: LD_INT 1
18032: ST_TO_ADDR
// if p3 = 106 then
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 106
18040: EQUAL
18041: IFFALSE 18051
// sTiger := true ;
18043: LD_ADDR_EXP 57
18047: PUSH
18048: LD_INT 1
18050: ST_TO_ADDR
// if p3 = 107 then
18051: LD_VAR 0 3
18055: PUSH
18056: LD_INT 107
18058: EQUAL
18059: IFFALSE 18069
// sBomb := true ;
18061: LD_ADDR_EXP 58
18065: PUSH
18066: LD_INT 1
18068: ST_TO_ADDR
// if p3 = 108 then
18069: LD_VAR 0 3
18073: PUSH
18074: LD_INT 108
18076: EQUAL
18077: IFFALSE 18087
// sWound := true ;
18079: LD_ADDR_EXP 66
18083: PUSH
18084: LD_INT 1
18086: ST_TO_ADDR
// if p3 = 109 then
18087: LD_VAR 0 3
18091: PUSH
18092: LD_INT 109
18094: EQUAL
18095: IFFALSE 18105
// sBetray := true ;
18097: LD_ADDR_EXP 70
18101: PUSH
18102: LD_INT 1
18104: ST_TO_ADDR
// if p3 = 110 then
18105: LD_VAR 0 3
18109: PUSH
18110: LD_INT 110
18112: EQUAL
18113: IFFALSE 18123
// sContamin := true ;
18115: LD_ADDR_EXP 71
18119: PUSH
18120: LD_INT 1
18122: ST_TO_ADDR
// if p3 = 111 then
18123: LD_VAR 0 3
18127: PUSH
18128: LD_INT 111
18130: EQUAL
18131: IFFALSE 18141
// sOil := true ;
18133: LD_ADDR_EXP 73
18137: PUSH
18138: LD_INT 1
18140: ST_TO_ADDR
// if p3 = 112 then
18141: LD_VAR 0 3
18145: PUSH
18146: LD_INT 112
18148: EQUAL
18149: IFFALSE 18159
// sStu := true ;
18151: LD_ADDR_EXP 77
18155: PUSH
18156: LD_INT 1
18158: ST_TO_ADDR
// if p3 = 113 then
18159: LD_VAR 0 3
18163: PUSH
18164: LD_INT 113
18166: EQUAL
18167: IFFALSE 18177
// sBazooka := true ;
18169: LD_ADDR_EXP 80
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// if p3 = 114 then
18177: LD_VAR 0 3
18181: PUSH
18182: LD_INT 114
18184: EQUAL
18185: IFFALSE 18195
// sMortar := true ;
18187: LD_ADDR_EXP 81
18191: PUSH
18192: LD_INT 1
18194: ST_TO_ADDR
// if p3 = 115 then
18195: LD_VAR 0 3
18199: PUSH
18200: LD_INT 115
18202: EQUAL
18203: IFFALSE 18213
// sRanger := true ;
18205: LD_ADDR_EXP 91
18209: PUSH
18210: LD_INT 1
18212: ST_TO_ADDR
// if p3 = 116 then
18213: LD_VAR 0 3
18217: PUSH
18218: LD_INT 116
18220: EQUAL
18221: IFFALSE 18231
// sComputer := true ;
18223: LD_ADDR_EXP 92
18227: PUSH
18228: LD_INT 1
18230: ST_TO_ADDR
// if p3 = 117 then
18231: LD_VAR 0 3
18235: PUSH
18236: LD_INT 117
18238: EQUAL
18239: IFFALSE 18249
// s30 := true ;
18241: LD_ADDR_EXP 93
18245: PUSH
18246: LD_INT 1
18248: ST_TO_ADDR
// if p3 = 118 then
18249: LD_VAR 0 3
18253: PUSH
18254: LD_INT 118
18256: EQUAL
18257: IFFALSE 18267
// s60 := true ;
18259: LD_ADDR_EXP 94
18263: PUSH
18264: LD_INT 1
18266: ST_TO_ADDR
// end ; if p2 = hack_mode then
18267: LD_VAR 0 2
18271: PUSH
18272: LD_INT 101
18274: EQUAL
18275: IFFALSE 18403
// begin case p3 of 1 :
18277: LD_VAR 0 3
18281: PUSH
18282: LD_INT 1
18284: DOUBLE
18285: EQUAL
18286: IFTRUE 18290
18288: GO 18297
18290: POP
// hHackUnlimitedResources ; 2 :
18291: CALL 30666 0 0
18295: GO 18403
18297: LD_INT 2
18299: DOUBLE
18300: EQUAL
18301: IFTRUE 18305
18303: GO 18312
18305: POP
// hHackSetLevel10 ; 3 :
18306: CALL 30799 0 0
18310: GO 18403
18312: LD_INT 3
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18327
18320: POP
// hHackSetLevel10YourUnits ; 4 :
18321: CALL 30884 0 0
18325: GO 18403
18327: LD_INT 4
18329: DOUBLE
18330: EQUAL
18331: IFTRUE 18335
18333: GO 18342
18335: POP
// hHackInvincible ; 5 :
18336: CALL 31332 0 0
18340: GO 18403
18342: LD_INT 5
18344: DOUBLE
18345: EQUAL
18346: IFTRUE 18350
18348: GO 18357
18350: POP
// hHackInvisible ; 6 :
18351: CALL 31443 0 0
18355: GO 18403
18357: LD_INT 6
18359: DOUBLE
18360: EQUAL
18361: IFTRUE 18365
18363: GO 18372
18365: POP
// hHackChangeYourSide ; 7 :
18366: CALL 31500 0 0
18370: GO 18403
18372: LD_INT 7
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18387
18380: POP
// hHackChangeUnitSide ; 8 :
18381: CALL 31542 0 0
18385: GO 18403
18387: LD_INT 8
18389: DOUBLE
18390: EQUAL
18391: IFTRUE 18395
18393: GO 18402
18395: POP
// hHackFog ; end ;
18396: CALL 31643 0 0
18400: GO 18403
18402: POP
// end ; if p2 = game_save_mode then
18403: LD_VAR 0 2
18407: PUSH
18408: LD_INT 102
18410: EQUAL
18411: IFFALSE 18468
// begin if p3 = 1 then
18413: LD_VAR 0 3
18417: PUSH
18418: LD_INT 1
18420: EQUAL
18421: IFFALSE 18433
// globalGameSaveCounter := p4 ;
18423: LD_ADDR_EXP 37
18427: PUSH
18428: LD_VAR 0 4
18432: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18433: LD_VAR 0 3
18437: PUSH
18438: LD_INT 2
18440: EQUAL
18441: IFFALSE 18449
18443: PUSH
18444: LD_EXP 37
18448: AND
18449: IFFALSE 18468
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18451: LD_STRING setGameSaveCounter(
18453: PUSH
18454: LD_EXP 37
18458: STR
18459: PUSH
18460: LD_STRING )
18462: STR
18463: PPUSH
18464: CALL_OW 559
// end ; end ;
18468: LD_VAR 0 7
18472: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18473: LD_INT 0
18475: PPUSH
// streamModeActive := false ;
18476: LD_ADDR_EXP 38
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// normalCounter := 36 ;
18484: LD_ADDR_EXP 39
18488: PUSH
18489: LD_INT 36
18491: ST_TO_ADDR
// hardcoreCounter := 18 ;
18492: LD_ADDR_EXP 40
18496: PUSH
18497: LD_INT 18
18499: ST_TO_ADDR
// sRocket := false ;
18500: LD_ADDR_EXP 43
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// sSpeed := false ;
18508: LD_ADDR_EXP 42
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// sEngine := false ;
18516: LD_ADDR_EXP 44
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// sSpec := false ;
18524: LD_ADDR_EXP 41
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// sLevel := false ;
18532: LD_ADDR_EXP 45
18536: PUSH
18537: LD_INT 0
18539: ST_TO_ADDR
// sArmoury := false ;
18540: LD_ADDR_EXP 46
18544: PUSH
18545: LD_INT 0
18547: ST_TO_ADDR
// sRadar := false ;
18548: LD_ADDR_EXP 47
18552: PUSH
18553: LD_INT 0
18555: ST_TO_ADDR
// sBunker := false ;
18556: LD_ADDR_EXP 48
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// sHack := false ;
18564: LD_ADDR_EXP 49
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// sFire := false ;
18572: LD_ADDR_EXP 50
18576: PUSH
18577: LD_INT 0
18579: ST_TO_ADDR
// sRefresh := false ;
18580: LD_ADDR_EXP 51
18584: PUSH
18585: LD_INT 0
18587: ST_TO_ADDR
// sExp := false ;
18588: LD_ADDR_EXP 52
18592: PUSH
18593: LD_INT 0
18595: ST_TO_ADDR
// sDepot := false ;
18596: LD_ADDR_EXP 53
18600: PUSH
18601: LD_INT 0
18603: ST_TO_ADDR
// sFlag := false ;
18604: LD_ADDR_EXP 54
18608: PUSH
18609: LD_INT 0
18611: ST_TO_ADDR
// sKamikadze := false ;
18612: LD_ADDR_EXP 62
18616: PUSH
18617: LD_INT 0
18619: ST_TO_ADDR
// sTroll := false ;
18620: LD_ADDR_EXP 63
18624: PUSH
18625: LD_INT 0
18627: ST_TO_ADDR
// sSlow := false ;
18628: LD_ADDR_EXP 64
18632: PUSH
18633: LD_INT 0
18635: ST_TO_ADDR
// sLack := false ;
18636: LD_ADDR_EXP 65
18640: PUSH
18641: LD_INT 0
18643: ST_TO_ADDR
// sTank := false ;
18644: LD_ADDR_EXP 67
18648: PUSH
18649: LD_INT 0
18651: ST_TO_ADDR
// sRemote := false ;
18652: LD_ADDR_EXP 68
18656: PUSH
18657: LD_INT 0
18659: ST_TO_ADDR
// sPowell := false ;
18660: LD_ADDR_EXP 69
18664: PUSH
18665: LD_INT 0
18667: ST_TO_ADDR
// sTeleport := false ;
18668: LD_ADDR_EXP 72
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
// sOilTower := false ;
18676: LD_ADDR_EXP 74
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// sShovel := false ;
18684: LD_ADDR_EXP 75
18688: PUSH
18689: LD_INT 0
18691: ST_TO_ADDR
// sSheik := false ;
18692: LD_ADDR_EXP 76
18696: PUSH
18697: LD_INT 0
18699: ST_TO_ADDR
// sEarthquake := false ;
18700: LD_ADDR_EXP 78
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
// sAI := false ;
18708: LD_ADDR_EXP 79
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
// sCargo := false ;
18716: LD_ADDR_EXP 82
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// sDLaser := false ;
18724: LD_ADDR_EXP 83
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// sExchange := false ;
18732: LD_ADDR_EXP 84
18736: PUSH
18737: LD_INT 0
18739: ST_TO_ADDR
// sFac := false ;
18740: LD_ADDR_EXP 85
18744: PUSH
18745: LD_INT 0
18747: ST_TO_ADDR
// sPower := false ;
18748: LD_ADDR_EXP 86
18752: PUSH
18753: LD_INT 0
18755: ST_TO_ADDR
// sRandom := false ;
18756: LD_ADDR_EXP 87
18760: PUSH
18761: LD_INT 0
18763: ST_TO_ADDR
// sShield := false ;
18764: LD_ADDR_EXP 88
18768: PUSH
18769: LD_INT 0
18771: ST_TO_ADDR
// sTime := false ;
18772: LD_ADDR_EXP 89
18776: PUSH
18777: LD_INT 0
18779: ST_TO_ADDR
// sTools := false ;
18780: LD_ADDR_EXP 90
18784: PUSH
18785: LD_INT 0
18787: ST_TO_ADDR
// sSold := false ;
18788: LD_ADDR_EXP 55
18792: PUSH
18793: LD_INT 0
18795: ST_TO_ADDR
// sDiff := false ;
18796: LD_ADDR_EXP 56
18800: PUSH
18801: LD_INT 0
18803: ST_TO_ADDR
// sFog := false ;
18804: LD_ADDR_EXP 59
18808: PUSH
18809: LD_INT 0
18811: ST_TO_ADDR
// sReset := false ;
18812: LD_ADDR_EXP 60
18816: PUSH
18817: LD_INT 0
18819: ST_TO_ADDR
// sSun := false ;
18820: LD_ADDR_EXP 61
18824: PUSH
18825: LD_INT 0
18827: ST_TO_ADDR
// sTiger := false ;
18828: LD_ADDR_EXP 57
18832: PUSH
18833: LD_INT 0
18835: ST_TO_ADDR
// sBomb := false ;
18836: LD_ADDR_EXP 58
18840: PUSH
18841: LD_INT 0
18843: ST_TO_ADDR
// sWound := false ;
18844: LD_ADDR_EXP 66
18848: PUSH
18849: LD_INT 0
18851: ST_TO_ADDR
// sBetray := false ;
18852: LD_ADDR_EXP 70
18856: PUSH
18857: LD_INT 0
18859: ST_TO_ADDR
// sContamin := false ;
18860: LD_ADDR_EXP 71
18864: PUSH
18865: LD_INT 0
18867: ST_TO_ADDR
// sOil := false ;
18868: LD_ADDR_EXP 73
18872: PUSH
18873: LD_INT 0
18875: ST_TO_ADDR
// sStu := false ;
18876: LD_ADDR_EXP 77
18880: PUSH
18881: LD_INT 0
18883: ST_TO_ADDR
// sBazooka := false ;
18884: LD_ADDR_EXP 80
18888: PUSH
18889: LD_INT 0
18891: ST_TO_ADDR
// sMortar := false ;
18892: LD_ADDR_EXP 81
18896: PUSH
18897: LD_INT 0
18899: ST_TO_ADDR
// sRanger := false ;
18900: LD_ADDR_EXP 91
18904: PUSH
18905: LD_INT 0
18907: ST_TO_ADDR
// sComputer := false ;
18908: LD_ADDR_EXP 92
18912: PUSH
18913: LD_INT 0
18915: ST_TO_ADDR
// s30 := false ;
18916: LD_ADDR_EXP 93
18920: PUSH
18921: LD_INT 0
18923: ST_TO_ADDR
// s60 := false ;
18924: LD_ADDR_EXP 94
18928: PUSH
18929: LD_INT 0
18931: ST_TO_ADDR
// end ;
18932: LD_VAR 0 1
18936: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18937: LD_INT 0
18939: PPUSH
18940: PPUSH
18941: PPUSH
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
// result := [ ] ;
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: EMPTY
18952: ST_TO_ADDR
// if campaign_id = 1 then
18953: LD_OWVAR 69
18957: PUSH
18958: LD_INT 1
18960: EQUAL
18961: IFFALSE 22127
// begin case mission_number of 1 :
18963: LD_OWVAR 70
18967: PUSH
18968: LD_INT 1
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19052
18976: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 4
18987: PUSH
18988: LD_INT 11
18990: PUSH
18991: LD_INT 12
18993: PUSH
18994: LD_INT 15
18996: PUSH
18997: LD_INT 16
18999: PUSH
19000: LD_INT 22
19002: PUSH
19003: LD_INT 23
19005: PUSH
19006: LD_INT 26
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 101
19022: PUSH
19023: LD_INT 102
19025: PUSH
19026: LD_INT 106
19028: PUSH
19029: LD_INT 116
19031: PUSH
19032: LD_INT 117
19034: PUSH
19035: LD_INT 118
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: ST_TO_ADDR
19050: GO 22125
19052: LD_INT 2
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19144
19060: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19061: LD_ADDR_VAR 0 2
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 4
19071: PUSH
19072: LD_INT 11
19074: PUSH
19075: LD_INT 12
19077: PUSH
19078: LD_INT 15
19080: PUSH
19081: LD_INT 16
19083: PUSH
19084: LD_INT 22
19086: PUSH
19087: LD_INT 23
19089: PUSH
19090: LD_INT 26
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 101
19106: PUSH
19107: LD_INT 102
19109: PUSH
19110: LD_INT 105
19112: PUSH
19113: LD_INT 106
19115: PUSH
19116: LD_INT 108
19118: PUSH
19119: LD_INT 116
19121: PUSH
19122: LD_INT 117
19124: PUSH
19125: LD_INT 118
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: ST_TO_ADDR
19142: GO 22125
19144: LD_INT 3
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 19240
19152: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19153: LD_ADDR_VAR 0 2
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: LD_INT 4
19163: PUSH
19164: LD_INT 5
19166: PUSH
19167: LD_INT 11
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: LD_INT 15
19175: PUSH
19176: LD_INT 16
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 36
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 101
19202: PUSH
19203: LD_INT 102
19205: PUSH
19206: LD_INT 105
19208: PUSH
19209: LD_INT 106
19211: PUSH
19212: LD_INT 108
19214: PUSH
19215: LD_INT 116
19217: PUSH
19218: LD_INT 117
19220: PUSH
19221: LD_INT 118
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: ST_TO_ADDR
19238: GO 22125
19240: LD_INT 4
19242: DOUBLE
19243: EQUAL
19244: IFTRUE 19248
19246: GO 19344
19248: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19249: LD_ADDR_VAR 0 2
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 4
19259: PUSH
19260: LD_INT 5
19262: PUSH
19263: LD_INT 8
19265: PUSH
19266: LD_INT 11
19268: PUSH
19269: LD_INT 12
19271: PUSH
19272: LD_INT 15
19274: PUSH
19275: LD_INT 16
19277: PUSH
19278: LD_INT 22
19280: PUSH
19281: LD_INT 23
19283: PUSH
19284: LD_INT 26
19286: PUSH
19287: LD_INT 36
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 101
19306: PUSH
19307: LD_INT 102
19309: PUSH
19310: LD_INT 105
19312: PUSH
19313: LD_INT 106
19315: PUSH
19316: LD_INT 108
19318: PUSH
19319: LD_INT 116
19321: PUSH
19322: LD_INT 117
19324: PUSH
19325: LD_INT 118
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: ST_TO_ADDR
19342: GO 22125
19344: LD_INT 5
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19464
19352: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 4
19363: PUSH
19364: LD_INT 5
19366: PUSH
19367: LD_INT 6
19369: PUSH
19370: LD_INT 8
19372: PUSH
19373: LD_INT 11
19375: PUSH
19376: LD_INT 12
19378: PUSH
19379: LD_INT 15
19381: PUSH
19382: LD_INT 16
19384: PUSH
19385: LD_INT 22
19387: PUSH
19388: LD_INT 23
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 26
19396: PUSH
19397: LD_INT 36
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 101
19418: PUSH
19419: LD_INT 102
19421: PUSH
19422: LD_INT 105
19424: PUSH
19425: LD_INT 106
19427: PUSH
19428: LD_INT 108
19430: PUSH
19431: LD_INT 109
19433: PUSH
19434: LD_INT 112
19436: PUSH
19437: LD_INT 116
19439: PUSH
19440: LD_INT 117
19442: PUSH
19443: LD_INT 118
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: ST_TO_ADDR
19462: GO 22125
19464: LD_INT 6
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19604
19472: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19473: LD_ADDR_VAR 0 2
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 4
19483: PUSH
19484: LD_INT 5
19486: PUSH
19487: LD_INT 6
19489: PUSH
19490: LD_INT 8
19492: PUSH
19493: LD_INT 11
19495: PUSH
19496: LD_INT 12
19498: PUSH
19499: LD_INT 15
19501: PUSH
19502: LD_INT 16
19504: PUSH
19505: LD_INT 20
19507: PUSH
19508: LD_INT 21
19510: PUSH
19511: LD_INT 22
19513: PUSH
19514: LD_INT 23
19516: PUSH
19517: LD_INT 25
19519: PUSH
19520: LD_INT 26
19522: PUSH
19523: LD_INT 30
19525: PUSH
19526: LD_INT 31
19528: PUSH
19529: LD_INT 32
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 101
19558: PUSH
19559: LD_INT 102
19561: PUSH
19562: LD_INT 105
19564: PUSH
19565: LD_INT 106
19567: PUSH
19568: LD_INT 108
19570: PUSH
19571: LD_INT 109
19573: PUSH
19574: LD_INT 112
19576: PUSH
19577: LD_INT 116
19579: PUSH
19580: LD_INT 117
19582: PUSH
19583: LD_INT 118
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: ST_TO_ADDR
19602: GO 22125
19604: LD_INT 7
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19724
19612: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 4
19623: PUSH
19624: LD_INT 5
19626: PUSH
19627: LD_INT 7
19629: PUSH
19630: LD_INT 11
19632: PUSH
19633: LD_INT 12
19635: PUSH
19636: LD_INT 15
19638: PUSH
19639: LD_INT 16
19641: PUSH
19642: LD_INT 20
19644: PUSH
19645: LD_INT 21
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_INT 23
19653: PUSH
19654: LD_INT 25
19656: PUSH
19657: LD_INT 26
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 101
19678: PUSH
19679: LD_INT 102
19681: PUSH
19682: LD_INT 103
19684: PUSH
19685: LD_INT 105
19687: PUSH
19688: LD_INT 106
19690: PUSH
19691: LD_INT 108
19693: PUSH
19694: LD_INT 112
19696: PUSH
19697: LD_INT 116
19699: PUSH
19700: LD_INT 117
19702: PUSH
19703: LD_INT 118
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
19722: GO 22125
19724: LD_INT 8
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19872
19732: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 6
19749: PUSH
19750: LD_INT 7
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 11
19758: PUSH
19759: LD_INT 12
19761: PUSH
19762: LD_INT 15
19764: PUSH
19765: LD_INT 16
19767: PUSH
19768: LD_INT 20
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: LD_INT 23
19779: PUSH
19780: LD_INT 25
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_INT 31
19791: PUSH
19792: LD_INT 32
19794: PUSH
19795: LD_INT 36
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 101
19822: PUSH
19823: LD_INT 102
19825: PUSH
19826: LD_INT 103
19828: PUSH
19829: LD_INT 105
19831: PUSH
19832: LD_INT 106
19834: PUSH
19835: LD_INT 108
19837: PUSH
19838: LD_INT 109
19840: PUSH
19841: LD_INT 112
19843: PUSH
19844: LD_INT 116
19846: PUSH
19847: LD_INT 117
19849: PUSH
19850: LD_INT 118
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: ST_TO_ADDR
19870: GO 22125
19872: LD_INT 9
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 20028
19880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19881: LD_ADDR_VAR 0 2
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: LD_INT 4
19891: PUSH
19892: LD_INT 5
19894: PUSH
19895: LD_INT 6
19897: PUSH
19898: LD_INT 7
19900: PUSH
19901: LD_INT 8
19903: PUSH
19904: LD_INT 11
19906: PUSH
19907: LD_INT 12
19909: PUSH
19910: LD_INT 15
19912: PUSH
19913: LD_INT 16
19915: PUSH
19916: LD_INT 20
19918: PUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 22
19924: PUSH
19925: LD_INT 23
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: LD_INT 26
19933: PUSH
19934: LD_INT 28
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 31
19942: PUSH
19943: LD_INT 32
19945: PUSH
19946: LD_INT 36
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 101
19974: PUSH
19975: LD_INT 102
19977: PUSH
19978: LD_INT 103
19980: PUSH
19981: LD_INT 105
19983: PUSH
19984: LD_INT 106
19986: PUSH
19987: LD_INT 108
19989: PUSH
19990: LD_INT 109
19992: PUSH
19993: LD_INT 112
19995: PUSH
19996: LD_INT 114
19998: PUSH
19999: LD_INT 116
20001: PUSH
20002: LD_INT 117
20004: PUSH
20005: LD_INT 118
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 22125
20028: LD_INT 10
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20232
20036: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: LD_INT 4
20047: PUSH
20048: LD_INT 5
20050: PUSH
20051: LD_INT 6
20053: PUSH
20054: LD_INT 7
20056: PUSH
20057: LD_INT 8
20059: PUSH
20060: LD_INT 9
20062: PUSH
20063: LD_INT 10
20065: PUSH
20066: LD_INT 11
20068: PUSH
20069: LD_INT 12
20071: PUSH
20072: LD_INT 13
20074: PUSH
20075: LD_INT 14
20077: PUSH
20078: LD_INT 15
20080: PUSH
20081: LD_INT 16
20083: PUSH
20084: LD_INT 17
20086: PUSH
20087: LD_INT 18
20089: PUSH
20090: LD_INT 19
20092: PUSH
20093: LD_INT 20
20095: PUSH
20096: LD_INT 21
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_INT 23
20104: PUSH
20105: LD_INT 24
20107: PUSH
20108: LD_INT 25
20110: PUSH
20111: LD_INT 26
20113: PUSH
20114: LD_INT 28
20116: PUSH
20117: LD_INT 30
20119: PUSH
20120: LD_INT 31
20122: PUSH
20123: LD_INT 32
20125: PUSH
20126: LD_INT 36
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 101
20162: PUSH
20163: LD_INT 102
20165: PUSH
20166: LD_INT 103
20168: PUSH
20169: LD_INT 104
20171: PUSH
20172: LD_INT 105
20174: PUSH
20175: LD_INT 106
20177: PUSH
20178: LD_INT 107
20180: PUSH
20181: LD_INT 108
20183: PUSH
20184: LD_INT 109
20186: PUSH
20187: LD_INT 110
20189: PUSH
20190: LD_INT 111
20192: PUSH
20193: LD_INT 112
20195: PUSH
20196: LD_INT 114
20198: PUSH
20199: LD_INT 116
20201: PUSH
20202: LD_INT 117
20204: PUSH
20205: LD_INT 118
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: ST_TO_ADDR
20230: GO 22125
20232: LD_INT 11
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20444
20240: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: LD_INT 3
20251: PUSH
20252: LD_INT 4
20254: PUSH
20255: LD_INT 5
20257: PUSH
20258: LD_INT 6
20260: PUSH
20261: LD_INT 7
20263: PUSH
20264: LD_INT 8
20266: PUSH
20267: LD_INT 9
20269: PUSH
20270: LD_INT 10
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 13
20281: PUSH
20282: LD_INT 14
20284: PUSH
20285: LD_INT 15
20287: PUSH
20288: LD_INT 16
20290: PUSH
20291: LD_INT 17
20293: PUSH
20294: LD_INT 18
20296: PUSH
20297: LD_INT 19
20299: PUSH
20300: LD_INT 20
20302: PUSH
20303: LD_INT 21
20305: PUSH
20306: LD_INT 22
20308: PUSH
20309: LD_INT 23
20311: PUSH
20312: LD_INT 24
20314: PUSH
20315: LD_INT 25
20317: PUSH
20318: LD_INT 26
20320: PUSH
20321: LD_INT 28
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 31
20329: PUSH
20330: LD_INT 32
20332: PUSH
20333: LD_INT 34
20335: PUSH
20336: LD_INT 36
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 101
20374: PUSH
20375: LD_INT 102
20377: PUSH
20378: LD_INT 103
20380: PUSH
20381: LD_INT 104
20383: PUSH
20384: LD_INT 105
20386: PUSH
20387: LD_INT 106
20389: PUSH
20390: LD_INT 107
20392: PUSH
20393: LD_INT 108
20395: PUSH
20396: LD_INT 109
20398: PUSH
20399: LD_INT 110
20401: PUSH
20402: LD_INT 111
20404: PUSH
20405: LD_INT 112
20407: PUSH
20408: LD_INT 114
20410: PUSH
20411: LD_INT 116
20413: PUSH
20414: LD_INT 117
20416: PUSH
20417: LD_INT 118
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: ST_TO_ADDR
20442: GO 22125
20444: LD_INT 12
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 20672
20452: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20453: LD_ADDR_VAR 0 2
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 4
20469: PUSH
20470: LD_INT 5
20472: PUSH
20473: LD_INT 6
20475: PUSH
20476: LD_INT 7
20478: PUSH
20479: LD_INT 8
20481: PUSH
20482: LD_INT 9
20484: PUSH
20485: LD_INT 10
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 12
20493: PUSH
20494: LD_INT 13
20496: PUSH
20497: LD_INT 14
20499: PUSH
20500: LD_INT 15
20502: PUSH
20503: LD_INT 16
20505: PUSH
20506: LD_INT 17
20508: PUSH
20509: LD_INT 18
20511: PUSH
20512: LD_INT 19
20514: PUSH
20515: LD_INT 20
20517: PUSH
20518: LD_INT 21
20520: PUSH
20521: LD_INT 22
20523: PUSH
20524: LD_INT 23
20526: PUSH
20527: LD_INT 24
20529: PUSH
20530: LD_INT 25
20532: PUSH
20533: LD_INT 26
20535: PUSH
20536: LD_INT 27
20538: PUSH
20539: LD_INT 28
20541: PUSH
20542: LD_INT 30
20544: PUSH
20545: LD_INT 31
20547: PUSH
20548: LD_INT 32
20550: PUSH
20551: LD_INT 33
20553: PUSH
20554: LD_INT 34
20556: PUSH
20557: LD_INT 36
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 101
20598: PUSH
20599: LD_INT 102
20601: PUSH
20602: LD_INT 103
20604: PUSH
20605: LD_INT 104
20607: PUSH
20608: LD_INT 105
20610: PUSH
20611: LD_INT 106
20613: PUSH
20614: LD_INT 107
20616: PUSH
20617: LD_INT 108
20619: PUSH
20620: LD_INT 109
20622: PUSH
20623: LD_INT 110
20625: PUSH
20626: LD_INT 111
20628: PUSH
20629: LD_INT 112
20631: PUSH
20632: LD_INT 113
20634: PUSH
20635: LD_INT 114
20637: PUSH
20638: LD_INT 116
20640: PUSH
20641: LD_INT 117
20643: PUSH
20644: LD_INT 118
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 22125
20672: LD_INT 13
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20888
20680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: LD_INT 3
20694: PUSH
20695: LD_INT 4
20697: PUSH
20698: LD_INT 5
20700: PUSH
20701: LD_INT 8
20703: PUSH
20704: LD_INT 9
20706: PUSH
20707: LD_INT 10
20709: PUSH
20710: LD_INT 11
20712: PUSH
20713: LD_INT 12
20715: PUSH
20716: LD_INT 14
20718: PUSH
20719: LD_INT 15
20721: PUSH
20722: LD_INT 16
20724: PUSH
20725: LD_INT 17
20727: PUSH
20728: LD_INT 18
20730: PUSH
20731: LD_INT 19
20733: PUSH
20734: LD_INT 20
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 22
20742: PUSH
20743: LD_INT 23
20745: PUSH
20746: LD_INT 24
20748: PUSH
20749: LD_INT 25
20751: PUSH
20752: LD_INT 26
20754: PUSH
20755: LD_INT 27
20757: PUSH
20758: LD_INT 28
20760: PUSH
20761: LD_INT 30
20763: PUSH
20764: LD_INT 31
20766: PUSH
20767: LD_INT 32
20769: PUSH
20770: LD_INT 33
20772: PUSH
20773: LD_INT 34
20775: PUSH
20776: LD_INT 36
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 101
20814: PUSH
20815: LD_INT 102
20817: PUSH
20818: LD_INT 103
20820: PUSH
20821: LD_INT 104
20823: PUSH
20824: LD_INT 105
20826: PUSH
20827: LD_INT 106
20829: PUSH
20830: LD_INT 107
20832: PUSH
20833: LD_INT 108
20835: PUSH
20836: LD_INT 109
20838: PUSH
20839: LD_INT 110
20841: PUSH
20842: LD_INT 111
20844: PUSH
20845: LD_INT 112
20847: PUSH
20848: LD_INT 113
20850: PUSH
20851: LD_INT 114
20853: PUSH
20854: LD_INT 116
20856: PUSH
20857: LD_INT 117
20859: PUSH
20860: LD_INT 118
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: ST_TO_ADDR
20886: GO 22125
20888: LD_INT 14
20890: DOUBLE
20891: EQUAL
20892: IFTRUE 20896
20894: GO 21120
20896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20897: LD_ADDR_VAR 0 2
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: LD_INT 4
20913: PUSH
20914: LD_INT 5
20916: PUSH
20917: LD_INT 6
20919: PUSH
20920: LD_INT 7
20922: PUSH
20923: LD_INT 8
20925: PUSH
20926: LD_INT 9
20928: PUSH
20929: LD_INT 10
20931: PUSH
20932: LD_INT 11
20934: PUSH
20935: LD_INT 12
20937: PUSH
20938: LD_INT 13
20940: PUSH
20941: LD_INT 14
20943: PUSH
20944: LD_INT 15
20946: PUSH
20947: LD_INT 16
20949: PUSH
20950: LD_INT 17
20952: PUSH
20953: LD_INT 18
20955: PUSH
20956: LD_INT 19
20958: PUSH
20959: LD_INT 20
20961: PUSH
20962: LD_INT 21
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 24
20973: PUSH
20974: LD_INT 25
20976: PUSH
20977: LD_INT 26
20979: PUSH
20980: LD_INT 27
20982: PUSH
20983: LD_INT 28
20985: PUSH
20986: LD_INT 29
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: LD_INT 31
20994: PUSH
20995: LD_INT 32
20997: PUSH
20998: LD_INT 33
21000: PUSH
21001: LD_INT 34
21003: PUSH
21004: LD_INT 36
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 101
21046: PUSH
21047: LD_INT 102
21049: PUSH
21050: LD_INT 103
21052: PUSH
21053: LD_INT 104
21055: PUSH
21056: LD_INT 105
21058: PUSH
21059: LD_INT 106
21061: PUSH
21062: LD_INT 107
21064: PUSH
21065: LD_INT 108
21067: PUSH
21068: LD_INT 109
21070: PUSH
21071: LD_INT 110
21073: PUSH
21074: LD_INT 111
21076: PUSH
21077: LD_INT 112
21079: PUSH
21080: LD_INT 113
21082: PUSH
21083: LD_INT 114
21085: PUSH
21086: LD_INT 116
21088: PUSH
21089: LD_INT 117
21091: PUSH
21092: LD_INT 118
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 22125
21120: LD_INT 15
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21352
21128: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: LD_INT 4
21145: PUSH
21146: LD_INT 5
21148: PUSH
21149: LD_INT 6
21151: PUSH
21152: LD_INT 7
21154: PUSH
21155: LD_INT 8
21157: PUSH
21158: LD_INT 9
21160: PUSH
21161: LD_INT 10
21163: PUSH
21164: LD_INT 11
21166: PUSH
21167: LD_INT 12
21169: PUSH
21170: LD_INT 13
21172: PUSH
21173: LD_INT 14
21175: PUSH
21176: LD_INT 15
21178: PUSH
21179: LD_INT 16
21181: PUSH
21182: LD_INT 17
21184: PUSH
21185: LD_INT 18
21187: PUSH
21188: LD_INT 19
21190: PUSH
21191: LD_INT 20
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 22
21199: PUSH
21200: LD_INT 23
21202: PUSH
21203: LD_INT 24
21205: PUSH
21206: LD_INT 25
21208: PUSH
21209: LD_INT 26
21211: PUSH
21212: LD_INT 27
21214: PUSH
21215: LD_INT 28
21217: PUSH
21218: LD_INT 29
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: LD_INT 31
21226: PUSH
21227: LD_INT 32
21229: PUSH
21230: LD_INT 33
21232: PUSH
21233: LD_INT 34
21235: PUSH
21236: LD_INT 36
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 101
21278: PUSH
21279: LD_INT 102
21281: PUSH
21282: LD_INT 103
21284: PUSH
21285: LD_INT 104
21287: PUSH
21288: LD_INT 105
21290: PUSH
21291: LD_INT 106
21293: PUSH
21294: LD_INT 107
21296: PUSH
21297: LD_INT 108
21299: PUSH
21300: LD_INT 109
21302: PUSH
21303: LD_INT 110
21305: PUSH
21306: LD_INT 111
21308: PUSH
21309: LD_INT 112
21311: PUSH
21312: LD_INT 113
21314: PUSH
21315: LD_INT 114
21317: PUSH
21318: LD_INT 116
21320: PUSH
21321: LD_INT 117
21323: PUSH
21324: LD_INT 118
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: ST_TO_ADDR
21350: GO 22125
21352: LD_INT 16
21354: DOUBLE
21355: EQUAL
21356: IFTRUE 21360
21358: GO 21496
21360: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: LD_INT 4
21371: PUSH
21372: LD_INT 5
21374: PUSH
21375: LD_INT 7
21377: PUSH
21378: LD_INT 11
21380: PUSH
21381: LD_INT 12
21383: PUSH
21384: LD_INT 15
21386: PUSH
21387: LD_INT 16
21389: PUSH
21390: LD_INT 20
21392: PUSH
21393: LD_INT 21
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_INT 23
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 26
21407: PUSH
21408: LD_INT 30
21410: PUSH
21411: LD_INT 31
21413: PUSH
21414: LD_INT 32
21416: PUSH
21417: LD_INT 33
21419: PUSH
21420: LD_INT 34
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 103
21452: PUSH
21453: LD_INT 106
21455: PUSH
21456: LD_INT 108
21458: PUSH
21459: LD_INT 112
21461: PUSH
21462: LD_INT 113
21464: PUSH
21465: LD_INT 114
21467: PUSH
21468: LD_INT 116
21470: PUSH
21471: LD_INT 117
21473: PUSH
21474: LD_INT 118
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: ST_TO_ADDR
21494: GO 22125
21496: LD_INT 17
21498: DOUBLE
21499: EQUAL
21500: IFTRUE 21504
21502: GO 21728
21504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21505: LD_ADDR_VAR 0 2
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 3
21518: PUSH
21519: LD_INT 4
21521: PUSH
21522: LD_INT 5
21524: PUSH
21525: LD_INT 6
21527: PUSH
21528: LD_INT 7
21530: PUSH
21531: LD_INT 8
21533: PUSH
21534: LD_INT 9
21536: PUSH
21537: LD_INT 10
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: LD_INT 12
21545: PUSH
21546: LD_INT 13
21548: PUSH
21549: LD_INT 14
21551: PUSH
21552: LD_INT 15
21554: PUSH
21555: LD_INT 16
21557: PUSH
21558: LD_INT 17
21560: PUSH
21561: LD_INT 18
21563: PUSH
21564: LD_INT 19
21566: PUSH
21567: LD_INT 20
21569: PUSH
21570: LD_INT 21
21572: PUSH
21573: LD_INT 22
21575: PUSH
21576: LD_INT 23
21578: PUSH
21579: LD_INT 24
21581: PUSH
21582: LD_INT 25
21584: PUSH
21585: LD_INT 26
21587: PUSH
21588: LD_INT 27
21590: PUSH
21591: LD_INT 28
21593: PUSH
21594: LD_INT 29
21596: PUSH
21597: LD_INT 30
21599: PUSH
21600: LD_INT 31
21602: PUSH
21603: LD_INT 32
21605: PUSH
21606: LD_INT 33
21608: PUSH
21609: LD_INT 34
21611: PUSH
21612: LD_INT 36
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 101
21654: PUSH
21655: LD_INT 102
21657: PUSH
21658: LD_INT 103
21660: PUSH
21661: LD_INT 104
21663: PUSH
21664: LD_INT 105
21666: PUSH
21667: LD_INT 106
21669: PUSH
21670: LD_INT 107
21672: PUSH
21673: LD_INT 108
21675: PUSH
21676: LD_INT 109
21678: PUSH
21679: LD_INT 110
21681: PUSH
21682: LD_INT 111
21684: PUSH
21685: LD_INT 112
21687: PUSH
21688: LD_INT 113
21690: PUSH
21691: LD_INT 114
21693: PUSH
21694: LD_INT 116
21696: PUSH
21697: LD_INT 117
21699: PUSH
21700: LD_INT 118
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: ST_TO_ADDR
21726: GO 22125
21728: LD_INT 18
21730: DOUBLE
21731: EQUAL
21732: IFTRUE 21736
21734: GO 21884
21736: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21737: LD_ADDR_VAR 0 2
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 4
21747: PUSH
21748: LD_INT 5
21750: PUSH
21751: LD_INT 7
21753: PUSH
21754: LD_INT 11
21756: PUSH
21757: LD_INT 12
21759: PUSH
21760: LD_INT 15
21762: PUSH
21763: LD_INT 16
21765: PUSH
21766: LD_INT 20
21768: PUSH
21769: LD_INT 21
21771: PUSH
21772: LD_INT 22
21774: PUSH
21775: LD_INT 23
21777: PUSH
21778: LD_INT 25
21780: PUSH
21781: LD_INT 26
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 31
21789: PUSH
21790: LD_INT 32
21792: PUSH
21793: LD_INT 33
21795: PUSH
21796: LD_INT 34
21798: PUSH
21799: LD_INT 35
21801: PUSH
21802: LD_INT 36
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 101
21830: PUSH
21831: LD_INT 102
21833: PUSH
21834: LD_INT 103
21836: PUSH
21837: LD_INT 106
21839: PUSH
21840: LD_INT 108
21842: PUSH
21843: LD_INT 112
21845: PUSH
21846: LD_INT 113
21848: PUSH
21849: LD_INT 114
21851: PUSH
21852: LD_INT 115
21854: PUSH
21855: LD_INT 116
21857: PUSH
21858: LD_INT 117
21860: PUSH
21861: LD_INT 118
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: ST_TO_ADDR
21882: GO 22125
21884: LD_INT 19
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 22124
21892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21893: LD_ADDR_VAR 0 2
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 4
21909: PUSH
21910: LD_INT 5
21912: PUSH
21913: LD_INT 6
21915: PUSH
21916: LD_INT 7
21918: PUSH
21919: LD_INT 8
21921: PUSH
21922: LD_INT 9
21924: PUSH
21925: LD_INT 10
21927: PUSH
21928: LD_INT 11
21930: PUSH
21931: LD_INT 12
21933: PUSH
21934: LD_INT 13
21936: PUSH
21937: LD_INT 14
21939: PUSH
21940: LD_INT 15
21942: PUSH
21943: LD_INT 16
21945: PUSH
21946: LD_INT 17
21948: PUSH
21949: LD_INT 18
21951: PUSH
21952: LD_INT 19
21954: PUSH
21955: LD_INT 20
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 24
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 27
21978: PUSH
21979: LD_INT 28
21981: PUSH
21982: LD_INT 29
21984: PUSH
21985: LD_INT 30
21987: PUSH
21988: LD_INT 31
21990: PUSH
21991: LD_INT 32
21993: PUSH
21994: LD_INT 33
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 35
22002: PUSH
22003: LD_INT 36
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 101
22046: PUSH
22047: LD_INT 102
22049: PUSH
22050: LD_INT 103
22052: PUSH
22053: LD_INT 104
22055: PUSH
22056: LD_INT 105
22058: PUSH
22059: LD_INT 106
22061: PUSH
22062: LD_INT 107
22064: PUSH
22065: LD_INT 108
22067: PUSH
22068: LD_INT 109
22070: PUSH
22071: LD_INT 110
22073: PUSH
22074: LD_INT 111
22076: PUSH
22077: LD_INT 112
22079: PUSH
22080: LD_INT 113
22082: PUSH
22083: LD_INT 114
22085: PUSH
22086: LD_INT 115
22088: PUSH
22089: LD_INT 116
22091: PUSH
22092: LD_INT 117
22094: PUSH
22095: LD_INT 118
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: ST_TO_ADDR
22122: GO 22125
22124: POP
// end else
22125: GO 22356
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22127: LD_ADDR_VAR 0 2
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: LD_INT 5
22146: PUSH
22147: LD_INT 6
22149: PUSH
22150: LD_INT 7
22152: PUSH
22153: LD_INT 8
22155: PUSH
22156: LD_INT 9
22158: PUSH
22159: LD_INT 10
22161: PUSH
22162: LD_INT 11
22164: PUSH
22165: LD_INT 12
22167: PUSH
22168: LD_INT 13
22170: PUSH
22171: LD_INT 14
22173: PUSH
22174: LD_INT 15
22176: PUSH
22177: LD_INT 16
22179: PUSH
22180: LD_INT 17
22182: PUSH
22183: LD_INT 18
22185: PUSH
22186: LD_INT 19
22188: PUSH
22189: LD_INT 20
22191: PUSH
22192: LD_INT 21
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_INT 23
22200: PUSH
22201: LD_INT 24
22203: PUSH
22204: LD_INT 25
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 27
22212: PUSH
22213: LD_INT 28
22215: PUSH
22216: LD_INT 29
22218: PUSH
22219: LD_INT 30
22221: PUSH
22222: LD_INT 31
22224: PUSH
22225: LD_INT 32
22227: PUSH
22228: LD_INT 33
22230: PUSH
22231: LD_INT 34
22233: PUSH
22234: LD_INT 35
22236: PUSH
22237: LD_INT 36
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 101
22280: PUSH
22281: LD_INT 102
22283: PUSH
22284: LD_INT 103
22286: PUSH
22287: LD_INT 104
22289: PUSH
22290: LD_INT 105
22292: PUSH
22293: LD_INT 106
22295: PUSH
22296: LD_INT 107
22298: PUSH
22299: LD_INT 108
22301: PUSH
22302: LD_INT 109
22304: PUSH
22305: LD_INT 110
22307: PUSH
22308: LD_INT 111
22310: PUSH
22311: LD_INT 112
22313: PUSH
22314: LD_INT 113
22316: PUSH
22317: LD_INT 114
22319: PUSH
22320: LD_INT 115
22322: PUSH
22323: LD_INT 116
22325: PUSH
22326: LD_INT 117
22328: PUSH
22329: LD_INT 118
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: ST_TO_ADDR
// if result then
22356: LD_VAR 0 2
22360: IFFALSE 23146
// begin normal :=  ;
22362: LD_ADDR_VAR 0 5
22366: PUSH
22367: LD_STRING 
22369: ST_TO_ADDR
// hardcore :=  ;
22370: LD_ADDR_VAR 0 6
22374: PUSH
22375: LD_STRING 
22377: ST_TO_ADDR
// active :=  ;
22378: LD_ADDR_VAR 0 7
22382: PUSH
22383: LD_STRING 
22385: ST_TO_ADDR
// for i = 1 to normalCounter do
22386: LD_ADDR_VAR 0 8
22390: PUSH
22391: DOUBLE
22392: LD_INT 1
22394: DEC
22395: ST_TO_ADDR
22396: LD_EXP 39
22400: PUSH
22401: FOR_TO
22402: IFFALSE 22503
// begin tmp := 0 ;
22404: LD_ADDR_VAR 0 3
22408: PUSH
22409: LD_STRING 0
22411: ST_TO_ADDR
// if result [ 1 ] then
22412: LD_VAR 0 2
22416: PUSH
22417: LD_INT 1
22419: ARRAY
22420: IFFALSE 22485
// if result [ 1 ] [ 1 ] = i then
22422: LD_VAR 0 2
22426: PUSH
22427: LD_INT 1
22429: ARRAY
22430: PUSH
22431: LD_INT 1
22433: ARRAY
22434: PUSH
22435: LD_VAR 0 8
22439: EQUAL
22440: IFFALSE 22485
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_VAR 0 2
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: LD_VAR 0 2
22459: PUSH
22460: LD_INT 1
22462: ARRAY
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 3
22471: PPUSH
22472: CALL_OW 1
22476: ST_TO_ADDR
// tmp := 1 ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_STRING 1
22484: ST_TO_ADDR
// end ; normal := normal & tmp ;
22485: LD_ADDR_VAR 0 5
22489: PUSH
22490: LD_VAR 0 5
22494: PUSH
22495: LD_VAR 0 3
22499: STR
22500: ST_TO_ADDR
// end ;
22501: GO 22401
22503: POP
22504: POP
// for i = 1 to hardcoreCounter do
22505: LD_ADDR_VAR 0 8
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_EXP 40
22519: PUSH
22520: FOR_TO
22521: IFFALSE 22626
// begin tmp := 0 ;
22523: LD_ADDR_VAR 0 3
22527: PUSH
22528: LD_STRING 0
22530: ST_TO_ADDR
// if result [ 2 ] then
22531: LD_VAR 0 2
22535: PUSH
22536: LD_INT 2
22538: ARRAY
22539: IFFALSE 22608
// if result [ 2 ] [ 1 ] = 100 + i then
22541: LD_VAR 0 2
22545: PUSH
22546: LD_INT 2
22548: ARRAY
22549: PUSH
22550: LD_INT 1
22552: ARRAY
22553: PUSH
22554: LD_INT 100
22556: PUSH
22557: LD_VAR 0 8
22561: PLUS
22562: EQUAL
22563: IFFALSE 22608
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22565: LD_ADDR_VAR 0 2
22569: PUSH
22570: LD_VAR 0 2
22574: PPUSH
22575: LD_INT 2
22577: PPUSH
22578: LD_VAR 0 2
22582: PUSH
22583: LD_INT 2
22585: ARRAY
22586: PPUSH
22587: LD_INT 1
22589: PPUSH
22590: CALL_OW 3
22594: PPUSH
22595: CALL_OW 1
22599: ST_TO_ADDR
// tmp := 1 ;
22600: LD_ADDR_VAR 0 3
22604: PUSH
22605: LD_STRING 1
22607: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22608: LD_ADDR_VAR 0 6
22612: PUSH
22613: LD_VAR 0 6
22617: PUSH
22618: LD_VAR 0 3
22622: STR
22623: ST_TO_ADDR
// end ;
22624: GO 22520
22626: POP
22627: POP
// if isGameLoad then
22628: LD_VAR 0 1
22632: IFFALSE 23107
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22634: LD_ADDR_VAR 0 4
22638: PUSH
22639: LD_EXP 43
22643: PUSH
22644: LD_EXP 42
22648: PUSH
22649: LD_EXP 44
22653: PUSH
22654: LD_EXP 41
22658: PUSH
22659: LD_EXP 45
22663: PUSH
22664: LD_EXP 46
22668: PUSH
22669: LD_EXP 47
22673: PUSH
22674: LD_EXP 48
22678: PUSH
22679: LD_EXP 49
22683: PUSH
22684: LD_EXP 50
22688: PUSH
22689: LD_EXP 51
22693: PUSH
22694: LD_EXP 52
22698: PUSH
22699: LD_EXP 53
22703: PUSH
22704: LD_EXP 54
22708: PUSH
22709: LD_EXP 62
22713: PUSH
22714: LD_EXP 63
22718: PUSH
22719: LD_EXP 64
22723: PUSH
22724: LD_EXP 65
22728: PUSH
22729: LD_EXP 67
22733: PUSH
22734: LD_EXP 68
22738: PUSH
22739: LD_EXP 69
22743: PUSH
22744: LD_EXP 72
22748: PUSH
22749: LD_EXP 74
22753: PUSH
22754: LD_EXP 75
22758: PUSH
22759: LD_EXP 76
22763: PUSH
22764: LD_EXP 78
22768: PUSH
22769: LD_EXP 79
22773: PUSH
22774: LD_EXP 82
22778: PUSH
22779: LD_EXP 83
22783: PUSH
22784: LD_EXP 84
22788: PUSH
22789: LD_EXP 85
22793: PUSH
22794: LD_EXP 86
22798: PUSH
22799: LD_EXP 87
22803: PUSH
22804: LD_EXP 88
22808: PUSH
22809: LD_EXP 89
22813: PUSH
22814: LD_EXP 90
22818: PUSH
22819: LD_EXP 55
22823: PUSH
22824: LD_EXP 56
22828: PUSH
22829: LD_EXP 59
22833: PUSH
22834: LD_EXP 60
22838: PUSH
22839: LD_EXP 61
22843: PUSH
22844: LD_EXP 57
22848: PUSH
22849: LD_EXP 58
22853: PUSH
22854: LD_EXP 66
22858: PUSH
22859: LD_EXP 70
22863: PUSH
22864: LD_EXP 71
22868: PUSH
22869: LD_EXP 73
22873: PUSH
22874: LD_EXP 77
22878: PUSH
22879: LD_EXP 80
22883: PUSH
22884: LD_EXP 81
22888: PUSH
22889: LD_EXP 91
22893: PUSH
22894: LD_EXP 92
22898: PUSH
22899: LD_EXP 93
22903: PUSH
22904: LD_EXP 94
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// tmp :=  ;
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_STRING 
22972: ST_TO_ADDR
// for i = 1 to normalCounter do
22973: LD_ADDR_VAR 0 8
22977: PUSH
22978: DOUBLE
22979: LD_INT 1
22981: DEC
22982: ST_TO_ADDR
22983: LD_EXP 39
22987: PUSH
22988: FOR_TO
22989: IFFALSE 23025
// begin if flags [ i ] then
22991: LD_VAR 0 4
22995: PUSH
22996: LD_VAR 0 8
23000: ARRAY
23001: IFFALSE 23023
// tmp := tmp & i & ; ;
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: LD_VAR 0 8
23017: STR
23018: PUSH
23019: LD_STRING ;
23021: STR
23022: ST_TO_ADDR
// end ;
23023: GO 22988
23025: POP
23026: POP
// for i = 1 to hardcoreCounter do
23027: LD_ADDR_VAR 0 8
23031: PUSH
23032: DOUBLE
23033: LD_INT 1
23035: DEC
23036: ST_TO_ADDR
23037: LD_EXP 40
23041: PUSH
23042: FOR_TO
23043: IFFALSE 23089
// begin if flags [ normalCounter + i ] then
23045: LD_VAR 0 4
23049: PUSH
23050: LD_EXP 39
23054: PUSH
23055: LD_VAR 0 8
23059: PLUS
23060: ARRAY
23061: IFFALSE 23087
// tmp := tmp & ( 100 + i ) & ; ;
23063: LD_ADDR_VAR 0 3
23067: PUSH
23068: LD_VAR 0 3
23072: PUSH
23073: LD_INT 100
23075: PUSH
23076: LD_VAR 0 8
23080: PLUS
23081: STR
23082: PUSH
23083: LD_STRING ;
23085: STR
23086: ST_TO_ADDR
// end ;
23087: GO 23042
23089: POP
23090: POP
// if tmp then
23091: LD_VAR 0 3
23095: IFFALSE 23107
// active := tmp ;
23097: LD_ADDR_VAR 0 7
23101: PUSH
23102: LD_VAR 0 3
23106: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23107: LD_STRING getStreamItemsFromMission("
23109: PUSH
23110: LD_VAR 0 5
23114: STR
23115: PUSH
23116: LD_STRING ","
23118: STR
23119: PUSH
23120: LD_VAR 0 6
23124: STR
23125: PUSH
23126: LD_STRING ","
23128: STR
23129: PUSH
23130: LD_VAR 0 7
23134: STR
23135: PUSH
23136: LD_STRING ")
23138: STR
23139: PPUSH
23140: CALL_OW 559
// end else
23144: GO 23153
// ToLua ( getStreamItemsFromMission("","","") ) ;
23146: LD_STRING getStreamItemsFromMission("","","")
23148: PPUSH
23149: CALL_OW 559
// end ;
23153: LD_VAR 0 2
23157: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23158: LD_EXP 38
23162: IFFALSE 23170
23164: PUSH
23165: LD_EXP 43
23169: AND
23170: IFFALSE 23294
23172: GO 23174
23174: DISABLE
23175: LD_INT 0
23177: PPUSH
23178: PPUSH
// begin enable ;
23179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23180: LD_ADDR_VAR 0 2
23184: PUSH
23185: LD_INT 22
23187: PUSH
23188: LD_OWVAR 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 34
23202: PUSH
23203: LD_INT 7
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 34
23212: PUSH
23213: LD_INT 45
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 34
23222: PUSH
23223: LD_INT 28
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 34
23232: PUSH
23233: LD_INT 47
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: ST_TO_ADDR
// if not tmp then
23256: LD_VAR 0 2
23260: NOT
23261: IFFALSE 23265
// exit ;
23263: GO 23294
// for i in tmp do
23265: LD_ADDR_VAR 0 1
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23292
// begin SetLives ( i , 0 ) ;
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_INT 0
23285: PPUSH
23286: CALL_OW 234
// end ;
23290: GO 23275
23292: POP
23293: POP
// end ;
23294: PPOPN 2
23296: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23297: LD_EXP 38
23301: IFFALSE 23309
23303: PUSH
23304: LD_EXP 44
23308: AND
23309: IFFALSE 23393
23311: GO 23313
23313: DISABLE
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
// begin enable ;
23318: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_INT 22
23326: PUSH
23327: LD_OWVAR 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 32
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: ST_TO_ADDR
// if not tmp then
23355: LD_VAR 0 2
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23393
// for i in tmp do
23364: LD_ADDR_VAR 0 1
23368: PUSH
23369: LD_VAR 0 2
23373: PUSH
23374: FOR_IN
23375: IFFALSE 23391
// begin SetLives ( i , 0 ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: LD_INT 0
23384: PPUSH
23385: CALL_OW 234
// end ;
23389: GO 23374
23391: POP
23392: POP
// end ;
23393: PPOPN 2
23395: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23396: LD_EXP 38
23400: IFFALSE 23408
23402: PUSH
23403: LD_EXP 41
23407: AND
23408: IFFALSE 23501
23410: GO 23412
23412: DISABLE
23413: LD_INT 0
23415: PPUSH
// begin enable ;
23416: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23417: LD_ADDR_VAR 0 1
23421: PUSH
23422: LD_INT 22
23424: PUSH
23425: LD_OWVAR 2
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 25
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 9
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 25
23459: PUSH
23460: LD_INT 8
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PPUSH
23477: CALL_OW 69
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// begin SetClass ( i , 1 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 1
23492: PPUSH
23493: CALL_OW 336
// end ;
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 1
23503: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23504: LD_EXP 38
23508: IFFALSE 23516
23510: PUSH
23511: LD_EXP 42
23515: AND
23516: IFFALSE 23528
23518: PUSH
23519: LD_OWVAR 65
23523: PUSH
23524: LD_INT 7
23526: LESS
23527: AND
23528: IFFALSE 23542
23530: GO 23532
23532: DISABLE
// begin enable ;
23533: ENABLE
// game_speed := 7 ;
23534: LD_ADDR_OWVAR 65
23538: PUSH
23539: LD_INT 7
23541: ST_TO_ADDR
// end ;
23542: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23543: LD_EXP 38
23547: IFFALSE 23555
23549: PUSH
23550: LD_EXP 45
23554: AND
23555: IFFALSE 23757
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
23563: PPUSH
23564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23565: LD_ADDR_VAR 0 3
23569: PUSH
23570: LD_INT 81
23572: PUSH
23573: LD_OWVAR 2
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 21
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 69
23600: ST_TO_ADDR
// if not tmp then
23601: LD_VAR 0 3
23605: NOT
23606: IFFALSE 23610
// exit ;
23608: GO 23757
// if tmp > 5 then
23610: LD_VAR 0 3
23614: PUSH
23615: LD_INT 5
23617: GREATER
23618: IFFALSE 23630
// k := 5 else
23620: LD_ADDR_VAR 0 2
23624: PUSH
23625: LD_INT 5
23627: ST_TO_ADDR
23628: GO 23640
// k := tmp ;
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_VAR 0 3
23639: ST_TO_ADDR
// for i := 1 to k do
23640: LD_ADDR_VAR 0 1
23644: PUSH
23645: DOUBLE
23646: LD_INT 1
23648: DEC
23649: ST_TO_ADDR
23650: LD_VAR 0 2
23654: PUSH
23655: FOR_TO
23656: IFFALSE 23755
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23658: LD_VAR 0 3
23662: PUSH
23663: LD_VAR 0 1
23667: ARRAY
23668: PPUSH
23669: LD_VAR 0 1
23673: PUSH
23674: LD_INT 4
23676: MOD
23677: PUSH
23678: LD_INT 1
23680: PLUS
23681: PPUSH
23682: CALL_OW 259
23686: PUSH
23687: LD_INT 10
23689: LESS
23690: IFFALSE 23753
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23692: LD_VAR 0 3
23696: PUSH
23697: LD_VAR 0 1
23701: ARRAY
23702: PPUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_INT 4
23710: MOD
23711: PUSH
23712: LD_INT 1
23714: PLUS
23715: PPUSH
23716: LD_VAR 0 3
23720: PUSH
23721: LD_VAR 0 1
23725: ARRAY
23726: PPUSH
23727: LD_VAR 0 1
23731: PUSH
23732: LD_INT 4
23734: MOD
23735: PUSH
23736: LD_INT 1
23738: PLUS
23739: PPUSH
23740: CALL_OW 259
23744: PUSH
23745: LD_INT 1
23747: PLUS
23748: PPUSH
23749: CALL_OW 237
23753: GO 23655
23755: POP
23756: POP
// end ;
23757: PPOPN 3
23759: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23760: LD_EXP 38
23764: IFFALSE 23772
23766: PUSH
23767: LD_EXP 46
23771: AND
23772: IFFALSE 23792
23774: GO 23776
23776: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23777: LD_INT 4
23779: PPUSH
23780: LD_OWVAR 2
23784: PPUSH
23785: LD_INT 0
23787: PPUSH
23788: CALL_OW 324
23792: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23793: LD_EXP 38
23797: IFFALSE 23805
23799: PUSH
23800: LD_EXP 75
23804: AND
23805: IFFALSE 23825
23807: GO 23809
23809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23810: LD_INT 19
23812: PPUSH
23813: LD_OWVAR 2
23817: PPUSH
23818: LD_INT 0
23820: PPUSH
23821: CALL_OW 324
23825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23826: LD_EXP 38
23830: IFFALSE 23838
23832: PUSH
23833: LD_EXP 47
23837: AND
23838: IFFALSE 23940
23840: GO 23842
23842: DISABLE
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
// begin enable ;
23847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 22
23855: PUSH
23856: LD_OWVAR 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 34
23870: PUSH
23871: LD_INT 11
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 34
23880: PUSH
23881: LD_INT 30
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PPUSH
23897: CALL_OW 69
23901: ST_TO_ADDR
// if not tmp then
23902: LD_VAR 0 2
23906: NOT
23907: IFFALSE 23911
// exit ;
23909: GO 23940
// for i in tmp do
23911: LD_ADDR_VAR 0 1
23915: PUSH
23916: LD_VAR 0 2
23920: PUSH
23921: FOR_IN
23922: IFFALSE 23938
// begin SetLives ( i , 0 ) ;
23924: LD_VAR 0 1
23928: PPUSH
23929: LD_INT 0
23931: PPUSH
23932: CALL_OW 234
// end ;
23936: GO 23921
23938: POP
23939: POP
// end ;
23940: PPOPN 2
23942: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23943: LD_EXP 38
23947: IFFALSE 23955
23949: PUSH
23950: LD_EXP 48
23954: AND
23955: IFFALSE 23975
23957: GO 23959
23959: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23960: LD_INT 32
23962: PPUSH
23963: LD_OWVAR 2
23967: PPUSH
23968: LD_INT 0
23970: PPUSH
23971: CALL_OW 324
23975: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23976: LD_EXP 38
23980: IFFALSE 23988
23982: PUSH
23983: LD_EXP 49
23987: AND
23988: IFFALSE 24171
23990: GO 23992
23992: DISABLE
23993: LD_INT 0
23995: PPUSH
23996: PPUSH
23997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23998: LD_ADDR_VAR 0 2
24002: PUSH
24003: LD_INT 22
24005: PUSH
24006: LD_OWVAR 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 33
24017: PUSH
24018: LD_INT 3
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 69
24033: ST_TO_ADDR
// if not tmp then
24034: LD_VAR 0 2
24038: NOT
24039: IFFALSE 24043
// exit ;
24041: GO 24171
// side := 0 ;
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_INT 0
24050: ST_TO_ADDR
// for i := 1 to 8 do
24051: LD_ADDR_VAR 0 1
24055: PUSH
24056: DOUBLE
24057: LD_INT 1
24059: DEC
24060: ST_TO_ADDR
24061: LD_INT 8
24063: PUSH
24064: FOR_TO
24065: IFFALSE 24115
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24067: LD_OWVAR 2
24071: PUSH
24072: LD_VAR 0 1
24076: NONEQUAL
24077: IFFALSE 24099
24079: PUSH
24080: LD_OWVAR 2
24084: PPUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL_OW 81
24094: PUSH
24095: LD_INT 2
24097: EQUAL
24098: AND
24099: IFFALSE 24113
// begin side := i ;
24101: LD_ADDR_VAR 0 3
24105: PUSH
24106: LD_VAR 0 1
24110: ST_TO_ADDR
// break ;
24111: GO 24115
// end ;
24113: GO 24064
24115: POP
24116: POP
// if not side then
24117: LD_VAR 0 3
24121: NOT
24122: IFFALSE 24126
// exit ;
24124: GO 24171
// for i := 1 to tmp do
24126: LD_ADDR_VAR 0 1
24130: PUSH
24131: DOUBLE
24132: LD_INT 1
24134: DEC
24135: ST_TO_ADDR
24136: LD_VAR 0 2
24140: PUSH
24141: FOR_TO
24142: IFFALSE 24169
// if Prob ( 60 ) then
24144: LD_INT 60
24146: PPUSH
24147: CALL_OW 13
24151: IFFALSE 24167
// SetSide ( i , side ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: LD_VAR 0 3
24162: PPUSH
24163: CALL_OW 235
24167: GO 24141
24169: POP
24170: POP
// end ;
24171: PPOPN 3
24173: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24174: LD_EXP 38
24178: IFFALSE 24186
24180: PUSH
24181: LD_EXP 51
24185: AND
24186: IFFALSE 24305
24188: GO 24190
24190: DISABLE
24191: LD_INT 0
24193: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24194: LD_ADDR_VAR 0 1
24198: PUSH
24199: LD_INT 22
24201: PUSH
24202: LD_OWVAR 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 21
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 3
24223: PUSH
24224: LD_INT 23
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: PPUSH
24243: CALL_OW 69
24247: PUSH
24248: FOR_IN
24249: IFFALSE 24303
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL_OW 257
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: LD_INT 4
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: IN
24279: IFFALSE 24301
// SetClass ( un , rand ( 1 , 4 ) ) ;
24281: LD_VAR 0 1
24285: PPUSH
24286: LD_INT 1
24288: PPUSH
24289: LD_INT 4
24291: PPUSH
24292: CALL_OW 12
24296: PPUSH
24297: CALL_OW 336
24301: GO 24248
24303: POP
24304: POP
// end ;
24305: PPOPN 1
24307: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24308: LD_EXP 38
24312: IFFALSE 24320
24314: PUSH
24315: LD_EXP 50
24319: AND
24320: IFFALSE 24399
24322: GO 24324
24324: DISABLE
24325: LD_INT 0
24327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24328: LD_ADDR_VAR 0 1
24332: PUSH
24333: LD_INT 22
24335: PUSH
24336: LD_OWVAR 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 21
24347: PUSH
24348: LD_INT 3
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PPUSH
24359: CALL_OW 69
24363: ST_TO_ADDR
// if not tmp then
24364: LD_VAR 0 1
24368: NOT
24369: IFFALSE 24373
// exit ;
24371: GO 24399
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24373: LD_VAR 0 1
24377: PUSH
24378: LD_INT 1
24380: PPUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 12
24390: ARRAY
24391: PPUSH
24392: LD_INT 100
24394: PPUSH
24395: CALL_OW 234
// end ;
24399: PPOPN 1
24401: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24402: LD_EXP 38
24406: IFFALSE 24414
24408: PUSH
24409: LD_EXP 52
24413: AND
24414: IFFALSE 24512
24416: GO 24418
24418: DISABLE
24419: LD_INT 0
24421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24422: LD_ADDR_VAR 0 1
24426: PUSH
24427: LD_INT 22
24429: PUSH
24430: LD_OWVAR 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PPUSH
24453: CALL_OW 69
24457: ST_TO_ADDR
// if not tmp then
24458: LD_VAR 0 1
24462: NOT
24463: IFFALSE 24467
// exit ;
24465: GO 24512
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24467: LD_VAR 0 1
24471: PUSH
24472: LD_INT 1
24474: PPUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 12
24484: ARRAY
24485: PPUSH
24486: LD_INT 1
24488: PPUSH
24489: LD_INT 4
24491: PPUSH
24492: CALL_OW 12
24496: PPUSH
24497: LD_INT 3000
24499: PPUSH
24500: LD_INT 9000
24502: PPUSH
24503: CALL_OW 12
24507: PPUSH
24508: CALL_OW 492
// end ;
24512: PPOPN 1
24514: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24515: LD_EXP 38
24519: IFFALSE 24527
24521: PUSH
24522: LD_EXP 53
24526: AND
24527: IFFALSE 24547
24529: GO 24531
24531: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24532: LD_INT 1
24534: PPUSH
24535: LD_OWVAR 2
24539: PPUSH
24540: LD_INT 0
24542: PPUSH
24543: CALL_OW 324
24547: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24548: LD_EXP 38
24552: IFFALSE 24560
24554: PUSH
24555: LD_EXP 54
24559: AND
24560: IFFALSE 24643
24562: GO 24564
24564: DISABLE
24565: LD_INT 0
24567: PPUSH
24568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24569: LD_ADDR_VAR 0 2
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_OWVAR 2
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PPUSH
24600: CALL_OW 69
24604: ST_TO_ADDR
// if not tmp then
24605: LD_VAR 0 2
24609: NOT
24610: IFFALSE 24614
// exit ;
24612: GO 24643
// for i in tmp do
24614: LD_ADDR_VAR 0 1
24618: PUSH
24619: LD_VAR 0 2
24623: PUSH
24624: FOR_IN
24625: IFFALSE 24641
// SetBLevel ( i , 10 ) ;
24627: LD_VAR 0 1
24631: PPUSH
24632: LD_INT 10
24634: PPUSH
24635: CALL_OW 241
24639: GO 24624
24641: POP
24642: POP
// end ;
24643: PPOPN 2
24645: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24646: LD_EXP 38
24650: IFFALSE 24658
24652: PUSH
24653: LD_EXP 55
24657: AND
24658: IFFALSE 24769
24660: GO 24662
24662: DISABLE
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
24667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_OWVAR 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 25
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: ST_TO_ADDR
// if not tmp then
24704: LD_VAR 0 3
24708: NOT
24709: IFFALSE 24713
// exit ;
24711: GO 24769
// un := tmp [ rand ( 1 , tmp ) ] ;
24713: LD_ADDR_VAR 0 2
24717: PUSH
24718: LD_VAR 0 3
24722: PUSH
24723: LD_INT 1
24725: PPUSH
24726: LD_VAR 0 3
24730: PPUSH
24731: CALL_OW 12
24735: ARRAY
24736: ST_TO_ADDR
// if Crawls ( un ) then
24737: LD_VAR 0 2
24741: PPUSH
24742: CALL_OW 318
24746: IFFALSE 24757
// ComWalk ( un ) ;
24748: LD_VAR 0 2
24752: PPUSH
24753: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24757: LD_VAR 0 2
24761: PPUSH
24762: LD_INT 5
24764: PPUSH
24765: CALL_OW 336
// end ;
24769: PPOPN 3
24771: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24772: LD_EXP 38
24776: IFFALSE 24784
24778: PUSH
24779: LD_EXP 56
24783: AND
24784: IFFALSE 24796
24786: PUSH
24787: LD_OWVAR 67
24791: PUSH
24792: LD_INT 4
24794: LESS
24795: AND
24796: IFFALSE 24815
24798: GO 24800
24800: DISABLE
// begin Difficulty := Difficulty + 1 ;
24801: LD_ADDR_OWVAR 67
24805: PUSH
24806: LD_OWVAR 67
24810: PUSH
24811: LD_INT 1
24813: PLUS
24814: ST_TO_ADDR
// end ;
24815: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24816: LD_EXP 38
24820: IFFALSE 24828
24822: PUSH
24823: LD_EXP 57
24827: AND
24828: IFFALSE 24931
24830: GO 24832
24832: DISABLE
24833: LD_INT 0
24835: PPUSH
// begin for i := 1 to 5 do
24836: LD_ADDR_VAR 0 1
24840: PUSH
24841: DOUBLE
24842: LD_INT 1
24844: DEC
24845: ST_TO_ADDR
24846: LD_INT 5
24848: PUSH
24849: FOR_TO
24850: IFFALSE 24929
// begin uc_nation := nation_nature ;
24852: LD_ADDR_OWVAR 21
24856: PUSH
24857: LD_INT 0
24859: ST_TO_ADDR
// uc_side := 0 ;
24860: LD_ADDR_OWVAR 20
24864: PUSH
24865: LD_INT 0
24867: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24868: LD_ADDR_OWVAR 29
24872: PUSH
24873: LD_INT 12
24875: PUSH
24876: LD_INT 12
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: ST_TO_ADDR
// hc_agressivity := 20 ;
24883: LD_ADDR_OWVAR 35
24887: PUSH
24888: LD_INT 20
24890: ST_TO_ADDR
// hc_class := class_tiger ;
24891: LD_ADDR_OWVAR 28
24895: PUSH
24896: LD_INT 14
24898: ST_TO_ADDR
// hc_gallery :=  ;
24899: LD_ADDR_OWVAR 33
24903: PUSH
24904: LD_STRING 
24906: ST_TO_ADDR
// hc_name :=  ;
24907: LD_ADDR_OWVAR 26
24911: PUSH
24912: LD_STRING 
24914: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24915: CALL_OW 44
24919: PPUSH
24920: LD_INT 0
24922: PPUSH
24923: CALL_OW 51
// end ;
24927: GO 24849
24929: POP
24930: POP
// end ;
24931: PPOPN 1
24933: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24934: LD_EXP 38
24938: IFFALSE 24946
24940: PUSH
24941: LD_EXP 58
24945: AND
24946: IFFALSE 24955
24948: GO 24950
24950: DISABLE
// StreamSibBomb ;
24951: CALL 24956 0 0
24955: END
// export function StreamSibBomb ; var i , x , y ; begin
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
// result := false ;
24962: LD_ADDR_VAR 0 1
24966: PUSH
24967: LD_INT 0
24969: ST_TO_ADDR
// for i := 1 to 16 do
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: DOUBLE
24976: LD_INT 1
24978: DEC
24979: ST_TO_ADDR
24980: LD_INT 16
24982: PUSH
24983: FOR_TO
24984: IFFALSE 25183
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: LD_INT 10
24993: PUSH
24994: LD_INT 20
24996: PUSH
24997: LD_INT 30
24999: PUSH
25000: LD_INT 40
25002: PUSH
25003: LD_INT 50
25005: PUSH
25006: LD_INT 60
25008: PUSH
25009: LD_INT 70
25011: PUSH
25012: LD_INT 80
25014: PUSH
25015: LD_INT 90
25017: PUSH
25018: LD_INT 100
25020: PUSH
25021: LD_INT 110
25023: PUSH
25024: LD_INT 120
25026: PUSH
25027: LD_INT 130
25029: PUSH
25030: LD_INT 140
25032: PUSH
25033: LD_INT 150
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PPUSH
25056: LD_INT 15
25058: PPUSH
25059: CALL_OW 12
25063: ARRAY
25064: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25065: LD_ADDR_VAR 0 4
25069: PUSH
25070: LD_INT 10
25072: PUSH
25073: LD_INT 20
25075: PUSH
25076: LD_INT 30
25078: PUSH
25079: LD_INT 40
25081: PUSH
25082: LD_INT 50
25084: PUSH
25085: LD_INT 60
25087: PUSH
25088: LD_INT 70
25090: PUSH
25091: LD_INT 80
25093: PUSH
25094: LD_INT 90
25096: PUSH
25097: LD_INT 100
25099: PUSH
25100: LD_INT 110
25102: PUSH
25103: LD_INT 120
25105: PUSH
25106: LD_INT 130
25108: PUSH
25109: LD_INT 140
25111: PUSH
25112: LD_INT 150
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PPUSH
25135: LD_INT 15
25137: PPUSH
25138: CALL_OW 12
25142: ARRAY
25143: ST_TO_ADDR
// if ValidHex ( x , y ) then
25144: LD_VAR 0 3
25148: PPUSH
25149: LD_VAR 0 4
25153: PPUSH
25154: CALL_OW 488
25158: IFFALSE 25181
// begin result := [ x , y ] ;
25160: LD_ADDR_VAR 0 1
25164: PUSH
25165: LD_VAR 0 3
25169: PUSH
25170: LD_VAR 0 4
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: ST_TO_ADDR
// break ;
25179: GO 25183
// end ; end ;
25181: GO 24983
25183: POP
25184: POP
// if result then
25185: LD_VAR 0 1
25189: IFFALSE 25249
// begin ToLua ( playSibBomb() ) ;
25191: LD_STRING playSibBomb()
25193: PPUSH
25194: CALL_OW 559
// wait ( 0 0$14 ) ;
25198: LD_INT 490
25200: PPUSH
25201: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25205: LD_VAR 0 1
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: PPUSH
25214: LD_VAR 0 1
25218: PUSH
25219: LD_INT 2
25221: ARRAY
25222: PPUSH
25223: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25227: LD_VAR 0 1
25231: PUSH
25232: LD_INT 1
25234: ARRAY
25235: PPUSH
25236: LD_VAR 0 1
25240: PUSH
25241: LD_INT 2
25243: ARRAY
25244: PPUSH
25245: CALL_OW 429
// end ; end ;
25249: LD_VAR 0 1
25253: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25254: LD_EXP 38
25258: IFFALSE 25266
25260: PUSH
25261: LD_EXP 60
25265: AND
25266: IFFALSE 25278
25268: GO 25270
25270: DISABLE
// YouLost (  ) ;
25271: LD_STRING 
25273: PPUSH
25274: CALL_OW 104
25278: END
// every 0 0$1 trigger StreamModeActive and sFog do
25279: LD_EXP 38
25283: IFFALSE 25291
25285: PUSH
25286: LD_EXP 59
25290: AND
25291: IFFALSE 25305
25293: GO 25295
25295: DISABLE
// FogOff ( your_side ) ;
25296: LD_OWVAR 2
25300: PPUSH
25301: CALL_OW 344
25305: END
// every 0 0$1 trigger StreamModeActive and sSun do
25306: LD_EXP 38
25310: IFFALSE 25318
25312: PUSH
25313: LD_EXP 61
25317: AND
25318: IFFALSE 25346
25320: GO 25322
25322: DISABLE
// begin solar_recharge_percent := 0 ;
25323: LD_ADDR_OWVAR 79
25327: PUSH
25328: LD_INT 0
25330: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25331: LD_INT 10500
25333: PPUSH
25334: CALL_OW 67
// solar_recharge_percent := 100 ;
25338: LD_ADDR_OWVAR 79
25342: PUSH
25343: LD_INT 100
25345: ST_TO_ADDR
// end ;
25346: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25347: LD_EXP 38
25351: IFFALSE 25359
25353: PUSH
25354: LD_EXP 62
25358: AND
25359: IFFALSE 25598
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
25367: PPUSH
25368: PPUSH
// begin tmp := [ ] ;
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: EMPTY
25375: ST_TO_ADDR
// for i := 1 to 6 do
25376: LD_ADDR_VAR 0 1
25380: PUSH
25381: DOUBLE
25382: LD_INT 1
25384: DEC
25385: ST_TO_ADDR
25386: LD_INT 6
25388: PUSH
25389: FOR_TO
25390: IFFALSE 25495
// begin uc_nation := nation_nature ;
25392: LD_ADDR_OWVAR 21
25396: PUSH
25397: LD_INT 0
25399: ST_TO_ADDR
// uc_side := 0 ;
25400: LD_ADDR_OWVAR 20
25404: PUSH
25405: LD_INT 0
25407: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25408: LD_ADDR_OWVAR 29
25412: PUSH
25413: LD_INT 12
25415: PUSH
25416: LD_INT 12
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
// hc_agressivity := 20 ;
25423: LD_ADDR_OWVAR 35
25427: PUSH
25428: LD_INT 20
25430: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25431: LD_ADDR_OWVAR 28
25435: PUSH
25436: LD_INT 17
25438: ST_TO_ADDR
// hc_gallery :=  ;
25439: LD_ADDR_OWVAR 33
25443: PUSH
25444: LD_STRING 
25446: ST_TO_ADDR
// hc_name :=  ;
25447: LD_ADDR_OWVAR 26
25451: PUSH
25452: LD_STRING 
25454: ST_TO_ADDR
// un := CreateHuman ;
25455: LD_ADDR_VAR 0 2
25459: PUSH
25460: CALL_OW 44
25464: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_INT 1
25472: PPUSH
25473: CALL_OW 51
// tmp := tmp ^ un ;
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_VAR 0 3
25486: PUSH
25487: LD_VAR 0 2
25491: ADD
25492: ST_TO_ADDR
// end ;
25493: GO 25389
25495: POP
25496: POP
// repeat wait ( 0 0$1 ) ;
25497: LD_INT 35
25499: PPUSH
25500: CALL_OW 67
// for un in tmp do
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_VAR 0 3
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25589
// begin if IsDead ( un ) then
25517: LD_VAR 0 2
25521: PPUSH
25522: CALL_OW 301
25526: IFFALSE 25546
// begin tmp := tmp diff un ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_VAR 0 3
25537: PUSH
25538: LD_VAR 0 2
25542: DIFF
25543: ST_TO_ADDR
// continue ;
25544: GO 25514
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25546: LD_VAR 0 2
25550: PPUSH
25551: LD_INT 3
25553: PUSH
25554: LD_INT 22
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 69
25572: PPUSH
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 74
25582: PPUSH
25583: CALL_OW 115
// end ;
25587: GO 25514
25589: POP
25590: POP
// until not tmp ;
25591: LD_VAR 0 3
25595: NOT
25596: IFFALSE 25497
// end ;
25598: PPOPN 3
25600: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25601: LD_EXP 38
25605: IFFALSE 25613
25607: PUSH
25608: LD_EXP 63
25612: AND
25613: IFFALSE 25667
25615: GO 25617
25617: DISABLE
// begin ToLua ( displayTroll(); ) ;
25618: LD_STRING displayTroll();
25620: PPUSH
25621: CALL_OW 559
// wait ( 3 3$00 ) ;
25625: LD_INT 6300
25627: PPUSH
25628: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25632: LD_STRING hideTroll();
25634: PPUSH
25635: CALL_OW 559
// wait ( 1 1$00 ) ;
25639: LD_INT 2100
25641: PPUSH
25642: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25646: LD_STRING displayTroll();
25648: PPUSH
25649: CALL_OW 559
// wait ( 1 1$00 ) ;
25653: LD_INT 2100
25655: PPUSH
25656: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25660: LD_STRING hideTroll();
25662: PPUSH
25663: CALL_OW 559
// end ;
25667: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25668: LD_EXP 38
25672: IFFALSE 25680
25674: PUSH
25675: LD_EXP 64
25679: AND
25680: IFFALSE 25743
25682: GO 25684
25684: DISABLE
25685: LD_INT 0
25687: PPUSH
// begin p := 0 ;
25688: LD_ADDR_VAR 0 1
25692: PUSH
25693: LD_INT 0
25695: ST_TO_ADDR
// repeat game_speed := 1 ;
25696: LD_ADDR_OWVAR 65
25700: PUSH
25701: LD_INT 1
25703: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25704: LD_INT 35
25706: PPUSH
25707: CALL_OW 67
// p := p + 1 ;
25711: LD_ADDR_VAR 0 1
25715: PUSH
25716: LD_VAR 0 1
25720: PUSH
25721: LD_INT 1
25723: PLUS
25724: ST_TO_ADDR
// until p >= 60 ;
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 60
25732: GREATEREQUAL
25733: IFFALSE 25696
// game_speed := 4 ;
25735: LD_ADDR_OWVAR 65
25739: PUSH
25740: LD_INT 4
25742: ST_TO_ADDR
// end ;
25743: PPOPN 1
25745: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25746: LD_EXP 38
25750: IFFALSE 25758
25752: PUSH
25753: LD_EXP 65
25757: AND
25758: IFFALSE 25904
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25767: LD_ADDR_VAR 0 1
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_OWVAR 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 30
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 30
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: CALL_OW 69
25820: ST_TO_ADDR
// if not depot then
25821: LD_VAR 0 1
25825: NOT
25826: IFFALSE 25830
// exit ;
25828: GO 25904
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_VAR 0 1
25839: PUSH
25840: LD_INT 1
25842: PPUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: CALL_OW 12
25852: ARRAY
25853: PPUSH
25854: CALL_OW 274
25858: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25859: LD_VAR 0 2
25863: PPUSH
25864: LD_INT 1
25866: PPUSH
25867: LD_INT 0
25869: PPUSH
25870: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: LD_INT 2
25881: PPUSH
25882: LD_INT 0
25884: PPUSH
25885: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25889: LD_VAR 0 2
25893: PPUSH
25894: LD_INT 3
25896: PPUSH
25897: LD_INT 0
25899: PPUSH
25900: CALL_OW 277
// end ;
25904: PPOPN 2
25906: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25907: LD_EXP 38
25911: IFFALSE 25919
25913: PUSH
25914: LD_EXP 66
25918: AND
25919: IFFALSE 26016
25921: GO 25923
25923: DISABLE
25924: LD_INT 0
25926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25927: LD_ADDR_VAR 0 1
25931: PUSH
25932: LD_INT 22
25934: PUSH
25935: LD_OWVAR 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 21
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 23
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 1
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25990: LD_VAR 0 1
25994: PUSH
25995: LD_INT 1
25997: PPUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 12
26007: ARRAY
26008: PPUSH
26009: LD_INT 200
26011: PPUSH
26012: CALL_OW 234
// end ;
26016: PPOPN 1
26018: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26019: LD_EXP 38
26023: IFFALSE 26031
26025: PUSH
26026: LD_EXP 67
26030: AND
26031: IFFALSE 26110
26033: GO 26035
26035: DISABLE
26036: LD_INT 0
26038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26039: LD_ADDR_VAR 0 1
26043: PUSH
26044: LD_INT 22
26046: PUSH
26047: LD_OWVAR 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 21
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PPUSH
26070: CALL_OW 69
26074: ST_TO_ADDR
// if not tmp then
26075: LD_VAR 0 1
26079: NOT
26080: IFFALSE 26084
// exit ;
26082: GO 26110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26084: LD_VAR 0 1
26088: PUSH
26089: LD_INT 1
26091: PPUSH
26092: LD_VAR 0 1
26096: PPUSH
26097: CALL_OW 12
26101: ARRAY
26102: PPUSH
26103: LD_INT 60
26105: PPUSH
26106: CALL_OW 234
// end ;
26110: PPOPN 1
26112: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26113: LD_EXP 38
26117: IFFALSE 26125
26119: PUSH
26120: LD_EXP 68
26124: AND
26125: IFFALSE 26224
26127: GO 26129
26129: DISABLE
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
// begin enable ;
26134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26135: LD_ADDR_VAR 0 1
26139: PUSH
26140: LD_INT 22
26142: PUSH
26143: LD_OWVAR 2
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 61
26154: PUSH
26155: EMPTY
26156: LIST
26157: PUSH
26158: LD_INT 33
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: PPUSH
26173: CALL_OW 69
26177: ST_TO_ADDR
// if not tmp then
26178: LD_VAR 0 1
26182: NOT
26183: IFFALSE 26187
// exit ;
26185: GO 26224
// for i in tmp do
26187: LD_ADDR_VAR 0 2
26191: PUSH
26192: LD_VAR 0 1
26196: PUSH
26197: FOR_IN
26198: IFFALSE 26222
// if IsControledBy ( i ) then
26200: LD_VAR 0 2
26204: PPUSH
26205: CALL_OW 312
26209: IFFALSE 26220
// ComUnlink ( i ) ;
26211: LD_VAR 0 2
26215: PPUSH
26216: CALL_OW 136
26220: GO 26197
26222: POP
26223: POP
// end ;
26224: PPOPN 2
26226: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26227: LD_EXP 38
26231: IFFALSE 26239
26233: PUSH
26234: LD_EXP 69
26238: AND
26239: IFFALSE 26379
26241: GO 26243
26243: DISABLE
26244: LD_INT 0
26246: PPUSH
26247: PPUSH
// begin ToLua ( displayPowell(); ) ;
26248: LD_STRING displayPowell();
26250: PPUSH
26251: CALL_OW 559
// uc_side := 0 ;
26255: LD_ADDR_OWVAR 20
26259: PUSH
26260: LD_INT 0
26262: ST_TO_ADDR
// uc_nation := 2 ;
26263: LD_ADDR_OWVAR 21
26267: PUSH
26268: LD_INT 2
26270: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26271: LD_ADDR_OWVAR 37
26275: PUSH
26276: LD_INT 14
26278: ST_TO_ADDR
// vc_engine := engine_siberite ;
26279: LD_ADDR_OWVAR 39
26283: PUSH
26284: LD_INT 3
26286: ST_TO_ADDR
// vc_control := control_apeman ;
26287: LD_ADDR_OWVAR 38
26291: PUSH
26292: LD_INT 5
26294: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26295: LD_ADDR_OWVAR 40
26299: PUSH
26300: LD_INT 29
26302: ST_TO_ADDR
// un := CreateVehicle ;
26303: LD_ADDR_VAR 0 2
26307: PUSH
26308: CALL_OW 45
26312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26313: LD_VAR 0 2
26317: PPUSH
26318: LD_INT 1
26320: PPUSH
26321: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26325: LD_INT 35
26327: PPUSH
26328: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26332: LD_VAR 0 2
26336: PPUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 69
26353: PPUSH
26354: LD_VAR 0 2
26358: PPUSH
26359: CALL_OW 74
26363: PPUSH
26364: CALL_OW 115
// until IsDead ( un ) ;
26368: LD_VAR 0 2
26372: PPUSH
26373: CALL_OW 301
26377: IFFALSE 26325
// end ;
26379: PPOPN 2
26381: END
// every 0 0$1 trigger StreamModeActive and sStu do
26382: LD_EXP 38
26386: IFFALSE 26394
26388: PUSH
26389: LD_EXP 77
26393: AND
26394: IFFALSE 26410
26396: GO 26398
26398: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26399: LD_STRING displayStucuk();
26401: PPUSH
26402: CALL_OW 559
// ResetFog ;
26406: CALL_OW 335
// end ;
26410: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26411: LD_EXP 38
26415: IFFALSE 26423
26417: PUSH
26418: LD_EXP 70
26422: AND
26423: IFFALSE 26564
26425: GO 26427
26427: DISABLE
26428: LD_INT 0
26430: PPUSH
26431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26432: LD_ADDR_VAR 0 2
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_OWVAR 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: ST_TO_ADDR
// if not tmp then
26468: LD_VAR 0 2
26472: NOT
26473: IFFALSE 26477
// exit ;
26475: GO 26564
// un := tmp [ rand ( 1 , tmp ) ] ;
26477: LD_ADDR_VAR 0 1
26481: PUSH
26482: LD_VAR 0 2
26486: PUSH
26487: LD_INT 1
26489: PPUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: CALL_OW 12
26499: ARRAY
26500: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26501: LD_VAR 0 1
26505: PPUSH
26506: LD_INT 0
26508: PPUSH
26509: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_OWVAR 3
26522: PUSH
26523: LD_VAR 0 1
26527: DIFF
26528: PPUSH
26529: LD_VAR 0 1
26533: PPUSH
26534: CALL_OW 74
26538: PPUSH
26539: CALL_OW 115
// wait ( 0 0$20 ) ;
26543: LD_INT 700
26545: PPUSH
26546: CALL_OW 67
// SetSide ( un , your_side ) ;
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_OWVAR 2
26559: PPUSH
26560: CALL_OW 235
// end ;
26564: PPOPN 2
26566: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26567: LD_EXP 38
26571: IFFALSE 26579
26573: PUSH
26574: LD_EXP 71
26578: AND
26579: IFFALSE 26685
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26587: LD_ADDR_VAR 0 1
26591: PUSH
26592: LD_INT 22
26594: PUSH
26595: LD_OWVAR 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: LD_INT 30
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 30
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: ST_TO_ADDR
// if not depot then
26641: LD_VAR 0 1
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26685
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 1
26657: ARRAY
26658: PPUSH
26659: CALL_OW 250
26663: PPUSH
26664: LD_VAR 0 1
26668: PUSH
26669: LD_INT 1
26671: ARRAY
26672: PPUSH
26673: CALL_OW 251
26677: PPUSH
26678: LD_INT 70
26680: PPUSH
26681: CALL_OW 495
// end ;
26685: PPOPN 1
26687: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26688: LD_EXP 38
26692: IFFALSE 26700
26694: PUSH
26695: LD_EXP 72
26699: AND
26700: IFFALSE 26911
26702: GO 26704
26704: DISABLE
26705: LD_INT 0
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26712: LD_ADDR_VAR 0 5
26716: PUSH
26717: LD_INT 22
26719: PUSH
26720: LD_OWVAR 2
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 21
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PPUSH
26743: CALL_OW 69
26747: ST_TO_ADDR
// if not tmp then
26748: LD_VAR 0 5
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 26911
// for i in tmp do
26757: LD_ADDR_VAR 0 1
26761: PUSH
26762: LD_VAR 0 5
26766: PUSH
26767: FOR_IN
26768: IFFALSE 26909
// begin d := rand ( 0 , 5 ) ;
26770: LD_ADDR_VAR 0 4
26774: PUSH
26775: LD_INT 0
26777: PPUSH
26778: LD_INT 5
26780: PPUSH
26781: CALL_OW 12
26785: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26786: LD_ADDR_VAR 0 2
26790: PUSH
26791: LD_VAR 0 1
26795: PPUSH
26796: CALL_OW 250
26800: PPUSH
26801: LD_VAR 0 4
26805: PPUSH
26806: LD_INT 3
26808: PPUSH
26809: LD_INT 12
26811: PPUSH
26812: CALL_OW 12
26816: PPUSH
26817: CALL_OW 272
26821: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 251
26836: PPUSH
26837: LD_VAR 0 4
26841: PPUSH
26842: LD_INT 3
26844: PPUSH
26845: LD_INT 12
26847: PPUSH
26848: CALL_OW 12
26852: PPUSH
26853: CALL_OW 273
26857: ST_TO_ADDR
// if ValidHex ( x , y ) then
26858: LD_VAR 0 2
26862: PPUSH
26863: LD_VAR 0 3
26867: PPUSH
26868: CALL_OW 488
26872: IFFALSE 26907
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: LD_INT 3
26891: PPUSH
26892: LD_INT 6
26894: PPUSH
26895: CALL_OW 12
26899: PPUSH
26900: LD_INT 1
26902: PPUSH
26903: CALL_OW 483
// end ;
26907: GO 26767
26909: POP
26910: POP
// end ;
26911: PPOPN 5
26913: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26914: LD_EXP 38
26918: IFFALSE 26926
26920: PUSH
26921: LD_EXP 73
26925: AND
26926: IFFALSE 27020
26928: GO 26930
26930: DISABLE
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: LD_INT 22
26942: PUSH
26943: LD_OWVAR 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 32
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 21
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: PPUSH
26977: CALL_OW 69
26981: ST_TO_ADDR
// if not tmp then
26982: LD_VAR 0 2
26986: NOT
26987: IFFALSE 26991
// exit ;
26989: GO 27020
// for i in tmp do
26991: LD_ADDR_VAR 0 1
26995: PUSH
26996: LD_VAR 0 2
27000: PUSH
27001: FOR_IN
27002: IFFALSE 27018
// SetFuel ( i , 0 ) ;
27004: LD_VAR 0 1
27008: PPUSH
27009: LD_INT 0
27011: PPUSH
27012: CALL_OW 240
27016: GO 27001
27018: POP
27019: POP
// end ;
27020: PPOPN 2
27022: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27023: LD_EXP 38
27027: IFFALSE 27035
27029: PUSH
27030: LD_EXP 74
27034: AND
27035: IFFALSE 27101
27037: GO 27039
27039: DISABLE
27040: LD_INT 0
27042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27043: LD_ADDR_VAR 0 1
27047: PUSH
27048: LD_INT 22
27050: PUSH
27051: LD_OWVAR 2
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 30
27062: PUSH
27063: LD_INT 29
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 69
27078: ST_TO_ADDR
// if not tmp then
27079: LD_VAR 0 1
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 27101
// DestroyUnit ( tmp [ 1 ] ) ;
27088: LD_VAR 0 1
27092: PUSH
27093: LD_INT 1
27095: ARRAY
27096: PPUSH
27097: CALL_OW 65
// end ;
27101: PPOPN 1
27103: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27104: LD_EXP 38
27108: IFFALSE 27116
27110: PUSH
27111: LD_EXP 76
27115: AND
27116: IFFALSE 27245
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
// begin uc_side := 0 ;
27124: LD_ADDR_OWVAR 20
27128: PUSH
27129: LD_INT 0
27131: ST_TO_ADDR
// uc_nation := nation_arabian ;
27132: LD_ADDR_OWVAR 21
27136: PUSH
27137: LD_INT 2
27139: ST_TO_ADDR
// hc_gallery :=  ;
27140: LD_ADDR_OWVAR 33
27144: PUSH
27145: LD_STRING 
27147: ST_TO_ADDR
// hc_name :=  ;
27148: LD_ADDR_OWVAR 26
27152: PUSH
27153: LD_STRING 
27155: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27156: LD_INT 1
27158: PPUSH
27159: LD_INT 11
27161: PPUSH
27162: LD_INT 10
27164: PPUSH
27165: CALL_OW 380
// un := CreateHuman ;
27169: LD_ADDR_VAR 0 1
27173: PUSH
27174: CALL_OW 44
27178: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27179: LD_VAR 0 1
27183: PPUSH
27184: LD_INT 1
27186: PPUSH
27187: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27191: LD_INT 35
27193: PPUSH
27194: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27198: LD_VAR 0 1
27202: PPUSH
27203: LD_INT 22
27205: PUSH
27206: LD_OWVAR 2
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PPUSH
27215: CALL_OW 69
27219: PPUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 74
27229: PPUSH
27230: CALL_OW 115
// until IsDead ( un ) ;
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 301
27243: IFFALSE 27191
// end ;
27245: PPOPN 1
27247: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27248: LD_EXP 38
27252: IFFALSE 27260
27254: PUSH
27255: LD_EXP 78
27259: AND
27260: IFFALSE 27272
27262: GO 27264
27264: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27265: LD_STRING earthquake(getX(game), 0, 32)
27267: PPUSH
27268: CALL_OW 559
27272: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27273: LD_EXP 38
27277: IFFALSE 27285
27279: PUSH
27280: LD_EXP 79
27284: AND
27285: IFFALSE 27376
27287: GO 27289
27289: DISABLE
27290: LD_INT 0
27292: PPUSH
// begin enable ;
27293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27294: LD_ADDR_VAR 0 1
27298: PUSH
27299: LD_INT 22
27301: PUSH
27302: LD_OWVAR 2
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 21
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 33
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: LIST
27335: PPUSH
27336: CALL_OW 69
27340: ST_TO_ADDR
// if not tmp then
27341: LD_VAR 0 1
27345: NOT
27346: IFFALSE 27350
// exit ;
27348: GO 27376
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27350: LD_VAR 0 1
27354: PUSH
27355: LD_INT 1
27357: PPUSH
27358: LD_VAR 0 1
27362: PPUSH
27363: CALL_OW 12
27367: ARRAY
27368: PPUSH
27369: LD_INT 1
27371: PPUSH
27372: CALL_OW 234
// end ;
27376: PPOPN 1
27378: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27379: LD_EXP 38
27383: IFFALSE 27391
27385: PUSH
27386: LD_EXP 80
27390: AND
27391: IFFALSE 27532
27393: GO 27395
27395: DISABLE
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
27400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 22
27408: PUSH
27409: LD_OWVAR 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 25
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PPUSH
27432: CALL_OW 69
27436: ST_TO_ADDR
// if not tmp then
27437: LD_VAR 0 3
27441: NOT
27442: IFFALSE 27446
// exit ;
27444: GO 27532
// un := tmp [ rand ( 1 , tmp ) ] ;
27446: LD_ADDR_VAR 0 2
27450: PUSH
27451: LD_VAR 0 3
27455: PUSH
27456: LD_INT 1
27458: PPUSH
27459: LD_VAR 0 3
27463: PPUSH
27464: CALL_OW 12
27468: ARRAY
27469: ST_TO_ADDR
// if Crawls ( un ) then
27470: LD_VAR 0 2
27474: PPUSH
27475: CALL_OW 318
27479: IFFALSE 27490
// ComWalk ( un ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_INT 9
27497: PPUSH
27498: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27502: LD_INT 28
27504: PPUSH
27505: LD_OWVAR 2
27509: PPUSH
27510: LD_INT 2
27512: PPUSH
27513: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27517: LD_INT 29
27519: PPUSH
27520: LD_OWVAR 2
27524: PPUSH
27525: LD_INT 2
27527: PPUSH
27528: CALL_OW 322
// end ;
27532: PPOPN 3
27534: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27535: LD_EXP 38
27539: IFFALSE 27547
27541: PUSH
27542: LD_EXP 81
27546: AND
27547: IFFALSE 27658
27549: GO 27551
27551: DISABLE
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
27556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_INT 22
27564: PUSH
27565: LD_OWVAR 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 25
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PPUSH
27588: CALL_OW 69
27592: ST_TO_ADDR
// if not tmp then
27593: LD_VAR 0 3
27597: NOT
27598: IFFALSE 27602
// exit ;
27600: GO 27658
// un := tmp [ rand ( 1 , tmp ) ] ;
27602: LD_ADDR_VAR 0 2
27606: PUSH
27607: LD_VAR 0 3
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_VAR 0 3
27619: PPUSH
27620: CALL_OW 12
27624: ARRAY
27625: ST_TO_ADDR
// if Crawls ( un ) then
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 318
27635: IFFALSE 27646
// ComWalk ( un ) ;
27637: LD_VAR 0 2
27641: PPUSH
27642: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_INT 8
27653: PPUSH
27654: CALL_OW 336
// end ;
27658: PPOPN 3
27660: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27661: LD_EXP 38
27665: IFFALSE 27673
27667: PUSH
27668: LD_EXP 82
27672: AND
27673: IFFALSE 27817
27675: GO 27677
27677: DISABLE
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27682: LD_ADDR_VAR 0 2
27686: PUSH
27687: LD_INT 22
27689: PUSH
27690: LD_OWVAR 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 21
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 34
27714: PUSH
27715: LD_INT 12
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 34
27724: PUSH
27725: LD_INT 51
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 34
27734: PUSH
27735: LD_INT 32
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: PPUSH
27753: CALL_OW 69
27757: ST_TO_ADDR
// if not tmp then
27758: LD_VAR 0 2
27762: NOT
27763: IFFALSE 27767
// exit ;
27765: GO 27817
// for i in tmp do
27767: LD_ADDR_VAR 0 1
27771: PUSH
27772: LD_VAR 0 2
27776: PUSH
27777: FOR_IN
27778: IFFALSE 27815
// if GetCargo ( i , mat_artifact ) = 0 then
27780: LD_VAR 0 1
27784: PPUSH
27785: LD_INT 4
27787: PPUSH
27788: CALL_OW 289
27792: PUSH
27793: LD_INT 0
27795: EQUAL
27796: IFFALSE 27813
// SetCargo ( i , mat_siberit , 100 ) ;
27798: LD_VAR 0 1
27802: PPUSH
27803: LD_INT 3
27805: PPUSH
27806: LD_INT 100
27808: PPUSH
27809: CALL_OW 290
27813: GO 27777
27815: POP
27816: POP
// end ;
27817: PPOPN 2
27819: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27820: LD_EXP 38
27824: IFFALSE 27832
27826: PUSH
27827: LD_EXP 83
27831: AND
27832: IFFALSE 28015
27834: GO 27836
27836: DISABLE
27837: LD_INT 0
27839: PPUSH
27840: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27841: LD_ADDR_VAR 0 2
27845: PUSH
27846: LD_INT 22
27848: PUSH
27849: LD_OWVAR 2
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 69
27862: ST_TO_ADDR
// if not tmp then
27863: LD_VAR 0 2
27867: NOT
27868: IFFALSE 27872
// exit ;
27870: GO 28015
// for i := 1 to 2 do
27872: LD_ADDR_VAR 0 1
27876: PUSH
27877: DOUBLE
27878: LD_INT 1
27880: DEC
27881: ST_TO_ADDR
27882: LD_INT 2
27884: PUSH
27885: FOR_TO
27886: IFFALSE 28013
// begin uc_side := your_side ;
27888: LD_ADDR_OWVAR 20
27892: PUSH
27893: LD_OWVAR 2
27897: ST_TO_ADDR
// uc_nation := nation_american ;
27898: LD_ADDR_OWVAR 21
27902: PUSH
27903: LD_INT 1
27905: ST_TO_ADDR
// vc_chassis := us_morphling ;
27906: LD_ADDR_OWVAR 37
27910: PUSH
27911: LD_INT 5
27913: ST_TO_ADDR
// vc_engine := engine_siberite ;
27914: LD_ADDR_OWVAR 39
27918: PUSH
27919: LD_INT 3
27921: ST_TO_ADDR
// vc_control := control_computer ;
27922: LD_ADDR_OWVAR 38
27926: PUSH
27927: LD_INT 3
27929: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27930: LD_ADDR_OWVAR 40
27934: PUSH
27935: LD_INT 10
27937: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27938: LD_VAR 0 2
27942: PUSH
27943: LD_INT 1
27945: ARRAY
27946: PPUSH
27947: CALL_OW 310
27951: NOT
27952: IFFALSE 27999
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27954: CALL_OW 45
27958: PPUSH
27959: LD_VAR 0 2
27963: PUSH
27964: LD_INT 1
27966: ARRAY
27967: PPUSH
27968: CALL_OW 250
27972: PPUSH
27973: LD_VAR 0 2
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: PPUSH
27982: CALL_OW 251
27986: PPUSH
27987: LD_INT 12
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: CALL_OW 50
27997: GO 28011
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27999: CALL_OW 45
28003: PPUSH
28004: LD_INT 1
28006: PPUSH
28007: CALL_OW 51
// end ;
28011: GO 27885
28013: POP
28014: POP
// end ;
28015: PPOPN 2
28017: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28018: LD_EXP 38
28022: IFFALSE 28030
28024: PUSH
28025: LD_EXP 84
28029: AND
28030: IFFALSE 28252
28032: GO 28034
28034: DISABLE
28035: LD_INT 0
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28043: LD_ADDR_VAR 0 6
28047: PUSH
28048: LD_INT 22
28050: PUSH
28051: LD_OWVAR 2
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 21
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 23
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 69
28096: ST_TO_ADDR
// if not tmp then
28097: LD_VAR 0 6
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28252
// s1 := rand ( 1 , 4 ) ;
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_INT 1
28113: PPUSH
28114: LD_INT 4
28116: PPUSH
28117: CALL_OW 12
28121: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28122: LD_ADDR_VAR 0 4
28126: PUSH
28127: LD_VAR 0 6
28131: PUSH
28132: LD_INT 1
28134: ARRAY
28135: PPUSH
28136: LD_VAR 0 2
28140: PPUSH
28141: CALL_OW 259
28145: ST_TO_ADDR
// if s1 = 1 then
28146: LD_VAR 0 2
28150: PUSH
28151: LD_INT 1
28153: EQUAL
28154: IFFALSE 28174
// s2 := rand ( 2 , 4 ) else
28156: LD_ADDR_VAR 0 3
28160: PUSH
28161: LD_INT 2
28163: PPUSH
28164: LD_INT 4
28166: PPUSH
28167: CALL_OW 12
28171: ST_TO_ADDR
28172: GO 28182
// s2 := 1 ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28182: LD_ADDR_VAR 0 5
28186: PUSH
28187: LD_VAR 0 6
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PPUSH
28196: LD_VAR 0 3
28200: PPUSH
28201: CALL_OW 259
28205: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28206: LD_VAR 0 6
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PPUSH
28215: LD_VAR 0 2
28219: PPUSH
28220: LD_VAR 0 5
28224: PPUSH
28225: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28229: LD_VAR 0 6
28233: PUSH
28234: LD_INT 1
28236: ARRAY
28237: PPUSH
28238: LD_VAR 0 3
28242: PPUSH
28243: LD_VAR 0 4
28247: PPUSH
28248: CALL_OW 237
// end ;
28252: PPOPN 6
28254: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28255: LD_EXP 38
28259: IFFALSE 28267
28261: PUSH
28262: LD_EXP 85
28266: AND
28267: IFFALSE 28346
28269: GO 28271
28271: DISABLE
28272: LD_INT 0
28274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28275: LD_ADDR_VAR 0 1
28279: PUSH
28280: LD_INT 22
28282: PUSH
28283: LD_OWVAR 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 30
28294: PUSH
28295: LD_INT 3
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PPUSH
28306: CALL_OW 69
28310: ST_TO_ADDR
// if not tmp then
28311: LD_VAR 0 1
28315: NOT
28316: IFFALSE 28320
// exit ;
28318: GO 28346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28320: LD_VAR 0 1
28324: PUSH
28325: LD_INT 1
28327: PPUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 12
28337: ARRAY
28338: PPUSH
28339: LD_INT 1
28341: PPUSH
28342: CALL_OW 234
// end ;
28346: PPOPN 1
28348: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28349: LD_EXP 38
28353: IFFALSE 28361
28355: PUSH
28356: LD_EXP 86
28360: AND
28361: IFFALSE 28473
28363: GO 28365
28365: DISABLE
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28370: LD_ADDR_VAR 0 2
28374: PUSH
28375: LD_INT 22
28377: PUSH
28378: LD_OWVAR 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 30
28392: PUSH
28393: LD_INT 27
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 30
28402: PUSH
28403: LD_INT 26
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 30
28412: PUSH
28413: LD_INT 28
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 69
28434: ST_TO_ADDR
// if not tmp then
28435: LD_VAR 0 2
28439: NOT
28440: IFFALSE 28444
// exit ;
28442: GO 28473
// for i in tmp do
28444: LD_ADDR_VAR 0 1
28448: PUSH
28449: LD_VAR 0 2
28453: PUSH
28454: FOR_IN
28455: IFFALSE 28471
// SetLives ( i , 1 ) ;
28457: LD_VAR 0 1
28461: PPUSH
28462: LD_INT 1
28464: PPUSH
28465: CALL_OW 234
28469: GO 28454
28471: POP
28472: POP
// end ;
28473: PPOPN 2
28475: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28476: LD_EXP 38
28480: IFFALSE 28488
28482: PUSH
28483: LD_EXP 87
28487: AND
28488: IFFALSE 28775
28490: GO 28492
28492: DISABLE
28493: LD_INT 0
28495: PPUSH
28496: PPUSH
28497: PPUSH
// begin i := rand ( 1 , 7 ) ;
28498: LD_ADDR_VAR 0 1
28502: PUSH
28503: LD_INT 1
28505: PPUSH
28506: LD_INT 7
28508: PPUSH
28509: CALL_OW 12
28513: ST_TO_ADDR
// case i of 1 :
28514: LD_VAR 0 1
28518: PUSH
28519: LD_INT 1
28521: DOUBLE
28522: EQUAL
28523: IFTRUE 28527
28525: GO 28537
28527: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28528: LD_STRING earthquake(getX(game), 0, 32)
28530: PPUSH
28531: CALL_OW 559
28535: GO 28775
28537: LD_INT 2
28539: DOUBLE
28540: EQUAL
28541: IFTRUE 28545
28543: GO 28559
28545: POP
// begin ToLua ( displayStucuk(); ) ;
28546: LD_STRING displayStucuk();
28548: PPUSH
28549: CALL_OW 559
// ResetFog ;
28553: CALL_OW 335
// end ; 3 :
28557: GO 28775
28559: LD_INT 3
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28671
28567: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28568: LD_ADDR_VAR 0 2
28572: PUSH
28573: LD_INT 22
28575: PUSH
28576: LD_OWVAR 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 25
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 2
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28775
// un := tmp [ rand ( 1 , tmp ) ] ;
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_VAR 0 2
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 2
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: ST_TO_ADDR
// if Crawls ( un ) then
28637: LD_VAR 0 3
28641: PPUSH
28642: CALL_OW 318
28646: IFFALSE 28657
// ComWalk ( un ) ;
28648: LD_VAR 0 3
28652: PPUSH
28653: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28657: LD_VAR 0 3
28661: PPUSH
28662: LD_INT 8
28664: PPUSH
28665: CALL_OW 336
// end ; 4 :
28669: GO 28775
28671: LD_INT 4
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28753
28679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28680: LD_ADDR_VAR 0 2
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 30
28699: PUSH
28700: LD_INT 29
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 2
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28775
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28725: LD_VAR 0 2
28729: PUSH
28730: LD_INT 1
28732: ARRAY
28733: PPUSH
28734: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28738: LD_VAR 0 2
28742: PUSH
28743: LD_INT 1
28745: ARRAY
28746: PPUSH
28747: CALL_OW 65
// end ; 5 .. 7 :
28751: GO 28775
28753: LD_INT 5
28755: DOUBLE
28756: GREATEREQUAL
28757: IFFALSE 28765
28759: LD_INT 7
28761: DOUBLE
28762: LESSEQUAL
28763: IFTRUE 28767
28765: GO 28774
28767: POP
// StreamSibBomb ; end ;
28768: CALL 24956 0 0
28772: GO 28775
28774: POP
// end ;
28775: PPOPN 3
28777: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28778: LD_EXP 38
28782: IFFALSE 28790
28784: PUSH
28785: LD_EXP 88
28789: AND
28790: IFFALSE 28946
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
28799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28800: LD_ADDR_VAR 0 2
28804: PUSH
28805: LD_INT 81
28807: PUSH
28808: LD_OWVAR 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 21
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 21
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PPUSH
28849: CALL_OW 69
28853: ST_TO_ADDR
// if not tmp then
28854: LD_VAR 0 2
28858: NOT
28859: IFFALSE 28863
// exit ;
28861: GO 28946
// p := 0 ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 0
28870: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28871: LD_INT 35
28873: PPUSH
28874: CALL_OW 67
// p := p + 1 ;
28878: LD_ADDR_VAR 0 3
28882: PUSH
28883: LD_VAR 0 3
28887: PUSH
28888: LD_INT 1
28890: PLUS
28891: ST_TO_ADDR
// for i in tmp do
28892: LD_ADDR_VAR 0 1
28896: PUSH
28897: LD_VAR 0 2
28901: PUSH
28902: FOR_IN
28903: IFFALSE 28934
// if GetLives ( i ) < 1000 then
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 256
28914: PUSH
28915: LD_INT 1000
28917: LESS
28918: IFFALSE 28932
// SetLives ( i , 1000 ) ;
28920: LD_VAR 0 1
28924: PPUSH
28925: LD_INT 1000
28927: PPUSH
28928: CALL_OW 234
28932: GO 28902
28934: POP
28935: POP
// until p > 20 ;
28936: LD_VAR 0 3
28940: PUSH
28941: LD_INT 20
28943: GREATER
28944: IFFALSE 28871
// end ;
28946: PPOPN 3
28948: END
// every 0 0$1 trigger StreamModeActive and sTime do
28949: LD_EXP 38
28953: IFFALSE 28961
28955: PUSH
28956: LD_EXP 89
28960: AND
28961: IFFALSE 28996
28963: GO 28965
28965: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28966: LD_INT 28
28968: PPUSH
28969: LD_OWVAR 2
28973: PPUSH
28974: LD_INT 2
28976: PPUSH
28977: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28981: LD_INT 30
28983: PPUSH
28984: LD_OWVAR 2
28988: PPUSH
28989: LD_INT 2
28991: PPUSH
28992: CALL_OW 322
// end ;
28996: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28997: LD_EXP 38
29001: IFFALSE 29009
29003: PUSH
29004: LD_EXP 90
29008: AND
29009: IFFALSE 29130
29011: GO 29013
29013: DISABLE
29014: LD_INT 0
29016: PPUSH
29017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29018: LD_ADDR_VAR 0 2
29022: PUSH
29023: LD_INT 22
29025: PUSH
29026: LD_OWVAR 2
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 21
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 23
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: PPUSH
29067: CALL_OW 69
29071: ST_TO_ADDR
// if not tmp then
29072: LD_VAR 0 2
29076: NOT
29077: IFFALSE 29081
// exit ;
29079: GO 29130
// for i in tmp do
29081: LD_ADDR_VAR 0 1
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: FOR_IN
29092: IFFALSE 29128
// begin if Crawls ( i ) then
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 318
29103: IFFALSE 29114
// ComWalk ( i ) ;
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 138
// SetClass ( i , 2 ) ;
29114: LD_VAR 0 1
29118: PPUSH
29119: LD_INT 2
29121: PPUSH
29122: CALL_OW 336
// end ;
29126: GO 29091
29128: POP
29129: POP
// end ;
29130: PPOPN 2
29132: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29133: LD_EXP 38
29137: IFFALSE 29145
29139: PUSH
29140: LD_EXP 91
29144: AND
29145: IFFALSE 29435
29147: GO 29149
29149: DISABLE
29150: LD_INT 0
29152: PPUSH
29153: PPUSH
29154: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29155: LD_OWVAR 2
29159: PPUSH
29160: LD_INT 9
29162: PPUSH
29163: LD_INT 1
29165: PPUSH
29166: LD_INT 1
29168: PPUSH
29169: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29173: LD_INT 9
29175: PPUSH
29176: LD_OWVAR 2
29180: PPUSH
29181: CALL_OW 343
// uc_side := 9 ;
29185: LD_ADDR_OWVAR 20
29189: PUSH
29190: LD_INT 9
29192: ST_TO_ADDR
// uc_nation := 2 ;
29193: LD_ADDR_OWVAR 21
29197: PUSH
29198: LD_INT 2
29200: ST_TO_ADDR
// hc_name := Dark Warrior ;
29201: LD_ADDR_OWVAR 26
29205: PUSH
29206: LD_STRING Dark Warrior
29208: ST_TO_ADDR
// hc_gallery :=  ;
29209: LD_ADDR_OWVAR 33
29213: PUSH
29214: LD_STRING 
29216: ST_TO_ADDR
// hc_noskilllimit := true ;
29217: LD_ADDR_OWVAR 76
29221: PUSH
29222: LD_INT 1
29224: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29225: LD_ADDR_OWVAR 31
29229: PUSH
29230: LD_INT 30
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 30
29238: PUSH
29239: LD_INT 30
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: ST_TO_ADDR
// un := CreateHuman ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: CALL_OW 44
29257: ST_TO_ADDR
// hc_noskilllimit := false ;
29258: LD_ADDR_OWVAR 76
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29266: LD_VAR 0 3
29270: PPUSH
29271: LD_INT 1
29273: PPUSH
29274: CALL_OW 51
// ToLua ( playRanger() ) ;
29278: LD_STRING playRanger()
29280: PPUSH
29281: CALL_OW 559
// p := 0 ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_INT 0
29292: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29293: LD_INT 35
29295: PPUSH
29296: CALL_OW 67
// p := p + 1 ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_VAR 0 2
29309: PUSH
29310: LD_INT 1
29312: PLUS
29313: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29314: LD_VAR 0 3
29318: PPUSH
29319: CALL_OW 256
29323: PUSH
29324: LD_INT 1000
29326: LESS
29327: IFFALSE 29341
// SetLives ( un , 1000 ) ;
29329: LD_VAR 0 3
29333: PPUSH
29334: LD_INT 1000
29336: PPUSH
29337: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29341: LD_VAR 0 3
29345: PPUSH
29346: LD_INT 81
29348: PUSH
29349: LD_OWVAR 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 91
29360: PUSH
29361: LD_VAR 0 3
29365: PUSH
29366: LD_INT 30
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PPUSH
29378: CALL_OW 69
29382: PPUSH
29383: LD_VAR 0 3
29387: PPUSH
29388: CALL_OW 74
29392: PPUSH
29393: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29397: LD_VAR 0 2
29401: PUSH
29402: LD_INT 80
29404: GREATER
29405: IFTRUE 29418
29407: PUSH
29408: LD_VAR 0 3
29412: PPUSH
29413: CALL_OW 301
29417: OR
29418: IFFALSE 29293
// if un then
29420: LD_VAR 0 3
29424: IFFALSE 29435
// RemoveUnit ( un ) ;
29426: LD_VAR 0 3
29430: PPUSH
29431: CALL_OW 64
// end ;
29435: PPOPN 3
29437: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29438: LD_EXP 92
29442: IFFALSE 29558
29444: GO 29446
29446: DISABLE
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
29451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_INT 81
29459: PUSH
29460: LD_OWVAR 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 21
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PPUSH
29483: CALL_OW 69
29487: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29488: LD_STRING playComputer()
29490: PPUSH
29491: CALL_OW 559
// if not tmp then
29495: LD_VAR 0 2
29499: NOT
29500: IFFALSE 29504
// exit ;
29502: GO 29558
// for i in tmp do
29504: LD_ADDR_VAR 0 1
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: FOR_IN
29515: IFFALSE 29556
// for j := 1 to 4 do
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: DOUBLE
29523: LD_INT 1
29525: DEC
29526: ST_TO_ADDR
29527: LD_INT 4
29529: PUSH
29530: FOR_TO
29531: IFFALSE 29552
// SetSkill ( i , j , 10 ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_VAR 0 3
29542: PPUSH
29543: LD_INT 10
29545: PPUSH
29546: CALL_OW 237
29550: GO 29530
29552: POP
29553: POP
29554: GO 29514
29556: POP
29557: POP
// end ;
29558: PPOPN 3
29560: END
// every 0 0$1 trigger s30 do var i , tmp ;
29561: LD_EXP 93
29565: IFFALSE 29634
29567: GO 29569
29569: DISABLE
29570: LD_INT 0
29572: PPUSH
29573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29574: LD_ADDR_VAR 0 2
29578: PUSH
29579: LD_INT 22
29581: PUSH
29582: LD_OWVAR 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 69
29595: ST_TO_ADDR
// if not tmp then
29596: LD_VAR 0 2
29600: NOT
29601: IFFALSE 29605
// exit ;
29603: GO 29634
// for i in tmp do
29605: LD_ADDR_VAR 0 1
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: FOR_IN
29616: IFFALSE 29632
// SetLives ( i , 300 ) ;
29618: LD_VAR 0 1
29622: PPUSH
29623: LD_INT 300
29625: PPUSH
29626: CALL_OW 234
29630: GO 29615
29632: POP
29633: POP
// end ;
29634: PPOPN 2
29636: END
// every 0 0$1 trigger s60 do var i , tmp ;
29637: LD_EXP 94
29641: IFFALSE 29710
29643: GO 29645
29645: DISABLE
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_INT 22
29657: PUSH
29658: LD_OWVAR 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: ST_TO_ADDR
// if not tmp then
29672: LD_VAR 0 2
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 29710
// for i in tmp do
29681: LD_ADDR_VAR 0 1
29685: PUSH
29686: LD_VAR 0 2
29690: PUSH
29691: FOR_IN
29692: IFFALSE 29708
// SetLives ( i , 600 ) ;
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_INT 600
29701: PPUSH
29702: CALL_OW 234
29706: GO 29691
29708: POP
29709: POP
// end ;
29710: PPOPN 2
29712: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29713: LD_INT 0
29715: PPUSH
// case cmd of 301 :
29716: LD_VAR 0 1
29720: PUSH
29721: LD_INT 301
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29761
29729: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29730: LD_VAR 0 6
29734: PPUSH
29735: LD_VAR 0 7
29739: PPUSH
29740: LD_VAR 0 8
29744: PPUSH
29745: LD_VAR 0 4
29749: PPUSH
29750: LD_VAR 0 5
29754: PPUSH
29755: CALL 30974 0 5
29759: GO 29882
29761: LD_INT 302
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29806
29769: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29770: LD_VAR 0 6
29774: PPUSH
29775: LD_VAR 0 7
29779: PPUSH
29780: LD_VAR 0 8
29784: PPUSH
29785: LD_VAR 0 9
29789: PPUSH
29790: LD_VAR 0 4
29794: PPUSH
29795: LD_VAR 0 5
29799: PPUSH
29800: CALL 31065 0 6
29804: GO 29882
29806: LD_INT 303
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29851
29814: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29815: LD_VAR 0 6
29819: PPUSH
29820: LD_VAR 0 7
29824: PPUSH
29825: LD_VAR 0 8
29829: PPUSH
29830: LD_VAR 0 9
29834: PPUSH
29835: LD_VAR 0 4
29839: PPUSH
29840: LD_VAR 0 5
29844: PPUSH
29845: CALL 29887 0 6
29849: GO 29882
29851: LD_INT 304
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 29881
29859: POP
// hHackTeleport ( unit , x , y ) ; end ;
29860: LD_VAR 0 2
29864: PPUSH
29865: LD_VAR 0 4
29869: PPUSH
29870: LD_VAR 0 5
29874: PPUSH
29875: CALL 31658 0 3
29879: GO 29882
29881: POP
// end ;
29882: LD_VAR 0 12
29886: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29887: LD_INT 0
29889: PPUSH
29890: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29891: LD_VAR 0 1
29895: PUSH
29896: LD_INT 1
29898: LESS
29899: IFTRUE 29911
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 3
29909: GREATER
29910: OR
29911: IFTRUE 29929
29913: PUSH
29914: LD_VAR 0 5
29918: PPUSH
29919: LD_VAR 0 6
29923: PPUSH
29924: CALL_OW 428
29928: OR
29929: IFFALSE 29933
// exit ;
29931: GO 30661
// uc_side := your_side ;
29933: LD_ADDR_OWVAR 20
29937: PUSH
29938: LD_OWVAR 2
29942: ST_TO_ADDR
// uc_nation := nation ;
29943: LD_ADDR_OWVAR 21
29947: PUSH
29948: LD_VAR 0 1
29952: ST_TO_ADDR
// bc_level = 1 ;
29953: LD_ADDR_OWVAR 43
29957: PUSH
29958: LD_INT 1
29960: ST_TO_ADDR
// case btype of 1 :
29961: LD_VAR 0 2
29965: PUSH
29966: LD_INT 1
29968: DOUBLE
29969: EQUAL
29970: IFTRUE 29974
29972: GO 29985
29974: POP
// bc_type := b_depot ; 2 :
29975: LD_ADDR_OWVAR 42
29979: PUSH
29980: LD_INT 0
29982: ST_TO_ADDR
29983: GO 30605
29985: LD_INT 2
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30004
29993: POP
// bc_type := b_warehouse ; 3 :
29994: LD_ADDR_OWVAR 42
29998: PUSH
29999: LD_INT 1
30001: ST_TO_ADDR
30002: GO 30605
30004: LD_INT 3
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30023
30012: POP
// bc_type := b_lab ; 4 .. 9 :
30013: LD_ADDR_OWVAR 42
30017: PUSH
30018: LD_INT 6
30020: ST_TO_ADDR
30021: GO 30605
30023: LD_INT 4
30025: DOUBLE
30026: GREATEREQUAL
30027: IFFALSE 30035
30029: LD_INT 9
30031: DOUBLE
30032: LESSEQUAL
30033: IFTRUE 30037
30035: GO 30097
30037: POP
// begin bc_type := b_lab_half ;
30038: LD_ADDR_OWVAR 42
30042: PUSH
30043: LD_INT 7
30045: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30046: LD_ADDR_OWVAR 44
30050: PUSH
30051: LD_INT 10
30053: PUSH
30054: LD_INT 11
30056: PUSH
30057: LD_INT 12
30059: PUSH
30060: LD_INT 15
30062: PUSH
30063: LD_INT 14
30065: PUSH
30066: LD_INT 13
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: PUSH
30077: LD_VAR 0 2
30081: PUSH
30082: LD_INT 3
30084: MINUS
30085: ARRAY
30086: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30087: LD_ADDR_OWVAR 45
30091: PUSH
30092: LD_INT 9
30094: ST_TO_ADDR
// end ; 10 .. 13 :
30095: GO 30605
30097: LD_INT 10
30099: DOUBLE
30100: GREATEREQUAL
30101: IFFALSE 30109
30103: LD_INT 13
30105: DOUBLE
30106: LESSEQUAL
30107: IFTRUE 30111
30109: GO 30188
30111: POP
// begin bc_type := b_lab_full ;
30112: LD_ADDR_OWVAR 42
30116: PUSH
30117: LD_INT 8
30119: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30120: LD_ADDR_OWVAR 44
30124: PUSH
30125: LD_INT 10
30127: PUSH
30128: LD_INT 12
30130: PUSH
30131: LD_INT 14
30133: PUSH
30134: LD_INT 13
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: PUSH
30143: LD_VAR 0 2
30147: PUSH
30148: LD_INT 9
30150: MINUS
30151: ARRAY
30152: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30153: LD_ADDR_OWVAR 45
30157: PUSH
30158: LD_INT 11
30160: PUSH
30161: LD_INT 15
30163: PUSH
30164: LD_INT 12
30166: PUSH
30167: LD_INT 15
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: PUSH
30176: LD_VAR 0 2
30180: PUSH
30181: LD_INT 9
30183: MINUS
30184: ARRAY
30185: ST_TO_ADDR
// end ; 14 :
30186: GO 30605
30188: LD_INT 14
30190: DOUBLE
30191: EQUAL
30192: IFTRUE 30196
30194: GO 30207
30196: POP
// bc_type := b_workshop ; 15 :
30197: LD_ADDR_OWVAR 42
30201: PUSH
30202: LD_INT 2
30204: ST_TO_ADDR
30205: GO 30605
30207: LD_INT 15
30209: DOUBLE
30210: EQUAL
30211: IFTRUE 30215
30213: GO 30226
30215: POP
// bc_type := b_factory ; 16 :
30216: LD_ADDR_OWVAR 42
30220: PUSH
30221: LD_INT 3
30223: ST_TO_ADDR
30224: GO 30605
30226: LD_INT 16
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30245
30234: POP
// bc_type := b_ext_gun ; 17 :
30235: LD_ADDR_OWVAR 42
30239: PUSH
30240: LD_INT 17
30242: ST_TO_ADDR
30243: GO 30605
30245: LD_INT 17
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30281
30253: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30254: LD_ADDR_OWVAR 42
30258: PUSH
30259: LD_INT 19
30261: PUSH
30262: LD_INT 23
30264: PUSH
30265: LD_INT 19
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: PUSH
30273: LD_VAR 0 1
30277: ARRAY
30278: ST_TO_ADDR
30279: GO 30605
30281: LD_INT 18
30283: DOUBLE
30284: EQUAL
30285: IFTRUE 30289
30287: GO 30300
30289: POP
// bc_type := b_ext_radar ; 19 :
30290: LD_ADDR_OWVAR 42
30294: PUSH
30295: LD_INT 20
30297: ST_TO_ADDR
30298: GO 30605
30300: LD_INT 19
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30319
30308: POP
// bc_type := b_ext_radio ; 20 :
30309: LD_ADDR_OWVAR 42
30313: PUSH
30314: LD_INT 22
30316: ST_TO_ADDR
30317: GO 30605
30319: LD_INT 20
30321: DOUBLE
30322: EQUAL
30323: IFTRUE 30327
30325: GO 30338
30327: POP
// bc_type := b_ext_siberium ; 21 :
30328: LD_ADDR_OWVAR 42
30332: PUSH
30333: LD_INT 21
30335: ST_TO_ADDR
30336: GO 30605
30338: LD_INT 21
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30357
30346: POP
// bc_type := b_ext_computer ; 22 :
30347: LD_ADDR_OWVAR 42
30351: PUSH
30352: LD_INT 24
30354: ST_TO_ADDR
30355: GO 30605
30357: LD_INT 22
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30376
30365: POP
// bc_type := b_ext_track ; 23 :
30366: LD_ADDR_OWVAR 42
30370: PUSH
30371: LD_INT 16
30373: ST_TO_ADDR
30374: GO 30605
30376: LD_INT 23
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30395
30384: POP
// bc_type := b_ext_laser ; 24 :
30385: LD_ADDR_OWVAR 42
30389: PUSH
30390: LD_INT 25
30392: ST_TO_ADDR
30393: GO 30605
30395: LD_INT 24
30397: DOUBLE
30398: EQUAL
30399: IFTRUE 30403
30401: GO 30414
30403: POP
// bc_type := b_control_tower ; 25 :
30404: LD_ADDR_OWVAR 42
30408: PUSH
30409: LD_INT 36
30411: ST_TO_ADDR
30412: GO 30605
30414: LD_INT 25
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30433
30422: POP
// bc_type := b_breastwork ; 26 :
30423: LD_ADDR_OWVAR 42
30427: PUSH
30428: LD_INT 31
30430: ST_TO_ADDR
30431: GO 30605
30433: LD_INT 26
30435: DOUBLE
30436: EQUAL
30437: IFTRUE 30441
30439: GO 30452
30441: POP
// bc_type := b_bunker ; 27 :
30442: LD_ADDR_OWVAR 42
30446: PUSH
30447: LD_INT 32
30449: ST_TO_ADDR
30450: GO 30605
30452: LD_INT 27
30454: DOUBLE
30455: EQUAL
30456: IFTRUE 30460
30458: GO 30471
30460: POP
// bc_type := b_turret ; 28 :
30461: LD_ADDR_OWVAR 42
30465: PUSH
30466: LD_INT 33
30468: ST_TO_ADDR
30469: GO 30605
30471: LD_INT 28
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30490
30479: POP
// bc_type := b_armoury ; 29 :
30480: LD_ADDR_OWVAR 42
30484: PUSH
30485: LD_INT 4
30487: ST_TO_ADDR
30488: GO 30605
30490: LD_INT 29
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30509
30498: POP
// bc_type := b_barracks ; 30 :
30499: LD_ADDR_OWVAR 42
30503: PUSH
30504: LD_INT 5
30506: ST_TO_ADDR
30507: GO 30605
30509: LD_INT 30
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// bc_type := b_solar_power ; 31 :
30518: LD_ADDR_OWVAR 42
30522: PUSH
30523: LD_INT 27
30525: ST_TO_ADDR
30526: GO 30605
30528: LD_INT 31
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// bc_type := b_oil_power ; 32 :
30537: LD_ADDR_OWVAR 42
30541: PUSH
30542: LD_INT 26
30544: ST_TO_ADDR
30545: GO 30605
30547: LD_INT 32
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30566
30555: POP
// bc_type := b_siberite_power ; 33 :
30556: LD_ADDR_OWVAR 42
30560: PUSH
30561: LD_INT 28
30563: ST_TO_ADDR
30564: GO 30605
30566: LD_INT 33
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30574
30572: GO 30585
30574: POP
// bc_type := b_oil_mine ; 34 :
30575: LD_ADDR_OWVAR 42
30579: PUSH
30580: LD_INT 29
30582: ST_TO_ADDR
30583: GO 30605
30585: LD_INT 34
30587: DOUBLE
30588: EQUAL
30589: IFTRUE 30593
30591: GO 30604
30593: POP
// bc_type := b_siberite_mine ; end ;
30594: LD_ADDR_OWVAR 42
30598: PUSH
30599: LD_INT 30
30601: ST_TO_ADDR
30602: GO 30605
30604: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30605: LD_ADDR_VAR 0 8
30609: PUSH
30610: LD_VAR 0 5
30614: PPUSH
30615: LD_VAR 0 6
30619: PPUSH
30620: LD_VAR 0 3
30624: PPUSH
30625: CALL_OW 47
30629: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30630: LD_OWVAR 42
30634: PUSH
30635: LD_INT 32
30637: PUSH
30638: LD_INT 33
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: IN
30645: IFFALSE 30661
// PlaceWeaponTurret ( b , weapon ) ;
30647: LD_VAR 0 8
30651: PPUSH
30652: LD_VAR 0 4
30656: PPUSH
30657: CALL_OW 431
// end ;
30661: LD_VAR 0 7
30665: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30672: LD_ADDR_VAR 0 4
30676: PUSH
30677: LD_INT 22
30679: PUSH
30680: LD_OWVAR 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: LD_INT 30
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 30
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PPUSH
30721: CALL_OW 69
30725: ST_TO_ADDR
// if not tmp then
30726: LD_VAR 0 4
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 30794
// for i in tmp do
30735: LD_ADDR_VAR 0 2
30739: PUSH
30740: LD_VAR 0 4
30744: PUSH
30745: FOR_IN
30746: IFFALSE 30792
// for j = 1 to 3 do
30748: LD_ADDR_VAR 0 3
30752: PUSH
30753: DOUBLE
30754: LD_INT 1
30756: DEC
30757: ST_TO_ADDR
30758: LD_INT 3
30760: PUSH
30761: FOR_TO
30762: IFFALSE 30788
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30764: LD_VAR 0 2
30768: PPUSH
30769: CALL_OW 274
30773: PPUSH
30774: LD_VAR 0 3
30778: PPUSH
30779: LD_INT 99999
30781: PPUSH
30782: CALL_OW 277
30786: GO 30761
30788: POP
30789: POP
30790: GO 30745
30792: POP
30793: POP
// end ;
30794: LD_VAR 0 1
30798: RET
// export function hHackSetLevel10 ; var i , j ; begin
30799: LD_INT 0
30801: PPUSH
30802: PPUSH
30803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30804: LD_ADDR_VAR 0 2
30808: PUSH
30809: LD_INT 21
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PPUSH
30819: CALL_OW 69
30823: PUSH
30824: FOR_IN
30825: IFFALSE 30877
// if IsSelected ( i ) then
30827: LD_VAR 0 2
30831: PPUSH
30832: CALL_OW 306
30836: IFFALSE 30875
// begin for j := 1 to 4 do
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: DOUBLE
30844: LD_INT 1
30846: DEC
30847: ST_TO_ADDR
30848: LD_INT 4
30850: PUSH
30851: FOR_TO
30852: IFFALSE 30873
// SetSkill ( i , j , 10 ) ;
30854: LD_VAR 0 2
30858: PPUSH
30859: LD_VAR 0 3
30863: PPUSH
30864: LD_INT 10
30866: PPUSH
30867: CALL_OW 237
30871: GO 30851
30873: POP
30874: POP
// end ;
30875: GO 30824
30877: POP
30878: POP
// end ;
30879: LD_VAR 0 1
30883: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30884: LD_INT 0
30886: PPUSH
30887: PPUSH
30888: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30889: LD_ADDR_VAR 0 2
30893: PUSH
30894: LD_INT 22
30896: PUSH
30897: LD_OWVAR 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 21
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PPUSH
30920: CALL_OW 69
30924: PUSH
30925: FOR_IN
30926: IFFALSE 30967
// begin for j := 1 to 4 do
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: DOUBLE
30934: LD_INT 1
30936: DEC
30937: ST_TO_ADDR
30938: LD_INT 4
30940: PUSH
30941: FOR_TO
30942: IFFALSE 30963
// SetSkill ( i , j , 10 ) ;
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 3
30953: PPUSH
30954: LD_INT 10
30956: PPUSH
30957: CALL_OW 237
30961: GO 30941
30963: POP
30964: POP
// end ;
30965: GO 30925
30967: POP
30968: POP
// end ;
30969: LD_VAR 0 1
30973: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30974: LD_INT 0
30976: PPUSH
// uc_side := your_side ;
30977: LD_ADDR_OWVAR 20
30981: PUSH
30982: LD_OWVAR 2
30986: ST_TO_ADDR
// uc_nation := nation ;
30987: LD_ADDR_OWVAR 21
30991: PUSH
30992: LD_VAR 0 1
30996: ST_TO_ADDR
// InitHc ;
30997: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31001: LD_INT 0
31003: PPUSH
31004: LD_VAR 0 2
31008: PPUSH
31009: LD_VAR 0 3
31013: PPUSH
31014: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31018: LD_VAR 0 4
31022: PPUSH
31023: LD_VAR 0 5
31027: PPUSH
31028: CALL_OW 428
31032: PUSH
31033: LD_INT 0
31035: EQUAL
31036: IFFALSE 31060
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31038: CALL_OW 44
31042: PPUSH
31043: LD_VAR 0 4
31047: PPUSH
31048: LD_VAR 0 5
31052: PPUSH
31053: LD_INT 1
31055: PPUSH
31056: CALL_OW 48
// end ;
31060: LD_VAR 0 6
31064: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31065: LD_INT 0
31067: PPUSH
31068: PPUSH
// uc_side := your_side ;
31069: LD_ADDR_OWVAR 20
31073: PUSH
31074: LD_OWVAR 2
31078: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31079: LD_VAR 0 1
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: IN
31106: IFFALSE 31118
// uc_nation := nation_american else
31108: LD_ADDR_OWVAR 21
31112: PUSH
31113: LD_INT 1
31115: ST_TO_ADDR
31116: GO 31161
// if chassis in [ 11 , 12 , 13 , 14 ] then
31118: LD_VAR 0 1
31122: PUSH
31123: LD_INT 11
31125: PUSH
31126: LD_INT 12
31128: PUSH
31129: LD_INT 13
31131: PUSH
31132: LD_INT 14
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: IN
31141: IFFALSE 31153
// uc_nation := nation_arabian else
31143: LD_ADDR_OWVAR 21
31147: PUSH
31148: LD_INT 2
31150: ST_TO_ADDR
31151: GO 31161
// uc_nation := nation_russian ;
31153: LD_ADDR_OWVAR 21
31157: PUSH
31158: LD_INT 3
31160: ST_TO_ADDR
// vc_chassis := chassis ;
31161: LD_ADDR_OWVAR 37
31165: PUSH
31166: LD_VAR 0 1
31170: ST_TO_ADDR
// vc_engine := engine ;
31171: LD_ADDR_OWVAR 39
31175: PUSH
31176: LD_VAR 0 2
31180: ST_TO_ADDR
// vc_control := control ;
31181: LD_ADDR_OWVAR 38
31185: PUSH
31186: LD_VAR 0 3
31190: ST_TO_ADDR
// vc_weapon := weapon ;
31191: LD_ADDR_OWVAR 40
31195: PUSH
31196: LD_VAR 0 4
31200: ST_TO_ADDR
// un := CreateVehicle ;
31201: LD_ADDR_VAR 0 8
31205: PUSH
31206: CALL_OW 45
31210: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_INT 0
31218: PPUSH
31219: LD_INT 5
31221: PPUSH
31222: CALL_OW 12
31226: PPUSH
31227: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31231: LD_VAR 0 8
31235: PPUSH
31236: LD_VAR 0 5
31240: PPUSH
31241: LD_VAR 0 6
31245: PPUSH
31246: LD_INT 1
31248: PPUSH
31249: CALL_OW 48
// end ;
31253: LD_VAR 0 7
31257: RET
// export hInvincible ; every 1 do
31258: GO 31260
31260: DISABLE
// hInvincible := [ ] ;
31261: LD_ADDR_EXP 95
31265: PUSH
31266: EMPTY
31267: ST_TO_ADDR
31268: END
// every 10 do var i ;
31269: GO 31271
31271: DISABLE
31272: LD_INT 0
31274: PPUSH
// begin enable ;
31275: ENABLE
// if not hInvincible then
31276: LD_EXP 95
31280: NOT
31281: IFFALSE 31285
// exit ;
31283: GO 31329
// for i in hInvincible do
31285: LD_ADDR_VAR 0 1
31289: PUSH
31290: LD_EXP 95
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31327
// if GetLives ( i ) < 1000 then
31298: LD_VAR 0 1
31302: PPUSH
31303: CALL_OW 256
31307: PUSH
31308: LD_INT 1000
31310: LESS
31311: IFFALSE 31325
// SetLives ( i , 1000 ) ;
31313: LD_VAR 0 1
31317: PPUSH
31318: LD_INT 1000
31320: PPUSH
31321: CALL_OW 234
31325: GO 31295
31327: POP
31328: POP
// end ;
31329: PPOPN 1
31331: END
// export function hHackInvincible ; var i ; begin
31332: LD_INT 0
31334: PPUSH
31335: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31336: LD_ADDR_VAR 0 2
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 21
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: PPUSH
31369: CALL_OW 69
31373: PUSH
31374: FOR_IN
31375: IFFALSE 31436
// if IsSelected ( i ) then
31377: LD_VAR 0 2
31381: PPUSH
31382: CALL_OW 306
31386: IFFALSE 31434
// begin if i in hInvincible then
31388: LD_VAR 0 2
31392: PUSH
31393: LD_EXP 95
31397: IN
31398: IFFALSE 31418
// hInvincible := hInvincible diff i else
31400: LD_ADDR_EXP 95
31404: PUSH
31405: LD_EXP 95
31409: PUSH
31410: LD_VAR 0 2
31414: DIFF
31415: ST_TO_ADDR
31416: GO 31434
// hInvincible := hInvincible union i ;
31418: LD_ADDR_EXP 95
31422: PUSH
31423: LD_EXP 95
31427: PUSH
31428: LD_VAR 0 2
31432: UNION
31433: ST_TO_ADDR
// end ;
31434: GO 31374
31436: POP
31437: POP
// end ;
31438: LD_VAR 0 1
31442: RET
// export function hHackInvisible ; var i , j ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
31447: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31448: LD_ADDR_VAR 0 2
31452: PUSH
31453: LD_INT 21
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PPUSH
31463: CALL_OW 69
31467: PUSH
31468: FOR_IN
31469: IFFALSE 31493
// if IsSelected ( i ) then
31471: LD_VAR 0 2
31475: PPUSH
31476: CALL_OW 306
31480: IFFALSE 31491
// ComForceInvisible ( i ) ;
31482: LD_VAR 0 2
31486: PPUSH
31487: CALL_OW 496
31491: GO 31468
31493: POP
31494: POP
// end ;
31495: LD_VAR 0 1
31499: RET
// export function hHackChangeYourSide ; begin
31500: LD_INT 0
31502: PPUSH
// if your_side = 8 then
31503: LD_OWVAR 2
31507: PUSH
31508: LD_INT 8
31510: EQUAL
31511: IFFALSE 31523
// your_side := 0 else
31513: LD_ADDR_OWVAR 2
31517: PUSH
31518: LD_INT 0
31520: ST_TO_ADDR
31521: GO 31537
// your_side := your_side + 1 ;
31523: LD_ADDR_OWVAR 2
31527: PUSH
31528: LD_OWVAR 2
31532: PUSH
31533: LD_INT 1
31535: PLUS
31536: ST_TO_ADDR
// end ;
31537: LD_VAR 0 1
31541: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31542: LD_INT 0
31544: PPUSH
31545: PPUSH
31546: PPUSH
// for i in all_units do
31547: LD_ADDR_VAR 0 2
31551: PUSH
31552: LD_OWVAR 3
31556: PUSH
31557: FOR_IN
31558: IFFALSE 31636
// if IsSelected ( i ) then
31560: LD_VAR 0 2
31564: PPUSH
31565: CALL_OW 306
31569: IFFALSE 31634
// begin j := GetSide ( i ) ;
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: LD_VAR 0 2
31580: PPUSH
31581: CALL_OW 255
31585: ST_TO_ADDR
// if j = 8 then
31586: LD_VAR 0 3
31590: PUSH
31591: LD_INT 8
31593: EQUAL
31594: IFFALSE 31606
// j := 0 else
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_INT 0
31603: ST_TO_ADDR
31604: GO 31620
// j := j + 1 ;
31606: LD_ADDR_VAR 0 3
31610: PUSH
31611: LD_VAR 0 3
31615: PUSH
31616: LD_INT 1
31618: PLUS
31619: ST_TO_ADDR
// SetSide ( i , j ) ;
31620: LD_VAR 0 2
31624: PPUSH
31625: LD_VAR 0 3
31629: PPUSH
31630: CALL_OW 235
// end ;
31634: GO 31557
31636: POP
31637: POP
// end ;
31638: LD_VAR 0 1
31642: RET
// export function hHackFog ; begin
31643: LD_INT 0
31645: PPUSH
// FogOff ( true ) ;
31646: LD_INT 1
31648: PPUSH
31649: CALL_OW 344
// end ;
31653: LD_VAR 0 1
31657: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31658: LD_INT 0
31660: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31661: LD_VAR 0 1
31665: PPUSH
31666: LD_VAR 0 2
31670: PPUSH
31671: LD_VAR 0 3
31675: PPUSH
31676: LD_INT 1
31678: PPUSH
31679: LD_INT 1
31681: PPUSH
31682: CALL_OW 483
// CenterOnXY ( x , y ) ;
31686: LD_VAR 0 2
31690: PPUSH
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 84
// end ;
31700: LD_VAR 0 4
31704: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31705: LD_INT 0
31707: PPUSH
31708: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31709: LD_VAR 0 1
31713: NOT
31714: IFTRUE 31733
31716: PUSH
31717: LD_VAR 0 2
31721: PPUSH
31722: LD_VAR 0 3
31726: PPUSH
31727: CALL_OW 488
31731: NOT
31732: OR
31733: IFTRUE 31768
31735: PUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL_OW 266
31745: PUSH
31746: LD_INT 3
31748: NONEQUAL
31749: IFFALSE 31767
31751: PUSH
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 247
31761: PUSH
31762: LD_INT 1
31764: EQUAL
31765: NOT
31766: AND
31767: OR
31768: IFFALSE 31772
// exit ;
31770: GO 32054
// if GetType ( factory ) = unit_human then
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 247
31781: PUSH
31782: LD_INT 1
31784: EQUAL
31785: IFFALSE 31802
// factory := IsInUnit ( factory ) ;
31787: LD_ADDR_VAR 0 1
31791: PUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL_OW 310
31801: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 266
31811: PUSH
31812: LD_INT 3
31814: NONEQUAL
31815: IFFALSE 31819
// exit ;
31817: GO 32054
// for i := 1 to Count ( factoryWaypoints ) do
31819: LD_ADDR_VAR 0 5
31823: PUSH
31824: DOUBLE
31825: LD_INT 1
31827: DEC
31828: ST_TO_ADDR
31829: LD_EXP 96
31833: PPUSH
31834: CALL 41587 0 1
31838: PUSH
31839: FOR_TO
31840: IFFALSE 32002
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
31842: LD_VAR 0 2
31846: PPUSH
31847: LD_VAR 0 3
31851: PPUSH
31852: CALL_OW 428
31856: PUSH
31857: LD_EXP 96
31861: PUSH
31862: LD_VAR 0 5
31866: ARRAY
31867: PUSH
31868: LD_INT 2
31870: ARRAY
31871: EQUAL
31872: IFFALSE 31904
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31874: LD_ADDR_EXP 96
31878: PUSH
31879: LD_EXP 96
31883: PPUSH
31884: LD_VAR 0 5
31888: PPUSH
31889: CALL_OW 3
31893: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31894: CALL 32059 0 0
// exit ;
31898: POP
31899: POP
31900: GO 32054
// end else
31902: GO 32000
// if factory = factoryWaypoints [ i ] [ 2 ] then
31904: LD_VAR 0 1
31908: PUSH
31909: LD_EXP 96
31913: PUSH
31914: LD_VAR 0 5
31918: ARRAY
31919: PUSH
31920: LD_INT 2
31922: ARRAY
31923: EQUAL
31924: IFFALSE 32000
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31926: LD_ADDR_EXP 96
31930: PUSH
31931: LD_EXP 96
31935: PPUSH
31936: LD_VAR 0 5
31940: PPUSH
31941: CALL_OW 3
31945: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31946: LD_ADDR_EXP 96
31950: PUSH
31951: LD_EXP 96
31955: PPUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 255
31965: PUSH
31966: LD_VAR 0 1
31970: PUSH
31971: LD_VAR 0 2
31975: PUSH
31976: LD_VAR 0 3
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: PPUSH
31987: CALL 77519 0 2
31991: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31992: CALL 32059 0 0
// exit ;
31996: POP
31997: POP
31998: GO 32054
// end ; end ;
32000: GO 31839
32002: POP
32003: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32004: LD_ADDR_EXP 96
32008: PUSH
32009: LD_EXP 96
32013: PPUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 255
32023: PUSH
32024: LD_VAR 0 1
32028: PUSH
32029: LD_VAR 0 2
32033: PUSH
32034: LD_VAR 0 3
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: PPUSH
32045: CALL 77519 0 2
32049: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32050: CALL 32059 0 0
// end ;
32054: LD_VAR 0 4
32058: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32064: LD_STRING resetFactoryWaypoint();
32066: PPUSH
32067: CALL_OW 559
// if factoryWaypoints then
32071: LD_EXP 96
32075: IFFALSE 32196
// begin list := factoryWaypoints ;
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_EXP 96
32086: ST_TO_ADDR
// for i := 1 to list do
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: DOUBLE
32093: LD_INT 1
32095: DEC
32096: ST_TO_ADDR
32097: LD_VAR 0 3
32101: PUSH
32102: FOR_TO
32103: IFFALSE 32194
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32105: LD_STRING setFactoryWaypointXY(
32107: PUSH
32108: LD_VAR 0 3
32112: PUSH
32113: LD_VAR 0 2
32117: ARRAY
32118: PUSH
32119: LD_INT 1
32121: ARRAY
32122: STR
32123: PUSH
32124: LD_STRING ,
32126: STR
32127: PUSH
32128: LD_VAR 0 3
32132: PUSH
32133: LD_VAR 0 2
32137: ARRAY
32138: PUSH
32139: LD_INT 2
32141: ARRAY
32142: STR
32143: PUSH
32144: LD_STRING ,
32146: STR
32147: PUSH
32148: LD_VAR 0 3
32152: PUSH
32153: LD_VAR 0 2
32157: ARRAY
32158: PUSH
32159: LD_INT 3
32161: ARRAY
32162: STR
32163: PUSH
32164: LD_STRING ,
32166: STR
32167: PUSH
32168: LD_VAR 0 3
32172: PUSH
32173: LD_VAR 0 2
32177: ARRAY
32178: PUSH
32179: LD_INT 4
32181: ARRAY
32182: STR
32183: PUSH
32184: LD_STRING )
32186: STR
32187: PPUSH
32188: CALL_OW 559
32192: GO 32102
32194: POP
32195: POP
// end ; end ;
32196: LD_VAR 0 1
32200: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32201: LD_INT 0
32203: PPUSH
// if HexInfo ( x , y ) = warehouse then
32204: LD_VAR 0 2
32208: PPUSH
32209: LD_VAR 0 3
32213: PPUSH
32214: CALL_OW 428
32218: PUSH
32219: LD_VAR 0 1
32223: EQUAL
32224: IFFALSE 32251
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32226: LD_ADDR_EXP 98
32230: PUSH
32231: LD_EXP 98
32235: PPUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: LD_INT 0
32243: PPUSH
32244: CALL_OW 1
32248: ST_TO_ADDR
32249: GO 32302
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32251: LD_ADDR_EXP 98
32255: PUSH
32256: LD_EXP 98
32260: PPUSH
32261: LD_VAR 0 1
32265: PPUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 255
32275: PUSH
32276: LD_VAR 0 1
32280: PUSH
32281: LD_VAR 0 2
32285: PUSH
32286: LD_VAR 0 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: PPUSH
32297: CALL_OW 1
32301: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32302: CALL 32311 0 0
// end ;
32306: LD_VAR 0 4
32310: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32311: LD_INT 0
32313: PPUSH
32314: PPUSH
32315: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32316: LD_STRING resetWarehouseGatheringPoints();
32318: PPUSH
32319: CALL_OW 559
// if warehouseGatheringPoints then
32323: LD_EXP 98
32327: IFFALSE 32453
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32329: LD_ADDR_VAR 0 3
32333: PUSH
32334: LD_EXP 98
32338: PPUSH
32339: CALL 81453 0 1
32343: ST_TO_ADDR
// for i := 1 to list do
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: DOUBLE
32350: LD_INT 1
32352: DEC
32353: ST_TO_ADDR
32354: LD_VAR 0 3
32358: PUSH
32359: FOR_TO
32360: IFFALSE 32451
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32362: LD_STRING setWarehouseGatheringPointXY(
32364: PUSH
32365: LD_VAR 0 3
32369: PUSH
32370: LD_VAR 0 2
32374: ARRAY
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: STR
32380: PUSH
32381: LD_STRING ,
32383: STR
32384: PUSH
32385: LD_VAR 0 3
32389: PUSH
32390: LD_VAR 0 2
32394: ARRAY
32395: PUSH
32396: LD_INT 2
32398: ARRAY
32399: STR
32400: PUSH
32401: LD_STRING ,
32403: STR
32404: PUSH
32405: LD_VAR 0 3
32409: PUSH
32410: LD_VAR 0 2
32414: ARRAY
32415: PUSH
32416: LD_INT 3
32418: ARRAY
32419: STR
32420: PUSH
32421: LD_STRING ,
32423: STR
32424: PUSH
32425: LD_VAR 0 3
32429: PUSH
32430: LD_VAR 0 2
32434: ARRAY
32435: PUSH
32436: LD_INT 4
32438: ARRAY
32439: STR
32440: PUSH
32441: LD_STRING )
32443: STR
32444: PPUSH
32445: CALL_OW 559
32449: GO 32359
32451: POP
32452: POP
// end ; end ;
32453: LD_VAR 0 1
32457: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32458: LD_EXP 98
32462: IFFALSE 33157
32464: GO 32466
32466: DISABLE
32467: LD_INT 0
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
// begin enable ;
32478: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_EXP 98
32488: PPUSH
32489: CALL 81453 0 1
32493: ST_TO_ADDR
// if not list then
32494: LD_VAR 0 3
32498: NOT
32499: IFFALSE 32503
// exit ;
32501: GO 33157
// for i := 1 to list do
32503: LD_ADDR_VAR 0 1
32507: PUSH
32508: DOUBLE
32509: LD_INT 1
32511: DEC
32512: ST_TO_ADDR
32513: LD_VAR 0 3
32517: PUSH
32518: FOR_TO
32519: IFFALSE 33155
// begin depot := list [ i ] [ 2 ] ;
32521: LD_ADDR_VAR 0 8
32525: PUSH
32526: LD_VAR 0 3
32530: PUSH
32531: LD_VAR 0 1
32535: ARRAY
32536: PUSH
32537: LD_INT 2
32539: ARRAY
32540: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32541: LD_ADDR_VAR 0 5
32545: PUSH
32546: LD_VAR 0 3
32550: PUSH
32551: LD_VAR 0 1
32555: ARRAY
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32561: LD_VAR 0 8
32565: PPUSH
32566: CALL_OW 301
32570: IFTRUE 32589
32572: PUSH
32573: LD_VAR 0 5
32577: PUSH
32578: LD_VAR 0 8
32582: PPUSH
32583: CALL_OW 255
32587: NONEQUAL
32588: OR
32589: IFFALSE 32618
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32591: LD_ADDR_EXP 98
32595: PUSH
32596: LD_EXP 98
32600: PPUSH
32601: LD_VAR 0 8
32605: PPUSH
32606: LD_INT 0
32608: PPUSH
32609: CALL_OW 1
32613: ST_TO_ADDR
// exit ;
32614: POP
32615: POP
32616: GO 33157
// end ; x := list [ i ] [ 3 ] ;
32618: LD_ADDR_VAR 0 6
32622: PUSH
32623: LD_VAR 0 3
32627: PUSH
32628: LD_VAR 0 1
32632: ARRAY
32633: PUSH
32634: LD_INT 3
32636: ARRAY
32637: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32638: LD_ADDR_VAR 0 7
32642: PUSH
32643: LD_VAR 0 3
32647: PUSH
32648: LD_VAR 0 1
32652: ARRAY
32653: PUSH
32654: LD_INT 4
32656: ARRAY
32657: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32658: LD_ADDR_VAR 0 9
32662: PUSH
32663: LD_VAR 0 6
32667: PPUSH
32668: LD_VAR 0 7
32672: PPUSH
32673: LD_INT 16
32675: PPUSH
32676: CALL 80027 0 3
32680: ST_TO_ADDR
// if not cratesNearbyPoint then
32681: LD_VAR 0 9
32685: NOT
32686: IFFALSE 32692
// exit ;
32688: POP
32689: POP
32690: GO 33157
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32692: LD_ADDR_VAR 0 4
32696: PUSH
32697: LD_INT 22
32699: PUSH
32700: LD_VAR 0 5
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: LD_INT 60
32714: PUSH
32715: EMPTY
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 91
32724: PUSH
32725: LD_VAR 0 8
32729: PUSH
32730: LD_INT 6
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 25
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 25
32753: PUSH
32754: LD_INT 16
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: PPUSH
32772: CALL_OW 69
32776: PUSH
32777: LD_VAR 0 8
32781: PPUSH
32782: CALL_OW 313
32786: PPUSH
32787: LD_INT 3
32789: PUSH
32790: LD_INT 60
32792: PUSH
32793: EMPTY
32794: LIST
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: LD_INT 25
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 25
32815: PUSH
32816: LD_INT 16
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PPUSH
32832: CALL_OW 72
32836: UNION
32837: ST_TO_ADDR
// if tmp then
32838: LD_VAR 0 4
32842: IFFALSE 32922
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32844: LD_ADDR_VAR 0 4
32848: PUSH
32849: LD_VAR 0 4
32853: PPUSH
32854: LD_INT 3
32856: PPUSH
32857: CALL 77834 0 2
32861: ST_TO_ADDR
// for j in tmp do
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: LD_VAR 0 4
32871: PUSH
32872: FOR_IN
32873: IFFALSE 32916
// begin if IsInUnit ( j ) then
32875: LD_VAR 0 2
32879: PPUSH
32880: CALL_OW 310
32884: IFFALSE 32895
// ComExit ( j ) ;
32886: LD_VAR 0 2
32890: PPUSH
32891: CALL 77917 0 1
// AddComCollect ( j , x , y ) ;
32895: LD_VAR 0 2
32899: PPUSH
32900: LD_VAR 0 6
32904: PPUSH
32905: LD_VAR 0 7
32909: PPUSH
32910: CALL_OW 177
// end ;
32914: GO 32872
32916: POP
32917: POP
// exit ;
32918: POP
32919: POP
32920: GO 33157
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32922: LD_ADDR_VAR 0 4
32926: PUSH
32927: LD_INT 22
32929: PUSH
32930: LD_VAR 0 5
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 91
32941: PUSH
32942: LD_VAR 0 8
32946: PUSH
32947: LD_INT 8
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 34
32960: PUSH
32961: LD_INT 12
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 34
32970: PUSH
32971: LD_INT 51
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 34
32980: PUSH
32981: LD_INT 32
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 34
32990: PUSH
32991: LD_INT 89
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: PPUSH
33010: CALL_OW 69
33014: ST_TO_ADDR
// if tmp then
33015: LD_VAR 0 4
33019: IFFALSE 33153
// begin for j in tmp do
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_VAR 0 4
33030: PUSH
33031: FOR_IN
33032: IFFALSE 33151
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33034: LD_VAR 0 2
33038: PPUSH
33039: CALL_OW 262
33043: PUSH
33044: LD_INT 3
33046: EQUAL
33047: IFTRUE 33064
33049: PUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 261
33059: PUSH
33060: LD_INT 20
33062: GREATER
33063: OR
33064: IFFALSE 33078
33066: PUSH
33067: LD_VAR 0 2
33071: PPUSH
33072: CALL_OW 314
33076: NOT
33077: AND
33078: IFFALSE 33108
33080: PUSH
33081: LD_VAR 0 2
33085: PPUSH
33086: CALL_OW 263
33090: PUSH
33091: LD_INT 1
33093: NONEQUAL
33094: IFTRUE 33107
33096: PUSH
33097: LD_VAR 0 2
33101: PPUSH
33102: CALL_OW 311
33106: OR
33107: AND
33108: IFFALSE 33149
// begin ComCollect ( j , x , y ) ;
33110: LD_VAR 0 2
33114: PPUSH
33115: LD_VAR 0 6
33119: PPUSH
33120: LD_VAR 0 7
33124: PPUSH
33125: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_VAR 0 8
33138: PPUSH
33139: CALL_OW 172
// exit ;
33143: POP
33144: POP
33145: POP
33146: POP
33147: GO 33157
// end ;
33149: GO 33031
33151: POP
33152: POP
// end ; end ;
33153: GO 32518
33155: POP
33156: POP
// end ; end_of_file
33157: PPOPN 9
33159: END
// export function SOS_UnitDestroyed ( un ) ; begin
33160: LD_INT 0
33162: PPUSH
// ComRadiation ( un ) ;
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL 34249 0 1
// end ;
33172: LD_VAR 0 2
33176: RET
// export function SOS_UnitKamikazed ( un ) ; begin
33177: LD_INT 0
33179: PPUSH
// ComRadiation ( un ) ;
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL 34249 0 1
// end ;
33189: LD_VAR 0 2
33193: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33194: LD_INT 0
33196: PPUSH
// end ;
33197: LD_VAR 0 4
33201: RET
// export function SOS_Command ( cmd ) ; begin
33202: LD_INT 0
33204: PPUSH
// end ;
33205: LD_VAR 0 2
33209: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33210: LD_INT 0
33212: PPUSH
// end ;
33213: LD_VAR 0 6
33217: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
// if not vehicle or not factory then
33224: LD_VAR 0 1
33228: NOT
33229: IFTRUE 33238
33231: PUSH
33232: LD_VAR 0 2
33236: NOT
33237: OR
33238: IFFALSE 33242
// exit ;
33240: GO 33824
// if not factoryWaypoints then
33242: LD_EXP 96
33246: NOT
33247: IFFALSE 33251
// exit ;
33249: GO 33824
// for i := 1 to Count ( factoryWaypoints ) do
33251: LD_ADDR_VAR 0 4
33255: PUSH
33256: DOUBLE
33257: LD_INT 1
33259: DEC
33260: ST_TO_ADDR
33261: LD_EXP 96
33265: PPUSH
33266: CALL 41587 0 1
33270: PUSH
33271: FOR_TO
33272: IFFALSE 33822
// if factoryWaypoints [ i ] [ 2 ] = factory then
33274: LD_EXP 96
33278: PUSH
33279: LD_VAR 0 4
33283: ARRAY
33284: PUSH
33285: LD_INT 2
33287: ARRAY
33288: PUSH
33289: LD_VAR 0 2
33293: EQUAL
33294: IFFALSE 33820
// begin if GetControl ( vehicle ) = control_manual then
33296: LD_VAR 0 1
33300: PPUSH
33301: CALL_OW 263
33305: PUSH
33306: LD_INT 1
33308: EQUAL
33309: IFFALSE 33673
// begin driver := IsDrivenBy ( vehicle ) ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 311
33325: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
33326: LD_VAR 0 5
33330: PUSH
33331: LD_EXP 97
33335: IN
33336: IFTRUE 33350
33338: PUSH
33339: LD_VAR 0 1
33343: PUSH
33344: LD_EXP 97
33348: IN
33349: OR
33350: IFFALSE 33356
// exit ;
33352: POP
33353: POP
33354: GO 33824
// if not HasTask ( driver ) then
33356: LD_VAR 0 5
33360: PPUSH
33361: CALL_OW 314
33365: NOT
33366: IFFALSE 33671
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
33368: LD_ADDR_EXP 97
33372: PUSH
33373: LD_EXP 97
33377: PPUSH
33378: LD_VAR 0 5
33382: PPUSH
33383: CALL 77519 0 2
33387: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
33388: LD_ADDR_EXP 97
33392: PUSH
33393: LD_EXP 97
33397: PPUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: CALL 77519 0 2
33407: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33408: LD_ADDR_VAR 0 6
33412: PUSH
33413: LD_EXP 96
33417: PUSH
33418: LD_VAR 0 4
33422: ARRAY
33423: PUSH
33424: LD_INT 3
33426: ARRAY
33427: PPUSH
33428: LD_EXP 96
33432: PUSH
33433: LD_VAR 0 4
33437: ARRAY
33438: PUSH
33439: LD_INT 4
33441: ARRAY
33442: PPUSH
33443: CALL_OW 428
33447: ST_TO_ADDR
// if hex then
33448: LD_VAR 0 6
33452: IFFALSE 33470
// ComMoveUnit ( driver , hex ) else
33454: LD_VAR 0 5
33458: PPUSH
33459: LD_VAR 0 6
33463: PPUSH
33464: CALL_OW 112
33468: GO 33554
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
33470: LD_VAR 0 1
33474: PPUSH
33475: LD_EXP 96
33479: PUSH
33480: LD_VAR 0 4
33484: ARRAY
33485: PUSH
33486: LD_INT 3
33488: ARRAY
33489: PPUSH
33490: LD_EXP 96
33494: PUSH
33495: LD_VAR 0 4
33499: ARRAY
33500: PUSH
33501: LD_INT 4
33503: ARRAY
33504: PPUSH
33505: CALL_OW 297
33509: PUSH
33510: LD_INT 0
33512: GREATER
33513: IFFALSE 33554
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33515: LD_VAR 0 5
33519: PPUSH
33520: LD_EXP 96
33524: PUSH
33525: LD_VAR 0 4
33529: ARRAY
33530: PUSH
33531: LD_INT 3
33533: ARRAY
33534: PPUSH
33535: LD_EXP 96
33539: PUSH
33540: LD_VAR 0 4
33544: ARRAY
33545: PUSH
33546: LD_INT 4
33548: ARRAY
33549: PPUSH
33550: CALL_OW 111
// AddComExitVehicle ( driver ) ;
33554: LD_VAR 0 5
33558: PPUSH
33559: CALL_OW 181
// if Multiplayer then
33563: LD_OWVAR 4
33567: IFFALSE 33616
// begin repeat wait ( 10 ) ;
33569: LD_INT 10
33571: PPUSH
33572: CALL_OW 67
// until not IsInUnit ( driver ) ;
33576: LD_VAR 0 5
33580: PPUSH
33581: CALL_OW 310
33585: NOT
33586: IFFALSE 33569
// if not HasTask ( driver ) then
33588: LD_VAR 0 5
33592: PPUSH
33593: CALL_OW 314
33597: NOT
33598: IFFALSE 33614
// ComEnterUnit ( driver , factory ) ;
33600: LD_VAR 0 5
33604: PPUSH
33605: LD_VAR 0 2
33609: PPUSH
33610: CALL_OW 120
// end else
33614: GO 33630
// AddComEnterUnit ( driver , factory ) ;
33616: LD_VAR 0 5
33620: PPUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: CALL_OW 180
// wait ( 0 0$1 ) ;
33630: LD_INT 35
33632: PPUSH
33633: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
33637: LD_ADDR_EXP 97
33641: PUSH
33642: LD_EXP 97
33646: PUSH
33647: LD_VAR 0 5
33651: DIFF
33652: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
33653: LD_ADDR_EXP 97
33657: PUSH
33658: LD_EXP 97
33662: PUSH
33663: LD_VAR 0 1
33667: DIFF
33668: ST_TO_ADDR
// break ;
33669: GO 33822
// end ; end else
33671: GO 33820
// if GetControl ( vehicle ) = control_remote then
33673: LD_VAR 0 1
33677: PPUSH
33678: CALL_OW 263
33682: PUSH
33683: LD_INT 2
33685: EQUAL
33686: IFFALSE 33772
// begin wait ( 0 0$2 ) ;
33688: LD_INT 70
33690: PPUSH
33691: CALL_OW 67
// repeat wait ( 10 ) ;
33695: LD_INT 10
33697: PPUSH
33698: CALL_OW 67
// Connect ( vehicle ) ;
33702: LD_VAR 0 1
33706: PPUSH
33707: CALL 47831 0 1
// until IsControledBy ( vehicle ) ;
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 312
33720: IFFALSE 33695
// wait ( 10 ) ;
33722: LD_INT 10
33724: PPUSH
33725: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_EXP 96
33738: PUSH
33739: LD_VAR 0 4
33743: ARRAY
33744: PUSH
33745: LD_INT 3
33747: ARRAY
33748: PPUSH
33749: LD_EXP 96
33753: PUSH
33754: LD_VAR 0 4
33758: ARRAY
33759: PUSH
33760: LD_INT 4
33762: ARRAY
33763: PPUSH
33764: CALL_OW 111
// break ;
33768: GO 33822
// end else
33770: GO 33820
// begin wait ( 0 0$3 ) ;
33772: LD_INT 105
33774: PPUSH
33775: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33779: LD_VAR 0 1
33783: PPUSH
33784: LD_EXP 96
33788: PUSH
33789: LD_VAR 0 4
33793: ARRAY
33794: PUSH
33795: LD_INT 3
33797: ARRAY
33798: PPUSH
33799: LD_EXP 96
33803: PUSH
33804: LD_VAR 0 4
33808: ARRAY
33809: PUSH
33810: LD_INT 4
33812: ARRAY
33813: PPUSH
33814: CALL_OW 111
// break ;
33818: GO 33822
// end ; end ;
33820: GO 33271
33822: POP
33823: POP
// end ;
33824: LD_VAR 0 3
33828: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33829: LD_INT 0
33831: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33832: LD_VAR 0 1
33836: PUSH
33837: LD_INT 250
33839: EQUAL
33840: IFFALSE 33857
33842: PUSH
33843: LD_VAR 0 2
33847: PPUSH
33848: CALL_OW 264
33852: PUSH
33853: LD_INT 81
33855: EQUAL
33856: AND
33857: IFFALSE 33878
// MinerPlaceMine ( unit , x , y ) ;
33859: LD_VAR 0 2
33863: PPUSH
33864: LD_VAR 0 4
33868: PPUSH
33869: LD_VAR 0 5
33873: PPUSH
33874: CALL 37010 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33878: LD_VAR 0 1
33882: PUSH
33883: LD_INT 251
33885: EQUAL
33886: IFFALSE 33903
33888: PUSH
33889: LD_VAR 0 2
33893: PPUSH
33894: CALL_OW 264
33898: PUSH
33899: LD_INT 81
33901: EQUAL
33902: AND
33903: IFFALSE 33924
// MinerDetonateMine ( unit , x , y ) ;
33905: LD_VAR 0 2
33909: PPUSH
33910: LD_VAR 0 4
33914: PPUSH
33915: LD_VAR 0 5
33919: PPUSH
33920: CALL 37289 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33924: LD_VAR 0 1
33928: PUSH
33929: LD_INT 252
33931: EQUAL
33932: IFFALSE 33949
33934: PUSH
33935: LD_VAR 0 2
33939: PPUSH
33940: CALL_OW 264
33944: PUSH
33945: LD_INT 81
33947: EQUAL
33948: AND
33949: IFFALSE 33970
// MinerCreateMinefield ( unit , x , y ) ;
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 4
33960: PPUSH
33961: LD_VAR 0 5
33965: PPUSH
33966: CALL 37708 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33970: LD_VAR 0 1
33974: PUSH
33975: LD_INT 253
33977: EQUAL
33978: IFFALSE 33995
33980: PUSH
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 257
33990: PUSH
33991: LD_INT 5
33993: EQUAL
33994: AND
33995: IFFALSE 34016
// ComBinocular ( unit , x , y ) ;
33997: LD_VAR 0 2
34001: PPUSH
34002: LD_VAR 0 4
34006: PPUSH
34007: LD_VAR 0 5
34011: PPUSH
34012: CALL 38083 0 3
// if selectedUnit then
34016: LD_VAR 0 3
34020: IFFALSE 34080
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34022: LD_VAR 0 1
34026: PUSH
34027: LD_INT 254
34029: EQUAL
34030: IFFALSE 34047
34032: PUSH
34033: LD_VAR 0 2
34037: PPUSH
34038: CALL_OW 264
34042: PUSH
34043: LD_INT 99
34045: EQUAL
34046: AND
34047: IFFALSE 34064
34049: PUSH
34050: LD_VAR 0 3
34054: PPUSH
34055: CALL_OW 263
34059: PUSH
34060: LD_INT 3
34062: EQUAL
34063: AND
34064: IFFALSE 34080
// HackDestroyVehicle ( unit , selectedUnit ) ;
34066: LD_VAR 0 2
34070: PPUSH
34071: LD_VAR 0 3
34075: PPUSH
34076: CALL 36370 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34080: LD_VAR 0 1
34084: PUSH
34085: LD_INT 255
34087: EQUAL
34088: IFFALSE 34112
34090: PUSH
34091: LD_VAR 0 2
34095: PPUSH
34096: CALL_OW 264
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: LD_INT 53
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: IN
34111: AND
34112: IFFALSE 34130
34114: PUSH
34115: LD_VAR 0 4
34119: PPUSH
34120: LD_VAR 0 5
34124: PPUSH
34125: CALL_OW 488
34129: AND
34130: IFFALSE 34154
// CutTreeXYR ( unit , x , y , 12 ) ;
34132: LD_VAR 0 2
34136: PPUSH
34137: LD_VAR 0 4
34141: PPUSH
34142: LD_VAR 0 5
34146: PPUSH
34147: LD_INT 12
34149: PPUSH
34150: CALL 34345 0 4
// if cmd = 256 then
34154: LD_VAR 0 1
34158: PUSH
34159: LD_INT 256
34161: EQUAL
34162: IFFALSE 34183
// SetFactoryWaypoint ( unit , x , y ) ;
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_VAR 0 4
34173: PPUSH
34174: LD_VAR 0 5
34178: PPUSH
34179: CALL 31705 0 3
// if cmd = 257 then
34183: LD_VAR 0 1
34187: PUSH
34188: LD_INT 257
34190: EQUAL
34191: IFFALSE 34212
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34193: LD_VAR 0 2
34197: PPUSH
34198: LD_VAR 0 4
34202: PPUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL 32201 0 3
// if cmd = 258 then
34212: LD_VAR 0 1
34216: PUSH
34217: LD_INT 258
34219: EQUAL
34220: IFFALSE 34244
// BurnTreeXYR ( unit , x , y , 8 ) ;
34222: LD_VAR 0 2
34226: PPUSH
34227: LD_VAR 0 4
34231: PPUSH
34232: LD_VAR 0 5
34236: PPUSH
34237: LD_INT 8
34239: PPUSH
34240: CALL 34745 0 4
// end ;
34244: LD_VAR 0 6
34248: RET
// export function ComRadiation ( un ) ; var eff ; begin
34249: LD_INT 0
34251: PPUSH
34252: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
34253: LD_VAR 0 1
34257: PPUSH
34258: CALL_OW 264
34262: PUSH
34263: LD_INT 91
34265: NONEQUAL
34266: IFFALSE 34270
// exit ;
34268: GO 34340
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34270: LD_INT 68
34272: PPUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 255
34282: PPUSH
34283: CALL_OW 321
34287: PUSH
34288: LD_INT 2
34290: EQUAL
34291: IFFALSE 34303
// eff := 50 else
34293: LD_ADDR_VAR 0 3
34297: PUSH
34298: LD_INT 50
34300: ST_TO_ADDR
34301: GO 34311
// eff := 25 ;
34303: LD_ADDR_VAR 0 3
34307: PUSH
34308: LD_INT 25
34310: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34311: LD_VAR 0 1
34315: PPUSH
34316: CALL_OW 250
34320: PPUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 251
34330: PPUSH
34331: LD_VAR 0 3
34335: PPUSH
34336: CALL_OW 495
// end ;
34340: LD_VAR 0 2
34344: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 302
34365: NOT
34366: IFTRUE 34385
34368: PUSH
34369: LD_VAR 0 2
34373: PPUSH
34374: LD_VAR 0 3
34378: PPUSH
34379: CALL_OW 488
34383: NOT
34384: OR
34385: IFTRUE 34394
34387: PUSH
34388: LD_VAR 0 4
34392: NOT
34393: OR
34394: IFFALSE 34398
// exit ;
34396: GO 34740
// list := [ ] ;
34398: LD_ADDR_VAR 0 13
34402: PUSH
34403: EMPTY
34404: ST_TO_ADDR
// if x - r < 0 then
34405: LD_VAR 0 2
34409: PUSH
34410: LD_VAR 0 4
34414: MINUS
34415: PUSH
34416: LD_INT 0
34418: LESS
34419: IFFALSE 34431
// min_x := 0 else
34421: LD_ADDR_VAR 0 7
34425: PUSH
34426: LD_INT 0
34428: ST_TO_ADDR
34429: GO 34447
// min_x := x - r ;
34431: LD_ADDR_VAR 0 7
34435: PUSH
34436: LD_VAR 0 2
34440: PUSH
34441: LD_VAR 0 4
34445: MINUS
34446: ST_TO_ADDR
// if y - r < 0 then
34447: LD_VAR 0 3
34451: PUSH
34452: LD_VAR 0 4
34456: MINUS
34457: PUSH
34458: LD_INT 0
34460: LESS
34461: IFFALSE 34473
// min_y := 0 else
34463: LD_ADDR_VAR 0 8
34467: PUSH
34468: LD_INT 0
34470: ST_TO_ADDR
34471: GO 34489
// min_y := y - r ;
34473: LD_ADDR_VAR 0 8
34477: PUSH
34478: LD_VAR 0 3
34482: PUSH
34483: LD_VAR 0 4
34487: MINUS
34488: ST_TO_ADDR
// max_x := x + r ;
34489: LD_ADDR_VAR 0 9
34493: PUSH
34494: LD_VAR 0 2
34498: PUSH
34499: LD_VAR 0 4
34503: PLUS
34504: ST_TO_ADDR
// max_y := y + r ;
34505: LD_ADDR_VAR 0 10
34509: PUSH
34510: LD_VAR 0 3
34514: PUSH
34515: LD_VAR 0 4
34519: PLUS
34520: ST_TO_ADDR
// for _x = min_x to max_x do
34521: LD_ADDR_VAR 0 11
34525: PUSH
34526: DOUBLE
34527: LD_VAR 0 7
34531: DEC
34532: ST_TO_ADDR
34533: LD_VAR 0 9
34537: PUSH
34538: FOR_TO
34539: IFFALSE 34658
// for _y = min_y to max_y do
34541: LD_ADDR_VAR 0 12
34545: PUSH
34546: DOUBLE
34547: LD_VAR 0 8
34551: DEC
34552: ST_TO_ADDR
34553: LD_VAR 0 10
34557: PUSH
34558: FOR_TO
34559: IFFALSE 34654
// begin if not ValidHex ( _x , _y ) then
34561: LD_VAR 0 11
34565: PPUSH
34566: LD_VAR 0 12
34570: PPUSH
34571: CALL_OW 488
34575: NOT
34576: IFFALSE 34580
// continue ;
34578: GO 34558
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34580: LD_VAR 0 11
34584: PPUSH
34585: LD_VAR 0 12
34589: PPUSH
34590: CALL_OW 351
34594: IFFALSE 34612
34596: PUSH
34597: LD_VAR 0 11
34601: PPUSH
34602: LD_VAR 0 12
34606: PPUSH
34607: CALL_OW 554
34611: AND
34612: IFFALSE 34652
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34614: LD_ADDR_VAR 0 13
34618: PUSH
34619: LD_VAR 0 13
34623: PPUSH
34624: LD_VAR 0 13
34628: PUSH
34629: LD_INT 1
34631: PLUS
34632: PPUSH
34633: LD_VAR 0 11
34637: PUSH
34638: LD_VAR 0 12
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 2
34651: ST_TO_ADDR
// end ;
34652: GO 34558
34654: POP
34655: POP
34656: GO 34538
34658: POP
34659: POP
// if not list then
34660: LD_VAR 0 13
34664: NOT
34665: IFFALSE 34669
// exit ;
34667: GO 34740
// for i in list do
34669: LD_ADDR_VAR 0 6
34673: PUSH
34674: LD_VAR 0 13
34678: PUSH
34679: FOR_IN
34680: IFFALSE 34738
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34682: LD_VAR 0 1
34686: PPUSH
34687: LD_STRING M
34689: PUSH
34690: LD_VAR 0 6
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: PUSH
34699: LD_VAR 0 6
34703: PUSH
34704: LD_INT 2
34706: ARRAY
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: PUSH
34729: EMPTY
34730: LIST
34731: PPUSH
34732: CALL_OW 447
34736: GO 34679
34738: POP
34739: POP
// end ;
34740: LD_VAR 0 5
34744: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34745: LD_INT 0
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 302
34766: NOT
34767: IFTRUE 34786
34769: PUSH
34770: LD_VAR 0 2
34774: PPUSH
34775: LD_VAR 0 3
34779: PPUSH
34780: CALL_OW 488
34784: NOT
34785: OR
34786: IFTRUE 34795
34788: PUSH
34789: LD_VAR 0 4
34793: NOT
34794: OR
34795: IFFALSE 34799
// exit ;
34797: GO 35316
// list := [ ] ;
34799: LD_ADDR_VAR 0 13
34803: PUSH
34804: EMPTY
34805: ST_TO_ADDR
// if x - r < 0 then
34806: LD_VAR 0 2
34810: PUSH
34811: LD_VAR 0 4
34815: MINUS
34816: PUSH
34817: LD_INT 0
34819: LESS
34820: IFFALSE 34832
// min_x := 0 else
34822: LD_ADDR_VAR 0 7
34826: PUSH
34827: LD_INT 0
34829: ST_TO_ADDR
34830: GO 34848
// min_x := x - r ;
34832: LD_ADDR_VAR 0 7
34836: PUSH
34837: LD_VAR 0 2
34841: PUSH
34842: LD_VAR 0 4
34846: MINUS
34847: ST_TO_ADDR
// if y - r < 0 then
34848: LD_VAR 0 3
34852: PUSH
34853: LD_VAR 0 4
34857: MINUS
34858: PUSH
34859: LD_INT 0
34861: LESS
34862: IFFALSE 34874
// min_y := 0 else
34864: LD_ADDR_VAR 0 8
34868: PUSH
34869: LD_INT 0
34871: ST_TO_ADDR
34872: GO 34890
// min_y := y - r ;
34874: LD_ADDR_VAR 0 8
34878: PUSH
34879: LD_VAR 0 3
34883: PUSH
34884: LD_VAR 0 4
34888: MINUS
34889: ST_TO_ADDR
// max_x := x + r ;
34890: LD_ADDR_VAR 0 9
34894: PUSH
34895: LD_VAR 0 2
34899: PUSH
34900: LD_VAR 0 4
34904: PLUS
34905: ST_TO_ADDR
// max_y := y + r ;
34906: LD_ADDR_VAR 0 10
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_VAR 0 4
34920: PLUS
34921: ST_TO_ADDR
// for _x = min_x to max_x do
34922: LD_ADDR_VAR 0 11
34926: PUSH
34927: DOUBLE
34928: LD_VAR 0 7
34932: DEC
34933: ST_TO_ADDR
34934: LD_VAR 0 9
34938: PUSH
34939: FOR_TO
34940: IFFALSE 35059
// for _y = min_y to max_y do
34942: LD_ADDR_VAR 0 12
34946: PUSH
34947: DOUBLE
34948: LD_VAR 0 8
34952: DEC
34953: ST_TO_ADDR
34954: LD_VAR 0 10
34958: PUSH
34959: FOR_TO
34960: IFFALSE 35055
// begin if not ValidHex ( _x , _y ) then
34962: LD_VAR 0 11
34966: PPUSH
34967: LD_VAR 0 12
34971: PPUSH
34972: CALL_OW 488
34976: NOT
34977: IFFALSE 34981
// continue ;
34979: GO 34959
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34981: LD_VAR 0 11
34985: PPUSH
34986: LD_VAR 0 12
34990: PPUSH
34991: CALL_OW 351
34995: IFFALSE 35013
34997: PUSH
34998: LD_VAR 0 11
35002: PPUSH
35003: LD_VAR 0 12
35007: PPUSH
35008: CALL_OW 554
35012: AND
35013: IFFALSE 35053
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35015: LD_ADDR_VAR 0 13
35019: PUSH
35020: LD_VAR 0 13
35024: PPUSH
35025: LD_VAR 0 13
35029: PUSH
35030: LD_INT 1
35032: PLUS
35033: PPUSH
35034: LD_VAR 0 11
35038: PUSH
35039: LD_VAR 0 12
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PPUSH
35048: CALL_OW 2
35052: ST_TO_ADDR
// end ;
35053: GO 34959
35055: POP
35056: POP
35057: GO 34939
35059: POP
35060: POP
// if not list then
35061: LD_VAR 0 13
35065: NOT
35066: IFFALSE 35070
// exit ;
35068: GO 35316
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35070: LD_ADDR_VAR 0 13
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 13
35084: PPUSH
35085: LD_INT 1
35087: PPUSH
35088: LD_INT 1
35090: PPUSH
35091: CALL 44959 0 4
35095: ST_TO_ADDR
// ComStop ( flame ) ;
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 141
// for i in list do
35105: LD_ADDR_VAR 0 6
35109: PUSH
35110: LD_VAR 0 13
35114: PUSH
35115: FOR_IN
35116: IFFALSE 35147
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35118: LD_VAR 0 1
35122: PPUSH
35123: LD_VAR 0 6
35127: PUSH
35128: LD_INT 1
35130: ARRAY
35131: PPUSH
35132: LD_VAR 0 6
35136: PUSH
35137: LD_INT 2
35139: ARRAY
35140: PPUSH
35141: CALL_OW 176
35145: GO 35115
35147: POP
35148: POP
// repeat wait ( 0 0$1 ) ;
35149: LD_INT 35
35151: PPUSH
35152: CALL_OW 67
// task := GetTaskList ( flame ) ;
35156: LD_ADDR_VAR 0 14
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 437
35170: ST_TO_ADDR
// if not task then
35171: LD_VAR 0 14
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 35316
// if task [ 1 ] [ 1 ] <> | then
35180: LD_VAR 0 14
35184: PUSH
35185: LD_INT 1
35187: ARRAY
35188: PUSH
35189: LD_INT 1
35191: ARRAY
35192: PUSH
35193: LD_STRING |
35195: NONEQUAL
35196: IFFALSE 35200
// exit ;
35198: GO 35316
// _x := task [ 1 ] [ 2 ] ;
35200: LD_ADDR_VAR 0 11
35204: PUSH
35205: LD_VAR 0 14
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: PUSH
35214: LD_INT 2
35216: ARRAY
35217: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35218: LD_ADDR_VAR 0 12
35222: PUSH
35223: LD_VAR 0 14
35227: PUSH
35228: LD_INT 1
35230: ARRAY
35231: PUSH
35232: LD_INT 3
35234: ARRAY
35235: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35236: LD_VAR 0 11
35240: PPUSH
35241: LD_VAR 0 12
35245: PPUSH
35246: CALL_OW 351
35250: NOT
35251: IFTRUE 35270
35253: PUSH
35254: LD_VAR 0 11
35258: PPUSH
35259: LD_VAR 0 12
35263: PPUSH
35264: CALL_OW 554
35268: NOT
35269: OR
35270: IFFALSE 35304
// begin task := Delete ( task , 1 ) ;
35272: LD_ADDR_VAR 0 14
35276: PUSH
35277: LD_VAR 0 14
35281: PPUSH
35282: LD_INT 1
35284: PPUSH
35285: CALL_OW 3
35289: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35290: LD_VAR 0 1
35294: PPUSH
35295: LD_VAR 0 14
35299: PPUSH
35300: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 314
35313: NOT
35314: IFFALSE 35149
// end ;
35316: LD_VAR 0 5
35320: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35321: LD_EXP 100
35325: NOT
35326: IFFALSE 35376
35328: GO 35330
35330: DISABLE
// begin initHack := true ;
35331: LD_ADDR_EXP 100
35335: PUSH
35336: LD_INT 1
35338: ST_TO_ADDR
// hackTanks := [ ] ;
35339: LD_ADDR_EXP 101
35343: PUSH
35344: EMPTY
35345: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35346: LD_ADDR_EXP 102
35350: PUSH
35351: EMPTY
35352: ST_TO_ADDR
// hackLimit := 3 ;
35353: LD_ADDR_EXP 103
35357: PUSH
35358: LD_INT 3
35360: ST_TO_ADDR
// hackDist := 12 ;
35361: LD_ADDR_EXP 104
35365: PUSH
35366: LD_INT 12
35368: ST_TO_ADDR
// hackCounter := [ ] ;
35369: LD_ADDR_EXP 105
35373: PUSH
35374: EMPTY
35375: ST_TO_ADDR
// end ;
35376: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35377: LD_EXP 100
35381: IFFALSE 35399
35383: PUSH
35384: LD_INT 34
35386: PUSH
35387: LD_INT 99
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 69
35398: AND
35399: IFFALSE 35652
35401: GO 35403
35403: DISABLE
35404: LD_INT 0
35406: PPUSH
35407: PPUSH
// begin enable ;
35408: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35409: LD_ADDR_VAR 0 1
35413: PUSH
35414: LD_INT 34
35416: PUSH
35417: LD_INT 99
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PPUSH
35424: CALL_OW 69
35428: PUSH
35429: FOR_IN
35430: IFFALSE 35650
// begin if not i in hackTanks then
35432: LD_VAR 0 1
35436: PUSH
35437: LD_EXP 101
35441: IN
35442: NOT
35443: IFFALSE 35526
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35445: LD_ADDR_EXP 101
35449: PUSH
35450: LD_EXP 101
35454: PPUSH
35455: LD_EXP 101
35459: PUSH
35460: LD_INT 1
35462: PLUS
35463: PPUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL_OW 1
35473: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35474: LD_ADDR_EXP 102
35478: PUSH
35479: LD_EXP 102
35483: PPUSH
35484: LD_EXP 102
35488: PUSH
35489: LD_INT 1
35491: PLUS
35492: PPUSH
35493: EMPTY
35494: PPUSH
35495: CALL_OW 1
35499: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35500: LD_ADDR_EXP 105
35504: PUSH
35505: LD_EXP 105
35509: PPUSH
35510: LD_EXP 105
35514: PUSH
35515: LD_INT 1
35517: PLUS
35518: PPUSH
35519: EMPTY
35520: PPUSH
35521: CALL_OW 1
35525: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 302
35535: NOT
35536: IFFALSE 35549
// begin HackUnlinkAll ( i ) ;
35538: LD_VAR 0 1
35542: PPUSH
35543: CALL 35655 0 1
// continue ;
35547: GO 35429
// end ; HackCheckCapturedStatus ( i ) ;
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL 36100 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35558: LD_ADDR_VAR 0 2
35562: PUSH
35563: LD_INT 81
35565: PUSH
35566: LD_VAR 0 1
35570: PPUSH
35571: CALL_OW 255
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 33
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 91
35592: PUSH
35593: LD_VAR 0 1
35597: PUSH
35598: LD_EXP 104
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 50
35610: PUSH
35611: EMPTY
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 69
35624: ST_TO_ADDR
// if not tmp then
35625: LD_VAR 0 2
35629: NOT
35630: IFFALSE 35634
// continue ;
35632: GO 35429
// HackLink ( i , tmp ) ;
35634: LD_VAR 0 1
35638: PPUSH
35639: LD_VAR 0 2
35643: PPUSH
35644: CALL 35791 0 2
// end ;
35648: GO 35429
35650: POP
35651: POP
// end ;
35652: PPOPN 2
35654: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35655: LD_INT 0
35657: PPUSH
35658: PPUSH
35659: PPUSH
// if not hack in hackTanks then
35660: LD_VAR 0 1
35664: PUSH
35665: LD_EXP 101
35669: IN
35670: NOT
35671: IFFALSE 35675
// exit ;
35673: GO 35786
// index := GetElementIndex ( hackTanks , hack ) ;
35675: LD_ADDR_VAR 0 4
35679: PUSH
35680: LD_EXP 101
35684: PPUSH
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL 44254 0 2
35694: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35695: LD_EXP 102
35699: PUSH
35700: LD_VAR 0 4
35704: ARRAY
35705: IFFALSE 35786
// begin for i in hackTanksCaptured [ index ] do
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_EXP 102
35716: PUSH
35717: LD_VAR 0 4
35721: ARRAY
35722: PUSH
35723: FOR_IN
35724: IFFALSE 35750
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35726: LD_VAR 0 3
35730: PUSH
35731: LD_INT 1
35733: ARRAY
35734: PPUSH
35735: LD_VAR 0 3
35739: PUSH
35740: LD_INT 2
35742: ARRAY
35743: PPUSH
35744: CALL_OW 235
35748: GO 35723
35750: POP
35751: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35752: LD_ADDR_EXP 102
35756: PUSH
35757: LD_EXP 102
35761: PPUSH
35762: LD_VAR 0 4
35766: PPUSH
35767: EMPTY
35768: PPUSH
35769: CALL_OW 1
35773: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35774: LD_VAR 0 1
35778: PPUSH
35779: LD_INT 0
35781: PPUSH
35782: CALL_OW 505
// end ; end ;
35786: LD_VAR 0 2
35790: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35791: LD_INT 0
35793: PPUSH
35794: PPUSH
35795: PPUSH
// if not hack in hackTanks or not vehicles then
35796: LD_VAR 0 1
35800: PUSH
35801: LD_EXP 101
35805: IN
35806: NOT
35807: IFTRUE 35816
35809: PUSH
35810: LD_VAR 0 2
35814: NOT
35815: OR
35816: IFFALSE 35820
// exit ;
35818: GO 36095
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35820: LD_ADDR_VAR 0 2
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: LD_VAR 0 2
35834: PPUSH
35835: LD_INT 1
35837: PPUSH
35838: LD_INT 1
35840: PPUSH
35841: CALL 44906 0 4
35845: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35846: LD_ADDR_VAR 0 5
35850: PUSH
35851: LD_EXP 101
35855: PPUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL 44254 0 2
35865: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35866: LD_EXP 102
35870: PUSH
35871: LD_VAR 0 5
35875: ARRAY
35876: PUSH
35877: LD_EXP 103
35881: LESS
35882: IFFALSE 36071
// begin for i := 1 to vehicles do
35884: LD_ADDR_VAR 0 4
35888: PUSH
35889: DOUBLE
35890: LD_INT 1
35892: DEC
35893: ST_TO_ADDR
35894: LD_VAR 0 2
35898: PUSH
35899: FOR_TO
35900: IFFALSE 36069
// begin if hackTanksCaptured [ index ] = hackLimit then
35902: LD_EXP 102
35906: PUSH
35907: LD_VAR 0 5
35911: ARRAY
35912: PUSH
35913: LD_EXP 103
35917: EQUAL
35918: IFFALSE 35922
// break ;
35920: GO 36069
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35922: LD_ADDR_EXP 105
35926: PUSH
35927: LD_EXP 105
35931: PPUSH
35932: LD_VAR 0 5
35936: PPUSH
35937: LD_EXP 105
35941: PUSH
35942: LD_VAR 0 5
35946: ARRAY
35947: PUSH
35948: LD_INT 1
35950: PLUS
35951: PPUSH
35952: CALL_OW 1
35956: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35957: LD_ADDR_EXP 102
35961: PUSH
35962: LD_EXP 102
35966: PPUSH
35967: LD_VAR 0 5
35971: PUSH
35972: LD_EXP 102
35976: PUSH
35977: LD_VAR 0 5
35981: ARRAY
35982: PUSH
35983: LD_INT 1
35985: PLUS
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PPUSH
35991: LD_VAR 0 2
35995: PUSH
35996: LD_VAR 0 4
36000: ARRAY
36001: PUSH
36002: LD_VAR 0 2
36006: PUSH
36007: LD_VAR 0 4
36011: ARRAY
36012: PPUSH
36013: CALL_OW 255
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PPUSH
36022: CALL 44471 0 3
36026: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36027: LD_VAR 0 2
36031: PUSH
36032: LD_VAR 0 4
36036: ARRAY
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL_OW 255
36047: PPUSH
36048: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36052: LD_VAR 0 2
36056: PUSH
36057: LD_VAR 0 4
36061: ARRAY
36062: PPUSH
36063: CALL_OW 141
// end ;
36067: GO 35899
36069: POP
36070: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36071: LD_VAR 0 1
36075: PPUSH
36076: LD_EXP 102
36080: PUSH
36081: LD_VAR 0 5
36085: ARRAY
36086: PUSH
36087: LD_INT 0
36089: PLUS
36090: PPUSH
36091: CALL_OW 505
// end ;
36095: LD_VAR 0 3
36099: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
// if not hack in hackTanks then
36106: LD_VAR 0 1
36110: PUSH
36111: LD_EXP 101
36115: IN
36116: NOT
36117: IFFALSE 36121
// exit ;
36119: GO 36365
// index := GetElementIndex ( hackTanks , hack ) ;
36121: LD_ADDR_VAR 0 4
36125: PUSH
36126: LD_EXP 101
36130: PPUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL 44254 0 2
36140: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36141: LD_ADDR_VAR 0 3
36145: PUSH
36146: DOUBLE
36147: LD_EXP 102
36151: PUSH
36152: LD_VAR 0 4
36156: ARRAY
36157: INC
36158: ST_TO_ADDR
36159: LD_INT 1
36161: PUSH
36162: FOR_DOWNTO
36163: IFFALSE 36339
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36165: LD_ADDR_VAR 0 5
36169: PUSH
36170: LD_EXP 102
36174: PUSH
36175: LD_VAR 0 4
36179: ARRAY
36180: PUSH
36181: LD_VAR 0 3
36185: ARRAY
36186: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36187: LD_VAR 0 5
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PPUSH
36196: CALL_OW 302
36200: NOT
36201: IFTRUE 36229
36203: PUSH
36204: LD_VAR 0 5
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: PPUSH
36213: CALL_OW 255
36217: PUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: CALL_OW 255
36227: NONEQUAL
36228: OR
36229: IFFALSE 36337
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36231: LD_VAR 0 5
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: CALL_OW 305
36244: IFFALSE 36272
36246: PUSH
36247: LD_VAR 0 5
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: CALL_OW 255
36260: PUSH
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 255
36270: EQUAL
36271: AND
36272: IFFALSE 36296
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36274: LD_VAR 0 5
36278: PUSH
36279: LD_INT 1
36281: ARRAY
36282: PPUSH
36283: LD_VAR 0 5
36287: PUSH
36288: LD_INT 2
36290: ARRAY
36291: PPUSH
36292: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36296: LD_ADDR_EXP 102
36300: PUSH
36301: LD_EXP 102
36305: PPUSH
36306: LD_VAR 0 4
36310: PPUSH
36311: LD_EXP 102
36315: PUSH
36316: LD_VAR 0 4
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: CALL_OW 3
36331: PPUSH
36332: CALL_OW 1
36336: ST_TO_ADDR
// end ; end ;
36337: GO 36162
36339: POP
36340: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36341: LD_VAR 0 1
36345: PPUSH
36346: LD_EXP 102
36350: PUSH
36351: LD_VAR 0 4
36355: ARRAY
36356: PUSH
36357: LD_INT 0
36359: PLUS
36360: PPUSH
36361: CALL_OW 505
// end ;
36365: LD_VAR 0 2
36369: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36370: LD_INT 0
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
// if not hack in hackTanks then
36376: LD_VAR 0 1
36380: PUSH
36381: LD_EXP 101
36385: IN
36386: NOT
36387: IFFALSE 36391
// exit ;
36389: GO 36476
// index := GetElementIndex ( hackTanks , hack ) ;
36391: LD_ADDR_VAR 0 5
36395: PUSH
36396: LD_EXP 101
36400: PPUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL 44254 0 2
36410: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: DOUBLE
36417: LD_INT 1
36419: DEC
36420: ST_TO_ADDR
36421: LD_EXP 102
36425: PUSH
36426: LD_VAR 0 5
36430: ARRAY
36431: PUSH
36432: FOR_TO
36433: IFFALSE 36474
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36435: LD_EXP 102
36439: PUSH
36440: LD_VAR 0 5
36444: ARRAY
36445: PUSH
36446: LD_VAR 0 4
36450: ARRAY
36451: PUSH
36452: LD_INT 1
36454: ARRAY
36455: PUSH
36456: LD_VAR 0 2
36460: EQUAL
36461: IFFALSE 36472
// KillUnit ( vehicle ) ;
36463: LD_VAR 0 2
36467: PPUSH
36468: CALL_OW 66
36472: GO 36432
36474: POP
36475: POP
// end ;
36476: LD_VAR 0 3
36480: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36481: LD_EXP 106
36485: NOT
36486: IFFALSE 36521
36488: GO 36490
36490: DISABLE
// begin initMiner := true ;
36491: LD_ADDR_EXP 106
36495: PUSH
36496: LD_INT 1
36498: ST_TO_ADDR
// minersList := [ ] ;
36499: LD_ADDR_EXP 107
36503: PUSH
36504: EMPTY
36505: ST_TO_ADDR
// minerMinesList := [ ] ;
36506: LD_ADDR_EXP 108
36510: PUSH
36511: EMPTY
36512: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36513: LD_ADDR_EXP 109
36517: PUSH
36518: LD_INT 5
36520: ST_TO_ADDR
// end ;
36521: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36522: LD_EXP 106
36526: IFFALSE 36544
36528: PUSH
36529: LD_INT 34
36531: PUSH
36532: LD_INT 81
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PPUSH
36539: CALL_OW 69
36543: AND
36544: IFFALSE 37007
36546: GO 36548
36548: DISABLE
36549: LD_INT 0
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
// begin enable ;
36555: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36556: LD_ADDR_VAR 0 1
36560: PUSH
36561: LD_INT 34
36563: PUSH
36564: LD_INT 81
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PPUSH
36571: CALL_OW 69
36575: PUSH
36576: FOR_IN
36577: IFFALSE 36649
// begin if not i in minersList then
36579: LD_VAR 0 1
36583: PUSH
36584: LD_EXP 107
36588: IN
36589: NOT
36590: IFFALSE 36647
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36592: LD_ADDR_EXP 107
36596: PUSH
36597: LD_EXP 107
36601: PPUSH
36602: LD_EXP 107
36606: PUSH
36607: LD_INT 1
36609: PLUS
36610: PPUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 1
36620: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36621: LD_ADDR_EXP 108
36625: PUSH
36626: LD_EXP 108
36630: PPUSH
36631: LD_EXP 108
36635: PUSH
36636: LD_INT 1
36638: PLUS
36639: PPUSH
36640: EMPTY
36641: PPUSH
36642: CALL_OW 1
36646: ST_TO_ADDR
// end end ;
36647: GO 36576
36649: POP
36650: POP
// for i := minerMinesList downto 1 do
36651: LD_ADDR_VAR 0 1
36655: PUSH
36656: DOUBLE
36657: LD_EXP 108
36661: INC
36662: ST_TO_ADDR
36663: LD_INT 1
36665: PUSH
36666: FOR_DOWNTO
36667: IFFALSE 37005
// begin if IsLive ( minersList [ i ] ) then
36669: LD_EXP 107
36673: PUSH
36674: LD_VAR 0 1
36678: ARRAY
36679: PPUSH
36680: CALL_OW 300
36684: IFFALSE 36712
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36686: LD_EXP 107
36690: PUSH
36691: LD_VAR 0 1
36695: ARRAY
36696: PPUSH
36697: LD_EXP 108
36701: PUSH
36702: LD_VAR 0 1
36706: ARRAY
36707: PPUSH
36708: CALL_OW 505
// if not minerMinesList [ i ] then
36712: LD_EXP 108
36716: PUSH
36717: LD_VAR 0 1
36721: ARRAY
36722: NOT
36723: IFFALSE 36727
// continue ;
36725: GO 36666
// for j := minerMinesList [ i ] downto 1 do
36727: LD_ADDR_VAR 0 2
36731: PUSH
36732: DOUBLE
36733: LD_EXP 108
36737: PUSH
36738: LD_VAR 0 1
36742: ARRAY
36743: INC
36744: ST_TO_ADDR
36745: LD_INT 1
36747: PUSH
36748: FOR_DOWNTO
36749: IFFALSE 37001
// begin side := GetSide ( minersList [ i ] ) ;
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_EXP 107
36760: PUSH
36761: LD_VAR 0 1
36765: ARRAY
36766: PPUSH
36767: CALL_OW 255
36771: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36772: LD_ADDR_VAR 0 4
36776: PUSH
36777: LD_EXP 108
36781: PUSH
36782: LD_VAR 0 1
36786: ARRAY
36787: PUSH
36788: LD_VAR 0 2
36792: ARRAY
36793: PUSH
36794: LD_INT 1
36796: ARRAY
36797: PPUSH
36798: LD_EXP 108
36802: PUSH
36803: LD_VAR 0 1
36807: ARRAY
36808: PUSH
36809: LD_VAR 0 2
36813: ARRAY
36814: PUSH
36815: LD_INT 2
36817: ARRAY
36818: PPUSH
36819: CALL_OW 428
36823: ST_TO_ADDR
// if not tmp then
36824: LD_VAR 0 4
36828: NOT
36829: IFFALSE 36833
// continue ;
36831: GO 36748
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36833: LD_VAR 0 4
36837: PUSH
36838: LD_INT 81
36840: PUSH
36841: LD_VAR 0 3
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PPUSH
36850: CALL_OW 69
36854: IN
36855: IFFALSE 36905
36857: PUSH
36858: LD_EXP 108
36862: PUSH
36863: LD_VAR 0 1
36867: ARRAY
36868: PUSH
36869: LD_VAR 0 2
36873: ARRAY
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: LD_EXP 108
36883: PUSH
36884: LD_VAR 0 1
36888: ARRAY
36889: PUSH
36890: LD_VAR 0 2
36894: ARRAY
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PPUSH
36900: CALL_OW 458
36904: AND
36905: IFFALSE 36999
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36907: LD_EXP 108
36911: PUSH
36912: LD_VAR 0 1
36916: ARRAY
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PPUSH
36928: LD_EXP 108
36932: PUSH
36933: LD_VAR 0 1
36937: ARRAY
36938: PUSH
36939: LD_VAR 0 2
36943: ARRAY
36944: PUSH
36945: LD_INT 2
36947: ARRAY
36948: PPUSH
36949: LD_VAR 0 3
36953: PPUSH
36954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36958: LD_ADDR_EXP 108
36962: PUSH
36963: LD_EXP 108
36967: PPUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: LD_EXP 108
36977: PUSH
36978: LD_VAR 0 1
36982: ARRAY
36983: PPUSH
36984: LD_VAR 0 2
36988: PPUSH
36989: CALL_OW 3
36993: PPUSH
36994: CALL_OW 1
36998: ST_TO_ADDR
// end ; end ;
36999: GO 36748
37001: POP
37002: POP
// end ;
37003: GO 36666
37005: POP
37006: POP
// end ;
37007: PPOPN 4
37009: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37010: LD_INT 0
37012: PPUSH
37013: PPUSH
// result := false ;
37014: LD_ADDR_VAR 0 4
37018: PUSH
37019: LD_INT 0
37021: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37022: LD_VAR 0 1
37026: PPUSH
37027: CALL_OW 264
37031: PUSH
37032: LD_INT 81
37034: EQUAL
37035: NOT
37036: IFFALSE 37040
// exit ;
37038: GO 37284
// index := GetElementIndex ( minersList , unit ) ;
37040: LD_ADDR_VAR 0 5
37044: PUSH
37045: LD_EXP 107
37049: PPUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL 44254 0 2
37059: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37060: LD_EXP 108
37064: PUSH
37065: LD_VAR 0 5
37069: ARRAY
37070: PUSH
37071: LD_EXP 109
37075: GREATEREQUAL
37076: IFFALSE 37080
// exit ;
37078: GO 37284
// ComMoveXY ( unit , x , y ) ;
37080: LD_VAR 0 1
37084: PPUSH
37085: LD_VAR 0 2
37089: PPUSH
37090: LD_VAR 0 3
37094: PPUSH
37095: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37099: LD_INT 35
37101: PPUSH
37102: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37106: LD_VAR 0 1
37110: PPUSH
37111: LD_VAR 0 2
37115: PPUSH
37116: LD_VAR 0 3
37120: PPUSH
37121: CALL 76300 0 3
37125: NOT
37126: IFFALSE 37139
37128: PUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 314
37138: AND
37139: IFFALSE 37143
// exit ;
37141: GO 37284
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_VAR 0 3
37152: PPUSH
37153: CALL_OW 428
37157: PUSH
37158: LD_VAR 0 1
37162: EQUAL
37163: IFFALSE 37177
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 314
37175: NOT
37176: AND
37177: IFFALSE 37099
// PlaySoundXY ( x , y , PlantMine ) ;
37179: LD_VAR 0 2
37183: PPUSH
37184: LD_VAR 0 3
37188: PPUSH
37189: LD_STRING PlantMine
37191: PPUSH
37192: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37196: LD_VAR 0 2
37200: PPUSH
37201: LD_VAR 0 3
37205: PPUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 255
37215: PPUSH
37216: LD_INT 0
37218: PPUSH
37219: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37223: LD_ADDR_EXP 108
37227: PUSH
37228: LD_EXP 108
37232: PPUSH
37233: LD_VAR 0 5
37237: PUSH
37238: LD_EXP 108
37242: PUSH
37243: LD_VAR 0 5
37247: ARRAY
37248: PUSH
37249: LD_INT 1
37251: PLUS
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PPUSH
37257: LD_VAR 0 2
37261: PUSH
37262: LD_VAR 0 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PPUSH
37271: CALL 44471 0 3
37275: ST_TO_ADDR
// result := true ;
37276: LD_ADDR_VAR 0 4
37280: PUSH
37281: LD_INT 1
37283: ST_TO_ADDR
// end ;
37284: LD_VAR 0 4
37288: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
// if not unit in minersList then
37294: LD_VAR 0 1
37298: PUSH
37299: LD_EXP 107
37303: IN
37304: NOT
37305: IFFALSE 37309
// exit ;
37307: GO 37703
// index := GetElementIndex ( minersList , unit ) ;
37309: LD_ADDR_VAR 0 6
37313: PUSH
37314: LD_EXP 107
37318: PPUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL 44254 0 2
37328: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37329: LD_ADDR_VAR 0 5
37333: PUSH
37334: DOUBLE
37335: LD_EXP 108
37339: PUSH
37340: LD_VAR 0 6
37344: ARRAY
37345: INC
37346: ST_TO_ADDR
37347: LD_INT 1
37349: PUSH
37350: FOR_DOWNTO
37351: IFFALSE 37514
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37353: LD_EXP 108
37357: PUSH
37358: LD_VAR 0 6
37362: ARRAY
37363: PUSH
37364: LD_VAR 0 5
37368: ARRAY
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PUSH
37374: LD_VAR 0 2
37378: EQUAL
37379: IFFALSE 37409
37381: PUSH
37382: LD_EXP 108
37386: PUSH
37387: LD_VAR 0 6
37391: ARRAY
37392: PUSH
37393: LD_VAR 0 5
37397: ARRAY
37398: PUSH
37399: LD_INT 2
37401: ARRAY
37402: PUSH
37403: LD_VAR 0 3
37407: EQUAL
37408: AND
37409: IFFALSE 37512
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37411: LD_EXP 108
37415: PUSH
37416: LD_VAR 0 6
37420: ARRAY
37421: PUSH
37422: LD_VAR 0 5
37426: ARRAY
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PPUSH
37432: LD_EXP 108
37436: PUSH
37437: LD_VAR 0 6
37441: ARRAY
37442: PUSH
37443: LD_VAR 0 5
37447: ARRAY
37448: PUSH
37449: LD_INT 2
37451: ARRAY
37452: PPUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: PPUSH
37463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37467: LD_ADDR_EXP 108
37471: PUSH
37472: LD_EXP 108
37476: PPUSH
37477: LD_VAR 0 6
37481: PPUSH
37482: LD_EXP 108
37486: PUSH
37487: LD_VAR 0 6
37491: ARRAY
37492: PPUSH
37493: LD_VAR 0 5
37497: PPUSH
37498: CALL_OW 3
37502: PPUSH
37503: CALL_OW 1
37507: ST_TO_ADDR
// exit ;
37508: POP
37509: POP
37510: GO 37703
// end ; end ;
37512: GO 37350
37514: POP
37515: POP
// for i := minerMinesList [ index ] downto 1 do
37516: LD_ADDR_VAR 0 5
37520: PUSH
37521: DOUBLE
37522: LD_EXP 108
37526: PUSH
37527: LD_VAR 0 6
37531: ARRAY
37532: INC
37533: ST_TO_ADDR
37534: LD_INT 1
37536: PUSH
37537: FOR_DOWNTO
37538: IFFALSE 37701
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37540: LD_EXP 108
37544: PUSH
37545: LD_VAR 0 6
37549: ARRAY
37550: PUSH
37551: LD_VAR 0 5
37555: ARRAY
37556: PUSH
37557: LD_INT 1
37559: ARRAY
37560: PPUSH
37561: LD_EXP 108
37565: PUSH
37566: LD_VAR 0 6
37570: ARRAY
37571: PUSH
37572: LD_VAR 0 5
37576: ARRAY
37577: PUSH
37578: LD_INT 2
37580: ARRAY
37581: PPUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: CALL_OW 298
37596: PUSH
37597: LD_INT 6
37599: LESS
37600: IFFALSE 37699
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37602: LD_EXP 108
37606: PUSH
37607: LD_VAR 0 6
37611: ARRAY
37612: PUSH
37613: LD_VAR 0 5
37617: ARRAY
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: PPUSH
37623: LD_EXP 108
37627: PUSH
37628: LD_VAR 0 6
37632: ARRAY
37633: PUSH
37634: LD_VAR 0 5
37638: ARRAY
37639: PUSH
37640: LD_INT 2
37642: ARRAY
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 255
37653: PPUSH
37654: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37658: LD_ADDR_EXP 108
37662: PUSH
37663: LD_EXP 108
37667: PPUSH
37668: LD_VAR 0 6
37672: PPUSH
37673: LD_EXP 108
37677: PUSH
37678: LD_VAR 0 6
37682: ARRAY
37683: PPUSH
37684: LD_VAR 0 5
37688: PPUSH
37689: CALL_OW 3
37693: PPUSH
37694: CALL_OW 1
37698: ST_TO_ADDR
// end ; end ;
37699: GO 37537
37701: POP
37702: POP
// end ;
37703: LD_VAR 0 4
37707: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 264
37728: PUSH
37729: LD_INT 81
37731: EQUAL
37732: NOT
37733: IFTRUE 37748
37735: PUSH
37736: LD_VAR 0 1
37740: PUSH
37741: LD_EXP 107
37745: IN
37746: NOT
37747: OR
37748: IFFALSE 37752
// exit ;
37750: GO 38078
// index := GetElementIndex ( minersList , unit ) ;
37752: LD_ADDR_VAR 0 6
37756: PUSH
37757: LD_EXP 107
37761: PPUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: CALL 44254 0 2
37771: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37772: LD_ADDR_VAR 0 8
37776: PUSH
37777: LD_EXP 109
37781: PUSH
37782: LD_EXP 108
37786: PUSH
37787: LD_VAR 0 6
37791: ARRAY
37792: MINUS
37793: ST_TO_ADDR
// if not minesFreeAmount then
37794: LD_VAR 0 8
37798: NOT
37799: IFFALSE 37803
// exit ;
37801: GO 38078
// tmp := [ ] ;
37803: LD_ADDR_VAR 0 7
37807: PUSH
37808: EMPTY
37809: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37810: LD_ADDR_VAR 0 5
37814: PUSH
37815: DOUBLE
37816: LD_INT 1
37818: DEC
37819: ST_TO_ADDR
37820: LD_VAR 0 8
37824: PUSH
37825: FOR_TO
37826: IFFALSE 38025
// begin _d := rand ( 0 , 5 ) ;
37828: LD_ADDR_VAR 0 11
37832: PUSH
37833: LD_INT 0
37835: PPUSH
37836: LD_INT 5
37838: PPUSH
37839: CALL_OW 12
37843: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37844: LD_ADDR_VAR 0 12
37848: PUSH
37849: LD_INT 2
37851: PPUSH
37852: LD_INT 6
37854: PPUSH
37855: CALL_OW 12
37859: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37860: LD_ADDR_VAR 0 9
37864: PUSH
37865: LD_VAR 0 2
37869: PPUSH
37870: LD_VAR 0 11
37874: PPUSH
37875: LD_VAR 0 12
37879: PPUSH
37880: CALL_OW 272
37884: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37885: LD_ADDR_VAR 0 10
37889: PUSH
37890: LD_VAR 0 3
37894: PPUSH
37895: LD_VAR 0 11
37899: PPUSH
37900: LD_VAR 0 12
37904: PPUSH
37905: CALL_OW 273
37909: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37910: LD_VAR 0 9
37914: PPUSH
37915: LD_VAR 0 10
37919: PPUSH
37920: CALL_OW 488
37924: IFFALSE 37948
37926: PUSH
37927: LD_VAR 0 9
37931: PUSH
37932: LD_VAR 0 10
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_VAR 0 7
37945: IN
37946: NOT
37947: AND
37948: IFFALSE 37967
37950: PUSH
37951: LD_VAR 0 9
37955: PPUSH
37956: LD_VAR 0 10
37960: PPUSH
37961: CALL_OW 458
37965: NOT
37966: AND
37967: IFFALSE 38009
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37969: LD_ADDR_VAR 0 7
37973: PUSH
37974: LD_VAR 0 7
37978: PPUSH
37979: LD_VAR 0 7
37983: PUSH
37984: LD_INT 1
37986: PLUS
37987: PPUSH
37988: LD_VAR 0 9
37992: PUSH
37993: LD_VAR 0 10
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PPUSH
38002: CALL_OW 1
38006: ST_TO_ADDR
38007: GO 38023
// i := i - 1 ;
38009: LD_ADDR_VAR 0 5
38013: PUSH
38014: LD_VAR 0 5
38018: PUSH
38019: LD_INT 1
38021: MINUS
38022: ST_TO_ADDR
// end ;
38023: GO 37825
38025: POP
38026: POP
// for i in tmp do
38027: LD_ADDR_VAR 0 5
38031: PUSH
38032: LD_VAR 0 7
38036: PUSH
38037: FOR_IN
38038: IFFALSE 38076
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38040: LD_VAR 0 1
38044: PPUSH
38045: LD_VAR 0 5
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PPUSH
38054: LD_VAR 0 5
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: PPUSH
38063: CALL 37010 0 3
38067: NOT
38068: IFFALSE 38074
// exit ;
38070: POP
38071: POP
38072: GO 38078
38074: GO 38037
38076: POP
38077: POP
// end ;
38078: LD_VAR 0 4
38082: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
38083: LD_INT 0
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
// if GetClass ( unit ) <> class_sniper then
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 257
38103: PUSH
38104: LD_INT 5
38106: NONEQUAL
38107: IFFALSE 38111
// exit ;
38109: GO 38581
// dist := 8 ;
38111: LD_ADDR_VAR 0 5
38115: PUSH
38116: LD_INT 8
38118: ST_TO_ADDR
// viewRange := 12 ;
38119: LD_ADDR_VAR 0 8
38123: PUSH
38124: LD_INT 12
38126: ST_TO_ADDR
// side := GetSide ( unit ) ;
38127: LD_ADDR_VAR 0 6
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 255
38141: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38142: LD_INT 61
38144: PPUSH
38145: LD_VAR 0 6
38149: PPUSH
38150: CALL_OW 321
38154: PUSH
38155: LD_INT 2
38157: EQUAL
38158: IFFALSE 38168
// viewRange := 16 ;
38160: LD_ADDR_VAR 0 8
38164: PUSH
38165: LD_INT 16
38167: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_VAR 0 2
38177: PPUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL_OW 297
38187: PUSH
38188: LD_VAR 0 5
38192: GREATER
38193: IFFALSE 38272
// begin ComMoveXY ( unit , x , y ) ;
38195: LD_VAR 0 1
38199: PPUSH
38200: LD_VAR 0 2
38204: PPUSH
38205: LD_VAR 0 3
38209: PPUSH
38210: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38214: LD_INT 35
38216: PPUSH
38217: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38221: LD_VAR 0 1
38225: PPUSH
38226: LD_VAR 0 2
38230: PPUSH
38231: LD_VAR 0 3
38235: PPUSH
38236: CALL 76300 0 3
38240: NOT
38241: IFFALSE 38245
// exit ;
38243: GO 38581
// until GetDistUnitXY ( unit , x , y ) < dist ;
38245: LD_VAR 0 1
38249: PPUSH
38250: LD_VAR 0 2
38254: PPUSH
38255: LD_VAR 0 3
38259: PPUSH
38260: CALL_OW 297
38264: PUSH
38265: LD_VAR 0 5
38269: LESS
38270: IFFALSE 38214
// end ; ComTurnXY ( unit , x , y ) ;
38272: LD_VAR 0 1
38276: PPUSH
38277: LD_VAR 0 2
38281: PPUSH
38282: LD_VAR 0 3
38286: PPUSH
38287: CALL_OW 118
// repeat if Multiplayer then
38291: LD_OWVAR 4
38295: IFFALSE 38306
// wait ( 35 ) else
38297: LD_INT 35
38299: PPUSH
38300: CALL_OW 67
38304: GO 38313
// wait ( 5 ) ;
38306: LD_INT 5
38308: PPUSH
38309: CALL_OW 67
// _d := GetDir ( unit ) ;
38313: LD_ADDR_VAR 0 11
38317: PUSH
38318: LD_VAR 0 1
38322: PPUSH
38323: CALL_OW 254
38327: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
38328: LD_ADDR_VAR 0 7
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL_OW 250
38342: PPUSH
38343: LD_VAR 0 1
38347: PPUSH
38348: CALL_OW 251
38352: PPUSH
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_VAR 0 3
38362: PPUSH
38363: CALL 78936 0 4
38367: ST_TO_ADDR
// until dir = _d ;
38368: LD_VAR 0 7
38372: PUSH
38373: LD_VAR 0 11
38377: EQUAL
38378: IFFALSE 38291
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
38380: LD_ADDR_VAR 0 9
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL_OW 250
38394: PPUSH
38395: LD_VAR 0 7
38399: PPUSH
38400: LD_VAR 0 5
38404: PPUSH
38405: CALL_OW 272
38409: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
38410: LD_ADDR_VAR 0 10
38414: PUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 251
38424: PPUSH
38425: LD_VAR 0 7
38429: PPUSH
38430: LD_VAR 0 5
38434: PPUSH
38435: CALL_OW 273
38439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38440: LD_VAR 0 9
38444: PPUSH
38445: LD_VAR 0 10
38449: PPUSH
38450: CALL_OW 488
38454: NOT
38455: IFFALSE 38459
// exit ;
38457: GO 38581
// ComAnimCustom ( unit , 1 ) ;
38459: LD_VAR 0 1
38463: PPUSH
38464: LD_INT 1
38466: PPUSH
38467: CALL_OW 592
// p := 0 ;
38471: LD_ADDR_VAR 0 12
38475: PUSH
38476: LD_INT 0
38478: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38479: LD_VAR 0 9
38483: PPUSH
38484: LD_VAR 0 10
38488: PPUSH
38489: LD_VAR 0 6
38493: PPUSH
38494: LD_VAR 0 8
38498: PPUSH
38499: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
38503: LD_INT 35
38505: PPUSH
38506: CALL_OW 67
// p := Inc ( p ) ;
38510: LD_ADDR_VAR 0 12
38514: PUSH
38515: LD_VAR 0 12
38519: PPUSH
38520: CALL 78892 0 1
38524: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
38525: LD_VAR 0 12
38529: PUSH
38530: LD_INT 3
38532: EQUAL
38533: IFTRUE 38547
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 302
38545: NOT
38546: OR
38547: IFTRUE 38560
38549: PUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 301
38559: OR
38560: IFFALSE 38503
// RemoveSeeing ( _x , _y , side ) ;
38562: LD_VAR 0 9
38566: PPUSH
38567: LD_VAR 0 10
38571: PPUSH
38572: LD_VAR 0 6
38576: PPUSH
38577: CALL_OW 331
// end ;
38581: LD_VAR 0 4
38585: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
38586: LD_INT 0
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
// if not unit then
38599: LD_VAR 0 1
38603: NOT
38604: IFFALSE 38608
// exit ;
38606: GO 38879
// side := GetSide ( unit ) ;
38608: LD_ADDR_VAR 0 3
38612: PUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 255
38622: ST_TO_ADDR
// x := GetX ( unit ) ;
38623: LD_ADDR_VAR 0 5
38627: PUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 250
38637: ST_TO_ADDR
// y := GetY ( unit ) ;
38638: LD_ADDR_VAR 0 6
38642: PUSH
38643: LD_VAR 0 1
38647: PPUSH
38648: CALL_OW 251
38652: ST_TO_ADDR
// r := 8 ;
38653: LD_ADDR_VAR 0 4
38657: PUSH
38658: LD_INT 8
38660: ST_TO_ADDR
// if x - r < 0 then
38661: LD_VAR 0 5
38665: PUSH
38666: LD_VAR 0 4
38670: MINUS
38671: PUSH
38672: LD_INT 0
38674: LESS
38675: IFFALSE 38687
// min_x := 0 else
38677: LD_ADDR_VAR 0 7
38681: PUSH
38682: LD_INT 0
38684: ST_TO_ADDR
38685: GO 38703
// min_x := x - r ;
38687: LD_ADDR_VAR 0 7
38691: PUSH
38692: LD_VAR 0 5
38696: PUSH
38697: LD_VAR 0 4
38701: MINUS
38702: ST_TO_ADDR
// if y - r < 0 then
38703: LD_VAR 0 6
38707: PUSH
38708: LD_VAR 0 4
38712: MINUS
38713: PUSH
38714: LD_INT 0
38716: LESS
38717: IFFALSE 38729
// min_y := 0 else
38719: LD_ADDR_VAR 0 8
38723: PUSH
38724: LD_INT 0
38726: ST_TO_ADDR
38727: GO 38745
// min_y := y - r ;
38729: LD_ADDR_VAR 0 8
38733: PUSH
38734: LD_VAR 0 6
38738: PUSH
38739: LD_VAR 0 4
38743: MINUS
38744: ST_TO_ADDR
// max_x := x + r ;
38745: LD_ADDR_VAR 0 9
38749: PUSH
38750: LD_VAR 0 5
38754: PUSH
38755: LD_VAR 0 4
38759: PLUS
38760: ST_TO_ADDR
// max_y := y + r ;
38761: LD_ADDR_VAR 0 10
38765: PUSH
38766: LD_VAR 0 6
38770: PUSH
38771: LD_VAR 0 4
38775: PLUS
38776: ST_TO_ADDR
// for _x = min_x to max_x do
38777: LD_ADDR_VAR 0 11
38781: PUSH
38782: DOUBLE
38783: LD_VAR 0 7
38787: DEC
38788: ST_TO_ADDR
38789: LD_VAR 0 9
38793: PUSH
38794: FOR_TO
38795: IFFALSE 38877
// for _y = min_y to max_y do
38797: LD_ADDR_VAR 0 12
38801: PUSH
38802: DOUBLE
38803: LD_VAR 0 8
38807: DEC
38808: ST_TO_ADDR
38809: LD_VAR 0 10
38813: PUSH
38814: FOR_TO
38815: IFFALSE 38873
// begin if not ValidHex ( _x , _y ) then
38817: LD_VAR 0 11
38821: PPUSH
38822: LD_VAR 0 12
38826: PPUSH
38827: CALL_OW 488
38831: NOT
38832: IFFALSE 38836
// continue ;
38834: GO 38814
// if MineAtPos ( _x , _y ) then
38836: LD_VAR 0 11
38840: PPUSH
38841: LD_VAR 0 12
38845: PPUSH
38846: CALL_OW 458
38850: IFFALSE 38871
// ViewMineAtPos ( _x , _y , side ) ;
38852: LD_VAR 0 11
38856: PPUSH
38857: LD_VAR 0 12
38861: PPUSH
38862: LD_VAR 0 3
38866: PPUSH
38867: CALL_OW 457
// end ;
38871: GO 38814
38873: POP
38874: POP
38875: GO 38794
38877: POP
38878: POP
// end ;
38879: LD_VAR 0 2
38883: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
38884: LD_INT 0
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
// if not units then
38892: LD_VAR 0 1
38896: NOT
38897: IFFALSE 38901
// exit ;
38899: GO 39331
// scaners := [ ] ;
38901: LD_ADDR_VAR 0 6
38905: PUSH
38906: EMPTY
38907: ST_TO_ADDR
// for i in units do
38908: LD_ADDR_VAR 0 3
38912: PUSH
38913: LD_VAR 0 1
38917: PUSH
38918: FOR_IN
38919: IFFALSE 39076
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
38921: LD_VAR 0 3
38925: PPUSH
38926: CALL_OW 264
38930: PUSH
38931: LD_INT 11
38933: NONEQUAL
38934: IFTRUE 38948
38936: PUSH
38937: LD_VAR 0 3
38941: PPUSH
38942: CALL_OW 302
38946: NOT
38947: OR
38948: IFTRUE 38965
38950: PUSH
38951: LD_VAR 0 3
38955: PPUSH
38956: CALL_OW 110
38960: PUSH
38961: LD_INT 502
38963: EQUAL
38964: OR
38965: IFFALSE 38969
// continue ;
38967: GO 38918
// ComStop ( i ) ;
38969: LD_VAR 0 3
38973: PPUSH
38974: CALL_OW 141
// x := GetX ( i ) ;
38978: LD_ADDR_VAR 0 4
38982: PUSH
38983: LD_VAR 0 3
38987: PPUSH
38988: CALL_OW 250
38992: ST_TO_ADDR
// y := GetY ( i ) ;
38993: LD_ADDR_VAR 0 5
38997: PUSH
38998: LD_VAR 0 3
39002: PPUSH
39003: CALL_OW 251
39007: ST_TO_ADDR
// if GetSide ( i ) = your_side then
39008: LD_VAR 0 3
39012: PPUSH
39013: CALL_OW 255
39017: PUSH
39018: LD_OWVAR 2
39022: EQUAL
39023: IFFALSE 39042
// PlaySoundXY ( x , y , mineDetector ) ;
39025: LD_VAR 0 4
39029: PPUSH
39030: LD_VAR 0 5
39034: PPUSH
39035: LD_STRING mineDetector
39037: PPUSH
39038: CALL_OW 366
// scaners := Join ( scaners , i ) ;
39042: LD_ADDR_VAR 0 6
39046: PUSH
39047: LD_VAR 0 6
39051: PPUSH
39052: LD_VAR 0 3
39056: PPUSH
39057: CALL 77519 0 2
39061: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
39062: LD_VAR 0 3
39066: PPUSH
39067: LD_INT 502
39069: PPUSH
39070: CALL_OW 109
// end ;
39074: GO 38918
39076: POP
39077: POP
// if not scaners then
39078: LD_VAR 0 6
39082: NOT
39083: IFFALSE 39087
// exit ;
39085: GO 39331
// wait ( 3 ) ;
39087: LD_INT 3
39089: PPUSH
39090: CALL_OW 67
// timer := 6 ;
39094: LD_ADDR_VAR 0 7
39098: PUSH
39099: LD_INT 6
39101: ST_TO_ADDR
// repeat for i in scaners do
39102: LD_ADDR_VAR 0 3
39106: PUSH
39107: LD_VAR 0 6
39111: PUSH
39112: FOR_IN
39113: IFFALSE 39229
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
39115: LD_VAR 0 3
39119: PPUSH
39120: CALL_OW 302
39124: NOT
39125: IFTRUE 39138
39127: PUSH
39128: LD_VAR 0 3
39132: PPUSH
39133: CALL_OW 314
39137: OR
39138: IFTRUE 39169
39140: PUSH
39141: LD_VAR 0 3
39145: PPUSH
39146: CALL_OW 263
39150: PUSH
39151: LD_INT 1
39153: EQUAL
39154: IFFALSE 39168
39156: PUSH
39157: LD_VAR 0 3
39161: PPUSH
39162: CALL_OW 311
39166: NOT
39167: AND
39168: OR
39169: IFFALSE 39213
// begin SetUnitDisplayNumber ( i , 0 ) ;
39171: LD_VAR 0 3
39175: PPUSH
39176: LD_INT 0
39178: PPUSH
39179: CALL_OW 505
// SetTag ( i , 0 ) ;
39183: LD_VAR 0 3
39187: PPUSH
39188: LD_INT 0
39190: PPUSH
39191: CALL_OW 109
// scaners := scaners diff i ;
39195: LD_ADDR_VAR 0 6
39199: PUSH
39200: LD_VAR 0 6
39204: PUSH
39205: LD_VAR 0 3
39209: DIFF
39210: ST_TO_ADDR
// continue ;
39211: GO 39112
// end ; SetUnitDisplayNumber ( i , timer ) ;
39213: LD_VAR 0 3
39217: PPUSH
39218: LD_VAR 0 7
39222: PPUSH
39223: CALL_OW 505
// end ;
39227: GO 39112
39229: POP
39230: POP
// if not scaners then
39231: LD_VAR 0 6
39235: NOT
39236: IFFALSE 39240
// exit ;
39238: GO 39331
// timer := Dec ( timer ) ;
39240: LD_ADDR_VAR 0 7
39244: PUSH
39245: LD_VAR 0 7
39249: PPUSH
39250: CALL 78914 0 1
39254: ST_TO_ADDR
// wait ( 0 0$1 ) ;
39255: LD_INT 35
39257: PPUSH
39258: CALL_OW 67
// until timer = 0 ;
39262: LD_VAR 0 7
39266: PUSH
39267: LD_INT 0
39269: EQUAL
39270: IFFALSE 39102
// if not scaners then
39272: LD_VAR 0 6
39276: NOT
39277: IFFALSE 39281
// exit ;
39279: GO 39331
// for i in scaners do
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 6
39290: PUSH
39291: FOR_IN
39292: IFFALSE 39329
// begin SetUnitDisplayNumber ( i , 0 ) ;
39294: LD_VAR 0 3
39298: PPUSH
39299: LD_INT 0
39301: PPUSH
39302: CALL_OW 505
// SetTag ( i , 0 ) ;
39306: LD_VAR 0 3
39310: PPUSH
39311: LD_INT 0
39313: PPUSH
39314: CALL_OW 109
// RevealDetectorMine ( i ) ;
39318: LD_VAR 0 3
39322: PPUSH
39323: CALL 38586 0 1
// end ;
39327: GO 39291
39329: POP
39330: POP
// end ;
39331: LD_VAR 0 2
39335: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
39336: LD_INT 0
39338: PPUSH
// if p1 = mine_detector_mode then
39339: LD_VAR 0 2
39343: PUSH
39344: LD_INT 103
39346: EQUAL
39347: IFFALSE 39358
// DetectMine ( units ) ;
39349: LD_VAR 0 1
39353: PPUSH
39354: CALL 38884 0 1
// end ; end_of_file
39358: LD_VAR 0 7
39362: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39363: LD_INT 0
39365: PPUSH
39366: PPUSH
// if exist_mode then
39367: LD_VAR 0 2
39371: IFFALSE 39417
// begin unit := CreateCharacter ( prefix & ident ) ;
39373: LD_ADDR_VAR 0 5
39377: PUSH
39378: LD_VAR 0 3
39382: PUSH
39383: LD_VAR 0 1
39387: STR
39388: PPUSH
39389: CALL_OW 34
39393: ST_TO_ADDR
// if unit then
39394: LD_VAR 0 5
39398: IFFALSE 39415
// DeleteCharacters ( prefix & ident ) ;
39400: LD_VAR 0 3
39404: PUSH
39405: LD_VAR 0 1
39409: STR
39410: PPUSH
39411: CALL_OW 40
// end else
39415: GO 39432
// unit := NewCharacter ( ident ) ;
39417: LD_ADDR_VAR 0 5
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 25
39431: ST_TO_ADDR
// result := unit ;
39432: LD_ADDR_VAR 0 4
39436: PUSH
39437: LD_VAR 0 5
39441: ST_TO_ADDR
// end ;
39442: LD_VAR 0 4
39446: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
39447: LD_INT 0
39449: PPUSH
39450: PPUSH
// if exist_mode then
39451: LD_VAR 0 2
39455: IFFALSE 39480
// unit := CreateCharacter ( prefix & ident ) else
39457: LD_ADDR_VAR 0 5
39461: PUSH
39462: LD_VAR 0 3
39466: PUSH
39467: LD_VAR 0 1
39471: STR
39472: PPUSH
39473: CALL_OW 34
39477: ST_TO_ADDR
39478: GO 39495
// unit := NewCharacter ( ident ) ;
39480: LD_ADDR_VAR 0 5
39484: PUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 25
39494: ST_TO_ADDR
// result := unit ;
39495: LD_ADDR_VAR 0 4
39499: PUSH
39500: LD_VAR 0 5
39504: ST_TO_ADDR
// end ;
39505: LD_VAR 0 4
39509: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39510: LD_INT 0
39512: PPUSH
39513: PPUSH
// if not side or not nation then
39514: LD_VAR 0 1
39518: NOT
39519: IFTRUE 39528
39521: PUSH
39522: LD_VAR 0 2
39526: NOT
39527: OR
39528: IFFALSE 39532
// exit ;
39530: GO 40326
// case nation of nation_american :
39532: LD_VAR 0 2
39536: PUSH
39537: LD_INT 1
39539: DOUBLE
39540: EQUAL
39541: IFTRUE 39545
39543: GO 39767
39545: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_INT 35
39553: PUSH
39554: LD_INT 45
39556: PUSH
39557: LD_INT 46
39559: PUSH
39560: LD_INT 47
39562: PUSH
39563: LD_INT 82
39565: PUSH
39566: LD_INT 83
39568: PUSH
39569: LD_INT 84
39571: PUSH
39572: LD_INT 85
39574: PUSH
39575: LD_INT 86
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 6
39586: PUSH
39587: LD_INT 15
39589: PUSH
39590: LD_INT 16
39592: PUSH
39593: LD_INT 7
39595: PUSH
39596: LD_INT 12
39598: PUSH
39599: LD_INT 13
39601: PUSH
39602: LD_INT 10
39604: PUSH
39605: LD_INT 14
39607: PUSH
39608: LD_INT 20
39610: PUSH
39611: LD_INT 21
39613: PUSH
39614: LD_INT 22
39616: PUSH
39617: LD_INT 25
39619: PUSH
39620: LD_INT 32
39622: PUSH
39623: LD_INT 27
39625: PUSH
39626: LD_INT 36
39628: PUSH
39629: LD_INT 69
39631: PUSH
39632: LD_INT 39
39634: PUSH
39635: LD_INT 34
39637: PUSH
39638: LD_INT 40
39640: PUSH
39641: LD_INT 48
39643: PUSH
39644: LD_INT 49
39646: PUSH
39647: LD_INT 50
39649: PUSH
39650: LD_INT 51
39652: PUSH
39653: LD_INT 52
39655: PUSH
39656: LD_INT 53
39658: PUSH
39659: LD_INT 54
39661: PUSH
39662: LD_INT 55
39664: PUSH
39665: LD_INT 56
39667: PUSH
39668: LD_INT 57
39670: PUSH
39671: LD_INT 58
39673: PUSH
39674: LD_INT 59
39676: PUSH
39677: LD_INT 60
39679: PUSH
39680: LD_INT 61
39682: PUSH
39683: LD_INT 62
39685: PUSH
39686: LD_INT 80
39688: PUSH
39689: LD_INT 82
39691: PUSH
39692: LD_INT 83
39694: PUSH
39695: LD_INT 84
39697: PUSH
39698: LD_INT 85
39700: PUSH
39701: LD_INT 86
39703: PUSH
39704: LD_INT 90
39706: PUSH
39707: LD_INT 93
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
39765: GO 40248
39767: LD_INT 2
39769: DOUBLE
39770: EQUAL
39771: IFTRUE 39775
39773: GO 40009
39775: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
39776: LD_ADDR_VAR 0 4
39780: PUSH
39781: LD_INT 35
39783: PUSH
39784: LD_INT 45
39786: PUSH
39787: LD_INT 46
39789: PUSH
39790: LD_INT 47
39792: PUSH
39793: LD_INT 82
39795: PUSH
39796: LD_INT 83
39798: PUSH
39799: LD_INT 84
39801: PUSH
39802: LD_INT 85
39804: PUSH
39805: LD_INT 87
39807: PUSH
39808: LD_INT 70
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 11
39816: PUSH
39817: LD_INT 3
39819: PUSH
39820: LD_INT 4
39822: PUSH
39823: LD_INT 5
39825: PUSH
39826: LD_INT 6
39828: PUSH
39829: LD_INT 15
39831: PUSH
39832: LD_INT 18
39834: PUSH
39835: LD_INT 7
39837: PUSH
39838: LD_INT 17
39840: PUSH
39841: LD_INT 8
39843: PUSH
39844: LD_INT 20
39846: PUSH
39847: LD_INT 21
39849: PUSH
39850: LD_INT 22
39852: PUSH
39853: LD_INT 72
39855: PUSH
39856: LD_INT 26
39858: PUSH
39859: LD_INT 69
39861: PUSH
39862: LD_INT 39
39864: PUSH
39865: LD_INT 40
39867: PUSH
39868: LD_INT 41
39870: PUSH
39871: LD_INT 42
39873: PUSH
39874: LD_INT 43
39876: PUSH
39877: LD_INT 48
39879: PUSH
39880: LD_INT 49
39882: PUSH
39883: LD_INT 50
39885: PUSH
39886: LD_INT 51
39888: PUSH
39889: LD_INT 52
39891: PUSH
39892: LD_INT 53
39894: PUSH
39895: LD_INT 54
39897: PUSH
39898: LD_INT 55
39900: PUSH
39901: LD_INT 56
39903: PUSH
39904: LD_INT 60
39906: PUSH
39907: LD_INT 61
39909: PUSH
39910: LD_INT 62
39912: PUSH
39913: LD_INT 66
39915: PUSH
39916: LD_INT 67
39918: PUSH
39919: LD_INT 68
39921: PUSH
39922: LD_INT 81
39924: PUSH
39925: LD_INT 82
39927: PUSH
39928: LD_INT 83
39930: PUSH
39931: LD_INT 84
39933: PUSH
39934: LD_INT 85
39936: PUSH
39937: LD_INT 87
39939: PUSH
39940: LD_INT 88
39942: PUSH
39943: LD_INT 92
39945: PUSH
39946: LD_INT 94
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: ST_TO_ADDR
40007: GO 40248
40009: LD_INT 3
40011: DOUBLE
40012: EQUAL
40013: IFTRUE 40017
40015: GO 40247
40017: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
40018: LD_ADDR_VAR 0 4
40022: PUSH
40023: LD_INT 46
40025: PUSH
40026: LD_INT 47
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 82
40037: PUSH
40038: LD_INT 83
40040: PUSH
40041: LD_INT 84
40043: PUSH
40044: LD_INT 85
40046: PUSH
40047: LD_INT 86
40049: PUSH
40050: LD_INT 11
40052: PUSH
40053: LD_INT 9
40055: PUSH
40056: LD_INT 20
40058: PUSH
40059: LD_INT 19
40061: PUSH
40062: LD_INT 21
40064: PUSH
40065: LD_INT 24
40067: PUSH
40068: LD_INT 22
40070: PUSH
40071: LD_INT 25
40073: PUSH
40074: LD_INT 28
40076: PUSH
40077: LD_INT 29
40079: PUSH
40080: LD_INT 30
40082: PUSH
40083: LD_INT 31
40085: PUSH
40086: LD_INT 37
40088: PUSH
40089: LD_INT 38
40091: PUSH
40092: LD_INT 32
40094: PUSH
40095: LD_INT 27
40097: PUSH
40098: LD_INT 33
40100: PUSH
40101: LD_INT 69
40103: PUSH
40104: LD_INT 39
40106: PUSH
40107: LD_INT 34
40109: PUSH
40110: LD_INT 40
40112: PUSH
40113: LD_INT 71
40115: PUSH
40116: LD_INT 23
40118: PUSH
40119: LD_INT 44
40121: PUSH
40122: LD_INT 48
40124: PUSH
40125: LD_INT 49
40127: PUSH
40128: LD_INT 50
40130: PUSH
40131: LD_INT 51
40133: PUSH
40134: LD_INT 52
40136: PUSH
40137: LD_INT 53
40139: PUSH
40140: LD_INT 54
40142: PUSH
40143: LD_INT 55
40145: PUSH
40146: LD_INT 56
40148: PUSH
40149: LD_INT 57
40151: PUSH
40152: LD_INT 58
40154: PUSH
40155: LD_INT 59
40157: PUSH
40158: LD_INT 63
40160: PUSH
40161: LD_INT 64
40163: PUSH
40164: LD_INT 65
40166: PUSH
40167: LD_INT 82
40169: PUSH
40170: LD_INT 83
40172: PUSH
40173: LD_INT 84
40175: PUSH
40176: LD_INT 85
40178: PUSH
40179: LD_INT 86
40181: PUSH
40182: LD_INT 89
40184: PUSH
40185: LD_INT 91
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
40245: GO 40248
40247: POP
// if state > - 1 and state < 3 then
40248: LD_VAR 0 3
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: GREATER
40257: IFFALSE 40269
40259: PUSH
40260: LD_VAR 0 3
40264: PUSH
40265: LD_INT 3
40267: LESS
40268: AND
40269: IFFALSE 40326
// for i in result do
40271: LD_ADDR_VAR 0 5
40275: PUSH
40276: LD_VAR 0 4
40280: PUSH
40281: FOR_IN
40282: IFFALSE 40324
// if GetTech ( i , side ) <> state then
40284: LD_VAR 0 5
40288: PPUSH
40289: LD_VAR 0 1
40293: PPUSH
40294: CALL_OW 321
40298: PUSH
40299: LD_VAR 0 3
40303: NONEQUAL
40304: IFFALSE 40322
// result := result diff i ;
40306: LD_ADDR_VAR 0 4
40310: PUSH
40311: LD_VAR 0 4
40315: PUSH
40316: LD_VAR 0 5
40320: DIFF
40321: ST_TO_ADDR
40322: GO 40281
40324: POP
40325: POP
// end ;
40326: LD_VAR 0 4
40330: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40331: LD_INT 0
40333: PPUSH
40334: PPUSH
40335: PPUSH
// result := true ;
40336: LD_ADDR_VAR 0 3
40340: PUSH
40341: LD_INT 1
40343: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 2
40353: PPUSH
40354: CALL_OW 480
40358: ST_TO_ADDR
// if not tmp then
40359: LD_VAR 0 5
40363: NOT
40364: IFFALSE 40368
// exit ;
40366: GO 40417
// for i in tmp do
40368: LD_ADDR_VAR 0 4
40372: PUSH
40373: LD_VAR 0 5
40377: PUSH
40378: FOR_IN
40379: IFFALSE 40415
// if GetTech ( i , side ) <> state_researched then
40381: LD_VAR 0 4
40385: PPUSH
40386: LD_VAR 0 1
40390: PPUSH
40391: CALL_OW 321
40395: PUSH
40396: LD_INT 2
40398: NONEQUAL
40399: IFFALSE 40413
// begin result := false ;
40401: LD_ADDR_VAR 0 3
40405: PUSH
40406: LD_INT 0
40408: ST_TO_ADDR
// exit ;
40409: POP
40410: POP
40411: GO 40417
// end ;
40413: GO 40378
40415: POP
40416: POP
// end ;
40417: LD_VAR 0 3
40421: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40437: LD_VAR 0 1
40441: NOT
40442: IFTRUE 40459
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: CALL_OW 257
40454: PUSH
40455: LD_INT 9
40457: NONEQUAL
40458: OR
40459: IFFALSE 40463
// exit ;
40461: GO 41042
// side := GetSide ( unit ) ;
40463: LD_ADDR_VAR 0 9
40467: PUSH
40468: LD_VAR 0 1
40472: PPUSH
40473: CALL_OW 255
40477: ST_TO_ADDR
// tech_space := tech_spacanom ;
40478: LD_ADDR_VAR 0 12
40482: PUSH
40483: LD_INT 29
40485: ST_TO_ADDR
// tech_time := tech_taurad ;
40486: LD_ADDR_VAR 0 13
40490: PUSH
40491: LD_INT 28
40493: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40494: LD_ADDR_VAR 0 11
40498: PUSH
40499: LD_VAR 0 1
40503: PPUSH
40504: CALL_OW 310
40508: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40509: LD_VAR 0 11
40513: PPUSH
40514: CALL_OW 247
40518: PUSH
40519: LD_INT 2
40521: EQUAL
40522: IFFALSE 40526
// exit ;
40524: GO 41042
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40526: LD_ADDR_VAR 0 8
40530: PUSH
40531: LD_INT 81
40533: PUSH
40534: LD_VAR 0 9
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: LD_INT 21
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PPUSH
40564: CALL_OW 69
40568: ST_TO_ADDR
// if not tmp then
40569: LD_VAR 0 8
40573: NOT
40574: IFFALSE 40578
// exit ;
40576: GO 41042
// if in_unit then
40578: LD_VAR 0 11
40582: IFFALSE 40606
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40584: LD_ADDR_VAR 0 10
40588: PUSH
40589: LD_VAR 0 8
40593: PPUSH
40594: LD_VAR 0 11
40598: PPUSH
40599: CALL_OW 74
40603: ST_TO_ADDR
40604: GO 40626
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40606: LD_ADDR_VAR 0 10
40610: PUSH
40611: LD_VAR 0 8
40615: PPUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 74
40625: ST_TO_ADDR
// if not enemy then
40626: LD_VAR 0 10
40630: NOT
40631: IFFALSE 40635
// exit ;
40633: GO 41042
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40635: LD_VAR 0 11
40639: IFFALSE 40661
40641: PUSH
40642: LD_VAR 0 11
40646: PPUSH
40647: LD_VAR 0 10
40651: PPUSH
40652: CALL_OW 296
40656: PUSH
40657: LD_INT 13
40659: GREATER
40660: AND
40661: IFTRUE 40683
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: LD_VAR 0 10
40673: PPUSH
40674: CALL_OW 296
40678: PUSH
40679: LD_INT 12
40681: GREATER
40682: OR
40683: IFFALSE 40687
// exit ;
40685: GO 41042
// missile := [ 1 ] ;
40687: LD_ADDR_VAR 0 14
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40698: LD_VAR 0 9
40702: PPUSH
40703: LD_VAR 0 12
40707: PPUSH
40708: CALL_OW 325
40712: IFFALSE 40741
// missile := Replace ( missile , missile + 1 , 2 ) ;
40714: LD_ADDR_VAR 0 14
40718: PUSH
40719: LD_VAR 0 14
40723: PPUSH
40724: LD_VAR 0 14
40728: PUSH
40729: LD_INT 1
40731: PLUS
40732: PPUSH
40733: LD_INT 2
40735: PPUSH
40736: CALL_OW 1
40740: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40741: LD_VAR 0 9
40745: PPUSH
40746: LD_VAR 0 13
40750: PPUSH
40751: CALL_OW 325
40755: IFFALSE 40779
40757: PUSH
40758: LD_VAR 0 10
40762: PPUSH
40763: CALL_OW 255
40767: PPUSH
40768: LD_VAR 0 13
40772: PPUSH
40773: CALL_OW 325
40777: NOT
40778: AND
40779: IFFALSE 40808
// missile := Replace ( missile , missile + 1 , 3 ) ;
40781: LD_ADDR_VAR 0 14
40785: PUSH
40786: LD_VAR 0 14
40790: PPUSH
40791: LD_VAR 0 14
40795: PUSH
40796: LD_INT 1
40798: PLUS
40799: PPUSH
40800: LD_INT 3
40802: PPUSH
40803: CALL_OW 1
40807: ST_TO_ADDR
// if missile < 2 then
40808: LD_VAR 0 14
40812: PUSH
40813: LD_INT 2
40815: LESS
40816: IFFALSE 40820
// exit ;
40818: GO 41042
// x := GetX ( enemy ) ;
40820: LD_ADDR_VAR 0 4
40824: PUSH
40825: LD_VAR 0 10
40829: PPUSH
40830: CALL_OW 250
40834: ST_TO_ADDR
// y := GetY ( enemy ) ;
40835: LD_ADDR_VAR 0 5
40839: PUSH
40840: LD_VAR 0 10
40844: PPUSH
40845: CALL_OW 251
40849: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40850: LD_ADDR_VAR 0 6
40854: PUSH
40855: LD_VAR 0 4
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PPUSH
40864: LD_INT 1
40866: PPUSH
40867: CALL_OW 12
40871: PLUS
40872: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40873: LD_ADDR_VAR 0 7
40877: PUSH
40878: LD_VAR 0 5
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PPUSH
40887: LD_INT 1
40889: PPUSH
40890: CALL_OW 12
40894: PLUS
40895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40896: LD_VAR 0 6
40900: PPUSH
40901: LD_VAR 0 7
40905: PPUSH
40906: CALL_OW 488
40910: NOT
40911: IFFALSE 40933
// begin _x := x ;
40913: LD_ADDR_VAR 0 6
40917: PUSH
40918: LD_VAR 0 4
40922: ST_TO_ADDR
// _y := y ;
40923: LD_ADDR_VAR 0 7
40927: PUSH
40928: LD_VAR 0 5
40932: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_INT 1
40940: PPUSH
40941: LD_VAR 0 14
40945: PPUSH
40946: CALL_OW 12
40950: ST_TO_ADDR
// case i of 1 :
40951: LD_VAR 0 3
40955: PUSH
40956: LD_INT 1
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40964
40962: GO 40981
40964: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 10
40974: PPUSH
40975: CALL_OW 115
40979: GO 41042
40981: LD_INT 2
40983: DOUBLE
40984: EQUAL
40985: IFTRUE 40989
40987: GO 41011
40989: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40990: LD_VAR 0 1
40994: PPUSH
40995: LD_VAR 0 6
40999: PPUSH
41000: LD_VAR 0 7
41004: PPUSH
41005: CALL_OW 153
41009: GO 41042
41011: LD_INT 3
41013: DOUBLE
41014: EQUAL
41015: IFTRUE 41019
41017: GO 41041
41019: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41020: LD_VAR 0 1
41024: PPUSH
41025: LD_VAR 0 6
41029: PPUSH
41030: LD_VAR 0 7
41034: PPUSH
41035: CALL_OW 154
41039: GO 41042
41041: POP
// end ;
41042: LD_VAR 0 2
41046: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41047: LD_INT 0
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
// if not unit or not building then
41055: LD_VAR 0 1
41059: NOT
41060: IFTRUE 41069
41062: PUSH
41063: LD_VAR 0 2
41067: NOT
41068: OR
41069: IFFALSE 41073
// exit ;
41071: GO 41231
// x := GetX ( building ) ;
41073: LD_ADDR_VAR 0 5
41077: PUSH
41078: LD_VAR 0 2
41082: PPUSH
41083: CALL_OW 250
41087: ST_TO_ADDR
// y := GetY ( building ) ;
41088: LD_ADDR_VAR 0 6
41092: PUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: CALL_OW 251
41102: ST_TO_ADDR
// for i := 0 to 5 do
41103: LD_ADDR_VAR 0 4
41107: PUSH
41108: DOUBLE
41109: LD_INT 0
41111: DEC
41112: ST_TO_ADDR
41113: LD_INT 5
41115: PUSH
41116: FOR_TO
41117: IFFALSE 41229
// begin _x := ShiftX ( x , i , 3 ) ;
41119: LD_ADDR_VAR 0 7
41123: PUSH
41124: LD_VAR 0 5
41128: PPUSH
41129: LD_VAR 0 4
41133: PPUSH
41134: LD_INT 3
41136: PPUSH
41137: CALL_OW 272
41141: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41142: LD_ADDR_VAR 0 8
41146: PUSH
41147: LD_VAR 0 6
41151: PPUSH
41152: LD_VAR 0 4
41156: PPUSH
41157: LD_INT 3
41159: PPUSH
41160: CALL_OW 273
41164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41165: LD_VAR 0 7
41169: PPUSH
41170: LD_VAR 0 8
41174: PPUSH
41175: CALL_OW 488
41179: NOT
41180: IFFALSE 41184
// continue ;
41182: GO 41116
// if HexInfo ( _x , _y ) = 0 then
41184: LD_VAR 0 7
41188: PPUSH
41189: LD_VAR 0 8
41193: PPUSH
41194: CALL_OW 428
41198: PUSH
41199: LD_INT 0
41201: EQUAL
41202: IFFALSE 41227
// begin ComMoveXY ( unit , _x , _y ) ;
41204: LD_VAR 0 1
41208: PPUSH
41209: LD_VAR 0 7
41213: PPUSH
41214: LD_VAR 0 8
41218: PPUSH
41219: CALL_OW 111
// exit ;
41223: POP
41224: POP
41225: GO 41231
// end ; end ;
41227: GO 41116
41229: POP
41230: POP
// end ;
41231: LD_VAR 0 3
41235: RET
// export function ScanBase ( side , base_area ) ; begin
41236: LD_INT 0
41238: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_VAR 0 2
41248: PPUSH
41249: LD_INT 81
41251: PUSH
41252: LD_VAR 0 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PPUSH
41261: CALL_OW 70
41265: ST_TO_ADDR
// end ;
41266: LD_VAR 0 3
41270: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41271: LD_INT 0
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
// result := false ;
41277: LD_ADDR_VAR 0 2
41281: PUSH
41282: LD_INT 0
41284: ST_TO_ADDR
// side := GetSide ( unit ) ;
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_VAR 0 1
41294: PPUSH
41295: CALL_OW 255
41299: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41300: LD_ADDR_VAR 0 4
41304: PUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL_OW 248
41314: ST_TO_ADDR
// case nat of 1 :
41315: LD_VAR 0 4
41319: PUSH
41320: LD_INT 1
41322: DOUBLE
41323: EQUAL
41324: IFTRUE 41328
41326: GO 41339
41328: POP
// tech := tech_lassight ; 2 :
41329: LD_ADDR_VAR 0 5
41333: PUSH
41334: LD_INT 12
41336: ST_TO_ADDR
41337: GO 41378
41339: LD_INT 2
41341: DOUBLE
41342: EQUAL
41343: IFTRUE 41347
41345: GO 41358
41347: POP
// tech := tech_mortar ; 3 :
41348: LD_ADDR_VAR 0 5
41352: PUSH
41353: LD_INT 41
41355: ST_TO_ADDR
41356: GO 41378
41358: LD_INT 3
41360: DOUBLE
41361: EQUAL
41362: IFTRUE 41366
41364: GO 41377
41366: POP
// tech := tech_bazooka ; end ;
41367: LD_ADDR_VAR 0 5
41371: PUSH
41372: LD_INT 44
41374: ST_TO_ADDR
41375: GO 41378
41377: POP
// if Researched ( side , tech ) then
41378: LD_VAR 0 3
41382: PPUSH
41383: LD_VAR 0 5
41387: PPUSH
41388: CALL_OW 325
41392: IFFALSE 41419
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41394: LD_ADDR_VAR 0 2
41398: PUSH
41399: LD_INT 5
41401: PUSH
41402: LD_INT 8
41404: PUSH
41405: LD_INT 9
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: PUSH
41413: LD_VAR 0 4
41417: ARRAY
41418: ST_TO_ADDR
// end ;
41419: LD_VAR 0 2
41423: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41424: LD_INT 0
41426: PPUSH
41427: PPUSH
41428: PPUSH
// if not mines then
41429: LD_VAR 0 2
41433: NOT
41434: IFFALSE 41438
// exit ;
41436: GO 41582
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41438: LD_ADDR_VAR 0 5
41442: PUSH
41443: LD_INT 81
41445: PUSH
41446: LD_VAR 0 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 3
41457: PUSH
41458: LD_INT 21
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PPUSH
41476: CALL_OW 69
41480: ST_TO_ADDR
// for i in mines do
41481: LD_ADDR_VAR 0 4
41485: PUSH
41486: LD_VAR 0 2
41490: PUSH
41491: FOR_IN
41492: IFFALSE 41580
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41494: LD_VAR 0 4
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: PPUSH
41503: LD_VAR 0 4
41507: PUSH
41508: LD_INT 2
41510: ARRAY
41511: PPUSH
41512: CALL_OW 458
41516: NOT
41517: IFFALSE 41521
// continue ;
41519: GO 41491
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41521: LD_VAR 0 4
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PPUSH
41530: LD_VAR 0 4
41534: PUSH
41535: LD_INT 2
41537: ARRAY
41538: PPUSH
41539: CALL_OW 428
41543: PUSH
41544: LD_VAR 0 5
41548: IN
41549: IFFALSE 41578
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41551: LD_VAR 0 4
41555: PUSH
41556: LD_INT 1
41558: ARRAY
41559: PPUSH
41560: LD_VAR 0 4
41564: PUSH
41565: LD_INT 2
41567: ARRAY
41568: PPUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 456
// end ;
41578: GO 41491
41580: POP
41581: POP
// end ;
41582: LD_VAR 0 3
41586: RET
// export function Count ( array ) ; begin
41587: LD_INT 0
41589: PPUSH
// result := array + 0 ;
41590: LD_ADDR_VAR 0 2
41594: PUSH
41595: LD_VAR 0 1
41599: PUSH
41600: LD_INT 0
41602: PLUS
41603: ST_TO_ADDR
// end ;
41604: LD_VAR 0 2
41608: RET
// export function IsEmpty ( building ) ; begin
41609: LD_INT 0
41611: PPUSH
// if not building then
41612: LD_VAR 0 1
41616: NOT
41617: IFFALSE 41621
// exit ;
41619: GO 41664
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41621: LD_ADDR_VAR 0 2
41625: PUSH
41626: LD_VAR 0 1
41630: PUSH
41631: LD_INT 22
41633: PUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 255
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 58
41650: PUSH
41651: EMPTY
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PPUSH
41658: CALL_OW 69
41662: IN
41663: ST_TO_ADDR
// end ;
41664: LD_VAR 0 2
41668: RET
// export function IsNotFull ( building ) ; var places ; begin
41669: LD_INT 0
41671: PPUSH
41672: PPUSH
// if not building then
41673: LD_VAR 0 1
41677: NOT
41678: IFFALSE 41682
// exit ;
41680: GO 41710
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41682: LD_ADDR_VAR 0 2
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: LD_INT 3
41694: PUSH
41695: LD_INT 62
41697: PUSH
41698: EMPTY
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PPUSH
41705: CALL_OW 72
41709: ST_TO_ADDR
// end ;
41710: LD_VAR 0 2
41714: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41715: LD_INT 0
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
// tmp := [ ] ;
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: EMPTY
41727: ST_TO_ADDR
// list := [ ] ;
41728: LD_ADDR_VAR 0 5
41732: PUSH
41733: EMPTY
41734: ST_TO_ADDR
// for i = 16 to 25 do
41735: LD_ADDR_VAR 0 4
41739: PUSH
41740: DOUBLE
41741: LD_INT 16
41743: DEC
41744: ST_TO_ADDR
41745: LD_INT 25
41747: PUSH
41748: FOR_TO
41749: IFFALSE 41822
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41751: LD_ADDR_VAR 0 3
41755: PUSH
41756: LD_VAR 0 3
41760: PUSH
41761: LD_INT 22
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 255
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 91
41780: PUSH
41781: LD_VAR 0 1
41785: PUSH
41786: LD_INT 6
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 30
41796: PUSH
41797: LD_VAR 0 4
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: PPUSH
41814: CALL_OW 69
41818: ADD
41819: ST_TO_ADDR
41820: GO 41748
41822: POP
41823: POP
// for i = 1 to tmp do
41824: LD_ADDR_VAR 0 4
41828: PUSH
41829: DOUBLE
41830: LD_INT 1
41832: DEC
41833: ST_TO_ADDR
41834: LD_VAR 0 3
41838: PUSH
41839: FOR_TO
41840: IFFALSE 41928
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41842: LD_ADDR_VAR 0 5
41846: PUSH
41847: LD_VAR 0 5
41851: PUSH
41852: LD_VAR 0 3
41856: PUSH
41857: LD_VAR 0 4
41861: ARRAY
41862: PPUSH
41863: CALL_OW 266
41867: PUSH
41868: LD_VAR 0 3
41872: PUSH
41873: LD_VAR 0 4
41877: ARRAY
41878: PPUSH
41879: CALL_OW 250
41883: PUSH
41884: LD_VAR 0 3
41888: PUSH
41889: LD_VAR 0 4
41893: ARRAY
41894: PPUSH
41895: CALL_OW 251
41899: PUSH
41900: LD_VAR 0 3
41904: PUSH
41905: LD_VAR 0 4
41909: ARRAY
41910: PPUSH
41911: CALL_OW 254
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: ADD
41925: ST_TO_ADDR
41926: GO 41839
41928: POP
41929: POP
// result := list ;
41930: LD_ADDR_VAR 0 2
41934: PUSH
41935: LD_VAR 0 5
41939: ST_TO_ADDR
// end ;
41940: LD_VAR 0 2
41944: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41945: LD_INT 0
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
// if not factory then
41954: LD_VAR 0 1
41958: NOT
41959: IFFALSE 41963
// exit ;
41961: GO 42566
// if control = control_apeman then
41963: LD_VAR 0 4
41967: PUSH
41968: LD_INT 5
41970: EQUAL
41971: IFFALSE 42080
// begin tmp := UnitsInside ( factory ) ;
41973: LD_ADDR_VAR 0 8
41977: PUSH
41978: LD_VAR 0 1
41982: PPUSH
41983: CALL_OW 313
41987: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41988: LD_VAR 0 8
41992: PPUSH
41993: LD_INT 25
41995: PUSH
41996: LD_INT 12
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PPUSH
42003: CALL_OW 72
42007: NOT
42008: IFFALSE 42018
// control := control_manual ;
42010: LD_ADDR_VAR 0 4
42014: PUSH
42015: LD_INT 1
42017: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42018: LD_ADDR_VAR 0 8
42022: PUSH
42023: LD_VAR 0 1
42027: PPUSH
42028: CALL 41715 0 1
42032: ST_TO_ADDR
// if tmp then
42033: LD_VAR 0 8
42037: IFFALSE 42080
// begin for i in tmp do
42039: LD_ADDR_VAR 0 7
42043: PUSH
42044: LD_VAR 0 8
42048: PUSH
42049: FOR_IN
42050: IFFALSE 42078
// if i [ 1 ] = b_ext_radio then
42052: LD_VAR 0 7
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PUSH
42061: LD_INT 22
42063: EQUAL
42064: IFFALSE 42076
// begin control := control_remote ;
42066: LD_ADDR_VAR 0 4
42070: PUSH
42071: LD_INT 2
42073: ST_TO_ADDR
// break ;
42074: GO 42078
// end ;
42076: GO 42049
42078: POP
42079: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42080: LD_VAR 0 1
42084: PPUSH
42085: LD_VAR 0 2
42089: PPUSH
42090: LD_VAR 0 3
42094: PPUSH
42095: LD_VAR 0 4
42099: PPUSH
42100: LD_VAR 0 5
42104: PPUSH
42105: CALL_OW 448
42109: IFFALSE 42144
// begin result := [ chassis , engine , control , weapon ] ;
42111: LD_ADDR_VAR 0 6
42115: PUSH
42116: LD_VAR 0 2
42120: PUSH
42121: LD_VAR 0 3
42125: PUSH
42126: LD_VAR 0 4
42130: PUSH
42131: LD_VAR 0 5
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: ST_TO_ADDR
// exit ;
42142: GO 42566
// end ; _chassis := AvailableChassisList ( factory ) ;
42144: LD_ADDR_VAR 0 9
42148: PUSH
42149: LD_VAR 0 1
42153: PPUSH
42154: CALL_OW 475
42158: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42159: LD_ADDR_VAR 0 11
42163: PUSH
42164: LD_VAR 0 1
42168: PPUSH
42169: CALL_OW 476
42173: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42174: LD_ADDR_VAR 0 12
42178: PUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: CALL_OW 477
42188: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42189: LD_ADDR_VAR 0 10
42193: PUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: CALL_OW 478
42203: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42204: LD_VAR 0 9
42208: NOT
42209: IFTRUE 42218
42211: PUSH
42212: LD_VAR 0 11
42216: NOT
42217: OR
42218: IFTRUE 42227
42220: PUSH
42221: LD_VAR 0 12
42225: NOT
42226: OR
42227: IFTRUE 42236
42229: PUSH
42230: LD_VAR 0 10
42234: NOT
42235: OR
42236: IFFALSE 42271
// begin result := [ chassis , engine , control , weapon ] ;
42238: LD_ADDR_VAR 0 6
42242: PUSH
42243: LD_VAR 0 2
42247: PUSH
42248: LD_VAR 0 3
42252: PUSH
42253: LD_VAR 0 4
42257: PUSH
42258: LD_VAR 0 5
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
// exit ;
42269: GO 42566
// end ; if not chassis in _chassis then
42271: LD_VAR 0 2
42275: PUSH
42276: LD_VAR 0 9
42280: IN
42281: NOT
42282: IFFALSE 42308
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42284: LD_ADDR_VAR 0 2
42288: PUSH
42289: LD_VAR 0 9
42293: PUSH
42294: LD_INT 1
42296: PPUSH
42297: LD_VAR 0 9
42301: PPUSH
42302: CALL_OW 12
42306: ARRAY
42307: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42308: LD_VAR 0 2
42312: PPUSH
42313: LD_VAR 0 3
42317: PPUSH
42318: CALL 42571 0 2
42322: NOT
42323: IFFALSE 42384
// repeat engine := _engine [ 1 ] ;
42325: LD_ADDR_VAR 0 3
42329: PUSH
42330: LD_VAR 0 11
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42339: LD_ADDR_VAR 0 11
42343: PUSH
42344: LD_VAR 0 11
42348: PPUSH
42349: LD_INT 1
42351: PPUSH
42352: CALL_OW 3
42356: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42357: LD_VAR 0 2
42361: PPUSH
42362: LD_VAR 0 3
42366: PPUSH
42367: CALL 42571 0 2
42371: IFTRUE 42382
42373: PUSH
42374: LD_VAR 0 11
42378: PUSH
42379: EMPTY
42380: EQUAL
42381: OR
42382: IFFALSE 42325
// if not control in _control then
42384: LD_VAR 0 4
42388: PUSH
42389: LD_VAR 0 12
42393: IN
42394: NOT
42395: IFFALSE 42421
// control := _control [ rand ( 1 , _control ) ] ;
42397: LD_ADDR_VAR 0 4
42401: PUSH
42402: LD_VAR 0 12
42406: PUSH
42407: LD_INT 1
42409: PPUSH
42410: LD_VAR 0 12
42414: PPUSH
42415: CALL_OW 12
42419: ARRAY
42420: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42421: LD_VAR 0 2
42425: PPUSH
42426: LD_VAR 0 5
42430: PPUSH
42431: CALL 42793 0 2
42435: NOT
42436: IFFALSE 42497
// repeat weapon := _weapon [ 1 ] ;
42438: LD_ADDR_VAR 0 5
42442: PUSH
42443: LD_VAR 0 10
42447: PUSH
42448: LD_INT 1
42450: ARRAY
42451: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42452: LD_ADDR_VAR 0 10
42456: PUSH
42457: LD_VAR 0 10
42461: PPUSH
42462: LD_INT 1
42464: PPUSH
42465: CALL_OW 3
42469: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42470: LD_VAR 0 2
42474: PPUSH
42475: LD_VAR 0 5
42479: PPUSH
42480: CALL 42793 0 2
42484: IFTRUE 42495
42486: PUSH
42487: LD_VAR 0 10
42491: PUSH
42492: EMPTY
42493: EQUAL
42494: OR
42495: IFFALSE 42438
// result := [ ] ;
42497: LD_ADDR_VAR 0 6
42501: PUSH
42502: EMPTY
42503: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42504: LD_VAR 0 1
42508: PPUSH
42509: LD_VAR 0 2
42513: PPUSH
42514: LD_VAR 0 3
42518: PPUSH
42519: LD_VAR 0 4
42523: PPUSH
42524: LD_VAR 0 5
42528: PPUSH
42529: CALL_OW 448
42533: IFFALSE 42566
// result := [ chassis , engine , control , weapon ] ;
42535: LD_ADDR_VAR 0 6
42539: PUSH
42540: LD_VAR 0 2
42544: PUSH
42545: LD_VAR 0 3
42549: PUSH
42550: LD_VAR 0 4
42554: PUSH
42555: LD_VAR 0 5
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// end ;
42566: LD_VAR 0 6
42570: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42571: LD_INT 0
42573: PPUSH
// if not chassis or not engine then
42574: LD_VAR 0 1
42578: NOT
42579: IFTRUE 42588
42581: PUSH
42582: LD_VAR 0 2
42586: NOT
42587: OR
42588: IFFALSE 42592
// exit ;
42590: GO 42788
// case engine of engine_solar :
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 2
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42643
42605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 11
42613: PUSH
42614: LD_INT 12
42616: PUSH
42617: LD_INT 13
42619: PUSH
42620: LD_INT 14
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: ST_TO_ADDR
42641: GO 42772
42643: LD_INT 1
42645: DOUBLE
42646: EQUAL
42647: IFTRUE 42651
42649: GO 42713
42651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42652: LD_ADDR_VAR 0 3
42656: PUSH
42657: LD_INT 11
42659: PUSH
42660: LD_INT 12
42662: PUSH
42663: LD_INT 13
42665: PUSH
42666: LD_INT 14
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 5
42683: PUSH
42684: LD_INT 21
42686: PUSH
42687: LD_INT 23
42689: PUSH
42690: LD_INT 22
42692: PUSH
42693: LD_INT 24
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
42711: GO 42772
42713: LD_INT 3
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42721
42719: GO 42771
42721: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42722: LD_ADDR_VAR 0 3
42726: PUSH
42727: LD_INT 13
42729: PUSH
42730: LD_INT 14
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 3
42738: PUSH
42739: LD_INT 4
42741: PUSH
42742: LD_INT 5
42744: PUSH
42745: LD_INT 21
42747: PUSH
42748: LD_INT 22
42750: PUSH
42751: LD_INT 23
42753: PUSH
42754: LD_INT 24
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
42769: GO 42772
42771: POP
// result := ( chassis in result ) ;
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: LD_VAR 0 3
42786: IN
42787: ST_TO_ADDR
// end ;
42788: LD_VAR 0 3
42792: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42793: LD_INT 0
42795: PPUSH
// if not chassis or not weapon then
42796: LD_VAR 0 1
42800: NOT
42801: IFTRUE 42810
42803: PUSH
42804: LD_VAR 0 2
42808: NOT
42809: OR
42810: IFFALSE 42814
// exit ;
42812: GO 43874
// case weapon of us_machine_gun :
42814: LD_VAR 0 2
42818: PUSH
42819: LD_INT 2
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42857
42827: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 4
42844: PUSH
42845: LD_INT 5
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
42855: GO 43858
42857: LD_INT 3
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42895
42865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42866: LD_ADDR_VAR 0 3
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 4
42882: PUSH
42883: LD_INT 5
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
42893: GO 43858
42895: LD_INT 11
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42903
42901: GO 42933
42903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42904: LD_ADDR_VAR 0 3
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 3
42917: PUSH
42918: LD_INT 4
42920: PUSH
42921: LD_INT 5
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: ST_TO_ADDR
42931: GO 43858
42933: LD_INT 4
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42941
42939: GO 42967
42941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42942: LD_ADDR_VAR 0 3
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 3
42952: PUSH
42953: LD_INT 4
42955: PUSH
42956: LD_INT 5
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
42965: GO 43858
42967: LD_INT 5
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 42975
42973: GO 43001
42975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42976: LD_ADDR_VAR 0 3
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 4
42989: PUSH
42990: LD_INT 5
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
42999: GO 43858
43001: LD_INT 9
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43009
43007: GO 43035
43009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43010: LD_ADDR_VAR 0 3
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: LD_INT 4
43023: PUSH
43024: LD_INT 5
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
43033: GO 43858
43035: LD_INT 7
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43043
43041: GO 43069
43043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43044: LD_ADDR_VAR 0 3
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: LD_INT 4
43057: PUSH
43058: LD_INT 5
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: ST_TO_ADDR
43067: GO 43858
43069: LD_INT 12
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43077
43075: GO 43103
43077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43078: LD_ADDR_VAR 0 3
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: LD_INT 4
43091: PUSH
43092: LD_INT 5
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
43101: GO 43858
43103: LD_INT 13
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43137
43111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43112: LD_ADDR_VAR 0 3
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 4
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
43135: GO 43858
43137: LD_INT 14
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43163
43145: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: ST_TO_ADDR
43161: GO 43858
43163: LD_INT 6
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43189
43171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: LD_INT 5
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: ST_TO_ADDR
43187: GO 43858
43189: LD_INT 10
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43197
43195: GO 43215
43197: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43198: LD_ADDR_VAR 0 3
43202: PUSH
43203: LD_INT 4
43205: PUSH
43206: LD_INT 5
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: ST_TO_ADDR
43213: GO 43858
43215: LD_INT 22
43217: DOUBLE
43218: EQUAL
43219: IFTRUE 43223
43221: GO 43249
43223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: LD_INT 11
43231: PUSH
43232: LD_INT 12
43234: PUSH
43235: LD_INT 13
43237: PUSH
43238: LD_INT 14
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
43247: GO 43858
43249: LD_INT 23
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43257
43255: GO 43283
43257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43258: LD_ADDR_VAR 0 3
43262: PUSH
43263: LD_INT 11
43265: PUSH
43266: LD_INT 12
43268: PUSH
43269: LD_INT 13
43271: PUSH
43272: LD_INT 14
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: ST_TO_ADDR
43281: GO 43858
43283: LD_INT 24
43285: DOUBLE
43286: EQUAL
43287: IFTRUE 43291
43289: GO 43317
43291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43292: LD_ADDR_VAR 0 3
43296: PUSH
43297: LD_INT 11
43299: PUSH
43300: LD_INT 12
43302: PUSH
43303: LD_INT 13
43305: PUSH
43306: LD_INT 14
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
43315: GO 43858
43317: LD_INT 30
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43351
43325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 11
43333: PUSH
43334: LD_INT 12
43336: PUSH
43337: LD_INT 13
43339: PUSH
43340: LD_INT 14
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
43349: GO 43858
43351: LD_INT 25
43353: DOUBLE
43354: EQUAL
43355: IFTRUE 43359
43357: GO 43377
43359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_INT 13
43367: PUSH
43368: LD_INT 14
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: ST_TO_ADDR
43375: GO 43858
43377: LD_INT 27
43379: DOUBLE
43380: EQUAL
43381: IFTRUE 43385
43383: GO 43403
43385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43386: LD_ADDR_VAR 0 3
43390: PUSH
43391: LD_INT 13
43393: PUSH
43394: LD_INT 14
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: ST_TO_ADDR
43401: GO 43858
43403: LD_INT 92
43405: DOUBLE
43406: EQUAL
43407: IFTRUE 43411
43409: GO 43437
43411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43412: LD_ADDR_VAR 0 3
43416: PUSH
43417: LD_INT 11
43419: PUSH
43420: LD_INT 12
43422: PUSH
43423: LD_INT 13
43425: PUSH
43426: LD_INT 14
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: ST_TO_ADDR
43435: GO 43858
43437: LD_INT 28
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43445
43443: GO 43463
43445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: LD_INT 13
43453: PUSH
43454: LD_INT 14
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: ST_TO_ADDR
43461: GO 43858
43463: LD_INT 29
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43489
43471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43472: LD_ADDR_VAR 0 3
43476: PUSH
43477: LD_INT 13
43479: PUSH
43480: LD_INT 14
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: ST_TO_ADDR
43487: GO 43858
43489: LD_INT 31
43491: DOUBLE
43492: EQUAL
43493: IFTRUE 43497
43495: GO 43515
43497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43498: LD_ADDR_VAR 0 3
43502: PUSH
43503: LD_INT 13
43505: PUSH
43506: LD_INT 14
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: ST_TO_ADDR
43513: GO 43858
43515: LD_INT 26
43517: DOUBLE
43518: EQUAL
43519: IFTRUE 43523
43521: GO 43541
43523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43524: LD_ADDR_VAR 0 3
43528: PUSH
43529: LD_INT 13
43531: PUSH
43532: LD_INT 14
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: ST_TO_ADDR
43539: GO 43858
43541: LD_INT 42
43543: DOUBLE
43544: EQUAL
43545: IFTRUE 43549
43547: GO 43575
43549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43550: LD_ADDR_VAR 0 3
43554: PUSH
43555: LD_INT 21
43557: PUSH
43558: LD_INT 22
43560: PUSH
43561: LD_INT 23
43563: PUSH
43564: LD_INT 24
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
43573: GO 43858
43575: LD_INT 43
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43583
43581: GO 43609
43583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_INT 21
43591: PUSH
43592: LD_INT 22
43594: PUSH
43595: LD_INT 23
43597: PUSH
43598: LD_INT 24
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
43607: GO 43858
43609: LD_INT 44
43611: DOUBLE
43612: EQUAL
43613: IFTRUE 43617
43615: GO 43643
43617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 21
43625: PUSH
43626: LD_INT 22
43628: PUSH
43629: LD_INT 23
43631: PUSH
43632: LD_INT 24
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: ST_TO_ADDR
43641: GO 43858
43643: LD_INT 45
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43651
43649: GO 43677
43651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43652: LD_ADDR_VAR 0 3
43656: PUSH
43657: LD_INT 21
43659: PUSH
43660: LD_INT 22
43662: PUSH
43663: LD_INT 23
43665: PUSH
43666: LD_INT 24
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
43675: GO 43858
43677: LD_INT 49
43679: DOUBLE
43680: EQUAL
43681: IFTRUE 43685
43683: GO 43711
43685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43686: LD_ADDR_VAR 0 3
43690: PUSH
43691: LD_INT 21
43693: PUSH
43694: LD_INT 22
43696: PUSH
43697: LD_INT 23
43699: PUSH
43700: LD_INT 24
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
43709: GO 43858
43711: LD_INT 51
43713: DOUBLE
43714: EQUAL
43715: IFTRUE 43719
43717: GO 43745
43719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43720: LD_ADDR_VAR 0 3
43724: PUSH
43725: LD_INT 21
43727: PUSH
43728: LD_INT 22
43730: PUSH
43731: LD_INT 23
43733: PUSH
43734: LD_INT 24
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
43743: GO 43858
43745: LD_INT 52
43747: DOUBLE
43748: EQUAL
43749: IFTRUE 43753
43751: GO 43779
43753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: LD_INT 21
43761: PUSH
43762: LD_INT 22
43764: PUSH
43765: LD_INT 23
43767: PUSH
43768: LD_INT 24
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
43777: GO 43858
43779: LD_INT 53
43781: DOUBLE
43782: EQUAL
43783: IFTRUE 43787
43785: GO 43805
43787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43788: LD_ADDR_VAR 0 3
43792: PUSH
43793: LD_INT 23
43795: PUSH
43796: LD_INT 24
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: ST_TO_ADDR
43803: GO 43858
43805: LD_INT 46
43807: DOUBLE
43808: EQUAL
43809: IFTRUE 43813
43811: GO 43831
43813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43814: LD_ADDR_VAR 0 3
43818: PUSH
43819: LD_INT 23
43821: PUSH
43822: LD_INT 24
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: ST_TO_ADDR
43829: GO 43858
43831: LD_INT 47
43833: DOUBLE
43834: EQUAL
43835: IFTRUE 43839
43837: GO 43857
43839: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43840: LD_ADDR_VAR 0 3
43844: PUSH
43845: LD_INT 23
43847: PUSH
43848: LD_INT 24
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: ST_TO_ADDR
43855: GO 43858
43857: POP
// result := ( chassis in result ) ;
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_VAR 0 1
43867: PUSH
43868: LD_VAR 0 3
43872: IN
43873: ST_TO_ADDR
// end ;
43874: LD_VAR 0 3
43878: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43879: LD_INT 0
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
// result := array ;
43888: LD_ADDR_VAR 0 5
43892: PUSH
43893: LD_VAR 0 1
43897: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43898: LD_VAR 0 1
43902: NOT
43903: IFTRUE 43912
43905: PUSH
43906: LD_VAR 0 2
43910: NOT
43911: OR
43912: IFTRUE 43921
43914: PUSH
43915: LD_VAR 0 3
43919: NOT
43920: OR
43921: IFTRUE 43935
43923: PUSH
43924: LD_VAR 0 2
43928: PUSH
43929: LD_VAR 0 1
43933: GREATER
43934: OR
43935: IFTRUE 43949
43937: PUSH
43938: LD_VAR 0 3
43942: PUSH
43943: LD_VAR 0 1
43947: GREATER
43948: OR
43949: IFFALSE 43953
// exit ;
43951: GO 44249
// if direction then
43953: LD_VAR 0 4
43957: IFFALSE 44021
// begin d := 1 ;
43959: LD_ADDR_VAR 0 9
43963: PUSH
43964: LD_INT 1
43966: ST_TO_ADDR
// if i_from > i_to then
43967: LD_VAR 0 2
43971: PUSH
43972: LD_VAR 0 3
43976: GREATER
43977: IFFALSE 44003
// length := ( array - i_from ) + i_to else
43979: LD_ADDR_VAR 0 11
43983: PUSH
43984: LD_VAR 0 1
43988: PUSH
43989: LD_VAR 0 2
43993: MINUS
43994: PUSH
43995: LD_VAR 0 3
43999: PLUS
44000: ST_TO_ADDR
44001: GO 44019
// length := i_to - i_from ;
44003: LD_ADDR_VAR 0 11
44007: PUSH
44008: LD_VAR 0 3
44012: PUSH
44013: LD_VAR 0 2
44017: MINUS
44018: ST_TO_ADDR
// end else
44019: GO 44082
// begin d := - 1 ;
44021: LD_ADDR_VAR 0 9
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: ST_TO_ADDR
// if i_from > i_to then
44030: LD_VAR 0 2
44034: PUSH
44035: LD_VAR 0 3
44039: GREATER
44040: IFFALSE 44060
// length := i_from - i_to else
44042: LD_ADDR_VAR 0 11
44046: PUSH
44047: LD_VAR 0 2
44051: PUSH
44052: LD_VAR 0 3
44056: MINUS
44057: ST_TO_ADDR
44058: GO 44082
// length := ( array - i_to ) + i_from ;
44060: LD_ADDR_VAR 0 11
44064: PUSH
44065: LD_VAR 0 1
44069: PUSH
44070: LD_VAR 0 3
44074: MINUS
44075: PUSH
44076: LD_VAR 0 2
44080: PLUS
44081: ST_TO_ADDR
// end ; if not length then
44082: LD_VAR 0 11
44086: NOT
44087: IFFALSE 44091
// exit ;
44089: GO 44249
// tmp := array ;
44091: LD_ADDR_VAR 0 10
44095: PUSH
44096: LD_VAR 0 1
44100: ST_TO_ADDR
// for i = 1 to length do
44101: LD_ADDR_VAR 0 6
44105: PUSH
44106: DOUBLE
44107: LD_INT 1
44109: DEC
44110: ST_TO_ADDR
44111: LD_VAR 0 11
44115: PUSH
44116: FOR_TO
44117: IFFALSE 44237
// begin for j = 1 to array do
44119: LD_ADDR_VAR 0 7
44123: PUSH
44124: DOUBLE
44125: LD_INT 1
44127: DEC
44128: ST_TO_ADDR
44129: LD_VAR 0 1
44133: PUSH
44134: FOR_TO
44135: IFFALSE 44223
// begin k := j + d ;
44137: LD_ADDR_VAR 0 8
44141: PUSH
44142: LD_VAR 0 7
44146: PUSH
44147: LD_VAR 0 9
44151: PLUS
44152: ST_TO_ADDR
// if k > array then
44153: LD_VAR 0 8
44157: PUSH
44158: LD_VAR 0 1
44162: GREATER
44163: IFFALSE 44173
// k := 1 ;
44165: LD_ADDR_VAR 0 8
44169: PUSH
44170: LD_INT 1
44172: ST_TO_ADDR
// if not k then
44173: LD_VAR 0 8
44177: NOT
44178: IFFALSE 44190
// k := array ;
44180: LD_ADDR_VAR 0 8
44184: PUSH
44185: LD_VAR 0 1
44189: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44190: LD_ADDR_VAR 0 10
44194: PUSH
44195: LD_VAR 0 10
44199: PPUSH
44200: LD_VAR 0 8
44204: PPUSH
44205: LD_VAR 0 1
44209: PUSH
44210: LD_VAR 0 7
44214: ARRAY
44215: PPUSH
44216: CALL_OW 1
44220: ST_TO_ADDR
// end ;
44221: GO 44134
44223: POP
44224: POP
// array := tmp ;
44225: LD_ADDR_VAR 0 1
44229: PUSH
44230: LD_VAR 0 10
44234: ST_TO_ADDR
// end ;
44235: GO 44116
44237: POP
44238: POP
// result := array ;
44239: LD_ADDR_VAR 0 5
44243: PUSH
44244: LD_VAR 0 1
44248: ST_TO_ADDR
// end ;
44249: LD_VAR 0 5
44253: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44254: LD_INT 0
44256: PPUSH
44257: PPUSH
// result := 0 ;
44258: LD_ADDR_VAR 0 3
44262: PUSH
44263: LD_INT 0
44265: ST_TO_ADDR
// if not array or not value in array then
44266: LD_VAR 0 1
44270: NOT
44271: IFTRUE 44286
44273: PUSH
44274: LD_VAR 0 2
44278: PUSH
44279: LD_VAR 0 1
44283: IN
44284: NOT
44285: OR
44286: IFFALSE 44290
// exit ;
44288: GO 44344
// for i = 1 to array do
44290: LD_ADDR_VAR 0 4
44294: PUSH
44295: DOUBLE
44296: LD_INT 1
44298: DEC
44299: ST_TO_ADDR
44300: LD_VAR 0 1
44304: PUSH
44305: FOR_TO
44306: IFFALSE 44342
// if value = array [ i ] then
44308: LD_VAR 0 2
44312: PUSH
44313: LD_VAR 0 1
44317: PUSH
44318: LD_VAR 0 4
44322: ARRAY
44323: EQUAL
44324: IFFALSE 44340
// begin result := i ;
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_VAR 0 4
44335: ST_TO_ADDR
// exit ;
44336: POP
44337: POP
44338: GO 44344
// end ;
44340: GO 44305
44342: POP
44343: POP
// end ;
44344: LD_VAR 0 3
44348: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44349: LD_INT 0
44351: PPUSH
// vc_chassis := chassis ;
44352: LD_ADDR_OWVAR 37
44356: PUSH
44357: LD_VAR 0 1
44361: ST_TO_ADDR
// vc_engine := engine ;
44362: LD_ADDR_OWVAR 39
44366: PUSH
44367: LD_VAR 0 2
44371: ST_TO_ADDR
// vc_control := control ;
44372: LD_ADDR_OWVAR 38
44376: PUSH
44377: LD_VAR 0 3
44381: ST_TO_ADDR
// vc_weapon := weapon ;
44382: LD_ADDR_OWVAR 40
44386: PUSH
44387: LD_VAR 0 4
44391: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44392: LD_ADDR_OWVAR 41
44396: PUSH
44397: LD_VAR 0 5
44401: ST_TO_ADDR
// end ;
44402: LD_VAR 0 6
44406: RET
// export function WantPlant ( unit ) ; var task ; begin
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
// result := false ;
44411: LD_ADDR_VAR 0 2
44415: PUSH
44416: LD_INT 0
44418: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44419: LD_ADDR_VAR 0 3
44423: PUSH
44424: LD_VAR 0 1
44428: PPUSH
44429: CALL_OW 437
44433: ST_TO_ADDR
// if task then
44434: LD_VAR 0 3
44438: IFFALSE 44466
// if task [ 1 ] [ 1 ] = p then
44440: LD_VAR 0 3
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: PUSH
44453: LD_STRING p
44455: EQUAL
44456: IFFALSE 44466
// result := true ;
44458: LD_ADDR_VAR 0 2
44462: PUSH
44463: LD_INT 1
44465: ST_TO_ADDR
// end ;
44466: LD_VAR 0 2
44470: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44471: LD_INT 0
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
// if pos < 1 then
44477: LD_VAR 0 2
44481: PUSH
44482: LD_INT 1
44484: LESS
44485: IFFALSE 44489
// exit ;
44487: GO 44792
// if pos = 1 then
44489: LD_VAR 0 2
44493: PUSH
44494: LD_INT 1
44496: EQUAL
44497: IFFALSE 44530
// result := Replace ( arr , pos [ 1 ] , value ) else
44499: LD_ADDR_VAR 0 4
44503: PUSH
44504: LD_VAR 0 1
44508: PPUSH
44509: LD_VAR 0 2
44513: PUSH
44514: LD_INT 1
44516: ARRAY
44517: PPUSH
44518: LD_VAR 0 3
44522: PPUSH
44523: CALL_OW 1
44527: ST_TO_ADDR
44528: GO 44792
// begin tmp := arr ;
44530: LD_ADDR_VAR 0 6
44534: PUSH
44535: LD_VAR 0 1
44539: ST_TO_ADDR
// s_arr := [ tmp ] ;
44540: LD_ADDR_VAR 0 7
44544: PUSH
44545: LD_VAR 0 6
44549: PUSH
44550: EMPTY
44551: LIST
44552: ST_TO_ADDR
// for i = 1 to pos - 1 do
44553: LD_ADDR_VAR 0 5
44557: PUSH
44558: DOUBLE
44559: LD_INT 1
44561: DEC
44562: ST_TO_ADDR
44563: LD_VAR 0 2
44567: PUSH
44568: LD_INT 1
44570: MINUS
44571: PUSH
44572: FOR_TO
44573: IFFALSE 44618
// begin tmp := tmp [ pos [ i ] ] ;
44575: LD_ADDR_VAR 0 6
44579: PUSH
44580: LD_VAR 0 6
44584: PUSH
44585: LD_VAR 0 2
44589: PUSH
44590: LD_VAR 0 5
44594: ARRAY
44595: ARRAY
44596: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44597: LD_ADDR_VAR 0 7
44601: PUSH
44602: LD_VAR 0 7
44606: PUSH
44607: LD_VAR 0 6
44611: PUSH
44612: EMPTY
44613: LIST
44614: ADD
44615: ST_TO_ADDR
// end ;
44616: GO 44572
44618: POP
44619: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44620: LD_ADDR_VAR 0 6
44624: PUSH
44625: LD_VAR 0 6
44629: PPUSH
44630: LD_VAR 0 2
44634: PUSH
44635: LD_VAR 0 2
44639: ARRAY
44640: PPUSH
44641: LD_VAR 0 3
44645: PPUSH
44646: CALL_OW 1
44650: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44651: LD_ADDR_VAR 0 7
44655: PUSH
44656: LD_VAR 0 7
44660: PPUSH
44661: LD_VAR 0 7
44665: PPUSH
44666: LD_VAR 0 6
44670: PPUSH
44671: CALL_OW 1
44675: ST_TO_ADDR
// for i = s_arr downto 2 do
44676: LD_ADDR_VAR 0 5
44680: PUSH
44681: DOUBLE
44682: LD_VAR 0 7
44686: INC
44687: ST_TO_ADDR
44688: LD_INT 2
44690: PUSH
44691: FOR_DOWNTO
44692: IFFALSE 44776
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44694: LD_ADDR_VAR 0 6
44698: PUSH
44699: LD_VAR 0 7
44703: PUSH
44704: LD_VAR 0 5
44708: PUSH
44709: LD_INT 1
44711: MINUS
44712: ARRAY
44713: PPUSH
44714: LD_VAR 0 2
44718: PUSH
44719: LD_VAR 0 5
44723: PUSH
44724: LD_INT 1
44726: MINUS
44727: ARRAY
44728: PPUSH
44729: LD_VAR 0 7
44733: PUSH
44734: LD_VAR 0 5
44738: ARRAY
44739: PPUSH
44740: CALL_OW 1
44744: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44745: LD_ADDR_VAR 0 7
44749: PUSH
44750: LD_VAR 0 7
44754: PPUSH
44755: LD_VAR 0 5
44759: PUSH
44760: LD_INT 1
44762: MINUS
44763: PPUSH
44764: LD_VAR 0 6
44768: PPUSH
44769: CALL_OW 1
44773: ST_TO_ADDR
// end ;
44774: GO 44691
44776: POP
44777: POP
// result := s_arr [ 1 ] ;
44778: LD_ADDR_VAR 0 4
44782: PUSH
44783: LD_VAR 0 7
44787: PUSH
44788: LD_INT 1
44790: ARRAY
44791: ST_TO_ADDR
// end ; end ;
44792: LD_VAR 0 4
44796: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
// if not list then
44801: LD_VAR 0 1
44805: NOT
44806: IFFALSE 44810
// exit ;
44808: GO 44901
// i := list [ pos1 ] ;
44810: LD_ADDR_VAR 0 5
44814: PUSH
44815: LD_VAR 0 1
44819: PUSH
44820: LD_VAR 0 2
44824: ARRAY
44825: ST_TO_ADDR
// if not i then
44826: LD_VAR 0 5
44830: NOT
44831: IFFALSE 44835
// exit ;
44833: GO 44901
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44835: LD_ADDR_VAR 0 1
44839: PUSH
44840: LD_VAR 0 1
44844: PPUSH
44845: LD_VAR 0 2
44849: PPUSH
44850: LD_VAR 0 1
44854: PUSH
44855: LD_VAR 0 3
44859: ARRAY
44860: PPUSH
44861: CALL_OW 1
44865: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44866: LD_ADDR_VAR 0 1
44870: PUSH
44871: LD_VAR 0 1
44875: PPUSH
44876: LD_VAR 0 3
44880: PPUSH
44881: LD_VAR 0 5
44885: PPUSH
44886: CALL_OW 1
44890: ST_TO_ADDR
// result := list ;
44891: LD_ADDR_VAR 0 4
44895: PUSH
44896: LD_VAR 0 1
44900: ST_TO_ADDR
// end ;
44901: LD_VAR 0 4
44905: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44906: LD_INT 0
44908: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44909: LD_ADDR_VAR 0 5
44913: PUSH
44914: LD_VAR 0 1
44918: PPUSH
44919: CALL_OW 250
44923: PPUSH
44924: LD_VAR 0 1
44928: PPUSH
44929: CALL_OW 251
44933: PPUSH
44934: LD_VAR 0 2
44938: PPUSH
44939: LD_VAR 0 3
44943: PPUSH
44944: LD_VAR 0 4
44948: PPUSH
44949: CALL 45331 0 5
44953: ST_TO_ADDR
// end ;
44954: LD_VAR 0 5
44958: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44959: LD_INT 0
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
// if not list or not unit then
44965: LD_VAR 0 2
44969: NOT
44970: IFTRUE 44979
44972: PUSH
44973: LD_VAR 0 1
44977: NOT
44978: OR
44979: IFFALSE 44983
// exit ;
44981: GO 45326
// result := [ ] ;
44983: LD_ADDR_VAR 0 5
44987: PUSH
44988: EMPTY
44989: ST_TO_ADDR
// for i in list do
44990: LD_ADDR_VAR 0 6
44994: PUSH
44995: LD_VAR 0 2
44999: PUSH
45000: FOR_IN
45001: IFFALSE 45219
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45003: LD_ADDR_VAR 0 8
45007: PUSH
45008: LD_VAR 0 1
45012: PPUSH
45013: LD_VAR 0 6
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: PPUSH
45022: LD_VAR 0 6
45026: PUSH
45027: LD_INT 2
45029: ARRAY
45030: PPUSH
45031: CALL_OW 297
45035: ST_TO_ADDR
// if not Count ( result ) then
45036: LD_VAR 0 5
45040: PPUSH
45041: CALL 41587 0 1
45045: NOT
45046: IFFALSE 45079
// begin result := Join ( result , [ i , tmp ] ) ;
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 5
45057: PPUSH
45058: LD_VAR 0 6
45062: PUSH
45063: LD_VAR 0 8
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PPUSH
45072: CALL 77519 0 2
45076: ST_TO_ADDR
// continue ;
45077: GO 45000
// end ; if result [ result ] [ 2 ] <= tmp then
45079: LD_VAR 0 5
45083: PUSH
45084: LD_VAR 0 5
45088: ARRAY
45089: PUSH
45090: LD_INT 2
45092: ARRAY
45093: PUSH
45094: LD_VAR 0 8
45098: LESSEQUAL
45099: IFFALSE 45132
// result := Join ( result , [ i , tmp ] ) else
45101: LD_ADDR_VAR 0 5
45105: PUSH
45106: LD_VAR 0 5
45110: PPUSH
45111: LD_VAR 0 6
45115: PUSH
45116: LD_VAR 0 8
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PPUSH
45125: CALL 77519 0 2
45129: ST_TO_ADDR
45130: GO 45217
// begin for j := 1 to Count ( result ) do
45132: LD_ADDR_VAR 0 7
45136: PUSH
45137: DOUBLE
45138: LD_INT 1
45140: DEC
45141: ST_TO_ADDR
45142: LD_VAR 0 5
45146: PPUSH
45147: CALL 41587 0 1
45151: PUSH
45152: FOR_TO
45153: IFFALSE 45215
// begin if tmp < result [ j ] [ 2 ] then
45155: LD_VAR 0 8
45159: PUSH
45160: LD_VAR 0 5
45164: PUSH
45165: LD_VAR 0 7
45169: ARRAY
45170: PUSH
45171: LD_INT 2
45173: ARRAY
45174: LESS
45175: IFFALSE 45213
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45177: LD_ADDR_VAR 0 5
45181: PUSH
45182: LD_VAR 0 5
45186: PPUSH
45187: LD_VAR 0 7
45191: PPUSH
45192: LD_VAR 0 6
45196: PUSH
45197: LD_VAR 0 8
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PPUSH
45206: CALL_OW 2
45210: ST_TO_ADDR
// break ;
45211: GO 45215
// end ; end ;
45213: GO 45152
45215: POP
45216: POP
// end ; end ;
45217: GO 45000
45219: POP
45220: POP
// if result and not asc then
45221: LD_VAR 0 5
45225: IFFALSE 45234
45227: PUSH
45228: LD_VAR 0 3
45232: NOT
45233: AND
45234: IFFALSE 45251
// result := ReverseArray ( result ) ;
45236: LD_ADDR_VAR 0 5
45240: PUSH
45241: LD_VAR 0 5
45245: PPUSH
45246: CALL 72609 0 1
45250: ST_TO_ADDR
// tmp := [ ] ;
45251: LD_ADDR_VAR 0 8
45255: PUSH
45256: EMPTY
45257: ST_TO_ADDR
// if mode then
45258: LD_VAR 0 4
45262: IFFALSE 45326
// begin for i := 1 to result do
45264: LD_ADDR_VAR 0 6
45268: PUSH
45269: DOUBLE
45270: LD_INT 1
45272: DEC
45273: ST_TO_ADDR
45274: LD_VAR 0 5
45278: PUSH
45279: FOR_TO
45280: IFFALSE 45314
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45282: LD_ADDR_VAR 0 8
45286: PUSH
45287: LD_VAR 0 8
45291: PPUSH
45292: LD_VAR 0 5
45296: PUSH
45297: LD_VAR 0 6
45301: ARRAY
45302: PUSH
45303: LD_INT 1
45305: ARRAY
45306: PPUSH
45307: CALL 77519 0 2
45311: ST_TO_ADDR
45312: GO 45279
45314: POP
45315: POP
// result := tmp ;
45316: LD_ADDR_VAR 0 5
45320: PUSH
45321: LD_VAR 0 8
45325: ST_TO_ADDR
// end ; end ;
45326: LD_VAR 0 5
45330: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45331: LD_INT 0
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
// if not list then
45337: LD_VAR 0 3
45341: NOT
45342: IFFALSE 45346
// exit ;
45344: GO 45736
// result := [ ] ;
45346: LD_ADDR_VAR 0 6
45350: PUSH
45351: EMPTY
45352: ST_TO_ADDR
// for i in list do
45353: LD_ADDR_VAR 0 7
45357: PUSH
45358: LD_VAR 0 3
45362: PUSH
45363: FOR_IN
45364: IFFALSE 45566
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45366: LD_ADDR_VAR 0 9
45370: PUSH
45371: LD_VAR 0 7
45375: PPUSH
45376: LD_VAR 0 1
45380: PPUSH
45381: LD_VAR 0 2
45385: PPUSH
45386: CALL_OW 297
45390: ST_TO_ADDR
// if not result then
45391: LD_VAR 0 6
45395: NOT
45396: IFFALSE 45422
// result := [ [ i , tmp ] ] else
45398: LD_ADDR_VAR 0 6
45402: PUSH
45403: LD_VAR 0 7
45407: PUSH
45408: LD_VAR 0 9
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: ST_TO_ADDR
45420: GO 45564
// begin if result [ result ] [ 2 ] <= tmp then
45422: LD_VAR 0 6
45426: PUSH
45427: LD_VAR 0 6
45431: ARRAY
45432: PUSH
45433: LD_INT 2
45435: ARRAY
45436: PUSH
45437: LD_VAR 0 9
45441: LESSEQUAL
45442: IFFALSE 45484
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45444: LD_ADDR_VAR 0 6
45448: PUSH
45449: LD_VAR 0 6
45453: PPUSH
45454: LD_VAR 0 6
45458: PUSH
45459: LD_INT 1
45461: PLUS
45462: PPUSH
45463: LD_VAR 0 7
45467: PUSH
45468: LD_VAR 0 9
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PPUSH
45477: CALL_OW 2
45481: ST_TO_ADDR
45482: GO 45564
// for j := 1 to result do
45484: LD_ADDR_VAR 0 8
45488: PUSH
45489: DOUBLE
45490: LD_INT 1
45492: DEC
45493: ST_TO_ADDR
45494: LD_VAR 0 6
45498: PUSH
45499: FOR_TO
45500: IFFALSE 45562
// begin if tmp < result [ j ] [ 2 ] then
45502: LD_VAR 0 9
45506: PUSH
45507: LD_VAR 0 6
45511: PUSH
45512: LD_VAR 0 8
45516: ARRAY
45517: PUSH
45518: LD_INT 2
45520: ARRAY
45521: LESS
45522: IFFALSE 45560
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45524: LD_ADDR_VAR 0 6
45528: PUSH
45529: LD_VAR 0 6
45533: PPUSH
45534: LD_VAR 0 8
45538: PPUSH
45539: LD_VAR 0 7
45543: PUSH
45544: LD_VAR 0 9
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PPUSH
45553: CALL_OW 2
45557: ST_TO_ADDR
// break ;
45558: GO 45562
// end ; end ;
45560: GO 45499
45562: POP
45563: POP
// end ; end ;
45564: GO 45363
45566: POP
45567: POP
// if result and not asc then
45568: LD_VAR 0 6
45572: IFFALSE 45581
45574: PUSH
45575: LD_VAR 0 4
45579: NOT
45580: AND
45581: IFFALSE 45656
// begin tmp := result ;
45583: LD_ADDR_VAR 0 9
45587: PUSH
45588: LD_VAR 0 6
45592: ST_TO_ADDR
// for i = tmp downto 1 do
45593: LD_ADDR_VAR 0 7
45597: PUSH
45598: DOUBLE
45599: LD_VAR 0 9
45603: INC
45604: ST_TO_ADDR
45605: LD_INT 1
45607: PUSH
45608: FOR_DOWNTO
45609: IFFALSE 45654
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45611: LD_ADDR_VAR 0 6
45615: PUSH
45616: LD_VAR 0 6
45620: PPUSH
45621: LD_VAR 0 9
45625: PUSH
45626: LD_VAR 0 7
45630: MINUS
45631: PUSH
45632: LD_INT 1
45634: PLUS
45635: PPUSH
45636: LD_VAR 0 9
45640: PUSH
45641: LD_VAR 0 7
45645: ARRAY
45646: PPUSH
45647: CALL_OW 1
45651: ST_TO_ADDR
45652: GO 45608
45654: POP
45655: POP
// end ; tmp := [ ] ;
45656: LD_ADDR_VAR 0 9
45660: PUSH
45661: EMPTY
45662: ST_TO_ADDR
// if mode then
45663: LD_VAR 0 5
45667: IFFALSE 45736
// begin for i = 1 to result do
45669: LD_ADDR_VAR 0 7
45673: PUSH
45674: DOUBLE
45675: LD_INT 1
45677: DEC
45678: ST_TO_ADDR
45679: LD_VAR 0 6
45683: PUSH
45684: FOR_TO
45685: IFFALSE 45724
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45687: LD_ADDR_VAR 0 9
45691: PUSH
45692: LD_VAR 0 9
45696: PPUSH
45697: LD_VAR 0 7
45701: PPUSH
45702: LD_VAR 0 6
45706: PUSH
45707: LD_VAR 0 7
45711: ARRAY
45712: PUSH
45713: LD_INT 1
45715: ARRAY
45716: PPUSH
45717: CALL_OW 1
45721: ST_TO_ADDR
45722: GO 45684
45724: POP
45725: POP
// result := tmp ;
45726: LD_ADDR_VAR 0 6
45730: PUSH
45731: LD_VAR 0 9
45735: ST_TO_ADDR
// end ; end ;
45736: LD_VAR 0 6
45740: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45741: LD_INT 0
45743: PPUSH
45744: PPUSH
45745: PPUSH
45746: PPUSH
45747: PPUSH
45748: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45749: LD_ADDR_VAR 0 5
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// if not x or not y then
45771: LD_VAR 0 2
45775: NOT
45776: IFTRUE 45785
45778: PUSH
45779: LD_VAR 0 3
45783: NOT
45784: OR
45785: IFFALSE 45789
// exit ;
45787: GO 47445
// if not range then
45789: LD_VAR 0 4
45793: NOT
45794: IFFALSE 45804
// range := 10 ;
45796: LD_ADDR_VAR 0 4
45800: PUSH
45801: LD_INT 10
45803: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45804: LD_ADDR_VAR 0 8
45808: PUSH
45809: LD_INT 81
45811: PUSH
45812: LD_VAR 0 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 92
45823: PUSH
45824: LD_VAR 0 2
45828: PUSH
45829: LD_VAR 0 3
45833: PUSH
45834: LD_VAR 0 4
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 21
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: PPUSH
45867: CALL_OW 69
45871: ST_TO_ADDR
// if not tmp then
45872: LD_VAR 0 8
45876: NOT
45877: IFFALSE 45881
// exit ;
45879: GO 47445
// for i in tmp do
45881: LD_ADDR_VAR 0 6
45885: PUSH
45886: LD_VAR 0 8
45890: PUSH
45891: FOR_IN
45892: IFFALSE 47420
// begin points := [ 0 , 0 , 0 ] ;
45894: LD_ADDR_VAR 0 9
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: ST_TO_ADDR
// bpoints := 1 ;
45913: LD_ADDR_VAR 0 10
45917: PUSH
45918: LD_INT 1
45920: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45921: LD_VAR 0 6
45925: PPUSH
45926: CALL_OW 247
45930: PUSH
45931: LD_INT 1
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45939
45937: GO 46521
45939: POP
// begin if GetClass ( i ) = 1 then
45940: LD_VAR 0 6
45944: PPUSH
45945: CALL_OW 257
45949: PUSH
45950: LD_INT 1
45952: EQUAL
45953: IFFALSE 45974
// points := [ 10 , 5 , 3 ] ;
45955: LD_ADDR_VAR 0 9
45959: PUSH
45960: LD_INT 10
45962: PUSH
45963: LD_INT 5
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45974: LD_VAR 0 6
45978: PPUSH
45979: CALL_OW 257
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: LD_INT 4
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: IN
45998: IFFALSE 46019
// points := [ 3 , 2 , 1 ] ;
46000: LD_ADDR_VAR 0 9
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46019: LD_VAR 0 6
46023: PPUSH
46024: CALL_OW 257
46028: PUSH
46029: LD_INT 5
46031: EQUAL
46032: IFFALSE 46053
// points := [ 130 , 5 , 2 ] ;
46034: LD_ADDR_VAR 0 9
46038: PUSH
46039: LD_INT 130
46041: PUSH
46042: LD_INT 5
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46053: LD_VAR 0 6
46057: PPUSH
46058: CALL_OW 257
46062: PUSH
46063: LD_INT 8
46065: EQUAL
46066: IFFALSE 46087
// points := [ 35 , 35 , 30 ] ;
46068: LD_ADDR_VAR 0 9
46072: PUSH
46073: LD_INT 35
46075: PUSH
46076: LD_INT 35
46078: PUSH
46079: LD_INT 30
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46087: LD_VAR 0 6
46091: PPUSH
46092: CALL_OW 257
46096: PUSH
46097: LD_INT 9
46099: EQUAL
46100: IFFALSE 46121
// points := [ 20 , 55 , 40 ] ;
46102: LD_ADDR_VAR 0 9
46106: PUSH
46107: LD_INT 20
46109: PUSH
46110: LD_INT 55
46112: PUSH
46113: LD_INT 40
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46121: LD_VAR 0 6
46125: PPUSH
46126: CALL_OW 257
46130: PUSH
46131: LD_INT 12
46133: PUSH
46134: LD_INT 16
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: IN
46141: IFFALSE 46162
// points := [ 5 , 3 , 2 ] ;
46143: LD_ADDR_VAR 0 9
46147: PUSH
46148: LD_INT 5
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46162: LD_VAR 0 6
46166: PPUSH
46167: CALL_OW 257
46171: PUSH
46172: LD_INT 17
46174: EQUAL
46175: IFFALSE 46196
// points := [ 100 , 50 , 75 ] ;
46177: LD_ADDR_VAR 0 9
46181: PUSH
46182: LD_INT 100
46184: PUSH
46185: LD_INT 50
46187: PUSH
46188: LD_INT 75
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46196: LD_VAR 0 6
46200: PPUSH
46201: CALL_OW 257
46205: PUSH
46206: LD_INT 15
46208: EQUAL
46209: IFFALSE 46230
// points := [ 10 , 5 , 3 ] ;
46211: LD_ADDR_VAR 0 9
46215: PUSH
46216: LD_INT 10
46218: PUSH
46219: LD_INT 5
46221: PUSH
46222: LD_INT 3
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46230: LD_VAR 0 6
46234: PPUSH
46235: CALL_OW 257
46239: PUSH
46240: LD_INT 14
46242: EQUAL
46243: IFFALSE 46264
// points := [ 10 , 0 , 0 ] ;
46245: LD_ADDR_VAR 0 9
46249: PUSH
46250: LD_INT 10
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46264: LD_VAR 0 6
46268: PPUSH
46269: CALL_OW 257
46273: PUSH
46274: LD_INT 11
46276: EQUAL
46277: IFFALSE 46298
// points := [ 30 , 10 , 5 ] ;
46279: LD_ADDR_VAR 0 9
46283: PUSH
46284: LD_INT 30
46286: PUSH
46287: LD_INT 10
46289: PUSH
46290: LD_INT 5
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46298: LD_VAR 0 1
46302: PPUSH
46303: LD_INT 5
46305: PPUSH
46306: CALL_OW 321
46310: PUSH
46311: LD_INT 2
46313: EQUAL
46314: IFFALSE 46331
// bpoints := bpoints * 1.8 ;
46316: LD_ADDR_VAR 0 10
46320: PUSH
46321: LD_VAR 0 10
46325: PUSH
46326: LD_REAL  1.80000000000000E+0000
46329: MUL
46330: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46331: LD_VAR 0 6
46335: PPUSH
46336: CALL_OW 257
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: LD_INT 4
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: IN
46359: IFFALSE 46379
46361: PUSH
46362: LD_VAR 0 1
46366: PPUSH
46367: LD_INT 51
46369: PPUSH
46370: CALL_OW 321
46374: PUSH
46375: LD_INT 2
46377: EQUAL
46378: AND
46379: IFFALSE 46396
// bpoints := bpoints * 1.2 ;
46381: LD_ADDR_VAR 0 10
46385: PUSH
46386: LD_VAR 0 10
46390: PUSH
46391: LD_REAL  1.20000000000000E+0000
46394: MUL
46395: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46396: LD_VAR 0 6
46400: PPUSH
46401: CALL_OW 257
46405: PUSH
46406: LD_INT 5
46408: PUSH
46409: LD_INT 7
46411: PUSH
46412: LD_INT 9
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: IN
46420: IFFALSE 46440
46422: PUSH
46423: LD_VAR 0 1
46427: PPUSH
46428: LD_INT 52
46430: PPUSH
46431: CALL_OW 321
46435: PUSH
46436: LD_INT 2
46438: EQUAL
46439: AND
46440: IFFALSE 46457
// bpoints := bpoints * 1.5 ;
46442: LD_ADDR_VAR 0 10
46446: PUSH
46447: LD_VAR 0 10
46451: PUSH
46452: LD_REAL  1.50000000000000E+0000
46455: MUL
46456: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46457: LD_VAR 0 1
46461: PPUSH
46462: LD_INT 66
46464: PPUSH
46465: CALL_OW 321
46469: PUSH
46470: LD_INT 2
46472: EQUAL
46473: IFFALSE 46490
// bpoints := bpoints * 1.1 ;
46475: LD_ADDR_VAR 0 10
46479: PUSH
46480: LD_VAR 0 10
46484: PUSH
46485: LD_REAL  1.10000000000000E+0000
46488: MUL
46489: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46490: LD_ADDR_VAR 0 10
46494: PUSH
46495: LD_VAR 0 10
46499: PUSH
46500: LD_VAR 0 6
46504: PPUSH
46505: LD_INT 1
46507: PPUSH
46508: CALL_OW 259
46512: PUSH
46513: LD_REAL  1.15000000000000E+0000
46516: MUL
46517: MUL
46518: ST_TO_ADDR
// end ; unit_vehicle :
46519: GO 47349
46521: LD_INT 2
46523: DOUBLE
46524: EQUAL
46525: IFTRUE 46529
46527: GO 47337
46529: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46530: LD_VAR 0 6
46534: PPUSH
46535: CALL_OW 264
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 42
46545: PUSH
46546: LD_INT 24
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: IN
46554: IFFALSE 46575
// points := [ 25 , 5 , 3 ] ;
46556: LD_ADDR_VAR 0 9
46560: PUSH
46561: LD_INT 25
46563: PUSH
46564: LD_INT 5
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46575: LD_VAR 0 6
46579: PPUSH
46580: CALL_OW 264
46584: PUSH
46585: LD_INT 4
46587: PUSH
46588: LD_INT 43
46590: PUSH
46591: LD_INT 25
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: IN
46599: IFFALSE 46620
// points := [ 40 , 15 , 5 ] ;
46601: LD_ADDR_VAR 0 9
46605: PUSH
46606: LD_INT 40
46608: PUSH
46609: LD_INT 15
46611: PUSH
46612: LD_INT 5
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46620: LD_VAR 0 6
46624: PPUSH
46625: CALL_OW 264
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 23
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: IN
46640: IFFALSE 46661
// points := [ 7 , 25 , 8 ] ;
46642: LD_ADDR_VAR 0 9
46646: PUSH
46647: LD_INT 7
46649: PUSH
46650: LD_INT 25
46652: PUSH
46653: LD_INT 8
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46661: LD_VAR 0 6
46665: PPUSH
46666: CALL_OW 264
46670: PUSH
46671: LD_INT 5
46673: PUSH
46674: LD_INT 27
46676: PUSH
46677: LD_INT 44
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: IN
46685: IFFALSE 46706
// points := [ 14 , 50 , 16 ] ;
46687: LD_ADDR_VAR 0 9
46691: PUSH
46692: LD_INT 14
46694: PUSH
46695: LD_INT 50
46697: PUSH
46698: LD_INT 16
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46706: LD_VAR 0 6
46710: PPUSH
46711: CALL_OW 264
46715: PUSH
46716: LD_INT 6
46718: PUSH
46719: LD_INT 46
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: IN
46726: IFFALSE 46747
// points := [ 32 , 120 , 70 ] ;
46728: LD_ADDR_VAR 0 9
46732: PUSH
46733: LD_INT 32
46735: PUSH
46736: LD_INT 120
46738: PUSH
46739: LD_INT 70
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46747: LD_VAR 0 6
46751: PPUSH
46752: CALL_OW 264
46756: PUSH
46757: LD_INT 7
46759: PUSH
46760: LD_INT 28
46762: PUSH
46763: LD_INT 45
46765: PUSH
46766: LD_INT 92
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: IN
46775: IFFALSE 46796
// points := [ 35 , 20 , 45 ] ;
46777: LD_ADDR_VAR 0 9
46781: PUSH
46782: LD_INT 35
46784: PUSH
46785: LD_INT 20
46787: PUSH
46788: LD_INT 45
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46796: LD_VAR 0 6
46800: PPUSH
46801: CALL_OW 264
46805: PUSH
46806: LD_INT 47
46808: PUSH
46809: EMPTY
46810: LIST
46811: IN
46812: IFFALSE 46833
// points := [ 67 , 45 , 75 ] ;
46814: LD_ADDR_VAR 0 9
46818: PUSH
46819: LD_INT 67
46821: PUSH
46822: LD_INT 45
46824: PUSH
46825: LD_INT 75
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46833: LD_VAR 0 6
46837: PPUSH
46838: CALL_OW 264
46842: PUSH
46843: LD_INT 26
46845: PUSH
46846: EMPTY
46847: LIST
46848: IN
46849: IFFALSE 46870
// points := [ 120 , 30 , 80 ] ;
46851: LD_ADDR_VAR 0 9
46855: PUSH
46856: LD_INT 120
46858: PUSH
46859: LD_INT 30
46861: PUSH
46862: LD_INT 80
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46870: LD_VAR 0 6
46874: PPUSH
46875: CALL_OW 264
46879: PUSH
46880: LD_INT 22
46882: PUSH
46883: EMPTY
46884: LIST
46885: IN
46886: IFFALSE 46907
// points := [ 40 , 1 , 1 ] ;
46888: LD_ADDR_VAR 0 9
46892: PUSH
46893: LD_INT 40
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46907: LD_VAR 0 6
46911: PPUSH
46912: CALL_OW 264
46916: PUSH
46917: LD_INT 29
46919: PUSH
46920: EMPTY
46921: LIST
46922: IN
46923: IFFALSE 46944
// points := [ 70 , 200 , 400 ] ;
46925: LD_ADDR_VAR 0 9
46929: PUSH
46930: LD_INT 70
46932: PUSH
46933: LD_INT 200
46935: PUSH
46936: LD_INT 400
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46944: LD_VAR 0 6
46948: PPUSH
46949: CALL_OW 264
46953: PUSH
46954: LD_INT 14
46956: PUSH
46957: LD_INT 53
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: IN
46964: IFFALSE 46985
// points := [ 40 , 10 , 20 ] ;
46966: LD_ADDR_VAR 0 9
46970: PUSH
46971: LD_INT 40
46973: PUSH
46974: LD_INT 10
46976: PUSH
46977: LD_INT 20
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46985: LD_VAR 0 6
46989: PPUSH
46990: CALL_OW 264
46994: PUSH
46995: LD_INT 9
46997: PUSH
46998: EMPTY
46999: LIST
47000: IN
47001: IFFALSE 47022
// points := [ 5 , 70 , 20 ] ;
47003: LD_ADDR_VAR 0 9
47007: PUSH
47008: LD_INT 5
47010: PUSH
47011: LD_INT 70
47013: PUSH
47014: LD_INT 20
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47022: LD_VAR 0 6
47026: PPUSH
47027: CALL_OW 264
47031: PUSH
47032: LD_INT 10
47034: PUSH
47035: EMPTY
47036: LIST
47037: IN
47038: IFFALSE 47059
// points := [ 35 , 110 , 70 ] ;
47040: LD_ADDR_VAR 0 9
47044: PUSH
47045: LD_INT 35
47047: PUSH
47048: LD_INT 110
47050: PUSH
47051: LD_INT 70
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47059: LD_VAR 0 6
47063: PPUSH
47064: CALL_OW 265
47068: PUSH
47069: LD_INT 25
47071: EQUAL
47072: IFFALSE 47093
// points := [ 80 , 65 , 100 ] ;
47074: LD_ADDR_VAR 0 9
47078: PUSH
47079: LD_INT 80
47081: PUSH
47082: LD_INT 65
47084: PUSH
47085: LD_INT 100
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47093: LD_VAR 0 6
47097: PPUSH
47098: CALL_OW 263
47102: PUSH
47103: LD_INT 1
47105: EQUAL
47106: IFFALSE 47141
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47108: LD_ADDR_VAR 0 10
47112: PUSH
47113: LD_VAR 0 10
47117: PUSH
47118: LD_VAR 0 6
47122: PPUSH
47123: CALL_OW 311
47127: PPUSH
47128: LD_INT 3
47130: PPUSH
47131: CALL_OW 259
47135: PUSH
47136: LD_INT 4
47138: MUL
47139: MUL
47140: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47141: LD_VAR 0 6
47145: PPUSH
47146: CALL_OW 263
47150: PUSH
47151: LD_INT 2
47153: EQUAL
47154: IFFALSE 47205
// begin j := IsControledBy ( i ) ;
47156: LD_ADDR_VAR 0 7
47160: PUSH
47161: LD_VAR 0 6
47165: PPUSH
47166: CALL_OW 312
47170: ST_TO_ADDR
// if j then
47171: LD_VAR 0 7
47175: IFFALSE 47205
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47177: LD_ADDR_VAR 0 10
47181: PUSH
47182: LD_VAR 0 10
47186: PUSH
47187: LD_VAR 0 7
47191: PPUSH
47192: LD_INT 3
47194: PPUSH
47195: CALL_OW 259
47199: PUSH
47200: LD_INT 3
47202: MUL
47203: MUL
47204: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47205: LD_VAR 0 6
47209: PPUSH
47210: CALL_OW 264
47214: PUSH
47215: LD_INT 5
47217: PUSH
47218: LD_INT 6
47220: PUSH
47221: LD_INT 46
47223: PUSH
47224: LD_INT 44
47226: PUSH
47227: LD_INT 47
47229: PUSH
47230: LD_INT 45
47232: PUSH
47233: LD_INT 28
47235: PUSH
47236: LD_INT 7
47238: PUSH
47239: LD_INT 27
47241: PUSH
47242: LD_INT 29
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: IN
47257: IFFALSE 47277
47259: PUSH
47260: LD_VAR 0 1
47264: PPUSH
47265: LD_INT 52
47267: PPUSH
47268: CALL_OW 321
47272: PUSH
47273: LD_INT 2
47275: EQUAL
47276: AND
47277: IFFALSE 47294
// bpoints := bpoints * 1.2 ;
47279: LD_ADDR_VAR 0 10
47283: PUSH
47284: LD_VAR 0 10
47288: PUSH
47289: LD_REAL  1.20000000000000E+0000
47292: MUL
47293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47294: LD_VAR 0 6
47298: PPUSH
47299: CALL_OW 264
47303: PUSH
47304: LD_INT 6
47306: PUSH
47307: LD_INT 46
47309: PUSH
47310: LD_INT 47
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: IN
47318: IFFALSE 47335
// bpoints := bpoints * 1.2 ;
47320: LD_ADDR_VAR 0 10
47324: PUSH
47325: LD_VAR 0 10
47329: PUSH
47330: LD_REAL  1.20000000000000E+0000
47333: MUL
47334: ST_TO_ADDR
// end ; unit_building :
47335: GO 47349
47337: LD_INT 3
47339: DOUBLE
47340: EQUAL
47341: IFTRUE 47345
47343: GO 47348
47345: POP
// ; end ;
47346: GO 47349
47348: POP
// for j = 1 to 3 do
47349: LD_ADDR_VAR 0 7
47353: PUSH
47354: DOUBLE
47355: LD_INT 1
47357: DEC
47358: ST_TO_ADDR
47359: LD_INT 3
47361: PUSH
47362: FOR_TO
47363: IFFALSE 47416
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47365: LD_ADDR_VAR 0 5
47369: PUSH
47370: LD_VAR 0 5
47374: PPUSH
47375: LD_VAR 0 7
47379: PPUSH
47380: LD_VAR 0 5
47384: PUSH
47385: LD_VAR 0 7
47389: ARRAY
47390: PUSH
47391: LD_VAR 0 9
47395: PUSH
47396: LD_VAR 0 7
47400: ARRAY
47401: PUSH
47402: LD_VAR 0 10
47406: MUL
47407: PLUS
47408: PPUSH
47409: CALL_OW 1
47413: ST_TO_ADDR
47414: GO 47362
47416: POP
47417: POP
// end ;
47418: GO 45891
47420: POP
47421: POP
// result := Replace ( result , 4 , tmp ) ;
47422: LD_ADDR_VAR 0 5
47426: PUSH
47427: LD_VAR 0 5
47431: PPUSH
47432: LD_INT 4
47434: PPUSH
47435: LD_VAR 0 8
47439: PPUSH
47440: CALL_OW 1
47444: ST_TO_ADDR
// end ;
47445: LD_VAR 0 5
47449: RET
// export function DangerAtRange ( unit , range ) ; begin
47450: LD_INT 0
47452: PPUSH
// if not unit then
47453: LD_VAR 0 1
47457: NOT
47458: IFFALSE 47462
// exit ;
47460: GO 47507
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47462: LD_ADDR_VAR 0 3
47466: PUSH
47467: LD_VAR 0 1
47471: PPUSH
47472: CALL_OW 255
47476: PPUSH
47477: LD_VAR 0 1
47481: PPUSH
47482: CALL_OW 250
47486: PPUSH
47487: LD_VAR 0 1
47491: PPUSH
47492: CALL_OW 251
47496: PPUSH
47497: LD_VAR 0 2
47501: PPUSH
47502: CALL 45741 0 4
47506: ST_TO_ADDR
// end ;
47507: LD_VAR 0 3
47511: RET
// export function DangerInArea ( side , area ) ; begin
47512: LD_INT 0
47514: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47515: LD_ADDR_VAR 0 3
47519: PUSH
47520: LD_VAR 0 2
47524: PPUSH
47525: LD_INT 81
47527: PUSH
47528: LD_VAR 0 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PPUSH
47537: CALL_OW 70
47541: ST_TO_ADDR
// end ;
47542: LD_VAR 0 3
47546: RET
// export function IsExtension ( b ) ; begin
47547: LD_INT 0
47549: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47550: LD_ADDR_VAR 0 2
47554: PUSH
47555: LD_VAR 0 1
47559: PUSH
47560: LD_INT 23
47562: PUSH
47563: LD_INT 20
47565: PUSH
47566: LD_INT 22
47568: PUSH
47569: LD_INT 17
47571: PUSH
47572: LD_INT 24
47574: PUSH
47575: LD_INT 21
47577: PUSH
47578: LD_INT 19
47580: PUSH
47581: LD_INT 16
47583: PUSH
47584: LD_INT 25
47586: PUSH
47587: LD_INT 18
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: IN
47602: ST_TO_ADDR
// end ;
47603: LD_VAR 0 2
47607: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47608: LD_INT 0
47610: PPUSH
47611: PPUSH
47612: PPUSH
// result := [ ] ;
47613: LD_ADDR_VAR 0 4
47617: PUSH
47618: EMPTY
47619: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47620: LD_ADDR_VAR 0 5
47624: PUSH
47625: LD_VAR 0 2
47629: PPUSH
47630: LD_INT 21
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PPUSH
47640: CALL_OW 70
47644: ST_TO_ADDR
// if not tmp then
47645: LD_VAR 0 5
47649: NOT
47650: IFFALSE 47654
// exit ;
47652: GO 47718
// if checkLink then
47654: LD_VAR 0 3
47658: IFFALSE 47708
// begin for i in tmp do
47660: LD_ADDR_VAR 0 6
47664: PUSH
47665: LD_VAR 0 5
47669: PUSH
47670: FOR_IN
47671: IFFALSE 47706
// if GetBase ( i ) <> base then
47673: LD_VAR 0 6
47677: PPUSH
47678: CALL_OW 274
47682: PUSH
47683: LD_VAR 0 1
47687: NONEQUAL
47688: IFFALSE 47704
// ComLinkToBase ( base , i ) ;
47690: LD_VAR 0 1
47694: PPUSH
47695: LD_VAR 0 6
47699: PPUSH
47700: CALL_OW 169
47704: GO 47670
47706: POP
47707: POP
// end ; result := tmp ;
47708: LD_ADDR_VAR 0 4
47712: PUSH
47713: LD_VAR 0 5
47717: ST_TO_ADDR
// end ;
47718: LD_VAR 0 4
47722: RET
// export function ComComplete ( units , b ) ; var i ; begin
47723: LD_INT 0
47725: PPUSH
47726: PPUSH
// if not units then
47727: LD_VAR 0 1
47731: NOT
47732: IFFALSE 47736
// exit ;
47734: GO 47826
// for i in units do
47736: LD_ADDR_VAR 0 4
47740: PUSH
47741: LD_VAR 0 1
47745: PUSH
47746: FOR_IN
47747: IFFALSE 47824
// if BuildingStatus ( b ) = bs_build then
47749: LD_VAR 0 2
47753: PPUSH
47754: CALL_OW 461
47758: PUSH
47759: LD_INT 1
47761: EQUAL
47762: IFFALSE 47822
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47764: LD_VAR 0 4
47768: PPUSH
47769: LD_STRING h
47771: PUSH
47772: LD_VAR 0 2
47776: PPUSH
47777: CALL_OW 250
47781: PUSH
47782: LD_VAR 0 2
47786: PPUSH
47787: CALL_OW 251
47791: PUSH
47792: LD_VAR 0 2
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: PPUSH
47818: CALL_OW 446
47822: GO 47746
47824: POP
47825: POP
// end ;
47826: LD_VAR 0 3
47830: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47831: LD_INT 0
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
47837: PPUSH
47838: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47839: LD_VAR 0 1
47843: NOT
47844: IFTRUE 47861
47846: PUSH
47847: LD_VAR 0 1
47851: PPUSH
47852: CALL_OW 263
47856: PUSH
47857: LD_INT 2
47859: NONEQUAL
47860: OR
47861: IFFALSE 47865
// exit ;
47863: GO 48181
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47865: LD_ADDR_VAR 0 6
47869: PUSH
47870: LD_INT 22
47872: PUSH
47873: LD_VAR 0 1
47877: PPUSH
47878: CALL_OW 255
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 30
47892: PUSH
47893: LD_INT 36
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 34
47902: PUSH
47903: LD_INT 31
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PPUSH
47919: CALL_OW 69
47923: ST_TO_ADDR
// if not tmp then
47924: LD_VAR 0 6
47928: NOT
47929: IFFALSE 47933
// exit ;
47931: GO 48181
// result := [ ] ;
47933: LD_ADDR_VAR 0 2
47937: PUSH
47938: EMPTY
47939: ST_TO_ADDR
// for i in tmp do
47940: LD_ADDR_VAR 0 3
47944: PUSH
47945: LD_VAR 0 6
47949: PUSH
47950: FOR_IN
47951: IFFALSE 48022
// begin t := UnitsInside ( i ) ;
47953: LD_ADDR_VAR 0 4
47957: PUSH
47958: LD_VAR 0 3
47962: PPUSH
47963: CALL_OW 313
47967: ST_TO_ADDR
// if t then
47968: LD_VAR 0 4
47972: IFFALSE 48020
// for j in t do
47974: LD_ADDR_VAR 0 7
47978: PUSH
47979: LD_VAR 0 4
47983: PUSH
47984: FOR_IN
47985: IFFALSE 48018
// result := Replace ( result , result + 1 , j ) ;
47987: LD_ADDR_VAR 0 2
47991: PUSH
47992: LD_VAR 0 2
47996: PPUSH
47997: LD_VAR 0 2
48001: PUSH
48002: LD_INT 1
48004: PLUS
48005: PPUSH
48006: LD_VAR 0 7
48010: PPUSH
48011: CALL_OW 1
48015: ST_TO_ADDR
48016: GO 47984
48018: POP
48019: POP
// end ;
48020: GO 47950
48022: POP
48023: POP
// if not result then
48024: LD_VAR 0 2
48028: NOT
48029: IFFALSE 48033
// exit ;
48031: GO 48181
// mech := result [ 1 ] ;
48033: LD_ADDR_VAR 0 5
48037: PUSH
48038: LD_VAR 0 2
48042: PUSH
48043: LD_INT 1
48045: ARRAY
48046: ST_TO_ADDR
// if result > 1 then
48047: LD_VAR 0 2
48051: PUSH
48052: LD_INT 1
48054: GREATER
48055: IFFALSE 48167
// begin for i = 2 to result do
48057: LD_ADDR_VAR 0 3
48061: PUSH
48062: DOUBLE
48063: LD_INT 2
48065: DEC
48066: ST_TO_ADDR
48067: LD_VAR 0 2
48071: PUSH
48072: FOR_TO
48073: IFFALSE 48165
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48075: LD_ADDR_VAR 0 4
48079: PUSH
48080: LD_VAR 0 2
48084: PUSH
48085: LD_VAR 0 3
48089: ARRAY
48090: PPUSH
48091: LD_INT 3
48093: PPUSH
48094: CALL_OW 259
48098: PUSH
48099: LD_VAR 0 2
48103: PUSH
48104: LD_VAR 0 3
48108: ARRAY
48109: PPUSH
48110: CALL_OW 432
48114: MINUS
48115: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48116: LD_VAR 0 4
48120: PUSH
48121: LD_VAR 0 5
48125: PPUSH
48126: LD_INT 3
48128: PPUSH
48129: CALL_OW 259
48133: PUSH
48134: LD_VAR 0 5
48138: PPUSH
48139: CALL_OW 432
48143: MINUS
48144: GREATEREQUAL
48145: IFFALSE 48163
// mech := result [ i ] ;
48147: LD_ADDR_VAR 0 5
48151: PUSH
48152: LD_VAR 0 2
48156: PUSH
48157: LD_VAR 0 3
48161: ARRAY
48162: ST_TO_ADDR
// end ;
48163: GO 48072
48165: POP
48166: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48167: LD_VAR 0 1
48171: PPUSH
48172: LD_VAR 0 5
48176: PPUSH
48177: CALL_OW 135
// end ;
48181: LD_VAR 0 2
48185: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48186: LD_INT 0
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
// result := [ ] ;
48201: LD_ADDR_VAR 0 7
48205: PUSH
48206: EMPTY
48207: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48208: LD_VAR 0 1
48212: PPUSH
48213: CALL_OW 266
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: IN
48228: NOT
48229: IFFALSE 48233
// exit ;
48231: GO 49873
// if name then
48233: LD_VAR 0 3
48237: IFFALSE 48253
// SetBName ( base_dep , name ) ;
48239: LD_VAR 0 1
48243: PPUSH
48244: LD_VAR 0 3
48248: PPUSH
48249: CALL_OW 500
// base := GetBase ( base_dep ) ;
48253: LD_ADDR_VAR 0 15
48257: PUSH
48258: LD_VAR 0 1
48262: PPUSH
48263: CALL_OW 274
48267: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48268: LD_ADDR_VAR 0 16
48272: PUSH
48273: LD_VAR 0 1
48277: PPUSH
48278: CALL_OW 255
48282: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48283: LD_ADDR_VAR 0 17
48287: PUSH
48288: LD_VAR 0 1
48292: PPUSH
48293: CALL_OW 248
48297: ST_TO_ADDR
// if sources then
48298: LD_VAR 0 5
48302: IFFALSE 48349
// for i = 1 to 3 do
48304: LD_ADDR_VAR 0 8
48308: PUSH
48309: DOUBLE
48310: LD_INT 1
48312: DEC
48313: ST_TO_ADDR
48314: LD_INT 3
48316: PUSH
48317: FOR_TO
48318: IFFALSE 48347
// AddResourceType ( base , i , sources [ i ] ) ;
48320: LD_VAR 0 15
48324: PPUSH
48325: LD_VAR 0 8
48329: PPUSH
48330: LD_VAR 0 5
48334: PUSH
48335: LD_VAR 0 8
48339: ARRAY
48340: PPUSH
48341: CALL_OW 276
48345: GO 48317
48347: POP
48348: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48349: LD_ADDR_VAR 0 18
48353: PUSH
48354: LD_VAR 0 15
48358: PPUSH
48359: LD_VAR 0 2
48363: PPUSH
48364: LD_INT 1
48366: PPUSH
48367: CALL 47608 0 3
48371: ST_TO_ADDR
// InitHc ;
48372: CALL_OW 19
// InitUc ;
48376: CALL_OW 18
// uc_side := side ;
48380: LD_ADDR_OWVAR 20
48384: PUSH
48385: LD_VAR 0 16
48389: ST_TO_ADDR
// uc_nation := nation ;
48390: LD_ADDR_OWVAR 21
48394: PUSH
48395: LD_VAR 0 17
48399: ST_TO_ADDR
// if buildings then
48400: LD_VAR 0 18
48404: IFFALSE 49732
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48406: LD_ADDR_VAR 0 19
48410: PUSH
48411: LD_VAR 0 18
48415: PPUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 30
48421: PUSH
48422: LD_INT 29
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 30
48431: PUSH
48432: LD_INT 30
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: PPUSH
48444: CALL_OW 72
48448: ST_TO_ADDR
// if tmp then
48449: LD_VAR 0 19
48453: IFFALSE 48501
// for i in tmp do
48455: LD_ADDR_VAR 0 8
48459: PUSH
48460: LD_VAR 0 19
48464: PUSH
48465: FOR_IN
48466: IFFALSE 48499
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48468: LD_VAR 0 8
48472: PPUSH
48473: CALL_OW 250
48477: PPUSH
48478: LD_VAR 0 8
48482: PPUSH
48483: CALL_OW 251
48487: PPUSH
48488: LD_VAR 0 16
48492: PPUSH
48493: CALL_OW 441
48497: GO 48465
48499: POP
48500: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48501: LD_VAR 0 18
48505: PPUSH
48506: LD_INT 2
48508: PUSH
48509: LD_INT 30
48511: PUSH
48512: LD_INT 32
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 30
48521: PUSH
48522: LD_INT 33
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: PPUSH
48534: CALL_OW 72
48538: IFFALSE 48626
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48540: LD_ADDR_VAR 0 8
48544: PUSH
48545: LD_VAR 0 18
48549: PPUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 30
48555: PUSH
48556: LD_INT 32
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 30
48565: PUSH
48566: LD_INT 33
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: PPUSH
48578: CALL_OW 72
48582: PUSH
48583: FOR_IN
48584: IFFALSE 48624
// begin if not GetBWeapon ( i ) then
48586: LD_VAR 0 8
48590: PPUSH
48591: CALL_OW 269
48595: NOT
48596: IFFALSE 48622
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48598: LD_VAR 0 8
48602: PPUSH
48603: LD_VAR 0 8
48607: PPUSH
48608: LD_VAR 0 2
48612: PPUSH
48613: CALL 49878 0 2
48617: PPUSH
48618: CALL_OW 431
// end ;
48622: GO 48583
48624: POP
48625: POP
// end ; for i = 1 to personel do
48626: LD_ADDR_VAR 0 8
48630: PUSH
48631: DOUBLE
48632: LD_INT 1
48634: DEC
48635: ST_TO_ADDR
48636: LD_VAR 0 6
48640: PUSH
48641: FOR_TO
48642: IFFALSE 49712
// begin if i > 4 then
48644: LD_VAR 0 8
48648: PUSH
48649: LD_INT 4
48651: GREATER
48652: IFFALSE 48656
// break ;
48654: GO 49712
// case i of 1 :
48656: LD_VAR 0 8
48660: PUSH
48661: LD_INT 1
48663: DOUBLE
48664: EQUAL
48665: IFTRUE 48669
48667: GO 48749
48669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48670: LD_ADDR_VAR 0 12
48674: PUSH
48675: LD_VAR 0 18
48679: PPUSH
48680: LD_INT 22
48682: PUSH
48683: LD_VAR 0 16
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 58
48694: PUSH
48695: EMPTY
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 30
48703: PUSH
48704: LD_INT 32
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 30
48713: PUSH
48714: LD_INT 4
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 30
48723: PUSH
48724: LD_INT 5
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: PPUSH
48742: CALL_OW 72
48746: ST_TO_ADDR
48747: GO 48971
48749: LD_INT 2
48751: DOUBLE
48752: EQUAL
48753: IFTRUE 48757
48755: GO 48819
48757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48758: LD_ADDR_VAR 0 12
48762: PUSH
48763: LD_VAR 0 18
48767: PPUSH
48768: LD_INT 22
48770: PUSH
48771: LD_VAR 0 16
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 30
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 30
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PPUSH
48812: CALL_OW 72
48816: ST_TO_ADDR
48817: GO 48971
48819: LD_INT 3
48821: DOUBLE
48822: EQUAL
48823: IFTRUE 48827
48825: GO 48889
48827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48828: LD_ADDR_VAR 0 12
48832: PUSH
48833: LD_VAR 0 18
48837: PPUSH
48838: LD_INT 22
48840: PUSH
48841: LD_VAR 0 16
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 30
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 30
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PPUSH
48882: CALL_OW 72
48886: ST_TO_ADDR
48887: GO 48971
48889: LD_INT 4
48891: DOUBLE
48892: EQUAL
48893: IFTRUE 48897
48895: GO 48970
48897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48898: LD_ADDR_VAR 0 12
48902: PUSH
48903: LD_VAR 0 18
48907: PPUSH
48908: LD_INT 22
48910: PUSH
48911: LD_VAR 0 16
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 30
48925: PUSH
48926: LD_INT 6
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 30
48935: PUSH
48936: LD_INT 7
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 30
48945: PUSH
48946: LD_INT 8
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PPUSH
48963: CALL_OW 72
48967: ST_TO_ADDR
48968: GO 48971
48970: POP
// if i = 1 then
48971: LD_VAR 0 8
48975: PUSH
48976: LD_INT 1
48978: EQUAL
48979: IFFALSE 49090
// begin tmp := [ ] ;
48981: LD_ADDR_VAR 0 19
48985: PUSH
48986: EMPTY
48987: ST_TO_ADDR
// for j in f do
48988: LD_ADDR_VAR 0 9
48992: PUSH
48993: LD_VAR 0 12
48997: PUSH
48998: FOR_IN
48999: IFFALSE 49072
// if GetBType ( j ) = b_bunker then
49001: LD_VAR 0 9
49005: PPUSH
49006: CALL_OW 266
49010: PUSH
49011: LD_INT 32
49013: EQUAL
49014: IFFALSE 49041
// tmp := Insert ( tmp , 1 , j ) else
49016: LD_ADDR_VAR 0 19
49020: PUSH
49021: LD_VAR 0 19
49025: PPUSH
49026: LD_INT 1
49028: PPUSH
49029: LD_VAR 0 9
49033: PPUSH
49034: CALL_OW 2
49038: ST_TO_ADDR
49039: GO 49070
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49041: LD_ADDR_VAR 0 19
49045: PUSH
49046: LD_VAR 0 19
49050: PPUSH
49051: LD_VAR 0 19
49055: PUSH
49056: LD_INT 1
49058: PLUS
49059: PPUSH
49060: LD_VAR 0 9
49064: PPUSH
49065: CALL_OW 2
49069: ST_TO_ADDR
49070: GO 48998
49072: POP
49073: POP
// if tmp then
49074: LD_VAR 0 19
49078: IFFALSE 49090
// f := tmp ;
49080: LD_ADDR_VAR 0 12
49084: PUSH
49085: LD_VAR 0 19
49089: ST_TO_ADDR
// end ; x := personel [ i ] ;
49090: LD_ADDR_VAR 0 13
49094: PUSH
49095: LD_VAR 0 6
49099: PUSH
49100: LD_VAR 0 8
49104: ARRAY
49105: ST_TO_ADDR
// if x = - 1 then
49106: LD_VAR 0 13
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: EQUAL
49115: IFFALSE 49326
// begin for j in f do
49117: LD_ADDR_VAR 0 9
49121: PUSH
49122: LD_VAR 0 12
49126: PUSH
49127: FOR_IN
49128: IFFALSE 49322
// repeat InitHc ;
49130: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49134: LD_VAR 0 9
49138: PPUSH
49139: CALL_OW 266
49143: PUSH
49144: LD_INT 5
49146: EQUAL
49147: IFFALSE 49217
// begin if UnitsInside ( j ) < 3 then
49149: LD_VAR 0 9
49153: PPUSH
49154: CALL_OW 313
49158: PUSH
49159: LD_INT 3
49161: LESS
49162: IFFALSE 49198
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49164: LD_INT 0
49166: PPUSH
49167: LD_INT 5
49169: PUSH
49170: LD_INT 8
49172: PUSH
49173: LD_INT 9
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: PUSH
49181: LD_VAR 0 17
49185: ARRAY
49186: PPUSH
49187: LD_VAR 0 4
49191: PPUSH
49192: CALL_OW 380
49196: GO 49215
// PrepareHuman ( false , i , skill ) ;
49198: LD_INT 0
49200: PPUSH
49201: LD_VAR 0 8
49205: PPUSH
49206: LD_VAR 0 4
49210: PPUSH
49211: CALL_OW 380
// end else
49215: GO 49234
// PrepareHuman ( false , i , skill ) ;
49217: LD_INT 0
49219: PPUSH
49220: LD_VAR 0 8
49224: PPUSH
49225: LD_VAR 0 4
49229: PPUSH
49230: CALL_OW 380
// un := CreateHuman ;
49234: LD_ADDR_VAR 0 14
49238: PUSH
49239: CALL_OW 44
49243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49244: LD_ADDR_VAR 0 7
49248: PUSH
49249: LD_VAR 0 7
49253: PPUSH
49254: LD_INT 1
49256: PPUSH
49257: LD_VAR 0 14
49261: PPUSH
49262: CALL_OW 2
49266: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49267: LD_VAR 0 14
49271: PPUSH
49272: LD_VAR 0 9
49276: PPUSH
49277: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49281: LD_VAR 0 9
49285: PPUSH
49286: CALL_OW 313
49290: PUSH
49291: LD_INT 6
49293: EQUAL
49294: IFTRUE 49318
49296: PUSH
49297: LD_VAR 0 9
49301: PPUSH
49302: CALL_OW 266
49306: PUSH
49307: LD_INT 32
49309: PUSH
49310: LD_INT 31
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: IN
49317: OR
49318: IFFALSE 49130
49320: GO 49127
49322: POP
49323: POP
// end else
49324: GO 49710
// for j = 1 to x do
49326: LD_ADDR_VAR 0 9
49330: PUSH
49331: DOUBLE
49332: LD_INT 1
49334: DEC
49335: ST_TO_ADDR
49336: LD_VAR 0 13
49340: PUSH
49341: FOR_TO
49342: IFFALSE 49708
// begin InitHc ;
49344: CALL_OW 19
// if not f then
49348: LD_VAR 0 12
49352: NOT
49353: IFFALSE 49442
// begin PrepareHuman ( false , i , skill ) ;
49355: LD_INT 0
49357: PPUSH
49358: LD_VAR 0 8
49362: PPUSH
49363: LD_VAR 0 4
49367: PPUSH
49368: CALL_OW 380
// un := CreateHuman ;
49372: LD_ADDR_VAR 0 14
49376: PUSH
49377: CALL_OW 44
49381: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49382: LD_ADDR_VAR 0 7
49386: PUSH
49387: LD_VAR 0 7
49391: PPUSH
49392: LD_INT 1
49394: PPUSH
49395: LD_VAR 0 14
49399: PPUSH
49400: CALL_OW 2
49404: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49405: LD_VAR 0 14
49409: PPUSH
49410: LD_VAR 0 1
49414: PPUSH
49415: CALL_OW 250
49419: PPUSH
49420: LD_VAR 0 1
49424: PPUSH
49425: CALL_OW 251
49429: PPUSH
49430: LD_INT 10
49432: PPUSH
49433: LD_INT 0
49435: PPUSH
49436: CALL_OW 50
// continue ;
49440: GO 49341
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49442: LD_VAR 0 12
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: PPUSH
49451: CALL_OW 313
49455: IFFALSE 49483
49457: PUSH
49458: LD_VAR 0 12
49462: PUSH
49463: LD_INT 1
49465: ARRAY
49466: PPUSH
49467: CALL_OW 266
49471: PUSH
49472: LD_INT 32
49474: PUSH
49475: LD_INT 31
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: IN
49482: AND
49483: IFTRUE 49504
49485: PUSH
49486: LD_VAR 0 12
49490: PUSH
49491: LD_INT 1
49493: ARRAY
49494: PPUSH
49495: CALL_OW 313
49499: PUSH
49500: LD_INT 6
49502: EQUAL
49503: OR
49504: IFFALSE 49524
// f := Delete ( f , 1 ) ;
49506: LD_ADDR_VAR 0 12
49510: PUSH
49511: LD_VAR 0 12
49515: PPUSH
49516: LD_INT 1
49518: PPUSH
49519: CALL_OW 3
49523: ST_TO_ADDR
// if not f then
49524: LD_VAR 0 12
49528: NOT
49529: IFFALSE 49547
// begin x := x + 2 ;
49531: LD_ADDR_VAR 0 13
49535: PUSH
49536: LD_VAR 0 13
49540: PUSH
49541: LD_INT 2
49543: PLUS
49544: ST_TO_ADDR
// continue ;
49545: GO 49341
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49547: LD_VAR 0 12
49551: PUSH
49552: LD_INT 1
49554: ARRAY
49555: PPUSH
49556: CALL_OW 266
49560: PUSH
49561: LD_INT 5
49563: EQUAL
49564: IFFALSE 49638
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49566: LD_VAR 0 12
49570: PUSH
49571: LD_INT 1
49573: ARRAY
49574: PPUSH
49575: CALL_OW 313
49579: PUSH
49580: LD_INT 3
49582: LESS
49583: IFFALSE 49619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49585: LD_INT 0
49587: PPUSH
49588: LD_INT 5
49590: PUSH
49591: LD_INT 8
49593: PUSH
49594: LD_INT 9
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: PUSH
49602: LD_VAR 0 17
49606: ARRAY
49607: PPUSH
49608: LD_VAR 0 4
49612: PPUSH
49613: CALL_OW 380
49617: GO 49636
// PrepareHuman ( false , i , skill ) ;
49619: LD_INT 0
49621: PPUSH
49622: LD_VAR 0 8
49626: PPUSH
49627: LD_VAR 0 4
49631: PPUSH
49632: CALL_OW 380
// end else
49636: GO 49655
// PrepareHuman ( false , i , skill ) ;
49638: LD_INT 0
49640: PPUSH
49641: LD_VAR 0 8
49645: PPUSH
49646: LD_VAR 0 4
49650: PPUSH
49651: CALL_OW 380
// un := CreateHuman ;
49655: LD_ADDR_VAR 0 14
49659: PUSH
49660: CALL_OW 44
49664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49665: LD_ADDR_VAR 0 7
49669: PUSH
49670: LD_VAR 0 7
49674: PPUSH
49675: LD_INT 1
49677: PPUSH
49678: LD_VAR 0 14
49682: PPUSH
49683: CALL_OW 2
49687: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49688: LD_VAR 0 14
49692: PPUSH
49693: LD_VAR 0 12
49697: PUSH
49698: LD_INT 1
49700: ARRAY
49701: PPUSH
49702: CALL_OW 52
// end ;
49706: GO 49341
49708: POP
49709: POP
// end ;
49710: GO 48641
49712: POP
49713: POP
// result := result ^ buildings ;
49714: LD_ADDR_VAR 0 7
49718: PUSH
49719: LD_VAR 0 7
49723: PUSH
49724: LD_VAR 0 18
49728: ADD
49729: ST_TO_ADDR
// end else
49730: GO 49873
// begin for i = 1 to personel do
49732: LD_ADDR_VAR 0 8
49736: PUSH
49737: DOUBLE
49738: LD_INT 1
49740: DEC
49741: ST_TO_ADDR
49742: LD_VAR 0 6
49746: PUSH
49747: FOR_TO
49748: IFFALSE 49871
// begin if i > 4 then
49750: LD_VAR 0 8
49754: PUSH
49755: LD_INT 4
49757: GREATER
49758: IFFALSE 49762
// break ;
49760: GO 49871
// x := personel [ i ] ;
49762: LD_ADDR_VAR 0 13
49766: PUSH
49767: LD_VAR 0 6
49771: PUSH
49772: LD_VAR 0 8
49776: ARRAY
49777: ST_TO_ADDR
// if x = - 1 then
49778: LD_VAR 0 13
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: EQUAL
49787: IFFALSE 49791
// continue ;
49789: GO 49747
// PrepareHuman ( false , i , skill ) ;
49791: LD_INT 0
49793: PPUSH
49794: LD_VAR 0 8
49798: PPUSH
49799: LD_VAR 0 4
49803: PPUSH
49804: CALL_OW 380
// un := CreateHuman ;
49808: LD_ADDR_VAR 0 14
49812: PUSH
49813: CALL_OW 44
49817: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49818: LD_VAR 0 14
49822: PPUSH
49823: LD_VAR 0 1
49827: PPUSH
49828: CALL_OW 250
49832: PPUSH
49833: LD_VAR 0 1
49837: PPUSH
49838: CALL_OW 251
49842: PPUSH
49843: LD_INT 10
49845: PPUSH
49846: LD_INT 0
49848: PPUSH
49849: CALL_OW 50
// result := result ^ un ;
49853: LD_ADDR_VAR 0 7
49857: PUSH
49858: LD_VAR 0 7
49862: PUSH
49863: LD_VAR 0 14
49867: ADD
49868: ST_TO_ADDR
// end ;
49869: GO 49747
49871: POP
49872: POP
// end ; end ;
49873: LD_VAR 0 7
49877: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49878: LD_INT 0
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
// result := false ;
49896: LD_ADDR_VAR 0 3
49900: PUSH
49901: LD_INT 0
49903: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49904: LD_VAR 0 1
49908: NOT
49909: IFTRUE 49934
49911: PUSH
49912: LD_VAR 0 1
49916: PPUSH
49917: CALL_OW 266
49921: PUSH
49922: LD_INT 32
49924: PUSH
49925: LD_INT 33
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: IN
49932: NOT
49933: OR
49934: IFFALSE 49938
// exit ;
49936: GO 51073
// nat := GetNation ( tower ) ;
49938: LD_ADDR_VAR 0 12
49942: PUSH
49943: LD_VAR 0 1
49947: PPUSH
49948: CALL_OW 248
49952: ST_TO_ADDR
// side := GetSide ( tower ) ;
49953: LD_ADDR_VAR 0 16
49957: PUSH
49958: LD_VAR 0 1
49962: PPUSH
49963: CALL_OW 255
49967: ST_TO_ADDR
// x := GetX ( tower ) ;
49968: LD_ADDR_VAR 0 10
49972: PUSH
49973: LD_VAR 0 1
49977: PPUSH
49978: CALL_OW 250
49982: ST_TO_ADDR
// y := GetY ( tower ) ;
49983: LD_ADDR_VAR 0 11
49987: PUSH
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL_OW 251
49997: ST_TO_ADDR
// if not x or not y then
49998: LD_VAR 0 10
50002: NOT
50003: IFTRUE 50012
50005: PUSH
50006: LD_VAR 0 11
50010: NOT
50011: OR
50012: IFFALSE 50016
// exit ;
50014: GO 51073
// weapon := 0 ;
50016: LD_ADDR_VAR 0 18
50020: PUSH
50021: LD_INT 0
50023: ST_TO_ADDR
// fac_list := [ ] ;
50024: LD_ADDR_VAR 0 17
50028: PUSH
50029: EMPTY
50030: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50031: LD_ADDR_VAR 0 6
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: CALL_OW 274
50045: PPUSH
50046: LD_VAR 0 2
50050: PPUSH
50051: LD_INT 0
50053: PPUSH
50054: CALL 47608 0 3
50058: PPUSH
50059: LD_INT 30
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PPUSH
50069: CALL_OW 72
50073: ST_TO_ADDR
// if not factories then
50074: LD_VAR 0 6
50078: NOT
50079: IFFALSE 50083
// exit ;
50081: GO 51073
// for i in factories do
50083: LD_ADDR_VAR 0 8
50087: PUSH
50088: LD_VAR 0 6
50092: PUSH
50093: FOR_IN
50094: IFFALSE 50119
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50096: LD_ADDR_VAR 0 17
50100: PUSH
50101: LD_VAR 0 17
50105: PUSH
50106: LD_VAR 0 8
50110: PPUSH
50111: CALL_OW 478
50115: UNION
50116: ST_TO_ADDR
50117: GO 50093
50119: POP
50120: POP
// if not fac_list then
50121: LD_VAR 0 17
50125: NOT
50126: IFFALSE 50130
// exit ;
50128: GO 51073
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50130: LD_ADDR_VAR 0 5
50134: PUSH
50135: LD_INT 4
50137: PUSH
50138: LD_INT 5
50140: PUSH
50141: LD_INT 9
50143: PUSH
50144: LD_INT 10
50146: PUSH
50147: LD_INT 6
50149: PUSH
50150: LD_INT 7
50152: PUSH
50153: LD_INT 11
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 27
50167: PUSH
50168: LD_INT 28
50170: PUSH
50171: LD_INT 26
50173: PUSH
50174: LD_INT 30
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 43
50185: PUSH
50186: LD_INT 44
50188: PUSH
50189: LD_INT 46
50191: PUSH
50192: LD_INT 45
50194: PUSH
50195: LD_INT 47
50197: PUSH
50198: LD_INT 49
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_VAR 0 12
50218: ARRAY
50219: ST_TO_ADDR
// list := list isect fac_list ;
50220: LD_ADDR_VAR 0 5
50224: PUSH
50225: LD_VAR 0 5
50229: PUSH
50230: LD_VAR 0 17
50234: ISECT
50235: ST_TO_ADDR
// if not list then
50236: LD_VAR 0 5
50240: NOT
50241: IFFALSE 50245
// exit ;
50243: GO 51073
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50245: LD_VAR 0 12
50249: PUSH
50250: LD_INT 3
50252: EQUAL
50253: IFFALSE 50265
50255: PUSH
50256: LD_INT 49
50258: PUSH
50259: LD_VAR 0 5
50263: IN
50264: AND
50265: IFFALSE 50285
50267: PUSH
50268: LD_INT 31
50270: PPUSH
50271: LD_VAR 0 16
50275: PPUSH
50276: CALL_OW 321
50280: PUSH
50281: LD_INT 2
50283: EQUAL
50284: AND
50285: IFFALSE 50345
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50287: LD_INT 22
50289: PUSH
50290: LD_VAR 0 16
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 35
50301: PUSH
50302: LD_INT 49
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 91
50311: PUSH
50312: LD_VAR 0 1
50316: PUSH
50317: LD_INT 10
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: PPUSH
50330: CALL_OW 69
50334: NOT
50335: IFFALSE 50345
// weapon := ru_time_lapser ;
50337: LD_ADDR_VAR 0 18
50341: PUSH
50342: LD_INT 49
50344: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50345: LD_VAR 0 12
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: IN
50360: IFFALSE 50384
50362: PUSH
50363: LD_INT 11
50365: PUSH
50366: LD_VAR 0 5
50370: IN
50371: IFTRUE 50383
50373: PUSH
50374: LD_INT 30
50376: PUSH
50377: LD_VAR 0 5
50381: IN
50382: OR
50383: AND
50384: IFFALSE 50404
50386: PUSH
50387: LD_INT 6
50389: PPUSH
50390: LD_VAR 0 16
50394: PPUSH
50395: CALL_OW 321
50399: PUSH
50400: LD_INT 2
50402: EQUAL
50403: AND
50404: IFFALSE 50571
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50406: LD_INT 22
50408: PUSH
50409: LD_VAR 0 16
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 35
50423: PUSH
50424: LD_INT 11
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 35
50433: PUSH
50434: LD_INT 30
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 91
50448: PUSH
50449: LD_VAR 0 1
50453: PUSH
50454: LD_INT 18
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: PPUSH
50467: CALL_OW 69
50471: NOT
50472: IFFALSE 50548
50474: PUSH
50475: LD_INT 22
50477: PUSH
50478: LD_VAR 0 16
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 30
50492: PUSH
50493: LD_INT 32
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 30
50502: PUSH
50503: LD_INT 33
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 91
50517: PUSH
50518: LD_VAR 0 1
50522: PUSH
50523: LD_INT 12
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: PPUSH
50539: CALL_OW 69
50543: PUSH
50544: LD_INT 2
50546: GREATER
50547: AND
50548: IFFALSE 50571
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50550: LD_ADDR_VAR 0 18
50554: PUSH
50555: LD_INT 11
50557: PUSH
50558: LD_INT 30
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_VAR 0 12
50569: ARRAY
50570: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50571: LD_VAR 0 18
50575: NOT
50576: IFFALSE 50596
50578: PUSH
50579: LD_INT 40
50581: PPUSH
50582: LD_VAR 0 16
50586: PPUSH
50587: CALL_OW 321
50591: PUSH
50592: LD_INT 2
50594: EQUAL
50595: AND
50596: IFFALSE 50632
50598: PUSH
50599: LD_INT 7
50601: PUSH
50602: LD_VAR 0 5
50606: IN
50607: IFTRUE 50619
50609: PUSH
50610: LD_INT 28
50612: PUSH
50613: LD_VAR 0 5
50617: IN
50618: OR
50619: IFTRUE 50631
50621: PUSH
50622: LD_INT 45
50624: PUSH
50625: LD_VAR 0 5
50629: IN
50630: OR
50631: AND
50632: IFFALSE 50886
// begin hex := GetHexInfo ( x , y ) ;
50634: LD_ADDR_VAR 0 4
50638: PUSH
50639: LD_VAR 0 10
50643: PPUSH
50644: LD_VAR 0 11
50648: PPUSH
50649: CALL_OW 546
50653: ST_TO_ADDR
// if hex [ 1 ] then
50654: LD_VAR 0 4
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: IFFALSE 50666
// exit ;
50664: GO 51073
// height := hex [ 2 ] ;
50666: LD_ADDR_VAR 0 15
50670: PUSH
50671: LD_VAR 0 4
50675: PUSH
50676: LD_INT 2
50678: ARRAY
50679: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50680: LD_ADDR_VAR 0 14
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 5
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// for i in tmp do
50703: LD_ADDR_VAR 0 8
50707: PUSH
50708: LD_VAR 0 14
50712: PUSH
50713: FOR_IN
50714: IFFALSE 50884
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50716: LD_ADDR_VAR 0 9
50720: PUSH
50721: LD_VAR 0 10
50725: PPUSH
50726: LD_VAR 0 8
50730: PPUSH
50731: LD_INT 5
50733: PPUSH
50734: CALL_OW 272
50738: PUSH
50739: LD_VAR 0 11
50743: PPUSH
50744: LD_VAR 0 8
50748: PPUSH
50749: LD_INT 5
50751: PPUSH
50752: CALL_OW 273
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50761: LD_VAR 0 9
50765: PUSH
50766: LD_INT 1
50768: ARRAY
50769: PPUSH
50770: LD_VAR 0 9
50774: PUSH
50775: LD_INT 2
50777: ARRAY
50778: PPUSH
50779: CALL_OW 488
50783: IFFALSE 50882
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50785: LD_ADDR_VAR 0 4
50789: PUSH
50790: LD_VAR 0 9
50794: PUSH
50795: LD_INT 1
50797: ARRAY
50798: PPUSH
50799: LD_VAR 0 9
50803: PUSH
50804: LD_INT 2
50806: ARRAY
50807: PPUSH
50808: CALL_OW 546
50812: ST_TO_ADDR
// if hex [ 1 ] then
50813: LD_VAR 0 4
50817: PUSH
50818: LD_INT 1
50820: ARRAY
50821: IFFALSE 50825
// continue ;
50823: GO 50713
// h := hex [ 2 ] ;
50825: LD_ADDR_VAR 0 13
50829: PUSH
50830: LD_VAR 0 4
50834: PUSH
50835: LD_INT 2
50837: ARRAY
50838: ST_TO_ADDR
// if h + 7 < height then
50839: LD_VAR 0 13
50843: PUSH
50844: LD_INT 7
50846: PLUS
50847: PUSH
50848: LD_VAR 0 15
50852: LESS
50853: IFFALSE 50882
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50855: LD_ADDR_VAR 0 18
50859: PUSH
50860: LD_INT 7
50862: PUSH
50863: LD_INT 28
50865: PUSH
50866: LD_INT 45
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: PUSH
50874: LD_VAR 0 12
50878: ARRAY
50879: ST_TO_ADDR
// break ;
50880: GO 50884
// end ; end ; end ;
50882: GO 50713
50884: POP
50885: POP
// end ; if not weapon then
50886: LD_VAR 0 18
50890: NOT
50891: IFFALSE 50951
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50893: LD_ADDR_VAR 0 5
50897: PUSH
50898: LD_VAR 0 5
50902: PUSH
50903: LD_INT 11
50905: PUSH
50906: LD_INT 30
50908: PUSH
50909: LD_INT 49
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: DIFF
50917: ST_TO_ADDR
// if not list then
50918: LD_VAR 0 5
50922: NOT
50923: IFFALSE 50927
// exit ;
50925: GO 51073
// weapon := list [ rand ( 1 , list ) ] ;
50927: LD_ADDR_VAR 0 18
50931: PUSH
50932: LD_VAR 0 5
50936: PUSH
50937: LD_INT 1
50939: PPUSH
50940: LD_VAR 0 5
50944: PPUSH
50945: CALL_OW 12
50949: ARRAY
50950: ST_TO_ADDR
// end ; if weapon then
50951: LD_VAR 0 18
50955: IFFALSE 51073
// begin tmp := CostOfWeapon ( weapon ) ;
50957: LD_ADDR_VAR 0 14
50961: PUSH
50962: LD_VAR 0 18
50966: PPUSH
50967: CALL_OW 451
50971: ST_TO_ADDR
// j := GetBase ( tower ) ;
50972: LD_ADDR_VAR 0 9
50976: PUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 274
50986: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50987: LD_VAR 0 9
50991: PPUSH
50992: LD_INT 1
50994: PPUSH
50995: CALL_OW 275
50999: PUSH
51000: LD_VAR 0 14
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: GREATEREQUAL
51009: IFFALSE 51035
51011: PUSH
51012: LD_VAR 0 9
51016: PPUSH
51017: LD_INT 2
51019: PPUSH
51020: CALL_OW 275
51024: PUSH
51025: LD_VAR 0 14
51029: PUSH
51030: LD_INT 2
51032: ARRAY
51033: GREATEREQUAL
51034: AND
51035: IFFALSE 51061
51037: PUSH
51038: LD_VAR 0 9
51042: PPUSH
51043: LD_INT 3
51045: PPUSH
51046: CALL_OW 275
51050: PUSH
51051: LD_VAR 0 14
51055: PUSH
51056: LD_INT 3
51058: ARRAY
51059: GREATEREQUAL
51060: AND
51061: IFFALSE 51073
// result := weapon ;
51063: LD_ADDR_VAR 0 3
51067: PUSH
51068: LD_VAR 0 18
51072: ST_TO_ADDR
// end ; end ;
51073: LD_VAR 0 3
51077: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51078: LD_INT 0
51080: PPUSH
51081: PPUSH
// result := true ;
51082: LD_ADDR_VAR 0 3
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// if array1 = array2 then
51090: LD_VAR 0 1
51094: PUSH
51095: LD_VAR 0 2
51099: EQUAL
51100: IFFALSE 51160
// begin for i = 1 to array1 do
51102: LD_ADDR_VAR 0 4
51106: PUSH
51107: DOUBLE
51108: LD_INT 1
51110: DEC
51111: ST_TO_ADDR
51112: LD_VAR 0 1
51116: PUSH
51117: FOR_TO
51118: IFFALSE 51156
// if array1 [ i ] <> array2 [ i ] then
51120: LD_VAR 0 1
51124: PUSH
51125: LD_VAR 0 4
51129: ARRAY
51130: PUSH
51131: LD_VAR 0 2
51135: PUSH
51136: LD_VAR 0 4
51140: ARRAY
51141: NONEQUAL
51142: IFFALSE 51154
// begin result := false ;
51144: LD_ADDR_VAR 0 3
51148: PUSH
51149: LD_INT 0
51151: ST_TO_ADDR
// break ;
51152: GO 51156
// end ;
51154: GO 51117
51156: POP
51157: POP
// end else
51158: GO 51168
// result := false ;
51160: LD_ADDR_VAR 0 3
51164: PUSH
51165: LD_INT 0
51167: ST_TO_ADDR
// end ;
51168: LD_VAR 0 3
51172: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51173: LD_INT 0
51175: PPUSH
51176: PPUSH
// if not array1 or not array2 then
51177: LD_VAR 0 1
51181: NOT
51182: IFTRUE 51191
51184: PUSH
51185: LD_VAR 0 2
51189: NOT
51190: OR
51191: IFFALSE 51195
// exit ;
51193: GO 51259
// result := true ;
51195: LD_ADDR_VAR 0 3
51199: PUSH
51200: LD_INT 1
51202: ST_TO_ADDR
// for i = 1 to array1 do
51203: LD_ADDR_VAR 0 4
51207: PUSH
51208: DOUBLE
51209: LD_INT 1
51211: DEC
51212: ST_TO_ADDR
51213: LD_VAR 0 1
51217: PUSH
51218: FOR_TO
51219: IFFALSE 51257
// if array1 [ i ] <> array2 [ i ] then
51221: LD_VAR 0 1
51225: PUSH
51226: LD_VAR 0 4
51230: ARRAY
51231: PUSH
51232: LD_VAR 0 2
51236: PUSH
51237: LD_VAR 0 4
51241: ARRAY
51242: NONEQUAL
51243: IFFALSE 51255
// begin result := false ;
51245: LD_ADDR_VAR 0 3
51249: PUSH
51250: LD_INT 0
51252: ST_TO_ADDR
// break ;
51253: GO 51257
// end ;
51255: GO 51218
51257: POP
51258: POP
// end ;
51259: LD_VAR 0 3
51263: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51264: LD_INT 0
51266: PPUSH
51267: PPUSH
51268: PPUSH
// pom := GetBase ( fac ) ;
51269: LD_ADDR_VAR 0 5
51273: PUSH
51274: LD_VAR 0 1
51278: PPUSH
51279: CALL_OW 274
51283: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51284: LD_ADDR_VAR 0 4
51288: PUSH
51289: LD_VAR 0 2
51293: PUSH
51294: LD_INT 1
51296: ARRAY
51297: PPUSH
51298: LD_VAR 0 2
51302: PUSH
51303: LD_INT 2
51305: ARRAY
51306: PPUSH
51307: LD_VAR 0 2
51311: PUSH
51312: LD_INT 3
51314: ARRAY
51315: PPUSH
51316: LD_VAR 0 2
51320: PUSH
51321: LD_INT 4
51323: ARRAY
51324: PPUSH
51325: CALL_OW 449
51329: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51330: LD_ADDR_VAR 0 3
51334: PUSH
51335: LD_VAR 0 5
51339: PPUSH
51340: LD_INT 1
51342: PPUSH
51343: CALL_OW 275
51347: PUSH
51348: LD_VAR 0 4
51352: PUSH
51353: LD_INT 1
51355: ARRAY
51356: GREATEREQUAL
51357: IFFALSE 51383
51359: PUSH
51360: LD_VAR 0 5
51364: PPUSH
51365: LD_INT 2
51367: PPUSH
51368: CALL_OW 275
51372: PUSH
51373: LD_VAR 0 4
51377: PUSH
51378: LD_INT 2
51380: ARRAY
51381: GREATEREQUAL
51382: AND
51383: IFFALSE 51409
51385: PUSH
51386: LD_VAR 0 5
51390: PPUSH
51391: LD_INT 3
51393: PPUSH
51394: CALL_OW 275
51398: PUSH
51399: LD_VAR 0 4
51403: PUSH
51404: LD_INT 3
51406: ARRAY
51407: GREATEREQUAL
51408: AND
51409: ST_TO_ADDR
// end ;
51410: LD_VAR 0 3
51414: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51415: LD_INT 0
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
// pom := GetBase ( building ) ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_VAR 0 1
51430: PPUSH
51431: CALL_OW 274
51435: ST_TO_ADDR
// if not pom then
51436: LD_VAR 0 3
51440: NOT
51441: IFFALSE 51445
// exit ;
51443: GO 51619
// btype := GetBType ( building ) ;
51445: LD_ADDR_VAR 0 5
51449: PUSH
51450: LD_VAR 0 1
51454: PPUSH
51455: CALL_OW 266
51459: ST_TO_ADDR
// if btype = b_armoury then
51460: LD_VAR 0 5
51464: PUSH
51465: LD_INT 4
51467: EQUAL
51468: IFFALSE 51478
// btype := b_barracks ;
51470: LD_ADDR_VAR 0 5
51474: PUSH
51475: LD_INT 5
51477: ST_TO_ADDR
// if btype = b_depot then
51478: LD_VAR 0 5
51482: PUSH
51483: LD_INT 0
51485: EQUAL
51486: IFFALSE 51496
// btype := b_warehouse ;
51488: LD_ADDR_VAR 0 5
51492: PUSH
51493: LD_INT 1
51495: ST_TO_ADDR
// if btype = b_workshop then
51496: LD_VAR 0 5
51500: PUSH
51501: LD_INT 2
51503: EQUAL
51504: IFFALSE 51514
// btype := b_factory ;
51506: LD_ADDR_VAR 0 5
51510: PUSH
51511: LD_INT 3
51513: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51514: LD_ADDR_VAR 0 4
51518: PUSH
51519: LD_VAR 0 5
51523: PPUSH
51524: LD_VAR 0 1
51528: PPUSH
51529: CALL_OW 248
51533: PPUSH
51534: CALL_OW 450
51538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51539: LD_ADDR_VAR 0 2
51543: PUSH
51544: LD_VAR 0 3
51548: PPUSH
51549: LD_INT 1
51551: PPUSH
51552: CALL_OW 275
51556: PUSH
51557: LD_VAR 0 4
51561: PUSH
51562: LD_INT 1
51564: ARRAY
51565: GREATEREQUAL
51566: IFFALSE 51592
51568: PUSH
51569: LD_VAR 0 3
51573: PPUSH
51574: LD_INT 2
51576: PPUSH
51577: CALL_OW 275
51581: PUSH
51582: LD_VAR 0 4
51586: PUSH
51587: LD_INT 2
51589: ARRAY
51590: GREATEREQUAL
51591: AND
51592: IFFALSE 51618
51594: PUSH
51595: LD_VAR 0 3
51599: PPUSH
51600: LD_INT 3
51602: PPUSH
51603: CALL_OW 275
51607: PUSH
51608: LD_VAR 0 4
51612: PUSH
51613: LD_INT 3
51615: ARRAY
51616: GREATEREQUAL
51617: AND
51618: ST_TO_ADDR
// end ;
51619: LD_VAR 0 2
51623: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51624: LD_INT 0
51626: PPUSH
51627: PPUSH
51628: PPUSH
// pom := GetBase ( building ) ;
51629: LD_ADDR_VAR 0 4
51633: PUSH
51634: LD_VAR 0 1
51638: PPUSH
51639: CALL_OW 274
51643: ST_TO_ADDR
// if not pom then
51644: LD_VAR 0 4
51648: NOT
51649: IFFALSE 51653
// exit ;
51651: GO 51758
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51653: LD_ADDR_VAR 0 5
51657: PUSH
51658: LD_VAR 0 2
51662: PPUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 248
51672: PPUSH
51673: CALL_OW 450
51677: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51678: LD_ADDR_VAR 0 3
51682: PUSH
51683: LD_VAR 0 4
51687: PPUSH
51688: LD_INT 1
51690: PPUSH
51691: CALL_OW 275
51695: PUSH
51696: LD_VAR 0 5
51700: PUSH
51701: LD_INT 1
51703: ARRAY
51704: GREATEREQUAL
51705: IFFALSE 51731
51707: PUSH
51708: LD_VAR 0 4
51712: PPUSH
51713: LD_INT 2
51715: PPUSH
51716: CALL_OW 275
51720: PUSH
51721: LD_VAR 0 5
51725: PUSH
51726: LD_INT 2
51728: ARRAY
51729: GREATEREQUAL
51730: AND
51731: IFFALSE 51757
51733: PUSH
51734: LD_VAR 0 4
51738: PPUSH
51739: LD_INT 3
51741: PPUSH
51742: CALL_OW 275
51746: PUSH
51747: LD_VAR 0 5
51751: PUSH
51752: LD_INT 3
51754: ARRAY
51755: GREATEREQUAL
51756: AND
51757: ST_TO_ADDR
// end ;
51758: LD_VAR 0 3
51762: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51763: LD_INT 0
51765: PPUSH
51766: PPUSH
51767: PPUSH
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
51775: PPUSH
// result := false ;
51776: LD_ADDR_VAR 0 8
51780: PUSH
51781: LD_INT 0
51783: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51784: LD_VAR 0 5
51788: NOT
51789: IFTRUE 51798
51791: PUSH
51792: LD_VAR 0 1
51796: NOT
51797: OR
51798: IFTRUE 51807
51800: PUSH
51801: LD_VAR 0 2
51805: NOT
51806: OR
51807: IFTRUE 51816
51809: PUSH
51810: LD_VAR 0 3
51814: NOT
51815: OR
51816: IFFALSE 51820
// exit ;
51818: GO 52646
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51820: LD_ADDR_VAR 0 14
51824: PUSH
51825: LD_VAR 0 1
51829: PPUSH
51830: LD_VAR 0 2
51834: PPUSH
51835: LD_VAR 0 3
51839: PPUSH
51840: LD_VAR 0 4
51844: PPUSH
51845: LD_VAR 0 5
51849: PUSH
51850: LD_INT 1
51852: ARRAY
51853: PPUSH
51854: CALL_OW 248
51858: PPUSH
51859: LD_INT 0
51861: PPUSH
51862: CALL 53927 0 6
51866: ST_TO_ADDR
// if not hexes then
51867: LD_VAR 0 14
51871: NOT
51872: IFFALSE 51876
// exit ;
51874: GO 52646
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51876: LD_ADDR_VAR 0 17
51880: PUSH
51881: LD_VAR 0 5
51885: PPUSH
51886: LD_INT 22
51888: PUSH
51889: LD_VAR 0 13
51893: PPUSH
51894: CALL_OW 255
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 30
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 30
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PPUSH
51935: CALL_OW 72
51939: ST_TO_ADDR
// for i = 1 to hexes do
51940: LD_ADDR_VAR 0 9
51944: PUSH
51945: DOUBLE
51946: LD_INT 1
51948: DEC
51949: ST_TO_ADDR
51950: LD_VAR 0 14
51954: PUSH
51955: FOR_TO
51956: IFFALSE 52644
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51958: LD_ADDR_VAR 0 13
51962: PUSH
51963: LD_VAR 0 14
51967: PUSH
51968: LD_VAR 0 9
51972: ARRAY
51973: PUSH
51974: LD_INT 1
51976: ARRAY
51977: PPUSH
51978: LD_VAR 0 14
51982: PUSH
51983: LD_VAR 0 9
51987: ARRAY
51988: PUSH
51989: LD_INT 2
51991: ARRAY
51992: PPUSH
51993: CALL_OW 428
51997: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51998: LD_VAR 0 14
52002: PUSH
52003: LD_VAR 0 9
52007: ARRAY
52008: PUSH
52009: LD_INT 1
52011: ARRAY
52012: PPUSH
52013: LD_VAR 0 14
52017: PUSH
52018: LD_VAR 0 9
52022: ARRAY
52023: PUSH
52024: LD_INT 2
52026: ARRAY
52027: PPUSH
52028: CALL_OW 351
52032: IFTRUE 52071
52034: PUSH
52035: LD_VAR 0 14
52039: PUSH
52040: LD_VAR 0 9
52044: ARRAY
52045: PUSH
52046: LD_INT 1
52048: ARRAY
52049: PPUSH
52050: LD_VAR 0 14
52054: PUSH
52055: LD_VAR 0 9
52059: ARRAY
52060: PUSH
52061: LD_INT 2
52063: ARRAY
52064: PPUSH
52065: CALL_OW 488
52069: NOT
52070: OR
52071: IFTRUE 52088
52073: PUSH
52074: LD_VAR 0 13
52078: PPUSH
52079: CALL_OW 247
52083: PUSH
52084: LD_INT 3
52086: EQUAL
52087: OR
52088: IFFALSE 52094
// exit ;
52090: POP
52091: POP
52092: GO 52646
// if not tmp then
52094: LD_VAR 0 13
52098: NOT
52099: IFFALSE 52103
// continue ;
52101: GO 51955
// result := true ;
52103: LD_ADDR_VAR 0 8
52107: PUSH
52108: LD_INT 1
52110: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52111: LD_VAR 0 6
52115: IFFALSE 52132
52117: PUSH
52118: LD_VAR 0 13
52122: PPUSH
52123: CALL_OW 247
52127: PUSH
52128: LD_INT 2
52130: EQUAL
52131: AND
52132: IFFALSE 52149
52134: PUSH
52135: LD_VAR 0 13
52139: PPUSH
52140: CALL_OW 263
52144: PUSH
52145: LD_INT 1
52147: EQUAL
52148: AND
52149: IFFALSE 52313
// begin if IsDrivenBy ( tmp ) then
52151: LD_VAR 0 13
52155: PPUSH
52156: CALL_OW 311
52160: IFFALSE 52164
// continue ;
52162: GO 51955
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52164: LD_VAR 0 6
52168: PPUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 60
52174: PUSH
52175: EMPTY
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 55
52187: PUSH
52188: EMPTY
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PPUSH
52199: CALL_OW 72
52203: IFFALSE 52311
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52205: LD_ADDR_VAR 0 18
52209: PUSH
52210: LD_VAR 0 6
52214: PPUSH
52215: LD_INT 3
52217: PUSH
52218: LD_INT 60
52220: PUSH
52221: EMPTY
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: LD_INT 55
52233: PUSH
52234: EMPTY
52235: LIST
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PPUSH
52245: CALL_OW 72
52249: PUSH
52250: LD_INT 1
52252: ARRAY
52253: ST_TO_ADDR
// if IsInUnit ( driver ) then
52254: LD_VAR 0 18
52258: PPUSH
52259: CALL_OW 310
52263: IFFALSE 52274
// ComExit ( driver ) ;
52265: LD_VAR 0 18
52269: PPUSH
52270: CALL 77917 0 1
// AddComEnterUnit ( driver , tmp ) ;
52274: LD_VAR 0 18
52278: PPUSH
52279: LD_VAR 0 13
52283: PPUSH
52284: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52288: LD_VAR 0 18
52292: PPUSH
52293: LD_VAR 0 7
52297: PPUSH
52298: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52302: LD_VAR 0 18
52306: PPUSH
52307: CALL_OW 181
// end ; continue ;
52311: GO 51955
// end ; if not cleaners or not tmp in cleaners then
52313: LD_VAR 0 6
52317: NOT
52318: IFTRUE 52333
52320: PUSH
52321: LD_VAR 0 13
52325: PUSH
52326: LD_VAR 0 6
52330: IN
52331: NOT
52332: OR
52333: IFFALSE 52642
// begin if dep then
52335: LD_VAR 0 17
52339: IFFALSE 52475
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52341: LD_ADDR_VAR 0 16
52345: PUSH
52346: LD_VAR 0 17
52350: PUSH
52351: LD_INT 1
52353: ARRAY
52354: PPUSH
52355: CALL_OW 250
52359: PPUSH
52360: LD_VAR 0 17
52364: PUSH
52365: LD_INT 1
52367: ARRAY
52368: PPUSH
52369: CALL_OW 254
52373: PPUSH
52374: LD_INT 5
52376: PPUSH
52377: CALL_OW 272
52381: PUSH
52382: LD_VAR 0 17
52386: PUSH
52387: LD_INT 1
52389: ARRAY
52390: PPUSH
52391: CALL_OW 251
52395: PPUSH
52396: LD_VAR 0 17
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: PPUSH
52405: CALL_OW 254
52409: PPUSH
52410: LD_INT 5
52412: PPUSH
52413: CALL_OW 273
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52422: LD_VAR 0 16
52426: PUSH
52427: LD_INT 1
52429: ARRAY
52430: PPUSH
52431: LD_VAR 0 16
52435: PUSH
52436: LD_INT 2
52438: ARRAY
52439: PPUSH
52440: CALL_OW 488
52444: IFFALSE 52475
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52446: LD_VAR 0 13
52450: PPUSH
52451: LD_VAR 0 16
52455: PUSH
52456: LD_INT 1
52458: ARRAY
52459: PPUSH
52460: LD_VAR 0 16
52464: PUSH
52465: LD_INT 2
52467: ARRAY
52468: PPUSH
52469: CALL_OW 111
// continue ;
52473: GO 51955
// end ; end ; r := GetDir ( tmp ) ;
52475: LD_ADDR_VAR 0 15
52479: PUSH
52480: LD_VAR 0 13
52484: PPUSH
52485: CALL_OW 254
52489: ST_TO_ADDR
// if r = 5 then
52490: LD_VAR 0 15
52494: PUSH
52495: LD_INT 5
52497: EQUAL
52498: IFFALSE 52508
// r := 0 ;
52500: LD_ADDR_VAR 0 15
52504: PUSH
52505: LD_INT 0
52507: ST_TO_ADDR
// for j = r to 5 do
52508: LD_ADDR_VAR 0 10
52512: PUSH
52513: DOUBLE
52514: LD_VAR 0 15
52518: DEC
52519: ST_TO_ADDR
52520: LD_INT 5
52522: PUSH
52523: FOR_TO
52524: IFFALSE 52640
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52526: LD_ADDR_VAR 0 11
52530: PUSH
52531: LD_VAR 0 13
52535: PPUSH
52536: CALL_OW 250
52540: PPUSH
52541: LD_VAR 0 10
52545: PPUSH
52546: LD_INT 2
52548: PPUSH
52549: CALL_OW 272
52553: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52554: LD_ADDR_VAR 0 12
52558: PUSH
52559: LD_VAR 0 13
52563: PPUSH
52564: CALL_OW 251
52568: PPUSH
52569: LD_VAR 0 10
52573: PPUSH
52574: LD_INT 2
52576: PPUSH
52577: CALL_OW 273
52581: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52582: LD_VAR 0 11
52586: PPUSH
52587: LD_VAR 0 12
52591: PPUSH
52592: CALL_OW 488
52596: IFFALSE 52615
52598: PUSH
52599: LD_VAR 0 11
52603: PPUSH
52604: LD_VAR 0 12
52608: PPUSH
52609: CALL_OW 428
52613: NOT
52614: AND
52615: IFFALSE 52638
// begin ComMoveXY ( tmp , _x , _y ) ;
52617: LD_VAR 0 13
52621: PPUSH
52622: LD_VAR 0 11
52626: PPUSH
52627: LD_VAR 0 12
52631: PPUSH
52632: CALL_OW 111
// break ;
52636: GO 52640
// end ; end ;
52638: GO 52523
52640: POP
52641: POP
// end ; end ;
52642: GO 51955
52644: POP
52645: POP
// end ;
52646: LD_VAR 0 8
52650: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52651: LD_INT 0
52653: PPUSH
// result := true ;
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: LD_INT 1
52661: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52662: LD_VAR 0 2
52666: PUSH
52667: LD_INT 24
52669: DOUBLE
52670: EQUAL
52671: IFTRUE 52681
52673: LD_INT 33
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52681
52679: GO 52706
52681: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52682: LD_ADDR_VAR 0 3
52686: PUSH
52687: LD_INT 32
52689: PPUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 321
52699: PUSH
52700: LD_INT 2
52702: EQUAL
52703: ST_TO_ADDR
52704: GO 53022
52706: LD_INT 20
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 52739
52714: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52715: LD_ADDR_VAR 0 3
52719: PUSH
52720: LD_INT 6
52722: PPUSH
52723: LD_VAR 0 1
52727: PPUSH
52728: CALL_OW 321
52732: PUSH
52733: LD_INT 2
52735: EQUAL
52736: ST_TO_ADDR
52737: GO 53022
52739: LD_INT 22
52741: DOUBLE
52742: EQUAL
52743: IFTRUE 52753
52745: LD_INT 36
52747: DOUBLE
52748: EQUAL
52749: IFTRUE 52753
52751: GO 52778
52753: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52754: LD_ADDR_VAR 0 3
52758: PUSH
52759: LD_INT 15
52761: PPUSH
52762: LD_VAR 0 1
52766: PPUSH
52767: CALL_OW 321
52771: PUSH
52772: LD_INT 2
52774: EQUAL
52775: ST_TO_ADDR
52776: GO 53022
52778: LD_INT 30
52780: DOUBLE
52781: EQUAL
52782: IFTRUE 52786
52784: GO 52811
52786: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52787: LD_ADDR_VAR 0 3
52791: PUSH
52792: LD_INT 20
52794: PPUSH
52795: LD_VAR 0 1
52799: PPUSH
52800: CALL_OW 321
52804: PUSH
52805: LD_INT 2
52807: EQUAL
52808: ST_TO_ADDR
52809: GO 53022
52811: LD_INT 28
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52825
52817: LD_INT 21
52819: DOUBLE
52820: EQUAL
52821: IFTRUE 52825
52823: GO 52850
52825: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52826: LD_ADDR_VAR 0 3
52830: PUSH
52831: LD_INT 21
52833: PPUSH
52834: LD_VAR 0 1
52838: PPUSH
52839: CALL_OW 321
52843: PUSH
52844: LD_INT 2
52846: EQUAL
52847: ST_TO_ADDR
52848: GO 53022
52850: LD_INT 16
52852: DOUBLE
52853: EQUAL
52854: IFTRUE 52858
52856: GO 52883
52858: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52859: LD_ADDR_VAR 0 3
52863: PUSH
52864: LD_INT 84
52866: PPUSH
52867: LD_VAR 0 1
52871: PPUSH
52872: CALL_OW 321
52876: PUSH
52877: LD_INT 2
52879: EQUAL
52880: ST_TO_ADDR
52881: GO 53022
52883: LD_INT 19
52885: DOUBLE
52886: EQUAL
52887: IFTRUE 52897
52889: LD_INT 23
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52897
52895: GO 52922
52897: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52898: LD_ADDR_VAR 0 3
52902: PUSH
52903: LD_INT 83
52905: PPUSH
52906: LD_VAR 0 1
52910: PPUSH
52911: CALL_OW 321
52915: PUSH
52916: LD_INT 2
52918: EQUAL
52919: ST_TO_ADDR
52920: GO 53022
52922: LD_INT 17
52924: DOUBLE
52925: EQUAL
52926: IFTRUE 52930
52928: GO 52955
52930: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52931: LD_ADDR_VAR 0 3
52935: PUSH
52936: LD_INT 39
52938: PPUSH
52939: LD_VAR 0 1
52943: PPUSH
52944: CALL_OW 321
52948: PUSH
52949: LD_INT 2
52951: EQUAL
52952: ST_TO_ADDR
52953: GO 53022
52955: LD_INT 18
52957: DOUBLE
52958: EQUAL
52959: IFTRUE 52963
52961: GO 52988
52963: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52964: LD_ADDR_VAR 0 3
52968: PUSH
52969: LD_INT 40
52971: PPUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: CALL_OW 321
52981: PUSH
52982: LD_INT 2
52984: EQUAL
52985: ST_TO_ADDR
52986: GO 53022
52988: LD_INT 27
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53021
52996: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52997: LD_ADDR_VAR 0 3
53001: PUSH
53002: LD_INT 35
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 321
53014: PUSH
53015: LD_INT 2
53017: EQUAL
53018: ST_TO_ADDR
53019: GO 53022
53021: POP
// end ;
53022: LD_VAR 0 3
53026: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53027: LD_INT 0
53029: PPUSH
53030: PPUSH
53031: PPUSH
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
// result := false ;
53040: LD_ADDR_VAR 0 6
53044: PUSH
53045: LD_INT 0
53047: ST_TO_ADDR
// if btype = b_depot then
53048: LD_VAR 0 2
53052: PUSH
53053: LD_INT 0
53055: EQUAL
53056: IFFALSE 53068
// begin result := true ;
53058: LD_ADDR_VAR 0 6
53062: PUSH
53063: LD_INT 1
53065: ST_TO_ADDR
// exit ;
53066: GO 53922
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53068: LD_VAR 0 1
53072: NOT
53073: IFTRUE 53098
53075: PUSH
53076: LD_VAR 0 1
53080: PPUSH
53081: CALL_OW 266
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: IN
53096: NOT
53097: OR
53098: IFTRUE 53107
53100: PUSH
53101: LD_VAR 0 2
53105: NOT
53106: OR
53107: IFTRUE 53143
53109: PUSH
53110: LD_VAR 0 5
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 4
53129: PUSH
53130: LD_INT 5
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: IN
53141: NOT
53142: OR
53143: IFTRUE 53162
53145: PUSH
53146: LD_VAR 0 3
53150: PPUSH
53151: LD_VAR 0 4
53155: PPUSH
53156: CALL_OW 488
53160: NOT
53161: OR
53162: IFFALSE 53166
// exit ;
53164: GO 53922
// side := GetSide ( depot ) ;
53166: LD_ADDR_VAR 0 9
53170: PUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 255
53180: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53181: LD_VAR 0 9
53185: PPUSH
53186: LD_VAR 0 2
53190: PPUSH
53191: CALL 52651 0 2
53195: NOT
53196: IFFALSE 53200
// exit ;
53198: GO 53922
// pom := GetBase ( depot ) ;
53200: LD_ADDR_VAR 0 10
53204: PUSH
53205: LD_VAR 0 1
53209: PPUSH
53210: CALL_OW 274
53214: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53215: LD_ADDR_VAR 0 11
53219: PUSH
53220: LD_VAR 0 2
53224: PPUSH
53225: LD_VAR 0 1
53229: PPUSH
53230: CALL_OW 248
53234: PPUSH
53235: CALL_OW 450
53239: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53240: LD_VAR 0 10
53244: PPUSH
53245: LD_INT 1
53247: PPUSH
53248: CALL_OW 275
53252: PUSH
53253: LD_VAR 0 11
53257: PUSH
53258: LD_INT 1
53260: ARRAY
53261: GREATEREQUAL
53262: IFFALSE 53288
53264: PUSH
53265: LD_VAR 0 10
53269: PPUSH
53270: LD_INT 2
53272: PPUSH
53273: CALL_OW 275
53277: PUSH
53278: LD_VAR 0 11
53282: PUSH
53283: LD_INT 2
53285: ARRAY
53286: GREATEREQUAL
53287: AND
53288: IFFALSE 53314
53290: PUSH
53291: LD_VAR 0 10
53295: PPUSH
53296: LD_INT 3
53298: PPUSH
53299: CALL_OW 275
53303: PUSH
53304: LD_VAR 0 11
53308: PUSH
53309: LD_INT 3
53311: ARRAY
53312: GREATEREQUAL
53313: AND
53314: NOT
53315: IFFALSE 53319
// exit ;
53317: GO 53922
// if GetBType ( depot ) = b_depot then
53319: LD_VAR 0 1
53323: PPUSH
53324: CALL_OW 266
53328: PUSH
53329: LD_INT 0
53331: EQUAL
53332: IFFALSE 53344
// dist := 28 else
53334: LD_ADDR_VAR 0 14
53338: PUSH
53339: LD_INT 28
53341: ST_TO_ADDR
53342: GO 53352
// dist := 36 ;
53344: LD_ADDR_VAR 0 14
53348: PUSH
53349: LD_INT 36
53351: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53352: LD_VAR 0 1
53356: PPUSH
53357: LD_VAR 0 3
53361: PPUSH
53362: LD_VAR 0 4
53366: PPUSH
53367: CALL_OW 297
53371: PUSH
53372: LD_VAR 0 14
53376: GREATER
53377: IFFALSE 53381
// exit ;
53379: GO 53922
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53381: LD_ADDR_VAR 0 12
53385: PUSH
53386: LD_VAR 0 2
53390: PPUSH
53391: LD_VAR 0 3
53395: PPUSH
53396: LD_VAR 0 4
53400: PPUSH
53401: LD_VAR 0 5
53405: PPUSH
53406: LD_VAR 0 1
53410: PPUSH
53411: CALL_OW 248
53415: PPUSH
53416: LD_INT 0
53418: PPUSH
53419: CALL 53927 0 6
53423: ST_TO_ADDR
// if not hexes then
53424: LD_VAR 0 12
53428: NOT
53429: IFFALSE 53433
// exit ;
53431: GO 53922
// hex := GetHexInfo ( x , y ) ;
53433: LD_ADDR_VAR 0 15
53437: PUSH
53438: LD_VAR 0 3
53442: PPUSH
53443: LD_VAR 0 4
53447: PPUSH
53448: CALL_OW 546
53452: ST_TO_ADDR
// if hex [ 1 ] then
53453: LD_VAR 0 15
53457: PUSH
53458: LD_INT 1
53460: ARRAY
53461: IFFALSE 53465
// exit ;
53463: GO 53922
// height := hex [ 2 ] ;
53465: LD_ADDR_VAR 0 13
53469: PUSH
53470: LD_VAR 0 15
53474: PUSH
53475: LD_INT 2
53477: ARRAY
53478: ST_TO_ADDR
// for i = 1 to hexes do
53479: LD_ADDR_VAR 0 7
53483: PUSH
53484: DOUBLE
53485: LD_INT 1
53487: DEC
53488: ST_TO_ADDR
53489: LD_VAR 0 12
53493: PUSH
53494: FOR_TO
53495: IFFALSE 53839
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53497: LD_VAR 0 12
53501: PUSH
53502: LD_VAR 0 7
53506: ARRAY
53507: PUSH
53508: LD_INT 1
53510: ARRAY
53511: PPUSH
53512: LD_VAR 0 12
53516: PUSH
53517: LD_VAR 0 7
53521: ARRAY
53522: PUSH
53523: LD_INT 2
53525: ARRAY
53526: PPUSH
53527: CALL_OW 488
53531: NOT
53532: IFTRUE 53574
53534: PUSH
53535: LD_VAR 0 12
53539: PUSH
53540: LD_VAR 0 7
53544: ARRAY
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PPUSH
53550: LD_VAR 0 12
53554: PUSH
53555: LD_VAR 0 7
53559: ARRAY
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: PPUSH
53565: CALL_OW 428
53569: PUSH
53570: LD_INT 0
53572: GREATER
53573: OR
53574: IFTRUE 53612
53576: PUSH
53577: LD_VAR 0 12
53581: PUSH
53582: LD_VAR 0 7
53586: ARRAY
53587: PUSH
53588: LD_INT 1
53590: ARRAY
53591: PPUSH
53592: LD_VAR 0 12
53596: PUSH
53597: LD_VAR 0 7
53601: ARRAY
53602: PUSH
53603: LD_INT 2
53605: ARRAY
53606: PPUSH
53607: CALL_OW 351
53611: OR
53612: IFFALSE 53618
// exit ;
53614: POP
53615: POP
53616: GO 53922
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53618: LD_ADDR_VAR 0 8
53622: PUSH
53623: LD_VAR 0 12
53627: PUSH
53628: LD_VAR 0 7
53632: ARRAY
53633: PUSH
53634: LD_INT 1
53636: ARRAY
53637: PPUSH
53638: LD_VAR 0 12
53642: PUSH
53643: LD_VAR 0 7
53647: ARRAY
53648: PUSH
53649: LD_INT 2
53651: ARRAY
53652: PPUSH
53653: CALL_OW 546
53657: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53658: LD_VAR 0 8
53662: PUSH
53663: LD_INT 1
53665: ARRAY
53666: IFTRUE 53688
53668: PUSH
53669: LD_VAR 0 8
53673: PUSH
53674: LD_INT 2
53676: ARRAY
53677: PUSH
53678: LD_VAR 0 13
53682: PUSH
53683: LD_INT 2
53685: PLUS
53686: GREATER
53687: OR
53688: IFTRUE 53710
53690: PUSH
53691: LD_VAR 0 8
53695: PUSH
53696: LD_INT 2
53698: ARRAY
53699: PUSH
53700: LD_VAR 0 13
53704: PUSH
53705: LD_INT 2
53707: MINUS
53708: LESS
53709: OR
53710: IFTRUE 53778
53712: PUSH
53713: LD_VAR 0 8
53717: PUSH
53718: LD_INT 3
53720: ARRAY
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 8
53727: PUSH
53728: LD_INT 9
53730: PUSH
53731: LD_INT 10
53733: PUSH
53734: LD_INT 11
53736: PUSH
53737: LD_INT 12
53739: PUSH
53740: LD_INT 13
53742: PUSH
53743: LD_INT 16
53745: PUSH
53746: LD_INT 17
53748: PUSH
53749: LD_INT 18
53751: PUSH
53752: LD_INT 19
53754: PUSH
53755: LD_INT 20
53757: PUSH
53758: LD_INT 21
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: IN
53776: NOT
53777: OR
53778: IFTRUE 53791
53780: PUSH
53781: LD_VAR 0 8
53785: PUSH
53786: LD_INT 5
53788: ARRAY
53789: NOT
53790: OR
53791: IFTRUE 53831
53793: PUSH
53794: LD_VAR 0 8
53798: PUSH
53799: LD_INT 6
53801: ARRAY
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 7
53811: PUSH
53812: LD_INT 9
53814: PUSH
53815: LD_INT 10
53817: PUSH
53818: LD_INT 11
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: IN
53829: NOT
53830: OR
53831: IFFALSE 53837
// exit ;
53833: POP
53834: POP
53835: GO 53922
// end ;
53837: GO 53494
53839: POP
53840: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53841: LD_VAR 0 9
53845: PPUSH
53846: LD_VAR 0 3
53850: PPUSH
53851: LD_VAR 0 4
53855: PPUSH
53856: LD_INT 20
53858: PPUSH
53859: CALL 45741 0 4
53863: PUSH
53864: LD_INT 4
53866: ARRAY
53867: IFFALSE 53871
// exit ;
53869: GO 53922
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53871: LD_VAR 0 2
53875: PUSH
53876: LD_INT 29
53878: PUSH
53879: LD_INT 30
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: IN
53886: IFFALSE 53910
53888: PUSH
53889: LD_VAR 0 3
53893: PPUSH
53894: LD_VAR 0 4
53898: PPUSH
53899: LD_VAR 0 9
53903: PPUSH
53904: CALL_OW 440
53908: NOT
53909: AND
53910: IFFALSE 53914
// exit ;
53912: GO 53922
// result := true ;
53914: LD_ADDR_VAR 0 6
53918: PUSH
53919: LD_INT 1
53921: ST_TO_ADDR
// end ;
53922: LD_VAR 0 6
53926: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53927: LD_INT 0
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
53953: PPUSH
53954: PPUSH
53955: PPUSH
53956: PPUSH
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
53968: PPUSH
53969: PPUSH
53970: PPUSH
53971: PPUSH
53972: PPUSH
53973: PPUSH
53974: PPUSH
53975: PPUSH
53976: PPUSH
53977: PPUSH
53978: PPUSH
53979: PPUSH
53980: PPUSH
53981: PPUSH
53982: PPUSH
53983: PPUSH
53984: PPUSH
53985: PPUSH
53986: PPUSH
// result = [ ] ;
53987: LD_ADDR_VAR 0 7
53991: PUSH
53992: EMPTY
53993: ST_TO_ADDR
// temp_list = [ ] ;
53994: LD_ADDR_VAR 0 9
53998: PUSH
53999: EMPTY
54000: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54001: LD_VAR 0 4
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: LD_INT 5
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: IN
54032: NOT
54033: IFTRUE 54076
54035: PUSH
54036: LD_VAR 0 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: IN
54051: IFFALSE 54075
54053: PUSH
54054: LD_VAR 0 5
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: IN
54073: NOT
54074: AND
54075: OR
54076: IFFALSE 54080
// exit ;
54078: GO 72479
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54080: LD_VAR 0 1
54084: PUSH
54085: LD_INT 6
54087: PUSH
54088: LD_INT 7
54090: PUSH
54091: LD_INT 8
54093: PUSH
54094: LD_INT 13
54096: PUSH
54097: LD_INT 12
54099: PUSH
54100: LD_INT 15
54102: PUSH
54103: LD_INT 11
54105: PUSH
54106: LD_INT 14
54108: PUSH
54109: LD_INT 10
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: IN
54123: IFFALSE 54133
// btype = b_lab ;
54125: LD_ADDR_VAR 0 1
54129: PUSH
54130: LD_INT 6
54132: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54133: LD_VAR 0 6
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: IN
54152: NOT
54153: IFTRUE 54221
54155: PUSH
54156: LD_VAR 0 1
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 6
54175: PUSH
54176: LD_INT 36
54178: PUSH
54179: LD_INT 4
54181: PUSH
54182: LD_INT 5
54184: PUSH
54185: LD_INT 31
54187: PUSH
54188: LD_INT 32
54190: PUSH
54191: LD_INT 33
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: IN
54207: NOT
54208: IFFALSE 54220
54210: PUSH
54211: LD_VAR 0 6
54215: PUSH
54216: LD_INT 1
54218: EQUAL
54219: AND
54220: OR
54221: IFTRUE 54253
54223: PUSH
54224: LD_VAR 0 1
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: IN
54239: NOT
54240: IFFALSE 54252
54242: PUSH
54243: LD_VAR 0 6
54247: PUSH
54248: LD_INT 2
54250: EQUAL
54251: AND
54252: OR
54253: IFFALSE 54263
// mode = 0 ;
54255: LD_ADDR_VAR 0 6
54259: PUSH
54260: LD_INT 0
54262: ST_TO_ADDR
// case mode of 0 :
54263: LD_VAR 0 6
54267: PUSH
54268: LD_INT 0
54270: DOUBLE
54271: EQUAL
54272: IFTRUE 54276
54274: GO 65729
54276: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54277: LD_ADDR_VAR 0 11
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54470: LD_ADDR_VAR 0 12
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54666: LD_ADDR_VAR 0 13
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54865: LD_ADDR_VAR 0 14
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55061: LD_ADDR_VAR 0 15
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55254: LD_ADDR_VAR 0 16
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55447: LD_ADDR_VAR 0 17
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55677: LD_ADDR_VAR 0 18
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55907: LD_ADDR_VAR 0 19
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56137: LD_ADDR_VAR 0 20
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56367: LD_ADDR_VAR 0 21
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56597: LD_ADDR_VAR 0 22
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56827: LD_ADDR_VAR 0 23
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57107: LD_ADDR_VAR 0 24
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 3
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57383: LD_ADDR_VAR 0 25
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57657: LD_ADDR_VAR 0 26
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57933: LD_ADDR_VAR 0 27
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58213: LD_ADDR_VAR 0 28
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58495: LD_ADDR_VAR 0 29
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58774: LD_ADDR_VAR 0 30
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59052: LD_ADDR_VAR 0 31
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59330: LD_ADDR_VAR 0 32
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59608: LD_ADDR_VAR 0 33
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: NEG
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59887: LD_ADDR_VAR 0 34
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60167: LD_ADDR_VAR 0 35
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60279: LD_ADDR_VAR 0 36
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60391: LD_ADDR_VAR 0 37
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60503: LD_ADDR_VAR 0 38
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60615: LD_ADDR_VAR 0 39
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60727: LD_ADDR_VAR 0 40
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60839: LD_ADDR_VAR 0 41
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61189: LD_ADDR_VAR 0 42
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61539: LD_ADDR_VAR 0 43
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 3
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 3
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61887: LD_ADDR_VAR 0 44
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: NEG
62078: PUSH
62079: LD_INT 3
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: LD_INT 3
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 3
62161: NEG
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 3
62172: NEG
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: LD_INT 3
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62237: LD_ADDR_VAR 0 45
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 3
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: NEG
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62587: LD_ADDR_VAR 0 46
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: LD_INT 3
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 3
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62935: LD_ADDR_VAR 0 47
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63086: LD_ADDR_VAR 0 48
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63233: LD_ADDR_VAR 0 49
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63377: LD_ADDR_VAR 0 50
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63521: LD_ADDR_VAR 0 51
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63668: LD_ADDR_VAR 0 52
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63819: LD_ADDR_VAR 0 53
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 2
64018: NEG
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64049: LD_ADDR_VAR 0 54
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: NEG
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64279: LD_ADDR_VAR 0 55
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 2
64455: NEG
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64509: LD_ADDR_VAR 0 56
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 2
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 2
64696: NEG
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64739: LD_ADDR_VAR 0 57
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 2
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64969: LD_ADDR_VAR 0 58
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 2
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 2
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: LD_INT 2
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65199: LD_ADDR_VAR 0 59
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65287: LD_ADDR_VAR 0 60
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65375: LD_ADDR_VAR 0 61
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65463: LD_ADDR_VAR 0 62
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65551: LD_ADDR_VAR 0 63
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65639: LD_ADDR_VAR 0 64
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// end ; 1 :
65727: GO 71624
65729: LD_INT 1
65731: DOUBLE
65732: EQUAL
65733: IFTRUE 65737
65735: GO 68360
65737: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65738: LD_ADDR_VAR 0 11
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65782: LD_ADDR_VAR 0 12
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 3
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65823: LD_ADDR_VAR 0 13
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: LD_INT 3
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65863: LD_ADDR_VAR 0 14
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 3
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: LIST
65903: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65904: LD_ADDR_VAR 0 15
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: NEG
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65948: LD_ADDR_VAR 0 16
65952: PUSH
65953: LD_INT 2
65955: NEG
65956: PUSH
65957: LD_INT 3
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 3
65967: NEG
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: NEG
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65994: LD_ADDR_VAR 0 17
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: LD_INT 3
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66038: LD_ADDR_VAR 0 18
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 3
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 3
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66079: LD_ADDR_VAR 0 19
66083: PUSH
66084: LD_INT 3
66086: PUSH
66087: LD_INT 2
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66119: LD_ADDR_VAR 0 20
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: LIST
66159: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66160: LD_ADDR_VAR 0 21
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 3
66178: NEG
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 3
66189: NEG
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66204: LD_ADDR_VAR 0 22
66208: PUSH
66209: LD_INT 2
66211: NEG
66212: PUSH
66213: LD_INT 3
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66250: LD_ADDR_VAR 0 23
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 3
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: LD_INT 4
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66294: LD_ADDR_VAR 0 24
66298: PUSH
66299: LD_INT 3
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 3
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 4
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66335: LD_ADDR_VAR 0 25
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: LD_INT 3
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 4
66352: PUSH
66353: LD_INT 3
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 3
66362: PUSH
66363: LD_INT 4
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66375: LD_ADDR_VAR 0 26
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: LD_INT 4
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66416: LD_ADDR_VAR 0 27
66420: PUSH
66421: LD_INT 3
66423: NEG
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 3
66434: NEG
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 4
66445: NEG
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66460: LD_ADDR_VAR 0 28
66464: PUSH
66465: LD_INT 3
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 4
66491: NEG
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: LIST
66505: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66506: LD_ADDR_VAR 0 29
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: LD_INT 3
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: LD_INT 2
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: LD_INT 4
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 4
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: LD_INT 3
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: LD_INT 5
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: LD_INT 5
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: LD_INT 4
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: LD_INT 6
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 6
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: LD_INT 5
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66661: LD_ADDR_VAR 0 30
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 3
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 4
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 4
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 5
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 5
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 5
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 6
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 6
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66804: LD_ADDR_VAR 0 31
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: LD_INT 2
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 2
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 4
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: LD_INT 4
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: LD_INT 4
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 5
66881: PUSH
66882: LD_INT 5
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 4
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 6
66901: PUSH
66902: LD_INT 5
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 6
66911: PUSH
66912: LD_INT 6
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 5
66921: PUSH
66922: LD_INT 6
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66943: LD_ADDR_VAR 0 32
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: LD_INT 3
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: LD_INT 5
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 0
67022: PUSH
67023: LD_INT 5
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: LD_INT 4
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: LD_INT 6
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: LD_INT 6
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 5
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67086: LD_ADDR_VAR 0 33
67090: PUSH
67091: LD_INT 2
67093: NEG
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 3
67104: NEG
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 3
67115: NEG
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 3
67127: NEG
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 4
67138: NEG
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 4
67149: NEG
67150: PUSH
67151: LD_INT 1
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 4
67161: NEG
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 5
67172: NEG
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 5
67183: NEG
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 5
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 6
67206: NEG
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 6
67217: NEG
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67241: LD_ADDR_VAR 0 34
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 3
67272: NEG
67273: PUSH
67274: LD_INT 3
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 3
67284: NEG
67285: PUSH
67286: LD_INT 4
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 4
67296: NEG
67297: PUSH
67298: LD_INT 3
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 4
67308: NEG
67309: PUSH
67310: LD_INT 4
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 4
67320: NEG
67321: PUSH
67322: LD_INT 5
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 5
67332: NEG
67333: PUSH
67334: LD_INT 4
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 5
67344: NEG
67345: PUSH
67346: LD_INT 5
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 5
67356: NEG
67357: PUSH
67358: LD_INT 6
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 6
67368: NEG
67369: PUSH
67370: LD_INT 5
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 6
67380: NEG
67381: PUSH
67382: LD_INT 6
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67404: LD_ADDR_VAR 0 41
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 2
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: LIST
67447: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67448: LD_ADDR_VAR 0 42
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 3
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67489: LD_ADDR_VAR 0 43
67493: PUSH
67494: LD_INT 2
67496: PUSH
67497: LD_INT 2
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: LD_INT 2
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 2
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67529: LD_ADDR_VAR 0 44
67533: PUSH
67534: LD_INT 0
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: LD_INT 3
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: LD_INT 2
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67570: LD_ADDR_VAR 0 45
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: NEG
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 3
67599: NEG
67600: PUSH
67601: LD_INT 1
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67614: LD_ADDR_VAR 0 46
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: LD_INT 2
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 2
67633: NEG
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: NEG
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67660: LD_ADDR_VAR 0 47
67664: PUSH
67665: LD_INT 2
67667: NEG
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: LD_INT 3
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67693: LD_ADDR_VAR 0 48
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: LD_INT 2
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: LD_INT 1
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67724: LD_ADDR_VAR 0 49
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67753: LD_ADDR_VAR 0 50
67757: PUSH
67758: LD_INT 2
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67782: LD_ADDR_VAR 0 51
67786: PUSH
67787: LD_INT 1
67789: NEG
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 2
67800: NEG
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67813: LD_ADDR_VAR 0 52
67817: PUSH
67818: LD_INT 3
67820: NEG
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: LD_INT 2
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67846: LD_ADDR_VAR 0 53
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: LD_INT 3
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: LD_INT 3
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: LD_INT 2
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67890: LD_ADDR_VAR 0 54
67894: PUSH
67895: LD_INT 2
67897: PUSH
67898: LD_INT 1
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: LD_INT 1
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67931: LD_ADDR_VAR 0 55
67935: PUSH
67936: LD_INT 3
67938: PUSH
67939: LD_INT 2
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: LIST
67970: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67971: LD_ADDR_VAR 0 56
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: LD_INT 3
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: LD_INT 3
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: LIST
68011: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68012: LD_ADDR_VAR 0 57
68016: PUSH
68017: LD_INT 2
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68056: LD_ADDR_VAR 0 58
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: LD_INT 3
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: LD_INT 2
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 3
68087: NEG
68088: PUSH
68089: LD_INT 3
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68102: LD_ADDR_VAR 0 59
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: LD_INT 2
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 2
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: LD_INT 1
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: LIST
68145: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68146: LD_ADDR_VAR 0 60
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 2
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68187: LD_ADDR_VAR 0 61
68191: PUSH
68192: LD_INT 2
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: LD_INT 2
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: LD_INT 2
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68227: LD_ADDR_VAR 0 62
68231: PUSH
68232: LD_INT 1
68234: PUSH
68235: LD_INT 2
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: LD_INT 2
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68268: LD_ADDR_VAR 0 63
68272: PUSH
68273: LD_INT 1
68275: NEG
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: LIST
68311: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68312: LD_ADDR_VAR 0 64
68316: PUSH
68317: LD_INT 1
68319: NEG
68320: PUSH
68321: LD_INT 2
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: ST_TO_ADDR
// end ; 2 :
68358: GO 71624
68360: LD_INT 2
68362: DOUBLE
68363: EQUAL
68364: IFTRUE 68368
68366: GO 71623
68368: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68369: LD_ADDR_VAR 0 29
68373: PUSH
68374: LD_INT 4
68376: PUSH
68377: LD_INT 0
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 4
68386: PUSH
68387: LD_INT 1
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 5
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 4
68417: PUSH
68418: LD_INT 1
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: LD_INT 0
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: LD_INT 1
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 3
68448: PUSH
68449: LD_INT 2
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 5
68459: PUSH
68460: LD_INT 2
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 3
68469: PUSH
68470: LD_INT 3
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 3
68479: PUSH
68480: LD_INT 2
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 4
68489: PUSH
68490: LD_INT 3
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 4
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 3
68509: PUSH
68510: LD_INT 4
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: LD_INT 3
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 2
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 4
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: LD_INT 4
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: LD_INT 4
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 5
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 5
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 4
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: LD_INT 3
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: PUSH
68632: LD_INT 5
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 3
68652: NEG
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: NEG
68664: PUSH
68665: LD_INT 1
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: LD_INT 0
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 2
68686: NEG
68687: PUSH
68688: LD_INT 1
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 3
68697: NEG
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 4
68719: NEG
68720: PUSH
68721: LD_INT 1
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: LD_INT 2
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: LD_INT 2
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 4
68754: NEG
68755: PUSH
68756: LD_INT 4
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 4
68766: NEG
68767: PUSH
68768: LD_INT 5
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 3
68778: NEG
68779: PUSH
68780: LD_INT 4
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 3
68790: NEG
68791: PUSH
68792: LD_INT 3
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 4
68802: NEG
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 5
68814: NEG
68815: PUSH
68816: LD_INT 4
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 5
68826: NEG
68827: PUSH
68828: LD_INT 5
68830: NEG
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 3
68838: NEG
68839: PUSH
68840: LD_INT 5
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 5
68850: NEG
68851: PUSH
68852: LD_INT 3
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68907: LD_ADDR_VAR 0 30
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: LD_INT 4
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 4
68924: PUSH
68925: LD_INT 3
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 5
68934: PUSH
68935: LD_INT 4
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: PUSH
68945: LD_INT 5
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 4
68954: PUSH
68955: LD_INT 5
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: LD_INT 4
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 5
68984: PUSH
68985: LD_INT 3
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: LD_INT 5
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: LD_INT 3
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: LD_INT 4
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: LD_INT 3
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: LD_INT 4
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: NEG
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 4
69097: NEG
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 4
69108: NEG
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 3
69120: NEG
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: NEG
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 4
69142: NEG
69143: PUSH
69144: LD_INT 1
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 5
69153: NEG
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 5
69164: NEG
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 5
69176: NEG
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 3
69199: NEG
69200: PUSH
69201: LD_INT 3
69203: NEG
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 3
69211: NEG
69212: PUSH
69213: LD_INT 4
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 2
69223: NEG
69224: PUSH
69225: LD_INT 3
69227: NEG
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: LD_INT 2
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: LD_INT 2
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 4
69259: NEG
69260: PUSH
69261: LD_INT 3
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 4
69271: NEG
69272: PUSH
69273: LD_INT 4
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 2
69283: NEG
69284: PUSH
69285: LD_INT 4
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 4
69295: NEG
69296: PUSH
69297: LD_INT 2
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_INT 4
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_INT 5
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: LD_INT 4
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 3
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: LD_INT 4
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: LD_INT 5
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 2
69386: PUSH
69387: LD_INT 3
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: LD_INT 5
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69454: LD_ADDR_VAR 0 31
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: LD_INT 4
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: LD_INT 3
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 1
69481: PUSH
69482: LD_INT 4
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 1
69491: PUSH
69492: LD_INT 5
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: LD_INT 5
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: LD_INT 4
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: LD_INT 3
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: LD_INT 5
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 2
69543: NEG
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: NEG
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 3
69599: NEG
69600: PUSH
69601: LD_INT 1
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 4
69621: NEG
69622: PUSH
69623: LD_INT 1
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 4
69633: NEG
69634: PUSH
69635: LD_INT 2
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PUSH
69647: LD_INT 2
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 4
69656: NEG
69657: PUSH
69658: LD_INT 4
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 4
69668: NEG
69669: PUSH
69670: LD_INT 5
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: NEG
69681: PUSH
69682: LD_INT 4
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 3
69692: NEG
69693: PUSH
69694: LD_INT 3
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 4
69704: NEG
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 5
69716: NEG
69717: PUSH
69718: LD_INT 4
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 5
69728: NEG
69729: PUSH
69730: LD_INT 5
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: LD_INT 5
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 5
69752: NEG
69753: PUSH
69754: LD_INT 3
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: LD_INT 3
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_INT 4
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 1
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 1
69797: PUSH
69798: LD_INT 2
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 1
69819: NEG
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: NEG
69832: PUSH
69833: LD_INT 4
69835: NEG
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 2
69843: PUSH
69844: LD_INT 2
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 2
69854: NEG
69855: PUSH
69856: LD_INT 4
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 4
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 4
69876: PUSH
69877: LD_INT 1
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 5
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 5
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 4
69907: PUSH
69908: LD_INT 1
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 3
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 5
69949: PUSH
69950: LD_INT 2
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70004: LD_ADDR_VAR 0 32
70008: PUSH
70009: LD_INT 4
70011: NEG
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 4
70022: NEG
70023: PUSH
70024: LD_INT 1
70026: NEG
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 3
70034: NEG
70035: PUSH
70036: LD_INT 0
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: NEG
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: NEG
70057: PUSH
70058: LD_INT 1
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 5
70067: NEG
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 5
70078: NEG
70079: PUSH
70080: LD_INT 1
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 5
70090: NEG
70091: PUSH
70092: LD_INT 2
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 3
70102: NEG
70103: PUSH
70104: LD_INT 2
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 3
70113: NEG
70114: PUSH
70115: LD_INT 3
70117: NEG
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 3
70125: NEG
70126: PUSH
70127: LD_INT 4
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 2
70137: NEG
70138: PUSH
70139: LD_INT 3
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 2
70149: NEG
70150: PUSH
70151: LD_INT 2
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: LD_INT 2
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 4
70173: NEG
70174: PUSH
70175: LD_INT 3
70177: NEG
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 4
70185: NEG
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 2
70197: NEG
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: NEG
70210: PUSH
70211: LD_INT 2
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: LD_INT 4
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 5
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: LD_INT 4
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 3
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: LD_INT 4
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 1
70288: NEG
70289: PUSH
70290: LD_INT 5
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 2
70300: PUSH
70301: LD_INT 3
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: LD_INT 5
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 3
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 4
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 3
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 2
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 2
70395: PUSH
70396: LD_INT 2
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 4
70406: PUSH
70407: LD_INT 2
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 4
70416: PUSH
70417: LD_INT 4
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 4
70426: PUSH
70427: LD_INT 3
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 5
70436: PUSH
70437: LD_INT 4
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 5
70446: PUSH
70447: LD_INT 5
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 4
70456: PUSH
70457: LD_INT 5
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 3
70466: PUSH
70467: LD_INT 4
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 3
70476: PUSH
70477: LD_INT 3
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 5
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 3
70496: PUSH
70497: LD_INT 5
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70551: LD_ADDR_VAR 0 33
70555: PUSH
70556: LD_INT 4
70558: NEG
70559: PUSH
70560: LD_INT 4
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 4
70570: NEG
70571: PUSH
70572: LD_INT 5
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 3
70582: NEG
70583: PUSH
70584: LD_INT 4
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 3
70594: NEG
70595: PUSH
70596: LD_INT 3
70598: NEG
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 4
70606: NEG
70607: PUSH
70608: LD_INT 3
70610: NEG
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 5
70618: NEG
70619: PUSH
70620: LD_INT 4
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 5
70630: NEG
70631: PUSH
70632: LD_INT 5
70634: NEG
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 3
70642: NEG
70643: PUSH
70644: LD_INT 5
70646: NEG
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 5
70654: NEG
70655: PUSH
70656: LD_INT 3
70658: NEG
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 0
70666: PUSH
70667: LD_INT 3
70669: NEG
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: LD_INT 4
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: LD_INT 3
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: LD_INT 2
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 2
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 1
70721: NEG
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: NEG
70734: PUSH
70735: LD_INT 4
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 2
70745: PUSH
70746: LD_INT 2
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 2
70756: NEG
70757: PUSH
70758: LD_INT 4
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 4
70768: PUSH
70769: LD_INT 0
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 4
70778: PUSH
70779: LD_INT 1
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 5
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 5
70799: PUSH
70800: LD_INT 1
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 4
70809: PUSH
70810: LD_INT 1
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 3
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 3
70840: PUSH
70841: LD_INT 2
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 5
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 3
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 3
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 4
70881: PUSH
70882: LD_INT 3
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 4
70891: PUSH
70892: LD_INT 4
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 3
70901: PUSH
70902: LD_INT 4
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: PUSH
70912: LD_INT 3
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: LD_INT 2
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 4
70931: PUSH
70932: LD_INT 2
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: LD_INT 4
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: LD_INT 4
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 3
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: PUSH
70972: LD_INT 4
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: LD_INT 5
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 5
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 4
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: NEG
71013: PUSH
71014: LD_INT 3
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: LD_INT 5
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 2
71033: NEG
71034: PUSH
71035: LD_INT 3
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71089: LD_ADDR_VAR 0 34
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: LD_INT 4
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: LD_INT 5
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 1
71118: PUSH
71119: LD_INT 4
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 1
71129: PUSH
71130: LD_INT 3
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_INT 3
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: NEG
71152: PUSH
71153: LD_INT 4
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 1
71163: NEG
71164: PUSH
71165: LD_INT 5
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 2
71175: PUSH
71176: LD_INT 3
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 2
71186: NEG
71187: PUSH
71188: LD_INT 5
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 3
71198: PUSH
71199: LD_INT 0
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 3
71208: PUSH
71209: LD_INT 1
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: LD_INT 0
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 4
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 3
71239: PUSH
71240: LD_INT 1
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 2
71249: PUSH
71250: LD_INT 0
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 2
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 2
71270: PUSH
71271: LD_INT 2
71273: NEG
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 4
71281: PUSH
71282: LD_INT 2
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 4
71291: PUSH
71292: LD_INT 4
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 4
71301: PUSH
71302: LD_INT 3
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 5
71311: PUSH
71312: LD_INT 4
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 5
71321: PUSH
71322: LD_INT 5
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 4
71331: PUSH
71332: LD_INT 5
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: LD_INT 4
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 3
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 5
71361: PUSH
71362: LD_INT 3
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 3
71371: PUSH
71372: LD_INT 5
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: LD_INT 3
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: LD_INT 2
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 1
71411: PUSH
71412: LD_INT 4
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 0
71421: PUSH
71422: LD_INT 4
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 1
71431: NEG
71432: PUSH
71433: LD_INT 3
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 1
71442: NEG
71443: PUSH
71444: LD_INT 2
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 2
71453: PUSH
71454: LD_INT 4
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 2
71463: NEG
71464: PUSH
71465: LD_INT 2
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 4
71474: NEG
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 4
71485: NEG
71486: PUSH
71487: LD_INT 1
71489: NEG
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 3
71497: NEG
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 3
71508: NEG
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 4
71519: NEG
71520: PUSH
71521: LD_INT 1
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 5
71530: NEG
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 5
71541: NEG
71542: PUSH
71543: LD_INT 1
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 5
71553: NEG
71554: PUSH
71555: LD_INT 2
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 3
71565: NEG
71566: PUSH
71567: LD_INT 2
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: ST_TO_ADDR
// end ; end ;
71621: GO 71624
71623: POP
// case btype of b_depot , b_warehouse :
71624: LD_VAR 0 1
71628: PUSH
71629: LD_INT 0
71631: DOUBLE
71632: EQUAL
71633: IFTRUE 71643
71635: LD_INT 1
71637: DOUBLE
71638: EQUAL
71639: IFTRUE 71643
71641: GO 71844
71643: POP
// case nation of nation_american :
71644: LD_VAR 0 5
71648: PUSH
71649: LD_INT 1
71651: DOUBLE
71652: EQUAL
71653: IFTRUE 71657
71655: GO 71713
71657: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71658: LD_ADDR_VAR 0 9
71662: PUSH
71663: LD_VAR 0 11
71667: PUSH
71668: LD_VAR 0 12
71672: PUSH
71673: LD_VAR 0 13
71677: PUSH
71678: LD_VAR 0 14
71682: PUSH
71683: LD_VAR 0 15
71687: PUSH
71688: LD_VAR 0 16
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: PUSH
71701: LD_VAR 0 4
71705: PUSH
71706: LD_INT 1
71708: PLUS
71709: ARRAY
71710: ST_TO_ADDR
71711: GO 71842
71713: LD_INT 2
71715: DOUBLE
71716: EQUAL
71717: IFTRUE 71721
71719: GO 71777
71721: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71722: LD_ADDR_VAR 0 9
71726: PUSH
71727: LD_VAR 0 17
71731: PUSH
71732: LD_VAR 0 18
71736: PUSH
71737: LD_VAR 0 19
71741: PUSH
71742: LD_VAR 0 20
71746: PUSH
71747: LD_VAR 0 21
71751: PUSH
71752: LD_VAR 0 22
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: PUSH
71765: LD_VAR 0 4
71769: PUSH
71770: LD_INT 1
71772: PLUS
71773: ARRAY
71774: ST_TO_ADDR
71775: GO 71842
71777: LD_INT 3
71779: DOUBLE
71780: EQUAL
71781: IFTRUE 71785
71783: GO 71841
71785: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71786: LD_ADDR_VAR 0 9
71790: PUSH
71791: LD_VAR 0 23
71795: PUSH
71796: LD_VAR 0 24
71800: PUSH
71801: LD_VAR 0 25
71805: PUSH
71806: LD_VAR 0 26
71810: PUSH
71811: LD_VAR 0 27
71815: PUSH
71816: LD_VAR 0 28
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: PUSH
71829: LD_VAR 0 4
71833: PUSH
71834: LD_INT 1
71836: PLUS
71837: ARRAY
71838: ST_TO_ADDR
71839: GO 71842
71841: POP
71842: GO 72397
71844: LD_INT 2
71846: DOUBLE
71847: EQUAL
71848: IFTRUE 71858
71850: LD_INT 3
71852: DOUBLE
71853: EQUAL
71854: IFTRUE 71858
71856: GO 71914
71858: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71859: LD_ADDR_VAR 0 9
71863: PUSH
71864: LD_VAR 0 29
71868: PUSH
71869: LD_VAR 0 30
71873: PUSH
71874: LD_VAR 0 31
71878: PUSH
71879: LD_VAR 0 32
71883: PUSH
71884: LD_VAR 0 33
71888: PUSH
71889: LD_VAR 0 34
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: PUSH
71902: LD_VAR 0 4
71906: PUSH
71907: LD_INT 1
71909: PLUS
71910: ARRAY
71911: ST_TO_ADDR
71912: GO 72397
71914: LD_INT 16
71916: DOUBLE
71917: EQUAL
71918: IFTRUE 71976
71920: LD_INT 17
71922: DOUBLE
71923: EQUAL
71924: IFTRUE 71976
71926: LD_INT 18
71928: DOUBLE
71929: EQUAL
71930: IFTRUE 71976
71932: LD_INT 19
71934: DOUBLE
71935: EQUAL
71936: IFTRUE 71976
71938: LD_INT 22
71940: DOUBLE
71941: EQUAL
71942: IFTRUE 71976
71944: LD_INT 20
71946: DOUBLE
71947: EQUAL
71948: IFTRUE 71976
71950: LD_INT 21
71952: DOUBLE
71953: EQUAL
71954: IFTRUE 71976
71956: LD_INT 23
71958: DOUBLE
71959: EQUAL
71960: IFTRUE 71976
71962: LD_INT 24
71964: DOUBLE
71965: EQUAL
71966: IFTRUE 71976
71968: LD_INT 25
71970: DOUBLE
71971: EQUAL
71972: IFTRUE 71976
71974: GO 72032
71976: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71977: LD_ADDR_VAR 0 9
71981: PUSH
71982: LD_VAR 0 35
71986: PUSH
71987: LD_VAR 0 36
71991: PUSH
71992: LD_VAR 0 37
71996: PUSH
71997: LD_VAR 0 38
72001: PUSH
72002: LD_VAR 0 39
72006: PUSH
72007: LD_VAR 0 40
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: PUSH
72020: LD_VAR 0 4
72024: PUSH
72025: LD_INT 1
72027: PLUS
72028: ARRAY
72029: ST_TO_ADDR
72030: GO 72397
72032: LD_INT 6
72034: DOUBLE
72035: EQUAL
72036: IFTRUE 72088
72038: LD_INT 7
72040: DOUBLE
72041: EQUAL
72042: IFTRUE 72088
72044: LD_INT 8
72046: DOUBLE
72047: EQUAL
72048: IFTRUE 72088
72050: LD_INT 13
72052: DOUBLE
72053: EQUAL
72054: IFTRUE 72088
72056: LD_INT 12
72058: DOUBLE
72059: EQUAL
72060: IFTRUE 72088
72062: LD_INT 15
72064: DOUBLE
72065: EQUAL
72066: IFTRUE 72088
72068: LD_INT 11
72070: DOUBLE
72071: EQUAL
72072: IFTRUE 72088
72074: LD_INT 14
72076: DOUBLE
72077: EQUAL
72078: IFTRUE 72088
72080: LD_INT 10
72082: DOUBLE
72083: EQUAL
72084: IFTRUE 72088
72086: GO 72144
72088: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72089: LD_ADDR_VAR 0 9
72093: PUSH
72094: LD_VAR 0 41
72098: PUSH
72099: LD_VAR 0 42
72103: PUSH
72104: LD_VAR 0 43
72108: PUSH
72109: LD_VAR 0 44
72113: PUSH
72114: LD_VAR 0 45
72118: PUSH
72119: LD_VAR 0 46
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: PUSH
72132: LD_VAR 0 4
72136: PUSH
72137: LD_INT 1
72139: PLUS
72140: ARRAY
72141: ST_TO_ADDR
72142: GO 72397
72144: LD_INT 36
72146: DOUBLE
72147: EQUAL
72148: IFTRUE 72152
72150: GO 72208
72152: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72153: LD_ADDR_VAR 0 9
72157: PUSH
72158: LD_VAR 0 47
72162: PUSH
72163: LD_VAR 0 48
72167: PUSH
72168: LD_VAR 0 49
72172: PUSH
72173: LD_VAR 0 50
72177: PUSH
72178: LD_VAR 0 51
72182: PUSH
72183: LD_VAR 0 52
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: PUSH
72196: LD_VAR 0 4
72200: PUSH
72201: LD_INT 1
72203: PLUS
72204: ARRAY
72205: ST_TO_ADDR
72206: GO 72397
72208: LD_INT 4
72210: DOUBLE
72211: EQUAL
72212: IFTRUE 72234
72214: LD_INT 5
72216: DOUBLE
72217: EQUAL
72218: IFTRUE 72234
72220: LD_INT 34
72222: DOUBLE
72223: EQUAL
72224: IFTRUE 72234
72226: LD_INT 37
72228: DOUBLE
72229: EQUAL
72230: IFTRUE 72234
72232: GO 72290
72234: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72235: LD_ADDR_VAR 0 9
72239: PUSH
72240: LD_VAR 0 53
72244: PUSH
72245: LD_VAR 0 54
72249: PUSH
72250: LD_VAR 0 55
72254: PUSH
72255: LD_VAR 0 56
72259: PUSH
72260: LD_VAR 0 57
72264: PUSH
72265: LD_VAR 0 58
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: PUSH
72278: LD_VAR 0 4
72282: PUSH
72283: LD_INT 1
72285: PLUS
72286: ARRAY
72287: ST_TO_ADDR
72288: GO 72397
72290: LD_INT 31
72292: DOUBLE
72293: EQUAL
72294: IFTRUE 72340
72296: LD_INT 32
72298: DOUBLE
72299: EQUAL
72300: IFTRUE 72340
72302: LD_INT 33
72304: DOUBLE
72305: EQUAL
72306: IFTRUE 72340
72308: LD_INT 27
72310: DOUBLE
72311: EQUAL
72312: IFTRUE 72340
72314: LD_INT 26
72316: DOUBLE
72317: EQUAL
72318: IFTRUE 72340
72320: LD_INT 28
72322: DOUBLE
72323: EQUAL
72324: IFTRUE 72340
72326: LD_INT 29
72328: DOUBLE
72329: EQUAL
72330: IFTRUE 72340
72332: LD_INT 30
72334: DOUBLE
72335: EQUAL
72336: IFTRUE 72340
72338: GO 72396
72340: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72341: LD_ADDR_VAR 0 9
72345: PUSH
72346: LD_VAR 0 59
72350: PUSH
72351: LD_VAR 0 60
72355: PUSH
72356: LD_VAR 0 61
72360: PUSH
72361: LD_VAR 0 62
72365: PUSH
72366: LD_VAR 0 63
72370: PUSH
72371: LD_VAR 0 64
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: PUSH
72384: LD_VAR 0 4
72388: PUSH
72389: LD_INT 1
72391: PLUS
72392: ARRAY
72393: ST_TO_ADDR
72394: GO 72397
72396: POP
// temp_list2 = [ ] ;
72397: LD_ADDR_VAR 0 10
72401: PUSH
72402: EMPTY
72403: ST_TO_ADDR
// for i in temp_list do
72404: LD_ADDR_VAR 0 8
72408: PUSH
72409: LD_VAR 0 9
72413: PUSH
72414: FOR_IN
72415: IFFALSE 72467
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72417: LD_ADDR_VAR 0 10
72421: PUSH
72422: LD_VAR 0 10
72426: PUSH
72427: LD_VAR 0 8
72431: PUSH
72432: LD_INT 1
72434: ARRAY
72435: PUSH
72436: LD_VAR 0 2
72440: PLUS
72441: PUSH
72442: LD_VAR 0 8
72446: PUSH
72447: LD_INT 2
72449: ARRAY
72450: PUSH
72451: LD_VAR 0 3
72455: PLUS
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: EMPTY
72462: LIST
72463: ADD
72464: ST_TO_ADDR
72465: GO 72414
72467: POP
72468: POP
// result = temp_list2 ;
72469: LD_ADDR_VAR 0 7
72473: PUSH
72474: LD_VAR 0 10
72478: ST_TO_ADDR
// end ;
72479: LD_VAR 0 7
72483: RET
// export function EnemyInRange ( unit , dist ) ; begin
72484: LD_INT 0
72486: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72487: LD_ADDR_VAR 0 3
72491: PUSH
72492: LD_VAR 0 1
72496: PPUSH
72497: CALL_OW 255
72501: PPUSH
72502: LD_VAR 0 1
72506: PPUSH
72507: CALL_OW 250
72511: PPUSH
72512: LD_VAR 0 1
72516: PPUSH
72517: CALL_OW 251
72521: PPUSH
72522: LD_VAR 0 2
72526: PPUSH
72527: CALL 45741 0 4
72531: PUSH
72532: LD_INT 4
72534: ARRAY
72535: ST_TO_ADDR
// end ;
72536: LD_VAR 0 3
72540: RET
// export function PlayerSeeMe ( unit ) ; begin
72541: LD_INT 0
72543: PPUSH
// result := See ( your_side , unit ) ;
72544: LD_ADDR_VAR 0 2
72548: PUSH
72549: LD_OWVAR 2
72553: PPUSH
72554: LD_VAR 0 1
72558: PPUSH
72559: CALL_OW 292
72563: ST_TO_ADDR
// end ;
72564: LD_VAR 0 2
72568: RET
// export function ReverseDir ( unit ) ; begin
72569: LD_INT 0
72571: PPUSH
// if not unit then
72572: LD_VAR 0 1
72576: NOT
72577: IFFALSE 72581
// exit ;
72579: GO 72604
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72581: LD_ADDR_VAR 0 2
72585: PUSH
72586: LD_VAR 0 1
72590: PPUSH
72591: CALL_OW 254
72595: PUSH
72596: LD_INT 3
72598: PLUS
72599: PUSH
72600: LD_INT 6
72602: MOD
72603: ST_TO_ADDR
// end ;
72604: LD_VAR 0 2
72608: RET
// export function ReverseArray ( array ) ; var i ; begin
72609: LD_INT 0
72611: PPUSH
72612: PPUSH
// if not array then
72613: LD_VAR 0 1
72617: NOT
72618: IFFALSE 72622
// exit ;
72620: GO 72677
// result := [ ] ;
72622: LD_ADDR_VAR 0 2
72626: PUSH
72627: EMPTY
72628: ST_TO_ADDR
// for i := array downto 1 do
72629: LD_ADDR_VAR 0 3
72633: PUSH
72634: DOUBLE
72635: LD_VAR 0 1
72639: INC
72640: ST_TO_ADDR
72641: LD_INT 1
72643: PUSH
72644: FOR_DOWNTO
72645: IFFALSE 72675
// result := Join ( result , array [ i ] ) ;
72647: LD_ADDR_VAR 0 2
72651: PUSH
72652: LD_VAR 0 2
72656: PPUSH
72657: LD_VAR 0 1
72661: PUSH
72662: LD_VAR 0 3
72666: ARRAY
72667: PPUSH
72668: CALL 77519 0 2
72672: ST_TO_ADDR
72673: GO 72644
72675: POP
72676: POP
// end ;
72677: LD_VAR 0 2
72681: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72682: LD_INT 0
72684: PPUSH
72685: PPUSH
72686: PPUSH
72687: PPUSH
72688: PPUSH
72689: PPUSH
// if not unit or not hexes then
72690: LD_VAR 0 1
72694: NOT
72695: IFTRUE 72704
72697: PUSH
72698: LD_VAR 0 2
72702: NOT
72703: OR
72704: IFFALSE 72708
// exit ;
72706: GO 72831
// dist := 9999 ;
72708: LD_ADDR_VAR 0 5
72712: PUSH
72713: LD_INT 9999
72715: ST_TO_ADDR
// for i = 1 to hexes do
72716: LD_ADDR_VAR 0 4
72720: PUSH
72721: DOUBLE
72722: LD_INT 1
72724: DEC
72725: ST_TO_ADDR
72726: LD_VAR 0 2
72730: PUSH
72731: FOR_TO
72732: IFFALSE 72819
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72734: LD_ADDR_VAR 0 6
72738: PUSH
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 2
72748: PUSH
72749: LD_VAR 0 4
72753: ARRAY
72754: PUSH
72755: LD_INT 1
72757: ARRAY
72758: PPUSH
72759: LD_VAR 0 2
72763: PUSH
72764: LD_VAR 0 4
72768: ARRAY
72769: PUSH
72770: LD_INT 2
72772: ARRAY
72773: PPUSH
72774: CALL_OW 297
72778: ST_TO_ADDR
// if tdist < dist then
72779: LD_VAR 0 6
72783: PUSH
72784: LD_VAR 0 5
72788: LESS
72789: IFFALSE 72817
// begin hex := hexes [ i ] ;
72791: LD_ADDR_VAR 0 8
72795: PUSH
72796: LD_VAR 0 2
72800: PUSH
72801: LD_VAR 0 4
72805: ARRAY
72806: ST_TO_ADDR
// dist := tdist ;
72807: LD_ADDR_VAR 0 5
72811: PUSH
72812: LD_VAR 0 6
72816: ST_TO_ADDR
// end ; end ;
72817: GO 72731
72819: POP
72820: POP
// result := hex ;
72821: LD_ADDR_VAR 0 3
72825: PUSH
72826: LD_VAR 0 8
72830: ST_TO_ADDR
// end ;
72831: LD_VAR 0 3
72835: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72836: LD_INT 0
72838: PPUSH
72839: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72840: LD_VAR 0 1
72844: NOT
72845: IFTRUE 72884
72847: PUSH
72848: LD_VAR 0 1
72852: PUSH
72853: LD_INT 21
72855: PUSH
72856: LD_INT 2
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 23
72865: PUSH
72866: LD_INT 2
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PPUSH
72877: CALL_OW 69
72881: IN
72882: NOT
72883: OR
72884: IFFALSE 72888
// exit ;
72886: GO 72935
// for i = 1 to 3 do
72888: LD_ADDR_VAR 0 3
72892: PUSH
72893: DOUBLE
72894: LD_INT 1
72896: DEC
72897: ST_TO_ADDR
72898: LD_INT 3
72900: PUSH
72901: FOR_TO
72902: IFFALSE 72933
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 250
72913: PPUSH
72914: LD_VAR 0 1
72918: PPUSH
72919: CALL_OW 251
72923: PPUSH
72924: LD_INT 1
72926: PPUSH
72927: CALL_OW 453
72931: GO 72901
72933: POP
72934: POP
// end ;
72935: LD_VAR 0 2
72939: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72940: LD_INT 0
72942: PPUSH
72943: PPUSH
72944: PPUSH
72945: PPUSH
72946: PPUSH
72947: PPUSH
// if not unit or not enemy_unit then
72948: LD_VAR 0 1
72952: NOT
72953: IFTRUE 72962
72955: PUSH
72956: LD_VAR 0 2
72960: NOT
72961: OR
72962: IFFALSE 72966
// exit ;
72964: GO 73437
// if GetLives ( i ) < 250 then
72966: LD_VAR 0 4
72970: PPUSH
72971: CALL_OW 256
72975: PUSH
72976: LD_INT 250
72978: LESS
72979: IFFALSE 72992
// begin ComAutodestruct ( i ) ;
72981: LD_VAR 0 4
72985: PPUSH
72986: CALL 72836 0 1
// exit ;
72990: GO 73437
// end ; x := GetX ( enemy_unit ) ;
72992: LD_ADDR_VAR 0 7
72996: PUSH
72997: LD_VAR 0 2
73001: PPUSH
73002: CALL_OW 250
73006: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73007: LD_ADDR_VAR 0 8
73011: PUSH
73012: LD_VAR 0 2
73016: PPUSH
73017: CALL_OW 251
73021: ST_TO_ADDR
// if not x or not y then
73022: LD_VAR 0 7
73026: NOT
73027: IFTRUE 73036
73029: PUSH
73030: LD_VAR 0 8
73034: NOT
73035: OR
73036: IFFALSE 73040
// exit ;
73038: GO 73437
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73040: LD_ADDR_VAR 0 6
73044: PUSH
73045: LD_VAR 0 7
73049: PPUSH
73050: LD_INT 0
73052: PPUSH
73053: LD_INT 4
73055: PPUSH
73056: CALL_OW 272
73060: PUSH
73061: LD_VAR 0 8
73065: PPUSH
73066: LD_INT 0
73068: PPUSH
73069: LD_INT 4
73071: PPUSH
73072: CALL_OW 273
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_VAR 0 7
73085: PPUSH
73086: LD_INT 1
73088: PPUSH
73089: LD_INT 4
73091: PPUSH
73092: CALL_OW 272
73096: PUSH
73097: LD_VAR 0 8
73101: PPUSH
73102: LD_INT 1
73104: PPUSH
73105: LD_INT 4
73107: PPUSH
73108: CALL_OW 273
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_VAR 0 7
73121: PPUSH
73122: LD_INT 2
73124: PPUSH
73125: LD_INT 4
73127: PPUSH
73128: CALL_OW 272
73132: PUSH
73133: LD_VAR 0 8
73137: PPUSH
73138: LD_INT 2
73140: PPUSH
73141: LD_INT 4
73143: PPUSH
73144: CALL_OW 273
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_VAR 0 7
73157: PPUSH
73158: LD_INT 3
73160: PPUSH
73161: LD_INT 4
73163: PPUSH
73164: CALL_OW 272
73168: PUSH
73169: LD_VAR 0 8
73173: PPUSH
73174: LD_INT 3
73176: PPUSH
73177: LD_INT 4
73179: PPUSH
73180: CALL_OW 273
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_VAR 0 7
73193: PPUSH
73194: LD_INT 4
73196: PPUSH
73197: LD_INT 4
73199: PPUSH
73200: CALL_OW 272
73204: PUSH
73205: LD_VAR 0 8
73209: PPUSH
73210: LD_INT 4
73212: PPUSH
73213: LD_INT 4
73215: PPUSH
73216: CALL_OW 273
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_VAR 0 7
73229: PPUSH
73230: LD_INT 5
73232: PPUSH
73233: LD_INT 4
73235: PPUSH
73236: CALL_OW 272
73240: PUSH
73241: LD_VAR 0 8
73245: PPUSH
73246: LD_INT 5
73248: PPUSH
73249: LD_INT 4
73251: PPUSH
73252: CALL_OW 273
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: ST_TO_ADDR
// for i = tmp downto 1 do
73269: LD_ADDR_VAR 0 4
73273: PUSH
73274: DOUBLE
73275: LD_VAR 0 6
73279: INC
73280: ST_TO_ADDR
73281: LD_INT 1
73283: PUSH
73284: FOR_DOWNTO
73285: IFFALSE 73388
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73287: LD_VAR 0 6
73291: PUSH
73292: LD_VAR 0 4
73296: ARRAY
73297: PUSH
73298: LD_INT 1
73300: ARRAY
73301: PPUSH
73302: LD_VAR 0 6
73306: PUSH
73307: LD_VAR 0 4
73311: ARRAY
73312: PUSH
73313: LD_INT 2
73315: ARRAY
73316: PPUSH
73317: CALL_OW 488
73321: NOT
73322: IFTRUE 73364
73324: PUSH
73325: LD_VAR 0 6
73329: PUSH
73330: LD_VAR 0 4
73334: ARRAY
73335: PUSH
73336: LD_INT 1
73338: ARRAY
73339: PPUSH
73340: LD_VAR 0 6
73344: PUSH
73345: LD_VAR 0 4
73349: ARRAY
73350: PUSH
73351: LD_INT 2
73353: ARRAY
73354: PPUSH
73355: CALL_OW 428
73359: PUSH
73360: LD_INT 0
73362: NONEQUAL
73363: OR
73364: IFFALSE 73386
// tmp := Delete ( tmp , i ) ;
73366: LD_ADDR_VAR 0 6
73370: PUSH
73371: LD_VAR 0 6
73375: PPUSH
73376: LD_VAR 0 4
73380: PPUSH
73381: CALL_OW 3
73385: ST_TO_ADDR
73386: GO 73284
73388: POP
73389: POP
// j := GetClosestHex ( unit , tmp ) ;
73390: LD_ADDR_VAR 0 5
73394: PUSH
73395: LD_VAR 0 1
73399: PPUSH
73400: LD_VAR 0 6
73404: PPUSH
73405: CALL 72682 0 2
73409: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73410: LD_VAR 0 1
73414: PPUSH
73415: LD_VAR 0 5
73419: PUSH
73420: LD_INT 1
73422: ARRAY
73423: PPUSH
73424: LD_VAR 0 5
73428: PUSH
73429: LD_INT 2
73431: ARRAY
73432: PPUSH
73433: CALL_OW 111
// end ;
73437: LD_VAR 0 3
73441: RET
// export function PrepareApemanSoldier ( ) ; begin
73442: LD_INT 0
73444: PPUSH
// uc_nation := 0 ;
73445: LD_ADDR_OWVAR 21
73449: PUSH
73450: LD_INT 0
73452: ST_TO_ADDR
// hc_sex := sex_male ;
73453: LD_ADDR_OWVAR 27
73457: PUSH
73458: LD_INT 1
73460: ST_TO_ADDR
// hc_name :=  ;
73461: LD_ADDR_OWVAR 26
73465: PUSH
73466: LD_STRING 
73468: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73469: LD_ADDR_OWVAR 28
73473: PUSH
73474: LD_INT 15
73476: ST_TO_ADDR
// hc_gallery :=  ;
73477: LD_ADDR_OWVAR 33
73481: PUSH
73482: LD_STRING 
73484: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73485: LD_ADDR_OWVAR 31
73489: PUSH
73490: LD_INT 0
73492: PPUSH
73493: LD_INT 3
73495: PPUSH
73496: CALL_OW 12
73500: PUSH
73501: LD_INT 0
73503: PPUSH
73504: LD_INT 3
73506: PPUSH
73507: CALL_OW 12
73511: PUSH
73512: LD_INT 0
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73524: LD_ADDR_OWVAR 29
73528: PUSH
73529: LD_INT 12
73531: PUSH
73532: LD_INT 12
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: ST_TO_ADDR
// end ;
73539: LD_VAR 0 1
73543: RET
// export function PrepareApemanEngineer ( ) ; begin
73544: LD_INT 0
73546: PPUSH
// uc_nation := 0 ;
73547: LD_ADDR_OWVAR 21
73551: PUSH
73552: LD_INT 0
73554: ST_TO_ADDR
// hc_sex := sex_male ;
73555: LD_ADDR_OWVAR 27
73559: PUSH
73560: LD_INT 1
73562: ST_TO_ADDR
// hc_name :=  ;
73563: LD_ADDR_OWVAR 26
73567: PUSH
73568: LD_STRING 
73570: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73571: LD_ADDR_OWVAR 28
73575: PUSH
73576: LD_INT 16
73578: ST_TO_ADDR
// hc_gallery :=  ;
73579: LD_ADDR_OWVAR 33
73583: PUSH
73584: LD_STRING 
73586: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73587: LD_ADDR_OWVAR 31
73591: PUSH
73592: LD_INT 0
73594: PPUSH
73595: LD_INT 3
73597: PPUSH
73598: CALL_OW 12
73602: PUSH
73603: LD_INT 0
73605: PPUSH
73606: LD_INT 3
73608: PPUSH
73609: CALL_OW 12
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 0
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73626: LD_ADDR_OWVAR 29
73630: PUSH
73631: LD_INT 12
73633: PUSH
73634: LD_INT 12
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: ST_TO_ADDR
// end ;
73641: LD_VAR 0 1
73645: RET
// export function PrepareApeman ( agressivity ) ; begin
73646: LD_INT 0
73648: PPUSH
// uc_side := 0 ;
73649: LD_ADDR_OWVAR 20
73653: PUSH
73654: LD_INT 0
73656: ST_TO_ADDR
// uc_nation := 0 ;
73657: LD_ADDR_OWVAR 21
73661: PUSH
73662: LD_INT 0
73664: ST_TO_ADDR
// hc_sex := sex_male ;
73665: LD_ADDR_OWVAR 27
73669: PUSH
73670: LD_INT 1
73672: ST_TO_ADDR
// hc_class := class_apeman ;
73673: LD_ADDR_OWVAR 28
73677: PUSH
73678: LD_INT 12
73680: ST_TO_ADDR
// hc_gallery :=  ;
73681: LD_ADDR_OWVAR 33
73685: PUSH
73686: LD_STRING 
73688: ST_TO_ADDR
// hc_name :=  ;
73689: LD_ADDR_OWVAR 26
73693: PUSH
73694: LD_STRING 
73696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73697: LD_ADDR_OWVAR 29
73701: PUSH
73702: LD_INT 12
73704: PUSH
73705: LD_INT 12
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: ST_TO_ADDR
// if agressivity = 0 then
73712: LD_VAR 0 1
73716: PUSH
73717: LD_INT 0
73719: EQUAL
73720: IFFALSE 73732
// hc_agressivity := 0 else
73722: LD_ADDR_OWVAR 35
73726: PUSH
73727: LD_INT 0
73729: ST_TO_ADDR
73730: GO 73753
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73732: LD_ADDR_OWVAR 35
73736: PUSH
73737: LD_VAR 0 1
73741: NEG
73742: PPUSH
73743: LD_VAR 0 1
73747: PPUSH
73748: CALL_OW 12
73752: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73753: LD_ADDR_OWVAR 31
73757: PUSH
73758: LD_INT 0
73760: PPUSH
73761: LD_INT 3
73763: PPUSH
73764: CALL_OW 12
73768: PUSH
73769: LD_INT 0
73771: PPUSH
73772: LD_INT 3
73774: PPUSH
73775: CALL_OW 12
73779: PUSH
73780: LD_INT 0
73782: PUSH
73783: LD_INT 0
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: ST_TO_ADDR
// end ;
73792: LD_VAR 0 2
73796: RET
// export function PrepareTiger ( agressivity ) ; begin
73797: LD_INT 0
73799: PPUSH
// uc_side := 0 ;
73800: LD_ADDR_OWVAR 20
73804: PUSH
73805: LD_INT 0
73807: ST_TO_ADDR
// uc_nation := 0 ;
73808: LD_ADDR_OWVAR 21
73812: PUSH
73813: LD_INT 0
73815: ST_TO_ADDR
// InitHc ;
73816: CALL_OW 19
// hc_class := class_tiger ;
73820: LD_ADDR_OWVAR 28
73824: PUSH
73825: LD_INT 14
73827: ST_TO_ADDR
// hc_gallery :=  ;
73828: LD_ADDR_OWVAR 33
73832: PUSH
73833: LD_STRING 
73835: ST_TO_ADDR
// hc_name :=  ;
73836: LD_ADDR_OWVAR 26
73840: PUSH
73841: LD_STRING 
73843: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73844: LD_ADDR_OWVAR 35
73848: PUSH
73849: LD_VAR 0 1
73853: NEG
73854: PPUSH
73855: LD_VAR 0 1
73859: PPUSH
73860: CALL_OW 12
73864: ST_TO_ADDR
// end ;
73865: LD_VAR 0 2
73869: RET
// export function PrepareEnchidna ( ) ; begin
73870: LD_INT 0
73872: PPUSH
// uc_side := 0 ;
73873: LD_ADDR_OWVAR 20
73877: PUSH
73878: LD_INT 0
73880: ST_TO_ADDR
// uc_nation := 0 ;
73881: LD_ADDR_OWVAR 21
73885: PUSH
73886: LD_INT 0
73888: ST_TO_ADDR
// InitHc ;
73889: CALL_OW 19
// hc_class := class_baggie ;
73893: LD_ADDR_OWVAR 28
73897: PUSH
73898: LD_INT 13
73900: ST_TO_ADDR
// hc_gallery :=  ;
73901: LD_ADDR_OWVAR 33
73905: PUSH
73906: LD_STRING 
73908: ST_TO_ADDR
// hc_name :=  ;
73909: LD_ADDR_OWVAR 26
73913: PUSH
73914: LD_STRING 
73916: ST_TO_ADDR
// end ;
73917: LD_VAR 0 1
73921: RET
// export function PrepareFrog ( ) ; begin
73922: LD_INT 0
73924: PPUSH
// uc_side := 0 ;
73925: LD_ADDR_OWVAR 20
73929: PUSH
73930: LD_INT 0
73932: ST_TO_ADDR
// uc_nation := 0 ;
73933: LD_ADDR_OWVAR 21
73937: PUSH
73938: LD_INT 0
73940: ST_TO_ADDR
// InitHc ;
73941: CALL_OW 19
// hc_class := class_frog ;
73945: LD_ADDR_OWVAR 28
73949: PUSH
73950: LD_INT 19
73952: ST_TO_ADDR
// hc_gallery :=  ;
73953: LD_ADDR_OWVAR 33
73957: PUSH
73958: LD_STRING 
73960: ST_TO_ADDR
// hc_name :=  ;
73961: LD_ADDR_OWVAR 26
73965: PUSH
73966: LD_STRING 
73968: ST_TO_ADDR
// end ;
73969: LD_VAR 0 1
73973: RET
// export function PrepareFish ( ) ; begin
73974: LD_INT 0
73976: PPUSH
// uc_side := 0 ;
73977: LD_ADDR_OWVAR 20
73981: PUSH
73982: LD_INT 0
73984: ST_TO_ADDR
// uc_nation := 0 ;
73985: LD_ADDR_OWVAR 21
73989: PUSH
73990: LD_INT 0
73992: ST_TO_ADDR
// InitHc ;
73993: CALL_OW 19
// hc_class := class_fish ;
73997: LD_ADDR_OWVAR 28
74001: PUSH
74002: LD_INT 20
74004: ST_TO_ADDR
// hc_gallery :=  ;
74005: LD_ADDR_OWVAR 33
74009: PUSH
74010: LD_STRING 
74012: ST_TO_ADDR
// hc_name :=  ;
74013: LD_ADDR_OWVAR 26
74017: PUSH
74018: LD_STRING 
74020: ST_TO_ADDR
// end ;
74021: LD_VAR 0 1
74025: RET
// export function PrepareBird ( ) ; begin
74026: LD_INT 0
74028: PPUSH
// uc_side := 0 ;
74029: LD_ADDR_OWVAR 20
74033: PUSH
74034: LD_INT 0
74036: ST_TO_ADDR
// uc_nation := 0 ;
74037: LD_ADDR_OWVAR 21
74041: PUSH
74042: LD_INT 0
74044: ST_TO_ADDR
// InitHc ;
74045: CALL_OW 19
// hc_class := class_phororhacos ;
74049: LD_ADDR_OWVAR 28
74053: PUSH
74054: LD_INT 18
74056: ST_TO_ADDR
// hc_gallery :=  ;
74057: LD_ADDR_OWVAR 33
74061: PUSH
74062: LD_STRING 
74064: ST_TO_ADDR
// hc_name :=  ;
74065: LD_ADDR_OWVAR 26
74069: PUSH
74070: LD_STRING 
74072: ST_TO_ADDR
// end ;
74073: LD_VAR 0 1
74077: RET
// export function PrepareHorse ( ) ; begin
74078: LD_INT 0
74080: PPUSH
// uc_side := 0 ;
74081: LD_ADDR_OWVAR 20
74085: PUSH
74086: LD_INT 0
74088: ST_TO_ADDR
// uc_nation := 0 ;
74089: LD_ADDR_OWVAR 21
74093: PUSH
74094: LD_INT 0
74096: ST_TO_ADDR
// InitHc ;
74097: CALL_OW 19
// hc_class := class_horse ;
74101: LD_ADDR_OWVAR 28
74105: PUSH
74106: LD_INT 21
74108: ST_TO_ADDR
// hc_gallery :=  ;
74109: LD_ADDR_OWVAR 33
74113: PUSH
74114: LD_STRING 
74116: ST_TO_ADDR
// hc_name :=  ;
74117: LD_ADDR_OWVAR 26
74121: PUSH
74122: LD_STRING 
74124: ST_TO_ADDR
// end ;
74125: LD_VAR 0 1
74129: RET
// export function PrepareMastodont ( ) ; begin
74130: LD_INT 0
74132: PPUSH
// uc_side := 0 ;
74133: LD_ADDR_OWVAR 20
74137: PUSH
74138: LD_INT 0
74140: ST_TO_ADDR
// uc_nation := 0 ;
74141: LD_ADDR_OWVAR 21
74145: PUSH
74146: LD_INT 0
74148: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74149: LD_ADDR_OWVAR 37
74153: PUSH
74154: LD_INT 31
74156: ST_TO_ADDR
// vc_control := control_rider ;
74157: LD_ADDR_OWVAR 38
74161: PUSH
74162: LD_INT 4
74164: ST_TO_ADDR
// end ;
74165: LD_VAR 0 1
74169: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74170: LD_INT 0
74172: PPUSH
74173: PPUSH
74174: PPUSH
// uc_side = 0 ;
74175: LD_ADDR_OWVAR 20
74179: PUSH
74180: LD_INT 0
74182: ST_TO_ADDR
// uc_nation = 0 ;
74183: LD_ADDR_OWVAR 21
74187: PUSH
74188: LD_INT 0
74190: ST_TO_ADDR
// InitHc_All ( ) ;
74191: CALL_OW 584
// InitVc ;
74195: CALL_OW 20
// if mastodonts then
74199: LD_VAR 0 6
74203: IFFALSE 74270
// for i = 1 to mastodonts do
74205: LD_ADDR_VAR 0 11
74209: PUSH
74210: DOUBLE
74211: LD_INT 1
74213: DEC
74214: ST_TO_ADDR
74215: LD_VAR 0 6
74219: PUSH
74220: FOR_TO
74221: IFFALSE 74268
// begin vc_chassis := 31 ;
74223: LD_ADDR_OWVAR 37
74227: PUSH
74228: LD_INT 31
74230: ST_TO_ADDR
// vc_control := control_rider ;
74231: LD_ADDR_OWVAR 38
74235: PUSH
74236: LD_INT 4
74238: ST_TO_ADDR
// animal := CreateVehicle ;
74239: LD_ADDR_VAR 0 12
74243: PUSH
74244: CALL_OW 45
74248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74249: LD_VAR 0 12
74253: PPUSH
74254: LD_VAR 0 8
74258: PPUSH
74259: LD_INT 0
74261: PPUSH
74262: CALL 76412 0 3
// end ;
74266: GO 74220
74268: POP
74269: POP
// if horses then
74270: LD_VAR 0 5
74274: IFFALSE 74341
// for i = 1 to horses do
74276: LD_ADDR_VAR 0 11
74280: PUSH
74281: DOUBLE
74282: LD_INT 1
74284: DEC
74285: ST_TO_ADDR
74286: LD_VAR 0 5
74290: PUSH
74291: FOR_TO
74292: IFFALSE 74339
// begin hc_class := 21 ;
74294: LD_ADDR_OWVAR 28
74298: PUSH
74299: LD_INT 21
74301: ST_TO_ADDR
// hc_gallery :=  ;
74302: LD_ADDR_OWVAR 33
74306: PUSH
74307: LD_STRING 
74309: ST_TO_ADDR
// animal := CreateHuman ;
74310: LD_ADDR_VAR 0 12
74314: PUSH
74315: CALL_OW 44
74319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74320: LD_VAR 0 12
74324: PPUSH
74325: LD_VAR 0 8
74329: PPUSH
74330: LD_INT 0
74332: PPUSH
74333: CALL 76412 0 3
// end ;
74337: GO 74291
74339: POP
74340: POP
// if birds then
74341: LD_VAR 0 1
74345: IFFALSE 74412
// for i = 1 to birds do
74347: LD_ADDR_VAR 0 11
74351: PUSH
74352: DOUBLE
74353: LD_INT 1
74355: DEC
74356: ST_TO_ADDR
74357: LD_VAR 0 1
74361: PUSH
74362: FOR_TO
74363: IFFALSE 74410
// begin hc_class := 18 ;
74365: LD_ADDR_OWVAR 28
74369: PUSH
74370: LD_INT 18
74372: ST_TO_ADDR
// hc_gallery =  ;
74373: LD_ADDR_OWVAR 33
74377: PUSH
74378: LD_STRING 
74380: ST_TO_ADDR
// animal := CreateHuman ;
74381: LD_ADDR_VAR 0 12
74385: PUSH
74386: CALL_OW 44
74390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74391: LD_VAR 0 12
74395: PPUSH
74396: LD_VAR 0 8
74400: PPUSH
74401: LD_INT 0
74403: PPUSH
74404: CALL 76412 0 3
// end ;
74408: GO 74362
74410: POP
74411: POP
// if tigers then
74412: LD_VAR 0 2
74416: IFFALSE 74500
// for i = 1 to tigers do
74418: LD_ADDR_VAR 0 11
74422: PUSH
74423: DOUBLE
74424: LD_INT 1
74426: DEC
74427: ST_TO_ADDR
74428: LD_VAR 0 2
74432: PUSH
74433: FOR_TO
74434: IFFALSE 74498
// begin hc_class = class_tiger ;
74436: LD_ADDR_OWVAR 28
74440: PUSH
74441: LD_INT 14
74443: ST_TO_ADDR
// hc_gallery =  ;
74444: LD_ADDR_OWVAR 33
74448: PUSH
74449: LD_STRING 
74451: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74452: LD_ADDR_OWVAR 35
74456: PUSH
74457: LD_INT 7
74459: NEG
74460: PPUSH
74461: LD_INT 7
74463: PPUSH
74464: CALL_OW 12
74468: ST_TO_ADDR
// animal := CreateHuman ;
74469: LD_ADDR_VAR 0 12
74473: PUSH
74474: CALL_OW 44
74478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74479: LD_VAR 0 12
74483: PPUSH
74484: LD_VAR 0 8
74488: PPUSH
74489: LD_INT 0
74491: PPUSH
74492: CALL 76412 0 3
// end ;
74496: GO 74433
74498: POP
74499: POP
// if apemans then
74500: LD_VAR 0 3
74504: IFFALSE 74627
// for i = 1 to apemans do
74506: LD_ADDR_VAR 0 11
74510: PUSH
74511: DOUBLE
74512: LD_INT 1
74514: DEC
74515: ST_TO_ADDR
74516: LD_VAR 0 3
74520: PUSH
74521: FOR_TO
74522: IFFALSE 74625
// begin hc_class = class_apeman ;
74524: LD_ADDR_OWVAR 28
74528: PUSH
74529: LD_INT 12
74531: ST_TO_ADDR
// hc_gallery =  ;
74532: LD_ADDR_OWVAR 33
74536: PUSH
74537: LD_STRING 
74539: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74540: LD_ADDR_OWVAR 35
74544: PUSH
74545: LD_INT 2
74547: NEG
74548: PPUSH
74549: LD_INT 2
74551: PPUSH
74552: CALL_OW 12
74556: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74557: LD_ADDR_OWVAR 31
74561: PUSH
74562: LD_INT 1
74564: PPUSH
74565: LD_INT 3
74567: PPUSH
74568: CALL_OW 12
74572: PUSH
74573: LD_INT 1
74575: PPUSH
74576: LD_INT 3
74578: PPUSH
74579: CALL_OW 12
74583: PUSH
74584: LD_INT 0
74586: PUSH
74587: LD_INT 0
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: ST_TO_ADDR
// animal := CreateHuman ;
74596: LD_ADDR_VAR 0 12
74600: PUSH
74601: CALL_OW 44
74605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74606: LD_VAR 0 12
74610: PPUSH
74611: LD_VAR 0 8
74615: PPUSH
74616: LD_INT 0
74618: PPUSH
74619: CALL 76412 0 3
// end ;
74623: GO 74521
74625: POP
74626: POP
// if enchidnas then
74627: LD_VAR 0 4
74631: IFFALSE 74698
// for i = 1 to enchidnas do
74633: LD_ADDR_VAR 0 11
74637: PUSH
74638: DOUBLE
74639: LD_INT 1
74641: DEC
74642: ST_TO_ADDR
74643: LD_VAR 0 4
74647: PUSH
74648: FOR_TO
74649: IFFALSE 74696
// begin hc_class = 13 ;
74651: LD_ADDR_OWVAR 28
74655: PUSH
74656: LD_INT 13
74658: ST_TO_ADDR
// hc_gallery =  ;
74659: LD_ADDR_OWVAR 33
74663: PUSH
74664: LD_STRING 
74666: ST_TO_ADDR
// animal := CreateHuman ;
74667: LD_ADDR_VAR 0 12
74671: PUSH
74672: CALL_OW 44
74676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74677: LD_VAR 0 12
74681: PPUSH
74682: LD_VAR 0 8
74686: PPUSH
74687: LD_INT 0
74689: PPUSH
74690: CALL 76412 0 3
// end ;
74694: GO 74648
74696: POP
74697: POP
// if fishes then
74698: LD_VAR 0 7
74702: IFFALSE 74769
// for i = 1 to fishes do
74704: LD_ADDR_VAR 0 11
74708: PUSH
74709: DOUBLE
74710: LD_INT 1
74712: DEC
74713: ST_TO_ADDR
74714: LD_VAR 0 7
74718: PUSH
74719: FOR_TO
74720: IFFALSE 74767
// begin hc_class = 20 ;
74722: LD_ADDR_OWVAR 28
74726: PUSH
74727: LD_INT 20
74729: ST_TO_ADDR
// hc_gallery =  ;
74730: LD_ADDR_OWVAR 33
74734: PUSH
74735: LD_STRING 
74737: ST_TO_ADDR
// animal := CreateHuman ;
74738: LD_ADDR_VAR 0 12
74742: PUSH
74743: CALL_OW 44
74747: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74748: LD_VAR 0 12
74752: PPUSH
74753: LD_VAR 0 9
74757: PPUSH
74758: LD_INT 0
74760: PPUSH
74761: CALL 76412 0 3
// end ;
74765: GO 74719
74767: POP
74768: POP
// end ;
74769: LD_VAR 0 10
74773: RET
// export function WantHeal ( sci , unit ) ; begin
74774: LD_INT 0
74776: PPUSH
// if GetTaskList ( sci ) > 0 then
74777: LD_VAR 0 1
74781: PPUSH
74782: CALL_OW 437
74786: PUSH
74787: LD_INT 0
74789: GREATER
74790: IFFALSE 74862
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74792: LD_VAR 0 1
74796: PPUSH
74797: CALL_OW 437
74801: PUSH
74802: LD_INT 1
74804: ARRAY
74805: PUSH
74806: LD_INT 1
74808: ARRAY
74809: PUSH
74810: LD_STRING l
74812: EQUAL
74813: IFFALSE 74840
74815: PUSH
74816: LD_VAR 0 1
74820: PPUSH
74821: CALL_OW 437
74825: PUSH
74826: LD_INT 1
74828: ARRAY
74829: PUSH
74830: LD_INT 4
74832: ARRAY
74833: PUSH
74834: LD_VAR 0 2
74838: EQUAL
74839: AND
74840: IFFALSE 74852
// result := true else
74842: LD_ADDR_VAR 0 3
74846: PUSH
74847: LD_INT 1
74849: ST_TO_ADDR
74850: GO 74860
// result := false ;
74852: LD_ADDR_VAR 0 3
74856: PUSH
74857: LD_INT 0
74859: ST_TO_ADDR
// end else
74860: GO 74870
// result := false ;
74862: LD_ADDR_VAR 0 3
74866: PUSH
74867: LD_INT 0
74869: ST_TO_ADDR
// end ;
74870: LD_VAR 0 3
74874: RET
// export function HealTarget ( sci ) ; begin
74875: LD_INT 0
74877: PPUSH
// if not sci then
74878: LD_VAR 0 1
74882: NOT
74883: IFFALSE 74887
// exit ;
74885: GO 74952
// result := 0 ;
74887: LD_ADDR_VAR 0 2
74891: PUSH
74892: LD_INT 0
74894: ST_TO_ADDR
// if GetTaskList ( sci ) then
74895: LD_VAR 0 1
74899: PPUSH
74900: CALL_OW 437
74904: IFFALSE 74952
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74906: LD_VAR 0 1
74910: PPUSH
74911: CALL_OW 437
74915: PUSH
74916: LD_INT 1
74918: ARRAY
74919: PUSH
74920: LD_INT 1
74922: ARRAY
74923: PUSH
74924: LD_STRING l
74926: EQUAL
74927: IFFALSE 74952
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74929: LD_ADDR_VAR 0 2
74933: PUSH
74934: LD_VAR 0 1
74938: PPUSH
74939: CALL_OW 437
74943: PUSH
74944: LD_INT 1
74946: ARRAY
74947: PUSH
74948: LD_INT 4
74950: ARRAY
74951: ST_TO_ADDR
// end ;
74952: LD_VAR 0 2
74956: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74957: LD_INT 0
74959: PPUSH
74960: PPUSH
74961: PPUSH
74962: PPUSH
// if not base_units then
74963: LD_VAR 0 1
74967: NOT
74968: IFFALSE 74972
// exit ;
74970: GO 75059
// result := false ;
74972: LD_ADDR_VAR 0 2
74976: PUSH
74977: LD_INT 0
74979: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74980: LD_ADDR_VAR 0 5
74984: PUSH
74985: LD_VAR 0 1
74989: PPUSH
74990: LD_INT 21
74992: PUSH
74993: LD_INT 3
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PPUSH
75000: CALL_OW 72
75004: ST_TO_ADDR
// if not tmp then
75005: LD_VAR 0 5
75009: NOT
75010: IFFALSE 75014
// exit ;
75012: GO 75059
// for i in tmp do
75014: LD_ADDR_VAR 0 3
75018: PUSH
75019: LD_VAR 0 5
75023: PUSH
75024: FOR_IN
75025: IFFALSE 75057
// begin result := EnemyInRange ( i , 22 ) ;
75027: LD_ADDR_VAR 0 2
75031: PUSH
75032: LD_VAR 0 3
75036: PPUSH
75037: LD_INT 22
75039: PPUSH
75040: CALL 72484 0 2
75044: ST_TO_ADDR
// if result then
75045: LD_VAR 0 2
75049: IFFALSE 75055
// exit ;
75051: POP
75052: POP
75053: GO 75059
// end ;
75055: GO 75024
75057: POP
75058: POP
// end ;
75059: LD_VAR 0 2
75063: RET
// export function FilterByTag ( units , tag ) ; begin
75064: LD_INT 0
75066: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75067: LD_ADDR_VAR 0 3
75071: PUSH
75072: LD_VAR 0 1
75076: PPUSH
75077: LD_INT 120
75079: PUSH
75080: LD_VAR 0 2
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PPUSH
75089: CALL_OW 72
75093: ST_TO_ADDR
// end ;
75094: LD_VAR 0 3
75098: RET
// export function IsDriver ( un ) ; begin
75099: LD_INT 0
75101: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75102: LD_ADDR_VAR 0 2
75106: PUSH
75107: LD_VAR 0 1
75111: PUSH
75112: LD_INT 55
75114: PUSH
75115: EMPTY
75116: LIST
75117: PPUSH
75118: CALL_OW 69
75122: IN
75123: ST_TO_ADDR
// end ;
75124: LD_VAR 0 2
75128: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75129: LD_INT 0
75131: PPUSH
75132: PPUSH
// list := [ ] ;
75133: LD_ADDR_VAR 0 5
75137: PUSH
75138: EMPTY
75139: ST_TO_ADDR
// case d of 0 :
75140: LD_VAR 0 3
75144: PUSH
75145: LD_INT 0
75147: DOUBLE
75148: EQUAL
75149: IFTRUE 75153
75151: GO 75286
75153: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75154: LD_ADDR_VAR 0 5
75158: PUSH
75159: LD_VAR 0 1
75163: PUSH
75164: LD_INT 4
75166: MINUS
75167: PUSH
75168: LD_VAR 0 2
75172: PUSH
75173: LD_INT 4
75175: MINUS
75176: PUSH
75177: LD_INT 2
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: LIST
75184: PUSH
75185: LD_VAR 0 1
75189: PUSH
75190: LD_INT 3
75192: MINUS
75193: PUSH
75194: LD_VAR 0 2
75198: PUSH
75199: LD_INT 1
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: LIST
75206: PUSH
75207: LD_VAR 0 1
75211: PUSH
75212: LD_INT 4
75214: PLUS
75215: PUSH
75216: LD_VAR 0 2
75220: PUSH
75221: LD_INT 4
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: LIST
75228: PUSH
75229: LD_VAR 0 1
75233: PUSH
75234: LD_INT 3
75236: PLUS
75237: PUSH
75238: LD_VAR 0 2
75242: PUSH
75243: LD_INT 3
75245: PLUS
75246: PUSH
75247: LD_INT 5
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: LIST
75254: PUSH
75255: LD_VAR 0 1
75259: PUSH
75260: LD_VAR 0 2
75264: PUSH
75265: LD_INT 4
75267: PLUS
75268: PUSH
75269: LD_INT 0
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: LIST
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: ST_TO_ADDR
// end ; 1 :
75284: GO 75984
75286: LD_INT 1
75288: DOUBLE
75289: EQUAL
75290: IFTRUE 75294
75292: GO 75427
75294: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75295: LD_ADDR_VAR 0 5
75299: PUSH
75300: LD_VAR 0 1
75304: PUSH
75305: LD_VAR 0 2
75309: PUSH
75310: LD_INT 4
75312: MINUS
75313: PUSH
75314: LD_INT 3
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: LIST
75321: PUSH
75322: LD_VAR 0 1
75326: PUSH
75327: LD_INT 3
75329: MINUS
75330: PUSH
75331: LD_VAR 0 2
75335: PUSH
75336: LD_INT 3
75338: MINUS
75339: PUSH
75340: LD_INT 2
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: LIST
75347: PUSH
75348: LD_VAR 0 1
75352: PUSH
75353: LD_INT 4
75355: MINUS
75356: PUSH
75357: LD_VAR 0 2
75361: PUSH
75362: LD_INT 1
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: LIST
75369: PUSH
75370: LD_VAR 0 1
75374: PUSH
75375: LD_VAR 0 2
75379: PUSH
75380: LD_INT 3
75382: PLUS
75383: PUSH
75384: LD_INT 0
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: LIST
75391: PUSH
75392: LD_VAR 0 1
75396: PUSH
75397: LD_INT 4
75399: PLUS
75400: PUSH
75401: LD_VAR 0 2
75405: PUSH
75406: LD_INT 4
75408: PLUS
75409: PUSH
75410: LD_INT 5
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: LIST
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: ST_TO_ADDR
// end ; 2 :
75425: GO 75984
75427: LD_INT 2
75429: DOUBLE
75430: EQUAL
75431: IFTRUE 75435
75433: GO 75564
75435: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75436: LD_ADDR_VAR 0 5
75440: PUSH
75441: LD_VAR 0 1
75445: PUSH
75446: LD_VAR 0 2
75450: PUSH
75451: LD_INT 3
75453: MINUS
75454: PUSH
75455: LD_INT 3
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: LIST
75462: PUSH
75463: LD_VAR 0 1
75467: PUSH
75468: LD_INT 4
75470: PLUS
75471: PUSH
75472: LD_VAR 0 2
75476: PUSH
75477: LD_INT 4
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: LIST
75484: PUSH
75485: LD_VAR 0 1
75489: PUSH
75490: LD_VAR 0 2
75494: PUSH
75495: LD_INT 4
75497: PLUS
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: PUSH
75507: LD_VAR 0 1
75511: PUSH
75512: LD_INT 3
75514: MINUS
75515: PUSH
75516: LD_VAR 0 2
75520: PUSH
75521: LD_INT 1
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: LIST
75528: PUSH
75529: LD_VAR 0 1
75533: PUSH
75534: LD_INT 4
75536: MINUS
75537: PUSH
75538: LD_VAR 0 2
75542: PUSH
75543: LD_INT 4
75545: MINUS
75546: PUSH
75547: LD_INT 2
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: LIST
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: ST_TO_ADDR
// end ; 3 :
75562: GO 75984
75564: LD_INT 3
75566: DOUBLE
75567: EQUAL
75568: IFTRUE 75572
75570: GO 75705
75572: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75573: LD_ADDR_VAR 0 5
75577: PUSH
75578: LD_VAR 0 1
75582: PUSH
75583: LD_INT 3
75585: PLUS
75586: PUSH
75587: LD_VAR 0 2
75591: PUSH
75592: LD_INT 4
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: LIST
75599: PUSH
75600: LD_VAR 0 1
75604: PUSH
75605: LD_INT 4
75607: PLUS
75608: PUSH
75609: LD_VAR 0 2
75613: PUSH
75614: LD_INT 4
75616: PLUS
75617: PUSH
75618: LD_INT 5
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: LIST
75625: PUSH
75626: LD_VAR 0 1
75630: PUSH
75631: LD_INT 4
75633: MINUS
75634: PUSH
75635: LD_VAR 0 2
75639: PUSH
75640: LD_INT 1
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: LIST
75647: PUSH
75648: LD_VAR 0 1
75652: PUSH
75653: LD_VAR 0 2
75657: PUSH
75658: LD_INT 4
75660: MINUS
75661: PUSH
75662: LD_INT 3
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: LIST
75669: PUSH
75670: LD_VAR 0 1
75674: PUSH
75675: LD_INT 3
75677: MINUS
75678: PUSH
75679: LD_VAR 0 2
75683: PUSH
75684: LD_INT 3
75686: MINUS
75687: PUSH
75688: LD_INT 2
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: LIST
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: ST_TO_ADDR
// end ; 4 :
75703: GO 75984
75705: LD_INT 4
75707: DOUBLE
75708: EQUAL
75709: IFTRUE 75713
75711: GO 75846
75713: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75714: LD_ADDR_VAR 0 5
75718: PUSH
75719: LD_VAR 0 1
75723: PUSH
75724: LD_VAR 0 2
75728: PUSH
75729: LD_INT 4
75731: PLUS
75732: PUSH
75733: LD_INT 0
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: LIST
75740: PUSH
75741: LD_VAR 0 1
75745: PUSH
75746: LD_INT 3
75748: PLUS
75749: PUSH
75750: LD_VAR 0 2
75754: PUSH
75755: LD_INT 3
75757: PLUS
75758: PUSH
75759: LD_INT 5
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: LIST
75766: PUSH
75767: LD_VAR 0 1
75771: PUSH
75772: LD_INT 4
75774: PLUS
75775: PUSH
75776: LD_VAR 0 2
75780: PUSH
75781: LD_INT 4
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: LIST
75788: PUSH
75789: LD_VAR 0 1
75793: PUSH
75794: LD_VAR 0 2
75798: PUSH
75799: LD_INT 3
75801: MINUS
75802: PUSH
75803: LD_INT 3
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: LIST
75810: PUSH
75811: LD_VAR 0 1
75815: PUSH
75816: LD_INT 4
75818: MINUS
75819: PUSH
75820: LD_VAR 0 2
75824: PUSH
75825: LD_INT 4
75827: MINUS
75828: PUSH
75829: LD_INT 2
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: LIST
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: ST_TO_ADDR
// end ; 5 :
75844: GO 75984
75846: LD_INT 5
75848: DOUBLE
75849: EQUAL
75850: IFTRUE 75854
75852: GO 75983
75854: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75855: LD_ADDR_VAR 0 5
75859: PUSH
75860: LD_VAR 0 1
75864: PUSH
75865: LD_INT 4
75867: MINUS
75868: PUSH
75869: LD_VAR 0 2
75873: PUSH
75874: LD_INT 1
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: LIST
75881: PUSH
75882: LD_VAR 0 1
75886: PUSH
75887: LD_VAR 0 2
75891: PUSH
75892: LD_INT 4
75894: MINUS
75895: PUSH
75896: LD_INT 3
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: LIST
75903: PUSH
75904: LD_VAR 0 1
75908: PUSH
75909: LD_INT 4
75911: PLUS
75912: PUSH
75913: LD_VAR 0 2
75917: PUSH
75918: LD_INT 4
75920: PLUS
75921: PUSH
75922: LD_INT 5
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: LIST
75929: PUSH
75930: LD_VAR 0 1
75934: PUSH
75935: LD_INT 3
75937: PLUS
75938: PUSH
75939: LD_VAR 0 2
75943: PUSH
75944: LD_INT 4
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: PUSH
75952: LD_VAR 0 1
75956: PUSH
75957: LD_VAR 0 2
75961: PUSH
75962: LD_INT 3
75964: PLUS
75965: PUSH
75966: LD_INT 0
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: LIST
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: ST_TO_ADDR
// end ; end ;
75981: GO 75984
75983: POP
// result := list ;
75984: LD_ADDR_VAR 0 4
75988: PUSH
75989: LD_VAR 0 5
75993: ST_TO_ADDR
// end ;
75994: LD_VAR 0 4
75998: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75999: LD_INT 0
76001: PPUSH
76002: PPUSH
76003: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76004: LD_VAR 0 1
76008: NOT
76009: IFTRUE 76037
76011: PUSH
76012: LD_VAR 0 2
76016: PUSH
76017: LD_INT 1
76019: PUSH
76020: LD_INT 2
76022: PUSH
76023: LD_INT 3
76025: PUSH
76026: LD_INT 4
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: IN
76035: NOT
76036: OR
76037: IFFALSE 76041
// exit ;
76039: GO 76124
// tmp := [ ] ;
76041: LD_ADDR_VAR 0 5
76045: PUSH
76046: EMPTY
76047: ST_TO_ADDR
// for i in units do
76048: LD_ADDR_VAR 0 4
76052: PUSH
76053: LD_VAR 0 1
76057: PUSH
76058: FOR_IN
76059: IFFALSE 76093
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76061: LD_ADDR_VAR 0 5
76065: PUSH
76066: LD_VAR 0 5
76070: PPUSH
76071: LD_VAR 0 4
76075: PPUSH
76076: LD_VAR 0 2
76080: PPUSH
76081: CALL_OW 259
76085: PPUSH
76086: CALL 77519 0 2
76090: ST_TO_ADDR
76091: GO 76058
76093: POP
76094: POP
// if not tmp then
76095: LD_VAR 0 5
76099: NOT
76100: IFFALSE 76104
// exit ;
76102: GO 76124
// result := SortListByListDesc ( units , tmp ) ;
76104: LD_ADDR_VAR 0 3
76108: PUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_VAR 0 5
76118: PPUSH
76119: CALL_OW 77
76123: ST_TO_ADDR
// end ;
76124: LD_VAR 0 3
76128: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76129: LD_INT 0
76131: PPUSH
76132: PPUSH
76133: PPUSH
// result := false ;
76134: LD_ADDR_VAR 0 3
76138: PUSH
76139: LD_INT 0
76141: ST_TO_ADDR
// if not building then
76142: LD_VAR 0 2
76146: NOT
76147: IFFALSE 76151
// exit ;
76149: GO 76295
// x := GetX ( building ) ;
76151: LD_ADDR_VAR 0 4
76155: PUSH
76156: LD_VAR 0 2
76160: PPUSH
76161: CALL_OW 250
76165: ST_TO_ADDR
// y := GetY ( building ) ;
76166: LD_ADDR_VAR 0 5
76170: PUSH
76171: LD_VAR 0 2
76175: PPUSH
76176: CALL_OW 251
76180: ST_TO_ADDR
// if not x or not y then
76181: LD_VAR 0 4
76185: NOT
76186: IFTRUE 76195
76188: PUSH
76189: LD_VAR 0 5
76193: NOT
76194: OR
76195: IFFALSE 76199
// exit ;
76197: GO 76295
// if GetTaskList ( unit ) then
76199: LD_VAR 0 1
76203: PPUSH
76204: CALL_OW 437
76208: IFFALSE 76295
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76210: LD_STRING e
76212: PUSH
76213: LD_VAR 0 1
76217: PPUSH
76218: CALL_OW 437
76222: PUSH
76223: LD_INT 1
76225: ARRAY
76226: PUSH
76227: LD_INT 1
76229: ARRAY
76230: EQUAL
76231: IFFALSE 76258
76233: PUSH
76234: LD_VAR 0 4
76238: PUSH
76239: LD_VAR 0 1
76243: PPUSH
76244: CALL_OW 437
76248: PUSH
76249: LD_INT 1
76251: ARRAY
76252: PUSH
76253: LD_INT 2
76255: ARRAY
76256: EQUAL
76257: AND
76258: IFFALSE 76285
76260: PUSH
76261: LD_VAR 0 5
76265: PUSH
76266: LD_VAR 0 1
76270: PPUSH
76271: CALL_OW 437
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: PUSH
76280: LD_INT 3
76282: ARRAY
76283: EQUAL
76284: AND
76285: IFFALSE 76295
// result := true end ;
76287: LD_ADDR_VAR 0 3
76291: PUSH
76292: LD_INT 1
76294: ST_TO_ADDR
// end ;
76295: LD_VAR 0 3
76299: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76300: LD_INT 0
76302: PPUSH
// result := false ;
76303: LD_ADDR_VAR 0 4
76307: PUSH
76308: LD_INT 0
76310: ST_TO_ADDR
// if GetTaskList ( unit ) then
76311: LD_VAR 0 1
76315: PPUSH
76316: CALL_OW 437
76320: IFFALSE 76407
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76322: LD_STRING M
76324: PUSH
76325: LD_VAR 0 1
76329: PPUSH
76330: CALL_OW 437
76334: PUSH
76335: LD_INT 1
76337: ARRAY
76338: PUSH
76339: LD_INT 1
76341: ARRAY
76342: EQUAL
76343: IFFALSE 76370
76345: PUSH
76346: LD_VAR 0 2
76350: PUSH
76351: LD_VAR 0 1
76355: PPUSH
76356: CALL_OW 437
76360: PUSH
76361: LD_INT 1
76363: ARRAY
76364: PUSH
76365: LD_INT 2
76367: ARRAY
76368: EQUAL
76369: AND
76370: IFFALSE 76397
76372: PUSH
76373: LD_VAR 0 3
76377: PUSH
76378: LD_VAR 0 1
76382: PPUSH
76383: CALL_OW 437
76387: PUSH
76388: LD_INT 1
76390: ARRAY
76391: PUSH
76392: LD_INT 3
76394: ARRAY
76395: EQUAL
76396: AND
76397: IFFALSE 76407
// result := true ;
76399: LD_ADDR_VAR 0 4
76403: PUSH
76404: LD_INT 1
76406: ST_TO_ADDR
// end ; end ;
76407: LD_VAR 0 4
76411: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76412: LD_INT 0
76414: PPUSH
76415: PPUSH
76416: PPUSH
76417: PPUSH
// if not unit or not area then
76418: LD_VAR 0 1
76422: NOT
76423: IFTRUE 76432
76425: PUSH
76426: LD_VAR 0 2
76430: NOT
76431: OR
76432: IFFALSE 76436
// exit ;
76434: GO 76612
// tmp := AreaToList ( area , i ) ;
76436: LD_ADDR_VAR 0 6
76440: PUSH
76441: LD_VAR 0 2
76445: PPUSH
76446: LD_VAR 0 5
76450: PPUSH
76451: CALL_OW 517
76455: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76456: LD_ADDR_VAR 0 5
76460: PUSH
76461: DOUBLE
76462: LD_INT 1
76464: DEC
76465: ST_TO_ADDR
76466: LD_VAR 0 6
76470: PUSH
76471: LD_INT 1
76473: ARRAY
76474: PUSH
76475: FOR_TO
76476: IFFALSE 76610
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76478: LD_ADDR_VAR 0 7
76482: PUSH
76483: LD_VAR 0 6
76487: PUSH
76488: LD_INT 1
76490: ARRAY
76491: PUSH
76492: LD_VAR 0 5
76496: ARRAY
76497: PUSH
76498: LD_VAR 0 6
76502: PUSH
76503: LD_INT 2
76505: ARRAY
76506: PUSH
76507: LD_VAR 0 5
76511: ARRAY
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76517: LD_INT 92
76519: PUSH
76520: LD_VAR 0 7
76524: PUSH
76525: LD_INT 1
76527: ARRAY
76528: PUSH
76529: LD_VAR 0 7
76533: PUSH
76534: LD_INT 2
76536: ARRAY
76537: PUSH
76538: LD_INT 2
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: PPUSH
76547: CALL_OW 69
76551: PUSH
76552: LD_INT 0
76554: EQUAL
76555: IFFALSE 76608
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76557: LD_VAR 0 1
76561: PPUSH
76562: LD_VAR 0 7
76566: PUSH
76567: LD_INT 1
76569: ARRAY
76570: PPUSH
76571: LD_VAR 0 7
76575: PUSH
76576: LD_INT 2
76578: ARRAY
76579: PPUSH
76580: LD_VAR 0 3
76584: PPUSH
76585: CALL_OW 48
// result := IsPlaced ( unit ) ;
76589: LD_ADDR_VAR 0 4
76593: PUSH
76594: LD_VAR 0 1
76598: PPUSH
76599: CALL_OW 305
76603: ST_TO_ADDR
// exit ;
76604: POP
76605: POP
76606: GO 76612
// end ; end ;
76608: GO 76475
76610: POP
76611: POP
// end ;
76612: LD_VAR 0 4
76616: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76617: LD_INT 0
76619: PPUSH
76620: PPUSH
76621: PPUSH
// if not side or side > 8 then
76622: LD_VAR 0 1
76626: NOT
76627: IFTRUE 76639
76629: PUSH
76630: LD_VAR 0 1
76634: PUSH
76635: LD_INT 8
76637: GREATER
76638: OR
76639: IFFALSE 76643
// exit ;
76641: GO 76830
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76643: LD_ADDR_VAR 0 4
76647: PUSH
76648: LD_INT 22
76650: PUSH
76651: LD_VAR 0 1
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PUSH
76660: LD_INT 21
76662: PUSH
76663: LD_INT 3
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PPUSH
76674: CALL_OW 69
76678: ST_TO_ADDR
// if not tmp then
76679: LD_VAR 0 4
76683: NOT
76684: IFFALSE 76688
// exit ;
76686: GO 76830
// enable_addtolog := true ;
76688: LD_ADDR_OWVAR 81
76692: PUSH
76693: LD_INT 1
76695: ST_TO_ADDR
// AddToLog ( [ ) ;
76696: LD_STRING [
76698: PPUSH
76699: CALL_OW 561
// for i in tmp do
76703: LD_ADDR_VAR 0 3
76707: PUSH
76708: LD_VAR 0 4
76712: PUSH
76713: FOR_IN
76714: IFFALSE 76821
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76716: LD_STRING [
76718: PUSH
76719: LD_VAR 0 3
76723: PPUSH
76724: CALL_OW 266
76728: STR
76729: PUSH
76730: LD_STRING , 
76732: STR
76733: PUSH
76734: LD_VAR 0 3
76738: PPUSH
76739: CALL_OW 250
76743: STR
76744: PUSH
76745: LD_STRING , 
76747: STR
76748: PUSH
76749: LD_VAR 0 3
76753: PPUSH
76754: CALL_OW 251
76758: STR
76759: PUSH
76760: LD_STRING , 
76762: STR
76763: PUSH
76764: LD_VAR 0 3
76768: PPUSH
76769: CALL_OW 254
76773: STR
76774: PUSH
76775: LD_STRING , 
76777: STR
76778: PUSH
76779: LD_VAR 0 3
76783: PPUSH
76784: LD_INT 1
76786: PPUSH
76787: CALL_OW 268
76791: STR
76792: PUSH
76793: LD_STRING , 
76795: STR
76796: PUSH
76797: LD_VAR 0 3
76801: PPUSH
76802: LD_INT 2
76804: PPUSH
76805: CALL_OW 268
76809: STR
76810: PUSH
76811: LD_STRING ],
76813: STR
76814: PPUSH
76815: CALL_OW 561
// end ;
76819: GO 76713
76821: POP
76822: POP
// AddToLog ( ]; ) ;
76823: LD_STRING ];
76825: PPUSH
76826: CALL_OW 561
// end ;
76830: LD_VAR 0 2
76834: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76835: LD_INT 0
76837: PPUSH
76838: PPUSH
76839: PPUSH
76840: PPUSH
76841: PPUSH
// if not area or not rate or not max then
76842: LD_VAR 0 1
76846: NOT
76847: IFTRUE 76856
76849: PUSH
76850: LD_VAR 0 2
76854: NOT
76855: OR
76856: IFTRUE 76865
76858: PUSH
76859: LD_VAR 0 4
76863: NOT
76864: OR
76865: IFFALSE 76869
// exit ;
76867: GO 77058
// while 1 do
76869: LD_INT 1
76871: IFFALSE 77058
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76873: LD_ADDR_VAR 0 9
76877: PUSH
76878: LD_VAR 0 1
76882: PPUSH
76883: LD_INT 1
76885: PPUSH
76886: CALL_OW 287
76890: PUSH
76891: LD_INT 10
76893: MUL
76894: ST_TO_ADDR
// r := rate / 10 ;
76895: LD_ADDR_VAR 0 7
76899: PUSH
76900: LD_VAR 0 2
76904: PUSH
76905: LD_INT 10
76907: DIVREAL
76908: ST_TO_ADDR
// time := 1 1$00 ;
76909: LD_ADDR_VAR 0 8
76913: PUSH
76914: LD_INT 2100
76916: ST_TO_ADDR
// if amount < min then
76917: LD_VAR 0 9
76921: PUSH
76922: LD_VAR 0 3
76926: LESS
76927: IFFALSE 76945
// r := r * 2 else
76929: LD_ADDR_VAR 0 7
76933: PUSH
76934: LD_VAR 0 7
76938: PUSH
76939: LD_INT 2
76941: MUL
76942: ST_TO_ADDR
76943: GO 76971
// if amount > max then
76945: LD_VAR 0 9
76949: PUSH
76950: LD_VAR 0 4
76954: GREATER
76955: IFFALSE 76971
// r := r / 2 ;
76957: LD_ADDR_VAR 0 7
76961: PUSH
76962: LD_VAR 0 7
76966: PUSH
76967: LD_INT 2
76969: DIVREAL
76970: ST_TO_ADDR
// time := time / r ;
76971: LD_ADDR_VAR 0 8
76975: PUSH
76976: LD_VAR 0 8
76980: PUSH
76981: LD_VAR 0 7
76985: DIVREAL
76986: ST_TO_ADDR
// if time < 0 then
76987: LD_VAR 0 8
76991: PUSH
76992: LD_INT 0
76994: LESS
76995: IFFALSE 77012
// time := time * - 1 ;
76997: LD_ADDR_VAR 0 8
77001: PUSH
77002: LD_VAR 0 8
77006: PUSH
77007: LD_INT 1
77009: NEG
77010: MUL
77011: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77012: LD_VAR 0 8
77016: PUSH
77017: LD_INT 35
77019: PPUSH
77020: LD_INT 875
77022: PPUSH
77023: CALL_OW 12
77027: PLUS
77028: PPUSH
77029: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77033: LD_INT 1
77035: PPUSH
77036: LD_INT 5
77038: PPUSH
77039: CALL_OW 12
77043: PPUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: LD_INT 1
77051: PPUSH
77052: CALL_OW 55
// end ;
77056: GO 76869
// end ;
77058: LD_VAR 0 5
77062: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77063: LD_INT 0
77065: PPUSH
77066: PPUSH
77067: PPUSH
77068: PPUSH
77069: PPUSH
77070: PPUSH
77071: PPUSH
77072: PPUSH
// if not turrets or not factories then
77073: LD_VAR 0 1
77077: NOT
77078: IFTRUE 77087
77080: PUSH
77081: LD_VAR 0 2
77085: NOT
77086: OR
77087: IFFALSE 77091
// exit ;
77089: GO 77398
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77091: LD_ADDR_VAR 0 10
77095: PUSH
77096: LD_INT 5
77098: PUSH
77099: LD_INT 6
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 2
77108: PUSH
77109: LD_INT 4
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PUSH
77116: LD_INT 3
77118: PUSH
77119: LD_INT 5
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 24
77133: PUSH
77134: LD_INT 25
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 23
77143: PUSH
77144: LD_INT 27
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 42
77157: PUSH
77158: LD_INT 43
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: LD_INT 44
77167: PUSH
77168: LD_INT 46
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 45
77177: PUSH
77178: LD_INT 47
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: LIST
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: LIST
77194: ST_TO_ADDR
// result := [ ] ;
77195: LD_ADDR_VAR 0 3
77199: PUSH
77200: EMPTY
77201: ST_TO_ADDR
// for i in turrets do
77202: LD_ADDR_VAR 0 4
77206: PUSH
77207: LD_VAR 0 1
77211: PUSH
77212: FOR_IN
77213: IFFALSE 77396
// begin nat := GetNation ( i ) ;
77215: LD_ADDR_VAR 0 7
77219: PUSH
77220: LD_VAR 0 4
77224: PPUSH
77225: CALL_OW 248
77229: ST_TO_ADDR
// weapon := 0 ;
77230: LD_ADDR_VAR 0 8
77234: PUSH
77235: LD_INT 0
77237: ST_TO_ADDR
// if not nat then
77238: LD_VAR 0 7
77242: NOT
77243: IFFALSE 77247
// continue ;
77245: GO 77212
// for j in list [ nat ] do
77247: LD_ADDR_VAR 0 5
77251: PUSH
77252: LD_VAR 0 10
77256: PUSH
77257: LD_VAR 0 7
77261: ARRAY
77262: PUSH
77263: FOR_IN
77264: IFFALSE 77305
// if GetBWeapon ( i ) = j [ 1 ] then
77266: LD_VAR 0 4
77270: PPUSH
77271: CALL_OW 269
77275: PUSH
77276: LD_VAR 0 5
77280: PUSH
77281: LD_INT 1
77283: ARRAY
77284: EQUAL
77285: IFFALSE 77303
// begin weapon := j [ 2 ] ;
77287: LD_ADDR_VAR 0 8
77291: PUSH
77292: LD_VAR 0 5
77296: PUSH
77297: LD_INT 2
77299: ARRAY
77300: ST_TO_ADDR
// break ;
77301: GO 77305
// end ;
77303: GO 77263
77305: POP
77306: POP
// if not weapon then
77307: LD_VAR 0 8
77311: NOT
77312: IFFALSE 77316
// continue ;
77314: GO 77212
// for k in factories do
77316: LD_ADDR_VAR 0 6
77320: PUSH
77321: LD_VAR 0 2
77325: PUSH
77326: FOR_IN
77327: IFFALSE 77392
// begin weapons := AvailableWeaponList ( k ) ;
77329: LD_ADDR_VAR 0 9
77333: PUSH
77334: LD_VAR 0 6
77338: PPUSH
77339: CALL_OW 478
77343: ST_TO_ADDR
// if not weapons then
77344: LD_VAR 0 9
77348: NOT
77349: IFFALSE 77353
// continue ;
77351: GO 77326
// if weapon in weapons then
77353: LD_VAR 0 8
77357: PUSH
77358: LD_VAR 0 9
77362: IN
77363: IFFALSE 77390
// begin result := [ i , weapon ] ;
77365: LD_ADDR_VAR 0 3
77369: PUSH
77370: LD_VAR 0 4
77374: PUSH
77375: LD_VAR 0 8
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: ST_TO_ADDR
// exit ;
77384: POP
77385: POP
77386: POP
77387: POP
77388: GO 77398
// end ; end ;
77390: GO 77326
77392: POP
77393: POP
// end ;
77394: GO 77212
77396: POP
77397: POP
// end ;
77398: LD_VAR 0 3
77402: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77403: LD_INT 0
77405: PPUSH
// if not side or side > 8 then
77406: LD_VAR 0 3
77410: NOT
77411: IFTRUE 77423
77413: PUSH
77414: LD_VAR 0 3
77418: PUSH
77419: LD_INT 8
77421: GREATER
77422: OR
77423: IFFALSE 77427
// exit ;
77425: GO 77486
// if not range then
77427: LD_VAR 0 4
77431: NOT
77432: IFFALSE 77443
// range := - 12 ;
77434: LD_ADDR_VAR 0 4
77438: PUSH
77439: LD_INT 12
77441: NEG
77442: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77443: LD_VAR 0 1
77447: PPUSH
77448: LD_VAR 0 2
77452: PPUSH
77453: LD_VAR 0 3
77457: PPUSH
77458: LD_VAR 0 4
77462: PPUSH
77463: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77467: LD_VAR 0 1
77471: PPUSH
77472: LD_VAR 0 2
77476: PPUSH
77477: LD_VAR 0 3
77481: PPUSH
77482: CALL_OW 331
// end ;
77486: LD_VAR 0 5
77490: RET
// export function Video ( mode ) ; begin
77491: LD_INT 0
77493: PPUSH
// ingame_video = mode ;
77494: LD_ADDR_OWVAR 52
77498: PUSH
77499: LD_VAR 0 1
77503: ST_TO_ADDR
// interface_hidden = mode ;
77504: LD_ADDR_OWVAR 54
77508: PUSH
77509: LD_VAR 0 1
77513: ST_TO_ADDR
// end ;
77514: LD_VAR 0 2
77518: RET
// export function Join ( array , element ) ; begin
77519: LD_INT 0
77521: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77522: LD_ADDR_VAR 0 3
77526: PUSH
77527: LD_VAR 0 1
77531: PPUSH
77532: LD_VAR 0 1
77536: PUSH
77537: LD_INT 1
77539: PLUS
77540: PPUSH
77541: LD_VAR 0 2
77545: PPUSH
77546: CALL_OW 1
77550: ST_TO_ADDR
// end ;
77551: LD_VAR 0 3
77555: RET
// export function JoinUnion ( array , element ) ; begin
77556: LD_INT 0
77558: PPUSH
// result := array union element ;
77559: LD_ADDR_VAR 0 3
77563: PUSH
77564: LD_VAR 0 1
77568: PUSH
77569: LD_VAR 0 2
77573: UNION
77574: ST_TO_ADDR
// end ;
77575: LD_VAR 0 3
77579: RET
// export function GetBehemoths ( side ) ; begin
77580: LD_INT 0
77582: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77583: LD_ADDR_VAR 0 2
77587: PUSH
77588: LD_INT 22
77590: PUSH
77591: LD_VAR 0 1
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PUSH
77600: LD_INT 31
77602: PUSH
77603: LD_INT 25
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PPUSH
77614: CALL_OW 69
77618: ST_TO_ADDR
// end ;
77619: LD_VAR 0 2
77623: RET
// export function Shuffle ( array ) ; var i , index ; begin
77624: LD_INT 0
77626: PPUSH
77627: PPUSH
77628: PPUSH
// result := [ ] ;
77629: LD_ADDR_VAR 0 2
77633: PUSH
77634: EMPTY
77635: ST_TO_ADDR
// if not array then
77636: LD_VAR 0 1
77640: NOT
77641: IFFALSE 77645
// exit ;
77643: GO 77744
// Randomize ;
77645: CALL_OW 10
// for i = array downto 1 do
77649: LD_ADDR_VAR 0 3
77653: PUSH
77654: DOUBLE
77655: LD_VAR 0 1
77659: INC
77660: ST_TO_ADDR
77661: LD_INT 1
77663: PUSH
77664: FOR_DOWNTO
77665: IFFALSE 77742
// begin index := rand ( 1 , array ) ;
77667: LD_ADDR_VAR 0 4
77671: PUSH
77672: LD_INT 1
77674: PPUSH
77675: LD_VAR 0 1
77679: PPUSH
77680: CALL_OW 12
77684: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77685: LD_ADDR_VAR 0 2
77689: PUSH
77690: LD_VAR 0 2
77694: PPUSH
77695: LD_VAR 0 2
77699: PUSH
77700: LD_INT 1
77702: PLUS
77703: PPUSH
77704: LD_VAR 0 1
77708: PUSH
77709: LD_VAR 0 4
77713: ARRAY
77714: PPUSH
77715: CALL_OW 2
77719: ST_TO_ADDR
// array := Delete ( array , index ) ;
77720: LD_ADDR_VAR 0 1
77724: PUSH
77725: LD_VAR 0 1
77729: PPUSH
77730: LD_VAR 0 4
77734: PPUSH
77735: CALL_OW 3
77739: ST_TO_ADDR
// end ;
77740: GO 77664
77742: POP
77743: POP
// end ;
77744: LD_VAR 0 2
77748: RET
// export function GetBaseMaterials ( base ) ; begin
77749: LD_INT 0
77751: PPUSH
// result := [ 0 , 0 , 0 ] ;
77752: LD_ADDR_VAR 0 2
77756: PUSH
77757: LD_INT 0
77759: PUSH
77760: LD_INT 0
77762: PUSH
77763: LD_INT 0
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: LIST
77770: ST_TO_ADDR
// if not base then
77771: LD_VAR 0 1
77775: NOT
77776: IFFALSE 77780
// exit ;
77778: GO 77829
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77780: LD_ADDR_VAR 0 2
77784: PUSH
77785: LD_VAR 0 1
77789: PPUSH
77790: LD_INT 1
77792: PPUSH
77793: CALL_OW 275
77797: PUSH
77798: LD_VAR 0 1
77802: PPUSH
77803: LD_INT 2
77805: PPUSH
77806: CALL_OW 275
77810: PUSH
77811: LD_VAR 0 1
77815: PPUSH
77816: LD_INT 3
77818: PPUSH
77819: CALL_OW 275
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: LIST
77828: ST_TO_ADDR
// end ;
77829: LD_VAR 0 2
77833: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77834: LD_INT 0
77836: PPUSH
77837: PPUSH
// result := array ;
77838: LD_ADDR_VAR 0 3
77842: PUSH
77843: LD_VAR 0 1
77847: ST_TO_ADDR
// if size >= result then
77848: LD_VAR 0 2
77852: PUSH
77853: LD_VAR 0 3
77857: GREATEREQUAL
77858: IFFALSE 77862
// exit ;
77860: GO 77912
// if size then
77862: LD_VAR 0 2
77866: IFFALSE 77912
// for i := array downto size do
77868: LD_ADDR_VAR 0 4
77872: PUSH
77873: DOUBLE
77874: LD_VAR 0 1
77878: INC
77879: ST_TO_ADDR
77880: LD_VAR 0 2
77884: PUSH
77885: FOR_DOWNTO
77886: IFFALSE 77910
// result := Delete ( result , result ) ;
77888: LD_ADDR_VAR 0 3
77892: PUSH
77893: LD_VAR 0 3
77897: PPUSH
77898: LD_VAR 0 3
77902: PPUSH
77903: CALL_OW 3
77907: ST_TO_ADDR
77908: GO 77885
77910: POP
77911: POP
// end ;
77912: LD_VAR 0 3
77916: RET
// export function ComExit ( unit ) ; var tmp ; begin
77917: LD_INT 0
77919: PPUSH
77920: PPUSH
// if not IsInUnit ( unit ) then
77921: LD_VAR 0 1
77925: PPUSH
77926: CALL_OW 310
77930: NOT
77931: IFFALSE 77935
// exit ;
77933: GO 77995
// tmp := IsInUnit ( unit ) ;
77935: LD_ADDR_VAR 0 3
77939: PUSH
77940: LD_VAR 0 1
77944: PPUSH
77945: CALL_OW 310
77949: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77950: LD_VAR 0 3
77954: PPUSH
77955: CALL_OW 247
77959: PUSH
77960: LD_INT 2
77962: EQUAL
77963: IFFALSE 77976
// ComExitVehicle ( unit ) else
77965: LD_VAR 0 1
77969: PPUSH
77970: CALL_OW 121
77974: GO 77985
// ComExitBuilding ( unit ) ;
77976: LD_VAR 0 1
77980: PPUSH
77981: CALL_OW 122
// result := tmp ;
77985: LD_ADDR_VAR 0 2
77989: PUSH
77990: LD_VAR 0 3
77994: ST_TO_ADDR
// end ;
77995: LD_VAR 0 2
77999: RET
// export function ComExitAll ( units ) ; var i ; begin
78000: LD_INT 0
78002: PPUSH
78003: PPUSH
// if not units then
78004: LD_VAR 0 1
78008: NOT
78009: IFFALSE 78013
// exit ;
78011: GO 78039
// for i in units do
78013: LD_ADDR_VAR 0 3
78017: PUSH
78018: LD_VAR 0 1
78022: PUSH
78023: FOR_IN
78024: IFFALSE 78037
// ComExit ( i ) ;
78026: LD_VAR 0 3
78030: PPUSH
78031: CALL 77917 0 1
78035: GO 78023
78037: POP
78038: POP
// end ;
78039: LD_VAR 0 2
78043: RET
// export function ResetHc ; begin
78044: LD_INT 0
78046: PPUSH
// InitHc ;
78047: CALL_OW 19
// hc_importance := 0 ;
78051: LD_ADDR_OWVAR 32
78055: PUSH
78056: LD_INT 0
78058: ST_TO_ADDR
// end ;
78059: LD_VAR 0 1
78063: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78064: LD_INT 0
78066: PPUSH
78067: PPUSH
78068: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78069: LD_ADDR_VAR 0 6
78073: PUSH
78074: LD_VAR 0 1
78078: PUSH
78079: LD_VAR 0 3
78083: PLUS
78084: PUSH
78085: LD_INT 2
78087: DIV
78088: ST_TO_ADDR
// if _x < 0 then
78089: LD_VAR 0 6
78093: PUSH
78094: LD_INT 0
78096: LESS
78097: IFFALSE 78114
// _x := _x * - 1 ;
78099: LD_ADDR_VAR 0 6
78103: PUSH
78104: LD_VAR 0 6
78108: PUSH
78109: LD_INT 1
78111: NEG
78112: MUL
78113: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78114: LD_ADDR_VAR 0 7
78118: PUSH
78119: LD_VAR 0 2
78123: PUSH
78124: LD_VAR 0 4
78128: PLUS
78129: PUSH
78130: LD_INT 2
78132: DIV
78133: ST_TO_ADDR
// if _y < 0 then
78134: LD_VAR 0 7
78138: PUSH
78139: LD_INT 0
78141: LESS
78142: IFFALSE 78159
// _y := _y * - 1 ;
78144: LD_ADDR_VAR 0 7
78148: PUSH
78149: LD_VAR 0 7
78153: PUSH
78154: LD_INT 1
78156: NEG
78157: MUL
78158: ST_TO_ADDR
// result := [ _x , _y ] ;
78159: LD_ADDR_VAR 0 5
78163: PUSH
78164: LD_VAR 0 6
78168: PUSH
78169: LD_VAR 0 7
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: ST_TO_ADDR
// end ;
78178: LD_VAR 0 5
78182: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78183: LD_INT 0
78185: PPUSH
78186: PPUSH
78187: PPUSH
78188: PPUSH
// task := GetTaskList ( unit ) ;
78189: LD_ADDR_VAR 0 7
78193: PUSH
78194: LD_VAR 0 1
78198: PPUSH
78199: CALL_OW 437
78203: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78204: LD_VAR 0 7
78208: NOT
78209: IFFALSE 78228
78211: PUSH
78212: LD_VAR 0 1
78216: PPUSH
78217: LD_VAR 0 2
78221: PPUSH
78222: CALL_OW 308
78226: NOT
78227: AND
78228: IFFALSE 78232
// exit ;
78230: GO 78350
// if IsInArea ( unit , area ) then
78232: LD_VAR 0 1
78236: PPUSH
78237: LD_VAR 0 2
78241: PPUSH
78242: CALL_OW 308
78246: IFFALSE 78264
// begin ComMoveToArea ( unit , goAway ) ;
78248: LD_VAR 0 1
78252: PPUSH
78253: LD_VAR 0 3
78257: PPUSH
78258: CALL_OW 113
// exit ;
78262: GO 78350
// end ; if task [ 1 ] [ 1 ] <> M then
78264: LD_VAR 0 7
78268: PUSH
78269: LD_INT 1
78271: ARRAY
78272: PUSH
78273: LD_INT 1
78275: ARRAY
78276: PUSH
78277: LD_STRING M
78279: NONEQUAL
78280: IFFALSE 78284
// exit ;
78282: GO 78350
// x := task [ 1 ] [ 2 ] ;
78284: LD_ADDR_VAR 0 5
78288: PUSH
78289: LD_VAR 0 7
78293: PUSH
78294: LD_INT 1
78296: ARRAY
78297: PUSH
78298: LD_INT 2
78300: ARRAY
78301: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78302: LD_ADDR_VAR 0 6
78306: PUSH
78307: LD_VAR 0 7
78311: PUSH
78312: LD_INT 1
78314: ARRAY
78315: PUSH
78316: LD_INT 3
78318: ARRAY
78319: ST_TO_ADDR
// if InArea ( x , y , area ) then
78320: LD_VAR 0 5
78324: PPUSH
78325: LD_VAR 0 6
78329: PPUSH
78330: LD_VAR 0 2
78334: PPUSH
78335: CALL_OW 309
78339: IFFALSE 78350
// ComStop ( unit ) ;
78341: LD_VAR 0 1
78345: PPUSH
78346: CALL_OW 141
// end ;
78350: LD_VAR 0 4
78354: RET
// export function Abs ( value ) ; begin
78355: LD_INT 0
78357: PPUSH
// result := value ;
78358: LD_ADDR_VAR 0 2
78362: PUSH
78363: LD_VAR 0 1
78367: ST_TO_ADDR
// if value < 0 then
78368: LD_VAR 0 1
78372: PUSH
78373: LD_INT 0
78375: LESS
78376: IFFALSE 78393
// result := value * - 1 ;
78378: LD_ADDR_VAR 0 2
78382: PUSH
78383: LD_VAR 0 1
78387: PUSH
78388: LD_INT 1
78390: NEG
78391: MUL
78392: ST_TO_ADDR
// end ;
78393: LD_VAR 0 2
78397: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78398: LD_INT 0
78400: PPUSH
78401: PPUSH
78402: PPUSH
78403: PPUSH
78404: PPUSH
78405: PPUSH
78406: PPUSH
78407: PPUSH
// if not unit or not building then
78408: LD_VAR 0 1
78412: NOT
78413: IFTRUE 78422
78415: PUSH
78416: LD_VAR 0 2
78420: NOT
78421: OR
78422: IFFALSE 78426
// exit ;
78424: GO 78654
// x := GetX ( building ) ;
78426: LD_ADDR_VAR 0 4
78430: PUSH
78431: LD_VAR 0 2
78435: PPUSH
78436: CALL_OW 250
78440: ST_TO_ADDR
// y := GetY ( building ) ;
78441: LD_ADDR_VAR 0 6
78445: PUSH
78446: LD_VAR 0 2
78450: PPUSH
78451: CALL_OW 251
78455: ST_TO_ADDR
// d := GetDir ( building ) ;
78456: LD_ADDR_VAR 0 8
78460: PUSH
78461: LD_VAR 0 2
78465: PPUSH
78466: CALL_OW 254
78470: ST_TO_ADDR
// r := 4 ;
78471: LD_ADDR_VAR 0 9
78475: PUSH
78476: LD_INT 4
78478: ST_TO_ADDR
// for i := 1 to 5 do
78479: LD_ADDR_VAR 0 10
78483: PUSH
78484: DOUBLE
78485: LD_INT 1
78487: DEC
78488: ST_TO_ADDR
78489: LD_INT 5
78491: PUSH
78492: FOR_TO
78493: IFFALSE 78652
// begin _x := ShiftX ( x , d , r + i ) ;
78495: LD_ADDR_VAR 0 5
78499: PUSH
78500: LD_VAR 0 4
78504: PPUSH
78505: LD_VAR 0 8
78509: PPUSH
78510: LD_VAR 0 9
78514: PUSH
78515: LD_VAR 0 10
78519: PLUS
78520: PPUSH
78521: CALL_OW 272
78525: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78526: LD_ADDR_VAR 0 7
78530: PUSH
78531: LD_VAR 0 6
78535: PPUSH
78536: LD_VAR 0 8
78540: PPUSH
78541: LD_VAR 0 9
78545: PUSH
78546: LD_VAR 0 10
78550: PLUS
78551: PPUSH
78552: CALL_OW 273
78556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78557: LD_VAR 0 5
78561: PPUSH
78562: LD_VAR 0 7
78566: PPUSH
78567: CALL_OW 488
78571: IFFALSE 78606
78573: PUSH
78574: LD_VAR 0 5
78578: PPUSH
78579: LD_VAR 0 7
78583: PPUSH
78584: CALL_OW 428
78588: PPUSH
78589: CALL_OW 247
78593: PUSH
78594: LD_INT 3
78596: PUSH
78597: LD_INT 2
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: IN
78604: NOT
78605: AND
78606: IFFALSE 78650
// begin ComMoveXY ( unit , _x , _y ) ;
78608: LD_VAR 0 1
78612: PPUSH
78613: LD_VAR 0 5
78617: PPUSH
78618: LD_VAR 0 7
78622: PPUSH
78623: CALL_OW 111
// result := [ _x , _y ] ;
78627: LD_ADDR_VAR 0 3
78631: PUSH
78632: LD_VAR 0 5
78636: PUSH
78637: LD_VAR 0 7
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: ST_TO_ADDR
// exit ;
78646: POP
78647: POP
78648: GO 78654
// end ; end ;
78650: GO 78492
78652: POP
78653: POP
// end ;
78654: LD_VAR 0 3
78658: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78659: LD_INT 0
78661: PPUSH
78662: PPUSH
78663: PPUSH
// result := 0 ;
78664: LD_ADDR_VAR 0 3
78668: PUSH
78669: LD_INT 0
78671: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78672: LD_VAR 0 1
78676: PUSH
78677: LD_INT 0
78679: LESS
78680: IFTRUE 78692
78682: PUSH
78683: LD_VAR 0 1
78687: PUSH
78688: LD_INT 8
78690: GREATER
78691: OR
78692: IFTRUE 78704
78694: PUSH
78695: LD_VAR 0 2
78699: PUSH
78700: LD_INT 0
78702: LESS
78703: OR
78704: IFTRUE 78716
78706: PUSH
78707: LD_VAR 0 2
78711: PUSH
78712: LD_INT 8
78714: GREATER
78715: OR
78716: IFFALSE 78720
// exit ;
78718: GO 78795
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78720: LD_ADDR_VAR 0 4
78724: PUSH
78725: LD_INT 22
78727: PUSH
78728: LD_VAR 0 2
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: PPUSH
78737: CALL_OW 69
78741: PUSH
78742: FOR_IN
78743: IFFALSE 78793
// begin un := UnitShoot ( i ) ;
78745: LD_ADDR_VAR 0 5
78749: PUSH
78750: LD_VAR 0 4
78754: PPUSH
78755: CALL_OW 504
78759: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78760: LD_VAR 0 5
78764: PPUSH
78765: CALL_OW 255
78769: PUSH
78770: LD_VAR 0 1
78774: EQUAL
78775: IFFALSE 78791
// begin result := un ;
78777: LD_ADDR_VAR 0 3
78781: PUSH
78782: LD_VAR 0 5
78786: ST_TO_ADDR
// exit ;
78787: POP
78788: POP
78789: GO 78795
// end ; end ;
78791: GO 78742
78793: POP
78794: POP
// end ;
78795: LD_VAR 0 3
78799: RET
// export function GetCargoBay ( units ) ; begin
78800: LD_INT 0
78802: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78803: LD_ADDR_VAR 0 2
78807: PUSH
78808: LD_VAR 0 1
78812: PPUSH
78813: LD_INT 2
78815: PUSH
78816: LD_INT 34
78818: PUSH
78819: LD_INT 12
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: PUSH
78826: LD_INT 34
78828: PUSH
78829: LD_INT 51
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: LD_INT 34
78838: PUSH
78839: LD_INT 32
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PUSH
78846: LD_INT 34
78848: PUSH
78849: LD_INT 89
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: LIST
78862: PPUSH
78863: CALL_OW 72
78867: ST_TO_ADDR
// end ;
78868: LD_VAR 0 2
78872: RET
// export function Negate ( value ) ; begin
78873: LD_INT 0
78875: PPUSH
// result := not value ;
78876: LD_ADDR_VAR 0 2
78880: PUSH
78881: LD_VAR 0 1
78885: NOT
78886: ST_TO_ADDR
// end ;
78887: LD_VAR 0 2
78891: RET
// export function Inc ( value ) ; begin
78892: LD_INT 0
78894: PPUSH
// result := value + 1 ;
78895: LD_ADDR_VAR 0 2
78899: PUSH
78900: LD_VAR 0 1
78904: PUSH
78905: LD_INT 1
78907: PLUS
78908: ST_TO_ADDR
// end ;
78909: LD_VAR 0 2
78913: RET
// export function Dec ( value ) ; begin
78914: LD_INT 0
78916: PPUSH
// result := value - 1 ;
78917: LD_ADDR_VAR 0 2
78921: PUSH
78922: LD_VAR 0 1
78926: PUSH
78927: LD_INT 1
78929: MINUS
78930: ST_TO_ADDR
// end ;
78931: LD_VAR 0 2
78935: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78936: LD_INT 0
78938: PPUSH
78939: PPUSH
78940: PPUSH
78941: PPUSH
78942: PPUSH
78943: PPUSH
78944: PPUSH
78945: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78946: LD_VAR 0 1
78950: PPUSH
78951: LD_VAR 0 2
78955: PPUSH
78956: CALL_OW 488
78960: NOT
78961: IFTRUE 78980
78963: PUSH
78964: LD_VAR 0 3
78968: PPUSH
78969: LD_VAR 0 4
78973: PPUSH
78974: CALL_OW 488
78978: NOT
78979: OR
78980: IFFALSE 78993
// begin result := - 1 ;
78982: LD_ADDR_VAR 0 5
78986: PUSH
78987: LD_INT 1
78989: NEG
78990: ST_TO_ADDR
// exit ;
78991: GO 79228
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78993: LD_ADDR_VAR 0 12
78997: PUSH
78998: LD_VAR 0 1
79002: PPUSH
79003: LD_VAR 0 2
79007: PPUSH
79008: LD_VAR 0 3
79012: PPUSH
79013: LD_VAR 0 4
79017: PPUSH
79018: CALL 78064 0 4
79022: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79023: LD_ADDR_VAR 0 11
79027: PUSH
79028: LD_VAR 0 1
79032: PPUSH
79033: LD_VAR 0 2
79037: PPUSH
79038: LD_VAR 0 12
79042: PUSH
79043: LD_INT 1
79045: ARRAY
79046: PPUSH
79047: LD_VAR 0 12
79051: PUSH
79052: LD_INT 2
79054: ARRAY
79055: PPUSH
79056: CALL_OW 298
79060: ST_TO_ADDR
// distance := 9999 ;
79061: LD_ADDR_VAR 0 10
79065: PUSH
79066: LD_INT 9999
79068: ST_TO_ADDR
// for i := 0 to 5 do
79069: LD_ADDR_VAR 0 6
79073: PUSH
79074: DOUBLE
79075: LD_INT 0
79077: DEC
79078: ST_TO_ADDR
79079: LD_INT 5
79081: PUSH
79082: FOR_TO
79083: IFFALSE 79226
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79085: LD_ADDR_VAR 0 7
79089: PUSH
79090: LD_VAR 0 1
79094: PPUSH
79095: LD_VAR 0 6
79099: PPUSH
79100: LD_VAR 0 11
79104: PPUSH
79105: CALL_OW 272
79109: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79110: LD_ADDR_VAR 0 8
79114: PUSH
79115: LD_VAR 0 2
79119: PPUSH
79120: LD_VAR 0 6
79124: PPUSH
79125: LD_VAR 0 11
79129: PPUSH
79130: CALL_OW 273
79134: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79135: LD_VAR 0 7
79139: PPUSH
79140: LD_VAR 0 8
79144: PPUSH
79145: CALL_OW 488
79149: NOT
79150: IFFALSE 79154
// continue ;
79152: GO 79082
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79154: LD_ADDR_VAR 0 9
79158: PUSH
79159: LD_VAR 0 12
79163: PUSH
79164: LD_INT 1
79166: ARRAY
79167: PPUSH
79168: LD_VAR 0 12
79172: PUSH
79173: LD_INT 2
79175: ARRAY
79176: PPUSH
79177: LD_VAR 0 7
79181: PPUSH
79182: LD_VAR 0 8
79186: PPUSH
79187: CALL_OW 298
79191: ST_TO_ADDR
// if tmp < distance then
79192: LD_VAR 0 9
79196: PUSH
79197: LD_VAR 0 10
79201: LESS
79202: IFFALSE 79224
// begin result := i ;
79204: LD_ADDR_VAR 0 5
79208: PUSH
79209: LD_VAR 0 6
79213: ST_TO_ADDR
// distance := tmp ;
79214: LD_ADDR_VAR 0 10
79218: PUSH
79219: LD_VAR 0 9
79223: ST_TO_ADDR
// end ; end ;
79224: GO 79082
79226: POP
79227: POP
// end ;
79228: LD_VAR 0 5
79232: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79233: LD_INT 0
79235: PPUSH
79236: PPUSH
// if not driver or not IsInUnit ( driver ) then
79237: LD_VAR 0 1
79241: NOT
79242: IFTRUE 79256
79244: PUSH
79245: LD_VAR 0 1
79249: PPUSH
79250: CALL_OW 310
79254: NOT
79255: OR
79256: IFFALSE 79260
// exit ;
79258: GO 79350
// vehicle := IsInUnit ( driver ) ;
79260: LD_ADDR_VAR 0 3
79264: PUSH
79265: LD_VAR 0 1
79269: PPUSH
79270: CALL_OW 310
79274: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79275: LD_VAR 0 1
79279: PPUSH
79280: LD_STRING \
79282: PUSH
79283: LD_INT 0
79285: PUSH
79286: LD_INT 0
79288: PUSH
79289: LD_INT 0
79291: PUSH
79292: LD_INT 0
79294: PUSH
79295: LD_INT 0
79297: PUSH
79298: LD_INT 0
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: PUSH
79310: LD_STRING E
79312: PUSH
79313: LD_INT 0
79315: PUSH
79316: LD_INT 0
79318: PUSH
79319: LD_VAR 0 3
79323: PUSH
79324: LD_INT 0
79326: PUSH
79327: LD_INT 0
79329: PUSH
79330: LD_INT 0
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: PUSH
79342: EMPTY
79343: LIST
79344: LIST
79345: PPUSH
79346: CALL_OW 446
// end ;
79350: LD_VAR 0 2
79354: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79355: LD_INT 0
79357: PPUSH
79358: PPUSH
// if not driver or not IsInUnit ( driver ) then
79359: LD_VAR 0 1
79363: NOT
79364: IFTRUE 79378
79366: PUSH
79367: LD_VAR 0 1
79371: PPUSH
79372: CALL_OW 310
79376: NOT
79377: OR
79378: IFFALSE 79382
// exit ;
79380: GO 79472
// vehicle := IsInUnit ( driver ) ;
79382: LD_ADDR_VAR 0 3
79386: PUSH
79387: LD_VAR 0 1
79391: PPUSH
79392: CALL_OW 310
79396: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79397: LD_VAR 0 1
79401: PPUSH
79402: LD_STRING \
79404: PUSH
79405: LD_INT 0
79407: PUSH
79408: LD_INT 0
79410: PUSH
79411: LD_INT 0
79413: PUSH
79414: LD_INT 0
79416: PUSH
79417: LD_INT 0
79419: PUSH
79420: LD_INT 0
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: LIST
79427: LIST
79428: LIST
79429: LIST
79430: LIST
79431: PUSH
79432: LD_STRING E
79434: PUSH
79435: LD_INT 0
79437: PUSH
79438: LD_INT 0
79440: PUSH
79441: LD_VAR 0 3
79445: PUSH
79446: LD_INT 0
79448: PUSH
79449: LD_INT 0
79451: PUSH
79452: LD_INT 0
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: PPUSH
79468: CALL_OW 447
// end ;
79472: LD_VAR 0 2
79476: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79477: LD_INT 0
79479: PPUSH
79480: PPUSH
79481: PPUSH
// tmp := [ ] ;
79482: LD_ADDR_VAR 0 5
79486: PUSH
79487: EMPTY
79488: ST_TO_ADDR
// for i in units do
79489: LD_ADDR_VAR 0 4
79493: PUSH
79494: LD_VAR 0 1
79498: PUSH
79499: FOR_IN
79500: IFFALSE 79538
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79502: LD_ADDR_VAR 0 5
79506: PUSH
79507: LD_VAR 0 5
79511: PPUSH
79512: LD_VAR 0 5
79516: PUSH
79517: LD_INT 1
79519: PLUS
79520: PPUSH
79521: LD_VAR 0 4
79525: PPUSH
79526: CALL_OW 256
79530: PPUSH
79531: CALL_OW 2
79535: ST_TO_ADDR
79536: GO 79499
79538: POP
79539: POP
// if not tmp then
79540: LD_VAR 0 5
79544: NOT
79545: IFFALSE 79549
// exit ;
79547: GO 79597
// if asc then
79549: LD_VAR 0 2
79553: IFFALSE 79577
// result := SortListByListAsc ( units , tmp ) else
79555: LD_ADDR_VAR 0 3
79559: PUSH
79560: LD_VAR 0 1
79564: PPUSH
79565: LD_VAR 0 5
79569: PPUSH
79570: CALL_OW 76
79574: ST_TO_ADDR
79575: GO 79597
// result := SortListByListDesc ( units , tmp ) ;
79577: LD_ADDR_VAR 0 3
79581: PUSH
79582: LD_VAR 0 1
79586: PPUSH
79587: LD_VAR 0 5
79591: PPUSH
79592: CALL_OW 77
79596: ST_TO_ADDR
// end ;
79597: LD_VAR 0 3
79601: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79602: LD_INT 0
79604: PPUSH
79605: PPUSH
// task := GetTaskList ( mech ) ;
79606: LD_ADDR_VAR 0 4
79610: PUSH
79611: LD_VAR 0 1
79615: PPUSH
79616: CALL_OW 437
79620: ST_TO_ADDR
// if not task then
79621: LD_VAR 0 4
79625: NOT
79626: IFFALSE 79630
// exit ;
79628: GO 79674
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79630: LD_ADDR_VAR 0 3
79634: PUSH
79635: LD_VAR 0 4
79639: PUSH
79640: LD_INT 1
79642: ARRAY
79643: PUSH
79644: LD_INT 1
79646: ARRAY
79647: PUSH
79648: LD_STRING r
79650: EQUAL
79651: IFFALSE 79673
79653: PUSH
79654: LD_VAR 0 4
79658: PUSH
79659: LD_INT 1
79661: ARRAY
79662: PUSH
79663: LD_INT 4
79665: ARRAY
79666: PUSH
79667: LD_VAR 0 2
79671: EQUAL
79672: AND
79673: ST_TO_ADDR
// end ;
79674: LD_VAR 0 3
79678: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79679: LD_INT 0
79681: PPUSH
// SetDir ( unit , d ) ;
79682: LD_VAR 0 1
79686: PPUSH
79687: LD_VAR 0 4
79691: PPUSH
79692: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
79696: LD_ADDR_VAR 0 6
79700: PUSH
79701: LD_VAR 0 1
79705: PPUSH
79706: LD_VAR 0 2
79710: PPUSH
79711: LD_VAR 0 3
79715: PPUSH
79716: LD_VAR 0 5
79720: PPUSH
79721: CALL_OW 48
79725: ST_TO_ADDR
// end ;
79726: LD_VAR 0 6
79730: RET
// export function ToNaturalNumber ( number ) ; begin
79731: LD_INT 0
79733: PPUSH
// result := number div 1 ;
79734: LD_ADDR_VAR 0 2
79738: PUSH
79739: LD_VAR 0 1
79743: PUSH
79744: LD_INT 1
79746: DIV
79747: ST_TO_ADDR
// if number < 0 then
79748: LD_VAR 0 1
79752: PUSH
79753: LD_INT 0
79755: LESS
79756: IFFALSE 79766
// result := 0 ;
79758: LD_ADDR_VAR 0 2
79762: PUSH
79763: LD_INT 0
79765: ST_TO_ADDR
// end ;
79766: LD_VAR 0 2
79770: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
79771: LD_INT 0
79773: PPUSH
79774: PPUSH
79775: PPUSH
// if not buildings then
79776: LD_VAR 0 1
79780: NOT
79781: IFFALSE 79785
// exit ;
79783: GO 79900
// tmp := [ ] ;
79785: LD_ADDR_VAR 0 5
79789: PUSH
79790: EMPTY
79791: ST_TO_ADDR
// for b in buildings do
79792: LD_ADDR_VAR 0 4
79796: PUSH
79797: LD_VAR 0 1
79801: PUSH
79802: FOR_IN
79803: IFFALSE 79841
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
79805: LD_ADDR_VAR 0 5
79809: PUSH
79810: LD_VAR 0 5
79814: PPUSH
79815: LD_VAR 0 5
79819: PUSH
79820: LD_INT 1
79822: PLUS
79823: PPUSH
79824: LD_VAR 0 4
79828: PPUSH
79829: CALL_OW 266
79833: PPUSH
79834: CALL_OW 1
79838: ST_TO_ADDR
79839: GO 79802
79841: POP
79842: POP
// if not tmp then
79843: LD_VAR 0 5
79847: NOT
79848: IFFALSE 79852
// exit ;
79850: GO 79900
// if asc then
79852: LD_VAR 0 2
79856: IFFALSE 79880
// result := SortListByListAsc ( buildings , tmp ) else
79858: LD_ADDR_VAR 0 3
79862: PUSH
79863: LD_VAR 0 1
79867: PPUSH
79868: LD_VAR 0 5
79872: PPUSH
79873: CALL_OW 76
79877: ST_TO_ADDR
79878: GO 79900
// result := SortListByListDesc ( buildings , tmp ) ;
79880: LD_ADDR_VAR 0 3
79884: PUSH
79885: LD_VAR 0 1
79889: PPUSH
79890: LD_VAR 0 5
79894: PPUSH
79895: CALL_OW 77
79899: ST_TO_ADDR
// end ;
79900: LD_VAR 0 3
79904: RET
// export function SortByClass ( units , class ) ; var un ; begin
79905: LD_INT 0
79907: PPUSH
79908: PPUSH
// if not units or not class then
79909: LD_VAR 0 1
79913: NOT
79914: IFTRUE 79923
79916: PUSH
79917: LD_VAR 0 2
79921: NOT
79922: OR
79923: IFFALSE 79927
// exit ;
79925: GO 80022
// result := [ ] ;
79927: LD_ADDR_VAR 0 3
79931: PUSH
79932: EMPTY
79933: ST_TO_ADDR
// for un in units do
79934: LD_ADDR_VAR 0 4
79938: PUSH
79939: LD_VAR 0 1
79943: PUSH
79944: FOR_IN
79945: IFFALSE 80020
// if GetClass ( un ) = class then
79947: LD_VAR 0 4
79951: PPUSH
79952: CALL_OW 257
79956: PUSH
79957: LD_VAR 0 2
79961: EQUAL
79962: IFFALSE 79989
// result := Insert ( result , 1 , un ) else
79964: LD_ADDR_VAR 0 3
79968: PUSH
79969: LD_VAR 0 3
79973: PPUSH
79974: LD_INT 1
79976: PPUSH
79977: LD_VAR 0 4
79981: PPUSH
79982: CALL_OW 2
79986: ST_TO_ADDR
79987: GO 80018
// result := Replace ( result , result + 1 , un ) ;
79989: LD_ADDR_VAR 0 3
79993: PUSH
79994: LD_VAR 0 3
79998: PPUSH
79999: LD_VAR 0 3
80003: PUSH
80004: LD_INT 1
80006: PLUS
80007: PPUSH
80008: LD_VAR 0 4
80012: PPUSH
80013: CALL_OW 1
80017: ST_TO_ADDR
80018: GO 79944
80020: POP
80021: POP
// end ;
80022: LD_VAR 0 3
80026: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80027: LD_INT 0
80029: PPUSH
80030: PPUSH
80031: PPUSH
80032: PPUSH
80033: PPUSH
80034: PPUSH
80035: PPUSH
// result := [ ] ;
80036: LD_ADDR_VAR 0 4
80040: PUSH
80041: EMPTY
80042: ST_TO_ADDR
// if x - r < 0 then
80043: LD_VAR 0 1
80047: PUSH
80048: LD_VAR 0 3
80052: MINUS
80053: PUSH
80054: LD_INT 0
80056: LESS
80057: IFFALSE 80069
// min_x := 0 else
80059: LD_ADDR_VAR 0 8
80063: PUSH
80064: LD_INT 0
80066: ST_TO_ADDR
80067: GO 80085
// min_x := x - r ;
80069: LD_ADDR_VAR 0 8
80073: PUSH
80074: LD_VAR 0 1
80078: PUSH
80079: LD_VAR 0 3
80083: MINUS
80084: ST_TO_ADDR
// if y - r < 0 then
80085: LD_VAR 0 2
80089: PUSH
80090: LD_VAR 0 3
80094: MINUS
80095: PUSH
80096: LD_INT 0
80098: LESS
80099: IFFALSE 80111
// min_y := 0 else
80101: LD_ADDR_VAR 0 7
80105: PUSH
80106: LD_INT 0
80108: ST_TO_ADDR
80109: GO 80127
// min_y := y - r ;
80111: LD_ADDR_VAR 0 7
80115: PUSH
80116: LD_VAR 0 2
80120: PUSH
80121: LD_VAR 0 3
80125: MINUS
80126: ST_TO_ADDR
// max_x := x + r ;
80127: LD_ADDR_VAR 0 9
80131: PUSH
80132: LD_VAR 0 1
80136: PUSH
80137: LD_VAR 0 3
80141: PLUS
80142: ST_TO_ADDR
// max_y := y + r ;
80143: LD_ADDR_VAR 0 10
80147: PUSH
80148: LD_VAR 0 2
80152: PUSH
80153: LD_VAR 0 3
80157: PLUS
80158: ST_TO_ADDR
// for _x = min_x to max_x do
80159: LD_ADDR_VAR 0 5
80163: PUSH
80164: DOUBLE
80165: LD_VAR 0 8
80169: DEC
80170: ST_TO_ADDR
80171: LD_VAR 0 9
80175: PUSH
80176: FOR_TO
80177: IFFALSE 80278
// for _y = min_y to max_y do
80179: LD_ADDR_VAR 0 6
80183: PUSH
80184: DOUBLE
80185: LD_VAR 0 7
80189: DEC
80190: ST_TO_ADDR
80191: LD_VAR 0 10
80195: PUSH
80196: FOR_TO
80197: IFFALSE 80274
// begin if not ValidHex ( _x , _y ) then
80199: LD_VAR 0 5
80203: PPUSH
80204: LD_VAR 0 6
80208: PPUSH
80209: CALL_OW 488
80213: NOT
80214: IFFALSE 80218
// continue ;
80216: GO 80196
// if GetResourceTypeXY ( _x , _y ) then
80218: LD_VAR 0 5
80222: PPUSH
80223: LD_VAR 0 6
80227: PPUSH
80228: CALL_OW 283
80232: IFFALSE 80272
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80234: LD_ADDR_VAR 0 4
80238: PUSH
80239: LD_VAR 0 4
80243: PPUSH
80244: LD_VAR 0 4
80248: PUSH
80249: LD_INT 1
80251: PLUS
80252: PPUSH
80253: LD_VAR 0 5
80257: PUSH
80258: LD_VAR 0 6
80262: PUSH
80263: EMPTY
80264: LIST
80265: LIST
80266: PPUSH
80267: CALL_OW 1
80271: ST_TO_ADDR
// end ;
80272: GO 80196
80274: POP
80275: POP
80276: GO 80176
80278: POP
80279: POP
// end ;
80280: LD_VAR 0 4
80284: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80285: LD_INT 0
80287: PPUSH
80288: PPUSH
80289: PPUSH
80290: PPUSH
80291: PPUSH
80292: PPUSH
80293: PPUSH
80294: PPUSH
// if not units then
80295: LD_VAR 0 1
80299: NOT
80300: IFFALSE 80304
// exit ;
80302: GO 80836
// result := UnitFilter ( units , [ f_ok ] ) ;
80304: LD_ADDR_VAR 0 3
80308: PUSH
80309: LD_VAR 0 1
80313: PPUSH
80314: LD_INT 50
80316: PUSH
80317: EMPTY
80318: LIST
80319: PPUSH
80320: CALL_OW 72
80324: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80325: LD_ADDR_VAR 0 8
80329: PUSH
80330: LD_VAR 0 1
80334: PUSH
80335: LD_INT 1
80337: ARRAY
80338: PPUSH
80339: CALL_OW 255
80343: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80344: LD_ADDR_VAR 0 10
80348: PUSH
80349: LD_INT 29
80351: PUSH
80352: LD_INT 91
80354: PUSH
80355: LD_INT 49
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: LIST
80362: ST_TO_ADDR
// if not result then
80363: LD_VAR 0 3
80367: NOT
80368: IFFALSE 80372
// exit ;
80370: GO 80836
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80372: LD_ADDR_VAR 0 5
80376: PUSH
80377: LD_INT 81
80379: PUSH
80380: LD_VAR 0 8
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PPUSH
80389: CALL_OW 69
80393: ST_TO_ADDR
// for i in result do
80394: LD_ADDR_VAR 0 4
80398: PUSH
80399: LD_VAR 0 3
80403: PUSH
80404: FOR_IN
80405: IFFALSE 80834
// begin tag := GetTag ( i ) + 1 ;
80407: LD_ADDR_VAR 0 9
80411: PUSH
80412: LD_VAR 0 4
80416: PPUSH
80417: CALL_OW 110
80421: PUSH
80422: LD_INT 1
80424: PLUS
80425: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
80426: LD_ADDR_VAR 0 7
80430: PUSH
80431: LD_VAR 0 4
80435: PPUSH
80436: CALL_OW 250
80440: PPUSH
80441: LD_VAR 0 4
80445: PPUSH
80446: CALL_OW 251
80450: PPUSH
80451: LD_INT 4
80453: PPUSH
80454: CALL 80027 0 3
80458: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
80459: LD_VAR 0 4
80463: PPUSH
80464: CALL_OW 247
80468: PUSH
80469: LD_INT 2
80471: EQUAL
80472: IFFALSE 80484
80474: PUSH
80475: LD_VAR 0 7
80479: PUSH
80480: LD_INT 2
80482: GREATER
80483: AND
80484: IFFALSE 80504
80486: PUSH
80487: LD_VAR 0 4
80491: PPUSH
80492: CALL_OW 264
80496: PUSH
80497: LD_VAR 0 10
80501: IN
80502: NOT
80503: AND
80504: IFFALSE 80543
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80506: LD_VAR 0 4
80510: PPUSH
80511: LD_VAR 0 7
80515: PUSH
80516: LD_INT 1
80518: ARRAY
80519: PUSH
80520: LD_INT 1
80522: ARRAY
80523: PPUSH
80524: LD_VAR 0 7
80528: PUSH
80529: LD_INT 1
80531: ARRAY
80532: PUSH
80533: LD_INT 2
80535: ARRAY
80536: PPUSH
80537: CALL_OW 116
80541: GO 80832
// if path > tag then
80543: LD_VAR 0 2
80547: PUSH
80548: LD_VAR 0 9
80552: GREATER
80553: IFFALSE 80761
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80555: LD_ADDR_VAR 0 6
80559: PUSH
80560: LD_VAR 0 5
80564: PPUSH
80565: LD_INT 91
80567: PUSH
80568: LD_VAR 0 4
80572: PUSH
80573: LD_INT 8
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: LIST
80580: PPUSH
80581: CALL_OW 72
80585: ST_TO_ADDR
// if nearEnemy then
80586: LD_VAR 0 6
80590: IFFALSE 80659
// begin if GetWeapon ( i ) = ru_time_lapser then
80592: LD_VAR 0 4
80596: PPUSH
80597: CALL_OW 264
80601: PUSH
80602: LD_INT 49
80604: EQUAL
80605: IFFALSE 80633
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80607: LD_VAR 0 4
80611: PPUSH
80612: LD_VAR 0 6
80616: PPUSH
80617: LD_VAR 0 4
80621: PPUSH
80622: CALL_OW 74
80626: PPUSH
80627: CALL_OW 112
80631: GO 80657
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80633: LD_VAR 0 4
80637: PPUSH
80638: LD_VAR 0 6
80642: PPUSH
80643: LD_VAR 0 4
80647: PPUSH
80648: CALL_OW 74
80652: PPUSH
80653: CALL 81917 0 2
// end else
80657: GO 80759
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80659: LD_VAR 0 4
80663: PPUSH
80664: LD_VAR 0 2
80668: PUSH
80669: LD_VAR 0 9
80673: ARRAY
80674: PUSH
80675: LD_INT 1
80677: ARRAY
80678: PPUSH
80679: LD_VAR 0 2
80683: PUSH
80684: LD_VAR 0 9
80688: ARRAY
80689: PUSH
80690: LD_INT 2
80692: ARRAY
80693: PPUSH
80694: CALL_OW 297
80698: PUSH
80699: LD_INT 6
80701: GREATER
80702: IFFALSE 80745
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80704: LD_VAR 0 4
80708: PPUSH
80709: LD_VAR 0 2
80713: PUSH
80714: LD_VAR 0 9
80718: ARRAY
80719: PUSH
80720: LD_INT 1
80722: ARRAY
80723: PPUSH
80724: LD_VAR 0 2
80728: PUSH
80729: LD_VAR 0 9
80733: ARRAY
80734: PUSH
80735: LD_INT 2
80737: ARRAY
80738: PPUSH
80739: CALL_OW 114
80743: GO 80759
// SetTag ( i , tag ) ;
80745: LD_VAR 0 4
80749: PPUSH
80750: LD_VAR 0 9
80754: PPUSH
80755: CALL_OW 109
// end else
80759: GO 80832
// if enemy then
80761: LD_VAR 0 5
80765: IFFALSE 80832
// begin if GetWeapon ( i ) = ru_time_lapser then
80767: LD_VAR 0 4
80771: PPUSH
80772: CALL_OW 264
80776: PUSH
80777: LD_INT 49
80779: EQUAL
80780: IFFALSE 80808
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80782: LD_VAR 0 4
80786: PPUSH
80787: LD_VAR 0 5
80791: PPUSH
80792: LD_VAR 0 4
80796: PPUSH
80797: CALL_OW 74
80801: PPUSH
80802: CALL_OW 112
80806: GO 80832
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80808: LD_VAR 0 4
80812: PPUSH
80813: LD_VAR 0 5
80817: PPUSH
80818: LD_VAR 0 4
80822: PPUSH
80823: CALL_OW 74
80827: PPUSH
80828: CALL 81917 0 2
// end ; end ;
80832: GO 80404
80834: POP
80835: POP
// end ;
80836: LD_VAR 0 3
80840: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80841: LD_INT 0
80843: PPUSH
80844: PPUSH
80845: PPUSH
// if not unit or IsInUnit ( unit ) then
80846: LD_VAR 0 1
80850: NOT
80851: IFTRUE 80864
80853: PUSH
80854: LD_VAR 0 1
80858: PPUSH
80859: CALL_OW 310
80863: OR
80864: IFFALSE 80868
// exit ;
80866: GO 80959
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80868: LD_ADDR_VAR 0 4
80872: PUSH
80873: LD_VAR 0 1
80877: PPUSH
80878: CALL_OW 250
80882: PPUSH
80883: LD_VAR 0 2
80887: PPUSH
80888: LD_INT 1
80890: PPUSH
80891: CALL_OW 272
80895: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80896: LD_ADDR_VAR 0 5
80900: PUSH
80901: LD_VAR 0 1
80905: PPUSH
80906: CALL_OW 251
80910: PPUSH
80911: LD_VAR 0 2
80915: PPUSH
80916: LD_INT 1
80918: PPUSH
80919: CALL_OW 273
80923: ST_TO_ADDR
// if ValidHex ( x , y ) then
80924: LD_VAR 0 4
80928: PPUSH
80929: LD_VAR 0 5
80933: PPUSH
80934: CALL_OW 488
80938: IFFALSE 80959
// ComTurnXY ( unit , x , y ) ;
80940: LD_VAR 0 1
80944: PPUSH
80945: LD_VAR 0 4
80949: PPUSH
80950: LD_VAR 0 5
80954: PPUSH
80955: CALL_OW 118
// end ;
80959: LD_VAR 0 3
80963: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80964: LD_INT 0
80966: PPUSH
80967: PPUSH
// result := false ;
80968: LD_ADDR_VAR 0 3
80972: PUSH
80973: LD_INT 0
80975: ST_TO_ADDR
// if not units then
80976: LD_VAR 0 2
80980: NOT
80981: IFFALSE 80985
// exit ;
80983: GO 81030
// for i in units do
80985: LD_ADDR_VAR 0 4
80989: PUSH
80990: LD_VAR 0 2
80994: PUSH
80995: FOR_IN
80996: IFFALSE 81028
// if See ( side , i ) then
80998: LD_VAR 0 1
81002: PPUSH
81003: LD_VAR 0 4
81007: PPUSH
81008: CALL_OW 292
81012: IFFALSE 81026
// begin result := true ;
81014: LD_ADDR_VAR 0 3
81018: PUSH
81019: LD_INT 1
81021: ST_TO_ADDR
// exit ;
81022: POP
81023: POP
81024: GO 81030
// end ;
81026: GO 80995
81028: POP
81029: POP
// end ;
81030: LD_VAR 0 3
81034: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81035: LD_INT 0
81037: PPUSH
81038: PPUSH
81039: PPUSH
81040: PPUSH
// if not unit or not points then
81041: LD_VAR 0 1
81045: NOT
81046: IFTRUE 81055
81048: PUSH
81049: LD_VAR 0 2
81053: NOT
81054: OR
81055: IFFALSE 81059
// exit ;
81057: GO 81149
// dist := 99999 ;
81059: LD_ADDR_VAR 0 5
81063: PUSH
81064: LD_INT 99999
81066: ST_TO_ADDR
// for i in points do
81067: LD_ADDR_VAR 0 4
81071: PUSH
81072: LD_VAR 0 2
81076: PUSH
81077: FOR_IN
81078: IFFALSE 81147
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81080: LD_ADDR_VAR 0 6
81084: PUSH
81085: LD_VAR 0 1
81089: PPUSH
81090: LD_VAR 0 4
81094: PUSH
81095: LD_INT 1
81097: ARRAY
81098: PPUSH
81099: LD_VAR 0 4
81103: PUSH
81104: LD_INT 2
81106: ARRAY
81107: PPUSH
81108: CALL_OW 297
81112: ST_TO_ADDR
// if tmpDist < dist then
81113: LD_VAR 0 6
81117: PUSH
81118: LD_VAR 0 5
81122: LESS
81123: IFFALSE 81145
// begin result := i ;
81125: LD_ADDR_VAR 0 3
81129: PUSH
81130: LD_VAR 0 4
81134: ST_TO_ADDR
// dist := tmpDist ;
81135: LD_ADDR_VAR 0 5
81139: PUSH
81140: LD_VAR 0 6
81144: ST_TO_ADDR
// end ; end ;
81145: GO 81077
81147: POP
81148: POP
// end ;
81149: LD_VAR 0 3
81153: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81154: LD_INT 0
81156: PPUSH
// uc_side := side ;
81157: LD_ADDR_OWVAR 20
81161: PUSH
81162: LD_VAR 0 1
81166: ST_TO_ADDR
// uc_nation := 3 ;
81167: LD_ADDR_OWVAR 21
81171: PUSH
81172: LD_INT 3
81174: ST_TO_ADDR
// vc_chassis := 25 ;
81175: LD_ADDR_OWVAR 37
81179: PUSH
81180: LD_INT 25
81182: ST_TO_ADDR
// vc_engine := engine_siberite ;
81183: LD_ADDR_OWVAR 39
81187: PUSH
81188: LD_INT 3
81190: ST_TO_ADDR
// vc_control := control_computer ;
81191: LD_ADDR_OWVAR 38
81195: PUSH
81196: LD_INT 3
81198: ST_TO_ADDR
// vc_weapon := 59 ;
81199: LD_ADDR_OWVAR 40
81203: PUSH
81204: LD_INT 59
81206: ST_TO_ADDR
// result := CreateVehicle ;
81207: LD_ADDR_VAR 0 5
81211: PUSH
81212: CALL_OW 45
81216: ST_TO_ADDR
// SetDir ( result , d ) ;
81217: LD_VAR 0 5
81221: PPUSH
81222: LD_VAR 0 4
81226: PPUSH
81227: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81231: LD_VAR 0 5
81235: PPUSH
81236: LD_VAR 0 2
81240: PPUSH
81241: LD_VAR 0 3
81245: PPUSH
81246: LD_INT 0
81248: PPUSH
81249: CALL_OW 48
// end ;
81253: LD_VAR 0 5
81257: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81258: LD_INT 0
81260: PPUSH
81261: PPUSH
81262: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81263: LD_ADDR_VAR 0 2
81267: PUSH
81268: LD_INT 0
81270: PUSH
81271: LD_INT 0
81273: PUSH
81274: LD_INT 0
81276: PUSH
81277: LD_INT 0
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: LIST
81284: LIST
81285: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81286: LD_VAR 0 1
81290: NOT
81291: IFTRUE 81324
81293: PUSH
81294: LD_VAR 0 1
81298: PPUSH
81299: CALL_OW 264
81303: PUSH
81304: LD_INT 12
81306: PUSH
81307: LD_INT 51
81309: PUSH
81310: LD_INT 32
81312: PUSH
81313: LD_INT 89
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: LIST
81320: LIST
81321: IN
81322: NOT
81323: OR
81324: IFFALSE 81328
// exit ;
81326: GO 81426
// for i := 1 to 3 do
81328: LD_ADDR_VAR 0 3
81332: PUSH
81333: DOUBLE
81334: LD_INT 1
81336: DEC
81337: ST_TO_ADDR
81338: LD_INT 3
81340: PUSH
81341: FOR_TO
81342: IFFALSE 81424
// begin tmp := GetCargo ( cargo , i ) ;
81344: LD_ADDR_VAR 0 4
81348: PUSH
81349: LD_VAR 0 1
81353: PPUSH
81354: LD_VAR 0 3
81358: PPUSH
81359: CALL_OW 289
81363: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81364: LD_ADDR_VAR 0 2
81368: PUSH
81369: LD_VAR 0 2
81373: PPUSH
81374: LD_VAR 0 3
81378: PPUSH
81379: LD_VAR 0 4
81383: PPUSH
81384: CALL_OW 1
81388: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81389: LD_ADDR_VAR 0 2
81393: PUSH
81394: LD_VAR 0 2
81398: PPUSH
81399: LD_INT 4
81401: PPUSH
81402: LD_VAR 0 2
81406: PUSH
81407: LD_INT 4
81409: ARRAY
81410: PUSH
81411: LD_VAR 0 4
81415: PLUS
81416: PPUSH
81417: CALL_OW 1
81421: ST_TO_ADDR
// end ;
81422: GO 81341
81424: POP
81425: POP
// end ;
81426: LD_VAR 0 2
81430: RET
// export function Length ( array ) ; begin
81431: LD_INT 0
81433: PPUSH
// result := array + 0 ;
81434: LD_ADDR_VAR 0 2
81438: PUSH
81439: LD_VAR 0 1
81443: PUSH
81444: LD_INT 0
81446: PLUS
81447: ST_TO_ADDR
// end ;
81448: LD_VAR 0 2
81452: RET
// export function PrepareArray ( array ) ; begin
81453: LD_INT 0
81455: PPUSH
// result := array diff 0 ;
81456: LD_ADDR_VAR 0 2
81460: PUSH
81461: LD_VAR 0 1
81465: PUSH
81466: LD_INT 0
81468: DIFF
81469: ST_TO_ADDR
// if not result [ 1 ] then
81470: LD_VAR 0 2
81474: PUSH
81475: LD_INT 1
81477: ARRAY
81478: NOT
81479: IFFALSE 81499
// result := Delete ( result , 1 ) ;
81481: LD_ADDR_VAR 0 2
81485: PUSH
81486: LD_VAR 0 2
81490: PPUSH
81491: LD_INT 1
81493: PPUSH
81494: CALL_OW 3
81498: ST_TO_ADDR
// end ;
81499: LD_VAR 0 2
81503: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81504: LD_INT 0
81506: PPUSH
81507: PPUSH
81508: PPUSH
81509: PPUSH
// sibRocketRange := 25 ;
81510: LD_ADDR_VAR 0 6
81514: PUSH
81515: LD_INT 25
81517: ST_TO_ADDR
// result := false ;
81518: LD_ADDR_VAR 0 4
81522: PUSH
81523: LD_INT 0
81525: ST_TO_ADDR
// for i := 0 to 5 do
81526: LD_ADDR_VAR 0 5
81530: PUSH
81531: DOUBLE
81532: LD_INT 0
81534: DEC
81535: ST_TO_ADDR
81536: LD_INT 5
81538: PUSH
81539: FOR_TO
81540: IFFALSE 81607
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81542: LD_VAR 0 1
81546: PPUSH
81547: LD_VAR 0 5
81551: PPUSH
81552: LD_VAR 0 6
81556: PPUSH
81557: CALL_OW 272
81561: PPUSH
81562: LD_VAR 0 2
81566: PPUSH
81567: LD_VAR 0 5
81571: PPUSH
81572: LD_VAR 0 6
81576: PPUSH
81577: CALL_OW 273
81581: PPUSH
81582: LD_VAR 0 3
81586: PPUSH
81587: CALL_OW 309
81591: IFFALSE 81605
// begin result := true ;
81593: LD_ADDR_VAR 0 4
81597: PUSH
81598: LD_INT 1
81600: ST_TO_ADDR
// exit ;
81601: POP
81602: POP
81603: GO 81609
// end ;
81605: GO 81539
81607: POP
81608: POP
// end ;
81609: LD_VAR 0 4
81613: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
81614: LD_INT 0
81616: PPUSH
81617: PPUSH
81618: PPUSH
// if btype = b_depot then
81619: LD_VAR 0 2
81623: PUSH
81624: LD_INT 0
81626: EQUAL
81627: IFFALSE 81639
// begin result := true ;
81629: LD_ADDR_VAR 0 3
81633: PUSH
81634: LD_INT 1
81636: ST_TO_ADDR
// exit ;
81637: GO 81759
// end ; pom := GetBase ( depot ) ;
81639: LD_ADDR_VAR 0 4
81643: PUSH
81644: LD_VAR 0 1
81648: PPUSH
81649: CALL_OW 274
81653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
81654: LD_ADDR_VAR 0 5
81658: PUSH
81659: LD_VAR 0 2
81663: PPUSH
81664: LD_VAR 0 1
81668: PPUSH
81669: CALL_OW 248
81673: PPUSH
81674: CALL_OW 450
81678: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
81679: LD_ADDR_VAR 0 3
81683: PUSH
81684: LD_VAR 0 4
81688: PPUSH
81689: LD_INT 1
81691: PPUSH
81692: CALL_OW 275
81696: PUSH
81697: LD_VAR 0 5
81701: PUSH
81702: LD_INT 1
81704: ARRAY
81705: GREATEREQUAL
81706: IFFALSE 81732
81708: PUSH
81709: LD_VAR 0 4
81713: PPUSH
81714: LD_INT 2
81716: PPUSH
81717: CALL_OW 275
81721: PUSH
81722: LD_VAR 0 5
81726: PUSH
81727: LD_INT 2
81729: ARRAY
81730: GREATEREQUAL
81731: AND
81732: IFFALSE 81758
81734: PUSH
81735: LD_VAR 0 4
81739: PPUSH
81740: LD_INT 3
81742: PPUSH
81743: CALL_OW 275
81747: PUSH
81748: LD_VAR 0 5
81752: PUSH
81753: LD_INT 3
81755: ARRAY
81756: GREATEREQUAL
81757: AND
81758: ST_TO_ADDR
// end ;
81759: LD_VAR 0 3
81763: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81764: LD_INT 0
81766: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81767: LD_VAR 0 1
81771: PPUSH
81772: LD_VAR 0 2
81776: PPUSH
81777: LD_INT 0
81779: PPUSH
81780: LD_INT 0
81782: PPUSH
81783: LD_INT 1
81785: PPUSH
81786: LD_INT 0
81788: PPUSH
81789: CALL_OW 587
// end ;
81793: LD_VAR 0 3
81797: RET
// export function CenterOnNow ( unit ) ; begin
81798: LD_INT 0
81800: PPUSH
// result := IsInUnit ( unit ) ;
81801: LD_ADDR_VAR 0 2
81805: PUSH
81806: LD_VAR 0 1
81810: PPUSH
81811: CALL_OW 310
81815: ST_TO_ADDR
// if not result then
81816: LD_VAR 0 2
81820: NOT
81821: IFFALSE 81833
// result := unit ;
81823: LD_ADDR_VAR 0 2
81827: PUSH
81828: LD_VAR 0 1
81832: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81833: LD_VAR 0 1
81837: PPUSH
81838: CALL_OW 87
// end ;
81842: LD_VAR 0 2
81846: RET
// export function ComMoveHex ( unit , hex ) ; begin
81847: LD_INT 0
81849: PPUSH
// if not hex then
81850: LD_VAR 0 2
81854: NOT
81855: IFFALSE 81859
// exit ;
81857: GO 81912
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81859: LD_VAR 0 2
81863: PUSH
81864: LD_INT 1
81866: ARRAY
81867: PPUSH
81868: LD_VAR 0 2
81872: PUSH
81873: LD_INT 2
81875: ARRAY
81876: PPUSH
81877: CALL_OW 428
81881: IFFALSE 81885
// exit ;
81883: GO 81912
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81885: LD_VAR 0 1
81889: PPUSH
81890: LD_VAR 0 2
81894: PUSH
81895: LD_INT 1
81897: ARRAY
81898: PPUSH
81899: LD_VAR 0 2
81903: PUSH
81904: LD_INT 2
81906: ARRAY
81907: PPUSH
81908: CALL_OW 111
// end ;
81912: LD_VAR 0 3
81916: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81917: LD_INT 0
81919: PPUSH
81920: PPUSH
81921: PPUSH
// if not unit or not enemy then
81922: LD_VAR 0 1
81926: NOT
81927: IFTRUE 81936
81929: PUSH
81930: LD_VAR 0 2
81934: NOT
81935: OR
81936: IFFALSE 81940
// exit ;
81938: GO 82066
// x := GetX ( enemy ) ;
81940: LD_ADDR_VAR 0 4
81944: PUSH
81945: LD_VAR 0 2
81949: PPUSH
81950: CALL_OW 250
81954: ST_TO_ADDR
// y := GetY ( enemy ) ;
81955: LD_ADDR_VAR 0 5
81959: PUSH
81960: LD_VAR 0 2
81964: PPUSH
81965: CALL_OW 251
81969: ST_TO_ADDR
// if ValidHex ( x , y ) then
81970: LD_VAR 0 4
81974: PPUSH
81975: LD_VAR 0 5
81979: PPUSH
81980: CALL_OW 488
81984: IFFALSE 82066
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81986: LD_VAR 0 2
81990: PPUSH
81991: CALL_OW 247
81995: PUSH
81996: LD_INT 3
81998: PUSH
81999: LD_INT 2
82001: PUSH
82002: EMPTY
82003: LIST
82004: LIST
82005: IN
82006: IFTRUE 82029
82008: PUSH
82009: LD_VAR 0 1
82013: PPUSH
82014: CALL_OW 255
82018: PPUSH
82019: LD_VAR 0 2
82023: PPUSH
82024: CALL_OW 292
82028: OR
82029: IFFALSE 82047
// ComAttackUnit ( unit , enemy ) else
82031: LD_VAR 0 1
82035: PPUSH
82036: LD_VAR 0 2
82040: PPUSH
82041: CALL_OW 115
82045: GO 82066
// ComAgressiveMove ( unit , x , y ) ;
82047: LD_VAR 0 1
82051: PPUSH
82052: LD_VAR 0 4
82056: PPUSH
82057: LD_VAR 0 5
82061: PPUSH
82062: CALL_OW 114
// end ;
82066: LD_VAR 0 3
82070: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82071: LD_INT 0
82073: PPUSH
82074: PPUSH
82075: PPUSH
// list := AreaToList ( area , 0 ) ;
82076: LD_ADDR_VAR 0 5
82080: PUSH
82081: LD_VAR 0 1
82085: PPUSH
82086: LD_INT 0
82088: PPUSH
82089: CALL_OW 517
82093: ST_TO_ADDR
// if not list then
82094: LD_VAR 0 5
82098: NOT
82099: IFFALSE 82103
// exit ;
82101: GO 82233
// if all then
82103: LD_VAR 0 2
82107: IFFALSE 82195
// begin for i := 1 to list [ 1 ] do
82109: LD_ADDR_VAR 0 4
82113: PUSH
82114: DOUBLE
82115: LD_INT 1
82117: DEC
82118: ST_TO_ADDR
82119: LD_VAR 0 5
82123: PUSH
82124: LD_INT 1
82126: ARRAY
82127: PUSH
82128: FOR_TO
82129: IFFALSE 82191
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82131: LD_ADDR_VAR 0 3
82135: PUSH
82136: LD_VAR 0 3
82140: PPUSH
82141: LD_VAR 0 3
82145: PUSH
82146: LD_INT 1
82148: PLUS
82149: PPUSH
82150: LD_VAR 0 5
82154: PUSH
82155: LD_INT 1
82157: ARRAY
82158: PUSH
82159: LD_VAR 0 4
82163: ARRAY
82164: PUSH
82165: LD_VAR 0 5
82169: PUSH
82170: LD_INT 2
82172: ARRAY
82173: PUSH
82174: LD_VAR 0 4
82178: ARRAY
82179: PUSH
82180: EMPTY
82181: LIST
82182: LIST
82183: PPUSH
82184: CALL_OW 1
82188: ST_TO_ADDR
82189: GO 82128
82191: POP
82192: POP
// exit ;
82193: GO 82233
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82195: LD_ADDR_VAR 0 3
82199: PUSH
82200: LD_VAR 0 5
82204: PUSH
82205: LD_INT 1
82207: ARRAY
82208: PUSH
82209: LD_INT 1
82211: ARRAY
82212: PUSH
82213: LD_VAR 0 5
82217: PUSH
82218: LD_INT 2
82220: ARRAY
82221: PUSH
82222: LD_INT 1
82224: ARRAY
82225: PUSH
82226: EMPTY
82227: LIST
82228: LIST
82229: PUSH
82230: EMPTY
82231: LIST
82232: ST_TO_ADDR
// end ;
82233: LD_VAR 0 3
82237: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82238: LD_INT 0
82240: PPUSH
82241: PPUSH
// list := AreaToList ( area , 0 ) ;
82242: LD_ADDR_VAR 0 4
82246: PUSH
82247: LD_VAR 0 1
82251: PPUSH
82252: LD_INT 0
82254: PPUSH
82255: CALL_OW 517
82259: ST_TO_ADDR
// if not list then
82260: LD_VAR 0 4
82264: NOT
82265: IFFALSE 82269
// exit ;
82267: GO 82310
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82269: LD_ADDR_VAR 0 3
82273: PUSH
82274: LD_VAR 0 4
82278: PUSH
82279: LD_INT 1
82281: ARRAY
82282: PUSH
82283: LD_INT 1
82285: ARRAY
82286: PUSH
82287: LD_VAR 0 4
82291: PUSH
82292: LD_INT 2
82294: ARRAY
82295: PUSH
82296: LD_INT 1
82298: ARRAY
82299: PUSH
82300: LD_VAR 0 2
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: LIST
82309: ST_TO_ADDR
// end ;
82310: LD_VAR 0 3
82314: RET
// export function First ( array ) ; begin
82315: LD_INT 0
82317: PPUSH
// if not array then
82318: LD_VAR 0 1
82322: NOT
82323: IFFALSE 82327
// exit ;
82325: GO 82341
// result := array [ 1 ] ;
82327: LD_ADDR_VAR 0 2
82331: PUSH
82332: LD_VAR 0 1
82336: PUSH
82337: LD_INT 1
82339: ARRAY
82340: ST_TO_ADDR
// end ;
82341: LD_VAR 0 2
82345: RET
// export function Last ( array ) ; begin
82346: LD_INT 0
82348: PPUSH
// if not array then
82349: LD_VAR 0 1
82353: NOT
82354: IFFALSE 82358
// exit ;
82356: GO 82374
// result := array [ array ] ;
82358: LD_ADDR_VAR 0 2
82362: PUSH
82363: LD_VAR 0 1
82367: PUSH
82368: LD_VAR 0 1
82372: ARRAY
82373: ST_TO_ADDR
// end ;
82374: LD_VAR 0 2
82378: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82379: LD_INT 0
82381: PPUSH
82382: PPUSH
// result := [ ] ;
82383: LD_ADDR_VAR 0 5
82387: PUSH
82388: EMPTY
82389: ST_TO_ADDR
// if not array then
82390: LD_VAR 0 1
82394: NOT
82395: IFFALSE 82399
// exit ;
82397: GO 82511
// for i := 1 to array do
82399: LD_ADDR_VAR 0 6
82403: PUSH
82404: DOUBLE
82405: LD_INT 1
82407: DEC
82408: ST_TO_ADDR
82409: LD_VAR 0 1
82413: PUSH
82414: FOR_TO
82415: IFFALSE 82509
// if array [ i ] [ index ] = value then
82417: LD_VAR 0 1
82421: PUSH
82422: LD_VAR 0 6
82426: ARRAY
82427: PUSH
82428: LD_VAR 0 2
82432: ARRAY
82433: PUSH
82434: LD_VAR 0 3
82438: EQUAL
82439: IFFALSE 82507
// begin if indexColumn then
82441: LD_VAR 0 4
82445: IFFALSE 82481
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82447: LD_ADDR_VAR 0 5
82451: PUSH
82452: LD_VAR 0 5
82456: PPUSH
82457: LD_VAR 0 1
82461: PUSH
82462: LD_VAR 0 6
82466: ARRAY
82467: PUSH
82468: LD_VAR 0 4
82472: ARRAY
82473: PPUSH
82474: CALL 77519 0 2
82478: ST_TO_ADDR
82479: GO 82507
// result := Join ( result , array [ i ] ) ;
82481: LD_ADDR_VAR 0 5
82485: PUSH
82486: LD_VAR 0 5
82490: PPUSH
82491: LD_VAR 0 1
82495: PUSH
82496: LD_VAR 0 6
82500: ARRAY
82501: PPUSH
82502: CALL 77519 0 2
82506: ST_TO_ADDR
// end ;
82507: GO 82414
82509: POP
82510: POP
// end ;
82511: LD_VAR 0 5
82515: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
82516: LD_INT 0
82518: PPUSH
// if not vehicles or not parkingPoint then
82519: LD_VAR 0 1
82523: NOT
82524: IFTRUE 82533
82526: PUSH
82527: LD_VAR 0 2
82531: NOT
82532: OR
82533: IFFALSE 82537
// exit ;
82535: GO 82635
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
82537: LD_ADDR_VAR 0 1
82541: PUSH
82542: LD_VAR 0 1
82546: PPUSH
82547: LD_INT 50
82549: PUSH
82550: EMPTY
82551: LIST
82552: PUSH
82553: LD_INT 3
82555: PUSH
82556: LD_INT 92
82558: PUSH
82559: LD_VAR 0 2
82563: PUSH
82564: LD_INT 1
82566: ARRAY
82567: PUSH
82568: LD_VAR 0 2
82572: PUSH
82573: LD_INT 2
82575: ARRAY
82576: PUSH
82577: LD_INT 8
82579: PUSH
82580: EMPTY
82581: LIST
82582: LIST
82583: LIST
82584: LIST
82585: PUSH
82586: EMPTY
82587: LIST
82588: LIST
82589: PUSH
82590: EMPTY
82591: LIST
82592: LIST
82593: PPUSH
82594: CALL_OW 72
82598: ST_TO_ADDR
// if not vehicles then
82599: LD_VAR 0 1
82603: NOT
82604: IFFALSE 82608
// exit ;
82606: GO 82635
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
82608: LD_VAR 0 1
82612: PPUSH
82613: LD_VAR 0 2
82617: PUSH
82618: LD_INT 1
82620: ARRAY
82621: PPUSH
82622: LD_VAR 0 2
82626: PUSH
82627: LD_INT 2
82629: ARRAY
82630: PPUSH
82631: CALL_OW 111
// end ;
82635: LD_VAR 0 3
82639: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
82640: LD_INT 0
82642: PPUSH
82643: PPUSH
82644: PPUSH
// if not side or not area then
82645: LD_VAR 0 1
82649: NOT
82650: IFTRUE 82659
82652: PUSH
82653: LD_VAR 0 2
82657: NOT
82658: OR
82659: IFFALSE 82663
// exit ;
82661: GO 82782
// tmp := AreaToList ( area , 0 ) ;
82663: LD_ADDR_VAR 0 5
82667: PUSH
82668: LD_VAR 0 2
82672: PPUSH
82673: LD_INT 0
82675: PPUSH
82676: CALL_OW 517
82680: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
82681: LD_ADDR_VAR 0 4
82685: PUSH
82686: DOUBLE
82687: LD_INT 1
82689: DEC
82690: ST_TO_ADDR
82691: LD_VAR 0 5
82695: PUSH
82696: LD_INT 1
82698: ARRAY
82699: PUSH
82700: FOR_TO
82701: IFFALSE 82780
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
82703: LD_VAR 0 5
82707: PUSH
82708: LD_INT 1
82710: ARRAY
82711: PUSH
82712: LD_VAR 0 4
82716: ARRAY
82717: PPUSH
82718: LD_VAR 0 5
82722: PUSH
82723: LD_INT 2
82725: ARRAY
82726: PUSH
82727: LD_VAR 0 4
82731: ARRAY
82732: PPUSH
82733: CALL_OW 351
82737: IFFALSE 82778
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
82739: LD_VAR 0 5
82743: PUSH
82744: LD_INT 1
82746: ARRAY
82747: PUSH
82748: LD_VAR 0 4
82752: ARRAY
82753: PPUSH
82754: LD_VAR 0 5
82758: PUSH
82759: LD_INT 2
82761: ARRAY
82762: PUSH
82763: LD_VAR 0 4
82767: ARRAY
82768: PPUSH
82769: LD_VAR 0 1
82773: PPUSH
82774: CALL_OW 244
// end ;
82778: GO 82700
82780: POP
82781: POP
// end ;
82782: LD_VAR 0 3
82786: RET
// export function UniqueArray ( array ) ; var i ; begin
82787: LD_INT 0
82789: PPUSH
82790: PPUSH
// result := [ ] ;
82791: LD_ADDR_VAR 0 2
82795: PUSH
82796: EMPTY
82797: ST_TO_ADDR
// if not array then
82798: LD_VAR 0 1
82802: NOT
82803: IFFALSE 82807
// exit ;
82805: GO 82868
// for i := 1 to array do
82807: LD_ADDR_VAR 0 3
82811: PUSH
82812: DOUBLE
82813: LD_INT 1
82815: DEC
82816: ST_TO_ADDR
82817: LD_VAR 0 1
82821: PUSH
82822: FOR_TO
82823: IFFALSE 82866
// if not array [ i ] in result then
82825: LD_VAR 0 1
82829: PUSH
82830: LD_VAR 0 3
82834: ARRAY
82835: PUSH
82836: LD_VAR 0 2
82840: IN
82841: NOT
82842: IFFALSE 82864
// result := Join ( result , i ) ;
82844: LD_ADDR_VAR 0 2
82848: PUSH
82849: LD_VAR 0 2
82853: PPUSH
82854: LD_VAR 0 3
82858: PPUSH
82859: CALL 77519 0 2
82863: ST_TO_ADDR
82864: GO 82822
82866: POP
82867: POP
// end ; end_of_file
82868: LD_VAR 0 2
82872: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82873: LD_VAR 0 1
82877: PUSH
82878: LD_INT 200
82880: DOUBLE
82881: GREATEREQUAL
82882: IFFALSE 82890
82884: LD_INT 299
82886: DOUBLE
82887: LESSEQUAL
82888: IFTRUE 82892
82890: GO 82924
82892: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82893: LD_VAR 0 1
82897: PPUSH
82898: LD_VAR 0 2
82902: PPUSH
82903: LD_VAR 0 3
82907: PPUSH
82908: LD_VAR 0 4
82912: PPUSH
82913: LD_VAR 0 5
82917: PPUSH
82918: CALL 33829 0 5
82922: GO 83001
82924: LD_INT 300
82926: DOUBLE
82927: GREATEREQUAL
82928: IFFALSE 82936
82930: LD_INT 399
82932: DOUBLE
82933: LESSEQUAL
82934: IFTRUE 82938
82936: GO 83000
82938: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82939: LD_VAR 0 1
82943: PPUSH
82944: LD_VAR 0 2
82948: PPUSH
82949: LD_VAR 0 3
82953: PPUSH
82954: LD_VAR 0 4
82958: PPUSH
82959: LD_VAR 0 5
82963: PPUSH
82964: LD_VAR 0 6
82968: PPUSH
82969: LD_VAR 0 7
82973: PPUSH
82974: LD_VAR 0 8
82978: PPUSH
82979: LD_VAR 0 9
82983: PPUSH
82984: LD_VAR 0 10
82988: PPUSH
82989: LD_VAR 0 11
82993: PPUSH
82994: CALL 29713 0 11
82998: GO 83001
83000: POP
// end ;
83001: PPOPN 11
83003: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83004: LD_VAR 0 1
83008: PPUSH
83009: LD_VAR 0 2
83013: PPUSH
83014: LD_VAR 0 3
83018: PPUSH
83019: LD_VAR 0 4
83023: PPUSH
83024: LD_VAR 0 5
83028: PPUSH
83029: CALL 33210 0 5
// end ; end_of_file
83033: PPOPN 5
83035: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83036: LD_VAR 0 1
83040: PPUSH
83041: LD_VAR 0 2
83045: PPUSH
83046: LD_VAR 0 3
83050: PPUSH
83051: LD_VAR 0 4
83055: PPUSH
83056: LD_VAR 0 5
83060: PPUSH
83061: LD_VAR 0 6
83065: PPUSH
83066: CALL 17253 0 6
// end ;
83070: PPOPN 6
83072: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83073: LD_INT 0
83075: PPUSH
// begin if not units then
83076: LD_VAR 0 1
83080: NOT
83081: IFFALSE 83085
// exit ;
83083: GO 83119
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
83085: LD_VAR 0 1
83089: PPUSH
83090: LD_VAR 0 2
83094: PPUSH
83095: LD_VAR 0 3
83099: PPUSH
83100: LD_VAR 0 4
83104: PPUSH
83105: LD_VAR 0 5
83109: PPUSH
83110: LD_VAR 0 6
83114: PPUSH
83115: CALL 39336 0 6
// end ;
83119: PPOPN 7
83121: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83122: CALL 17140 0 0
// end ;
83126: PPOPN 1
83128: END
