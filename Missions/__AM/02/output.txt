// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10287 0 0
// PrepareRussianCommander ;
 172: CALL 11743 0 0
// PrepareSouthBase ;
 176: CALL 11826 0 0
// PrepareNorthBase ;
 180: CALL 12165 0 0
// PrepareOtherRussians ;
 184: CALL 12531 0 0
// PrepareHeroes ;
 188: CALL 10602 0 0
// PrepareLisSquad ;
 192: CALL 10930 0 0
// PrepareOtherAmericans ;
 196: CALL 11275 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11433 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6239
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5090: LD_INT 22
5092: PPUSH
5093: LD_INT 22
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: LD_INT 2
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 70
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 1
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: NOT
5151: AND
5152: IFFALSE 5083
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5154: LD_ADDR_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 50
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: LD_INT 56
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 5
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: DIFF
5227: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5228: LD_INT 35
5230: PPUSH
5231: CALL_OW 67
// until temp > 0 ;
5235: LD_VAR 0 1
5239: PUSH
5240: LD_INT 0
5242: GREATER
5243: IFFALSE 5154
// wait ( 0 0$5 ) ;
5245: LD_INT 175
5247: PPUSH
5248: CALL_OW 67
// PrepareRussianHeroes ;
5252: CALL 11590 0 0
// InGameOn ;
5256: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5260: LD_EXP 8
5264: PPUSH
5265: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5269: LD_EXP 1
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 8
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5296: LD_EXP 8
5300: PPUSH
5301: LD_VAR 0 1
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: CALL_OW 119
// Wait ( 0 0$02 ) ;
5314: LD_INT 70
5316: PPUSH
5317: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5321: LD_EXP 8
5325: PPUSH
5326: LD_STRING D4-Mikh-1
5328: PPUSH
5329: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 258
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5368
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5352: LD_VAR 0 1
5356: PUSH
5357: LD_INT 1
5359: ARRAY
5360: PPUSH
5361: LD_STRING D4-Sol1-1
5363: PPUSH
5364: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: PPUSH
5377: CALL_OW 258
5381: PUSH
5382: LD_INT 2
5384: EQUAL
5385: IFFALSE 5403
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_STRING D4-FSol1-1
5398: PPUSH
5399: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5403: LD_EXP 8
5407: PPUSH
5408: LD_STRING D4-Mikh-2
5410: PPUSH
5411: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5415: LD_VAR 0 1
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 258
5428: PUSH
5429: LD_INT 1
5431: EQUAL
5432: IFFALSE 5450
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5434: LD_VAR 0 1
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING D4-Sol1-2
5445: PPUSH
5446: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: CALL_OW 258
5463: PUSH
5464: LD_INT 2
5466: EQUAL
5467: IFFALSE 5485
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_STRING D4-FSol1-2
5480: PPUSH
5481: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5485: LD_EXP 8
5489: PPUSH
5490: LD_STRING D4-Mikh-3
5492: PPUSH
5493: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: CALL_OW 258
5510: PUSH
5511: LD_INT 1
5513: EQUAL
5514: IFFALSE 5532
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5516: LD_VAR 0 1
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_STRING D4-Sol1-3
5527: PPUSH
5528: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: CALL_OW 258
5545: PUSH
5546: LD_INT 2
5548: EQUAL
5549: IFFALSE 5567
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5551: LD_VAR 0 1
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_STRING D4-FSol1-3
5562: PPUSH
5563: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5567: LD_EXP 8
5571: PPUSH
5572: LD_STRING D4-Mikh-4
5574: PPUSH
5575: CALL_OW 88
// case query ( Qs1 ) of 1 :
5579: LD_STRING Qs1
5581: PPUSH
5582: CALL_OW 97
5586: PUSH
5587: LD_INT 1
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5630
5595: POP
// begin InGameOff ;
5596: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 6
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5616: LD_EXP 8
5620: PPUSH
5621: LD_INT 17
5623: PPUSH
5624: CALL_OW 113
// end ; 2 :
5628: GO 6223
5630: LD_INT 2
5632: DOUBLE
5633: EQUAL
5634: IFTRUE 5638
5636: GO 6188
5638: POP
// begin repeat wait ( 0 0$1 ) ;
5639: LD_INT 35
5641: PPUSH
5642: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5646: LD_VAR 0 1
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5659: LD_VAR 0 1
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5677: LD_EXP 8
5681: PPUSH
5682: LD_EXP 1
5686: PPUSH
5687: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_EXP 8
5700: PPUSH
5701: CALL_OW 296
5705: PUSH
5706: LD_INT 5
5708: LESS
5709: IFFALSE 5639
// ComTurnUnit ( Mikhail , JMM ) ;
5711: LD_EXP 8
5715: PPUSH
5716: LD_EXP 1
5720: PPUSH
5721: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D4b-JMM-1
5732: PPUSH
5733: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5737: LD_EXP 8
5741: PPUSH
5742: LD_STRING D4b-Mikh-1
5744: PPUSH
5745: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_STRING D4b-JMM-2
5756: PPUSH
5757: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5761: LD_EXP 8
5765: PPUSH
5766: LD_STRING D4b-Mikh-2
5768: PPUSH
5769: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5773: LD_EXP 1
5777: PPUSH
5778: LD_STRING D4b-JMM-3
5780: PPUSH
5781: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5785: LD_EXP 8
5789: PPUSH
5790: LD_STRING D4b-Mikh-3
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4b-JMM-4
5804: PPUSH
5805: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5809: LD_EXP 8
5813: PPUSH
5814: LD_STRING D4b-Mikh-4
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4b-JMM-5
5828: PPUSH
5829: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5833: LD_EXP 8
5837: PPUSH
5838: LD_STRING D4b-Mikh-5
5840: PPUSH
5841: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4b-JMM-6
5852: PPUSH
5853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5857: LD_EXP 8
5861: PPUSH
5862: LD_STRING D4b-Mikh-6
5864: PPUSH
5865: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5869: LD_EXP 1
5873: PPUSH
5874: LD_STRING D4b-JMM-7
5876: PPUSH
5877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5881: LD_EXP 8
5885: PPUSH
5886: LD_STRING D4b-Mikh-7
5888: PPUSH
5889: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PPUSH
5902: CALL_OW 258
5906: PUSH
5907: LD_INT 1
5909: EQUAL
5910: IFFALSE 5928
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 1
5919: ARRAY
5920: PPUSH
5921: LD_STRING D4b-Sol1-7
5923: PPUSH
5924: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: CALL_OW 258
5941: PUSH
5942: LD_INT 2
5944: EQUAL
5945: IFFALSE 5963
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5947: LD_VAR 0 1
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: PPUSH
5956: LD_STRING D4b-FSol1-7
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-8
5970: PPUSH
5971: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5975: LD_VAR 0 1
5979: PUSH
5980: LD_INT 1
5982: ARRAY
5983: PPUSH
5984: CALL_OW 258
5988: PUSH
5989: LD_INT 1
5991: EQUAL
5992: IFFALSE 6010
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5994: LD_VAR 0 1
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_STRING D4b-Sol1-8
6005: PPUSH
6006: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6010: LD_VAR 0 1
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: CALL_OW 258
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: IFFALSE 6045
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6029: LD_VAR 0 1
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_STRING D4b-FSol1-8
6040: PPUSH
6041: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6045: LD_EXP 1
6049: PPUSH
6050: LD_STRING D4b-JMM-9
6052: PPUSH
6053: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6057: LD_EXP 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 22
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: PUSH
6092: FOR_IN
6093: IFFALSE 6106
// ComFree ( i ) ;
6095: LD_VAR 0 3
6099: PPUSH
6100: CALL_OW 139
6104: GO 6092
6106: POP
6107: POP
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6115: LD_EXP 8
6119: PPUSH
6120: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6149: LD_EXP 8
6153: PPUSH
6154: CALL_OW 310
6158: IFFALSE 6108
// mikhailDepot = IsInUnit ( Mikhail ) ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: LD_EXP 8
6169: PPUSH
6170: CALL_OW 310
6174: ST_TO_ADDR
// InGameOff ;
6175: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6179: LD_STRING M3
6181: PPUSH
6182: CALL_OW 337
// end ; 3 :
6186: GO 6223
6188: LD_INT 3
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6222
6196: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6197: LD_EXP 8
6201: PPUSH
6202: LD_INT 17
6204: PPUSH
6205: CALL_OW 113
// wait ( 0 0$3 ) ;
6209: LD_INT 105
6211: PPUSH
6212: CALL_OW 67
// InGameOff ;
6216: CALL_OW 9
// end ; end ;
6220: GO 6223
6222: POP
// PrepareTigers ;
6223: CALL 14440 0 0
// RussianTrap ;
6227: CALL 9986 0 0
// tigersRespawn = 1 ;
6231: LD_ADDR_EXP 30
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// end ;
6239: PPOPN 3
6241: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6242: LD_INT 1
6244: PPUSH
6245: CALL_OW 255
6249: PUSH
6250: LD_INT 1
6252: EQUAL
6253: PUSH
6254: LD_INT 10
6256: PPUSH
6257: CALL_OW 255
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: PUSH
6267: LD_INT 1
6269: PPUSH
6270: CALL_OW 274
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 275
6282: PUSH
6283: LD_INT 100
6285: GREATEREQUAL
6286: AND
6287: IFFALSE 6436
6289: GO 6291
6291: DISABLE
6292: LD_INT 0
6294: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6295: LD_INT 2100
6297: PPUSH
6298: LD_INT 4200
6300: PPUSH
6301: CALL_OW 12
6305: PUSH
6306: LD_INT 1050
6308: PLUS
6309: PPUSH
6310: CALL_OW 67
// PrepareCargoBays ;
6314: CALL 12723 0 0
// cargoRespawn = 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_EXP 15
6335: PUSH
6336: LD_EXP 16
6340: PUSH
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 18
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6357: LD_VAR 0 1
6361: PPUSH
6362: LD_INT 17
6364: PPUSH
6365: LD_INT 10
6367: PPUSH
6368: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_INT 36
6379: PPUSH
6380: LD_INT 13
6382: PPUSH
6383: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_INT 40
6394: PPUSH
6395: LD_INT 20
6397: PPUSH
6398: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_INT 53
6409: PPUSH
6410: LD_INT 16
6412: PPUSH
6413: CALL_OW 171
// wait ( 0 0$5 ) ;
6417: LD_INT 175
6419: PPUSH
6420: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING D5-Rus2-1
6431: PPUSH
6432: CALL_OW 88
// end ;
6436: PPOPN 1
6438: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6439: LD_EXP 28
6443: PUSH
6444: LD_INT 1
6446: EQUAL
6447: IFFALSE 6602
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_INT 22
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 21
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 34
6482: PUSH
6483: LD_INT 51
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6500: LD_INT 105
6502: PPUSH
6503: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_INT 3
6514: PUSH
6515: LD_INT 60
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: PUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 24
6540: PUSH
6541: LD_INT 980
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 72
6556: OR
6557: IFFALSE 6500
// ComMoveXY ( cargos , 7 , 9 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 7
6566: PPUSH
6567: LD_INT 9
6569: PPUSH
6570: CALL_OW 111
// cargoSee = 1 ;
6574: LD_ADDR_EXP 29
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// cargoEscape = 1 ;
6582: LD_ADDR_EXP 20
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING D5-Rus2-1a
6597: PPUSH
6598: CALL_OW 88
// end ;
6602: PPOPN 1
6604: END
// every 0 0$1 trigger cargoEscape > 0 do
6605: LD_EXP 20
6609: PUSH
6610: LD_INT 0
6612: GREATER
6613: IFFALSE 6760
6615: GO 6617
6617: DISABLE
// begin enable ;
6618: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6619: LD_EXP 15
6623: PUSH
6624: LD_EXP 16
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PPUSH
6633: LD_INT 13
6635: PPUSH
6636: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6640: LD_EXP 15
6644: PPUSH
6645: LD_INT 13
6647: PPUSH
6648: CALL_OW 308
6652: PUSH
6653: LD_EXP 17
6657: PPUSH
6658: LD_INT 13
6660: PPUSH
6661: CALL_OW 308
6665: OR
6666: IFFALSE 6700
// begin RemoveUnit ( cargo1 ) ;
6668: LD_EXP 15
6672: PPUSH
6673: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6677: LD_EXP 17
6681: PPUSH
6682: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6686: LD_ADDR_EXP 20
6690: PUSH
6691: LD_EXP 20
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6700: LD_EXP 16
6704: PPUSH
6705: LD_INT 13
6707: PPUSH
6708: CALL_OW 308
6712: PUSH
6713: LD_EXP 18
6717: PPUSH
6718: LD_INT 13
6720: PPUSH
6721: CALL_OW 308
6725: OR
6726: IFFALSE 6760
// begin RemoveUnit ( cargo2 ) ;
6728: LD_EXP 16
6732: PPUSH
6733: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6737: LD_EXP 18
6741: PPUSH
6742: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6746: LD_ADDR_EXP 20
6750: PUSH
6751: LD_EXP 20
6755: PUSH
6756: LD_INT 1
6758: PLUS
6759: ST_TO_ADDR
// end ; end ;
6760: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6761: LD_EXP 20
6765: PUSH
6766: LD_INT 1
6768: GREATER
6769: IFFALSE 6926
6771: GO 6773
6773: DISABLE
6774: LD_INT 0
6776: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6777: LD_INT 4
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6790: LD_INT 31
6792: PPUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 324
// if IsOK ( Jerry ) then
6803: LD_EXP 7
6807: PPUSH
6808: CALL_OW 302
6812: IFFALSE 6828
// Say ( Jerry , D5a-Sol1-1 ) else
6814: LD_EXP 7
6818: PPUSH
6819: LD_STRING D5a-Sol1-1
6821: PPUSH
6822: CALL_OW 88
6826: GO 6914
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 69
6861: PUSH
6862: LD_EXP 1
6866: PUSH
6867: LD_EXP 2
6871: PUSH
6872: LD_EXP 3
6876: PUSH
6877: LD_EXP 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: DIFF
6888: ST_TO_ADDR
// if not speaker then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6898: LD_VAR 0 1
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_STRING D5a-Sol1-1
6909: PPUSH
6910: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_STRING D5a-JMM-1
6921: PPUSH
6922: CALL_OW 88
// end ;
6926: PPOPN 1
6928: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 255
6936: PUSH
6937: LD_INT 3
6939: EQUAL
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: LESS
6952: AND
6953: PUSH
6954: LD_INT 10
6956: PPUSH
6957: CALL_OW 255
6961: PUSH
6962: LD_INT 3
6964: EQUAL
6965: PUSH
6966: LD_INT 10
6968: PPUSH
6969: CALL_OW 256
6973: PUSH
6974: LD_INT 1000
6976: LESS
6977: AND
6978: OR
6979: IFFALSE 6996
6981: GO 6983
6983: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6984: LD_EXP 1
6988: PPUSH
6989: LD_STRING D8-JMM-1
6991: PPUSH
6992: CALL_OW 88
// end ;
6996: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6997: LD_EXP 8
7001: PPUSH
7002: CALL_OW 310
7006: PUSH
7007: LD_INT 1
7009: EQUAL
7010: PUSH
7011: LD_EXP 22
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: NOT
7020: AND
7021: IFFALSE 7043
7023: GO 7025
7025: DISABLE
// begin mikhailInBase = 1 ;
7026: LD_ADDR_EXP 22
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// mikhailStatus = 1 ;
7034: LD_ADDR_EXP 21
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// enable ;
7042: ENABLE
// end ;
7043: END
// export function AskMikhail ; begin
7044: LD_INT 0
7046: PPUSH
// case query ( QMikh2 ) of 1 :
7047: LD_STRING QMikh2
7049: PPUSH
7050: CALL_OW 97
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7130
7063: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 6
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7080: LD_EXP 8
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7092: LD_EXP 8
7096: PPUSH
7097: CALL_OW 122
// wait ( 0 0$1 ) ;
7101: LD_INT 35
7103: PPUSH
7104: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7108: LD_EXP 8
7112: PPUSH
7113: LD_INT 17
7115: PPUSH
7116: CALL_OW 113
// mikhailInbase = 0 ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// end ; 2 :
7128: GO 7371
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7311
7138: POP
// begin mikhailInBase = 2 ;
7139: LD_ADDR_EXP 22
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7147: LD_EXP 8
7151: PPUSH
7152: LD_INT 6
7154: PPUSH
7155: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7159: LD_EXP 8
7163: PPUSH
7164: CALL_OW 122
// wait ( 0 0$1 ) ;
7168: LD_INT 35
7170: PPUSH
7171: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7175: LD_EXP 8
7179: PPUSH
7180: LD_EXP 8
7184: PPUSH
7185: CALL_OW 250
7189: PUSH
7190: LD_INT 2
7192: PLUS
7193: PPUSH
7194: LD_EXP 8
7198: PPUSH
7199: CALL_OW 251
7203: PUSH
7204: LD_INT 2
7206: PLUS
7207: PPUSH
7208: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7212: LD_EXP 8
7216: PPUSH
7217: LD_EXP 8
7221: PPUSH
7222: CALL_OW 250
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: PPUSH
7231: LD_EXP 8
7235: PPUSH
7236: CALL_OW 251
7240: PUSH
7241: LD_INT 2
7243: PLUS
7244: PPUSH
7245: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7249: LD_EXP 8
7253: PPUSH
7254: LD_EXP 8
7258: PPUSH
7259: CALL_OW 250
7263: PUSH
7264: LD_INT 2
7266: PLUS
7267: PPUSH
7268: LD_EXP 8
7272: PPUSH
7273: CALL_OW 251
7277: PPUSH
7278: CALL_OW 171
// wait ( 0 0$5 ) ;
7282: LD_INT 175
7284: PPUSH
7285: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 25
7296: PPUSH
7297: CALL_OW 113
// mikhailInBase = 4 ;
7301: LD_ADDR_EXP 22
7305: PUSH
7306: LD_INT 4
7308: ST_TO_ADDR
// end ; 3 :
7309: GO 7371
7311: LD_INT 3
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7370
7319: POP
// begin SetSide ( Mikhail , 6 ) ;
7320: LD_EXP 8
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7332: LD_EXP 8
7336: PPUSH
7337: CALL_OW 122
// wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_INT 17
7355: PPUSH
7356: CALL_OW 113
// mikhailInbase = 3 ;
7360: LD_ADDR_EXP 22
7364: PUSH
7365: LD_INT 3
7367: ST_TO_ADDR
// end ; end ;
7368: GO 7371
7370: POP
// end ;
7371: LD_VAR 0 1
7375: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7376: LD_EXP 8
7380: PPUSH
7381: LD_INT 25
7383: PPUSH
7384: CALL_OW 308
7388: PUSH
7389: LD_EXP 22
7393: PUSH
7394: LD_INT 4
7396: EQUAL
7397: AND
7398: IFFALSE 7502
7400: GO 7402
7402: DISABLE
// begin enable ;
7403: ENABLE
// mikhailInBase = 1 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// InGameOn ;
7412: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7416: LD_INT 1
7418: PPUSH
7419: LD_INT 6
7421: PPUSH
7422: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7426: LD_INT 35
7428: PPUSH
7429: CALL_OW 67
// if Carry ( Mikhail ) then
7433: LD_EXP 8
7437: PPUSH
7438: CALL_OW 281
7442: IFFALSE 7453
// ComUnload ( Mikhail ) ;
7444: LD_EXP 8
7448: PPUSH
7449: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7465: LD_EXP 8
7469: PPUSH
7470: CALL_OW 310
7474: IFFALSE 7426
// SetSide ( dep1 , 1 ) ;
7476: LD_INT 1
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7486: LD_EXP 8
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 235
// InGameOff ;
7498: CALL_OW 9
// end ;
7502: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7503: LD_EXP 8
7507: PPUSH
7508: CALL_OW 310
7512: PUSH
7513: LD_EXP 22
7517: PUSH
7518: LD_INT 3
7520: EQUAL
7521: NOT
7522: AND
7523: IFFALSE 7658
7525: GO 7527
7527: DISABLE
// begin enable ;
7528: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7529: LD_INT 22
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 1
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 91
7551: PUSH
7552: LD_EXP 8
7556: PPUSH
7557: CALL_OW 310
7561: PUSH
7562: LD_INT 10
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: PUSH
7580: LD_INT 1
7582: EQUAL
7583: IFFALSE 7658
// begin mikhailStatus = 4 ;
7585: LD_ADDR_EXP 21
7589: PUSH
7590: LD_INT 4
7592: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7593: LD_INT 1
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7609: LD_EXP 8
7613: PPUSH
7614: LD_INT 6
7616: PPUSH
7617: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7621: LD_EXP 8
7625: PPUSH
7626: CALL_OW 122
// wait ( 0 0$1 ) ;
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7637: LD_EXP 8
7641: PPUSH
7642: LD_INT 17
7644: PPUSH
7645: CALL_OW 113
// mikhailStatus = 3 ;
7649: LD_ADDR_EXP 21
7653: PUSH
7654: LD_INT 3
7656: ST_TO_ADDR
// disable ;
7657: DISABLE
// end ; end ;
7658: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_EXP 23
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 5
7676: LESS
7677: PUSH
7678: LD_EXP 21
7682: PUSH
7683: LD_INT 3
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_EXP 22
7692: PUSH
7693: LD_INT 3
7695: EQUAL
7696: NOT
7697: AND
7698: IFFALSE 7920
7700: GO 7702
7702: DISABLE
7703: LD_INT 0
7705: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_INT 22
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 26
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: PUSH
7751: LD_EXP 1
7755: PUSH
7756: LD_EXP 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: DIFF
7765: ST_TO_ADDR
// DialogueOn ;
7766: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-1
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D7-JMM-2
7805: PPUSH
7806: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7810: LD_VAR 0 1
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_STRING D7-Sol1-2
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7826: LD_EXP 1
7830: PPUSH
7831: LD_STRING D7-JMM-3
7833: PPUSH
7834: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PPUSH
7847: LD_STRING D7-Sol1-3
7849: PPUSH
7850: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7854: LD_EXP 3
7858: PPUSH
7859: CALL_OW 302
7863: PUSH
7864: LD_EXP 4
7868: PPUSH
7869: CALL_OW 302
7873: AND
7874: IFFALSE 7916
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7876: LD_EXP 3
7880: PPUSH
7881: LD_STRING D7-Cyrus-3
7883: PPUSH
7884: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: PPUSH
7897: LD_STRING D7-Sol1-4
7899: PPUSH
7900: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7904: LD_EXP 4
7908: PPUSH
7909: LD_STRING D7-Lisa-4
7911: PPUSH
7912: CALL_OW 88
// end ; DialogueOff ;
7916: CALL_OW 7
// end ;
7920: PPOPN 1
7922: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7923: LD_EXP 8
7927: PPUSH
7928: CALL_OW 303
7932: PUSH
7933: LD_EXP 21
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: AND
7942: IFFALSE 7956
7944: GO 7946
7946: DISABLE
// begin enable ;
7947: ENABLE
// mikhailStatus = 2 ;
7948: LD_ADDR_EXP 21
7952: PUSH
7953: LD_INT 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7957: LD_EXP 8
7961: PPUSH
7962: LD_INT 17
7964: PPUSH
7965: CALL_OW 308
7969: PUSH
7970: LD_EXP 8
7974: PPUSH
7975: CALL_OW 255
7979: PUSH
7980: LD_INT 6
7982: EQUAL
7983: AND
7984: IFFALSE 8017
7986: GO 7988
7988: DISABLE
// begin if not mikhailInBase = 3 then
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 3
7996: EQUAL
7997: NOT
7998: IFFALSE 8008
// mikhailStatus = 3 ;
8000: LD_ADDR_EXP 21
8004: PUSH
8005: LD_INT 3
8007: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8008: LD_EXP 8
8012: PPUSH
8013: CALL_OW 64
// end ;
8017: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8018: LD_EXP 21
8022: PUSH
8023: LD_INT 3
8025: EQUAL
8026: PUSH
8027: LD_EXP 8
8031: PPUSH
8032: CALL_OW 255
8036: PUSH
8037: LD_INT 6
8039: EQUAL
8040: AND
8041: IFFALSE 8207
8043: GO 8045
8045: DISABLE
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
// begin enable ;
8050: ENABLE
// if IsOk ( Mikhail ) then
8051: LD_EXP 8
8055: PPUSH
8056: CALL_OW 302
8060: IFFALSE 8207
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_EXP 8
8071: PPUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 21
8084: PUSH
8085: LD_INT 1
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PPUSH
8101: CALL 10178 0 2
8105: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_EXP 8
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 8
8123: LESS
8124: IFFALSE 8207
// begin if GetSex ( attacker ) = sex_male then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 258
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8175
// begin disable ;
8141: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8142: LD_VAR 0 2
8146: PPUSH
8147: LD_STRING D7a-Sol1-1
8149: PPUSH
8150: CALL_OW 88
// wait ( 0 0$2 ) ;
8154: LD_INT 70
8156: PPUSH
8157: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_STRING D7a-Sol1-1a
8168: PPUSH
8169: CALL_OW 88
// end else
8173: GO 8207
// begin disable ;
8175: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_STRING D7a-FSol1-1
8183: PPUSH
8184: CALL_OW 88
// wait ( 0 0$2 ) ;
8188: LD_INT 70
8190: PPUSH
8191: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_STRING D7a-FSol1-1a
8202: PPUSH
8203: CALL_OW 88
// end ; end ; end ; end ;
8207: PPOPN 2
8209: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8210: LD_EXP 27
8214: PUSH
8215: LD_INT 1
8217: EQUAL
8218: PUSH
8219: LD_INT 22
8221: PPUSH
8222: LD_INT 22
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 1
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 70
8250: PUSH
8251: LD_INT 2
8253: GREATER
8254: AND
8255: PUSH
8256: LD_INT 22
8258: PPUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 59
8284: PUSH
8285: EMPTY
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 70
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: AND
8306: IFFALSE 8321
8308: GO 8310
8310: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 235
// end ;
8321: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8322: LD_EXP 30
8326: PUSH
8327: LD_INT 1
8329: EQUAL
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 0
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: IFFALSE 8465
8366: GO 8368
8368: DISABLE
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: LD_INT 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 69
8417: ST_TO_ADDR
// for i in tmp do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: LD_VAR 0 2
8427: PUSH
8428: FOR_IN
8429: IFFALSE 8456
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_INT 1
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: CALL_OW 12
8446: PPUSH
8447: LD_INT 300
8449: PPUSH
8450: CALL_OW 492
8454: GO 8428
8456: POP
8457: POP
// SetAchievement ( ACH_TIGER ) ;
8458: LD_STRING ACH_TIGER
8460: PPUSH
8461: CALL_OW 543
// end ;
8465: PPOPN 2
8467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8468: LD_INT 22
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 34
8480: PUSH
8481: LD_INT 51
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: PUSH
8497: LD_INT 2
8499: GREATEREQUAL
8500: IFFALSE 8512
8502: GO 8504
8504: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8505: LD_STRING ACH_CARGO
8507: PPUSH
8508: CALL_OW 543
8512: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
// for i = 1 to count do
8519: LD_ADDR_VAR 0 8
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_VAR 0 6
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8616
// begin uc_side = side ;
8537: LD_ADDR_OWVAR 20
8541: PUSH
8542: LD_VAR 0 1
8546: ST_TO_ADDR
// uc_nation = nation ;
8547: LD_ADDR_OWVAR 21
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// hc_gallery =  ;
8557: LD_ADDR_OWVAR 33
8561: PUSH
8562: LD_STRING 
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 380
// un = CreateHuman ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: CALL_OW 44
8599: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8600: LD_VAR 0 10
8604: PPUSH
8605: LD_VAR 0 3
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8534
8616: POP
8617: POP
// end ;
8618: LD_VAR 0 7
8622: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
// uc_side := GetSide ( b ) ;
8628: LD_ADDR_OWVAR 20
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: CALL_OW 255
8642: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8643: LD_ADDR_OWVAR 21
8647: PUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 248
8657: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8658: LD_INT 0
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 380
// un = CreateHuman ;
8673: LD_ADDR_VAR 0 4
8677: PUSH
8678: CALL_OW 44
8682: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 254
8697: PUSH
8698: LD_INT 3
8700: MINUS
8701: ST_TO_ADDR
// if dir < 0 then
8702: LD_VAR 0 5
8706: PUSH
8707: LD_INT 0
8709: LESS
8710: IFFALSE 8726
// dir := 6 + dir ;
8712: LD_ADDR_VAR 0 5
8716: PUSH
8717: LD_INT 6
8719: PUSH
8720: LD_VAR 0 5
8724: PLUS
8725: ST_TO_ADDR
// SetDir ( un , dir ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 52
// end ;
8754: LD_VAR 0 3
8758: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_VAR 0 1
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: LD_INT 1000
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_VAR 0 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 3
8847: PUSH
8848: LD_INT 24
8850: PUSH
8851: LD_INT 1000
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: PPUSH
8870: CALL_OW 70
8874: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 0
8882: GREATER
8883: PUSH
8884: LD_VAR 0 7
8888: PUSH
8889: LD_INT 0
8891: GREATER
8892: AND
8893: IFFALSE 8959
// begin for i in engineerOk_list do
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8957
// begin for j in buildings_list do
8908: LD_ADDR_VAR 0 8
8912: PUSH
8913: LD_VAR 0 5
8917: PUSH
8918: FOR_IN
8919: IFFALSE 8953
// begin AddComExitBuilding ( i ) ;
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 182
// wait ( 0 0$1 ) ;
8930: LD_INT 35
8932: PPUSH
8933: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8937: LD_VAR 0 6
8941: PPUSH
8942: LD_VAR 0 8
8946: PPUSH
8947: CALL_OW 190
// end ;
8951: GO 8918
8953: POP
8954: POP
// end ;
8955: GO 8905
8957: POP
8958: POP
// end ; if buildings_list = 0 then
8959: LD_VAR 0 5
8963: PUSH
8964: LD_INT 0
8966: EQUAL
8967: IFFALSE 9000
// begin for i in engineerOK_list do
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_VAR 0 7
8978: PUSH
8979: FOR_IN
8980: IFFALSE 8998
// begin ComEnterUnit ( i , building ) ;
8982: LD_VAR 0 6
8986: PPUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: CALL_OW 120
// end ;
8996: GO 8979
8998: POP
8999: POP
// end ; end ;
9000: LD_VAR 0 4
9004: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 250
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 3
9068: PPUSH
9069: LD_INT 22
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 3
9093: PUSH
9094: LD_INT 24
9096: PUSH
9097: LD_INT 650
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9118: LD_VAR 0 9
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: PUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_INT 0
9134: GREATER
9135: AND
9136: IFFALSE 9263
// begin for i = 1 to damageUnits do
9138: LD_ADDR_VAR 0 7
9142: PUSH
9143: DOUBLE
9144: LD_INT 1
9146: DEC
9147: ST_TO_ADDR
9148: LD_VAR 0 9
9152: PUSH
9153: FOR_TO
9154: IFFALSE 9178
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 7
9165: ARRAY
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: CALL_OW 113
9176: GO 9153
9178: POP
9179: POP
// for i in sci_list do
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: LD_VAR 0 6
9189: PUSH
9190: FOR_IN
9191: IFFALSE 9259
// begin ComExitBuilding ( i ) ;
9193: LD_VAR 0 7
9197: PPUSH
9198: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9202: LD_ADDR_VAR 0 8
9206: PUSH
9207: LD_VAR 0 2
9211: PPUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9255
// begin AddComHeal ( i , j ) ;
9232: LD_VAR 0 7
9236: PPUSH
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 188
// wait ( 1 1$0 ) ;
9246: LD_INT 2100
9248: PPUSH
9249: CALL_OW 67
// end ;
9253: GO 9229
9255: POP
9256: POP
// end ;
9257: GO 9190
9259: POP
9260: POP
// end else
9261: GO 9277
// begin AddComEnterUnit ( sci_list , build ) ;
9263: LD_VAR 0 6
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: CALL_OW 180
// end ; end ;
9277: LD_VAR 0 5
9281: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 24
9326: PUSH
9327: LD_INT 550
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 70
9354: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9355: LD_ADDR_VAR 0 8
9359: PUSH
9360: LD_VAR 0 3
9364: PPUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 21
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 46
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 24
9402: PUSH
9403: LD_INT 550
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 22
9437: PUSH
9438: LD_VAR 0 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 21
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 34
9459: PUSH
9460: LD_INT 46
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 24
9469: PUSH
9470: LD_INT 1000
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 58
9479: PUSH
9480: EMPTY
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 70
9494: ST_TO_ADDR
// for i in damageVehicle_list do
9495: LD_ADDR_VAR 0 5
9499: PUSH
9500: LD_VAR 0 8
9504: PUSH
9505: FOR_IN
9506: IFFALSE 9525
// mechanicInside_list = UnitsInside ( i ) ;
9508: LD_ADDR_VAR 0 10
9512: PUSH
9513: LD_VAR 0 5
9517: PPUSH
9518: CALL_OW 313
9522: ST_TO_ADDR
9523: GO 9505
9525: POP
9526: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9527: LD_ADDR_VAR 0 11
9531: PUSH
9532: LD_VAR 0 2
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: ST_TO_ADDR
// if damageVehicle_list > 0 then
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: IFFALSE 9649
// begin for i in damageVehicle_list do
9578: LD_ADDR_VAR 0 5
9582: PUSH
9583: LD_VAR 0 8
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9647
// begin for j in mechanicInside_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 10
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9643
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9604: LD_VAR 0 8
9608: PPUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: CALL_OW 113
// AddComExitVehicle ( j ) ;
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_VAR 0 5
9636: PPUSH
9637: CALL_OW 189
// end ;
9641: GO 9601
9643: POP
9644: POP
// end ;
9645: GO 9588
9647: POP
9648: POP
// end ; if emptyVehicle_list > 0 then
9649: LD_VAR 0 9
9653: PUSH
9654: LD_INT 0
9656: GREATER
9657: IFFALSE 9707
// begin for i in emptyVehicle_list do
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 9
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9705
// begin for j in mechanicOutside_list do
9672: LD_ADDR_VAR 0 6
9676: PUSH
9677: LD_VAR 0 11
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9701
// begin AddComEnterUnit ( j , i ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 180
// end ;
9699: GO 9682
9701: POP
9702: POP
// end ;
9703: GO 9669
9705: POP
9706: POP
// end ; if VehicleOK_list > 0 then
9707: LD_VAR 0 7
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9749
// begin for i in VehicleOK_list do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: LD_VAR 0 7
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9747
// ComAgressiveMove ( i , 110 , 29 ) ;
9730: LD_VAR 0 5
9734: PPUSH
9735: LD_INT 110
9737: PPUSH
9738: LD_INT 29
9740: PPUSH
9741: CALL_OW 114
9745: GO 9727
9747: POP
9748: POP
// end ; end ;
9749: LD_VAR 0 4
9753: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9759: LD_VAR 0 1
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 2
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_VAR 0 5
9817: GREATER
9818: IFFALSE 9950
// begin for i in defendersList do
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9946
// begin AddComExitBuilding ( i ) ;
9833: LD_VAR 0 7
9837: PPUSH
9838: CALL_OW 182
// wait ( 0 0$1 ) ;
9842: LD_INT 35
9844: PPUSH
9845: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9849: LD_ADDR_VAR 0 8
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9942
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9911: LD_VAR 0 7
9915: PPUSH
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 250
9925: PPUSH
9926: LD_VAR 0 8
9930: PPUSH
9931: CALL_OW 251
9935: PPUSH
9936: CALL_OW 174
9940: GO 9908
9942: POP
9943: POP
// end ;
9944: GO 9830
9946: POP
9947: POP
// end else
9948: GO 9981
// begin for i in defendersList do
9950: LD_ADDR_VAR 0 7
9954: PUSH
9955: LD_VAR 0 3
9959: PUSH
9960: FOR_IN
9961: IFFALSE 9979
// ComEnterUnit ( i , build ) ;
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 4
9972: PPUSH
9973: CALL_OW 120
9977: GO 9960
9979: POP
9980: POP
// end ; end ;
9981: LD_VAR 0 6
9985: RET
// export function RussianTrap ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// if GetSide ( Brian ) = 4 then
9990: LD_EXP 6
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: LD_INT 4
10002: EQUAL
10003: IFFALSE 10026
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10005: LD_EXP 6
10009: PUSH
10010: LD_EXP 7
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10026: LD_ADDR_VAR 0 2
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 21
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: FOR_IN
10061: IFFALSE 10171
// begin ComExitBuilding ( i ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 120
10086: PPUSH
10087: LD_INT 56
10089: PPUSH
10090: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 111
10101: PPUSH
10102: LD_INT 37
10104: PPUSH
10105: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10109: LD_INT 33
10111: PPUSH
10112: CALL_OW 255
10116: PUSH
10117: LD_INT 3
10119: EQUAL
10120: PUSH
10121: LD_INT 33
10123: PPUSH
10124: CALL_OW 302
10128: AND
10129: IFFALSE 10145
// begin AddComEnterUnit ( i , arm2 ) ;
10131: LD_VAR 0 2
10135: PPUSH
10136: LD_INT 33
10138: PPUSH
10139: CALL_OW 180
// end else
10143: GO 10169
// begin AddComCrawl ( i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_INT 109
10161: PPUSH
10162: LD_INT 30
10164: PPUSH
10165: CALL_OW 174
// end ; end ;
10169: GO 10060
10171: POP
10172: POP
// end ;
10173: LD_VAR 0 1
10177: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// nearest_dist = 1000 ;
10185: LD_ADDR_VAR 0 4
10189: PUSH
10190: LD_INT 1000
10192: ST_TO_ADDR
// nearest_un = un ;
10193: LD_ADDR_VAR 0 5
10197: PUSH
10198: LD_VAR 0 1
10202: ST_TO_ADDR
// for sold in units do
10203: LD_ADDR_VAR 0 6
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10270
// begin dist = GetDistUnits ( un , sold ) ;
10216: LD_ADDR_VAR 0 7
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 296
10235: ST_TO_ADDR
// if dist < nearest_dist then
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 4
10245: LESS
10246: IFFALSE 10268
// begin nearest_un = sold ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 6
10257: ST_TO_ADDR
// nearest_dist = dist ;
10258: LD_ADDR_VAR 0 4
10262: PUSH
10263: LD_VAR 0 7
10267: ST_TO_ADDR
// end ; end ;
10268: GO 10213
10270: POP
10271: POP
// result := nearest_un ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_VAR 0 5
10281: ST_TO_ADDR
// end ;
10282: LD_VAR 0 3
10286: RET
// export function PrepareDifficulty ; begin
10287: LD_INT 0
10289: PPUSH
// if Difficulty = 1 then
10290: LD_OWVAR 67
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: IFFALSE 10361
// begin RemoveUnit ( brw2 ) ;
10300: LD_INT 9
10302: PPUSH
10303: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10307: LD_INT 30
10309: PPUSH
10310: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10314: LD_INT 52
10316: PPUSH
10317: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10321: LD_INT 63
10323: PPUSH
10324: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10328: LD_INT 5
10330: PUSH
10331: LD_INT 4
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: LD_INT 60
10340: PPUSH
10341: CALL_OW 240
// RuSoldMinLevel = 0 ;
10345: LD_ADDR_EXP 13
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10353: LD_ADDR_EXP 14
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// end ; if Difficulty = 2 then
10361: LD_OWVAR 67
10365: PUSH
10366: LD_INT 2
10368: EQUAL
10369: IFFALSE 10411
// begin RemoveUnit ( brw4 ) ;
10371: LD_INT 52
10373: PPUSH
10374: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: LD_INT 50
10390: PPUSH
10391: CALL_OW 240
// RuSoldMinLevel = 1 ;
10395: LD_ADDR_EXP 13
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10403: LD_ADDR_EXP 14
10407: PUSH
10408: LD_INT 2
10410: ST_TO_ADDR
// end ; if Difficulty = 3 then
10411: LD_OWVAR 67
10415: PUSH
10416: LD_INT 3
10418: EQUAL
10419: IFFALSE 10454
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10421: LD_INT 5
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: LD_INT 40
10433: PPUSH
10434: CALL_OW 240
// RuSoldMinLevel = 2 ;
10438: LD_ADDR_EXP 13
10442: PUSH
10443: LD_INT 2
10445: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10446: LD_ADDR_EXP 14
10450: PUSH
10451: LD_INT 3
10453: ST_TO_ADDR
// end ; end ;
10454: LD_VAR 0 1
10458: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
10463: PPUSH
// tmp = [ ] ;
10464: LD_ADDR_VAR 0 5
10468: PUSH
10469: EMPTY
10470: ST_TO_ADDR
// if not vehicles then
10471: LD_VAR 0 1
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10597
// for i in vehicles do
10480: LD_ADDR_VAR 0 4
10484: PUSH
10485: LD_VAR 0 1
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10581
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_VAR 0 5
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
// end ;
10579: GO 10490
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side = 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING 01_JMM
10621: PPUSH
10622: CALL_OW 34
10626: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_STRING 01_JMMLifePoints_1
10634: PPUSH
10635: LD_INT 1000
10637: PPUSH
10638: CALL_OW 30
10642: ST_TO_ADDR
// if plive < 250 then
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 250
10650: LESS
10651: IFFALSE 10661
// plive := 300 ;
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_INT 300
10660: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10675: LD_ADDR_EXP 9
10679: PUSH
10680: LD_STRING Powell
10682: PPUSH
10683: CALL_OW 25
10687: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10688: LD_ADDR_EXP 2
10692: PUSH
10693: LD_STRING 01_Bobby
10695: PPUSH
10696: CALL_OW 34
10700: ST_TO_ADDR
// if Bobby then
10701: LD_EXP 2
10705: IFFALSE 10755
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_STRING 01_BobbyLifePoints_1
10714: PPUSH
10715: LD_INT 1000
10717: PPUSH
10718: CALL_OW 30
10722: ST_TO_ADDR
// if plive < 250 then
10723: LD_VAR 0 2
10727: PUSH
10728: LD_INT 250
10730: LESS
10731: IFFALSE 10741
// plive := 300 ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_INT 300
10740: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10741: LD_EXP 2
10745: PPUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10755: LD_ADDR_EXP 3
10759: PUSH
10760: LD_STRING 01_Cyrus
10762: PPUSH
10763: CALL_OW 34
10767: ST_TO_ADDR
// if Cyrus then
10768: LD_EXP 3
10772: IFFALSE 10822
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_STRING 01_CyrusLifePoints_1
10781: PPUSH
10782: LD_INT 1000
10784: PPUSH
10785: CALL_OW 30
10789: ST_TO_ADDR
// if plive < 250 then
10790: LD_VAR 0 2
10794: PUSH
10795: LD_INT 250
10797: LESS
10798: IFFALSE 10808
// plive := 300 ;
10800: LD_ADDR_VAR 0 2
10804: PUSH
10805: LD_INT 300
10807: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10808: LD_EXP 3
10812: PPUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10822: LD_ADDR_EXP 5
10826: PUSH
10827: LD_STRING Khatam
10829: PPUSH
10830: CALL_OW 25
10834: ST_TO_ADDR
// uc_side = 4 ;
10835: LD_ADDR_OWVAR 20
10839: PUSH
10840: LD_INT 4
10842: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10843: LD_ADDR_EXP 4
10847: PUSH
10848: LD_STRING Lisa
10850: PPUSH
10851: CALL_OW 25
10855: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_INT 3
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10871: LD_EXP 2
10875: PPUSH
10876: LD_INT 3
10878: PPUSH
10879: LD_INT 0
10881: PPUSH
10882: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10886: LD_EXP 3
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 0
10896: PPUSH
10897: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10901: LD_EXP 4
10905: PPUSH
10906: LD_INT 5
10908: PPUSH
10909: LD_INT 0
10911: PPUSH
10912: CALL_OW 49
// ComCrawl ( Lisa ) ;
10916: LD_EXP 4
10920: PPUSH
10921: CALL_OW 137
// end ;
10925: LD_VAR 0 1
10929: RET
// export function PrepareLisSquad ; var i , un ; begin
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
// uc_side = 4 ;
10935: LD_ADDR_OWVAR 20
10939: PUSH
10940: LD_INT 4
10942: ST_TO_ADDR
// uc_nation = 1 ;
10943: LD_ADDR_OWVAR 21
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// hc_class := 2 ;
10951: LD_ADDR_OWVAR 28
10955: PUSH
10956: LD_INT 2
10958: ST_TO_ADDR
// hc_sex := sex_male ;
10959: LD_ADDR_OWVAR 27
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// hc_gallery :=  ;
10967: LD_ADDR_OWVAR 33
10971: PUSH
10972: LD_STRING 
10974: ST_TO_ADDR
// hc_name :=  ;
10975: LD_ADDR_OWVAR 26
10979: PUSH
10980: LD_STRING 
10982: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10983: LD_ADDR_OWVAR 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11006: LD_ADDR_OWVAR 31
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 0
11019: PUSH
11020: LD_INT 0
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// un := CreateHuman ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: CALL_OW 44
11038: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 6
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 49
// hc_sex := sex_female ;
11054: LD_ADDR_OWVAR 27
11058: PUSH
11059: LD_INT 2
11061: ST_TO_ADDR
// hc_gallery :=  ;
11062: LD_ADDR_OWVAR 33
11066: PUSH
11067: LD_STRING 
11069: ST_TO_ADDR
// hc_name :=  ;
11070: LD_ADDR_OWVAR 26
11074: PUSH
11075: LD_STRING 
11077: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11078: LD_ADDR_OWVAR 30
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: LD_INT 0
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11101: LD_ADDR_OWVAR 31
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: ST_TO_ADDR
// un := CreateHuman ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: CALL_OW 44
11133: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 6
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 49
// if not Bobby and not Cyrus then
11149: LD_EXP 2
11153: NOT
11154: PUSH
11155: LD_EXP 3
11159: NOT
11160: AND
11161: IFFALSE 11266
// begin hc_class := 1 ;
11163: LD_ADDR_OWVAR 28
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// hc_sex := sex_male ;
11171: LD_ADDR_OWVAR 27
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// hc_gallery :=  ;
11179: LD_ADDR_OWVAR 33
11183: PUSH
11184: LD_STRING 
11186: ST_TO_ADDR
// hc_name :=  ;
11187: LD_ADDR_OWVAR 26
11191: PUSH
11192: LD_STRING 
11194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11195: LD_ADDR_OWVAR 30
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11218: LD_ADDR_OWVAR 31
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// un := CreateHuman ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 31
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL_OW 49
// end ; InitHc ;
11266: CALL_OW 19
// end ;
11270: LD_VAR 0 1
11274: RET
// export function PrepareOtherAmericans ; begin
11275: LD_INT 0
11277: PPUSH
// uc_side = 4 ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_INT 4
11285: ST_TO_ADDR
// uc_nation = 1 ;
11286: LD_ADDR_OWVAR 21
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// hc_gallery =  ;
11294: LD_ADDR_OWVAR 33
11298: PUSH
11299: LD_STRING 
11301: ST_TO_ADDR
// hc_name = Tom Garvin ;
11302: LD_ADDR_OWVAR 26
11306: PUSH
11307: LD_STRING Tom Garvin
11309: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: CALL_OW 380
// Brian = CreateHuman ;
11331: LD_ADDR_EXP 6
11335: PUSH
11336: CALL_OW 44
11340: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11341: LD_EXP 6
11345: PPUSH
11346: LD_INT 10
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// hc_name = Jerry White ;
11356: LD_ADDR_OWVAR 26
11360: PUSH
11361: LD_STRING Jerry White
11363: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: CALL_OW 380
// Jerry = CreateHuman ;
11385: LD_ADDR_EXP 7
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11395: LD_EXP 7
11399: PPUSH
11400: LD_INT 10
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11410: LD_EXP 6
11414: PUSH
11415: LD_EXP 7
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 140
// end ;
11428: LD_VAR 0 1
11432: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11433: LD_INT 0
11435: PPUSH
11436: PPUSH
11437: PPUSH
// for i = 1 to 6 do
11438: LD_ADDR_VAR 0 2
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11546
// begin uc_side = 4 ;
11454: LD_ADDR_OWVAR 20
11458: PUSH
11459: LD_INT 4
11461: ST_TO_ADDR
// uc_nation = 1 ;
11462: LD_ADDR_OWVAR 21
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// hc_gallery =  ;
11470: LD_ADDR_OWVAR 33
11474: PUSH
11475: LD_STRING 
11477: ST_TO_ADDR
// hc_name =  ;
11478: LD_ADDR_OWVAR 26
11482: PUSH
11483: LD_STRING 
11485: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11486: LD_INT 0
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 380
// un = CreateHuman ;
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: CALL_OW 44
11516: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 16
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 49
// SetLives ( un , 1 ) ;
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 234
// end ;
11544: GO 11451
11546: POP
11547: POP
// DyingSold = CreateHuman ;
11548: LD_ADDR_EXP 34
11552: PUSH
11553: CALL_OW 44
11557: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11558: LD_EXP 34
11562: PPUSH
11563: LD_INT 16
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11573: LD_EXP 34
11577: PPUSH
11578: LD_INT 250
11580: PPUSH
11581: CALL_OW 234
// end ; end_of_file
11585: LD_VAR 0 1
11589: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 50
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: LD_INT 56
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: DIFF
11661: ST_TO_ADDR
// uc_side = 6 ;
11662: LD_ADDR_OWVAR 20
11666: PUSH
11667: LD_INT 6
11669: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11670: LD_ADDR_EXP 8
11674: PUSH
11675: LD_STRING Mikhail
11677: PPUSH
11678: CALL_OW 25
11682: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11683: LD_EXP 8
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11695: LD_EXP 8
11699: PPUSH
11700: LD_VAR 0 2
11704: PUSH
11705: LD_INT 1
11707: ARRAY
11708: PPUSH
11709: CALL_OW 250
11713: PPUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 251
11727: PPUSH
11728: LD_INT 5
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 50
// end ;
11738: LD_VAR 0 1
11742: RET
// export function PrepareRussianCommander ; begin
11743: LD_INT 0
11745: PPUSH
// uc_side = 3 ;
11746: LD_ADDR_OWVAR 20
11750: PUSH
11751: LD_INT 3
11753: ST_TO_ADDR
// uc_nation = 3 ;
11754: LD_ADDR_OWVAR 21
11758: PUSH
11759: LD_INT 3
11761: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11762: LD_ADDR_EXP 19
11766: PUSH
11767: LD_STRING Natasza
11769: PPUSH
11770: CALL_OW 25
11774: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11775: LD_EXP 19
11779: PPUSH
11780: LD_INT 24
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11790: LD_EXP 19
11794: PPUSH
11795: LD_INT 56
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11805: LD_ADDR_EXP 24
11809: PUSH
11810: LD_EXP 24
11814: PUSH
11815: LD_EXP 19
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: LD_VAR 0 1
11825: RET
// export function PrepareSouthBase ; var i , un ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// for i = 1 to 2 do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_INT 2
11843: PUSH
11844: FOR_TO
11845: IFFALSE 11954
// begin uc_side = 3 ;
11847: LD_ADDR_OWVAR 20
11851: PUSH
11852: LD_INT 3
11854: ST_TO_ADDR
// uc_nation = 3 ;
11855: LD_ADDR_OWVAR 21
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// hc_gallery =  ;
11863: LD_ADDR_OWVAR 33
11867: PUSH
11868: LD_STRING 
11870: ST_TO_ADDR
// hc_name =  ;
11871: LD_ADDR_OWVAR 26
11875: PUSH
11876: LD_STRING 
11878: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11879: LD_INT 1
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: LD_EXP 13
11889: PPUSH
11890: LD_EXP 14
11894: PPUSH
11895: CALL_OW 12
11899: PPUSH
11900: CALL_OW 380
// hc_importance = 0 ;
11904: LD_ADDR_OWVAR 32
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// un = CreateHuman ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 11
11929: PPUSH
11930: LD_INT 0
11932: PPUSH
11933: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 111
11944: PPUSH
11945: LD_INT 38
11947: PPUSH
11948: CALL_OW 118
// end ;
11952: GO 11844
11954: POP
11955: POP
// for i = 1 to Difficulty do
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: DOUBLE
11962: LD_INT 1
11964: DEC
11965: ST_TO_ADDR
11966: LD_OWVAR 67
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12055
// begin uc_side = 3 ;
11974: LD_ADDR_OWVAR 20
11978: PUSH
11979: LD_INT 3
11981: ST_TO_ADDR
// uc_nation = 3 ;
11982: LD_ADDR_OWVAR 21
11986: PUSH
11987: LD_INT 3
11989: ST_TO_ADDR
// hc_gallery =  ;
11990: LD_ADDR_OWVAR 33
11994: PUSH
11995: LD_STRING 
11997: ST_TO_ADDR
// hc_name =  ;
11998: LD_ADDR_OWVAR 26
12002: PUSH
12003: LD_STRING 
12005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12006: LD_INT 0
12008: PPUSH
12009: LD_INT 3
12011: PPUSH
12012: LD_EXP 13
12016: PPUSH
12017: LD_EXP 14
12021: PPUSH
12022: CALL_OW 12
12026: PPUSH
12027: CALL_OW 380
// un = CreateHuman ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 10
12048: PPUSH
12049: CALL_OW 52
// end ;
12053: GO 11971
12055: POP
12056: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12057: LD_INT 3
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 33
12065: PPUSH
12066: LD_EXP 13
12070: PPUSH
12071: LD_EXP 14
12075: PPUSH
12076: CALL_OW 12
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 1
12086: PUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 12
12097: PUSH
12098: LD_INT 1
12100: PPUSH
12101: LD_INT 2
12103: PPUSH
12104: CALL_OW 12
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_OWVAR 67
12118: ARRAY
12119: PPUSH
12120: CALL 8513 0 6
// for i in UnitsInside ( arm2 ) do
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_INT 33
12131: PPUSH
12132: CALL_OW 313
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12158
// southBaseDefenders = southBaseDefenders ^ i ;
12140: LD_ADDR_EXP 25
12144: PUSH
12145: LD_EXP 25
12149: PUSH
12150: LD_VAR 0 2
12154: ADD
12155: ST_TO_ADDR
12156: GO 12137
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// export function PrepareNorthBase ; var i , un ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 2
12185: PPUSH
12186: CALL_OW 12
12190: PUSH
12191: LD_INT 2
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: PUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 12
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: LD_OWVAR 67
12222: ARRAY
12223: PUSH
12224: FOR_TO
12225: IFFALSE 12311
// begin uc_side = 3 ;
12227: LD_ADDR_OWVAR 20
12231: PUSH
12232: LD_INT 3
12234: ST_TO_ADDR
// uc_nation = 3 ;
12235: LD_ADDR_OWVAR 21
12239: PUSH
12240: LD_INT 3
12242: ST_TO_ADDR
// hc_gallery =  ;
12243: LD_ADDR_OWVAR 33
12247: PUSH
12248: LD_STRING 
12250: ST_TO_ADDR
// hc_name =  ;
12251: LD_ADDR_OWVAR 26
12255: PUSH
12256: LD_STRING 
12258: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12259: LD_INT 0
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_EXP 13
12269: PPUSH
12270: LD_EXP 14
12274: PPUSH
12275: CALL_OW 12
12279: PPUSH
12280: CALL_OW 380
// un = CreateHuman ;
12284: LD_ADDR_VAR 0 3
12288: PUSH
12289: CALL_OW 44
12293: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 14
12301: PPUSH
12302: LD_INT 0
12304: PPUSH
12305: CALL_OW 49
// end ;
12309: GO 12224
12311: POP
12312: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12313: LD_INT 3
12315: PPUSH
12316: LD_INT 3
12318: PPUSH
12319: LD_INT 2
12321: PPUSH
12322: LD_EXP 13
12326: PPUSH
12327: LD_EXP 14
12331: PPUSH
12332: CALL_OW 12
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 2
12345: PPUSH
12346: CALL_OW 12
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_INT 3
12356: PPUSH
12357: CALL_OW 12
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_INT 3
12367: PPUSH
12368: CALL_OW 12
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_OWVAR 67
12382: ARRAY
12383: PPUSH
12384: CALL 8513 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12388: LD_INT 3
12390: PPUSH
12391: LD_INT 3
12393: PPUSH
12394: LD_INT 23
12396: PPUSH
12397: LD_EXP 13
12401: PPUSH
12402: LD_EXP 14
12406: PPUSH
12407: CALL_OW 12
12411: PPUSH
12412: LD_INT 4
12414: PPUSH
12415: LD_INT 0
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_OWVAR 67
12433: ARRAY
12434: PPUSH
12435: CALL 8513 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_EXP 13
12452: PPUSH
12453: LD_EXP 14
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_OWVAR 67
12484: ARRAY
12485: PPUSH
12486: CALL 8513 0 6
// for i in UnitsInside ( arm1 ) do
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_INT 2
12497: PPUSH
12498: CALL_OW 313
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12524
// northBaseDefenders = northBaseDefenders ^ i ;
12506: LD_ADDR_EXP 24
12510: PUSH
12511: LD_EXP 24
12515: PUSH
12516: LD_VAR 0 2
12520: ADD
12521: ST_TO_ADDR
12522: GO 12503
12524: POP
12525: POP
// end ;
12526: LD_VAR 0 1
12530: RET
// export function PrepareOtherRussians ; var i , un ; begin
12531: LD_INT 0
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to 2 do
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_INT 2
12548: PUSH
12549: FOR_TO
12550: IFFALSE 12651
// begin uc_side = 3 ;
12552: LD_ADDR_OWVAR 20
12556: PUSH
12557: LD_INT 3
12559: ST_TO_ADDR
// uc_nation = 3 ;
12560: LD_ADDR_OWVAR 21
12564: PUSH
12565: LD_INT 3
12567: ST_TO_ADDR
// hc_gallery =  ;
12568: LD_ADDR_OWVAR 33
12572: PUSH
12573: LD_STRING 
12575: ST_TO_ADDR
// hc_name =  ;
12576: LD_ADDR_OWVAR 26
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: LD_EXP 13
12594: PPUSH
12595: LD_EXP 14
12599: PPUSH
12600: CALL_OW 12
12604: PPUSH
12605: CALL_OW 380
// un = CreateHuman ;
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: CALL_OW 44
12618: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 9
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 80
12641: PPUSH
12642: LD_INT 73
12644: PPUSH
12645: CALL_OW 118
// end ;
12649: GO 12549
12651: POP
12652: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12716
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12690: LD_EXP 13
12694: PPUSH
12695: LD_EXP 14
12699: PPUSH
12700: CALL_OW 12
12704: PPUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: CALL 8623 0 2
12714: GO 12687
12716: POP
12717: POP
// end ;
12718: LD_VAR 0 1
12722: RET
// export function PrepareCargoBays ; begin
12723: LD_INT 0
12725: PPUSH
// uc_side = 3 ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_INT 3
12733: ST_TO_ADDR
// uc_nation = 3 ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 3
12741: ST_TO_ADDR
// vc_engine = 1 ;
12742: LD_ADDR_OWVAR 39
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// vc_control = 1 ;
12750: LD_ADDR_OWVAR 38
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// vc_weapon = 51 ;
12758: LD_ADDR_OWVAR 40
12762: PUSH
12763: LD_INT 51
12765: ST_TO_ADDR
// vc_chassis = 22 ;
12766: LD_ADDR_OWVAR 37
12770: PUSH
12771: LD_INT 22
12773: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12774: LD_ADDR_EXP 15
12778: PUSH
12779: CALL_OW 45
12783: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12784: LD_ADDR_EXP 16
12788: PUSH
12789: CALL_OW 45
12793: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12794: LD_EXP 15
12798: PPUSH
12799: LD_INT 13
12801: PPUSH
12802: LD_INT 0
12804: PPUSH
12805: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12809: LD_EXP 16
12813: PPUSH
12814: LD_INT 13
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12824: LD_EXP 15
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: LD_INT 70
12834: PUSH
12835: LD_INT 50
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_OWVAR 67
12850: ARRAY
12851: PPUSH
12852: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12856: LD_EXP 16
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: LD_INT 70
12866: PUSH
12867: LD_INT 50
12869: PUSH
12870: LD_INT 30
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_OWVAR 67
12882: ARRAY
12883: PPUSH
12884: CALL_OW 291
// hc_gallery =  ;
12888: LD_ADDR_OWVAR 33
12892: PUSH
12893: LD_STRING 
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_INT 2
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: CALL_OW 380
// driver1 = CreateHuman ;
12925: LD_ADDR_EXP 17
12929: PUSH
12930: CALL_OW 44
12934: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12935: LD_EXP 17
12939: PPUSH
12940: LD_EXP 15
12944: PPUSH
12945: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12949: LD_ADDR_OWVAR 26
12953: PUSH
12954: LD_STRING Nikolai Andreyev
12956: ST_TO_ADDR
// driver2 = CreateHuman ;
12957: LD_ADDR_EXP 18
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12967: LD_EXP 18
12971: PPUSH
12972: LD_EXP 16
12976: PPUSH
12977: CALL_OW 52
// end ;
12981: LD_VAR 0 1
12985: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
// uc_side = 3 ;
12995: LD_ADDR_OWVAR 20
12999: PUSH
13000: LD_INT 3
13002: ST_TO_ADDR
// uc_nation = 3 ;
13003: LD_ADDR_OWVAR 21
13007: PUSH
13008: LD_INT 3
13010: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13011: LD_ADDR_VAR 0 4
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 12
13036: PLUS
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13216
// begin vc_engine = 1 ;
13041: LD_ADDR_OWVAR 39
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// vc_control = 1 ;
13049: LD_ADDR_OWVAR 38
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// vc_weapon = 42 ;
13057: LD_ADDR_OWVAR 40
13061: PUSH
13062: LD_INT 42
13064: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13065: LD_ADDR_OWVAR 37
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_OWVAR 67
13088: ARRAY
13089: ST_TO_ADDR
// veh = CreateVehicle ;
13090: LD_ADDR_VAR 0 5
13094: PUSH
13095: CALL_OW 45
13099: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13100: LD_VAR 0 5
13104: PPUSH
13105: LD_VAR 0 2
13109: PPUSH
13110: LD_INT 0
13112: PPUSH
13113: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13117: LD_ADDR_EXP 26
13121: PUSH
13122: LD_EXP 26
13126: PUSH
13127: LD_VAR 0 5
13131: ADD
13132: ST_TO_ADDR
// hc_gallery =  ;
13133: LD_ADDR_OWVAR 33
13137: PUSH
13138: LD_STRING 
13140: ST_TO_ADDR
// hc_name =  ;
13141: LD_ADDR_OWVAR 26
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13149: LD_INT 0
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_EXP 13
13159: PPUSH
13160: LD_EXP 14
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: CALL_OW 380
// un = CreateHuman ;
13174: LD_ADDR_VAR 0 6
13178: PUSH
13179: CALL_OW 44
13183: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13184: LD_VAR 0 6
13188: PPUSH
13189: LD_VAR 0 5
13193: PPUSH
13194: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13198: LD_ADDR_EXP 26
13202: PUSH
13203: LD_EXP 26
13207: PUSH
13208: LD_VAR 0 6
13212: ADD
13213: ST_TO_ADDR
// end ;
13214: GO 13038
13216: POP
13217: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13218: LD_INT 0
13220: PPUSH
13221: LD_INT 2
13223: PPUSH
13224: LD_EXP 13
13228: PPUSH
13229: LD_EXP 14
13233: PPUSH
13234: CALL_OW 12
13238: PPUSH
13239: CALL_OW 380
// un = CreateHuman ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13253: LD_ADDR_VAR 0 4
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_VAR 0 1
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 2
13273: MUL
13274: PLUS
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13365
// begin hc_gallery =  ;
13279: LD_ADDR_OWVAR 33
13283: PUSH
13284: LD_STRING 
13286: ST_TO_ADDR
// hc_name =  ;
13287: LD_ADDR_OWVAR 26
13291: PUSH
13292: LD_STRING 
13294: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: LD_EXP 13
13305: PPUSH
13306: LD_EXP 14
13310: PPUSH
13311: CALL_OW 12
13315: PPUSH
13316: CALL_OW 380
// un = CreateHuman ;
13320: LD_ADDR_VAR 0 6
13324: PUSH
13325: CALL_OW 44
13329: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13330: LD_VAR 0 6
13334: PPUSH
13335: LD_VAR 0 2
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13347: LD_ADDR_EXP 26
13351: PUSH
13352: LD_EXP 26
13356: PUSH
13357: LD_VAR 0 6
13361: ADD
13362: ST_TO_ADDR
// end ;
13363: GO 13276
13365: POP
13366: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13367: LD_ADDR_VAR 0 7
13371: PUSH
13372: LD_INT 26
13374: PPUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13415: LD_VAR 0 7
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: LD_STRING D9-Rus3-1
13426: PPUSH
13427: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13431: LD_VAR 0 7
13435: PUSH
13436: LD_INT 2
13438: ARRAY
13439: PPUSH
13440: LD_STRING D9-Russ-1
13442: PPUSH
13443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13447: LD_INT 35
13449: PPUSH
13450: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 26
13461: PPUSH
13462: LD_INT 22
13464: PUSH
13465: LD_INT 3
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: PPUSH
13475: CALL_OW 70
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13653
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PPUSH
13503: LD_VAR 0 4
13507: PPUSH
13508: CALL_OW 74
13512: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13513: LD_ADDR_VAR 0 9
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 59
13533: PUSH
13534: EMPTY
13535: LIST
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 74
13584: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13585: LD_VAR 0 4
13589: PPUSH
13590: LD_VAR 0 8
13594: PPUSH
13595: CALL_OW 296
13599: PUSH
13600: LD_INT 8
13602: PLUS
13603: PUSH
13604: LD_VAR 0 4
13608: PPUSH
13609: LD_VAR 0 9
13613: PPUSH
13614: CALL_OW 296
13618: LESS
13619: IFFALSE 13637
// begin ComAttackUnit ( i , target1 ) ;
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 8
13630: PPUSH
13631: CALL_OW 115
// end else
13635: GO 13651
// begin ComAttackUnit ( i , target2 ) ;
13637: LD_VAR 0 4
13641: PPUSH
13642: LD_VAR 0 9
13646: PPUSH
13647: CALL_OW 115
// end ; end ;
13651: GO 13480
13653: POP
13654: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13655: LD_INT 26
13657: PPUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: EMPTY
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 70
13711: PUSH
13712: LD_INT 0
13714: EQUAL
13715: IFFALSE 13447
// end ; end_of_file
13717: LD_VAR 0 3
13721: RET
// every 0 0$1 do
13722: GO 13724
13724: DISABLE
// begin enable ;
13725: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13726: LD_INT 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 22
13734: PPUSH
13735: CALL 8759 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13739: LD_INT 3
13741: PPUSH
13742: LD_INT 20
13744: PPUSH
13745: LD_INT 22
13747: PPUSH
13748: LD_INT 23
13750: PPUSH
13751: CALL 9005 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13755: LD_INT 3
13757: PPUSH
13758: LD_INT 21
13760: PPUSH
13761: LD_INT 23
13763: PPUSH
13764: CALL 9282 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13768: LD_INT 22
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: LD_EXP 24
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: LD_INT 3
13784: PPUSH
13785: CALL 9754 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13789: LD_INT 23
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_EXP 25
13799: PPUSH
13800: LD_INT 33
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL 9754 0 5
// end ; end_of_file
13810: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 266
13820: PUSH
13821: LD_INT 0
13823: EQUAL
13824: IFFALSE 13833
// YouLost ( DepotDestroyed ) ;
13826: LD_STRING DepotDestroyed
13828: PPUSH
13829: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 1
13845: EQUAL
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 247
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: AND
13861: IFFALSE 13877
// deadsCounter = deadsCounter + 1 ;
13863: LD_ADDR_EXP 31
13867: PUSH
13868: LD_EXP 31
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: ST_TO_ADDR
// end ;
13877: PPOPN 1
13879: END
// on Command ( comandid ) do var i , j , tmp ;
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_INT 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14045
// begin if GetTaskList ( i ) > 0 then
13922: LD_VAR 0 2
13926: PPUSH
13927: CALL_OW 437
13931: PUSH
13932: LD_INT 0
13934: GREATER
13935: IFFALSE 14043
// begin for j = 1 to GetTaskList ( i ) do
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: DOUBLE
13943: LD_INT 1
13945: DEC
13946: ST_TO_ADDR
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 437
13956: PUSH
13957: FOR_TO
13958: IFFALSE 14041
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13960: LD_ADDR_VAR 0 4
13964: PUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 437
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PUSH
13981: LD_INT 4
13983: ARRAY
13984: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13985: LD_VAR 0 4
13989: PPUSH
13990: CALL_OW 255
13994: PUSH
13995: LD_INT 3
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 4
14003: PPUSH
14004: CALL_OW 247
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: PUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 264
14023: PUSH
14024: LD_INT 51
14026: EQUAL
14027: AND
14028: IFFALSE 14039
// ComStop ( i ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 141
// end ;
14039: GO 13957
14041: POP
14042: POP
// end ; end ;
14043: GO 13919
14045: POP
14046: POP
// end ;
14047: PPOPN 4
14049: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14050: LD_VAR 0 2
14054: PUSH
14055: LD_EXP 8
14059: EQUAL
14060: PUSH
14061: LD_EXP 21
14065: PUSH
14066: LD_INT 4
14068: NONEQUAL
14069: AND
14070: IFFALSE 14222
// begin if IsOk ( Mikhail ) then
14072: LD_EXP 8
14076: PPUSH
14077: CALL_OW 302
14081: IFFALSE 14089
// AskMikhail else
14083: CALL 7044 0 0
14087: GO 14222
// if IsOk ( lab1 ) then
14089: LD_INT 23
14091: PPUSH
14092: CALL_OW 302
14096: IFFALSE 14185
// begin InGameOn ;
14098: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14102: LD_EXP 8
14106: PPUSH
14107: LD_INT 6
14109: PPUSH
14110: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14114: LD_INT 23
14116: PPUSH
14117: LD_INT 6
14119: PPUSH
14120: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14124: LD_EXP 8
14128: PPUSH
14129: LD_INT 23
14131: PPUSH
14132: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14143: LD_EXP 8
14147: PPUSH
14148: CALL_OW 310
14152: PUSH
14153: LD_INT 23
14155: EQUAL
14156: PUSH
14157: LD_EXP 8
14161: PPUSH
14162: CALL_OW 301
14166: OR
14167: IFFALSE 14136
// SetSide ( lab1 , 1 ) ;
14169: LD_INT 23
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 235
// InGameOff ;
14179: CALL_OW 9
// end else
14183: GO 14222
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14185: LD_INT 3
14187: PPUSH
14188: LD_INT 6
14190: PPUSH
14191: LD_INT 2
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// ComHold ( Mikhail ) ;
14213: LD_EXP 8
14217: PPUSH
14218: CALL_OW 140
// end ; end ; end ;
14222: PPOPN 2
14224: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14225: LD_EXP 8
14229: PPUSH
14230: CALL_OW 257
14234: PUSH
14235: LD_INT 3
14237: NONEQUAL
14238: IFFALSE 14256
14240: GO 14242
14242: DISABLE
// begin enable ;
14243: ENABLE
// SetClass ( Mikhail , 3 ) ;
14244: LD_EXP 8
14248: PPUSH
14249: LD_INT 3
14251: PPUSH
14252: CALL_OW 336
// end ; end_of_file
14256: END
// every 0 0$1 trigger IsDead ( JMM ) do
14257: LD_EXP 1
14261: PPUSH
14262: CALL_OW 301
14266: IFFALSE 14278
14268: GO 14270
14270: DISABLE
// YouLost ( JMM ) ;
14271: LD_STRING JMM
14273: PPUSH
14274: CALL_OW 104
14278: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14279: LD_INT 22
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PUSH
14319: LD_INT 0
14321: EQUAL
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: AND
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: AND
14380: PUSH
14381: LD_INT 10
14383: PPUSH
14384: CALL_OW 255
14388: PUSH
14389: LD_INT 3
14391: EQUAL
14392: AND
14393: IFFALSE 14405
14395: GO 14397
14397: DISABLE
// YouLost ( Engineer ) ;
14398: LD_STRING Engineer
14400: PPUSH
14401: CALL_OW 104
14405: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 255
14413: PUSH
14414: LD_INT 3
14416: EQUAL
14417: PUSH
14418: LD_EXP 27
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: IFFALSE 14439
14429: GO 14431
14431: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14432: LD_STRING DepotCaptured
14434: PPUSH
14435: CALL_OW 104
14439: END
// export function PrepareTigers ; var i , un ; begin
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// for i = 1 to Difficulty do
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_OWVAR 67
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14596
// begin hc_sex = sex_male ;
14463: LD_ADDR_OWVAR 27
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// uc_side = 0 ;
14471: LD_ADDR_OWVAR 20
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// uc_nation = nation_nature ;
14479: LD_ADDR_OWVAR 21
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// hc_class = class_tiger ;
14487: LD_ADDR_OWVAR 28
14491: PUSH
14492: LD_INT 14
14494: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14495: LD_ADDR_OWVAR 31
14499: PUSH
14500: LD_EXP 14
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: LD_INT 0
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14520: LD_ADDR_OWVAR 35
14524: PUSH
14525: LD_INT 30
14527: PPUSH
14528: LD_INT 40
14530: PPUSH
14531: CALL_OW 12
14535: PUSH
14536: LD_INT 40
14538: PPUSH
14539: LD_INT 50
14541: PPUSH
14542: CALL_OW 12
14546: PUSH
14547: LD_INT 50
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: ST_TO_ADDR
// un = CreateHuman ;
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: CALL_OW 44
14578: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_INT 27
14586: PPUSH
14587: LD_INT 0
14589: PPUSH
14590: CALL_OW 49
// end ;
14594: GO 14460
14596: POP
14597: POP
// end ; end_of_file
14598: LD_VAR 0 1
14602: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 255
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: PUSH
14615: LD_INT 10
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 20
14632: PUSH
14633: LD_INT 1
14635: EQUAL
14636: AND
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 51
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: LD_INT 58
14673: PUSH
14674: EMPTY
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: PUSH
14692: LD_INT 0
14694: EQUAL
14695: AND
14696: IFFALSE 14787
14698: GO 14700
14700: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14701: LD_INT 9450
14703: PUSH
14704: LD_INT 8400
14706: PUSH
14707: LD_INT 6300
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_OWVAR 67
14719: ARRAY
14720: PPUSH
14721: CALL_OW 67
// if cargoEscape = 1 then
14725: LD_EXP 20
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: IFFALSE 14787
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14735: LD_EXP 9
14739: PPUSH
14740: LD_STRING D6-Pow-1
14742: PPUSH
14743: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14747: LD_EXP 1
14751: PPUSH
14752: LD_STRING D6-JMM-1
14754: PPUSH
14755: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14759: LD_EXP 9
14763: PPUSH
14764: LD_STRING D6-Pow-2
14766: PPUSH
14767: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14771: LD_EXP 1
14775: PPUSH
14776: LD_STRING D6-JMM-2
14778: PPUSH
14779: CALL_OW 88
// FinishMission ;
14783: CALL 14995 0 0
// end ; end ;
14787: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 255
14795: PUSH
14796: LD_INT 1
14798: EQUAL
14799: PUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 1
14810: EQUAL
14811: AND
14812: PUSH
14813: LD_EXP 20
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: AND
14822: IFFALSE 14889
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14830: LD_INT 11550
14832: PUSH
14833: LD_INT 10500
14835: PUSH
14836: LD_INT 9450
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: LD_OWVAR 67
14848: ARRAY
14849: PPUSH
14850: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: PUSH
14868: LD_OWVAR 67
14872: ARRAY
14873: PPUSH
14874: LD_INT 13
14876: PPUSH
14877: CALL 12986 0 2
// lastBattle = 1 ;
14881: LD_ADDR_EXP 27
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// end ;
14889: PPOPN 1
14891: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14892: LD_EXP 27
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: PUSH
14901: LD_INT 26
14903: PPUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 70
14932: PUSH
14933: LD_INT 0
14935: EQUAL
14936: AND
14937: IFFALSE 14994
14939: GO 14941
14941: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14942: LD_EXP 9
14946: PPUSH
14947: LD_STRING D6-Pow-1
14949: PPUSH
14950: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14954: LD_EXP 1
14958: PPUSH
14959: LD_STRING D6-JMM-1
14961: PPUSH
14962: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14966: LD_EXP 9
14970: PPUSH
14971: LD_STRING D6-Pow-2
14973: PPUSH
14974: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14978: LD_EXP 1
14982: PPUSH
14983: LD_STRING D6-JMM-2
14985: PPUSH
14986: CALL_OW 88
// FinishMission ;
14990: CALL 14995 0 0
// end ;
14994: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// if tick <= 18 18$00 then
15002: LD_OWVAR 1
15006: PUSH
15007: LD_INT 37800
15009: LESSEQUAL
15010: IFFALSE 15019
// SetAchievement ( ACH_ASPEED_2 ) ;
15012: LD_STRING ACH_ASPEED_2
15014: PPUSH
15015: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 24
15046: PUSH
15047: LD_INT 251
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if tmp then
15064: LD_VAR 0 2
15068: IFFALSE 15082
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_STRING 02_tanks_1
15077: PPUSH
15078: CALL 10459 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15082: LD_EXP 21
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: PUSH
15091: LD_EXP 8
15095: PPUSH
15096: CALL_OW 300
15100: AND
15101: IFFALSE 15115
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15103: LD_EXP 21
15107: PPUSH
15108: LD_STRING 02_mikhailStatus_1
15110: PPUSH
15111: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 274
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 275
15130: PPUSH
15131: LD_STRING 02_resources_4
15133: PPUSH
15134: CALL_OW 39
// m1 := false ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// m2 := false ;
15146: LD_ADDR_VAR 0 4
15150: PUSH
15151: LD_INT 0
15153: ST_TO_ADDR
// m3 := false ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 274
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 275
15177: PUSH
15178: LD_INT 200
15180: GREATEREQUAL
15181: IFFALSE 15203
// begin AddMedal ( Cans , 1 ) ;
15183: LD_STRING Cans
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 101
// m1 := true ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// end else
15201: GO 15214
// begin AddMedal ( Cans , - 1 ) ;
15203: LD_STRING Cans
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// end ; if deadsCounter < 2 then
15214: LD_EXP 31
15218: PUSH
15219: LD_INT 2
15221: LESS
15222: IFFALSE 15244
// begin AddMedal ( Deaths , 1 ) ;
15224: LD_STRING Deaths
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 101
// m2 := true ;
15234: LD_ADDR_VAR 0 4
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// end else
15242: GO 15255
// begin AddMedal ( Deaths , - 1 ) ;
15244: LD_STRING Deaths
15246: PPUSH
15247: LD_INT 1
15249: NEG
15250: PPUSH
15251: CALL_OW 101
// end ; if mikhailStatus = 0 then
15255: LD_EXP 21
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15276
// AddMedal ( Prisoner , - 1 ) ;
15265: LD_STRING Prisoner
15267: PPUSH
15268: LD_INT 1
15270: NEG
15271: PPUSH
15272: CALL_OW 101
// if mikhailStatus = 1 then
15276: LD_EXP 21
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: IFFALSE 15304
// begin AddMedal ( Prisoner , 1 ) ;
15286: LD_STRING Prisoner
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 101
// m3 := true ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15304: LD_EXP 21
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: IFFALSE 15332
// begin AddMedal ( Prisoner , 2 ) ;
15314: LD_STRING Prisoner
15316: PPUSH
15317: LD_INT 2
15319: PPUSH
15320: CALL_OW 101
// m3 := true ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15332: LD_EXP 21
15336: PUSH
15337: LD_INT 3
15339: EQUAL
15340: IFFALSE 15353
// AddMedal ( Prisoner , - 2 ) ;
15342: LD_STRING Prisoner
15344: PPUSH
15345: LD_INT 2
15347: NEG
15348: PPUSH
15349: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15353: LD_OWVAR 67
15357: PUSH
15358: LD_INT 3
15360: EQUAL
15361: PUSH
15362: LD_VAR 0 3
15366: AND
15367: PUSH
15368: LD_VAR 0 4
15372: AND
15373: PUSH
15374: LD_VAR 0 5
15378: AND
15379: IFFALSE 15391
// SetAchievementEX ( ACH_AMER , 2 ) ;
15381: LD_STRING ACH_AMER
15383: PPUSH
15384: LD_INT 2
15386: PPUSH
15387: CALL_OW 564
// GiveMedals ( MAIN ) ;
15391: LD_STRING MAIN
15393: PPUSH
15394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15398: LD_INT 22
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 23
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: PPUSH
15438: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15442: LD_EXP 1
15446: PPUSH
15447: LD_EXP 33
15451: PUSH
15452: LD_STRING JMM
15454: STR
15455: PPUSH
15456: CALL_OW 38
// if IsOK ( Bobby ) then
15460: LD_EXP 2
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15489
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15471: LD_EXP 2
15475: PPUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_STRING Bobby
15483: STR
15484: PPUSH
15485: CALL_OW 38
// if IsOK ( Cyrus ) then
15489: LD_EXP 3
15493: PPUSH
15494: CALL_OW 302
15498: IFFALSE 15518
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15500: LD_EXP 3
15504: PPUSH
15505: LD_EXP 33
15509: PUSH
15510: LD_STRING Cyrus
15512: STR
15513: PPUSH
15514: CALL_OW 38
// if IsOK ( Lisa ) then
15518: LD_EXP 4
15522: PPUSH
15523: CALL_OW 302
15527: IFFALSE 15547
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15529: LD_EXP 4
15533: PPUSH
15534: LD_EXP 33
15538: PUSH
15539: LD_STRING Lisa
15541: STR
15542: PPUSH
15543: CALL_OW 38
// if IsOK ( Khatam ) then
15547: LD_EXP 5
15551: PPUSH
15552: CALL_OW 302
15556: IFFALSE 15576
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15558: LD_EXP 5
15562: PPUSH
15563: LD_EXP 33
15567: PUSH
15568: LD_STRING Khatam
15570: STR
15571: PPUSH
15572: CALL_OW 38
// if IsOK ( Brian ) then
15576: LD_EXP 6
15580: PPUSH
15581: CALL_OW 302
15585: IFFALSE 15605
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15587: LD_EXP 6
15591: PPUSH
15592: LD_EXP 33
15596: PUSH
15597: LD_STRING Brian
15599: STR
15600: PPUSH
15601: CALL_OW 38
// if IsOk ( Jerry ) then
15605: LD_EXP 7
15609: PPUSH
15610: CALL_OW 302
15614: IFFALSE 15634
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15616: LD_EXP 7
15620: PPUSH
15621: LD_EXP 33
15625: PUSH
15626: LD_STRING Jerry
15628: STR
15629: PPUSH
15630: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15634: LD_EXP 21
15638: PUSH
15639: LD_INT 1
15641: EQUAL
15642: PUSH
15643: LD_EXP 8
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: LD_INT 1
15655: EQUAL
15656: AND
15657: PUSH
15658: LD_EXP 8
15662: PPUSH
15663: CALL_OW 302
15667: AND
15668: IFFALSE 15688
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15670: LD_EXP 8
15674: PPUSH
15675: LD_EXP 33
15679: PUSH
15680: LD_STRING Mikhail
15682: STR
15683: PPUSH
15684: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15688: LD_INT 50
15690: PUSH
15691: EMPTY
15692: LIST
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 69
15723: PUSH
15724: LD_EXP 1
15728: PUSH
15729: LD_EXP 2
15733: PUSH
15734: LD_EXP 3
15738: PUSH
15739: LD_EXP 4
15743: PUSH
15744: LD_EXP 5
15748: PUSH
15749: LD_EXP 6
15753: PUSH
15754: LD_EXP 7
15758: PUSH
15759: LD_EXP 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: DIFF
15774: PPUSH
15775: LD_STRING 02_other_survivors
15777: PPUSH
15778: CALL_OW 38
// YouWin ;
15782: CALL_OW 103
// end ; end_of_file
15786: LD_VAR 0 1
15790: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
15791: GO 15793
15793: DISABLE
// begin ru_radar := 98 ;
15794: LD_ADDR_EXP 35
15798: PUSH
15799: LD_INT 98
15801: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15802: LD_ADDR_EXP 36
15806: PUSH
15807: LD_INT 89
15809: ST_TO_ADDR
// us_hack := 99 ;
15810: LD_ADDR_EXP 37
15814: PUSH
15815: LD_INT 99
15817: ST_TO_ADDR
// us_artillery := 97 ;
15818: LD_ADDR_EXP 38
15822: PUSH
15823: LD_INT 97
15825: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15826: LD_ADDR_EXP 39
15830: PUSH
15831: LD_INT 91
15833: ST_TO_ADDR
// tech_Artillery := 80 ;
15834: LD_ADDR_EXP 40
15838: PUSH
15839: LD_INT 80
15841: ST_TO_ADDR
// tech_RadMat := 81 ;
15842: LD_ADDR_EXP 41
15846: PUSH
15847: LD_INT 81
15849: ST_TO_ADDR
// tech_BasicTools := 82 ;
15850: LD_ADDR_EXP 42
15854: PUSH
15855: LD_INT 82
15857: ST_TO_ADDR
// tech_Cargo := 83 ;
15858: LD_ADDR_EXP 43
15862: PUSH
15863: LD_INT 83
15865: ST_TO_ADDR
// tech_Track := 84 ;
15866: LD_ADDR_EXP 44
15870: PUSH
15871: LD_INT 84
15873: ST_TO_ADDR
// tech_Crane := 85 ;
15874: LD_ADDR_EXP 45
15878: PUSH
15879: LD_INT 85
15881: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15882: LD_ADDR_EXP 46
15886: PUSH
15887: LD_INT 86
15889: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15890: LD_ADDR_EXP 47
15894: PUSH
15895: LD_INT 87
15897: ST_TO_ADDR
// end ; end_of_file end_of_file
15898: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15899: GO 15901
15901: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15902: LD_STRING initStreamRollete();
15904: PPUSH
15905: CALL_OW 559
// InitStreamMode ;
15909: CALL 15918 0 0
// DefineStreamItems ( ) ;
15913: CALL 16358 0 0
// end ;
15917: END
// function InitStreamMode ; begin
15918: LD_INT 0
15920: PPUSH
// streamModeActive := false ;
15921: LD_ADDR_EXP 48
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// normalCounter := 36 ;
15929: LD_ADDR_EXP 49
15933: PUSH
15934: LD_INT 36
15936: ST_TO_ADDR
// hardcoreCounter := 16 ;
15937: LD_ADDR_EXP 50
15941: PUSH
15942: LD_INT 16
15944: ST_TO_ADDR
// sRocket := false ;
15945: LD_ADDR_EXP 53
15949: PUSH
15950: LD_INT 0
15952: ST_TO_ADDR
// sSpeed := false ;
15953: LD_ADDR_EXP 52
15957: PUSH
15958: LD_INT 0
15960: ST_TO_ADDR
// sEngine := false ;
15961: LD_ADDR_EXP 54
15965: PUSH
15966: LD_INT 0
15968: ST_TO_ADDR
// sSpec := false ;
15969: LD_ADDR_EXP 51
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// sLevel := false ;
15977: LD_ADDR_EXP 55
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// sArmoury := false ;
15985: LD_ADDR_EXP 56
15989: PUSH
15990: LD_INT 0
15992: ST_TO_ADDR
// sRadar := false ;
15993: LD_ADDR_EXP 57
15997: PUSH
15998: LD_INT 0
16000: ST_TO_ADDR
// sBunker := false ;
16001: LD_ADDR_EXP 58
16005: PUSH
16006: LD_INT 0
16008: ST_TO_ADDR
// sHack := false ;
16009: LD_ADDR_EXP 59
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// sFire := false ;
16017: LD_ADDR_EXP 60
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// sRefresh := false ;
16025: LD_ADDR_EXP 61
16029: PUSH
16030: LD_INT 0
16032: ST_TO_ADDR
// sExp := false ;
16033: LD_ADDR_EXP 62
16037: PUSH
16038: LD_INT 0
16040: ST_TO_ADDR
// sDepot := false ;
16041: LD_ADDR_EXP 63
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// sFlag := false ;
16049: LD_ADDR_EXP 64
16053: PUSH
16054: LD_INT 0
16056: ST_TO_ADDR
// sKamikadze := false ;
16057: LD_ADDR_EXP 72
16061: PUSH
16062: LD_INT 0
16064: ST_TO_ADDR
// sTroll := false ;
16065: LD_ADDR_EXP 73
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// sSlow := false ;
16073: LD_ADDR_EXP 74
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// sLack := false ;
16081: LD_ADDR_EXP 75
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// sTank := false ;
16089: LD_ADDR_EXP 77
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// sRemote := false ;
16097: LD_ADDR_EXP 78
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// sPowell := false ;
16105: LD_ADDR_EXP 79
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// sTeleport := false ;
16113: LD_ADDR_EXP 82
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// sOilTower := false ;
16121: LD_ADDR_EXP 84
16125: PUSH
16126: LD_INT 0
16128: ST_TO_ADDR
// sShovel := false ;
16129: LD_ADDR_EXP 85
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// sSheik := false ;
16137: LD_ADDR_EXP 86
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// sEarthquake := false ;
16145: LD_ADDR_EXP 88
16149: PUSH
16150: LD_INT 0
16152: ST_TO_ADDR
// sAI := false ;
16153: LD_ADDR_EXP 89
16157: PUSH
16158: LD_INT 0
16160: ST_TO_ADDR
// sCargo := false ;
16161: LD_ADDR_EXP 92
16165: PUSH
16166: LD_INT 0
16168: ST_TO_ADDR
// sDLaser := false ;
16169: LD_ADDR_EXP 93
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// sExchange := false ;
16177: LD_ADDR_EXP 94
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// sFac := false ;
16185: LD_ADDR_EXP 95
16189: PUSH
16190: LD_INT 0
16192: ST_TO_ADDR
// sPower := false ;
16193: LD_ADDR_EXP 96
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// sRandom := false ;
16201: LD_ADDR_EXP 97
16205: PUSH
16206: LD_INT 0
16208: ST_TO_ADDR
// sShield := false ;
16209: LD_ADDR_EXP 98
16213: PUSH
16214: LD_INT 0
16216: ST_TO_ADDR
// sTime := false ;
16217: LD_ADDR_EXP 99
16221: PUSH
16222: LD_INT 0
16224: ST_TO_ADDR
// sTools := false ;
16225: LD_ADDR_EXP 100
16229: PUSH
16230: LD_INT 0
16232: ST_TO_ADDR
// sSold := false ;
16233: LD_ADDR_EXP 65
16237: PUSH
16238: LD_INT 0
16240: ST_TO_ADDR
// sDiff := false ;
16241: LD_ADDR_EXP 66
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// sFog := false ;
16249: LD_ADDR_EXP 69
16253: PUSH
16254: LD_INT 0
16256: ST_TO_ADDR
// sReset := false ;
16257: LD_ADDR_EXP 70
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
// sSun := false ;
16265: LD_ADDR_EXP 71
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// sTiger := false ;
16273: LD_ADDR_EXP 67
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// sBomb := false ;
16281: LD_ADDR_EXP 68
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// sWound := false ;
16289: LD_ADDR_EXP 76
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// sBetray := false ;
16297: LD_ADDR_EXP 80
16301: PUSH
16302: LD_INT 0
16304: ST_TO_ADDR
// sContamin := false ;
16305: LD_ADDR_EXP 81
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// sOil := false ;
16313: LD_ADDR_EXP 83
16317: PUSH
16318: LD_INT 0
16320: ST_TO_ADDR
// sStu := false ;
16321: LD_ADDR_EXP 87
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// sBazooka := false ;
16329: LD_ADDR_EXP 90
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// sMortar := false ;
16337: LD_ADDR_EXP 91
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// sRanger := false ;
16345: LD_ADDR_EXP 101
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// end ;
16353: LD_VAR 0 1
16357: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16358: LD_INT 0
16360: PPUSH
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
// result := [ ] ;
16365: LD_ADDR_VAR 0 1
16369: PUSH
16370: EMPTY
16371: ST_TO_ADDR
// if campaign_id = 1 then
16372: LD_OWVAR 69
16376: PUSH
16377: LD_INT 1
16379: EQUAL
16380: IFFALSE 19318
// begin case mission_number of 1 :
16382: LD_OWVAR 70
16386: PUSH
16387: LD_INT 1
16389: DOUBLE
16390: EQUAL
16391: IFTRUE 16395
16393: GO 16459
16395: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16396: LD_ADDR_VAR 0 1
16400: PUSH
16401: LD_INT 2
16403: PUSH
16404: LD_INT 4
16406: PUSH
16407: LD_INT 11
16409: PUSH
16410: LD_INT 12
16412: PUSH
16413: LD_INT 15
16415: PUSH
16416: LD_INT 16
16418: PUSH
16419: LD_INT 22
16421: PUSH
16422: LD_INT 23
16424: PUSH
16425: LD_INT 26
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 101
16441: PUSH
16442: LD_INT 102
16444: PUSH
16445: LD_INT 106
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: ST_TO_ADDR
16457: GO 19316
16459: LD_INT 2
16461: DOUBLE
16462: EQUAL
16463: IFTRUE 16467
16465: GO 16539
16467: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 2
16475: PUSH
16476: LD_INT 4
16478: PUSH
16479: LD_INT 11
16481: PUSH
16482: LD_INT 12
16484: PUSH
16485: LD_INT 15
16487: PUSH
16488: LD_INT 16
16490: PUSH
16491: LD_INT 22
16493: PUSH
16494: LD_INT 23
16496: PUSH
16497: LD_INT 26
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 101
16513: PUSH
16514: LD_INT 102
16516: PUSH
16517: LD_INT 105
16519: PUSH
16520: LD_INT 106
16522: PUSH
16523: LD_INT 108
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: ST_TO_ADDR
16537: GO 19316
16539: LD_INT 3
16541: DOUBLE
16542: EQUAL
16543: IFTRUE 16547
16545: GO 16623
16547: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16548: LD_ADDR_VAR 0 1
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: LD_INT 4
16558: PUSH
16559: LD_INT 5
16561: PUSH
16562: LD_INT 11
16564: PUSH
16565: LD_INT 12
16567: PUSH
16568: LD_INT 15
16570: PUSH
16571: LD_INT 16
16573: PUSH
16574: LD_INT 22
16576: PUSH
16577: LD_INT 26
16579: PUSH
16580: LD_INT 36
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 101
16597: PUSH
16598: LD_INT 102
16600: PUSH
16601: LD_INT 105
16603: PUSH
16604: LD_INT 106
16606: PUSH
16607: LD_INT 108
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: ST_TO_ADDR
16621: GO 19316
16623: LD_INT 4
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16715
16631: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: LD_INT 4
16642: PUSH
16643: LD_INT 5
16645: PUSH
16646: LD_INT 8
16648: PUSH
16649: LD_INT 11
16651: PUSH
16652: LD_INT 12
16654: PUSH
16655: LD_INT 15
16657: PUSH
16658: LD_INT 16
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_INT 23
16666: PUSH
16667: LD_INT 26
16669: PUSH
16670: LD_INT 36
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 101
16689: PUSH
16690: LD_INT 102
16692: PUSH
16693: LD_INT 105
16695: PUSH
16696: LD_INT 106
16698: PUSH
16699: LD_INT 108
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: ST_TO_ADDR
16713: GO 19316
16715: LD_INT 5
16717: DOUBLE
16718: EQUAL
16719: IFTRUE 16723
16721: GO 16823
16723: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16724: LD_ADDR_VAR 0 1
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: LD_INT 6
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: LD_INT 11
16746: PUSH
16747: LD_INT 12
16749: PUSH
16750: LD_INT 15
16752: PUSH
16753: LD_INT 16
16755: PUSH
16756: LD_INT 22
16758: PUSH
16759: LD_INT 23
16761: PUSH
16762: LD_INT 25
16764: PUSH
16765: LD_INT 26
16767: PUSH
16768: LD_INT 36
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 101
16789: PUSH
16790: LD_INT 102
16792: PUSH
16793: LD_INT 105
16795: PUSH
16796: LD_INT 106
16798: PUSH
16799: LD_INT 108
16801: PUSH
16802: LD_INT 109
16804: PUSH
16805: LD_INT 112
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: ST_TO_ADDR
16821: GO 19316
16823: LD_INT 6
16825: DOUBLE
16826: EQUAL
16827: IFTRUE 16831
16829: GO 16951
16831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16832: LD_ADDR_VAR 0 1
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: LD_INT 4
16842: PUSH
16843: LD_INT 5
16845: PUSH
16846: LD_INT 6
16848: PUSH
16849: LD_INT 8
16851: PUSH
16852: LD_INT 11
16854: PUSH
16855: LD_INT 12
16857: PUSH
16858: LD_INT 15
16860: PUSH
16861: LD_INT 16
16863: PUSH
16864: LD_INT 20
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 22
16872: PUSH
16873: LD_INT 23
16875: PUSH
16876: LD_INT 25
16878: PUSH
16879: LD_INT 26
16881: PUSH
16882: LD_INT 30
16884: PUSH
16885: LD_INT 31
16887: PUSH
16888: LD_INT 32
16890: PUSH
16891: LD_INT 36
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 101
16917: PUSH
16918: LD_INT 102
16920: PUSH
16921: LD_INT 105
16923: PUSH
16924: LD_INT 106
16926: PUSH
16927: LD_INT 108
16929: PUSH
16930: LD_INT 109
16932: PUSH
16933: LD_INT 112
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: ST_TO_ADDR
16949: GO 19316
16951: LD_INT 7
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 17059
16959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16960: LD_ADDR_VAR 0 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 4
16970: PUSH
16971: LD_INT 5
16973: PUSH
16974: LD_INT 7
16976: PUSH
16977: LD_INT 11
16979: PUSH
16980: LD_INT 12
16982: PUSH
16983: LD_INT 15
16985: PUSH
16986: LD_INT 16
16988: PUSH
16989: LD_INT 20
16991: PUSH
16992: LD_INT 21
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_INT 23
17000: PUSH
17001: LD_INT 25
17003: PUSH
17004: LD_INT 26
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 101
17025: PUSH
17026: LD_INT 102
17028: PUSH
17029: LD_INT 103
17031: PUSH
17032: LD_INT 105
17034: PUSH
17035: LD_INT 106
17037: PUSH
17038: LD_INT 108
17040: PUSH
17041: LD_INT 112
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: ST_TO_ADDR
17057: GO 19316
17059: LD_INT 8
17061: DOUBLE
17062: EQUAL
17063: IFTRUE 17067
17065: GO 17195
17067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17068: LD_ADDR_VAR 0 1
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: LD_INT 6
17084: PUSH
17085: LD_INT 7
17087: PUSH
17088: LD_INT 8
17090: PUSH
17091: LD_INT 11
17093: PUSH
17094: LD_INT 12
17096: PUSH
17097: LD_INT 15
17099: PUSH
17100: LD_INT 16
17102: PUSH
17103: LD_INT 20
17105: PUSH
17106: LD_INT 21
17108: PUSH
17109: LD_INT 22
17111: PUSH
17112: LD_INT 23
17114: PUSH
17115: LD_INT 25
17117: PUSH
17118: LD_INT 26
17120: PUSH
17121: LD_INT 30
17123: PUSH
17124: LD_INT 31
17126: PUSH
17127: LD_INT 32
17129: PUSH
17130: LD_INT 36
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 101
17157: PUSH
17158: LD_INT 102
17160: PUSH
17161: LD_INT 103
17163: PUSH
17164: LD_INT 105
17166: PUSH
17167: LD_INT 106
17169: PUSH
17170: LD_INT 108
17172: PUSH
17173: LD_INT 109
17175: PUSH
17176: LD_INT 112
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: ST_TO_ADDR
17193: GO 19316
17195: LD_INT 9
17197: DOUBLE
17198: EQUAL
17199: IFTRUE 17203
17201: GO 17339
17203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 4
17214: PUSH
17215: LD_INT 5
17217: PUSH
17218: LD_INT 6
17220: PUSH
17221: LD_INT 7
17223: PUSH
17224: LD_INT 8
17226: PUSH
17227: LD_INT 11
17229: PUSH
17230: LD_INT 12
17232: PUSH
17233: LD_INT 15
17235: PUSH
17236: LD_INT 16
17238: PUSH
17239: LD_INT 20
17241: PUSH
17242: LD_INT 21
17244: PUSH
17245: LD_INT 22
17247: PUSH
17248: LD_INT 23
17250: PUSH
17251: LD_INT 25
17253: PUSH
17254: LD_INT 26
17256: PUSH
17257: LD_INT 28
17259: PUSH
17260: LD_INT 30
17262: PUSH
17263: LD_INT 31
17265: PUSH
17266: LD_INT 32
17268: PUSH
17269: LD_INT 36
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 101
17297: PUSH
17298: LD_INT 102
17300: PUSH
17301: LD_INT 103
17303: PUSH
17304: LD_INT 105
17306: PUSH
17307: LD_INT 106
17309: PUSH
17310: LD_INT 108
17312: PUSH
17313: LD_INT 109
17315: PUSH
17316: LD_INT 112
17318: PUSH
17319: LD_INT 114
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: ST_TO_ADDR
17337: GO 19316
17339: LD_INT 10
17341: DOUBLE
17342: EQUAL
17343: IFTRUE 17347
17345: GO 17531
17347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17348: LD_ADDR_VAR 0 1
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: LD_INT 4
17358: PUSH
17359: LD_INT 5
17361: PUSH
17362: LD_INT 6
17364: PUSH
17365: LD_INT 7
17367: PUSH
17368: LD_INT 8
17370: PUSH
17371: LD_INT 9
17373: PUSH
17374: LD_INT 10
17376: PUSH
17377: LD_INT 11
17379: PUSH
17380: LD_INT 12
17382: PUSH
17383: LD_INT 13
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: LD_INT 15
17391: PUSH
17392: LD_INT 16
17394: PUSH
17395: LD_INT 17
17397: PUSH
17398: LD_INT 18
17400: PUSH
17401: LD_INT 19
17403: PUSH
17404: LD_INT 20
17406: PUSH
17407: LD_INT 21
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_INT 23
17415: PUSH
17416: LD_INT 24
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 26
17424: PUSH
17425: LD_INT 28
17427: PUSH
17428: LD_INT 30
17430: PUSH
17431: LD_INT 31
17433: PUSH
17434: LD_INT 32
17436: PUSH
17437: LD_INT 36
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 101
17473: PUSH
17474: LD_INT 102
17476: PUSH
17477: LD_INT 103
17479: PUSH
17480: LD_INT 104
17482: PUSH
17483: LD_INT 105
17485: PUSH
17486: LD_INT 106
17488: PUSH
17489: LD_INT 107
17491: PUSH
17492: LD_INT 108
17494: PUSH
17495: LD_INT 109
17497: PUSH
17498: LD_INT 110
17500: PUSH
17501: LD_INT 111
17503: PUSH
17504: LD_INT 112
17506: PUSH
17507: LD_INT 114
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: ST_TO_ADDR
17529: GO 19316
17531: LD_INT 11
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17539
17537: GO 17731
17539: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17540: LD_ADDR_VAR 0 1
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: LD_INT 4
17553: PUSH
17554: LD_INT 5
17556: PUSH
17557: LD_INT 6
17559: PUSH
17560: LD_INT 7
17562: PUSH
17563: LD_INT 8
17565: PUSH
17566: LD_INT 9
17568: PUSH
17569: LD_INT 10
17571: PUSH
17572: LD_INT 11
17574: PUSH
17575: LD_INT 12
17577: PUSH
17578: LD_INT 13
17580: PUSH
17581: LD_INT 14
17583: PUSH
17584: LD_INT 15
17586: PUSH
17587: LD_INT 16
17589: PUSH
17590: LD_INT 17
17592: PUSH
17593: LD_INT 18
17595: PUSH
17596: LD_INT 19
17598: PUSH
17599: LD_INT 20
17601: PUSH
17602: LD_INT 21
17604: PUSH
17605: LD_INT 22
17607: PUSH
17608: LD_INT 23
17610: PUSH
17611: LD_INT 24
17613: PUSH
17614: LD_INT 25
17616: PUSH
17617: LD_INT 26
17619: PUSH
17620: LD_INT 28
17622: PUSH
17623: LD_INT 30
17625: PUSH
17626: LD_INT 31
17628: PUSH
17629: LD_INT 32
17631: PUSH
17632: LD_INT 34
17634: PUSH
17635: LD_INT 36
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 101
17673: PUSH
17674: LD_INT 102
17676: PUSH
17677: LD_INT 103
17679: PUSH
17680: LD_INT 104
17682: PUSH
17683: LD_INT 105
17685: PUSH
17686: LD_INT 106
17688: PUSH
17689: LD_INT 107
17691: PUSH
17692: LD_INT 108
17694: PUSH
17695: LD_INT 109
17697: PUSH
17698: LD_INT 110
17700: PUSH
17701: LD_INT 111
17703: PUSH
17704: LD_INT 112
17706: PUSH
17707: LD_INT 114
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: ST_TO_ADDR
17729: GO 19316
17731: LD_INT 12
17733: DOUBLE
17734: EQUAL
17735: IFTRUE 17739
17737: GO 17947
17739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17740: LD_ADDR_VAR 0 1
17744: PUSH
17745: LD_INT 1
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 3
17753: PUSH
17754: LD_INT 4
17756: PUSH
17757: LD_INT 5
17759: PUSH
17760: LD_INT 6
17762: PUSH
17763: LD_INT 7
17765: PUSH
17766: LD_INT 8
17768: PUSH
17769: LD_INT 9
17771: PUSH
17772: LD_INT 10
17774: PUSH
17775: LD_INT 11
17777: PUSH
17778: LD_INT 12
17780: PUSH
17781: LD_INT 13
17783: PUSH
17784: LD_INT 14
17786: PUSH
17787: LD_INT 15
17789: PUSH
17790: LD_INT 16
17792: PUSH
17793: LD_INT 17
17795: PUSH
17796: LD_INT 18
17798: PUSH
17799: LD_INT 19
17801: PUSH
17802: LD_INT 20
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 22
17810: PUSH
17811: LD_INT 23
17813: PUSH
17814: LD_INT 24
17816: PUSH
17817: LD_INT 25
17819: PUSH
17820: LD_INT 26
17822: PUSH
17823: LD_INT 27
17825: PUSH
17826: LD_INT 28
17828: PUSH
17829: LD_INT 30
17831: PUSH
17832: LD_INT 31
17834: PUSH
17835: LD_INT 32
17837: PUSH
17838: LD_INT 33
17840: PUSH
17841: LD_INT 34
17843: PUSH
17844: LD_INT 36
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 101
17885: PUSH
17886: LD_INT 102
17888: PUSH
17889: LD_INT 103
17891: PUSH
17892: LD_INT 104
17894: PUSH
17895: LD_INT 105
17897: PUSH
17898: LD_INT 106
17900: PUSH
17901: LD_INT 107
17903: PUSH
17904: LD_INT 108
17906: PUSH
17907: LD_INT 109
17909: PUSH
17910: LD_INT 110
17912: PUSH
17913: LD_INT 111
17915: PUSH
17916: LD_INT 112
17918: PUSH
17919: LD_INT 113
17921: PUSH
17922: LD_INT 114
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: ST_TO_ADDR
17945: GO 19316
17947: LD_INT 13
17949: DOUBLE
17950: EQUAL
17951: IFTRUE 17955
17953: GO 18151
17955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17956: LD_ADDR_VAR 0 1
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: LD_INT 3
17969: PUSH
17970: LD_INT 4
17972: PUSH
17973: LD_INT 5
17975: PUSH
17976: LD_INT 8
17978: PUSH
17979: LD_INT 9
17981: PUSH
17982: LD_INT 10
17984: PUSH
17985: LD_INT 11
17987: PUSH
17988: LD_INT 12
17990: PUSH
17991: LD_INT 14
17993: PUSH
17994: LD_INT 15
17996: PUSH
17997: LD_INT 16
17999: PUSH
18000: LD_INT 17
18002: PUSH
18003: LD_INT 18
18005: PUSH
18006: LD_INT 19
18008: PUSH
18009: LD_INT 20
18011: PUSH
18012: LD_INT 21
18014: PUSH
18015: LD_INT 22
18017: PUSH
18018: LD_INT 23
18020: PUSH
18021: LD_INT 24
18023: PUSH
18024: LD_INT 25
18026: PUSH
18027: LD_INT 26
18029: PUSH
18030: LD_INT 27
18032: PUSH
18033: LD_INT 28
18035: PUSH
18036: LD_INT 30
18038: PUSH
18039: LD_INT 31
18041: PUSH
18042: LD_INT 32
18044: PUSH
18045: LD_INT 33
18047: PUSH
18048: LD_INT 34
18050: PUSH
18051: LD_INT 36
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 101
18089: PUSH
18090: LD_INT 102
18092: PUSH
18093: LD_INT 103
18095: PUSH
18096: LD_INT 104
18098: PUSH
18099: LD_INT 105
18101: PUSH
18102: LD_INT 106
18104: PUSH
18105: LD_INT 107
18107: PUSH
18108: LD_INT 108
18110: PUSH
18111: LD_INT 109
18113: PUSH
18114: LD_INT 110
18116: PUSH
18117: LD_INT 111
18119: PUSH
18120: LD_INT 112
18122: PUSH
18123: LD_INT 113
18125: PUSH
18126: LD_INT 114
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: ST_TO_ADDR
18149: GO 19316
18151: LD_INT 14
18153: DOUBLE
18154: EQUAL
18155: IFTRUE 18159
18157: GO 18371
18159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18160: LD_ADDR_VAR 0 1
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 3
18173: PUSH
18174: LD_INT 4
18176: PUSH
18177: LD_INT 5
18179: PUSH
18180: LD_INT 6
18182: PUSH
18183: LD_INT 7
18185: PUSH
18186: LD_INT 8
18188: PUSH
18189: LD_INT 9
18191: PUSH
18192: LD_INT 10
18194: PUSH
18195: LD_INT 11
18197: PUSH
18198: LD_INT 12
18200: PUSH
18201: LD_INT 13
18203: PUSH
18204: LD_INT 14
18206: PUSH
18207: LD_INT 15
18209: PUSH
18210: LD_INT 16
18212: PUSH
18213: LD_INT 17
18215: PUSH
18216: LD_INT 18
18218: PUSH
18219: LD_INT 19
18221: PUSH
18222: LD_INT 20
18224: PUSH
18225: LD_INT 21
18227: PUSH
18228: LD_INT 22
18230: PUSH
18231: LD_INT 23
18233: PUSH
18234: LD_INT 24
18236: PUSH
18237: LD_INT 25
18239: PUSH
18240: LD_INT 26
18242: PUSH
18243: LD_INT 27
18245: PUSH
18246: LD_INT 28
18248: PUSH
18249: LD_INT 29
18251: PUSH
18252: LD_INT 30
18254: PUSH
18255: LD_INT 31
18257: PUSH
18258: LD_INT 32
18260: PUSH
18261: LD_INT 33
18263: PUSH
18264: LD_INT 34
18266: PUSH
18267: LD_INT 36
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 101
18309: PUSH
18310: LD_INT 102
18312: PUSH
18313: LD_INT 103
18315: PUSH
18316: LD_INT 104
18318: PUSH
18319: LD_INT 105
18321: PUSH
18322: LD_INT 106
18324: PUSH
18325: LD_INT 107
18327: PUSH
18328: LD_INT 108
18330: PUSH
18331: LD_INT 109
18333: PUSH
18334: LD_INT 110
18336: PUSH
18337: LD_INT 111
18339: PUSH
18340: LD_INT 112
18342: PUSH
18343: LD_INT 113
18345: PUSH
18346: LD_INT 114
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: ST_TO_ADDR
18369: GO 19316
18371: LD_INT 15
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18591
18379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: LD_INT 3
18393: PUSH
18394: LD_INT 4
18396: PUSH
18397: LD_INT 5
18399: PUSH
18400: LD_INT 6
18402: PUSH
18403: LD_INT 7
18405: PUSH
18406: LD_INT 8
18408: PUSH
18409: LD_INT 9
18411: PUSH
18412: LD_INT 10
18414: PUSH
18415: LD_INT 11
18417: PUSH
18418: LD_INT 12
18420: PUSH
18421: LD_INT 13
18423: PUSH
18424: LD_INT 14
18426: PUSH
18427: LD_INT 15
18429: PUSH
18430: LD_INT 16
18432: PUSH
18433: LD_INT 17
18435: PUSH
18436: LD_INT 18
18438: PUSH
18439: LD_INT 19
18441: PUSH
18442: LD_INT 20
18444: PUSH
18445: LD_INT 21
18447: PUSH
18448: LD_INT 22
18450: PUSH
18451: LD_INT 23
18453: PUSH
18454: LD_INT 24
18456: PUSH
18457: LD_INT 25
18459: PUSH
18460: LD_INT 26
18462: PUSH
18463: LD_INT 27
18465: PUSH
18466: LD_INT 28
18468: PUSH
18469: LD_INT 29
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 31
18477: PUSH
18478: LD_INT 32
18480: PUSH
18481: LD_INT 33
18483: PUSH
18484: LD_INT 34
18486: PUSH
18487: LD_INT 36
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 101
18529: PUSH
18530: LD_INT 102
18532: PUSH
18533: LD_INT 103
18535: PUSH
18536: LD_INT 104
18538: PUSH
18539: LD_INT 105
18541: PUSH
18542: LD_INT 106
18544: PUSH
18545: LD_INT 107
18547: PUSH
18548: LD_INT 108
18550: PUSH
18551: LD_INT 109
18553: PUSH
18554: LD_INT 110
18556: PUSH
18557: LD_INT 111
18559: PUSH
18560: LD_INT 112
18562: PUSH
18563: LD_INT 113
18565: PUSH
18566: LD_INT 114
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: ST_TO_ADDR
18589: GO 19316
18591: LD_INT 16
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 18723
18599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: LD_INT 2
18607: PUSH
18608: LD_INT 4
18610: PUSH
18611: LD_INT 5
18613: PUSH
18614: LD_INT 7
18616: PUSH
18617: LD_INT 11
18619: PUSH
18620: LD_INT 12
18622: PUSH
18623: LD_INT 15
18625: PUSH
18626: LD_INT 16
18628: PUSH
18629: LD_INT 20
18631: PUSH
18632: LD_INT 21
18634: PUSH
18635: LD_INT 22
18637: PUSH
18638: LD_INT 23
18640: PUSH
18641: LD_INT 25
18643: PUSH
18644: LD_INT 26
18646: PUSH
18647: LD_INT 30
18649: PUSH
18650: LD_INT 31
18652: PUSH
18653: LD_INT 32
18655: PUSH
18656: LD_INT 33
18658: PUSH
18659: LD_INT 34
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 101
18685: PUSH
18686: LD_INT 102
18688: PUSH
18689: LD_INT 103
18691: PUSH
18692: LD_INT 106
18694: PUSH
18695: LD_INT 108
18697: PUSH
18698: LD_INT 112
18700: PUSH
18701: LD_INT 113
18703: PUSH
18704: LD_INT 114
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: ST_TO_ADDR
18721: GO 19316
18723: LD_INT 17
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18943
18731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18732: LD_ADDR_VAR 0 1
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 3
18745: PUSH
18746: LD_INT 4
18748: PUSH
18749: LD_INT 5
18751: PUSH
18752: LD_INT 6
18754: PUSH
18755: LD_INT 7
18757: PUSH
18758: LD_INT 8
18760: PUSH
18761: LD_INT 9
18763: PUSH
18764: LD_INT 10
18766: PUSH
18767: LD_INT 11
18769: PUSH
18770: LD_INT 12
18772: PUSH
18773: LD_INT 13
18775: PUSH
18776: LD_INT 14
18778: PUSH
18779: LD_INT 15
18781: PUSH
18782: LD_INT 16
18784: PUSH
18785: LD_INT 17
18787: PUSH
18788: LD_INT 18
18790: PUSH
18791: LD_INT 19
18793: PUSH
18794: LD_INT 20
18796: PUSH
18797: LD_INT 21
18799: PUSH
18800: LD_INT 22
18802: PUSH
18803: LD_INT 23
18805: PUSH
18806: LD_INT 24
18808: PUSH
18809: LD_INT 25
18811: PUSH
18812: LD_INT 26
18814: PUSH
18815: LD_INT 27
18817: PUSH
18818: LD_INT 28
18820: PUSH
18821: LD_INT 29
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 31
18829: PUSH
18830: LD_INT 32
18832: PUSH
18833: LD_INT 33
18835: PUSH
18836: LD_INT 34
18838: PUSH
18839: LD_INT 36
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 101
18881: PUSH
18882: LD_INT 102
18884: PUSH
18885: LD_INT 103
18887: PUSH
18888: LD_INT 104
18890: PUSH
18891: LD_INT 105
18893: PUSH
18894: LD_INT 106
18896: PUSH
18897: LD_INT 107
18899: PUSH
18900: LD_INT 108
18902: PUSH
18903: LD_INT 109
18905: PUSH
18906: LD_INT 110
18908: PUSH
18909: LD_INT 111
18911: PUSH
18912: LD_INT 112
18914: PUSH
18915: LD_INT 113
18917: PUSH
18918: LD_INT 114
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: ST_TO_ADDR
18941: GO 19316
18943: LD_INT 18
18945: DOUBLE
18946: EQUAL
18947: IFTRUE 18951
18949: GO 19087
18951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18952: LD_ADDR_VAR 0 1
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 4
18962: PUSH
18963: LD_INT 5
18965: PUSH
18966: LD_INT 7
18968: PUSH
18969: LD_INT 11
18971: PUSH
18972: LD_INT 12
18974: PUSH
18975: LD_INT 15
18977: PUSH
18978: LD_INT 16
18980: PUSH
18981: LD_INT 20
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 22
18989: PUSH
18990: LD_INT 23
18992: PUSH
18993: LD_INT 25
18995: PUSH
18996: LD_INT 26
18998: PUSH
18999: LD_INT 30
19001: PUSH
19002: LD_INT 31
19004: PUSH
19005: LD_INT 32
19007: PUSH
19008: LD_INT 33
19010: PUSH
19011: LD_INT 34
19013: PUSH
19014: LD_INT 35
19016: PUSH
19017: LD_INT 36
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 101
19045: PUSH
19046: LD_INT 102
19048: PUSH
19049: LD_INT 103
19051: PUSH
19052: LD_INT 106
19054: PUSH
19055: LD_INT 108
19057: PUSH
19058: LD_INT 112
19060: PUSH
19061: LD_INT 113
19063: PUSH
19064: LD_INT 114
19066: PUSH
19067: LD_INT 115
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: ST_TO_ADDR
19085: GO 19316
19087: LD_INT 19
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19315
19095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19096: LD_ADDR_VAR 0 1
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: LD_INT 2
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: LD_INT 4
19112: PUSH
19113: LD_INT 5
19115: PUSH
19116: LD_INT 6
19118: PUSH
19119: LD_INT 7
19121: PUSH
19122: LD_INT 8
19124: PUSH
19125: LD_INT 9
19127: PUSH
19128: LD_INT 10
19130: PUSH
19131: LD_INT 11
19133: PUSH
19134: LD_INT 12
19136: PUSH
19137: LD_INT 13
19139: PUSH
19140: LD_INT 14
19142: PUSH
19143: LD_INT 15
19145: PUSH
19146: LD_INT 16
19148: PUSH
19149: LD_INT 17
19151: PUSH
19152: LD_INT 18
19154: PUSH
19155: LD_INT 19
19157: PUSH
19158: LD_INT 20
19160: PUSH
19161: LD_INT 21
19163: PUSH
19164: LD_INT 22
19166: PUSH
19167: LD_INT 23
19169: PUSH
19170: LD_INT 24
19172: PUSH
19173: LD_INT 25
19175: PUSH
19176: LD_INT 26
19178: PUSH
19179: LD_INT 27
19181: PUSH
19182: LD_INT 28
19184: PUSH
19185: LD_INT 29
19187: PUSH
19188: LD_INT 30
19190: PUSH
19191: LD_INT 31
19193: PUSH
19194: LD_INT 32
19196: PUSH
19197: LD_INT 33
19199: PUSH
19200: LD_INT 34
19202: PUSH
19203: LD_INT 35
19205: PUSH
19206: LD_INT 36
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 101
19249: PUSH
19250: LD_INT 102
19252: PUSH
19253: LD_INT 103
19255: PUSH
19256: LD_INT 104
19258: PUSH
19259: LD_INT 105
19261: PUSH
19262: LD_INT 106
19264: PUSH
19265: LD_INT 107
19267: PUSH
19268: LD_INT 108
19270: PUSH
19271: LD_INT 109
19273: PUSH
19274: LD_INT 110
19276: PUSH
19277: LD_INT 111
19279: PUSH
19280: LD_INT 112
19282: PUSH
19283: LD_INT 113
19285: PUSH
19286: LD_INT 114
19288: PUSH
19289: LD_INT 115
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: ST_TO_ADDR
19313: GO 19316
19315: POP
// end else
19316: GO 19535
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: LD_INT 2
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: LD_INT 4
19334: PUSH
19335: LD_INT 5
19337: PUSH
19338: LD_INT 6
19340: PUSH
19341: LD_INT 7
19343: PUSH
19344: LD_INT 8
19346: PUSH
19347: LD_INT 9
19349: PUSH
19350: LD_INT 10
19352: PUSH
19353: LD_INT 11
19355: PUSH
19356: LD_INT 12
19358: PUSH
19359: LD_INT 13
19361: PUSH
19362: LD_INT 14
19364: PUSH
19365: LD_INT 15
19367: PUSH
19368: LD_INT 16
19370: PUSH
19371: LD_INT 17
19373: PUSH
19374: LD_INT 18
19376: PUSH
19377: LD_INT 19
19379: PUSH
19380: LD_INT 20
19382: PUSH
19383: LD_INT 21
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_INT 23
19391: PUSH
19392: LD_INT 24
19394: PUSH
19395: LD_INT 25
19397: PUSH
19398: LD_INT 26
19400: PUSH
19401: LD_INT 27
19403: PUSH
19404: LD_INT 28
19406: PUSH
19407: LD_INT 29
19409: PUSH
19410: LD_INT 30
19412: PUSH
19413: LD_INT 31
19415: PUSH
19416: LD_INT 32
19418: PUSH
19419: LD_INT 33
19421: PUSH
19422: LD_INT 34
19424: PUSH
19425: LD_INT 35
19427: PUSH
19428: LD_INT 36
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 101
19471: PUSH
19472: LD_INT 102
19474: PUSH
19475: LD_INT 103
19477: PUSH
19478: LD_INT 104
19480: PUSH
19481: LD_INT 105
19483: PUSH
19484: LD_INT 106
19486: PUSH
19487: LD_INT 107
19489: PUSH
19490: LD_INT 108
19492: PUSH
19493: LD_INT 109
19495: PUSH
19496: LD_INT 110
19498: PUSH
19499: LD_INT 111
19501: PUSH
19502: LD_INT 112
19504: PUSH
19505: LD_INT 113
19507: PUSH
19508: LD_INT 114
19510: PUSH
19511: LD_INT 115
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: ST_TO_ADDR
// if result then
19535: LD_VAR 0 1
19539: IFFALSE 19828
// begin normal :=  ;
19541: LD_ADDR_VAR 0 3
19545: PUSH
19546: LD_STRING 
19548: ST_TO_ADDR
// hardcore :=  ;
19549: LD_ADDR_VAR 0 4
19553: PUSH
19554: LD_STRING 
19556: ST_TO_ADDR
// for i = 1 to normalCounter do
19557: LD_ADDR_VAR 0 5
19561: PUSH
19562: DOUBLE
19563: LD_INT 1
19565: DEC
19566: ST_TO_ADDR
19567: LD_EXP 49
19571: PUSH
19572: FOR_TO
19573: IFFALSE 19674
// begin tmp := 0 ;
19575: LD_ADDR_VAR 0 2
19579: PUSH
19580: LD_STRING 0
19582: ST_TO_ADDR
// if result [ 1 ] then
19583: LD_VAR 0 1
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: IFFALSE 19656
// if result [ 1 ] [ 1 ] = i then
19593: LD_VAR 0 1
19597: PUSH
19598: LD_INT 1
19600: ARRAY
19601: PUSH
19602: LD_INT 1
19604: ARRAY
19605: PUSH
19606: LD_VAR 0 5
19610: EQUAL
19611: IFFALSE 19656
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19613: LD_ADDR_VAR 0 1
19617: PUSH
19618: LD_VAR 0 1
19622: PPUSH
19623: LD_INT 1
19625: PPUSH
19626: LD_VAR 0 1
19630: PUSH
19631: LD_INT 1
19633: ARRAY
19634: PPUSH
19635: LD_INT 1
19637: PPUSH
19638: CALL_OW 3
19642: PPUSH
19643: CALL_OW 1
19647: ST_TO_ADDR
// tmp := 1 ;
19648: LD_ADDR_VAR 0 2
19652: PUSH
19653: LD_STRING 1
19655: ST_TO_ADDR
// end ; normal := normal & tmp ;
19656: LD_ADDR_VAR 0 3
19660: PUSH
19661: LD_VAR 0 3
19665: PUSH
19666: LD_VAR 0 2
19670: STR
19671: ST_TO_ADDR
// end ;
19672: GO 19572
19674: POP
19675: POP
// for i = 1 to hardcoreCounter do
19676: LD_ADDR_VAR 0 5
19680: PUSH
19681: DOUBLE
19682: LD_INT 1
19684: DEC
19685: ST_TO_ADDR
19686: LD_EXP 50
19690: PUSH
19691: FOR_TO
19692: IFFALSE 19797
// begin tmp := 0 ;
19694: LD_ADDR_VAR 0 2
19698: PUSH
19699: LD_STRING 0
19701: ST_TO_ADDR
// if result [ 2 ] then
19702: LD_VAR 0 1
19706: PUSH
19707: LD_INT 2
19709: ARRAY
19710: IFFALSE 19779
// if result [ 2 ] [ 1 ] = 100 + i then
19712: LD_VAR 0 1
19716: PUSH
19717: LD_INT 2
19719: ARRAY
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: PUSH
19725: LD_INT 100
19727: PUSH
19728: LD_VAR 0 5
19732: PLUS
19733: EQUAL
19734: IFFALSE 19779
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19736: LD_ADDR_VAR 0 1
19740: PUSH
19741: LD_VAR 0 1
19745: PPUSH
19746: LD_INT 2
19748: PPUSH
19749: LD_VAR 0 1
19753: PUSH
19754: LD_INT 2
19756: ARRAY
19757: PPUSH
19758: LD_INT 1
19760: PPUSH
19761: CALL_OW 3
19765: PPUSH
19766: CALL_OW 1
19770: ST_TO_ADDR
// tmp := 1 ;
19771: LD_ADDR_VAR 0 2
19775: PUSH
19776: LD_STRING 1
19778: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19779: LD_ADDR_VAR 0 4
19783: PUSH
19784: LD_VAR 0 4
19788: PUSH
19789: LD_VAR 0 2
19793: STR
19794: ST_TO_ADDR
// end ;
19795: GO 19691
19797: POP
19798: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19799: LD_STRING getStreamItemsFromMission("
19801: PUSH
19802: LD_VAR 0 3
19806: STR
19807: PUSH
19808: LD_STRING ","
19810: STR
19811: PUSH
19812: LD_VAR 0 4
19816: STR
19817: PUSH
19818: LD_STRING ")
19820: STR
19821: PPUSH
19822: CALL_OW 559
// end else
19826: GO 19835
// ToLua ( getStreamItemsFromMission("","") ) ;
19828: LD_STRING getStreamItemsFromMission("","")
19830: PPUSH
19831: CALL_OW 559
// end ;
19835: LD_VAR 0 1
19839: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19840: LD_VAR 0 2
19844: PUSH
19845: LD_INT 100
19847: EQUAL
19848: IFFALSE 20797
// begin if not StreamModeActive then
19850: LD_EXP 48
19854: NOT
19855: IFFALSE 19865
// StreamModeActive := true ;
19857: LD_ADDR_EXP 48
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 0 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 0
19872: EQUAL
19873: IFFALSE 19879
// InitStreamMode ;
19875: CALL 15918 0 0
// if p3 = 1 then
19879: LD_VAR 0 3
19883: PUSH
19884: LD_INT 1
19886: EQUAL
19887: IFFALSE 19897
// sRocket := true ;
19889: LD_ADDR_EXP 53
19893: PUSH
19894: LD_INT 1
19896: ST_TO_ADDR
// if p3 = 2 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 2
19904: EQUAL
19905: IFFALSE 19915
// sSpeed := true ;
19907: LD_ADDR_EXP 52
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 3 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 3
19922: EQUAL
19923: IFFALSE 19933
// sEngine := true ;
19925: LD_ADDR_EXP 54
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 4 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 4
19940: EQUAL
19941: IFFALSE 19951
// sSpec := true ;
19943: LD_ADDR_EXP 51
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 5 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 5
19958: EQUAL
19959: IFFALSE 19969
// sLevel := true ;
19961: LD_ADDR_EXP 55
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 6 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 6
19976: EQUAL
19977: IFFALSE 19987
// sArmoury := true ;
19979: LD_ADDR_EXP 56
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 7 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 7
19994: EQUAL
19995: IFFALSE 20005
// sRadar := true ;
19997: LD_ADDR_EXP 57
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 8 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 8
20012: EQUAL
20013: IFFALSE 20023
// sBunker := true ;
20015: LD_ADDR_EXP 58
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 9 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 9
20030: EQUAL
20031: IFFALSE 20041
// sHack := true ;
20033: LD_ADDR_EXP 59
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 10 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 10
20048: EQUAL
20049: IFFALSE 20059
// sFire := true ;
20051: LD_ADDR_EXP 60
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 11 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 11
20066: EQUAL
20067: IFFALSE 20077
// sRefresh := true ;
20069: LD_ADDR_EXP 61
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 12 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 12
20084: EQUAL
20085: IFFALSE 20095
// sExp := true ;
20087: LD_ADDR_EXP 62
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 13 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 13
20102: EQUAL
20103: IFFALSE 20113
// sDepot := true ;
20105: LD_ADDR_EXP 63
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 14 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 14
20120: EQUAL
20121: IFFALSE 20131
// sFlag := true ;
20123: LD_ADDR_EXP 64
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// if p3 = 15 then
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 15
20138: EQUAL
20139: IFFALSE 20149
// sKamikadze := true ;
20141: LD_ADDR_EXP 72
20145: PUSH
20146: LD_INT 1
20148: ST_TO_ADDR
// if p3 = 16 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 16
20156: EQUAL
20157: IFFALSE 20167
// sTroll := true ;
20159: LD_ADDR_EXP 73
20163: PUSH
20164: LD_INT 1
20166: ST_TO_ADDR
// if p3 = 17 then
20167: LD_VAR 0 3
20171: PUSH
20172: LD_INT 17
20174: EQUAL
20175: IFFALSE 20185
// sSlow := true ;
20177: LD_ADDR_EXP 74
20181: PUSH
20182: LD_INT 1
20184: ST_TO_ADDR
// if p3 = 18 then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 18
20192: EQUAL
20193: IFFALSE 20203
// sLack := true ;
20195: LD_ADDR_EXP 75
20199: PUSH
20200: LD_INT 1
20202: ST_TO_ADDR
// if p3 = 19 then
20203: LD_VAR 0 3
20207: PUSH
20208: LD_INT 19
20210: EQUAL
20211: IFFALSE 20221
// sTank := true ;
20213: LD_ADDR_EXP 77
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 20 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 20
20228: EQUAL
20229: IFFALSE 20239
// sRemote := true ;
20231: LD_ADDR_EXP 78
20235: PUSH
20236: LD_INT 1
20238: ST_TO_ADDR
// if p3 = 21 then
20239: LD_VAR 0 3
20243: PUSH
20244: LD_INT 21
20246: EQUAL
20247: IFFALSE 20257
// sPowell := true ;
20249: LD_ADDR_EXP 79
20253: PUSH
20254: LD_INT 1
20256: ST_TO_ADDR
// if p3 = 22 then
20257: LD_VAR 0 3
20261: PUSH
20262: LD_INT 22
20264: EQUAL
20265: IFFALSE 20275
// sTeleport := true ;
20267: LD_ADDR_EXP 82
20271: PUSH
20272: LD_INT 1
20274: ST_TO_ADDR
// if p3 = 23 then
20275: LD_VAR 0 3
20279: PUSH
20280: LD_INT 23
20282: EQUAL
20283: IFFALSE 20293
// sOilTower := true ;
20285: LD_ADDR_EXP 84
20289: PUSH
20290: LD_INT 1
20292: ST_TO_ADDR
// if p3 = 24 then
20293: LD_VAR 0 3
20297: PUSH
20298: LD_INT 24
20300: EQUAL
20301: IFFALSE 20311
// sShovel := true ;
20303: LD_ADDR_EXP 85
20307: PUSH
20308: LD_INT 1
20310: ST_TO_ADDR
// if p3 = 25 then
20311: LD_VAR 0 3
20315: PUSH
20316: LD_INT 25
20318: EQUAL
20319: IFFALSE 20329
// sSheik := true ;
20321: LD_ADDR_EXP 86
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// if p3 = 26 then
20329: LD_VAR 0 3
20333: PUSH
20334: LD_INT 26
20336: EQUAL
20337: IFFALSE 20347
// sEarthquake := true ;
20339: LD_ADDR_EXP 88
20343: PUSH
20344: LD_INT 1
20346: ST_TO_ADDR
// if p3 = 27 then
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 27
20354: EQUAL
20355: IFFALSE 20365
// sAI := true ;
20357: LD_ADDR_EXP 89
20361: PUSH
20362: LD_INT 1
20364: ST_TO_ADDR
// if p3 = 28 then
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 28
20372: EQUAL
20373: IFFALSE 20383
// sCargo := true ;
20375: LD_ADDR_EXP 92
20379: PUSH
20380: LD_INT 1
20382: ST_TO_ADDR
// if p3 = 29 then
20383: LD_VAR 0 3
20387: PUSH
20388: LD_INT 29
20390: EQUAL
20391: IFFALSE 20401
// sDLaser := true ;
20393: LD_ADDR_EXP 93
20397: PUSH
20398: LD_INT 1
20400: ST_TO_ADDR
// if p3 = 30 then
20401: LD_VAR 0 3
20405: PUSH
20406: LD_INT 30
20408: EQUAL
20409: IFFALSE 20419
// sExchange := true ;
20411: LD_ADDR_EXP 94
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
// if p3 = 31 then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 31
20426: EQUAL
20427: IFFALSE 20437
// sFac := true ;
20429: LD_ADDR_EXP 95
20433: PUSH
20434: LD_INT 1
20436: ST_TO_ADDR
// if p3 = 32 then
20437: LD_VAR 0 3
20441: PUSH
20442: LD_INT 32
20444: EQUAL
20445: IFFALSE 20455
// sPower := true ;
20447: LD_ADDR_EXP 96
20451: PUSH
20452: LD_INT 1
20454: ST_TO_ADDR
// if p3 = 33 then
20455: LD_VAR 0 3
20459: PUSH
20460: LD_INT 33
20462: EQUAL
20463: IFFALSE 20473
// sRandom := true ;
20465: LD_ADDR_EXP 97
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// if p3 = 34 then
20473: LD_VAR 0 3
20477: PUSH
20478: LD_INT 34
20480: EQUAL
20481: IFFALSE 20491
// sShield := true ;
20483: LD_ADDR_EXP 98
20487: PUSH
20488: LD_INT 1
20490: ST_TO_ADDR
// if p3 = 35 then
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 35
20498: EQUAL
20499: IFFALSE 20509
// sTime := true ;
20501: LD_ADDR_EXP 99
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 36 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 36
20516: EQUAL
20517: IFFALSE 20527
// sTools := true ;
20519: LD_ADDR_EXP 100
20523: PUSH
20524: LD_INT 1
20526: ST_TO_ADDR
// if p3 = 101 then
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 101
20534: EQUAL
20535: IFFALSE 20545
// sSold := true ;
20537: LD_ADDR_EXP 65
20541: PUSH
20542: LD_INT 1
20544: ST_TO_ADDR
// if p3 = 102 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_INT 102
20552: EQUAL
20553: IFFALSE 20563
// sDiff := true ;
20555: LD_ADDR_EXP 66
20559: PUSH
20560: LD_INT 1
20562: ST_TO_ADDR
// if p3 = 103 then
20563: LD_VAR 0 3
20567: PUSH
20568: LD_INT 103
20570: EQUAL
20571: IFFALSE 20581
// sFog := true ;
20573: LD_ADDR_EXP 69
20577: PUSH
20578: LD_INT 1
20580: ST_TO_ADDR
// if p3 = 104 then
20581: LD_VAR 0 3
20585: PUSH
20586: LD_INT 104
20588: EQUAL
20589: IFFALSE 20599
// sReset := true ;
20591: LD_ADDR_EXP 70
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// if p3 = 105 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 105
20606: EQUAL
20607: IFFALSE 20617
// sSun := true ;
20609: LD_ADDR_EXP 71
20613: PUSH
20614: LD_INT 1
20616: ST_TO_ADDR
// if p3 = 106 then
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 106
20624: EQUAL
20625: IFFALSE 20635
// sTiger := true ;
20627: LD_ADDR_EXP 67
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// if p3 = 107 then
20635: LD_VAR 0 3
20639: PUSH
20640: LD_INT 107
20642: EQUAL
20643: IFFALSE 20653
// sBomb := true ;
20645: LD_ADDR_EXP 68
20649: PUSH
20650: LD_INT 1
20652: ST_TO_ADDR
// if p3 = 108 then
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 108
20660: EQUAL
20661: IFFALSE 20671
// sWound := true ;
20663: LD_ADDR_EXP 76
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 109 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 109
20678: EQUAL
20679: IFFALSE 20689
// sBetray := true ;
20681: LD_ADDR_EXP 80
20685: PUSH
20686: LD_INT 1
20688: ST_TO_ADDR
// if p3 = 110 then
20689: LD_VAR 0 3
20693: PUSH
20694: LD_INT 110
20696: EQUAL
20697: IFFALSE 20707
// sContamin := true ;
20699: LD_ADDR_EXP 81
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// if p3 = 111 then
20707: LD_VAR 0 3
20711: PUSH
20712: LD_INT 111
20714: EQUAL
20715: IFFALSE 20725
// sOil := true ;
20717: LD_ADDR_EXP 83
20721: PUSH
20722: LD_INT 1
20724: ST_TO_ADDR
// if p3 = 112 then
20725: LD_VAR 0 3
20729: PUSH
20730: LD_INT 112
20732: EQUAL
20733: IFFALSE 20743
// sStu := true ;
20735: LD_ADDR_EXP 87
20739: PUSH
20740: LD_INT 1
20742: ST_TO_ADDR
// if p3 = 113 then
20743: LD_VAR 0 3
20747: PUSH
20748: LD_INT 113
20750: EQUAL
20751: IFFALSE 20761
// sBazooka := true ;
20753: LD_ADDR_EXP 90
20757: PUSH
20758: LD_INT 1
20760: ST_TO_ADDR
// if p3 = 114 then
20761: LD_VAR 0 3
20765: PUSH
20766: LD_INT 114
20768: EQUAL
20769: IFFALSE 20779
// sMortar := true ;
20771: LD_ADDR_EXP 91
20775: PUSH
20776: LD_INT 1
20778: ST_TO_ADDR
// if p3 = 115 then
20779: LD_VAR 0 3
20783: PUSH
20784: LD_INT 115
20786: EQUAL
20787: IFFALSE 20797
// sRanger := true ;
20789: LD_ADDR_EXP 101
20793: PUSH
20794: LD_INT 1
20796: ST_TO_ADDR
// end ; end ;
20797: PPOPN 6
20799: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20800: LD_EXP 48
20804: PUSH
20805: LD_EXP 53
20809: AND
20810: IFFALSE 20934
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
// begin enable ;
20819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20820: LD_ADDR_VAR 0 2
20824: PUSH
20825: LD_INT 22
20827: PUSH
20828: LD_OWVAR 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 34
20842: PUSH
20843: LD_INT 7
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 34
20852: PUSH
20853: LD_INT 45
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 34
20862: PUSH
20863: LD_INT 28
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 34
20872: PUSH
20873: LD_INT 47
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: ST_TO_ADDR
// if not tmp then
20896: LD_VAR 0 2
20900: NOT
20901: IFFALSE 20905
// exit ;
20903: GO 20934
// for i in tmp do
20905: LD_ADDR_VAR 0 1
20909: PUSH
20910: LD_VAR 0 2
20914: PUSH
20915: FOR_IN
20916: IFFALSE 20932
// begin SetLives ( i , 0 ) ;
20918: LD_VAR 0 1
20922: PPUSH
20923: LD_INT 0
20925: PPUSH
20926: CALL_OW 234
// end ;
20930: GO 20915
20932: POP
20933: POP
// end ;
20934: PPOPN 2
20936: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20937: LD_EXP 48
20941: PUSH
20942: LD_EXP 54
20946: AND
20947: IFFALSE 21031
20949: GO 20951
20951: DISABLE
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
// begin enable ;
20956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_OWVAR 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 32
20976: PUSH
20977: LD_INT 3
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: ST_TO_ADDR
// if not tmp then
20993: LD_VAR 0 2
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21031
// for i in tmp do
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: LD_VAR 0 2
21011: PUSH
21012: FOR_IN
21013: IFFALSE 21029
// begin SetLives ( i , 0 ) ;
21015: LD_VAR 0 1
21019: PPUSH
21020: LD_INT 0
21022: PPUSH
21023: CALL_OW 234
// end ;
21027: GO 21012
21029: POP
21030: POP
// end ;
21031: PPOPN 2
21033: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21034: LD_EXP 48
21038: PUSH
21039: LD_EXP 51
21043: AND
21044: IFFALSE 21137
21046: GO 21048
21048: DISABLE
21049: LD_INT 0
21051: PPUSH
// begin enable ;
21052: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21053: LD_ADDR_VAR 0 1
21057: PUSH
21058: LD_INT 22
21060: PUSH
21061: LD_OWVAR 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: LD_INT 25
21075: PUSH
21076: LD_INT 5
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 25
21085: PUSH
21086: LD_INT 9
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 8
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PPUSH
21113: CALL_OW 69
21117: PUSH
21118: FOR_IN
21119: IFFALSE 21135
// begin SetClass ( i , 1 ) ;
21121: LD_VAR 0 1
21125: PPUSH
21126: LD_INT 1
21128: PPUSH
21129: CALL_OW 336
// end ;
21133: GO 21118
21135: POP
21136: POP
// end ;
21137: PPOPN 1
21139: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21140: LD_EXP 48
21144: PUSH
21145: LD_EXP 52
21149: AND
21150: PUSH
21151: LD_OWVAR 65
21155: PUSH
21156: LD_INT 7
21158: LESS
21159: AND
21160: IFFALSE 21174
21162: GO 21164
21164: DISABLE
// begin enable ;
21165: ENABLE
// game_speed := 7 ;
21166: LD_ADDR_OWVAR 65
21170: PUSH
21171: LD_INT 7
21173: ST_TO_ADDR
// end ;
21174: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21175: LD_EXP 48
21179: PUSH
21180: LD_EXP 55
21184: AND
21185: IFFALSE 21387
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21195: LD_ADDR_VAR 0 3
21199: PUSH
21200: LD_INT 81
21202: PUSH
21203: LD_OWVAR 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PPUSH
21226: CALL_OW 69
21230: ST_TO_ADDR
// if not tmp then
21231: LD_VAR 0 3
21235: NOT
21236: IFFALSE 21240
// exit ;
21238: GO 21387
// if tmp > 5 then
21240: LD_VAR 0 3
21244: PUSH
21245: LD_INT 5
21247: GREATER
21248: IFFALSE 21260
// k := 5 else
21250: LD_ADDR_VAR 0 2
21254: PUSH
21255: LD_INT 5
21257: ST_TO_ADDR
21258: GO 21270
// k := tmp ;
21260: LD_ADDR_VAR 0 2
21264: PUSH
21265: LD_VAR 0 3
21269: ST_TO_ADDR
// for i := 1 to k do
21270: LD_ADDR_VAR 0 1
21274: PUSH
21275: DOUBLE
21276: LD_INT 1
21278: DEC
21279: ST_TO_ADDR
21280: LD_VAR 0 2
21284: PUSH
21285: FOR_TO
21286: IFFALSE 21385
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21288: LD_VAR 0 3
21292: PUSH
21293: LD_VAR 0 1
21297: ARRAY
21298: PPUSH
21299: LD_VAR 0 1
21303: PUSH
21304: LD_INT 4
21306: MOD
21307: PUSH
21308: LD_INT 1
21310: PLUS
21311: PPUSH
21312: CALL_OW 259
21316: PUSH
21317: LD_INT 10
21319: LESS
21320: IFFALSE 21383
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21322: LD_VAR 0 3
21326: PUSH
21327: LD_VAR 0 1
21331: ARRAY
21332: PPUSH
21333: LD_VAR 0 1
21337: PUSH
21338: LD_INT 4
21340: MOD
21341: PUSH
21342: LD_INT 1
21344: PLUS
21345: PPUSH
21346: LD_VAR 0 3
21350: PUSH
21351: LD_VAR 0 1
21355: ARRAY
21356: PPUSH
21357: LD_VAR 0 1
21361: PUSH
21362: LD_INT 4
21364: MOD
21365: PUSH
21366: LD_INT 1
21368: PLUS
21369: PPUSH
21370: CALL_OW 259
21374: PUSH
21375: LD_INT 1
21377: PLUS
21378: PPUSH
21379: CALL_OW 237
21383: GO 21285
21385: POP
21386: POP
// end ;
21387: PPOPN 3
21389: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21390: LD_EXP 48
21394: PUSH
21395: LD_EXP 56
21399: AND
21400: IFFALSE 21420
21402: GO 21404
21404: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21405: LD_INT 4
21407: PPUSH
21408: LD_OWVAR 2
21412: PPUSH
21413: LD_INT 0
21415: PPUSH
21416: CALL_OW 324
21420: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21421: LD_EXP 48
21425: PUSH
21426: LD_EXP 85
21430: AND
21431: IFFALSE 21451
21433: GO 21435
21435: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21436: LD_INT 19
21438: PPUSH
21439: LD_OWVAR 2
21443: PPUSH
21444: LD_INT 0
21446: PPUSH
21447: CALL_OW 324
21451: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21452: LD_EXP 48
21456: PUSH
21457: LD_EXP 57
21461: AND
21462: IFFALSE 21564
21464: GO 21466
21466: DISABLE
21467: LD_INT 0
21469: PPUSH
21470: PPUSH
// begin enable ;
21471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21472: LD_ADDR_VAR 0 2
21476: PUSH
21477: LD_INT 22
21479: PUSH
21480: LD_OWVAR 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 34
21494: PUSH
21495: LD_INT 11
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 30
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PPUSH
21521: CALL_OW 69
21525: ST_TO_ADDR
// if not tmp then
21526: LD_VAR 0 2
21530: NOT
21531: IFFALSE 21535
// exit ;
21533: GO 21564
// for i in tmp do
21535: LD_ADDR_VAR 0 1
21539: PUSH
21540: LD_VAR 0 2
21544: PUSH
21545: FOR_IN
21546: IFFALSE 21562
// begin SetLives ( i , 0 ) ;
21548: LD_VAR 0 1
21552: PPUSH
21553: LD_INT 0
21555: PPUSH
21556: CALL_OW 234
// end ;
21560: GO 21545
21562: POP
21563: POP
// end ;
21564: PPOPN 2
21566: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21567: LD_EXP 48
21571: PUSH
21572: LD_EXP 58
21576: AND
21577: IFFALSE 21597
21579: GO 21581
21581: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21582: LD_INT 32
21584: PPUSH
21585: LD_OWVAR 2
21589: PPUSH
21590: LD_INT 0
21592: PPUSH
21593: CALL_OW 324
21597: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21598: LD_EXP 48
21602: PUSH
21603: LD_EXP 59
21607: AND
21608: IFFALSE 21789
21610: GO 21612
21612: DISABLE
21613: LD_INT 0
21615: PPUSH
21616: PPUSH
21617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 22
21625: PUSH
21626: LD_OWVAR 2
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 33
21637: PUSH
21638: LD_INT 3
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 69
21653: ST_TO_ADDR
// if not tmp then
21654: LD_VAR 0 2
21658: NOT
21659: IFFALSE 21663
// exit ;
21661: GO 21789
// side := 0 ;
21663: LD_ADDR_VAR 0 3
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// for i := 1 to 8 do
21671: LD_ADDR_VAR 0 1
21675: PUSH
21676: DOUBLE
21677: LD_INT 1
21679: DEC
21680: ST_TO_ADDR
21681: LD_INT 8
21683: PUSH
21684: FOR_TO
21685: IFFALSE 21733
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21687: LD_OWVAR 2
21691: PUSH
21692: LD_VAR 0 1
21696: NONEQUAL
21697: PUSH
21698: LD_OWVAR 2
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 81
21712: PUSH
21713: LD_INT 2
21715: EQUAL
21716: AND
21717: IFFALSE 21731
// begin side := i ;
21719: LD_ADDR_VAR 0 3
21723: PUSH
21724: LD_VAR 0 1
21728: ST_TO_ADDR
// break ;
21729: GO 21733
// end ;
21731: GO 21684
21733: POP
21734: POP
// if not side then
21735: LD_VAR 0 3
21739: NOT
21740: IFFALSE 21744
// exit ;
21742: GO 21789
// for i := 1 to tmp do
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: DOUBLE
21750: LD_INT 1
21752: DEC
21753: ST_TO_ADDR
21754: LD_VAR 0 2
21758: PUSH
21759: FOR_TO
21760: IFFALSE 21787
// if Prob ( 60 ) then
21762: LD_INT 60
21764: PPUSH
21765: CALL_OW 13
21769: IFFALSE 21785
// SetSide ( i , side ) ;
21771: LD_VAR 0 1
21775: PPUSH
21776: LD_VAR 0 3
21780: PPUSH
21781: CALL_OW 235
21785: GO 21759
21787: POP
21788: POP
// end ;
21789: PPOPN 3
21791: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21792: LD_EXP 48
21796: PUSH
21797: LD_EXP 61
21801: AND
21802: IFFALSE 21921
21804: GO 21806
21806: DISABLE
21807: LD_INT 0
21809: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21810: LD_ADDR_VAR 0 1
21814: PUSH
21815: LD_INT 22
21817: PUSH
21818: LD_OWVAR 2
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 21
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 3
21839: PUSH
21840: LD_INT 23
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: LIST
21858: PPUSH
21859: CALL_OW 69
21863: PUSH
21864: FOR_IN
21865: IFFALSE 21919
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21867: LD_VAR 0 1
21871: PPUSH
21872: CALL_OW 257
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 4
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: IN
21895: IFFALSE 21917
// SetClass ( un , rand ( 1 , 4 ) ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: LD_INT 1
21904: PPUSH
21905: LD_INT 4
21907: PPUSH
21908: CALL_OW 12
21912: PPUSH
21913: CALL_OW 336
21917: GO 21864
21919: POP
21920: POP
// end ;
21921: PPOPN 1
21923: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21924: LD_EXP 48
21928: PUSH
21929: LD_EXP 60
21933: AND
21934: IFFALSE 22013
21936: GO 21938
21938: DISABLE
21939: LD_INT 0
21941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21942: LD_ADDR_VAR 0 1
21946: PUSH
21947: LD_INT 22
21949: PUSH
21950: LD_OWVAR 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 21
21961: PUSH
21962: LD_INT 3
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PPUSH
21973: CALL_OW 69
21977: ST_TO_ADDR
// if not tmp then
21978: LD_VAR 0 1
21982: NOT
21983: IFFALSE 21987
// exit ;
21985: GO 22013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21987: LD_VAR 0 1
21991: PUSH
21992: LD_INT 1
21994: PPUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 12
22004: ARRAY
22005: PPUSH
22006: LD_INT 100
22008: PPUSH
22009: CALL_OW 234
// end ;
22013: PPOPN 1
22015: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22016: LD_EXP 48
22020: PUSH
22021: LD_EXP 62
22025: AND
22026: IFFALSE 22124
22028: GO 22030
22030: DISABLE
22031: LD_INT 0
22033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22034: LD_ADDR_VAR 0 1
22038: PUSH
22039: LD_INT 22
22041: PUSH
22042: LD_OWVAR 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 21
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PPUSH
22065: CALL_OW 69
22069: ST_TO_ADDR
// if not tmp then
22070: LD_VAR 0 1
22074: NOT
22075: IFFALSE 22079
// exit ;
22077: GO 22124
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22079: LD_VAR 0 1
22083: PUSH
22084: LD_INT 1
22086: PPUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 12
22096: ARRAY
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: LD_INT 4
22103: PPUSH
22104: CALL_OW 12
22108: PPUSH
22109: LD_INT 3000
22111: PPUSH
22112: LD_INT 9000
22114: PPUSH
22115: CALL_OW 12
22119: PPUSH
22120: CALL_OW 492
// end ;
22124: PPOPN 1
22126: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22127: LD_EXP 48
22131: PUSH
22132: LD_EXP 63
22136: AND
22137: IFFALSE 22157
22139: GO 22141
22141: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22142: LD_INT 1
22144: PPUSH
22145: LD_OWVAR 2
22149: PPUSH
22150: LD_INT 0
22152: PPUSH
22153: CALL_OW 324
22157: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22158: LD_EXP 48
22162: PUSH
22163: LD_EXP 64
22167: AND
22168: IFFALSE 22251
22170: GO 22172
22172: DISABLE
22173: LD_INT 0
22175: PPUSH
22176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22177: LD_ADDR_VAR 0 2
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_OWVAR 2
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 21
22196: PUSH
22197: LD_INT 3
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 69
22212: ST_TO_ADDR
// if not tmp then
22213: LD_VAR 0 2
22217: NOT
22218: IFFALSE 22222
// exit ;
22220: GO 22251
// for i in tmp do
22222: LD_ADDR_VAR 0 1
22226: PUSH
22227: LD_VAR 0 2
22231: PUSH
22232: FOR_IN
22233: IFFALSE 22249
// SetBLevel ( i , 10 ) ;
22235: LD_VAR 0 1
22239: PPUSH
22240: LD_INT 10
22242: PPUSH
22243: CALL_OW 241
22247: GO 22232
22249: POP
22250: POP
// end ;
22251: PPOPN 2
22253: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22254: LD_EXP 48
22258: PUSH
22259: LD_EXP 65
22263: AND
22264: IFFALSE 22375
22266: GO 22268
22268: DISABLE
22269: LD_INT 0
22271: PPUSH
22272: PPUSH
22273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22274: LD_ADDR_VAR 0 3
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_OWVAR 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: ST_TO_ADDR
// if not tmp then
22310: LD_VAR 0 3
22314: NOT
22315: IFFALSE 22319
// exit ;
22317: GO 22375
// un := tmp [ rand ( 1 , tmp ) ] ;
22319: LD_ADDR_VAR 0 2
22323: PUSH
22324: LD_VAR 0 3
22328: PUSH
22329: LD_INT 1
22331: PPUSH
22332: LD_VAR 0 3
22336: PPUSH
22337: CALL_OW 12
22341: ARRAY
22342: ST_TO_ADDR
// if Crawls ( un ) then
22343: LD_VAR 0 2
22347: PPUSH
22348: CALL_OW 318
22352: IFFALSE 22363
// ComWalk ( un ) ;
22354: LD_VAR 0 2
22358: PPUSH
22359: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22363: LD_VAR 0 2
22367: PPUSH
22368: LD_INT 5
22370: PPUSH
22371: CALL_OW 336
// end ;
22375: PPOPN 3
22377: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22378: LD_EXP 48
22382: PUSH
22383: LD_EXP 66
22387: AND
22388: PUSH
22389: LD_OWVAR 67
22393: PUSH
22394: LD_INT 3
22396: LESS
22397: AND
22398: IFFALSE 22417
22400: GO 22402
22402: DISABLE
// Difficulty := Difficulty + 1 ;
22403: LD_ADDR_OWVAR 67
22407: PUSH
22408: LD_OWVAR 67
22412: PUSH
22413: LD_INT 1
22415: PLUS
22416: ST_TO_ADDR
22417: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22418: LD_EXP 48
22422: PUSH
22423: LD_EXP 67
22427: AND
22428: IFFALSE 22531
22430: GO 22432
22432: DISABLE
22433: LD_INT 0
22435: PPUSH
// begin for i := 1 to 5 do
22436: LD_ADDR_VAR 0 1
22440: PUSH
22441: DOUBLE
22442: LD_INT 1
22444: DEC
22445: ST_TO_ADDR
22446: LD_INT 5
22448: PUSH
22449: FOR_TO
22450: IFFALSE 22529
// begin uc_nation := nation_nature ;
22452: LD_ADDR_OWVAR 21
22456: PUSH
22457: LD_INT 0
22459: ST_TO_ADDR
// uc_side := 0 ;
22460: LD_ADDR_OWVAR 20
22464: PUSH
22465: LD_INT 0
22467: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22468: LD_ADDR_OWVAR 29
22472: PUSH
22473: LD_INT 12
22475: PUSH
22476: LD_INT 12
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
// hc_agressivity := 20 ;
22483: LD_ADDR_OWVAR 35
22487: PUSH
22488: LD_INT 20
22490: ST_TO_ADDR
// hc_class := class_tiger ;
22491: LD_ADDR_OWVAR 28
22495: PUSH
22496: LD_INT 14
22498: ST_TO_ADDR
// hc_gallery :=  ;
22499: LD_ADDR_OWVAR 33
22503: PUSH
22504: LD_STRING 
22506: ST_TO_ADDR
// hc_name :=  ;
22507: LD_ADDR_OWVAR 26
22511: PUSH
22512: LD_STRING 
22514: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22515: CALL_OW 44
22519: PPUSH
22520: LD_INT 0
22522: PPUSH
22523: CALL_OW 51
// end ;
22527: GO 22449
22529: POP
22530: POP
// end ;
22531: PPOPN 1
22533: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22534: LD_EXP 48
22538: PUSH
22539: LD_EXP 68
22543: AND
22544: IFFALSE 22553
22546: GO 22548
22548: DISABLE
// StreamSibBomb ;
22549: CALL 22554 0 0
22553: END
// export function StreamSibBomb ; var i , x , y ; begin
22554: LD_INT 0
22556: PPUSH
22557: PPUSH
22558: PPUSH
22559: PPUSH
// result := false ;
22560: LD_ADDR_VAR 0 1
22564: PUSH
22565: LD_INT 0
22567: ST_TO_ADDR
// for i := 1 to 16 do
22568: LD_ADDR_VAR 0 2
22572: PUSH
22573: DOUBLE
22574: LD_INT 1
22576: DEC
22577: ST_TO_ADDR
22578: LD_INT 16
22580: PUSH
22581: FOR_TO
22582: IFFALSE 22781
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22584: LD_ADDR_VAR 0 3
22588: PUSH
22589: LD_INT 10
22591: PUSH
22592: LD_INT 20
22594: PUSH
22595: LD_INT 30
22597: PUSH
22598: LD_INT 40
22600: PUSH
22601: LD_INT 50
22603: PUSH
22604: LD_INT 60
22606: PUSH
22607: LD_INT 70
22609: PUSH
22610: LD_INT 80
22612: PUSH
22613: LD_INT 90
22615: PUSH
22616: LD_INT 100
22618: PUSH
22619: LD_INT 110
22621: PUSH
22622: LD_INT 120
22624: PUSH
22625: LD_INT 130
22627: PUSH
22628: LD_INT 140
22630: PUSH
22631: LD_INT 150
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PPUSH
22654: LD_INT 15
22656: PPUSH
22657: CALL_OW 12
22661: ARRAY
22662: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22663: LD_ADDR_VAR 0 4
22667: PUSH
22668: LD_INT 10
22670: PUSH
22671: LD_INT 20
22673: PUSH
22674: LD_INT 30
22676: PUSH
22677: LD_INT 40
22679: PUSH
22680: LD_INT 50
22682: PUSH
22683: LD_INT 60
22685: PUSH
22686: LD_INT 70
22688: PUSH
22689: LD_INT 80
22691: PUSH
22692: LD_INT 90
22694: PUSH
22695: LD_INT 100
22697: PUSH
22698: LD_INT 110
22700: PUSH
22701: LD_INT 120
22703: PUSH
22704: LD_INT 130
22706: PUSH
22707: LD_INT 140
22709: PUSH
22710: LD_INT 150
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: PPUSH
22733: LD_INT 15
22735: PPUSH
22736: CALL_OW 12
22740: ARRAY
22741: ST_TO_ADDR
// if ValidHex ( x , y ) then
22742: LD_VAR 0 3
22746: PPUSH
22747: LD_VAR 0 4
22751: PPUSH
22752: CALL_OW 488
22756: IFFALSE 22779
// begin result := [ x , y ] ;
22758: LD_ADDR_VAR 0 1
22762: PUSH
22763: LD_VAR 0 3
22767: PUSH
22768: LD_VAR 0 4
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: ST_TO_ADDR
// break ;
22777: GO 22781
// end ; end ;
22779: GO 22581
22781: POP
22782: POP
// if result then
22783: LD_VAR 0 1
22787: IFFALSE 22847
// begin ToLua ( playSibBomb() ) ;
22789: LD_STRING playSibBomb()
22791: PPUSH
22792: CALL_OW 559
// wait ( 0 0$14 ) ;
22796: LD_INT 490
22798: PPUSH
22799: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22803: LD_VAR 0 1
22807: PUSH
22808: LD_INT 1
22810: ARRAY
22811: PPUSH
22812: LD_VAR 0 1
22816: PUSH
22817: LD_INT 2
22819: ARRAY
22820: PPUSH
22821: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22825: LD_VAR 0 1
22829: PUSH
22830: LD_INT 1
22832: ARRAY
22833: PPUSH
22834: LD_VAR 0 1
22838: PUSH
22839: LD_INT 2
22841: ARRAY
22842: PPUSH
22843: CALL_OW 429
// end ; end ;
22847: LD_VAR 0 1
22851: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22852: LD_EXP 48
22856: PUSH
22857: LD_EXP 70
22861: AND
22862: IFFALSE 22874
22864: GO 22866
22866: DISABLE
// YouLost (  ) ;
22867: LD_STRING 
22869: PPUSH
22870: CALL_OW 104
22874: END
// every 0 0$1 trigger StreamModeActive and sFog do
22875: LD_EXP 48
22879: PUSH
22880: LD_EXP 69
22884: AND
22885: IFFALSE 22899
22887: GO 22889
22889: DISABLE
// FogOff ( your_side ) ;
22890: LD_OWVAR 2
22894: PPUSH
22895: CALL_OW 344
22899: END
// every 0 0$1 trigger StreamModeActive and sSun do
22900: LD_EXP 48
22904: PUSH
22905: LD_EXP 71
22909: AND
22910: IFFALSE 22938
22912: GO 22914
22914: DISABLE
// begin solar_recharge_percent := 0 ;
22915: LD_ADDR_OWVAR 79
22919: PUSH
22920: LD_INT 0
22922: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22923: LD_INT 10500
22925: PPUSH
22926: CALL_OW 67
// solar_recharge_percent := 100 ;
22930: LD_ADDR_OWVAR 79
22934: PUSH
22935: LD_INT 100
22937: ST_TO_ADDR
// end ;
22938: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22939: LD_EXP 48
22943: PUSH
22944: LD_EXP 72
22948: AND
22949: IFFALSE 23188
22951: GO 22953
22953: DISABLE
22954: LD_INT 0
22956: PPUSH
22957: PPUSH
22958: PPUSH
// begin tmp := [ ] ;
22959: LD_ADDR_VAR 0 3
22963: PUSH
22964: EMPTY
22965: ST_TO_ADDR
// for i := 1 to 6 do
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: DOUBLE
22972: LD_INT 1
22974: DEC
22975: ST_TO_ADDR
22976: LD_INT 6
22978: PUSH
22979: FOR_TO
22980: IFFALSE 23085
// begin uc_nation := nation_nature ;
22982: LD_ADDR_OWVAR 21
22986: PUSH
22987: LD_INT 0
22989: ST_TO_ADDR
// uc_side := 0 ;
22990: LD_ADDR_OWVAR 20
22994: PUSH
22995: LD_INT 0
22997: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22998: LD_ADDR_OWVAR 29
23002: PUSH
23003: LD_INT 12
23005: PUSH
23006: LD_INT 12
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: ST_TO_ADDR
// hc_agressivity := 20 ;
23013: LD_ADDR_OWVAR 35
23017: PUSH
23018: LD_INT 20
23020: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23021: LD_ADDR_OWVAR 28
23025: PUSH
23026: LD_INT 17
23028: ST_TO_ADDR
// hc_gallery :=  ;
23029: LD_ADDR_OWVAR 33
23033: PUSH
23034: LD_STRING 
23036: ST_TO_ADDR
// hc_name :=  ;
23037: LD_ADDR_OWVAR 26
23041: PUSH
23042: LD_STRING 
23044: ST_TO_ADDR
// un := CreateHuman ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: CALL_OW 44
23054: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_INT 1
23062: PPUSH
23063: CALL_OW 51
// tmp := tmp ^ un ;
23067: LD_ADDR_VAR 0 3
23071: PUSH
23072: LD_VAR 0 3
23076: PUSH
23077: LD_VAR 0 2
23081: ADD
23082: ST_TO_ADDR
// end ;
23083: GO 22979
23085: POP
23086: POP
// repeat wait ( 0 0$1 ) ;
23087: LD_INT 35
23089: PPUSH
23090: CALL_OW 67
// for un in tmp do
23094: LD_ADDR_VAR 0 2
23098: PUSH
23099: LD_VAR 0 3
23103: PUSH
23104: FOR_IN
23105: IFFALSE 23179
// begin if IsDead ( un ) then
23107: LD_VAR 0 2
23111: PPUSH
23112: CALL_OW 301
23116: IFFALSE 23136
// begin tmp := tmp diff un ;
23118: LD_ADDR_VAR 0 3
23122: PUSH
23123: LD_VAR 0 3
23127: PUSH
23128: LD_VAR 0 2
23132: DIFF
23133: ST_TO_ADDR
// continue ;
23134: GO 23104
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23136: LD_VAR 0 2
23140: PPUSH
23141: LD_INT 3
23143: PUSH
23144: LD_INT 22
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PPUSH
23158: CALL_OW 69
23162: PPUSH
23163: LD_VAR 0 2
23167: PPUSH
23168: CALL_OW 74
23172: PPUSH
23173: CALL_OW 115
// end ;
23177: GO 23104
23179: POP
23180: POP
// until not tmp ;
23181: LD_VAR 0 3
23185: NOT
23186: IFFALSE 23087
// end ;
23188: PPOPN 3
23190: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23191: LD_EXP 48
23195: PUSH
23196: LD_EXP 73
23200: AND
23201: IFFALSE 23255
23203: GO 23205
23205: DISABLE
// begin ToLua ( displayTroll(); ) ;
23206: LD_STRING displayTroll();
23208: PPUSH
23209: CALL_OW 559
// wait ( 3 3$00 ) ;
23213: LD_INT 6300
23215: PPUSH
23216: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23220: LD_STRING hideTroll();
23222: PPUSH
23223: CALL_OW 559
// wait ( 1 1$00 ) ;
23227: LD_INT 2100
23229: PPUSH
23230: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23234: LD_STRING displayTroll();
23236: PPUSH
23237: CALL_OW 559
// wait ( 1 1$00 ) ;
23241: LD_INT 2100
23243: PPUSH
23244: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23248: LD_STRING hideTroll();
23250: PPUSH
23251: CALL_OW 559
// end ;
23255: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23256: LD_EXP 48
23260: PUSH
23261: LD_EXP 74
23265: AND
23266: IFFALSE 23329
23268: GO 23270
23270: DISABLE
23271: LD_INT 0
23273: PPUSH
// begin p := 0 ;
23274: LD_ADDR_VAR 0 1
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
// repeat game_speed := 1 ;
23282: LD_ADDR_OWVAR 65
23286: PUSH
23287: LD_INT 1
23289: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23290: LD_INT 35
23292: PPUSH
23293: CALL_OW 67
// p := p + 1 ;
23297: LD_ADDR_VAR 0 1
23301: PUSH
23302: LD_VAR 0 1
23306: PUSH
23307: LD_INT 1
23309: PLUS
23310: ST_TO_ADDR
// until p >= 60 ;
23311: LD_VAR 0 1
23315: PUSH
23316: LD_INT 60
23318: GREATEREQUAL
23319: IFFALSE 23282
// game_speed := 4 ;
23321: LD_ADDR_OWVAR 65
23325: PUSH
23326: LD_INT 4
23328: ST_TO_ADDR
// end ;
23329: PPOPN 1
23331: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23332: LD_EXP 48
23336: PUSH
23337: LD_EXP 75
23341: AND
23342: IFFALSE 23488
23344: GO 23346
23346: DISABLE
23347: LD_INT 0
23349: PPUSH
23350: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23351: LD_ADDR_VAR 0 1
23355: PUSH
23356: LD_INT 22
23358: PUSH
23359: LD_OWVAR 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: LD_INT 30
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PPUSH
23400: CALL_OW 69
23404: ST_TO_ADDR
// if not depot then
23405: LD_VAR 0 1
23409: NOT
23410: IFFALSE 23414
// exit ;
23412: GO 23488
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_VAR 0 1
23423: PUSH
23424: LD_INT 1
23426: PPUSH
23427: LD_VAR 0 1
23431: PPUSH
23432: CALL_OW 12
23436: ARRAY
23437: PPUSH
23438: CALL_OW 274
23442: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23443: LD_VAR 0 2
23447: PPUSH
23448: LD_INT 1
23450: PPUSH
23451: LD_INT 0
23453: PPUSH
23454: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23458: LD_VAR 0 2
23462: PPUSH
23463: LD_INT 2
23465: PPUSH
23466: LD_INT 0
23468: PPUSH
23469: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23473: LD_VAR 0 2
23477: PPUSH
23478: LD_INT 3
23480: PPUSH
23481: LD_INT 0
23483: PPUSH
23484: CALL_OW 277
// end ;
23488: PPOPN 2
23490: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23491: LD_EXP 48
23495: PUSH
23496: LD_EXP 76
23500: AND
23501: IFFALSE 23598
23503: GO 23505
23505: DISABLE
23506: LD_INT 0
23508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23509: LD_ADDR_VAR 0 1
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_OWVAR 2
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 21
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: LD_INT 23
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: PPUSH
23558: CALL_OW 69
23562: ST_TO_ADDR
// if not tmp then
23563: LD_VAR 0 1
23567: NOT
23568: IFFALSE 23572
// exit ;
23570: GO 23598
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23572: LD_VAR 0 1
23576: PUSH
23577: LD_INT 1
23579: PPUSH
23580: LD_VAR 0 1
23584: PPUSH
23585: CALL_OW 12
23589: ARRAY
23590: PPUSH
23591: LD_INT 200
23593: PPUSH
23594: CALL_OW 234
// end ;
23598: PPOPN 1
23600: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23601: LD_EXP 48
23605: PUSH
23606: LD_EXP 77
23610: AND
23611: IFFALSE 23690
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23619: LD_ADDR_VAR 0 1
23623: PUSH
23624: LD_INT 22
23626: PUSH
23627: LD_OWVAR 2
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 21
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PPUSH
23650: CALL_OW 69
23654: ST_TO_ADDR
// if not tmp then
23655: LD_VAR 0 1
23659: NOT
23660: IFFALSE 23664
// exit ;
23662: GO 23690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23664: LD_VAR 0 1
23668: PUSH
23669: LD_INT 1
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 12
23681: ARRAY
23682: PPUSH
23683: LD_INT 60
23685: PPUSH
23686: CALL_OW 234
// end ;
23690: PPOPN 1
23692: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23693: LD_EXP 48
23697: PUSH
23698: LD_EXP 78
23702: AND
23703: IFFALSE 23802
23705: GO 23707
23707: DISABLE
23708: LD_INT 0
23710: PPUSH
23711: PPUSH
// begin enable ;
23712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23713: LD_ADDR_VAR 0 1
23717: PUSH
23718: LD_INT 22
23720: PUSH
23721: LD_OWVAR 2
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 61
23732: PUSH
23733: EMPTY
23734: LIST
23735: PUSH
23736: LD_INT 33
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: PPUSH
23751: CALL_OW 69
23755: ST_TO_ADDR
// if not tmp then
23756: LD_VAR 0 1
23760: NOT
23761: IFFALSE 23765
// exit ;
23763: GO 23802
// for i in tmp do
23765: LD_ADDR_VAR 0 2
23769: PUSH
23770: LD_VAR 0 1
23774: PUSH
23775: FOR_IN
23776: IFFALSE 23800
// if IsControledBy ( i ) then
23778: LD_VAR 0 2
23782: PPUSH
23783: CALL_OW 312
23787: IFFALSE 23798
// ComUnlink ( i ) ;
23789: LD_VAR 0 2
23793: PPUSH
23794: CALL_OW 136
23798: GO 23775
23800: POP
23801: POP
// end ;
23802: PPOPN 2
23804: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23805: LD_EXP 48
23809: PUSH
23810: LD_EXP 79
23814: AND
23815: IFFALSE 23955
23817: GO 23819
23819: DISABLE
23820: LD_INT 0
23822: PPUSH
23823: PPUSH
// begin ToLua ( displayPowell(); ) ;
23824: LD_STRING displayPowell();
23826: PPUSH
23827: CALL_OW 559
// uc_side := 0 ;
23831: LD_ADDR_OWVAR 20
23835: PUSH
23836: LD_INT 0
23838: ST_TO_ADDR
// uc_nation := 2 ;
23839: LD_ADDR_OWVAR 21
23843: PUSH
23844: LD_INT 2
23846: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23847: LD_ADDR_OWVAR 37
23851: PUSH
23852: LD_INT 14
23854: ST_TO_ADDR
// vc_engine := engine_siberite ;
23855: LD_ADDR_OWVAR 39
23859: PUSH
23860: LD_INT 3
23862: ST_TO_ADDR
// vc_control := control_apeman ;
23863: LD_ADDR_OWVAR 38
23867: PUSH
23868: LD_INT 5
23870: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23871: LD_ADDR_OWVAR 40
23875: PUSH
23876: LD_INT 29
23878: ST_TO_ADDR
// un := CreateVehicle ;
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: CALL_OW 45
23888: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_INT 1
23896: PPUSH
23897: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23901: LD_INT 35
23903: PPUSH
23904: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23908: LD_VAR 0 2
23912: PPUSH
23913: LD_INT 22
23915: PUSH
23916: LD_OWVAR 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PPUSH
23925: CALL_OW 69
23929: PPUSH
23930: LD_VAR 0 2
23934: PPUSH
23935: CALL_OW 74
23939: PPUSH
23940: CALL_OW 115
// until IsDead ( un ) ;
23944: LD_VAR 0 2
23948: PPUSH
23949: CALL_OW 301
23953: IFFALSE 23901
// end ;
23955: PPOPN 2
23957: END
// every 0 0$1 trigger StreamModeActive and sStu do
23958: LD_EXP 48
23962: PUSH
23963: LD_EXP 87
23967: AND
23968: IFFALSE 23984
23970: GO 23972
23972: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23973: LD_STRING displayStucuk();
23975: PPUSH
23976: CALL_OW 559
// ResetFog ;
23980: CALL_OW 335
// end ;
23984: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23985: LD_EXP 48
23989: PUSH
23990: LD_EXP 80
23994: AND
23995: IFFALSE 24136
23997: GO 23999
23999: DISABLE
24000: LD_INT 0
24002: PPUSH
24003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24004: LD_ADDR_VAR 0 2
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_OWVAR 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 21
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: ST_TO_ADDR
// if not tmp then
24040: LD_VAR 0 2
24044: NOT
24045: IFFALSE 24049
// exit ;
24047: GO 24136
// un := tmp [ rand ( 1 , tmp ) ] ;
24049: LD_ADDR_VAR 0 1
24053: PUSH
24054: LD_VAR 0 2
24058: PUSH
24059: LD_INT 1
24061: PPUSH
24062: LD_VAR 0 2
24066: PPUSH
24067: CALL_OW 12
24071: ARRAY
24072: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24073: LD_VAR 0 1
24077: PPUSH
24078: LD_INT 0
24080: PPUSH
24081: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24085: LD_VAR 0 1
24089: PPUSH
24090: LD_OWVAR 3
24094: PUSH
24095: LD_VAR 0 1
24099: DIFF
24100: PPUSH
24101: LD_VAR 0 1
24105: PPUSH
24106: CALL_OW 74
24110: PPUSH
24111: CALL_OW 115
// wait ( 0 0$20 ) ;
24115: LD_INT 700
24117: PPUSH
24118: CALL_OW 67
// SetSide ( un , your_side ) ;
24122: LD_VAR 0 1
24126: PPUSH
24127: LD_OWVAR 2
24131: PPUSH
24132: CALL_OW 235
// end ;
24136: PPOPN 2
24138: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24139: LD_EXP 48
24143: PUSH
24144: LD_EXP 81
24148: AND
24149: IFFALSE 24255
24151: GO 24153
24153: DISABLE
24154: LD_INT 0
24156: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24157: LD_ADDR_VAR 0 1
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_OWVAR 2
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 30
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 30
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 69
24210: ST_TO_ADDR
// if not depot then
24211: LD_VAR 0 1
24215: NOT
24216: IFFALSE 24220
// exit ;
24218: GO 24255
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24220: LD_VAR 0 1
24224: PUSH
24225: LD_INT 1
24227: ARRAY
24228: PPUSH
24229: CALL_OW 250
24233: PPUSH
24234: LD_VAR 0 1
24238: PUSH
24239: LD_INT 1
24241: ARRAY
24242: PPUSH
24243: CALL_OW 251
24247: PPUSH
24248: LD_INT 70
24250: PPUSH
24251: CALL_OW 495
// end ;
24255: PPOPN 1
24257: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24258: LD_EXP 48
24262: PUSH
24263: LD_EXP 82
24267: AND
24268: IFFALSE 24479
24270: GO 24272
24272: DISABLE
24273: LD_INT 0
24275: PPUSH
24276: PPUSH
24277: PPUSH
24278: PPUSH
24279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24280: LD_ADDR_VAR 0 5
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 69
24315: ST_TO_ADDR
// if not tmp then
24316: LD_VAR 0 5
24320: NOT
24321: IFFALSE 24325
// exit ;
24323: GO 24479
// for i in tmp do
24325: LD_ADDR_VAR 0 1
24329: PUSH
24330: LD_VAR 0 5
24334: PUSH
24335: FOR_IN
24336: IFFALSE 24477
// begin d := rand ( 0 , 5 ) ;
24338: LD_ADDR_VAR 0 4
24342: PUSH
24343: LD_INT 0
24345: PPUSH
24346: LD_INT 5
24348: PPUSH
24349: CALL_OW 12
24353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24354: LD_ADDR_VAR 0 2
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 250
24368: PPUSH
24369: LD_VAR 0 4
24373: PPUSH
24374: LD_INT 3
24376: PPUSH
24377: LD_INT 12
24379: PPUSH
24380: CALL_OW 12
24384: PPUSH
24385: CALL_OW 272
24389: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24390: LD_ADDR_VAR 0 3
24394: PUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 251
24404: PPUSH
24405: LD_VAR 0 4
24409: PPUSH
24410: LD_INT 3
24412: PPUSH
24413: LD_INT 12
24415: PPUSH
24416: CALL_OW 12
24420: PPUSH
24421: CALL_OW 273
24425: ST_TO_ADDR
// if ValidHex ( x , y ) then
24426: LD_VAR 0 2
24430: PPUSH
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 488
24440: IFFALSE 24475
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24442: LD_VAR 0 1
24446: PPUSH
24447: LD_VAR 0 2
24451: PPUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: LD_INT 3
24459: PPUSH
24460: LD_INT 6
24462: PPUSH
24463: CALL_OW 12
24467: PPUSH
24468: LD_INT 1
24470: PPUSH
24471: CALL_OW 483
// end ;
24475: GO 24335
24477: POP
24478: POP
// end ;
24479: PPOPN 5
24481: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24482: LD_EXP 48
24486: PUSH
24487: LD_EXP 83
24491: AND
24492: IFFALSE 24586
24494: GO 24496
24496: DISABLE
24497: LD_INT 0
24499: PPUSH
24500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24501: LD_ADDR_VAR 0 2
24505: PUSH
24506: LD_INT 22
24508: PUSH
24509: LD_OWVAR 2
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 32
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 21
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: PPUSH
24543: CALL_OW 69
24547: ST_TO_ADDR
// if not tmp then
24548: LD_VAR 0 2
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 24586
// for i in tmp do
24557: LD_ADDR_VAR 0 1
24561: PUSH
24562: LD_VAR 0 2
24566: PUSH
24567: FOR_IN
24568: IFFALSE 24584
// SetFuel ( i , 0 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: LD_INT 0
24577: PPUSH
24578: CALL_OW 240
24582: GO 24567
24584: POP
24585: POP
// end ;
24586: PPOPN 2
24588: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24589: LD_EXP 48
24593: PUSH
24594: LD_EXP 84
24598: AND
24599: IFFALSE 24665
24601: GO 24603
24603: DISABLE
24604: LD_INT 0
24606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24607: LD_ADDR_VAR 0 1
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_OWVAR 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 30
24626: PUSH
24627: LD_INT 29
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PPUSH
24638: CALL_OW 69
24642: ST_TO_ADDR
// if not tmp then
24643: LD_VAR 0 1
24647: NOT
24648: IFFALSE 24652
// exit ;
24650: GO 24665
// DestroyUnit ( tmp [ 1 ] ) ;
24652: LD_VAR 0 1
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: PPUSH
24661: CALL_OW 65
// end ;
24665: PPOPN 1
24667: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24668: LD_EXP 48
24672: PUSH
24673: LD_EXP 86
24677: AND
24678: IFFALSE 24807
24680: GO 24682
24682: DISABLE
24683: LD_INT 0
24685: PPUSH
// begin uc_side := 0 ;
24686: LD_ADDR_OWVAR 20
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
// uc_nation := nation_arabian ;
24694: LD_ADDR_OWVAR 21
24698: PUSH
24699: LD_INT 2
24701: ST_TO_ADDR
// hc_gallery :=  ;
24702: LD_ADDR_OWVAR 33
24706: PUSH
24707: LD_STRING 
24709: ST_TO_ADDR
// hc_name :=  ;
24710: LD_ADDR_OWVAR 26
24714: PUSH
24715: LD_STRING 
24717: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24718: LD_INT 1
24720: PPUSH
24721: LD_INT 11
24723: PPUSH
24724: LD_INT 10
24726: PPUSH
24727: CALL_OW 380
// un := CreateHuman ;
24731: LD_ADDR_VAR 0 1
24735: PUSH
24736: CALL_OW 44
24740: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24741: LD_VAR 0 1
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24753: LD_INT 35
24755: PPUSH
24756: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24760: LD_VAR 0 1
24764: PPUSH
24765: LD_INT 22
24767: PUSH
24768: LD_OWVAR 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 69
24781: PPUSH
24782: LD_VAR 0 1
24786: PPUSH
24787: CALL_OW 74
24791: PPUSH
24792: CALL_OW 115
// until IsDead ( un ) ;
24796: LD_VAR 0 1
24800: PPUSH
24801: CALL_OW 301
24805: IFFALSE 24753
// end ;
24807: PPOPN 1
24809: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24810: LD_EXP 48
24814: PUSH
24815: LD_EXP 88
24819: AND
24820: IFFALSE 24832
24822: GO 24824
24824: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24825: LD_STRING earthquake(getX(game), 0, 32)
24827: PPUSH
24828: CALL_OW 559
24832: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24833: LD_EXP 48
24837: PUSH
24838: LD_EXP 89
24842: AND
24843: IFFALSE 24934
24845: GO 24847
24847: DISABLE
24848: LD_INT 0
24850: PPUSH
// begin enable ;
24851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24852: LD_ADDR_VAR 0 1
24856: PUSH
24857: LD_INT 22
24859: PUSH
24860: LD_OWVAR 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 21
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 33
24881: PUSH
24882: LD_INT 3
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 1
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 1
24915: PPUSH
24916: LD_VAR 0 1
24920: PPUSH
24921: CALL_OW 12
24925: ARRAY
24926: PPUSH
24927: LD_INT 1
24929: PPUSH
24930: CALL_OW 234
// end ;
24934: PPOPN 1
24936: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24937: LD_EXP 48
24941: PUSH
24942: LD_EXP 90
24946: AND
24947: IFFALSE 25088
24949: GO 24951
24951: DISABLE
24952: LD_INT 0
24954: PPUSH
24955: PPUSH
24956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24957: LD_ADDR_VAR 0 3
24961: PUSH
24962: LD_INT 22
24964: PUSH
24965: LD_OWVAR 2
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 25
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PPUSH
24988: CALL_OW 69
24992: ST_TO_ADDR
// if not tmp then
24993: LD_VAR 0 3
24997: NOT
24998: IFFALSE 25002
// exit ;
25000: GO 25088
// un := tmp [ rand ( 1 , tmp ) ] ;
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_VAR 0 3
25011: PUSH
25012: LD_INT 1
25014: PPUSH
25015: LD_VAR 0 3
25019: PPUSH
25020: CALL_OW 12
25024: ARRAY
25025: ST_TO_ADDR
// if Crawls ( un ) then
25026: LD_VAR 0 2
25030: PPUSH
25031: CALL_OW 318
25035: IFFALSE 25046
// ComWalk ( un ) ;
25037: LD_VAR 0 2
25041: PPUSH
25042: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25046: LD_VAR 0 2
25050: PPUSH
25051: LD_INT 9
25053: PPUSH
25054: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25058: LD_INT 28
25060: PPUSH
25061: LD_OWVAR 2
25065: PPUSH
25066: LD_INT 2
25068: PPUSH
25069: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25073: LD_INT 29
25075: PPUSH
25076: LD_OWVAR 2
25080: PPUSH
25081: LD_INT 2
25083: PPUSH
25084: CALL_OW 322
// end ;
25088: PPOPN 3
25090: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25091: LD_EXP 48
25095: PUSH
25096: LD_EXP 91
25100: AND
25101: IFFALSE 25212
25103: GO 25105
25105: DISABLE
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_OWVAR 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 25
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: ST_TO_ADDR
// if not tmp then
25147: LD_VAR 0 3
25151: NOT
25152: IFFALSE 25156
// exit ;
25154: GO 25212
// un := tmp [ rand ( 1 , tmp ) ] ;
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_VAR 0 3
25165: PUSH
25166: LD_INT 1
25168: PPUSH
25169: LD_VAR 0 3
25173: PPUSH
25174: CALL_OW 12
25178: ARRAY
25179: ST_TO_ADDR
// if Crawls ( un ) then
25180: LD_VAR 0 2
25184: PPUSH
25185: CALL_OW 318
25189: IFFALSE 25200
// ComWalk ( un ) ;
25191: LD_VAR 0 2
25195: PPUSH
25196: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_INT 8
25207: PPUSH
25208: CALL_OW 336
// end ;
25212: PPOPN 3
25214: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25215: LD_EXP 48
25219: PUSH
25220: LD_EXP 92
25224: AND
25225: IFFALSE 25369
25227: GO 25229
25229: DISABLE
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25234: LD_ADDR_VAR 0 2
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_OWVAR 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 21
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: LD_INT 34
25266: PUSH
25267: LD_INT 12
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 34
25276: PUSH
25277: LD_INT 51
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 34
25286: PUSH
25287: LD_INT 32
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: ST_TO_ADDR
// if not tmp then
25310: LD_VAR 0 2
25314: NOT
25315: IFFALSE 25319
// exit ;
25317: GO 25369
// for i in tmp do
25319: LD_ADDR_VAR 0 1
25323: PUSH
25324: LD_VAR 0 2
25328: PUSH
25329: FOR_IN
25330: IFFALSE 25367
// if GetCargo ( i , mat_artifact ) = 0 then
25332: LD_VAR 0 1
25336: PPUSH
25337: LD_INT 4
25339: PPUSH
25340: CALL_OW 289
25344: PUSH
25345: LD_INT 0
25347: EQUAL
25348: IFFALSE 25365
// SetCargo ( i , mat_siberit , 100 ) ;
25350: LD_VAR 0 1
25354: PPUSH
25355: LD_INT 3
25357: PPUSH
25358: LD_INT 100
25360: PPUSH
25361: CALL_OW 290
25365: GO 25329
25367: POP
25368: POP
// end ;
25369: PPOPN 2
25371: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25372: LD_EXP 48
25376: PUSH
25377: LD_EXP 93
25381: AND
25382: IFFALSE 25535
25384: GO 25386
25386: DISABLE
25387: LD_INT 0
25389: PPUSH
25390: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25391: LD_ADDR_VAR 0 2
25395: PUSH
25396: LD_INT 22
25398: PUSH
25399: LD_OWVAR 2
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PPUSH
25408: CALL_OW 69
25412: ST_TO_ADDR
// if not tmp then
25413: LD_VAR 0 2
25417: NOT
25418: IFFALSE 25422
// exit ;
25420: GO 25535
// for i := 1 to 2 do
25422: LD_ADDR_VAR 0 1
25426: PUSH
25427: DOUBLE
25428: LD_INT 1
25430: DEC
25431: ST_TO_ADDR
25432: LD_INT 2
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25533
// begin uc_side := your_side ;
25438: LD_ADDR_OWVAR 20
25442: PUSH
25443: LD_OWVAR 2
25447: ST_TO_ADDR
// uc_nation := nation_american ;
25448: LD_ADDR_OWVAR 21
25452: PUSH
25453: LD_INT 1
25455: ST_TO_ADDR
// vc_chassis := us_morphling ;
25456: LD_ADDR_OWVAR 37
25460: PUSH
25461: LD_INT 5
25463: ST_TO_ADDR
// vc_engine := engine_siberite ;
25464: LD_ADDR_OWVAR 39
25468: PUSH
25469: LD_INT 3
25471: ST_TO_ADDR
// vc_control := control_computer ;
25472: LD_ADDR_OWVAR 38
25476: PUSH
25477: LD_INT 3
25479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25480: LD_ADDR_OWVAR 40
25484: PUSH
25485: LD_INT 10
25487: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
25488: CALL_OW 45
25492: PPUSH
25493: LD_VAR 0 2
25497: PUSH
25498: LD_INT 1
25500: ARRAY
25501: PPUSH
25502: CALL_OW 250
25506: PPUSH
25507: LD_VAR 0 2
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: PPUSH
25516: CALL_OW 251
25520: PPUSH
25521: LD_INT 12
25523: PPUSH
25524: LD_INT 1
25526: PPUSH
25527: CALL_OW 50
// end ;
25531: GO 25435
25533: POP
25534: POP
// end ;
25535: PPOPN 2
25537: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25538: LD_EXP 48
25542: PUSH
25543: LD_EXP 94
25547: AND
25548: IFFALSE 25770
25550: GO 25552
25552: DISABLE
25553: LD_INT 0
25555: PPUSH
25556: PPUSH
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25561: LD_ADDR_VAR 0 6
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 3
25590: PUSH
25591: LD_INT 23
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: PPUSH
25610: CALL_OW 69
25614: ST_TO_ADDR
// if not tmp then
25615: LD_VAR 0 6
25619: NOT
25620: IFFALSE 25624
// exit ;
25622: GO 25770
// s1 := rand ( 1 , 4 ) ;
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: LD_INT 1
25631: PPUSH
25632: LD_INT 4
25634: PPUSH
25635: CALL_OW 12
25639: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25640: LD_ADDR_VAR 0 4
25644: PUSH
25645: LD_VAR 0 6
25649: PUSH
25650: LD_INT 1
25652: ARRAY
25653: PPUSH
25654: LD_VAR 0 2
25658: PPUSH
25659: CALL_OW 259
25663: ST_TO_ADDR
// if s1 = 1 then
25664: LD_VAR 0 2
25668: PUSH
25669: LD_INT 1
25671: EQUAL
25672: IFFALSE 25692
// s2 := rand ( 2 , 4 ) else
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 2
25681: PPUSH
25682: LD_INT 4
25684: PPUSH
25685: CALL_OW 12
25689: ST_TO_ADDR
25690: GO 25700
// s2 := 1 ;
25692: LD_ADDR_VAR 0 3
25696: PUSH
25697: LD_INT 1
25699: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25700: LD_ADDR_VAR 0 5
25704: PUSH
25705: LD_VAR 0 6
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_VAR 0 3
25718: PPUSH
25719: CALL_OW 259
25723: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25724: LD_VAR 0 6
25728: PUSH
25729: LD_INT 1
25731: ARRAY
25732: PPUSH
25733: LD_VAR 0 2
25737: PPUSH
25738: LD_VAR 0 5
25742: PPUSH
25743: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25747: LD_VAR 0 6
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: LD_VAR 0 3
25760: PPUSH
25761: LD_VAR 0 4
25765: PPUSH
25766: CALL_OW 237
// end ;
25770: PPOPN 6
25772: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25773: LD_EXP 48
25777: PUSH
25778: LD_EXP 95
25782: AND
25783: IFFALSE 25862
25785: GO 25787
25787: DISABLE
25788: LD_INT 0
25790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25791: LD_ADDR_VAR 0 1
25795: PUSH
25796: LD_INT 22
25798: PUSH
25799: LD_OWVAR 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 30
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 69
25826: ST_TO_ADDR
// if not tmp then
25827: LD_VAR 0 1
25831: NOT
25832: IFFALSE 25836
// exit ;
25834: GO 25862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25836: LD_VAR 0 1
25840: PUSH
25841: LD_INT 1
25843: PPUSH
25844: LD_VAR 0 1
25848: PPUSH
25849: CALL_OW 12
25853: ARRAY
25854: PPUSH
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 234
// end ;
25862: PPOPN 1
25864: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25865: LD_EXP 48
25869: PUSH
25870: LD_EXP 96
25874: AND
25875: IFFALSE 25987
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25884: LD_ADDR_VAR 0 2
25888: PUSH
25889: LD_INT 22
25891: PUSH
25892: LD_OWVAR 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: LD_INT 27
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 30
25916: PUSH
25917: LD_INT 26
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 30
25926: PUSH
25927: LD_INT 28
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 69
25948: ST_TO_ADDR
// if not tmp then
25949: LD_VAR 0 2
25953: NOT
25954: IFFALSE 25958
// exit ;
25956: GO 25987
// for i in tmp do
25958: LD_ADDR_VAR 0 1
25962: PUSH
25963: LD_VAR 0 2
25967: PUSH
25968: FOR_IN
25969: IFFALSE 25985
// SetLives ( i , 1 ) ;
25971: LD_VAR 0 1
25975: PPUSH
25976: LD_INT 1
25978: PPUSH
25979: CALL_OW 234
25983: GO 25968
25985: POP
25986: POP
// end ;
25987: PPOPN 2
25989: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25990: LD_EXP 48
25994: PUSH
25995: LD_EXP 97
25999: AND
26000: IFFALSE 26274
26002: GO 26004
26004: DISABLE
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
26009: PPUSH
// begin i := rand ( 1 , 7 ) ;
26010: LD_ADDR_VAR 0 1
26014: PUSH
26015: LD_INT 1
26017: PPUSH
26018: LD_INT 7
26020: PPUSH
26021: CALL_OW 12
26025: ST_TO_ADDR
// case i of 1 :
26026: LD_VAR 0 1
26030: PUSH
26031: LD_INT 1
26033: DOUBLE
26034: EQUAL
26035: IFTRUE 26039
26037: GO 26049
26039: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26040: LD_STRING earthquake(getX(game), 0, 32)
26042: PPUSH
26043: CALL_OW 559
26047: GO 26274
26049: LD_INT 2
26051: DOUBLE
26052: EQUAL
26053: IFTRUE 26057
26055: GO 26071
26057: POP
// begin ToLua ( displayStucuk(); ) ;
26058: LD_STRING displayStucuk();
26060: PPUSH
26061: CALL_OW 559
// ResetFog ;
26065: CALL_OW 335
// end ; 3 :
26069: GO 26274
26071: LD_INT 3
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26183
26079: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26080: LD_ADDR_VAR 0 2
26084: PUSH
26085: LD_INT 22
26087: PUSH
26088: LD_OWVAR 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 25
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL_OW 69
26115: ST_TO_ADDR
// if not tmp then
26116: LD_VAR 0 2
26120: NOT
26121: IFFALSE 26125
// exit ;
26123: GO 26274
// un := tmp [ rand ( 1 , tmp ) ] ;
26125: LD_ADDR_VAR 0 3
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: LD_INT 1
26137: PPUSH
26138: LD_VAR 0 2
26142: PPUSH
26143: CALL_OW 12
26147: ARRAY
26148: ST_TO_ADDR
// if Crawls ( un ) then
26149: LD_VAR 0 3
26153: PPUSH
26154: CALL_OW 318
26158: IFFALSE 26169
// ComWalk ( un ) ;
26160: LD_VAR 0 3
26164: PPUSH
26165: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26169: LD_VAR 0 3
26173: PPUSH
26174: LD_INT 8
26176: PPUSH
26177: CALL_OW 336
// end ; 4 :
26181: GO 26274
26183: LD_INT 4
26185: DOUBLE
26186: EQUAL
26187: IFTRUE 26191
26189: GO 26252
26191: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26192: LD_ADDR_VAR 0 2
26196: PUSH
26197: LD_INT 22
26199: PUSH
26200: LD_OWVAR 2
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 30
26211: PUSH
26212: LD_INT 29
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PPUSH
26223: CALL_OW 69
26227: ST_TO_ADDR
// if not tmp then
26228: LD_VAR 0 2
26232: NOT
26233: IFFALSE 26237
// exit ;
26235: GO 26274
// DestroyUnit ( tmp [ 1 ] ) ;
26237: LD_VAR 0 2
26241: PUSH
26242: LD_INT 1
26244: ARRAY
26245: PPUSH
26246: CALL_OW 65
// end ; 5 .. 7 :
26250: GO 26274
26252: LD_INT 5
26254: DOUBLE
26255: GREATEREQUAL
26256: IFFALSE 26264
26258: LD_INT 7
26260: DOUBLE
26261: LESSEQUAL
26262: IFTRUE 26266
26264: GO 26273
26266: POP
// StreamSibBomb ; end ;
26267: CALL 22554 0 0
26271: GO 26274
26273: POP
// end ;
26274: PPOPN 3
26276: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26277: LD_EXP 48
26281: PUSH
26282: LD_EXP 98
26286: AND
26287: IFFALSE 26443
26289: GO 26291
26291: DISABLE
26292: LD_INT 0
26294: PPUSH
26295: PPUSH
26296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26297: LD_ADDR_VAR 0 2
26301: PUSH
26302: LD_INT 81
26304: PUSH
26305: LD_OWVAR 2
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: PUSH
26317: LD_INT 21
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 21
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PPUSH
26346: CALL_OW 69
26350: ST_TO_ADDR
// if not tmp then
26351: LD_VAR 0 2
26355: NOT
26356: IFFALSE 26360
// exit ;
26358: GO 26443
// p := 0 ;
26360: LD_ADDR_VAR 0 3
26364: PUSH
26365: LD_INT 0
26367: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26368: LD_INT 35
26370: PPUSH
26371: CALL_OW 67
// p := p + 1 ;
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_INT 1
26387: PLUS
26388: ST_TO_ADDR
// for i in tmp do
26389: LD_ADDR_VAR 0 1
26393: PUSH
26394: LD_VAR 0 2
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26431
// if GetLives ( i ) < 1000 then
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 256
26411: PUSH
26412: LD_INT 1000
26414: LESS
26415: IFFALSE 26429
// SetLives ( i , 1000 ) ;
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_INT 1000
26424: PPUSH
26425: CALL_OW 234
26429: GO 26399
26431: POP
26432: POP
// until p > 20 ;
26433: LD_VAR 0 3
26437: PUSH
26438: LD_INT 20
26440: GREATER
26441: IFFALSE 26368
// end ;
26443: PPOPN 3
26445: END
// every 0 0$1 trigger StreamModeActive and sTime do
26446: LD_EXP 48
26450: PUSH
26451: LD_EXP 99
26455: AND
26456: IFFALSE 26491
26458: GO 26460
26460: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26461: LD_INT 28
26463: PPUSH
26464: LD_OWVAR 2
26468: PPUSH
26469: LD_INT 2
26471: PPUSH
26472: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26476: LD_INT 30
26478: PPUSH
26479: LD_OWVAR 2
26483: PPUSH
26484: LD_INT 2
26486: PPUSH
26487: CALL_OW 322
// end ;
26491: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26492: LD_EXP 48
26496: PUSH
26497: LD_EXP 100
26501: AND
26502: IFFALSE 26623
26504: GO 26506
26506: DISABLE
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 21
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: LD_INT 23
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: ST_TO_ADDR
// if not tmp then
26565: LD_VAR 0 2
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26623
// for i in tmp do
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: LD_VAR 0 2
26583: PUSH
26584: FOR_IN
26585: IFFALSE 26621
// begin if Crawls ( i ) then
26587: LD_VAR 0 1
26591: PPUSH
26592: CALL_OW 318
26596: IFFALSE 26607
// ComWalk ( i ) ;
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 138
// SetClass ( i , 2 ) ;
26607: LD_VAR 0 1
26611: PPUSH
26612: LD_INT 2
26614: PPUSH
26615: CALL_OW 336
// end ;
26619: GO 26584
26621: POP
26622: POP
// end ;
26623: PPOPN 2
26625: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26626: LD_EXP 48
26630: PUSH
26631: LD_EXP 101
26635: AND
26636: IFFALSE 26917
26638: GO 26640
26640: DISABLE
26641: LD_INT 0
26643: PPUSH
26644: PPUSH
26645: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26646: LD_OWVAR 2
26650: PPUSH
26651: LD_INT 9
26653: PPUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_INT 1
26659: PPUSH
26660: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26664: LD_INT 9
26666: PPUSH
26667: LD_OWVAR 2
26671: PPUSH
26672: CALL_OW 343
// uc_side := 9 ;
26676: LD_ADDR_OWVAR 20
26680: PUSH
26681: LD_INT 9
26683: ST_TO_ADDR
// uc_nation := 2 ;
26684: LD_ADDR_OWVAR 21
26688: PUSH
26689: LD_INT 2
26691: ST_TO_ADDR
// hc_name := Dark Warrior ;
26692: LD_ADDR_OWVAR 26
26696: PUSH
26697: LD_STRING Dark Warrior
26699: ST_TO_ADDR
// hc_gallery :=  ;
26700: LD_ADDR_OWVAR 33
26704: PUSH
26705: LD_STRING 
26707: ST_TO_ADDR
// hc_noskilllimit := true ;
26708: LD_ADDR_OWVAR 76
26712: PUSH
26713: LD_INT 1
26715: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26716: LD_ADDR_OWVAR 31
26720: PUSH
26721: LD_INT 30
26723: PUSH
26724: LD_INT 30
26726: PUSH
26727: LD_INT 30
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// un := CreateHuman ;
26739: LD_ADDR_VAR 0 3
26743: PUSH
26744: CALL_OW 44
26748: ST_TO_ADDR
// hc_noskilllimit := false ;
26749: LD_ADDR_OWVAR 76
26753: PUSH
26754: LD_INT 0
26756: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26757: LD_VAR 0 3
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: CALL_OW 51
// p := 0 ;
26769: LD_ADDR_VAR 0 2
26773: PUSH
26774: LD_INT 0
26776: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26777: LD_INT 35
26779: PPUSH
26780: CALL_OW 67
// p := p + 1 ;
26784: LD_ADDR_VAR 0 2
26788: PUSH
26789: LD_VAR 0 2
26793: PUSH
26794: LD_INT 1
26796: PLUS
26797: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26798: LD_VAR 0 3
26802: PPUSH
26803: CALL_OW 256
26807: PUSH
26808: LD_INT 1000
26810: LESS
26811: IFFALSE 26825
// SetLives ( un , 1000 ) ;
26813: LD_VAR 0 3
26817: PPUSH
26818: LD_INT 1000
26820: PPUSH
26821: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26825: LD_VAR 0 3
26829: PPUSH
26830: LD_INT 81
26832: PUSH
26833: LD_OWVAR 2
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 91
26844: PUSH
26845: LD_VAR 0 3
26849: PUSH
26850: LD_INT 30
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: PPUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 74
26876: PPUSH
26877: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26881: LD_VAR 0 2
26885: PUSH
26886: LD_INT 60
26888: GREATER
26889: PUSH
26890: LD_VAR 0 3
26894: PPUSH
26895: CALL_OW 301
26899: OR
26900: IFFALSE 26777
// if un then
26902: LD_VAR 0 3
26906: IFFALSE 26917
// RemoveUnit ( un ) ;
26908: LD_VAR 0 3
26912: PPUSH
26913: CALL_OW 64
// end ; end_of_file
26917: PPOPN 3
26919: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26920: LD_INT 0
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 264
26935: PUSH
26936: LD_EXP 39
26940: EQUAL
26941: IFFALSE 27013
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26943: LD_INT 68
26945: PPUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 255
26955: PPUSH
26956: CALL_OW 321
26960: PUSH
26961: LD_INT 2
26963: EQUAL
26964: IFFALSE 26976
// eff := 70 else
26966: LD_ADDR_VAR 0 4
26970: PUSH
26971: LD_INT 70
26973: ST_TO_ADDR
26974: GO 26984
// eff := 30 ;
26976: LD_ADDR_VAR 0 4
26980: PUSH
26981: LD_INT 30
26983: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 250
26993: PPUSH
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 251
27003: PPUSH
27004: LD_VAR 0 4
27008: PPUSH
27009: CALL_OW 495
// end ; end ;
27013: LD_VAR 0 2
27017: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27018: LD_INT 0
27020: PPUSH
// end ;
27021: LD_VAR 0 4
27025: RET
// export function SOS_Command ( cmd ) ; begin
27026: LD_INT 0
27028: PPUSH
// end ;
27029: LD_VAR 0 2
27033: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27034: LD_VAR 0 1
27038: PUSH
27039: LD_INT 255
27041: EQUAL
27042: PUSH
27043: LD_VAR 0 2
27047: PPUSH
27048: CALL_OW 264
27052: PUSH
27053: LD_INT 14
27055: PUSH
27056: LD_INT 53
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: IN
27063: AND
27064: PUSH
27065: LD_VAR 0 4
27069: PPUSH
27070: LD_VAR 0 5
27074: PPUSH
27075: CALL_OW 488
27079: AND
27080: IFFALSE 27104
// CutTreeXYR ( unit , x , y , 12 ) ;
27082: LD_VAR 0 2
27086: PPUSH
27087: LD_VAR 0 4
27091: PPUSH
27092: LD_VAR 0 5
27096: PPUSH
27097: LD_INT 12
27099: PPUSH
27100: CALL 27107 0 4
// end ;
27104: PPOPN 5
27106: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
27111: PPUSH
27112: PPUSH
27113: PPUSH
27114: PPUSH
27115: PPUSH
27116: PPUSH
27117: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27118: LD_VAR 0 1
27122: NOT
27123: PUSH
27124: LD_VAR 0 2
27128: PPUSH
27129: LD_VAR 0 3
27133: PPUSH
27134: CALL_OW 488
27138: NOT
27139: OR
27140: PUSH
27141: LD_VAR 0 4
27145: NOT
27146: OR
27147: IFFALSE 27151
// exit ;
27149: GO 27491
// list := [ ] ;
27151: LD_ADDR_VAR 0 13
27155: PUSH
27156: EMPTY
27157: ST_TO_ADDR
// if x - r < 0 then
27158: LD_VAR 0 2
27162: PUSH
27163: LD_VAR 0 4
27167: MINUS
27168: PUSH
27169: LD_INT 0
27171: LESS
27172: IFFALSE 27184
// min_x := 0 else
27174: LD_ADDR_VAR 0 7
27178: PUSH
27179: LD_INT 0
27181: ST_TO_ADDR
27182: GO 27200
// min_x := x - r ;
27184: LD_ADDR_VAR 0 7
27188: PUSH
27189: LD_VAR 0 2
27193: PUSH
27194: LD_VAR 0 4
27198: MINUS
27199: ST_TO_ADDR
// if y - r < 0 then
27200: LD_VAR 0 3
27204: PUSH
27205: LD_VAR 0 4
27209: MINUS
27210: PUSH
27211: LD_INT 0
27213: LESS
27214: IFFALSE 27226
// min_y := 0 else
27216: LD_ADDR_VAR 0 8
27220: PUSH
27221: LD_INT 0
27223: ST_TO_ADDR
27224: GO 27242
// min_y := y - r ;
27226: LD_ADDR_VAR 0 8
27230: PUSH
27231: LD_VAR 0 3
27235: PUSH
27236: LD_VAR 0 4
27240: MINUS
27241: ST_TO_ADDR
// max_x := x + r ;
27242: LD_ADDR_VAR 0 9
27246: PUSH
27247: LD_VAR 0 2
27251: PUSH
27252: LD_VAR 0 4
27256: PLUS
27257: ST_TO_ADDR
// max_y := y + r ;
27258: LD_ADDR_VAR 0 10
27262: PUSH
27263: LD_VAR 0 3
27267: PUSH
27268: LD_VAR 0 4
27272: PLUS
27273: ST_TO_ADDR
// for _x = min_x to max_x do
27274: LD_ADDR_VAR 0 11
27278: PUSH
27279: DOUBLE
27280: LD_VAR 0 7
27284: DEC
27285: ST_TO_ADDR
27286: LD_VAR 0 9
27290: PUSH
27291: FOR_TO
27292: IFFALSE 27409
// for _y = min_y to max_y do
27294: LD_ADDR_VAR 0 12
27298: PUSH
27299: DOUBLE
27300: LD_VAR 0 8
27304: DEC
27305: ST_TO_ADDR
27306: LD_VAR 0 10
27310: PUSH
27311: FOR_TO
27312: IFFALSE 27405
// begin if not ValidHex ( _x , _y ) then
27314: LD_VAR 0 11
27318: PPUSH
27319: LD_VAR 0 12
27323: PPUSH
27324: CALL_OW 488
27328: NOT
27329: IFFALSE 27333
// continue ;
27331: GO 27311
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27333: LD_VAR 0 11
27337: PPUSH
27338: LD_VAR 0 12
27342: PPUSH
27343: CALL_OW 351
27347: PUSH
27348: LD_VAR 0 11
27352: PPUSH
27353: LD_VAR 0 12
27357: PPUSH
27358: CALL_OW 554
27362: AND
27363: IFFALSE 27403
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27365: LD_ADDR_VAR 0 13
27369: PUSH
27370: LD_VAR 0 13
27374: PPUSH
27375: LD_VAR 0 13
27379: PUSH
27380: LD_INT 1
27382: PLUS
27383: PPUSH
27384: LD_VAR 0 11
27388: PUSH
27389: LD_VAR 0 12
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PPUSH
27398: CALL_OW 2
27402: ST_TO_ADDR
// end ;
27403: GO 27311
27405: POP
27406: POP
27407: GO 27291
27409: POP
27410: POP
// if not list then
27411: LD_VAR 0 13
27415: NOT
27416: IFFALSE 27420
// exit ;
27418: GO 27491
// for i in list do
27420: LD_ADDR_VAR 0 6
27424: PUSH
27425: LD_VAR 0 13
27429: PUSH
27430: FOR_IN
27431: IFFALSE 27489
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27433: LD_VAR 0 1
27437: PPUSH
27438: LD_STRING M
27440: PUSH
27441: LD_VAR 0 6
27445: PUSH
27446: LD_INT 1
27448: ARRAY
27449: PUSH
27450: LD_VAR 0 6
27454: PUSH
27455: LD_INT 2
27457: ARRAY
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: PPUSH
27483: CALL_OW 447
27487: GO 27430
27489: POP
27490: POP
// end ;
27491: LD_VAR 0 5
27495: RET
