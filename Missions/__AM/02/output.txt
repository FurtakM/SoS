// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10636 0 0
// PrepareRussianCommander ;
  44: CALL 12170 0 0
// PrepareSouthBase ;
  48: CALL 12266 0 0
// PrepareNorthBase ;
  52: CALL 12604 0 0
// PrepareOtherRussians ;
  56: CALL 12999 0 0
// PrepareHeroes ;
  60: CALL 10957 0 0
// PrepareLisSquad ;
  64: CALL 11327 0 0
// PrepareOtherAmericans ;
  68: CALL 11640 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: PUSH
 315: LD_EXP 2
 319: AND
 320: IFFALSE 650
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 322: LD_EXP 3
 326: PPUSH
 327: LD_INT 43
 329: PPUSH
 330: LD_INT 72
 332: PPUSH
 333: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 337: LD_EXP 2
 341: PPUSH
 342: LD_INT 44
 344: PPUSH
 345: LD_INT 70
 347: PPUSH
 348: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 352: LD_EXP 1
 356: PPUSH
 357: LD_INT 46
 359: PPUSH
 360: LD_INT 73
 362: PPUSH
 363: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 367: LD_EXP 3
 371: PPUSH
 372: LD_STRING D1a-Cyrus-1
 374: PPUSH
 375: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 379: LD_EXP 1
 383: PPUSH
 384: LD_STRING D1a-JMM-1
 386: PPUSH
 387: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 391: LD_EXP 3
 395: PPUSH
 396: LD_INT 37
 398: PPUSH
 399: LD_INT 66
 401: PPUSH
 402: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 406: LD_EXP 2
 410: PPUSH
 411: LD_INT 41
 413: PPUSH
 414: LD_INT 67
 416: PPUSH
 417: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_INT 38
 428: PPUSH
 429: LD_INT 64
 431: PPUSH
 432: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 436: LD_EXP 2
 440: PPUSH
 441: LD_STRING D1a-Bobby-2
 443: PPUSH
 444: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 448: LD_EXP 3
 452: PPUSH
 453: LD_INT 35
 455: PPUSH
 456: LD_INT 62
 458: PPUSH
 459: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 463: LD_EXP 2
 467: PPUSH
 468: LD_INT 32
 470: PPUSH
 471: LD_INT 60
 473: PPUSH
 474: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 478: LD_EXP 1
 482: PPUSH
 483: LD_INT 35
 485: PPUSH
 486: LD_INT 60
 488: PPUSH
 489: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 493: LD_EXP 1
 497: PPUSH
 498: LD_STRING D1a-JMM-2
 500: PPUSH
 501: CALL_OW 88
// ComWalk ( Lisa ) ;
 505: LD_EXP 4
 509: PPUSH
 510: CALL_OW 138
// wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 521: LD_EXP 4
 525: PPUSH
 526: LD_EXP 1
 530: PPUSH
 531: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 535: LD_EXP 1
 539: PUSH
 540: LD_EXP 3
 544: PUSH
 545: LD_EXP 2
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PPUSH
 555: LD_EXP 4
 559: PPUSH
 560: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_INT 33
 575: PPUSH
 576: LD_INT 55
 578: PPUSH
 579: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_INT 30
 594: PPUSH
 595: LD_INT 54
 597: PPUSH
 598: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: LD_EXP 1
 615: PPUSH
 616: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: LD_EXP 1
 633: PPUSH
 634: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 638: LD_EXP 4
 642: PPUSH
 643: LD_STRING D1a-Lisa-2
 645: PPUSH
 646: CALL_OW 88
// end ; if Cyrus and not Bobby then
 650: LD_EXP 3
 654: PUSH
 655: LD_EXP 2
 659: NOT
 660: AND
 661: IFFALSE 866
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 663: LD_EXP 3
 667: PPUSH
 668: LD_INT 43
 670: PPUSH
 671: LD_INT 72
 673: PPUSH
 674: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 678: LD_EXP 1
 682: PPUSH
 683: LD_INT 46
 685: PPUSH
 686: LD_INT 73
 688: PPUSH
 689: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_STRING D1a-Cyrus-1
 700: PPUSH
 701: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 705: LD_EXP 1
 709: PPUSH
 710: LD_STRING D1a-JMM-1
 712: PPUSH
 713: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 717: LD_EXP 3
 721: PPUSH
 722: LD_INT 37
 724: PPUSH
 725: LD_INT 66
 727: PPUSH
 728: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 732: LD_EXP 1
 736: PPUSH
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 64
 742: PPUSH
 743: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_STRING D1a-Cyrus-2
 754: PPUSH
 755: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 35
 766: PPUSH
 767: LD_INT 62
 769: PPUSH
 770: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 774: LD_EXP 1
 778: PPUSH
 779: LD_INT 35
 781: PPUSH
 782: LD_INT 60
 784: PPUSH
 785: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_STRING D1a-JMM-2
 796: PPUSH
 797: CALL_OW 88
// ComWalk ( Lisa ) ;
 801: LD_EXP 4
 805: PPUSH
 806: CALL_OW 138
// wait ( 0 0$1 ) ;
 810: LD_INT 35
 812: PPUSH
 813: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 817: LD_EXP 4
 821: PPUSH
 822: LD_EXP 1
 826: PPUSH
 827: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 831: LD_EXP 4
 835: PPUSH
 836: LD_STRING D1a-Lisa-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 843: LD_EXP 1
 847: PUSH
 848: LD_EXP 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: LD_EXP 4
 861: PPUSH
 862: CALL_OW 119
// end ; if not Cyrus and Bobby then
 866: LD_EXP 3
 870: NOT
 871: PUSH
 872: LD_EXP 2
 876: AND
 877: IFFALSE 1156
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 879: LD_EXP 2
 883: PPUSH
 884: LD_INT 44
 886: PPUSH
 887: LD_INT 70
 889: PPUSH
 890: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 894: LD_EXP 1
 898: PPUSH
 899: LD_INT 46
 901: PPUSH
 902: LD_INT 73
 904: PPUSH
 905: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_STRING D1a-Bobby-1
 916: PPUSH
 917: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 921: LD_EXP 1
 925: PPUSH
 926: LD_STRING D1a-JMM-1
 928: PPUSH
 929: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_INT 37
 940: PPUSH
 941: LD_INT 66
 943: PPUSH
 944: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 38
 955: PPUSH
 956: LD_INT 64
 958: PPUSH
 959: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 963: LD_EXP 2
 967: PPUSH
 968: LD_STRING D1a-Bobby-2
 970: PPUSH
 971: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_INT 35
 982: PPUSH
 983: LD_INT 62
 985: PPUSH
 986: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 990: LD_EXP 1
 994: PPUSH
 995: LD_INT 35
 997: PPUSH
 998: LD_INT 60
1000: PPUSH
1001: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1005: LD_EXP 1
1009: PPUSH
1010: LD_STRING D1a-JMM-2
1012: PPUSH
1013: CALL_OW 88
// ComWalk ( Lisa ) ;
1017: LD_EXP 4
1021: PPUSH
1022: CALL_OW 138
// wait ( 0 0$1 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1033: LD_EXP 4
1037: PPUSH
1038: LD_EXP 1
1042: PPUSH
1043: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1047: LD_EXP 1
1051: PUSH
1052: LD_EXP 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: LD_EXP 4
1065: PPUSH
1066: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: LD_INT 33
1081: PPUSH
1082: LD_INT 55
1084: PPUSH
1085: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 2
1096: ARRAY
1097: PPUSH
1098: LD_INT 30
1100: PPUSH
1101: LD_INT 54
1103: PPUSH
1104: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1126: LD_VAR 0 2
1130: PUSH
1131: LD_INT 2
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1144: LD_EXP 4
1148: PPUSH
1149: LD_STRING D1a-Lisa-2
1151: PPUSH
1152: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1156: LD_EXP 3
1160: NOT
1161: PUSH
1162: LD_EXP 2
1166: NOT
1167: AND
1168: IFFALSE 1382
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_INT 37
1177: PPUSH
1178: LD_INT 66
1180: PPUSH
1181: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1185: LD_EXP 1
1189: PPUSH
1190: LD_STRING D1b-JMM-1
1192: PPUSH
1193: CALL_OW 88
// ComCrawl ( JMM ) ;
1197: LD_EXP 1
1201: PPUSH
1202: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1206: LD_EXP 1
1210: PPUSH
1211: LD_INT 35
1213: PPUSH
1214: LD_INT 60
1216: PPUSH
1217: CALL_OW 171
// wait ( 0 0$8 ) ;
1221: LD_INT 280
1223: PPUSH
1224: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1228: LD_EXP 1
1232: PPUSH
1233: LD_STRING D1b-JMM-1a
1235: PPUSH
1236: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1240: LD_EXP 1
1244: PUSH
1245: LD_EXP 4
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 138
// wait ( 0 0$1 ) ;
1258: LD_INT 35
1260: PPUSH
1261: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1265: LD_EXP 4
1269: PPUSH
1270: LD_EXP 1
1274: PPUSH
1275: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1279: LD_EXP 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: PPUSH
1287: LD_EXP 4
1291: PPUSH
1292: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: LD_INT 33
1307: PPUSH
1308: LD_INT 55
1310: PPUSH
1311: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 2
1322: ARRAY
1323: PPUSH
1324: LD_INT 30
1326: PPUSH
1327: LD_INT 54
1329: PPUSH
1330: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 2
1359: ARRAY
1360: PPUSH
1361: LD_EXP 1
1365: PPUSH
1366: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1370: LD_EXP 4
1374: PPUSH
1375: LD_STRING D1b-Lisa-1
1377: PPUSH
1378: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-1
1389: PPUSH
1390: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1394: LD_EXP 4
1398: PPUSH
1399: LD_STRING D1-Lisa-1
1401: PPUSH
1402: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-2
1413: PPUSH
1414: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-2
1425: PPUSH
1426: CALL_OW 586
// if Cyrus then
1430: LD_EXP 3
1434: IFFALSE 1460
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1436: LD_EXP 3
1440: PPUSH
1441: LD_STRING D1-Cyrus-2
1443: PPUSH
1444: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1448: LD_EXP 1
1452: PPUSH
1453: LD_STRING D1-JMM-3
1455: PPUSH
1456: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1460: LD_EXP 9
1464: PPUSH
1465: LD_STRING D1-Pow-3
1467: PPUSH
1468: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1472: LD_EXP 1
1476: PPUSH
1477: LD_STRING D1-JMM-4
1479: PPUSH
1480: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1484: LD_EXP 9
1488: PPUSH
1489: LD_STRING D1-Pow-4
1491: PPUSH
1492: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1496: LD_EXP 9
1500: PPUSH
1501: LD_STRING D1-Pow-4a
1503: PPUSH
1504: CALL_OW 586
// if Cyrus then
1508: LD_EXP 3
1512: IFFALSE 1526
// Say ( Cyrus , D1-Cyrus-4 ) ;
1514: LD_EXP 3
1518: PPUSH
1519: LD_STRING D1-Cyrus-4
1521: PPUSH
1522: CALL_OW 88
// if Bobby then
1526: LD_EXP 2
1530: IFFALSE 1568
// begin Say ( Bobby , D1-Bobby-4 ) ;
1532: LD_EXP 2
1536: PPUSH
1537: LD_STRING D1-Bobby-4
1539: PPUSH
1540: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1544: LD_EXP 4
1548: PPUSH
1549: LD_STRING D1-Lisa-4
1551: PPUSH
1552: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1556: LD_EXP 1
1560: PPUSH
1561: LD_STRING D1-JMM-5
1563: PPUSH
1564: CALL_OW 88
// end ; InGameOff ;
1568: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: LD_EXP 6
1591: PUSH
1592: LD_EXP 7
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: DIFF
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1609: LD_STRING M1
1611: PPUSH
1612: CALL_OW 337
// SaveForQuickRestart ;
1616: CALL_OW 22
// end ;
1620: LD_VAR 0 1
1624: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1625: LD_INT 7
1627: PPUSH
1628: LD_INT 22
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 70
1642: PUSH
1643: LD_INT 0
1645: GREATER
1646: IFFALSE 2059
1648: GO 1650
1650: DISABLE
// begin InGameOn ;
1651: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1655: LD_INT 22
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 21
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PPUSH
1679: CALL_OW 69
1683: PPUSH
1684: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1688: LD_INT 24
1690: PPUSH
1691: LD_INT 32
1693: PPUSH
1694: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1698: LD_EXP 5
1702: PPUSH
1703: LD_INT 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1713: LD_EXP 5
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL_OW 336
// wait ( 0 0$1 ) ;
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_INT 27
1739: PPUSH
1740: LD_INT 38
1742: PPUSH
1743: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1747: LD_EXP 5
1751: PPUSH
1752: LD_EXP 1
1756: PPUSH
1757: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 1
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_EXP 5
1794: PUSH
1795: EMPTY
1796: LIST
1797: DIFF
1798: PPUSH
1799: LD_EXP 5
1803: PPUSH
1804: CALL_OW 119
// wait ( 0 0$1 ) ;
1808: LD_INT 35
1810: PPUSH
1811: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1815: LD_EXP 5
1819: PPUSH
1820: LD_STRING D2a-Khat-1
1822: PPUSH
1823: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1827: LD_EXP 1
1831: PPUSH
1832: LD_STRING D2a-JMM-1
1834: PPUSH
1835: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1839: LD_EXP 5
1843: PPUSH
1844: LD_STRING D2a-Khat-2
1846: PPUSH
1847: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1851: LD_EXP 1
1855: PPUSH
1856: LD_STRING D2a-JMM-2
1858: PPUSH
1859: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1863: LD_EXP 5
1867: PPUSH
1868: LD_STRING D2a-Khat-3
1870: PPUSH
1871: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1875: LD_EXP 1
1879: PPUSH
1880: LD_STRING D2a-JMM-3
1882: PPUSH
1883: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1887: LD_EXP 5
1891: PPUSH
1892: LD_STRING D2a-Khat-4
1894: PPUSH
1895: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1899: LD_EXP 1
1903: PPUSH
1904: LD_STRING D2a-JMM-4
1906: PPUSH
1907: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1911: LD_EXP 5
1915: PPUSH
1916: LD_STRING D2a-Khat-5
1918: PPUSH
1919: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1923: LD_EXP 1
1927: PPUSH
1928: LD_STRING D2a-JMM-5
1930: PPUSH
1931: CALL_OW 88
// InGameOff ;
1935: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1939: LD_INT 22
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 21
1951: PUSH
1952: LD_INT 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 24
1964: PUSH
1965: LD_INT 800
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: IFFALSE 2059
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1987: LD_EXP 5
1991: PPUSH
1992: LD_INT 22
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 21
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2047: LD_EXP 5
2051: PPUSH
2052: LD_STRING D2b-Khat-1
2054: PPUSH
2055: CALL_OW 88
// end ; end ;
2059: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2060: LD_INT 15
2062: PPUSH
2063: LD_INT 22
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL_OW 70
2077: IFFALSE 3274
2079: GO 2081
2081: DISABLE
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 999
2096: PUSH
2097: LD_INT 999
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PPUSH
2136: CALL_OW 69
2140: PUSH
2141: LD_EXP 1
2145: PUSH
2146: LD_EXP 2
2150: PUSH
2151: LD_EXP 3
2155: PUSH
2156: LD_EXP 4
2160: PUSH
2161: LD_EXP 5
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: DIFF
2173: ST_TO_ADDR
// PrepareDeadSoldiers ;
2174: CALL 11782 0 0
// spotCorpses = 1 ;
2178: LD_ADDR_EXP 32
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2186: LD_INT 70
2188: PPUSH
2189: CALL_OW 67
// InGameOn ;
2193: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2197: LD_INT 23
2199: PPUSH
2200: LD_INT 12
2202: PPUSH
2203: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 2
2216: PUSH
2217: LD_INT 1
2219: ARRAY
2220: PUSH
2221: LD_INT 2
2223: ARRAY
2224: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2225: LD_ADDR_VAR 0 1
2229: PUSH
2230: LD_INT 22
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 21
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: PUSH
2259: LD_EXP 1
2263: PUSH
2264: LD_EXP 5
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: DIFF
2273: PUSH
2274: FOR_IN
2275: IFFALSE 2326
// if IsOK ( i ) then
2277: LD_VAR 0 1
2281: PPUSH
2282: CALL_OW 302
2286: IFFALSE 2324
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_VAR 0 1
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: LD_INT 16
2310: PPUSH
2311: CALL_OW 299
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: ADD
2323: ST_TO_ADDR
2324: GO 2274
2326: POP
2327: POP
// for i = 2 to distanceTab do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 2
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2390
// if distanceTab [ i ] [ 2 ] < min then
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 1
2355: ARRAY
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PUSH
2361: LD_VAR 0 3
2365: LESS
2366: IFFALSE 2388
// min = distanceTab [ i ] [ 2 ] ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: ST_TO_ADDR
2388: GO 2343
2390: POP
2391: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_INT 22
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 21
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 69
2425: PUSH
2426: LD_EXP 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: DIFF
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2506
// begin ComMoveToArea ( i , DeadCutscene ) ;
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_INT 28
2445: PPUSH
2446: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2450: LD_EXP 1
2454: PPUSH
2455: LD_INT 30
2457: PPUSH
2458: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_INT 23
2469: PPUSH
2470: LD_INT 11
2472: PPUSH
2473: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2477: LD_EXP 1
2481: PPUSH
2482: LD_INT 23
2484: PPUSH
2485: LD_INT 11
2487: PPUSH
2488: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2492: LD_EXP 36
2496: PPUSH
2497: LD_INT 250
2499: PPUSH
2500: CALL_OW 234
// end ;
2504: GO 2435
2506: POP
2507: POP
// for i = 2 to distanceTab do
2508: LD_ADDR_VAR 0 1
2512: PUSH
2513: DOUBLE
2514: LD_INT 2
2516: DEC
2517: ST_TO_ADDR
2518: LD_VAR 0 2
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2910
// begin if distanceTab [ i ] [ 2 ] = min then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_VAR 0 1
2535: ARRAY
2536: PUSH
2537: LD_INT 2
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 3
2545: EQUAL
2546: IFFALSE 2908
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_VAR 0 1
2557: ARRAY
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_EXP 2
2567: EQUAL
2568: IFFALSE 2582
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2570: LD_EXP 2
2574: PPUSH
2575: LD_STRING DCorpses-Bobby-1
2577: PPUSH
2578: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2582: LD_VAR 0 2
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PUSH
2597: LD_EXP 3
2601: EQUAL
2602: IFFALSE 2616
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2604: LD_EXP 3
2608: PPUSH
2609: LD_STRING DCorpses-Cyrus-1
2611: PPUSH
2612: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2616: LD_VAR 0 2
2620: PUSH
2621: LD_VAR 0 1
2625: ARRAY
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PUSH
2631: LD_EXP 4
2635: EQUAL
2636: IFFALSE 2650
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2638: LD_EXP 4
2642: PPUSH
2643: LD_STRING DCorpses-Lisa-1
2645: PPUSH
2646: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2650: LD_VAR 0 2
2654: PUSH
2655: LD_VAR 0 1
2659: ARRAY
2660: PUSH
2661: LD_INT 1
2663: ARRAY
2664: PUSH
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 1
2672: ARRAY
2673: EQUAL
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: PPUSH
2684: CALL_OW 258
2688: PUSH
2689: LD_INT 1
2691: EQUAL
2692: AND
2693: IFFALSE 2711
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_STRING DCorpses-Sol1-1
2706: PPUSH
2707: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_INT 1
2733: ARRAY
2734: EQUAL
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PPUSH
2745: CALL_OW 258
2749: PUSH
2750: LD_INT 2
2752: EQUAL
2753: AND
2754: IFFALSE 2772
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: LD_STRING DCorpses-FSol1-1
2767: PPUSH
2768: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2772: LD_VAR 0 2
2776: PUSH
2777: LD_VAR 0 1
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 258
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: AND
2815: IFFALSE 2833
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 2
2824: ARRAY
2825: PPUSH
2826: LD_STRING DCorpses-Sol1-1
2828: PPUSH
2829: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2833: LD_VAR 0 2
2837: PUSH
2838: LD_VAR 0 1
2842: ARRAY
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PUSH
2848: LD_VAR 0 4
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 4
2862: PUSH
2863: LD_INT 2
2865: ARRAY
2866: PPUSH
2867: CALL_OW 258
2871: PUSH
2872: LD_INT 2
2874: EQUAL
2875: AND
2876: IFFALSE 2894
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2878: LD_VAR 0 4
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: PPUSH
2887: LD_STRING DCorpses-FSol1-1
2889: PPUSH
2890: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2894: LD_EXP 36
2898: PPUSH
2899: LD_INT 150
2901: PPUSH
2902: CALL_OW 234
// break ;
2906: GO 2910
// end ; end ;
2908: GO 2523
2910: POP
2911: POP
// p := 0 ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2920: LD_INT 35
2922: PPUSH
2923: CALL_OW 67
// p := p + 1 ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 5
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2941: LD_ADDR_VAR 0 1
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 21
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 69
2974: PUSH
2975: LD_EXP 1
2979: PUSH
2980: EMPTY
2981: LIST
2982: DIFF
2983: PUSH
2984: FOR_IN
2985: IFFALSE 3055
// begin ComMoveToArea ( i , DeadCutscene ) ;
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 28
2994: PPUSH
2995: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2999: LD_EXP 1
3003: PPUSH
3004: LD_INT 30
3006: PPUSH
3007: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_INT 23
3018: PPUSH
3019: LD_INT 11
3021: PPUSH
3022: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3026: LD_EXP 1
3030: PPUSH
3031: LD_INT 23
3033: PPUSH
3034: LD_INT 11
3036: PPUSH
3037: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3041: LD_EXP 36
3045: PPUSH
3046: LD_INT 250
3048: PPUSH
3049: CALL_OW 234
// end ;
3053: GO 2984
3055: POP
3056: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3057: LD_EXP 1
3061: PPUSH
3062: LD_INT 30
3064: PPUSH
3065: CALL_OW 308
3069: PUSH
3070: LD_VAR 0 5
3074: PUSH
3075: LD_INT 16
3077: GREATEREQUAL
3078: OR
3079: IFFALSE 2920
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING DCorpses-JMM-1
3095: PPUSH
3096: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3100: LD_EXP 36
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 234
// if IsOK ( Khatam ) then
3112: LD_EXP 5
3116: PPUSH
3117: CALL_OW 302
3121: IFFALSE 3258
// begin repeat wait ( 0 0$1 ) ;
3123: LD_INT 35
3125: PPUSH
3126: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3130: LD_EXP 5
3134: PPUSH
3135: LD_EXP 36
3139: PPUSH
3140: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3144: LD_EXP 5
3148: PPUSH
3149: LD_EXP 36
3153: PPUSH
3154: CALL_OW 296
3158: PUSH
3159: LD_INT 2
3161: LESS
3162: IFFALSE 3123
// spotCorpses = 0 ;
3164: LD_ADDR_EXP 32
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3172: LD_EXP 36
3176: PPUSH
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 234
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// KillUnit ( DyingSold ) ;
3191: LD_EXP 36
3195: PPUSH
3196: CALL_OW 66
// wait ( 0 0$1 ) ;
3200: LD_INT 35
3202: PPUSH
3203: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3207: LD_EXP 1
3211: PUSH
3212: LD_EXP 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3225: LD_EXP 5
3229: PPUSH
3230: LD_EXP 1
3234: PPUSH
3235: CALL_OW 119
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3246: LD_EXP 5
3250: PPUSH
3251: LD_STRING DCorpses-Khat-1
3253: PPUSH
3254: CALL_OW 88
// end ; InGameOff ;
3258: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3262: LD_EXP 1
3266: PPUSH
3267: LD_STRING DCorpses-JMM-2
3269: PPUSH
3270: CALL_OW 88
// end ;
3274: PPOPN 5
3276: END
// every 0 0$1 trigger spotCorpses = 1 do
3277: LD_EXP 32
3281: PUSH
3282: LD_INT 1
3284: EQUAL
3285: IFFALSE 3303
3287: GO 3289
3289: DISABLE
// begin enable ;
3290: ENABLE
// SetLives ( DyingSold , 10 ) ;
3291: LD_EXP 36
3295: PPUSH
3296: LD_INT 10
3298: PPUSH
3299: CALL_OW 234
// end ;
3303: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3304: LD_INT 8
3306: PPUSH
3307: LD_INT 22
3309: PUSH
3310: LD_INT 1
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 70
3321: PUSH
3322: LD_INT 22
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PPUSH
3337: LD_EXP 7
3341: PPUSH
3342: CALL_OW 74
3346: PPUSH
3347: LD_EXP 7
3351: PPUSH
3352: CALL_OW 296
3356: PUSH
3357: LD_INT 13
3359: LESS
3360: OR
3361: IFFALSE 3542
3363: GO 3365
3365: DISABLE
3366: LD_INT 0
3368: PPUSH
// begin InGameOn ;
3369: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3373: LD_EXP 7
3377: PPUSH
3378: LD_INT 250
3380: PPUSH
3381: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3385: LD_EXP 6
3389: PPUSH
3390: LD_INT 1000
3392: PUSH
3393: LD_INT 800
3395: PUSH
3396: LD_INT 750
3398: PUSH
3399: LD_INT 700
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_OWVAR 67
3412: ARRAY
3413: PPUSH
3414: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3418: LD_INT 3
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3434: LD_EXP 6
3438: PUSH
3439: LD_EXP 7
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_INT 9
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 70
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: UNION
3490: PUSH
3491: FOR_IN
3492: IFFALSE 3505
// ComFree ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 139
3503: GO 3491
3505: POP
3506: POP
// wait ( 0 0$1 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 67
// InGameOff ;
3514: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3518: LD_EXP 6
3522: PPUSH
3523: LD_STRING DF-Sol1-1
3525: PPUSH
3526: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DF-JMM-1
3537: PPUSH
3538: CALL_OW 88
// end ;
3542: PPOPN 1
3544: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3545: LD_INT 19
3547: PPUSH
3548: LD_INT 22
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: CALL_OW 70
3562: PUSH
3563: LD_INT 0
3565: EQUAL
3566: IFFALSE 3675
3568: GO 3570
3570: DISABLE
// begin if not IsDead ( Brian ) then
3571: LD_EXP 6
3575: PPUSH
3576: CALL_OW 301
3580: NOT
3581: IFFALSE 3595
// SetSide ( Brian , 1 ) ;
3583: LD_EXP 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 235
// if not IsDead ( Jerry ) then
3595: LD_EXP 7
3599: PPUSH
3600: CALL_OW 301
3604: NOT
3605: IFFALSE 3619
// SetSide ( Jerry , 1 ) ;
3607: LD_EXP 7
3611: PPUSH
3612: LD_INT 1
3614: PPUSH
3615: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3619: LD_INT 22
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: IFFALSE 3663
// Say ( JMM , DFa-JMM-1 ) else
3649: LD_EXP 1
3653: PPUSH
3654: LD_STRING DFa-JMM-1
3656: PPUSH
3657: CALL_OW 88
3661: GO 3675
// Say ( JMM , DFa-JMM-1a ) ;
3663: LD_EXP 1
3667: PPUSH
3668: LD_STRING DFa-JMM-1a
3670: PPUSH
3671: CALL_OW 88
// end ;
3675: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3676: LD_INT 19
3678: PPUSH
3679: LD_INT 22
3681: PUSH
3682: LD_INT 3
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 70
3693: PUSH
3694: LD_INT 0
3696: EQUAL
3697: PUSH
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 302
3707: NOT
3708: AND
3709: IFFALSE 3795
3711: GO 3713
3713: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3721: LD_EXP 6
3725: PPUSH
3726: CALL_OW 256
3730: PUSH
3731: LD_INT 250
3733: GREATER
3734: IFFALSE 3714
// Say ( Brian , DFb-Sol1-1 ) ;
3736: LD_EXP 6
3740: PPUSH
3741: LD_STRING DFb-Sol1-1
3743: PPUSH
3744: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3748: LD_EXP 6
3752: PPUSH
3753: LD_INT 78
3755: PPUSH
3756: LD_INT 74
3758: PPUSH
3759: CALL_OW 111
// if IsDead ( Jerry ) then
3763: LD_EXP 7
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3788
// Say ( Brian , DFb-Sol1-1a ) else
3774: LD_EXP 6
3778: PPUSH
3779: LD_STRING DFb-Sol1-1a
3781: PPUSH
3782: CALL_OW 88
3786: GO 3795
// SetAchievement ( ACH_JERRY ) ;
3788: LD_STRING ACH_JERRY
3790: PPUSH
3791: CALL_OW 543
// end ;
3795: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3796: LD_INT 22
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 21
3808: PUSH
3809: LD_INT 2
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: PUSH
3825: LD_INT 0
3827: EQUAL
3828: IFFALSE 3920
3830: GO 3832
3832: DISABLE
3833: LD_INT 0
3835: PPUSH
// begin enable ;
3836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 21
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 30
3864: PUSH
3865: LD_INT 31
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3918
// begin if See ( 1 , i ) then
3885: LD_INT 1
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL_OW 292
3897: IFFALSE 3916
// begin disable ;
3899: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING DX1-JMM-1
3907: PPUSH
3908: CALL_OW 88
// exit ;
3912: POP
3913: POP
3914: GO 3920
// end ; end ;
3916: GO 3882
3918: POP
3919: POP
// end ;
3920: PPOPN 1
3922: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 11
3928: PPUSH
3929: CALL_OW 294
3933: IFFALSE 4196
3935: GO 3937
3937: DISABLE
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// begin DialogueOn ;
3943: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3947: LD_INT 11
3949: PPUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 21
3962: PUSH
3963: LD_INT 1
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: PUSH
3979: LD_INT 1
3981: ARRAY
3982: PPUSH
3983: LD_STRING DX3-Rus1-1
3985: PPUSH
3986: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3990: LD_EXP 1
3994: PPUSH
3995: LD_STRING DX3-JMM-1
3997: PPUSH
3998: CALL_OW 88
// DialogueOff ;
4002: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4006: LD_ADDR_VAR 0 1
4010: PUSH
4011: LD_INT 11
4013: PPUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 25
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4064
// southBaseDefenders = southBaseDefenders ^ i ;
4046: LD_ADDR_EXP 25
4050: PUSH
4051: LD_EXP 25
4055: PUSH
4056: LD_VAR 0 1
4060: ADD
4061: ST_TO_ADDR
4062: GO 4043
4064: POP
4065: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4066: LD_INT 175
4068: PUSH
4069: LD_INT 140
4071: PUSH
4072: LD_INT 105
4074: PUSH
4075: LD_INT 70
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PPUSH
4090: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 22
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: ST_TO_ADDR
// if not mech then
4139: LD_VAR 0 3
4143: NOT
4144: IFFALSE 4148
// exit ;
4146: GO 4196
// ComExitBuilding ( mech ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 122
// wait ( 0 0$1 ) ;
4157: LD_INT 35
4159: PPUSH
4160: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4164: LD_VAR 0 3
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: LD_INT 5
4175: PPUSH
4176: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4180: LD_VAR 0 3
4184: PUSH
4185: LD_INT 2
4187: ARRAY
4188: PPUSH
4189: LD_INT 4
4191: PPUSH
4192: CALL_OW 180
// end ;
4196: PPOPN 3
4198: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 5
4204: PPUSH
4205: CALL_OW 292
4209: PUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 292
4220: OR
4221: IFFALSE 4305
4223: GO 4225
4225: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4226: LD_INT 5
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 85
// if IsOK ( Bobby ) then
4240: LD_EXP 2
4244: PPUSH
4245: CALL_OW 302
4249: IFFALSE 4285
// begin DialogueOn ;
4251: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4255: LD_EXP 2
4259: PPUSH
4260: LD_STRING DX2-Bobby-1
4262: PPUSH
4263: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4267: LD_EXP 1
4271: PPUSH
4272: LD_STRING DX2-JMM-1a
4274: PPUSH
4275: CALL_OW 88
// DialogueOff ;
4279: CALL_OW 7
// end else
4283: GO 4305
// begin DialogueOn ;
4285: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4289: LD_EXP 1
4293: PPUSH
4294: LD_STRING DX2-JMM-1
4296: PPUSH
4297: CALL_OW 88
// DialogueOff ;
4301: CALL_OW 7
// end ; end ;
4305: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4306: LD_INT 22
4308: PUSH
4309: LD_INT 1
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 23
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 21
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 34
4338: PUSH
4339: LD_INT 42
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 69
4356: IFFALSE 4777
4358: GO 4360
4360: DISABLE
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_INT 22
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 23
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 34
4405: PUSH
4406: LD_INT 42
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 26
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 3
4478: PUSH
4479: LD_EXP 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4490: LD_ADDR_VAR 0 4
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 4
4539: PUSH
4540: EMPTY
4541: LIST
4542: DIFF
4543: ST_TO_ADDR
// if not tmp then
4544: LD_VAR 0 1
4548: NOT
4549: IFFALSE 4553
// exit ;
4551: GO 4777
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: CALL_OW 311
4571: ST_TO_ADDR
// if not speaker then
4572: LD_VAR 0 2
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4777
// DialogueOn ;
4581: CALL_OW 6
// if speaker = JMM then
4585: LD_VAR 0 2
4589: PUSH
4590: LD_EXP 1
4594: EQUAL
4595: IFFALSE 4629
// begin if Lisa then
4597: LD_EXP 4
4601: IFFALSE 4615
// Say ( Lisa , DX2b-Lisa-1 ) ;
4603: LD_EXP 4
4607: PPUSH
4608: LD_STRING DX2b-Lisa-1
4610: PPUSH
4611: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_STRING DX2b-JMM-1
4622: PPUSH
4623: CALL_OW 88
// end else
4627: GO 4773
// begin Say ( JMM , DX2a-JMM-1 ) ;
4629: LD_EXP 1
4633: PPUSH
4634: LD_STRING DX2a-JMM-1
4636: PPUSH
4637: CALL_OW 88
// if speaker = Bobby then
4641: LD_VAR 0 2
4645: PUSH
4646: LD_EXP 2
4650: EQUAL
4651: IFFALSE 4665
// Say ( Bobby , DX2a-Bobby-1 ) ;
4653: LD_EXP 2
4657: PPUSH
4658: LD_STRING DX2a-Bobby-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Cyrus then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 3
4674: EQUAL
4675: IFFALSE 4689
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4677: LD_EXP 3
4681: PPUSH
4682: LD_STRING DX2a-Cyrus-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Lisa then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 4
4698: EQUAL
4699: IFFALSE 4713
// Say ( Lisa , DX2a-Lisa-1 ) ;
4701: LD_EXP 4
4705: PPUSH
4706: LD_STRING DX2a-Lisa-1
4708: PPUSH
4709: CALL_OW 88
// if speaker in temp1 then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_VAR 0 3
4722: IN
4723: IFFALSE 4737
// Say ( speaker , DX2a-Sol1-1 ) ;
4725: LD_VAR 0 2
4729: PPUSH
4730: LD_STRING DX2a-Sol1-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp2 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 4
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-FSol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-FSol1-1
4756: PPUSH
4757: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4761: LD_EXP 1
4765: PPUSH
4766: LD_STRING DX2a-JMM-2
4768: PPUSH
4769: CALL_OW 88
// end ; DialogueOff ;
4773: CALL_OW 7
// end ;
4777: PPOPN 5
4779: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 255
4787: PUSH
4788: LD_INT 1
4790: EQUAL
4791: PUSH
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 255
4799: PUSH
4800: LD_INT 1
4802: EQUAL
4803: OR
4804: IFFALSE 4864
4806: GO 4808
4808: DISABLE
// begin DialogueOn ;
4809: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING D3-JMM-1
4820: PPUSH
4821: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4825: LD_EXP 9
4829: PPUSH
4830: LD_STRING D3-Pow-1
4832: PPUSH
4833: CALL_OW 586
// if IsOK ( Cyrus ) then
4837: LD_EXP 3
4841: PPUSH
4842: CALL_OW 302
4846: IFFALSE 4860
// Say ( Cyrus , D3-Cyrus-1 ) ;
4848: LD_EXP 3
4852: PPUSH
4853: LD_STRING D3-Cyrus-1
4855: PPUSH
4856: CALL_OW 88
// DialogueOff ;
4860: CALL_OW 7
// end ;
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: AND
4889: PUSH
4890: LD_INT 1
4892: PPUSH
4893: CALL_OW 302
4897: AND
4898: PUSH
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 302
4906: AND
4907: IFFALSE 6297
4909: GO 4911
4911: DISABLE
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
4916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 21
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// if tmp then
4951: LD_VAR 0 2
4955: IFFALSE 5016
// begin for i in tmp do
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_VAR 0 2
4966: PUSH
4967: FOR_IN
4968: IFFALSE 5014
// begin if IsInUnit ( i ) then
4970: LD_VAR 0 3
4974: PPUSH
4975: CALL_OW 310
4979: IFFALSE 4990
// ComExitBuilding ( i ) ;
4981: LD_VAR 0 3
4985: PPUSH
4986: CALL_OW 122
// wait ( 0 0$1 ) ;
4990: LD_INT 35
4992: PPUSH
4993: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 54
5004: PPUSH
5005: LD_INT 17
5007: PPUSH
5008: CALL_OW 174
// end ;
5012: GO 4967
5014: POP
5015: POP
// end ; wait ( 0 0$03 ) ;
5016: LD_INT 105
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5027: LD_EXP 1
5031: PPUSH
5032: LD_STRING D3a-JMM-1
5034: PPUSH
5035: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5039: LD_EXP 9
5043: PPUSH
5044: LD_STRING D3a-Pow-1
5046: PPUSH
5047: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5051: LD_EXP 1
5055: PPUSH
5056: LD_STRING D3a-JMM-2
5058: PPUSH
5059: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5063: LD_EXP 9
5067: PPUSH
5068: LD_STRING D3a-Pow-2
5070: PPUSH
5071: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5075: LD_EXP 1
5079: PPUSH
5080: LD_STRING D3a-JMM-3
5082: PPUSH
5083: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5087: LD_EXP 9
5091: PPUSH
5092: LD_STRING D3a-Pow-3
5094: PPUSH
5095: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5099: LD_EXP 1
5103: PPUSH
5104: LD_STRING D3a-JMM-4
5106: PPUSH
5107: CALL_OW 88
// DialogueOff ;
5111: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5115: LD_STRING M2
5117: PPUSH
5118: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5122: LD_EXP 1
5126: PPUSH
5127: LD_STRING D3b-JMM-1
5129: PPUSH
5130: CALL_OW 88
// Hint ( Depot2 ) ;
5134: LD_STRING Depot2
5136: PPUSH
5137: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5141: LD_INT 35
5143: PPUSH
5144: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5148: LD_INT 22
5150: PPUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 70
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 21
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: NOT
5209: AND
5210: IFFALSE 5141
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5212: LD_ADDR_VAR 0 1
5216: PUSH
5217: LD_INT 22
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 23
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 25
5239: PUSH
5240: LD_INT 2
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 50
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: LD_INT 56
5255: PUSH
5256: EMPTY
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 5
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: DIFF
5285: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5286: LD_INT 35
5288: PPUSH
5289: CALL_OW 67
// until temp > 0 ;
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 0
5300: GREATER
5301: IFFALSE 5212
// wait ( 0 0$5 ) ;
5303: LD_INT 175
5305: PPUSH
5306: CALL_OW 67
// PrepareRussianHeroes ;
5310: CALL 12008 0 0
// InGameOn ;
5314: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5318: LD_EXP 8
5322: PPUSH
5323: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5327: LD_EXP 1
5331: PUSH
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 1
5339: ARRAY
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5354: LD_EXP 8
5358: PPUSH
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: CALL_OW 119
// wait ( 0 0$02 ) ;
5372: LD_INT 70
5374: PPUSH
5375: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5379: LD_EXP 8
5383: PPUSH
5384: LD_STRING D4-Mikh-1
5386: PPUSH
5387: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5391: LD_VAR 0 1
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: CALL_OW 258
5404: PUSH
5405: LD_INT 1
5407: EQUAL
5408: IFFALSE 5426
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_STRING D4-Sol1-1
5421: PPUSH
5422: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5426: LD_VAR 0 1
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: CALL_OW 258
5439: PUSH
5440: LD_INT 2
5442: EQUAL
5443: IFFALSE 5461
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5445: LD_VAR 0 1
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_STRING D4-FSol1-1
5456: PPUSH
5457: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5461: LD_EXP 8
5465: PPUSH
5466: LD_STRING D4-Mikh-2
5468: PPUSH
5469: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PPUSH
5482: CALL_OW 258
5486: PUSH
5487: LD_INT 1
5489: EQUAL
5490: IFFALSE 5508
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5492: LD_VAR 0 1
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: LD_STRING D4-Sol1-2
5503: PPUSH
5504: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: CALL_OW 258
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5543
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5527: LD_VAR 0 1
5531: PUSH
5532: LD_INT 1
5534: ARRAY
5535: PPUSH
5536: LD_STRING D4-FSol1-2
5538: PPUSH
5539: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5543: LD_EXP 8
5547: PPUSH
5548: LD_STRING D4-Mikh-3
5550: PPUSH
5551: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5555: LD_VAR 0 1
5559: PUSH
5560: LD_INT 1
5562: ARRAY
5563: PPUSH
5564: CALL_OW 258
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: IFFALSE 5590
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5574: LD_VAR 0 1
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PPUSH
5583: LD_STRING D4-Sol1-3
5585: PPUSH
5586: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: PPUSH
5599: CALL_OW 258
5603: PUSH
5604: LD_INT 2
5606: EQUAL
5607: IFFALSE 5625
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5609: LD_VAR 0 1
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_STRING D4-FSol1-3
5620: PPUSH
5621: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5625: LD_EXP 8
5629: PPUSH
5630: LD_STRING D4-Mikh-4
5632: PPUSH
5633: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5637: LD_STRING Qs1
5639: PPUSH
5640: CALL_OW 97
5644: PUSH
5645: LD_INT 1
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5688
5653: POP
// begin InGameOff ;
5654: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5658: LD_INT 1
5660: PPUSH
5661: LD_INT 6
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5674: LD_EXP 8
5678: PPUSH
5679: LD_INT 17
5681: PPUSH
5682: CALL_OW 113
// end ; 2 :
5686: GO 6281
5688: LD_INT 2
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 6246
5696: POP
// begin repeat wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 1
5711: ARRAY
5712: PPUSH
5713: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_EXP 1
5730: PPUSH
5731: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_EXP 1
5744: PPUSH
5745: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_EXP 8
5758: PPUSH
5759: CALL_OW 296
5763: PUSH
5764: LD_INT 5
5766: LESS
5767: IFFALSE 5697
// ComTurnUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_STRING D4b-JMM-1
5790: PPUSH
5791: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5795: LD_EXP 8
5799: PPUSH
5800: LD_STRING D4b-Mikh-1
5802: PPUSH
5803: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D4b-JMM-2
5814: PPUSH
5815: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5819: LD_EXP 8
5823: PPUSH
5824: LD_STRING D4b-Mikh-2
5826: PPUSH
5827: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-3
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-3
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-4
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-4
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-5
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-5
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-6
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-6
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-7
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-7
5946: PPUSH
5947: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5951: LD_VAR 0 1
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 258
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5986
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5970: LD_VAR 0 1
5974: PUSH
5975: LD_INT 1
5977: ARRAY
5978: PPUSH
5979: LD_STRING D4b-Sol1-7
5981: PPUSH
5982: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5986: LD_VAR 0 1
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: CALL_OW 258
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6021
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6005: LD_VAR 0 1
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_STRING D4b-FSol1-7
6016: PPUSH
6017: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D4b-JMM-8
6028: PPUSH
6029: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6033: LD_VAR 0 1
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 258
6046: PUSH
6047: LD_INT 1
6049: EQUAL
6050: IFFALSE 6068
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6052: LD_VAR 0 1
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_STRING D4b-Sol1-8
6063: PPUSH
6064: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6068: LD_VAR 0 1
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: PPUSH
6077: CALL_OW 258
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6103
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6087: LD_VAR 0 1
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_STRING D4b-FSol1-8
6098: PPUSH
6099: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6103: LD_EXP 1
6107: PPUSH
6108: LD_STRING D4b-JMM-9
6110: PPUSH
6111: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6115: LD_EXP 8
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 22
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: PUSH
6150: FOR_IN
6151: IFFALSE 6164
// ComFree ( i ) ;
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 139
6162: GO 6150
6164: POP
6165: POP
// repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6173: LD_EXP 8
6177: PPUSH
6178: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6182: LD_EXP 8
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: LD_INT 1
6202: PPUSH
6203: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 310
6216: IFFALSE 6166
// mikhailDepot = IsInUnit ( Mikhail ) ;
6218: LD_ADDR_EXP 23
6222: PUSH
6223: LD_EXP 8
6227: PPUSH
6228: CALL_OW 310
6232: ST_TO_ADDR
// InGameOff ;
6233: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6237: LD_STRING M3
6239: PPUSH
6240: CALL_OW 337
// end ; 3 :
6244: GO 6281
6246: LD_INT 3
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6255: LD_EXP 8
6259: PPUSH
6260: LD_INT 17
6262: PPUSH
6263: CALL_OW 113
// wait ( 0 0$3 ) ;
6267: LD_INT 105
6269: PPUSH
6270: CALL_OW 67
// InGameOff ;
6274: CALL_OW 9
// end ; end ;
6278: GO 6281
6280: POP
// PrepareTigers ;
6281: CALL 15489 0 0
// RussianTrap ;
6285: CALL 10335 0 0
// tigersRespawn = 1 ;
6289: LD_ADDR_EXP 30
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// end ;
6297: PPOPN 3
6299: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: PUSH
6312: LD_INT 10
6314: PPUSH
6315: CALL_OW 255
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: CALL_OW 274
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 275
6340: PUSH
6341: LD_INT 100
6343: GREATEREQUAL
6344: AND
6345: IFFALSE 6494
6347: GO 6349
6349: DISABLE
6350: LD_INT 0
6352: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6353: LD_INT 2100
6355: PPUSH
6356: LD_INT 4200
6358: PPUSH
6359: CALL_OW 12
6363: PUSH
6364: LD_INT 1050
6366: PLUS
6367: PPUSH
6368: CALL_OW 67
// PrepareCargoBays ;
6372: CALL 13191 0 0
// cargoRespawn = 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6384: LD_ADDR_VAR 0 1
6388: PUSH
6389: LD_EXP 15
6393: PUSH
6394: LD_EXP 16
6398: PUSH
6399: LD_EXP 17
6403: PUSH
6404: LD_EXP 18
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_INT 17
6422: PPUSH
6423: LD_INT 10
6425: PPUSH
6426: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6430: LD_VAR 0 1
6434: PPUSH
6435: LD_INT 36
6437: PPUSH
6438: LD_INT 13
6440: PPUSH
6441: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 40
6452: PPUSH
6453: LD_INT 20
6455: PPUSH
6456: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 53
6467: PPUSH
6468: LD_INT 16
6470: PPUSH
6471: CALL_OW 171
// wait ( 0 0$5 ) ;
6475: LD_INT 175
6477: PPUSH
6478: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6482: LD_EXP 17
6486: PPUSH
6487: LD_STRING D5-Rus2-1
6489: PPUSH
6490: CALL_OW 88
// end ;
6494: PPOPN 1
6496: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6497: LD_EXP 28
6501: PUSH
6502: LD_INT 1
6504: EQUAL
6505: IFFALSE 6660
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6513: LD_ADDR_VAR 0 1
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 21
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 34
6540: PUSH
6541: LD_INT 51
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6558: LD_INT 105
6560: PPUSH
6561: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6565: LD_VAR 0 1
6569: PPUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 60
6575: PUSH
6576: EMPTY
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 72
6587: PUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 24
6598: PUSH
6599: LD_INT 980
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: OR
6615: IFFALSE 6558
// ComMoveXY ( cargos , 7 , 9 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 7
6624: PPUSH
6625: LD_INT 9
6627: PPUSH
6628: CALL_OW 111
// cargoSee = 1 ;
6632: LD_ADDR_EXP 29
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// cargoEscape = 1 ;
6640: LD_ADDR_EXP 20
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6648: LD_EXP 17
6652: PPUSH
6653: LD_STRING D5-Rus2-1a
6655: PPUSH
6656: CALL_OW 88
// end ;
6660: PPOPN 1
6662: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6663: LD_EXP 20
6667: PUSH
6668: LD_EXP 15
6672: PUSH
6673: LD_EXP 16
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: LD_INT 50
6684: PUSH
6685: EMPTY
6686: LIST
6687: PUSH
6688: LD_INT 22
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 52
6700: PUSH
6701: EMPTY
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: AND
6714: IFFALSE 7047
6716: GO 6718
6718: DISABLE
6719: LD_INT 0
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
// begin enable ;
6725: ENABLE
// for i in [ cargo1 , cargo2 ] do
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_EXP 15
6735: PUSH
6736: LD_EXP 16
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: FOR_IN
6746: IFFALSE 7045
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_VAR 0 2
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 2
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 6
6775: PPUSH
6776: CALL 78244 0 3
6780: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6781: LD_VAR 0 1
6785: PUSH
6786: LD_VAR 0 2
6790: PPUSH
6791: CALL 79467 0 1
6795: PUSH
6796: LD_INT 4
6798: ARRAY
6799: PUSH
6800: LD_INT 60
6802: LESS
6803: AND
6804: IFFALSE 6843
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6806: LD_VAR 0 2
6810: PPUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_VAR 0 1
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 2
6835: ARRAY
6836: PPUSH
6837: CALL_OW 117
6841: GO 7043
// if not IsInArea ( i , RemoveArea ) then
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 32
6850: PPUSH
6851: CALL_OW 308
6855: NOT
6856: IFFALSE 7004
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 250
6872: PPUSH
6873: LD_INT 4
6875: PPUSH
6876: LD_INT 3
6878: PPUSH
6879: CALL_OW 272
6883: ST_TO_ADDR
// y := GetY ( i ) ;
6884: LD_ADDR_VAR 0 4
6888: PUSH
6889: LD_VAR 0 2
6893: PPUSH
6894: CALL_OW 251
6898: ST_TO_ADDR
// if HexInfo ( x , y ) then
6899: LD_VAR 0 3
6903: PPUSH
6904: LD_VAR 0 4
6908: PPUSH
6909: CALL_OW 428
6913: IFFALSE 6936
// x := ShiftX ( x , 4 , 3 ) ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: CALL_OW 272
6935: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6936: LD_VAR 0 3
6940: PPUSH
6941: LD_VAR 0 4
6945: PPUSH
6946: CALL_OW 428
6950: PUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_VAR 0 4
6960: PPUSH
6961: CALL_OW 488
6965: NOT
6966: OR
6967: IFFALSE 6983
// ComMoveToArea ( i , RemoveArea ) else
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 32
6976: PPUSH
6977: CALL_OW 113
6981: GO 7002
// ComMoveXY ( i , x , y ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 111
// end else
7002: GO 7043
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7004: LD_VAR 0 2
7008: PPUSH
7009: CALL_OW 311
7013: PPUSH
7014: CALL_OW 64
// RemoveUnit ( i ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7027: LD_ADDR_EXP 20
7031: PUSH
7032: LD_EXP 20
7036: PUSH
7037: LD_INT 1
7039: PLUS
7040: ST_TO_ADDR
// continue ;
7041: GO 6745
// end ; end ;
7043: GO 6745
7045: POP
7046: POP
// end ;
7047: PPOPN 4
7049: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7050: LD_EXP 20
7054: PUSH
7055: LD_INT 1
7057: GREATER
7058: IFFALSE 7307
7060: GO 7062
7062: DISABLE
7063: LD_INT 0
7065: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7066: LD_INT 4
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7079: LD_INT 31
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 324
// Hint ( Bunker ) ;
7092: LD_STRING Bunker
7094: PPUSH
7095: CALL_OW 339
// if IsOK ( Jerry ) then
7099: LD_EXP 7
7103: PPUSH
7104: CALL_OW 302
7108: IFFALSE 7124
// Say ( Jerry , D5a-Sol1-1 ) else
7110: LD_EXP 7
7114: PPUSH
7115: LD_STRING D5a-Sol1-1
7117: PPUSH
7118: CALL_OW 88
7122: GO 7210
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 22
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 26
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_EXP 1
7162: PUSH
7163: LD_EXP 2
7167: PUSH
7168: LD_EXP 3
7172: PUSH
7173: LD_EXP 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: DIFF
7184: ST_TO_ADDR
// if not speaker then
7185: LD_VAR 0 1
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 7307
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PPUSH
7203: LD_STRING D5a-Sol1-1
7205: PPUSH
7206: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7210: LD_EXP 1
7214: PPUSH
7215: LD_STRING D5a-JMM-1
7217: PPUSH
7218: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7222: LD_INT 22
7224: PPUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 70
7253: IFFALSE 7307
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7255: LD_INT 22
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: LD_INT 31
7293: PPUSH
7294: LD_INT 44
7296: PPUSH
7297: LD_INT 13
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 145
// end ;
7307: PPOPN 1
7309: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 255
7317: PUSH
7318: LD_INT 3
7320: EQUAL
7321: PUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 256
7329: PUSH
7330: LD_INT 1000
7332: LESS
7333: AND
7334: PUSH
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 255
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: PUSH
7347: LD_INT 10
7349: PPUSH
7350: CALL_OW 256
7354: PUSH
7355: LD_INT 1000
7357: LESS
7358: AND
7359: OR
7360: IFFALSE 7377
7362: GO 7364
7364: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7365: LD_EXP 1
7369: PPUSH
7370: LD_STRING D8-JMM-1
7372: PPUSH
7373: CALL_OW 88
7377: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7378: LD_EXP 8
7382: PPUSH
7383: CALL_OW 310
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: PUSH
7392: LD_EXP 22
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: NOT
7401: AND
7402: IFFALSE 7424
7404: GO 7406
7406: DISABLE
// begin enable ;
7407: ENABLE
// mikhailInBase = 1 ;
7408: LD_ADDR_EXP 22
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// mikhailStatus = 1 ;
7416: LD_ADDR_EXP 21
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// end ;
7424: END
// export function AskMikhail ; begin
7425: LD_INT 0
7427: PPUSH
// case Query ( QMikh2 ) of 1 :
7428: LD_STRING QMikh2
7430: PPUSH
7431: CALL_OW 97
7435: PUSH
7436: LD_INT 1
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7511
7444: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 6
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7461: LD_EXP 8
7465: PPUSH
7466: LD_INT 6
7468: PPUSH
7469: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7473: LD_EXP 8
7477: PPUSH
7478: CALL_OW 122
// wait ( 0 0$1 ) ;
7482: LD_INT 35
7484: PPUSH
7485: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 17
7496: PPUSH
7497: CALL_OW 113
// mikhailInbase = 0 ;
7501: LD_ADDR_EXP 22
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// end ; 2 :
7509: GO 7752
7511: LD_INT 2
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7692
7519: POP
// begin mikhailInBase = 2 ;
7520: LD_ADDR_EXP 22
7524: PUSH
7525: LD_INT 2
7527: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 6
7535: PPUSH
7536: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7540: LD_EXP 8
7544: PPUSH
7545: CALL_OW 122
// wait ( 0 0$1 ) ;
7549: LD_INT 35
7551: PPUSH
7552: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7556: LD_EXP 8
7560: PPUSH
7561: LD_EXP 8
7565: PPUSH
7566: CALL_OW 250
7570: PUSH
7571: LD_INT 2
7573: PLUS
7574: PPUSH
7575: LD_EXP 8
7579: PPUSH
7580: CALL_OW 251
7584: PUSH
7585: LD_INT 2
7587: PLUS
7588: PPUSH
7589: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7593: LD_EXP 8
7597: PPUSH
7598: LD_EXP 8
7602: PPUSH
7603: CALL_OW 250
7607: PUSH
7608: LD_INT 1
7610: PLUS
7611: PPUSH
7612: LD_EXP 8
7616: PPUSH
7617: CALL_OW 251
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_EXP 8
7639: PPUSH
7640: CALL_OW 250
7644: PUSH
7645: LD_INT 2
7647: PLUS
7648: PPUSH
7649: LD_EXP 8
7653: PPUSH
7654: CALL_OW 251
7658: PPUSH
7659: CALL_OW 171
// wait ( 0 0$5 ) ;
7663: LD_INT 175
7665: PPUSH
7666: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7670: LD_EXP 8
7674: PPUSH
7675: LD_INT 25
7677: PPUSH
7678: CALL_OW 113
// mikhailInBase = 4 ;
7682: LD_ADDR_EXP 22
7686: PUSH
7687: LD_INT 4
7689: ST_TO_ADDR
// end ; 3 :
7690: GO 7752
7692: LD_INT 3
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7751
7700: POP
// begin SetSide ( Mikhail , 6 ) ;
7701: LD_EXP 8
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7713: LD_EXP 8
7717: PPUSH
7718: CALL_OW 122
// wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7729: LD_EXP 8
7733: PPUSH
7734: LD_INT 17
7736: PPUSH
7737: CALL_OW 113
// mikhailInbase = 3 ;
7741: LD_ADDR_EXP 22
7745: PUSH
7746: LD_INT 3
7748: ST_TO_ADDR
// end ; end ;
7749: GO 7752
7751: POP
// end ;
7752: LD_VAR 0 1
7756: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7757: LD_EXP 8
7761: PPUSH
7762: LD_INT 25
7764: PPUSH
7765: CALL_OW 308
7769: PUSH
7770: LD_EXP 22
7774: PUSH
7775: LD_INT 4
7777: EQUAL
7778: AND
7779: IFFALSE 7883
7781: GO 7783
7783: DISABLE
// begin enable ;
7784: ENABLE
// mikhailInBase = 1 ;
7785: LD_ADDR_EXP 22
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// InGameOn ;
7793: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 6
7802: PPUSH
7803: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7807: LD_INT 35
7809: PPUSH
7810: CALL_OW 67
// if Carry ( Mikhail ) then
7814: LD_EXP 8
7818: PPUSH
7819: CALL_OW 281
7823: IFFALSE 7834
// ComUnload ( Mikhail ) ;
7825: LD_EXP 8
7829: PPUSH
7830: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7834: LD_EXP 8
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7846: LD_EXP 8
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7807
// SetSide ( dep1 , 1 ) ;
7857: LD_INT 1
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7867: LD_EXP 8
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 235
// InGameOff ;
7879: CALL_OW 9
// end ;
7883: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7884: LD_EXP 8
7888: PPUSH
7889: CALL_OW 310
7893: PUSH
7894: LD_EXP 22
7898: PUSH
7899: LD_INT 3
7901: EQUAL
7902: NOT
7903: AND
7904: IFFALSE 8039
7906: GO 7908
7908: DISABLE
// begin enable ;
7909: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7910: LD_INT 22
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 91
7932: PUSH
7933: LD_EXP 8
7937: PPUSH
7938: CALL_OW 310
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: LD_INT 1
7963: EQUAL
7964: IFFALSE 8039
// begin mikhailStatus = 4 ;
7966: LD_ADDR_EXP 21
7970: PUSH
7971: LD_INT 4
7973: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7974: LD_INT 1
7976: PPUSH
7977: LD_INT 6
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 6
7997: PPUSH
7998: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8002: LD_EXP 8
8006: PPUSH
8007: CALL_OW 122
// wait ( 0 0$1 ) ;
8011: LD_INT 35
8013: PPUSH
8014: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_INT 17
8025: PPUSH
8026: CALL_OW 113
// mikhailStatus = 3 ;
8030: LD_ADDR_EXP 21
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// disable ;
8038: DISABLE
// end ; end ;
8039: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8040: LD_EXP 1
8044: PPUSH
8045: LD_EXP 23
8049: PPUSH
8050: CALL_OW 296
8054: PUSH
8055: LD_INT 5
8057: LESS
8058: PUSH
8059: LD_EXP 21
8063: PUSH
8064: LD_INT 3
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_EXP 22
8073: PUSH
8074: LD_INT 3
8076: EQUAL
8077: NOT
8078: AND
8079: IFFALSE 8310
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 26
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 69
8131: PUSH
8132: LD_EXP 1
8136: PUSH
8137: LD_EXP 5
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: DIFF
8146: ST_TO_ADDR
// if not tmp then
8147: LD_VAR 0 1
8151: NOT
8152: IFFALSE 8156
// exit ;
8154: GO 8310
// DialogueOn ;
8156: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D7-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8172: LD_VAR 0 1
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PPUSH
8181: LD_STRING D7-Sol1-1
8183: PPUSH
8184: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8188: LD_EXP 1
8192: PPUSH
8193: LD_STRING D7-JMM-2
8195: PPUSH
8196: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8200: LD_VAR 0 1
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_STRING D7-Sol1-2
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D7-JMM-3
8223: PPUSH
8224: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_STRING D7-Sol1-3
8239: PPUSH
8240: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8244: LD_EXP 3
8248: PPUSH
8249: CALL_OW 302
8253: PUSH
8254: LD_EXP 4
8258: PPUSH
8259: CALL_OW 302
8263: AND
8264: IFFALSE 8306
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8266: LD_EXP 3
8270: PPUSH
8271: LD_STRING D7-Cyrus-3
8273: PPUSH
8274: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING D7-Sol1-4
8289: PPUSH
8290: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8294: LD_EXP 4
8298: PPUSH
8299: LD_STRING D7-Lisa-4
8301: PPUSH
8302: CALL_OW 88
// end ; DialogueOff ;
8306: CALL_OW 7
// end ;
8310: PPOPN 1
8312: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8313: LD_EXP 8
8317: PPUSH
8318: CALL_OW 303
8322: PUSH
8323: LD_EXP 21
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: AND
8332: IFFALSE 8346
8334: GO 8336
8336: DISABLE
// begin enable ;
8337: ENABLE
// mikhailStatus = 2 ;
8338: LD_ADDR_EXP 21
8342: PUSH
8343: LD_INT 2
8345: ST_TO_ADDR
// end ;
8346: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8347: LD_EXP 8
8351: PPUSH
8352: LD_INT 17
8354: PPUSH
8355: CALL_OW 308
8359: PUSH
8360: LD_EXP 8
8364: PPUSH
8365: CALL_OW 255
8369: PUSH
8370: LD_INT 6
8372: EQUAL
8373: AND
8374: IFFALSE 8407
8376: GO 8378
8378: DISABLE
// begin if not mikhailInBase = 3 then
8379: LD_EXP 22
8383: PUSH
8384: LD_INT 3
8386: EQUAL
8387: NOT
8388: IFFALSE 8398
// mikhailStatus = 3 ;
8390: LD_ADDR_EXP 21
8394: PUSH
8395: LD_INT 3
8397: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8398: LD_EXP 8
8402: PPUSH
8403: CALL_OW 64
// end ;
8407: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8408: LD_EXP 21
8412: PUSH
8413: LD_INT 3
8415: EQUAL
8416: PUSH
8417: LD_EXP 8
8421: PPUSH
8422: CALL_OW 255
8426: PUSH
8427: LD_INT 6
8429: EQUAL
8430: AND
8431: IFFALSE 8624
8433: GO 8435
8435: DISABLE
8436: LD_INT 0
8438: PPUSH
8439: PPUSH
// begin enable ;
8440: ENABLE
// if IsOk ( Mikhail ) then
8441: LD_EXP 8
8445: PPUSH
8446: CALL_OW 302
8450: IFFALSE 8624
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_EXP 8
8461: PPUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: PPUSH
8491: CALL 10527 0 2
8495: PUSH
8496: LD_EXP 1
8500: PUSH
8501: LD_EXP 2
8505: PUSH
8506: LD_EXP 3
8510: PUSH
8511: LD_EXP 4
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: DIFF
8522: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_EXP 8
8532: PPUSH
8533: CALL_OW 296
8537: PUSH
8538: LD_INT 10
8540: LESS
8541: IFFALSE 8624
// begin if GetSex ( attacker ) = sex_male then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 258
8552: PUSH
8553: LD_INT 1
8555: EQUAL
8556: IFFALSE 8592
// begin disable ;
8558: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8559: LD_VAR 0 2
8563: PPUSH
8564: LD_STRING D7a-Sol1-1
8566: PPUSH
8567: CALL_OW 88
// wait ( 0 0$2 ) ;
8571: LD_INT 70
8573: PPUSH
8574: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8578: LD_VAR 0 2
8582: PPUSH
8583: LD_STRING D7a-Sol1-1a
8585: PPUSH
8586: CALL_OW 88
// end else
8590: GO 8624
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-FSol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-FSol1-1a
8619: PPUSH
8620: CALL_OW 88
// end ; end ; end ; end ;
8624: PPOPN 2
8626: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8627: LD_EXP 27
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: PUSH
8636: LD_INT 22
8638: PPUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: PUSH
8668: LD_INT 2
8670: GREATER
8671: AND
8672: PUSH
8673: LD_INT 22
8675: PPUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 21
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 59
8701: PUSH
8702: EMPTY
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 70
8718: PUSH
8719: LD_INT 0
8721: EQUAL
8722: AND
8723: IFFALSE 8738
8725: GO 8727
8727: DISABLE
// SetSide ( dep1 , 3 ) ;
8728: LD_INT 1
8730: PPUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 235
8738: END
// export function JMMTraitor ; var i ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
// if traitor then
8743: LD_EXP 33
8747: IFFALSE 8751
// exit ;
8749: GO 8888
// traitor := true ;
8751: LD_ADDR_EXP 33
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if IsOk ( Lisa ) then
8759: LD_EXP 4
8763: PPUSH
8764: CALL_OW 302
8768: IFFALSE 8790
// begin DialogueOn ;
8770: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8774: LD_EXP 4
8778: PPUSH
8779: LD_STRING D10-Lisa-Traitor
8781: PPUSH
8782: CALL_OW 88
// DialogueOff ;
8786: CALL_OW 7
// end ; ComExit ( JMM ) ;
8790: LD_EXP 1
8794: PPUSH
8795: CALL 76296 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 4
8804: PPUSH
8805: LD_INT 2
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: PUSH
8835: LD_EXP 1
8839: DIFF
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8872
// begin SetSide ( i , 4 ) ;
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 4
8851: PPUSH
8852: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_EXP 1
8865: PPUSH
8866: CALL_OW 115
// end ;
8870: GO 8841
8872: POP
8873: POP
// wait ( 0 0$30 ) ;
8874: LD_INT 1050
8876: PPUSH
8877: CALL_OW 67
// YouLost ( Traitor ) ;
8881: LD_STRING Traitor
8883: PPUSH
8884: CALL_OW 104
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8893: LD_EXP 30
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 14
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PUSH
8931: LD_INT 0
8933: EQUAL
8934: AND
8935: IFFALSE 9036
8937: GO 8939
8939: DISABLE
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: ST_TO_ADDR
// for i in tmp do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: FOR_IN
9000: IFFALSE 9027
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 12
9017: PPUSH
9018: LD_INT 300
9020: PPUSH
9021: CALL_OW 492
9025: GO 8999
9027: POP
9028: POP
// SetAchievement ( ACH_TIGER ) ;
9029: LD_STRING ACH_TIGER
9031: PPUSH
9032: CALL_OW 543
// end ;
9036: PPOPN 2
9038: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9039: LD_INT 22
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 34
9051: PUSH
9052: LD_INT 51
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: LD_INT 2
9070: GREATEREQUAL
9071: IFFALSE 9083
9073: GO 9075
9075: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9076: LD_STRING ACH_CARGO
9078: PPUSH
9079: CALL_OW 543
9083: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
// for i = 1 to count do
9089: LD_ADDR_VAR 0 8
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_VAR 0 6
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9186
// begin uc_side = side ;
9107: LD_ADDR_OWVAR 20
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// uc_nation = nation ;
9117: LD_ADDR_OWVAR 21
9121: PUSH
9122: LD_VAR 0 2
9126: ST_TO_ADDR
// hc_gallery =  ;
9127: LD_ADDR_OWVAR 33
9131: PUSH
9132: LD_STRING 
9134: ST_TO_ADDR
// hc_name =  ;
9135: LD_ADDR_OWVAR 26
9139: PUSH
9140: LD_STRING 
9142: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9143: LD_INT 0
9145: PPUSH
9146: LD_VAR 0 5
9150: PPUSH
9151: LD_VAR 0 4
9155: PPUSH
9156: CALL_OW 380
// un = CreateHuman ;
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: CALL_OW 44
9169: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9170: LD_VAR 0 9
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: CALL_OW 52
// end ;
9184: GO 9104
9186: POP
9187: POP
// end ;
9188: LD_VAR 0 7
9192: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
9197: PPUSH
// uc_side := GetSide ( b ) ;
9198: LD_ADDR_OWVAR 20
9202: PUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 255
9212: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9213: LD_ADDR_OWVAR 21
9217: PUSH
9218: LD_VAR 0 2
9222: PPUSH
9223: CALL_OW 248
9227: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9228: LD_INT 0
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 380
// un = CreateHuman ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: CALL_OW 44
9252: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9253: LD_ADDR_VAR 0 5
9257: PUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: CALL_OW 254
9267: PUSH
9268: LD_INT 3
9270: MINUS
9271: ST_TO_ADDR
// if dir < 0 then
9272: LD_VAR 0 5
9276: PUSH
9277: LD_INT 0
9279: LESS
9280: IFFALSE 9296
// dir := 6 + dir ;
9282: LD_ADDR_VAR 0 5
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: LD_VAR 0 5
9294: PLUS
9295: ST_TO_ADDR
// SetDir ( un , dir ) ;
9296: LD_VAR 0 4
9300: PPUSH
9301: LD_VAR 0 5
9305: PPUSH
9306: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9310: LD_VAR 0 4
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 52
// end ;
9324: LD_VAR 0 3
9328: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9329: LD_INT 0
9331: PPUSH
9332: PPUSH
9333: PPUSH
9334: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_VAR 0 1
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 24
9364: PUSH
9365: LD_INT 1000
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 21
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 24
9419: PUSH
9420: LD_INT 1000
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9444: LD_VAR 0 5
9448: NOT
9449: PUSH
9450: LD_VAR 0 7
9454: NOT
9455: AND
9456: IFFALSE 9460
// exit ;
9458: GO 9656
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9460: LD_VAR 0 5
9464: NOT
9465: PUSH
9466: LD_VAR 0 7
9470: PPUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 54
9476: PUSH
9477: EMPTY
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 72
9488: AND
9489: PUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL_OW 302
9499: AND
9500: IFFALSE 9534
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9502: LD_VAR 0 7
9506: PPUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 54
9512: PUSH
9513: EMPTY
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 72
9524: PPUSH
9525: LD_VAR 0 2
9529: PPUSH
9530: CALL_OW 120
// if buildingsList then
9534: LD_VAR 0 5
9538: IFFALSE 9656
// begin for i in engineerOkList do
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9654
// if IsInUnit ( i ) then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 310
9562: IFFALSE 9575
// ComExitBuilding ( i ) else
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 122
9573: GO 9652
// if GetLives ( i ) > 650 then
9575: LD_VAR 0 6
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: GREATER
9588: IFFALSE 9616
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9590: LD_VAR 0 6
9594: PPUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 6
9604: PPUSH
9605: CALL_OW 74
9609: PPUSH
9610: CALL_OW 130
9614: GO 9652
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9616: LD_VAR 0 6
9620: PPUSH
9621: LD_INT 56
9623: PPUSH
9624: LD_INT 10
9626: PPUSH
9627: CALL_OW 297
9631: PUSH
9632: LD_INT 8
9634: GREATER
9635: IFFALSE 9652
// ComMoveXY ( i , 56 , 10 ) ;
9637: LD_VAR 0 6
9641: PPUSH
9642: LD_INT 56
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 111
9652: GO 9550
9654: POP
9655: POP
// end ; end ;
9656: LD_VAR 0 4
9660: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 250
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 69
9713: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9714: LD_ADDR_VAR 0 8
9718: PUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 22
9726: PUSH
9727: LD_VAR 0 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 650
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 70
9772: ST_TO_ADDR
// if not damageUnits and not sciList then
9773: LD_VAR 0 8
9777: NOT
9778: PUSH
9779: LD_VAR 0 6
9783: NOT
9784: AND
9785: IFFALSE 9789
// exit ;
9787: GO 9928
// if damageUnits then
9789: LD_VAR 0 8
9793: IFFALSE 9872
// begin for i in sciList do
9795: LD_ADDR_VAR 0 7
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: FOR_IN
9806: IFFALSE 9868
// if IsInUnit ( i ) then
9808: LD_VAR 0 7
9812: PPUSH
9813: CALL_OW 310
9817: IFFALSE 9830
// ComExitBuilding ( i ) else
9819: LD_VAR 0 7
9823: PPUSH
9824: CALL_OW 122
9828: GO 9866
// if not HasTask ( i ) then
9830: LD_VAR 0 7
9834: PPUSH
9835: CALL_OW 314
9839: NOT
9840: IFFALSE 9866
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9842: LD_VAR 0 7
9846: PPUSH
9847: LD_VAR 0 8
9851: PPUSH
9852: LD_VAR 0 7
9856: PPUSH
9857: CALL_OW 74
9861: PPUSH
9862: CALL_OW 128
9866: GO 9805
9868: POP
9869: POP
// end else
9870: GO 9928
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9872: LD_VAR 0 6
9876: PPUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 54
9882: PUSH
9883: EMPTY
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 72
9894: IFFALSE 9928
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9896: LD_VAR 0 6
9900: PPUSH
9901: LD_INT 3
9903: PUSH
9904: LD_INT 54
9906: PUSH
9907: EMPTY
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 72
9918: PPUSH
9919: LD_VAR 0 4
9923: PPUSH
9924: CALL_OW 120
// end ;
9928: LD_VAR 0 5
9932: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9933: LD_INT 0
9935: PPUSH
9936: PPUSH
9937: PPUSH
9938: PPUSH
// if not defendersList then
9939: LD_VAR 0 3
9943: NOT
9944: IFFALSE 9948
// exit ;
9946: GO 10330
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9948: LD_ADDR_VAR 0 7
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: ST_TO_ADDR
// if enemy then
10007: LD_VAR 0 7
10011: IFFALSE 10232
// begin for i in defendersList do
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10228
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 310
10035: PUSH
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 256
10045: PUSH
10046: LD_INT 500
10048: GREATER
10049: AND
10050: IFFALSE 10063
// ComExitBuilding ( i ) else
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 122
10061: GO 10226
// if GetLives ( i ) > 650 then
10063: LD_VAR 0 6
10067: PPUSH
10068: CALL_OW 256
10072: PUSH
10073: LD_INT 650
10075: GREATER
10076: IFFALSE 10129
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10078: LD_ADDR_VAR 0 8
10082: PUSH
10083: LD_VAR 0 7
10087: PPUSH
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 74
10097: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10098: LD_VAR 0 6
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 250
10112: PPUSH
10113: LD_VAR 0 8
10117: PPUSH
10118: CALL_OW 251
10122: PPUSH
10123: CALL_OW 114
// end else
10127: GO 10226
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 69
10157: IFFALSE 10197
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_INT 56
10166: PPUSH
10167: LD_INT 10
10169: PPUSH
10170: CALL_OW 297
10174: PUSH
10175: LD_INT 8
10177: GREATER
10178: IFFALSE 10195
// ComMoveXY ( i , 56 , 10 ) ;
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 56
10187: PPUSH
10188: LD_INT 10
10190: PPUSH
10191: CALL_OW 111
// end else
10195: GO 10226
// if GetLives ( i ) <= 500 then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 256
10206: PUSH
10207: LD_INT 500
10209: LESSEQUAL
10210: IFFALSE 10226
// ComEnterUnit ( i , building ) ;
10212: LD_VAR 0 6
10216: PPUSH
10217: LD_VAR 0 4
10221: PPUSH
10222: CALL_OW 120
// end ;
10226: GO 10023
10228: POP
10229: POP
// end else
10230: GO 10330
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 56
10239: PUSH
10240: EMPTY
10241: LIST
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: EMPTY
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 24
10258: PUSH
10259: LD_INT 1000
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 72
10275: IFFALSE 10330
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 56
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: LD_INT 3
10290: PUSH
10291: LD_INT 60
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 24
10303: PUSH
10304: LD_INT 1000
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 72
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 120
// end ;
10330: LD_VAR 0 5
10334: RET
// export function RussianTrap ; var i ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
// if GetSide ( Brian ) = 4 then
10339: LD_EXP 6
10343: PPUSH
10344: CALL_OW 255
10348: PUSH
10349: LD_INT 4
10351: EQUAL
10352: IFFALSE 10375
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10354: LD_EXP 6
10358: PUSH
10359: LD_EXP 7
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: LD_INT 0
10370: PPUSH
10371: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10375: LD_ADDR_VAR 0 2
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: FOR_IN
10410: IFFALSE 10520
// begin ComExitBuilding ( i ) ;
10412: LD_VAR 0 2
10416: PPUSH
10417: CALL_OW 122
// wait ( 0 0$1 ) ;
10421: LD_INT 35
10423: PPUSH
10424: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 120
10435: PPUSH
10436: LD_INT 56
10438: PPUSH
10439: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_INT 111
10450: PPUSH
10451: LD_INT 37
10453: PPUSH
10454: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10458: LD_INT 33
10460: PPUSH
10461: CALL_OW 255
10465: PUSH
10466: LD_INT 3
10468: EQUAL
10469: PUSH
10470: LD_INT 33
10472: PPUSH
10473: CALL_OW 302
10477: AND
10478: IFFALSE 10494
// AddComEnterUnit ( i , arm2 ) else
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 33
10487: PPUSH
10488: CALL_OW 180
10492: GO 10518
// begin AddComCrawl ( i ) ;
10494: LD_VAR 0 2
10498: PPUSH
10499: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_INT 109
10510: PPUSH
10511: LD_INT 30
10513: PPUSH
10514: CALL_OW 174
// end ; end ;
10518: GO 10409
10520: POP
10521: POP
// end ;
10522: LD_VAR 0 1
10526: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
// nearestDist := 1000 ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 1000
10541: ST_TO_ADDR
// nearestUn := un ;
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: LD_VAR 0 1
10551: ST_TO_ADDR
// for sold in units do
10552: LD_ADDR_VAR 0 6
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10619
// begin dist := GetDistUnits ( un , sold ) ;
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 296
10584: ST_TO_ADDR
// if dist < nearestDist then
10585: LD_VAR 0 7
10589: PUSH
10590: LD_VAR 0 4
10594: LESS
10595: IFFALSE 10617
// begin nearestUn := sold ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 6
10606: ST_TO_ADDR
// nearestDist := dist ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_VAR 0 7
10616: ST_TO_ADDR
// end ; end ;
10617: GO 10562
10619: POP
10620: POP
// result := NearestUn ;
10621: LD_ADDR_VAR 0 3
10625: PUSH
10626: LD_VAR 0 5
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 3
10635: RET
// export function PrepareDifficulty ; begin
10636: LD_INT 0
10638: PPUSH
// if Difficulty = 1 then
10639: LD_OWVAR 67
10643: PUSH
10644: LD_INT 1
10646: EQUAL
10647: IFFALSE 10710
// begin RemoveUnit ( brw2 ) ;
10649: LD_INT 9
10651: PPUSH
10652: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10656: LD_INT 30
10658: PPUSH
10659: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10663: LD_INT 52
10665: PPUSH
10666: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10670: LD_INT 63
10672: PPUSH
10673: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10677: LD_INT 5
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: LD_INT 60
10689: PPUSH
10690: CALL_OW 240
// RuSoldMinLevel = 0 ;
10694: LD_ADDR_EXP 13
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10702: LD_ADDR_EXP 14
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// end ; if Difficulty = 2 then
10710: LD_OWVAR 67
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10760
// begin RemoveUnit ( brw4 ) ;
10720: LD_INT 52
10722: PPUSH
10723: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10727: LD_INT 5
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: LD_INT 50
10739: PPUSH
10740: CALL_OW 240
// RuSoldMinLevel = 1 ;
10744: LD_ADDR_EXP 13
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10752: LD_ADDR_EXP 14
10756: PUSH
10757: LD_INT 2
10759: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10760: LD_OWVAR 67
10764: PUSH
10765: LD_INT 3
10767: GREATEREQUAL
10768: IFFALSE 10803
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10770: LD_INT 5
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: LD_INT 40
10782: PPUSH
10783: CALL_OW 240
// RuSoldMinLevel = 2 ;
10787: LD_ADDR_EXP 13
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10795: LD_ADDR_EXP 14
10799: PUSH
10800: LD_INT 3
10802: ST_TO_ADDR
// end ; end ;
10803: LD_VAR 0 1
10807: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10808: LD_INT 0
10810: PPUSH
10811: PPUSH
10812: PPUSH
// if not vehicles then
10813: LD_VAR 0 1
10817: NOT
10818: IFFALSE 10822
// exit ;
10820: GO 10952
// tmp := [ ] ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// for i in vehicles do
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10936
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10842: LD_ADDR_VAR 0 5
10846: PUSH
10847: LD_VAR 0 5
10851: PPUSH
10852: LD_VAR 0 5
10856: PUSH
10857: LD_INT 1
10859: PLUS
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 265
10870: PUSH
10871: LD_VAR 0 4
10875: PPUSH
10876: CALL_OW 262
10880: PUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 263
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: CALL_OW 264
10900: PUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 261
10910: PUSH
10911: LD_VAR 0 4
10915: PPUSH
10916: CALL_OW 256
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 1
10933: ST_TO_ADDR
10934: GO 10839
10936: POP
10937: POP
// SaveVariable ( tmp , ident ) ;
10938: LD_VAR 0 5
10942: PPUSH
10943: LD_VAR 0 2
10947: PPUSH
10948: CALL_OW 39
// end ; end_of_file
10952: LD_VAR 0 3
10956: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10957: LD_INT 0
10959: PPUSH
10960: PPUSH
10961: PPUSH
// prefix := 01_ ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_STRING 01_
10969: ST_TO_ADDR
// uc_side := 1 ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10978: LD_ADDR_EXP 1
10982: PUSH
10983: LD_STRING JMM
10985: PPUSH
10986: LD_EXP 35
10990: NOT
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL 38166 0 3
11001: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_STRING 01_JMMLifePoints_1
11009: PPUSH
11010: LD_INT 1000
11012: PPUSH
11013: CALL_OW 30
11017: ST_TO_ADDR
// if plive < 250 then
11018: LD_VAR 0 2
11022: PUSH
11023: LD_INT 250
11025: LESS
11026: IFFALSE 11036
// plive := 300 ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 300
11035: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11050: LD_ADDR_EXP 9
11054: PUSH
11055: LD_STRING Powell
11057: PPUSH
11058: CALL_OW 25
11062: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11063: LD_ADDR_EXP 2
11067: PUSH
11068: LD_STRING Bobby
11070: PPUSH
11071: LD_EXP 35
11075: NOT
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: CALL 38166 0 3
11086: ST_TO_ADDR
// if Bobby then
11087: LD_EXP 2
11091: IFFALSE 11141
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_STRING 01_BobbyLifePoints_1
11100: PPUSH
11101: LD_INT 1000
11103: PPUSH
11104: CALL_OW 30
11108: ST_TO_ADDR
// if plive < 250 then
11109: LD_VAR 0 2
11113: PUSH
11114: LD_INT 250
11116: LESS
11117: IFFALSE 11127
// plive := 300 ;
11119: LD_ADDR_VAR 0 2
11123: PUSH
11124: LD_INT 300
11126: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11127: LD_EXP 2
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11141: LD_ADDR_EXP 3
11145: PUSH
11146: LD_STRING Cyrus
11148: PPUSH
11149: LD_EXP 35
11153: NOT
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL 38166 0 3
11164: ST_TO_ADDR
// if Cyrus then
11165: LD_EXP 3
11169: IFFALSE 11219
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_STRING 01_CyrusLifePoints_1
11178: PPUSH
11179: LD_INT 1000
11181: PPUSH
11182: CALL_OW 30
11186: ST_TO_ADDR
// if plive < 250 then
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 250
11194: LESS
11195: IFFALSE 11205
// plive := 300 ;
11197: LD_ADDR_VAR 0 2
11201: PUSH
11202: LD_INT 300
11204: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11205: LD_EXP 3
11209: PPUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11219: LD_ADDR_EXP 5
11223: PUSH
11224: LD_STRING Khatam
11226: PPUSH
11227: CALL_OW 25
11231: ST_TO_ADDR
// uc_side := 4 ;
11232: LD_ADDR_OWVAR 20
11236: PUSH
11237: LD_INT 4
11239: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11240: LD_ADDR_EXP 4
11244: PUSH
11245: LD_STRING Lisa
11247: PPUSH
11248: CALL_OW 25
11252: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11253: LD_EXP 1
11257: PPUSH
11258: LD_INT 3
11260: PPUSH
11261: LD_INT 0
11263: PPUSH
11264: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_INT 3
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11283: LD_EXP 3
11287: PPUSH
11288: LD_INT 3
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11298: LD_EXP 4
11302: PPUSH
11303: LD_INT 5
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 49
// ComCrawl ( Lisa ) ;
11313: LD_EXP 4
11317: PPUSH
11318: CALL_OW 137
// end ;
11322: LD_VAR 0 1
11326: RET
// export function PrepareLisSquad ; var i , un ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
// uc_side := 4 ;
11332: LD_ADDR_OWVAR 20
11336: PUSH
11337: LD_INT 4
11339: ST_TO_ADDR
// uc_nation := 1 ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_class := 2 ;
11348: LD_ADDR_OWVAR 28
11352: PUSH
11353: LD_INT 2
11355: ST_TO_ADDR
// hc_sex := sex_male ;
11356: LD_ADDR_OWVAR 27
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// hc_gallery :=  ;
11364: LD_ADDR_OWVAR 33
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// hc_name :=  ;
11372: LD_ADDR_OWVAR 26
11376: PUSH
11377: LD_STRING 
11379: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11380: LD_ADDR_OWVAR 30
11384: PUSH
11385: LD_INT 0
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 0
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11403: LD_ADDR_OWVAR 31
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 0
11416: PUSH
11417: LD_INT 0
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// un := CreateHuman ;
11426: LD_ADDR_VAR 0 3
11430: PUSH
11431: CALL_OW 44
11435: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 6
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: CALL_OW 49
// hc_sex := sex_female ;
11451: LD_ADDR_OWVAR 27
11455: PUSH
11456: LD_INT 2
11458: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11459: LD_ADDR_OWVAR 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: LD_INT 0
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11482: LD_ADDR_OWVAR 31
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// un := CreateHuman ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: CALL_OW 44
11514: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 6
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 49
// if not Bobby and not Cyrus then
11530: LD_EXP 2
11534: NOT
11535: PUSH
11536: LD_EXP 3
11540: NOT
11541: AND
11542: IFFALSE 11631
// begin hc_class := 1 ;
11544: LD_ADDR_OWVAR 28
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// hc_sex := sex_male ;
11552: LD_ADDR_OWVAR 27
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11560: LD_ADDR_OWVAR 30
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11583: LD_ADDR_OWVAR 31
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: ST_TO_ADDR
// un := CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 31
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// end ; InitHc ;
11631: CALL_OW 19
// end ;
11635: LD_VAR 0 1
11639: RET
// export function PrepareOtherAmericans ; begin
11640: LD_INT 0
11642: PPUSH
// uc_side := 4 ;
11643: LD_ADDR_OWVAR 20
11647: PUSH
11648: LD_INT 4
11650: ST_TO_ADDR
// uc_nation := 1 ;
11651: LD_ADDR_OWVAR 21
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// hc_gallery :=  ;
11659: LD_ADDR_OWVAR 33
11663: PUSH
11664: LD_STRING 
11666: ST_TO_ADDR
// hc_name := Tom Garvin ;
11667: LD_ADDR_OWVAR 26
11671: PUSH
11672: LD_STRING Tom Garvin
11674: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 380
// Brian := CreateHuman ;
11688: LD_ADDR_EXP 6
11692: PUSH
11693: CALL_OW 44
11697: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11698: LD_EXP 6
11702: PPUSH
11703: LD_INT 10
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 49
// hc_name := Jerry White ;
11713: LD_ADDR_OWVAR 26
11717: PUSH
11718: LD_STRING Jerry White
11720: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 3
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 380
// Jerry := CreateHuman ;
11734: LD_ADDR_EXP 7
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_INT 10
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 140
// end ;
11777: LD_VAR 0 1
11781: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_INT 16
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 517
11803: ST_TO_ADDR
// for i = 1 to 6 do
11804: LD_ADDR_VAR 0 2
11808: PUSH
11809: DOUBLE
11810: LD_INT 1
11812: DEC
11813: ST_TO_ADDR
11814: LD_INT 6
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11964
// begin uc_side := 4 ;
11820: LD_ADDR_OWVAR 20
11824: PUSH
11825: LD_INT 4
11827: ST_TO_ADDR
// uc_nation := 1 ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// hc_gallery :=  ;
11836: LD_ADDR_OWVAR 33
11840: PUSH
11841: LD_STRING 
11843: ST_TO_ADDR
// hc_name :=  ;
11844: LD_ADDR_OWVAR 26
11848: PUSH
11849: LD_STRING 
11851: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11852: LD_INT 0
11854: PPUSH
11855: LD_INT 1
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: LD_INT 4
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: LD_INT 3
11876: MOD
11877: PUSH
11878: LD_INT 1
11880: PLUS
11881: ARRAY
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 380
// un := CreateHuman ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: CALL_OW 44
11899: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: LD_INT 5
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_VAR 0 4
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PUSH
11934: LD_VAR 0 2
11938: ARRAY
11939: PPUSH
11940: LD_VAR 0 4
11944: PUSH
11945: LD_INT 2
11947: ARRAY
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 601
// end ;
11962: GO 11817
11964: POP
11965: POP
// DyingSold := CreateHuman ;
11966: LD_ADDR_EXP 36
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11976: LD_EXP 36
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11991: LD_EXP 36
11995: PPUSH
11996: LD_INT 250
11998: PPUSH
11999: CALL_OW 234
// end ; end_of_file
12003: LD_VAR 0 1
12007: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 23
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 50
12049: PUSH
12050: EMPTY
12051: LIST
12052: PUSH
12053: LD_INT 56
12055: PUSH
12056: EMPTY
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: PUSH
12071: LD_EXP 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: DIFF
12079: ST_TO_ADDR
// if not tmp then
12080: LD_VAR 0 2
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12165
// uc_side = 6 ;
12089: LD_ADDR_OWVAR 20
12093: PUSH
12094: LD_INT 6
12096: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12097: LD_ADDR_EXP 8
12101: PUSH
12102: LD_STRING Mikhail
12104: PPUSH
12105: CALL_OW 25
12109: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12110: LD_EXP 8
12114: PPUSH
12115: LD_INT 3
12117: PPUSH
12118: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12122: LD_EXP 8
12126: PPUSH
12127: LD_VAR 0 2
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 1
12148: ARRAY
12149: PPUSH
12150: CALL_OW 251
12154: PPUSH
12155: LD_INT 5
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 50
// end ;
12165: LD_VAR 0 1
12169: RET
// export function PrepareRussianCommander ; begin
12170: LD_INT 0
12172: PPUSH
// uc_side = 3 ;
12173: LD_ADDR_OWVAR 20
12177: PUSH
12178: LD_INT 3
12180: ST_TO_ADDR
// uc_nation = 3 ;
12181: LD_ADDR_OWVAR 21
12185: PUSH
12186: LD_INT 3
12188: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12189: LD_ADDR_EXP 19
12193: PUSH
12194: LD_STRING Natasza
12196: PPUSH
12197: CALL_OW 25
12201: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12202: LD_EXP 19
12206: PPUSH
12207: LD_INT 24
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12217: LD_EXP 19
12221: PPUSH
12222: LD_INT 56
12224: PPUSH
12225: LD_INT 16
12227: PPUSH
12228: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12232: LD_ADDR_EXP 24
12236: PUSH
12237: LD_EXP 24
12241: PPUSH
12242: LD_EXP 24
12246: PUSH
12247: LD_INT 1
12249: PLUS
12250: PPUSH
12251: LD_EXP 19
12255: PPUSH
12256: CALL_OW 1
12260: ST_TO_ADDR
// end ;
12261: LD_VAR 0 1
12265: RET
// export function PrepareSouthBase ; var i , un ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
// for i = 1 to 2 do
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_INT 2
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12394
// begin uc_side = 3 ;
12287: LD_ADDR_OWVAR 20
12291: PUSH
12292: LD_INT 3
12294: ST_TO_ADDR
// uc_nation = 3 ;
12295: LD_ADDR_OWVAR 21
12299: PUSH
12300: LD_INT 3
12302: ST_TO_ADDR
// hc_gallery =  ;
12303: LD_ADDR_OWVAR 33
12307: PUSH
12308: LD_STRING 
12310: ST_TO_ADDR
// hc_name =  ;
12311: LD_ADDR_OWVAR 26
12315: PUSH
12316: LD_STRING 
12318: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_EXP 13
12329: PPUSH
12330: LD_EXP 14
12334: PPUSH
12335: CALL_OW 12
12339: PPUSH
12340: CALL_OW 380
// hc_importance = 0 ;
12344: LD_ADDR_OWVAR 32
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// un = CreateHuman ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: CALL_OW 44
12361: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 11
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 111
12384: PPUSH
12385: LD_INT 38
12387: PPUSH
12388: CALL_OW 118
// end ;
12392: GO 12284
12394: POP
12395: POP
// for i = 1 to 2 do
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_INT 2
12408: PUSH
12409: FOR_TO
12410: IFFALSE 12493
// begin uc_side = 3 ;
12412: LD_ADDR_OWVAR 20
12416: PUSH
12417: LD_INT 3
12419: ST_TO_ADDR
// uc_nation = 3 ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// hc_gallery =  ;
12428: LD_ADDR_OWVAR 33
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// hc_name =  ;
12436: LD_ADDR_OWVAR 26
12440: PUSH
12441: LD_STRING 
12443: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12444: LD_INT 0
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: LD_EXP 13
12454: PPUSH
12455: LD_EXP 14
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: CALL_OW 380
// un = CreateHuman ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: CALL_OW 44
12478: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 10
12486: PPUSH
12487: CALL_OW 52
// end ;
12491: GO 12409
12493: POP
12494: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12495: LD_INT 3
12497: PPUSH
12498: LD_INT 3
12500: PPUSH
12501: LD_INT 33
12503: PPUSH
12504: LD_EXP 13
12508: PPUSH
12509: LD_EXP 14
12513: PPUSH
12514: CALL_OW 12
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: LD_INT 1
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 3
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_OWVAR 67
12544: ARRAY
12545: PPUSH
12546: CALL 9084 0 6
// for i in UnitsInside ( arm2 ) do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 33
12557: PPUSH
12558: CALL_OW 313
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12597
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12566: LD_ADDR_EXP 25
12570: PUSH
12571: LD_EXP 25
12575: PPUSH
12576: LD_EXP 25
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: LD_VAR 0 2
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
12595: GO 12563
12597: POP
12598: POP
// end ;
12599: LD_VAR 0 1
12603: RET
// export function PrepareNorthBase ; var i , un ; begin
12604: LD_INT 0
12606: PPUSH
12607: PPUSH
12608: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_INT 1
12621: PPUSH
12622: LD_INT 2
12624: PPUSH
12625: CALL_OW 12
12629: PUSH
12630: LD_INT 2
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 12
12640: PUSH
12641: LD_INT 3
12643: PPUSH
12644: LD_INT 4
12646: PPUSH
12647: CALL_OW 12
12651: PUSH
12652: LD_INT 4
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12754
// begin uc_side = 3 ;
12670: LD_ADDR_OWVAR 20
12674: PUSH
12675: LD_INT 3
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// hc_gallery =  ;
12686: LD_ADDR_OWVAR 33
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// hc_name =  ;
12694: LD_ADDR_OWVAR 26
12698: PUSH
12699: LD_STRING 
12701: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_EXP 13
12712: PPUSH
12713: LD_EXP 14
12717: PPUSH
12718: CALL_OW 12
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 14
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 49
// end ;
12752: GO 12667
12754: POP
12755: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12756: LD_INT 3
12758: PPUSH
12759: LD_INT 3
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: LD_EXP 13
12769: PPUSH
12770: LD_EXP 14
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 2
12788: PPUSH
12789: CALL_OW 12
12793: PUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 12
12804: PUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 12
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_OWVAR 67
12829: ARRAY
12830: PPUSH
12831: CALL 9084 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12835: LD_INT 3
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: LD_INT 23
12843: PPUSH
12844: LD_EXP 13
12848: PPUSH
12849: LD_EXP 14
12853: PPUSH
12854: CALL_OW 12
12858: PPUSH
12859: LD_INT 4
12861: PPUSH
12862: LD_INT 0
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_OWVAR 67
12884: ARRAY
12885: PPUSH
12886: CALL 9084 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12890: LD_INT 3
12892: PPUSH
12893: LD_INT 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_EXP 13
12903: PPUSH
12904: LD_EXP 14
12908: PPUSH
12909: CALL_OW 12
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_INT 1
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_OWVAR 67
12939: ARRAY
12940: PPUSH
12941: CALL 9084 0 6
// for i in UnitsInside ( arm1 ) do
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_INT 2
12952: PPUSH
12953: CALL_OW 313
12957: PUSH
12958: FOR_IN
12959: IFFALSE 12992
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12961: LD_ADDR_EXP 24
12965: PUSH
12966: LD_EXP 24
12970: PPUSH
12971: LD_EXP 24
12975: PUSH
12976: LD_INT 1
12978: PLUS
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
12990: GO 12958
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 1
12998: RET
// export function PrepareOtherRussians ; var i , un ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
// for i = 1 to 2 do
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_INT 2
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13119
// begin uc_side = 3 ;
13020: LD_ADDR_OWVAR 20
13024: PUSH
13025: LD_INT 3
13027: ST_TO_ADDR
// uc_nation = 3 ;
13028: LD_ADDR_OWVAR 21
13032: PUSH
13033: LD_INT 3
13035: ST_TO_ADDR
// hc_gallery =  ;
13036: LD_ADDR_OWVAR 33
13040: PUSH
13041: LD_STRING 
13043: ST_TO_ADDR
// hc_name =  ;
13044: LD_ADDR_OWVAR 26
13048: PUSH
13049: LD_STRING 
13051: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_EXP 13
13062: PPUSH
13063: LD_EXP 14
13067: PPUSH
13068: CALL_OW 12
13072: PPUSH
13073: CALL_OW 380
// un = CreateHuman ;
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: CALL_OW 44
13086: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 9
13094: PPUSH
13095: LD_INT 0
13097: PPUSH
13098: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 80
13109: PPUSH
13110: LD_INT 73
13112: PPUSH
13113: CALL_OW 118
// end ;
13117: GO 13017
13119: POP
13120: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: LD_INT 31
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PPUSH
13150: CALL_OW 69
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13184
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13158: LD_EXP 13
13162: PPUSH
13163: LD_EXP 14
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: CALL 9193 0 2
13182: GO 13155
13184: POP
13185: POP
// end ;
13186: LD_VAR 0 1
13190: RET
// export function PrepareCargoBays ; begin
13191: LD_INT 0
13193: PPUSH
// uc_side = 3 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 3
13201: ST_TO_ADDR
// uc_nation = 3 ;
13202: LD_ADDR_OWVAR 21
13206: PUSH
13207: LD_INT 3
13209: ST_TO_ADDR
// vc_engine = 1 ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// vc_control = 1 ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon = 51 ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 51
13233: ST_TO_ADDR
// vc_chassis = 22 ;
13234: LD_ADDR_OWVAR 37
13238: PUSH
13239: LD_INT 22
13241: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13242: LD_ADDR_EXP 15
13246: PUSH
13247: CALL_OW 45
13251: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13252: LD_ADDR_EXP 16
13256: PUSH
13257: CALL_OW 45
13261: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13262: LD_EXP 15
13266: PPUSH
13267: LD_INT 13
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13277: LD_EXP 16
13281: PPUSH
13282: LD_INT 13
13284: PPUSH
13285: LD_INT 0
13287: PPUSH
13288: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13292: LD_EXP 15
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: LD_INT 70
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 20
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_OWVAR 67
13322: ARRAY
13323: PPUSH
13324: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13328: LD_EXP 16
13332: PPUSH
13333: LD_INT 2
13335: PPUSH
13336: LD_INT 70
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 30
13344: PUSH
13345: LD_INT 20
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: LD_OWVAR 67
13358: ARRAY
13359: PPUSH
13360: CALL_OW 291
// hc_gallery =  ;
13364: LD_ADDR_OWVAR 33
13368: PUSH
13369: LD_STRING 
13371: ST_TO_ADDR
// hc_name =  ;
13372: LD_ADDR_OWVAR 26
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13380: LD_INT 1
13382: PPUSH
13383: LD_INT 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 12
13396: PPUSH
13397: CALL_OW 380
// driver1 = CreateHuman ;
13401: LD_ADDR_EXP 17
13405: PUSH
13406: CALL_OW 44
13410: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13411: LD_EXP 17
13415: PPUSH
13416: LD_EXP 15
13420: PPUSH
13421: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13425: LD_ADDR_OWVAR 26
13429: PUSH
13430: LD_STRING Nikolai Andreyev
13432: ST_TO_ADDR
// driver2 = CreateHuman ;
13433: LD_ADDR_EXP 18
13437: PUSH
13438: CALL_OW 44
13442: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13443: LD_EXP 18
13447: PPUSH
13448: LD_EXP 16
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: LD_VAR 0 1
13461: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13462: LD_INT 0
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
// uc_side = 3 ;
13470: LD_ADDR_OWVAR 20
13474: PUSH
13475: LD_INT 3
13477: ST_TO_ADDR
// uc_nation = 3 ;
13478: LD_ADDR_OWVAR 21
13482: PUSH
13483: LD_INT 3
13485: ST_TO_ADDR
// for i := 1 to count do
13486: LD_ADDR_VAR 0 4
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_VAR 0 1
13500: PUSH
13501: FOR_TO
13502: IFFALSE 13764
// begin vc_engine = 1 ;
13504: LD_ADDR_OWVAR 39
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// vc_control = 1 ;
13512: LD_ADDR_OWVAR 38
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13520: LD_ADDR_OWVAR 40
13524: PUSH
13525: LD_INT 42
13527: ST_TO_ADDR
// if Difficulty = 3 then
13528: LD_OWVAR 67
13532: PUSH
13533: LD_INT 3
13535: EQUAL
13536: IFFALSE 13565
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13538: LD_ADDR_OWVAR 40
13542: PUSH
13543: LD_INT 42
13545: PUSH
13546: LD_INT 43
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 2
13558: PPUSH
13559: CALL_OW 12
13563: ARRAY
13564: ST_TO_ADDR
// if Difficulty = 4 then
13565: LD_OWVAR 67
13569: PUSH
13570: LD_INT 4
13572: EQUAL
13573: IFFALSE 13610
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13575: LD_ADDR_OWVAR 40
13579: PUSH
13580: LD_INT 42
13582: PUSH
13583: LD_INT 43
13585: PUSH
13586: LD_INT 43
13588: PUSH
13589: LD_INT 44
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 4
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13610: LD_ADDR_OWVAR 37
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_INT 22
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_OWVAR 67
13637: ARRAY
13638: ST_TO_ADDR
// veh = CreateVehicle ;
13639: LD_ADDR_VAR 0 5
13643: PUSH
13644: CALL_OW 45
13648: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13649: LD_VAR 0 5
13653: PPUSH
13654: LD_VAR 0 2
13658: PPUSH
13659: LD_INT 0
13661: PPUSH
13662: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13666: LD_ADDR_EXP 26
13670: PUSH
13671: LD_EXP 26
13675: PUSH
13676: LD_VAR 0 5
13680: ADD
13681: ST_TO_ADDR
// hc_gallery =  ;
13682: LD_ADDR_OWVAR 33
13686: PUSH
13687: LD_STRING 
13689: ST_TO_ADDR
// hc_name =  ;
13690: LD_ADDR_OWVAR 26
13694: PUSH
13695: LD_STRING 
13697: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13698: LD_INT 0
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: LD_EXP 13
13708: PPUSH
13709: LD_EXP 14
13713: PPUSH
13714: CALL_OW 12
13718: PPUSH
13719: CALL_OW 380
// un = CreateHuman ;
13723: LD_ADDR_VAR 0 6
13727: PUSH
13728: CALL_OW 44
13732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13733: LD_VAR 0 6
13737: PPUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_INT 14
13754: PPUSH
13755: LD_INT 9
13757: PPUSH
13758: CALL_OW 111
// end ;
13762: GO 13501
13764: POP
13765: POP
// wait ( 0 0$1 ) ;
13766: LD_INT 35
13768: PPUSH
13769: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13773: LD_INT 0
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_EXP 13
13783: PPUSH
13784: LD_EXP 14
13788: PPUSH
13789: CALL_OW 12
13793: PPUSH
13794: CALL_OW 380
// un = CreateHuman ;
13798: LD_ADDR_VAR 0 6
13802: PUSH
13803: CALL_OW 44
13807: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: DOUBLE
13814: LD_INT 1
13816: DEC
13817: ST_TO_ADDR
13818: LD_VAR 0 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: MUL
13829: PLUS
13830: PUSH
13831: FOR_TO
13832: IFFALSE 13924
// begin hc_gallery =  ;
13834: LD_ADDR_OWVAR 33
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hc_name =  ;
13842: LD_ADDR_OWVAR 26
13846: PUSH
13847: LD_STRING 
13849: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_EXP 13
13860: PPUSH
13861: LD_EXP 14
13865: PPUSH
13866: CALL_OW 12
13870: PPUSH
13871: CALL_OW 380
// un = CreateHuman ;
13875: LD_ADDR_VAR 0 6
13879: PUSH
13880: CALL_OW 44
13884: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13885: LD_VAR 0 6
13889: PPUSH
13890: LD_INT 9
13892: PPUSH
13893: LD_INT 13
13895: PPUSH
13896: LD_INT 4
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13906: LD_ADDR_EXP 26
13910: PUSH
13911: LD_EXP 26
13915: PUSH
13916: LD_VAR 0 6
13920: ADD
13921: ST_TO_ADDR
// end ;
13922: GO 13831
13924: POP
13925: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_INT 26
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 70
13973: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13974: LD_VAR 0 7
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D9-Rus3-1
13985: PPUSH
13986: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13990: LD_VAR 0 7
13994: PUSH
13995: LD_INT 2
13997: ARRAY
13998: PPUSH
13999: LD_STRING D9-Russ-1
14001: PPUSH
14002: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14006: LD_EXP 26
14010: PPUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_INT 13
14016: PPUSH
14017: CALL_OW 114
// wait ( 0 0$3 ) ;
14021: LD_INT 105
14023: PPUSH
14024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// for i in attackGroup do
14035: LD_ADDR_VAR 0 4
14039: PUSH
14040: LD_EXP 26
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14413
// begin if IsDead ( i ) then
14048: LD_VAR 0 4
14052: PPUSH
14053: CALL_OW 301
14057: IFFALSE 14077
// begin attackGroup := attackGroup diff i ;
14059: LD_ADDR_EXP 26
14063: PUSH
14064: LD_EXP 26
14068: PUSH
14069: LD_VAR 0 4
14073: DIFF
14074: ST_TO_ADDR
// continue ;
14075: GO 14045
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14077: LD_VAR 0 4
14081: PPUSH
14082: CALL_OW 314
14086: NOT
14087: PUSH
14088: LD_VAR 0 4
14092: PPUSH
14093: CALL_OW 110
14097: NOT
14098: AND
14099: IFFALSE 14135
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14101: LD_VAR 0 4
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: PPUSH
14121: LD_VAR 0 4
14125: PPUSH
14126: CALL_OW 74
14130: PPUSH
14131: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14135: LD_VAR 0 4
14139: PPUSH
14140: CALL_OW 110
14144: NOT
14145: PUSH
14146: LD_VAR 0 4
14150: PPUSH
14151: CALL_OW 256
14155: PUSH
14156: LD_INT 650
14158: LESS
14159: AND
14160: PUSH
14161: LD_VAR 0 4
14165: PPUSH
14166: CALL_OW 247
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// begin SetTag ( i , 1 ) ;
14177: LD_VAR 0 4
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14189: LD_VAR 0 4
14193: PPUSH
14194: LD_INT 20
14196: PPUSH
14197: LD_INT 8
14199: PPUSH
14200: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14204: LD_VAR 0 4
14208: PPUSH
14209: CALL_OW 110
14213: PUSH
14214: LD_INT 1
14216: EQUAL
14217: PUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 20
14225: PPUSH
14226: LD_INT 8
14228: PPUSH
14229: CALL_OW 297
14233: PUSH
14234: LD_INT 6
14236: LESS
14237: AND
14238: IFFALSE 14252
// SetTag ( i , 2 ) ;
14240: LD_VAR 0 4
14244: PPUSH
14245: LD_INT 2
14247: PPUSH
14248: CALL_OW 109
// if GetTag ( i ) = 2 then
14252: LD_VAR 0 4
14256: PPUSH
14257: CALL_OW 110
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: IFFALSE 14373
// begin if GetLives ( i ) = 1000 then
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 256
14276: PUSH
14277: LD_INT 1000
14279: EQUAL
14280: IFFALSE 14296
// SetTag ( i , 3 ) else
14282: LD_VAR 0 4
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 109
14294: GO 14373
// if IsDrivenBy ( i ) then
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 311
14305: IFFALSE 14373
// begin mech := IsDrivenBy ( i ) ;
14307: LD_ADDR_VAR 0 8
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: CALL_OW 311
14321: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 8
14329: PPUSH
14330: CALL_OW 292
14334: NOT
14335: PUSH
14336: LD_VAR 0 8
14340: PPUSH
14341: CALL_OW 256
14345: PUSH
14346: LD_INT 1000
14348: LESS
14349: AND
14350: IFFALSE 14364
// SetLives ( mech , 1000 ) ;
14352: LD_VAR 0 8
14356: PPUSH
14357: LD_INT 1000
14359: PPUSH
14360: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14364: LD_VAR 0 8
14368: PPUSH
14369: CALL 77598 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14373: LD_VAR 0 4
14377: PPUSH
14378: CALL_OW 110
14382: PUSH
14383: LD_INT 3
14385: EQUAL
14386: PUSH
14387: LD_VAR 0 4
14391: PPUSH
14392: CALL_OW 311
14396: AND
14397: IFFALSE 14411
// SetTag ( i , 0 ) ;
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 109
// end ;
14411: GO 14045
14413: POP
14414: POP
// until not attackGroup ;
14415: LD_EXP 26
14419: NOT
14420: IFFALSE 14028
// end ;
14422: LD_VAR 0 3
14426: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14427: LD_EXP 26
14431: PPUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 72
14446: IFFALSE 14514
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
// begin enable ;
14454: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14455: LD_ADDR_VAR 0 1
14459: PUSH
14460: LD_EXP 26
14464: PPUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: PUSH
14480: FOR_IN
14481: IFFALSE 14512
// if GetFuel ( i ) < 3 then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 261
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14510
// SetFuel ( i , 3 ) ;
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_INT 3
14505: PPUSH
14506: CALL_OW 240
14510: GO 14480
14512: POP
14513: POP
// end ; end_of_file
14514: PPOPN 1
14516: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14517: LD_INT 22
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 25
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: IFFALSE 14564
14547: GO 14549
14549: DISABLE
// begin enable ;
14550: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 22
14559: PPUSH
14560: CALL 9329 0 3
// end ;
14564: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 69
14593: IFFALSE 14615
14595: GO 14597
14597: DISABLE
// begin enable ;
14598: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14599: LD_INT 3
14601: PPUSH
14602: LD_INT 20
14604: PPUSH
14605: LD_INT 22
14607: PPUSH
14608: LD_INT 23
14610: PPUSH
14611: CALL 9661 0 4
// end ;
14615: END
// every 0 0$1 trigger northBaseDefenders do
14616: LD_EXP 24
14620: IFFALSE 14644
14622: GO 14624
14624: DISABLE
// begin enable ;
14625: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14626: LD_INT 22
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_EXP 24
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL 9933 0 4
// end ;
14644: END
// every 0 0$1 trigger southBaseDefenders do
14645: LD_EXP 25
14649: IFFALSE 14673
14651: GO 14653
14653: DISABLE
// begin enable ;
14654: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14655: LD_INT 23
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_EXP 25
14665: PPUSH
14666: LD_INT 33
14668: PPUSH
14669: CALL 9933 0 4
// end ; end_of_file
14673: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL 32882 0 1
// if unit = JMM then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_EXP 1
14692: EQUAL
14693: IFFALSE 14702
// YouLost ( JMM ) ;
14695: LD_STRING JMM
14697: PPUSH
14698: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14724
// YouLost ( DepotDestroyed ) ;
14717: LD_STRING DepotDestroyed
14719: PPUSH
14720: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 1
14736: EQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 247
14747: PUSH
14748: LD_INT 1
14750: EQUAL
14751: AND
14752: IFFALSE 14768
// deadsCounter = deadsCounter + 1 ;
14754: LD_ADDR_EXP 31
14758: PUSH
14759: LD_EXP 31
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ;
14768: PPOPN 1
14770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14771: LD_VAR 0 1
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: IN
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 1
14824: EQUAL
14825: AND
14826: IFFALSE 14832
// JMMTraitor ;
14828: CALL 8739 0 0
// end ;
14832: PPOPN 3
14834: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: IFFALSE 14926
// begin ComMoveXY ( driver , 6 , 10 ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 6
14857: PPUSH
14858: LD_INT 10
14860: PPUSH
14861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14865: LD_INT 35
14867: PPUSH
14868: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 6
14879: PPUSH
14880: LD_INT 10
14882: PPUSH
14883: CALL_OW 111
// if IsDead ( driver ) then
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: IFFALSE 14900
// exit ;
14898: GO 14926
// until IsAt ( driver , 6 , 10 ) ;
14900: LD_VAR 0 1
14904: PPUSH
14905: LD_INT 6
14907: PPUSH
14908: LD_INT 10
14910: PPUSH
14911: CALL_OW 307
14915: IFFALSE 14865
// RemoveUnit ( driver ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 64
// end ; end ;
14926: PPOPN 4
14928: END
// on Command ( cmd ) do var i , j , tmp ;
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// begin SOS_Command ( cmd ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL 32924 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15099
// begin if GetTaskList ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 437
14989: IFFALSE 15097
// begin for j = 1 to GetTaskList ( i ) do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 437
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15095
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_VAR 0 2
15023: PPUSH
15024: CALL_OW 437
15028: PUSH
15029: LD_VAR 0 3
15033: ARRAY
15034: PUSH
15035: LD_INT 4
15037: ARRAY
15038: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15039: LD_VAR 0 4
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 3
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: CALL_OW 247
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: CALL_OW 264
15077: PUSH
15078: LD_INT 51
15080: EQUAL
15081: AND
15082: IFFALSE 15093
// ComStop ( i ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: CALL_OW 141
// end ;
15093: GO 15011
15095: POP
15096: POP
// end ; end ;
15097: GO 14977
15099: POP
15100: POP
// end ;
15101: PPOPN 4
15103: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_EXP 8
15113: EQUAL
15114: PUSH
15115: LD_EXP 21
15119: PUSH
15120: LD_INT 4
15122: NONEQUAL
15123: AND
15124: IFFALSE 15276
// begin if IsOk ( Mikhail ) then
15126: LD_EXP 8
15130: PPUSH
15131: CALL_OW 302
15135: IFFALSE 15143
// AskMikhail else
15137: CALL 7425 0 0
15141: GO 15276
// if IsOk ( llab1 ) then
15143: LD_INT 23
15145: PPUSH
15146: CALL_OW 302
15150: IFFALSE 15239
// begin InGameOn ;
15152: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15156: LD_EXP 8
15160: PPUSH
15161: LD_INT 6
15163: PPUSH
15164: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15168: LD_INT 23
15170: PPUSH
15171: LD_INT 6
15173: PPUSH
15174: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15178: LD_EXP 8
15182: PPUSH
15183: LD_INT 23
15185: PPUSH
15186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15197: LD_EXP 8
15201: PPUSH
15202: CALL_OW 310
15206: PUSH
15207: LD_INT 23
15209: EQUAL
15210: PUSH
15211: LD_EXP 8
15215: PPUSH
15216: CALL_OW 301
15220: OR
15221: IFFALSE 15190
// SetSide ( llab1 , 1 ) ;
15223: LD_INT 23
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 235
// InGameOff ;
15233: CALL_OW 9
// end else
15237: GO 15276
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15239: LD_INT 3
15241: PPUSH
15242: LD_INT 6
15244: PPUSH
15245: LD_INT 2
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15255: LD_EXP 8
15259: PPUSH
15260: LD_INT 6
15262: PPUSH
15263: CALL_OW 235
// ComHold ( Mikhail ) ;
15267: LD_EXP 8
15271: PPUSH
15272: CALL_OW 140
// end ; end ; end ;
15276: PPOPN 2
15278: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 2
15288: PPUSH
15289: CALL 32940 0 2
// end ;
15293: PPOPN 2
15295: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15296: LD_EXP 8
15300: PPUSH
15301: CALL_OW 257
15305: PUSH
15306: LD_INT 3
15308: NONEQUAL
15309: IFFALSE 15327
15311: GO 15313
15313: DISABLE
// begin enable ;
15314: ENABLE
// SetClass ( Mikhail , 3 ) ;
15315: LD_EXP 8
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: CALL_OW 336
// end ; end_of_file
15327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: AND
15416: PUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 255
15424: PUSH
15425: LD_INT 3
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: AND
15442: IFFALSE 15454
15444: GO 15446
15446: DISABLE
// YouLost ( Engineer ) ;
15447: LD_STRING Engineer
15449: PPUSH
15450: CALL_OW 104
15454: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 3
15465: EQUAL
15466: PUSH
15467: LD_EXP 27
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: AND
15476: IFFALSE 15488
15478: GO 15480
15480: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15481: LD_STRING DepotCaptured
15483: PPUSH
15484: CALL_OW 104
15488: END
// export function PrepareTigers ; var i , un ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 2
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: LD_INT 4
15512: PUSH
15513: LD_INT 5
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_OWVAR 67
15526: ARRAY
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15644
// begin uc_side := 0 ;
15531: LD_ADDR_OWVAR 20
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// uc_nation := nation_nature ;
15539: LD_ADDR_OWVAR 21
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
// hc_sex := sex_male ;
15547: LD_ADDR_OWVAR 27
15551: PUSH
15552: LD_INT 1
15554: ST_TO_ADDR
// hc_class := class_tiger ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 14
15562: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15563: LD_ADDR_OWVAR 31
15567: PUSH
15568: LD_EXP 14
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15588: LD_ADDR_OWVAR 35
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 45
15601: PUSH
15602: LD_INT 50
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: LD_OWVAR 67
15615: ARRAY
15616: ST_TO_ADDR
// un = CreateHuman ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 27
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: CALL_OW 49
// end ;
15642: GO 15528
15644: POP
15645: POP
// end ; end_of_file
15646: LD_VAR 0 1
15650: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 255
15658: PUSH
15659: LD_INT 1
15661: EQUAL
15662: PUSH
15663: LD_INT 10
15665: PPUSH
15666: CALL_OW 255
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: PUSH
15676: LD_EXP 20
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: AND
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 51
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: LD_INT 58
15721: PUSH
15722: EMPTY
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: PUSH
15740: LD_INT 0
15742: EQUAL
15743: AND
15744: IFFALSE 15835
15746: GO 15748
15748: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15749: LD_INT 9450
15751: PUSH
15752: LD_INT 8400
15754: PUSH
15755: LD_INT 6300
15757: PUSH
15758: LD_INT 6300
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_OWVAR 67
15771: ARRAY
15772: PPUSH
15773: CALL_OW 67
// if cargoEscape then
15777: LD_EXP 20
15781: IFFALSE 15835
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15783: LD_EXP 9
15787: PPUSH
15788: LD_STRING D6-Pow-1
15790: PPUSH
15791: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15795: LD_EXP 1
15799: PPUSH
15800: LD_STRING D6-JMM-1
15802: PPUSH
15803: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15807: LD_EXP 9
15811: PPUSH
15812: LD_STRING D6-Pow-2
15814: PPUSH
15815: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15819: LD_EXP 1
15823: PPUSH
15824: LD_STRING D6-JMM-2
15826: PPUSH
15827: CALL_OW 88
// FinishMission ;
15831: CALL 16051 0 0
// end ; end ;
15835: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 255
15843: PUSH
15844: LD_INT 1
15846: EQUAL
15847: PUSH
15848: LD_INT 10
15850: PPUSH
15851: CALL_OW 255
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: AND
15860: PUSH
15861: LD_EXP 20
15865: PUSH
15866: LD_INT 1
15868: GREATER
15869: AND
15870: IFFALSE 15945
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15878: LD_INT 11550
15880: PUSH
15881: LD_INT 10500
15883: PUSH
15884: LD_INT 9450
15886: PUSH
15887: LD_INT 8400
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_OWVAR 67
15900: ARRAY
15901: PPUSH
15902: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15906: LD_INT 1
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 3
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: LD_OWVAR 67
15928: ARRAY
15929: PPUSH
15930: LD_INT 13
15932: PPUSH
15933: CALL 13462 0 2
// lastBattle = 1 ;
15937: LD_ADDR_EXP 27
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// end ;
15945: PPOPN 1
15947: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15948: LD_EXP 27
15952: PUSH
15953: LD_INT 1
15955: EQUAL
15956: PUSH
15957: LD_INT 26
15959: PPUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 70
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: AND
15993: IFFALSE 16050
15995: GO 15997
15997: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15998: LD_EXP 9
16002: PPUSH
16003: LD_STRING D6-Pow-1
16005: PPUSH
16006: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16010: LD_EXP 1
16014: PPUSH
16015: LD_STRING D6-JMM-1
16017: PPUSH
16018: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16022: LD_EXP 9
16026: PPUSH
16027: LD_STRING D6-Pow-2
16029: PPUSH
16030: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16034: LD_EXP 1
16038: PPUSH
16039: LD_STRING D6-JMM-2
16041: PPUSH
16042: CALL_OW 88
// FinishMission ;
16046: CALL 16051 0 0
// end ;
16050: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
// if traitor then
16058: LD_EXP 33
16062: IFFALSE 16066
// exit ;
16064: GO 16930
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16066: LD_INT 22
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 21
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 23
16088: PUSH
16089: LD_INT 1
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 50
16098: PUSH
16099: EMPTY
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: PPUSH
16108: CALL_OW 69
16112: PUSH
16113: LD_INT 2
16115: LESS
16116: IFFALSE 16125
// YouLost ( Troops ) ;
16118: LD_STRING Troops
16120: PPUSH
16121: CALL_OW 104
// if tick <= 18 18$00 then
16125: LD_OWVAR 1
16129: PUSH
16130: LD_INT 37800
16132: LESSEQUAL
16133: IFFALSE 16142
// SetAchievement ( ACH_ASPEED_2 ) ;
16135: LD_STRING ACH_ASPEED_2
16137: PPUSH
16138: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 24
16169: PUSH
16170: LD_INT 251
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if tmp then
16187: LD_VAR 0 2
16191: IFFALSE 16205
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_STRING 02_tanks_1
16200: PPUSH
16201: CALL 10808 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16205: LD_EXP 21
16209: PUSH
16210: LD_INT 1
16212: EQUAL
16213: PUSH
16214: LD_EXP 8
16218: PPUSH
16219: CALL_OW 300
16223: AND
16224: IFFALSE 16238
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16226: LD_EXP 21
16230: PPUSH
16231: LD_STRING 02_mikhailStatus_1
16233: PPUSH
16234: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 274
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 275
16253: PPUSH
16254: LD_STRING 02_resources_4
16256: PPUSH
16257: CALL_OW 39
// m1 := false ;
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// m2 := false ;
16269: LD_ADDR_VAR 0 4
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// m3 := false ;
16277: LD_ADDR_VAR 0 5
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 274
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 275
16300: PUSH
16301: LD_INT 200
16303: GREATEREQUAL
16304: IFFALSE 16326
// begin AddMedal ( Cans , 1 ) ;
16306: LD_STRING Cans
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 101
// m1 := true ;
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// end else
16324: GO 16337
// begin AddMedal ( Cans , - 1 ) ;
16326: LD_STRING Cans
16328: PPUSH
16329: LD_INT 1
16331: NEG
16332: PPUSH
16333: CALL_OW 101
// end ; if deadsCounter < 2 then
16337: LD_EXP 31
16341: PUSH
16342: LD_INT 2
16344: LESS
16345: IFFALSE 16367
// begin AddMedal ( Deaths , 1 ) ;
16347: LD_STRING Deaths
16349: PPUSH
16350: LD_INT 1
16352: PPUSH
16353: CALL_OW 101
// m2 := true ;
16357: LD_ADDR_VAR 0 4
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// end else
16365: GO 16378
// begin AddMedal ( Deaths , - 1 ) ;
16367: LD_STRING Deaths
16369: PPUSH
16370: LD_INT 1
16372: NEG
16373: PPUSH
16374: CALL_OW 101
// end ; if mikhailStatus = 0 then
16378: LD_EXP 21
16382: PUSH
16383: LD_INT 0
16385: EQUAL
16386: IFFALSE 16399
// AddMedal ( Prisoner , - 1 ) ;
16388: LD_STRING Prisoner
16390: PPUSH
16391: LD_INT 1
16393: NEG
16394: PPUSH
16395: CALL_OW 101
// if mikhailStatus = 1 then
16399: LD_EXP 21
16403: PUSH
16404: LD_INT 1
16406: EQUAL
16407: IFFALSE 16427
// begin AddMedal ( Prisoner , 1 ) ;
16409: LD_STRING Prisoner
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 101
// m3 := true ;
16419: LD_ADDR_VAR 0 5
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16427: LD_EXP 21
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16455
// begin AddMedal ( Prisoner , 2 ) ;
16437: LD_STRING Prisoner
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: CALL_OW 101
// m3 := true ;
16447: LD_ADDR_VAR 0 5
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16455: LD_EXP 21
16459: PUSH
16460: LD_INT 3
16462: EQUAL
16463: IFFALSE 16476
// AddMedal ( Prisoner , - 2 ) ;
16465: LD_STRING Prisoner
16467: PPUSH
16468: LD_INT 2
16470: NEG
16471: PPUSH
16472: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16476: LD_OWVAR 67
16480: PUSH
16481: LD_INT 3
16483: GREATEREQUAL
16484: PUSH
16485: LD_VAR 0 3
16489: AND
16490: PUSH
16491: LD_VAR 0 4
16495: AND
16496: PUSH
16497: LD_VAR 0 5
16501: AND
16502: IFFALSE 16514
// SetAchievementEX ( ACH_AMER , 2 ) ;
16504: LD_STRING ACH_AMER
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 564
// GiveMedals ( MAIN ) ;
16514: LD_STRING MAIN
16516: PPUSH
16517: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16521: LD_INT 22
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: PPUSH
16561: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16565: LD_EXP 1
16569: PPUSH
16570: LD_EXP 34
16574: PUSH
16575: LD_STRING JMM
16577: STR
16578: PPUSH
16579: CALL_OW 38
// if IsOK ( Bobby ) then
16583: LD_EXP 2
16587: PPUSH
16588: CALL_OW 302
16592: IFFALSE 16612
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16594: LD_EXP 2
16598: PPUSH
16599: LD_EXP 34
16603: PUSH
16604: LD_STRING Bobby
16606: STR
16607: PPUSH
16608: CALL_OW 38
// if IsOK ( Cyrus ) then
16612: LD_EXP 3
16616: PPUSH
16617: CALL_OW 302
16621: IFFALSE 16641
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16623: LD_EXP 3
16627: PPUSH
16628: LD_EXP 34
16632: PUSH
16633: LD_STRING Cyrus
16635: STR
16636: PPUSH
16637: CALL_OW 38
// if IsOK ( Lisa ) then
16641: LD_EXP 4
16645: PPUSH
16646: CALL_OW 302
16650: IFFALSE 16677
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16652: LD_STRING enableBioCharacter(BIO_LISA)
16654: PPUSH
16655: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16659: LD_EXP 4
16663: PPUSH
16664: LD_EXP 34
16668: PUSH
16669: LD_STRING Lisa
16671: STR
16672: PPUSH
16673: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16677: LD_EXP 5
16681: PPUSH
16682: CALL_OW 302
16686: IFFALSE 16713
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16688: LD_STRING enableBioCharacter(BIO_KHAT)
16690: PPUSH
16691: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16695: LD_EXP 5
16699: PPUSH
16700: LD_EXP 34
16704: PUSH
16705: LD_STRING Khatam
16707: STR
16708: PPUSH
16709: CALL_OW 38
// end ; if IsOK ( Brian ) then
16713: LD_EXP 6
16717: PPUSH
16718: CALL_OW 302
16722: IFFALSE 16742
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16724: LD_EXP 6
16728: PPUSH
16729: LD_EXP 34
16733: PUSH
16734: LD_STRING Brian
16736: STR
16737: PPUSH
16738: CALL_OW 38
// if IsOk ( Jerry ) then
16742: LD_EXP 7
16746: PPUSH
16747: CALL_OW 302
16751: IFFALSE 16771
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16753: LD_EXP 7
16757: PPUSH
16758: LD_EXP 34
16762: PUSH
16763: LD_STRING Jerry
16765: STR
16766: PPUSH
16767: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16771: LD_EXP 21
16775: PUSH
16776: LD_INT 1
16778: EQUAL
16779: PUSH
16780: LD_EXP 8
16784: PPUSH
16785: CALL_OW 255
16789: PUSH
16790: LD_INT 1
16792: EQUAL
16793: AND
16794: PUSH
16795: LD_EXP 8
16799: PPUSH
16800: CALL_OW 302
16804: AND
16805: IFFALSE 16832
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16807: LD_STRING enableBioCharacter(BIO_MICH)
16809: PPUSH
16810: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16814: LD_EXP 8
16818: PPUSH
16819: LD_EXP 34
16823: PUSH
16824: LD_STRING Mikhail
16826: STR
16827: PPUSH
16828: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16832: LD_INT 50
16834: PUSH
16835: EMPTY
16836: LIST
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 21
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: LD_EXP 1
16872: PUSH
16873: LD_EXP 2
16877: PUSH
16878: LD_EXP 3
16882: PUSH
16883: LD_EXP 4
16887: PUSH
16888: LD_EXP 5
16892: PUSH
16893: LD_EXP 6
16897: PUSH
16898: LD_EXP 7
16902: PUSH
16903: LD_EXP 8
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: DIFF
16918: PPUSH
16919: LD_STRING 02_other_survivors
16921: PPUSH
16922: CALL_OW 38
// YouWin ;
16926: CALL_OW 103
// end ; end_of_file end_of_file
16930: LD_VAR 0 1
16934: RET
// export globalGameSaveCounter ; every 0 0$1 do
16935: GO 16937
16937: DISABLE
// begin enable ;
16938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16939: LD_STRING updateTimer(
16941: PUSH
16942: LD_OWVAR 1
16946: STR
16947: PUSH
16948: LD_STRING );
16950: STR
16951: PPUSH
16952: CALL_OW 559
// end ;
16956: END
// every 0 0$1 do
16957: GO 16959
16959: DISABLE
// begin globalGameSaveCounter := 0 ;
16960: LD_ADDR_EXP 37
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16968: LD_STRING setGameSaveCounter(0)
16970: PPUSH
16971: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16975: LD_STRING initStreamRollete();
16977: PPUSH
16978: CALL_OW 559
// InitStreamMode ;
16982: CALL 18325 0 0
// DefineStreamItems ( false ) ;
16986: LD_INT 0
16988: PPUSH
16989: CALL 18789 0 1
// end ;
16993: END
// export function SOS_MapStart ( ) ; begin
16994: LD_INT 0
16996: PPUSH
// if streamModeActive then
16997: LD_EXP 38
17001: IFFALSE 17010
// DefineStreamItems ( true ) ;
17003: LD_INT 1
17005: PPUSH
17006: CALL 18789 0 1
// UpdateLuaVariables ( ) ;
17010: CALL 17027 0 0
// UpdateFactoryWaypoints ( ) ;
17014: CALL 31791 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17018: CALL 32043 0 0
// end ;
17022: LD_VAR 0 1
17026: RET
// function UpdateLuaVariables ( ) ; begin
17027: LD_INT 0
17029: PPUSH
// if globalGameSaveCounter then
17030: LD_EXP 37
17034: IFFALSE 17068
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17036: LD_ADDR_EXP 37
17040: PUSH
17041: LD_EXP 37
17045: PPUSH
17046: CALL 77259 0 1
17050: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17051: LD_STRING setGameSaveCounter(
17053: PUSH
17054: LD_EXP 37
17058: STR
17059: PUSH
17060: LD_STRING )
17062: STR
17063: PPUSH
17064: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17068: LD_STRING setGameDifficulty(
17070: PUSH
17071: LD_OWVAR 67
17075: STR
17076: PUSH
17077: LD_STRING )
17079: STR
17080: PPUSH
17081: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17085: LD_STRING displayDifficulty(
17087: PUSH
17088: LD_OWVAR 67
17092: STR
17093: PUSH
17094: LD_STRING )
17096: STR
17097: PPUSH
17098: CALL_OW 559
// end ;
17102: LD_VAR 0 1
17106: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17107: LD_INT 0
17109: PPUSH
// if p2 = stream_mode then
17110: LD_VAR 0 2
17114: PUSH
17115: LD_INT 100
17117: EQUAL
17118: IFFALSE 18121
// begin if not StreamModeActive then
17120: LD_EXP 38
17124: NOT
17125: IFFALSE 17135
// StreamModeActive := true ;
17127: LD_ADDR_EXP 38
17131: PUSH
17132: LD_INT 1
17134: ST_TO_ADDR
// if p3 = 0 then
17135: LD_VAR 0 3
17139: PUSH
17140: LD_INT 0
17142: EQUAL
17143: IFFALSE 17149
// InitStreamMode ;
17145: CALL 18325 0 0
// if p3 = 1 then
17149: LD_VAR 0 3
17153: PUSH
17154: LD_INT 1
17156: EQUAL
17157: IFFALSE 17167
// sRocket := true ;
17159: LD_ADDR_EXP 43
17163: PUSH
17164: LD_INT 1
17166: ST_TO_ADDR
// if p3 = 2 then
17167: LD_VAR 0 3
17171: PUSH
17172: LD_INT 2
17174: EQUAL
17175: IFFALSE 17185
// sSpeed := true ;
17177: LD_ADDR_EXP 42
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// if p3 = 3 then
17185: LD_VAR 0 3
17189: PUSH
17190: LD_INT 3
17192: EQUAL
17193: IFFALSE 17203
// sEngine := true ;
17195: LD_ADDR_EXP 44
17199: PUSH
17200: LD_INT 1
17202: ST_TO_ADDR
// if p3 = 4 then
17203: LD_VAR 0 3
17207: PUSH
17208: LD_INT 4
17210: EQUAL
17211: IFFALSE 17221
// sSpec := true ;
17213: LD_ADDR_EXP 41
17217: PUSH
17218: LD_INT 1
17220: ST_TO_ADDR
// if p3 = 5 then
17221: LD_VAR 0 3
17225: PUSH
17226: LD_INT 5
17228: EQUAL
17229: IFFALSE 17239
// sLevel := true ;
17231: LD_ADDR_EXP 45
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// if p3 = 6 then
17239: LD_VAR 0 3
17243: PUSH
17244: LD_INT 6
17246: EQUAL
17247: IFFALSE 17257
// sArmoury := true ;
17249: LD_ADDR_EXP 46
17253: PUSH
17254: LD_INT 1
17256: ST_TO_ADDR
// if p3 = 7 then
17257: LD_VAR 0 3
17261: PUSH
17262: LD_INT 7
17264: EQUAL
17265: IFFALSE 17275
// sRadar := true ;
17267: LD_ADDR_EXP 47
17271: PUSH
17272: LD_INT 1
17274: ST_TO_ADDR
// if p3 = 8 then
17275: LD_VAR 0 3
17279: PUSH
17280: LD_INT 8
17282: EQUAL
17283: IFFALSE 17293
// sBunker := true ;
17285: LD_ADDR_EXP 48
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// if p3 = 9 then
17293: LD_VAR 0 3
17297: PUSH
17298: LD_INT 9
17300: EQUAL
17301: IFFALSE 17311
// sHack := true ;
17303: LD_ADDR_EXP 49
17307: PUSH
17308: LD_INT 1
17310: ST_TO_ADDR
// if p3 = 10 then
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: EQUAL
17319: IFFALSE 17329
// sFire := true ;
17321: LD_ADDR_EXP 50
17325: PUSH
17326: LD_INT 1
17328: ST_TO_ADDR
// if p3 = 11 then
17329: LD_VAR 0 3
17333: PUSH
17334: LD_INT 11
17336: EQUAL
17337: IFFALSE 17347
// sRefresh := true ;
17339: LD_ADDR_EXP 51
17343: PUSH
17344: LD_INT 1
17346: ST_TO_ADDR
// if p3 = 12 then
17347: LD_VAR 0 3
17351: PUSH
17352: LD_INT 12
17354: EQUAL
17355: IFFALSE 17365
// sExp := true ;
17357: LD_ADDR_EXP 52
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
// if p3 = 13 then
17365: LD_VAR 0 3
17369: PUSH
17370: LD_INT 13
17372: EQUAL
17373: IFFALSE 17383
// sDepot := true ;
17375: LD_ADDR_EXP 53
17379: PUSH
17380: LD_INT 1
17382: ST_TO_ADDR
// if p3 = 14 then
17383: LD_VAR 0 3
17387: PUSH
17388: LD_INT 14
17390: EQUAL
17391: IFFALSE 17401
// sFlag := true ;
17393: LD_ADDR_EXP 54
17397: PUSH
17398: LD_INT 1
17400: ST_TO_ADDR
// if p3 = 15 then
17401: LD_VAR 0 3
17405: PUSH
17406: LD_INT 15
17408: EQUAL
17409: IFFALSE 17419
// sKamikadze := true ;
17411: LD_ADDR_EXP 62
17415: PUSH
17416: LD_INT 1
17418: ST_TO_ADDR
// if p3 = 16 then
17419: LD_VAR 0 3
17423: PUSH
17424: LD_INT 16
17426: EQUAL
17427: IFFALSE 17437
// sTroll := true ;
17429: LD_ADDR_EXP 63
17433: PUSH
17434: LD_INT 1
17436: ST_TO_ADDR
// if p3 = 17 then
17437: LD_VAR 0 3
17441: PUSH
17442: LD_INT 17
17444: EQUAL
17445: IFFALSE 17455
// sSlow := true ;
17447: LD_ADDR_EXP 64
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
// if p3 = 18 then
17455: LD_VAR 0 3
17459: PUSH
17460: LD_INT 18
17462: EQUAL
17463: IFFALSE 17473
// sLack := true ;
17465: LD_ADDR_EXP 65
17469: PUSH
17470: LD_INT 1
17472: ST_TO_ADDR
// if p3 = 19 then
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 19
17480: EQUAL
17481: IFFALSE 17491
// sTank := true ;
17483: LD_ADDR_EXP 67
17487: PUSH
17488: LD_INT 1
17490: ST_TO_ADDR
// if p3 = 20 then
17491: LD_VAR 0 3
17495: PUSH
17496: LD_INT 20
17498: EQUAL
17499: IFFALSE 17509
// sRemote := true ;
17501: LD_ADDR_EXP 68
17505: PUSH
17506: LD_INT 1
17508: ST_TO_ADDR
// if p3 = 21 then
17509: LD_VAR 0 3
17513: PUSH
17514: LD_INT 21
17516: EQUAL
17517: IFFALSE 17527
// sPowell := true ;
17519: LD_ADDR_EXP 69
17523: PUSH
17524: LD_INT 1
17526: ST_TO_ADDR
// if p3 = 22 then
17527: LD_VAR 0 3
17531: PUSH
17532: LD_INT 22
17534: EQUAL
17535: IFFALSE 17545
// sTeleport := true ;
17537: LD_ADDR_EXP 72
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// if p3 = 23 then
17545: LD_VAR 0 3
17549: PUSH
17550: LD_INT 23
17552: EQUAL
17553: IFFALSE 17563
// sOilTower := true ;
17555: LD_ADDR_EXP 74
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// if p3 = 24 then
17563: LD_VAR 0 3
17567: PUSH
17568: LD_INT 24
17570: EQUAL
17571: IFFALSE 17581
// sShovel := true ;
17573: LD_ADDR_EXP 75
17577: PUSH
17578: LD_INT 1
17580: ST_TO_ADDR
// if p3 = 25 then
17581: LD_VAR 0 3
17585: PUSH
17586: LD_INT 25
17588: EQUAL
17589: IFFALSE 17599
// sSheik := true ;
17591: LD_ADDR_EXP 76
17595: PUSH
17596: LD_INT 1
17598: ST_TO_ADDR
// if p3 = 26 then
17599: LD_VAR 0 3
17603: PUSH
17604: LD_INT 26
17606: EQUAL
17607: IFFALSE 17617
// sEarthquake := true ;
17609: LD_ADDR_EXP 78
17613: PUSH
17614: LD_INT 1
17616: ST_TO_ADDR
// if p3 = 27 then
17617: LD_VAR 0 3
17621: PUSH
17622: LD_INT 27
17624: EQUAL
17625: IFFALSE 17635
// sAI := true ;
17627: LD_ADDR_EXP 79
17631: PUSH
17632: LD_INT 1
17634: ST_TO_ADDR
// if p3 = 28 then
17635: LD_VAR 0 3
17639: PUSH
17640: LD_INT 28
17642: EQUAL
17643: IFFALSE 17653
// sCargo := true ;
17645: LD_ADDR_EXP 82
17649: PUSH
17650: LD_INT 1
17652: ST_TO_ADDR
// if p3 = 29 then
17653: LD_VAR 0 3
17657: PUSH
17658: LD_INT 29
17660: EQUAL
17661: IFFALSE 17671
// sDLaser := true ;
17663: LD_ADDR_EXP 83
17667: PUSH
17668: LD_INT 1
17670: ST_TO_ADDR
// if p3 = 30 then
17671: LD_VAR 0 3
17675: PUSH
17676: LD_INT 30
17678: EQUAL
17679: IFFALSE 17689
// sExchange := true ;
17681: LD_ADDR_EXP 84
17685: PUSH
17686: LD_INT 1
17688: ST_TO_ADDR
// if p3 = 31 then
17689: LD_VAR 0 3
17693: PUSH
17694: LD_INT 31
17696: EQUAL
17697: IFFALSE 17707
// sFac := true ;
17699: LD_ADDR_EXP 85
17703: PUSH
17704: LD_INT 1
17706: ST_TO_ADDR
// if p3 = 32 then
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 32
17714: EQUAL
17715: IFFALSE 17725
// sPower := true ;
17717: LD_ADDR_EXP 86
17721: PUSH
17722: LD_INT 1
17724: ST_TO_ADDR
// if p3 = 33 then
17725: LD_VAR 0 3
17729: PUSH
17730: LD_INT 33
17732: EQUAL
17733: IFFALSE 17743
// sRandom := true ;
17735: LD_ADDR_EXP 87
17739: PUSH
17740: LD_INT 1
17742: ST_TO_ADDR
// if p3 = 34 then
17743: LD_VAR 0 3
17747: PUSH
17748: LD_INT 34
17750: EQUAL
17751: IFFALSE 17761
// sShield := true ;
17753: LD_ADDR_EXP 88
17757: PUSH
17758: LD_INT 1
17760: ST_TO_ADDR
// if p3 = 35 then
17761: LD_VAR 0 3
17765: PUSH
17766: LD_INT 35
17768: EQUAL
17769: IFFALSE 17779
// sTime := true ;
17771: LD_ADDR_EXP 89
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// if p3 = 36 then
17779: LD_VAR 0 3
17783: PUSH
17784: LD_INT 36
17786: EQUAL
17787: IFFALSE 17797
// sTools := true ;
17789: LD_ADDR_EXP 90
17793: PUSH
17794: LD_INT 1
17796: ST_TO_ADDR
// if p3 = 101 then
17797: LD_VAR 0 3
17801: PUSH
17802: LD_INT 101
17804: EQUAL
17805: IFFALSE 17815
// sSold := true ;
17807: LD_ADDR_EXP 55
17811: PUSH
17812: LD_INT 1
17814: ST_TO_ADDR
// if p3 = 102 then
17815: LD_VAR 0 3
17819: PUSH
17820: LD_INT 102
17822: EQUAL
17823: IFFALSE 17833
// sDiff := true ;
17825: LD_ADDR_EXP 56
17829: PUSH
17830: LD_INT 1
17832: ST_TO_ADDR
// if p3 = 103 then
17833: LD_VAR 0 3
17837: PUSH
17838: LD_INT 103
17840: EQUAL
17841: IFFALSE 17851
// sFog := true ;
17843: LD_ADDR_EXP 59
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// if p3 = 104 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 104
17858: EQUAL
17859: IFFALSE 17869
// sReset := true ;
17861: LD_ADDR_EXP 60
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// if p3 = 105 then
17869: LD_VAR 0 3
17873: PUSH
17874: LD_INT 105
17876: EQUAL
17877: IFFALSE 17887
// sSun := true ;
17879: LD_ADDR_EXP 61
17883: PUSH
17884: LD_INT 1
17886: ST_TO_ADDR
// if p3 = 106 then
17887: LD_VAR 0 3
17891: PUSH
17892: LD_INT 106
17894: EQUAL
17895: IFFALSE 17905
// sTiger := true ;
17897: LD_ADDR_EXP 57
17901: PUSH
17902: LD_INT 1
17904: ST_TO_ADDR
// if p3 = 107 then
17905: LD_VAR 0 3
17909: PUSH
17910: LD_INT 107
17912: EQUAL
17913: IFFALSE 17923
// sBomb := true ;
17915: LD_ADDR_EXP 58
17919: PUSH
17920: LD_INT 1
17922: ST_TO_ADDR
// if p3 = 108 then
17923: LD_VAR 0 3
17927: PUSH
17928: LD_INT 108
17930: EQUAL
17931: IFFALSE 17941
// sWound := true ;
17933: LD_ADDR_EXP 66
17937: PUSH
17938: LD_INT 1
17940: ST_TO_ADDR
// if p3 = 109 then
17941: LD_VAR 0 3
17945: PUSH
17946: LD_INT 109
17948: EQUAL
17949: IFFALSE 17959
// sBetray := true ;
17951: LD_ADDR_EXP 70
17955: PUSH
17956: LD_INT 1
17958: ST_TO_ADDR
// if p3 = 110 then
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 110
17966: EQUAL
17967: IFFALSE 17977
// sContamin := true ;
17969: LD_ADDR_EXP 71
17973: PUSH
17974: LD_INT 1
17976: ST_TO_ADDR
// if p3 = 111 then
17977: LD_VAR 0 3
17981: PUSH
17982: LD_INT 111
17984: EQUAL
17985: IFFALSE 17995
// sOil := true ;
17987: LD_ADDR_EXP 73
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
// if p3 = 112 then
17995: LD_VAR 0 3
17999: PUSH
18000: LD_INT 112
18002: EQUAL
18003: IFFALSE 18013
// sStu := true ;
18005: LD_ADDR_EXP 77
18009: PUSH
18010: LD_INT 1
18012: ST_TO_ADDR
// if p3 = 113 then
18013: LD_VAR 0 3
18017: PUSH
18018: LD_INT 113
18020: EQUAL
18021: IFFALSE 18031
// sBazooka := true ;
18023: LD_ADDR_EXP 80
18027: PUSH
18028: LD_INT 1
18030: ST_TO_ADDR
// if p3 = 114 then
18031: LD_VAR 0 3
18035: PUSH
18036: LD_INT 114
18038: EQUAL
18039: IFFALSE 18049
// sMortar := true ;
18041: LD_ADDR_EXP 81
18045: PUSH
18046: LD_INT 1
18048: ST_TO_ADDR
// if p3 = 115 then
18049: LD_VAR 0 3
18053: PUSH
18054: LD_INT 115
18056: EQUAL
18057: IFFALSE 18067
// sRanger := true ;
18059: LD_ADDR_EXP 91
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// if p3 = 116 then
18067: LD_VAR 0 3
18071: PUSH
18072: LD_INT 116
18074: EQUAL
18075: IFFALSE 18085
// sComputer := true ;
18077: LD_ADDR_EXP 92
18081: PUSH
18082: LD_INT 1
18084: ST_TO_ADDR
// if p3 = 117 then
18085: LD_VAR 0 3
18089: PUSH
18090: LD_INT 117
18092: EQUAL
18093: IFFALSE 18103
// s30 := true ;
18095: LD_ADDR_EXP 93
18099: PUSH
18100: LD_INT 1
18102: ST_TO_ADDR
// if p3 = 118 then
18103: LD_VAR 0 3
18107: PUSH
18108: LD_INT 118
18110: EQUAL
18111: IFFALSE 18121
// s60 := true ;
18113: LD_ADDR_EXP 94
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// end ; if p2 = hack_mode then
18121: LD_VAR 0 2
18125: PUSH
18126: LD_INT 101
18128: EQUAL
18129: IFFALSE 18257
// begin case p3 of 1 :
18131: LD_VAR 0 3
18135: PUSH
18136: LD_INT 1
18138: DOUBLE
18139: EQUAL
18140: IFTRUE 18144
18142: GO 18151
18144: POP
// hHackUnlimitedResources ; 2 :
18145: CALL 30404 0 0
18149: GO 18257
18151: LD_INT 2
18153: DOUBLE
18154: EQUAL
18155: IFTRUE 18159
18157: GO 18166
18159: POP
// hHackSetLevel10 ; 3 :
18160: CALL 30537 0 0
18164: GO 18257
18166: LD_INT 3
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18181
18174: POP
// hHackSetLevel10YourUnits ; 4 :
18175: CALL 30622 0 0
18179: GO 18257
18181: LD_INT 4
18183: DOUBLE
18184: EQUAL
18185: IFTRUE 18189
18187: GO 18196
18189: POP
// hHackInvincible ; 5 :
18190: CALL 31070 0 0
18194: GO 18257
18196: LD_INT 5
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18211
18204: POP
// hHackInvisible ; 6 :
18205: CALL 31181 0 0
18209: GO 18257
18211: LD_INT 6
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18226
18219: POP
// hHackChangeYourSide ; 7 :
18220: CALL 31238 0 0
18224: GO 18257
18226: LD_INT 7
18228: DOUBLE
18229: EQUAL
18230: IFTRUE 18234
18232: GO 18241
18234: POP
// hHackChangeUnitSide ; 8 :
18235: CALL 31280 0 0
18239: GO 18257
18241: LD_INT 8
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18256
18249: POP
// hHackFog ; end ;
18250: CALL 31381 0 0
18254: GO 18257
18256: POP
// end ; if p2 = game_save_mode then
18257: LD_VAR 0 2
18261: PUSH
18262: LD_INT 102
18264: EQUAL
18265: IFFALSE 18320
// begin if p3 = 1 then
18267: LD_VAR 0 3
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: IFFALSE 18287
// globalGameSaveCounter := p4 ;
18277: LD_ADDR_EXP 37
18281: PUSH
18282: LD_VAR 0 4
18286: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18287: LD_VAR 0 3
18291: PUSH
18292: LD_INT 2
18294: EQUAL
18295: PUSH
18296: LD_EXP 37
18300: AND
18301: IFFALSE 18320
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18303: LD_STRING setGameSaveCounter(
18305: PUSH
18306: LD_EXP 37
18310: STR
18311: PUSH
18312: LD_STRING )
18314: STR
18315: PPUSH
18316: CALL_OW 559
// end ; end ;
18320: LD_VAR 0 7
18324: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18325: LD_INT 0
18327: PPUSH
// streamModeActive := false ;
18328: LD_ADDR_EXP 38
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// normalCounter := 36 ;
18336: LD_ADDR_EXP 39
18340: PUSH
18341: LD_INT 36
18343: ST_TO_ADDR
// hardcoreCounter := 18 ;
18344: LD_ADDR_EXP 40
18348: PUSH
18349: LD_INT 18
18351: ST_TO_ADDR
// sRocket := false ;
18352: LD_ADDR_EXP 43
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sSpeed := false ;
18360: LD_ADDR_EXP 42
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sEngine := false ;
18368: LD_ADDR_EXP 44
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sSpec := false ;
18376: LD_ADDR_EXP 41
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sLevel := false ;
18384: LD_ADDR_EXP 45
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sArmoury := false ;
18392: LD_ADDR_EXP 46
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sRadar := false ;
18400: LD_ADDR_EXP 47
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sBunker := false ;
18408: LD_ADDR_EXP 48
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sHack := false ;
18416: LD_ADDR_EXP 49
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sFire := false ;
18424: LD_ADDR_EXP 50
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sRefresh := false ;
18432: LD_ADDR_EXP 51
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sExp := false ;
18440: LD_ADDR_EXP 52
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// sDepot := false ;
18448: LD_ADDR_EXP 53
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// sFlag := false ;
18456: LD_ADDR_EXP 54
18460: PUSH
18461: LD_INT 0
18463: ST_TO_ADDR
// sKamikadze := false ;
18464: LD_ADDR_EXP 62
18468: PUSH
18469: LD_INT 0
18471: ST_TO_ADDR
// sTroll := false ;
18472: LD_ADDR_EXP 63
18476: PUSH
18477: LD_INT 0
18479: ST_TO_ADDR
// sSlow := false ;
18480: LD_ADDR_EXP 64
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// sLack := false ;
18488: LD_ADDR_EXP 65
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// sTank := false ;
18496: LD_ADDR_EXP 67
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// sRemote := false ;
18504: LD_ADDR_EXP 68
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sPowell := false ;
18512: LD_ADDR_EXP 69
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// sTeleport := false ;
18520: LD_ADDR_EXP 72
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
// sOilTower := false ;
18528: LD_ADDR_EXP 74
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// sShovel := false ;
18536: LD_ADDR_EXP 75
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// sSheik := false ;
18544: LD_ADDR_EXP 76
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// sEarthquake := false ;
18552: LD_ADDR_EXP 78
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// sAI := false ;
18560: LD_ADDR_EXP 79
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// sCargo := false ;
18568: LD_ADDR_EXP 82
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// sDLaser := false ;
18576: LD_ADDR_EXP 83
18580: PUSH
18581: LD_INT 0
18583: ST_TO_ADDR
// sExchange := false ;
18584: LD_ADDR_EXP 84
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// sFac := false ;
18592: LD_ADDR_EXP 85
18596: PUSH
18597: LD_INT 0
18599: ST_TO_ADDR
// sPower := false ;
18600: LD_ADDR_EXP 86
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
// sRandom := false ;
18608: LD_ADDR_EXP 87
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// sShield := false ;
18616: LD_ADDR_EXP 88
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// sTime := false ;
18624: LD_ADDR_EXP 89
18628: PUSH
18629: LD_INT 0
18631: ST_TO_ADDR
// sTools := false ;
18632: LD_ADDR_EXP 90
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
// sSold := false ;
18640: LD_ADDR_EXP 55
18644: PUSH
18645: LD_INT 0
18647: ST_TO_ADDR
// sDiff := false ;
18648: LD_ADDR_EXP 56
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// sFog := false ;
18656: LD_ADDR_EXP 59
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// sReset := false ;
18664: LD_ADDR_EXP 60
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// sSun := false ;
18672: LD_ADDR_EXP 61
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// sTiger := false ;
18680: LD_ADDR_EXP 57
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// sBomb := false ;
18688: LD_ADDR_EXP 58
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// sWound := false ;
18696: LD_ADDR_EXP 66
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// sBetray := false ;
18704: LD_ADDR_EXP 70
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// sContamin := false ;
18712: LD_ADDR_EXP 71
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// sOil := false ;
18720: LD_ADDR_EXP 73
18724: PUSH
18725: LD_INT 0
18727: ST_TO_ADDR
// sStu := false ;
18728: LD_ADDR_EXP 77
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// sBazooka := false ;
18736: LD_ADDR_EXP 80
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// sMortar := false ;
18744: LD_ADDR_EXP 81
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// sRanger := false ;
18752: LD_ADDR_EXP 91
18756: PUSH
18757: LD_INT 0
18759: ST_TO_ADDR
// sComputer := false ;
18760: LD_ADDR_EXP 92
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// s30 := false ;
18768: LD_ADDR_EXP 93
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// s60 := false ;
18776: LD_ADDR_EXP 94
18780: PUSH
18781: LD_INT 0
18783: ST_TO_ADDR
// end ;
18784: LD_VAR 0 1
18788: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18789: LD_INT 0
18791: PPUSH
18792: PPUSH
18793: PPUSH
18794: PPUSH
18795: PPUSH
18796: PPUSH
18797: PPUSH
// result := [ ] ;
18798: LD_ADDR_VAR 0 2
18802: PUSH
18803: EMPTY
18804: ST_TO_ADDR
// if campaign_id = 1 then
18805: LD_OWVAR 69
18809: PUSH
18810: LD_INT 1
18812: EQUAL
18813: IFFALSE 21979
// begin case mission_number of 1 :
18815: LD_OWVAR 70
18819: PUSH
18820: LD_INT 1
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18904
18828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: LD_INT 11
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 15
18848: PUSH
18849: LD_INT 16
18851: PUSH
18852: LD_INT 22
18854: PUSH
18855: LD_INT 23
18857: PUSH
18858: LD_INT 26
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 101
18874: PUSH
18875: LD_INT 102
18877: PUSH
18878: LD_INT 106
18880: PUSH
18881: LD_INT 116
18883: PUSH
18884: LD_INT 117
18886: PUSH
18887: LD_INT 118
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: ST_TO_ADDR
18902: GO 21977
18904: LD_INT 2
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18996
18912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18913: LD_ADDR_VAR 0 2
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 4
18923: PUSH
18924: LD_INT 11
18926: PUSH
18927: LD_INT 12
18929: PUSH
18930: LD_INT 15
18932: PUSH
18933: LD_INT 16
18935: PUSH
18936: LD_INT 22
18938: PUSH
18939: LD_INT 23
18941: PUSH
18942: LD_INT 26
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 101
18958: PUSH
18959: LD_INT 102
18961: PUSH
18962: LD_INT 105
18964: PUSH
18965: LD_INT 106
18967: PUSH
18968: LD_INT 108
18970: PUSH
18971: LD_INT 116
18973: PUSH
18974: LD_INT 117
18976: PUSH
18977: LD_INT 118
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 21977
18996: LD_INT 3
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19092
19004: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 11
19021: PUSH
19022: LD_INT 12
19024: PUSH
19025: LD_INT 15
19027: PUSH
19028: LD_INT 16
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_INT 26
19036: PUSH
19037: LD_INT 36
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 101
19054: PUSH
19055: LD_INT 102
19057: PUSH
19058: LD_INT 105
19060: PUSH
19061: LD_INT 106
19063: PUSH
19064: LD_INT 108
19066: PUSH
19067: LD_INT 116
19069: PUSH
19070: LD_INT 117
19072: PUSH
19073: LD_INT 118
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 21977
19092: LD_INT 4
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19196
19100: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19101: LD_ADDR_VAR 0 2
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: LD_INT 8
19117: PUSH
19118: LD_INT 11
19120: PUSH
19121: LD_INT 12
19123: PUSH
19124: LD_INT 15
19126: PUSH
19127: LD_INT 16
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_INT 23
19135: PUSH
19136: LD_INT 26
19138: PUSH
19139: LD_INT 36
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 101
19158: PUSH
19159: LD_INT 102
19161: PUSH
19162: LD_INT 105
19164: PUSH
19165: LD_INT 106
19167: PUSH
19168: LD_INT 108
19170: PUSH
19171: LD_INT 116
19173: PUSH
19174: LD_INT 117
19176: PUSH
19177: LD_INT 118
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: ST_TO_ADDR
19194: GO 21977
19196: LD_INT 5
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19316
19204: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 5
19218: PUSH
19219: LD_INT 6
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: LD_INT 11
19227: PUSH
19228: LD_INT 12
19230: PUSH
19231: LD_INT 15
19233: PUSH
19234: LD_INT 16
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_INT 23
19242: PUSH
19243: LD_INT 25
19245: PUSH
19246: LD_INT 26
19248: PUSH
19249: LD_INT 36
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 101
19270: PUSH
19271: LD_INT 102
19273: PUSH
19274: LD_INT 105
19276: PUSH
19277: LD_INT 106
19279: PUSH
19280: LD_INT 108
19282: PUSH
19283: LD_INT 109
19285: PUSH
19286: LD_INT 112
19288: PUSH
19289: LD_INT 116
19291: PUSH
19292: LD_INT 117
19294: PUSH
19295: LD_INT 118
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 21977
19316: LD_INT 6
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19456
19324: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 4
19335: PUSH
19336: LD_INT 5
19338: PUSH
19339: LD_INT 6
19341: PUSH
19342: LD_INT 8
19344: PUSH
19345: LD_INT 11
19347: PUSH
19348: LD_INT 12
19350: PUSH
19351: LD_INT 15
19353: PUSH
19354: LD_INT 16
19356: PUSH
19357: LD_INT 20
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 22
19365: PUSH
19366: LD_INT 23
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 26
19374: PUSH
19375: LD_INT 30
19377: PUSH
19378: LD_INT 31
19380: PUSH
19381: LD_INT 32
19383: PUSH
19384: LD_INT 36
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 101
19410: PUSH
19411: LD_INT 102
19413: PUSH
19414: LD_INT 105
19416: PUSH
19417: LD_INT 106
19419: PUSH
19420: LD_INT 108
19422: PUSH
19423: LD_INT 109
19425: PUSH
19426: LD_INT 112
19428: PUSH
19429: LD_INT 116
19431: PUSH
19432: LD_INT 117
19434: PUSH
19435: LD_INT 118
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21977
19456: LD_INT 7
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19576
19464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 7
19481: PUSH
19482: LD_INT 11
19484: PUSH
19485: LD_INT 12
19487: PUSH
19488: LD_INT 15
19490: PUSH
19491: LD_INT 16
19493: PUSH
19494: LD_INT 20
19496: PUSH
19497: LD_INT 21
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_INT 23
19505: PUSH
19506: LD_INT 25
19508: PUSH
19509: LD_INT 26
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 101
19530: PUSH
19531: LD_INT 102
19533: PUSH
19534: LD_INT 103
19536: PUSH
19537: LD_INT 105
19539: PUSH
19540: LD_INT 106
19542: PUSH
19543: LD_INT 108
19545: PUSH
19546: LD_INT 112
19548: PUSH
19549: LD_INT 116
19551: PUSH
19552: LD_INT 117
19554: PUSH
19555: LD_INT 118
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 21977
19576: LD_INT 8
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19724
19584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: LD_INT 7
19604: PUSH
19605: LD_INT 8
19607: PUSH
19608: LD_INT 11
19610: PUSH
19611: LD_INT 12
19613: PUSH
19614: LD_INT 15
19616: PUSH
19617: LD_INT 16
19619: PUSH
19620: LD_INT 20
19622: PUSH
19623: LD_INT 21
19625: PUSH
19626: LD_INT 22
19628: PUSH
19629: LD_INT 23
19631: PUSH
19632: LD_INT 25
19634: PUSH
19635: LD_INT 26
19637: PUSH
19638: LD_INT 30
19640: PUSH
19641: LD_INT 31
19643: PUSH
19644: LD_INT 32
19646: PUSH
19647: LD_INT 36
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 101
19674: PUSH
19675: LD_INT 102
19677: PUSH
19678: LD_INT 103
19680: PUSH
19681: LD_INT 105
19683: PUSH
19684: LD_INT 106
19686: PUSH
19687: LD_INT 108
19689: PUSH
19690: LD_INT 109
19692: PUSH
19693: LD_INT 112
19695: PUSH
19696: LD_INT 116
19698: PUSH
19699: LD_INT 117
19701: PUSH
19702: LD_INT 118
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
19722: GO 21977
19724: LD_INT 9
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19880
19732: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 6
19749: PUSH
19750: LD_INT 7
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 11
19758: PUSH
19759: LD_INT 12
19761: PUSH
19762: LD_INT 15
19764: PUSH
19765: LD_INT 16
19767: PUSH
19768: LD_INT 20
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: LD_INT 23
19779: PUSH
19780: LD_INT 25
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: LD_INT 28
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 31
19794: PUSH
19795: LD_INT 32
19797: PUSH
19798: LD_INT 36
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 101
19826: PUSH
19827: LD_INT 102
19829: PUSH
19830: LD_INT 103
19832: PUSH
19833: LD_INT 105
19835: PUSH
19836: LD_INT 106
19838: PUSH
19839: LD_INT 108
19841: PUSH
19842: LD_INT 109
19844: PUSH
19845: LD_INT 112
19847: PUSH
19848: LD_INT 114
19850: PUSH
19851: LD_INT 116
19853: PUSH
19854: LD_INT 117
19856: PUSH
19857: LD_INT 118
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: ST_TO_ADDR
19878: GO 21977
19880: LD_INT 10
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 20084
19888: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 5
19902: PUSH
19903: LD_INT 6
19905: PUSH
19906: LD_INT 7
19908: PUSH
19909: LD_INT 8
19911: PUSH
19912: LD_INT 9
19914: PUSH
19915: LD_INT 10
19917: PUSH
19918: LD_INT 11
19920: PUSH
19921: LD_INT 12
19923: PUSH
19924: LD_INT 13
19926: PUSH
19927: LD_INT 14
19929: PUSH
19930: LD_INT 15
19932: PUSH
19933: LD_INT 16
19935: PUSH
19936: LD_INT 17
19938: PUSH
19939: LD_INT 18
19941: PUSH
19942: LD_INT 19
19944: PUSH
19945: LD_INT 20
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_INT 23
19956: PUSH
19957: LD_INT 24
19959: PUSH
19960: LD_INT 25
19962: PUSH
19963: LD_INT 26
19965: PUSH
19966: LD_INT 28
19968: PUSH
19969: LD_INT 30
19971: PUSH
19972: LD_INT 31
19974: PUSH
19975: LD_INT 32
19977: PUSH
19978: LD_INT 36
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 101
20014: PUSH
20015: LD_INT 102
20017: PUSH
20018: LD_INT 103
20020: PUSH
20021: LD_INT 104
20023: PUSH
20024: LD_INT 105
20026: PUSH
20027: LD_INT 106
20029: PUSH
20030: LD_INT 107
20032: PUSH
20033: LD_INT 108
20035: PUSH
20036: LD_INT 109
20038: PUSH
20039: LD_INT 110
20041: PUSH
20042: LD_INT 111
20044: PUSH
20045: LD_INT 112
20047: PUSH
20048: LD_INT 114
20050: PUSH
20051: LD_INT 116
20053: PUSH
20054: LD_INT 117
20056: PUSH
20057: LD_INT 118
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: ST_TO_ADDR
20082: GO 21977
20084: LD_INT 11
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20296
20092: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20093: LD_ADDR_VAR 0 2
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 3
20103: PUSH
20104: LD_INT 4
20106: PUSH
20107: LD_INT 5
20109: PUSH
20110: LD_INT 6
20112: PUSH
20113: LD_INT 7
20115: PUSH
20116: LD_INT 8
20118: PUSH
20119: LD_INT 9
20121: PUSH
20122: LD_INT 10
20124: PUSH
20125: LD_INT 11
20127: PUSH
20128: LD_INT 12
20130: PUSH
20131: LD_INT 13
20133: PUSH
20134: LD_INT 14
20136: PUSH
20137: LD_INT 15
20139: PUSH
20140: LD_INT 16
20142: PUSH
20143: LD_INT 17
20145: PUSH
20146: LD_INT 18
20148: PUSH
20149: LD_INT 19
20151: PUSH
20152: LD_INT 20
20154: PUSH
20155: LD_INT 21
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_INT 23
20163: PUSH
20164: LD_INT 24
20166: PUSH
20167: LD_INT 25
20169: PUSH
20170: LD_INT 26
20172: PUSH
20173: LD_INT 28
20175: PUSH
20176: LD_INT 30
20178: PUSH
20179: LD_INT 31
20181: PUSH
20182: LD_INT 32
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_INT 36
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 101
20226: PUSH
20227: LD_INT 102
20229: PUSH
20230: LD_INT 103
20232: PUSH
20233: LD_INT 104
20235: PUSH
20236: LD_INT 105
20238: PUSH
20239: LD_INT 106
20241: PUSH
20242: LD_INT 107
20244: PUSH
20245: LD_INT 108
20247: PUSH
20248: LD_INT 109
20250: PUSH
20251: LD_INT 110
20253: PUSH
20254: LD_INT 111
20256: PUSH
20257: LD_INT 112
20259: PUSH
20260: LD_INT 114
20262: PUSH
20263: LD_INT 116
20265: PUSH
20266: LD_INT 117
20268: PUSH
20269: LD_INT 118
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: ST_TO_ADDR
20294: GO 21977
20296: LD_INT 12
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20524
20304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20305: LD_ADDR_VAR 0 2
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: LD_INT 4
20321: PUSH
20322: LD_INT 5
20324: PUSH
20325: LD_INT 6
20327: PUSH
20328: LD_INT 7
20330: PUSH
20331: LD_INT 8
20333: PUSH
20334: LD_INT 9
20336: PUSH
20337: LD_INT 10
20339: PUSH
20340: LD_INT 11
20342: PUSH
20343: LD_INT 12
20345: PUSH
20346: LD_INT 13
20348: PUSH
20349: LD_INT 14
20351: PUSH
20352: LD_INT 15
20354: PUSH
20355: LD_INT 16
20357: PUSH
20358: LD_INT 17
20360: PUSH
20361: LD_INT 18
20363: PUSH
20364: LD_INT 19
20366: PUSH
20367: LD_INT 20
20369: PUSH
20370: LD_INT 21
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_INT 23
20378: PUSH
20379: LD_INT 24
20381: PUSH
20382: LD_INT 25
20384: PUSH
20385: LD_INT 26
20387: PUSH
20388: LD_INT 27
20390: PUSH
20391: LD_INT 28
20393: PUSH
20394: LD_INT 30
20396: PUSH
20397: LD_INT 31
20399: PUSH
20400: LD_INT 32
20402: PUSH
20403: LD_INT 33
20405: PUSH
20406: LD_INT 34
20408: PUSH
20409: LD_INT 36
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 101
20450: PUSH
20451: LD_INT 102
20453: PUSH
20454: LD_INT 103
20456: PUSH
20457: LD_INT 104
20459: PUSH
20460: LD_INT 105
20462: PUSH
20463: LD_INT 106
20465: PUSH
20466: LD_INT 107
20468: PUSH
20469: LD_INT 108
20471: PUSH
20472: LD_INT 109
20474: PUSH
20475: LD_INT 110
20477: PUSH
20478: LD_INT 111
20480: PUSH
20481: LD_INT 112
20483: PUSH
20484: LD_INT 113
20486: PUSH
20487: LD_INT 114
20489: PUSH
20490: LD_INT 116
20492: PUSH
20493: LD_INT 117
20495: PUSH
20496: LD_INT 118
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: ST_TO_ADDR
20522: GO 21977
20524: LD_INT 13
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20740
20532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20533: LD_ADDR_VAR 0 2
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: LD_INT 4
20549: PUSH
20550: LD_INT 5
20552: PUSH
20553: LD_INT 8
20555: PUSH
20556: LD_INT 9
20558: PUSH
20559: LD_INT 10
20561: PUSH
20562: LD_INT 11
20564: PUSH
20565: LD_INT 12
20567: PUSH
20568: LD_INT 14
20570: PUSH
20571: LD_INT 15
20573: PUSH
20574: LD_INT 16
20576: PUSH
20577: LD_INT 17
20579: PUSH
20580: LD_INT 18
20582: PUSH
20583: LD_INT 19
20585: PUSH
20586: LD_INT 20
20588: PUSH
20589: LD_INT 21
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_INT 23
20597: PUSH
20598: LD_INT 24
20600: PUSH
20601: LD_INT 25
20603: PUSH
20604: LD_INT 26
20606: PUSH
20607: LD_INT 27
20609: PUSH
20610: LD_INT 28
20612: PUSH
20613: LD_INT 30
20615: PUSH
20616: LD_INT 31
20618: PUSH
20619: LD_INT 32
20621: PUSH
20622: LD_INT 33
20624: PUSH
20625: LD_INT 34
20627: PUSH
20628: LD_INT 36
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 102
20669: PUSH
20670: LD_INT 103
20672: PUSH
20673: LD_INT 104
20675: PUSH
20676: LD_INT 105
20678: PUSH
20679: LD_INT 106
20681: PUSH
20682: LD_INT 107
20684: PUSH
20685: LD_INT 108
20687: PUSH
20688: LD_INT 109
20690: PUSH
20691: LD_INT 110
20693: PUSH
20694: LD_INT 111
20696: PUSH
20697: LD_INT 112
20699: PUSH
20700: LD_INT 113
20702: PUSH
20703: LD_INT 114
20705: PUSH
20706: LD_INT 116
20708: PUSH
20709: LD_INT 117
20711: PUSH
20712: LD_INT 118
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 21977
20740: LD_INT 14
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20972
20748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20749: LD_ADDR_VAR 0 2
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 3
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: LD_INT 6
20771: PUSH
20772: LD_INT 7
20774: PUSH
20775: LD_INT 8
20777: PUSH
20778: LD_INT 9
20780: PUSH
20781: LD_INT 10
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: LD_INT 15
20798: PUSH
20799: LD_INT 16
20801: PUSH
20802: LD_INT 17
20804: PUSH
20805: LD_INT 18
20807: PUSH
20808: LD_INT 19
20810: PUSH
20811: LD_INT 20
20813: PUSH
20814: LD_INT 21
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_INT 23
20822: PUSH
20823: LD_INT 24
20825: PUSH
20826: LD_INT 25
20828: PUSH
20829: LD_INT 26
20831: PUSH
20832: LD_INT 27
20834: PUSH
20835: LD_INT 28
20837: PUSH
20838: LD_INT 29
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 31
20846: PUSH
20847: LD_INT 32
20849: PUSH
20850: LD_INT 33
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 36
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 101
20898: PUSH
20899: LD_INT 102
20901: PUSH
20902: LD_INT 103
20904: PUSH
20905: LD_INT 104
20907: PUSH
20908: LD_INT 105
20910: PUSH
20911: LD_INT 106
20913: PUSH
20914: LD_INT 107
20916: PUSH
20917: LD_INT 108
20919: PUSH
20920: LD_INT 109
20922: PUSH
20923: LD_INT 110
20925: PUSH
20926: LD_INT 111
20928: PUSH
20929: LD_INT 112
20931: PUSH
20932: LD_INT 113
20934: PUSH
20935: LD_INT 114
20937: PUSH
20938: LD_INT 116
20940: PUSH
20941: LD_INT 117
20943: PUSH
20944: LD_INT 118
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: ST_TO_ADDR
20970: GO 21977
20972: LD_INT 15
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 21204
20980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20981: LD_ADDR_VAR 0 2
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 3
20994: PUSH
20995: LD_INT 4
20997: PUSH
20998: LD_INT 5
21000: PUSH
21001: LD_INT 6
21003: PUSH
21004: LD_INT 7
21006: PUSH
21007: LD_INT 8
21009: PUSH
21010: LD_INT 9
21012: PUSH
21013: LD_INT 10
21015: PUSH
21016: LD_INT 11
21018: PUSH
21019: LD_INT 12
21021: PUSH
21022: LD_INT 13
21024: PUSH
21025: LD_INT 14
21027: PUSH
21028: LD_INT 15
21030: PUSH
21031: LD_INT 16
21033: PUSH
21034: LD_INT 17
21036: PUSH
21037: LD_INT 18
21039: PUSH
21040: LD_INT 19
21042: PUSH
21043: LD_INT 20
21045: PUSH
21046: LD_INT 21
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 24
21057: PUSH
21058: LD_INT 25
21060: PUSH
21061: LD_INT 26
21063: PUSH
21064: LD_INT 27
21066: PUSH
21067: LD_INT 28
21069: PUSH
21070: LD_INT 29
21072: PUSH
21073: LD_INT 30
21075: PUSH
21076: LD_INT 31
21078: PUSH
21079: LD_INT 32
21081: PUSH
21082: LD_INT 33
21084: PUSH
21085: LD_INT 34
21087: PUSH
21088: LD_INT 36
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 103
21136: PUSH
21137: LD_INT 104
21139: PUSH
21140: LD_INT 105
21142: PUSH
21143: LD_INT 106
21145: PUSH
21146: LD_INT 107
21148: PUSH
21149: LD_INT 108
21151: PUSH
21152: LD_INT 109
21154: PUSH
21155: LD_INT 110
21157: PUSH
21158: LD_INT 111
21160: PUSH
21161: LD_INT 112
21163: PUSH
21164: LD_INT 113
21166: PUSH
21167: LD_INT 114
21169: PUSH
21170: LD_INT 116
21172: PUSH
21173: LD_INT 117
21175: PUSH
21176: LD_INT 118
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: ST_TO_ADDR
21202: GO 21977
21204: LD_INT 16
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21348
21212: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 4
21223: PUSH
21224: LD_INT 5
21226: PUSH
21227: LD_INT 7
21229: PUSH
21230: LD_INT 11
21232: PUSH
21233: LD_INT 12
21235: PUSH
21236: LD_INT 15
21238: PUSH
21239: LD_INT 16
21241: PUSH
21242: LD_INT 20
21244: PUSH
21245: LD_INT 21
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 25
21256: PUSH
21257: LD_INT 26
21259: PUSH
21260: LD_INT 30
21262: PUSH
21263: LD_INT 31
21265: PUSH
21266: LD_INT 32
21268: PUSH
21269: LD_INT 33
21271: PUSH
21272: LD_INT 34
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 101
21298: PUSH
21299: LD_INT 102
21301: PUSH
21302: LD_INT 103
21304: PUSH
21305: LD_INT 106
21307: PUSH
21308: LD_INT 108
21310: PUSH
21311: LD_INT 112
21313: PUSH
21314: LD_INT 113
21316: PUSH
21317: LD_INT 114
21319: PUSH
21320: LD_INT 116
21322: PUSH
21323: LD_INT 117
21325: PUSH
21326: LD_INT 118
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: ST_TO_ADDR
21346: GO 21977
21348: LD_INT 17
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21580
21356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 4
21373: PUSH
21374: LD_INT 5
21376: PUSH
21377: LD_INT 6
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: LD_INT 8
21385: PUSH
21386: LD_INT 9
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 11
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 14
21403: PUSH
21404: LD_INT 15
21406: PUSH
21407: LD_INT 16
21409: PUSH
21410: LD_INT 17
21412: PUSH
21413: LD_INT 18
21415: PUSH
21416: LD_INT 19
21418: PUSH
21419: LD_INT 20
21421: PUSH
21422: LD_INT 21
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_INT 23
21430: PUSH
21431: LD_INT 24
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 27
21442: PUSH
21443: LD_INT 28
21445: PUSH
21446: LD_INT 29
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 31
21454: PUSH
21455: LD_INT 32
21457: PUSH
21458: LD_INT 33
21460: PUSH
21461: LD_INT 34
21463: PUSH
21464: LD_INT 36
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 101
21506: PUSH
21507: LD_INT 102
21509: PUSH
21510: LD_INT 103
21512: PUSH
21513: LD_INT 104
21515: PUSH
21516: LD_INT 105
21518: PUSH
21519: LD_INT 106
21521: PUSH
21522: LD_INT 107
21524: PUSH
21525: LD_INT 108
21527: PUSH
21528: LD_INT 109
21530: PUSH
21531: LD_INT 110
21533: PUSH
21534: LD_INT 111
21536: PUSH
21537: LD_INT 112
21539: PUSH
21540: LD_INT 113
21542: PUSH
21543: LD_INT 114
21545: PUSH
21546: LD_INT 116
21548: PUSH
21549: LD_INT 117
21551: PUSH
21552: LD_INT 118
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: ST_TO_ADDR
21578: GO 21977
21580: LD_INT 18
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21736
21588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 5
21602: PUSH
21603: LD_INT 7
21605: PUSH
21606: LD_INT 11
21608: PUSH
21609: LD_INT 12
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 16
21617: PUSH
21618: LD_INT 20
21620: PUSH
21621: LD_INT 21
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_INT 23
21629: PUSH
21630: LD_INT 25
21632: PUSH
21633: LD_INT 26
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: LD_INT 31
21641: PUSH
21642: LD_INT 32
21644: PUSH
21645: LD_INT 33
21647: PUSH
21648: LD_INT 34
21650: PUSH
21651: LD_INT 35
21653: PUSH
21654: LD_INT 36
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 101
21682: PUSH
21683: LD_INT 102
21685: PUSH
21686: LD_INT 103
21688: PUSH
21689: LD_INT 106
21691: PUSH
21692: LD_INT 108
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: LD_INT 115
21706: PUSH
21707: LD_INT 116
21709: PUSH
21710: LD_INT 117
21712: PUSH
21713: LD_INT 118
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
21734: GO 21977
21736: LD_INT 19
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21976
21744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 9
21776: PUSH
21777: LD_INT 10
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 13
21788: PUSH
21789: LD_INT 14
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 18
21803: PUSH
21804: LD_INT 19
21806: PUSH
21807: LD_INT 20
21809: PUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 23
21818: PUSH
21819: LD_INT 24
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 26
21827: PUSH
21828: LD_INT 27
21830: PUSH
21831: LD_INT 28
21833: PUSH
21834: LD_INT 29
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 31
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: LD_INT 34
21851: PUSH
21852: LD_INT 35
21854: PUSH
21855: LD_INT 36
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 101
21898: PUSH
21899: LD_INT 102
21901: PUSH
21902: LD_INT 103
21904: PUSH
21905: LD_INT 104
21907: PUSH
21908: LD_INT 105
21910: PUSH
21911: LD_INT 106
21913: PUSH
21914: LD_INT 107
21916: PUSH
21917: LD_INT 108
21919: PUSH
21920: LD_INT 109
21922: PUSH
21923: LD_INT 110
21925: PUSH
21926: LD_INT 111
21928: PUSH
21929: LD_INT 112
21931: PUSH
21932: LD_INT 113
21934: PUSH
21935: LD_INT 114
21937: PUSH
21938: LD_INT 115
21940: PUSH
21941: LD_INT 116
21943: PUSH
21944: LD_INT 117
21946: PUSH
21947: LD_INT 118
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: ST_TO_ADDR
21974: GO 21977
21976: POP
// end else
21977: GO 22208
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21979: LD_ADDR_VAR 0 2
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: LD_INT 4
21995: PUSH
21996: LD_INT 5
21998: PUSH
21999: LD_INT 6
22001: PUSH
22002: LD_INT 7
22004: PUSH
22005: LD_INT 8
22007: PUSH
22008: LD_INT 9
22010: PUSH
22011: LD_INT 10
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 13
22022: PUSH
22023: LD_INT 14
22025: PUSH
22026: LD_INT 15
22028: PUSH
22029: LD_INT 16
22031: PUSH
22032: LD_INT 17
22034: PUSH
22035: LD_INT 18
22037: PUSH
22038: LD_INT 19
22040: PUSH
22041: LD_INT 20
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_INT 23
22052: PUSH
22053: LD_INT 24
22055: PUSH
22056: LD_INT 25
22058: PUSH
22059: LD_INT 26
22061: PUSH
22062: LD_INT 27
22064: PUSH
22065: LD_INT 28
22067: PUSH
22068: LD_INT 29
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 31
22076: PUSH
22077: LD_INT 32
22079: PUSH
22080: LD_INT 33
22082: PUSH
22083: LD_INT 34
22085: PUSH
22086: LD_INT 35
22088: PUSH
22089: LD_INT 36
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 101
22132: PUSH
22133: LD_INT 102
22135: PUSH
22136: LD_INT 103
22138: PUSH
22139: LD_INT 104
22141: PUSH
22142: LD_INT 105
22144: PUSH
22145: LD_INT 106
22147: PUSH
22148: LD_INT 107
22150: PUSH
22151: LD_INT 108
22153: PUSH
22154: LD_INT 109
22156: PUSH
22157: LD_INT 110
22159: PUSH
22160: LD_INT 111
22162: PUSH
22163: LD_INT 112
22165: PUSH
22166: LD_INT 113
22168: PUSH
22169: LD_INT 114
22171: PUSH
22172: LD_INT 115
22174: PUSH
22175: LD_INT 116
22177: PUSH
22178: LD_INT 117
22180: PUSH
22181: LD_INT 118
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: ST_TO_ADDR
// if result then
22208: LD_VAR 0 2
22212: IFFALSE 22998
// begin normal :=  ;
22214: LD_ADDR_VAR 0 5
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hardcore :=  ;
22222: LD_ADDR_VAR 0 6
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// active :=  ;
22230: LD_ADDR_VAR 0 7
22234: PUSH
22235: LD_STRING 
22237: ST_TO_ADDR
// for i = 1 to normalCounter do
22238: LD_ADDR_VAR 0 8
22242: PUSH
22243: DOUBLE
22244: LD_INT 1
22246: DEC
22247: ST_TO_ADDR
22248: LD_EXP 39
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22355
// begin tmp := 0 ;
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: LD_STRING 0
22263: ST_TO_ADDR
// if result [ 1 ] then
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: IFFALSE 22337
// if result [ 1 ] [ 1 ] = i then
22274: LD_VAR 0 2
22278: PUSH
22279: LD_INT 1
22281: ARRAY
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 8
22291: EQUAL
22292: IFFALSE 22337
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22294: LD_ADDR_VAR 0 2
22298: PUSH
22299: LD_VAR 0 2
22303: PPUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: LD_INT 1
22318: PPUSH
22319: CALL_OW 3
22323: PPUSH
22324: CALL_OW 1
22328: ST_TO_ADDR
// tmp := 1 ;
22329: LD_ADDR_VAR 0 3
22333: PUSH
22334: LD_STRING 1
22336: ST_TO_ADDR
// end ; normal := normal & tmp ;
22337: LD_ADDR_VAR 0 5
22341: PUSH
22342: LD_VAR 0 5
22346: PUSH
22347: LD_VAR 0 3
22351: STR
22352: ST_TO_ADDR
// end ;
22353: GO 22253
22355: POP
22356: POP
// for i = 1 to hardcoreCounter do
22357: LD_ADDR_VAR 0 8
22361: PUSH
22362: DOUBLE
22363: LD_INT 1
22365: DEC
22366: ST_TO_ADDR
22367: LD_EXP 40
22371: PUSH
22372: FOR_TO
22373: IFFALSE 22478
// begin tmp := 0 ;
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_STRING 0
22382: ST_TO_ADDR
// if result [ 2 ] then
22383: LD_VAR 0 2
22387: PUSH
22388: LD_INT 2
22390: ARRAY
22391: IFFALSE 22460
// if result [ 2 ] [ 1 ] = 100 + i then
22393: LD_VAR 0 2
22397: PUSH
22398: LD_INT 2
22400: ARRAY
22401: PUSH
22402: LD_INT 1
22404: ARRAY
22405: PUSH
22406: LD_INT 100
22408: PUSH
22409: LD_VAR 0 8
22413: PLUS
22414: EQUAL
22415: IFFALSE 22460
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22417: LD_ADDR_VAR 0 2
22421: PUSH
22422: LD_VAR 0 2
22426: PPUSH
22427: LD_INT 2
22429: PPUSH
22430: LD_VAR 0 2
22434: PUSH
22435: LD_INT 2
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 3
22446: PPUSH
22447: CALL_OW 1
22451: ST_TO_ADDR
// tmp := 1 ;
22452: LD_ADDR_VAR 0 3
22456: PUSH
22457: LD_STRING 1
22459: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22460: LD_ADDR_VAR 0 6
22464: PUSH
22465: LD_VAR 0 6
22469: PUSH
22470: LD_VAR 0 3
22474: STR
22475: ST_TO_ADDR
// end ;
22476: GO 22372
22478: POP
22479: POP
// if isGameLoad then
22480: LD_VAR 0 1
22484: IFFALSE 22959
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22486: LD_ADDR_VAR 0 4
22490: PUSH
22491: LD_EXP 43
22495: PUSH
22496: LD_EXP 42
22500: PUSH
22501: LD_EXP 44
22505: PUSH
22506: LD_EXP 41
22510: PUSH
22511: LD_EXP 45
22515: PUSH
22516: LD_EXP 46
22520: PUSH
22521: LD_EXP 47
22525: PUSH
22526: LD_EXP 48
22530: PUSH
22531: LD_EXP 49
22535: PUSH
22536: LD_EXP 50
22540: PUSH
22541: LD_EXP 51
22545: PUSH
22546: LD_EXP 52
22550: PUSH
22551: LD_EXP 53
22555: PUSH
22556: LD_EXP 54
22560: PUSH
22561: LD_EXP 62
22565: PUSH
22566: LD_EXP 63
22570: PUSH
22571: LD_EXP 64
22575: PUSH
22576: LD_EXP 65
22580: PUSH
22581: LD_EXP 67
22585: PUSH
22586: LD_EXP 68
22590: PUSH
22591: LD_EXP 69
22595: PUSH
22596: LD_EXP 72
22600: PUSH
22601: LD_EXP 74
22605: PUSH
22606: LD_EXP 75
22610: PUSH
22611: LD_EXP 76
22615: PUSH
22616: LD_EXP 78
22620: PUSH
22621: LD_EXP 79
22625: PUSH
22626: LD_EXP 82
22630: PUSH
22631: LD_EXP 83
22635: PUSH
22636: LD_EXP 84
22640: PUSH
22641: LD_EXP 85
22645: PUSH
22646: LD_EXP 86
22650: PUSH
22651: LD_EXP 87
22655: PUSH
22656: LD_EXP 88
22660: PUSH
22661: LD_EXP 89
22665: PUSH
22666: LD_EXP 90
22670: PUSH
22671: LD_EXP 55
22675: PUSH
22676: LD_EXP 56
22680: PUSH
22681: LD_EXP 59
22685: PUSH
22686: LD_EXP 60
22690: PUSH
22691: LD_EXP 61
22695: PUSH
22696: LD_EXP 57
22700: PUSH
22701: LD_EXP 58
22705: PUSH
22706: LD_EXP 66
22710: PUSH
22711: LD_EXP 70
22715: PUSH
22716: LD_EXP 71
22720: PUSH
22721: LD_EXP 73
22725: PUSH
22726: LD_EXP 77
22730: PUSH
22731: LD_EXP 80
22735: PUSH
22736: LD_EXP 81
22740: PUSH
22741: LD_EXP 91
22745: PUSH
22746: LD_EXP 92
22750: PUSH
22751: LD_EXP 93
22755: PUSH
22756: LD_EXP 94
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// tmp :=  ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_STRING 
22824: ST_TO_ADDR
// for i = 1 to normalCounter do
22825: LD_ADDR_VAR 0 8
22829: PUSH
22830: DOUBLE
22831: LD_INT 1
22833: DEC
22834: ST_TO_ADDR
22835: LD_EXP 39
22839: PUSH
22840: FOR_TO
22841: IFFALSE 22877
// begin if flags [ i ] then
22843: LD_VAR 0 4
22847: PUSH
22848: LD_VAR 0 8
22852: ARRAY
22853: IFFALSE 22875
// tmp := tmp & i & ; ;
22855: LD_ADDR_VAR 0 3
22859: PUSH
22860: LD_VAR 0 3
22864: PUSH
22865: LD_VAR 0 8
22869: STR
22870: PUSH
22871: LD_STRING ;
22873: STR
22874: ST_TO_ADDR
// end ;
22875: GO 22840
22877: POP
22878: POP
// for i = 1 to hardcoreCounter do
22879: LD_ADDR_VAR 0 8
22883: PUSH
22884: DOUBLE
22885: LD_INT 1
22887: DEC
22888: ST_TO_ADDR
22889: LD_EXP 40
22893: PUSH
22894: FOR_TO
22895: IFFALSE 22941
// begin if flags [ normalCounter + i ] then
22897: LD_VAR 0 4
22901: PUSH
22902: LD_EXP 39
22906: PUSH
22907: LD_VAR 0 8
22911: PLUS
22912: ARRAY
22913: IFFALSE 22939
// tmp := tmp & ( 100 + i ) & ; ;
22915: LD_ADDR_VAR 0 3
22919: PUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 100
22927: PUSH
22928: LD_VAR 0 8
22932: PLUS
22933: STR
22934: PUSH
22935: LD_STRING ;
22937: STR
22938: ST_TO_ADDR
// end ;
22939: GO 22894
22941: POP
22942: POP
// if tmp then
22943: LD_VAR 0 3
22947: IFFALSE 22959
// active := tmp ;
22949: LD_ADDR_VAR 0 7
22953: PUSH
22954: LD_VAR 0 3
22958: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22959: LD_STRING getStreamItemsFromMission("
22961: PUSH
22962: LD_VAR 0 5
22966: STR
22967: PUSH
22968: LD_STRING ","
22970: STR
22971: PUSH
22972: LD_VAR 0 6
22976: STR
22977: PUSH
22978: LD_STRING ","
22980: STR
22981: PUSH
22982: LD_VAR 0 7
22986: STR
22987: PUSH
22988: LD_STRING ")
22990: STR
22991: PPUSH
22992: CALL_OW 559
// end else
22996: GO 23005
// ToLua ( getStreamItemsFromMission("","","") ) ;
22998: LD_STRING getStreamItemsFromMission("","","")
23000: PPUSH
23001: CALL_OW 559
// end ;
23005: LD_VAR 0 2
23009: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23010: LD_EXP 38
23014: PUSH
23015: LD_EXP 43
23019: AND
23020: IFFALSE 23144
23022: GO 23024
23024: DISABLE
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
// begin enable ;
23029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 22
23037: PUSH
23038: LD_OWVAR 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 34
23052: PUSH
23053: LD_INT 7
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 45
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: LD_INT 28
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 47
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23144
// for i in tmp do
23115: LD_ADDR_VAR 0 1
23119: PUSH
23120: LD_VAR 0 2
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23142
// begin SetLives ( i , 0 ) ;
23128: LD_VAR 0 1
23132: PPUSH
23133: LD_INT 0
23135: PPUSH
23136: CALL_OW 234
// end ;
23140: GO 23125
23142: POP
23143: POP
// end ;
23144: PPOPN 2
23146: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23147: LD_EXP 38
23151: PUSH
23152: LD_EXP 44
23156: AND
23157: IFFALSE 23241
23159: GO 23161
23161: DISABLE
23162: LD_INT 0
23164: PPUSH
23165: PPUSH
// begin enable ;
23166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 32
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 2
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23241
// for i in tmp do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: LD_VAR 0 2
23221: PUSH
23222: FOR_IN
23223: IFFALSE 23239
// begin SetLives ( i , 0 ) ;
23225: LD_VAR 0 1
23229: PPUSH
23230: LD_INT 0
23232: PPUSH
23233: CALL_OW 234
// end ;
23237: GO 23222
23239: POP
23240: POP
// end ;
23241: PPOPN 2
23243: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23244: LD_EXP 38
23248: PUSH
23249: LD_EXP 41
23253: AND
23254: IFFALSE 23347
23256: GO 23258
23258: DISABLE
23259: LD_INT 0
23261: PPUSH
// begin enable ;
23262: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23263: LD_ADDR_VAR 0 1
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_OWVAR 2
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 25
23285: PUSH
23286: LD_INT 5
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 25
23295: PUSH
23296: LD_INT 9
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 25
23305: PUSH
23306: LD_INT 8
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: PUSH
23328: FOR_IN
23329: IFFALSE 23345
// begin SetClass ( i , 1 ) ;
23331: LD_VAR 0 1
23335: PPUSH
23336: LD_INT 1
23338: PPUSH
23339: CALL_OW 336
// end ;
23343: GO 23328
23345: POP
23346: POP
// end ;
23347: PPOPN 1
23349: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23350: LD_EXP 38
23354: PUSH
23355: LD_EXP 42
23359: AND
23360: PUSH
23361: LD_OWVAR 65
23365: PUSH
23366: LD_INT 7
23368: LESS
23369: AND
23370: IFFALSE 23384
23372: GO 23374
23374: DISABLE
// begin enable ;
23375: ENABLE
// game_speed := 7 ;
23376: LD_ADDR_OWVAR 65
23380: PUSH
23381: LD_INT 7
23383: ST_TO_ADDR
// end ;
23384: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23385: LD_EXP 38
23389: PUSH
23390: LD_EXP 45
23394: AND
23395: IFFALSE 23597
23397: GO 23399
23399: DISABLE
23400: LD_INT 0
23402: PPUSH
23403: PPUSH
23404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_INT 81
23412: PUSH
23413: LD_OWVAR 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 69
23440: ST_TO_ADDR
// if not tmp then
23441: LD_VAR 0 3
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23597
// if tmp > 5 then
23450: LD_VAR 0 3
23454: PUSH
23455: LD_INT 5
23457: GREATER
23458: IFFALSE 23470
// k := 5 else
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: LD_INT 5
23467: ST_TO_ADDR
23468: GO 23480
// k := tmp ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_VAR 0 3
23479: ST_TO_ADDR
// for i := 1 to k do
23480: LD_ADDR_VAR 0 1
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_VAR 0 2
23494: PUSH
23495: FOR_TO
23496: IFFALSE 23595
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23498: LD_VAR 0 3
23502: PUSH
23503: LD_VAR 0 1
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 1
23513: PUSH
23514: LD_INT 4
23516: MOD
23517: PUSH
23518: LD_INT 1
23520: PLUS
23521: PPUSH
23522: CALL_OW 259
23526: PUSH
23527: LD_INT 10
23529: LESS
23530: IFFALSE 23593
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 1
23541: ARRAY
23542: PPUSH
23543: LD_VAR 0 1
23547: PUSH
23548: LD_INT 4
23550: MOD
23551: PUSH
23552: LD_INT 1
23554: PLUS
23555: PPUSH
23556: LD_VAR 0 3
23560: PUSH
23561: LD_VAR 0 1
23565: ARRAY
23566: PPUSH
23567: LD_VAR 0 1
23571: PUSH
23572: LD_INT 4
23574: MOD
23575: PUSH
23576: LD_INT 1
23578: PLUS
23579: PPUSH
23580: CALL_OW 259
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: PPUSH
23589: CALL_OW 237
23593: GO 23495
23595: POP
23596: POP
// end ;
23597: PPOPN 3
23599: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23600: LD_EXP 38
23604: PUSH
23605: LD_EXP 46
23609: AND
23610: IFFALSE 23630
23612: GO 23614
23614: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23615: LD_INT 4
23617: PPUSH
23618: LD_OWVAR 2
23622: PPUSH
23623: LD_INT 0
23625: PPUSH
23626: CALL_OW 324
23630: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23631: LD_EXP 38
23635: PUSH
23636: LD_EXP 75
23640: AND
23641: IFFALSE 23661
23643: GO 23645
23645: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23646: LD_INT 19
23648: PPUSH
23649: LD_OWVAR 2
23653: PPUSH
23654: LD_INT 0
23656: PPUSH
23657: CALL_OW 324
23661: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23662: LD_EXP 38
23666: PUSH
23667: LD_EXP 47
23671: AND
23672: IFFALSE 23774
23674: GO 23676
23676: DISABLE
23677: LD_INT 0
23679: PPUSH
23680: PPUSH
// begin enable ;
23681: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23682: LD_ADDR_VAR 0 2
23686: PUSH
23687: LD_INT 22
23689: PUSH
23690: LD_OWVAR 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 34
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 34
23714: PUSH
23715: LD_INT 30
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PPUSH
23731: CALL_OW 69
23735: ST_TO_ADDR
// if not tmp then
23736: LD_VAR 0 2
23740: NOT
23741: IFFALSE 23745
// exit ;
23743: GO 23774
// for i in tmp do
23745: LD_ADDR_VAR 0 1
23749: PUSH
23750: LD_VAR 0 2
23754: PUSH
23755: FOR_IN
23756: IFFALSE 23772
// begin SetLives ( i , 0 ) ;
23758: LD_VAR 0 1
23762: PPUSH
23763: LD_INT 0
23765: PPUSH
23766: CALL_OW 234
// end ;
23770: GO 23755
23772: POP
23773: POP
// end ;
23774: PPOPN 2
23776: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23777: LD_EXP 38
23781: PUSH
23782: LD_EXP 48
23786: AND
23787: IFFALSE 23807
23789: GO 23791
23791: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23792: LD_INT 32
23794: PPUSH
23795: LD_OWVAR 2
23799: PPUSH
23800: LD_INT 0
23802: PPUSH
23803: CALL_OW 324
23807: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23808: LD_EXP 38
23812: PUSH
23813: LD_EXP 49
23817: AND
23818: IFFALSE 23999
23820: GO 23822
23822: DISABLE
23823: LD_INT 0
23825: PPUSH
23826: PPUSH
23827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23828: LD_ADDR_VAR 0 2
23832: PUSH
23833: LD_INT 22
23835: PUSH
23836: LD_OWVAR 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 33
23847: PUSH
23848: LD_INT 3
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 69
23863: ST_TO_ADDR
// if not tmp then
23864: LD_VAR 0 2
23868: NOT
23869: IFFALSE 23873
// exit ;
23871: GO 23999
// side := 0 ;
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 0
23880: ST_TO_ADDR
// for i := 1 to 8 do
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: DOUBLE
23887: LD_INT 1
23889: DEC
23890: ST_TO_ADDR
23891: LD_INT 8
23893: PUSH
23894: FOR_TO
23895: IFFALSE 23943
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23897: LD_OWVAR 2
23901: PUSH
23902: LD_VAR 0 1
23906: NONEQUAL
23907: PUSH
23908: LD_OWVAR 2
23912: PPUSH
23913: LD_VAR 0 1
23917: PPUSH
23918: CALL_OW 81
23922: PUSH
23923: LD_INT 2
23925: EQUAL
23926: AND
23927: IFFALSE 23941
// begin side := i ;
23929: LD_ADDR_VAR 0 3
23933: PUSH
23934: LD_VAR 0 1
23938: ST_TO_ADDR
// break ;
23939: GO 23943
// end ;
23941: GO 23894
23943: POP
23944: POP
// if not side then
23945: LD_VAR 0 3
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 23999
// for i := 1 to tmp do
23954: LD_ADDR_VAR 0 1
23958: PUSH
23959: DOUBLE
23960: LD_INT 1
23962: DEC
23963: ST_TO_ADDR
23964: LD_VAR 0 2
23968: PUSH
23969: FOR_TO
23970: IFFALSE 23997
// if Prob ( 60 ) then
23972: LD_INT 60
23974: PPUSH
23975: CALL_OW 13
23979: IFFALSE 23995
// SetSide ( i , side ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: LD_VAR 0 3
23990: PPUSH
23991: CALL_OW 235
23995: GO 23969
23997: POP
23998: POP
// end ;
23999: PPOPN 3
24001: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24002: LD_EXP 38
24006: PUSH
24007: LD_EXP 51
24011: AND
24012: IFFALSE 24131
24014: GO 24016
24016: DISABLE
24017: LD_INT 0
24019: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24020: LD_ADDR_VAR 0 1
24024: PUSH
24025: LD_INT 22
24027: PUSH
24028: LD_OWVAR 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 21
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 23
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 69
24073: PUSH
24074: FOR_IN
24075: IFFALSE 24129
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24077: LD_VAR 0 1
24081: PPUSH
24082: CALL_OW 257
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 4
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: IN
24105: IFFALSE 24127
// SetClass ( un , rand ( 1 , 4 ) ) ;
24107: LD_VAR 0 1
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: LD_INT 4
24117: PPUSH
24118: CALL_OW 12
24122: PPUSH
24123: CALL_OW 336
24127: GO 24074
24129: POP
24130: POP
// end ;
24131: PPOPN 1
24133: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24134: LD_EXP 38
24138: PUSH
24139: LD_EXP 50
24143: AND
24144: IFFALSE 24223
24146: GO 24148
24148: DISABLE
24149: LD_INT 0
24151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24152: LD_ADDR_VAR 0 1
24156: PUSH
24157: LD_INT 22
24159: PUSH
24160: LD_OWVAR 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 21
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 69
24187: ST_TO_ADDR
// if not tmp then
24188: LD_VAR 0 1
24192: NOT
24193: IFFALSE 24197
// exit ;
24195: GO 24223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24197: LD_VAR 0 1
24201: PUSH
24202: LD_INT 1
24204: PPUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 12
24214: ARRAY
24215: PPUSH
24216: LD_INT 100
24218: PPUSH
24219: CALL_OW 234
// end ;
24223: PPOPN 1
24225: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24226: LD_EXP 38
24230: PUSH
24231: LD_EXP 52
24235: AND
24236: IFFALSE 24334
24238: GO 24240
24240: DISABLE
24241: LD_INT 0
24243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_OWVAR 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 21
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 69
24279: ST_TO_ADDR
// if not tmp then
24280: LD_VAR 0 1
24284: NOT
24285: IFFALSE 24289
// exit ;
24287: GO 24334
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24289: LD_VAR 0 1
24293: PUSH
24294: LD_INT 1
24296: PPUSH
24297: LD_VAR 0 1
24301: PPUSH
24302: CALL_OW 12
24306: ARRAY
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: LD_INT 4
24313: PPUSH
24314: CALL_OW 12
24318: PPUSH
24319: LD_INT 3000
24321: PPUSH
24322: LD_INT 9000
24324: PPUSH
24325: CALL_OW 12
24329: PPUSH
24330: CALL_OW 492
// end ;
24334: PPOPN 1
24336: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24337: LD_EXP 38
24341: PUSH
24342: LD_EXP 53
24346: AND
24347: IFFALSE 24367
24349: GO 24351
24351: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24352: LD_INT 1
24354: PPUSH
24355: LD_OWVAR 2
24359: PPUSH
24360: LD_INT 0
24362: PPUSH
24363: CALL_OW 324
24367: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24368: LD_EXP 38
24372: PUSH
24373: LD_EXP 54
24377: AND
24378: IFFALSE 24461
24380: GO 24382
24382: DISABLE
24383: LD_INT 0
24385: PPUSH
24386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24387: LD_ADDR_VAR 0 2
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 21
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: ST_TO_ADDR
// if not tmp then
24423: LD_VAR 0 2
24427: NOT
24428: IFFALSE 24432
// exit ;
24430: GO 24461
// for i in tmp do
24432: LD_ADDR_VAR 0 1
24436: PUSH
24437: LD_VAR 0 2
24441: PUSH
24442: FOR_IN
24443: IFFALSE 24459
// SetBLevel ( i , 10 ) ;
24445: LD_VAR 0 1
24449: PPUSH
24450: LD_INT 10
24452: PPUSH
24453: CALL_OW 241
24457: GO 24442
24459: POP
24460: POP
// end ;
24461: PPOPN 2
24463: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24464: LD_EXP 38
24468: PUSH
24469: LD_EXP 55
24473: AND
24474: IFFALSE 24585
24476: GO 24478
24478: DISABLE
24479: LD_INT 0
24481: PPUSH
24482: PPUSH
24483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 22
24491: PUSH
24492: LD_OWVAR 2
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 25
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PPUSH
24515: CALL_OW 69
24519: ST_TO_ADDR
// if not tmp then
24520: LD_VAR 0 3
24524: NOT
24525: IFFALSE 24529
// exit ;
24527: GO 24585
// un := tmp [ rand ( 1 , tmp ) ] ;
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_VAR 0 3
24538: PUSH
24539: LD_INT 1
24541: PPUSH
24542: LD_VAR 0 3
24546: PPUSH
24547: CALL_OW 12
24551: ARRAY
24552: ST_TO_ADDR
// if Crawls ( un ) then
24553: LD_VAR 0 2
24557: PPUSH
24558: CALL_OW 318
24562: IFFALSE 24573
// ComWalk ( un ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24573: LD_VAR 0 2
24577: PPUSH
24578: LD_INT 5
24580: PPUSH
24581: CALL_OW 336
// end ;
24585: PPOPN 3
24587: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24588: LD_EXP 38
24592: PUSH
24593: LD_EXP 56
24597: AND
24598: PUSH
24599: LD_OWVAR 67
24603: PUSH
24604: LD_INT 4
24606: LESS
24607: AND
24608: IFFALSE 24627
24610: GO 24612
24612: DISABLE
// begin Difficulty := Difficulty + 1 ;
24613: LD_ADDR_OWVAR 67
24617: PUSH
24618: LD_OWVAR 67
24622: PUSH
24623: LD_INT 1
24625: PLUS
24626: ST_TO_ADDR
// end ;
24627: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24628: LD_EXP 38
24632: PUSH
24633: LD_EXP 57
24637: AND
24638: IFFALSE 24741
24640: GO 24642
24642: DISABLE
24643: LD_INT 0
24645: PPUSH
// begin for i := 1 to 5 do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_INT 5
24658: PUSH
24659: FOR_TO
24660: IFFALSE 24739
// begin uc_nation := nation_nature ;
24662: LD_ADDR_OWVAR 21
24666: PUSH
24667: LD_INT 0
24669: ST_TO_ADDR
// uc_side := 0 ;
24670: LD_ADDR_OWVAR 20
24674: PUSH
24675: LD_INT 0
24677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24678: LD_ADDR_OWVAR 29
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: LD_INT 12
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: ST_TO_ADDR
// hc_agressivity := 20 ;
24693: LD_ADDR_OWVAR 35
24697: PUSH
24698: LD_INT 20
24700: ST_TO_ADDR
// hc_class := class_tiger ;
24701: LD_ADDR_OWVAR 28
24705: PUSH
24706: LD_INT 14
24708: ST_TO_ADDR
// hc_gallery :=  ;
24709: LD_ADDR_OWVAR 33
24713: PUSH
24714: LD_STRING 
24716: ST_TO_ADDR
// hc_name :=  ;
24717: LD_ADDR_OWVAR 26
24721: PUSH
24722: LD_STRING 
24724: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24725: CALL_OW 44
24729: PPUSH
24730: LD_INT 0
24732: PPUSH
24733: CALL_OW 51
// end ;
24737: GO 24659
24739: POP
24740: POP
// end ;
24741: PPOPN 1
24743: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24744: LD_EXP 38
24748: PUSH
24749: LD_EXP 58
24753: AND
24754: IFFALSE 24763
24756: GO 24758
24758: DISABLE
// StreamSibBomb ;
24759: CALL 24764 0 0
24763: END
// export function StreamSibBomb ; var i , x , y ; begin
24764: LD_INT 0
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
// result := false ;
24770: LD_ADDR_VAR 0 1
24774: PUSH
24775: LD_INT 0
24777: ST_TO_ADDR
// for i := 1 to 16 do
24778: LD_ADDR_VAR 0 2
24782: PUSH
24783: DOUBLE
24784: LD_INT 1
24786: DEC
24787: ST_TO_ADDR
24788: LD_INT 16
24790: PUSH
24791: FOR_TO
24792: IFFALSE 24991
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 10
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 40
24810: PUSH
24811: LD_INT 50
24813: PUSH
24814: LD_INT 60
24816: PUSH
24817: LD_INT 70
24819: PUSH
24820: LD_INT 80
24822: PUSH
24823: LD_INT 90
24825: PUSH
24826: LD_INT 100
24828: PUSH
24829: LD_INT 110
24831: PUSH
24832: LD_INT 120
24834: PUSH
24835: LD_INT 130
24837: PUSH
24838: LD_INT 140
24840: PUSH
24841: LD_INT 150
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: PPUSH
24864: LD_INT 15
24866: PPUSH
24867: CALL_OW 12
24871: ARRAY
24872: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24873: LD_ADDR_VAR 0 4
24877: PUSH
24878: LD_INT 10
24880: PUSH
24881: LD_INT 20
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 40
24889: PUSH
24890: LD_INT 50
24892: PUSH
24893: LD_INT 60
24895: PUSH
24896: LD_INT 70
24898: PUSH
24899: LD_INT 80
24901: PUSH
24902: LD_INT 90
24904: PUSH
24905: LD_INT 100
24907: PUSH
24908: LD_INT 110
24910: PUSH
24911: LD_INT 120
24913: PUSH
24914: LD_INT 130
24916: PUSH
24917: LD_INT 140
24919: PUSH
24920: LD_INT 150
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PPUSH
24943: LD_INT 15
24945: PPUSH
24946: CALL_OW 12
24950: ARRAY
24951: ST_TO_ADDR
// if ValidHex ( x , y ) then
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_VAR 0 4
24961: PPUSH
24962: CALL_OW 488
24966: IFFALSE 24989
// begin result := [ x , y ] ;
24968: LD_ADDR_VAR 0 1
24972: PUSH
24973: LD_VAR 0 3
24977: PUSH
24978: LD_VAR 0 4
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: ST_TO_ADDR
// break ;
24987: GO 24991
// end ; end ;
24989: GO 24791
24991: POP
24992: POP
// if result then
24993: LD_VAR 0 1
24997: IFFALSE 25057
// begin ToLua ( playSibBomb() ) ;
24999: LD_STRING playSibBomb()
25001: PPUSH
25002: CALL_OW 559
// wait ( 0 0$14 ) ;
25006: LD_INT 490
25008: PPUSH
25009: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25013: LD_VAR 0 1
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: PPUSH
25031: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25035: LD_VAR 0 1
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PPUSH
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 2
25051: ARRAY
25052: PPUSH
25053: CALL_OW 429
// end ; end ;
25057: LD_VAR 0 1
25061: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25062: LD_EXP 38
25066: PUSH
25067: LD_EXP 60
25071: AND
25072: IFFALSE 25084
25074: GO 25076
25076: DISABLE
// YouLost (  ) ;
25077: LD_STRING 
25079: PPUSH
25080: CALL_OW 104
25084: END
// every 0 0$1 trigger StreamModeActive and sFog do
25085: LD_EXP 38
25089: PUSH
25090: LD_EXP 59
25094: AND
25095: IFFALSE 25109
25097: GO 25099
25099: DISABLE
// FogOff ( your_side ) ;
25100: LD_OWVAR 2
25104: PPUSH
25105: CALL_OW 344
25109: END
// every 0 0$1 trigger StreamModeActive and sSun do
25110: LD_EXP 38
25114: PUSH
25115: LD_EXP 61
25119: AND
25120: IFFALSE 25148
25122: GO 25124
25124: DISABLE
// begin solar_recharge_percent := 0 ;
25125: LD_ADDR_OWVAR 79
25129: PUSH
25130: LD_INT 0
25132: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25133: LD_INT 10500
25135: PPUSH
25136: CALL_OW 67
// solar_recharge_percent := 100 ;
25140: LD_ADDR_OWVAR 79
25144: PUSH
25145: LD_INT 100
25147: ST_TO_ADDR
// end ;
25148: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25149: LD_EXP 38
25153: PUSH
25154: LD_EXP 62
25158: AND
25159: IFFALSE 25398
25161: GO 25163
25163: DISABLE
25164: LD_INT 0
25166: PPUSH
25167: PPUSH
25168: PPUSH
// begin tmp := [ ] ;
25169: LD_ADDR_VAR 0 3
25173: PUSH
25174: EMPTY
25175: ST_TO_ADDR
// for i := 1 to 6 do
25176: LD_ADDR_VAR 0 1
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_INT 6
25188: PUSH
25189: FOR_TO
25190: IFFALSE 25295
// begin uc_nation := nation_nature ;
25192: LD_ADDR_OWVAR 21
25196: PUSH
25197: LD_INT 0
25199: ST_TO_ADDR
// uc_side := 0 ;
25200: LD_ADDR_OWVAR 20
25204: PUSH
25205: LD_INT 0
25207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25208: LD_ADDR_OWVAR 29
25212: PUSH
25213: LD_INT 12
25215: PUSH
25216: LD_INT 12
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// hc_agressivity := 20 ;
25223: LD_ADDR_OWVAR 35
25227: PUSH
25228: LD_INT 20
25230: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25231: LD_ADDR_OWVAR 28
25235: PUSH
25236: LD_INT 17
25238: ST_TO_ADDR
// hc_gallery :=  ;
25239: LD_ADDR_OWVAR 33
25243: PUSH
25244: LD_STRING 
25246: ST_TO_ADDR
// hc_name :=  ;
25247: LD_ADDR_OWVAR 26
25251: PUSH
25252: LD_STRING 
25254: ST_TO_ADDR
// un := CreateHuman ;
25255: LD_ADDR_VAR 0 2
25259: PUSH
25260: CALL_OW 44
25264: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25265: LD_VAR 0 2
25269: PPUSH
25270: LD_INT 1
25272: PPUSH
25273: CALL_OW 51
// tmp := tmp ^ un ;
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_VAR 0 3
25286: PUSH
25287: LD_VAR 0 2
25291: ADD
25292: ST_TO_ADDR
// end ;
25293: GO 25189
25295: POP
25296: POP
// repeat wait ( 0 0$1 ) ;
25297: LD_INT 35
25299: PPUSH
25300: CALL_OW 67
// for un in tmp do
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: FOR_IN
25315: IFFALSE 25389
// begin if IsDead ( un ) then
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL_OW 301
25326: IFFALSE 25346
// begin tmp := tmp diff un ;
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_VAR 0 3
25337: PUSH
25338: LD_VAR 0 2
25342: DIFF
25343: ST_TO_ADDR
// continue ;
25344: GO 25314
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25346: LD_VAR 0 2
25350: PPUSH
25351: LD_INT 3
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: PPUSH
25373: LD_VAR 0 2
25377: PPUSH
25378: CALL_OW 74
25382: PPUSH
25383: CALL_OW 115
// end ;
25387: GO 25314
25389: POP
25390: POP
// until not tmp ;
25391: LD_VAR 0 3
25395: NOT
25396: IFFALSE 25297
// end ;
25398: PPOPN 3
25400: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25401: LD_EXP 38
25405: PUSH
25406: LD_EXP 63
25410: AND
25411: IFFALSE 25465
25413: GO 25415
25415: DISABLE
// begin ToLua ( displayTroll(); ) ;
25416: LD_STRING displayTroll();
25418: PPUSH
25419: CALL_OW 559
// wait ( 3 3$00 ) ;
25423: LD_INT 6300
25425: PPUSH
25426: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25430: LD_STRING hideTroll();
25432: PPUSH
25433: CALL_OW 559
// wait ( 1 1$00 ) ;
25437: LD_INT 2100
25439: PPUSH
25440: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25444: LD_STRING displayTroll();
25446: PPUSH
25447: CALL_OW 559
// wait ( 1 1$00 ) ;
25451: LD_INT 2100
25453: PPUSH
25454: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25458: LD_STRING hideTroll();
25460: PPUSH
25461: CALL_OW 559
// end ;
25465: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25466: LD_EXP 38
25470: PUSH
25471: LD_EXP 64
25475: AND
25476: IFFALSE 25539
25478: GO 25480
25480: DISABLE
25481: LD_INT 0
25483: PPUSH
// begin p := 0 ;
25484: LD_ADDR_VAR 0 1
25488: PUSH
25489: LD_INT 0
25491: ST_TO_ADDR
// repeat game_speed := 1 ;
25492: LD_ADDR_OWVAR 65
25496: PUSH
25497: LD_INT 1
25499: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25500: LD_INT 35
25502: PPUSH
25503: CALL_OW 67
// p := p + 1 ;
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_VAR 0 1
25516: PUSH
25517: LD_INT 1
25519: PLUS
25520: ST_TO_ADDR
// until p >= 60 ;
25521: LD_VAR 0 1
25525: PUSH
25526: LD_INT 60
25528: GREATEREQUAL
25529: IFFALSE 25492
// game_speed := 4 ;
25531: LD_ADDR_OWVAR 65
25535: PUSH
25536: LD_INT 4
25538: ST_TO_ADDR
// end ;
25539: PPOPN 1
25541: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25542: LD_EXP 38
25546: PUSH
25547: LD_EXP 65
25551: AND
25552: IFFALSE 25698
25554: GO 25556
25556: DISABLE
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 30
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 30
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PPUSH
25610: CALL_OW 69
25614: ST_TO_ADDR
// if not depot then
25615: LD_VAR 0 1
25619: NOT
25620: IFFALSE 25624
// exit ;
25622: GO 25698
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 12
25646: ARRAY
25647: PPUSH
25648: CALL_OW 274
25652: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: LD_INT 0
25663: PPUSH
25664: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25668: LD_VAR 0 2
25672: PPUSH
25673: LD_INT 2
25675: PPUSH
25676: LD_INT 0
25678: PPUSH
25679: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25683: LD_VAR 0 2
25687: PPUSH
25688: LD_INT 3
25690: PPUSH
25691: LD_INT 0
25693: PPUSH
25694: CALL_OW 277
// end ;
25698: PPOPN 2
25700: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25701: LD_EXP 38
25705: PUSH
25706: LD_EXP 66
25710: AND
25711: IFFALSE 25808
25713: GO 25715
25715: DISABLE
25716: LD_INT 0
25718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25719: LD_ADDR_VAR 0 1
25723: PUSH
25724: LD_INT 22
25726: PUSH
25727: LD_OWVAR 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 21
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 23
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 1
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 1
25789: PPUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 12
25799: ARRAY
25800: PPUSH
25801: LD_INT 200
25803: PPUSH
25804: CALL_OW 234
// end ;
25808: PPOPN 1
25810: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25811: LD_EXP 38
25815: PUSH
25816: LD_EXP 67
25820: AND
25821: IFFALSE 25900
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_INT 22
25836: PUSH
25837: LD_OWVAR 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 21
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PPUSH
25860: CALL_OW 69
25864: ST_TO_ADDR
// if not tmp then
25865: LD_VAR 0 1
25869: NOT
25870: IFFALSE 25874
// exit ;
25872: GO 25900
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 1
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 12
25891: ARRAY
25892: PPUSH
25893: LD_INT 60
25895: PPUSH
25896: CALL_OW 234
// end ;
25900: PPOPN 1
25902: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25903: LD_EXP 38
25907: PUSH
25908: LD_EXP 68
25912: AND
25913: IFFALSE 26012
25915: GO 25917
25917: DISABLE
25918: LD_INT 0
25920: PPUSH
25921: PPUSH
// begin enable ;
25922: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25923: LD_ADDR_VAR 0 1
25927: PUSH
25928: LD_INT 22
25930: PUSH
25931: LD_OWVAR 2
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 61
25942: PUSH
25943: EMPTY
25944: LIST
25945: PUSH
25946: LD_INT 33
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 69
25965: ST_TO_ADDR
// if not tmp then
25966: LD_VAR 0 1
25970: NOT
25971: IFFALSE 25975
// exit ;
25973: GO 26012
// for i in tmp do
25975: LD_ADDR_VAR 0 2
25979: PUSH
25980: LD_VAR 0 1
25984: PUSH
25985: FOR_IN
25986: IFFALSE 26010
// if IsControledBy ( i ) then
25988: LD_VAR 0 2
25992: PPUSH
25993: CALL_OW 312
25997: IFFALSE 26008
// ComUnlink ( i ) ;
25999: LD_VAR 0 2
26003: PPUSH
26004: CALL_OW 136
26008: GO 25985
26010: POP
26011: POP
// end ;
26012: PPOPN 2
26014: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26015: LD_EXP 38
26019: PUSH
26020: LD_EXP 69
26024: AND
26025: IFFALSE 26165
26027: GO 26029
26029: DISABLE
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
// begin ToLua ( displayPowell(); ) ;
26034: LD_STRING displayPowell();
26036: PPUSH
26037: CALL_OW 559
// uc_side := 0 ;
26041: LD_ADDR_OWVAR 20
26045: PUSH
26046: LD_INT 0
26048: ST_TO_ADDR
// uc_nation := 2 ;
26049: LD_ADDR_OWVAR 21
26053: PUSH
26054: LD_INT 2
26056: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26057: LD_ADDR_OWVAR 37
26061: PUSH
26062: LD_INT 14
26064: ST_TO_ADDR
// vc_engine := engine_siberite ;
26065: LD_ADDR_OWVAR 39
26069: PUSH
26070: LD_INT 3
26072: ST_TO_ADDR
// vc_control := control_apeman ;
26073: LD_ADDR_OWVAR 38
26077: PUSH
26078: LD_INT 5
26080: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26081: LD_ADDR_OWVAR 40
26085: PUSH
26086: LD_INT 29
26088: ST_TO_ADDR
// un := CreateVehicle ;
26089: LD_ADDR_VAR 0 2
26093: PUSH
26094: CALL_OW 45
26098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26111: LD_INT 35
26113: PPUSH
26114: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26118: LD_VAR 0 2
26122: PPUSH
26123: LD_INT 22
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: PPUSH
26140: LD_VAR 0 2
26144: PPUSH
26145: CALL_OW 74
26149: PPUSH
26150: CALL_OW 115
// until IsDead ( un ) ;
26154: LD_VAR 0 2
26158: PPUSH
26159: CALL_OW 301
26163: IFFALSE 26111
// end ;
26165: PPOPN 2
26167: END
// every 0 0$1 trigger StreamModeActive and sStu do
26168: LD_EXP 38
26172: PUSH
26173: LD_EXP 77
26177: AND
26178: IFFALSE 26194
26180: GO 26182
26182: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26183: LD_STRING displayStucuk();
26185: PPUSH
26186: CALL_OW 559
// ResetFog ;
26190: CALL_OW 335
// end ;
26194: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26195: LD_EXP 38
26199: PUSH
26200: LD_EXP 70
26204: AND
26205: IFFALSE 26346
26207: GO 26209
26209: DISABLE
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26214: LD_ADDR_VAR 0 2
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: LD_OWVAR 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 21
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26346
// un := tmp [ rand ( 1 , tmp ) ] ;
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: LD_INT 1
26271: PPUSH
26272: LD_VAR 0 2
26276: PPUSH
26277: CALL_OW 12
26281: ARRAY
26282: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_INT 0
26290: PPUSH
26291: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_OWVAR 3
26304: PUSH
26305: LD_VAR 0 1
26309: DIFF
26310: PPUSH
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 74
26320: PPUSH
26321: CALL_OW 115
// wait ( 0 0$20 ) ;
26325: LD_INT 700
26327: PPUSH
26328: CALL_OW 67
// SetSide ( un , your_side ) ;
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_OWVAR 2
26341: PPUSH
26342: CALL_OW 235
// end ;
26346: PPOPN 2
26348: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26349: LD_EXP 38
26353: PUSH
26354: LD_EXP 71
26358: AND
26359: IFFALSE 26465
26361: GO 26363
26363: DISABLE
26364: LD_INT 0
26366: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_INT 22
26374: PUSH
26375: LD_OWVAR 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PPUSH
26416: CALL_OW 69
26420: ST_TO_ADDR
// if not depot then
26421: LD_VAR 0 1
26425: NOT
26426: IFFALSE 26430
// exit ;
26428: GO 26465
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26430: LD_VAR 0 1
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PPUSH
26439: CALL_OW 250
26443: PPUSH
26444: LD_VAR 0 1
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: CALL_OW 251
26457: PPUSH
26458: LD_INT 70
26460: PPUSH
26461: CALL_OW 495
// end ;
26465: PPOPN 1
26467: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26468: LD_EXP 38
26472: PUSH
26473: LD_EXP 72
26477: AND
26478: IFFALSE 26689
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26490: LD_ADDR_VAR 0 5
26494: PUSH
26495: LD_INT 22
26497: PUSH
26498: LD_OWVAR 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 21
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PPUSH
26521: CALL_OW 69
26525: ST_TO_ADDR
// if not tmp then
26526: LD_VAR 0 5
26530: NOT
26531: IFFALSE 26535
// exit ;
26533: GO 26689
// for i in tmp do
26535: LD_ADDR_VAR 0 1
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: FOR_IN
26546: IFFALSE 26687
// begin d := rand ( 0 , 5 ) ;
26548: LD_ADDR_VAR 0 4
26552: PUSH
26553: LD_INT 0
26555: PPUSH
26556: LD_INT 5
26558: PPUSH
26559: CALL_OW 12
26563: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 250
26578: PPUSH
26579: LD_VAR 0 4
26583: PPUSH
26584: LD_INT 3
26586: PPUSH
26587: LD_INT 12
26589: PPUSH
26590: CALL_OW 12
26594: PPUSH
26595: CALL_OW 272
26599: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 251
26614: PPUSH
26615: LD_VAR 0 4
26619: PPUSH
26620: LD_INT 3
26622: PPUSH
26623: LD_INT 12
26625: PPUSH
26626: CALL_OW 12
26630: PPUSH
26631: CALL_OW 273
26635: ST_TO_ADDR
// if ValidHex ( x , y ) then
26636: LD_VAR 0 2
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 488
26650: IFFALSE 26685
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26652: LD_VAR 0 1
26656: PPUSH
26657: LD_VAR 0 2
26661: PPUSH
26662: LD_VAR 0 3
26666: PPUSH
26667: LD_INT 3
26669: PPUSH
26670: LD_INT 6
26672: PPUSH
26673: CALL_OW 12
26677: PPUSH
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 483
// end ;
26685: GO 26545
26687: POP
26688: POP
// end ;
26689: PPOPN 5
26691: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26692: LD_EXP 38
26696: PUSH
26697: LD_EXP 73
26701: AND
26702: IFFALSE 26796
26704: GO 26706
26706: DISABLE
26707: LD_INT 0
26709: PPUSH
26710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26711: LD_ADDR_VAR 0 2
26715: PUSH
26716: LD_INT 22
26718: PUSH
26719: LD_OWVAR 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 32
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: PPUSH
26753: CALL_OW 69
26757: ST_TO_ADDR
// if not tmp then
26758: LD_VAR 0 2
26762: NOT
26763: IFFALSE 26767
// exit ;
26765: GO 26796
// for i in tmp do
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_VAR 0 2
26776: PUSH
26777: FOR_IN
26778: IFFALSE 26794
// SetFuel ( i , 0 ) ;
26780: LD_VAR 0 1
26784: PPUSH
26785: LD_INT 0
26787: PPUSH
26788: CALL_OW 240
26792: GO 26777
26794: POP
26795: POP
// end ;
26796: PPOPN 2
26798: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26799: LD_EXP 38
26803: PUSH
26804: LD_EXP 74
26808: AND
26809: IFFALSE 26875
26811: GO 26813
26813: DISABLE
26814: LD_INT 0
26816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26817: LD_ADDR_VAR 0 1
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 30
26836: PUSH
26837: LD_INT 29
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 69
26852: ST_TO_ADDR
// if not tmp then
26853: LD_VAR 0 1
26857: NOT
26858: IFFALSE 26862
// exit ;
26860: GO 26875
// DestroyUnit ( tmp [ 1 ] ) ;
26862: LD_VAR 0 1
26866: PUSH
26867: LD_INT 1
26869: ARRAY
26870: PPUSH
26871: CALL_OW 65
// end ;
26875: PPOPN 1
26877: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26878: LD_EXP 38
26882: PUSH
26883: LD_EXP 76
26887: AND
26888: IFFALSE 27017
26890: GO 26892
26892: DISABLE
26893: LD_INT 0
26895: PPUSH
// begin uc_side := 0 ;
26896: LD_ADDR_OWVAR 20
26900: PUSH
26901: LD_INT 0
26903: ST_TO_ADDR
// uc_nation := nation_arabian ;
26904: LD_ADDR_OWVAR 21
26908: PUSH
26909: LD_INT 2
26911: ST_TO_ADDR
// hc_gallery :=  ;
26912: LD_ADDR_OWVAR 33
26916: PUSH
26917: LD_STRING 
26919: ST_TO_ADDR
// hc_name :=  ;
26920: LD_ADDR_OWVAR 26
26924: PUSH
26925: LD_STRING 
26927: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26928: LD_INT 1
26930: PPUSH
26931: LD_INT 11
26933: PPUSH
26934: LD_INT 10
26936: PPUSH
26937: CALL_OW 380
// un := CreateHuman ;
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: CALL_OW 44
26950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26951: LD_VAR 0 1
26955: PPUSH
26956: LD_INT 1
26958: PPUSH
26959: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26963: LD_INT 35
26965: PPUSH
26966: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26970: LD_VAR 0 1
26974: PPUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: PPUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 74
27001: PPUSH
27002: CALL_OW 115
// until IsDead ( un ) ;
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 301
27015: IFFALSE 26963
// end ;
27017: PPOPN 1
27019: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27020: LD_EXP 38
27024: PUSH
27025: LD_EXP 78
27029: AND
27030: IFFALSE 27042
27032: GO 27034
27034: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27035: LD_STRING earthquake(getX(game), 0, 32)
27037: PPUSH
27038: CALL_OW 559
27042: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27043: LD_EXP 38
27047: PUSH
27048: LD_EXP 79
27052: AND
27053: IFFALSE 27144
27055: GO 27057
27057: DISABLE
27058: LD_INT 0
27060: PPUSH
// begin enable ;
27061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27062: LD_ADDR_VAR 0 1
27066: PUSH
27067: LD_INT 22
27069: PUSH
27070: LD_OWVAR 2
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 21
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 33
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 69
27108: ST_TO_ADDR
// if not tmp then
27109: LD_VAR 0 1
27113: NOT
27114: IFFALSE 27118
// exit ;
27116: GO 27144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27118: LD_VAR 0 1
27122: PUSH
27123: LD_INT 1
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 12
27135: ARRAY
27136: PPUSH
27137: LD_INT 1
27139: PPUSH
27140: CALL_OW 234
// end ;
27144: PPOPN 1
27146: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27147: LD_EXP 38
27151: PUSH
27152: LD_EXP 80
27156: AND
27157: IFFALSE 27298
27159: GO 27161
27161: DISABLE
27162: LD_INT 0
27164: PPUSH
27165: PPUSH
27166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27167: LD_ADDR_VAR 0 3
27171: PUSH
27172: LD_INT 22
27174: PUSH
27175: LD_OWVAR 2
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 25
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PPUSH
27198: CALL_OW 69
27202: ST_TO_ADDR
// if not tmp then
27203: LD_VAR 0 3
27207: NOT
27208: IFFALSE 27212
// exit ;
27210: GO 27298
// un := tmp [ rand ( 1 , tmp ) ] ;
27212: LD_ADDR_VAR 0 2
27216: PUSH
27217: LD_VAR 0 3
27221: PUSH
27222: LD_INT 1
27224: PPUSH
27225: LD_VAR 0 3
27229: PPUSH
27230: CALL_OW 12
27234: ARRAY
27235: ST_TO_ADDR
// if Crawls ( un ) then
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 318
27245: IFFALSE 27256
// ComWalk ( un ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27256: LD_VAR 0 2
27260: PPUSH
27261: LD_INT 9
27263: PPUSH
27264: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27268: LD_INT 28
27270: PPUSH
27271: LD_OWVAR 2
27275: PPUSH
27276: LD_INT 2
27278: PPUSH
27279: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27283: LD_INT 29
27285: PPUSH
27286: LD_OWVAR 2
27290: PPUSH
27291: LD_INT 2
27293: PPUSH
27294: CALL_OW 322
// end ;
27298: PPOPN 3
27300: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27301: LD_EXP 38
27305: PUSH
27306: LD_EXP 81
27310: AND
27311: IFFALSE 27422
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
27320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_INT 22
27328: PUSH
27329: LD_OWVAR 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: CALL_OW 69
27356: ST_TO_ADDR
// if not tmp then
27357: LD_VAR 0 3
27361: NOT
27362: IFFALSE 27366
// exit ;
27364: GO 27422
// un := tmp [ rand ( 1 , tmp ) ] ;
27366: LD_ADDR_VAR 0 2
27370: PUSH
27371: LD_VAR 0 3
27375: PUSH
27376: LD_INT 1
27378: PPUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: CALL_OW 12
27388: ARRAY
27389: ST_TO_ADDR
// if Crawls ( un ) then
27390: LD_VAR 0 2
27394: PPUSH
27395: CALL_OW 318
27399: IFFALSE 27410
// ComWalk ( un ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: LD_INT 8
27417: PPUSH
27418: CALL_OW 336
// end ;
27422: PPOPN 3
27424: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27425: LD_EXP 38
27429: PUSH
27430: LD_EXP 82
27434: AND
27435: IFFALSE 27579
27437: GO 27439
27439: DISABLE
27440: LD_INT 0
27442: PPUSH
27443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27444: LD_ADDR_VAR 0 2
27448: PUSH
27449: LD_INT 22
27451: PUSH
27452: LD_OWVAR 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 21
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: LD_INT 34
27476: PUSH
27477: LD_INT 12
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 34
27486: PUSH
27487: LD_INT 51
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 34
27496: PUSH
27497: LD_INT 32
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: PPUSH
27515: CALL_OW 69
27519: ST_TO_ADDR
// if not tmp then
27520: LD_VAR 0 2
27524: NOT
27525: IFFALSE 27529
// exit ;
27527: GO 27579
// for i in tmp do
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_VAR 0 2
27538: PUSH
27539: FOR_IN
27540: IFFALSE 27577
// if GetCargo ( i , mat_artifact ) = 0 then
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_INT 4
27549: PPUSH
27550: CALL_OW 289
27554: PUSH
27555: LD_INT 0
27557: EQUAL
27558: IFFALSE 27575
// SetCargo ( i , mat_siberit , 100 ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_INT 3
27567: PPUSH
27568: LD_INT 100
27570: PPUSH
27571: CALL_OW 290
27575: GO 27539
27577: POP
27578: POP
// end ;
27579: PPOPN 2
27581: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27582: LD_EXP 38
27586: PUSH
27587: LD_EXP 83
27591: AND
27592: IFFALSE 27775
27594: GO 27596
27596: DISABLE
27597: LD_INT 0
27599: PPUSH
27600: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: LD_INT 22
27608: PUSH
27609: LD_OWVAR 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PPUSH
27618: CALL_OW 69
27622: ST_TO_ADDR
// if not tmp then
27623: LD_VAR 0 2
27627: NOT
27628: IFFALSE 27632
// exit ;
27630: GO 27775
// for i := 1 to 2 do
27632: LD_ADDR_VAR 0 1
27636: PUSH
27637: DOUBLE
27638: LD_INT 1
27640: DEC
27641: ST_TO_ADDR
27642: LD_INT 2
27644: PUSH
27645: FOR_TO
27646: IFFALSE 27773
// begin uc_side := your_side ;
27648: LD_ADDR_OWVAR 20
27652: PUSH
27653: LD_OWVAR 2
27657: ST_TO_ADDR
// uc_nation := nation_american ;
27658: LD_ADDR_OWVAR 21
27662: PUSH
27663: LD_INT 1
27665: ST_TO_ADDR
// vc_chassis := us_morphling ;
27666: LD_ADDR_OWVAR 37
27670: PUSH
27671: LD_INT 5
27673: ST_TO_ADDR
// vc_engine := engine_siberite ;
27674: LD_ADDR_OWVAR 39
27678: PUSH
27679: LD_INT 3
27681: ST_TO_ADDR
// vc_control := control_computer ;
27682: LD_ADDR_OWVAR 38
27686: PUSH
27687: LD_INT 3
27689: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27690: LD_ADDR_OWVAR 40
27694: PUSH
27695: LD_INT 10
27697: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27698: LD_VAR 0 2
27702: PUSH
27703: LD_INT 1
27705: ARRAY
27706: PPUSH
27707: CALL_OW 310
27711: NOT
27712: IFFALSE 27759
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27714: CALL_OW 45
27718: PPUSH
27719: LD_VAR 0 2
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: CALL_OW 250
27732: PPUSH
27733: LD_VAR 0 2
27737: PUSH
27738: LD_INT 1
27740: ARRAY
27741: PPUSH
27742: CALL_OW 251
27746: PPUSH
27747: LD_INT 12
27749: PPUSH
27750: LD_INT 1
27752: PPUSH
27753: CALL_OW 50
27757: GO 27771
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27759: CALL_OW 45
27763: PPUSH
27764: LD_INT 1
27766: PPUSH
27767: CALL_OW 51
// end ;
27771: GO 27645
27773: POP
27774: POP
// end ;
27775: PPOPN 2
27777: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27778: LD_EXP 38
27782: PUSH
27783: LD_EXP 84
27787: AND
27788: IFFALSE 28010
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27801: LD_ADDR_VAR 0 6
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_OWVAR 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 21
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 23
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: PPUSH
27850: CALL_OW 69
27854: ST_TO_ADDR
// if not tmp then
27855: LD_VAR 0 6
27859: NOT
27860: IFFALSE 27864
// exit ;
27862: GO 28010
// s1 := rand ( 1 , 4 ) ;
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: LD_INT 1
27871: PPUSH
27872: LD_INT 4
27874: PPUSH
27875: CALL_OW 12
27879: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27880: LD_ADDR_VAR 0 4
27884: PUSH
27885: LD_VAR 0 6
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: CALL_OW 259
27903: ST_TO_ADDR
// if s1 = 1 then
27904: LD_VAR 0 2
27908: PUSH
27909: LD_INT 1
27911: EQUAL
27912: IFFALSE 27932
// s2 := rand ( 2 , 4 ) else
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 2
27921: PPUSH
27922: LD_INT 4
27924: PPUSH
27925: CALL_OW 12
27929: ST_TO_ADDR
27930: GO 27940
// s2 := 1 ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 1
27939: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27940: LD_ADDR_VAR 0 5
27944: PUSH
27945: LD_VAR 0 6
27949: PUSH
27950: LD_INT 1
27952: ARRAY
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 259
27963: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27964: LD_VAR 0 6
27968: PUSH
27969: LD_INT 1
27971: ARRAY
27972: PPUSH
27973: LD_VAR 0 2
27977: PPUSH
27978: LD_VAR 0 5
27982: PPUSH
27983: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27987: LD_VAR 0 6
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: LD_VAR 0 3
28000: PPUSH
28001: LD_VAR 0 4
28005: PPUSH
28006: CALL_OW 237
// end ;
28010: PPOPN 6
28012: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28013: LD_EXP 38
28017: PUSH
28018: LD_EXP 85
28022: AND
28023: IFFALSE 28102
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 30
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 69
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 1
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28076: LD_VAR 0 1
28080: PUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 12
28093: ARRAY
28094: PPUSH
28095: LD_INT 1
28097: PPUSH
28098: CALL_OW 234
// end ;
28102: PPOPN 1
28104: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28105: LD_EXP 38
28109: PUSH
28110: LD_EXP 86
28114: AND
28115: IFFALSE 28227
28117: GO 28119
28119: DISABLE
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 30
28146: PUSH
28147: LD_INT 27
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 26
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 28
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 2
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28227
// for i in tmp do
28198: LD_ADDR_VAR 0 1
28202: PUSH
28203: LD_VAR 0 2
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28225
// SetLives ( i , 1 ) ;
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_INT 1
28218: PPUSH
28219: CALL_OW 234
28223: GO 28208
28225: POP
28226: POP
// end ;
28227: PPOPN 2
28229: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28230: LD_EXP 38
28234: PUSH
28235: LD_EXP 87
28239: AND
28240: IFFALSE 28527
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
28249: PPUSH
// begin i := rand ( 1 , 7 ) ;
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_INT 1
28257: PPUSH
28258: LD_INT 7
28260: PPUSH
28261: CALL_OW 12
28265: ST_TO_ADDR
// case i of 1 :
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28289
28279: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28280: LD_STRING earthquake(getX(game), 0, 32)
28282: PPUSH
28283: CALL_OW 559
28287: GO 28527
28289: LD_INT 2
28291: DOUBLE
28292: EQUAL
28293: IFTRUE 28297
28295: GO 28311
28297: POP
// begin ToLua ( displayStucuk(); ) ;
28298: LD_STRING displayStucuk();
28300: PPUSH
28301: CALL_OW 559
// ResetFog ;
28305: CALL_OW 335
// end ; 3 :
28309: GO 28527
28311: LD_INT 3
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28423
28319: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28320: LD_ADDR_VAR 0 2
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 25
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 2
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28527
// un := tmp [ rand ( 1 , tmp ) ] ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_VAR 0 2
28374: PUSH
28375: LD_INT 1
28377: PPUSH
28378: LD_VAR 0 2
28382: PPUSH
28383: CALL_OW 12
28387: ARRAY
28388: ST_TO_ADDR
// if Crawls ( un ) then
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL_OW 318
28398: IFFALSE 28409
// ComWalk ( un ) ;
28400: LD_VAR 0 3
28404: PPUSH
28405: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28409: LD_VAR 0 3
28413: PPUSH
28414: LD_INT 8
28416: PPUSH
28417: CALL_OW 336
// end ; 4 :
28421: GO 28527
28423: LD_INT 4
28425: DOUBLE
28426: EQUAL
28427: IFTRUE 28431
28429: GO 28505
28431: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28432: LD_ADDR_VAR 0 2
28436: PUSH
28437: LD_INT 22
28439: PUSH
28440: LD_OWVAR 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 29
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PPUSH
28463: CALL_OW 69
28467: ST_TO_ADDR
// if not tmp then
28468: LD_VAR 0 2
28472: NOT
28473: IFFALSE 28477
// exit ;
28475: GO 28527
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28477: LD_VAR 0 2
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PPUSH
28486: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: CALL_OW 65
// end ; 5 .. 7 :
28503: GO 28527
28505: LD_INT 5
28507: DOUBLE
28508: GREATEREQUAL
28509: IFFALSE 28517
28511: LD_INT 7
28513: DOUBLE
28514: LESSEQUAL
28515: IFTRUE 28519
28517: GO 28526
28519: POP
// StreamSibBomb ; end ;
28520: CALL 24764 0 0
28524: GO 28527
28526: POP
// end ;
28527: PPOPN 3
28529: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28530: LD_EXP 38
28534: PUSH
28535: LD_EXP 88
28539: AND
28540: IFFALSE 28696
28542: GO 28544
28544: DISABLE
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
28549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_INT 81
28557: PUSH
28558: LD_OWVAR 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 21
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 21
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 2
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28696
// p := 0 ;
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28621: LD_INT 35
28623: PPUSH
28624: CALL_OW 67
// p := p + 1 ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_VAR 0 3
28637: PUSH
28638: LD_INT 1
28640: PLUS
28641: ST_TO_ADDR
// for i in tmp do
28642: LD_ADDR_VAR 0 1
28646: PUSH
28647: LD_VAR 0 2
28651: PUSH
28652: FOR_IN
28653: IFFALSE 28684
// if GetLives ( i ) < 1000 then
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 256
28664: PUSH
28665: LD_INT 1000
28667: LESS
28668: IFFALSE 28682
// SetLives ( i , 1000 ) ;
28670: LD_VAR 0 1
28674: PPUSH
28675: LD_INT 1000
28677: PPUSH
28678: CALL_OW 234
28682: GO 28652
28684: POP
28685: POP
// until p > 20 ;
28686: LD_VAR 0 3
28690: PUSH
28691: LD_INT 20
28693: GREATER
28694: IFFALSE 28621
// end ;
28696: PPOPN 3
28698: END
// every 0 0$1 trigger StreamModeActive and sTime do
28699: LD_EXP 38
28703: PUSH
28704: LD_EXP 89
28708: AND
28709: IFFALSE 28744
28711: GO 28713
28713: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28714: LD_INT 28
28716: PPUSH
28717: LD_OWVAR 2
28721: PPUSH
28722: LD_INT 2
28724: PPUSH
28725: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28729: LD_INT 30
28731: PPUSH
28732: LD_OWVAR 2
28736: PPUSH
28737: LD_INT 2
28739: PPUSH
28740: CALL_OW 322
// end ;
28744: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28745: LD_EXP 38
28749: PUSH
28750: LD_EXP 90
28754: AND
28755: IFFALSE 28876
28757: GO 28759
28759: DISABLE
28760: LD_INT 0
28762: PPUSH
28763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28764: LD_ADDR_VAR 0 2
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_OWVAR 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 21
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 23
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: PPUSH
28813: CALL_OW 69
28817: ST_TO_ADDR
// if not tmp then
28818: LD_VAR 0 2
28822: NOT
28823: IFFALSE 28827
// exit ;
28825: GO 28876
// for i in tmp do
28827: LD_ADDR_VAR 0 1
28831: PUSH
28832: LD_VAR 0 2
28836: PUSH
28837: FOR_IN
28838: IFFALSE 28874
// begin if Crawls ( i ) then
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 318
28849: IFFALSE 28860
// ComWalk ( i ) ;
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 138
// SetClass ( i , 2 ) ;
28860: LD_VAR 0 1
28864: PPUSH
28865: LD_INT 2
28867: PPUSH
28868: CALL_OW 336
// end ;
28872: GO 28837
28874: POP
28875: POP
// end ;
28876: PPOPN 2
28878: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28879: LD_EXP 38
28883: PUSH
28884: LD_EXP 91
28888: AND
28889: IFFALSE 29177
28891: GO 28893
28893: DISABLE
28894: LD_INT 0
28896: PPUSH
28897: PPUSH
28898: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28899: LD_OWVAR 2
28903: PPUSH
28904: LD_INT 9
28906: PPUSH
28907: LD_INT 1
28909: PPUSH
28910: LD_INT 1
28912: PPUSH
28913: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28917: LD_INT 9
28919: PPUSH
28920: LD_OWVAR 2
28924: PPUSH
28925: CALL_OW 343
// uc_side := 9 ;
28929: LD_ADDR_OWVAR 20
28933: PUSH
28934: LD_INT 9
28936: ST_TO_ADDR
// uc_nation := 2 ;
28937: LD_ADDR_OWVAR 21
28941: PUSH
28942: LD_INT 2
28944: ST_TO_ADDR
// hc_name := Dark Warrior ;
28945: LD_ADDR_OWVAR 26
28949: PUSH
28950: LD_STRING Dark Warrior
28952: ST_TO_ADDR
// hc_gallery :=  ;
28953: LD_ADDR_OWVAR 33
28957: PUSH
28958: LD_STRING 
28960: ST_TO_ADDR
// hc_noskilllimit := true ;
28961: LD_ADDR_OWVAR 76
28965: PUSH
28966: LD_INT 1
28968: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28969: LD_ADDR_OWVAR 31
28973: PUSH
28974: LD_INT 30
28976: PUSH
28977: LD_INT 30
28979: PUSH
28980: LD_INT 30
28982: PUSH
28983: LD_INT 30
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// un := CreateHuman ;
28992: LD_ADDR_VAR 0 3
28996: PUSH
28997: CALL_OW 44
29001: ST_TO_ADDR
// hc_noskilllimit := false ;
29002: LD_ADDR_OWVAR 76
29006: PUSH
29007: LD_INT 0
29009: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29010: LD_VAR 0 3
29014: PPUSH
29015: LD_INT 1
29017: PPUSH
29018: CALL_OW 51
// ToLua ( playRanger() ) ;
29022: LD_STRING playRanger()
29024: PPUSH
29025: CALL_OW 559
// p := 0 ;
29029: LD_ADDR_VAR 0 2
29033: PUSH
29034: LD_INT 0
29036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29037: LD_INT 35
29039: PPUSH
29040: CALL_OW 67
// p := p + 1 ;
29044: LD_ADDR_VAR 0 2
29048: PUSH
29049: LD_VAR 0 2
29053: PUSH
29054: LD_INT 1
29056: PLUS
29057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29058: LD_VAR 0 3
29062: PPUSH
29063: CALL_OW 256
29067: PUSH
29068: LD_INT 1000
29070: LESS
29071: IFFALSE 29085
// SetLives ( un , 1000 ) ;
29073: LD_VAR 0 3
29077: PPUSH
29078: LD_INT 1000
29080: PPUSH
29081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29085: LD_VAR 0 3
29089: PPUSH
29090: LD_INT 81
29092: PUSH
29093: LD_OWVAR 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 91
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: LD_INT 30
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 74
29136: PPUSH
29137: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29141: LD_VAR 0 2
29145: PUSH
29146: LD_INT 80
29148: GREATER
29149: PUSH
29150: LD_VAR 0 3
29154: PPUSH
29155: CALL_OW 301
29159: OR
29160: IFFALSE 29037
// if un then
29162: LD_VAR 0 3
29166: IFFALSE 29177
// RemoveUnit ( un ) ;
29168: LD_VAR 0 3
29172: PPUSH
29173: CALL_OW 64
// end ;
29177: PPOPN 3
29179: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29180: LD_EXP 92
29184: IFFALSE 29300
29186: GO 29188
29188: DISABLE
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29194: LD_ADDR_VAR 0 2
29198: PUSH
29199: LD_INT 81
29201: PUSH
29202: LD_OWVAR 2
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 21
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PPUSH
29225: CALL_OW 69
29229: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29230: LD_STRING playComputer()
29232: PPUSH
29233: CALL_OW 559
// if not tmp then
29237: LD_VAR 0 2
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29300
// for i in tmp do
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: FOR_IN
29257: IFFALSE 29298
// for j := 1 to 4 do
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: DOUBLE
29265: LD_INT 1
29267: DEC
29268: ST_TO_ADDR
29269: LD_INT 4
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29294
// SetSkill ( i , j , 10 ) ;
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 3
29284: PPUSH
29285: LD_INT 10
29287: PPUSH
29288: CALL_OW 237
29292: GO 29272
29294: POP
29295: POP
29296: GO 29256
29298: POP
29299: POP
// end ;
29300: PPOPN 3
29302: END
// every 0 0$1 trigger s30 do var i , tmp ;
29303: LD_EXP 93
29307: IFFALSE 29376
29309: GO 29311
29311: DISABLE
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_INT 22
29323: PUSH
29324: LD_OWVAR 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: ST_TO_ADDR
// if not tmp then
29338: LD_VAR 0 2
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29376
// for i in tmp do
29347: LD_ADDR_VAR 0 1
29351: PUSH
29352: LD_VAR 0 2
29356: PUSH
29357: FOR_IN
29358: IFFALSE 29374
// SetLives ( i , 300 ) ;
29360: LD_VAR 0 1
29364: PPUSH
29365: LD_INT 300
29367: PPUSH
29368: CALL_OW 234
29372: GO 29357
29374: POP
29375: POP
// end ;
29376: PPOPN 2
29378: END
// every 0 0$1 trigger s60 do var i , tmp ;
29379: LD_EXP 94
29383: IFFALSE 29452
29385: GO 29387
29387: DISABLE
29388: LD_INT 0
29390: PPUSH
29391: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29392: LD_ADDR_VAR 0 2
29396: PUSH
29397: LD_INT 22
29399: PUSH
29400: LD_OWVAR 2
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 2
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29452
// for i in tmp do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29450
// SetLives ( i , 600 ) ;
29436: LD_VAR 0 1
29440: PPUSH
29441: LD_INT 600
29443: PPUSH
29444: CALL_OW 234
29448: GO 29433
29450: POP
29451: POP
// end ;
29452: PPOPN 2
29454: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29455: LD_INT 0
29457: PPUSH
// case cmd of 301 :
29458: LD_VAR 0 1
29462: PUSH
29463: LD_INT 301
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29471
29469: GO 29503
29471: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29472: LD_VAR 0 6
29476: PPUSH
29477: LD_VAR 0 7
29481: PPUSH
29482: LD_VAR 0 8
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_VAR 0 5
29496: PPUSH
29497: CALL 30712 0 5
29501: GO 29624
29503: LD_INT 302
29505: DOUBLE
29506: EQUAL
29507: IFTRUE 29511
29509: GO 29548
29511: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29512: LD_VAR 0 6
29516: PPUSH
29517: LD_VAR 0 7
29521: PPUSH
29522: LD_VAR 0 8
29526: PPUSH
29527: LD_VAR 0 9
29531: PPUSH
29532: LD_VAR 0 4
29536: PPUSH
29537: LD_VAR 0 5
29541: PPUSH
29542: CALL 30803 0 6
29546: GO 29624
29548: LD_INT 303
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29593
29556: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29557: LD_VAR 0 6
29561: PPUSH
29562: LD_VAR 0 7
29566: PPUSH
29567: LD_VAR 0 8
29571: PPUSH
29572: LD_VAR 0 9
29576: PPUSH
29577: LD_VAR 0 4
29581: PPUSH
29582: LD_VAR 0 5
29586: PPUSH
29587: CALL 29629 0 6
29591: GO 29624
29593: LD_INT 304
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 29623
29601: POP
// hHackTeleport ( unit , x , y ) ; end ;
29602: LD_VAR 0 2
29606: PPUSH
29607: LD_VAR 0 4
29611: PPUSH
29612: LD_VAR 0 5
29616: PPUSH
29617: CALL 31396 0 3
29621: GO 29624
29623: POP
// end ;
29624: LD_VAR 0 12
29628: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29633: LD_VAR 0 1
29637: PUSH
29638: LD_INT 1
29640: LESS
29641: PUSH
29642: LD_VAR 0 1
29646: PUSH
29647: LD_INT 3
29649: GREATER
29650: OR
29651: PUSH
29652: LD_VAR 0 5
29656: PPUSH
29657: LD_VAR 0 6
29661: PPUSH
29662: CALL_OW 428
29666: OR
29667: IFFALSE 29671
// exit ;
29669: GO 30399
// uc_side := your_side ;
29671: LD_ADDR_OWVAR 20
29675: PUSH
29676: LD_OWVAR 2
29680: ST_TO_ADDR
// uc_nation := nation ;
29681: LD_ADDR_OWVAR 21
29685: PUSH
29686: LD_VAR 0 1
29690: ST_TO_ADDR
// bc_level = 1 ;
29691: LD_ADDR_OWVAR 43
29695: PUSH
29696: LD_INT 1
29698: ST_TO_ADDR
// case btype of 1 :
29699: LD_VAR 0 2
29703: PUSH
29704: LD_INT 1
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29723
29712: POP
// bc_type := b_depot ; 2 :
29713: LD_ADDR_OWVAR 42
29717: PUSH
29718: LD_INT 0
29720: ST_TO_ADDR
29721: GO 30343
29723: LD_INT 2
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29731
29729: GO 29742
29731: POP
// bc_type := b_warehouse ; 3 :
29732: LD_ADDR_OWVAR 42
29736: PUSH
29737: LD_INT 1
29739: ST_TO_ADDR
29740: GO 30343
29742: LD_INT 3
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29761
29750: POP
// bc_type := b_lab ; 4 .. 9 :
29751: LD_ADDR_OWVAR 42
29755: PUSH
29756: LD_INT 6
29758: ST_TO_ADDR
29759: GO 30343
29761: LD_INT 4
29763: DOUBLE
29764: GREATEREQUAL
29765: IFFALSE 29773
29767: LD_INT 9
29769: DOUBLE
29770: LESSEQUAL
29771: IFTRUE 29775
29773: GO 29835
29775: POP
// begin bc_type := b_lab_half ;
29776: LD_ADDR_OWVAR 42
29780: PUSH
29781: LD_INT 7
29783: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29784: LD_ADDR_OWVAR 44
29788: PUSH
29789: LD_INT 10
29791: PUSH
29792: LD_INT 11
29794: PUSH
29795: LD_INT 12
29797: PUSH
29798: LD_INT 15
29800: PUSH
29801: LD_INT 14
29803: PUSH
29804: LD_INT 13
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: PUSH
29815: LD_VAR 0 2
29819: PUSH
29820: LD_INT 3
29822: MINUS
29823: ARRAY
29824: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29825: LD_ADDR_OWVAR 45
29829: PUSH
29830: LD_INT 9
29832: ST_TO_ADDR
// end ; 10 .. 13 :
29833: GO 30343
29835: LD_INT 10
29837: DOUBLE
29838: GREATEREQUAL
29839: IFFALSE 29847
29841: LD_INT 13
29843: DOUBLE
29844: LESSEQUAL
29845: IFTRUE 29849
29847: GO 29926
29849: POP
// begin bc_type := b_lab_full ;
29850: LD_ADDR_OWVAR 42
29854: PUSH
29855: LD_INT 8
29857: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29858: LD_ADDR_OWVAR 44
29862: PUSH
29863: LD_INT 10
29865: PUSH
29866: LD_INT 12
29868: PUSH
29869: LD_INT 14
29871: PUSH
29872: LD_INT 13
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: PUSH
29881: LD_VAR 0 2
29885: PUSH
29886: LD_INT 9
29888: MINUS
29889: ARRAY
29890: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29891: LD_ADDR_OWVAR 45
29895: PUSH
29896: LD_INT 11
29898: PUSH
29899: LD_INT 15
29901: PUSH
29902: LD_INT 12
29904: PUSH
29905: LD_INT 15
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: PUSH
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 9
29921: MINUS
29922: ARRAY
29923: ST_TO_ADDR
// end ; 14 :
29924: GO 30343
29926: LD_INT 14
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29945
29934: POP
// bc_type := b_workshop ; 15 :
29935: LD_ADDR_OWVAR 42
29939: PUSH
29940: LD_INT 2
29942: ST_TO_ADDR
29943: GO 30343
29945: LD_INT 15
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 29964
29953: POP
// bc_type := b_factory ; 16 :
29954: LD_ADDR_OWVAR 42
29958: PUSH
29959: LD_INT 3
29961: ST_TO_ADDR
29962: GO 30343
29964: LD_INT 16
29966: DOUBLE
29967: EQUAL
29968: IFTRUE 29972
29970: GO 29983
29972: POP
// bc_type := b_ext_gun ; 17 :
29973: LD_ADDR_OWVAR 42
29977: PUSH
29978: LD_INT 17
29980: ST_TO_ADDR
29981: GO 30343
29983: LD_INT 17
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30019
29991: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29992: LD_ADDR_OWVAR 42
29996: PUSH
29997: LD_INT 19
29999: PUSH
30000: LD_INT 23
30002: PUSH
30003: LD_INT 19
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: PUSH
30011: LD_VAR 0 1
30015: ARRAY
30016: ST_TO_ADDR
30017: GO 30343
30019: LD_INT 18
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30038
30027: POP
// bc_type := b_ext_radar ; 19 :
30028: LD_ADDR_OWVAR 42
30032: PUSH
30033: LD_INT 20
30035: ST_TO_ADDR
30036: GO 30343
30038: LD_INT 19
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30057
30046: POP
// bc_type := b_ext_radio ; 20 :
30047: LD_ADDR_OWVAR 42
30051: PUSH
30052: LD_INT 22
30054: ST_TO_ADDR
30055: GO 30343
30057: LD_INT 20
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30076
30065: POP
// bc_type := b_ext_siberium ; 21 :
30066: LD_ADDR_OWVAR 42
30070: PUSH
30071: LD_INT 21
30073: ST_TO_ADDR
30074: GO 30343
30076: LD_INT 21
30078: DOUBLE
30079: EQUAL
30080: IFTRUE 30084
30082: GO 30095
30084: POP
// bc_type := b_ext_computer ; 22 :
30085: LD_ADDR_OWVAR 42
30089: PUSH
30090: LD_INT 24
30092: ST_TO_ADDR
30093: GO 30343
30095: LD_INT 22
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30114
30103: POP
// bc_type := b_ext_track ; 23 :
30104: LD_ADDR_OWVAR 42
30108: PUSH
30109: LD_INT 16
30111: ST_TO_ADDR
30112: GO 30343
30114: LD_INT 23
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30133
30122: POP
// bc_type := b_ext_laser ; 24 :
30123: LD_ADDR_OWVAR 42
30127: PUSH
30128: LD_INT 25
30130: ST_TO_ADDR
30131: GO 30343
30133: LD_INT 24
30135: DOUBLE
30136: EQUAL
30137: IFTRUE 30141
30139: GO 30152
30141: POP
// bc_type := b_control_tower ; 25 :
30142: LD_ADDR_OWVAR 42
30146: PUSH
30147: LD_INT 36
30149: ST_TO_ADDR
30150: GO 30343
30152: LD_INT 25
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30171
30160: POP
// bc_type := b_breastwork ; 26 :
30161: LD_ADDR_OWVAR 42
30165: PUSH
30166: LD_INT 31
30168: ST_TO_ADDR
30169: GO 30343
30171: LD_INT 26
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30190
30179: POP
// bc_type := b_bunker ; 27 :
30180: LD_ADDR_OWVAR 42
30184: PUSH
30185: LD_INT 32
30187: ST_TO_ADDR
30188: GO 30343
30190: LD_INT 27
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30209
30198: POP
// bc_type := b_turret ; 28 :
30199: LD_ADDR_OWVAR 42
30203: PUSH
30204: LD_INT 33
30206: ST_TO_ADDR
30207: GO 30343
30209: LD_INT 28
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 30228
30217: POP
// bc_type := b_armoury ; 29 :
30218: LD_ADDR_OWVAR 42
30222: PUSH
30223: LD_INT 4
30225: ST_TO_ADDR
30226: GO 30343
30228: LD_INT 29
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30247
30236: POP
// bc_type := b_barracks ; 30 :
30237: LD_ADDR_OWVAR 42
30241: PUSH
30242: LD_INT 5
30244: ST_TO_ADDR
30245: GO 30343
30247: LD_INT 30
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30266
30255: POP
// bc_type := b_solar_power ; 31 :
30256: LD_ADDR_OWVAR 42
30260: PUSH
30261: LD_INT 27
30263: ST_TO_ADDR
30264: GO 30343
30266: LD_INT 31
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30285
30274: POP
// bc_type := b_oil_power ; 32 :
30275: LD_ADDR_OWVAR 42
30279: PUSH
30280: LD_INT 26
30282: ST_TO_ADDR
30283: GO 30343
30285: LD_INT 32
30287: DOUBLE
30288: EQUAL
30289: IFTRUE 30293
30291: GO 30304
30293: POP
// bc_type := b_siberite_power ; 33 :
30294: LD_ADDR_OWVAR 42
30298: PUSH
30299: LD_INT 28
30301: ST_TO_ADDR
30302: GO 30343
30304: LD_INT 33
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30323
30312: POP
// bc_type := b_oil_mine ; 34 :
30313: LD_ADDR_OWVAR 42
30317: PUSH
30318: LD_INT 29
30320: ST_TO_ADDR
30321: GO 30343
30323: LD_INT 34
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30342
30331: POP
// bc_type := b_siberite_mine ; end ;
30332: LD_ADDR_OWVAR 42
30336: PUSH
30337: LD_INT 30
30339: ST_TO_ADDR
30340: GO 30343
30342: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30343: LD_ADDR_VAR 0 8
30347: PUSH
30348: LD_VAR 0 5
30352: PPUSH
30353: LD_VAR 0 6
30357: PPUSH
30358: LD_VAR 0 3
30362: PPUSH
30363: CALL_OW 47
30367: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30368: LD_OWVAR 42
30372: PUSH
30373: LD_INT 32
30375: PUSH
30376: LD_INT 33
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: IN
30383: IFFALSE 30399
// PlaceWeaponTurret ( b , weapon ) ;
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: CALL_OW 431
// end ;
30399: LD_VAR 0 7
30403: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30410: LD_ADDR_VAR 0 4
30414: PUSH
30415: LD_INT 22
30417: PUSH
30418: LD_OWVAR 2
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 30
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 69
30463: ST_TO_ADDR
// if not tmp then
30464: LD_VAR 0 4
30468: NOT
30469: IFFALSE 30473
// exit ;
30471: GO 30532
// for i in tmp do
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_VAR 0 4
30482: PUSH
30483: FOR_IN
30484: IFFALSE 30530
// for j = 1 to 3 do
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: DOUBLE
30492: LD_INT 1
30494: DEC
30495: ST_TO_ADDR
30496: LD_INT 3
30498: PUSH
30499: FOR_TO
30500: IFFALSE 30526
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30502: LD_VAR 0 2
30506: PPUSH
30507: CALL_OW 274
30511: PPUSH
30512: LD_VAR 0 3
30516: PPUSH
30517: LD_INT 99999
30519: PPUSH
30520: CALL_OW 277
30524: GO 30499
30526: POP
30527: POP
30528: GO 30483
30530: POP
30531: POP
// end ;
30532: LD_VAR 0 1
30536: RET
// export function hHackSetLevel10 ; var i , j ; begin
30537: LD_INT 0
30539: PPUSH
30540: PPUSH
30541: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_INT 21
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PPUSH
30557: CALL_OW 69
30561: PUSH
30562: FOR_IN
30563: IFFALSE 30615
// if IsSelected ( i ) then
30565: LD_VAR 0 2
30569: PPUSH
30570: CALL_OW 306
30574: IFFALSE 30613
// begin for j := 1 to 4 do
30576: LD_ADDR_VAR 0 3
30580: PUSH
30581: DOUBLE
30582: LD_INT 1
30584: DEC
30585: ST_TO_ADDR
30586: LD_INT 4
30588: PUSH
30589: FOR_TO
30590: IFFALSE 30611
// SetSkill ( i , j , 10 ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: LD_INT 10
30604: PPUSH
30605: CALL_OW 237
30609: GO 30589
30611: POP
30612: POP
// end ;
30613: GO 30562
30615: POP
30616: POP
// end ;
30617: LD_VAR 0 1
30621: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
30626: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_INT 22
30634: PUSH
30635: LD_OWVAR 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 21
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 69
30662: PUSH
30663: FOR_IN
30664: IFFALSE 30705
// begin for j := 1 to 4 do
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: DOUBLE
30672: LD_INT 1
30674: DEC
30675: ST_TO_ADDR
30676: LD_INT 4
30678: PUSH
30679: FOR_TO
30680: IFFALSE 30701
// SetSkill ( i , j , 10 ) ;
30682: LD_VAR 0 2
30686: PPUSH
30687: LD_VAR 0 3
30691: PPUSH
30692: LD_INT 10
30694: PPUSH
30695: CALL_OW 237
30699: GO 30679
30701: POP
30702: POP
// end ;
30703: GO 30663
30705: POP
30706: POP
// end ;
30707: LD_VAR 0 1
30711: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30712: LD_INT 0
30714: PPUSH
// uc_side := your_side ;
30715: LD_ADDR_OWVAR 20
30719: PUSH
30720: LD_OWVAR 2
30724: ST_TO_ADDR
// uc_nation := nation ;
30725: LD_ADDR_OWVAR 21
30729: PUSH
30730: LD_VAR 0 1
30734: ST_TO_ADDR
// InitHc ;
30735: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30739: LD_INT 0
30741: PPUSH
30742: LD_VAR 0 2
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30756: LD_VAR 0 4
30760: PPUSH
30761: LD_VAR 0 5
30765: PPUSH
30766: CALL_OW 428
30770: PUSH
30771: LD_INT 0
30773: EQUAL
30774: IFFALSE 30798
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30776: CALL_OW 44
30780: PPUSH
30781: LD_VAR 0 4
30785: PPUSH
30786: LD_VAR 0 5
30790: PPUSH
30791: LD_INT 1
30793: PPUSH
30794: CALL_OW 48
// end ;
30798: LD_VAR 0 6
30802: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30803: LD_INT 0
30805: PPUSH
30806: PPUSH
// uc_side := your_side ;
30807: LD_ADDR_OWVAR 20
30811: PUSH
30812: LD_OWVAR 2
30816: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30817: LD_VAR 0 1
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 5
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: IN
30844: IFFALSE 30856
// uc_nation := nation_american else
30846: LD_ADDR_OWVAR 21
30850: PUSH
30851: LD_INT 1
30853: ST_TO_ADDR
30854: GO 30899
// if chassis in [ 11 , 12 , 13 , 14 ] then
30856: LD_VAR 0 1
30860: PUSH
30861: LD_INT 11
30863: PUSH
30864: LD_INT 12
30866: PUSH
30867: LD_INT 13
30869: PUSH
30870: LD_INT 14
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: IN
30879: IFFALSE 30891
// uc_nation := nation_arabian else
30881: LD_ADDR_OWVAR 21
30885: PUSH
30886: LD_INT 2
30888: ST_TO_ADDR
30889: GO 30899
// uc_nation := nation_russian ;
30891: LD_ADDR_OWVAR 21
30895: PUSH
30896: LD_INT 3
30898: ST_TO_ADDR
// vc_chassis := chassis ;
30899: LD_ADDR_OWVAR 37
30903: PUSH
30904: LD_VAR 0 1
30908: ST_TO_ADDR
// vc_engine := engine ;
30909: LD_ADDR_OWVAR 39
30913: PUSH
30914: LD_VAR 0 2
30918: ST_TO_ADDR
// vc_control := control ;
30919: LD_ADDR_OWVAR 38
30923: PUSH
30924: LD_VAR 0 3
30928: ST_TO_ADDR
// vc_weapon := weapon ;
30929: LD_ADDR_OWVAR 40
30933: PUSH
30934: LD_VAR 0 4
30938: ST_TO_ADDR
// un := CreateVehicle ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: CALL_OW 45
30948: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30949: LD_VAR 0 8
30953: PPUSH
30954: LD_INT 0
30956: PPUSH
30957: LD_INT 5
30959: PPUSH
30960: CALL_OW 12
30964: PPUSH
30965: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30969: LD_VAR 0 8
30973: PPUSH
30974: LD_VAR 0 5
30978: PPUSH
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_INT 1
30986: PPUSH
30987: CALL_OW 48
// end ;
30991: LD_VAR 0 7
30995: RET
// export hInvincible ; every 1 do
30996: GO 30998
30998: DISABLE
// hInvincible := [ ] ;
30999: LD_ADDR_EXP 95
31003: PUSH
31004: EMPTY
31005: ST_TO_ADDR
31006: END
// every 10 do var i ;
31007: GO 31009
31009: DISABLE
31010: LD_INT 0
31012: PPUSH
// begin enable ;
31013: ENABLE
// if not hInvincible then
31014: LD_EXP 95
31018: NOT
31019: IFFALSE 31023
// exit ;
31021: GO 31067
// for i in hInvincible do
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: LD_EXP 95
31032: PUSH
31033: FOR_IN
31034: IFFALSE 31065
// if GetLives ( i ) < 1000 then
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 256
31045: PUSH
31046: LD_INT 1000
31048: LESS
31049: IFFALSE 31063
// SetLives ( i , 1000 ) ;
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_INT 1000
31058: PPUSH
31059: CALL_OW 234
31063: GO 31033
31065: POP
31066: POP
// end ;
31067: PPOPN 1
31069: END
// export function hHackInvincible ; var i ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31074: LD_ADDR_VAR 0 2
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 21
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL_OW 69
31111: PUSH
31112: FOR_IN
31113: IFFALSE 31174
// if IsSelected ( i ) then
31115: LD_VAR 0 2
31119: PPUSH
31120: CALL_OW 306
31124: IFFALSE 31172
// begin if i in hInvincible then
31126: LD_VAR 0 2
31130: PUSH
31131: LD_EXP 95
31135: IN
31136: IFFALSE 31156
// hInvincible := hInvincible diff i else
31138: LD_ADDR_EXP 95
31142: PUSH
31143: LD_EXP 95
31147: PUSH
31148: LD_VAR 0 2
31152: DIFF
31153: ST_TO_ADDR
31154: GO 31172
// hInvincible := hInvincible union i ;
31156: LD_ADDR_EXP 95
31160: PUSH
31161: LD_EXP 95
31165: PUSH
31166: LD_VAR 0 2
31170: UNION
31171: ST_TO_ADDR
// end ;
31172: GO 31112
31174: POP
31175: POP
// end ;
31176: LD_VAR 0 1
31180: RET
// export function hHackInvisible ; var i , j ; begin
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31186: LD_ADDR_VAR 0 2
31190: PUSH
31191: LD_INT 21
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 69
31205: PUSH
31206: FOR_IN
31207: IFFALSE 31231
// if IsSelected ( i ) then
31209: LD_VAR 0 2
31213: PPUSH
31214: CALL_OW 306
31218: IFFALSE 31229
// ComForceInvisible ( i ) ;
31220: LD_VAR 0 2
31224: PPUSH
31225: CALL_OW 496
31229: GO 31206
31231: POP
31232: POP
// end ;
31233: LD_VAR 0 1
31237: RET
// export function hHackChangeYourSide ; begin
31238: LD_INT 0
31240: PPUSH
// if your_side = 8 then
31241: LD_OWVAR 2
31245: PUSH
31246: LD_INT 8
31248: EQUAL
31249: IFFALSE 31261
// your_side := 0 else
31251: LD_ADDR_OWVAR 2
31255: PUSH
31256: LD_INT 0
31258: ST_TO_ADDR
31259: GO 31275
// your_side := your_side + 1 ;
31261: LD_ADDR_OWVAR 2
31265: PUSH
31266: LD_OWVAR 2
31270: PUSH
31271: LD_INT 1
31273: PLUS
31274: ST_TO_ADDR
// end ;
31275: LD_VAR 0 1
31279: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31280: LD_INT 0
31282: PPUSH
31283: PPUSH
31284: PPUSH
// for i in all_units do
31285: LD_ADDR_VAR 0 2
31289: PUSH
31290: LD_OWVAR 3
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31374
// if IsSelected ( i ) then
31298: LD_VAR 0 2
31302: PPUSH
31303: CALL_OW 306
31307: IFFALSE 31372
// begin j := GetSide ( i ) ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 2
31318: PPUSH
31319: CALL_OW 255
31323: ST_TO_ADDR
// if j = 8 then
31324: LD_VAR 0 3
31328: PUSH
31329: LD_INT 8
31331: EQUAL
31332: IFFALSE 31344
// j := 0 else
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
31342: GO 31358
// j := j + 1 ;
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_INT 1
31356: PLUS
31357: ST_TO_ADDR
// SetSide ( i , j ) ;
31358: LD_VAR 0 2
31362: PPUSH
31363: LD_VAR 0 3
31367: PPUSH
31368: CALL_OW 235
// end ;
31372: GO 31295
31374: POP
31375: POP
// end ;
31376: LD_VAR 0 1
31380: RET
// export function hHackFog ; begin
31381: LD_INT 0
31383: PPUSH
// FogOff ( true ) ;
31384: LD_INT 1
31386: PPUSH
31387: CALL_OW 344
// end ;
31391: LD_VAR 0 1
31395: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31396: LD_INT 0
31398: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_VAR 0 3
31413: PPUSH
31414: LD_INT 1
31416: PPUSH
31417: LD_INT 1
31419: PPUSH
31420: CALL_OW 483
// CenterOnXY ( x , y ) ;
31424: LD_VAR 0 2
31428: PPUSH
31429: LD_VAR 0 3
31433: PPUSH
31434: CALL_OW 84
// end ;
31438: LD_VAR 0 4
31442: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31447: LD_VAR 0 1
31451: NOT
31452: PUSH
31453: LD_VAR 0 2
31457: PPUSH
31458: LD_VAR 0 3
31462: PPUSH
31463: CALL_OW 488
31467: NOT
31468: OR
31469: PUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: CALL_OW 266
31479: PUSH
31480: LD_INT 3
31482: NONEQUAL
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 247
31493: PUSH
31494: LD_INT 1
31496: EQUAL
31497: NOT
31498: AND
31499: OR
31500: IFFALSE 31504
// exit ;
31502: GO 31786
// if GetType ( factory ) = unit_human then
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 247
31513: PUSH
31514: LD_INT 1
31516: EQUAL
31517: IFFALSE 31534
// factory := IsInUnit ( factory ) ;
31519: LD_ADDR_VAR 0 1
31523: PUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 310
31533: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 266
31543: PUSH
31544: LD_INT 3
31546: NONEQUAL
31547: IFFALSE 31551
// exit ;
31549: GO 31786
// for i := 1 to Count ( factoryWaypoints ) do
31551: LD_ADDR_VAR 0 5
31555: PUSH
31556: DOUBLE
31557: LD_INT 1
31559: DEC
31560: ST_TO_ADDR
31561: LD_EXP 96
31565: PPUSH
31566: CALL 40289 0 1
31570: PUSH
31571: FOR_TO
31572: IFFALSE 31734
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
31574: LD_VAR 0 2
31578: PPUSH
31579: LD_VAR 0 3
31583: PPUSH
31584: CALL_OW 428
31588: PUSH
31589: LD_EXP 96
31593: PUSH
31594: LD_VAR 0 5
31598: ARRAY
31599: PUSH
31600: LD_INT 2
31602: ARRAY
31603: EQUAL
31604: IFFALSE 31636
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31606: LD_ADDR_EXP 96
31610: PUSH
31611: LD_EXP 96
31615: PPUSH
31616: LD_VAR 0 5
31620: PPUSH
31621: CALL_OW 3
31625: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31626: CALL 31791 0 0
// exit ;
31630: POP
31631: POP
31632: GO 31786
// end else
31634: GO 31732
// if factory = factoryWaypoints [ i ] [ 2 ] then
31636: LD_VAR 0 1
31640: PUSH
31641: LD_EXP 96
31645: PUSH
31646: LD_VAR 0 5
31650: ARRAY
31651: PUSH
31652: LD_INT 2
31654: ARRAY
31655: EQUAL
31656: IFFALSE 31732
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31658: LD_ADDR_EXP 96
31662: PUSH
31663: LD_EXP 96
31667: PPUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: CALL_OW 3
31677: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31678: LD_ADDR_EXP 96
31682: PUSH
31683: LD_EXP 96
31687: PPUSH
31688: LD_VAR 0 1
31692: PPUSH
31693: CALL_OW 255
31697: PUSH
31698: LD_VAR 0 1
31702: PUSH
31703: LD_VAR 0 2
31707: PUSH
31708: LD_VAR 0 3
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: PPUSH
31719: CALL 75898 0 2
31723: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31724: CALL 31791 0 0
// exit ;
31728: POP
31729: POP
31730: GO 31786
// end ; end ;
31732: GO 31571
31734: POP
31735: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31736: LD_ADDR_EXP 96
31740: PUSH
31741: LD_EXP 96
31745: PPUSH
31746: LD_VAR 0 1
31750: PPUSH
31751: CALL_OW 255
31755: PUSH
31756: LD_VAR 0 1
31760: PUSH
31761: LD_VAR 0 2
31765: PUSH
31766: LD_VAR 0 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: PPUSH
31777: CALL 75898 0 2
31781: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31782: CALL 31791 0 0
// end ;
31786: LD_VAR 0 4
31790: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31791: LD_INT 0
31793: PPUSH
31794: PPUSH
31795: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31796: LD_STRING resetFactoryWaypoint();
31798: PPUSH
31799: CALL_OW 559
// if factoryWaypoints then
31803: LD_EXP 96
31807: IFFALSE 31928
// begin list := factoryWaypoints ;
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_EXP 96
31818: ST_TO_ADDR
// for i := 1 to list do
31819: LD_ADDR_VAR 0 2
31823: PUSH
31824: DOUBLE
31825: LD_INT 1
31827: DEC
31828: ST_TO_ADDR
31829: LD_VAR 0 3
31833: PUSH
31834: FOR_TO
31835: IFFALSE 31926
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31837: LD_STRING setFactoryWaypointXY(
31839: PUSH
31840: LD_VAR 0 3
31844: PUSH
31845: LD_VAR 0 2
31849: ARRAY
31850: PUSH
31851: LD_INT 1
31853: ARRAY
31854: STR
31855: PUSH
31856: LD_STRING ,
31858: STR
31859: PUSH
31860: LD_VAR 0 3
31864: PUSH
31865: LD_VAR 0 2
31869: ARRAY
31870: PUSH
31871: LD_INT 2
31873: ARRAY
31874: STR
31875: PUSH
31876: LD_STRING ,
31878: STR
31879: PUSH
31880: LD_VAR 0 3
31884: PUSH
31885: LD_VAR 0 2
31889: ARRAY
31890: PUSH
31891: LD_INT 3
31893: ARRAY
31894: STR
31895: PUSH
31896: LD_STRING ,
31898: STR
31899: PUSH
31900: LD_VAR 0 3
31904: PUSH
31905: LD_VAR 0 2
31909: ARRAY
31910: PUSH
31911: LD_INT 4
31913: ARRAY
31914: STR
31915: PUSH
31916: LD_STRING )
31918: STR
31919: PPUSH
31920: CALL_OW 559
31924: GO 31834
31926: POP
31927: POP
// end ; end ;
31928: LD_VAR 0 1
31932: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31933: LD_INT 0
31935: PPUSH
// if HexInfo ( x , y ) = warehouse then
31936: LD_VAR 0 2
31940: PPUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: CALL_OW 428
31950: PUSH
31951: LD_VAR 0 1
31955: EQUAL
31956: IFFALSE 31983
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31958: LD_ADDR_EXP 97
31962: PUSH
31963: LD_EXP 97
31967: PPUSH
31968: LD_VAR 0 1
31972: PPUSH
31973: LD_INT 0
31975: PPUSH
31976: CALL_OW 1
31980: ST_TO_ADDR
31981: GO 32034
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31983: LD_ADDR_EXP 97
31987: PUSH
31988: LD_EXP 97
31992: PPUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: LD_VAR 0 1
32002: PPUSH
32003: CALL_OW 255
32007: PUSH
32008: LD_VAR 0 1
32012: PUSH
32013: LD_VAR 0 2
32017: PUSH
32018: LD_VAR 0 3
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 1
32033: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32034: CALL 32043 0 0
// end ;
32038: LD_VAR 0 4
32042: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32043: LD_INT 0
32045: PPUSH
32046: PPUSH
32047: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32048: LD_STRING resetWarehouseGatheringPoints();
32050: PPUSH
32051: CALL_OW 559
// if warehouseGatheringPoints then
32055: LD_EXP 97
32059: IFFALSE 32185
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32061: LD_ADDR_VAR 0 3
32065: PUSH
32066: LD_EXP 97
32070: PPUSH
32071: CALL 79660 0 1
32075: ST_TO_ADDR
// for i := 1 to list do
32076: LD_ADDR_VAR 0 2
32080: PUSH
32081: DOUBLE
32082: LD_INT 1
32084: DEC
32085: ST_TO_ADDR
32086: LD_VAR 0 3
32090: PUSH
32091: FOR_TO
32092: IFFALSE 32183
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32094: LD_STRING setWarehouseGatheringPointXY(
32096: PUSH
32097: LD_VAR 0 3
32101: PUSH
32102: LD_VAR 0 2
32106: ARRAY
32107: PUSH
32108: LD_INT 1
32110: ARRAY
32111: STR
32112: PUSH
32113: LD_STRING ,
32115: STR
32116: PUSH
32117: LD_VAR 0 3
32121: PUSH
32122: LD_VAR 0 2
32126: ARRAY
32127: PUSH
32128: LD_INT 2
32130: ARRAY
32131: STR
32132: PUSH
32133: LD_STRING ,
32135: STR
32136: PUSH
32137: LD_VAR 0 3
32141: PUSH
32142: LD_VAR 0 2
32146: ARRAY
32147: PUSH
32148: LD_INT 3
32150: ARRAY
32151: STR
32152: PUSH
32153: LD_STRING ,
32155: STR
32156: PUSH
32157: LD_VAR 0 3
32161: PUSH
32162: LD_VAR 0 2
32166: ARRAY
32167: PUSH
32168: LD_INT 4
32170: ARRAY
32171: STR
32172: PUSH
32173: LD_STRING )
32175: STR
32176: PPUSH
32177: CALL_OW 559
32181: GO 32091
32183: POP
32184: POP
// end ; end ;
32185: LD_VAR 0 1
32189: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32190: LD_EXP 97
32194: IFFALSE 32879
32196: GO 32198
32198: DISABLE
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
32205: PPUSH
32206: PPUSH
32207: PPUSH
32208: PPUSH
32209: PPUSH
// begin enable ;
32210: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_EXP 97
32220: PPUSH
32221: CALL 79660 0 1
32225: ST_TO_ADDR
// if not list then
32226: LD_VAR 0 3
32230: NOT
32231: IFFALSE 32235
// exit ;
32233: GO 32879
// for i := 1 to list do
32235: LD_ADDR_VAR 0 1
32239: PUSH
32240: DOUBLE
32241: LD_INT 1
32243: DEC
32244: ST_TO_ADDR
32245: LD_VAR 0 3
32249: PUSH
32250: FOR_TO
32251: IFFALSE 32877
// begin depot := list [ i ] [ 2 ] ;
32253: LD_ADDR_VAR 0 8
32257: PUSH
32258: LD_VAR 0 3
32262: PUSH
32263: LD_VAR 0 1
32267: ARRAY
32268: PUSH
32269: LD_INT 2
32271: ARRAY
32272: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32273: LD_ADDR_VAR 0 5
32277: PUSH
32278: LD_VAR 0 3
32282: PUSH
32283: LD_VAR 0 1
32287: ARRAY
32288: PUSH
32289: LD_INT 1
32291: ARRAY
32292: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32293: LD_VAR 0 8
32297: PPUSH
32298: CALL_OW 301
32302: PUSH
32303: LD_VAR 0 5
32307: PUSH
32308: LD_VAR 0 8
32312: PPUSH
32313: CALL_OW 255
32317: NONEQUAL
32318: OR
32319: IFFALSE 32348
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32321: LD_ADDR_EXP 97
32325: PUSH
32326: LD_EXP 97
32330: PPUSH
32331: LD_VAR 0 8
32335: PPUSH
32336: LD_INT 0
32338: PPUSH
32339: CALL_OW 1
32343: ST_TO_ADDR
// exit ;
32344: POP
32345: POP
32346: GO 32879
// end ; x := list [ i ] [ 3 ] ;
32348: LD_ADDR_VAR 0 6
32352: PUSH
32353: LD_VAR 0 3
32357: PUSH
32358: LD_VAR 0 1
32362: ARRAY
32363: PUSH
32364: LD_INT 3
32366: ARRAY
32367: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32368: LD_ADDR_VAR 0 7
32372: PUSH
32373: LD_VAR 0 3
32377: PUSH
32378: LD_VAR 0 1
32382: ARRAY
32383: PUSH
32384: LD_INT 4
32386: ARRAY
32387: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32388: LD_ADDR_VAR 0 9
32392: PUSH
32393: LD_VAR 0 6
32397: PPUSH
32398: LD_VAR 0 7
32402: PPUSH
32403: LD_INT 16
32405: PPUSH
32406: CALL 78244 0 3
32410: ST_TO_ADDR
// if not cratesNearbyPoint then
32411: LD_VAR 0 9
32415: NOT
32416: IFFALSE 32422
// exit ;
32418: POP
32419: POP
32420: GO 32879
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32422: LD_ADDR_VAR 0 4
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_VAR 0 5
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: LD_INT 60
32444: PUSH
32445: EMPTY
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 91
32454: PUSH
32455: LD_VAR 0 8
32459: PUSH
32460: LD_INT 6
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 25
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 25
32483: PUSH
32484: LD_INT 16
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: PPUSH
32502: CALL_OW 69
32506: PUSH
32507: LD_VAR 0 8
32511: PPUSH
32512: CALL_OW 313
32516: PPUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 60
32522: PUSH
32523: EMPTY
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 25
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 25
32545: PUSH
32546: LD_INT 16
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 72
32566: UNION
32567: ST_TO_ADDR
// if tmp then
32568: LD_VAR 0 4
32572: IFFALSE 32652
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32574: LD_ADDR_VAR 0 4
32578: PUSH
32579: LD_VAR 0 4
32583: PPUSH
32584: LD_INT 3
32586: PPUSH
32587: CALL 76213 0 2
32591: ST_TO_ADDR
// for j in tmp do
32592: LD_ADDR_VAR 0 2
32596: PUSH
32597: LD_VAR 0 4
32601: PUSH
32602: FOR_IN
32603: IFFALSE 32646
// begin if IsInUnit ( j ) then
32605: LD_VAR 0 2
32609: PPUSH
32610: CALL_OW 310
32614: IFFALSE 32625
// ComExit ( j ) ;
32616: LD_VAR 0 2
32620: PPUSH
32621: CALL 76296 0 1
// AddComCollect ( j , x , y ) ;
32625: LD_VAR 0 2
32629: PPUSH
32630: LD_VAR 0 6
32634: PPUSH
32635: LD_VAR 0 7
32639: PPUSH
32640: CALL_OW 177
// end ;
32644: GO 32602
32646: POP
32647: POP
// exit ;
32648: POP
32649: POP
32650: GO 32879
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32652: LD_ADDR_VAR 0 4
32656: PUSH
32657: LD_INT 22
32659: PUSH
32660: LD_VAR 0 5
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 91
32671: PUSH
32672: LD_VAR 0 8
32676: PUSH
32677: LD_INT 8
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 34
32690: PUSH
32691: LD_INT 12
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 34
32700: PUSH
32701: LD_INT 51
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 34
32710: PUSH
32711: LD_INT 32
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 34
32720: PUSH
32721: LD_INT 89
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: PPUSH
32740: CALL_OW 69
32744: ST_TO_ADDR
// if tmp then
32745: LD_VAR 0 4
32749: IFFALSE 32875
// begin for j in tmp do
32751: LD_ADDR_VAR 0 2
32755: PUSH
32756: LD_VAR 0 4
32760: PUSH
32761: FOR_IN
32762: IFFALSE 32873
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32764: LD_VAR 0 2
32768: PPUSH
32769: CALL_OW 262
32773: PUSH
32774: LD_INT 3
32776: EQUAL
32777: PUSH
32778: LD_VAR 0 2
32782: PPUSH
32783: CALL_OW 261
32787: PUSH
32788: LD_INT 20
32790: GREATER
32791: OR
32792: PUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: CALL_OW 314
32802: NOT
32803: AND
32804: PUSH
32805: LD_VAR 0 2
32809: PPUSH
32810: CALL_OW 263
32814: PUSH
32815: LD_INT 1
32817: NONEQUAL
32818: PUSH
32819: LD_VAR 0 2
32823: PPUSH
32824: CALL_OW 311
32828: OR
32829: AND
32830: IFFALSE 32871
// begin ComCollect ( j , x , y ) ;
32832: LD_VAR 0 2
32836: PPUSH
32837: LD_VAR 0 6
32841: PPUSH
32842: LD_VAR 0 7
32846: PPUSH
32847: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32851: LD_VAR 0 2
32855: PPUSH
32856: LD_VAR 0 8
32860: PPUSH
32861: CALL_OW 172
// exit ;
32865: POP
32866: POP
32867: POP
32868: POP
32869: GO 32879
// end ;
32871: GO 32761
32873: POP
32874: POP
// end ; end ;
32875: GO 32250
32877: POP
32878: POP
// end ; end_of_file
32879: PPOPN 9
32881: END
// export function SOS_UnitDestroyed ( un ) ; begin
32882: LD_INT 0
32884: PPUSH
// ComRadiation ( un ) ;
32885: LD_VAR 0 1
32889: PPUSH
32890: CALL 33871 0 1
// end ;
32894: LD_VAR 0 2
32898: RET
// export function SOS_UnitKamikazed ( un ) ; begin
32899: LD_INT 0
32901: PPUSH
// ComRadiation ( un ) ;
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL 33871 0 1
// end ;
32911: LD_VAR 0 2
32915: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32916: LD_INT 0
32918: PPUSH
// end ;
32919: LD_VAR 0 4
32923: RET
// export function SOS_Command ( cmd ) ; begin
32924: LD_INT 0
32926: PPUSH
// end ;
32927: LD_VAR 0 2
32931: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32932: LD_INT 0
32934: PPUSH
// end ;
32935: LD_VAR 0 6
32939: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
32940: LD_INT 0
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
// if not vehicle or not factory then
32947: LD_VAR 0 1
32951: NOT
32952: PUSH
32953: LD_VAR 0 2
32957: NOT
32958: OR
32959: IFFALSE 32963
// exit ;
32961: GO 33462
// if not factoryWaypoints then
32963: LD_EXP 96
32967: NOT
32968: IFFALSE 32972
// exit ;
32970: GO 33462
// for i := 1 to Count ( factoryWaypoints ) do
32972: LD_ADDR_VAR 0 4
32976: PUSH
32977: DOUBLE
32978: LD_INT 1
32980: DEC
32981: ST_TO_ADDR
32982: LD_EXP 96
32986: PPUSH
32987: CALL 40289 0 1
32991: PUSH
32992: FOR_TO
32993: IFFALSE 33460
// if factoryWaypoints [ i ] [ 2 ] = factory then
32995: LD_EXP 96
32999: PUSH
33000: LD_VAR 0 4
33004: ARRAY
33005: PUSH
33006: LD_INT 2
33008: ARRAY
33009: PUSH
33010: LD_VAR 0 2
33014: EQUAL
33015: IFFALSE 33458
// begin if GetControl ( vehicle ) = control_manual then
33017: LD_VAR 0 1
33021: PPUSH
33022: CALL_OW 263
33026: PUSH
33027: LD_INT 1
33029: EQUAL
33030: IFFALSE 33341
// begin driver := IsDrivenBy ( vehicle ) ;
33032: LD_ADDR_VAR 0 6
33036: PUSH
33037: LD_VAR 0 1
33041: PPUSH
33042: CALL_OW 311
33046: ST_TO_ADDR
// tag := GetTag ( driver ) ;
33047: LD_ADDR_VAR 0 5
33051: PUSH
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 110
33061: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
33062: LD_VAR 0 5
33066: PUSH
33067: LD_INT 501
33069: EQUAL
33070: PUSH
33071: LD_VAR 0 1
33075: PPUSH
33076: CALL_OW 110
33080: PUSH
33081: LD_INT 501
33083: EQUAL
33084: OR
33085: IFFALSE 33091
// exit ;
33087: POP
33088: POP
33089: GO 33462
// if not HasTask ( driver ) then
33091: LD_VAR 0 6
33095: PPUSH
33096: CALL_OW 314
33100: NOT
33101: IFFALSE 33339
// begin SetTag ( driver , tDriver ) ;
33103: LD_VAR 0 6
33107: PPUSH
33108: LD_INT 501
33110: PPUSH
33111: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
33115: LD_VAR 0 1
33119: PPUSH
33120: LD_INT 501
33122: PPUSH
33123: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33127: LD_ADDR_VAR 0 7
33131: PUSH
33132: LD_EXP 96
33136: PUSH
33137: LD_VAR 0 4
33141: ARRAY
33142: PUSH
33143: LD_INT 3
33145: ARRAY
33146: PPUSH
33147: LD_EXP 96
33151: PUSH
33152: LD_VAR 0 4
33156: ARRAY
33157: PUSH
33158: LD_INT 4
33160: ARRAY
33161: PPUSH
33162: CALL_OW 428
33166: ST_TO_ADDR
// if hex then
33167: LD_VAR 0 7
33171: IFFALSE 33189
// ComMoveUnit ( driver , hex ) else
33173: LD_VAR 0 6
33177: PPUSH
33178: LD_VAR 0 7
33182: PPUSH
33183: CALL_OW 112
33187: GO 33228
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33189: LD_VAR 0 6
33193: PPUSH
33194: LD_EXP 96
33198: PUSH
33199: LD_VAR 0 4
33203: ARRAY
33204: PUSH
33205: LD_INT 3
33207: ARRAY
33208: PPUSH
33209: LD_EXP 96
33213: PUSH
33214: LD_VAR 0 4
33218: ARRAY
33219: PUSH
33220: LD_INT 4
33222: ARRAY
33223: PPUSH
33224: CALL_OW 111
// AddComExitVehicle ( driver ) ;
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 181
// if Multiplayer then
33237: LD_OWVAR 4
33241: IFFALSE 33290
// begin repeat wait ( 10 ) ;
33243: LD_INT 10
33245: PPUSH
33246: CALL_OW 67
// until not IsInUnit ( driver ) ;
33250: LD_VAR 0 6
33254: PPUSH
33255: CALL_OW 310
33259: NOT
33260: IFFALSE 33243
// if not HasTask ( driver ) then
33262: LD_VAR 0 6
33266: PPUSH
33267: CALL_OW 314
33271: NOT
33272: IFFALSE 33288
// ComEnterUnit ( driver , factory ) ;
33274: LD_VAR 0 6
33278: PPUSH
33279: LD_VAR 0 2
33283: PPUSH
33284: CALL_OW 120
// end else
33288: GO 33304
// AddComEnterUnit ( driver , factory ) ;
33290: LD_VAR 0 6
33294: PPUSH
33295: LD_VAR 0 2
33299: PPUSH
33300: CALL_OW 180
// wait ( 0 0$1 ) ;
33304: LD_INT 35
33306: PPUSH
33307: CALL_OW 67
// SetTag ( driver , tag ) ;
33311: LD_VAR 0 6
33315: PPUSH
33316: LD_VAR 0 5
33320: PPUSH
33321: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
33325: LD_VAR 0 1
33329: PPUSH
33330: LD_INT 0
33332: PPUSH
33333: CALL_OW 109
// break ;
33337: GO 33460
// end ; end else
33339: GO 33458
// if GetControl ( vehicle ) = control_remote then
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 263
33350: PUSH
33351: LD_INT 2
33353: EQUAL
33354: IFFALSE 33417
// begin wait ( 0 0$2 ) ;
33356: LD_INT 70
33358: PPUSH
33359: CALL_OW 67
// if Connect ( vehicle ) then
33363: LD_VAR 0 1
33367: PPUSH
33368: CALL 46495 0 1
33372: IFFALSE 33413
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33374: LD_VAR 0 1
33378: PPUSH
33379: LD_EXP 96
33383: PUSH
33384: LD_VAR 0 4
33388: ARRAY
33389: PUSH
33390: LD_INT 3
33392: ARRAY
33393: PPUSH
33394: LD_EXP 96
33398: PUSH
33399: LD_VAR 0 4
33403: ARRAY
33404: PUSH
33405: LD_INT 4
33407: ARRAY
33408: PPUSH
33409: CALL_OW 171
// break ;
33413: GO 33460
// end else
33415: GO 33458
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33417: LD_VAR 0 1
33421: PPUSH
33422: LD_EXP 96
33426: PUSH
33427: LD_VAR 0 4
33431: ARRAY
33432: PUSH
33433: LD_INT 3
33435: ARRAY
33436: PPUSH
33437: LD_EXP 96
33441: PUSH
33442: LD_VAR 0 4
33446: ARRAY
33447: PUSH
33448: LD_INT 4
33450: ARRAY
33451: PPUSH
33452: CALL_OW 171
// break ;
33456: GO 33460
// end ; end ;
33458: GO 32992
33460: POP
33461: POP
// end ;
33462: LD_VAR 0 3
33466: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33467: LD_INT 0
33469: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33470: LD_VAR 0 1
33474: PUSH
33475: LD_INT 250
33477: EQUAL
33478: PUSH
33479: LD_VAR 0 2
33483: PPUSH
33484: CALL_OW 264
33488: PUSH
33489: LD_INT 81
33491: EQUAL
33492: AND
33493: IFFALSE 33514
// MinerPlaceMine ( unit , x , y ) ;
33495: LD_VAR 0 2
33499: PPUSH
33500: LD_VAR 0 4
33504: PPUSH
33505: LD_VAR 0 5
33509: PPUSH
33510: CALL 36606 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33514: LD_VAR 0 1
33518: PUSH
33519: LD_INT 251
33521: EQUAL
33522: PUSH
33523: LD_VAR 0 2
33527: PPUSH
33528: CALL_OW 264
33532: PUSH
33533: LD_INT 81
33535: EQUAL
33536: AND
33537: IFFALSE 33558
// MinerDetonateMine ( unit , x , y ) ;
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: LD_VAR 0 5
33553: PPUSH
33554: CALL 36881 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33558: LD_VAR 0 1
33562: PUSH
33563: LD_INT 252
33565: EQUAL
33566: PUSH
33567: LD_VAR 0 2
33571: PPUSH
33572: CALL_OW 264
33576: PUSH
33577: LD_INT 81
33579: EQUAL
33580: AND
33581: IFFALSE 33602
// MinerCreateMinefield ( unit , x , y ) ;
33583: LD_VAR 0 2
33587: PPUSH
33588: LD_VAR 0 4
33592: PPUSH
33593: LD_VAR 0 5
33597: PPUSH
33598: CALL 37298 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33602: LD_VAR 0 1
33606: PUSH
33607: LD_INT 253
33609: EQUAL
33610: PUSH
33611: LD_VAR 0 2
33615: PPUSH
33616: CALL_OW 257
33620: PUSH
33621: LD_INT 5
33623: EQUAL
33624: AND
33625: IFFALSE 33646
// ComBinocular ( unit , x , y ) ;
33627: LD_VAR 0 2
33631: PPUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: LD_VAR 0 5
33641: PPUSH
33642: CALL 37667 0 3
// if selectedUnit then
33646: LD_VAR 0 3
33650: IFFALSE 33706
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33652: LD_VAR 0 1
33656: PUSH
33657: LD_INT 254
33659: EQUAL
33660: PUSH
33661: LD_VAR 0 2
33665: PPUSH
33666: CALL_OW 264
33670: PUSH
33671: LD_INT 99
33673: EQUAL
33674: AND
33675: PUSH
33676: LD_VAR 0 3
33680: PPUSH
33681: CALL_OW 263
33685: PUSH
33686: LD_INT 3
33688: EQUAL
33689: AND
33690: IFFALSE 33706
// HackDestroyVehicle ( unit , selectedUnit ) ;
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_VAR 0 3
33701: PPUSH
33702: CALL 35970 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33706: LD_VAR 0 1
33710: PUSH
33711: LD_INT 255
33713: EQUAL
33714: PUSH
33715: LD_VAR 0 2
33719: PPUSH
33720: CALL_OW 264
33724: PUSH
33725: LD_INT 14
33727: PUSH
33728: LD_INT 53
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: IN
33735: AND
33736: PUSH
33737: LD_VAR 0 4
33741: PPUSH
33742: LD_VAR 0 5
33746: PPUSH
33747: CALL_OW 488
33751: AND
33752: IFFALSE 33776
// CutTreeXYR ( unit , x , y , 12 ) ;
33754: LD_VAR 0 2
33758: PPUSH
33759: LD_VAR 0 4
33763: PPUSH
33764: LD_VAR 0 5
33768: PPUSH
33769: LD_INT 12
33771: PPUSH
33772: CALL 33967 0 4
// if cmd = 256 then
33776: LD_VAR 0 1
33780: PUSH
33781: LD_INT 256
33783: EQUAL
33784: IFFALSE 33805
// SetFactoryWaypoint ( unit , x , y ) ;
33786: LD_VAR 0 2
33790: PPUSH
33791: LD_VAR 0 4
33795: PPUSH
33796: LD_VAR 0 5
33800: PPUSH
33801: CALL 31443 0 3
// if cmd = 257 then
33805: LD_VAR 0 1
33809: PUSH
33810: LD_INT 257
33812: EQUAL
33813: IFFALSE 33834
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33815: LD_VAR 0 2
33819: PPUSH
33820: LD_VAR 0 4
33824: PPUSH
33825: LD_VAR 0 5
33829: PPUSH
33830: CALL 31933 0 3
// if cmd = 258 then
33834: LD_VAR 0 1
33838: PUSH
33839: LD_INT 258
33841: EQUAL
33842: IFFALSE 33866
// BurnTreeXYR ( unit , x , y , 8 ) ;
33844: LD_VAR 0 2
33848: PPUSH
33849: LD_VAR 0 4
33853: PPUSH
33854: LD_VAR 0 5
33858: PPUSH
33859: LD_INT 8
33861: PPUSH
33862: CALL 34361 0 4
// end ;
33866: LD_VAR 0 6
33870: RET
// export function ComRadiation ( un ) ; var eff ; begin
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
33875: LD_VAR 0 1
33879: PPUSH
33880: CALL_OW 264
33884: PUSH
33885: LD_INT 91
33887: NONEQUAL
33888: IFFALSE 33892
// exit ;
33890: GO 33962
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33892: LD_INT 68
33894: PPUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 255
33904: PPUSH
33905: CALL_OW 321
33909: PUSH
33910: LD_INT 2
33912: EQUAL
33913: IFFALSE 33925
// eff := 70 else
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_INT 70
33922: ST_TO_ADDR
33923: GO 33933
// eff := 30 ;
33925: LD_ADDR_VAR 0 3
33929: PUSH
33930: LD_INT 30
33932: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33933: LD_VAR 0 1
33937: PPUSH
33938: CALL_OW 250
33942: PPUSH
33943: LD_VAR 0 1
33947: PPUSH
33948: CALL_OW 251
33952: PPUSH
33953: LD_VAR 0 3
33957: PPUSH
33958: CALL_OW 495
// end ;
33962: LD_VAR 0 2
33966: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33967: LD_INT 0
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 302
33987: NOT
33988: PUSH
33989: LD_VAR 0 2
33993: PPUSH
33994: LD_VAR 0 3
33998: PPUSH
33999: CALL_OW 488
34003: NOT
34004: OR
34005: PUSH
34006: LD_VAR 0 4
34010: NOT
34011: OR
34012: IFFALSE 34016
// exit ;
34014: GO 34356
// list := [ ] ;
34016: LD_ADDR_VAR 0 13
34020: PUSH
34021: EMPTY
34022: ST_TO_ADDR
// if x - r < 0 then
34023: LD_VAR 0 2
34027: PUSH
34028: LD_VAR 0 4
34032: MINUS
34033: PUSH
34034: LD_INT 0
34036: LESS
34037: IFFALSE 34049
// min_x := 0 else
34039: LD_ADDR_VAR 0 7
34043: PUSH
34044: LD_INT 0
34046: ST_TO_ADDR
34047: GO 34065
// min_x := x - r ;
34049: LD_ADDR_VAR 0 7
34053: PUSH
34054: LD_VAR 0 2
34058: PUSH
34059: LD_VAR 0 4
34063: MINUS
34064: ST_TO_ADDR
// if y - r < 0 then
34065: LD_VAR 0 3
34069: PUSH
34070: LD_VAR 0 4
34074: MINUS
34075: PUSH
34076: LD_INT 0
34078: LESS
34079: IFFALSE 34091
// min_y := 0 else
34081: LD_ADDR_VAR 0 8
34085: PUSH
34086: LD_INT 0
34088: ST_TO_ADDR
34089: GO 34107
// min_y := y - r ;
34091: LD_ADDR_VAR 0 8
34095: PUSH
34096: LD_VAR 0 3
34100: PUSH
34101: LD_VAR 0 4
34105: MINUS
34106: ST_TO_ADDR
// max_x := x + r ;
34107: LD_ADDR_VAR 0 9
34111: PUSH
34112: LD_VAR 0 2
34116: PUSH
34117: LD_VAR 0 4
34121: PLUS
34122: ST_TO_ADDR
// max_y := y + r ;
34123: LD_ADDR_VAR 0 10
34127: PUSH
34128: LD_VAR 0 3
34132: PUSH
34133: LD_VAR 0 4
34137: PLUS
34138: ST_TO_ADDR
// for _x = min_x to max_x do
34139: LD_ADDR_VAR 0 11
34143: PUSH
34144: DOUBLE
34145: LD_VAR 0 7
34149: DEC
34150: ST_TO_ADDR
34151: LD_VAR 0 9
34155: PUSH
34156: FOR_TO
34157: IFFALSE 34274
// for _y = min_y to max_y do
34159: LD_ADDR_VAR 0 12
34163: PUSH
34164: DOUBLE
34165: LD_VAR 0 8
34169: DEC
34170: ST_TO_ADDR
34171: LD_VAR 0 10
34175: PUSH
34176: FOR_TO
34177: IFFALSE 34270
// begin if not ValidHex ( _x , _y ) then
34179: LD_VAR 0 11
34183: PPUSH
34184: LD_VAR 0 12
34188: PPUSH
34189: CALL_OW 488
34193: NOT
34194: IFFALSE 34198
// continue ;
34196: GO 34176
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34198: LD_VAR 0 11
34202: PPUSH
34203: LD_VAR 0 12
34207: PPUSH
34208: CALL_OW 351
34212: PUSH
34213: LD_VAR 0 11
34217: PPUSH
34218: LD_VAR 0 12
34222: PPUSH
34223: CALL_OW 554
34227: AND
34228: IFFALSE 34268
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34230: LD_ADDR_VAR 0 13
34234: PUSH
34235: LD_VAR 0 13
34239: PPUSH
34240: LD_VAR 0 13
34244: PUSH
34245: LD_INT 1
34247: PLUS
34248: PPUSH
34249: LD_VAR 0 11
34253: PUSH
34254: LD_VAR 0 12
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PPUSH
34263: CALL_OW 2
34267: ST_TO_ADDR
// end ;
34268: GO 34176
34270: POP
34271: POP
34272: GO 34156
34274: POP
34275: POP
// if not list then
34276: LD_VAR 0 13
34280: NOT
34281: IFFALSE 34285
// exit ;
34283: GO 34356
// for i in list do
34285: LD_ADDR_VAR 0 6
34289: PUSH
34290: LD_VAR 0 13
34294: PUSH
34295: FOR_IN
34296: IFFALSE 34354
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34298: LD_VAR 0 1
34302: PPUSH
34303: LD_STRING M
34305: PUSH
34306: LD_VAR 0 6
34310: PUSH
34311: LD_INT 1
34313: ARRAY
34314: PUSH
34315: LD_VAR 0 6
34319: PUSH
34320: LD_INT 2
34322: ARRAY
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: PPUSH
34348: CALL_OW 447
34352: GO 34295
34354: POP
34355: POP
// end ;
34356: LD_VAR 0 5
34360: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34361: LD_INT 0
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34373: LD_VAR 0 1
34377: PPUSH
34378: CALL_OW 302
34382: NOT
34383: PUSH
34384: LD_VAR 0 2
34388: PPUSH
34389: LD_VAR 0 3
34393: PPUSH
34394: CALL_OW 488
34398: NOT
34399: OR
34400: PUSH
34401: LD_VAR 0 4
34405: NOT
34406: OR
34407: IFFALSE 34411
// exit ;
34409: GO 34924
// list := [ ] ;
34411: LD_ADDR_VAR 0 13
34415: PUSH
34416: EMPTY
34417: ST_TO_ADDR
// if x - r < 0 then
34418: LD_VAR 0 2
34422: PUSH
34423: LD_VAR 0 4
34427: MINUS
34428: PUSH
34429: LD_INT 0
34431: LESS
34432: IFFALSE 34444
// min_x := 0 else
34434: LD_ADDR_VAR 0 7
34438: PUSH
34439: LD_INT 0
34441: ST_TO_ADDR
34442: GO 34460
// min_x := x - r ;
34444: LD_ADDR_VAR 0 7
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 4
34458: MINUS
34459: ST_TO_ADDR
// if y - r < 0 then
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 4
34469: MINUS
34470: PUSH
34471: LD_INT 0
34473: LESS
34474: IFFALSE 34486
// min_y := 0 else
34476: LD_ADDR_VAR 0 8
34480: PUSH
34481: LD_INT 0
34483: ST_TO_ADDR
34484: GO 34502
// min_y := y - r ;
34486: LD_ADDR_VAR 0 8
34490: PUSH
34491: LD_VAR 0 3
34495: PUSH
34496: LD_VAR 0 4
34500: MINUS
34501: ST_TO_ADDR
// max_x := x + r ;
34502: LD_ADDR_VAR 0 9
34506: PUSH
34507: LD_VAR 0 2
34511: PUSH
34512: LD_VAR 0 4
34516: PLUS
34517: ST_TO_ADDR
// max_y := y + r ;
34518: LD_ADDR_VAR 0 10
34522: PUSH
34523: LD_VAR 0 3
34527: PUSH
34528: LD_VAR 0 4
34532: PLUS
34533: ST_TO_ADDR
// for _x = min_x to max_x do
34534: LD_ADDR_VAR 0 11
34538: PUSH
34539: DOUBLE
34540: LD_VAR 0 7
34544: DEC
34545: ST_TO_ADDR
34546: LD_VAR 0 9
34550: PUSH
34551: FOR_TO
34552: IFFALSE 34669
// for _y = min_y to max_y do
34554: LD_ADDR_VAR 0 12
34558: PUSH
34559: DOUBLE
34560: LD_VAR 0 8
34564: DEC
34565: ST_TO_ADDR
34566: LD_VAR 0 10
34570: PUSH
34571: FOR_TO
34572: IFFALSE 34665
// begin if not ValidHex ( _x , _y ) then
34574: LD_VAR 0 11
34578: PPUSH
34579: LD_VAR 0 12
34583: PPUSH
34584: CALL_OW 488
34588: NOT
34589: IFFALSE 34593
// continue ;
34591: GO 34571
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34593: LD_VAR 0 11
34597: PPUSH
34598: LD_VAR 0 12
34602: PPUSH
34603: CALL_OW 351
34607: PUSH
34608: LD_VAR 0 11
34612: PPUSH
34613: LD_VAR 0 12
34617: PPUSH
34618: CALL_OW 554
34622: AND
34623: IFFALSE 34663
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34625: LD_ADDR_VAR 0 13
34629: PUSH
34630: LD_VAR 0 13
34634: PPUSH
34635: LD_VAR 0 13
34639: PUSH
34640: LD_INT 1
34642: PLUS
34643: PPUSH
34644: LD_VAR 0 11
34648: PUSH
34649: LD_VAR 0 12
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 2
34662: ST_TO_ADDR
// end ;
34663: GO 34571
34665: POP
34666: POP
34667: GO 34551
34669: POP
34670: POP
// if not list then
34671: LD_VAR 0 13
34675: NOT
34676: IFFALSE 34680
// exit ;
34678: GO 34924
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
34680: LD_ADDR_VAR 0 13
34684: PUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: LD_VAR 0 13
34694: PPUSH
34695: LD_INT 1
34697: PPUSH
34698: LD_INT 1
34700: PPUSH
34701: CALL 43637 0 4
34705: ST_TO_ADDR
// ComStop ( flame ) ;
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 141
// for i in list do
34715: LD_ADDR_VAR 0 6
34719: PUSH
34720: LD_VAR 0 13
34724: PUSH
34725: FOR_IN
34726: IFFALSE 34757
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34728: LD_VAR 0 1
34732: PPUSH
34733: LD_VAR 0 6
34737: PUSH
34738: LD_INT 1
34740: ARRAY
34741: PPUSH
34742: LD_VAR 0 6
34746: PUSH
34747: LD_INT 2
34749: ARRAY
34750: PPUSH
34751: CALL_OW 176
34755: GO 34725
34757: POP
34758: POP
// repeat wait ( 0 0$1 ) ;
34759: LD_INT 35
34761: PPUSH
34762: CALL_OW 67
// task := GetTaskList ( flame ) ;
34766: LD_ADDR_VAR 0 14
34770: PUSH
34771: LD_VAR 0 1
34775: PPUSH
34776: CALL_OW 437
34780: ST_TO_ADDR
// if not task then
34781: LD_VAR 0 14
34785: NOT
34786: IFFALSE 34790
// exit ;
34788: GO 34924
// if task [ 1 ] [ 1 ] <> | then
34790: LD_VAR 0 14
34794: PUSH
34795: LD_INT 1
34797: ARRAY
34798: PUSH
34799: LD_INT 1
34801: ARRAY
34802: PUSH
34803: LD_STRING |
34805: NONEQUAL
34806: IFFALSE 34810
// exit ;
34808: GO 34924
// _x := task [ 1 ] [ 2 ] ;
34810: LD_ADDR_VAR 0 11
34814: PUSH
34815: LD_VAR 0 14
34819: PUSH
34820: LD_INT 1
34822: ARRAY
34823: PUSH
34824: LD_INT 2
34826: ARRAY
34827: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34828: LD_ADDR_VAR 0 12
34832: PUSH
34833: LD_VAR 0 14
34837: PUSH
34838: LD_INT 1
34840: ARRAY
34841: PUSH
34842: LD_INT 3
34844: ARRAY
34845: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34846: LD_VAR 0 11
34850: PPUSH
34851: LD_VAR 0 12
34855: PPUSH
34856: CALL_OW 351
34860: NOT
34861: PUSH
34862: LD_VAR 0 11
34866: PPUSH
34867: LD_VAR 0 12
34871: PPUSH
34872: CALL_OW 554
34876: NOT
34877: OR
34878: IFFALSE 34912
// begin task := Delete ( task , 1 ) ;
34880: LD_ADDR_VAR 0 14
34884: PUSH
34885: LD_VAR 0 14
34889: PPUSH
34890: LD_INT 1
34892: PPUSH
34893: CALL_OW 3
34897: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34898: LD_VAR 0 1
34902: PPUSH
34903: LD_VAR 0 14
34907: PPUSH
34908: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 314
34921: NOT
34922: IFFALSE 34759
// end ;
34924: LD_VAR 0 5
34928: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34929: LD_EXP 99
34933: NOT
34934: IFFALSE 34984
34936: GO 34938
34938: DISABLE
// begin initHack := true ;
34939: LD_ADDR_EXP 99
34943: PUSH
34944: LD_INT 1
34946: ST_TO_ADDR
// hackTanks := [ ] ;
34947: LD_ADDR_EXP 100
34951: PUSH
34952: EMPTY
34953: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34954: LD_ADDR_EXP 101
34958: PUSH
34959: EMPTY
34960: ST_TO_ADDR
// hackLimit := 3 ;
34961: LD_ADDR_EXP 102
34965: PUSH
34966: LD_INT 3
34968: ST_TO_ADDR
// hackDist := 12 ;
34969: LD_ADDR_EXP 103
34973: PUSH
34974: LD_INT 12
34976: ST_TO_ADDR
// hackCounter := [ ] ;
34977: LD_ADDR_EXP 104
34981: PUSH
34982: EMPTY
34983: ST_TO_ADDR
// end ;
34984: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34985: LD_EXP 99
34989: PUSH
34990: LD_INT 34
34992: PUSH
34993: LD_INT 99
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PPUSH
35000: CALL_OW 69
35004: AND
35005: IFFALSE 35258
35007: GO 35009
35009: DISABLE
35010: LD_INT 0
35012: PPUSH
35013: PPUSH
// begin enable ;
35014: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35015: LD_ADDR_VAR 0 1
35019: PUSH
35020: LD_INT 34
35022: PUSH
35023: LD_INT 99
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PPUSH
35030: CALL_OW 69
35034: PUSH
35035: FOR_IN
35036: IFFALSE 35256
// begin if not i in hackTanks then
35038: LD_VAR 0 1
35042: PUSH
35043: LD_EXP 100
35047: IN
35048: NOT
35049: IFFALSE 35132
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35051: LD_ADDR_EXP 100
35055: PUSH
35056: LD_EXP 100
35060: PPUSH
35061: LD_EXP 100
35065: PUSH
35066: LD_INT 1
35068: PLUS
35069: PPUSH
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL_OW 1
35079: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35080: LD_ADDR_EXP 101
35084: PUSH
35085: LD_EXP 101
35089: PPUSH
35090: LD_EXP 101
35094: PUSH
35095: LD_INT 1
35097: PLUS
35098: PPUSH
35099: EMPTY
35100: PPUSH
35101: CALL_OW 1
35105: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35106: LD_ADDR_EXP 104
35110: PUSH
35111: LD_EXP 104
35115: PPUSH
35116: LD_EXP 104
35120: PUSH
35121: LD_INT 1
35123: PLUS
35124: PPUSH
35125: EMPTY
35126: PPUSH
35127: CALL_OW 1
35131: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 302
35141: NOT
35142: IFFALSE 35155
// begin HackUnlinkAll ( i ) ;
35144: LD_VAR 0 1
35148: PPUSH
35149: CALL 35261 0 1
// continue ;
35153: GO 35035
// end ; HackCheckCapturedStatus ( i ) ;
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL 35704 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35164: LD_ADDR_VAR 0 2
35168: PUSH
35169: LD_INT 81
35171: PUSH
35172: LD_VAR 0 1
35176: PPUSH
35177: CALL_OW 255
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 33
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 91
35198: PUSH
35199: LD_VAR 0 1
35203: PUSH
35204: LD_EXP 103
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 50
35216: PUSH
35217: EMPTY
35218: LIST
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: PPUSH
35226: CALL_OW 69
35230: ST_TO_ADDR
// if not tmp then
35231: LD_VAR 0 2
35235: NOT
35236: IFFALSE 35240
// continue ;
35238: GO 35035
// HackLink ( i , tmp ) ;
35240: LD_VAR 0 1
35244: PPUSH
35245: LD_VAR 0 2
35249: PPUSH
35250: CALL 35397 0 2
// end ;
35254: GO 35035
35256: POP
35257: POP
// end ;
35258: PPOPN 2
35260: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35261: LD_INT 0
35263: PPUSH
35264: PPUSH
35265: PPUSH
// if not hack in hackTanks then
35266: LD_VAR 0 1
35270: PUSH
35271: LD_EXP 100
35275: IN
35276: NOT
35277: IFFALSE 35281
// exit ;
35279: GO 35392
// index := GetElementIndex ( hackTanks , hack ) ;
35281: LD_ADDR_VAR 0 4
35285: PUSH
35286: LD_EXP 100
35290: PPUSH
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL 42934 0 2
35300: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35301: LD_EXP 101
35305: PUSH
35306: LD_VAR 0 4
35310: ARRAY
35311: IFFALSE 35392
// begin for i in hackTanksCaptured [ index ] do
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_EXP 101
35322: PUSH
35323: LD_VAR 0 4
35327: ARRAY
35328: PUSH
35329: FOR_IN
35330: IFFALSE 35356
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35332: LD_VAR 0 3
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PPUSH
35341: LD_VAR 0 3
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: PPUSH
35350: CALL_OW 235
35354: GO 35329
35356: POP
35357: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35358: LD_ADDR_EXP 101
35362: PUSH
35363: LD_EXP 101
35367: PPUSH
35368: LD_VAR 0 4
35372: PPUSH
35373: EMPTY
35374: PPUSH
35375: CALL_OW 1
35379: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35380: LD_VAR 0 1
35384: PPUSH
35385: LD_INT 0
35387: PPUSH
35388: CALL_OW 505
// end ; end ;
35392: LD_VAR 0 2
35396: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35397: LD_INT 0
35399: PPUSH
35400: PPUSH
35401: PPUSH
// if not hack in hackTanks or not vehicles then
35402: LD_VAR 0 1
35406: PUSH
35407: LD_EXP 100
35411: IN
35412: NOT
35413: PUSH
35414: LD_VAR 0 2
35418: NOT
35419: OR
35420: IFFALSE 35424
// exit ;
35422: GO 35699
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: LD_VAR 0 2
35438: PPUSH
35439: LD_INT 1
35441: PPUSH
35442: LD_INT 1
35444: PPUSH
35445: CALL 43584 0 4
35449: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35450: LD_ADDR_VAR 0 5
35454: PUSH
35455: LD_EXP 100
35459: PPUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL 42934 0 2
35469: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35470: LD_EXP 101
35474: PUSH
35475: LD_VAR 0 5
35479: ARRAY
35480: PUSH
35481: LD_EXP 102
35485: LESS
35486: IFFALSE 35675
// begin for i := 1 to vehicles do
35488: LD_ADDR_VAR 0 4
35492: PUSH
35493: DOUBLE
35494: LD_INT 1
35496: DEC
35497: ST_TO_ADDR
35498: LD_VAR 0 2
35502: PUSH
35503: FOR_TO
35504: IFFALSE 35673
// begin if hackTanksCaptured [ index ] = hackLimit then
35506: LD_EXP 101
35510: PUSH
35511: LD_VAR 0 5
35515: ARRAY
35516: PUSH
35517: LD_EXP 102
35521: EQUAL
35522: IFFALSE 35526
// break ;
35524: GO 35673
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35526: LD_ADDR_EXP 104
35530: PUSH
35531: LD_EXP 104
35535: PPUSH
35536: LD_VAR 0 5
35540: PPUSH
35541: LD_EXP 104
35545: PUSH
35546: LD_VAR 0 5
35550: ARRAY
35551: PUSH
35552: LD_INT 1
35554: PLUS
35555: PPUSH
35556: CALL_OW 1
35560: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35561: LD_ADDR_EXP 101
35565: PUSH
35566: LD_EXP 101
35570: PPUSH
35571: LD_VAR 0 5
35575: PUSH
35576: LD_EXP 101
35580: PUSH
35581: LD_VAR 0 5
35585: ARRAY
35586: PUSH
35587: LD_INT 1
35589: PLUS
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PPUSH
35595: LD_VAR 0 2
35599: PUSH
35600: LD_VAR 0 4
35604: ARRAY
35605: PUSH
35606: LD_VAR 0 2
35610: PUSH
35611: LD_VAR 0 4
35615: ARRAY
35616: PPUSH
35617: CALL_OW 255
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PPUSH
35626: CALL 43149 0 3
35630: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35631: LD_VAR 0 2
35635: PUSH
35636: LD_VAR 0 4
35640: ARRAY
35641: PPUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: CALL_OW 255
35651: PPUSH
35652: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35656: LD_VAR 0 2
35660: PUSH
35661: LD_VAR 0 4
35665: ARRAY
35666: PPUSH
35667: CALL_OW 141
// end ;
35671: GO 35503
35673: POP
35674: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35675: LD_VAR 0 1
35679: PPUSH
35680: LD_EXP 101
35684: PUSH
35685: LD_VAR 0 5
35689: ARRAY
35690: PUSH
35691: LD_INT 0
35693: PLUS
35694: PPUSH
35695: CALL_OW 505
// end ;
35699: LD_VAR 0 3
35703: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35704: LD_INT 0
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
// if not hack in hackTanks then
35710: LD_VAR 0 1
35714: PUSH
35715: LD_EXP 100
35719: IN
35720: NOT
35721: IFFALSE 35725
// exit ;
35723: GO 35965
// index := GetElementIndex ( hackTanks , hack ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_EXP 100
35734: PPUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: CALL 42934 0 2
35744: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35745: LD_ADDR_VAR 0 3
35749: PUSH
35750: DOUBLE
35751: LD_EXP 101
35755: PUSH
35756: LD_VAR 0 4
35760: ARRAY
35761: INC
35762: ST_TO_ADDR
35763: LD_INT 1
35765: PUSH
35766: FOR_DOWNTO
35767: IFFALSE 35939
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35769: LD_ADDR_VAR 0 5
35773: PUSH
35774: LD_EXP 101
35778: PUSH
35779: LD_VAR 0 4
35783: ARRAY
35784: PUSH
35785: LD_VAR 0 3
35789: ARRAY
35790: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35791: LD_VAR 0 5
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: CALL_OW 302
35804: NOT
35805: PUSH
35806: LD_VAR 0 5
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PPUSH
35815: CALL_OW 255
35819: PUSH
35820: LD_VAR 0 1
35824: PPUSH
35825: CALL_OW 255
35829: NONEQUAL
35830: OR
35831: IFFALSE 35937
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35833: LD_VAR 0 5
35837: PUSH
35838: LD_INT 1
35840: ARRAY
35841: PPUSH
35842: CALL_OW 305
35846: PUSH
35847: LD_VAR 0 5
35851: PUSH
35852: LD_INT 1
35854: ARRAY
35855: PPUSH
35856: CALL_OW 255
35860: PUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 255
35870: EQUAL
35871: AND
35872: IFFALSE 35896
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35874: LD_VAR 0 5
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PPUSH
35883: LD_VAR 0 5
35887: PUSH
35888: LD_INT 2
35890: ARRAY
35891: PPUSH
35892: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35896: LD_ADDR_EXP 101
35900: PUSH
35901: LD_EXP 101
35905: PPUSH
35906: LD_VAR 0 4
35910: PPUSH
35911: LD_EXP 101
35915: PUSH
35916: LD_VAR 0 4
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 3
35926: PPUSH
35927: CALL_OW 3
35931: PPUSH
35932: CALL_OW 1
35936: ST_TO_ADDR
// end ; end ;
35937: GO 35766
35939: POP
35940: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35941: LD_VAR 0 1
35945: PPUSH
35946: LD_EXP 101
35950: PUSH
35951: LD_VAR 0 4
35955: ARRAY
35956: PUSH
35957: LD_INT 0
35959: PLUS
35960: PPUSH
35961: CALL_OW 505
// end ;
35965: LD_VAR 0 2
35969: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35970: LD_INT 0
35972: PPUSH
35973: PPUSH
35974: PPUSH
35975: PPUSH
// if not hack in hackTanks then
35976: LD_VAR 0 1
35980: PUSH
35981: LD_EXP 100
35985: IN
35986: NOT
35987: IFFALSE 35991
// exit ;
35989: GO 36076
// index := GetElementIndex ( hackTanks , hack ) ;
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: LD_EXP 100
36000: PPUSH
36001: LD_VAR 0 1
36005: PPUSH
36006: CALL 42934 0 2
36010: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36011: LD_ADDR_VAR 0 4
36015: PUSH
36016: DOUBLE
36017: LD_INT 1
36019: DEC
36020: ST_TO_ADDR
36021: LD_EXP 101
36025: PUSH
36026: LD_VAR 0 5
36030: ARRAY
36031: PUSH
36032: FOR_TO
36033: IFFALSE 36074
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36035: LD_EXP 101
36039: PUSH
36040: LD_VAR 0 5
36044: ARRAY
36045: PUSH
36046: LD_VAR 0 4
36050: ARRAY
36051: PUSH
36052: LD_INT 1
36054: ARRAY
36055: PUSH
36056: LD_VAR 0 2
36060: EQUAL
36061: IFFALSE 36072
// KillUnit ( vehicle ) ;
36063: LD_VAR 0 2
36067: PPUSH
36068: CALL_OW 66
36072: GO 36032
36074: POP
36075: POP
// end ;
36076: LD_VAR 0 3
36080: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36081: LD_EXP 105
36085: NOT
36086: IFFALSE 36121
36088: GO 36090
36090: DISABLE
// begin initMiner := true ;
36091: LD_ADDR_EXP 105
36095: PUSH
36096: LD_INT 1
36098: ST_TO_ADDR
// minersList := [ ] ;
36099: LD_ADDR_EXP 106
36103: PUSH
36104: EMPTY
36105: ST_TO_ADDR
// minerMinesList := [ ] ;
36106: LD_ADDR_EXP 107
36110: PUSH
36111: EMPTY
36112: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36113: LD_ADDR_EXP 108
36117: PUSH
36118: LD_INT 5
36120: ST_TO_ADDR
// end ;
36121: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36122: LD_EXP 105
36126: PUSH
36127: LD_INT 34
36129: PUSH
36130: LD_INT 81
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PPUSH
36137: CALL_OW 69
36141: AND
36142: IFFALSE 36603
36144: GO 36146
36146: DISABLE
36147: LD_INT 0
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
// begin enable ;
36153: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36154: LD_ADDR_VAR 0 1
36158: PUSH
36159: LD_INT 34
36161: PUSH
36162: LD_INT 81
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PPUSH
36169: CALL_OW 69
36173: PUSH
36174: FOR_IN
36175: IFFALSE 36247
// begin if not i in minersList then
36177: LD_VAR 0 1
36181: PUSH
36182: LD_EXP 106
36186: IN
36187: NOT
36188: IFFALSE 36245
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36190: LD_ADDR_EXP 106
36194: PUSH
36195: LD_EXP 106
36199: PPUSH
36200: LD_EXP 106
36204: PUSH
36205: LD_INT 1
36207: PLUS
36208: PPUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 1
36218: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36219: LD_ADDR_EXP 107
36223: PUSH
36224: LD_EXP 107
36228: PPUSH
36229: LD_EXP 107
36233: PUSH
36234: LD_INT 1
36236: PLUS
36237: PPUSH
36238: EMPTY
36239: PPUSH
36240: CALL_OW 1
36244: ST_TO_ADDR
// end end ;
36245: GO 36174
36247: POP
36248: POP
// for i := minerMinesList downto 1 do
36249: LD_ADDR_VAR 0 1
36253: PUSH
36254: DOUBLE
36255: LD_EXP 107
36259: INC
36260: ST_TO_ADDR
36261: LD_INT 1
36263: PUSH
36264: FOR_DOWNTO
36265: IFFALSE 36601
// begin if IsLive ( minersList [ i ] ) then
36267: LD_EXP 106
36271: PUSH
36272: LD_VAR 0 1
36276: ARRAY
36277: PPUSH
36278: CALL_OW 300
36282: IFFALSE 36310
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36284: LD_EXP 106
36288: PUSH
36289: LD_VAR 0 1
36293: ARRAY
36294: PPUSH
36295: LD_EXP 107
36299: PUSH
36300: LD_VAR 0 1
36304: ARRAY
36305: PPUSH
36306: CALL_OW 505
// if not minerMinesList [ i ] then
36310: LD_EXP 107
36314: PUSH
36315: LD_VAR 0 1
36319: ARRAY
36320: NOT
36321: IFFALSE 36325
// continue ;
36323: GO 36264
// for j := minerMinesList [ i ] downto 1 do
36325: LD_ADDR_VAR 0 2
36329: PUSH
36330: DOUBLE
36331: LD_EXP 107
36335: PUSH
36336: LD_VAR 0 1
36340: ARRAY
36341: INC
36342: ST_TO_ADDR
36343: LD_INT 1
36345: PUSH
36346: FOR_DOWNTO
36347: IFFALSE 36597
// begin side := GetSide ( minersList [ i ] ) ;
36349: LD_ADDR_VAR 0 3
36353: PUSH
36354: LD_EXP 106
36358: PUSH
36359: LD_VAR 0 1
36363: ARRAY
36364: PPUSH
36365: CALL_OW 255
36369: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36370: LD_ADDR_VAR 0 4
36374: PUSH
36375: LD_EXP 107
36379: PUSH
36380: LD_VAR 0 1
36384: ARRAY
36385: PUSH
36386: LD_VAR 0 2
36390: ARRAY
36391: PUSH
36392: LD_INT 1
36394: ARRAY
36395: PPUSH
36396: LD_EXP 107
36400: PUSH
36401: LD_VAR 0 1
36405: ARRAY
36406: PUSH
36407: LD_VAR 0 2
36411: ARRAY
36412: PUSH
36413: LD_INT 2
36415: ARRAY
36416: PPUSH
36417: CALL_OW 428
36421: ST_TO_ADDR
// if not tmp then
36422: LD_VAR 0 4
36426: NOT
36427: IFFALSE 36431
// continue ;
36429: GO 36346
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36431: LD_VAR 0 4
36435: PUSH
36436: LD_INT 81
36438: PUSH
36439: LD_VAR 0 3
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PPUSH
36448: CALL_OW 69
36452: IN
36453: PUSH
36454: LD_EXP 107
36458: PUSH
36459: LD_VAR 0 1
36463: ARRAY
36464: PUSH
36465: LD_VAR 0 2
36469: ARRAY
36470: PUSH
36471: LD_INT 1
36473: ARRAY
36474: PPUSH
36475: LD_EXP 107
36479: PUSH
36480: LD_VAR 0 1
36484: ARRAY
36485: PUSH
36486: LD_VAR 0 2
36490: ARRAY
36491: PUSH
36492: LD_INT 2
36494: ARRAY
36495: PPUSH
36496: CALL_OW 458
36500: AND
36501: IFFALSE 36595
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36503: LD_EXP 107
36507: PUSH
36508: LD_VAR 0 1
36512: ARRAY
36513: PUSH
36514: LD_VAR 0 2
36518: ARRAY
36519: PUSH
36520: LD_INT 1
36522: ARRAY
36523: PPUSH
36524: LD_EXP 107
36528: PUSH
36529: LD_VAR 0 1
36533: ARRAY
36534: PUSH
36535: LD_VAR 0 2
36539: ARRAY
36540: PUSH
36541: LD_INT 2
36543: ARRAY
36544: PPUSH
36545: LD_VAR 0 3
36549: PPUSH
36550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36554: LD_ADDR_EXP 107
36558: PUSH
36559: LD_EXP 107
36563: PPUSH
36564: LD_VAR 0 1
36568: PPUSH
36569: LD_EXP 107
36573: PUSH
36574: LD_VAR 0 1
36578: ARRAY
36579: PPUSH
36580: LD_VAR 0 2
36584: PPUSH
36585: CALL_OW 3
36589: PPUSH
36590: CALL_OW 1
36594: ST_TO_ADDR
// end ; end ;
36595: GO 36346
36597: POP
36598: POP
// end ;
36599: GO 36264
36601: POP
36602: POP
// end ;
36603: PPOPN 4
36605: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36606: LD_INT 0
36608: PPUSH
36609: PPUSH
// result := false ;
36610: LD_ADDR_VAR 0 4
36614: PUSH
36615: LD_INT 0
36617: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36618: LD_VAR 0 1
36622: PPUSH
36623: CALL_OW 264
36627: PUSH
36628: LD_INT 81
36630: EQUAL
36631: NOT
36632: IFFALSE 36636
// exit ;
36634: GO 36876
// index := GetElementIndex ( minersList , unit ) ;
36636: LD_ADDR_VAR 0 5
36640: PUSH
36641: LD_EXP 106
36645: PPUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: CALL 42934 0 2
36655: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36656: LD_EXP 107
36660: PUSH
36661: LD_VAR 0 5
36665: ARRAY
36666: PUSH
36667: LD_EXP 108
36671: GREATEREQUAL
36672: IFFALSE 36676
// exit ;
36674: GO 36876
// ComMoveXY ( unit , x , y ) ;
36676: LD_VAR 0 1
36680: PPUSH
36681: LD_VAR 0 2
36685: PPUSH
36686: LD_VAR 0 3
36690: PPUSH
36691: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36695: LD_INT 35
36697: PPUSH
36698: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36702: LD_VAR 0 1
36706: PPUSH
36707: LD_VAR 0 2
36711: PPUSH
36712: LD_VAR 0 3
36716: PPUSH
36717: CALL 74695 0 3
36721: NOT
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 314
36732: AND
36733: IFFALSE 36737
// exit ;
36735: GO 36876
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36737: LD_VAR 0 2
36741: PPUSH
36742: LD_VAR 0 3
36746: PPUSH
36747: CALL_OW 428
36751: PUSH
36752: LD_VAR 0 1
36756: EQUAL
36757: PUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 314
36767: NOT
36768: AND
36769: IFFALSE 36695
// PlaySoundXY ( x , y , PlantMine ) ;
36771: LD_VAR 0 2
36775: PPUSH
36776: LD_VAR 0 3
36780: PPUSH
36781: LD_STRING PlantMine
36783: PPUSH
36784: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36788: LD_VAR 0 2
36792: PPUSH
36793: LD_VAR 0 3
36797: PPUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: CALL_OW 255
36807: PPUSH
36808: LD_INT 0
36810: PPUSH
36811: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36815: LD_ADDR_EXP 107
36819: PUSH
36820: LD_EXP 107
36824: PPUSH
36825: LD_VAR 0 5
36829: PUSH
36830: LD_EXP 107
36834: PUSH
36835: LD_VAR 0 5
36839: ARRAY
36840: PUSH
36841: LD_INT 1
36843: PLUS
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PPUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_VAR 0 3
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PPUSH
36863: CALL 43149 0 3
36867: ST_TO_ADDR
// result := true ;
36868: LD_ADDR_VAR 0 4
36872: PUSH
36873: LD_INT 1
36875: ST_TO_ADDR
// end ;
36876: LD_VAR 0 4
36880: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
36885: PPUSH
// if not unit in minersList then
36886: LD_VAR 0 1
36890: PUSH
36891: LD_EXP 106
36895: IN
36896: NOT
36897: IFFALSE 36901
// exit ;
36899: GO 37293
// index := GetElementIndex ( minersList , unit ) ;
36901: LD_ADDR_VAR 0 6
36905: PUSH
36906: LD_EXP 106
36910: PPUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL 42934 0 2
36920: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36921: LD_ADDR_VAR 0 5
36925: PUSH
36926: DOUBLE
36927: LD_EXP 107
36931: PUSH
36932: LD_VAR 0 6
36936: ARRAY
36937: INC
36938: ST_TO_ADDR
36939: LD_INT 1
36941: PUSH
36942: FOR_DOWNTO
36943: IFFALSE 37104
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36945: LD_EXP 107
36949: PUSH
36950: LD_VAR 0 6
36954: ARRAY
36955: PUSH
36956: LD_VAR 0 5
36960: ARRAY
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PUSH
36966: LD_VAR 0 2
36970: EQUAL
36971: PUSH
36972: LD_EXP 107
36976: PUSH
36977: LD_VAR 0 6
36981: ARRAY
36982: PUSH
36983: LD_VAR 0 5
36987: ARRAY
36988: PUSH
36989: LD_INT 2
36991: ARRAY
36992: PUSH
36993: LD_VAR 0 3
36997: EQUAL
36998: AND
36999: IFFALSE 37102
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37001: LD_EXP 107
37005: PUSH
37006: LD_VAR 0 6
37010: ARRAY
37011: PUSH
37012: LD_VAR 0 5
37016: ARRAY
37017: PUSH
37018: LD_INT 1
37020: ARRAY
37021: PPUSH
37022: LD_EXP 107
37026: PUSH
37027: LD_VAR 0 6
37031: ARRAY
37032: PUSH
37033: LD_VAR 0 5
37037: ARRAY
37038: PUSH
37039: LD_INT 2
37041: ARRAY
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 255
37052: PPUSH
37053: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37057: LD_ADDR_EXP 107
37061: PUSH
37062: LD_EXP 107
37066: PPUSH
37067: LD_VAR 0 6
37071: PPUSH
37072: LD_EXP 107
37076: PUSH
37077: LD_VAR 0 6
37081: ARRAY
37082: PPUSH
37083: LD_VAR 0 5
37087: PPUSH
37088: CALL_OW 3
37092: PPUSH
37093: CALL_OW 1
37097: ST_TO_ADDR
// exit ;
37098: POP
37099: POP
37100: GO 37293
// end ; end ;
37102: GO 36942
37104: POP
37105: POP
// for i := minerMinesList [ index ] downto 1 do
37106: LD_ADDR_VAR 0 5
37110: PUSH
37111: DOUBLE
37112: LD_EXP 107
37116: PUSH
37117: LD_VAR 0 6
37121: ARRAY
37122: INC
37123: ST_TO_ADDR
37124: LD_INT 1
37126: PUSH
37127: FOR_DOWNTO
37128: IFFALSE 37291
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37130: LD_EXP 107
37134: PUSH
37135: LD_VAR 0 6
37139: ARRAY
37140: PUSH
37141: LD_VAR 0 5
37145: ARRAY
37146: PUSH
37147: LD_INT 1
37149: ARRAY
37150: PPUSH
37151: LD_EXP 107
37155: PUSH
37156: LD_VAR 0 6
37160: ARRAY
37161: PUSH
37162: LD_VAR 0 5
37166: ARRAY
37167: PUSH
37168: LD_INT 2
37170: ARRAY
37171: PPUSH
37172: LD_VAR 0 2
37176: PPUSH
37177: LD_VAR 0 3
37181: PPUSH
37182: CALL_OW 298
37186: PUSH
37187: LD_INT 6
37189: LESS
37190: IFFALSE 37289
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37192: LD_EXP 107
37196: PUSH
37197: LD_VAR 0 6
37201: ARRAY
37202: PUSH
37203: LD_VAR 0 5
37207: ARRAY
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PPUSH
37213: LD_EXP 107
37217: PUSH
37218: LD_VAR 0 6
37222: ARRAY
37223: PUSH
37224: LD_VAR 0 5
37228: ARRAY
37229: PUSH
37230: LD_INT 2
37232: ARRAY
37233: PPUSH
37234: LD_VAR 0 1
37238: PPUSH
37239: CALL_OW 255
37243: PPUSH
37244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37248: LD_ADDR_EXP 107
37252: PUSH
37253: LD_EXP 107
37257: PPUSH
37258: LD_VAR 0 6
37262: PPUSH
37263: LD_EXP 107
37267: PUSH
37268: LD_VAR 0 6
37272: ARRAY
37273: PPUSH
37274: LD_VAR 0 5
37278: PPUSH
37279: CALL_OW 3
37283: PPUSH
37284: CALL_OW 1
37288: ST_TO_ADDR
// end ; end ;
37289: GO 37127
37291: POP
37292: POP
// end ;
37293: LD_VAR 0 4
37297: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37298: LD_INT 0
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
37307: PPUSH
37308: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 264
37318: PUSH
37319: LD_INT 81
37321: EQUAL
37322: NOT
37323: PUSH
37324: LD_VAR 0 1
37328: PUSH
37329: LD_EXP 106
37333: IN
37334: NOT
37335: OR
37336: IFFALSE 37340
// exit ;
37338: GO 37662
// index := GetElementIndex ( minersList , unit ) ;
37340: LD_ADDR_VAR 0 6
37344: PUSH
37345: LD_EXP 106
37349: PPUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL 42934 0 2
37359: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37360: LD_ADDR_VAR 0 8
37364: PUSH
37365: LD_EXP 108
37369: PUSH
37370: LD_EXP 107
37374: PUSH
37375: LD_VAR 0 6
37379: ARRAY
37380: MINUS
37381: ST_TO_ADDR
// if not minesFreeAmount then
37382: LD_VAR 0 8
37386: NOT
37387: IFFALSE 37391
// exit ;
37389: GO 37662
// tmp := [ ] ;
37391: LD_ADDR_VAR 0 7
37395: PUSH
37396: EMPTY
37397: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37398: LD_ADDR_VAR 0 5
37402: PUSH
37403: DOUBLE
37404: LD_INT 1
37406: DEC
37407: ST_TO_ADDR
37408: LD_VAR 0 8
37412: PUSH
37413: FOR_TO
37414: IFFALSE 37609
// begin _d := rand ( 0 , 5 ) ;
37416: LD_ADDR_VAR 0 11
37420: PUSH
37421: LD_INT 0
37423: PPUSH
37424: LD_INT 5
37426: PPUSH
37427: CALL_OW 12
37431: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37432: LD_ADDR_VAR 0 12
37436: PUSH
37437: LD_INT 2
37439: PPUSH
37440: LD_INT 6
37442: PPUSH
37443: CALL_OW 12
37447: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37448: LD_ADDR_VAR 0 9
37452: PUSH
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_VAR 0 11
37462: PPUSH
37463: LD_VAR 0 12
37467: PPUSH
37468: CALL_OW 272
37472: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37473: LD_ADDR_VAR 0 10
37477: PUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: LD_VAR 0 11
37487: PPUSH
37488: LD_VAR 0 12
37492: PPUSH
37493: CALL_OW 273
37497: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37498: LD_VAR 0 9
37502: PPUSH
37503: LD_VAR 0 10
37507: PPUSH
37508: CALL_OW 488
37512: PUSH
37513: LD_VAR 0 9
37517: PUSH
37518: LD_VAR 0 10
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_VAR 0 7
37531: IN
37532: NOT
37533: AND
37534: PUSH
37535: LD_VAR 0 9
37539: PPUSH
37540: LD_VAR 0 10
37544: PPUSH
37545: CALL_OW 458
37549: NOT
37550: AND
37551: IFFALSE 37593
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37553: LD_ADDR_VAR 0 7
37557: PUSH
37558: LD_VAR 0 7
37562: PPUSH
37563: LD_VAR 0 7
37567: PUSH
37568: LD_INT 1
37570: PLUS
37571: PPUSH
37572: LD_VAR 0 9
37576: PUSH
37577: LD_VAR 0 10
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PPUSH
37586: CALL_OW 1
37590: ST_TO_ADDR
37591: GO 37607
// i := i - 1 ;
37593: LD_ADDR_VAR 0 5
37597: PUSH
37598: LD_VAR 0 5
37602: PUSH
37603: LD_INT 1
37605: MINUS
37606: ST_TO_ADDR
// end ;
37607: GO 37413
37609: POP
37610: POP
// for i in tmp do
37611: LD_ADDR_VAR 0 5
37615: PUSH
37616: LD_VAR 0 7
37620: PUSH
37621: FOR_IN
37622: IFFALSE 37660
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37624: LD_VAR 0 1
37628: PPUSH
37629: LD_VAR 0 5
37633: PUSH
37634: LD_INT 1
37636: ARRAY
37637: PPUSH
37638: LD_VAR 0 5
37642: PUSH
37643: LD_INT 2
37645: ARRAY
37646: PPUSH
37647: CALL 36606 0 3
37651: NOT
37652: IFFALSE 37658
// exit ;
37654: POP
37655: POP
37656: GO 37662
37658: GO 37621
37660: POP
37661: POP
// end ;
37662: LD_VAR 0 4
37666: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
37667: LD_INT 0
37669: PPUSH
37670: PPUSH
37671: PPUSH
37672: PPUSH
37673: PPUSH
37674: PPUSH
37675: PPUSH
37676: PPUSH
37677: PPUSH
// if GetClass ( unit ) <> class_sniper then
37678: LD_VAR 0 1
37682: PPUSH
37683: CALL_OW 257
37687: PUSH
37688: LD_INT 5
37690: NONEQUAL
37691: IFFALSE 37695
// exit ;
37693: GO 38161
// dist := 8 ;
37695: LD_ADDR_VAR 0 5
37699: PUSH
37700: LD_INT 8
37702: ST_TO_ADDR
// viewRange := 12 ;
37703: LD_ADDR_VAR 0 8
37707: PUSH
37708: LD_INT 12
37710: ST_TO_ADDR
// side := GetSide ( unit ) ;
37711: LD_ADDR_VAR 0 6
37715: PUSH
37716: LD_VAR 0 1
37720: PPUSH
37721: CALL_OW 255
37725: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37726: LD_INT 61
37728: PPUSH
37729: LD_VAR 0 6
37733: PPUSH
37734: CALL_OW 321
37738: PUSH
37739: LD_INT 2
37741: EQUAL
37742: IFFALSE 37752
// viewRange := 16 ;
37744: LD_ADDR_VAR 0 8
37748: PUSH
37749: LD_INT 16
37751: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37752: LD_VAR 0 1
37756: PPUSH
37757: LD_VAR 0 2
37761: PPUSH
37762: LD_VAR 0 3
37766: PPUSH
37767: CALL_OW 297
37771: PUSH
37772: LD_VAR 0 5
37776: GREATER
37777: IFFALSE 37856
// begin ComMoveXY ( unit , x , y ) ;
37779: LD_VAR 0 1
37783: PPUSH
37784: LD_VAR 0 2
37788: PPUSH
37789: LD_VAR 0 3
37793: PPUSH
37794: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37798: LD_INT 35
37800: PPUSH
37801: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37805: LD_VAR 0 1
37809: PPUSH
37810: LD_VAR 0 2
37814: PPUSH
37815: LD_VAR 0 3
37819: PPUSH
37820: CALL 74695 0 3
37824: NOT
37825: IFFALSE 37829
// exit ;
37827: GO 38161
// until GetDistUnitXY ( unit , x , y ) < dist ;
37829: LD_VAR 0 1
37833: PPUSH
37834: LD_VAR 0 2
37838: PPUSH
37839: LD_VAR 0 3
37843: PPUSH
37844: CALL_OW 297
37848: PUSH
37849: LD_VAR 0 5
37853: LESS
37854: IFFALSE 37798
// end ; ComTurnXY ( unit , x , y ) ;
37856: LD_VAR 0 1
37860: PPUSH
37861: LD_VAR 0 2
37865: PPUSH
37866: LD_VAR 0 3
37870: PPUSH
37871: CALL_OW 118
// repeat if Multiplayer then
37875: LD_OWVAR 4
37879: IFFALSE 37890
// wait ( 35 ) else
37881: LD_INT 35
37883: PPUSH
37884: CALL_OW 67
37888: GO 37897
// wait ( 5 ) ;
37890: LD_INT 5
37892: PPUSH
37893: CALL_OW 67
// _d := GetDir ( unit ) ;
37897: LD_ADDR_VAR 0 11
37901: PUSH
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 254
37911: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37912: LD_ADDR_VAR 0 7
37916: PUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 250
37926: PPUSH
37927: LD_VAR 0 1
37931: PPUSH
37932: CALL_OW 251
37936: PPUSH
37937: LD_VAR 0 2
37941: PPUSH
37942: LD_VAR 0 3
37946: PPUSH
37947: CALL 77303 0 4
37951: ST_TO_ADDR
// until dir = _d ;
37952: LD_VAR 0 7
37956: PUSH
37957: LD_VAR 0 11
37961: EQUAL
37962: IFFALSE 37875
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: CALL_OW 250
37978: PPUSH
37979: LD_VAR 0 7
37983: PPUSH
37984: LD_VAR 0 5
37988: PPUSH
37989: CALL_OW 272
37993: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
37994: LD_ADDR_VAR 0 10
37998: PUSH
37999: LD_VAR 0 1
38003: PPUSH
38004: CALL_OW 251
38008: PPUSH
38009: LD_VAR 0 7
38013: PPUSH
38014: LD_VAR 0 5
38018: PPUSH
38019: CALL_OW 273
38023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38024: LD_VAR 0 9
38028: PPUSH
38029: LD_VAR 0 10
38033: PPUSH
38034: CALL_OW 488
38038: NOT
38039: IFFALSE 38043
// exit ;
38041: GO 38161
// ComAnimCustom ( unit , 1 ) ;
38043: LD_VAR 0 1
38047: PPUSH
38048: LD_INT 1
38050: PPUSH
38051: CALL_OW 592
// p := 0 ;
38055: LD_ADDR_VAR 0 12
38059: PUSH
38060: LD_INT 0
38062: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38063: LD_VAR 0 9
38067: PPUSH
38068: LD_VAR 0 10
38072: PPUSH
38073: LD_VAR 0 6
38077: PPUSH
38078: LD_VAR 0 8
38082: PPUSH
38083: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
38087: LD_INT 35
38089: PPUSH
38090: CALL_OW 67
// p := Inc ( p ) ;
38094: LD_ADDR_VAR 0 12
38098: PUSH
38099: LD_VAR 0 12
38103: PPUSH
38104: CALL 77259 0 1
38108: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
38109: LD_VAR 0 12
38113: PUSH
38114: LD_INT 3
38116: EQUAL
38117: PUSH
38118: LD_VAR 0 1
38122: PPUSH
38123: CALL_OW 302
38127: NOT
38128: OR
38129: PUSH
38130: LD_VAR 0 1
38134: PPUSH
38135: CALL_OW 301
38139: OR
38140: IFFALSE 38087
// RemoveSeeing ( _x , _y , side ) ;
38142: LD_VAR 0 9
38146: PPUSH
38147: LD_VAR 0 10
38151: PPUSH
38152: LD_VAR 0 6
38156: PPUSH
38157: CALL_OW 331
// end ; end_of_file
38161: LD_VAR 0 4
38165: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38166: LD_INT 0
38168: PPUSH
38169: PPUSH
// if exist_mode then
38170: LD_VAR 0 2
38174: IFFALSE 38220
// begin unit := CreateCharacter ( prefix & ident ) ;
38176: LD_ADDR_VAR 0 5
38180: PUSH
38181: LD_VAR 0 3
38185: PUSH
38186: LD_VAR 0 1
38190: STR
38191: PPUSH
38192: CALL_OW 34
38196: ST_TO_ADDR
// if unit then
38197: LD_VAR 0 5
38201: IFFALSE 38218
// DeleteCharacters ( prefix & ident ) ;
38203: LD_VAR 0 3
38207: PUSH
38208: LD_VAR 0 1
38212: STR
38213: PPUSH
38214: CALL_OW 40
// end else
38218: GO 38235
// unit := NewCharacter ( ident ) ;
38220: LD_ADDR_VAR 0 5
38224: PUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 25
38234: ST_TO_ADDR
// result := unit ;
38235: LD_ADDR_VAR 0 4
38239: PUSH
38240: LD_VAR 0 5
38244: ST_TO_ADDR
// end ;
38245: LD_VAR 0 4
38249: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38250: LD_INT 0
38252: PPUSH
38253: PPUSH
// if not side or not nation then
38254: LD_VAR 0 1
38258: NOT
38259: PUSH
38260: LD_VAR 0 2
38264: NOT
38265: OR
38266: IFFALSE 38270
// exit ;
38268: GO 39038
// case nation of nation_american :
38270: LD_VAR 0 2
38274: PUSH
38275: LD_INT 1
38277: DOUBLE
38278: EQUAL
38279: IFTRUE 38283
38281: GO 38497
38283: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38284: LD_ADDR_VAR 0 4
38288: PUSH
38289: LD_INT 35
38291: PUSH
38292: LD_INT 45
38294: PUSH
38295: LD_INT 46
38297: PUSH
38298: LD_INT 47
38300: PUSH
38301: LD_INT 82
38303: PUSH
38304: LD_INT 83
38306: PUSH
38307: LD_INT 84
38309: PUSH
38310: LD_INT 85
38312: PUSH
38313: LD_INT 86
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 6
38324: PUSH
38325: LD_INT 15
38327: PUSH
38328: LD_INT 16
38330: PUSH
38331: LD_INT 7
38333: PUSH
38334: LD_INT 12
38336: PUSH
38337: LD_INT 13
38339: PUSH
38340: LD_INT 10
38342: PUSH
38343: LD_INT 14
38345: PUSH
38346: LD_INT 20
38348: PUSH
38349: LD_INT 21
38351: PUSH
38352: LD_INT 22
38354: PUSH
38355: LD_INT 25
38357: PUSH
38358: LD_INT 32
38360: PUSH
38361: LD_INT 27
38363: PUSH
38364: LD_INT 36
38366: PUSH
38367: LD_INT 69
38369: PUSH
38370: LD_INT 39
38372: PUSH
38373: LD_INT 34
38375: PUSH
38376: LD_INT 40
38378: PUSH
38379: LD_INT 48
38381: PUSH
38382: LD_INT 49
38384: PUSH
38385: LD_INT 50
38387: PUSH
38388: LD_INT 51
38390: PUSH
38391: LD_INT 52
38393: PUSH
38394: LD_INT 53
38396: PUSH
38397: LD_INT 54
38399: PUSH
38400: LD_INT 55
38402: PUSH
38403: LD_INT 56
38405: PUSH
38406: LD_INT 57
38408: PUSH
38409: LD_INT 58
38411: PUSH
38412: LD_INT 59
38414: PUSH
38415: LD_INT 60
38417: PUSH
38418: LD_INT 61
38420: PUSH
38421: LD_INT 62
38423: PUSH
38424: LD_INT 80
38426: PUSH
38427: LD_INT 82
38429: PUSH
38430: LD_INT 83
38432: PUSH
38433: LD_INT 84
38435: PUSH
38436: LD_INT 85
38438: PUSH
38439: LD_INT 86
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
38495: GO 38962
38497: LD_INT 2
38499: DOUBLE
38500: EQUAL
38501: IFTRUE 38505
38503: GO 38731
38505: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38506: LD_ADDR_VAR 0 4
38510: PUSH
38511: LD_INT 35
38513: PUSH
38514: LD_INT 45
38516: PUSH
38517: LD_INT 46
38519: PUSH
38520: LD_INT 47
38522: PUSH
38523: LD_INT 82
38525: PUSH
38526: LD_INT 83
38528: PUSH
38529: LD_INT 84
38531: PUSH
38532: LD_INT 85
38534: PUSH
38535: LD_INT 87
38537: PUSH
38538: LD_INT 70
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 11
38546: PUSH
38547: LD_INT 3
38549: PUSH
38550: LD_INT 4
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: LD_INT 6
38558: PUSH
38559: LD_INT 15
38561: PUSH
38562: LD_INT 18
38564: PUSH
38565: LD_INT 7
38567: PUSH
38568: LD_INT 17
38570: PUSH
38571: LD_INT 8
38573: PUSH
38574: LD_INT 20
38576: PUSH
38577: LD_INT 21
38579: PUSH
38580: LD_INT 22
38582: PUSH
38583: LD_INT 72
38585: PUSH
38586: LD_INT 26
38588: PUSH
38589: LD_INT 69
38591: PUSH
38592: LD_INT 39
38594: PUSH
38595: LD_INT 40
38597: PUSH
38598: LD_INT 41
38600: PUSH
38601: LD_INT 42
38603: PUSH
38604: LD_INT 43
38606: PUSH
38607: LD_INT 48
38609: PUSH
38610: LD_INT 49
38612: PUSH
38613: LD_INT 50
38615: PUSH
38616: LD_INT 51
38618: PUSH
38619: LD_INT 52
38621: PUSH
38622: LD_INT 53
38624: PUSH
38625: LD_INT 54
38627: PUSH
38628: LD_INT 55
38630: PUSH
38631: LD_INT 56
38633: PUSH
38634: LD_INT 60
38636: PUSH
38637: LD_INT 61
38639: PUSH
38640: LD_INT 62
38642: PUSH
38643: LD_INT 66
38645: PUSH
38646: LD_INT 67
38648: PUSH
38649: LD_INT 68
38651: PUSH
38652: LD_INT 81
38654: PUSH
38655: LD_INT 82
38657: PUSH
38658: LD_INT 83
38660: PUSH
38661: LD_INT 84
38663: PUSH
38664: LD_INT 85
38666: PUSH
38667: LD_INT 87
38669: PUSH
38670: LD_INT 88
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: ST_TO_ADDR
38729: GO 38962
38731: LD_INT 3
38733: DOUBLE
38734: EQUAL
38735: IFTRUE 38739
38737: GO 38961
38739: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38740: LD_ADDR_VAR 0 4
38744: PUSH
38745: LD_INT 46
38747: PUSH
38748: LD_INT 47
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 82
38759: PUSH
38760: LD_INT 83
38762: PUSH
38763: LD_INT 84
38765: PUSH
38766: LD_INT 85
38768: PUSH
38769: LD_INT 86
38771: PUSH
38772: LD_INT 11
38774: PUSH
38775: LD_INT 9
38777: PUSH
38778: LD_INT 20
38780: PUSH
38781: LD_INT 19
38783: PUSH
38784: LD_INT 21
38786: PUSH
38787: LD_INT 24
38789: PUSH
38790: LD_INT 22
38792: PUSH
38793: LD_INT 25
38795: PUSH
38796: LD_INT 28
38798: PUSH
38799: LD_INT 29
38801: PUSH
38802: LD_INT 30
38804: PUSH
38805: LD_INT 31
38807: PUSH
38808: LD_INT 37
38810: PUSH
38811: LD_INT 38
38813: PUSH
38814: LD_INT 32
38816: PUSH
38817: LD_INT 27
38819: PUSH
38820: LD_INT 33
38822: PUSH
38823: LD_INT 69
38825: PUSH
38826: LD_INT 39
38828: PUSH
38829: LD_INT 34
38831: PUSH
38832: LD_INT 40
38834: PUSH
38835: LD_INT 71
38837: PUSH
38838: LD_INT 23
38840: PUSH
38841: LD_INT 44
38843: PUSH
38844: LD_INT 48
38846: PUSH
38847: LD_INT 49
38849: PUSH
38850: LD_INT 50
38852: PUSH
38853: LD_INT 51
38855: PUSH
38856: LD_INT 52
38858: PUSH
38859: LD_INT 53
38861: PUSH
38862: LD_INT 54
38864: PUSH
38865: LD_INT 55
38867: PUSH
38868: LD_INT 56
38870: PUSH
38871: LD_INT 57
38873: PUSH
38874: LD_INT 58
38876: PUSH
38877: LD_INT 59
38879: PUSH
38880: LD_INT 63
38882: PUSH
38883: LD_INT 64
38885: PUSH
38886: LD_INT 65
38888: PUSH
38889: LD_INT 82
38891: PUSH
38892: LD_INT 83
38894: PUSH
38895: LD_INT 84
38897: PUSH
38898: LD_INT 85
38900: PUSH
38901: LD_INT 86
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: ST_TO_ADDR
38959: GO 38962
38961: POP
// if state > - 1 and state < 3 then
38962: LD_VAR 0 3
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: GREATER
38971: PUSH
38972: LD_VAR 0 3
38976: PUSH
38977: LD_INT 3
38979: LESS
38980: AND
38981: IFFALSE 39038
// for i in result do
38983: LD_ADDR_VAR 0 5
38987: PUSH
38988: LD_VAR 0 4
38992: PUSH
38993: FOR_IN
38994: IFFALSE 39036
// if GetTech ( i , side ) <> state then
38996: LD_VAR 0 5
39000: PPUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL_OW 321
39010: PUSH
39011: LD_VAR 0 3
39015: NONEQUAL
39016: IFFALSE 39034
// result := result diff i ;
39018: LD_ADDR_VAR 0 4
39022: PUSH
39023: LD_VAR 0 4
39027: PUSH
39028: LD_VAR 0 5
39032: DIFF
39033: ST_TO_ADDR
39034: GO 38993
39036: POP
39037: POP
// end ;
39038: LD_VAR 0 4
39042: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39043: LD_INT 0
39045: PPUSH
39046: PPUSH
39047: PPUSH
// result := true ;
39048: LD_ADDR_VAR 0 3
39052: PUSH
39053: LD_INT 1
39055: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39056: LD_ADDR_VAR 0 5
39060: PUSH
39061: LD_VAR 0 2
39065: PPUSH
39066: CALL_OW 480
39070: ST_TO_ADDR
// if not tmp then
39071: LD_VAR 0 5
39075: NOT
39076: IFFALSE 39080
// exit ;
39078: GO 39129
// for i in tmp do
39080: LD_ADDR_VAR 0 4
39084: PUSH
39085: LD_VAR 0 5
39089: PUSH
39090: FOR_IN
39091: IFFALSE 39127
// if GetTech ( i , side ) <> state_researched then
39093: LD_VAR 0 4
39097: PPUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 321
39107: PUSH
39108: LD_INT 2
39110: NONEQUAL
39111: IFFALSE 39125
// begin result := false ;
39113: LD_ADDR_VAR 0 3
39117: PUSH
39118: LD_INT 0
39120: ST_TO_ADDR
// exit ;
39121: POP
39122: POP
39123: GO 39129
// end ;
39125: GO 39090
39127: POP
39128: POP
// end ;
39129: LD_VAR 0 3
39133: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39134: LD_INT 0
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39149: LD_VAR 0 1
39153: NOT
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: CALL_OW 257
39164: PUSH
39165: LD_INT 9
39167: NONEQUAL
39168: OR
39169: IFFALSE 39173
// exit ;
39171: GO 39746
// side := GetSide ( unit ) ;
39173: LD_ADDR_VAR 0 9
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 255
39187: ST_TO_ADDR
// tech_space := tech_spacanom ;
39188: LD_ADDR_VAR 0 12
39192: PUSH
39193: LD_INT 29
39195: ST_TO_ADDR
// tech_time := tech_taurad ;
39196: LD_ADDR_VAR 0 13
39200: PUSH
39201: LD_INT 28
39203: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39204: LD_ADDR_VAR 0 11
39208: PUSH
39209: LD_VAR 0 1
39213: PPUSH
39214: CALL_OW 310
39218: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39219: LD_VAR 0 11
39223: PPUSH
39224: CALL_OW 247
39228: PUSH
39229: LD_INT 2
39231: EQUAL
39232: IFFALSE 39236
// exit ;
39234: GO 39746
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39236: LD_ADDR_VAR 0 8
39240: PUSH
39241: LD_INT 81
39243: PUSH
39244: LD_VAR 0 9
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 21
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PPUSH
39274: CALL_OW 69
39278: ST_TO_ADDR
// if not tmp then
39279: LD_VAR 0 8
39283: NOT
39284: IFFALSE 39288
// exit ;
39286: GO 39746
// if in_unit then
39288: LD_VAR 0 11
39292: IFFALSE 39316
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39294: LD_ADDR_VAR 0 10
39298: PUSH
39299: LD_VAR 0 8
39303: PPUSH
39304: LD_VAR 0 11
39308: PPUSH
39309: CALL_OW 74
39313: ST_TO_ADDR
39314: GO 39336
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39316: LD_ADDR_VAR 0 10
39320: PUSH
39321: LD_VAR 0 8
39325: PPUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 74
39335: ST_TO_ADDR
// if not enemy then
39336: LD_VAR 0 10
39340: NOT
39341: IFFALSE 39345
// exit ;
39343: GO 39746
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39345: LD_VAR 0 11
39349: PUSH
39350: LD_VAR 0 11
39354: PPUSH
39355: LD_VAR 0 10
39359: PPUSH
39360: CALL_OW 296
39364: PUSH
39365: LD_INT 13
39367: GREATER
39368: AND
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: LD_VAR 0 10
39379: PPUSH
39380: CALL_OW 296
39384: PUSH
39385: LD_INT 12
39387: GREATER
39388: OR
39389: IFFALSE 39393
// exit ;
39391: GO 39746
// missile := [ 1 ] ;
39393: LD_ADDR_VAR 0 14
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: EMPTY
39402: LIST
39403: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39404: LD_VAR 0 9
39408: PPUSH
39409: LD_VAR 0 12
39413: PPUSH
39414: CALL_OW 325
39418: IFFALSE 39447
// missile := Replace ( missile , missile + 1 , 2 ) ;
39420: LD_ADDR_VAR 0 14
39424: PUSH
39425: LD_VAR 0 14
39429: PPUSH
39430: LD_VAR 0 14
39434: PUSH
39435: LD_INT 1
39437: PLUS
39438: PPUSH
39439: LD_INT 2
39441: PPUSH
39442: CALL_OW 1
39446: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39447: LD_VAR 0 9
39451: PPUSH
39452: LD_VAR 0 13
39456: PPUSH
39457: CALL_OW 325
39461: PUSH
39462: LD_VAR 0 10
39466: PPUSH
39467: CALL_OW 255
39471: PPUSH
39472: LD_VAR 0 13
39476: PPUSH
39477: CALL_OW 325
39481: NOT
39482: AND
39483: IFFALSE 39512
// missile := Replace ( missile , missile + 1 , 3 ) ;
39485: LD_ADDR_VAR 0 14
39489: PUSH
39490: LD_VAR 0 14
39494: PPUSH
39495: LD_VAR 0 14
39499: PUSH
39500: LD_INT 1
39502: PLUS
39503: PPUSH
39504: LD_INT 3
39506: PPUSH
39507: CALL_OW 1
39511: ST_TO_ADDR
// if missile < 2 then
39512: LD_VAR 0 14
39516: PUSH
39517: LD_INT 2
39519: LESS
39520: IFFALSE 39524
// exit ;
39522: GO 39746
// x := GetX ( enemy ) ;
39524: LD_ADDR_VAR 0 4
39528: PUSH
39529: LD_VAR 0 10
39533: PPUSH
39534: CALL_OW 250
39538: ST_TO_ADDR
// y := GetY ( enemy ) ;
39539: LD_ADDR_VAR 0 5
39543: PUSH
39544: LD_VAR 0 10
39548: PPUSH
39549: CALL_OW 251
39553: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39554: LD_ADDR_VAR 0 6
39558: PUSH
39559: LD_VAR 0 4
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PPUSH
39568: LD_INT 1
39570: PPUSH
39571: CALL_OW 12
39575: PLUS
39576: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39577: LD_ADDR_VAR 0 7
39581: PUSH
39582: LD_VAR 0 5
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PPUSH
39591: LD_INT 1
39593: PPUSH
39594: CALL_OW 12
39598: PLUS
39599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39600: LD_VAR 0 6
39604: PPUSH
39605: LD_VAR 0 7
39609: PPUSH
39610: CALL_OW 488
39614: NOT
39615: IFFALSE 39637
// begin _x := x ;
39617: LD_ADDR_VAR 0 6
39621: PUSH
39622: LD_VAR 0 4
39626: ST_TO_ADDR
// _y := y ;
39627: LD_ADDR_VAR 0 7
39631: PUSH
39632: LD_VAR 0 5
39636: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39637: LD_ADDR_VAR 0 3
39641: PUSH
39642: LD_INT 1
39644: PPUSH
39645: LD_VAR 0 14
39649: PPUSH
39650: CALL_OW 12
39654: ST_TO_ADDR
// case i of 1 :
39655: LD_VAR 0 3
39659: PUSH
39660: LD_INT 1
39662: DOUBLE
39663: EQUAL
39664: IFTRUE 39668
39666: GO 39685
39668: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39669: LD_VAR 0 1
39673: PPUSH
39674: LD_VAR 0 10
39678: PPUSH
39679: CALL_OW 115
39683: GO 39746
39685: LD_INT 2
39687: DOUBLE
39688: EQUAL
39689: IFTRUE 39693
39691: GO 39715
39693: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39694: LD_VAR 0 1
39698: PPUSH
39699: LD_VAR 0 6
39703: PPUSH
39704: LD_VAR 0 7
39708: PPUSH
39709: CALL_OW 153
39713: GO 39746
39715: LD_INT 3
39717: DOUBLE
39718: EQUAL
39719: IFTRUE 39723
39721: GO 39745
39723: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39724: LD_VAR 0 1
39728: PPUSH
39729: LD_VAR 0 6
39733: PPUSH
39734: LD_VAR 0 7
39738: PPUSH
39739: CALL_OW 154
39743: GO 39746
39745: POP
// end ;
39746: LD_VAR 0 2
39750: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39751: LD_INT 0
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
// if not unit or not building then
39759: LD_VAR 0 1
39763: NOT
39764: PUSH
39765: LD_VAR 0 2
39769: NOT
39770: OR
39771: IFFALSE 39775
// exit ;
39773: GO 39933
// x := GetX ( building ) ;
39775: LD_ADDR_VAR 0 5
39779: PUSH
39780: LD_VAR 0 2
39784: PPUSH
39785: CALL_OW 250
39789: ST_TO_ADDR
// y := GetY ( building ) ;
39790: LD_ADDR_VAR 0 6
39794: PUSH
39795: LD_VAR 0 2
39799: PPUSH
39800: CALL_OW 251
39804: ST_TO_ADDR
// for i = 0 to 5 do
39805: LD_ADDR_VAR 0 4
39809: PUSH
39810: DOUBLE
39811: LD_INT 0
39813: DEC
39814: ST_TO_ADDR
39815: LD_INT 5
39817: PUSH
39818: FOR_TO
39819: IFFALSE 39931
// begin _x := ShiftX ( x , i , 3 ) ;
39821: LD_ADDR_VAR 0 7
39825: PUSH
39826: LD_VAR 0 5
39830: PPUSH
39831: LD_VAR 0 4
39835: PPUSH
39836: LD_INT 3
39838: PPUSH
39839: CALL_OW 272
39843: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39844: LD_ADDR_VAR 0 8
39848: PUSH
39849: LD_VAR 0 6
39853: PPUSH
39854: LD_VAR 0 4
39858: PPUSH
39859: LD_INT 3
39861: PPUSH
39862: CALL_OW 273
39866: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39867: LD_VAR 0 7
39871: PPUSH
39872: LD_VAR 0 8
39876: PPUSH
39877: CALL_OW 488
39881: NOT
39882: IFFALSE 39886
// continue ;
39884: GO 39818
// if HexInfo ( _x , _y ) = 0 then
39886: LD_VAR 0 7
39890: PPUSH
39891: LD_VAR 0 8
39895: PPUSH
39896: CALL_OW 428
39900: PUSH
39901: LD_INT 0
39903: EQUAL
39904: IFFALSE 39929
// begin ComMoveXY ( unit , _x , _y ) ;
39906: LD_VAR 0 1
39910: PPUSH
39911: LD_VAR 0 7
39915: PPUSH
39916: LD_VAR 0 8
39920: PPUSH
39921: CALL_OW 111
// exit ;
39925: POP
39926: POP
39927: GO 39933
// end ; end ;
39929: GO 39818
39931: POP
39932: POP
// end ;
39933: LD_VAR 0 3
39937: RET
// export function ScanBase ( side , base_area ) ; begin
39938: LD_INT 0
39940: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_VAR 0 2
39950: PPUSH
39951: LD_INT 81
39953: PUSH
39954: LD_VAR 0 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 70
39967: ST_TO_ADDR
// end ;
39968: LD_VAR 0 3
39972: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39973: LD_INT 0
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
// result := false ;
39979: LD_ADDR_VAR 0 2
39983: PUSH
39984: LD_INT 0
39986: ST_TO_ADDR
// side := GetSide ( unit ) ;
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_VAR 0 1
39996: PPUSH
39997: CALL_OW 255
40001: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40002: LD_ADDR_VAR 0 4
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 248
40016: ST_TO_ADDR
// case nat of 1 :
40017: LD_VAR 0 4
40021: PUSH
40022: LD_INT 1
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40030
40028: GO 40041
40030: POP
// tech := tech_lassight ; 2 :
40031: LD_ADDR_VAR 0 5
40035: PUSH
40036: LD_INT 12
40038: ST_TO_ADDR
40039: GO 40080
40041: LD_INT 2
40043: DOUBLE
40044: EQUAL
40045: IFTRUE 40049
40047: GO 40060
40049: POP
// tech := tech_mortar ; 3 :
40050: LD_ADDR_VAR 0 5
40054: PUSH
40055: LD_INT 41
40057: ST_TO_ADDR
40058: GO 40080
40060: LD_INT 3
40062: DOUBLE
40063: EQUAL
40064: IFTRUE 40068
40066: GO 40079
40068: POP
// tech := tech_bazooka ; end ;
40069: LD_ADDR_VAR 0 5
40073: PUSH
40074: LD_INT 44
40076: ST_TO_ADDR
40077: GO 40080
40079: POP
// if Researched ( side , tech ) then
40080: LD_VAR 0 3
40084: PPUSH
40085: LD_VAR 0 5
40089: PPUSH
40090: CALL_OW 325
40094: IFFALSE 40121
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40096: LD_ADDR_VAR 0 2
40100: PUSH
40101: LD_INT 5
40103: PUSH
40104: LD_INT 8
40106: PUSH
40107: LD_INT 9
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: PUSH
40115: LD_VAR 0 4
40119: ARRAY
40120: ST_TO_ADDR
// end ;
40121: LD_VAR 0 2
40125: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40126: LD_INT 0
40128: PPUSH
40129: PPUSH
40130: PPUSH
// if not mines then
40131: LD_VAR 0 2
40135: NOT
40136: IFFALSE 40140
// exit ;
40138: GO 40284
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40140: LD_ADDR_VAR 0 5
40144: PUSH
40145: LD_INT 81
40147: PUSH
40148: LD_VAR 0 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: LD_INT 21
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PPUSH
40178: CALL_OW 69
40182: ST_TO_ADDR
// for i in mines do
40183: LD_ADDR_VAR 0 4
40187: PUSH
40188: LD_VAR 0 2
40192: PUSH
40193: FOR_IN
40194: IFFALSE 40282
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40196: LD_VAR 0 4
40200: PUSH
40201: LD_INT 1
40203: ARRAY
40204: PPUSH
40205: LD_VAR 0 4
40209: PUSH
40210: LD_INT 2
40212: ARRAY
40213: PPUSH
40214: CALL_OW 458
40218: NOT
40219: IFFALSE 40223
// continue ;
40221: GO 40193
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40223: LD_VAR 0 4
40227: PUSH
40228: LD_INT 1
40230: ARRAY
40231: PPUSH
40232: LD_VAR 0 4
40236: PUSH
40237: LD_INT 2
40239: ARRAY
40240: PPUSH
40241: CALL_OW 428
40245: PUSH
40246: LD_VAR 0 5
40250: IN
40251: IFFALSE 40280
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40253: LD_VAR 0 4
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: LD_VAR 0 4
40266: PUSH
40267: LD_INT 2
40269: ARRAY
40270: PPUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 456
// end ;
40280: GO 40193
40282: POP
40283: POP
// end ;
40284: LD_VAR 0 3
40288: RET
// export function Count ( array ) ; begin
40289: LD_INT 0
40291: PPUSH
// result := array + 0 ;
40292: LD_ADDR_VAR 0 2
40296: PUSH
40297: LD_VAR 0 1
40301: PUSH
40302: LD_INT 0
40304: PLUS
40305: ST_TO_ADDR
// end ;
40306: LD_VAR 0 2
40310: RET
// export function IsEmpty ( building ) ; begin
40311: LD_INT 0
40313: PPUSH
// if not building then
40314: LD_VAR 0 1
40318: NOT
40319: IFFALSE 40323
// exit ;
40321: GO 40366
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40323: LD_ADDR_VAR 0 2
40327: PUSH
40328: LD_VAR 0 1
40332: PUSH
40333: LD_INT 22
40335: PUSH
40336: LD_VAR 0 1
40340: PPUSH
40341: CALL_OW 255
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 58
40352: PUSH
40353: EMPTY
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PPUSH
40360: CALL_OW 69
40364: IN
40365: ST_TO_ADDR
// end ;
40366: LD_VAR 0 2
40370: RET
// export function IsNotFull ( building ) ; var places ; begin
40371: LD_INT 0
40373: PPUSH
40374: PPUSH
// if not building then
40375: LD_VAR 0 1
40379: NOT
40380: IFFALSE 40384
// exit ;
40382: GO 40412
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40384: LD_ADDR_VAR 0 2
40388: PUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: LD_INT 3
40396: PUSH
40397: LD_INT 62
40399: PUSH
40400: EMPTY
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PPUSH
40407: CALL_OW 72
40411: ST_TO_ADDR
// end ;
40412: LD_VAR 0 2
40416: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40417: LD_INT 0
40419: PPUSH
40420: PPUSH
40421: PPUSH
40422: PPUSH
// tmp := [ ] ;
40423: LD_ADDR_VAR 0 3
40427: PUSH
40428: EMPTY
40429: ST_TO_ADDR
// list := [ ] ;
40430: LD_ADDR_VAR 0 5
40434: PUSH
40435: EMPTY
40436: ST_TO_ADDR
// for i = 16 to 25 do
40437: LD_ADDR_VAR 0 4
40441: PUSH
40442: DOUBLE
40443: LD_INT 16
40445: DEC
40446: ST_TO_ADDR
40447: LD_INT 25
40449: PUSH
40450: FOR_TO
40451: IFFALSE 40524
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_VAR 0 3
40462: PUSH
40463: LD_INT 22
40465: PUSH
40466: LD_VAR 0 1
40470: PPUSH
40471: CALL_OW 255
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 91
40482: PUSH
40483: LD_VAR 0 1
40487: PUSH
40488: LD_INT 6
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 30
40498: PUSH
40499: LD_VAR 0 4
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: PPUSH
40516: CALL_OW 69
40520: ADD
40521: ST_TO_ADDR
40522: GO 40450
40524: POP
40525: POP
// for i = 1 to tmp do
40526: LD_ADDR_VAR 0 4
40530: PUSH
40531: DOUBLE
40532: LD_INT 1
40534: DEC
40535: ST_TO_ADDR
40536: LD_VAR 0 3
40540: PUSH
40541: FOR_TO
40542: IFFALSE 40630
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40544: LD_ADDR_VAR 0 5
40548: PUSH
40549: LD_VAR 0 5
40553: PUSH
40554: LD_VAR 0 3
40558: PUSH
40559: LD_VAR 0 4
40563: ARRAY
40564: PPUSH
40565: CALL_OW 266
40569: PUSH
40570: LD_VAR 0 3
40574: PUSH
40575: LD_VAR 0 4
40579: ARRAY
40580: PPUSH
40581: CALL_OW 250
40585: PUSH
40586: LD_VAR 0 3
40590: PUSH
40591: LD_VAR 0 4
40595: ARRAY
40596: PPUSH
40597: CALL_OW 251
40601: PUSH
40602: LD_VAR 0 3
40606: PUSH
40607: LD_VAR 0 4
40611: ARRAY
40612: PPUSH
40613: CALL_OW 254
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: PUSH
40624: EMPTY
40625: LIST
40626: ADD
40627: ST_TO_ADDR
40628: GO 40541
40630: POP
40631: POP
// result := list ;
40632: LD_ADDR_VAR 0 2
40636: PUSH
40637: LD_VAR 0 5
40641: ST_TO_ADDR
// end ;
40642: LD_VAR 0 2
40646: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40647: LD_INT 0
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
// if not factory then
40656: LD_VAR 0 1
40660: NOT
40661: IFFALSE 40665
// exit ;
40663: GO 41258
// if control = control_apeman then
40665: LD_VAR 0 4
40669: PUSH
40670: LD_INT 5
40672: EQUAL
40673: IFFALSE 40782
// begin tmp := UnitsInside ( factory ) ;
40675: LD_ADDR_VAR 0 8
40679: PUSH
40680: LD_VAR 0 1
40684: PPUSH
40685: CALL_OW 313
40689: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40690: LD_VAR 0 8
40694: PPUSH
40695: LD_INT 25
40697: PUSH
40698: LD_INT 12
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PPUSH
40705: CALL_OW 72
40709: NOT
40710: IFFALSE 40720
// control := control_manual ;
40712: LD_ADDR_VAR 0 4
40716: PUSH
40717: LD_INT 1
40719: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40720: LD_ADDR_VAR 0 8
40724: PUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: CALL 40417 0 1
40734: ST_TO_ADDR
// if tmp then
40735: LD_VAR 0 8
40739: IFFALSE 40782
// begin for i in tmp do
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 8
40750: PUSH
40751: FOR_IN
40752: IFFALSE 40780
// if i [ 1 ] = b_ext_radio then
40754: LD_VAR 0 7
40758: PUSH
40759: LD_INT 1
40761: ARRAY
40762: PUSH
40763: LD_INT 22
40765: EQUAL
40766: IFFALSE 40778
// begin control := control_remote ;
40768: LD_ADDR_VAR 0 4
40772: PUSH
40773: LD_INT 2
40775: ST_TO_ADDR
// break ;
40776: GO 40780
// end ;
40778: GO 40751
40780: POP
40781: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40782: LD_VAR 0 1
40786: PPUSH
40787: LD_VAR 0 2
40791: PPUSH
40792: LD_VAR 0 3
40796: PPUSH
40797: LD_VAR 0 4
40801: PPUSH
40802: LD_VAR 0 5
40806: PPUSH
40807: CALL_OW 448
40811: IFFALSE 40846
// begin result := [ chassis , engine , control , weapon ] ;
40813: LD_ADDR_VAR 0 6
40817: PUSH
40818: LD_VAR 0 2
40822: PUSH
40823: LD_VAR 0 3
40827: PUSH
40828: LD_VAR 0 4
40832: PUSH
40833: LD_VAR 0 5
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
// exit ;
40844: GO 41258
// end ; _chassis := AvailableChassisList ( factory ) ;
40846: LD_ADDR_VAR 0 9
40850: PUSH
40851: LD_VAR 0 1
40855: PPUSH
40856: CALL_OW 475
40860: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40861: LD_ADDR_VAR 0 11
40865: PUSH
40866: LD_VAR 0 1
40870: PPUSH
40871: CALL_OW 476
40875: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40876: LD_ADDR_VAR 0 12
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 477
40890: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40891: LD_ADDR_VAR 0 10
40895: PUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 478
40905: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40906: LD_VAR 0 9
40910: NOT
40911: PUSH
40912: LD_VAR 0 11
40916: NOT
40917: OR
40918: PUSH
40919: LD_VAR 0 12
40923: NOT
40924: OR
40925: PUSH
40926: LD_VAR 0 10
40930: NOT
40931: OR
40932: IFFALSE 40967
// begin result := [ chassis , engine , control , weapon ] ;
40934: LD_ADDR_VAR 0 6
40938: PUSH
40939: LD_VAR 0 2
40943: PUSH
40944: LD_VAR 0 3
40948: PUSH
40949: LD_VAR 0 4
40953: PUSH
40954: LD_VAR 0 5
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// exit ;
40965: GO 41258
// end ; if not chassis in _chassis then
40967: LD_VAR 0 2
40971: PUSH
40972: LD_VAR 0 9
40976: IN
40977: NOT
40978: IFFALSE 41004
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40980: LD_ADDR_VAR 0 2
40984: PUSH
40985: LD_VAR 0 9
40989: PUSH
40990: LD_INT 1
40992: PPUSH
40993: LD_VAR 0 9
40997: PPUSH
40998: CALL_OW 12
41002: ARRAY
41003: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41004: LD_VAR 0 2
41008: PPUSH
41009: LD_VAR 0 3
41013: PPUSH
41014: CALL 41263 0 2
41018: NOT
41019: IFFALSE 41078
// repeat engine := _engine [ 1 ] ;
41021: LD_ADDR_VAR 0 3
41025: PUSH
41026: LD_VAR 0 11
41030: PUSH
41031: LD_INT 1
41033: ARRAY
41034: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41035: LD_ADDR_VAR 0 11
41039: PUSH
41040: LD_VAR 0 11
41044: PPUSH
41045: LD_INT 1
41047: PPUSH
41048: CALL_OW 3
41052: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41053: LD_VAR 0 2
41057: PPUSH
41058: LD_VAR 0 3
41062: PPUSH
41063: CALL 41263 0 2
41067: PUSH
41068: LD_VAR 0 11
41072: PUSH
41073: EMPTY
41074: EQUAL
41075: OR
41076: IFFALSE 41021
// if not control in _control then
41078: LD_VAR 0 4
41082: PUSH
41083: LD_VAR 0 12
41087: IN
41088: NOT
41089: IFFALSE 41115
// control := _control [ rand ( 1 , _control ) ] ;
41091: LD_ADDR_VAR 0 4
41095: PUSH
41096: LD_VAR 0 12
41100: PUSH
41101: LD_INT 1
41103: PPUSH
41104: LD_VAR 0 12
41108: PPUSH
41109: CALL_OW 12
41113: ARRAY
41114: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41115: LD_VAR 0 2
41119: PPUSH
41120: LD_VAR 0 5
41124: PPUSH
41125: CALL 41483 0 2
41129: NOT
41130: IFFALSE 41189
// repeat weapon := _weapon [ 1 ] ;
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_VAR 0 10
41141: PUSH
41142: LD_INT 1
41144: ARRAY
41145: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41146: LD_ADDR_VAR 0 10
41150: PUSH
41151: LD_VAR 0 10
41155: PPUSH
41156: LD_INT 1
41158: PPUSH
41159: CALL_OW 3
41163: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41164: LD_VAR 0 2
41168: PPUSH
41169: LD_VAR 0 5
41173: PPUSH
41174: CALL 41483 0 2
41178: PUSH
41179: LD_VAR 0 10
41183: PUSH
41184: EMPTY
41185: EQUAL
41186: OR
41187: IFFALSE 41132
// result := [ ] ;
41189: LD_ADDR_VAR 0 6
41193: PUSH
41194: EMPTY
41195: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41196: LD_VAR 0 1
41200: PPUSH
41201: LD_VAR 0 2
41205: PPUSH
41206: LD_VAR 0 3
41210: PPUSH
41211: LD_VAR 0 4
41215: PPUSH
41216: LD_VAR 0 5
41220: PPUSH
41221: CALL_OW 448
41225: IFFALSE 41258
// result := [ chassis , engine , control , weapon ] ;
41227: LD_ADDR_VAR 0 6
41231: PUSH
41232: LD_VAR 0 2
41236: PUSH
41237: LD_VAR 0 3
41241: PUSH
41242: LD_VAR 0 4
41246: PUSH
41247: LD_VAR 0 5
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: ST_TO_ADDR
// end ;
41258: LD_VAR 0 6
41262: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41263: LD_INT 0
41265: PPUSH
// if not chassis or not engine then
41266: LD_VAR 0 1
41270: NOT
41271: PUSH
41272: LD_VAR 0 2
41276: NOT
41277: OR
41278: IFFALSE 41282
// exit ;
41280: GO 41478
// case engine of engine_solar :
41282: LD_VAR 0 2
41286: PUSH
41287: LD_INT 2
41289: DOUBLE
41290: EQUAL
41291: IFTRUE 41295
41293: GO 41333
41295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41296: LD_ADDR_VAR 0 3
41300: PUSH
41301: LD_INT 11
41303: PUSH
41304: LD_INT 12
41306: PUSH
41307: LD_INT 13
41309: PUSH
41310: LD_INT 14
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
41331: GO 41462
41333: LD_INT 1
41335: DOUBLE
41336: EQUAL
41337: IFTRUE 41341
41339: GO 41403
41341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41342: LD_ADDR_VAR 0 3
41346: PUSH
41347: LD_INT 11
41349: PUSH
41350: LD_INT 12
41352: PUSH
41353: LD_INT 13
41355: PUSH
41356: LD_INT 14
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: LD_INT 4
41370: PUSH
41371: LD_INT 5
41373: PUSH
41374: LD_INT 21
41376: PUSH
41377: LD_INT 23
41379: PUSH
41380: LD_INT 22
41382: PUSH
41383: LD_INT 24
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
41401: GO 41462
41403: LD_INT 3
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41461
41411: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_INT 13
41419: PUSH
41420: LD_INT 14
41422: PUSH
41423: LD_INT 2
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: LD_INT 21
41437: PUSH
41438: LD_INT 22
41440: PUSH
41441: LD_INT 23
41443: PUSH
41444: LD_INT 24
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: ST_TO_ADDR
41459: GO 41462
41461: POP
// result := ( chassis in result ) ;
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: LD_VAR 0 1
41471: PUSH
41472: LD_VAR 0 3
41476: IN
41477: ST_TO_ADDR
// end ;
41478: LD_VAR 0 3
41482: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41483: LD_INT 0
41485: PPUSH
// if not chassis or not weapon then
41486: LD_VAR 0 1
41490: NOT
41491: PUSH
41492: LD_VAR 0 2
41496: NOT
41497: OR
41498: IFFALSE 41502
// exit ;
41500: GO 42562
// case weapon of us_machine_gun :
41502: LD_VAR 0 2
41506: PUSH
41507: LD_INT 2
41509: DOUBLE
41510: EQUAL
41511: IFTRUE 41515
41513: GO 41545
41515: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41516: LD_ADDR_VAR 0 3
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: LD_INT 3
41529: PUSH
41530: LD_INT 4
41532: PUSH
41533: LD_INT 5
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
41543: GO 42546
41545: LD_INT 3
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41553
41551: GO 41583
41553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: LD_INT 3
41567: PUSH
41568: LD_INT 4
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
41581: GO 42546
41583: LD_INT 11
41585: DOUBLE
41586: EQUAL
41587: IFTRUE 41591
41589: GO 41621
41591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: LD_INT 4
41608: PUSH
41609: LD_INT 5
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
41619: GO 42546
41621: LD_INT 4
41623: DOUBLE
41624: EQUAL
41625: IFTRUE 41629
41627: GO 41655
41629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: LD_INT 4
41643: PUSH
41644: LD_INT 5
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
41653: GO 42546
41655: LD_INT 5
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41663
41661: GO 41689
41663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41664: LD_ADDR_VAR 0 3
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 4
41677: PUSH
41678: LD_INT 5
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
41687: GO 42546
41689: LD_INT 9
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41723
41697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
41721: GO 42546
41723: LD_INT 7
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41757
41731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: LD_INT 4
41745: PUSH
41746: LD_INT 5
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
41755: GO 42546
41757: LD_INT 12
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 41791
41765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: LD_INT 4
41779: PUSH
41780: LD_INT 5
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: ST_TO_ADDR
41789: GO 42546
41791: LD_INT 13
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41799
41797: GO 41825
41799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: LD_INT 4
41813: PUSH
41814: LD_INT 5
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
41823: GO 42546
41825: LD_INT 14
41827: DOUBLE
41828: EQUAL
41829: IFTRUE 41833
41831: GO 41851
41833: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41834: LD_ADDR_VAR 0 3
41838: PUSH
41839: LD_INT 4
41841: PUSH
41842: LD_INT 5
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: ST_TO_ADDR
41849: GO 42546
41851: LD_INT 6
41853: DOUBLE
41854: EQUAL
41855: IFTRUE 41859
41857: GO 41877
41859: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41860: LD_ADDR_VAR 0 3
41864: PUSH
41865: LD_INT 4
41867: PUSH
41868: LD_INT 5
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: ST_TO_ADDR
41875: GO 42546
41877: LD_INT 10
41879: DOUBLE
41880: EQUAL
41881: IFTRUE 41885
41883: GO 41903
41885: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_INT 4
41893: PUSH
41894: LD_INT 5
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: ST_TO_ADDR
41901: GO 42546
41903: LD_INT 22
41905: DOUBLE
41906: EQUAL
41907: IFTRUE 41911
41909: GO 41937
41911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41912: LD_ADDR_VAR 0 3
41916: PUSH
41917: LD_INT 11
41919: PUSH
41920: LD_INT 12
41922: PUSH
41923: LD_INT 13
41925: PUSH
41926: LD_INT 14
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
41935: GO 42546
41937: LD_INT 23
41939: DOUBLE
41940: EQUAL
41941: IFTRUE 41945
41943: GO 41971
41945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41946: LD_ADDR_VAR 0 3
41950: PUSH
41951: LD_INT 11
41953: PUSH
41954: LD_INT 12
41956: PUSH
41957: LD_INT 13
41959: PUSH
41960: LD_INT 14
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: ST_TO_ADDR
41969: GO 42546
41971: LD_INT 24
41973: DOUBLE
41974: EQUAL
41975: IFTRUE 41979
41977: GO 42005
41979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41980: LD_ADDR_VAR 0 3
41984: PUSH
41985: LD_INT 11
41987: PUSH
41988: LD_INT 12
41990: PUSH
41991: LD_INT 13
41993: PUSH
41994: LD_INT 14
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
42003: GO 42546
42005: LD_INT 30
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42039
42013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_INT 11
42021: PUSH
42022: LD_INT 12
42024: PUSH
42025: LD_INT 13
42027: PUSH
42028: LD_INT 14
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: ST_TO_ADDR
42037: GO 42546
42039: LD_INT 25
42041: DOUBLE
42042: EQUAL
42043: IFTRUE 42047
42045: GO 42065
42047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_INT 13
42055: PUSH
42056: LD_INT 14
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: ST_TO_ADDR
42063: GO 42546
42065: LD_INT 27
42067: DOUBLE
42068: EQUAL
42069: IFTRUE 42073
42071: GO 42091
42073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42074: LD_ADDR_VAR 0 3
42078: PUSH
42079: LD_INT 13
42081: PUSH
42082: LD_INT 14
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: ST_TO_ADDR
42089: GO 42546
42091: LD_INT 92
42093: DOUBLE
42094: EQUAL
42095: IFTRUE 42099
42097: GO 42125
42099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42100: LD_ADDR_VAR 0 3
42104: PUSH
42105: LD_INT 11
42107: PUSH
42108: LD_INT 12
42110: PUSH
42111: LD_INT 13
42113: PUSH
42114: LD_INT 14
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
42123: GO 42546
42125: LD_INT 28
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42151
42133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_INT 13
42141: PUSH
42142: LD_INT 14
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: ST_TO_ADDR
42149: GO 42546
42151: LD_INT 29
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 42177
42159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42160: LD_ADDR_VAR 0 3
42164: PUSH
42165: LD_INT 13
42167: PUSH
42168: LD_INT 14
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: ST_TO_ADDR
42175: GO 42546
42177: LD_INT 31
42179: DOUBLE
42180: EQUAL
42181: IFTRUE 42185
42183: GO 42203
42185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_INT 13
42193: PUSH
42194: LD_INT 14
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: ST_TO_ADDR
42201: GO 42546
42203: LD_INT 26
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42211
42209: GO 42229
42211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 13
42219: PUSH
42220: LD_INT 14
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: ST_TO_ADDR
42227: GO 42546
42229: LD_INT 42
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42237
42235: GO 42263
42237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42238: LD_ADDR_VAR 0 3
42242: PUSH
42243: LD_INT 21
42245: PUSH
42246: LD_INT 22
42248: PUSH
42249: LD_INT 23
42251: PUSH
42252: LD_INT 24
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
42261: GO 42546
42263: LD_INT 43
42265: DOUBLE
42266: EQUAL
42267: IFTRUE 42271
42269: GO 42297
42271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_INT 21
42279: PUSH
42280: LD_INT 22
42282: PUSH
42283: LD_INT 23
42285: PUSH
42286: LD_INT 24
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
42295: GO 42546
42297: LD_INT 44
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42331
42305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_INT 21
42313: PUSH
42314: LD_INT 22
42316: PUSH
42317: LD_INT 23
42319: PUSH
42320: LD_INT 24
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
42329: GO 42546
42331: LD_INT 45
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42365
42339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_INT 21
42347: PUSH
42348: LD_INT 22
42350: PUSH
42351: LD_INT 23
42353: PUSH
42354: LD_INT 24
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
42363: GO 42546
42365: LD_INT 49
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42399
42373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 21
42381: PUSH
42382: LD_INT 22
42384: PUSH
42385: LD_INT 23
42387: PUSH
42388: LD_INT 24
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42546
42399: LD_INT 51
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42433
42407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 21
42415: PUSH
42416: LD_INT 22
42418: PUSH
42419: LD_INT 23
42421: PUSH
42422: LD_INT 24
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
42431: GO 42546
42433: LD_INT 52
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42467
42441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 21
42449: PUSH
42450: LD_INT 22
42452: PUSH
42453: LD_INT 23
42455: PUSH
42456: LD_INT 24
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
42465: GO 42546
42467: LD_INT 53
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42475
42473: GO 42493
42475: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42476: LD_ADDR_VAR 0 3
42480: PUSH
42481: LD_INT 23
42483: PUSH
42484: LD_INT 24
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: ST_TO_ADDR
42491: GO 42546
42493: LD_INT 46
42495: DOUBLE
42496: EQUAL
42497: IFTRUE 42501
42499: GO 42519
42501: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: LD_INT 23
42509: PUSH
42510: LD_INT 24
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: ST_TO_ADDR
42517: GO 42546
42519: LD_INT 47
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42545
42527: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_INT 23
42535: PUSH
42536: LD_INT 24
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: ST_TO_ADDR
42543: GO 42546
42545: POP
// result := ( chassis in result ) ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_VAR 0 3
42560: IN
42561: ST_TO_ADDR
// end ;
42562: LD_VAR 0 3
42566: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42567: LD_INT 0
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
// result := array ;
42576: LD_ADDR_VAR 0 5
42580: PUSH
42581: LD_VAR 0 1
42585: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42586: LD_VAR 0 1
42590: NOT
42591: PUSH
42592: LD_VAR 0 2
42596: NOT
42597: OR
42598: PUSH
42599: LD_VAR 0 3
42603: NOT
42604: OR
42605: PUSH
42606: LD_VAR 0 2
42610: PUSH
42611: LD_VAR 0 1
42615: GREATER
42616: OR
42617: PUSH
42618: LD_VAR 0 3
42622: PUSH
42623: LD_VAR 0 1
42627: GREATER
42628: OR
42629: IFFALSE 42633
// exit ;
42631: GO 42929
// if direction then
42633: LD_VAR 0 4
42637: IFFALSE 42701
// begin d := 1 ;
42639: LD_ADDR_VAR 0 9
42643: PUSH
42644: LD_INT 1
42646: ST_TO_ADDR
// if i_from > i_to then
42647: LD_VAR 0 2
42651: PUSH
42652: LD_VAR 0 3
42656: GREATER
42657: IFFALSE 42683
// length := ( array - i_from ) + i_to else
42659: LD_ADDR_VAR 0 11
42663: PUSH
42664: LD_VAR 0 1
42668: PUSH
42669: LD_VAR 0 2
42673: MINUS
42674: PUSH
42675: LD_VAR 0 3
42679: PLUS
42680: ST_TO_ADDR
42681: GO 42699
// length := i_to - i_from ;
42683: LD_ADDR_VAR 0 11
42687: PUSH
42688: LD_VAR 0 3
42692: PUSH
42693: LD_VAR 0 2
42697: MINUS
42698: ST_TO_ADDR
// end else
42699: GO 42762
// begin d := - 1 ;
42701: LD_ADDR_VAR 0 9
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: ST_TO_ADDR
// if i_from > i_to then
42710: LD_VAR 0 2
42714: PUSH
42715: LD_VAR 0 3
42719: GREATER
42720: IFFALSE 42740
// length := i_from - i_to else
42722: LD_ADDR_VAR 0 11
42726: PUSH
42727: LD_VAR 0 2
42731: PUSH
42732: LD_VAR 0 3
42736: MINUS
42737: ST_TO_ADDR
42738: GO 42762
// length := ( array - i_to ) + i_from ;
42740: LD_ADDR_VAR 0 11
42744: PUSH
42745: LD_VAR 0 1
42749: PUSH
42750: LD_VAR 0 3
42754: MINUS
42755: PUSH
42756: LD_VAR 0 2
42760: PLUS
42761: ST_TO_ADDR
// end ; if not length then
42762: LD_VAR 0 11
42766: NOT
42767: IFFALSE 42771
// exit ;
42769: GO 42929
// tmp := array ;
42771: LD_ADDR_VAR 0 10
42775: PUSH
42776: LD_VAR 0 1
42780: ST_TO_ADDR
// for i = 1 to length do
42781: LD_ADDR_VAR 0 6
42785: PUSH
42786: DOUBLE
42787: LD_INT 1
42789: DEC
42790: ST_TO_ADDR
42791: LD_VAR 0 11
42795: PUSH
42796: FOR_TO
42797: IFFALSE 42917
// begin for j = 1 to array do
42799: LD_ADDR_VAR 0 7
42803: PUSH
42804: DOUBLE
42805: LD_INT 1
42807: DEC
42808: ST_TO_ADDR
42809: LD_VAR 0 1
42813: PUSH
42814: FOR_TO
42815: IFFALSE 42903
// begin k := j + d ;
42817: LD_ADDR_VAR 0 8
42821: PUSH
42822: LD_VAR 0 7
42826: PUSH
42827: LD_VAR 0 9
42831: PLUS
42832: ST_TO_ADDR
// if k > array then
42833: LD_VAR 0 8
42837: PUSH
42838: LD_VAR 0 1
42842: GREATER
42843: IFFALSE 42853
// k := 1 ;
42845: LD_ADDR_VAR 0 8
42849: PUSH
42850: LD_INT 1
42852: ST_TO_ADDR
// if not k then
42853: LD_VAR 0 8
42857: NOT
42858: IFFALSE 42870
// k := array ;
42860: LD_ADDR_VAR 0 8
42864: PUSH
42865: LD_VAR 0 1
42869: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42870: LD_ADDR_VAR 0 10
42874: PUSH
42875: LD_VAR 0 10
42879: PPUSH
42880: LD_VAR 0 8
42884: PPUSH
42885: LD_VAR 0 1
42889: PUSH
42890: LD_VAR 0 7
42894: ARRAY
42895: PPUSH
42896: CALL_OW 1
42900: ST_TO_ADDR
// end ;
42901: GO 42814
42903: POP
42904: POP
// array := tmp ;
42905: LD_ADDR_VAR 0 1
42909: PUSH
42910: LD_VAR 0 10
42914: ST_TO_ADDR
// end ;
42915: GO 42796
42917: POP
42918: POP
// result := array ;
42919: LD_ADDR_VAR 0 5
42923: PUSH
42924: LD_VAR 0 1
42928: ST_TO_ADDR
// end ;
42929: LD_VAR 0 5
42933: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42934: LD_INT 0
42936: PPUSH
42937: PPUSH
// result := 0 ;
42938: LD_ADDR_VAR 0 3
42942: PUSH
42943: LD_INT 0
42945: ST_TO_ADDR
// if not array or not value in array then
42946: LD_VAR 0 1
42950: NOT
42951: PUSH
42952: LD_VAR 0 2
42956: PUSH
42957: LD_VAR 0 1
42961: IN
42962: NOT
42963: OR
42964: IFFALSE 42968
// exit ;
42966: GO 43022
// for i = 1 to array do
42968: LD_ADDR_VAR 0 4
42972: PUSH
42973: DOUBLE
42974: LD_INT 1
42976: DEC
42977: ST_TO_ADDR
42978: LD_VAR 0 1
42982: PUSH
42983: FOR_TO
42984: IFFALSE 43020
// if value = array [ i ] then
42986: LD_VAR 0 2
42990: PUSH
42991: LD_VAR 0 1
42995: PUSH
42996: LD_VAR 0 4
43000: ARRAY
43001: EQUAL
43002: IFFALSE 43018
// begin result := i ;
43004: LD_ADDR_VAR 0 3
43008: PUSH
43009: LD_VAR 0 4
43013: ST_TO_ADDR
// exit ;
43014: POP
43015: POP
43016: GO 43022
// end ;
43018: GO 42983
43020: POP
43021: POP
// end ;
43022: LD_VAR 0 3
43026: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43027: LD_INT 0
43029: PPUSH
// vc_chassis := chassis ;
43030: LD_ADDR_OWVAR 37
43034: PUSH
43035: LD_VAR 0 1
43039: ST_TO_ADDR
// vc_engine := engine ;
43040: LD_ADDR_OWVAR 39
43044: PUSH
43045: LD_VAR 0 2
43049: ST_TO_ADDR
// vc_control := control ;
43050: LD_ADDR_OWVAR 38
43054: PUSH
43055: LD_VAR 0 3
43059: ST_TO_ADDR
// vc_weapon := weapon ;
43060: LD_ADDR_OWVAR 40
43064: PUSH
43065: LD_VAR 0 4
43069: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43070: LD_ADDR_OWVAR 41
43074: PUSH
43075: LD_VAR 0 5
43079: ST_TO_ADDR
// end ;
43080: LD_VAR 0 6
43084: RET
// export function WantPlant ( unit ) ; var task ; begin
43085: LD_INT 0
43087: PPUSH
43088: PPUSH
// result := false ;
43089: LD_ADDR_VAR 0 2
43093: PUSH
43094: LD_INT 0
43096: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43097: LD_ADDR_VAR 0 3
43101: PUSH
43102: LD_VAR 0 1
43106: PPUSH
43107: CALL_OW 437
43111: ST_TO_ADDR
// if task then
43112: LD_VAR 0 3
43116: IFFALSE 43144
// if task [ 1 ] [ 1 ] = p then
43118: LD_VAR 0 3
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: ARRAY
43130: PUSH
43131: LD_STRING p
43133: EQUAL
43134: IFFALSE 43144
// result := true ;
43136: LD_ADDR_VAR 0 2
43140: PUSH
43141: LD_INT 1
43143: ST_TO_ADDR
// end ;
43144: LD_VAR 0 2
43148: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43149: LD_INT 0
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
// if pos < 1 then
43155: LD_VAR 0 2
43159: PUSH
43160: LD_INT 1
43162: LESS
43163: IFFALSE 43167
// exit ;
43165: GO 43470
// if pos = 1 then
43167: LD_VAR 0 2
43171: PUSH
43172: LD_INT 1
43174: EQUAL
43175: IFFALSE 43208
// result := Replace ( arr , pos [ 1 ] , value ) else
43177: LD_ADDR_VAR 0 4
43181: PUSH
43182: LD_VAR 0 1
43186: PPUSH
43187: LD_VAR 0 2
43191: PUSH
43192: LD_INT 1
43194: ARRAY
43195: PPUSH
43196: LD_VAR 0 3
43200: PPUSH
43201: CALL_OW 1
43205: ST_TO_ADDR
43206: GO 43470
// begin tmp := arr ;
43208: LD_ADDR_VAR 0 6
43212: PUSH
43213: LD_VAR 0 1
43217: ST_TO_ADDR
// s_arr := [ tmp ] ;
43218: LD_ADDR_VAR 0 7
43222: PUSH
43223: LD_VAR 0 6
43227: PUSH
43228: EMPTY
43229: LIST
43230: ST_TO_ADDR
// for i = 1 to pos - 1 do
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: DOUBLE
43237: LD_INT 1
43239: DEC
43240: ST_TO_ADDR
43241: LD_VAR 0 2
43245: PUSH
43246: LD_INT 1
43248: MINUS
43249: PUSH
43250: FOR_TO
43251: IFFALSE 43296
// begin tmp := tmp [ pos [ i ] ] ;
43253: LD_ADDR_VAR 0 6
43257: PUSH
43258: LD_VAR 0 6
43262: PUSH
43263: LD_VAR 0 2
43267: PUSH
43268: LD_VAR 0 5
43272: ARRAY
43273: ARRAY
43274: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43275: LD_ADDR_VAR 0 7
43279: PUSH
43280: LD_VAR 0 7
43284: PUSH
43285: LD_VAR 0 6
43289: PUSH
43290: EMPTY
43291: LIST
43292: ADD
43293: ST_TO_ADDR
// end ;
43294: GO 43250
43296: POP
43297: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43298: LD_ADDR_VAR 0 6
43302: PUSH
43303: LD_VAR 0 6
43307: PPUSH
43308: LD_VAR 0 2
43312: PUSH
43313: LD_VAR 0 2
43317: ARRAY
43318: PPUSH
43319: LD_VAR 0 3
43323: PPUSH
43324: CALL_OW 1
43328: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43329: LD_ADDR_VAR 0 7
43333: PUSH
43334: LD_VAR 0 7
43338: PPUSH
43339: LD_VAR 0 7
43343: PPUSH
43344: LD_VAR 0 6
43348: PPUSH
43349: CALL_OW 1
43353: ST_TO_ADDR
// for i = s_arr downto 2 do
43354: LD_ADDR_VAR 0 5
43358: PUSH
43359: DOUBLE
43360: LD_VAR 0 7
43364: INC
43365: ST_TO_ADDR
43366: LD_INT 2
43368: PUSH
43369: FOR_DOWNTO
43370: IFFALSE 43454
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43372: LD_ADDR_VAR 0 6
43376: PUSH
43377: LD_VAR 0 7
43381: PUSH
43382: LD_VAR 0 5
43386: PUSH
43387: LD_INT 1
43389: MINUS
43390: ARRAY
43391: PPUSH
43392: LD_VAR 0 2
43396: PUSH
43397: LD_VAR 0 5
43401: PUSH
43402: LD_INT 1
43404: MINUS
43405: ARRAY
43406: PPUSH
43407: LD_VAR 0 7
43411: PUSH
43412: LD_VAR 0 5
43416: ARRAY
43417: PPUSH
43418: CALL_OW 1
43422: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43423: LD_ADDR_VAR 0 7
43427: PUSH
43428: LD_VAR 0 7
43432: PPUSH
43433: LD_VAR 0 5
43437: PUSH
43438: LD_INT 1
43440: MINUS
43441: PPUSH
43442: LD_VAR 0 6
43446: PPUSH
43447: CALL_OW 1
43451: ST_TO_ADDR
// end ;
43452: GO 43369
43454: POP
43455: POP
// result := s_arr [ 1 ] ;
43456: LD_ADDR_VAR 0 4
43460: PUSH
43461: LD_VAR 0 7
43465: PUSH
43466: LD_INT 1
43468: ARRAY
43469: ST_TO_ADDR
// end ; end ;
43470: LD_VAR 0 4
43474: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43475: LD_INT 0
43477: PPUSH
43478: PPUSH
// if not list then
43479: LD_VAR 0 1
43483: NOT
43484: IFFALSE 43488
// exit ;
43486: GO 43579
// i := list [ pos1 ] ;
43488: LD_ADDR_VAR 0 5
43492: PUSH
43493: LD_VAR 0 1
43497: PUSH
43498: LD_VAR 0 2
43502: ARRAY
43503: ST_TO_ADDR
// if not i then
43504: LD_VAR 0 5
43508: NOT
43509: IFFALSE 43513
// exit ;
43511: GO 43579
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43513: LD_ADDR_VAR 0 1
43517: PUSH
43518: LD_VAR 0 1
43522: PPUSH
43523: LD_VAR 0 2
43527: PPUSH
43528: LD_VAR 0 1
43532: PUSH
43533: LD_VAR 0 3
43537: ARRAY
43538: PPUSH
43539: CALL_OW 1
43543: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43544: LD_ADDR_VAR 0 1
43548: PUSH
43549: LD_VAR 0 1
43553: PPUSH
43554: LD_VAR 0 3
43558: PPUSH
43559: LD_VAR 0 5
43563: PPUSH
43564: CALL_OW 1
43568: ST_TO_ADDR
// result := list ;
43569: LD_ADDR_VAR 0 4
43573: PUSH
43574: LD_VAR 0 1
43578: ST_TO_ADDR
// end ;
43579: LD_VAR 0 4
43583: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43584: LD_INT 0
43586: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43587: LD_ADDR_VAR 0 5
43591: PUSH
43592: LD_VAR 0 1
43596: PPUSH
43597: CALL_OW 250
43601: PPUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL_OW 251
43611: PPUSH
43612: LD_VAR 0 2
43616: PPUSH
43617: LD_VAR 0 3
43621: PPUSH
43622: LD_VAR 0 4
43626: PPUSH
43627: CALL 44005 0 5
43631: ST_TO_ADDR
// end ;
43632: LD_VAR 0 5
43636: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43637: LD_INT 0
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
// if not list or not unit then
43643: LD_VAR 0 2
43647: NOT
43648: PUSH
43649: LD_VAR 0 1
43653: NOT
43654: OR
43655: IFFALSE 43659
// exit ;
43657: GO 44000
// result := [ ] ;
43659: LD_ADDR_VAR 0 5
43663: PUSH
43664: EMPTY
43665: ST_TO_ADDR
// for i in list do
43666: LD_ADDR_VAR 0 6
43670: PUSH
43671: LD_VAR 0 2
43675: PUSH
43676: FOR_IN
43677: IFFALSE 43895
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43679: LD_ADDR_VAR 0 8
43683: PUSH
43684: LD_VAR 0 1
43688: PPUSH
43689: LD_VAR 0 6
43693: PUSH
43694: LD_INT 1
43696: ARRAY
43697: PPUSH
43698: LD_VAR 0 6
43702: PUSH
43703: LD_INT 2
43705: ARRAY
43706: PPUSH
43707: CALL_OW 297
43711: ST_TO_ADDR
// if not Count ( result ) then
43712: LD_VAR 0 5
43716: PPUSH
43717: CALL 40289 0 1
43721: NOT
43722: IFFALSE 43755
// begin result := Join ( result , [ i , tmp ] ) ;
43724: LD_ADDR_VAR 0 5
43728: PUSH
43729: LD_VAR 0 5
43733: PPUSH
43734: LD_VAR 0 6
43738: PUSH
43739: LD_VAR 0 8
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PPUSH
43748: CALL 75898 0 2
43752: ST_TO_ADDR
// continue ;
43753: GO 43676
// end ; if result [ result ] [ 2 ] <= tmp then
43755: LD_VAR 0 5
43759: PUSH
43760: LD_VAR 0 5
43764: ARRAY
43765: PUSH
43766: LD_INT 2
43768: ARRAY
43769: PUSH
43770: LD_VAR 0 8
43774: LESSEQUAL
43775: IFFALSE 43808
// result := Join ( result , [ i , tmp ] ) else
43777: LD_ADDR_VAR 0 5
43781: PUSH
43782: LD_VAR 0 5
43786: PPUSH
43787: LD_VAR 0 6
43791: PUSH
43792: LD_VAR 0 8
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PPUSH
43801: CALL 75898 0 2
43805: ST_TO_ADDR
43806: GO 43893
// begin for j := 1 to Count ( result ) do
43808: LD_ADDR_VAR 0 7
43812: PUSH
43813: DOUBLE
43814: LD_INT 1
43816: DEC
43817: ST_TO_ADDR
43818: LD_VAR 0 5
43822: PPUSH
43823: CALL 40289 0 1
43827: PUSH
43828: FOR_TO
43829: IFFALSE 43891
// begin if tmp < result [ j ] [ 2 ] then
43831: LD_VAR 0 8
43835: PUSH
43836: LD_VAR 0 5
43840: PUSH
43841: LD_VAR 0 7
43845: ARRAY
43846: PUSH
43847: LD_INT 2
43849: ARRAY
43850: LESS
43851: IFFALSE 43889
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_VAR 0 5
43862: PPUSH
43863: LD_VAR 0 7
43867: PPUSH
43868: LD_VAR 0 6
43872: PUSH
43873: LD_VAR 0 8
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PPUSH
43882: CALL_OW 2
43886: ST_TO_ADDR
// break ;
43887: GO 43891
// end ; end ;
43889: GO 43828
43891: POP
43892: POP
// end ; end ;
43893: GO 43676
43895: POP
43896: POP
// if result and not asc then
43897: LD_VAR 0 5
43901: PUSH
43902: LD_VAR 0 3
43906: NOT
43907: AND
43908: IFFALSE 43925
// result := ReverseArray ( result ) ;
43910: LD_ADDR_VAR 0 5
43914: PUSH
43915: LD_VAR 0 5
43919: PPUSH
43920: CALL 71165 0 1
43924: ST_TO_ADDR
// tmp := [ ] ;
43925: LD_ADDR_VAR 0 8
43929: PUSH
43930: EMPTY
43931: ST_TO_ADDR
// if mode then
43932: LD_VAR 0 4
43936: IFFALSE 44000
// begin for i := 1 to result do
43938: LD_ADDR_VAR 0 6
43942: PUSH
43943: DOUBLE
43944: LD_INT 1
43946: DEC
43947: ST_TO_ADDR
43948: LD_VAR 0 5
43952: PUSH
43953: FOR_TO
43954: IFFALSE 43988
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43956: LD_ADDR_VAR 0 8
43960: PUSH
43961: LD_VAR 0 8
43965: PPUSH
43966: LD_VAR 0 5
43970: PUSH
43971: LD_VAR 0 6
43975: ARRAY
43976: PUSH
43977: LD_INT 1
43979: ARRAY
43980: PPUSH
43981: CALL 75898 0 2
43985: ST_TO_ADDR
43986: GO 43953
43988: POP
43989: POP
// result := tmp ;
43990: LD_ADDR_VAR 0 5
43994: PUSH
43995: LD_VAR 0 8
43999: ST_TO_ADDR
// end ; end ;
44000: LD_VAR 0 5
44004: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44005: LD_INT 0
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
// if not list then
44011: LD_VAR 0 3
44015: NOT
44016: IFFALSE 44020
// exit ;
44018: GO 44408
// result := [ ] ;
44020: LD_ADDR_VAR 0 6
44024: PUSH
44025: EMPTY
44026: ST_TO_ADDR
// for i in list do
44027: LD_ADDR_VAR 0 7
44031: PUSH
44032: LD_VAR 0 3
44036: PUSH
44037: FOR_IN
44038: IFFALSE 44240
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44040: LD_ADDR_VAR 0 9
44044: PUSH
44045: LD_VAR 0 7
44049: PPUSH
44050: LD_VAR 0 1
44054: PPUSH
44055: LD_VAR 0 2
44059: PPUSH
44060: CALL_OW 297
44064: ST_TO_ADDR
// if not result then
44065: LD_VAR 0 6
44069: NOT
44070: IFFALSE 44096
// result := [ [ i , tmp ] ] else
44072: LD_ADDR_VAR 0 6
44076: PUSH
44077: LD_VAR 0 7
44081: PUSH
44082: LD_VAR 0 9
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: ST_TO_ADDR
44094: GO 44238
// begin if result [ result ] [ 2 ] <= tmp then
44096: LD_VAR 0 6
44100: PUSH
44101: LD_VAR 0 6
44105: ARRAY
44106: PUSH
44107: LD_INT 2
44109: ARRAY
44110: PUSH
44111: LD_VAR 0 9
44115: LESSEQUAL
44116: IFFALSE 44158
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44118: LD_ADDR_VAR 0 6
44122: PUSH
44123: LD_VAR 0 6
44127: PPUSH
44128: LD_VAR 0 6
44132: PUSH
44133: LD_INT 1
44135: PLUS
44136: PPUSH
44137: LD_VAR 0 7
44141: PUSH
44142: LD_VAR 0 9
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PPUSH
44151: CALL_OW 2
44155: ST_TO_ADDR
44156: GO 44238
// for j := 1 to result do
44158: LD_ADDR_VAR 0 8
44162: PUSH
44163: DOUBLE
44164: LD_INT 1
44166: DEC
44167: ST_TO_ADDR
44168: LD_VAR 0 6
44172: PUSH
44173: FOR_TO
44174: IFFALSE 44236
// begin if tmp < result [ j ] [ 2 ] then
44176: LD_VAR 0 9
44180: PUSH
44181: LD_VAR 0 6
44185: PUSH
44186: LD_VAR 0 8
44190: ARRAY
44191: PUSH
44192: LD_INT 2
44194: ARRAY
44195: LESS
44196: IFFALSE 44234
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44198: LD_ADDR_VAR 0 6
44202: PUSH
44203: LD_VAR 0 6
44207: PPUSH
44208: LD_VAR 0 8
44212: PPUSH
44213: LD_VAR 0 7
44217: PUSH
44218: LD_VAR 0 9
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PPUSH
44227: CALL_OW 2
44231: ST_TO_ADDR
// break ;
44232: GO 44236
// end ; end ;
44234: GO 44173
44236: POP
44237: POP
// end ; end ;
44238: GO 44037
44240: POP
44241: POP
// if result and not asc then
44242: LD_VAR 0 6
44246: PUSH
44247: LD_VAR 0 4
44251: NOT
44252: AND
44253: IFFALSE 44328
// begin tmp := result ;
44255: LD_ADDR_VAR 0 9
44259: PUSH
44260: LD_VAR 0 6
44264: ST_TO_ADDR
// for i = tmp downto 1 do
44265: LD_ADDR_VAR 0 7
44269: PUSH
44270: DOUBLE
44271: LD_VAR 0 9
44275: INC
44276: ST_TO_ADDR
44277: LD_INT 1
44279: PUSH
44280: FOR_DOWNTO
44281: IFFALSE 44326
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44283: LD_ADDR_VAR 0 6
44287: PUSH
44288: LD_VAR 0 6
44292: PPUSH
44293: LD_VAR 0 9
44297: PUSH
44298: LD_VAR 0 7
44302: MINUS
44303: PUSH
44304: LD_INT 1
44306: PLUS
44307: PPUSH
44308: LD_VAR 0 9
44312: PUSH
44313: LD_VAR 0 7
44317: ARRAY
44318: PPUSH
44319: CALL_OW 1
44323: ST_TO_ADDR
44324: GO 44280
44326: POP
44327: POP
// end ; tmp := [ ] ;
44328: LD_ADDR_VAR 0 9
44332: PUSH
44333: EMPTY
44334: ST_TO_ADDR
// if mode then
44335: LD_VAR 0 5
44339: IFFALSE 44408
// begin for i = 1 to result do
44341: LD_ADDR_VAR 0 7
44345: PUSH
44346: DOUBLE
44347: LD_INT 1
44349: DEC
44350: ST_TO_ADDR
44351: LD_VAR 0 6
44355: PUSH
44356: FOR_TO
44357: IFFALSE 44396
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44359: LD_ADDR_VAR 0 9
44363: PUSH
44364: LD_VAR 0 9
44368: PPUSH
44369: LD_VAR 0 7
44373: PPUSH
44374: LD_VAR 0 6
44378: PUSH
44379: LD_VAR 0 7
44383: ARRAY
44384: PUSH
44385: LD_INT 1
44387: ARRAY
44388: PPUSH
44389: CALL_OW 1
44393: ST_TO_ADDR
44394: GO 44356
44396: POP
44397: POP
// result := tmp ;
44398: LD_ADDR_VAR 0 6
44402: PUSH
44403: LD_VAR 0 9
44407: ST_TO_ADDR
// end ; end ;
44408: LD_VAR 0 6
44412: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44413: LD_INT 0
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
44420: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44421: LD_ADDR_VAR 0 5
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// if not x or not y then
44443: LD_VAR 0 2
44447: NOT
44448: PUSH
44449: LD_VAR 0 3
44453: NOT
44454: OR
44455: IFFALSE 44459
// exit ;
44457: GO 46109
// if not range then
44459: LD_VAR 0 4
44463: NOT
44464: IFFALSE 44474
// range := 10 ;
44466: LD_ADDR_VAR 0 4
44470: PUSH
44471: LD_INT 10
44473: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44474: LD_ADDR_VAR 0 8
44478: PUSH
44479: LD_INT 81
44481: PUSH
44482: LD_VAR 0 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 92
44493: PUSH
44494: LD_VAR 0 2
44498: PUSH
44499: LD_VAR 0 3
44503: PUSH
44504: LD_VAR 0 4
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: LD_INT 21
44520: PUSH
44521: LD_INT 3
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: PPUSH
44537: CALL_OW 69
44541: ST_TO_ADDR
// if not tmp then
44542: LD_VAR 0 8
44546: NOT
44547: IFFALSE 44551
// exit ;
44549: GO 46109
// for i in tmp do
44551: LD_ADDR_VAR 0 6
44555: PUSH
44556: LD_VAR 0 8
44560: PUSH
44561: FOR_IN
44562: IFFALSE 46084
// begin points := [ 0 , 0 , 0 ] ;
44564: LD_ADDR_VAR 0 9
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// bpoints := 1 ;
44583: LD_ADDR_VAR 0 10
44587: PUSH
44588: LD_INT 1
44590: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44591: LD_VAR 0 6
44595: PPUSH
44596: CALL_OW 247
44600: PUSH
44601: LD_INT 1
44603: DOUBLE
44604: EQUAL
44605: IFTRUE 44609
44607: GO 45187
44609: POP
// begin if GetClass ( i ) = 1 then
44610: LD_VAR 0 6
44614: PPUSH
44615: CALL_OW 257
44619: PUSH
44620: LD_INT 1
44622: EQUAL
44623: IFFALSE 44644
// points := [ 10 , 5 , 3 ] ;
44625: LD_ADDR_VAR 0 9
44629: PUSH
44630: LD_INT 10
44632: PUSH
44633: LD_INT 5
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44644: LD_VAR 0 6
44648: PPUSH
44649: CALL_OW 257
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: LD_INT 4
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: IN
44668: IFFALSE 44689
// points := [ 3 , 2 , 1 ] ;
44670: LD_ADDR_VAR 0 9
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44689: LD_VAR 0 6
44693: PPUSH
44694: CALL_OW 257
44698: PUSH
44699: LD_INT 5
44701: EQUAL
44702: IFFALSE 44723
// points := [ 130 , 5 , 2 ] ;
44704: LD_ADDR_VAR 0 9
44708: PUSH
44709: LD_INT 130
44711: PUSH
44712: LD_INT 5
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44723: LD_VAR 0 6
44727: PPUSH
44728: CALL_OW 257
44732: PUSH
44733: LD_INT 8
44735: EQUAL
44736: IFFALSE 44757
// points := [ 35 , 35 , 30 ] ;
44738: LD_ADDR_VAR 0 9
44742: PUSH
44743: LD_INT 35
44745: PUSH
44746: LD_INT 35
44748: PUSH
44749: LD_INT 30
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44757: LD_VAR 0 6
44761: PPUSH
44762: CALL_OW 257
44766: PUSH
44767: LD_INT 9
44769: EQUAL
44770: IFFALSE 44791
// points := [ 20 , 55 , 40 ] ;
44772: LD_ADDR_VAR 0 9
44776: PUSH
44777: LD_INT 20
44779: PUSH
44780: LD_INT 55
44782: PUSH
44783: LD_INT 40
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44791: LD_VAR 0 6
44795: PPUSH
44796: CALL_OW 257
44800: PUSH
44801: LD_INT 12
44803: PUSH
44804: LD_INT 16
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: IN
44811: IFFALSE 44832
// points := [ 5 , 3 , 2 ] ;
44813: LD_ADDR_VAR 0 9
44817: PUSH
44818: LD_INT 5
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44832: LD_VAR 0 6
44836: PPUSH
44837: CALL_OW 257
44841: PUSH
44842: LD_INT 17
44844: EQUAL
44845: IFFALSE 44866
// points := [ 100 , 50 , 75 ] ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 100
44854: PUSH
44855: LD_INT 50
44857: PUSH
44858: LD_INT 75
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44866: LD_VAR 0 6
44870: PPUSH
44871: CALL_OW 257
44875: PUSH
44876: LD_INT 15
44878: EQUAL
44879: IFFALSE 44900
// points := [ 10 , 5 , 3 ] ;
44881: LD_ADDR_VAR 0 9
44885: PUSH
44886: LD_INT 10
44888: PUSH
44889: LD_INT 5
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44900: LD_VAR 0 6
44904: PPUSH
44905: CALL_OW 257
44909: PUSH
44910: LD_INT 14
44912: EQUAL
44913: IFFALSE 44934
// points := [ 10 , 0 , 0 ] ;
44915: LD_ADDR_VAR 0 9
44919: PUSH
44920: LD_INT 10
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44934: LD_VAR 0 6
44938: PPUSH
44939: CALL_OW 257
44943: PUSH
44944: LD_INT 11
44946: EQUAL
44947: IFFALSE 44968
// points := [ 30 , 10 , 5 ] ;
44949: LD_ADDR_VAR 0 9
44953: PUSH
44954: LD_INT 30
44956: PUSH
44957: LD_INT 10
44959: PUSH
44960: LD_INT 5
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44968: LD_VAR 0 1
44972: PPUSH
44973: LD_INT 5
44975: PPUSH
44976: CALL_OW 321
44980: PUSH
44981: LD_INT 2
44983: EQUAL
44984: IFFALSE 45001
// bpoints := bpoints * 1.8 ;
44986: LD_ADDR_VAR 0 10
44990: PUSH
44991: LD_VAR 0 10
44995: PUSH
44996: LD_REAL  1.80000000000000E+0000
44999: MUL
45000: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45001: LD_VAR 0 6
45005: PPUSH
45006: CALL_OW 257
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: LD_INT 4
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: IN
45029: PUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: LD_INT 51
45037: PPUSH
45038: CALL_OW 321
45042: PUSH
45043: LD_INT 2
45045: EQUAL
45046: AND
45047: IFFALSE 45064
// bpoints := bpoints * 1.2 ;
45049: LD_ADDR_VAR 0 10
45053: PUSH
45054: LD_VAR 0 10
45058: PUSH
45059: LD_REAL  1.20000000000000E+0000
45062: MUL
45063: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45064: LD_VAR 0 6
45068: PPUSH
45069: CALL_OW 257
45073: PUSH
45074: LD_INT 5
45076: PUSH
45077: LD_INT 7
45079: PUSH
45080: LD_INT 9
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: IN
45088: PUSH
45089: LD_VAR 0 1
45093: PPUSH
45094: LD_INT 52
45096: PPUSH
45097: CALL_OW 321
45101: PUSH
45102: LD_INT 2
45104: EQUAL
45105: AND
45106: IFFALSE 45123
// bpoints := bpoints * 1.5 ;
45108: LD_ADDR_VAR 0 10
45112: PUSH
45113: LD_VAR 0 10
45117: PUSH
45118: LD_REAL  1.50000000000000E+0000
45121: MUL
45122: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45123: LD_VAR 0 1
45127: PPUSH
45128: LD_INT 66
45130: PPUSH
45131: CALL_OW 321
45135: PUSH
45136: LD_INT 2
45138: EQUAL
45139: IFFALSE 45156
// bpoints := bpoints * 1.1 ;
45141: LD_ADDR_VAR 0 10
45145: PUSH
45146: LD_VAR 0 10
45150: PUSH
45151: LD_REAL  1.10000000000000E+0000
45154: MUL
45155: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45156: LD_ADDR_VAR 0 10
45160: PUSH
45161: LD_VAR 0 10
45165: PUSH
45166: LD_VAR 0 6
45170: PPUSH
45171: LD_INT 1
45173: PPUSH
45174: CALL_OW 259
45178: PUSH
45179: LD_REAL  1.15000000000000E+0000
45182: MUL
45183: MUL
45184: ST_TO_ADDR
// end ; unit_vehicle :
45185: GO 46013
45187: LD_INT 2
45189: DOUBLE
45190: EQUAL
45191: IFTRUE 45195
45193: GO 46001
45195: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45196: LD_VAR 0 6
45200: PPUSH
45201: CALL_OW 264
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 42
45211: PUSH
45212: LD_INT 24
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: IN
45220: IFFALSE 45241
// points := [ 25 , 5 , 3 ] ;
45222: LD_ADDR_VAR 0 9
45226: PUSH
45227: LD_INT 25
45229: PUSH
45230: LD_INT 5
45232: PUSH
45233: LD_INT 3
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45241: LD_VAR 0 6
45245: PPUSH
45246: CALL_OW 264
45250: PUSH
45251: LD_INT 4
45253: PUSH
45254: LD_INT 43
45256: PUSH
45257: LD_INT 25
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: IN
45265: IFFALSE 45286
// points := [ 40 , 15 , 5 ] ;
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_INT 40
45274: PUSH
45275: LD_INT 15
45277: PUSH
45278: LD_INT 5
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45286: LD_VAR 0 6
45290: PPUSH
45291: CALL_OW 264
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 23
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: IN
45306: IFFALSE 45327
// points := [ 7 , 25 , 8 ] ;
45308: LD_ADDR_VAR 0 9
45312: PUSH
45313: LD_INT 7
45315: PUSH
45316: LD_INT 25
45318: PUSH
45319: LD_INT 8
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45327: LD_VAR 0 6
45331: PPUSH
45332: CALL_OW 264
45336: PUSH
45337: LD_INT 5
45339: PUSH
45340: LD_INT 27
45342: PUSH
45343: LD_INT 44
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: LIST
45350: IN
45351: IFFALSE 45372
// points := [ 14 , 50 , 16 ] ;
45353: LD_ADDR_VAR 0 9
45357: PUSH
45358: LD_INT 14
45360: PUSH
45361: LD_INT 50
45363: PUSH
45364: LD_INT 16
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45372: LD_VAR 0 6
45376: PPUSH
45377: CALL_OW 264
45381: PUSH
45382: LD_INT 6
45384: PUSH
45385: LD_INT 46
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: IN
45392: IFFALSE 45413
// points := [ 32 , 120 , 70 ] ;
45394: LD_ADDR_VAR 0 9
45398: PUSH
45399: LD_INT 32
45401: PUSH
45402: LD_INT 120
45404: PUSH
45405: LD_INT 70
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45413: LD_VAR 0 6
45417: PPUSH
45418: CALL_OW 264
45422: PUSH
45423: LD_INT 7
45425: PUSH
45426: LD_INT 28
45428: PUSH
45429: LD_INT 45
45431: PUSH
45432: LD_INT 92
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: IN
45441: IFFALSE 45462
// points := [ 35 , 20 , 45 ] ;
45443: LD_ADDR_VAR 0 9
45447: PUSH
45448: LD_INT 35
45450: PUSH
45451: LD_INT 20
45453: PUSH
45454: LD_INT 45
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45462: LD_VAR 0 6
45466: PPUSH
45467: CALL_OW 264
45471: PUSH
45472: LD_INT 47
45474: PUSH
45475: EMPTY
45476: LIST
45477: IN
45478: IFFALSE 45499
// points := [ 67 , 45 , 75 ] ;
45480: LD_ADDR_VAR 0 9
45484: PUSH
45485: LD_INT 67
45487: PUSH
45488: LD_INT 45
45490: PUSH
45491: LD_INT 75
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45499: LD_VAR 0 6
45503: PPUSH
45504: CALL_OW 264
45508: PUSH
45509: LD_INT 26
45511: PUSH
45512: EMPTY
45513: LIST
45514: IN
45515: IFFALSE 45536
// points := [ 120 , 30 , 80 ] ;
45517: LD_ADDR_VAR 0 9
45521: PUSH
45522: LD_INT 120
45524: PUSH
45525: LD_INT 30
45527: PUSH
45528: LD_INT 80
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45536: LD_VAR 0 6
45540: PPUSH
45541: CALL_OW 264
45545: PUSH
45546: LD_INT 22
45548: PUSH
45549: EMPTY
45550: LIST
45551: IN
45552: IFFALSE 45573
// points := [ 40 , 1 , 1 ] ;
45554: LD_ADDR_VAR 0 9
45558: PUSH
45559: LD_INT 40
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45573: LD_VAR 0 6
45577: PPUSH
45578: CALL_OW 264
45582: PUSH
45583: LD_INT 29
45585: PUSH
45586: EMPTY
45587: LIST
45588: IN
45589: IFFALSE 45610
// points := [ 70 , 200 , 400 ] ;
45591: LD_ADDR_VAR 0 9
45595: PUSH
45596: LD_INT 70
45598: PUSH
45599: LD_INT 200
45601: PUSH
45602: LD_INT 400
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45610: LD_VAR 0 6
45614: PPUSH
45615: CALL_OW 264
45619: PUSH
45620: LD_INT 14
45622: PUSH
45623: LD_INT 53
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: IN
45630: IFFALSE 45651
// points := [ 40 , 10 , 20 ] ;
45632: LD_ADDR_VAR 0 9
45636: PUSH
45637: LD_INT 40
45639: PUSH
45640: LD_INT 10
45642: PUSH
45643: LD_INT 20
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45651: LD_VAR 0 6
45655: PPUSH
45656: CALL_OW 264
45660: PUSH
45661: LD_INT 9
45663: PUSH
45664: EMPTY
45665: LIST
45666: IN
45667: IFFALSE 45688
// points := [ 5 , 70 , 20 ] ;
45669: LD_ADDR_VAR 0 9
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: LD_INT 70
45679: PUSH
45680: LD_INT 20
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45688: LD_VAR 0 6
45692: PPUSH
45693: CALL_OW 264
45697: PUSH
45698: LD_INT 10
45700: PUSH
45701: EMPTY
45702: LIST
45703: IN
45704: IFFALSE 45725
// points := [ 35 , 110 , 70 ] ;
45706: LD_ADDR_VAR 0 9
45710: PUSH
45711: LD_INT 35
45713: PUSH
45714: LD_INT 110
45716: PUSH
45717: LD_INT 70
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45725: LD_VAR 0 6
45729: PPUSH
45730: CALL_OW 265
45734: PUSH
45735: LD_INT 25
45737: EQUAL
45738: IFFALSE 45759
// points := [ 80 , 65 , 100 ] ;
45740: LD_ADDR_VAR 0 9
45744: PUSH
45745: LD_INT 80
45747: PUSH
45748: LD_INT 65
45750: PUSH
45751: LD_INT 100
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45759: LD_VAR 0 6
45763: PPUSH
45764: CALL_OW 263
45768: PUSH
45769: LD_INT 1
45771: EQUAL
45772: IFFALSE 45807
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45774: LD_ADDR_VAR 0 10
45778: PUSH
45779: LD_VAR 0 10
45783: PUSH
45784: LD_VAR 0 6
45788: PPUSH
45789: CALL_OW 311
45793: PPUSH
45794: LD_INT 3
45796: PPUSH
45797: CALL_OW 259
45801: PUSH
45802: LD_INT 4
45804: MUL
45805: MUL
45806: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45807: LD_VAR 0 6
45811: PPUSH
45812: CALL_OW 263
45816: PUSH
45817: LD_INT 2
45819: EQUAL
45820: IFFALSE 45871
// begin j := IsControledBy ( i ) ;
45822: LD_ADDR_VAR 0 7
45826: PUSH
45827: LD_VAR 0 6
45831: PPUSH
45832: CALL_OW 312
45836: ST_TO_ADDR
// if j then
45837: LD_VAR 0 7
45841: IFFALSE 45871
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45843: LD_ADDR_VAR 0 10
45847: PUSH
45848: LD_VAR 0 10
45852: PUSH
45853: LD_VAR 0 7
45857: PPUSH
45858: LD_INT 3
45860: PPUSH
45861: CALL_OW 259
45865: PUSH
45866: LD_INT 3
45868: MUL
45869: MUL
45870: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45871: LD_VAR 0 6
45875: PPUSH
45876: CALL_OW 264
45880: PUSH
45881: LD_INT 5
45883: PUSH
45884: LD_INT 6
45886: PUSH
45887: LD_INT 46
45889: PUSH
45890: LD_INT 44
45892: PUSH
45893: LD_INT 47
45895: PUSH
45896: LD_INT 45
45898: PUSH
45899: LD_INT 28
45901: PUSH
45902: LD_INT 7
45904: PUSH
45905: LD_INT 27
45907: PUSH
45908: LD_INT 29
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: IN
45923: PUSH
45924: LD_VAR 0 1
45928: PPUSH
45929: LD_INT 52
45931: PPUSH
45932: CALL_OW 321
45936: PUSH
45937: LD_INT 2
45939: EQUAL
45940: AND
45941: IFFALSE 45958
// bpoints := bpoints * 1.2 ;
45943: LD_ADDR_VAR 0 10
45947: PUSH
45948: LD_VAR 0 10
45952: PUSH
45953: LD_REAL  1.20000000000000E+0000
45956: MUL
45957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45958: LD_VAR 0 6
45962: PPUSH
45963: CALL_OW 264
45967: PUSH
45968: LD_INT 6
45970: PUSH
45971: LD_INT 46
45973: PUSH
45974: LD_INT 47
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: IN
45982: IFFALSE 45999
// bpoints := bpoints * 1.2 ;
45984: LD_ADDR_VAR 0 10
45988: PUSH
45989: LD_VAR 0 10
45993: PUSH
45994: LD_REAL  1.20000000000000E+0000
45997: MUL
45998: ST_TO_ADDR
// end ; unit_building :
45999: GO 46013
46001: LD_INT 3
46003: DOUBLE
46004: EQUAL
46005: IFTRUE 46009
46007: GO 46012
46009: POP
// ; end ;
46010: GO 46013
46012: POP
// for j = 1 to 3 do
46013: LD_ADDR_VAR 0 7
46017: PUSH
46018: DOUBLE
46019: LD_INT 1
46021: DEC
46022: ST_TO_ADDR
46023: LD_INT 3
46025: PUSH
46026: FOR_TO
46027: IFFALSE 46080
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46029: LD_ADDR_VAR 0 5
46033: PUSH
46034: LD_VAR 0 5
46038: PPUSH
46039: LD_VAR 0 7
46043: PPUSH
46044: LD_VAR 0 5
46048: PUSH
46049: LD_VAR 0 7
46053: ARRAY
46054: PUSH
46055: LD_VAR 0 9
46059: PUSH
46060: LD_VAR 0 7
46064: ARRAY
46065: PUSH
46066: LD_VAR 0 10
46070: MUL
46071: PLUS
46072: PPUSH
46073: CALL_OW 1
46077: ST_TO_ADDR
46078: GO 46026
46080: POP
46081: POP
// end ;
46082: GO 44561
46084: POP
46085: POP
// result := Replace ( result , 4 , tmp ) ;
46086: LD_ADDR_VAR 0 5
46090: PUSH
46091: LD_VAR 0 5
46095: PPUSH
46096: LD_INT 4
46098: PPUSH
46099: LD_VAR 0 8
46103: PPUSH
46104: CALL_OW 1
46108: ST_TO_ADDR
// end ;
46109: LD_VAR 0 5
46113: RET
// export function DangerAtRange ( unit , range ) ; begin
46114: LD_INT 0
46116: PPUSH
// if not unit then
46117: LD_VAR 0 1
46121: NOT
46122: IFFALSE 46126
// exit ;
46124: GO 46171
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46126: LD_ADDR_VAR 0 3
46130: PUSH
46131: LD_VAR 0 1
46135: PPUSH
46136: CALL_OW 255
46140: PPUSH
46141: LD_VAR 0 1
46145: PPUSH
46146: CALL_OW 250
46150: PPUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 251
46160: PPUSH
46161: LD_VAR 0 2
46165: PPUSH
46166: CALL 44413 0 4
46170: ST_TO_ADDR
// end ;
46171: LD_VAR 0 3
46175: RET
// export function DangerInArea ( side , area ) ; begin
46176: LD_INT 0
46178: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46179: LD_ADDR_VAR 0 3
46183: PUSH
46184: LD_VAR 0 2
46188: PPUSH
46189: LD_INT 81
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PPUSH
46201: CALL_OW 70
46205: ST_TO_ADDR
// end ;
46206: LD_VAR 0 3
46210: RET
// export function IsExtension ( b ) ; begin
46211: LD_INT 0
46213: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46214: LD_ADDR_VAR 0 2
46218: PUSH
46219: LD_VAR 0 1
46223: PUSH
46224: LD_INT 23
46226: PUSH
46227: LD_INT 20
46229: PUSH
46230: LD_INT 22
46232: PUSH
46233: LD_INT 17
46235: PUSH
46236: LD_INT 24
46238: PUSH
46239: LD_INT 21
46241: PUSH
46242: LD_INT 19
46244: PUSH
46245: LD_INT 16
46247: PUSH
46248: LD_INT 25
46250: PUSH
46251: LD_INT 18
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: IN
46266: ST_TO_ADDR
// end ;
46267: LD_VAR 0 2
46271: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46272: LD_INT 0
46274: PPUSH
46275: PPUSH
46276: PPUSH
// result := [ ] ;
46277: LD_ADDR_VAR 0 4
46281: PUSH
46282: EMPTY
46283: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46284: LD_ADDR_VAR 0 5
46288: PUSH
46289: LD_VAR 0 2
46293: PPUSH
46294: LD_INT 21
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PPUSH
46304: CALL_OW 70
46308: ST_TO_ADDR
// if not tmp then
46309: LD_VAR 0 5
46313: NOT
46314: IFFALSE 46318
// exit ;
46316: GO 46382
// if checkLink then
46318: LD_VAR 0 3
46322: IFFALSE 46372
// begin for i in tmp do
46324: LD_ADDR_VAR 0 6
46328: PUSH
46329: LD_VAR 0 5
46333: PUSH
46334: FOR_IN
46335: IFFALSE 46370
// if GetBase ( i ) <> base then
46337: LD_VAR 0 6
46341: PPUSH
46342: CALL_OW 274
46346: PUSH
46347: LD_VAR 0 1
46351: NONEQUAL
46352: IFFALSE 46368
// ComLinkToBase ( base , i ) ;
46354: LD_VAR 0 1
46358: PPUSH
46359: LD_VAR 0 6
46363: PPUSH
46364: CALL_OW 169
46368: GO 46334
46370: POP
46371: POP
// end ; result := tmp ;
46372: LD_ADDR_VAR 0 4
46376: PUSH
46377: LD_VAR 0 5
46381: ST_TO_ADDR
// end ;
46382: LD_VAR 0 4
46386: RET
// export function ComComplete ( units , b ) ; var i ; begin
46387: LD_INT 0
46389: PPUSH
46390: PPUSH
// if not units then
46391: LD_VAR 0 1
46395: NOT
46396: IFFALSE 46400
// exit ;
46398: GO 46490
// for i in units do
46400: LD_ADDR_VAR 0 4
46404: PUSH
46405: LD_VAR 0 1
46409: PUSH
46410: FOR_IN
46411: IFFALSE 46488
// if BuildingStatus ( b ) = bs_build then
46413: LD_VAR 0 2
46417: PPUSH
46418: CALL_OW 461
46422: PUSH
46423: LD_INT 1
46425: EQUAL
46426: IFFALSE 46486
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46428: LD_VAR 0 4
46432: PPUSH
46433: LD_STRING h
46435: PUSH
46436: LD_VAR 0 2
46440: PPUSH
46441: CALL_OW 250
46445: PUSH
46446: LD_VAR 0 2
46450: PPUSH
46451: CALL_OW 251
46455: PUSH
46456: LD_VAR 0 2
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: PPUSH
46482: CALL_OW 446
46486: GO 46410
46488: POP
46489: POP
// end ;
46490: LD_VAR 0 3
46494: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46495: LD_INT 0
46497: PPUSH
46498: PPUSH
46499: PPUSH
46500: PPUSH
46501: PPUSH
46502: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46503: LD_VAR 0 1
46507: NOT
46508: PUSH
46509: LD_VAR 0 1
46513: PPUSH
46514: CALL_OW 263
46518: PUSH
46519: LD_INT 2
46521: NONEQUAL
46522: OR
46523: IFFALSE 46527
// exit ;
46525: GO 46843
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46527: LD_ADDR_VAR 0 6
46531: PUSH
46532: LD_INT 22
46534: PUSH
46535: LD_VAR 0 1
46539: PPUSH
46540: CALL_OW 255
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 30
46554: PUSH
46555: LD_INT 36
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 34
46564: PUSH
46565: LD_INT 31
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PPUSH
46581: CALL_OW 69
46585: ST_TO_ADDR
// if not tmp then
46586: LD_VAR 0 6
46590: NOT
46591: IFFALSE 46595
// exit ;
46593: GO 46843
// result := [ ] ;
46595: LD_ADDR_VAR 0 2
46599: PUSH
46600: EMPTY
46601: ST_TO_ADDR
// for i in tmp do
46602: LD_ADDR_VAR 0 3
46606: PUSH
46607: LD_VAR 0 6
46611: PUSH
46612: FOR_IN
46613: IFFALSE 46684
// begin t := UnitsInside ( i ) ;
46615: LD_ADDR_VAR 0 4
46619: PUSH
46620: LD_VAR 0 3
46624: PPUSH
46625: CALL_OW 313
46629: ST_TO_ADDR
// if t then
46630: LD_VAR 0 4
46634: IFFALSE 46682
// for j in t do
46636: LD_ADDR_VAR 0 7
46640: PUSH
46641: LD_VAR 0 4
46645: PUSH
46646: FOR_IN
46647: IFFALSE 46680
// result := Replace ( result , result + 1 , j ) ;
46649: LD_ADDR_VAR 0 2
46653: PUSH
46654: LD_VAR 0 2
46658: PPUSH
46659: LD_VAR 0 2
46663: PUSH
46664: LD_INT 1
46666: PLUS
46667: PPUSH
46668: LD_VAR 0 7
46672: PPUSH
46673: CALL_OW 1
46677: ST_TO_ADDR
46678: GO 46646
46680: POP
46681: POP
// end ;
46682: GO 46612
46684: POP
46685: POP
// if not result then
46686: LD_VAR 0 2
46690: NOT
46691: IFFALSE 46695
// exit ;
46693: GO 46843
// mech := result [ 1 ] ;
46695: LD_ADDR_VAR 0 5
46699: PUSH
46700: LD_VAR 0 2
46704: PUSH
46705: LD_INT 1
46707: ARRAY
46708: ST_TO_ADDR
// if result > 1 then
46709: LD_VAR 0 2
46713: PUSH
46714: LD_INT 1
46716: GREATER
46717: IFFALSE 46829
// begin for i = 2 to result do
46719: LD_ADDR_VAR 0 3
46723: PUSH
46724: DOUBLE
46725: LD_INT 2
46727: DEC
46728: ST_TO_ADDR
46729: LD_VAR 0 2
46733: PUSH
46734: FOR_TO
46735: IFFALSE 46827
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46737: LD_ADDR_VAR 0 4
46741: PUSH
46742: LD_VAR 0 2
46746: PUSH
46747: LD_VAR 0 3
46751: ARRAY
46752: PPUSH
46753: LD_INT 3
46755: PPUSH
46756: CALL_OW 259
46760: PUSH
46761: LD_VAR 0 2
46765: PUSH
46766: LD_VAR 0 3
46770: ARRAY
46771: PPUSH
46772: CALL_OW 432
46776: MINUS
46777: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46778: LD_VAR 0 4
46782: PUSH
46783: LD_VAR 0 5
46787: PPUSH
46788: LD_INT 3
46790: PPUSH
46791: CALL_OW 259
46795: PUSH
46796: LD_VAR 0 5
46800: PPUSH
46801: CALL_OW 432
46805: MINUS
46806: GREATEREQUAL
46807: IFFALSE 46825
// mech := result [ i ] ;
46809: LD_ADDR_VAR 0 5
46813: PUSH
46814: LD_VAR 0 2
46818: PUSH
46819: LD_VAR 0 3
46823: ARRAY
46824: ST_TO_ADDR
// end ;
46825: GO 46734
46827: POP
46828: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46829: LD_VAR 0 1
46833: PPUSH
46834: LD_VAR 0 5
46838: PPUSH
46839: CALL_OW 135
// end ;
46843: LD_VAR 0 2
46847: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46848: LD_INT 0
46850: PPUSH
46851: PPUSH
46852: PPUSH
46853: PPUSH
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
46858: PPUSH
46859: PPUSH
46860: PPUSH
46861: PPUSH
46862: PPUSH
// result := [ ] ;
46863: LD_ADDR_VAR 0 7
46867: PUSH
46868: EMPTY
46869: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46870: LD_VAR 0 1
46874: PPUSH
46875: CALL_OW 266
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: IN
46890: NOT
46891: IFFALSE 46895
// exit ;
46893: GO 48529
// if name then
46895: LD_VAR 0 3
46899: IFFALSE 46915
// SetBName ( base_dep , name ) ;
46901: LD_VAR 0 1
46905: PPUSH
46906: LD_VAR 0 3
46910: PPUSH
46911: CALL_OW 500
// base := GetBase ( base_dep ) ;
46915: LD_ADDR_VAR 0 15
46919: PUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: CALL_OW 274
46929: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46930: LD_ADDR_VAR 0 16
46934: PUSH
46935: LD_VAR 0 1
46939: PPUSH
46940: CALL_OW 255
46944: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46945: LD_ADDR_VAR 0 17
46949: PUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 248
46959: ST_TO_ADDR
// if sources then
46960: LD_VAR 0 5
46964: IFFALSE 47011
// for i = 1 to 3 do
46966: LD_ADDR_VAR 0 8
46970: PUSH
46971: DOUBLE
46972: LD_INT 1
46974: DEC
46975: ST_TO_ADDR
46976: LD_INT 3
46978: PUSH
46979: FOR_TO
46980: IFFALSE 47009
// AddResourceType ( base , i , sources [ i ] ) ;
46982: LD_VAR 0 15
46986: PPUSH
46987: LD_VAR 0 8
46991: PPUSH
46992: LD_VAR 0 5
46996: PUSH
46997: LD_VAR 0 8
47001: ARRAY
47002: PPUSH
47003: CALL_OW 276
47007: GO 46979
47009: POP
47010: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47011: LD_ADDR_VAR 0 18
47015: PUSH
47016: LD_VAR 0 15
47020: PPUSH
47021: LD_VAR 0 2
47025: PPUSH
47026: LD_INT 1
47028: PPUSH
47029: CALL 46272 0 3
47033: ST_TO_ADDR
// InitHc ;
47034: CALL_OW 19
// InitUc ;
47038: CALL_OW 18
// uc_side := side ;
47042: LD_ADDR_OWVAR 20
47046: PUSH
47047: LD_VAR 0 16
47051: ST_TO_ADDR
// uc_nation := nation ;
47052: LD_ADDR_OWVAR 21
47056: PUSH
47057: LD_VAR 0 17
47061: ST_TO_ADDR
// if buildings then
47062: LD_VAR 0 18
47066: IFFALSE 48388
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47068: LD_ADDR_VAR 0 19
47072: PUSH
47073: LD_VAR 0 18
47077: PPUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 30
47083: PUSH
47084: LD_INT 29
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 30
47093: PUSH
47094: LD_INT 30
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: PPUSH
47106: CALL_OW 72
47110: ST_TO_ADDR
// if tmp then
47111: LD_VAR 0 19
47115: IFFALSE 47163
// for i in tmp do
47117: LD_ADDR_VAR 0 8
47121: PUSH
47122: LD_VAR 0 19
47126: PUSH
47127: FOR_IN
47128: IFFALSE 47161
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47130: LD_VAR 0 8
47134: PPUSH
47135: CALL_OW 250
47139: PPUSH
47140: LD_VAR 0 8
47144: PPUSH
47145: CALL_OW 251
47149: PPUSH
47150: LD_VAR 0 16
47154: PPUSH
47155: CALL_OW 441
47159: GO 47127
47161: POP
47162: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47163: LD_VAR 0 18
47167: PPUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 30
47173: PUSH
47174: LD_INT 32
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 30
47183: PUSH
47184: LD_INT 33
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: PPUSH
47196: CALL_OW 72
47200: IFFALSE 47288
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47202: LD_ADDR_VAR 0 8
47206: PUSH
47207: LD_VAR 0 18
47211: PPUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 30
47217: PUSH
47218: LD_INT 32
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 30
47227: PUSH
47228: LD_INT 33
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: PPUSH
47240: CALL_OW 72
47244: PUSH
47245: FOR_IN
47246: IFFALSE 47286
// begin if not GetBWeapon ( i ) then
47248: LD_VAR 0 8
47252: PPUSH
47253: CALL_OW 269
47257: NOT
47258: IFFALSE 47284
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47260: LD_VAR 0 8
47264: PPUSH
47265: LD_VAR 0 8
47269: PPUSH
47270: LD_VAR 0 2
47274: PPUSH
47275: CALL 48534 0 2
47279: PPUSH
47280: CALL_OW 431
// end ;
47284: GO 47245
47286: POP
47287: POP
// end ; for i = 1 to personel do
47288: LD_ADDR_VAR 0 8
47292: PUSH
47293: DOUBLE
47294: LD_INT 1
47296: DEC
47297: ST_TO_ADDR
47298: LD_VAR 0 6
47302: PUSH
47303: FOR_TO
47304: IFFALSE 48368
// begin if i > 4 then
47306: LD_VAR 0 8
47310: PUSH
47311: LD_INT 4
47313: GREATER
47314: IFFALSE 47318
// break ;
47316: GO 48368
// case i of 1 :
47318: LD_VAR 0 8
47322: PUSH
47323: LD_INT 1
47325: DOUBLE
47326: EQUAL
47327: IFTRUE 47331
47329: GO 47411
47331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47332: LD_ADDR_VAR 0 12
47336: PUSH
47337: LD_VAR 0 18
47341: PPUSH
47342: LD_INT 22
47344: PUSH
47345: LD_VAR 0 16
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 58
47356: PUSH
47357: EMPTY
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 30
47365: PUSH
47366: LD_INT 32
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 30
47375: PUSH
47376: LD_INT 4
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 30
47385: PUSH
47386: LD_INT 5
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: LIST
47403: PPUSH
47404: CALL_OW 72
47408: ST_TO_ADDR
47409: GO 47633
47411: LD_INT 2
47413: DOUBLE
47414: EQUAL
47415: IFTRUE 47419
47417: GO 47481
47419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47420: LD_ADDR_VAR 0 12
47424: PUSH
47425: LD_VAR 0 18
47429: PPUSH
47430: LD_INT 22
47432: PUSH
47433: LD_VAR 0 16
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 30
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 30
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PPUSH
47474: CALL_OW 72
47478: ST_TO_ADDR
47479: GO 47633
47481: LD_INT 3
47483: DOUBLE
47484: EQUAL
47485: IFTRUE 47489
47487: GO 47551
47489: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47490: LD_ADDR_VAR 0 12
47494: PUSH
47495: LD_VAR 0 18
47499: PPUSH
47500: LD_INT 22
47502: PUSH
47503: LD_VAR 0 16
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 30
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 30
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PPUSH
47544: CALL_OW 72
47548: ST_TO_ADDR
47549: GO 47633
47551: LD_INT 4
47553: DOUBLE
47554: EQUAL
47555: IFTRUE 47559
47557: GO 47632
47559: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47560: LD_ADDR_VAR 0 12
47564: PUSH
47565: LD_VAR 0 18
47569: PPUSH
47570: LD_INT 22
47572: PUSH
47573: LD_VAR 0 16
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 30
47587: PUSH
47588: LD_INT 6
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 30
47597: PUSH
47598: LD_INT 7
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 30
47607: PUSH
47608: LD_INT 8
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PPUSH
47625: CALL_OW 72
47629: ST_TO_ADDR
47630: GO 47633
47632: POP
// if i = 1 then
47633: LD_VAR 0 8
47637: PUSH
47638: LD_INT 1
47640: EQUAL
47641: IFFALSE 47752
// begin tmp := [ ] ;
47643: LD_ADDR_VAR 0 19
47647: PUSH
47648: EMPTY
47649: ST_TO_ADDR
// for j in f do
47650: LD_ADDR_VAR 0 9
47654: PUSH
47655: LD_VAR 0 12
47659: PUSH
47660: FOR_IN
47661: IFFALSE 47734
// if GetBType ( j ) = b_bunker then
47663: LD_VAR 0 9
47667: PPUSH
47668: CALL_OW 266
47672: PUSH
47673: LD_INT 32
47675: EQUAL
47676: IFFALSE 47703
// tmp := Insert ( tmp , 1 , j ) else
47678: LD_ADDR_VAR 0 19
47682: PUSH
47683: LD_VAR 0 19
47687: PPUSH
47688: LD_INT 1
47690: PPUSH
47691: LD_VAR 0 9
47695: PPUSH
47696: CALL_OW 2
47700: ST_TO_ADDR
47701: GO 47732
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47703: LD_ADDR_VAR 0 19
47707: PUSH
47708: LD_VAR 0 19
47712: PPUSH
47713: LD_VAR 0 19
47717: PUSH
47718: LD_INT 1
47720: PLUS
47721: PPUSH
47722: LD_VAR 0 9
47726: PPUSH
47727: CALL_OW 2
47731: ST_TO_ADDR
47732: GO 47660
47734: POP
47735: POP
// if tmp then
47736: LD_VAR 0 19
47740: IFFALSE 47752
// f := tmp ;
47742: LD_ADDR_VAR 0 12
47746: PUSH
47747: LD_VAR 0 19
47751: ST_TO_ADDR
// end ; x := personel [ i ] ;
47752: LD_ADDR_VAR 0 13
47756: PUSH
47757: LD_VAR 0 6
47761: PUSH
47762: LD_VAR 0 8
47766: ARRAY
47767: ST_TO_ADDR
// if x = - 1 then
47768: LD_VAR 0 13
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: EQUAL
47777: IFFALSE 47986
// begin for j in f do
47779: LD_ADDR_VAR 0 9
47783: PUSH
47784: LD_VAR 0 12
47788: PUSH
47789: FOR_IN
47790: IFFALSE 47982
// repeat InitHc ;
47792: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47796: LD_VAR 0 9
47800: PPUSH
47801: CALL_OW 266
47805: PUSH
47806: LD_INT 5
47808: EQUAL
47809: IFFALSE 47879
// begin if UnitsInside ( j ) < 3 then
47811: LD_VAR 0 9
47815: PPUSH
47816: CALL_OW 313
47820: PUSH
47821: LD_INT 3
47823: LESS
47824: IFFALSE 47860
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47826: LD_INT 0
47828: PPUSH
47829: LD_INT 5
47831: PUSH
47832: LD_INT 8
47834: PUSH
47835: LD_INT 9
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: LD_VAR 0 17
47847: ARRAY
47848: PPUSH
47849: LD_VAR 0 4
47853: PPUSH
47854: CALL_OW 380
47858: GO 47877
// PrepareHuman ( false , i , skill ) ;
47860: LD_INT 0
47862: PPUSH
47863: LD_VAR 0 8
47867: PPUSH
47868: LD_VAR 0 4
47872: PPUSH
47873: CALL_OW 380
// end else
47877: GO 47896
// PrepareHuman ( false , i , skill ) ;
47879: LD_INT 0
47881: PPUSH
47882: LD_VAR 0 8
47886: PPUSH
47887: LD_VAR 0 4
47891: PPUSH
47892: CALL_OW 380
// un := CreateHuman ;
47896: LD_ADDR_VAR 0 14
47900: PUSH
47901: CALL_OW 44
47905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47906: LD_ADDR_VAR 0 7
47910: PUSH
47911: LD_VAR 0 7
47915: PPUSH
47916: LD_INT 1
47918: PPUSH
47919: LD_VAR 0 14
47923: PPUSH
47924: CALL_OW 2
47928: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47929: LD_VAR 0 14
47933: PPUSH
47934: LD_VAR 0 9
47938: PPUSH
47939: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47943: LD_VAR 0 9
47947: PPUSH
47948: CALL_OW 313
47952: PUSH
47953: LD_INT 6
47955: EQUAL
47956: PUSH
47957: LD_VAR 0 9
47961: PPUSH
47962: CALL_OW 266
47966: PUSH
47967: LD_INT 32
47969: PUSH
47970: LD_INT 31
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: IN
47977: OR
47978: IFFALSE 47792
47980: GO 47789
47982: POP
47983: POP
// end else
47984: GO 48366
// for j = 1 to x do
47986: LD_ADDR_VAR 0 9
47990: PUSH
47991: DOUBLE
47992: LD_INT 1
47994: DEC
47995: ST_TO_ADDR
47996: LD_VAR 0 13
48000: PUSH
48001: FOR_TO
48002: IFFALSE 48364
// begin InitHc ;
48004: CALL_OW 19
// if not f then
48008: LD_VAR 0 12
48012: NOT
48013: IFFALSE 48102
// begin PrepareHuman ( false , i , skill ) ;
48015: LD_INT 0
48017: PPUSH
48018: LD_VAR 0 8
48022: PPUSH
48023: LD_VAR 0 4
48027: PPUSH
48028: CALL_OW 380
// un := CreateHuman ;
48032: LD_ADDR_VAR 0 14
48036: PUSH
48037: CALL_OW 44
48041: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48042: LD_ADDR_VAR 0 7
48046: PUSH
48047: LD_VAR 0 7
48051: PPUSH
48052: LD_INT 1
48054: PPUSH
48055: LD_VAR 0 14
48059: PPUSH
48060: CALL_OW 2
48064: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48065: LD_VAR 0 14
48069: PPUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: CALL_OW 250
48079: PPUSH
48080: LD_VAR 0 1
48084: PPUSH
48085: CALL_OW 251
48089: PPUSH
48090: LD_INT 10
48092: PPUSH
48093: LD_INT 0
48095: PPUSH
48096: CALL_OW 50
// continue ;
48100: GO 48001
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48102: LD_VAR 0 12
48106: PUSH
48107: LD_INT 1
48109: ARRAY
48110: PPUSH
48111: CALL_OW 313
48115: PUSH
48116: LD_VAR 0 12
48120: PUSH
48121: LD_INT 1
48123: ARRAY
48124: PPUSH
48125: CALL_OW 266
48129: PUSH
48130: LD_INT 32
48132: PUSH
48133: LD_INT 31
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: IN
48140: AND
48141: PUSH
48142: LD_VAR 0 12
48146: PUSH
48147: LD_INT 1
48149: ARRAY
48150: PPUSH
48151: CALL_OW 313
48155: PUSH
48156: LD_INT 6
48158: EQUAL
48159: OR
48160: IFFALSE 48180
// f := Delete ( f , 1 ) ;
48162: LD_ADDR_VAR 0 12
48166: PUSH
48167: LD_VAR 0 12
48171: PPUSH
48172: LD_INT 1
48174: PPUSH
48175: CALL_OW 3
48179: ST_TO_ADDR
// if not f then
48180: LD_VAR 0 12
48184: NOT
48185: IFFALSE 48203
// begin x := x + 2 ;
48187: LD_ADDR_VAR 0 13
48191: PUSH
48192: LD_VAR 0 13
48196: PUSH
48197: LD_INT 2
48199: PLUS
48200: ST_TO_ADDR
// continue ;
48201: GO 48001
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48203: LD_VAR 0 12
48207: PUSH
48208: LD_INT 1
48210: ARRAY
48211: PPUSH
48212: CALL_OW 266
48216: PUSH
48217: LD_INT 5
48219: EQUAL
48220: IFFALSE 48294
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48222: LD_VAR 0 12
48226: PUSH
48227: LD_INT 1
48229: ARRAY
48230: PPUSH
48231: CALL_OW 313
48235: PUSH
48236: LD_INT 3
48238: LESS
48239: IFFALSE 48275
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48241: LD_INT 0
48243: PPUSH
48244: LD_INT 5
48246: PUSH
48247: LD_INT 8
48249: PUSH
48250: LD_INT 9
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: PUSH
48258: LD_VAR 0 17
48262: ARRAY
48263: PPUSH
48264: LD_VAR 0 4
48268: PPUSH
48269: CALL_OW 380
48273: GO 48292
// PrepareHuman ( false , i , skill ) ;
48275: LD_INT 0
48277: PPUSH
48278: LD_VAR 0 8
48282: PPUSH
48283: LD_VAR 0 4
48287: PPUSH
48288: CALL_OW 380
// end else
48292: GO 48311
// PrepareHuman ( false , i , skill ) ;
48294: LD_INT 0
48296: PPUSH
48297: LD_VAR 0 8
48301: PPUSH
48302: LD_VAR 0 4
48306: PPUSH
48307: CALL_OW 380
// un := CreateHuman ;
48311: LD_ADDR_VAR 0 14
48315: PUSH
48316: CALL_OW 44
48320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48321: LD_ADDR_VAR 0 7
48325: PUSH
48326: LD_VAR 0 7
48330: PPUSH
48331: LD_INT 1
48333: PPUSH
48334: LD_VAR 0 14
48338: PPUSH
48339: CALL_OW 2
48343: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48344: LD_VAR 0 14
48348: PPUSH
48349: LD_VAR 0 12
48353: PUSH
48354: LD_INT 1
48356: ARRAY
48357: PPUSH
48358: CALL_OW 52
// end ;
48362: GO 48001
48364: POP
48365: POP
// end ;
48366: GO 47303
48368: POP
48369: POP
// result := result ^ buildings ;
48370: LD_ADDR_VAR 0 7
48374: PUSH
48375: LD_VAR 0 7
48379: PUSH
48380: LD_VAR 0 18
48384: ADD
48385: ST_TO_ADDR
// end else
48386: GO 48529
// begin for i = 1 to personel do
48388: LD_ADDR_VAR 0 8
48392: PUSH
48393: DOUBLE
48394: LD_INT 1
48396: DEC
48397: ST_TO_ADDR
48398: LD_VAR 0 6
48402: PUSH
48403: FOR_TO
48404: IFFALSE 48527
// begin if i > 4 then
48406: LD_VAR 0 8
48410: PUSH
48411: LD_INT 4
48413: GREATER
48414: IFFALSE 48418
// break ;
48416: GO 48527
// x := personel [ i ] ;
48418: LD_ADDR_VAR 0 13
48422: PUSH
48423: LD_VAR 0 6
48427: PUSH
48428: LD_VAR 0 8
48432: ARRAY
48433: ST_TO_ADDR
// if x = - 1 then
48434: LD_VAR 0 13
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: EQUAL
48443: IFFALSE 48447
// continue ;
48445: GO 48403
// PrepareHuman ( false , i , skill ) ;
48447: LD_INT 0
48449: PPUSH
48450: LD_VAR 0 8
48454: PPUSH
48455: LD_VAR 0 4
48459: PPUSH
48460: CALL_OW 380
// un := CreateHuman ;
48464: LD_ADDR_VAR 0 14
48468: PUSH
48469: CALL_OW 44
48473: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48474: LD_VAR 0 14
48478: PPUSH
48479: LD_VAR 0 1
48483: PPUSH
48484: CALL_OW 250
48488: PPUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 251
48498: PPUSH
48499: LD_INT 10
48501: PPUSH
48502: LD_INT 0
48504: PPUSH
48505: CALL_OW 50
// result := result ^ un ;
48509: LD_ADDR_VAR 0 7
48513: PUSH
48514: LD_VAR 0 7
48518: PUSH
48519: LD_VAR 0 14
48523: ADD
48524: ST_TO_ADDR
// end ;
48525: GO 48403
48527: POP
48528: POP
// end ; end ;
48529: LD_VAR 0 7
48533: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48534: LD_INT 0
48536: PPUSH
48537: PPUSH
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
48548: PPUSH
48549: PPUSH
48550: PPUSH
48551: PPUSH
// result := false ;
48552: LD_ADDR_VAR 0 3
48556: PUSH
48557: LD_INT 0
48559: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48560: LD_VAR 0 1
48564: NOT
48565: PUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: CALL_OW 266
48575: PUSH
48576: LD_INT 32
48578: PUSH
48579: LD_INT 33
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: IN
48586: NOT
48587: OR
48588: IFFALSE 48592
// exit ;
48590: GO 49701
// nat := GetNation ( tower ) ;
48592: LD_ADDR_VAR 0 12
48596: PUSH
48597: LD_VAR 0 1
48601: PPUSH
48602: CALL_OW 248
48606: ST_TO_ADDR
// side := GetSide ( tower ) ;
48607: LD_ADDR_VAR 0 16
48611: PUSH
48612: LD_VAR 0 1
48616: PPUSH
48617: CALL_OW 255
48621: ST_TO_ADDR
// x := GetX ( tower ) ;
48622: LD_ADDR_VAR 0 10
48626: PUSH
48627: LD_VAR 0 1
48631: PPUSH
48632: CALL_OW 250
48636: ST_TO_ADDR
// y := GetY ( tower ) ;
48637: LD_ADDR_VAR 0 11
48641: PUSH
48642: LD_VAR 0 1
48646: PPUSH
48647: CALL_OW 251
48651: ST_TO_ADDR
// if not x or not y then
48652: LD_VAR 0 10
48656: NOT
48657: PUSH
48658: LD_VAR 0 11
48662: NOT
48663: OR
48664: IFFALSE 48668
// exit ;
48666: GO 49701
// weapon := 0 ;
48668: LD_ADDR_VAR 0 18
48672: PUSH
48673: LD_INT 0
48675: ST_TO_ADDR
// fac_list := [ ] ;
48676: LD_ADDR_VAR 0 17
48680: PUSH
48681: EMPTY
48682: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48683: LD_ADDR_VAR 0 6
48687: PUSH
48688: LD_VAR 0 1
48692: PPUSH
48693: CALL_OW 274
48697: PPUSH
48698: LD_VAR 0 2
48702: PPUSH
48703: LD_INT 0
48705: PPUSH
48706: CALL 46272 0 3
48710: PPUSH
48711: LD_INT 30
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PPUSH
48721: CALL_OW 72
48725: ST_TO_ADDR
// if not factories then
48726: LD_VAR 0 6
48730: NOT
48731: IFFALSE 48735
// exit ;
48733: GO 49701
// for i in factories do
48735: LD_ADDR_VAR 0 8
48739: PUSH
48740: LD_VAR 0 6
48744: PUSH
48745: FOR_IN
48746: IFFALSE 48771
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48748: LD_ADDR_VAR 0 17
48752: PUSH
48753: LD_VAR 0 17
48757: PUSH
48758: LD_VAR 0 8
48762: PPUSH
48763: CALL_OW 478
48767: UNION
48768: ST_TO_ADDR
48769: GO 48745
48771: POP
48772: POP
// if not fac_list then
48773: LD_VAR 0 17
48777: NOT
48778: IFFALSE 48782
// exit ;
48780: GO 49701
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48782: LD_ADDR_VAR 0 5
48786: PUSH
48787: LD_INT 4
48789: PUSH
48790: LD_INT 5
48792: PUSH
48793: LD_INT 9
48795: PUSH
48796: LD_INT 10
48798: PUSH
48799: LD_INT 6
48801: PUSH
48802: LD_INT 7
48804: PUSH
48805: LD_INT 11
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 27
48819: PUSH
48820: LD_INT 28
48822: PUSH
48823: LD_INT 26
48825: PUSH
48826: LD_INT 30
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 43
48837: PUSH
48838: LD_INT 44
48840: PUSH
48841: LD_INT 46
48843: PUSH
48844: LD_INT 45
48846: PUSH
48847: LD_INT 47
48849: PUSH
48850: LD_INT 49
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: PUSH
48866: LD_VAR 0 12
48870: ARRAY
48871: ST_TO_ADDR
// list := list isect fac_list ;
48872: LD_ADDR_VAR 0 5
48876: PUSH
48877: LD_VAR 0 5
48881: PUSH
48882: LD_VAR 0 17
48886: ISECT
48887: ST_TO_ADDR
// if not list then
48888: LD_VAR 0 5
48892: NOT
48893: IFFALSE 48897
// exit ;
48895: GO 49701
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48897: LD_VAR 0 12
48901: PUSH
48902: LD_INT 3
48904: EQUAL
48905: PUSH
48906: LD_INT 49
48908: PUSH
48909: LD_VAR 0 5
48913: IN
48914: AND
48915: PUSH
48916: LD_INT 31
48918: PPUSH
48919: LD_VAR 0 16
48923: PPUSH
48924: CALL_OW 321
48928: PUSH
48929: LD_INT 2
48931: EQUAL
48932: AND
48933: IFFALSE 48993
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48935: LD_INT 22
48937: PUSH
48938: LD_VAR 0 16
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 35
48949: PUSH
48950: LD_INT 49
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 91
48959: PUSH
48960: LD_VAR 0 1
48964: PUSH
48965: LD_INT 10
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: LIST
48977: PPUSH
48978: CALL_OW 69
48982: NOT
48983: IFFALSE 48993
// weapon := ru_time_lapser ;
48985: LD_ADDR_VAR 0 18
48989: PUSH
48990: LD_INT 49
48992: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48993: LD_VAR 0 12
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: IN
49008: PUSH
49009: LD_INT 11
49011: PUSH
49012: LD_VAR 0 5
49016: IN
49017: PUSH
49018: LD_INT 30
49020: PUSH
49021: LD_VAR 0 5
49025: IN
49026: OR
49027: AND
49028: PUSH
49029: LD_INT 6
49031: PPUSH
49032: LD_VAR 0 16
49036: PPUSH
49037: CALL_OW 321
49041: PUSH
49042: LD_INT 2
49044: EQUAL
49045: AND
49046: IFFALSE 49211
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49048: LD_INT 22
49050: PUSH
49051: LD_VAR 0 16
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 35
49065: PUSH
49066: LD_INT 11
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 35
49075: PUSH
49076: LD_INT 30
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 91
49090: PUSH
49091: LD_VAR 0 1
49095: PUSH
49096: LD_INT 18
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: PPUSH
49109: CALL_OW 69
49113: NOT
49114: PUSH
49115: LD_INT 22
49117: PUSH
49118: LD_VAR 0 16
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 30
49132: PUSH
49133: LD_INT 32
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 30
49142: PUSH
49143: LD_INT 33
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 91
49157: PUSH
49158: LD_VAR 0 1
49162: PUSH
49163: LD_INT 12
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: PPUSH
49179: CALL_OW 69
49183: PUSH
49184: LD_INT 2
49186: GREATER
49187: AND
49188: IFFALSE 49211
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49190: LD_ADDR_VAR 0 18
49194: PUSH
49195: LD_INT 11
49197: PUSH
49198: LD_INT 30
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_VAR 0 12
49209: ARRAY
49210: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49211: LD_VAR 0 18
49215: NOT
49216: PUSH
49217: LD_INT 40
49219: PPUSH
49220: LD_VAR 0 16
49224: PPUSH
49225: CALL_OW 321
49229: PUSH
49230: LD_INT 2
49232: EQUAL
49233: AND
49234: PUSH
49235: LD_INT 7
49237: PUSH
49238: LD_VAR 0 5
49242: IN
49243: PUSH
49244: LD_INT 28
49246: PUSH
49247: LD_VAR 0 5
49251: IN
49252: OR
49253: PUSH
49254: LD_INT 45
49256: PUSH
49257: LD_VAR 0 5
49261: IN
49262: OR
49263: AND
49264: IFFALSE 49518
// begin hex := GetHexInfo ( x , y ) ;
49266: LD_ADDR_VAR 0 4
49270: PUSH
49271: LD_VAR 0 10
49275: PPUSH
49276: LD_VAR 0 11
49280: PPUSH
49281: CALL_OW 546
49285: ST_TO_ADDR
// if hex [ 1 ] then
49286: LD_VAR 0 4
49290: PUSH
49291: LD_INT 1
49293: ARRAY
49294: IFFALSE 49298
// exit ;
49296: GO 49701
// height := hex [ 2 ] ;
49298: LD_ADDR_VAR 0 15
49302: PUSH
49303: LD_VAR 0 4
49307: PUSH
49308: LD_INT 2
49310: ARRAY
49311: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49312: LD_ADDR_VAR 0 14
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 5
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// for i in tmp do
49335: LD_ADDR_VAR 0 8
49339: PUSH
49340: LD_VAR 0 14
49344: PUSH
49345: FOR_IN
49346: IFFALSE 49516
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49348: LD_ADDR_VAR 0 9
49352: PUSH
49353: LD_VAR 0 10
49357: PPUSH
49358: LD_VAR 0 8
49362: PPUSH
49363: LD_INT 5
49365: PPUSH
49366: CALL_OW 272
49370: PUSH
49371: LD_VAR 0 11
49375: PPUSH
49376: LD_VAR 0 8
49380: PPUSH
49381: LD_INT 5
49383: PPUSH
49384: CALL_OW 273
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49393: LD_VAR 0 9
49397: PUSH
49398: LD_INT 1
49400: ARRAY
49401: PPUSH
49402: LD_VAR 0 9
49406: PUSH
49407: LD_INT 2
49409: ARRAY
49410: PPUSH
49411: CALL_OW 488
49415: IFFALSE 49514
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49417: LD_ADDR_VAR 0 4
49421: PUSH
49422: LD_VAR 0 9
49426: PUSH
49427: LD_INT 1
49429: ARRAY
49430: PPUSH
49431: LD_VAR 0 9
49435: PUSH
49436: LD_INT 2
49438: ARRAY
49439: PPUSH
49440: CALL_OW 546
49444: ST_TO_ADDR
// if hex [ 1 ] then
49445: LD_VAR 0 4
49449: PUSH
49450: LD_INT 1
49452: ARRAY
49453: IFFALSE 49457
// continue ;
49455: GO 49345
// h := hex [ 2 ] ;
49457: LD_ADDR_VAR 0 13
49461: PUSH
49462: LD_VAR 0 4
49466: PUSH
49467: LD_INT 2
49469: ARRAY
49470: ST_TO_ADDR
// if h + 7 < height then
49471: LD_VAR 0 13
49475: PUSH
49476: LD_INT 7
49478: PLUS
49479: PUSH
49480: LD_VAR 0 15
49484: LESS
49485: IFFALSE 49514
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49487: LD_ADDR_VAR 0 18
49491: PUSH
49492: LD_INT 7
49494: PUSH
49495: LD_INT 28
49497: PUSH
49498: LD_INT 45
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: PUSH
49506: LD_VAR 0 12
49510: ARRAY
49511: ST_TO_ADDR
// break ;
49512: GO 49516
// end ; end ; end ;
49514: GO 49345
49516: POP
49517: POP
// end ; if not weapon then
49518: LD_VAR 0 18
49522: NOT
49523: IFFALSE 49583
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49525: LD_ADDR_VAR 0 5
49529: PUSH
49530: LD_VAR 0 5
49534: PUSH
49535: LD_INT 11
49537: PUSH
49538: LD_INT 30
49540: PUSH
49541: LD_INT 49
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: DIFF
49549: ST_TO_ADDR
// if not list then
49550: LD_VAR 0 5
49554: NOT
49555: IFFALSE 49559
// exit ;
49557: GO 49701
// weapon := list [ rand ( 1 , list ) ] ;
49559: LD_ADDR_VAR 0 18
49563: PUSH
49564: LD_VAR 0 5
49568: PUSH
49569: LD_INT 1
49571: PPUSH
49572: LD_VAR 0 5
49576: PPUSH
49577: CALL_OW 12
49581: ARRAY
49582: ST_TO_ADDR
// end ; if weapon then
49583: LD_VAR 0 18
49587: IFFALSE 49701
// begin tmp := CostOfWeapon ( weapon ) ;
49589: LD_ADDR_VAR 0 14
49593: PUSH
49594: LD_VAR 0 18
49598: PPUSH
49599: CALL_OW 451
49603: ST_TO_ADDR
// j := GetBase ( tower ) ;
49604: LD_ADDR_VAR 0 9
49608: PUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: CALL_OW 274
49618: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49619: LD_VAR 0 9
49623: PPUSH
49624: LD_INT 1
49626: PPUSH
49627: CALL_OW 275
49631: PUSH
49632: LD_VAR 0 14
49636: PUSH
49637: LD_INT 1
49639: ARRAY
49640: GREATEREQUAL
49641: PUSH
49642: LD_VAR 0 9
49646: PPUSH
49647: LD_INT 2
49649: PPUSH
49650: CALL_OW 275
49654: PUSH
49655: LD_VAR 0 14
49659: PUSH
49660: LD_INT 2
49662: ARRAY
49663: GREATEREQUAL
49664: AND
49665: PUSH
49666: LD_VAR 0 9
49670: PPUSH
49671: LD_INT 3
49673: PPUSH
49674: CALL_OW 275
49678: PUSH
49679: LD_VAR 0 14
49683: PUSH
49684: LD_INT 3
49686: ARRAY
49687: GREATEREQUAL
49688: AND
49689: IFFALSE 49701
// result := weapon ;
49691: LD_ADDR_VAR 0 3
49695: PUSH
49696: LD_VAR 0 18
49700: ST_TO_ADDR
// end ; end ;
49701: LD_VAR 0 3
49705: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49706: LD_INT 0
49708: PPUSH
49709: PPUSH
// result := true ;
49710: LD_ADDR_VAR 0 3
49714: PUSH
49715: LD_INT 1
49717: ST_TO_ADDR
// if array1 = array2 then
49718: LD_VAR 0 1
49722: PUSH
49723: LD_VAR 0 2
49727: EQUAL
49728: IFFALSE 49788
// begin for i = 1 to array1 do
49730: LD_ADDR_VAR 0 4
49734: PUSH
49735: DOUBLE
49736: LD_INT 1
49738: DEC
49739: ST_TO_ADDR
49740: LD_VAR 0 1
49744: PUSH
49745: FOR_TO
49746: IFFALSE 49784
// if array1 [ i ] <> array2 [ i ] then
49748: LD_VAR 0 1
49752: PUSH
49753: LD_VAR 0 4
49757: ARRAY
49758: PUSH
49759: LD_VAR 0 2
49763: PUSH
49764: LD_VAR 0 4
49768: ARRAY
49769: NONEQUAL
49770: IFFALSE 49782
// begin result := false ;
49772: LD_ADDR_VAR 0 3
49776: PUSH
49777: LD_INT 0
49779: ST_TO_ADDR
// break ;
49780: GO 49784
// end ;
49782: GO 49745
49784: POP
49785: POP
// end else
49786: GO 49796
// result := false ;
49788: LD_ADDR_VAR 0 3
49792: PUSH
49793: LD_INT 0
49795: ST_TO_ADDR
// end ;
49796: LD_VAR 0 3
49800: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49801: LD_INT 0
49803: PPUSH
49804: PPUSH
// if not array1 or not array2 then
49805: LD_VAR 0 1
49809: NOT
49810: PUSH
49811: LD_VAR 0 2
49815: NOT
49816: OR
49817: IFFALSE 49821
// exit ;
49819: GO 49885
// result := true ;
49821: LD_ADDR_VAR 0 3
49825: PUSH
49826: LD_INT 1
49828: ST_TO_ADDR
// for i = 1 to array1 do
49829: LD_ADDR_VAR 0 4
49833: PUSH
49834: DOUBLE
49835: LD_INT 1
49837: DEC
49838: ST_TO_ADDR
49839: LD_VAR 0 1
49843: PUSH
49844: FOR_TO
49845: IFFALSE 49883
// if array1 [ i ] <> array2 [ i ] then
49847: LD_VAR 0 1
49851: PUSH
49852: LD_VAR 0 4
49856: ARRAY
49857: PUSH
49858: LD_VAR 0 2
49862: PUSH
49863: LD_VAR 0 4
49867: ARRAY
49868: NONEQUAL
49869: IFFALSE 49881
// begin result := false ;
49871: LD_ADDR_VAR 0 3
49875: PUSH
49876: LD_INT 0
49878: ST_TO_ADDR
// break ;
49879: GO 49883
// end ;
49881: GO 49844
49883: POP
49884: POP
// end ;
49885: LD_VAR 0 3
49889: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49890: LD_INT 0
49892: PPUSH
49893: PPUSH
49894: PPUSH
// pom := GetBase ( fac ) ;
49895: LD_ADDR_VAR 0 5
49899: PUSH
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 274
49909: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49910: LD_ADDR_VAR 0 4
49914: PUSH
49915: LD_VAR 0 2
49919: PUSH
49920: LD_INT 1
49922: ARRAY
49923: PPUSH
49924: LD_VAR 0 2
49928: PUSH
49929: LD_INT 2
49931: ARRAY
49932: PPUSH
49933: LD_VAR 0 2
49937: PUSH
49938: LD_INT 3
49940: ARRAY
49941: PPUSH
49942: LD_VAR 0 2
49946: PUSH
49947: LD_INT 4
49949: ARRAY
49950: PPUSH
49951: CALL_OW 449
49955: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49956: LD_ADDR_VAR 0 3
49960: PUSH
49961: LD_VAR 0 5
49965: PPUSH
49966: LD_INT 1
49968: PPUSH
49969: CALL_OW 275
49973: PUSH
49974: LD_VAR 0 4
49978: PUSH
49979: LD_INT 1
49981: ARRAY
49982: GREATEREQUAL
49983: PUSH
49984: LD_VAR 0 5
49988: PPUSH
49989: LD_INT 2
49991: PPUSH
49992: CALL_OW 275
49996: PUSH
49997: LD_VAR 0 4
50001: PUSH
50002: LD_INT 2
50004: ARRAY
50005: GREATEREQUAL
50006: AND
50007: PUSH
50008: LD_VAR 0 5
50012: PPUSH
50013: LD_INT 3
50015: PPUSH
50016: CALL_OW 275
50020: PUSH
50021: LD_VAR 0 4
50025: PUSH
50026: LD_INT 3
50028: ARRAY
50029: GREATEREQUAL
50030: AND
50031: ST_TO_ADDR
// end ;
50032: LD_VAR 0 3
50036: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50037: LD_INT 0
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
// pom := GetBase ( building ) ;
50043: LD_ADDR_VAR 0 3
50047: PUSH
50048: LD_VAR 0 1
50052: PPUSH
50053: CALL_OW 274
50057: ST_TO_ADDR
// if not pom then
50058: LD_VAR 0 3
50062: NOT
50063: IFFALSE 50067
// exit ;
50065: GO 50237
// btype := GetBType ( building ) ;
50067: LD_ADDR_VAR 0 5
50071: PUSH
50072: LD_VAR 0 1
50076: PPUSH
50077: CALL_OW 266
50081: ST_TO_ADDR
// if btype = b_armoury then
50082: LD_VAR 0 5
50086: PUSH
50087: LD_INT 4
50089: EQUAL
50090: IFFALSE 50100
// btype := b_barracks ;
50092: LD_ADDR_VAR 0 5
50096: PUSH
50097: LD_INT 5
50099: ST_TO_ADDR
// if btype = b_depot then
50100: LD_VAR 0 5
50104: PUSH
50105: LD_INT 0
50107: EQUAL
50108: IFFALSE 50118
// btype := b_warehouse ;
50110: LD_ADDR_VAR 0 5
50114: PUSH
50115: LD_INT 1
50117: ST_TO_ADDR
// if btype = b_workshop then
50118: LD_VAR 0 5
50122: PUSH
50123: LD_INT 2
50125: EQUAL
50126: IFFALSE 50136
// btype := b_factory ;
50128: LD_ADDR_VAR 0 5
50132: PUSH
50133: LD_INT 3
50135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50136: LD_ADDR_VAR 0 4
50140: PUSH
50141: LD_VAR 0 5
50145: PPUSH
50146: LD_VAR 0 1
50150: PPUSH
50151: CALL_OW 248
50155: PPUSH
50156: CALL_OW 450
50160: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50161: LD_ADDR_VAR 0 2
50165: PUSH
50166: LD_VAR 0 3
50170: PPUSH
50171: LD_INT 1
50173: PPUSH
50174: CALL_OW 275
50178: PUSH
50179: LD_VAR 0 4
50183: PUSH
50184: LD_INT 1
50186: ARRAY
50187: GREATEREQUAL
50188: PUSH
50189: LD_VAR 0 3
50193: PPUSH
50194: LD_INT 2
50196: PPUSH
50197: CALL_OW 275
50201: PUSH
50202: LD_VAR 0 4
50206: PUSH
50207: LD_INT 2
50209: ARRAY
50210: GREATEREQUAL
50211: AND
50212: PUSH
50213: LD_VAR 0 3
50217: PPUSH
50218: LD_INT 3
50220: PPUSH
50221: CALL_OW 275
50225: PUSH
50226: LD_VAR 0 4
50230: PUSH
50231: LD_INT 3
50233: ARRAY
50234: GREATEREQUAL
50235: AND
50236: ST_TO_ADDR
// end ;
50237: LD_VAR 0 2
50241: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50242: LD_INT 0
50244: PPUSH
50245: PPUSH
50246: PPUSH
// pom := GetBase ( building ) ;
50247: LD_ADDR_VAR 0 4
50251: PUSH
50252: LD_VAR 0 1
50256: PPUSH
50257: CALL_OW 274
50261: ST_TO_ADDR
// if not pom then
50262: LD_VAR 0 4
50266: NOT
50267: IFFALSE 50271
// exit ;
50269: GO 50372
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50271: LD_ADDR_VAR 0 5
50275: PUSH
50276: LD_VAR 0 2
50280: PPUSH
50281: LD_VAR 0 1
50285: PPUSH
50286: CALL_OW 248
50290: PPUSH
50291: CALL_OW 450
50295: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50296: LD_ADDR_VAR 0 3
50300: PUSH
50301: LD_VAR 0 4
50305: PPUSH
50306: LD_INT 1
50308: PPUSH
50309: CALL_OW 275
50313: PUSH
50314: LD_VAR 0 5
50318: PUSH
50319: LD_INT 1
50321: ARRAY
50322: GREATEREQUAL
50323: PUSH
50324: LD_VAR 0 4
50328: PPUSH
50329: LD_INT 2
50331: PPUSH
50332: CALL_OW 275
50336: PUSH
50337: LD_VAR 0 5
50341: PUSH
50342: LD_INT 2
50344: ARRAY
50345: GREATEREQUAL
50346: AND
50347: PUSH
50348: LD_VAR 0 4
50352: PPUSH
50353: LD_INT 3
50355: PPUSH
50356: CALL_OW 275
50360: PUSH
50361: LD_VAR 0 5
50365: PUSH
50366: LD_INT 3
50368: ARRAY
50369: GREATEREQUAL
50370: AND
50371: ST_TO_ADDR
// end ;
50372: LD_VAR 0 3
50376: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50377: LD_INT 0
50379: PPUSH
50380: PPUSH
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
50385: PPUSH
50386: PPUSH
50387: PPUSH
50388: PPUSH
50389: PPUSH
// result := false ;
50390: LD_ADDR_VAR 0 8
50394: PUSH
50395: LD_INT 0
50397: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50398: LD_VAR 0 5
50402: NOT
50403: PUSH
50404: LD_VAR 0 1
50408: NOT
50409: OR
50410: PUSH
50411: LD_VAR 0 2
50415: NOT
50416: OR
50417: PUSH
50418: LD_VAR 0 3
50422: NOT
50423: OR
50424: IFFALSE 50428
// exit ;
50426: GO 51242
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50428: LD_ADDR_VAR 0 14
50432: PUSH
50433: LD_VAR 0 1
50437: PPUSH
50438: LD_VAR 0 2
50442: PPUSH
50443: LD_VAR 0 3
50447: PPUSH
50448: LD_VAR 0 4
50452: PPUSH
50453: LD_VAR 0 5
50457: PUSH
50458: LD_INT 1
50460: ARRAY
50461: PPUSH
50462: CALL_OW 248
50466: PPUSH
50467: LD_INT 0
50469: PPUSH
50470: CALL 52495 0 6
50474: ST_TO_ADDR
// if not hexes then
50475: LD_VAR 0 14
50479: NOT
50480: IFFALSE 50484
// exit ;
50482: GO 51242
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50484: LD_ADDR_VAR 0 17
50488: PUSH
50489: LD_VAR 0 5
50493: PPUSH
50494: LD_INT 22
50496: PUSH
50497: LD_VAR 0 13
50501: PPUSH
50502: CALL_OW 255
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 30
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 30
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PPUSH
50543: CALL_OW 72
50547: ST_TO_ADDR
// for i = 1 to hexes do
50548: LD_ADDR_VAR 0 9
50552: PUSH
50553: DOUBLE
50554: LD_INT 1
50556: DEC
50557: ST_TO_ADDR
50558: LD_VAR 0 14
50562: PUSH
50563: FOR_TO
50564: IFFALSE 51240
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50566: LD_ADDR_VAR 0 13
50570: PUSH
50571: LD_VAR 0 14
50575: PUSH
50576: LD_VAR 0 9
50580: ARRAY
50581: PUSH
50582: LD_INT 1
50584: ARRAY
50585: PPUSH
50586: LD_VAR 0 14
50590: PUSH
50591: LD_VAR 0 9
50595: ARRAY
50596: PUSH
50597: LD_INT 2
50599: ARRAY
50600: PPUSH
50601: CALL_OW 428
50605: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50606: LD_VAR 0 14
50610: PUSH
50611: LD_VAR 0 9
50615: ARRAY
50616: PUSH
50617: LD_INT 1
50619: ARRAY
50620: PPUSH
50621: LD_VAR 0 14
50625: PUSH
50626: LD_VAR 0 9
50630: ARRAY
50631: PUSH
50632: LD_INT 2
50634: ARRAY
50635: PPUSH
50636: CALL_OW 351
50640: PUSH
50641: LD_VAR 0 14
50645: PUSH
50646: LD_VAR 0 9
50650: ARRAY
50651: PUSH
50652: LD_INT 1
50654: ARRAY
50655: PPUSH
50656: LD_VAR 0 14
50660: PUSH
50661: LD_VAR 0 9
50665: ARRAY
50666: PUSH
50667: LD_INT 2
50669: ARRAY
50670: PPUSH
50671: CALL_OW 488
50675: NOT
50676: OR
50677: PUSH
50678: LD_VAR 0 13
50682: PPUSH
50683: CALL_OW 247
50687: PUSH
50688: LD_INT 3
50690: EQUAL
50691: OR
50692: IFFALSE 50698
// exit ;
50694: POP
50695: POP
50696: GO 51242
// if not tmp then
50698: LD_VAR 0 13
50702: NOT
50703: IFFALSE 50707
// continue ;
50705: GO 50563
// result := true ;
50707: LD_ADDR_VAR 0 8
50711: PUSH
50712: LD_INT 1
50714: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50715: LD_VAR 0 6
50719: PUSH
50720: LD_VAR 0 13
50724: PPUSH
50725: CALL_OW 247
50729: PUSH
50730: LD_INT 2
50732: EQUAL
50733: AND
50734: PUSH
50735: LD_VAR 0 13
50739: PPUSH
50740: CALL_OW 263
50744: PUSH
50745: LD_INT 1
50747: EQUAL
50748: AND
50749: IFFALSE 50913
// begin if IsDrivenBy ( tmp ) then
50751: LD_VAR 0 13
50755: PPUSH
50756: CALL_OW 311
50760: IFFALSE 50764
// continue ;
50762: GO 50563
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50764: LD_VAR 0 6
50768: PPUSH
50769: LD_INT 3
50771: PUSH
50772: LD_INT 60
50774: PUSH
50775: EMPTY
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: LD_INT 55
50787: PUSH
50788: EMPTY
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PPUSH
50799: CALL_OW 72
50803: IFFALSE 50911
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50805: LD_ADDR_VAR 0 18
50809: PUSH
50810: LD_VAR 0 6
50814: PPUSH
50815: LD_INT 3
50817: PUSH
50818: LD_INT 60
50820: PUSH
50821: EMPTY
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: LD_INT 55
50833: PUSH
50834: EMPTY
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PPUSH
50845: CALL_OW 72
50849: PUSH
50850: LD_INT 1
50852: ARRAY
50853: ST_TO_ADDR
// if IsInUnit ( driver ) then
50854: LD_VAR 0 18
50858: PPUSH
50859: CALL_OW 310
50863: IFFALSE 50874
// ComExit ( driver ) ;
50865: LD_VAR 0 18
50869: PPUSH
50870: CALL 76296 0 1
// AddComEnterUnit ( driver , tmp ) ;
50874: LD_VAR 0 18
50878: PPUSH
50879: LD_VAR 0 13
50883: PPUSH
50884: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50888: LD_VAR 0 18
50892: PPUSH
50893: LD_VAR 0 7
50897: PPUSH
50898: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50902: LD_VAR 0 18
50906: PPUSH
50907: CALL_OW 181
// end ; continue ;
50911: GO 50563
// end ; if not cleaners or not tmp in cleaners then
50913: LD_VAR 0 6
50917: NOT
50918: PUSH
50919: LD_VAR 0 13
50923: PUSH
50924: LD_VAR 0 6
50928: IN
50929: NOT
50930: OR
50931: IFFALSE 51238
// begin if dep then
50933: LD_VAR 0 17
50937: IFFALSE 51073
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50939: LD_ADDR_VAR 0 16
50943: PUSH
50944: LD_VAR 0 17
50948: PUSH
50949: LD_INT 1
50951: ARRAY
50952: PPUSH
50953: CALL_OW 250
50957: PPUSH
50958: LD_VAR 0 17
50962: PUSH
50963: LD_INT 1
50965: ARRAY
50966: PPUSH
50967: CALL_OW 254
50971: PPUSH
50972: LD_INT 5
50974: PPUSH
50975: CALL_OW 272
50979: PUSH
50980: LD_VAR 0 17
50984: PUSH
50985: LD_INT 1
50987: ARRAY
50988: PPUSH
50989: CALL_OW 251
50993: PPUSH
50994: LD_VAR 0 17
50998: PUSH
50999: LD_INT 1
51001: ARRAY
51002: PPUSH
51003: CALL_OW 254
51007: PPUSH
51008: LD_INT 5
51010: PPUSH
51011: CALL_OW 273
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51020: LD_VAR 0 16
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PPUSH
51029: LD_VAR 0 16
51033: PUSH
51034: LD_INT 2
51036: ARRAY
51037: PPUSH
51038: CALL_OW 488
51042: IFFALSE 51073
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51044: LD_VAR 0 13
51048: PPUSH
51049: LD_VAR 0 16
51053: PUSH
51054: LD_INT 1
51056: ARRAY
51057: PPUSH
51058: LD_VAR 0 16
51062: PUSH
51063: LD_INT 2
51065: ARRAY
51066: PPUSH
51067: CALL_OW 111
// continue ;
51071: GO 50563
// end ; end ; r := GetDir ( tmp ) ;
51073: LD_ADDR_VAR 0 15
51077: PUSH
51078: LD_VAR 0 13
51082: PPUSH
51083: CALL_OW 254
51087: ST_TO_ADDR
// if r = 5 then
51088: LD_VAR 0 15
51092: PUSH
51093: LD_INT 5
51095: EQUAL
51096: IFFALSE 51106
// r := 0 ;
51098: LD_ADDR_VAR 0 15
51102: PUSH
51103: LD_INT 0
51105: ST_TO_ADDR
// for j = r to 5 do
51106: LD_ADDR_VAR 0 10
51110: PUSH
51111: DOUBLE
51112: LD_VAR 0 15
51116: DEC
51117: ST_TO_ADDR
51118: LD_INT 5
51120: PUSH
51121: FOR_TO
51122: IFFALSE 51236
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51124: LD_ADDR_VAR 0 11
51128: PUSH
51129: LD_VAR 0 13
51133: PPUSH
51134: CALL_OW 250
51138: PPUSH
51139: LD_VAR 0 10
51143: PPUSH
51144: LD_INT 2
51146: PPUSH
51147: CALL_OW 272
51151: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51152: LD_ADDR_VAR 0 12
51156: PUSH
51157: LD_VAR 0 13
51161: PPUSH
51162: CALL_OW 251
51166: PPUSH
51167: LD_VAR 0 10
51171: PPUSH
51172: LD_INT 2
51174: PPUSH
51175: CALL_OW 273
51179: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51180: LD_VAR 0 11
51184: PPUSH
51185: LD_VAR 0 12
51189: PPUSH
51190: CALL_OW 488
51194: PUSH
51195: LD_VAR 0 11
51199: PPUSH
51200: LD_VAR 0 12
51204: PPUSH
51205: CALL_OW 428
51209: NOT
51210: AND
51211: IFFALSE 51234
// begin ComMoveXY ( tmp , _x , _y ) ;
51213: LD_VAR 0 13
51217: PPUSH
51218: LD_VAR 0 11
51222: PPUSH
51223: LD_VAR 0 12
51227: PPUSH
51228: CALL_OW 111
// break ;
51232: GO 51236
// end ; end ;
51234: GO 51121
51236: POP
51237: POP
// end ; end ;
51238: GO 50563
51240: POP
51241: POP
// end ;
51242: LD_VAR 0 8
51246: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51247: LD_INT 0
51249: PPUSH
// result := true ;
51250: LD_ADDR_VAR 0 3
51254: PUSH
51255: LD_INT 1
51257: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51258: LD_VAR 0 2
51262: PUSH
51263: LD_INT 24
51265: DOUBLE
51266: EQUAL
51267: IFTRUE 51277
51269: LD_INT 33
51271: DOUBLE
51272: EQUAL
51273: IFTRUE 51277
51275: GO 51302
51277: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51278: LD_ADDR_VAR 0 3
51282: PUSH
51283: LD_INT 32
51285: PPUSH
51286: LD_VAR 0 1
51290: PPUSH
51291: CALL_OW 321
51295: PUSH
51296: LD_INT 2
51298: EQUAL
51299: ST_TO_ADDR
51300: GO 51618
51302: LD_INT 20
51304: DOUBLE
51305: EQUAL
51306: IFTRUE 51310
51308: GO 51335
51310: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51311: LD_ADDR_VAR 0 3
51315: PUSH
51316: LD_INT 6
51318: PPUSH
51319: LD_VAR 0 1
51323: PPUSH
51324: CALL_OW 321
51328: PUSH
51329: LD_INT 2
51331: EQUAL
51332: ST_TO_ADDR
51333: GO 51618
51335: LD_INT 22
51337: DOUBLE
51338: EQUAL
51339: IFTRUE 51349
51341: LD_INT 36
51343: DOUBLE
51344: EQUAL
51345: IFTRUE 51349
51347: GO 51374
51349: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51350: LD_ADDR_VAR 0 3
51354: PUSH
51355: LD_INT 15
51357: PPUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: CALL_OW 321
51367: PUSH
51368: LD_INT 2
51370: EQUAL
51371: ST_TO_ADDR
51372: GO 51618
51374: LD_INT 30
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51382
51380: GO 51407
51382: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_INT 20
51390: PPUSH
51391: LD_VAR 0 1
51395: PPUSH
51396: CALL_OW 321
51400: PUSH
51401: LD_INT 2
51403: EQUAL
51404: ST_TO_ADDR
51405: GO 51618
51407: LD_INT 28
51409: DOUBLE
51410: EQUAL
51411: IFTRUE 51421
51413: LD_INT 21
51415: DOUBLE
51416: EQUAL
51417: IFTRUE 51421
51419: GO 51446
51421: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 21
51429: PPUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 321
51439: PUSH
51440: LD_INT 2
51442: EQUAL
51443: ST_TO_ADDR
51444: GO 51618
51446: LD_INT 16
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51454
51452: GO 51479
51454: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51455: LD_ADDR_VAR 0 3
51459: PUSH
51460: LD_INT 84
51462: PPUSH
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL_OW 321
51472: PUSH
51473: LD_INT 2
51475: EQUAL
51476: ST_TO_ADDR
51477: GO 51618
51479: LD_INT 19
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51493
51485: LD_INT 23
51487: DOUBLE
51488: EQUAL
51489: IFTRUE 51493
51491: GO 51518
51493: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51494: LD_ADDR_VAR 0 3
51498: PUSH
51499: LD_INT 83
51501: PPUSH
51502: LD_VAR 0 1
51506: PPUSH
51507: CALL_OW 321
51511: PUSH
51512: LD_INT 2
51514: EQUAL
51515: ST_TO_ADDR
51516: GO 51618
51518: LD_INT 17
51520: DOUBLE
51521: EQUAL
51522: IFTRUE 51526
51524: GO 51551
51526: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51527: LD_ADDR_VAR 0 3
51531: PUSH
51532: LD_INT 39
51534: PPUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 321
51544: PUSH
51545: LD_INT 2
51547: EQUAL
51548: ST_TO_ADDR
51549: GO 51618
51551: LD_INT 18
51553: DOUBLE
51554: EQUAL
51555: IFTRUE 51559
51557: GO 51584
51559: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51560: LD_ADDR_VAR 0 3
51564: PUSH
51565: LD_INT 40
51567: PPUSH
51568: LD_VAR 0 1
51572: PPUSH
51573: CALL_OW 321
51577: PUSH
51578: LD_INT 2
51580: EQUAL
51581: ST_TO_ADDR
51582: GO 51618
51584: LD_INT 27
51586: DOUBLE
51587: EQUAL
51588: IFTRUE 51592
51590: GO 51617
51592: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_INT 35
51600: PPUSH
51601: LD_VAR 0 1
51605: PPUSH
51606: CALL_OW 321
51610: PUSH
51611: LD_INT 2
51613: EQUAL
51614: ST_TO_ADDR
51615: GO 51618
51617: POP
// end ;
51618: LD_VAR 0 3
51622: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51623: LD_INT 0
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
// result := false ;
51636: LD_ADDR_VAR 0 6
51640: PUSH
51641: LD_INT 0
51643: ST_TO_ADDR
// if btype = b_depot then
51644: LD_VAR 0 2
51648: PUSH
51649: LD_INT 0
51651: EQUAL
51652: IFFALSE 51664
// begin result := true ;
51654: LD_ADDR_VAR 0 6
51658: PUSH
51659: LD_INT 1
51661: ST_TO_ADDR
// exit ;
51662: GO 52490
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51664: LD_VAR 0 1
51668: NOT
51669: PUSH
51670: LD_VAR 0 1
51674: PPUSH
51675: CALL_OW 266
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: IN
51690: NOT
51691: OR
51692: PUSH
51693: LD_VAR 0 2
51697: NOT
51698: OR
51699: PUSH
51700: LD_VAR 0 5
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 4
51719: PUSH
51720: LD_INT 5
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: IN
51731: NOT
51732: OR
51733: PUSH
51734: LD_VAR 0 3
51738: PPUSH
51739: LD_VAR 0 4
51743: PPUSH
51744: CALL_OW 488
51748: NOT
51749: OR
51750: IFFALSE 51754
// exit ;
51752: GO 52490
// side := GetSide ( depot ) ;
51754: LD_ADDR_VAR 0 9
51758: PUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: CALL_OW 255
51768: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51769: LD_VAR 0 9
51773: PPUSH
51774: LD_VAR 0 2
51778: PPUSH
51779: CALL 51247 0 2
51783: NOT
51784: IFFALSE 51788
// exit ;
51786: GO 52490
// pom := GetBase ( depot ) ;
51788: LD_ADDR_VAR 0 10
51792: PUSH
51793: LD_VAR 0 1
51797: PPUSH
51798: CALL_OW 274
51802: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51803: LD_ADDR_VAR 0 11
51807: PUSH
51808: LD_VAR 0 2
51812: PPUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 248
51822: PPUSH
51823: CALL_OW 450
51827: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51828: LD_VAR 0 10
51832: PPUSH
51833: LD_INT 1
51835: PPUSH
51836: CALL_OW 275
51840: PUSH
51841: LD_VAR 0 11
51845: PUSH
51846: LD_INT 1
51848: ARRAY
51849: GREATEREQUAL
51850: PUSH
51851: LD_VAR 0 10
51855: PPUSH
51856: LD_INT 2
51858: PPUSH
51859: CALL_OW 275
51863: PUSH
51864: LD_VAR 0 11
51868: PUSH
51869: LD_INT 2
51871: ARRAY
51872: GREATEREQUAL
51873: AND
51874: PUSH
51875: LD_VAR 0 10
51879: PPUSH
51880: LD_INT 3
51882: PPUSH
51883: CALL_OW 275
51887: PUSH
51888: LD_VAR 0 11
51892: PUSH
51893: LD_INT 3
51895: ARRAY
51896: GREATEREQUAL
51897: AND
51898: NOT
51899: IFFALSE 51903
// exit ;
51901: GO 52490
// if GetBType ( depot ) = b_depot then
51903: LD_VAR 0 1
51907: PPUSH
51908: CALL_OW 266
51912: PUSH
51913: LD_INT 0
51915: EQUAL
51916: IFFALSE 51928
// dist := 28 else
51918: LD_ADDR_VAR 0 14
51922: PUSH
51923: LD_INT 28
51925: ST_TO_ADDR
51926: GO 51936
// dist := 36 ;
51928: LD_ADDR_VAR 0 14
51932: PUSH
51933: LD_INT 36
51935: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51936: LD_VAR 0 1
51940: PPUSH
51941: LD_VAR 0 3
51945: PPUSH
51946: LD_VAR 0 4
51950: PPUSH
51951: CALL_OW 297
51955: PUSH
51956: LD_VAR 0 14
51960: GREATER
51961: IFFALSE 51965
// exit ;
51963: GO 52490
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51965: LD_ADDR_VAR 0 12
51969: PUSH
51970: LD_VAR 0 2
51974: PPUSH
51975: LD_VAR 0 3
51979: PPUSH
51980: LD_VAR 0 4
51984: PPUSH
51985: LD_VAR 0 5
51989: PPUSH
51990: LD_VAR 0 1
51994: PPUSH
51995: CALL_OW 248
51999: PPUSH
52000: LD_INT 0
52002: PPUSH
52003: CALL 52495 0 6
52007: ST_TO_ADDR
// if not hexes then
52008: LD_VAR 0 12
52012: NOT
52013: IFFALSE 52017
// exit ;
52015: GO 52490
// hex := GetHexInfo ( x , y ) ;
52017: LD_ADDR_VAR 0 15
52021: PUSH
52022: LD_VAR 0 3
52026: PPUSH
52027: LD_VAR 0 4
52031: PPUSH
52032: CALL_OW 546
52036: ST_TO_ADDR
// if hex [ 1 ] then
52037: LD_VAR 0 15
52041: PUSH
52042: LD_INT 1
52044: ARRAY
52045: IFFALSE 52049
// exit ;
52047: GO 52490
// height := hex [ 2 ] ;
52049: LD_ADDR_VAR 0 13
52053: PUSH
52054: LD_VAR 0 15
52058: PUSH
52059: LD_INT 2
52061: ARRAY
52062: ST_TO_ADDR
// for i = 1 to hexes do
52063: LD_ADDR_VAR 0 7
52067: PUSH
52068: DOUBLE
52069: LD_INT 1
52071: DEC
52072: ST_TO_ADDR
52073: LD_VAR 0 12
52077: PUSH
52078: FOR_TO
52079: IFFALSE 52409
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52081: LD_VAR 0 12
52085: PUSH
52086: LD_VAR 0 7
52090: ARRAY
52091: PUSH
52092: LD_INT 1
52094: ARRAY
52095: PPUSH
52096: LD_VAR 0 12
52100: PUSH
52101: LD_VAR 0 7
52105: ARRAY
52106: PUSH
52107: LD_INT 2
52109: ARRAY
52110: PPUSH
52111: CALL_OW 488
52115: NOT
52116: PUSH
52117: LD_VAR 0 12
52121: PUSH
52122: LD_VAR 0 7
52126: ARRAY
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: PPUSH
52132: LD_VAR 0 12
52136: PUSH
52137: LD_VAR 0 7
52141: ARRAY
52142: PUSH
52143: LD_INT 2
52145: ARRAY
52146: PPUSH
52147: CALL_OW 428
52151: PUSH
52152: LD_INT 0
52154: GREATER
52155: OR
52156: PUSH
52157: LD_VAR 0 12
52161: PUSH
52162: LD_VAR 0 7
52166: ARRAY
52167: PUSH
52168: LD_INT 1
52170: ARRAY
52171: PPUSH
52172: LD_VAR 0 12
52176: PUSH
52177: LD_VAR 0 7
52181: ARRAY
52182: PUSH
52183: LD_INT 2
52185: ARRAY
52186: PPUSH
52187: CALL_OW 351
52191: OR
52192: IFFALSE 52198
// exit ;
52194: POP
52195: POP
52196: GO 52490
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52198: LD_ADDR_VAR 0 8
52202: PUSH
52203: LD_VAR 0 12
52207: PUSH
52208: LD_VAR 0 7
52212: ARRAY
52213: PUSH
52214: LD_INT 1
52216: ARRAY
52217: PPUSH
52218: LD_VAR 0 12
52222: PUSH
52223: LD_VAR 0 7
52227: ARRAY
52228: PUSH
52229: LD_INT 2
52231: ARRAY
52232: PPUSH
52233: CALL_OW 546
52237: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52238: LD_VAR 0 8
52242: PUSH
52243: LD_INT 1
52245: ARRAY
52246: PUSH
52247: LD_VAR 0 8
52251: PUSH
52252: LD_INT 2
52254: ARRAY
52255: PUSH
52256: LD_VAR 0 13
52260: PUSH
52261: LD_INT 2
52263: PLUS
52264: GREATER
52265: OR
52266: PUSH
52267: LD_VAR 0 8
52271: PUSH
52272: LD_INT 2
52274: ARRAY
52275: PUSH
52276: LD_VAR 0 13
52280: PUSH
52281: LD_INT 2
52283: MINUS
52284: LESS
52285: OR
52286: PUSH
52287: LD_VAR 0 8
52291: PUSH
52292: LD_INT 3
52294: ARRAY
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 8
52301: PUSH
52302: LD_INT 9
52304: PUSH
52305: LD_INT 10
52307: PUSH
52308: LD_INT 11
52310: PUSH
52311: LD_INT 12
52313: PUSH
52314: LD_INT 13
52316: PUSH
52317: LD_INT 16
52319: PUSH
52320: LD_INT 17
52322: PUSH
52323: LD_INT 18
52325: PUSH
52326: LD_INT 19
52328: PUSH
52329: LD_INT 20
52331: PUSH
52332: LD_INT 21
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: IN
52350: NOT
52351: OR
52352: PUSH
52353: LD_VAR 0 8
52357: PUSH
52358: LD_INT 5
52360: ARRAY
52361: NOT
52362: OR
52363: PUSH
52364: LD_VAR 0 8
52368: PUSH
52369: LD_INT 6
52371: ARRAY
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 7
52381: PUSH
52382: LD_INT 9
52384: PUSH
52385: LD_INT 10
52387: PUSH
52388: LD_INT 11
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: IN
52399: NOT
52400: OR
52401: IFFALSE 52407
// exit ;
52403: POP
52404: POP
52405: GO 52490
// end ;
52407: GO 52078
52409: POP
52410: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52411: LD_VAR 0 9
52415: PPUSH
52416: LD_VAR 0 3
52420: PPUSH
52421: LD_VAR 0 4
52425: PPUSH
52426: LD_INT 20
52428: PPUSH
52429: CALL 44413 0 4
52433: PUSH
52434: LD_INT 4
52436: ARRAY
52437: IFFALSE 52441
// exit ;
52439: GO 52490
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52441: LD_VAR 0 2
52445: PUSH
52446: LD_INT 29
52448: PUSH
52449: LD_INT 30
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: IN
52456: PUSH
52457: LD_VAR 0 3
52461: PPUSH
52462: LD_VAR 0 4
52466: PPUSH
52467: LD_VAR 0 9
52471: PPUSH
52472: CALL_OW 440
52476: NOT
52477: AND
52478: IFFALSE 52482
// exit ;
52480: GO 52490
// result := true ;
52482: LD_ADDR_VAR 0 6
52486: PUSH
52487: LD_INT 1
52489: ST_TO_ADDR
// end ;
52490: LD_VAR 0 6
52494: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52495: LD_INT 0
52497: PPUSH
52498: PPUSH
52499: PPUSH
52500: PPUSH
52501: PPUSH
52502: PPUSH
52503: PPUSH
52504: PPUSH
52505: PPUSH
52506: PPUSH
52507: PPUSH
52508: PPUSH
52509: PPUSH
52510: PPUSH
52511: PPUSH
52512: PPUSH
52513: PPUSH
52514: PPUSH
52515: PPUSH
52516: PPUSH
52517: PPUSH
52518: PPUSH
52519: PPUSH
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
52524: PPUSH
52525: PPUSH
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
52536: PPUSH
52537: PPUSH
52538: PPUSH
52539: PPUSH
52540: PPUSH
52541: PPUSH
52542: PPUSH
52543: PPUSH
52544: PPUSH
52545: PPUSH
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
// result = [ ] ;
52555: LD_ADDR_VAR 0 7
52559: PUSH
52560: EMPTY
52561: ST_TO_ADDR
// temp_list = [ ] ;
52562: LD_ADDR_VAR 0 9
52566: PUSH
52567: EMPTY
52568: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52569: LD_VAR 0 4
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: LD_INT 4
52588: PUSH
52589: LD_INT 5
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: IN
52600: NOT
52601: PUSH
52602: LD_VAR 0 1
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: IN
52617: PUSH
52618: LD_VAR 0 5
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: IN
52637: NOT
52638: AND
52639: OR
52640: IFFALSE 52644
// exit ;
52642: GO 71035
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52644: LD_VAR 0 1
52648: PUSH
52649: LD_INT 6
52651: PUSH
52652: LD_INT 7
52654: PUSH
52655: LD_INT 8
52657: PUSH
52658: LD_INT 13
52660: PUSH
52661: LD_INT 12
52663: PUSH
52664: LD_INT 15
52666: PUSH
52667: LD_INT 11
52669: PUSH
52670: LD_INT 14
52672: PUSH
52673: LD_INT 10
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: IN
52687: IFFALSE 52697
// btype = b_lab ;
52689: LD_ADDR_VAR 0 1
52693: PUSH
52694: LD_INT 6
52696: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52697: LD_VAR 0 6
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: LIST
52715: IN
52716: NOT
52717: PUSH
52718: LD_VAR 0 1
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 6
52737: PUSH
52738: LD_INT 36
52740: PUSH
52741: LD_INT 4
52743: PUSH
52744: LD_INT 5
52746: PUSH
52747: LD_INT 31
52749: PUSH
52750: LD_INT 32
52752: PUSH
52753: LD_INT 33
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: IN
52769: NOT
52770: PUSH
52771: LD_VAR 0 6
52775: PUSH
52776: LD_INT 1
52778: EQUAL
52779: AND
52780: OR
52781: PUSH
52782: LD_VAR 0 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: IN
52797: NOT
52798: PUSH
52799: LD_VAR 0 6
52803: PUSH
52804: LD_INT 2
52806: EQUAL
52807: AND
52808: OR
52809: IFFALSE 52819
// mode = 0 ;
52811: LD_ADDR_VAR 0 6
52815: PUSH
52816: LD_INT 0
52818: ST_TO_ADDR
// case mode of 0 :
52819: LD_VAR 0 6
52823: PUSH
52824: LD_INT 0
52826: DOUBLE
52827: EQUAL
52828: IFTRUE 52832
52830: GO 64285
52832: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52833: LD_ADDR_VAR 0 11
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53026: LD_ADDR_VAR 0 12
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53222: LD_ADDR_VAR 0 13
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53421: LD_ADDR_VAR 0 14
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 3
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53617: LD_ADDR_VAR 0 15
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53810: LD_ADDR_VAR 0 16
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54003: LD_ADDR_VAR 0 17
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54233: LD_ADDR_VAR 0 18
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54463: LD_ADDR_VAR 0 19
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54693: LD_ADDR_VAR 0 20
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54923: LD_ADDR_VAR 0 21
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55153: LD_ADDR_VAR 0 22
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55383: LD_ADDR_VAR 0 23
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55663: LD_ADDR_VAR 0 24
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55939: LD_ADDR_VAR 0 25
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56213: LD_ADDR_VAR 0 26
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56489: LD_ADDR_VAR 0 27
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56769: LD_ADDR_VAR 0 28
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57051: LD_ADDR_VAR 0 29
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57330: LD_ADDR_VAR 0 30
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57608: LD_ADDR_VAR 0 31
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57886: LD_ADDR_VAR 0 32
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58164: LD_ADDR_VAR 0 33
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58443: LD_ADDR_VAR 0 34
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58723: LD_ADDR_VAR 0 35
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58835: LD_ADDR_VAR 0 36
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58947: LD_ADDR_VAR 0 37
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59059: LD_ADDR_VAR 0 38
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59171: LD_ADDR_VAR 0 39
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59283: LD_ADDR_VAR 0 40
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59395: LD_ADDR_VAR 0 41
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59745: LD_ADDR_VAR 0 42
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 3
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 3
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60095: LD_ADDR_VAR 0 43
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 3
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 3
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60443: LD_ADDR_VAR 0 44
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: LD_INT 3
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60793: LD_ADDR_VAR 0 45
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: NEG
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61143: LD_ADDR_VAR 0 46
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61491: LD_ADDR_VAR 0 47
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61642: LD_ADDR_VAR 0 48
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61789: LD_ADDR_VAR 0 49
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61933: LD_ADDR_VAR 0 50
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62077: LD_ADDR_VAR 0 51
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62224: LD_ADDR_VAR 0 52
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62375: LD_ADDR_VAR 0 53
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62605: LD_ADDR_VAR 0 54
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: NEG
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62835: LD_ADDR_VAR 0 55
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 2
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63065: LD_ADDR_VAR 0 56
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: LD_INT 1
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63295: LD_ADDR_VAR 0 57
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63525: LD_ADDR_VAR 0 58
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63755: LD_ADDR_VAR 0 59
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63843: LD_ADDR_VAR 0 60
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63931: LD_ADDR_VAR 0 61
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64019: LD_ADDR_VAR 0 62
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64107: LD_ADDR_VAR 0 63
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64195: LD_ADDR_VAR 0 64
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: ST_TO_ADDR
// end ; 1 :
64283: GO 70180
64285: LD_INT 1
64287: DOUBLE
64288: EQUAL
64289: IFTRUE 64293
64291: GO 66916
64293: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64294: LD_ADDR_VAR 0 11
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64338: LD_ADDR_VAR 0 12
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64379: LD_ADDR_VAR 0 13
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 3
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: LD_INT 3
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64419: LD_ADDR_VAR 0 14
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64460: LD_ADDR_VAR 0 15
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64504: LD_ADDR_VAR 0 16
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: LD_INT 3
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 3
64535: NEG
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64550: LD_ADDR_VAR 0 17
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 3
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 3
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64594: LD_ADDR_VAR 0 18
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 3
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64635: LD_ADDR_VAR 0 19
64639: PUSH
64640: LD_INT 3
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64675: LD_ADDR_VAR 0 20
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 3
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64716: LD_ADDR_VAR 0 21
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64760: LD_ADDR_VAR 0 22
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: LD_INT 2
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 3
64791: NEG
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64806: LD_ADDR_VAR 0 23
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: LD_INT 4
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64850: LD_ADDR_VAR 0 24
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 3
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 4
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64891: LD_ADDR_VAR 0 25
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: LD_INT 3
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: LD_INT 4
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64931: LD_ADDR_VAR 0 26
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 3
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 4
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64972: LD_ADDR_VAR 0 27
64976: PUSH
64977: LD_INT 3
64979: NEG
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 3
64990: NEG
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 4
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65016: LD_ADDR_VAR 0 28
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 3
65035: NEG
65036: PUSH
65037: LD_INT 4
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 4
65047: NEG
65048: PUSH
65049: LD_INT 3
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65062: LD_ADDR_VAR 0 29
65066: PUSH
65067: LD_INT 1
65069: NEG
65070: PUSH
65071: LD_INT 3
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 3
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: LD_INT 4
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 4
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: LD_INT 3
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: LD_INT 5
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 5
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 4
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 6
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 6
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: LD_INT 5
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65217: LD_ADDR_VAR 0 30
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 3
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 4
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 5
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 5
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 5
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 6
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 6
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65360: LD_ADDR_VAR 0 31
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 4
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 4
65407: PUSH
65408: LD_INT 4
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: LD_INT 4
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 5
65427: PUSH
65428: LD_INT 4
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 5
65437: PUSH
65438: LD_INT 5
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: LD_INT 5
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 6
65457: PUSH
65458: LD_INT 5
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 6
65467: PUSH
65468: LD_INT 6
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 5
65477: PUSH
65478: LD_INT 6
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65499: LD_ADDR_VAR 0 32
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 3
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 4
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: LD_INT 5
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 5
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: LD_INT 4
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: LD_INT 6
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 6
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 5
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65642: LD_ADDR_VAR 0 33
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 4
65694: NEG
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 4
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 4
65717: NEG
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 5
65728: NEG
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 5
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 5
65751: NEG
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 6
65762: NEG
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 6
65773: NEG
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65797: LD_ADDR_VAR 0 34
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: LD_INT 3
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 3
65816: NEG
65817: PUSH
65818: LD_INT 2
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 3
65828: NEG
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 4
65852: NEG
65853: PUSH
65854: LD_INT 3
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 4
65864: NEG
65865: PUSH
65866: LD_INT 4
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: NEG
65877: PUSH
65878: LD_INT 5
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 5
65888: NEG
65889: PUSH
65890: LD_INT 4
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 5
65900: NEG
65901: PUSH
65902: LD_INT 5
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 5
65912: NEG
65913: PUSH
65914: LD_INT 6
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 6
65924: NEG
65925: PUSH
65926: LD_INT 5
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 6
65936: NEG
65937: PUSH
65938: LD_INT 6
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65960: LD_ADDR_VAR 0 41
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: LD_INT 3
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66004: LD_ADDR_VAR 0 42
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66045: LD_ADDR_VAR 0 43
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66085: LD_ADDR_VAR 0 44
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66126: LD_ADDR_VAR 0 45
66130: PUSH
66131: LD_INT 2
66133: NEG
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66170: LD_ADDR_VAR 0 46
66174: PUSH
66175: LD_INT 2
66177: NEG
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 2
66189: NEG
66190: PUSH
66191: LD_INT 3
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: LD_INT 2
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66216: LD_ADDR_VAR 0 47
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66249: LD_ADDR_VAR 0 48
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66280: LD_ADDR_VAR 0 49
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: LD_INT 2
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66309: LD_ADDR_VAR 0 50
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: LD_INT 3
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66338: LD_ADDR_VAR 0 51
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66369: LD_ADDR_VAR 0 52
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: NEG
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66402: LD_ADDR_VAR 0 53
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 3
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: LD_INT 2
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: LIST
66445: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66446: LD_ADDR_VAR 0 54
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 3
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66487: LD_ADDR_VAR 0 55
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: LD_INT 3
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: LD_INT 3
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66527: LD_ADDR_VAR 0 56
66531: PUSH
66532: LD_INT 1
66534: PUSH
66535: LD_INT 3
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66568: LD_ADDR_VAR 0 57
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66612: LD_ADDR_VAR 0 58
66616: PUSH
66617: LD_INT 2
66619: NEG
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 3
66631: NEG
66632: PUSH
66633: LD_INT 2
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 3
66643: NEG
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66658: LD_ADDR_VAR 0 59
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: PUSH
66667: LD_INT 2
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 1
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66702: LD_ADDR_VAR 0 60
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: LIST
66742: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66743: LD_ADDR_VAR 0 61
66747: PUSH
66748: LD_INT 2
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: LD_INT 2
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66783: LD_ADDR_VAR 0 62
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: LD_INT 2
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66824: LD_ADDR_VAR 0 63
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 2
66842: NEG
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66868: LD_ADDR_VAR 0 64
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 2
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: NEG
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// end ; 2 :
66914: GO 70180
66916: LD_INT 2
66918: DOUBLE
66919: EQUAL
66920: IFTRUE 66924
66922: GO 70179
66924: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66925: LD_ADDR_VAR 0 29
66929: PUSH
66930: LD_INT 4
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 4
66942: PUSH
66943: LD_INT 1
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 5
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 5
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 3
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: LD_INT 2
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 5
67015: PUSH
67016: LD_INT 2
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 3
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 4
67055: PUSH
67056: LD_INT 4
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: LD_INT 4
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: LD_INT 3
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: LD_INT 4
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: LD_INT 4
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 3
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: LD_INT 4
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: LD_INT 5
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 5
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 5
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 4
67264: NEG
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 4
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 2
67299: NEG
67300: PUSH
67301: LD_INT 2
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 4
67310: NEG
67311: PUSH
67312: LD_INT 4
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 4
67322: NEG
67323: PUSH
67324: LD_INT 5
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: LD_INT 4
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: NEG
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 4
67358: NEG
67359: PUSH
67360: LD_INT 3
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 5
67370: NEG
67371: PUSH
67372: LD_INT 4
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 5
67382: NEG
67383: PUSH
67384: LD_INT 5
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: LD_INT 5
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 5
67406: NEG
67407: PUSH
67408: LD_INT 3
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67463: LD_ADDR_VAR 0 30
67467: PUSH
67468: LD_INT 4
67470: PUSH
67471: LD_INT 4
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 4
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 5
67490: PUSH
67491: LD_INT 4
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 5
67500: PUSH
67501: LD_INT 5
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 4
67510: PUSH
67511: LD_INT 5
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: PUSH
67521: LD_INT 4
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: LD_INT 3
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 5
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 3
67550: PUSH
67551: LD_INT 5
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: LD_INT 4
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: LD_INT 4
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 4
67653: NEG
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 4
67664: NEG
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 3
67687: NEG
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 4
67698: NEG
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 5
67709: NEG
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 5
67720: NEG
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 5
67732: NEG
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: LD_INT 3
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: LD_INT 4
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: LD_INT 3
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 2
67791: NEG
67792: PUSH
67793: LD_INT 2
67795: NEG
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: LD_INT 2
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 4
67815: NEG
67816: PUSH
67817: LD_INT 3
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 4
67827: NEG
67828: PUSH
67829: LD_INT 4
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 2
67839: NEG
67840: PUSH
67841: LD_INT 4
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 4
67851: NEG
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: LD_INT 4
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 5
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 4
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: LD_INT 4
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: LD_INT 5
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 2
67953: NEG
67954: PUSH
67955: LD_INT 5
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68010: LD_ADDR_VAR 0 31
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 3
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: LD_INT 4
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 5
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: LD_INT 5
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: LD_INT 4
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: LD_INT 3
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 2
68089: PUSH
68090: LD_INT 5
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 2
68133: NEG
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 2
68144: NEG
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: NEG
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 4
68166: NEG
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 4
68177: NEG
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 2
68201: NEG
68202: PUSH
68203: LD_INT 2
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 4
68212: NEG
68213: PUSH
68214: LD_INT 4
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: LD_INT 5
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 4
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 3
68248: NEG
68249: PUSH
68250: LD_INT 3
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 4
68260: NEG
68261: PUSH
68262: LD_INT 3
68264: NEG
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 5
68272: NEG
68273: PUSH
68274: LD_INT 4
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 5
68284: NEG
68285: PUSH
68286: LD_INT 5
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 5
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 5
68308: NEG
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 4
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: LD_INT 3
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 1
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 2
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: NEG
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: NEG
68388: PUSH
68389: LD_INT 4
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: LD_INT 4
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 4
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 4
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 5
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 5
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: LD_INT 1
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: LD_INT 2
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 5
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68560: LD_ADDR_VAR 0 32
68564: PUSH
68565: LD_INT 4
68567: NEG
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 4
68578: NEG
68579: PUSH
68580: LD_INT 1
68582: NEG
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 3
68590: NEG
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 3
68601: NEG
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 4
68612: NEG
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 5
68623: NEG
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 5
68634: NEG
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 5
68646: NEG
68647: PUSH
68648: LD_INT 2
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: LD_INT 2
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 3
68669: NEG
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: LD_INT 4
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 2
68693: NEG
68694: PUSH
68695: LD_INT 3
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 2
68705: NEG
68706: PUSH
68707: LD_INT 2
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: LD_INT 2
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: LD_INT 4
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: LD_INT 4
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: LD_INT 2
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: LD_INT 4
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 5
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: LD_INT 4
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 1
68810: PUSH
68811: LD_INT 3
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: PUSH
68834: LD_INT 4
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: PUSH
68846: LD_INT 5
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: NEG
68868: PUSH
68869: LD_INT 5
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 3
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 4
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 4
68910: PUSH
68911: LD_INT 1
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 2
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 2
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: LD_INT 2
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 4
68962: PUSH
68963: LD_INT 2
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 4
68972: PUSH
68973: LD_INT 4
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: LD_INT 3
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 5
68992: PUSH
68993: LD_INT 4
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 5
69002: PUSH
69003: LD_INT 5
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 4
69012: PUSH
69013: LD_INT 5
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 3
69022: PUSH
69023: LD_INT 4
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: LD_INT 3
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 5
69042: PUSH
69043: LD_INT 3
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: PUSH
69053: LD_INT 5
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69107: LD_ADDR_VAR 0 33
69111: PUSH
69112: LD_INT 4
69114: NEG
69115: PUSH
69116: LD_INT 4
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 4
69126: NEG
69127: PUSH
69128: LD_INT 5
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: LD_INT 4
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: NEG
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 4
69162: NEG
69163: PUSH
69164: LD_INT 3
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 5
69174: NEG
69175: PUSH
69176: LD_INT 4
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 5
69186: NEG
69187: PUSH
69188: LD_INT 5
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: LD_INT 5
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 5
69210: NEG
69211: PUSH
69212: LD_INT 3
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: LD_INT 3
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: LD_INT 4
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 1
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: LD_INT 2
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 2
69301: PUSH
69302: LD_INT 2
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 2
69312: NEG
69313: PUSH
69314: LD_INT 4
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 4
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 4
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 5
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 5
69355: PUSH
69356: LD_INT 1
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 4
69365: PUSH
69366: LD_INT 1
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 3
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 3
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: LD_INT 2
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 5
69407: PUSH
69408: LD_INT 2
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 3
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 3
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 4
69437: PUSH
69438: LD_INT 3
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 4
69447: PUSH
69448: LD_INT 4
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 3
69457: PUSH
69458: LD_INT 4
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: LD_INT 3
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 2
69477: PUSH
69478: LD_INT 2
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 4
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: LD_INT 4
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: LD_INT 4
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 0
69517: PUSH
69518: LD_INT 3
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 1
69527: PUSH
69528: LD_INT 4
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 1
69537: PUSH
69538: LD_INT 5
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 5
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: NEG
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 1
69568: NEG
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: LD_INT 5
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 2
69589: NEG
69590: PUSH
69591: LD_INT 3
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69645: LD_ADDR_VAR 0 34
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 5
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 4
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: PUSH
69686: LD_INT 3
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 1
69707: NEG
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 5
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 3
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 2
69742: NEG
69743: PUSH
69744: LD_INT 5
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 4
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 4
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 3
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 2
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: LD_INT 1
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 2
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 4
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 4
69847: PUSH
69848: LD_INT 4
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 4
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 5
69867: PUSH
69868: LD_INT 4
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 5
69877: PUSH
69878: LD_INT 5
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 5
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 5
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 0
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 0
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 1
69957: PUSH
69958: LD_INT 3
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: NEG
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 2
70019: NEG
70020: PUSH
70021: LD_INT 2
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 4
70030: NEG
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 4
70041: NEG
70042: PUSH
70043: LD_INT 1
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: LD_INT 1
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 4
70075: NEG
70076: PUSH
70077: LD_INT 1
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 5
70086: NEG
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 5
70097: NEG
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 5
70109: NEG
70110: PUSH
70111: LD_INT 2
70113: NEG
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 3
70121: NEG
70122: PUSH
70123: LD_INT 2
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: ST_TO_ADDR
// end ; end ;
70177: GO 70180
70179: POP
// case btype of b_depot , b_warehouse :
70180: LD_VAR 0 1
70184: PUSH
70185: LD_INT 0
70187: DOUBLE
70188: EQUAL
70189: IFTRUE 70199
70191: LD_INT 1
70193: DOUBLE
70194: EQUAL
70195: IFTRUE 70199
70197: GO 70400
70199: POP
// case nation of nation_american :
70200: LD_VAR 0 5
70204: PUSH
70205: LD_INT 1
70207: DOUBLE
70208: EQUAL
70209: IFTRUE 70213
70211: GO 70269
70213: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70214: LD_ADDR_VAR 0 9
70218: PUSH
70219: LD_VAR 0 11
70223: PUSH
70224: LD_VAR 0 12
70228: PUSH
70229: LD_VAR 0 13
70233: PUSH
70234: LD_VAR 0 14
70238: PUSH
70239: LD_VAR 0 15
70243: PUSH
70244: LD_VAR 0 16
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: PUSH
70257: LD_VAR 0 4
70261: PUSH
70262: LD_INT 1
70264: PLUS
70265: ARRAY
70266: ST_TO_ADDR
70267: GO 70398
70269: LD_INT 2
70271: DOUBLE
70272: EQUAL
70273: IFTRUE 70277
70275: GO 70333
70277: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70278: LD_ADDR_VAR 0 9
70282: PUSH
70283: LD_VAR 0 17
70287: PUSH
70288: LD_VAR 0 18
70292: PUSH
70293: LD_VAR 0 19
70297: PUSH
70298: LD_VAR 0 20
70302: PUSH
70303: LD_VAR 0 21
70307: PUSH
70308: LD_VAR 0 22
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: PUSH
70321: LD_VAR 0 4
70325: PUSH
70326: LD_INT 1
70328: PLUS
70329: ARRAY
70330: ST_TO_ADDR
70331: GO 70398
70333: LD_INT 3
70335: DOUBLE
70336: EQUAL
70337: IFTRUE 70341
70339: GO 70397
70341: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70342: LD_ADDR_VAR 0 9
70346: PUSH
70347: LD_VAR 0 23
70351: PUSH
70352: LD_VAR 0 24
70356: PUSH
70357: LD_VAR 0 25
70361: PUSH
70362: LD_VAR 0 26
70366: PUSH
70367: LD_VAR 0 27
70371: PUSH
70372: LD_VAR 0 28
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: PUSH
70385: LD_VAR 0 4
70389: PUSH
70390: LD_INT 1
70392: PLUS
70393: ARRAY
70394: ST_TO_ADDR
70395: GO 70398
70397: POP
70398: GO 70953
70400: LD_INT 2
70402: DOUBLE
70403: EQUAL
70404: IFTRUE 70414
70406: LD_INT 3
70408: DOUBLE
70409: EQUAL
70410: IFTRUE 70414
70412: GO 70470
70414: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70415: LD_ADDR_VAR 0 9
70419: PUSH
70420: LD_VAR 0 29
70424: PUSH
70425: LD_VAR 0 30
70429: PUSH
70430: LD_VAR 0 31
70434: PUSH
70435: LD_VAR 0 32
70439: PUSH
70440: LD_VAR 0 33
70444: PUSH
70445: LD_VAR 0 34
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: PUSH
70458: LD_VAR 0 4
70462: PUSH
70463: LD_INT 1
70465: PLUS
70466: ARRAY
70467: ST_TO_ADDR
70468: GO 70953
70470: LD_INT 16
70472: DOUBLE
70473: EQUAL
70474: IFTRUE 70532
70476: LD_INT 17
70478: DOUBLE
70479: EQUAL
70480: IFTRUE 70532
70482: LD_INT 18
70484: DOUBLE
70485: EQUAL
70486: IFTRUE 70532
70488: LD_INT 19
70490: DOUBLE
70491: EQUAL
70492: IFTRUE 70532
70494: LD_INT 22
70496: DOUBLE
70497: EQUAL
70498: IFTRUE 70532
70500: LD_INT 20
70502: DOUBLE
70503: EQUAL
70504: IFTRUE 70532
70506: LD_INT 21
70508: DOUBLE
70509: EQUAL
70510: IFTRUE 70532
70512: LD_INT 23
70514: DOUBLE
70515: EQUAL
70516: IFTRUE 70532
70518: LD_INT 24
70520: DOUBLE
70521: EQUAL
70522: IFTRUE 70532
70524: LD_INT 25
70526: DOUBLE
70527: EQUAL
70528: IFTRUE 70532
70530: GO 70588
70532: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70533: LD_ADDR_VAR 0 9
70537: PUSH
70538: LD_VAR 0 35
70542: PUSH
70543: LD_VAR 0 36
70547: PUSH
70548: LD_VAR 0 37
70552: PUSH
70553: LD_VAR 0 38
70557: PUSH
70558: LD_VAR 0 39
70562: PUSH
70563: LD_VAR 0 40
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_VAR 0 4
70580: PUSH
70581: LD_INT 1
70583: PLUS
70584: ARRAY
70585: ST_TO_ADDR
70586: GO 70953
70588: LD_INT 6
70590: DOUBLE
70591: EQUAL
70592: IFTRUE 70644
70594: LD_INT 7
70596: DOUBLE
70597: EQUAL
70598: IFTRUE 70644
70600: LD_INT 8
70602: DOUBLE
70603: EQUAL
70604: IFTRUE 70644
70606: LD_INT 13
70608: DOUBLE
70609: EQUAL
70610: IFTRUE 70644
70612: LD_INT 12
70614: DOUBLE
70615: EQUAL
70616: IFTRUE 70644
70618: LD_INT 15
70620: DOUBLE
70621: EQUAL
70622: IFTRUE 70644
70624: LD_INT 11
70626: DOUBLE
70627: EQUAL
70628: IFTRUE 70644
70630: LD_INT 14
70632: DOUBLE
70633: EQUAL
70634: IFTRUE 70644
70636: LD_INT 10
70638: DOUBLE
70639: EQUAL
70640: IFTRUE 70644
70642: GO 70700
70644: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70645: LD_ADDR_VAR 0 9
70649: PUSH
70650: LD_VAR 0 41
70654: PUSH
70655: LD_VAR 0 42
70659: PUSH
70660: LD_VAR 0 43
70664: PUSH
70665: LD_VAR 0 44
70669: PUSH
70670: LD_VAR 0 45
70674: PUSH
70675: LD_VAR 0 46
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: PUSH
70688: LD_VAR 0 4
70692: PUSH
70693: LD_INT 1
70695: PLUS
70696: ARRAY
70697: ST_TO_ADDR
70698: GO 70953
70700: LD_INT 36
70702: DOUBLE
70703: EQUAL
70704: IFTRUE 70708
70706: GO 70764
70708: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70709: LD_ADDR_VAR 0 9
70713: PUSH
70714: LD_VAR 0 47
70718: PUSH
70719: LD_VAR 0 48
70723: PUSH
70724: LD_VAR 0 49
70728: PUSH
70729: LD_VAR 0 50
70733: PUSH
70734: LD_VAR 0 51
70738: PUSH
70739: LD_VAR 0 52
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: PUSH
70752: LD_VAR 0 4
70756: PUSH
70757: LD_INT 1
70759: PLUS
70760: ARRAY
70761: ST_TO_ADDR
70762: GO 70953
70764: LD_INT 4
70766: DOUBLE
70767: EQUAL
70768: IFTRUE 70790
70770: LD_INT 5
70772: DOUBLE
70773: EQUAL
70774: IFTRUE 70790
70776: LD_INT 34
70778: DOUBLE
70779: EQUAL
70780: IFTRUE 70790
70782: LD_INT 37
70784: DOUBLE
70785: EQUAL
70786: IFTRUE 70790
70788: GO 70846
70790: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70791: LD_ADDR_VAR 0 9
70795: PUSH
70796: LD_VAR 0 53
70800: PUSH
70801: LD_VAR 0 54
70805: PUSH
70806: LD_VAR 0 55
70810: PUSH
70811: LD_VAR 0 56
70815: PUSH
70816: LD_VAR 0 57
70820: PUSH
70821: LD_VAR 0 58
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: PUSH
70834: LD_VAR 0 4
70838: PUSH
70839: LD_INT 1
70841: PLUS
70842: ARRAY
70843: ST_TO_ADDR
70844: GO 70953
70846: LD_INT 31
70848: DOUBLE
70849: EQUAL
70850: IFTRUE 70896
70852: LD_INT 32
70854: DOUBLE
70855: EQUAL
70856: IFTRUE 70896
70858: LD_INT 33
70860: DOUBLE
70861: EQUAL
70862: IFTRUE 70896
70864: LD_INT 27
70866: DOUBLE
70867: EQUAL
70868: IFTRUE 70896
70870: LD_INT 26
70872: DOUBLE
70873: EQUAL
70874: IFTRUE 70896
70876: LD_INT 28
70878: DOUBLE
70879: EQUAL
70880: IFTRUE 70896
70882: LD_INT 29
70884: DOUBLE
70885: EQUAL
70886: IFTRUE 70896
70888: LD_INT 30
70890: DOUBLE
70891: EQUAL
70892: IFTRUE 70896
70894: GO 70952
70896: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70897: LD_ADDR_VAR 0 9
70901: PUSH
70902: LD_VAR 0 59
70906: PUSH
70907: LD_VAR 0 60
70911: PUSH
70912: LD_VAR 0 61
70916: PUSH
70917: LD_VAR 0 62
70921: PUSH
70922: LD_VAR 0 63
70926: PUSH
70927: LD_VAR 0 64
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: PUSH
70940: LD_VAR 0 4
70944: PUSH
70945: LD_INT 1
70947: PLUS
70948: ARRAY
70949: ST_TO_ADDR
70950: GO 70953
70952: POP
// temp_list2 = [ ] ;
70953: LD_ADDR_VAR 0 10
70957: PUSH
70958: EMPTY
70959: ST_TO_ADDR
// for i in temp_list do
70960: LD_ADDR_VAR 0 8
70964: PUSH
70965: LD_VAR 0 9
70969: PUSH
70970: FOR_IN
70971: IFFALSE 71023
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70973: LD_ADDR_VAR 0 10
70977: PUSH
70978: LD_VAR 0 10
70982: PUSH
70983: LD_VAR 0 8
70987: PUSH
70988: LD_INT 1
70990: ARRAY
70991: PUSH
70992: LD_VAR 0 2
70996: PLUS
70997: PUSH
70998: LD_VAR 0 8
71002: PUSH
71003: LD_INT 2
71005: ARRAY
71006: PUSH
71007: LD_VAR 0 3
71011: PLUS
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: ADD
71020: ST_TO_ADDR
71021: GO 70970
71023: POP
71024: POP
// result = temp_list2 ;
71025: LD_ADDR_VAR 0 7
71029: PUSH
71030: LD_VAR 0 10
71034: ST_TO_ADDR
// end ;
71035: LD_VAR 0 7
71039: RET
// export function EnemyInRange ( unit , dist ) ; begin
71040: LD_INT 0
71042: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71043: LD_ADDR_VAR 0 3
71047: PUSH
71048: LD_VAR 0 1
71052: PPUSH
71053: CALL_OW 255
71057: PPUSH
71058: LD_VAR 0 1
71062: PPUSH
71063: CALL_OW 250
71067: PPUSH
71068: LD_VAR 0 1
71072: PPUSH
71073: CALL_OW 251
71077: PPUSH
71078: LD_VAR 0 2
71082: PPUSH
71083: CALL 44413 0 4
71087: PUSH
71088: LD_INT 4
71090: ARRAY
71091: ST_TO_ADDR
// end ;
71092: LD_VAR 0 3
71096: RET
// export function PlayerSeeMe ( unit ) ; begin
71097: LD_INT 0
71099: PPUSH
// result := See ( your_side , unit ) ;
71100: LD_ADDR_VAR 0 2
71104: PUSH
71105: LD_OWVAR 2
71109: PPUSH
71110: LD_VAR 0 1
71114: PPUSH
71115: CALL_OW 292
71119: ST_TO_ADDR
// end ;
71120: LD_VAR 0 2
71124: RET
// export function ReverseDir ( unit ) ; begin
71125: LD_INT 0
71127: PPUSH
// if not unit then
71128: LD_VAR 0 1
71132: NOT
71133: IFFALSE 71137
// exit ;
71135: GO 71160
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71137: LD_ADDR_VAR 0 2
71141: PUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: CALL_OW 254
71151: PUSH
71152: LD_INT 3
71154: PLUS
71155: PUSH
71156: LD_INT 6
71158: MOD
71159: ST_TO_ADDR
// end ;
71160: LD_VAR 0 2
71164: RET
// export function ReverseArray ( array ) ; var i ; begin
71165: LD_INT 0
71167: PPUSH
71168: PPUSH
// if not array then
71169: LD_VAR 0 1
71173: NOT
71174: IFFALSE 71178
// exit ;
71176: GO 71233
// result := [ ] ;
71178: LD_ADDR_VAR 0 2
71182: PUSH
71183: EMPTY
71184: ST_TO_ADDR
// for i := array downto 1 do
71185: LD_ADDR_VAR 0 3
71189: PUSH
71190: DOUBLE
71191: LD_VAR 0 1
71195: INC
71196: ST_TO_ADDR
71197: LD_INT 1
71199: PUSH
71200: FOR_DOWNTO
71201: IFFALSE 71231
// result := Join ( result , array [ i ] ) ;
71203: LD_ADDR_VAR 0 2
71207: PUSH
71208: LD_VAR 0 2
71212: PPUSH
71213: LD_VAR 0 1
71217: PUSH
71218: LD_VAR 0 3
71222: ARRAY
71223: PPUSH
71224: CALL 75898 0 2
71228: ST_TO_ADDR
71229: GO 71200
71231: POP
71232: POP
// end ;
71233: LD_VAR 0 2
71237: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71238: LD_INT 0
71240: PPUSH
71241: PPUSH
71242: PPUSH
71243: PPUSH
71244: PPUSH
71245: PPUSH
// if not unit or not hexes then
71246: LD_VAR 0 1
71250: NOT
71251: PUSH
71252: LD_VAR 0 2
71256: NOT
71257: OR
71258: IFFALSE 71262
// exit ;
71260: GO 71385
// dist := 9999 ;
71262: LD_ADDR_VAR 0 5
71266: PUSH
71267: LD_INT 9999
71269: ST_TO_ADDR
// for i = 1 to hexes do
71270: LD_ADDR_VAR 0 4
71274: PUSH
71275: DOUBLE
71276: LD_INT 1
71278: DEC
71279: ST_TO_ADDR
71280: LD_VAR 0 2
71284: PUSH
71285: FOR_TO
71286: IFFALSE 71373
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71288: LD_ADDR_VAR 0 6
71292: PUSH
71293: LD_VAR 0 1
71297: PPUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_VAR 0 4
71307: ARRAY
71308: PUSH
71309: LD_INT 1
71311: ARRAY
71312: PPUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_VAR 0 4
71322: ARRAY
71323: PUSH
71324: LD_INT 2
71326: ARRAY
71327: PPUSH
71328: CALL_OW 297
71332: ST_TO_ADDR
// if tdist < dist then
71333: LD_VAR 0 6
71337: PUSH
71338: LD_VAR 0 5
71342: LESS
71343: IFFALSE 71371
// begin hex := hexes [ i ] ;
71345: LD_ADDR_VAR 0 8
71349: PUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_VAR 0 4
71359: ARRAY
71360: ST_TO_ADDR
// dist := tdist ;
71361: LD_ADDR_VAR 0 5
71365: PUSH
71366: LD_VAR 0 6
71370: ST_TO_ADDR
// end ; end ;
71371: GO 71285
71373: POP
71374: POP
// result := hex ;
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: LD_VAR 0 8
71384: ST_TO_ADDR
// end ;
71385: LD_VAR 0 3
71389: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71390: LD_INT 0
71392: PPUSH
71393: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71394: LD_VAR 0 1
71398: NOT
71399: PUSH
71400: LD_VAR 0 1
71404: PUSH
71405: LD_INT 21
71407: PUSH
71408: LD_INT 2
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 23
71417: PUSH
71418: LD_INT 2
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PPUSH
71429: CALL_OW 69
71433: IN
71434: NOT
71435: OR
71436: IFFALSE 71440
// exit ;
71438: GO 71487
// for i = 1 to 3 do
71440: LD_ADDR_VAR 0 3
71444: PUSH
71445: DOUBLE
71446: LD_INT 1
71448: DEC
71449: ST_TO_ADDR
71450: LD_INT 3
71452: PUSH
71453: FOR_TO
71454: IFFALSE 71485
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 250
71465: PPUSH
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 251
71475: PPUSH
71476: LD_INT 1
71478: PPUSH
71479: CALL_OW 453
71483: GO 71453
71485: POP
71486: POP
// end ;
71487: LD_VAR 0 2
71491: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71492: LD_INT 0
71494: PPUSH
71495: PPUSH
71496: PPUSH
71497: PPUSH
71498: PPUSH
71499: PPUSH
// if not unit or not enemy_unit then
71500: LD_VAR 0 1
71504: NOT
71505: PUSH
71506: LD_VAR 0 2
71510: NOT
71511: OR
71512: IFFALSE 71516
// exit ;
71514: GO 71983
// if GetLives ( i ) < 250 then
71516: LD_VAR 0 4
71520: PPUSH
71521: CALL_OW 256
71525: PUSH
71526: LD_INT 250
71528: LESS
71529: IFFALSE 71542
// begin ComAutodestruct ( i ) ;
71531: LD_VAR 0 4
71535: PPUSH
71536: CALL 71390 0 1
// exit ;
71540: GO 71983
// end ; x := GetX ( enemy_unit ) ;
71542: LD_ADDR_VAR 0 7
71546: PUSH
71547: LD_VAR 0 2
71551: PPUSH
71552: CALL_OW 250
71556: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71557: LD_ADDR_VAR 0 8
71561: PUSH
71562: LD_VAR 0 2
71566: PPUSH
71567: CALL_OW 251
71571: ST_TO_ADDR
// if not x or not y then
71572: LD_VAR 0 7
71576: NOT
71577: PUSH
71578: LD_VAR 0 8
71582: NOT
71583: OR
71584: IFFALSE 71588
// exit ;
71586: GO 71983
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71588: LD_ADDR_VAR 0 6
71592: PUSH
71593: LD_VAR 0 7
71597: PPUSH
71598: LD_INT 0
71600: PPUSH
71601: LD_INT 4
71603: PPUSH
71604: CALL_OW 272
71608: PUSH
71609: LD_VAR 0 8
71613: PPUSH
71614: LD_INT 0
71616: PPUSH
71617: LD_INT 4
71619: PPUSH
71620: CALL_OW 273
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_VAR 0 7
71633: PPUSH
71634: LD_INT 1
71636: PPUSH
71637: LD_INT 4
71639: PPUSH
71640: CALL_OW 272
71644: PUSH
71645: LD_VAR 0 8
71649: PPUSH
71650: LD_INT 1
71652: PPUSH
71653: LD_INT 4
71655: PPUSH
71656: CALL_OW 273
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_VAR 0 7
71669: PPUSH
71670: LD_INT 2
71672: PPUSH
71673: LD_INT 4
71675: PPUSH
71676: CALL_OW 272
71680: PUSH
71681: LD_VAR 0 8
71685: PPUSH
71686: LD_INT 2
71688: PPUSH
71689: LD_INT 4
71691: PPUSH
71692: CALL_OW 273
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_VAR 0 7
71705: PPUSH
71706: LD_INT 3
71708: PPUSH
71709: LD_INT 4
71711: PPUSH
71712: CALL_OW 272
71716: PUSH
71717: LD_VAR 0 8
71721: PPUSH
71722: LD_INT 3
71724: PPUSH
71725: LD_INT 4
71727: PPUSH
71728: CALL_OW 273
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_VAR 0 7
71741: PPUSH
71742: LD_INT 4
71744: PPUSH
71745: LD_INT 4
71747: PPUSH
71748: CALL_OW 272
71752: PUSH
71753: LD_VAR 0 8
71757: PPUSH
71758: LD_INT 4
71760: PPUSH
71761: LD_INT 4
71763: PPUSH
71764: CALL_OW 273
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_VAR 0 7
71777: PPUSH
71778: LD_INT 5
71780: PPUSH
71781: LD_INT 4
71783: PPUSH
71784: CALL_OW 272
71788: PUSH
71789: LD_VAR 0 8
71793: PPUSH
71794: LD_INT 5
71796: PPUSH
71797: LD_INT 4
71799: PPUSH
71800: CALL_OW 273
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: ST_TO_ADDR
// for i = tmp downto 1 do
71817: LD_ADDR_VAR 0 4
71821: PUSH
71822: DOUBLE
71823: LD_VAR 0 6
71827: INC
71828: ST_TO_ADDR
71829: LD_INT 1
71831: PUSH
71832: FOR_DOWNTO
71833: IFFALSE 71934
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71835: LD_VAR 0 6
71839: PUSH
71840: LD_VAR 0 4
71844: ARRAY
71845: PUSH
71846: LD_INT 1
71848: ARRAY
71849: PPUSH
71850: LD_VAR 0 6
71854: PUSH
71855: LD_VAR 0 4
71859: ARRAY
71860: PUSH
71861: LD_INT 2
71863: ARRAY
71864: PPUSH
71865: CALL_OW 488
71869: NOT
71870: PUSH
71871: LD_VAR 0 6
71875: PUSH
71876: LD_VAR 0 4
71880: ARRAY
71881: PUSH
71882: LD_INT 1
71884: ARRAY
71885: PPUSH
71886: LD_VAR 0 6
71890: PUSH
71891: LD_VAR 0 4
71895: ARRAY
71896: PUSH
71897: LD_INT 2
71899: ARRAY
71900: PPUSH
71901: CALL_OW 428
71905: PUSH
71906: LD_INT 0
71908: NONEQUAL
71909: OR
71910: IFFALSE 71932
// tmp := Delete ( tmp , i ) ;
71912: LD_ADDR_VAR 0 6
71916: PUSH
71917: LD_VAR 0 6
71921: PPUSH
71922: LD_VAR 0 4
71926: PPUSH
71927: CALL_OW 3
71931: ST_TO_ADDR
71932: GO 71832
71934: POP
71935: POP
// j := GetClosestHex ( unit , tmp ) ;
71936: LD_ADDR_VAR 0 5
71940: PUSH
71941: LD_VAR 0 1
71945: PPUSH
71946: LD_VAR 0 6
71950: PPUSH
71951: CALL 71238 0 2
71955: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71956: LD_VAR 0 1
71960: PPUSH
71961: LD_VAR 0 5
71965: PUSH
71966: LD_INT 1
71968: ARRAY
71969: PPUSH
71970: LD_VAR 0 5
71974: PUSH
71975: LD_INT 2
71977: ARRAY
71978: PPUSH
71979: CALL_OW 111
// end ;
71983: LD_VAR 0 3
71987: RET
// export function PrepareApemanSoldier ( ) ; begin
71988: LD_INT 0
71990: PPUSH
// uc_nation := 0 ;
71991: LD_ADDR_OWVAR 21
71995: PUSH
71996: LD_INT 0
71998: ST_TO_ADDR
// hc_sex := sex_male ;
71999: LD_ADDR_OWVAR 27
72003: PUSH
72004: LD_INT 1
72006: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72007: LD_ADDR_OWVAR 28
72011: PUSH
72012: LD_INT 15
72014: ST_TO_ADDR
// hc_gallery :=  ;
72015: LD_ADDR_OWVAR 33
72019: PUSH
72020: LD_STRING 
72022: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72023: LD_ADDR_OWVAR 31
72027: PUSH
72028: LD_INT 0
72030: PPUSH
72031: LD_INT 3
72033: PPUSH
72034: CALL_OW 12
72038: PUSH
72039: LD_INT 0
72041: PPUSH
72042: LD_INT 3
72044: PPUSH
72045: CALL_OW 12
72049: PUSH
72050: LD_INT 0
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: ST_TO_ADDR
// end ;
72062: LD_VAR 0 1
72066: RET
// export function PrepareApemanEngineer ( ) ; begin
72067: LD_INT 0
72069: PPUSH
// uc_nation := 0 ;
72070: LD_ADDR_OWVAR 21
72074: PUSH
72075: LD_INT 0
72077: ST_TO_ADDR
// hc_sex := sex_male ;
72078: LD_ADDR_OWVAR 27
72082: PUSH
72083: LD_INT 1
72085: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72086: LD_ADDR_OWVAR 28
72090: PUSH
72091: LD_INT 16
72093: ST_TO_ADDR
// hc_gallery :=  ;
72094: LD_ADDR_OWVAR 33
72098: PUSH
72099: LD_STRING 
72101: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72102: LD_ADDR_OWVAR 31
72106: PUSH
72107: LD_INT 0
72109: PPUSH
72110: LD_INT 3
72112: PPUSH
72113: CALL_OW 12
72117: PUSH
72118: LD_INT 0
72120: PPUSH
72121: LD_INT 3
72123: PPUSH
72124: CALL_OW 12
72128: PUSH
72129: LD_INT 0
72131: PUSH
72132: LD_INT 0
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: ST_TO_ADDR
// end ;
72141: LD_VAR 0 1
72145: RET
// export function PrepareApeman ( agressivity ) ; begin
72146: LD_INT 0
72148: PPUSH
// uc_side := 0 ;
72149: LD_ADDR_OWVAR 20
72153: PUSH
72154: LD_INT 0
72156: ST_TO_ADDR
// uc_nation := 0 ;
72157: LD_ADDR_OWVAR 21
72161: PUSH
72162: LD_INT 0
72164: ST_TO_ADDR
// hc_sex := sex_male ;
72165: LD_ADDR_OWVAR 27
72169: PUSH
72170: LD_INT 1
72172: ST_TO_ADDR
// hc_class := class_apeman ;
72173: LD_ADDR_OWVAR 28
72177: PUSH
72178: LD_INT 12
72180: ST_TO_ADDR
// hc_gallery :=  ;
72181: LD_ADDR_OWVAR 33
72185: PUSH
72186: LD_STRING 
72188: ST_TO_ADDR
// if agressivity = 0 then
72189: LD_VAR 0 1
72193: PUSH
72194: LD_INT 0
72196: EQUAL
72197: IFFALSE 72209
// hc_agressivity := 0 else
72199: LD_ADDR_OWVAR 35
72203: PUSH
72204: LD_INT 0
72206: ST_TO_ADDR
72207: GO 72230
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72209: LD_ADDR_OWVAR 35
72213: PUSH
72214: LD_VAR 0 1
72218: NEG
72219: PPUSH
72220: LD_VAR 0 1
72224: PPUSH
72225: CALL_OW 12
72229: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72230: LD_ADDR_OWVAR 31
72234: PUSH
72235: LD_INT 0
72237: PPUSH
72238: LD_INT 3
72240: PPUSH
72241: CALL_OW 12
72245: PUSH
72246: LD_INT 0
72248: PPUSH
72249: LD_INT 3
72251: PPUSH
72252: CALL_OW 12
72256: PUSH
72257: LD_INT 0
72259: PUSH
72260: LD_INT 0
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: ST_TO_ADDR
// end ;
72269: LD_VAR 0 2
72273: RET
// export function PrepareTiger ( agressivity ) ; begin
72274: LD_INT 0
72276: PPUSH
// uc_side := 0 ;
72277: LD_ADDR_OWVAR 20
72281: PUSH
72282: LD_INT 0
72284: ST_TO_ADDR
// uc_nation := 0 ;
72285: LD_ADDR_OWVAR 21
72289: PUSH
72290: LD_INT 0
72292: ST_TO_ADDR
// hc_class := class_tiger ;
72293: LD_ADDR_OWVAR 28
72297: PUSH
72298: LD_INT 14
72300: ST_TO_ADDR
// hc_gallery :=  ;
72301: LD_ADDR_OWVAR 33
72305: PUSH
72306: LD_STRING 
72308: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72309: LD_ADDR_OWVAR 35
72313: PUSH
72314: LD_VAR 0 1
72318: NEG
72319: PPUSH
72320: LD_VAR 0 1
72324: PPUSH
72325: CALL_OW 12
72329: ST_TO_ADDR
// end ;
72330: LD_VAR 0 2
72334: RET
// export function PrepareEnchidna ( ) ; begin
72335: LD_INT 0
72337: PPUSH
// uc_side := 0 ;
72338: LD_ADDR_OWVAR 20
72342: PUSH
72343: LD_INT 0
72345: ST_TO_ADDR
// uc_nation := 0 ;
72346: LD_ADDR_OWVAR 21
72350: PUSH
72351: LD_INT 0
72353: ST_TO_ADDR
// hc_class := class_baggie ;
72354: LD_ADDR_OWVAR 28
72358: PUSH
72359: LD_INT 13
72361: ST_TO_ADDR
// hc_gallery :=  ;
72362: LD_ADDR_OWVAR 33
72366: PUSH
72367: LD_STRING 
72369: ST_TO_ADDR
// end ;
72370: LD_VAR 0 1
72374: RET
// export function PrepareFrog ( ) ; begin
72375: LD_INT 0
72377: PPUSH
// uc_side := 0 ;
72378: LD_ADDR_OWVAR 20
72382: PUSH
72383: LD_INT 0
72385: ST_TO_ADDR
// uc_nation := 0 ;
72386: LD_ADDR_OWVAR 21
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// hc_class := class_frog ;
72394: LD_ADDR_OWVAR 28
72398: PUSH
72399: LD_INT 19
72401: ST_TO_ADDR
// hc_gallery :=  ;
72402: LD_ADDR_OWVAR 33
72406: PUSH
72407: LD_STRING 
72409: ST_TO_ADDR
// end ;
72410: LD_VAR 0 1
72414: RET
// export function PrepareFish ( ) ; begin
72415: LD_INT 0
72417: PPUSH
// uc_side := 0 ;
72418: LD_ADDR_OWVAR 20
72422: PUSH
72423: LD_INT 0
72425: ST_TO_ADDR
// uc_nation := 0 ;
72426: LD_ADDR_OWVAR 21
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// hc_class := class_fish ;
72434: LD_ADDR_OWVAR 28
72438: PUSH
72439: LD_INT 20
72441: ST_TO_ADDR
// hc_gallery :=  ;
72442: LD_ADDR_OWVAR 33
72446: PUSH
72447: LD_STRING 
72449: ST_TO_ADDR
// end ;
72450: LD_VAR 0 1
72454: RET
// export function PrepareBird ( ) ; begin
72455: LD_INT 0
72457: PPUSH
// uc_side := 0 ;
72458: LD_ADDR_OWVAR 20
72462: PUSH
72463: LD_INT 0
72465: ST_TO_ADDR
// uc_nation := 0 ;
72466: LD_ADDR_OWVAR 21
72470: PUSH
72471: LD_INT 0
72473: ST_TO_ADDR
// hc_class := class_phororhacos ;
72474: LD_ADDR_OWVAR 28
72478: PUSH
72479: LD_INT 18
72481: ST_TO_ADDR
// hc_gallery :=  ;
72482: LD_ADDR_OWVAR 33
72486: PUSH
72487: LD_STRING 
72489: ST_TO_ADDR
// end ;
72490: LD_VAR 0 1
72494: RET
// export function PrepareHorse ( ) ; begin
72495: LD_INT 0
72497: PPUSH
// uc_side := 0 ;
72498: LD_ADDR_OWVAR 20
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// uc_nation := 0 ;
72506: LD_ADDR_OWVAR 21
72510: PUSH
72511: LD_INT 0
72513: ST_TO_ADDR
// hc_class := class_horse ;
72514: LD_ADDR_OWVAR 28
72518: PUSH
72519: LD_INT 21
72521: ST_TO_ADDR
// hc_gallery :=  ;
72522: LD_ADDR_OWVAR 33
72526: PUSH
72527: LD_STRING 
72529: ST_TO_ADDR
// end ;
72530: LD_VAR 0 1
72534: RET
// export function PrepareMastodont ( ) ; begin
72535: LD_INT 0
72537: PPUSH
// uc_side := 0 ;
72538: LD_ADDR_OWVAR 20
72542: PUSH
72543: LD_INT 0
72545: ST_TO_ADDR
// uc_nation := 0 ;
72546: LD_ADDR_OWVAR 21
72550: PUSH
72551: LD_INT 0
72553: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72554: LD_ADDR_OWVAR 37
72558: PUSH
72559: LD_INT 31
72561: ST_TO_ADDR
// vc_control := control_rider ;
72562: LD_ADDR_OWVAR 38
72566: PUSH
72567: LD_INT 4
72569: ST_TO_ADDR
// end ;
72570: LD_VAR 0 1
72574: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72575: LD_INT 0
72577: PPUSH
72578: PPUSH
72579: PPUSH
// uc_side = 0 ;
72580: LD_ADDR_OWVAR 20
72584: PUSH
72585: LD_INT 0
72587: ST_TO_ADDR
// uc_nation = 0 ;
72588: LD_ADDR_OWVAR 21
72592: PUSH
72593: LD_INT 0
72595: ST_TO_ADDR
// InitHc_All ( ) ;
72596: CALL_OW 584
// InitVc ;
72600: CALL_OW 20
// if mastodonts then
72604: LD_VAR 0 6
72608: IFFALSE 72675
// for i = 1 to mastodonts do
72610: LD_ADDR_VAR 0 11
72614: PUSH
72615: DOUBLE
72616: LD_INT 1
72618: DEC
72619: ST_TO_ADDR
72620: LD_VAR 0 6
72624: PUSH
72625: FOR_TO
72626: IFFALSE 72673
// begin vc_chassis := 31 ;
72628: LD_ADDR_OWVAR 37
72632: PUSH
72633: LD_INT 31
72635: ST_TO_ADDR
// vc_control := control_rider ;
72636: LD_ADDR_OWVAR 38
72640: PUSH
72641: LD_INT 4
72643: ST_TO_ADDR
// animal := CreateVehicle ;
72644: LD_ADDR_VAR 0 12
72648: PUSH
72649: CALL_OW 45
72653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72654: LD_VAR 0 12
72658: PPUSH
72659: LD_VAR 0 8
72663: PPUSH
72664: LD_INT 0
72666: PPUSH
72667: CALL 74803 0 3
// end ;
72671: GO 72625
72673: POP
72674: POP
// if horses then
72675: LD_VAR 0 5
72679: IFFALSE 72746
// for i = 1 to horses do
72681: LD_ADDR_VAR 0 11
72685: PUSH
72686: DOUBLE
72687: LD_INT 1
72689: DEC
72690: ST_TO_ADDR
72691: LD_VAR 0 5
72695: PUSH
72696: FOR_TO
72697: IFFALSE 72744
// begin hc_class := 21 ;
72699: LD_ADDR_OWVAR 28
72703: PUSH
72704: LD_INT 21
72706: ST_TO_ADDR
// hc_gallery :=  ;
72707: LD_ADDR_OWVAR 33
72711: PUSH
72712: LD_STRING 
72714: ST_TO_ADDR
// animal := CreateHuman ;
72715: LD_ADDR_VAR 0 12
72719: PUSH
72720: CALL_OW 44
72724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72725: LD_VAR 0 12
72729: PPUSH
72730: LD_VAR 0 8
72734: PPUSH
72735: LD_INT 0
72737: PPUSH
72738: CALL 74803 0 3
// end ;
72742: GO 72696
72744: POP
72745: POP
// if birds then
72746: LD_VAR 0 1
72750: IFFALSE 72817
// for i = 1 to birds do
72752: LD_ADDR_VAR 0 11
72756: PUSH
72757: DOUBLE
72758: LD_INT 1
72760: DEC
72761: ST_TO_ADDR
72762: LD_VAR 0 1
72766: PUSH
72767: FOR_TO
72768: IFFALSE 72815
// begin hc_class := 18 ;
72770: LD_ADDR_OWVAR 28
72774: PUSH
72775: LD_INT 18
72777: ST_TO_ADDR
// hc_gallery =  ;
72778: LD_ADDR_OWVAR 33
72782: PUSH
72783: LD_STRING 
72785: ST_TO_ADDR
// animal := CreateHuman ;
72786: LD_ADDR_VAR 0 12
72790: PUSH
72791: CALL_OW 44
72795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72796: LD_VAR 0 12
72800: PPUSH
72801: LD_VAR 0 8
72805: PPUSH
72806: LD_INT 0
72808: PPUSH
72809: CALL 74803 0 3
// end ;
72813: GO 72767
72815: POP
72816: POP
// if tigers then
72817: LD_VAR 0 2
72821: IFFALSE 72905
// for i = 1 to tigers do
72823: LD_ADDR_VAR 0 11
72827: PUSH
72828: DOUBLE
72829: LD_INT 1
72831: DEC
72832: ST_TO_ADDR
72833: LD_VAR 0 2
72837: PUSH
72838: FOR_TO
72839: IFFALSE 72903
// begin hc_class = class_tiger ;
72841: LD_ADDR_OWVAR 28
72845: PUSH
72846: LD_INT 14
72848: ST_TO_ADDR
// hc_gallery =  ;
72849: LD_ADDR_OWVAR 33
72853: PUSH
72854: LD_STRING 
72856: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72857: LD_ADDR_OWVAR 35
72861: PUSH
72862: LD_INT 7
72864: NEG
72865: PPUSH
72866: LD_INT 7
72868: PPUSH
72869: CALL_OW 12
72873: ST_TO_ADDR
// animal := CreateHuman ;
72874: LD_ADDR_VAR 0 12
72878: PUSH
72879: CALL_OW 44
72883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72884: LD_VAR 0 12
72888: PPUSH
72889: LD_VAR 0 8
72893: PPUSH
72894: LD_INT 0
72896: PPUSH
72897: CALL 74803 0 3
// end ;
72901: GO 72838
72903: POP
72904: POP
// if apemans then
72905: LD_VAR 0 3
72909: IFFALSE 73032
// for i = 1 to apemans do
72911: LD_ADDR_VAR 0 11
72915: PUSH
72916: DOUBLE
72917: LD_INT 1
72919: DEC
72920: ST_TO_ADDR
72921: LD_VAR 0 3
72925: PUSH
72926: FOR_TO
72927: IFFALSE 73030
// begin hc_class = class_apeman ;
72929: LD_ADDR_OWVAR 28
72933: PUSH
72934: LD_INT 12
72936: ST_TO_ADDR
// hc_gallery =  ;
72937: LD_ADDR_OWVAR 33
72941: PUSH
72942: LD_STRING 
72944: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72945: LD_ADDR_OWVAR 35
72949: PUSH
72950: LD_INT 2
72952: NEG
72953: PPUSH
72954: LD_INT 2
72956: PPUSH
72957: CALL_OW 12
72961: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72962: LD_ADDR_OWVAR 31
72966: PUSH
72967: LD_INT 1
72969: PPUSH
72970: LD_INT 3
72972: PPUSH
72973: CALL_OW 12
72977: PUSH
72978: LD_INT 1
72980: PPUSH
72981: LD_INT 3
72983: PPUSH
72984: CALL_OW 12
72988: PUSH
72989: LD_INT 0
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: ST_TO_ADDR
// animal := CreateHuman ;
73001: LD_ADDR_VAR 0 12
73005: PUSH
73006: CALL_OW 44
73010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73011: LD_VAR 0 12
73015: PPUSH
73016: LD_VAR 0 8
73020: PPUSH
73021: LD_INT 0
73023: PPUSH
73024: CALL 74803 0 3
// end ;
73028: GO 72926
73030: POP
73031: POP
// if enchidnas then
73032: LD_VAR 0 4
73036: IFFALSE 73103
// for i = 1 to enchidnas do
73038: LD_ADDR_VAR 0 11
73042: PUSH
73043: DOUBLE
73044: LD_INT 1
73046: DEC
73047: ST_TO_ADDR
73048: LD_VAR 0 4
73052: PUSH
73053: FOR_TO
73054: IFFALSE 73101
// begin hc_class = 13 ;
73056: LD_ADDR_OWVAR 28
73060: PUSH
73061: LD_INT 13
73063: ST_TO_ADDR
// hc_gallery =  ;
73064: LD_ADDR_OWVAR 33
73068: PUSH
73069: LD_STRING 
73071: ST_TO_ADDR
// animal := CreateHuman ;
73072: LD_ADDR_VAR 0 12
73076: PUSH
73077: CALL_OW 44
73081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73082: LD_VAR 0 12
73086: PPUSH
73087: LD_VAR 0 8
73091: PPUSH
73092: LD_INT 0
73094: PPUSH
73095: CALL 74803 0 3
// end ;
73099: GO 73053
73101: POP
73102: POP
// if fishes then
73103: LD_VAR 0 7
73107: IFFALSE 73174
// for i = 1 to fishes do
73109: LD_ADDR_VAR 0 11
73113: PUSH
73114: DOUBLE
73115: LD_INT 1
73117: DEC
73118: ST_TO_ADDR
73119: LD_VAR 0 7
73123: PUSH
73124: FOR_TO
73125: IFFALSE 73172
// begin hc_class = 20 ;
73127: LD_ADDR_OWVAR 28
73131: PUSH
73132: LD_INT 20
73134: ST_TO_ADDR
// hc_gallery =  ;
73135: LD_ADDR_OWVAR 33
73139: PUSH
73140: LD_STRING 
73142: ST_TO_ADDR
// animal := CreateHuman ;
73143: LD_ADDR_VAR 0 12
73147: PUSH
73148: CALL_OW 44
73152: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73153: LD_VAR 0 12
73157: PPUSH
73158: LD_VAR 0 9
73162: PPUSH
73163: LD_INT 0
73165: PPUSH
73166: CALL 74803 0 3
// end ;
73170: GO 73124
73172: POP
73173: POP
// end ;
73174: LD_VAR 0 10
73178: RET
// export function WantHeal ( sci , unit ) ; begin
73179: LD_INT 0
73181: PPUSH
// if GetTaskList ( sci ) > 0 then
73182: LD_VAR 0 1
73186: PPUSH
73187: CALL_OW 437
73191: PUSH
73192: LD_INT 0
73194: GREATER
73195: IFFALSE 73265
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73197: LD_VAR 0 1
73201: PPUSH
73202: CALL_OW 437
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PUSH
73211: LD_INT 1
73213: ARRAY
73214: PUSH
73215: LD_STRING l
73217: EQUAL
73218: PUSH
73219: LD_VAR 0 1
73223: PPUSH
73224: CALL_OW 437
73228: PUSH
73229: LD_INT 1
73231: ARRAY
73232: PUSH
73233: LD_INT 4
73235: ARRAY
73236: PUSH
73237: LD_VAR 0 2
73241: EQUAL
73242: AND
73243: IFFALSE 73255
// result := true else
73245: LD_ADDR_VAR 0 3
73249: PUSH
73250: LD_INT 1
73252: ST_TO_ADDR
73253: GO 73263
// result := false ;
73255: LD_ADDR_VAR 0 3
73259: PUSH
73260: LD_INT 0
73262: ST_TO_ADDR
// end else
73263: GO 73273
// result := false ;
73265: LD_ADDR_VAR 0 3
73269: PUSH
73270: LD_INT 0
73272: ST_TO_ADDR
// end ;
73273: LD_VAR 0 3
73277: RET
// export function HealTarget ( sci ) ; begin
73278: LD_INT 0
73280: PPUSH
// if not sci then
73281: LD_VAR 0 1
73285: NOT
73286: IFFALSE 73290
// exit ;
73288: GO 73355
// result := 0 ;
73290: LD_ADDR_VAR 0 2
73294: PUSH
73295: LD_INT 0
73297: ST_TO_ADDR
// if GetTaskList ( sci ) then
73298: LD_VAR 0 1
73302: PPUSH
73303: CALL_OW 437
73307: IFFALSE 73355
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73309: LD_VAR 0 1
73313: PPUSH
73314: CALL_OW 437
73318: PUSH
73319: LD_INT 1
73321: ARRAY
73322: PUSH
73323: LD_INT 1
73325: ARRAY
73326: PUSH
73327: LD_STRING l
73329: EQUAL
73330: IFFALSE 73355
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73332: LD_ADDR_VAR 0 2
73336: PUSH
73337: LD_VAR 0 1
73341: PPUSH
73342: CALL_OW 437
73346: PUSH
73347: LD_INT 1
73349: ARRAY
73350: PUSH
73351: LD_INT 4
73353: ARRAY
73354: ST_TO_ADDR
// end ;
73355: LD_VAR 0 2
73359: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73360: LD_INT 0
73362: PPUSH
73363: PPUSH
73364: PPUSH
73365: PPUSH
// if not base_units then
73366: LD_VAR 0 1
73370: NOT
73371: IFFALSE 73375
// exit ;
73373: GO 73462
// result := false ;
73375: LD_ADDR_VAR 0 2
73379: PUSH
73380: LD_INT 0
73382: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73383: LD_ADDR_VAR 0 5
73387: PUSH
73388: LD_VAR 0 1
73392: PPUSH
73393: LD_INT 21
73395: PUSH
73396: LD_INT 3
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PPUSH
73403: CALL_OW 72
73407: ST_TO_ADDR
// if not tmp then
73408: LD_VAR 0 5
73412: NOT
73413: IFFALSE 73417
// exit ;
73415: GO 73462
// for i in tmp do
73417: LD_ADDR_VAR 0 3
73421: PUSH
73422: LD_VAR 0 5
73426: PUSH
73427: FOR_IN
73428: IFFALSE 73460
// begin result := EnemyInRange ( i , 22 ) ;
73430: LD_ADDR_VAR 0 2
73434: PUSH
73435: LD_VAR 0 3
73439: PPUSH
73440: LD_INT 22
73442: PPUSH
73443: CALL 71040 0 2
73447: ST_TO_ADDR
// if result then
73448: LD_VAR 0 2
73452: IFFALSE 73458
// exit ;
73454: POP
73455: POP
73456: GO 73462
// end ;
73458: GO 73427
73460: POP
73461: POP
// end ;
73462: LD_VAR 0 2
73466: RET
// export function FilterByTag ( units , tag ) ; begin
73467: LD_INT 0
73469: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73470: LD_ADDR_VAR 0 3
73474: PUSH
73475: LD_VAR 0 1
73479: PPUSH
73480: LD_INT 120
73482: PUSH
73483: LD_VAR 0 2
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PPUSH
73492: CALL_OW 72
73496: ST_TO_ADDR
// end ;
73497: LD_VAR 0 3
73501: RET
// export function IsDriver ( un ) ; begin
73502: LD_INT 0
73504: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73505: LD_ADDR_VAR 0 2
73509: PUSH
73510: LD_VAR 0 1
73514: PUSH
73515: LD_INT 55
73517: PUSH
73518: EMPTY
73519: LIST
73520: PPUSH
73521: CALL_OW 69
73525: IN
73526: ST_TO_ADDR
// end ;
73527: LD_VAR 0 2
73531: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73532: LD_INT 0
73534: PPUSH
73535: PPUSH
// list := [ ] ;
73536: LD_ADDR_VAR 0 5
73540: PUSH
73541: EMPTY
73542: ST_TO_ADDR
// case d of 0 :
73543: LD_VAR 0 3
73547: PUSH
73548: LD_INT 0
73550: DOUBLE
73551: EQUAL
73552: IFTRUE 73556
73554: GO 73689
73556: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73557: LD_ADDR_VAR 0 5
73561: PUSH
73562: LD_VAR 0 1
73566: PUSH
73567: LD_INT 4
73569: MINUS
73570: PUSH
73571: LD_VAR 0 2
73575: PUSH
73576: LD_INT 4
73578: MINUS
73579: PUSH
73580: LD_INT 2
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: LIST
73587: PUSH
73588: LD_VAR 0 1
73592: PUSH
73593: LD_INT 3
73595: MINUS
73596: PUSH
73597: LD_VAR 0 2
73601: PUSH
73602: LD_INT 1
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: LIST
73609: PUSH
73610: LD_VAR 0 1
73614: PUSH
73615: LD_INT 4
73617: PLUS
73618: PUSH
73619: LD_VAR 0 2
73623: PUSH
73624: LD_INT 4
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: LIST
73631: PUSH
73632: LD_VAR 0 1
73636: PUSH
73637: LD_INT 3
73639: PLUS
73640: PUSH
73641: LD_VAR 0 2
73645: PUSH
73646: LD_INT 3
73648: PLUS
73649: PUSH
73650: LD_INT 5
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: LIST
73657: PUSH
73658: LD_VAR 0 1
73662: PUSH
73663: LD_VAR 0 2
73667: PUSH
73668: LD_INT 4
73670: PLUS
73671: PUSH
73672: LD_INT 0
73674: PUSH
73675: EMPTY
73676: LIST
73677: LIST
73678: LIST
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: ST_TO_ADDR
// end ; 1 :
73687: GO 74387
73689: LD_INT 1
73691: DOUBLE
73692: EQUAL
73693: IFTRUE 73697
73695: GO 73830
73697: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73698: LD_ADDR_VAR 0 5
73702: PUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_VAR 0 2
73712: PUSH
73713: LD_INT 4
73715: MINUS
73716: PUSH
73717: LD_INT 3
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: LIST
73724: PUSH
73725: LD_VAR 0 1
73729: PUSH
73730: LD_INT 3
73732: MINUS
73733: PUSH
73734: LD_VAR 0 2
73738: PUSH
73739: LD_INT 3
73741: MINUS
73742: PUSH
73743: LD_INT 2
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: LIST
73750: PUSH
73751: LD_VAR 0 1
73755: PUSH
73756: LD_INT 4
73758: MINUS
73759: PUSH
73760: LD_VAR 0 2
73764: PUSH
73765: LD_INT 1
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: LIST
73772: PUSH
73773: LD_VAR 0 1
73777: PUSH
73778: LD_VAR 0 2
73782: PUSH
73783: LD_INT 3
73785: PLUS
73786: PUSH
73787: LD_INT 0
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: LIST
73794: PUSH
73795: LD_VAR 0 1
73799: PUSH
73800: LD_INT 4
73802: PLUS
73803: PUSH
73804: LD_VAR 0 2
73808: PUSH
73809: LD_INT 4
73811: PLUS
73812: PUSH
73813: LD_INT 5
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: LIST
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: ST_TO_ADDR
// end ; 2 :
73828: GO 74387
73830: LD_INT 2
73832: DOUBLE
73833: EQUAL
73834: IFTRUE 73838
73836: GO 73967
73838: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73839: LD_ADDR_VAR 0 5
73843: PUSH
73844: LD_VAR 0 1
73848: PUSH
73849: LD_VAR 0 2
73853: PUSH
73854: LD_INT 3
73856: MINUS
73857: PUSH
73858: LD_INT 3
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: LIST
73865: PUSH
73866: LD_VAR 0 1
73870: PUSH
73871: LD_INT 4
73873: PLUS
73874: PUSH
73875: LD_VAR 0 2
73879: PUSH
73880: LD_INT 4
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: PUSH
73888: LD_VAR 0 1
73892: PUSH
73893: LD_VAR 0 2
73897: PUSH
73898: LD_INT 4
73900: PLUS
73901: PUSH
73902: LD_INT 0
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: LIST
73909: PUSH
73910: LD_VAR 0 1
73914: PUSH
73915: LD_INT 3
73917: MINUS
73918: PUSH
73919: LD_VAR 0 2
73923: PUSH
73924: LD_INT 1
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: LIST
73931: PUSH
73932: LD_VAR 0 1
73936: PUSH
73937: LD_INT 4
73939: MINUS
73940: PUSH
73941: LD_VAR 0 2
73945: PUSH
73946: LD_INT 4
73948: MINUS
73949: PUSH
73950: LD_INT 2
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: LIST
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: ST_TO_ADDR
// end ; 3 :
73965: GO 74387
73967: LD_INT 3
73969: DOUBLE
73970: EQUAL
73971: IFTRUE 73975
73973: GO 74108
73975: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73976: LD_ADDR_VAR 0 5
73980: PUSH
73981: LD_VAR 0 1
73985: PUSH
73986: LD_INT 3
73988: PLUS
73989: PUSH
73990: LD_VAR 0 2
73994: PUSH
73995: LD_INT 4
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: LIST
74002: PUSH
74003: LD_VAR 0 1
74007: PUSH
74008: LD_INT 4
74010: PLUS
74011: PUSH
74012: LD_VAR 0 2
74016: PUSH
74017: LD_INT 4
74019: PLUS
74020: PUSH
74021: LD_INT 5
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: LIST
74028: PUSH
74029: LD_VAR 0 1
74033: PUSH
74034: LD_INT 4
74036: MINUS
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 1
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: LIST
74050: PUSH
74051: LD_VAR 0 1
74055: PUSH
74056: LD_VAR 0 2
74060: PUSH
74061: LD_INT 4
74063: MINUS
74064: PUSH
74065: LD_INT 3
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: LIST
74072: PUSH
74073: LD_VAR 0 1
74077: PUSH
74078: LD_INT 3
74080: MINUS
74081: PUSH
74082: LD_VAR 0 2
74086: PUSH
74087: LD_INT 3
74089: MINUS
74090: PUSH
74091: LD_INT 2
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: LIST
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: ST_TO_ADDR
// end ; 4 :
74106: GO 74387
74108: LD_INT 4
74110: DOUBLE
74111: EQUAL
74112: IFTRUE 74116
74114: GO 74249
74116: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74117: LD_ADDR_VAR 0 5
74121: PUSH
74122: LD_VAR 0 1
74126: PUSH
74127: LD_VAR 0 2
74131: PUSH
74132: LD_INT 4
74134: PLUS
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: LIST
74143: PUSH
74144: LD_VAR 0 1
74148: PUSH
74149: LD_INT 3
74151: PLUS
74152: PUSH
74153: LD_VAR 0 2
74157: PUSH
74158: LD_INT 3
74160: PLUS
74161: PUSH
74162: LD_INT 5
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: LIST
74169: PUSH
74170: LD_VAR 0 1
74174: PUSH
74175: LD_INT 4
74177: PLUS
74178: PUSH
74179: LD_VAR 0 2
74183: PUSH
74184: LD_INT 4
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: LIST
74191: PUSH
74192: LD_VAR 0 1
74196: PUSH
74197: LD_VAR 0 2
74201: PUSH
74202: LD_INT 3
74204: MINUS
74205: PUSH
74206: LD_INT 3
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: PUSH
74214: LD_VAR 0 1
74218: PUSH
74219: LD_INT 4
74221: MINUS
74222: PUSH
74223: LD_VAR 0 2
74227: PUSH
74228: LD_INT 4
74230: MINUS
74231: PUSH
74232: LD_INT 2
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: LIST
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: ST_TO_ADDR
// end ; 5 :
74247: GO 74387
74249: LD_INT 5
74251: DOUBLE
74252: EQUAL
74253: IFTRUE 74257
74255: GO 74386
74257: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74258: LD_ADDR_VAR 0 5
74262: PUSH
74263: LD_VAR 0 1
74267: PUSH
74268: LD_INT 4
74270: MINUS
74271: PUSH
74272: LD_VAR 0 2
74276: PUSH
74277: LD_INT 1
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: PUSH
74285: LD_VAR 0 1
74289: PUSH
74290: LD_VAR 0 2
74294: PUSH
74295: LD_INT 4
74297: MINUS
74298: PUSH
74299: LD_INT 3
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: LD_VAR 0 1
74311: PUSH
74312: LD_INT 4
74314: PLUS
74315: PUSH
74316: LD_VAR 0 2
74320: PUSH
74321: LD_INT 4
74323: PLUS
74324: PUSH
74325: LD_INT 5
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: LD_VAR 0 1
74337: PUSH
74338: LD_INT 3
74340: PLUS
74341: PUSH
74342: LD_VAR 0 2
74346: PUSH
74347: LD_INT 4
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: PUSH
74355: LD_VAR 0 1
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 3
74367: PLUS
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: LIST
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: ST_TO_ADDR
// end ; end ;
74384: GO 74387
74386: POP
// result := list ;
74387: LD_ADDR_VAR 0 4
74391: PUSH
74392: LD_VAR 0 5
74396: ST_TO_ADDR
// end ;
74397: LD_VAR 0 4
74401: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74402: LD_INT 0
74404: PPUSH
74405: PPUSH
74406: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74407: LD_VAR 0 1
74411: NOT
74412: PUSH
74413: LD_VAR 0 2
74417: PUSH
74418: LD_INT 1
74420: PUSH
74421: LD_INT 2
74423: PUSH
74424: LD_INT 3
74426: PUSH
74427: LD_INT 4
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: IN
74436: NOT
74437: OR
74438: IFFALSE 74442
// exit ;
74440: GO 74525
// tmp := [ ] ;
74442: LD_ADDR_VAR 0 5
74446: PUSH
74447: EMPTY
74448: ST_TO_ADDR
// for i in units do
74449: LD_ADDR_VAR 0 4
74453: PUSH
74454: LD_VAR 0 1
74458: PUSH
74459: FOR_IN
74460: IFFALSE 74494
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74462: LD_ADDR_VAR 0 5
74466: PUSH
74467: LD_VAR 0 5
74471: PPUSH
74472: LD_VAR 0 4
74476: PPUSH
74477: LD_VAR 0 2
74481: PPUSH
74482: CALL_OW 259
74486: PPUSH
74487: CALL 75898 0 2
74491: ST_TO_ADDR
74492: GO 74459
74494: POP
74495: POP
// if not tmp then
74496: LD_VAR 0 5
74500: NOT
74501: IFFALSE 74505
// exit ;
74503: GO 74525
// result := SortListByListDesc ( units , tmp ) ;
74505: LD_ADDR_VAR 0 3
74509: PUSH
74510: LD_VAR 0 1
74514: PPUSH
74515: LD_VAR 0 5
74519: PPUSH
74520: CALL_OW 77
74524: ST_TO_ADDR
// end ;
74525: LD_VAR 0 3
74529: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74530: LD_INT 0
74532: PPUSH
74533: PPUSH
74534: PPUSH
// result := false ;
74535: LD_ADDR_VAR 0 3
74539: PUSH
74540: LD_INT 0
74542: ST_TO_ADDR
// if not building then
74543: LD_VAR 0 2
74547: NOT
74548: IFFALSE 74552
// exit ;
74550: GO 74690
// x := GetX ( building ) ;
74552: LD_ADDR_VAR 0 4
74556: PUSH
74557: LD_VAR 0 2
74561: PPUSH
74562: CALL_OW 250
74566: ST_TO_ADDR
// y := GetY ( building ) ;
74567: LD_ADDR_VAR 0 5
74571: PUSH
74572: LD_VAR 0 2
74576: PPUSH
74577: CALL_OW 251
74581: ST_TO_ADDR
// if not x or not y then
74582: LD_VAR 0 4
74586: NOT
74587: PUSH
74588: LD_VAR 0 5
74592: NOT
74593: OR
74594: IFFALSE 74598
// exit ;
74596: GO 74690
// if GetTaskList ( unit ) then
74598: LD_VAR 0 1
74602: PPUSH
74603: CALL_OW 437
74607: IFFALSE 74690
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74609: LD_STRING e
74611: PUSH
74612: LD_VAR 0 1
74616: PPUSH
74617: CALL_OW 437
74621: PUSH
74622: LD_INT 1
74624: ARRAY
74625: PUSH
74626: LD_INT 1
74628: ARRAY
74629: EQUAL
74630: PUSH
74631: LD_VAR 0 4
74635: PUSH
74636: LD_VAR 0 1
74640: PPUSH
74641: CALL_OW 437
74645: PUSH
74646: LD_INT 1
74648: ARRAY
74649: PUSH
74650: LD_INT 2
74652: ARRAY
74653: EQUAL
74654: AND
74655: PUSH
74656: LD_VAR 0 5
74660: PUSH
74661: LD_VAR 0 1
74665: PPUSH
74666: CALL_OW 437
74670: PUSH
74671: LD_INT 1
74673: ARRAY
74674: PUSH
74675: LD_INT 3
74677: ARRAY
74678: EQUAL
74679: AND
74680: IFFALSE 74690
// result := true end ;
74682: LD_ADDR_VAR 0 3
74686: PUSH
74687: LD_INT 1
74689: ST_TO_ADDR
// end ;
74690: LD_VAR 0 3
74694: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74695: LD_INT 0
74697: PPUSH
// result := false ;
74698: LD_ADDR_VAR 0 4
74702: PUSH
74703: LD_INT 0
74705: ST_TO_ADDR
// if GetTaskList ( unit ) then
74706: LD_VAR 0 1
74710: PPUSH
74711: CALL_OW 437
74715: IFFALSE 74798
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74717: LD_STRING M
74719: PUSH
74720: LD_VAR 0 1
74724: PPUSH
74725: CALL_OW 437
74729: PUSH
74730: LD_INT 1
74732: ARRAY
74733: PUSH
74734: LD_INT 1
74736: ARRAY
74737: EQUAL
74738: PUSH
74739: LD_VAR 0 2
74743: PUSH
74744: LD_VAR 0 1
74748: PPUSH
74749: CALL_OW 437
74753: PUSH
74754: LD_INT 1
74756: ARRAY
74757: PUSH
74758: LD_INT 2
74760: ARRAY
74761: EQUAL
74762: AND
74763: PUSH
74764: LD_VAR 0 3
74768: PUSH
74769: LD_VAR 0 1
74773: PPUSH
74774: CALL_OW 437
74778: PUSH
74779: LD_INT 1
74781: ARRAY
74782: PUSH
74783: LD_INT 3
74785: ARRAY
74786: EQUAL
74787: AND
74788: IFFALSE 74798
// result := true ;
74790: LD_ADDR_VAR 0 4
74794: PUSH
74795: LD_INT 1
74797: ST_TO_ADDR
// end ; end ;
74798: LD_VAR 0 4
74802: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74803: LD_INT 0
74805: PPUSH
74806: PPUSH
74807: PPUSH
74808: PPUSH
// if not unit or not area then
74809: LD_VAR 0 1
74813: NOT
74814: PUSH
74815: LD_VAR 0 2
74819: NOT
74820: OR
74821: IFFALSE 74825
// exit ;
74823: GO 75001
// tmp := AreaToList ( area , i ) ;
74825: LD_ADDR_VAR 0 6
74829: PUSH
74830: LD_VAR 0 2
74834: PPUSH
74835: LD_VAR 0 5
74839: PPUSH
74840: CALL_OW 517
74844: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74845: LD_ADDR_VAR 0 5
74849: PUSH
74850: DOUBLE
74851: LD_INT 1
74853: DEC
74854: ST_TO_ADDR
74855: LD_VAR 0 6
74859: PUSH
74860: LD_INT 1
74862: ARRAY
74863: PUSH
74864: FOR_TO
74865: IFFALSE 74999
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74867: LD_ADDR_VAR 0 7
74871: PUSH
74872: LD_VAR 0 6
74876: PUSH
74877: LD_INT 1
74879: ARRAY
74880: PUSH
74881: LD_VAR 0 5
74885: ARRAY
74886: PUSH
74887: LD_VAR 0 6
74891: PUSH
74892: LD_INT 2
74894: ARRAY
74895: PUSH
74896: LD_VAR 0 5
74900: ARRAY
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74906: LD_INT 92
74908: PUSH
74909: LD_VAR 0 7
74913: PUSH
74914: LD_INT 1
74916: ARRAY
74917: PUSH
74918: LD_VAR 0 7
74922: PUSH
74923: LD_INT 2
74925: ARRAY
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: PPUSH
74936: CALL_OW 69
74940: PUSH
74941: LD_INT 0
74943: EQUAL
74944: IFFALSE 74997
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74946: LD_VAR 0 1
74950: PPUSH
74951: LD_VAR 0 7
74955: PUSH
74956: LD_INT 1
74958: ARRAY
74959: PPUSH
74960: LD_VAR 0 7
74964: PUSH
74965: LD_INT 2
74967: ARRAY
74968: PPUSH
74969: LD_VAR 0 3
74973: PPUSH
74974: CALL_OW 48
// result := IsPlaced ( unit ) ;
74978: LD_ADDR_VAR 0 4
74982: PUSH
74983: LD_VAR 0 1
74987: PPUSH
74988: CALL_OW 305
74992: ST_TO_ADDR
// exit ;
74993: POP
74994: POP
74995: GO 75001
// end ; end ;
74997: GO 74864
74999: POP
75000: POP
// end ;
75001: LD_VAR 0 4
75005: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75006: LD_INT 0
75008: PPUSH
75009: PPUSH
75010: PPUSH
// if not side or side > 8 then
75011: LD_VAR 0 1
75015: NOT
75016: PUSH
75017: LD_VAR 0 1
75021: PUSH
75022: LD_INT 8
75024: GREATER
75025: OR
75026: IFFALSE 75030
// exit ;
75028: GO 75217
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75030: LD_ADDR_VAR 0 4
75034: PUSH
75035: LD_INT 22
75037: PUSH
75038: LD_VAR 0 1
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 21
75049: PUSH
75050: LD_INT 3
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PPUSH
75061: CALL_OW 69
75065: ST_TO_ADDR
// if not tmp then
75066: LD_VAR 0 4
75070: NOT
75071: IFFALSE 75075
// exit ;
75073: GO 75217
// enable_addtolog := true ;
75075: LD_ADDR_OWVAR 81
75079: PUSH
75080: LD_INT 1
75082: ST_TO_ADDR
// AddToLog ( [ ) ;
75083: LD_STRING [
75085: PPUSH
75086: CALL_OW 561
// for i in tmp do
75090: LD_ADDR_VAR 0 3
75094: PUSH
75095: LD_VAR 0 4
75099: PUSH
75100: FOR_IN
75101: IFFALSE 75208
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75103: LD_STRING [
75105: PUSH
75106: LD_VAR 0 3
75110: PPUSH
75111: CALL_OW 266
75115: STR
75116: PUSH
75117: LD_STRING , 
75119: STR
75120: PUSH
75121: LD_VAR 0 3
75125: PPUSH
75126: CALL_OW 250
75130: STR
75131: PUSH
75132: LD_STRING , 
75134: STR
75135: PUSH
75136: LD_VAR 0 3
75140: PPUSH
75141: CALL_OW 251
75145: STR
75146: PUSH
75147: LD_STRING , 
75149: STR
75150: PUSH
75151: LD_VAR 0 3
75155: PPUSH
75156: CALL_OW 254
75160: STR
75161: PUSH
75162: LD_STRING , 
75164: STR
75165: PUSH
75166: LD_VAR 0 3
75170: PPUSH
75171: LD_INT 1
75173: PPUSH
75174: CALL_OW 268
75178: STR
75179: PUSH
75180: LD_STRING , 
75182: STR
75183: PUSH
75184: LD_VAR 0 3
75188: PPUSH
75189: LD_INT 2
75191: PPUSH
75192: CALL_OW 268
75196: STR
75197: PUSH
75198: LD_STRING ],
75200: STR
75201: PPUSH
75202: CALL_OW 561
// end ;
75206: GO 75100
75208: POP
75209: POP
// AddToLog ( ]; ) ;
75210: LD_STRING ];
75212: PPUSH
75213: CALL_OW 561
// end ;
75217: LD_VAR 0 2
75221: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75222: LD_INT 0
75224: PPUSH
75225: PPUSH
75226: PPUSH
75227: PPUSH
75228: PPUSH
// if not area or not rate or not max then
75229: LD_VAR 0 1
75233: NOT
75234: PUSH
75235: LD_VAR 0 2
75239: NOT
75240: OR
75241: PUSH
75242: LD_VAR 0 4
75246: NOT
75247: OR
75248: IFFALSE 75252
// exit ;
75250: GO 75441
// while 1 do
75252: LD_INT 1
75254: IFFALSE 75441
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75256: LD_ADDR_VAR 0 9
75260: PUSH
75261: LD_VAR 0 1
75265: PPUSH
75266: LD_INT 1
75268: PPUSH
75269: CALL_OW 287
75273: PUSH
75274: LD_INT 10
75276: MUL
75277: ST_TO_ADDR
// r := rate / 10 ;
75278: LD_ADDR_VAR 0 7
75282: PUSH
75283: LD_VAR 0 2
75287: PUSH
75288: LD_INT 10
75290: DIVREAL
75291: ST_TO_ADDR
// time := 1 1$00 ;
75292: LD_ADDR_VAR 0 8
75296: PUSH
75297: LD_INT 2100
75299: ST_TO_ADDR
// if amount < min then
75300: LD_VAR 0 9
75304: PUSH
75305: LD_VAR 0 3
75309: LESS
75310: IFFALSE 75328
// r := r * 2 else
75312: LD_ADDR_VAR 0 7
75316: PUSH
75317: LD_VAR 0 7
75321: PUSH
75322: LD_INT 2
75324: MUL
75325: ST_TO_ADDR
75326: GO 75354
// if amount > max then
75328: LD_VAR 0 9
75332: PUSH
75333: LD_VAR 0 4
75337: GREATER
75338: IFFALSE 75354
// r := r / 2 ;
75340: LD_ADDR_VAR 0 7
75344: PUSH
75345: LD_VAR 0 7
75349: PUSH
75350: LD_INT 2
75352: DIVREAL
75353: ST_TO_ADDR
// time := time / r ;
75354: LD_ADDR_VAR 0 8
75358: PUSH
75359: LD_VAR 0 8
75363: PUSH
75364: LD_VAR 0 7
75368: DIVREAL
75369: ST_TO_ADDR
// if time < 0 then
75370: LD_VAR 0 8
75374: PUSH
75375: LD_INT 0
75377: LESS
75378: IFFALSE 75395
// time := time * - 1 ;
75380: LD_ADDR_VAR 0 8
75384: PUSH
75385: LD_VAR 0 8
75389: PUSH
75390: LD_INT 1
75392: NEG
75393: MUL
75394: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75395: LD_VAR 0 8
75399: PUSH
75400: LD_INT 35
75402: PPUSH
75403: LD_INT 875
75405: PPUSH
75406: CALL_OW 12
75410: PLUS
75411: PPUSH
75412: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75416: LD_INT 1
75418: PPUSH
75419: LD_INT 5
75421: PPUSH
75422: CALL_OW 12
75426: PPUSH
75427: LD_VAR 0 1
75431: PPUSH
75432: LD_INT 1
75434: PPUSH
75435: CALL_OW 55
// end ;
75439: GO 75252
// end ;
75441: LD_VAR 0 5
75445: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75446: LD_INT 0
75448: PPUSH
75449: PPUSH
75450: PPUSH
75451: PPUSH
75452: PPUSH
75453: PPUSH
75454: PPUSH
75455: PPUSH
// if not turrets or not factories then
75456: LD_VAR 0 1
75460: NOT
75461: PUSH
75462: LD_VAR 0 2
75466: NOT
75467: OR
75468: IFFALSE 75472
// exit ;
75470: GO 75779
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75472: LD_ADDR_VAR 0 10
75476: PUSH
75477: LD_INT 5
75479: PUSH
75480: LD_INT 6
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 2
75489: PUSH
75490: LD_INT 4
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 3
75499: PUSH
75500: LD_INT 5
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 24
75514: PUSH
75515: LD_INT 25
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 23
75524: PUSH
75525: LD_INT 27
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: LD_INT 42
75538: PUSH
75539: LD_INT 43
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 44
75548: PUSH
75549: LD_INT 46
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 45
75558: PUSH
75559: LD_INT 47
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: LIST
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: LIST
75575: ST_TO_ADDR
// result := [ ] ;
75576: LD_ADDR_VAR 0 3
75580: PUSH
75581: EMPTY
75582: ST_TO_ADDR
// for i in turrets do
75583: LD_ADDR_VAR 0 4
75587: PUSH
75588: LD_VAR 0 1
75592: PUSH
75593: FOR_IN
75594: IFFALSE 75777
// begin nat := GetNation ( i ) ;
75596: LD_ADDR_VAR 0 7
75600: PUSH
75601: LD_VAR 0 4
75605: PPUSH
75606: CALL_OW 248
75610: ST_TO_ADDR
// weapon := 0 ;
75611: LD_ADDR_VAR 0 8
75615: PUSH
75616: LD_INT 0
75618: ST_TO_ADDR
// if not nat then
75619: LD_VAR 0 7
75623: NOT
75624: IFFALSE 75628
// continue ;
75626: GO 75593
// for j in list [ nat ] do
75628: LD_ADDR_VAR 0 5
75632: PUSH
75633: LD_VAR 0 10
75637: PUSH
75638: LD_VAR 0 7
75642: ARRAY
75643: PUSH
75644: FOR_IN
75645: IFFALSE 75686
// if GetBWeapon ( i ) = j [ 1 ] then
75647: LD_VAR 0 4
75651: PPUSH
75652: CALL_OW 269
75656: PUSH
75657: LD_VAR 0 5
75661: PUSH
75662: LD_INT 1
75664: ARRAY
75665: EQUAL
75666: IFFALSE 75684
// begin weapon := j [ 2 ] ;
75668: LD_ADDR_VAR 0 8
75672: PUSH
75673: LD_VAR 0 5
75677: PUSH
75678: LD_INT 2
75680: ARRAY
75681: ST_TO_ADDR
// break ;
75682: GO 75686
// end ;
75684: GO 75644
75686: POP
75687: POP
// if not weapon then
75688: LD_VAR 0 8
75692: NOT
75693: IFFALSE 75697
// continue ;
75695: GO 75593
// for k in factories do
75697: LD_ADDR_VAR 0 6
75701: PUSH
75702: LD_VAR 0 2
75706: PUSH
75707: FOR_IN
75708: IFFALSE 75773
// begin weapons := AvailableWeaponList ( k ) ;
75710: LD_ADDR_VAR 0 9
75714: PUSH
75715: LD_VAR 0 6
75719: PPUSH
75720: CALL_OW 478
75724: ST_TO_ADDR
// if not weapons then
75725: LD_VAR 0 9
75729: NOT
75730: IFFALSE 75734
// continue ;
75732: GO 75707
// if weapon in weapons then
75734: LD_VAR 0 8
75738: PUSH
75739: LD_VAR 0 9
75743: IN
75744: IFFALSE 75771
// begin result := [ i , weapon ] ;
75746: LD_ADDR_VAR 0 3
75750: PUSH
75751: LD_VAR 0 4
75755: PUSH
75756: LD_VAR 0 8
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: ST_TO_ADDR
// exit ;
75765: POP
75766: POP
75767: POP
75768: POP
75769: GO 75779
// end ; end ;
75771: GO 75707
75773: POP
75774: POP
// end ;
75775: GO 75593
75777: POP
75778: POP
// end ;
75779: LD_VAR 0 3
75783: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75784: LD_INT 0
75786: PPUSH
// if not side or side > 8 then
75787: LD_VAR 0 3
75791: NOT
75792: PUSH
75793: LD_VAR 0 3
75797: PUSH
75798: LD_INT 8
75800: GREATER
75801: OR
75802: IFFALSE 75806
// exit ;
75804: GO 75865
// if not range then
75806: LD_VAR 0 4
75810: NOT
75811: IFFALSE 75822
// range := - 12 ;
75813: LD_ADDR_VAR 0 4
75817: PUSH
75818: LD_INT 12
75820: NEG
75821: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75822: LD_VAR 0 1
75826: PPUSH
75827: LD_VAR 0 2
75831: PPUSH
75832: LD_VAR 0 3
75836: PPUSH
75837: LD_VAR 0 4
75841: PPUSH
75842: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75846: LD_VAR 0 1
75850: PPUSH
75851: LD_VAR 0 2
75855: PPUSH
75856: LD_VAR 0 3
75860: PPUSH
75861: CALL_OW 331
// end ;
75865: LD_VAR 0 5
75869: RET
// export function Video ( mode ) ; begin
75870: LD_INT 0
75872: PPUSH
// ingame_video = mode ;
75873: LD_ADDR_OWVAR 52
75877: PUSH
75878: LD_VAR 0 1
75882: ST_TO_ADDR
// interface_hidden = mode ;
75883: LD_ADDR_OWVAR 54
75887: PUSH
75888: LD_VAR 0 1
75892: ST_TO_ADDR
// end ;
75893: LD_VAR 0 2
75897: RET
// export function Join ( array , element ) ; begin
75898: LD_INT 0
75900: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75901: LD_ADDR_VAR 0 3
75905: PUSH
75906: LD_VAR 0 1
75910: PPUSH
75911: LD_VAR 0 1
75915: PUSH
75916: LD_INT 1
75918: PLUS
75919: PPUSH
75920: LD_VAR 0 2
75924: PPUSH
75925: CALL_OW 1
75929: ST_TO_ADDR
// end ;
75930: LD_VAR 0 3
75934: RET
// export function JoinUnion ( array , element ) ; begin
75935: LD_INT 0
75937: PPUSH
// result := array union element ;
75938: LD_ADDR_VAR 0 3
75942: PUSH
75943: LD_VAR 0 1
75947: PUSH
75948: LD_VAR 0 2
75952: UNION
75953: ST_TO_ADDR
// end ;
75954: LD_VAR 0 3
75958: RET
// export function GetBehemoths ( side ) ; begin
75959: LD_INT 0
75961: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75962: LD_ADDR_VAR 0 2
75966: PUSH
75967: LD_INT 22
75969: PUSH
75970: LD_VAR 0 1
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PUSH
75979: LD_INT 31
75981: PUSH
75982: LD_INT 25
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PPUSH
75993: CALL_OW 69
75997: ST_TO_ADDR
// end ;
75998: LD_VAR 0 2
76002: RET
// export function Shuffle ( array ) ; var i , index ; begin
76003: LD_INT 0
76005: PPUSH
76006: PPUSH
76007: PPUSH
// result := [ ] ;
76008: LD_ADDR_VAR 0 2
76012: PUSH
76013: EMPTY
76014: ST_TO_ADDR
// if not array then
76015: LD_VAR 0 1
76019: NOT
76020: IFFALSE 76024
// exit ;
76022: GO 76123
// Randomize ;
76024: CALL_OW 10
// for i = array downto 1 do
76028: LD_ADDR_VAR 0 3
76032: PUSH
76033: DOUBLE
76034: LD_VAR 0 1
76038: INC
76039: ST_TO_ADDR
76040: LD_INT 1
76042: PUSH
76043: FOR_DOWNTO
76044: IFFALSE 76121
// begin index := rand ( 1 , array ) ;
76046: LD_ADDR_VAR 0 4
76050: PUSH
76051: LD_INT 1
76053: PPUSH
76054: LD_VAR 0 1
76058: PPUSH
76059: CALL_OW 12
76063: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76064: LD_ADDR_VAR 0 2
76068: PUSH
76069: LD_VAR 0 2
76073: PPUSH
76074: LD_VAR 0 2
76078: PUSH
76079: LD_INT 1
76081: PLUS
76082: PPUSH
76083: LD_VAR 0 1
76087: PUSH
76088: LD_VAR 0 4
76092: ARRAY
76093: PPUSH
76094: CALL_OW 2
76098: ST_TO_ADDR
// array := Delete ( array , index ) ;
76099: LD_ADDR_VAR 0 1
76103: PUSH
76104: LD_VAR 0 1
76108: PPUSH
76109: LD_VAR 0 4
76113: PPUSH
76114: CALL_OW 3
76118: ST_TO_ADDR
// end ;
76119: GO 76043
76121: POP
76122: POP
// end ;
76123: LD_VAR 0 2
76127: RET
// export function GetBaseMaterials ( base ) ; begin
76128: LD_INT 0
76130: PPUSH
// result := [ 0 , 0 , 0 ] ;
76131: LD_ADDR_VAR 0 2
76135: PUSH
76136: LD_INT 0
76138: PUSH
76139: LD_INT 0
76141: PUSH
76142: LD_INT 0
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: LIST
76149: ST_TO_ADDR
// if not base then
76150: LD_VAR 0 1
76154: NOT
76155: IFFALSE 76159
// exit ;
76157: GO 76208
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76159: LD_ADDR_VAR 0 2
76163: PUSH
76164: LD_VAR 0 1
76168: PPUSH
76169: LD_INT 1
76171: PPUSH
76172: CALL_OW 275
76176: PUSH
76177: LD_VAR 0 1
76181: PPUSH
76182: LD_INT 2
76184: PPUSH
76185: CALL_OW 275
76189: PUSH
76190: LD_VAR 0 1
76194: PPUSH
76195: LD_INT 3
76197: PPUSH
76198: CALL_OW 275
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: LIST
76207: ST_TO_ADDR
// end ;
76208: LD_VAR 0 2
76212: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76213: LD_INT 0
76215: PPUSH
76216: PPUSH
// result := array ;
76217: LD_ADDR_VAR 0 3
76221: PUSH
76222: LD_VAR 0 1
76226: ST_TO_ADDR
// if size >= result then
76227: LD_VAR 0 2
76231: PUSH
76232: LD_VAR 0 3
76236: GREATEREQUAL
76237: IFFALSE 76241
// exit ;
76239: GO 76291
// if size then
76241: LD_VAR 0 2
76245: IFFALSE 76291
// for i := array downto size do
76247: LD_ADDR_VAR 0 4
76251: PUSH
76252: DOUBLE
76253: LD_VAR 0 1
76257: INC
76258: ST_TO_ADDR
76259: LD_VAR 0 2
76263: PUSH
76264: FOR_DOWNTO
76265: IFFALSE 76289
// result := Delete ( result , result ) ;
76267: LD_ADDR_VAR 0 3
76271: PUSH
76272: LD_VAR 0 3
76276: PPUSH
76277: LD_VAR 0 3
76281: PPUSH
76282: CALL_OW 3
76286: ST_TO_ADDR
76287: GO 76264
76289: POP
76290: POP
// end ;
76291: LD_VAR 0 3
76295: RET
// export function ComExit ( unit ) ; var tmp ; begin
76296: LD_INT 0
76298: PPUSH
76299: PPUSH
// if not IsInUnit ( unit ) then
76300: LD_VAR 0 1
76304: PPUSH
76305: CALL_OW 310
76309: NOT
76310: IFFALSE 76314
// exit ;
76312: GO 76374
// tmp := IsInUnit ( unit ) ;
76314: LD_ADDR_VAR 0 3
76318: PUSH
76319: LD_VAR 0 1
76323: PPUSH
76324: CALL_OW 310
76328: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76329: LD_VAR 0 3
76333: PPUSH
76334: CALL_OW 247
76338: PUSH
76339: LD_INT 2
76341: EQUAL
76342: IFFALSE 76355
// ComExitVehicle ( unit ) else
76344: LD_VAR 0 1
76348: PPUSH
76349: CALL_OW 121
76353: GO 76364
// ComExitBuilding ( unit ) ;
76355: LD_VAR 0 1
76359: PPUSH
76360: CALL_OW 122
// result := tmp ;
76364: LD_ADDR_VAR 0 2
76368: PUSH
76369: LD_VAR 0 3
76373: ST_TO_ADDR
// end ;
76374: LD_VAR 0 2
76378: RET
// export function ComExitAll ( units ) ; var i ; begin
76379: LD_INT 0
76381: PPUSH
76382: PPUSH
// if not units then
76383: LD_VAR 0 1
76387: NOT
76388: IFFALSE 76392
// exit ;
76390: GO 76418
// for i in units do
76392: LD_ADDR_VAR 0 3
76396: PUSH
76397: LD_VAR 0 1
76401: PUSH
76402: FOR_IN
76403: IFFALSE 76416
// ComExit ( i ) ;
76405: LD_VAR 0 3
76409: PPUSH
76410: CALL 76296 0 1
76414: GO 76402
76416: POP
76417: POP
// end ;
76418: LD_VAR 0 2
76422: RET
// export function ResetHc ; begin
76423: LD_INT 0
76425: PPUSH
// InitHc ;
76426: CALL_OW 19
// hc_importance := 0 ;
76430: LD_ADDR_OWVAR 32
76434: PUSH
76435: LD_INT 0
76437: ST_TO_ADDR
// end ;
76438: LD_VAR 0 1
76442: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76443: LD_INT 0
76445: PPUSH
76446: PPUSH
76447: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76448: LD_ADDR_VAR 0 6
76452: PUSH
76453: LD_VAR 0 1
76457: PUSH
76458: LD_VAR 0 3
76462: PLUS
76463: PUSH
76464: LD_INT 2
76466: DIV
76467: ST_TO_ADDR
// if _x < 0 then
76468: LD_VAR 0 6
76472: PUSH
76473: LD_INT 0
76475: LESS
76476: IFFALSE 76493
// _x := _x * - 1 ;
76478: LD_ADDR_VAR 0 6
76482: PUSH
76483: LD_VAR 0 6
76487: PUSH
76488: LD_INT 1
76490: NEG
76491: MUL
76492: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76493: LD_ADDR_VAR 0 7
76497: PUSH
76498: LD_VAR 0 2
76502: PUSH
76503: LD_VAR 0 4
76507: PLUS
76508: PUSH
76509: LD_INT 2
76511: DIV
76512: ST_TO_ADDR
// if _y < 0 then
76513: LD_VAR 0 7
76517: PUSH
76518: LD_INT 0
76520: LESS
76521: IFFALSE 76538
// _y := _y * - 1 ;
76523: LD_ADDR_VAR 0 7
76527: PUSH
76528: LD_VAR 0 7
76532: PUSH
76533: LD_INT 1
76535: NEG
76536: MUL
76537: ST_TO_ADDR
// result := [ _x , _y ] ;
76538: LD_ADDR_VAR 0 5
76542: PUSH
76543: LD_VAR 0 6
76547: PUSH
76548: LD_VAR 0 7
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: ST_TO_ADDR
// end ;
76557: LD_VAR 0 5
76561: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76562: LD_INT 0
76564: PPUSH
76565: PPUSH
76566: PPUSH
76567: PPUSH
// task := GetTaskList ( unit ) ;
76568: LD_ADDR_VAR 0 7
76572: PUSH
76573: LD_VAR 0 1
76577: PPUSH
76578: CALL_OW 437
76582: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76583: LD_VAR 0 7
76587: NOT
76588: PUSH
76589: LD_VAR 0 1
76593: PPUSH
76594: LD_VAR 0 2
76598: PPUSH
76599: CALL_OW 308
76603: NOT
76604: AND
76605: IFFALSE 76609
// exit ;
76607: GO 76727
// if IsInArea ( unit , area ) then
76609: LD_VAR 0 1
76613: PPUSH
76614: LD_VAR 0 2
76618: PPUSH
76619: CALL_OW 308
76623: IFFALSE 76641
// begin ComMoveToArea ( unit , goAway ) ;
76625: LD_VAR 0 1
76629: PPUSH
76630: LD_VAR 0 3
76634: PPUSH
76635: CALL_OW 113
// exit ;
76639: GO 76727
// end ; if task [ 1 ] [ 1 ] <> M then
76641: LD_VAR 0 7
76645: PUSH
76646: LD_INT 1
76648: ARRAY
76649: PUSH
76650: LD_INT 1
76652: ARRAY
76653: PUSH
76654: LD_STRING M
76656: NONEQUAL
76657: IFFALSE 76661
// exit ;
76659: GO 76727
// x := task [ 1 ] [ 2 ] ;
76661: LD_ADDR_VAR 0 5
76665: PUSH
76666: LD_VAR 0 7
76670: PUSH
76671: LD_INT 1
76673: ARRAY
76674: PUSH
76675: LD_INT 2
76677: ARRAY
76678: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76679: LD_ADDR_VAR 0 6
76683: PUSH
76684: LD_VAR 0 7
76688: PUSH
76689: LD_INT 1
76691: ARRAY
76692: PUSH
76693: LD_INT 3
76695: ARRAY
76696: ST_TO_ADDR
// if InArea ( x , y , area ) then
76697: LD_VAR 0 5
76701: PPUSH
76702: LD_VAR 0 6
76706: PPUSH
76707: LD_VAR 0 2
76711: PPUSH
76712: CALL_OW 309
76716: IFFALSE 76727
// ComStop ( unit ) ;
76718: LD_VAR 0 1
76722: PPUSH
76723: CALL_OW 141
// end ;
76727: LD_VAR 0 4
76731: RET
// export function Abs ( value ) ; begin
76732: LD_INT 0
76734: PPUSH
// result := value ;
76735: LD_ADDR_VAR 0 2
76739: PUSH
76740: LD_VAR 0 1
76744: ST_TO_ADDR
// if value < 0 then
76745: LD_VAR 0 1
76749: PUSH
76750: LD_INT 0
76752: LESS
76753: IFFALSE 76770
// result := value * - 1 ;
76755: LD_ADDR_VAR 0 2
76759: PUSH
76760: LD_VAR 0 1
76764: PUSH
76765: LD_INT 1
76767: NEG
76768: MUL
76769: ST_TO_ADDR
// end ;
76770: LD_VAR 0 2
76774: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76775: LD_INT 0
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
76781: PPUSH
76782: PPUSH
76783: PPUSH
76784: PPUSH
// if not unit or not building then
76785: LD_VAR 0 1
76789: NOT
76790: PUSH
76791: LD_VAR 0 2
76795: NOT
76796: OR
76797: IFFALSE 76801
// exit ;
76799: GO 77027
// x := GetX ( building ) ;
76801: LD_ADDR_VAR 0 4
76805: PUSH
76806: LD_VAR 0 2
76810: PPUSH
76811: CALL_OW 250
76815: ST_TO_ADDR
// y := GetY ( building ) ;
76816: LD_ADDR_VAR 0 6
76820: PUSH
76821: LD_VAR 0 2
76825: PPUSH
76826: CALL_OW 251
76830: ST_TO_ADDR
// d := GetDir ( building ) ;
76831: LD_ADDR_VAR 0 8
76835: PUSH
76836: LD_VAR 0 2
76840: PPUSH
76841: CALL_OW 254
76845: ST_TO_ADDR
// r := 4 ;
76846: LD_ADDR_VAR 0 9
76850: PUSH
76851: LD_INT 4
76853: ST_TO_ADDR
// for i := 1 to 5 do
76854: LD_ADDR_VAR 0 10
76858: PUSH
76859: DOUBLE
76860: LD_INT 1
76862: DEC
76863: ST_TO_ADDR
76864: LD_INT 5
76866: PUSH
76867: FOR_TO
76868: IFFALSE 77025
// begin _x := ShiftX ( x , d , r + i ) ;
76870: LD_ADDR_VAR 0 5
76874: PUSH
76875: LD_VAR 0 4
76879: PPUSH
76880: LD_VAR 0 8
76884: PPUSH
76885: LD_VAR 0 9
76889: PUSH
76890: LD_VAR 0 10
76894: PLUS
76895: PPUSH
76896: CALL_OW 272
76900: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76901: LD_ADDR_VAR 0 7
76905: PUSH
76906: LD_VAR 0 6
76910: PPUSH
76911: LD_VAR 0 8
76915: PPUSH
76916: LD_VAR 0 9
76920: PUSH
76921: LD_VAR 0 10
76925: PLUS
76926: PPUSH
76927: CALL_OW 273
76931: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76932: LD_VAR 0 5
76936: PPUSH
76937: LD_VAR 0 7
76941: PPUSH
76942: CALL_OW 488
76946: PUSH
76947: LD_VAR 0 5
76951: PPUSH
76952: LD_VAR 0 7
76956: PPUSH
76957: CALL_OW 428
76961: PPUSH
76962: CALL_OW 247
76966: PUSH
76967: LD_INT 3
76969: PUSH
76970: LD_INT 2
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: IN
76977: NOT
76978: AND
76979: IFFALSE 77023
// begin ComMoveXY ( unit , _x , _y ) ;
76981: LD_VAR 0 1
76985: PPUSH
76986: LD_VAR 0 5
76990: PPUSH
76991: LD_VAR 0 7
76995: PPUSH
76996: CALL_OW 111
// result := [ _x , _y ] ;
77000: LD_ADDR_VAR 0 3
77004: PUSH
77005: LD_VAR 0 5
77009: PUSH
77010: LD_VAR 0 7
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: ST_TO_ADDR
// exit ;
77019: POP
77020: POP
77021: GO 77027
// end ; end ;
77023: GO 76867
77025: POP
77026: POP
// end ;
77027: LD_VAR 0 3
77031: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77032: LD_INT 0
77034: PPUSH
77035: PPUSH
77036: PPUSH
// result := 0 ;
77037: LD_ADDR_VAR 0 3
77041: PUSH
77042: LD_INT 0
77044: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77045: LD_VAR 0 1
77049: PUSH
77050: LD_INT 0
77052: LESS
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 8
77061: GREATER
77062: OR
77063: PUSH
77064: LD_VAR 0 2
77068: PUSH
77069: LD_INT 0
77071: LESS
77072: OR
77073: PUSH
77074: LD_VAR 0 2
77078: PUSH
77079: LD_INT 8
77081: GREATER
77082: OR
77083: IFFALSE 77087
// exit ;
77085: GO 77162
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77087: LD_ADDR_VAR 0 4
77091: PUSH
77092: LD_INT 22
77094: PUSH
77095: LD_VAR 0 2
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PPUSH
77104: CALL_OW 69
77108: PUSH
77109: FOR_IN
77110: IFFALSE 77160
// begin un := UnitShoot ( i ) ;
77112: LD_ADDR_VAR 0 5
77116: PUSH
77117: LD_VAR 0 4
77121: PPUSH
77122: CALL_OW 504
77126: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77127: LD_VAR 0 5
77131: PPUSH
77132: CALL_OW 255
77136: PUSH
77137: LD_VAR 0 1
77141: EQUAL
77142: IFFALSE 77158
// begin result := un ;
77144: LD_ADDR_VAR 0 3
77148: PUSH
77149: LD_VAR 0 5
77153: ST_TO_ADDR
// exit ;
77154: POP
77155: POP
77156: GO 77162
// end ; end ;
77158: GO 77109
77160: POP
77161: POP
// end ;
77162: LD_VAR 0 3
77166: RET
// export function GetCargoBay ( units ) ; begin
77167: LD_INT 0
77169: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77170: LD_ADDR_VAR 0 2
77174: PUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: LD_INT 2
77182: PUSH
77183: LD_INT 34
77185: PUSH
77186: LD_INT 12
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 34
77195: PUSH
77196: LD_INT 51
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 34
77205: PUSH
77206: LD_INT 32
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: LD_INT 34
77215: PUSH
77216: LD_INT 89
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: PPUSH
77230: CALL_OW 72
77234: ST_TO_ADDR
// end ;
77235: LD_VAR 0 2
77239: RET
// export function Negate ( value ) ; begin
77240: LD_INT 0
77242: PPUSH
// result := not value ;
77243: LD_ADDR_VAR 0 2
77247: PUSH
77248: LD_VAR 0 1
77252: NOT
77253: ST_TO_ADDR
// end ;
77254: LD_VAR 0 2
77258: RET
// export function Inc ( value ) ; begin
77259: LD_INT 0
77261: PPUSH
// result := value + 1 ;
77262: LD_ADDR_VAR 0 2
77266: PUSH
77267: LD_VAR 0 1
77271: PUSH
77272: LD_INT 1
77274: PLUS
77275: ST_TO_ADDR
// end ;
77276: LD_VAR 0 2
77280: RET
// export function Dec ( value ) ; begin
77281: LD_INT 0
77283: PPUSH
// result := value - 1 ;
77284: LD_ADDR_VAR 0 2
77288: PUSH
77289: LD_VAR 0 1
77293: PUSH
77294: LD_INT 1
77296: MINUS
77297: ST_TO_ADDR
// end ;
77298: LD_VAR 0 2
77302: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77303: LD_INT 0
77305: PPUSH
77306: PPUSH
77307: PPUSH
77308: PPUSH
77309: PPUSH
77310: PPUSH
77311: PPUSH
77312: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77313: LD_VAR 0 1
77317: PPUSH
77318: LD_VAR 0 2
77322: PPUSH
77323: CALL_OW 488
77327: NOT
77328: PUSH
77329: LD_VAR 0 3
77333: PPUSH
77334: LD_VAR 0 4
77338: PPUSH
77339: CALL_OW 488
77343: NOT
77344: OR
77345: IFFALSE 77358
// begin result := - 1 ;
77347: LD_ADDR_VAR 0 5
77351: PUSH
77352: LD_INT 1
77354: NEG
77355: ST_TO_ADDR
// exit ;
77356: GO 77593
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77358: LD_ADDR_VAR 0 12
77362: PUSH
77363: LD_VAR 0 1
77367: PPUSH
77368: LD_VAR 0 2
77372: PPUSH
77373: LD_VAR 0 3
77377: PPUSH
77378: LD_VAR 0 4
77382: PPUSH
77383: CALL 76443 0 4
77387: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77388: LD_ADDR_VAR 0 11
77392: PUSH
77393: LD_VAR 0 1
77397: PPUSH
77398: LD_VAR 0 2
77402: PPUSH
77403: LD_VAR 0 12
77407: PUSH
77408: LD_INT 1
77410: ARRAY
77411: PPUSH
77412: LD_VAR 0 12
77416: PUSH
77417: LD_INT 2
77419: ARRAY
77420: PPUSH
77421: CALL_OW 298
77425: ST_TO_ADDR
// distance := 9999 ;
77426: LD_ADDR_VAR 0 10
77430: PUSH
77431: LD_INT 9999
77433: ST_TO_ADDR
// for i := 0 to 5 do
77434: LD_ADDR_VAR 0 6
77438: PUSH
77439: DOUBLE
77440: LD_INT 0
77442: DEC
77443: ST_TO_ADDR
77444: LD_INT 5
77446: PUSH
77447: FOR_TO
77448: IFFALSE 77591
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77450: LD_ADDR_VAR 0 7
77454: PUSH
77455: LD_VAR 0 1
77459: PPUSH
77460: LD_VAR 0 6
77464: PPUSH
77465: LD_VAR 0 11
77469: PPUSH
77470: CALL_OW 272
77474: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77475: LD_ADDR_VAR 0 8
77479: PUSH
77480: LD_VAR 0 2
77484: PPUSH
77485: LD_VAR 0 6
77489: PPUSH
77490: LD_VAR 0 11
77494: PPUSH
77495: CALL_OW 273
77499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77500: LD_VAR 0 7
77504: PPUSH
77505: LD_VAR 0 8
77509: PPUSH
77510: CALL_OW 488
77514: NOT
77515: IFFALSE 77519
// continue ;
77517: GO 77447
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77519: LD_ADDR_VAR 0 9
77523: PUSH
77524: LD_VAR 0 12
77528: PUSH
77529: LD_INT 1
77531: ARRAY
77532: PPUSH
77533: LD_VAR 0 12
77537: PUSH
77538: LD_INT 2
77540: ARRAY
77541: PPUSH
77542: LD_VAR 0 7
77546: PPUSH
77547: LD_VAR 0 8
77551: PPUSH
77552: CALL_OW 298
77556: ST_TO_ADDR
// if tmp < distance then
77557: LD_VAR 0 9
77561: PUSH
77562: LD_VAR 0 10
77566: LESS
77567: IFFALSE 77589
// begin result := i ;
77569: LD_ADDR_VAR 0 5
77573: PUSH
77574: LD_VAR 0 6
77578: ST_TO_ADDR
// distance := tmp ;
77579: LD_ADDR_VAR 0 10
77583: PUSH
77584: LD_VAR 0 9
77588: ST_TO_ADDR
// end ; end ;
77589: GO 77447
77591: POP
77592: POP
// end ;
77593: LD_VAR 0 5
77597: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77598: LD_INT 0
77600: PPUSH
77601: PPUSH
// if not driver or not IsInUnit ( driver ) then
77602: LD_VAR 0 1
77606: NOT
77607: PUSH
77608: LD_VAR 0 1
77612: PPUSH
77613: CALL_OW 310
77617: NOT
77618: OR
77619: IFFALSE 77623
// exit ;
77621: GO 77713
// vehicle := IsInUnit ( driver ) ;
77623: LD_ADDR_VAR 0 3
77627: PUSH
77628: LD_VAR 0 1
77632: PPUSH
77633: CALL_OW 310
77637: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77638: LD_VAR 0 1
77642: PPUSH
77643: LD_STRING \
77645: PUSH
77646: LD_INT 0
77648: PUSH
77649: LD_INT 0
77651: PUSH
77652: LD_INT 0
77654: PUSH
77655: LD_INT 0
77657: PUSH
77658: LD_INT 0
77660: PUSH
77661: LD_INT 0
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: LIST
77668: LIST
77669: LIST
77670: LIST
77671: LIST
77672: PUSH
77673: LD_STRING E
77675: PUSH
77676: LD_INT 0
77678: PUSH
77679: LD_INT 0
77681: PUSH
77682: LD_VAR 0 3
77686: PUSH
77687: LD_INT 0
77689: PUSH
77690: LD_INT 0
77692: PUSH
77693: LD_INT 0
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: LIST
77702: LIST
77703: LIST
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PPUSH
77709: CALL_OW 446
// end ;
77713: LD_VAR 0 2
77717: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77718: LD_INT 0
77720: PPUSH
77721: PPUSH
// if not driver or not IsInUnit ( driver ) then
77722: LD_VAR 0 1
77726: NOT
77727: PUSH
77728: LD_VAR 0 1
77732: PPUSH
77733: CALL_OW 310
77737: NOT
77738: OR
77739: IFFALSE 77743
// exit ;
77741: GO 77833
// vehicle := IsInUnit ( driver ) ;
77743: LD_ADDR_VAR 0 3
77747: PUSH
77748: LD_VAR 0 1
77752: PPUSH
77753: CALL_OW 310
77757: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77758: LD_VAR 0 1
77762: PPUSH
77763: LD_STRING \
77765: PUSH
77766: LD_INT 0
77768: PUSH
77769: LD_INT 0
77771: PUSH
77772: LD_INT 0
77774: PUSH
77775: LD_INT 0
77777: PUSH
77778: LD_INT 0
77780: PUSH
77781: LD_INT 0
77783: PUSH
77784: EMPTY
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: PUSH
77793: LD_STRING E
77795: PUSH
77796: LD_INT 0
77798: PUSH
77799: LD_INT 0
77801: PUSH
77802: LD_VAR 0 3
77806: PUSH
77807: LD_INT 0
77809: PUSH
77810: LD_INT 0
77812: PUSH
77813: LD_INT 0
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PPUSH
77829: CALL_OW 447
// end ;
77833: LD_VAR 0 2
77837: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77838: LD_INT 0
77840: PPUSH
77841: PPUSH
77842: PPUSH
// tmp := [ ] ;
77843: LD_ADDR_VAR 0 5
77847: PUSH
77848: EMPTY
77849: ST_TO_ADDR
// for i in units do
77850: LD_ADDR_VAR 0 4
77854: PUSH
77855: LD_VAR 0 1
77859: PUSH
77860: FOR_IN
77861: IFFALSE 77899
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77863: LD_ADDR_VAR 0 5
77867: PUSH
77868: LD_VAR 0 5
77872: PPUSH
77873: LD_VAR 0 5
77877: PUSH
77878: LD_INT 1
77880: PLUS
77881: PPUSH
77882: LD_VAR 0 4
77886: PPUSH
77887: CALL_OW 256
77891: PPUSH
77892: CALL_OW 2
77896: ST_TO_ADDR
77897: GO 77860
77899: POP
77900: POP
// if not tmp then
77901: LD_VAR 0 5
77905: NOT
77906: IFFALSE 77910
// exit ;
77908: GO 77958
// if asc then
77910: LD_VAR 0 2
77914: IFFALSE 77938
// result := SortListByListAsc ( units , tmp ) else
77916: LD_ADDR_VAR 0 3
77920: PUSH
77921: LD_VAR 0 1
77925: PPUSH
77926: LD_VAR 0 5
77930: PPUSH
77931: CALL_OW 76
77935: ST_TO_ADDR
77936: GO 77958
// result := SortListByListDesc ( units , tmp ) ;
77938: LD_ADDR_VAR 0 3
77942: PUSH
77943: LD_VAR 0 1
77947: PPUSH
77948: LD_VAR 0 5
77952: PPUSH
77953: CALL_OW 77
77957: ST_TO_ADDR
// end ;
77958: LD_VAR 0 3
77962: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77963: LD_INT 0
77965: PPUSH
77966: PPUSH
// task := GetTaskList ( mech ) ;
77967: LD_ADDR_VAR 0 4
77971: PUSH
77972: LD_VAR 0 1
77976: PPUSH
77977: CALL_OW 437
77981: ST_TO_ADDR
// if not task then
77982: LD_VAR 0 4
77986: NOT
77987: IFFALSE 77991
// exit ;
77989: GO 78033
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77991: LD_ADDR_VAR 0 3
77995: PUSH
77996: LD_VAR 0 4
78000: PUSH
78001: LD_INT 1
78003: ARRAY
78004: PUSH
78005: LD_INT 1
78007: ARRAY
78008: PUSH
78009: LD_STRING r
78011: EQUAL
78012: PUSH
78013: LD_VAR 0 4
78017: PUSH
78018: LD_INT 1
78020: ARRAY
78021: PUSH
78022: LD_INT 4
78024: ARRAY
78025: PUSH
78026: LD_VAR 0 2
78030: EQUAL
78031: AND
78032: ST_TO_ADDR
// end ;
78033: LD_VAR 0 3
78037: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78038: LD_INT 0
78040: PPUSH
// SetDir ( unit , d ) ;
78041: LD_VAR 0 1
78045: PPUSH
78046: LD_VAR 0 4
78050: PPUSH
78051: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78055: LD_VAR 0 1
78059: PPUSH
78060: LD_VAR 0 2
78064: PPUSH
78065: LD_VAR 0 3
78069: PPUSH
78070: LD_VAR 0 5
78074: PPUSH
78075: CALL_OW 48
// end ;
78079: LD_VAR 0 6
78083: RET
// export function ToNaturalNumber ( number ) ; begin
78084: LD_INT 0
78086: PPUSH
// result := number div 1 ;
78087: LD_ADDR_VAR 0 2
78091: PUSH
78092: LD_VAR 0 1
78096: PUSH
78097: LD_INT 1
78099: DIV
78100: ST_TO_ADDR
// if number < 0 then
78101: LD_VAR 0 1
78105: PUSH
78106: LD_INT 0
78108: LESS
78109: IFFALSE 78119
// result := 0 ;
78111: LD_ADDR_VAR 0 2
78115: PUSH
78116: LD_INT 0
78118: ST_TO_ADDR
// end ;
78119: LD_VAR 0 2
78123: RET
// export function SortByClass ( units , class ) ; var un ; begin
78124: LD_INT 0
78126: PPUSH
78127: PPUSH
// if not units or not class then
78128: LD_VAR 0 1
78132: NOT
78133: PUSH
78134: LD_VAR 0 2
78138: NOT
78139: OR
78140: IFFALSE 78144
// exit ;
78142: GO 78239
// result := [ ] ;
78144: LD_ADDR_VAR 0 3
78148: PUSH
78149: EMPTY
78150: ST_TO_ADDR
// for un in units do
78151: LD_ADDR_VAR 0 4
78155: PUSH
78156: LD_VAR 0 1
78160: PUSH
78161: FOR_IN
78162: IFFALSE 78237
// if GetClass ( un ) = class then
78164: LD_VAR 0 4
78168: PPUSH
78169: CALL_OW 257
78173: PUSH
78174: LD_VAR 0 2
78178: EQUAL
78179: IFFALSE 78206
// result := Insert ( result , 1 , un ) else
78181: LD_ADDR_VAR 0 3
78185: PUSH
78186: LD_VAR 0 3
78190: PPUSH
78191: LD_INT 1
78193: PPUSH
78194: LD_VAR 0 4
78198: PPUSH
78199: CALL_OW 2
78203: ST_TO_ADDR
78204: GO 78235
// result := Replace ( result , result + 1 , un ) ;
78206: LD_ADDR_VAR 0 3
78210: PUSH
78211: LD_VAR 0 3
78215: PPUSH
78216: LD_VAR 0 3
78220: PUSH
78221: LD_INT 1
78223: PLUS
78224: PPUSH
78225: LD_VAR 0 4
78229: PPUSH
78230: CALL_OW 1
78234: ST_TO_ADDR
78235: GO 78161
78237: POP
78238: POP
// end ;
78239: LD_VAR 0 3
78243: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78244: LD_INT 0
78246: PPUSH
78247: PPUSH
78248: PPUSH
78249: PPUSH
78250: PPUSH
78251: PPUSH
78252: PPUSH
// result := [ ] ;
78253: LD_ADDR_VAR 0 4
78257: PUSH
78258: EMPTY
78259: ST_TO_ADDR
// if x - r < 0 then
78260: LD_VAR 0 1
78264: PUSH
78265: LD_VAR 0 3
78269: MINUS
78270: PUSH
78271: LD_INT 0
78273: LESS
78274: IFFALSE 78286
// min_x := 0 else
78276: LD_ADDR_VAR 0 8
78280: PUSH
78281: LD_INT 0
78283: ST_TO_ADDR
78284: GO 78302
// min_x := x - r ;
78286: LD_ADDR_VAR 0 8
78290: PUSH
78291: LD_VAR 0 1
78295: PUSH
78296: LD_VAR 0 3
78300: MINUS
78301: ST_TO_ADDR
// if y - r < 0 then
78302: LD_VAR 0 2
78306: PUSH
78307: LD_VAR 0 3
78311: MINUS
78312: PUSH
78313: LD_INT 0
78315: LESS
78316: IFFALSE 78328
// min_y := 0 else
78318: LD_ADDR_VAR 0 7
78322: PUSH
78323: LD_INT 0
78325: ST_TO_ADDR
78326: GO 78344
// min_y := y - r ;
78328: LD_ADDR_VAR 0 7
78332: PUSH
78333: LD_VAR 0 2
78337: PUSH
78338: LD_VAR 0 3
78342: MINUS
78343: ST_TO_ADDR
// max_x := x + r ;
78344: LD_ADDR_VAR 0 9
78348: PUSH
78349: LD_VAR 0 1
78353: PUSH
78354: LD_VAR 0 3
78358: PLUS
78359: ST_TO_ADDR
// max_y := y + r ;
78360: LD_ADDR_VAR 0 10
78364: PUSH
78365: LD_VAR 0 2
78369: PUSH
78370: LD_VAR 0 3
78374: PLUS
78375: ST_TO_ADDR
// for _x = min_x to max_x do
78376: LD_ADDR_VAR 0 5
78380: PUSH
78381: DOUBLE
78382: LD_VAR 0 8
78386: DEC
78387: ST_TO_ADDR
78388: LD_VAR 0 9
78392: PUSH
78393: FOR_TO
78394: IFFALSE 78495
// for _y = min_y to max_y do
78396: LD_ADDR_VAR 0 6
78400: PUSH
78401: DOUBLE
78402: LD_VAR 0 7
78406: DEC
78407: ST_TO_ADDR
78408: LD_VAR 0 10
78412: PUSH
78413: FOR_TO
78414: IFFALSE 78491
// begin if not ValidHex ( _x , _y ) then
78416: LD_VAR 0 5
78420: PPUSH
78421: LD_VAR 0 6
78425: PPUSH
78426: CALL_OW 488
78430: NOT
78431: IFFALSE 78435
// continue ;
78433: GO 78413
// if GetResourceTypeXY ( _x , _y ) then
78435: LD_VAR 0 5
78439: PPUSH
78440: LD_VAR 0 6
78444: PPUSH
78445: CALL_OW 283
78449: IFFALSE 78489
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78451: LD_ADDR_VAR 0 4
78455: PUSH
78456: LD_VAR 0 4
78460: PPUSH
78461: LD_VAR 0 4
78465: PUSH
78466: LD_INT 1
78468: PLUS
78469: PPUSH
78470: LD_VAR 0 5
78474: PUSH
78475: LD_VAR 0 6
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PPUSH
78484: CALL_OW 1
78488: ST_TO_ADDR
// end ;
78489: GO 78413
78491: POP
78492: POP
78493: GO 78393
78495: POP
78496: POP
// end ;
78497: LD_VAR 0 4
78501: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78502: LD_INT 0
78504: PPUSH
78505: PPUSH
78506: PPUSH
78507: PPUSH
78508: PPUSH
78509: PPUSH
78510: PPUSH
78511: PPUSH
// if not units then
78512: LD_VAR 0 1
78516: NOT
78517: IFFALSE 78521
// exit ;
78519: GO 79049
// result := UnitFilter ( units , [ f_ok ] ) ;
78521: LD_ADDR_VAR 0 3
78525: PUSH
78526: LD_VAR 0 1
78530: PPUSH
78531: LD_INT 50
78533: PUSH
78534: EMPTY
78535: LIST
78536: PPUSH
78537: CALL_OW 72
78541: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78542: LD_ADDR_VAR 0 8
78546: PUSH
78547: LD_VAR 0 1
78551: PUSH
78552: LD_INT 1
78554: ARRAY
78555: PPUSH
78556: CALL_OW 255
78560: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78561: LD_ADDR_VAR 0 10
78565: PUSH
78566: LD_INT 29
78568: PUSH
78569: LD_INT 91
78571: PUSH
78572: LD_INT 49
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: LIST
78579: ST_TO_ADDR
// if not result then
78580: LD_VAR 0 3
78584: NOT
78585: IFFALSE 78589
// exit ;
78587: GO 79049
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78589: LD_ADDR_VAR 0 5
78593: PUSH
78594: LD_INT 81
78596: PUSH
78597: LD_VAR 0 8
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PPUSH
78606: CALL_OW 69
78610: ST_TO_ADDR
// for i in result do
78611: LD_ADDR_VAR 0 4
78615: PUSH
78616: LD_VAR 0 3
78620: PUSH
78621: FOR_IN
78622: IFFALSE 79047
// begin tag := GetTag ( i ) + 1 ;
78624: LD_ADDR_VAR 0 9
78628: PUSH
78629: LD_VAR 0 4
78633: PPUSH
78634: CALL_OW 110
78638: PUSH
78639: LD_INT 1
78641: PLUS
78642: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
78643: LD_ADDR_VAR 0 7
78647: PUSH
78648: LD_VAR 0 4
78652: PPUSH
78653: CALL_OW 250
78657: PPUSH
78658: LD_VAR 0 4
78662: PPUSH
78663: CALL_OW 251
78667: PPUSH
78668: LD_INT 4
78670: PPUSH
78671: CALL 78244 0 3
78675: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
78676: LD_VAR 0 4
78680: PPUSH
78681: CALL_OW 247
78685: PUSH
78686: LD_INT 2
78688: EQUAL
78689: PUSH
78690: LD_VAR 0 7
78694: PUSH
78695: LD_INT 2
78697: GREATER
78698: AND
78699: PUSH
78700: LD_VAR 0 4
78704: PPUSH
78705: CALL_OW 264
78709: PUSH
78710: LD_VAR 0 10
78714: IN
78715: NOT
78716: AND
78717: IFFALSE 78756
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78719: LD_VAR 0 4
78723: PPUSH
78724: LD_VAR 0 7
78728: PUSH
78729: LD_INT 1
78731: ARRAY
78732: PUSH
78733: LD_INT 1
78735: ARRAY
78736: PPUSH
78737: LD_VAR 0 7
78741: PUSH
78742: LD_INT 1
78744: ARRAY
78745: PUSH
78746: LD_INT 2
78748: ARRAY
78749: PPUSH
78750: CALL_OW 116
78754: GO 79045
// if path > tag then
78756: LD_VAR 0 2
78760: PUSH
78761: LD_VAR 0 9
78765: GREATER
78766: IFFALSE 78974
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78768: LD_ADDR_VAR 0 6
78772: PUSH
78773: LD_VAR 0 5
78777: PPUSH
78778: LD_INT 91
78780: PUSH
78781: LD_VAR 0 4
78785: PUSH
78786: LD_INT 8
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: PPUSH
78794: CALL_OW 72
78798: ST_TO_ADDR
// if nearEnemy then
78799: LD_VAR 0 6
78803: IFFALSE 78872
// begin if GetWeapon ( i ) = ru_time_lapser then
78805: LD_VAR 0 4
78809: PPUSH
78810: CALL_OW 264
78814: PUSH
78815: LD_INT 49
78817: EQUAL
78818: IFFALSE 78846
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78820: LD_VAR 0 4
78824: PPUSH
78825: LD_VAR 0 6
78829: PPUSH
78830: LD_VAR 0 4
78834: PPUSH
78835: CALL_OW 74
78839: PPUSH
78840: CALL_OW 112
78844: GO 78870
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78846: LD_VAR 0 4
78850: PPUSH
78851: LD_VAR 0 6
78855: PPUSH
78856: LD_VAR 0 4
78860: PPUSH
78861: CALL_OW 74
78865: PPUSH
78866: CALL 80120 0 2
// end else
78870: GO 78972
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78872: LD_VAR 0 4
78876: PPUSH
78877: LD_VAR 0 2
78881: PUSH
78882: LD_VAR 0 9
78886: ARRAY
78887: PUSH
78888: LD_INT 1
78890: ARRAY
78891: PPUSH
78892: LD_VAR 0 2
78896: PUSH
78897: LD_VAR 0 9
78901: ARRAY
78902: PUSH
78903: LD_INT 2
78905: ARRAY
78906: PPUSH
78907: CALL_OW 297
78911: PUSH
78912: LD_INT 6
78914: GREATER
78915: IFFALSE 78958
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78917: LD_VAR 0 4
78921: PPUSH
78922: LD_VAR 0 2
78926: PUSH
78927: LD_VAR 0 9
78931: ARRAY
78932: PUSH
78933: LD_INT 1
78935: ARRAY
78936: PPUSH
78937: LD_VAR 0 2
78941: PUSH
78942: LD_VAR 0 9
78946: ARRAY
78947: PUSH
78948: LD_INT 2
78950: ARRAY
78951: PPUSH
78952: CALL_OW 114
78956: GO 78972
// SetTag ( i , tag ) ;
78958: LD_VAR 0 4
78962: PPUSH
78963: LD_VAR 0 9
78967: PPUSH
78968: CALL_OW 109
// end else
78972: GO 79045
// if enemy then
78974: LD_VAR 0 5
78978: IFFALSE 79045
// begin if GetWeapon ( i ) = ru_time_lapser then
78980: LD_VAR 0 4
78984: PPUSH
78985: CALL_OW 264
78989: PUSH
78990: LD_INT 49
78992: EQUAL
78993: IFFALSE 79021
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78995: LD_VAR 0 4
78999: PPUSH
79000: LD_VAR 0 5
79004: PPUSH
79005: LD_VAR 0 4
79009: PPUSH
79010: CALL_OW 74
79014: PPUSH
79015: CALL_OW 112
79019: GO 79045
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79021: LD_VAR 0 4
79025: PPUSH
79026: LD_VAR 0 5
79030: PPUSH
79031: LD_VAR 0 4
79035: PPUSH
79036: CALL_OW 74
79040: PPUSH
79041: CALL 80120 0 2
// end ; end ;
79045: GO 78621
79047: POP
79048: POP
// end ;
79049: LD_VAR 0 3
79053: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79054: LD_INT 0
79056: PPUSH
79057: PPUSH
79058: PPUSH
// if not unit or IsInUnit ( unit ) then
79059: LD_VAR 0 1
79063: NOT
79064: PUSH
79065: LD_VAR 0 1
79069: PPUSH
79070: CALL_OW 310
79074: OR
79075: IFFALSE 79079
// exit ;
79077: GO 79170
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79079: LD_ADDR_VAR 0 4
79083: PUSH
79084: LD_VAR 0 1
79088: PPUSH
79089: CALL_OW 250
79093: PPUSH
79094: LD_VAR 0 2
79098: PPUSH
79099: LD_INT 1
79101: PPUSH
79102: CALL_OW 272
79106: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79107: LD_ADDR_VAR 0 5
79111: PUSH
79112: LD_VAR 0 1
79116: PPUSH
79117: CALL_OW 251
79121: PPUSH
79122: LD_VAR 0 2
79126: PPUSH
79127: LD_INT 1
79129: PPUSH
79130: CALL_OW 273
79134: ST_TO_ADDR
// if ValidHex ( x , y ) then
79135: LD_VAR 0 4
79139: PPUSH
79140: LD_VAR 0 5
79144: PPUSH
79145: CALL_OW 488
79149: IFFALSE 79170
// ComTurnXY ( unit , x , y ) ;
79151: LD_VAR 0 1
79155: PPUSH
79156: LD_VAR 0 4
79160: PPUSH
79161: LD_VAR 0 5
79165: PPUSH
79166: CALL_OW 118
// end ;
79170: LD_VAR 0 3
79174: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79175: LD_INT 0
79177: PPUSH
79178: PPUSH
// result := false ;
79179: LD_ADDR_VAR 0 3
79183: PUSH
79184: LD_INT 0
79186: ST_TO_ADDR
// if not units then
79187: LD_VAR 0 2
79191: NOT
79192: IFFALSE 79196
// exit ;
79194: GO 79241
// for i in units do
79196: LD_ADDR_VAR 0 4
79200: PUSH
79201: LD_VAR 0 2
79205: PUSH
79206: FOR_IN
79207: IFFALSE 79239
// if See ( side , i ) then
79209: LD_VAR 0 1
79213: PPUSH
79214: LD_VAR 0 4
79218: PPUSH
79219: CALL_OW 292
79223: IFFALSE 79237
// begin result := true ;
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: LD_INT 1
79232: ST_TO_ADDR
// exit ;
79233: POP
79234: POP
79235: GO 79241
// end ;
79237: GO 79206
79239: POP
79240: POP
// end ;
79241: LD_VAR 0 3
79245: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79246: LD_INT 0
79248: PPUSH
79249: PPUSH
79250: PPUSH
79251: PPUSH
// if not unit or not points then
79252: LD_VAR 0 1
79256: NOT
79257: PUSH
79258: LD_VAR 0 2
79262: NOT
79263: OR
79264: IFFALSE 79268
// exit ;
79266: GO 79358
// dist := 99999 ;
79268: LD_ADDR_VAR 0 5
79272: PUSH
79273: LD_INT 99999
79275: ST_TO_ADDR
// for i in points do
79276: LD_ADDR_VAR 0 4
79280: PUSH
79281: LD_VAR 0 2
79285: PUSH
79286: FOR_IN
79287: IFFALSE 79356
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79289: LD_ADDR_VAR 0 6
79293: PUSH
79294: LD_VAR 0 1
79298: PPUSH
79299: LD_VAR 0 4
79303: PUSH
79304: LD_INT 1
79306: ARRAY
79307: PPUSH
79308: LD_VAR 0 4
79312: PUSH
79313: LD_INT 2
79315: ARRAY
79316: PPUSH
79317: CALL_OW 297
79321: ST_TO_ADDR
// if tmpDist < dist then
79322: LD_VAR 0 6
79326: PUSH
79327: LD_VAR 0 5
79331: LESS
79332: IFFALSE 79354
// begin result := i ;
79334: LD_ADDR_VAR 0 3
79338: PUSH
79339: LD_VAR 0 4
79343: ST_TO_ADDR
// dist := tmpDist ;
79344: LD_ADDR_VAR 0 5
79348: PUSH
79349: LD_VAR 0 6
79353: ST_TO_ADDR
// end ; end ;
79354: GO 79286
79356: POP
79357: POP
// end ;
79358: LD_VAR 0 3
79362: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79363: LD_INT 0
79365: PPUSH
// uc_side := side ;
79366: LD_ADDR_OWVAR 20
79370: PUSH
79371: LD_VAR 0 1
79375: ST_TO_ADDR
// uc_nation := 3 ;
79376: LD_ADDR_OWVAR 21
79380: PUSH
79381: LD_INT 3
79383: ST_TO_ADDR
// vc_chassis := 25 ;
79384: LD_ADDR_OWVAR 37
79388: PUSH
79389: LD_INT 25
79391: ST_TO_ADDR
// vc_engine := engine_siberite ;
79392: LD_ADDR_OWVAR 39
79396: PUSH
79397: LD_INT 3
79399: ST_TO_ADDR
// vc_control := control_computer ;
79400: LD_ADDR_OWVAR 38
79404: PUSH
79405: LD_INT 3
79407: ST_TO_ADDR
// vc_weapon := 59 ;
79408: LD_ADDR_OWVAR 40
79412: PUSH
79413: LD_INT 59
79415: ST_TO_ADDR
// result := CreateVehicle ;
79416: LD_ADDR_VAR 0 5
79420: PUSH
79421: CALL_OW 45
79425: ST_TO_ADDR
// SetDir ( result , d ) ;
79426: LD_VAR 0 5
79430: PPUSH
79431: LD_VAR 0 4
79435: PPUSH
79436: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79440: LD_VAR 0 5
79444: PPUSH
79445: LD_VAR 0 2
79449: PPUSH
79450: LD_VAR 0 3
79454: PPUSH
79455: LD_INT 0
79457: PPUSH
79458: CALL_OW 48
// end ;
79462: LD_VAR 0 5
79466: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79467: LD_INT 0
79469: PPUSH
79470: PPUSH
79471: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79472: LD_ADDR_VAR 0 2
79476: PUSH
79477: LD_INT 0
79479: PUSH
79480: LD_INT 0
79482: PUSH
79483: LD_INT 0
79485: PUSH
79486: LD_INT 0
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: LIST
79493: LIST
79494: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79495: LD_VAR 0 1
79499: NOT
79500: PUSH
79501: LD_VAR 0 1
79505: PPUSH
79506: CALL_OW 264
79510: PUSH
79511: LD_INT 12
79513: PUSH
79514: LD_INT 51
79516: PUSH
79517: LD_INT 32
79519: PUSH
79520: LD_INT 89
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: LIST
79527: LIST
79528: IN
79529: NOT
79530: OR
79531: IFFALSE 79535
// exit ;
79533: GO 79633
// for i := 1 to 3 do
79535: LD_ADDR_VAR 0 3
79539: PUSH
79540: DOUBLE
79541: LD_INT 1
79543: DEC
79544: ST_TO_ADDR
79545: LD_INT 3
79547: PUSH
79548: FOR_TO
79549: IFFALSE 79631
// begin tmp := GetCargo ( cargo , i ) ;
79551: LD_ADDR_VAR 0 4
79555: PUSH
79556: LD_VAR 0 1
79560: PPUSH
79561: LD_VAR 0 3
79565: PPUSH
79566: CALL_OW 289
79570: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79571: LD_ADDR_VAR 0 2
79575: PUSH
79576: LD_VAR 0 2
79580: PPUSH
79581: LD_VAR 0 3
79585: PPUSH
79586: LD_VAR 0 4
79590: PPUSH
79591: CALL_OW 1
79595: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79596: LD_ADDR_VAR 0 2
79600: PUSH
79601: LD_VAR 0 2
79605: PPUSH
79606: LD_INT 4
79608: PPUSH
79609: LD_VAR 0 2
79613: PUSH
79614: LD_INT 4
79616: ARRAY
79617: PUSH
79618: LD_VAR 0 4
79622: PLUS
79623: PPUSH
79624: CALL_OW 1
79628: ST_TO_ADDR
// end ;
79629: GO 79548
79631: POP
79632: POP
// end ;
79633: LD_VAR 0 2
79637: RET
// export function Length ( array ) ; begin
79638: LD_INT 0
79640: PPUSH
// result := array + 0 ;
79641: LD_ADDR_VAR 0 2
79645: PUSH
79646: LD_VAR 0 1
79650: PUSH
79651: LD_INT 0
79653: PLUS
79654: ST_TO_ADDR
// end ;
79655: LD_VAR 0 2
79659: RET
// export function PrepareArray ( array ) ; begin
79660: LD_INT 0
79662: PPUSH
// result := array diff 0 ;
79663: LD_ADDR_VAR 0 2
79667: PUSH
79668: LD_VAR 0 1
79672: PUSH
79673: LD_INT 0
79675: DIFF
79676: ST_TO_ADDR
// if not result [ 1 ] then
79677: LD_VAR 0 2
79681: PUSH
79682: LD_INT 1
79684: ARRAY
79685: NOT
79686: IFFALSE 79706
// result := Delete ( result , 1 ) ;
79688: LD_ADDR_VAR 0 2
79692: PUSH
79693: LD_VAR 0 2
79697: PPUSH
79698: LD_INT 1
79700: PPUSH
79701: CALL_OW 3
79705: ST_TO_ADDR
// end ;
79706: LD_VAR 0 2
79710: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79711: LD_INT 0
79713: PPUSH
79714: PPUSH
79715: PPUSH
79716: PPUSH
// sibRocketRange := 25 ;
79717: LD_ADDR_VAR 0 6
79721: PUSH
79722: LD_INT 25
79724: ST_TO_ADDR
// result := false ;
79725: LD_ADDR_VAR 0 4
79729: PUSH
79730: LD_INT 0
79732: ST_TO_ADDR
// for i := 0 to 5 do
79733: LD_ADDR_VAR 0 5
79737: PUSH
79738: DOUBLE
79739: LD_INT 0
79741: DEC
79742: ST_TO_ADDR
79743: LD_INT 5
79745: PUSH
79746: FOR_TO
79747: IFFALSE 79814
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79749: LD_VAR 0 1
79753: PPUSH
79754: LD_VAR 0 5
79758: PPUSH
79759: LD_VAR 0 6
79763: PPUSH
79764: CALL_OW 272
79768: PPUSH
79769: LD_VAR 0 2
79773: PPUSH
79774: LD_VAR 0 5
79778: PPUSH
79779: LD_VAR 0 6
79783: PPUSH
79784: CALL_OW 273
79788: PPUSH
79789: LD_VAR 0 3
79793: PPUSH
79794: CALL_OW 309
79798: IFFALSE 79812
// begin result := true ;
79800: LD_ADDR_VAR 0 4
79804: PUSH
79805: LD_INT 1
79807: ST_TO_ADDR
// exit ;
79808: POP
79809: POP
79810: GO 79816
// end ;
79812: GO 79746
79814: POP
79815: POP
// end ;
79816: LD_VAR 0 4
79820: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
79821: LD_INT 0
79823: PPUSH
79824: PPUSH
79825: PPUSH
// if btype = b_depot then
79826: LD_VAR 0 2
79830: PUSH
79831: LD_INT 0
79833: EQUAL
79834: IFFALSE 79846
// begin result := true ;
79836: LD_ADDR_VAR 0 3
79840: PUSH
79841: LD_INT 1
79843: ST_TO_ADDR
// exit ;
79844: GO 79962
// end ; pom := GetBase ( depot ) ;
79846: LD_ADDR_VAR 0 4
79850: PUSH
79851: LD_VAR 0 1
79855: PPUSH
79856: CALL_OW 274
79860: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
79861: LD_ADDR_VAR 0 5
79865: PUSH
79866: LD_VAR 0 2
79870: PPUSH
79871: LD_VAR 0 1
79875: PPUSH
79876: CALL_OW 248
79880: PPUSH
79881: CALL_OW 450
79885: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
79886: LD_ADDR_VAR 0 3
79890: PUSH
79891: LD_VAR 0 4
79895: PPUSH
79896: LD_INT 1
79898: PPUSH
79899: CALL_OW 275
79903: PUSH
79904: LD_VAR 0 5
79908: PUSH
79909: LD_INT 1
79911: ARRAY
79912: GREATEREQUAL
79913: PUSH
79914: LD_VAR 0 4
79918: PPUSH
79919: LD_INT 2
79921: PPUSH
79922: CALL_OW 275
79926: PUSH
79927: LD_VAR 0 5
79931: PUSH
79932: LD_INT 2
79934: ARRAY
79935: GREATEREQUAL
79936: AND
79937: PUSH
79938: LD_VAR 0 4
79942: PPUSH
79943: LD_INT 3
79945: PPUSH
79946: CALL_OW 275
79950: PUSH
79951: LD_VAR 0 5
79955: PUSH
79956: LD_INT 3
79958: ARRAY
79959: GREATEREQUAL
79960: AND
79961: ST_TO_ADDR
// end ;
79962: LD_VAR 0 3
79966: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79967: LD_INT 0
79969: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79970: LD_VAR 0 1
79974: PPUSH
79975: LD_VAR 0 2
79979: PPUSH
79980: LD_INT 0
79982: PPUSH
79983: LD_INT 0
79985: PPUSH
79986: LD_INT 1
79988: PPUSH
79989: LD_INT 0
79991: PPUSH
79992: CALL_OW 587
// end ;
79996: LD_VAR 0 3
80000: RET
// export function CenterOnNow ( unit ) ; begin
80001: LD_INT 0
80003: PPUSH
// result := IsInUnit ( unit ) ;
80004: LD_ADDR_VAR 0 2
80008: PUSH
80009: LD_VAR 0 1
80013: PPUSH
80014: CALL_OW 310
80018: ST_TO_ADDR
// if not result then
80019: LD_VAR 0 2
80023: NOT
80024: IFFALSE 80036
// result := unit ;
80026: LD_ADDR_VAR 0 2
80030: PUSH
80031: LD_VAR 0 1
80035: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80036: LD_VAR 0 1
80040: PPUSH
80041: CALL_OW 87
// end ;
80045: LD_VAR 0 2
80049: RET
// export function ComMoveHex ( unit , hex ) ; begin
80050: LD_INT 0
80052: PPUSH
// if not hex then
80053: LD_VAR 0 2
80057: NOT
80058: IFFALSE 80062
// exit ;
80060: GO 80115
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80062: LD_VAR 0 2
80066: PUSH
80067: LD_INT 1
80069: ARRAY
80070: PPUSH
80071: LD_VAR 0 2
80075: PUSH
80076: LD_INT 2
80078: ARRAY
80079: PPUSH
80080: CALL_OW 428
80084: IFFALSE 80088
// exit ;
80086: GO 80115
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80088: LD_VAR 0 1
80092: PPUSH
80093: LD_VAR 0 2
80097: PUSH
80098: LD_INT 1
80100: ARRAY
80101: PPUSH
80102: LD_VAR 0 2
80106: PUSH
80107: LD_INT 2
80109: ARRAY
80110: PPUSH
80111: CALL_OW 111
// end ;
80115: LD_VAR 0 3
80119: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80120: LD_INT 0
80122: PPUSH
80123: PPUSH
80124: PPUSH
// if not unit or not enemy then
80125: LD_VAR 0 1
80129: NOT
80130: PUSH
80131: LD_VAR 0 2
80135: NOT
80136: OR
80137: IFFALSE 80141
// exit ;
80139: GO 80265
// x := GetX ( enemy ) ;
80141: LD_ADDR_VAR 0 4
80145: PUSH
80146: LD_VAR 0 2
80150: PPUSH
80151: CALL_OW 250
80155: ST_TO_ADDR
// y := GetY ( enemy ) ;
80156: LD_ADDR_VAR 0 5
80160: PUSH
80161: LD_VAR 0 2
80165: PPUSH
80166: CALL_OW 251
80170: ST_TO_ADDR
// if ValidHex ( x , y ) then
80171: LD_VAR 0 4
80175: PPUSH
80176: LD_VAR 0 5
80180: PPUSH
80181: CALL_OW 488
80185: IFFALSE 80265
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80187: LD_VAR 0 2
80191: PPUSH
80192: CALL_OW 247
80196: PUSH
80197: LD_INT 3
80199: PUSH
80200: LD_INT 2
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: IN
80207: PUSH
80208: LD_VAR 0 1
80212: PPUSH
80213: CALL_OW 255
80217: PPUSH
80218: LD_VAR 0 2
80222: PPUSH
80223: CALL_OW 292
80227: OR
80228: IFFALSE 80246
// ComAttackUnit ( unit , enemy ) else
80230: LD_VAR 0 1
80234: PPUSH
80235: LD_VAR 0 2
80239: PPUSH
80240: CALL_OW 115
80244: GO 80265
// ComAgressiveMove ( unit , x , y ) ;
80246: LD_VAR 0 1
80250: PPUSH
80251: LD_VAR 0 4
80255: PPUSH
80256: LD_VAR 0 5
80260: PPUSH
80261: CALL_OW 114
// end ;
80265: LD_VAR 0 3
80269: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80270: LD_INT 0
80272: PPUSH
80273: PPUSH
80274: PPUSH
// list := AreaToList ( area , 0 ) ;
80275: LD_ADDR_VAR 0 5
80279: PUSH
80280: LD_VAR 0 1
80284: PPUSH
80285: LD_INT 0
80287: PPUSH
80288: CALL_OW 517
80292: ST_TO_ADDR
// if not list then
80293: LD_VAR 0 5
80297: NOT
80298: IFFALSE 80302
// exit ;
80300: GO 80432
// if all then
80302: LD_VAR 0 2
80306: IFFALSE 80394
// begin for i := 1 to list [ 1 ] do
80308: LD_ADDR_VAR 0 4
80312: PUSH
80313: DOUBLE
80314: LD_INT 1
80316: DEC
80317: ST_TO_ADDR
80318: LD_VAR 0 5
80322: PUSH
80323: LD_INT 1
80325: ARRAY
80326: PUSH
80327: FOR_TO
80328: IFFALSE 80390
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80330: LD_ADDR_VAR 0 3
80334: PUSH
80335: LD_VAR 0 3
80339: PPUSH
80340: LD_VAR 0 3
80344: PUSH
80345: LD_INT 1
80347: PLUS
80348: PPUSH
80349: LD_VAR 0 5
80353: PUSH
80354: LD_INT 1
80356: ARRAY
80357: PUSH
80358: LD_VAR 0 4
80362: ARRAY
80363: PUSH
80364: LD_VAR 0 5
80368: PUSH
80369: LD_INT 2
80371: ARRAY
80372: PUSH
80373: LD_VAR 0 4
80377: ARRAY
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PPUSH
80383: CALL_OW 1
80387: ST_TO_ADDR
80388: GO 80327
80390: POP
80391: POP
// exit ;
80392: GO 80432
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80394: LD_ADDR_VAR 0 3
80398: PUSH
80399: LD_VAR 0 5
80403: PUSH
80404: LD_INT 1
80406: ARRAY
80407: PUSH
80408: LD_INT 1
80410: ARRAY
80411: PUSH
80412: LD_VAR 0 5
80416: PUSH
80417: LD_INT 2
80419: ARRAY
80420: PUSH
80421: LD_INT 1
80423: ARRAY
80424: PUSH
80425: EMPTY
80426: LIST
80427: LIST
80428: PUSH
80429: EMPTY
80430: LIST
80431: ST_TO_ADDR
// end ;
80432: LD_VAR 0 3
80436: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80437: LD_INT 0
80439: PPUSH
80440: PPUSH
// list := AreaToList ( area , 0 ) ;
80441: LD_ADDR_VAR 0 4
80445: PUSH
80446: LD_VAR 0 1
80450: PPUSH
80451: LD_INT 0
80453: PPUSH
80454: CALL_OW 517
80458: ST_TO_ADDR
// if not list then
80459: LD_VAR 0 4
80463: NOT
80464: IFFALSE 80468
// exit ;
80466: GO 80509
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80468: LD_ADDR_VAR 0 3
80472: PUSH
80473: LD_VAR 0 4
80477: PUSH
80478: LD_INT 1
80480: ARRAY
80481: PUSH
80482: LD_INT 1
80484: ARRAY
80485: PUSH
80486: LD_VAR 0 4
80490: PUSH
80491: LD_INT 2
80493: ARRAY
80494: PUSH
80495: LD_INT 1
80497: ARRAY
80498: PUSH
80499: LD_VAR 0 2
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: LIST
80508: ST_TO_ADDR
// end ;
80509: LD_VAR 0 3
80513: RET
// export function First ( array ) ; begin
80514: LD_INT 0
80516: PPUSH
// if not array then
80517: LD_VAR 0 1
80521: NOT
80522: IFFALSE 80526
// exit ;
80524: GO 80540
// result := array [ 1 ] ;
80526: LD_ADDR_VAR 0 2
80530: PUSH
80531: LD_VAR 0 1
80535: PUSH
80536: LD_INT 1
80538: ARRAY
80539: ST_TO_ADDR
// end ;
80540: LD_VAR 0 2
80544: RET
// export function Last ( array ) ; begin
80545: LD_INT 0
80547: PPUSH
// if not array then
80548: LD_VAR 0 1
80552: NOT
80553: IFFALSE 80557
// exit ;
80555: GO 80573
// result := array [ array ] ;
80557: LD_ADDR_VAR 0 2
80561: PUSH
80562: LD_VAR 0 1
80566: PUSH
80567: LD_VAR 0 1
80571: ARRAY
80572: ST_TO_ADDR
// end ;
80573: LD_VAR 0 2
80577: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80578: LD_INT 0
80580: PPUSH
80581: PPUSH
// result := [ ] ;
80582: LD_ADDR_VAR 0 5
80586: PUSH
80587: EMPTY
80588: ST_TO_ADDR
// if not array then
80589: LD_VAR 0 1
80593: NOT
80594: IFFALSE 80598
// exit ;
80596: GO 80710
// for i := 1 to array do
80598: LD_ADDR_VAR 0 6
80602: PUSH
80603: DOUBLE
80604: LD_INT 1
80606: DEC
80607: ST_TO_ADDR
80608: LD_VAR 0 1
80612: PUSH
80613: FOR_TO
80614: IFFALSE 80708
// if array [ i ] [ index ] = value then
80616: LD_VAR 0 1
80620: PUSH
80621: LD_VAR 0 6
80625: ARRAY
80626: PUSH
80627: LD_VAR 0 2
80631: ARRAY
80632: PUSH
80633: LD_VAR 0 3
80637: EQUAL
80638: IFFALSE 80706
// begin if indexColumn then
80640: LD_VAR 0 4
80644: IFFALSE 80680
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80646: LD_ADDR_VAR 0 5
80650: PUSH
80651: LD_VAR 0 5
80655: PPUSH
80656: LD_VAR 0 1
80660: PUSH
80661: LD_VAR 0 6
80665: ARRAY
80666: PUSH
80667: LD_VAR 0 4
80671: ARRAY
80672: PPUSH
80673: CALL 75898 0 2
80677: ST_TO_ADDR
80678: GO 80706
// result := Join ( result , array [ i ] ) ;
80680: LD_ADDR_VAR 0 5
80684: PUSH
80685: LD_VAR 0 5
80689: PPUSH
80690: LD_VAR 0 1
80694: PUSH
80695: LD_VAR 0 6
80699: ARRAY
80700: PPUSH
80701: CALL 75898 0 2
80705: ST_TO_ADDR
// end ;
80706: GO 80613
80708: POP
80709: POP
// end ;
80710: LD_VAR 0 5
80714: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80715: LD_INT 0
80717: PPUSH
// if not vehicles or not parkingPoint then
80718: LD_VAR 0 1
80722: NOT
80723: PUSH
80724: LD_VAR 0 2
80728: NOT
80729: OR
80730: IFFALSE 80734
// exit ;
80732: GO 80832
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80734: LD_ADDR_VAR 0 1
80738: PUSH
80739: LD_VAR 0 1
80743: PPUSH
80744: LD_INT 50
80746: PUSH
80747: EMPTY
80748: LIST
80749: PUSH
80750: LD_INT 3
80752: PUSH
80753: LD_INT 92
80755: PUSH
80756: LD_VAR 0 2
80760: PUSH
80761: LD_INT 1
80763: ARRAY
80764: PUSH
80765: LD_VAR 0 2
80769: PUSH
80770: LD_INT 2
80772: ARRAY
80773: PUSH
80774: LD_INT 8
80776: PUSH
80777: EMPTY
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: PUSH
80783: EMPTY
80784: LIST
80785: LIST
80786: PUSH
80787: EMPTY
80788: LIST
80789: LIST
80790: PPUSH
80791: CALL_OW 72
80795: ST_TO_ADDR
// if not vehicles then
80796: LD_VAR 0 1
80800: NOT
80801: IFFALSE 80805
// exit ;
80803: GO 80832
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
80805: LD_VAR 0 1
80809: PPUSH
80810: LD_VAR 0 2
80814: PUSH
80815: LD_INT 1
80817: ARRAY
80818: PPUSH
80819: LD_VAR 0 2
80823: PUSH
80824: LD_INT 2
80826: ARRAY
80827: PPUSH
80828: CALL_OW 111
// end ;
80832: LD_VAR 0 3
80836: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
80837: LD_INT 0
80839: PPUSH
80840: PPUSH
80841: PPUSH
// if not side or not area then
80842: LD_VAR 0 1
80846: NOT
80847: PUSH
80848: LD_VAR 0 2
80852: NOT
80853: OR
80854: IFFALSE 80858
// exit ;
80856: GO 80977
// tmp := AreaToList ( area , 0 ) ;
80858: LD_ADDR_VAR 0 5
80862: PUSH
80863: LD_VAR 0 2
80867: PPUSH
80868: LD_INT 0
80870: PPUSH
80871: CALL_OW 517
80875: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
80876: LD_ADDR_VAR 0 4
80880: PUSH
80881: DOUBLE
80882: LD_INT 1
80884: DEC
80885: ST_TO_ADDR
80886: LD_VAR 0 5
80890: PUSH
80891: LD_INT 1
80893: ARRAY
80894: PUSH
80895: FOR_TO
80896: IFFALSE 80975
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
80898: LD_VAR 0 5
80902: PUSH
80903: LD_INT 1
80905: ARRAY
80906: PUSH
80907: LD_VAR 0 4
80911: ARRAY
80912: PPUSH
80913: LD_VAR 0 5
80917: PUSH
80918: LD_INT 2
80920: ARRAY
80921: PUSH
80922: LD_VAR 0 4
80926: ARRAY
80927: PPUSH
80928: CALL_OW 351
80932: IFFALSE 80973
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
80934: LD_VAR 0 5
80938: PUSH
80939: LD_INT 1
80941: ARRAY
80942: PUSH
80943: LD_VAR 0 4
80947: ARRAY
80948: PPUSH
80949: LD_VAR 0 5
80953: PUSH
80954: LD_INT 2
80956: ARRAY
80957: PUSH
80958: LD_VAR 0 4
80962: ARRAY
80963: PPUSH
80964: LD_VAR 0 1
80968: PPUSH
80969: CALL_OW 244
// end ;
80973: GO 80895
80975: POP
80976: POP
// end ; end_of_file
80977: LD_VAR 0 3
80981: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80982: LD_VAR 0 1
80986: PUSH
80987: LD_INT 200
80989: DOUBLE
80990: GREATEREQUAL
80991: IFFALSE 80999
80993: LD_INT 299
80995: DOUBLE
80996: LESSEQUAL
80997: IFTRUE 81001
80999: GO 81033
81001: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81002: LD_VAR 0 1
81006: PPUSH
81007: LD_VAR 0 2
81011: PPUSH
81012: LD_VAR 0 3
81016: PPUSH
81017: LD_VAR 0 4
81021: PPUSH
81022: LD_VAR 0 5
81026: PPUSH
81027: CALL 33467 0 5
81031: GO 81110
81033: LD_INT 300
81035: DOUBLE
81036: GREATEREQUAL
81037: IFFALSE 81045
81039: LD_INT 399
81041: DOUBLE
81042: LESSEQUAL
81043: IFTRUE 81047
81045: GO 81109
81047: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81048: LD_VAR 0 1
81052: PPUSH
81053: LD_VAR 0 2
81057: PPUSH
81058: LD_VAR 0 3
81062: PPUSH
81063: LD_VAR 0 4
81067: PPUSH
81068: LD_VAR 0 5
81072: PPUSH
81073: LD_VAR 0 6
81077: PPUSH
81078: LD_VAR 0 7
81082: PPUSH
81083: LD_VAR 0 8
81087: PPUSH
81088: LD_VAR 0 9
81092: PPUSH
81093: LD_VAR 0 10
81097: PPUSH
81098: LD_VAR 0 11
81102: PPUSH
81103: CALL 29455 0 11
81107: GO 81110
81109: POP
// end ;
81110: PPOPN 11
81112: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81113: LD_VAR 0 1
81117: PPUSH
81118: LD_VAR 0 2
81122: PPUSH
81123: LD_VAR 0 3
81127: PPUSH
81128: LD_VAR 0 4
81132: PPUSH
81133: LD_VAR 0 5
81137: PPUSH
81138: CALL 32932 0 5
// end ; end_of_file
81142: PPOPN 5
81144: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81145: LD_VAR 0 1
81149: PPUSH
81150: LD_VAR 0 2
81154: PPUSH
81155: LD_VAR 0 3
81159: PPUSH
81160: LD_VAR 0 4
81164: PPUSH
81165: LD_VAR 0 5
81169: PPUSH
81170: LD_VAR 0 6
81174: PPUSH
81175: CALL 17107 0 6
// end ;
81179: PPOPN 6
81181: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81182: LD_INT 0
81184: PPUSH
// begin if not units then
81185: LD_VAR 0 1
81189: NOT
81190: IFFALSE 81194
// exit ;
81192: GO 81194
// end ;
81194: PPOPN 7
81196: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81197: CALL 16994 0 0
// end ;
81201: PPOPN 1
81203: END
