// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10416 0 0
// PrepareRussianCommander ;
 172: CALL 11872 0 0
// PrepareSouthBase ;
 176: CALL 11955 0 0
// PrepareNorthBase ;
 180: CALL 12294 0 0
// PrepareOtherRussians ;
 184: CALL 12660 0 0
// PrepareHeroes ;
 188: CALL 10731 0 0
// PrepareLisSquad ;
 192: CALL 11059 0 0
// PrepareOtherAmericans ;
 196: CALL 11404 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3196
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 999
2050: PUSH
2051: LD_INT 999
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 1
2099: PUSH
2100: LD_EXP 2
2104: PUSH
2105: LD_EXP 3
2109: PUSH
2110: LD_EXP 4
2114: PUSH
2115: LD_EXP 5
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: DIFF
2127: ST_TO_ADDR
// PrepareDeadSoldiers ;
2128: CALL 11562 0 0
// spotCorpses = 1 ;
2132: LD_ADDR_EXP 32
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2140: LD_INT 70
2142: PPUSH
2143: CALL_OW 67
// InGameOn ;
2147: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2151: LD_INT 23
2153: PPUSH
2154: LD_INT 12
2156: PPUSH
2157: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_VAR 0 2
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PUSH
2175: LD_INT 2
2177: ARRAY
2178: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2179: LD_ADDR_VAR 0 1
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 21
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: LD_EXP 1
2217: PUSH
2218: LD_EXP 5
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: DIFF
2227: PUSH
2228: FOR_IN
2229: IFFALSE 2280
// if IsOK ( i ) then
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 302
2240: IFFALSE 2278
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: LD_VAR 0 2
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 299
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: ADD
2277: ST_TO_ADDR
2278: GO 2228
2280: POP
2281: POP
// for i = 2 to distanceTab do
2282: LD_ADDR_VAR 0 1
2286: PUSH
2287: DOUBLE
2288: LD_INT 2
2290: DEC
2291: ST_TO_ADDR
2292: LD_VAR 0 2
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2344
// if distanceTab [ i ] [ 2 ] < min then
2300: LD_VAR 0 2
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: PUSH
2311: LD_INT 2
2313: ARRAY
2314: PUSH
2315: LD_VAR 0 3
2319: LESS
2320: IFFALSE 2342
// min = distanceTab [ i ] [ 2 ] ;
2322: LD_ADDR_VAR 0 3
2326: PUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_VAR 0 1
2336: ARRAY
2337: PUSH
2338: LD_INT 2
2340: ARRAY
2341: ST_TO_ADDR
2342: GO 2297
2344: POP
2345: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2346: LD_ADDR_VAR 0 1
2350: PUSH
2351: LD_INT 22
2353: PUSH
2354: LD_INT 1
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 21
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 69
2379: PUSH
2380: LD_EXP 1
2384: PUSH
2385: EMPTY
2386: LIST
2387: DIFF
2388: PUSH
2389: FOR_IN
2390: IFFALSE 2460
// begin ComMoveToArea ( i , DeadCutscene ) ;
2392: LD_VAR 0 1
2396: PPUSH
2397: LD_INT 28
2399: PPUSH
2400: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2404: LD_EXP 1
2408: PPUSH
2409: LD_INT 30
2411: PPUSH
2412: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_INT 23
2423: PPUSH
2424: LD_INT 11
2426: PPUSH
2427: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2431: LD_EXP 1
2435: PPUSH
2436: LD_INT 23
2438: PPUSH
2439: LD_INT 11
2441: PPUSH
2442: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2446: LD_EXP 34
2450: PPUSH
2451: LD_INT 250
2453: PPUSH
2454: CALL_OW 234
// end ;
2458: GO 2389
2460: POP
2461: POP
// for i = 2 to distanceTab do
2462: LD_ADDR_VAR 0 1
2466: PUSH
2467: DOUBLE
2468: LD_INT 2
2470: DEC
2471: ST_TO_ADDR
2472: LD_VAR 0 2
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2864
// begin if distanceTab [ i ] [ 2 ] = min then
2480: LD_VAR 0 2
2484: PUSH
2485: LD_VAR 0 1
2489: ARRAY
2490: PUSH
2491: LD_INT 2
2493: ARRAY
2494: PUSH
2495: LD_VAR 0 3
2499: EQUAL
2500: IFFALSE 2862
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2502: LD_VAR 0 2
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PUSH
2513: LD_INT 1
2515: ARRAY
2516: PUSH
2517: LD_EXP 2
2521: EQUAL
2522: IFFALSE 2536
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2524: LD_EXP 2
2528: PPUSH
2529: LD_STRING DCorpses-Bobby-1
2531: PPUSH
2532: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_VAR 0 1
2545: ARRAY
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PUSH
2551: LD_EXP 3
2555: EQUAL
2556: IFFALSE 2570
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2558: LD_EXP 3
2562: PPUSH
2563: LD_STRING DCorpses-Cyrus-1
2565: PPUSH
2566: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2570: LD_VAR 0 2
2574: PUSH
2575: LD_VAR 0 1
2579: ARRAY
2580: PUSH
2581: LD_INT 1
2583: ARRAY
2584: PUSH
2585: LD_EXP 4
2589: EQUAL
2590: IFFALSE 2604
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2592: LD_EXP 4
2596: PPUSH
2597: LD_STRING DCorpses-Lisa-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 1
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-Sol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 1
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 2
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-FSol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 1
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-Sol1-1
2782: PPUSH
2783: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2787: LD_VAR 0 2
2791: PUSH
2792: LD_VAR 0 1
2796: ARRAY
2797: PUSH
2798: LD_INT 1
2800: ARRAY
2801: PUSH
2802: LD_VAR 0 4
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: EQUAL
2811: PUSH
2812: LD_VAR 0 4
2816: PUSH
2817: LD_INT 2
2819: ARRAY
2820: PPUSH
2821: CALL_OW 258
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: AND
2830: IFFALSE 2848
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2832: LD_VAR 0 4
2836: PUSH
2837: LD_INT 2
2839: ARRAY
2840: PPUSH
2841: LD_STRING DCorpses-FSol1-1
2843: PPUSH
2844: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2848: LD_EXP 34
2852: PPUSH
2853: LD_INT 150
2855: PPUSH
2856: CALL_OW 234
// break ;
2860: GO 2864
// end ; end ;
2862: GO 2477
2864: POP
2865: POP
// repeat wait ( 0 0$1 ) ;
2866: LD_INT 35
2868: PPUSH
2869: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2873: LD_ADDR_VAR 0 1
2877: PUSH
2878: LD_INT 22
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 1
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_EXP 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: DIFF
2915: PUSH
2916: FOR_IN
2917: IFFALSE 2987
// begin ComMoveToArea ( i , DeadCutscene ) ;
2919: LD_VAR 0 1
2923: PPUSH
2924: LD_INT 28
2926: PPUSH
2927: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2931: LD_EXP 1
2935: PPUSH
2936: LD_INT 30
2938: PPUSH
2939: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_INT 23
2950: PPUSH
2951: LD_INT 11
2953: PPUSH
2954: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_INT 23
2965: PPUSH
2966: LD_INT 11
2968: PPUSH
2969: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2973: LD_EXP 34
2977: PPUSH
2978: LD_INT 250
2980: PPUSH
2981: CALL_OW 234
// end ;
2985: GO 2916
2987: POP
2988: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2989: LD_EXP 1
2993: PPUSH
2994: LD_INT 30
2996: PPUSH
2997: CALL_OW 308
3001: IFFALSE 2866
// wait ( 0 0$1 ) ;
3003: LD_INT 35
3005: PPUSH
3006: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3010: LD_EXP 1
3014: PPUSH
3015: LD_STRING DCorpses-JMM-1
3017: PPUSH
3018: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3022: LD_EXP 34
3026: PPUSH
3027: LD_INT 100
3029: PPUSH
3030: CALL_OW 234
// if IsOK ( Khatam ) then
3034: LD_EXP 5
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3180
// begin repeat wait ( 0 0$1 ) ;
3045: LD_INT 35
3047: PPUSH
3048: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3066: LD_EXP 5
3070: PPUSH
3071: LD_EXP 34
3075: PPUSH
3076: CALL_OW 296
3080: PUSH
3081: LD_INT 2
3083: LESS
3084: IFFALSE 3045
// spotCorpses = 0 ;
3086: LD_ADDR_EXP 32
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3094: LD_EXP 34
3098: PPUSH
3099: LD_INT 10
3101: PPUSH
3102: CALL_OW 234
// wait ( 0 0$3 ) ;
3106: LD_INT 105
3108: PPUSH
3109: CALL_OW 67
// KillUnit ( DyingSold ) ;
3113: LD_EXP 34
3117: PPUSH
3118: CALL_OW 66
// wait ( 0 0$1 ) ;
3122: LD_INT 35
3124: PPUSH
3125: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3129: LD_EXP 1
3133: PUSH
3134: LD_EXP 5
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3147: LD_EXP 5
3151: PPUSH
3152: LD_EXP 1
3156: PPUSH
3157: CALL_OW 119
// wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3168: LD_EXP 5
3172: PPUSH
3173: LD_STRING DCorpses-Khat-1
3175: PPUSH
3176: CALL_OW 88
// end ; InGameOff ;
3180: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING DCorpses-JMM-2
3191: PPUSH
3192: CALL_OW 88
// end ;
3196: PPOPN 4
3198: END
// every 0 0$1 trigger spotCorpses = 1 do
3199: LD_EXP 32
3203: PUSH
3204: LD_INT 1
3206: EQUAL
3207: IFFALSE 3225
3209: GO 3211
3211: DISABLE
// begin enable ;
3212: ENABLE
// SetLives ( DyingSold , 10 ) ;
3213: LD_EXP 34
3217: PPUSH
3218: LD_INT 10
3220: PPUSH
3221: CALL_OW 234
// end ;
3225: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3226: LD_INT 8
3228: PPUSH
3229: LD_INT 22
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 70
3243: PUSH
3244: LD_INT 0
3246: GREATER
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PPUSH
3263: LD_EXP 7
3267: PPUSH
3268: CALL_OW 74
3272: PPUSH
3273: LD_EXP 7
3277: PPUSH
3278: CALL_OW 296
3282: PUSH
3283: LD_INT 15
3285: LESS
3286: OR
3287: IFFALSE 3511
3289: GO 3291
3291: DISABLE
3292: LD_INT 0
3294: PPUSH
// begin InGameOn ;
3295: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3299: LD_EXP 7
3303: PPUSH
3304: LD_INT 250
3306: PPUSH
3307: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3311: LD_EXP 6
3315: PPUSH
3316: LD_INT 750
3318: PPUSH
3319: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3323: LD_INT 3
3325: PPUSH
3326: LD_INT 4
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3339: LD_EXP 6
3343: PUSH
3344: LD_EXP 7
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PPUSH
3353: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3357: LD_ADDR_VAR 0 1
3361: PUSH
3362: LD_INT 9
3364: PPUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 70
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3394
// ComFree ( i ) ;
3383: LD_VAR 0 1
3387: PPUSH
3388: CALL_OW 139
3392: GO 3380
3394: POP
3395: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3396: LD_ADDR_VAR 0 1
3400: PUSH
3401: LD_INT 9
3403: PPUSH
3404: LD_INT 22
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PPUSH
3414: CALL_OW 70
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3438
// AddComAttackUnit ( i , Brian ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_EXP 6
3431: PPUSH
3432: CALL_OW 175
3436: GO 3419
3438: POP
3439: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PUSH
3460: FOR_IN
3461: IFFALSE 3474
// ComFree ( i ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 139
3472: GO 3460
3474: POP
3475: POP
// wait ( 0 0$1 ) ;
3476: LD_INT 35
3478: PPUSH
3479: CALL_OW 67
// InGameOff ;
3483: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3487: LD_EXP 6
3491: PPUSH
3492: LD_STRING DF-Sol1-1
3494: PPUSH
3495: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3499: LD_EXP 1
3503: PPUSH
3504: LD_STRING DF-JMM-1
3506: PPUSH
3507: CALL_OW 88
// end ;
3511: PPOPN 1
3513: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3514: LD_INT 19
3516: PPUSH
3517: LD_INT 22
3519: PUSH
3520: LD_INT 3
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 70
3531: PUSH
3532: LD_INT 0
3534: EQUAL
3535: IFFALSE 3648
3537: GO 3539
3539: DISABLE
// begin if not IsDead ( Brian ) then
3540: LD_EXP 6
3544: PPUSH
3545: CALL_OW 301
3549: NOT
3550: IFFALSE 3564
// SetSide ( Brian , 1 ) ;
3552: LD_EXP 6
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: CALL_OW 235
// if not IsDead ( Jerry ) then
3564: LD_EXP 7
3568: PPUSH
3569: CALL_OW 301
3573: NOT
3574: IFFALSE 3588
// SetSide ( Jerry , 1 ) ;
3576: LD_EXP 7
3580: PPUSH
3581: LD_INT 1
3583: PPUSH
3584: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3588: LD_INT 22
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 25
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 69
3616: PUSH
3617: LD_INT 0
3619: GREATER
3620: IFFALSE 3636
// begin Say ( JMM , DFa-JMM-1 ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1
3629: PPUSH
3630: CALL_OW 88
// end else
3634: GO 3648
// begin Say ( JMM , DFa-JMM-1a ) ;
3636: LD_EXP 1
3640: PPUSH
3641: LD_STRING DFa-JMM-1a
3643: PPUSH
3644: CALL_OW 88
// end ; end ;
3648: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3649: LD_INT 19
3651: PPUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PPUSH
3662: CALL_OW 70
3666: PUSH
3667: LD_INT 0
3669: EQUAL
3670: PUSH
3671: LD_EXP 6
3675: PPUSH
3676: CALL_OW 302
3680: NOT
3681: AND
3682: IFFALSE 3768
3684: GO 3686
3686: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3694: LD_EXP 6
3698: PPUSH
3699: CALL_OW 256
3703: PUSH
3704: LD_INT 250
3706: GREATER
3707: IFFALSE 3687
// Say ( Brian , DFb-Sol1-1 ) ;
3709: LD_EXP 6
3713: PPUSH
3714: LD_STRING DFb-Sol1-1
3716: PPUSH
3717: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3721: LD_EXP 6
3725: PPUSH
3726: LD_INT 78
3728: PPUSH
3729: LD_INT 74
3731: PPUSH
3732: CALL_OW 111
// if IsDead ( Jerry ) then
3736: LD_EXP 7
3740: PPUSH
3741: CALL_OW 301
3745: IFFALSE 3761
// Say ( Brian , DFb-Sol1-1a ) else
3747: LD_EXP 6
3751: PPUSH
3752: LD_STRING DFb-Sol1-1a
3754: PPUSH
3755: CALL_OW 88
3759: GO 3768
// SetAchievement ( ACH_JERRY ) ;
3761: LD_STRING ACH_JERRY
3763: PPUSH
3764: CALL_OW 543
// end ;
3768: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3769: LD_INT 22
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 21
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: PUSH
3798: LD_INT 0
3800: EQUAL
3801: IFFALSE 3889
3803: GO 3805
3805: DISABLE
3806: LD_INT 0
3808: PPUSH
// begin enable ;
3809: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3810: LD_ADDR_VAR 0 1
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 3
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 21
3827: PUSH
3828: LD_INT 3
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 31
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 69
3854: PUSH
3855: FOR_IN
3856: IFFALSE 3887
// begin if See ( 1 , i ) then
3858: LD_INT 1
3860: PPUSH
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 292
3870: IFFALSE 3885
// begin disable ;
3872: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3873: LD_EXP 1
3877: PPUSH
3878: LD_STRING DX1-JMM-1
3880: PPUSH
3881: CALL_OW 88
// end ; end ;
3885: GO 3855
3887: POP
3888: POP
// end ;
3889: PPOPN 1
3891: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 11
3897: PPUSH
3898: CALL_OW 294
3902: IFFALSE 4316
3904: GO 3906
3906: DISABLE
3907: LD_INT 0
3909: PPUSH
3910: PPUSH
// begin DialogueOn ;
3911: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3915: LD_INT 11
3917: PPUSH
3918: LD_INT 22
3920: PUSH
3921: LD_INT 3
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: LD_INT 21
3930: PUSH
3931: LD_INT 1
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PPUSH
3942: CALL_OW 70
3946: PUSH
3947: LD_INT 1
3949: ARRAY
3950: PPUSH
3951: LD_STRING DX3-Rus1-1
3953: PPUSH
3954: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3958: LD_EXP 1
3962: PPUSH
3963: LD_STRING DX3-JMM-1
3965: PPUSH
3966: CALL_OW 88
// DialogueOff ;
3970: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3974: LD_ADDR_VAR 0 1
3978: PUSH
3979: LD_INT 11
3981: PPUSH
3982: LD_INT 22
3984: PUSH
3985: LD_INT 3
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 21
3994: PUSH
3995: LD_INT 1
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: PUSH
4011: FOR_IN
4012: IFFALSE 4032
// southBaseDefenders = southBaseDefenders ^ i ;
4014: LD_ADDR_EXP 25
4018: PUSH
4019: LD_EXP 25
4023: PUSH
4024: LD_VAR 0 1
4028: ADD
4029: ST_TO_ADDR
4030: GO 4011
4032: POP
4033: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4034: LD_INT 455
4036: PUSH
4037: LD_INT 420
4039: PUSH
4040: LD_INT 315
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: LD_OWVAR 67
4052: ARRAY
4053: PPUSH
4054: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4058: LD_INT 22
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 25
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: PPUSH
4098: CALL_OW 122
// wait ( 0 0$1 ) ;
4102: LD_INT 35
4104: PPUSH
4105: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4109: LD_INT 35
4111: PPUSH
4112: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4116: LD_ADDR_VAR 0 1
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: FOR_IN
4158: IFFALSE 4228
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4160: LD_ADDR_VAR 0 2
4164: PUSH
4165: LD_INT 22
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 21
4177: PUSH
4178: LD_INT 1
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 25
4187: PUSH
4188: LD_INT 3
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 69
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4224
// begin ComEnterUnit ( j , i ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 120
// end ;
4222: GO 4205
4224: POP
4225: POP
// end ;
4226: GO 4157
4228: POP
4229: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4230: LD_INT 22
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 21
4242: PUSH
4243: LD_INT 2
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 58
4252: PUSH
4253: EMPTY
4254: LIST
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 69
4265: PUSH
4266: LD_INT 0
4268: EQUAL
4269: PUSH
4270: LD_INT 22
4272: PUSH
4273: LD_INT 3
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: LD_INT 21
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 25
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 69
4309: PUSH
4310: LD_INT 0
4312: EQUAL
4313: OR
4314: IFFALSE 4109
// end ;
4316: PPOPN 2
4318: END
// every 0 0$1 do var i , tmp ;
4319: GO 4321
4321: DISABLE
4322: LD_INT 0
4324: PPUSH
4325: PPUSH
// begin enable ;
4326: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4327: LD_ADDR_VAR 0 2
4331: PUSH
4332: LD_INT 22
4334: PUSH
4335: LD_INT 1
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 21
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PPUSH
4356: CALL_OW 69
4360: ST_TO_ADDR
// for i in tmp do
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_VAR 0 2
4370: PUSH
4371: FOR_IN
4372: IFFALSE 4494
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4374: LD_VAR 0 1
4378: PPUSH
4379: LD_INT 5
4381: PPUSH
4382: CALL_OW 296
4386: PUSH
4387: LD_INT 4
4389: LESS
4390: PUSH
4391: LD_VAR 0 1
4395: PPUSH
4396: LD_INT 4
4398: PPUSH
4399: CALL_OW 296
4403: PUSH
4404: LD_INT 4
4406: LESS
4407: OR
4408: IFFALSE 4492
// begin disable ;
4410: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4411: LD_INT 5
4413: PUSH
4414: LD_INT 4
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PPUSH
4421: CALL_OW 85
// if IsOK ( Bobby ) then
4425: LD_EXP 2
4429: PPUSH
4430: CALL_OW 302
4434: IFFALSE 4471
// begin DialogueOn ;
4436: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4440: LD_EXP 2
4444: PPUSH
4445: LD_STRING DX2-Bobby-1
4447: PPUSH
4448: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1a
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end else
4469: GO 4492
// begin DialogueOn ;
4471: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4475: LD_EXP 1
4479: PPUSH
4480: LD_STRING DX2-JMM-1
4482: PPUSH
4483: CALL_OW 88
// DialogueOff ;
4487: CALL_OW 7
// disable ;
4491: DISABLE
// end ; end ; end ;
4492: GO 4371
4494: POP
4495: POP
// end ;
4496: PPOPN 2
4498: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4499: LD_INT 22
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 23
4511: PUSH
4512: LD_INT 3
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 21
4521: PUSH
4522: LD_INT 2
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 34
4531: PUSH
4532: LD_INT 42
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PPUSH
4545: CALL_OW 69
4549: IFFALSE 4970
4551: GO 4553
4553: DISABLE
4554: LD_INT 0
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4561: LD_ADDR_VAR 0 1
4565: PUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 23
4578: PUSH
4579: LD_INT 3
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 21
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 42
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: PPUSH
4612: CALL_OW 69
4616: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 22
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 21
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 26
4644: PUSH
4645: LD_INT 1
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: PUSH
4662: LD_EXP 1
4666: PUSH
4667: LD_EXP 3
4671: PUSH
4672: LD_EXP 2
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: DIFF
4682: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 22
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 26
4710: PUSH
4711: LD_INT 2
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: PUSH
4728: LD_EXP 4
4732: PUSH
4733: EMPTY
4734: LIST
4735: DIFF
4736: ST_TO_ADDR
// if not tmp then
4737: LD_VAR 0 1
4741: NOT
4742: IFFALSE 4746
// exit ;
4744: GO 4970
// DialogueOn ;
4746: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_VAR 0 1
4759: PUSH
4760: LD_INT 1
4762: ARRAY
4763: PPUSH
4764: CALL_OW 311
4768: ST_TO_ADDR
// if not speaker then
4769: LD_VAR 0 2
4773: NOT
4774: IFFALSE 4778
// exit ;
4776: GO 4970
// if speaker = JMM then
4778: LD_VAR 0 2
4782: PUSH
4783: LD_EXP 1
4787: EQUAL
4788: IFFALSE 4822
// begin if Lisa then
4790: LD_EXP 4
4794: IFFALSE 4808
// Say ( Lisa , DX2b-Lisa-1 ) ;
4796: LD_EXP 4
4800: PPUSH
4801: LD_STRING DX2b-Lisa-1
4803: PPUSH
4804: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4808: LD_EXP 1
4812: PPUSH
4813: LD_STRING DX2b-JMM-1
4815: PPUSH
4816: CALL_OW 88
// end else
4820: GO 4966
// begin Say ( JMM , DX2a-JMM-1 ) ;
4822: LD_EXP 1
4826: PPUSH
4827: LD_STRING DX2a-JMM-1
4829: PPUSH
4830: CALL_OW 88
// if speaker = Bobby then
4834: LD_VAR 0 2
4838: PUSH
4839: LD_EXP 2
4843: EQUAL
4844: IFFALSE 4858
// Say ( Bobby , DX2a-Bobby-1 ) ;
4846: LD_EXP 2
4850: PPUSH
4851: LD_STRING DX2a-Bobby-1
4853: PPUSH
4854: CALL_OW 88
// if speaker = Cyrus then
4858: LD_VAR 0 2
4862: PUSH
4863: LD_EXP 3
4867: EQUAL
4868: IFFALSE 4882
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4870: LD_EXP 3
4874: PPUSH
4875: LD_STRING DX2a-Cyrus-1
4877: PPUSH
4878: CALL_OW 88
// if speaker = Lisa then
4882: LD_VAR 0 2
4886: PUSH
4887: LD_EXP 4
4891: EQUAL
4892: IFFALSE 4906
// Say ( Lisa , DX2a-Lisa-1 ) ;
4894: LD_EXP 4
4898: PPUSH
4899: LD_STRING DX2a-Lisa-1
4901: PPUSH
4902: CALL_OW 88
// if speaker in temp1 then
4906: LD_VAR 0 2
4910: PUSH
4911: LD_VAR 0 3
4915: IN
4916: IFFALSE 4930
// Say ( speaker , DX2a-Sol1-1 ) ;
4918: LD_VAR 0 2
4922: PPUSH
4923: LD_STRING DX2a-Sol1-1
4925: PPUSH
4926: CALL_OW 88
// if speaker in temp2 then
4930: LD_VAR 0 2
4934: PUSH
4935: LD_VAR 0 4
4939: IN
4940: IFFALSE 4954
// Say ( speaker , DX2a-FSol1-1 ) ;
4942: LD_VAR 0 2
4946: PPUSH
4947: LD_STRING DX2a-FSol1-1
4949: PPUSH
4950: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4954: LD_EXP 1
4958: PPUSH
4959: LD_STRING DX2a-JMM-2
4961: PPUSH
4962: CALL_OW 88
// end ; DialogueOff ;
4966: CALL_OW 7
// end ;
4970: PPOPN 5
4972: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4973: LD_INT 1
4975: PPUSH
4976: CALL_OW 255
4980: PUSH
4981: LD_INT 1
4983: EQUAL
4984: PUSH
4985: LD_INT 10
4987: PPUSH
4988: CALL_OW 255
4992: PUSH
4993: LD_INT 1
4995: EQUAL
4996: OR
4997: IFFALSE 5057
4999: GO 5001
5001: DISABLE
// begin DialogueOn ;
5002: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
5006: LD_EXP 1
5010: PPUSH
5011: LD_STRING D3-JMM-1
5013: PPUSH
5014: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5018: LD_EXP 9
5022: PPUSH
5023: LD_STRING D3-Pow-1
5025: PPUSH
5026: CALL_OW 94
// if IsOK ( Cyrus ) then
5030: LD_EXP 3
5034: PPUSH
5035: CALL_OW 302
5039: IFFALSE 5053
// Say ( Cyrus , D3-Cyrus-1 ) ;
5041: LD_EXP 3
5045: PPUSH
5046: LD_STRING D3-Cyrus-1
5048: PPUSH
5049: CALL_OW 88
// DialogueOff ;
5053: CALL_OW 7
// end ;
5057: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < 2 do var temp , i ;
5058: LD_INT 1
5060: PPUSH
5061: CALL_OW 255
5065: PUSH
5066: LD_INT 1
5068: EQUAL
5069: PUSH
5070: LD_INT 10
5072: PPUSH
5073: CALL_OW 255
5077: PUSH
5078: LD_INT 1
5080: EQUAL
5081: AND
5082: PUSH
5083: LD_INT 22
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 21
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 69
5111: PUSH
5112: LD_INT 2
5114: LESS
5115: AND
5116: IFFALSE 6368
5118: GO 5120
5120: DISABLE
5121: LD_INT 0
5123: PPUSH
5124: PPUSH
// begin wait ( 0 0$03 ) ;
5125: LD_INT 105
5127: PPUSH
5128: CALL_OW 67
// DialogueOn ;
5132: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-1
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-1
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-2
5167: PPUSH
5168: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5172: LD_EXP 9
5176: PPUSH
5177: LD_STRING D3a-Pow-2
5179: PPUSH
5180: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5184: LD_EXP 1
5188: PPUSH
5189: LD_STRING D3a-JMM-3
5191: PPUSH
5192: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5196: LD_EXP 9
5200: PPUSH
5201: LD_STRING D3a-Pow-3
5203: PPUSH
5204: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5208: LD_EXP 1
5212: PPUSH
5213: LD_STRING D3a-JMM-4
5215: PPUSH
5216: CALL_OW 88
// DialogueOff ;
5220: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5224: LD_STRING M2
5226: PPUSH
5227: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5231: LD_EXP 1
5235: PPUSH
5236: LD_STRING D3b-JMM-1
5238: PPUSH
5239: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5243: LD_INT 35
5245: PPUSH
5246: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5250: LD_INT 22
5252: PPUSH
5253: LD_INT 22
5255: PUSH
5256: LD_INT 1
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: LD_INT 25
5265: PUSH
5266: LD_INT 2
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PPUSH
5277: CALL_OW 70
5281: IFFALSE 5243
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5283: LD_ADDR_VAR 0 1
5287: PUSH
5288: LD_INT 22
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 23
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 25
5310: PUSH
5311: LD_INT 2
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: LD_INT 50
5320: PUSH
5321: EMPTY
5322: LIST
5323: PUSH
5324: LD_INT 56
5326: PUSH
5327: EMPTY
5328: LIST
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PPUSH
5337: CALL_OW 69
5341: PUSH
5342: LD_EXP 1
5346: PUSH
5347: LD_EXP 5
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: DIFF
5356: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5357: LD_INT 35
5359: PPUSH
5360: CALL_OW 67
// until temp > 0 ;
5364: LD_VAR 0 1
5368: PUSH
5369: LD_INT 0
5371: GREATER
5372: IFFALSE 5283
// wait ( 0 0$5 ) ;
5374: LD_INT 175
5376: PPUSH
5377: CALL_OW 67
// PrepareRussianHeroes ;
5381: CALL 11719 0 0
// InGameOn ;
5385: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5389: LD_EXP 8
5393: PPUSH
5394: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5398: LD_EXP 1
5402: PUSH
5403: LD_VAR 0 1
5407: PUSH
5408: LD_INT 1
5410: ARRAY
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PPUSH
5416: LD_EXP 8
5420: PPUSH
5421: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5425: LD_EXP 8
5429: PPUSH
5430: LD_VAR 0 1
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: CALL_OW 119
// Wait ( 0 0$02 ) ;
5443: LD_INT 70
5445: PPUSH
5446: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5450: LD_EXP 8
5454: PPUSH
5455: LD_STRING D4-Mikh-1
5457: PPUSH
5458: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5462: LD_VAR 0 1
5466: PUSH
5467: LD_INT 1
5469: ARRAY
5470: PPUSH
5471: CALL_OW 258
5475: PUSH
5476: LD_INT 1
5478: EQUAL
5479: IFFALSE 5497
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5481: LD_VAR 0 1
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PPUSH
5490: LD_STRING D4-Sol1-1
5492: PPUSH
5493: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: CALL_OW 258
5510: PUSH
5511: LD_INT 2
5513: EQUAL
5514: IFFALSE 5532
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5516: LD_VAR 0 1
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_STRING D4-FSol1-1
5527: PPUSH
5528: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5532: LD_EXP 8
5536: PPUSH
5537: LD_STRING D4-Mikh-2
5539: PPUSH
5540: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5544: LD_VAR 0 1
5548: PUSH
5549: LD_INT 1
5551: ARRAY
5552: PPUSH
5553: CALL_OW 258
5557: PUSH
5558: LD_INT 1
5560: EQUAL
5561: IFFALSE 5579
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5563: LD_VAR 0 1
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: LD_STRING D4-Sol1-2
5574: PPUSH
5575: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5579: LD_VAR 0 1
5583: PUSH
5584: LD_INT 1
5586: ARRAY
5587: PPUSH
5588: CALL_OW 258
5592: PUSH
5593: LD_INT 2
5595: EQUAL
5596: IFFALSE 5614
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5598: LD_VAR 0 1
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_STRING D4-FSol1-2
5609: PPUSH
5610: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5614: LD_EXP 8
5618: PPUSH
5619: LD_STRING D4-Mikh-3
5621: PPUSH
5622: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5626: LD_VAR 0 1
5630: PUSH
5631: LD_INT 1
5633: ARRAY
5634: PPUSH
5635: CALL_OW 258
5639: PUSH
5640: LD_INT 1
5642: EQUAL
5643: IFFALSE 5661
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5645: LD_VAR 0 1
5649: PUSH
5650: LD_INT 1
5652: ARRAY
5653: PPUSH
5654: LD_STRING D4-Sol1-3
5656: PPUSH
5657: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5661: LD_VAR 0 1
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PPUSH
5670: CALL_OW 258
5674: PUSH
5675: LD_INT 2
5677: EQUAL
5678: IFFALSE 5696
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5680: LD_VAR 0 1
5684: PUSH
5685: LD_INT 1
5687: ARRAY
5688: PPUSH
5689: LD_STRING D4-FSol1-3
5691: PPUSH
5692: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5696: LD_EXP 8
5700: PPUSH
5701: LD_STRING D4-Mikh-4
5703: PPUSH
5704: CALL_OW 88
// case query ( Qs1 ) of 1 :
5708: LD_STRING Qs1
5710: PPUSH
5711: CALL_OW 97
5715: PUSH
5716: LD_INT 1
5718: DOUBLE
5719: EQUAL
5720: IFTRUE 5724
5722: GO 5759
5724: POP
// begin InGameOff ;
5725: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5729: LD_INT 1
5731: PPUSH
5732: LD_INT 6
5734: PPUSH
5735: LD_INT 2
5737: PPUSH
5738: LD_INT 1
5740: PPUSH
5741: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5745: LD_EXP 8
5749: PPUSH
5750: LD_INT 17
5752: PPUSH
5753: CALL_OW 113
// end ; 2 :
5757: GO 6352
5759: LD_INT 2
5761: DOUBLE
5762: EQUAL
5763: IFTRUE 5767
5765: GO 6317
5767: POP
// begin repeat wait ( 0 0$1 ) ;
5768: LD_INT 35
5770: PPUSH
5771: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5775: LD_VAR 0 1
5779: PUSH
5780: LD_INT 1
5782: ARRAY
5783: PPUSH
5784: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5788: LD_VAR 0 1
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PPUSH
5797: LD_EXP 1
5801: PPUSH
5802: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5806: LD_EXP 8
5810: PPUSH
5811: LD_EXP 1
5815: PPUSH
5816: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5820: LD_EXP 1
5824: PPUSH
5825: LD_EXP 8
5829: PPUSH
5830: CALL_OW 296
5834: PUSH
5835: LD_INT 5
5837: LESS
5838: IFFALSE 5768
// ComTurnUnit ( Mikhail , JMM ) ;
5840: LD_EXP 8
5844: PPUSH
5845: LD_EXP 1
5849: PPUSH
5850: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5854: LD_EXP 1
5858: PPUSH
5859: LD_STRING D4b-JMM-1
5861: PPUSH
5862: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5866: LD_EXP 8
5870: PPUSH
5871: LD_STRING D4b-Mikh-1
5873: PPUSH
5874: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5878: LD_EXP 1
5882: PPUSH
5883: LD_STRING D4b-JMM-2
5885: PPUSH
5886: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5890: LD_EXP 8
5894: PPUSH
5895: LD_STRING D4b-Mikh-2
5897: PPUSH
5898: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5902: LD_EXP 1
5906: PPUSH
5907: LD_STRING D4b-JMM-3
5909: PPUSH
5910: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5914: LD_EXP 8
5918: PPUSH
5919: LD_STRING D4b-Mikh-3
5921: PPUSH
5922: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5926: LD_EXP 1
5930: PPUSH
5931: LD_STRING D4b-JMM-4
5933: PPUSH
5934: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5938: LD_EXP 8
5942: PPUSH
5943: LD_STRING D4b-Mikh-4
5945: PPUSH
5946: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5950: LD_EXP 1
5954: PPUSH
5955: LD_STRING D4b-JMM-5
5957: PPUSH
5958: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5962: LD_EXP 8
5966: PPUSH
5967: LD_STRING D4b-Mikh-5
5969: PPUSH
5970: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5974: LD_EXP 1
5978: PPUSH
5979: LD_STRING D4b-JMM-6
5981: PPUSH
5982: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5986: LD_EXP 8
5990: PPUSH
5991: LD_STRING D4b-Mikh-6
5993: PPUSH
5994: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5998: LD_EXP 1
6002: PPUSH
6003: LD_STRING D4b-JMM-7
6005: PPUSH
6006: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6010: LD_EXP 8
6014: PPUSH
6015: LD_STRING D4b-Mikh-7
6017: PPUSH
6018: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6022: LD_VAR 0 1
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: PPUSH
6031: CALL_OW 258
6035: PUSH
6036: LD_INT 1
6038: EQUAL
6039: IFFALSE 6057
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 1
6048: ARRAY
6049: PPUSH
6050: LD_STRING D4b-Sol1-7
6052: PPUSH
6053: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6057: LD_VAR 0 1
6061: PUSH
6062: LD_INT 1
6064: ARRAY
6065: PPUSH
6066: CALL_OW 258
6070: PUSH
6071: LD_INT 2
6073: EQUAL
6074: IFFALSE 6092
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6076: LD_VAR 0 1
6080: PUSH
6081: LD_INT 1
6083: ARRAY
6084: PPUSH
6085: LD_STRING D4b-FSol1-7
6087: PPUSH
6088: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6092: LD_EXP 1
6096: PPUSH
6097: LD_STRING D4b-JMM-8
6099: PPUSH
6100: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6104: LD_VAR 0 1
6108: PUSH
6109: LD_INT 1
6111: ARRAY
6112: PPUSH
6113: CALL_OW 258
6117: PUSH
6118: LD_INT 1
6120: EQUAL
6121: IFFALSE 6139
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6123: LD_VAR 0 1
6127: PUSH
6128: LD_INT 1
6130: ARRAY
6131: PPUSH
6132: LD_STRING D4b-Sol1-8
6134: PPUSH
6135: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6139: LD_VAR 0 1
6143: PUSH
6144: LD_INT 1
6146: ARRAY
6147: PPUSH
6148: CALL_OW 258
6152: PUSH
6153: LD_INT 2
6155: EQUAL
6156: IFFALSE 6174
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6158: LD_VAR 0 1
6162: PUSH
6163: LD_INT 1
6165: ARRAY
6166: PPUSH
6167: LD_STRING D4b-FSol1-8
6169: PPUSH
6170: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6174: LD_EXP 1
6178: PPUSH
6179: LD_STRING D4b-JMM-9
6181: PPUSH
6182: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6186: LD_EXP 8
6190: PPUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6198: LD_ADDR_VAR 0 2
6202: PUSH
6203: LD_INT 22
6205: PUSH
6206: LD_INT 1
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: FOR_IN
6222: IFFALSE 6235
// ComFree ( i ) ;
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 139
6233: GO 6221
6235: POP
6236: POP
// repeat wait ( 0 0$1 ) ;
6237: LD_INT 35
6239: PPUSH
6240: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6244: LD_EXP 8
6248: PPUSH
6249: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6253: LD_EXP 8
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: LD_INT 1
6265: ARRAY
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PPUSH
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6278: LD_EXP 8
6282: PPUSH
6283: CALL_OW 310
6287: IFFALSE 6237
// mikhailDepot = IsInUnit ( Mikhail ) ;
6289: LD_ADDR_EXP 23
6293: PUSH
6294: LD_EXP 8
6298: PPUSH
6299: CALL_OW 310
6303: ST_TO_ADDR
// InGameOff ;
6304: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6308: LD_STRING M3
6310: PPUSH
6311: CALL_OW 337
// end ; 3 :
6315: GO 6352
6317: LD_INT 3
6319: DOUBLE
6320: EQUAL
6321: IFTRUE 6325
6323: GO 6351
6325: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6326: LD_EXP 8
6330: PPUSH
6331: LD_INT 17
6333: PPUSH
6334: CALL_OW 113
// wait ( 0 0$3 ) ;
6338: LD_INT 105
6340: PPUSH
6341: CALL_OW 67
// InGameOff ;
6345: CALL_OW 9
// end ; end ;
6349: GO 6352
6351: POP
// PrepareTigers ;
6352: CALL 14569 0 0
// RussianTrap ;
6356: CALL 10115 0 0
// tigersRespawn = 1 ;
6360: LD_ADDR_EXP 30
6364: PUSH
6365: LD_INT 1
6367: ST_TO_ADDR
// end ;
6368: PPOPN 2
6370: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6371: LD_INT 1
6373: PPUSH
6374: CALL_OW 255
6378: PUSH
6379: LD_INT 1
6381: EQUAL
6382: PUSH
6383: LD_INT 10
6385: PPUSH
6386: CALL_OW 255
6390: PUSH
6391: LD_INT 1
6393: EQUAL
6394: AND
6395: PUSH
6396: LD_INT 1
6398: PPUSH
6399: CALL_OW 274
6403: PPUSH
6404: LD_INT 1
6406: PPUSH
6407: CALL_OW 275
6411: PUSH
6412: LD_INT 100
6414: GREATEREQUAL
6415: AND
6416: IFFALSE 6565
6418: GO 6420
6420: DISABLE
6421: LD_INT 0
6423: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6424: LD_INT 2100
6426: PPUSH
6427: LD_INT 4200
6429: PPUSH
6430: CALL_OW 12
6434: PUSH
6435: LD_INT 1050
6437: PLUS
6438: PPUSH
6439: CALL_OW 67
// PrepareCargoBays ;
6443: CALL 12852 0 0
// cargoRespawn = 1 ;
6447: LD_ADDR_EXP 28
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_EXP 15
6464: PUSH
6465: LD_EXP 16
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6486: LD_VAR 0 1
6490: PPUSH
6491: LD_INT 17
6493: PPUSH
6494: LD_INT 10
6496: PPUSH
6497: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6501: LD_VAR 0 1
6505: PPUSH
6506: LD_INT 36
6508: PPUSH
6509: LD_INT 13
6511: PPUSH
6512: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_INT 40
6523: PPUSH
6524: LD_INT 20
6526: PPUSH
6527: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_INT 53
6538: PPUSH
6539: LD_INT 16
6541: PPUSH
6542: CALL_OW 171
// wait ( 0 0$5 ) ;
6546: LD_INT 175
6548: PPUSH
6549: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6553: LD_EXP 17
6557: PPUSH
6558: LD_STRING D5-Rus2-1
6560: PPUSH
6561: CALL_OW 88
// end ;
6565: PPOPN 1
6567: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6568: LD_EXP 28
6572: PUSH
6573: LD_INT 1
6575: EQUAL
6576: IFFALSE 6731
6578: GO 6580
6580: DISABLE
6581: LD_INT 0
6583: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6584: LD_ADDR_VAR 0 1
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 21
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 34
6611: PUSH
6612: LD_INT 51
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: PPUSH
6624: CALL_OW 69
6628: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6629: LD_INT 105
6631: PPUSH
6632: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6636: LD_VAR 0 1
6640: PPUSH
6641: LD_INT 3
6643: PUSH
6644: LD_INT 60
6646: PUSH
6647: EMPTY
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL_OW 72
6658: PUSH
6659: LD_VAR 0 1
6663: PPUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 24
6669: PUSH
6670: LD_INT 980
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 72
6685: OR
6686: IFFALSE 6629
// ComMoveXY ( cargos , 7 , 9 ) ;
6688: LD_VAR 0 1
6692: PPUSH
6693: LD_INT 7
6695: PPUSH
6696: LD_INT 9
6698: PPUSH
6699: CALL_OW 111
// cargoSee = 1 ;
6703: LD_ADDR_EXP 29
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// cargoEscape = 1 ;
6711: LD_ADDR_EXP 20
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6719: LD_EXP 17
6723: PPUSH
6724: LD_STRING D5-Rus2-1a
6726: PPUSH
6727: CALL_OW 88
// end ;
6731: PPOPN 1
6733: END
// every 0 0$1 trigger cargoEscape > 0 do
6734: LD_EXP 20
6738: PUSH
6739: LD_INT 0
6741: GREATER
6742: IFFALSE 6889
6744: GO 6746
6746: DISABLE
// begin enable ;
6747: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6748: LD_EXP 15
6752: PUSH
6753: LD_EXP 16
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PPUSH
6762: LD_INT 13
6764: PPUSH
6765: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6769: LD_EXP 15
6773: PPUSH
6774: LD_INT 13
6776: PPUSH
6777: CALL_OW 308
6781: PUSH
6782: LD_EXP 17
6786: PPUSH
6787: LD_INT 13
6789: PPUSH
6790: CALL_OW 308
6794: OR
6795: IFFALSE 6829
// begin RemoveUnit ( cargo1 ) ;
6797: LD_EXP 15
6801: PPUSH
6802: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6806: LD_EXP 17
6810: PPUSH
6811: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6815: LD_ADDR_EXP 20
6819: PUSH
6820: LD_EXP 20
6824: PUSH
6825: LD_INT 1
6827: PLUS
6828: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6829: LD_EXP 16
6833: PPUSH
6834: LD_INT 13
6836: PPUSH
6837: CALL_OW 308
6841: PUSH
6842: LD_EXP 18
6846: PPUSH
6847: LD_INT 13
6849: PPUSH
6850: CALL_OW 308
6854: OR
6855: IFFALSE 6889
// begin RemoveUnit ( cargo2 ) ;
6857: LD_EXP 16
6861: PPUSH
6862: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6866: LD_EXP 18
6870: PPUSH
6871: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6875: LD_ADDR_EXP 20
6879: PUSH
6880: LD_EXP 20
6884: PUSH
6885: LD_INT 1
6887: PLUS
6888: ST_TO_ADDR
// end ; end ;
6889: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6890: LD_EXP 20
6894: PUSH
6895: LD_INT 1
6897: GREATER
6898: IFFALSE 7055
6900: GO 6902
6902: DISABLE
6903: LD_INT 0
6905: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6906: LD_INT 4
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: LD_INT 1
6914: PPUSH
6915: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6919: LD_INT 31
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: LD_INT 1
6927: PPUSH
6928: CALL_OW 324
// if IsOK ( Jerry ) then
6932: LD_EXP 7
6936: PPUSH
6937: CALL_OW 302
6941: IFFALSE 6957
// Say ( Jerry , D5a-Sol1-1 ) else
6943: LD_EXP 7
6947: PPUSH
6948: LD_STRING D5a-Sol1-1
6950: PPUSH
6951: CALL_OW 88
6955: GO 7043
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6957: LD_ADDR_VAR 0 1
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 26
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PUSH
6991: LD_EXP 1
6995: PUSH
6996: LD_EXP 2
7000: PUSH
7001: LD_EXP 3
7005: PUSH
7006: LD_EXP 5
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: DIFF
7017: ST_TO_ADDR
// if not speaker then
7018: LD_VAR 0 1
7022: NOT
7023: IFFALSE 7027
// exit ;
7025: GO 7055
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7027: LD_VAR 0 1
7031: PUSH
7032: LD_INT 1
7034: ARRAY
7035: PPUSH
7036: LD_STRING D5a-Sol1-1
7038: PPUSH
7039: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7043: LD_EXP 1
7047: PPUSH
7048: LD_STRING D5a-JMM-1
7050: PPUSH
7051: CALL_OW 88
// end ;
7055: PPOPN 1
7057: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7058: LD_INT 1
7060: PPUSH
7061: CALL_OW 255
7065: PUSH
7066: LD_INT 3
7068: EQUAL
7069: PUSH
7070: LD_INT 1
7072: PPUSH
7073: CALL_OW 256
7077: PUSH
7078: LD_INT 1000
7080: LESS
7081: AND
7082: PUSH
7083: LD_INT 10
7085: PPUSH
7086: CALL_OW 255
7090: PUSH
7091: LD_INT 3
7093: EQUAL
7094: PUSH
7095: LD_INT 10
7097: PPUSH
7098: CALL_OW 256
7102: PUSH
7103: LD_INT 1000
7105: LESS
7106: AND
7107: OR
7108: IFFALSE 7125
7110: GO 7112
7112: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7113: LD_EXP 1
7117: PPUSH
7118: LD_STRING D8-JMM-1
7120: PPUSH
7121: CALL_OW 88
// end ;
7125: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7126: LD_EXP 8
7130: PPUSH
7131: CALL_OW 310
7135: PUSH
7136: LD_INT 1
7138: EQUAL
7139: PUSH
7140: LD_EXP 22
7144: PUSH
7145: LD_INT 3
7147: EQUAL
7148: NOT
7149: AND
7150: IFFALSE 7172
7152: GO 7154
7154: DISABLE
// begin mikhailInBase = 1 ;
7155: LD_ADDR_EXP 22
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// mikhailStatus = 1 ;
7163: LD_ADDR_EXP 21
7167: PUSH
7168: LD_INT 1
7170: ST_TO_ADDR
// enable ;
7171: ENABLE
// end ;
7172: END
// export function AskMikhail ; begin
7173: LD_INT 0
7175: PPUSH
// case query ( QMikh2 ) of 1 :
7176: LD_STRING QMikh2
7178: PPUSH
7179: CALL_OW 97
7183: PUSH
7184: LD_INT 1
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7259
7192: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7193: LD_INT 1
7195: PPUSH
7196: LD_INT 6
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: LD_INT 1
7204: PPUSH
7205: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7209: LD_EXP 8
7213: PPUSH
7214: LD_INT 6
7216: PPUSH
7217: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7221: LD_EXP 8
7225: PPUSH
7226: CALL_OW 122
// wait ( 0 0$1 ) ;
7230: LD_INT 35
7232: PPUSH
7233: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7237: LD_EXP 8
7241: PPUSH
7242: LD_INT 17
7244: PPUSH
7245: CALL_OW 113
// mikhailInbase = 0 ;
7249: LD_ADDR_EXP 22
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// end ; 2 :
7257: GO 7500
7259: LD_INT 2
7261: DOUBLE
7262: EQUAL
7263: IFTRUE 7267
7265: GO 7440
7267: POP
// begin mikhailInBase = 2 ;
7268: LD_ADDR_EXP 22
7272: PUSH
7273: LD_INT 2
7275: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7276: LD_EXP 8
7280: PPUSH
7281: LD_INT 6
7283: PPUSH
7284: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7288: LD_EXP 8
7292: PPUSH
7293: CALL_OW 122
// wait ( 0 0$1 ) ;
7297: LD_INT 35
7299: PPUSH
7300: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7304: LD_EXP 8
7308: PPUSH
7309: LD_EXP 8
7313: PPUSH
7314: CALL_OW 250
7318: PUSH
7319: LD_INT 2
7321: PLUS
7322: PPUSH
7323: LD_EXP 8
7327: PPUSH
7328: CALL_OW 251
7332: PUSH
7333: LD_INT 2
7335: PLUS
7336: PPUSH
7337: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7341: LD_EXP 8
7345: PPUSH
7346: LD_EXP 8
7350: PPUSH
7351: CALL_OW 250
7355: PUSH
7356: LD_INT 1
7358: PLUS
7359: PPUSH
7360: LD_EXP 8
7364: PPUSH
7365: CALL_OW 251
7369: PUSH
7370: LD_INT 2
7372: PLUS
7373: PPUSH
7374: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7378: LD_EXP 8
7382: PPUSH
7383: LD_EXP 8
7387: PPUSH
7388: CALL_OW 250
7392: PUSH
7393: LD_INT 2
7395: PLUS
7396: PPUSH
7397: LD_EXP 8
7401: PPUSH
7402: CALL_OW 251
7406: PPUSH
7407: CALL_OW 171
// wait ( 0 0$5 ) ;
7411: LD_INT 175
7413: PPUSH
7414: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7418: LD_EXP 8
7422: PPUSH
7423: LD_INT 25
7425: PPUSH
7426: CALL_OW 113
// mikhailInBase = 4 ;
7430: LD_ADDR_EXP 22
7434: PUSH
7435: LD_INT 4
7437: ST_TO_ADDR
// end ; 3 :
7438: GO 7500
7440: LD_INT 3
7442: DOUBLE
7443: EQUAL
7444: IFTRUE 7448
7446: GO 7499
7448: POP
// begin SetSide ( Mikhail , 6 ) ;
7449: LD_EXP 8
7453: PPUSH
7454: LD_INT 6
7456: PPUSH
7457: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 122
// wait ( 0 0$1 ) ;
7470: LD_INT 35
7472: PPUSH
7473: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7477: LD_EXP 8
7481: PPUSH
7482: LD_INT 17
7484: PPUSH
7485: CALL_OW 113
// mikhailInbase = 3 ;
7489: LD_ADDR_EXP 22
7493: PUSH
7494: LD_INT 3
7496: ST_TO_ADDR
// end ; end ;
7497: GO 7500
7499: POP
// end ;
7500: LD_VAR 0 1
7504: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7505: LD_EXP 8
7509: PPUSH
7510: LD_INT 25
7512: PPUSH
7513: CALL_OW 308
7517: PUSH
7518: LD_EXP 22
7522: PUSH
7523: LD_INT 4
7525: EQUAL
7526: AND
7527: IFFALSE 7631
7529: GO 7531
7531: DISABLE
// begin enable ;
7532: ENABLE
// mikhailInBase = 1 ;
7533: LD_ADDR_EXP 22
7537: PUSH
7538: LD_INT 1
7540: ST_TO_ADDR
// InGameOn ;
7541: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7545: LD_INT 1
7547: PPUSH
7548: LD_INT 6
7550: PPUSH
7551: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7555: LD_INT 35
7557: PPUSH
7558: CALL_OW 67
// if Carry ( Mikhail ) then
7562: LD_EXP 8
7566: PPUSH
7567: CALL_OW 281
7571: IFFALSE 7582
// ComUnload ( Mikhail ) ;
7573: LD_EXP 8
7577: PPUSH
7578: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7582: LD_EXP 8
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7594: LD_EXP 8
7598: PPUSH
7599: CALL_OW 310
7603: IFFALSE 7555
// SetSide ( dep1 , 1 ) ;
7605: LD_INT 1
7607: PPUSH
7608: LD_INT 1
7610: PPUSH
7611: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7615: LD_EXP 8
7619: PPUSH
7620: LD_INT 1
7622: PPUSH
7623: CALL_OW 235
// InGameOff ;
7627: CALL_OW 9
// end ;
7631: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7632: LD_EXP 8
7636: PPUSH
7637: CALL_OW 310
7641: PUSH
7642: LD_EXP 22
7646: PUSH
7647: LD_INT 3
7649: EQUAL
7650: NOT
7651: AND
7652: IFFALSE 7787
7654: GO 7656
7656: DISABLE
// begin enable ;
7657: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7658: LD_INT 22
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 21
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 91
7680: PUSH
7681: LD_EXP 8
7685: PPUSH
7686: CALL_OW 310
7690: PUSH
7691: LD_INT 10
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: PUSH
7709: LD_INT 1
7711: EQUAL
7712: IFFALSE 7787
// begin mikhailStatus = 4 ;
7714: LD_ADDR_EXP 21
7718: PUSH
7719: LD_INT 4
7721: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7722: LD_INT 1
7724: PPUSH
7725: LD_INT 6
7727: PPUSH
7728: LD_INT 2
7730: PPUSH
7731: LD_INT 1
7733: PPUSH
7734: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7738: LD_EXP 8
7742: PPUSH
7743: LD_INT 6
7745: PPUSH
7746: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7750: LD_EXP 8
7754: PPUSH
7755: CALL_OW 122
// wait ( 0 0$1 ) ;
7759: LD_INT 35
7761: PPUSH
7762: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7766: LD_EXP 8
7770: PPUSH
7771: LD_INT 17
7773: PPUSH
7774: CALL_OW 113
// mikhailStatus = 3 ;
7778: LD_ADDR_EXP 21
7782: PUSH
7783: LD_INT 3
7785: ST_TO_ADDR
// disable ;
7786: DISABLE
// end ; end ;
7787: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7788: LD_EXP 1
7792: PPUSH
7793: LD_EXP 23
7797: PPUSH
7798: CALL_OW 296
7802: PUSH
7803: LD_INT 5
7805: LESS
7806: PUSH
7807: LD_EXP 21
7811: PUSH
7812: LD_INT 3
7814: EQUAL
7815: AND
7816: PUSH
7817: LD_EXP 22
7821: PUSH
7822: LD_INT 3
7824: EQUAL
7825: NOT
7826: AND
7827: IFFALSE 8049
7829: GO 7831
7831: DISABLE
7832: LD_INT 0
7834: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_INT 1
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 21
7852: PUSH
7853: LD_INT 1
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 26
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: PUSH
7880: LD_EXP 1
7884: PUSH
7885: LD_EXP 5
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: DIFF
7894: ST_TO_ADDR
// DialogueOn ;
7895: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7899: LD_EXP 1
7903: PPUSH
7904: LD_STRING D7-JMM-1
7906: PPUSH
7907: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7911: LD_VAR 0 1
7915: PUSH
7916: LD_INT 1
7918: ARRAY
7919: PPUSH
7920: LD_STRING D7-Sol1-1
7922: PPUSH
7923: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7927: LD_EXP 1
7931: PPUSH
7932: LD_STRING D7-JMM-2
7934: PPUSH
7935: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 1
7946: ARRAY
7947: PPUSH
7948: LD_STRING D7-Sol1-2
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D7-JMM-3
7962: PPUSH
7963: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_INT 1
7974: ARRAY
7975: PPUSH
7976: LD_STRING D7-Sol1-3
7978: PPUSH
7979: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7983: LD_EXP 3
7987: PPUSH
7988: CALL_OW 302
7992: PUSH
7993: LD_EXP 4
7997: PPUSH
7998: CALL_OW 302
8002: AND
8003: IFFALSE 8045
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8005: LD_EXP 3
8009: PPUSH
8010: LD_STRING D7-Cyrus-3
8012: PPUSH
8013: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8017: LD_VAR 0 1
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PPUSH
8026: LD_STRING D7-Sol1-4
8028: PPUSH
8029: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8033: LD_EXP 4
8037: PPUSH
8038: LD_STRING D7-Lisa-4
8040: PPUSH
8041: CALL_OW 88
// end ; DialogueOff ;
8045: CALL_OW 7
// end ;
8049: PPOPN 1
8051: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8052: LD_EXP 8
8056: PPUSH
8057: CALL_OW 303
8061: PUSH
8062: LD_EXP 21
8066: PUSH
8067: LD_INT 3
8069: EQUAL
8070: AND
8071: IFFALSE 8085
8073: GO 8075
8075: DISABLE
// begin enable ;
8076: ENABLE
// mikhailStatus = 2 ;
8077: LD_ADDR_EXP 21
8081: PUSH
8082: LD_INT 2
8084: ST_TO_ADDR
// end ;
8085: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8086: LD_EXP 8
8090: PPUSH
8091: LD_INT 17
8093: PPUSH
8094: CALL_OW 308
8098: PUSH
8099: LD_EXP 8
8103: PPUSH
8104: CALL_OW 255
8108: PUSH
8109: LD_INT 6
8111: EQUAL
8112: AND
8113: IFFALSE 8146
8115: GO 8117
8117: DISABLE
// begin if not mikhailInBase = 3 then
8118: LD_EXP 22
8122: PUSH
8123: LD_INT 3
8125: EQUAL
8126: NOT
8127: IFFALSE 8137
// mikhailStatus = 3 ;
8129: LD_ADDR_EXP 21
8133: PUSH
8134: LD_INT 3
8136: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8137: LD_EXP 8
8141: PPUSH
8142: CALL_OW 64
// end ;
8146: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8147: LD_EXP 21
8151: PUSH
8152: LD_INT 3
8154: EQUAL
8155: PUSH
8156: LD_EXP 8
8160: PPUSH
8161: CALL_OW 255
8165: PUSH
8166: LD_INT 6
8168: EQUAL
8169: AND
8170: IFFALSE 8336
8172: GO 8174
8174: DISABLE
8175: LD_INT 0
8177: PPUSH
8178: PPUSH
// begin enable ;
8179: ENABLE
// if IsOk ( Mikhail ) then
8180: LD_EXP 8
8184: PPUSH
8185: CALL_OW 302
8189: IFFALSE 8336
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8191: LD_ADDR_VAR 0 2
8195: PUSH
8196: LD_EXP 8
8200: PPUSH
8201: LD_INT 22
8203: PUSH
8204: LD_INT 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 21
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 69
8229: PPUSH
8230: CALL 10307 0 2
8234: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8235: LD_VAR 0 2
8239: PPUSH
8240: LD_EXP 8
8244: PPUSH
8245: CALL_OW 296
8249: PUSH
8250: LD_INT 8
8252: LESS
8253: IFFALSE 8336
// begin if GetSex ( attacker ) = sex_male then
8255: LD_VAR 0 2
8259: PPUSH
8260: CALL_OW 258
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: IFFALSE 8304
// begin disable ;
8270: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8271: LD_VAR 0 2
8275: PPUSH
8276: LD_STRING D7a-Sol1-1
8278: PPUSH
8279: CALL_OW 88
// wait ( 0 0$2 ) ;
8283: LD_INT 70
8285: PPUSH
8286: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_STRING D7a-Sol1-1a
8297: PPUSH
8298: CALL_OW 88
// end else
8302: GO 8336
// begin disable ;
8304: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8305: LD_VAR 0 2
8309: PPUSH
8310: LD_STRING D7a-FSol1-1
8312: PPUSH
8313: CALL_OW 88
// wait ( 0 0$2 ) ;
8317: LD_INT 70
8319: PPUSH
8320: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8324: LD_VAR 0 2
8328: PPUSH
8329: LD_STRING D7a-FSol1-1a
8331: PPUSH
8332: CALL_OW 88
// end ; end ; end ; end ;
8336: PPOPN 2
8338: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8339: LD_EXP 27
8343: PUSH
8344: LD_INT 1
8346: EQUAL
8347: PUSH
8348: LD_INT 22
8350: PPUSH
8351: LD_INT 22
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 21
8363: PUSH
8364: LD_INT 1
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 70
8379: PUSH
8380: LD_INT 2
8382: GREATER
8383: AND
8384: PUSH
8385: LD_INT 22
8387: PPUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 21
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 59
8413: PUSH
8414: EMPTY
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PPUSH
8426: CALL_OW 70
8430: PUSH
8431: LD_INT 0
8433: EQUAL
8434: AND
8435: IFFALSE 8450
8437: GO 8439
8439: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 3
8445: PPUSH
8446: CALL_OW 235
// end ;
8450: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8451: LD_EXP 30
8455: PUSH
8456: LD_INT 1
8458: EQUAL
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 0
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 14
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: PUSH
8489: LD_INT 0
8491: EQUAL
8492: AND
8493: IFFALSE 8594
8495: GO 8497
8497: DISABLE
8498: LD_INT 0
8500: PPUSH
8501: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8502: LD_ADDR_VAR 0 2
8506: PUSH
8507: LD_INT 22
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 21
8519: PUSH
8520: LD_INT 1
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 23
8529: PUSH
8530: LD_INT 1
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: PPUSH
8542: CALL_OW 69
8546: ST_TO_ADDR
// for i in tmp do
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_VAR 0 2
8556: PUSH
8557: FOR_IN
8558: IFFALSE 8585
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_INT 1
8567: PPUSH
8568: LD_INT 4
8570: PPUSH
8571: CALL_OW 12
8575: PPUSH
8576: LD_INT 300
8578: PPUSH
8579: CALL_OW 492
8583: GO 8557
8585: POP
8586: POP
// SetAchievement ( ACH_TIGER ) ;
8587: LD_STRING ACH_TIGER
8589: PPUSH
8590: CALL_OW 543
// end ;
8594: PPOPN 2
8596: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8597: LD_INT 22
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 34
8609: PUSH
8610: LD_INT 51
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PPUSH
8621: CALL_OW 69
8625: PUSH
8626: LD_INT 2
8628: GREATEREQUAL
8629: IFFALSE 8641
8631: GO 8633
8633: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8634: LD_STRING ACH_CARGO
8636: PPUSH
8637: CALL_OW 543
8641: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
// for i = 1 to count do
8648: LD_ADDR_VAR 0 8
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_VAR 0 6
8662: PUSH
8663: FOR_TO
8664: IFFALSE 8745
// begin uc_side = side ;
8666: LD_ADDR_OWVAR 20
8670: PUSH
8671: LD_VAR 0 1
8675: ST_TO_ADDR
// uc_nation = nation ;
8676: LD_ADDR_OWVAR 21
8680: PUSH
8681: LD_VAR 0 2
8685: ST_TO_ADDR
// hc_gallery =  ;
8686: LD_ADDR_OWVAR 33
8690: PUSH
8691: LD_STRING 
8693: ST_TO_ADDR
// hc_name =  ;
8694: LD_ADDR_OWVAR 26
8698: PUSH
8699: LD_STRING 
8701: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8702: LD_INT 0
8704: PPUSH
8705: LD_VAR 0 5
8709: PPUSH
8710: LD_VAR 0 4
8714: PPUSH
8715: CALL_OW 380
// un = CreateHuman ;
8719: LD_ADDR_VAR 0 10
8723: PUSH
8724: CALL_OW 44
8728: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8729: LD_VAR 0 10
8733: PPUSH
8734: LD_VAR 0 3
8738: PPUSH
8739: CALL_OW 52
// end ;
8743: GO 8663
8745: POP
8746: POP
// end ;
8747: LD_VAR 0 7
8751: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
8756: PPUSH
// uc_side := GetSide ( b ) ;
8757: LD_ADDR_OWVAR 20
8761: PUSH
8762: LD_VAR 0 2
8766: PPUSH
8767: CALL_OW 255
8771: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8772: LD_ADDR_OWVAR 21
8776: PUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 248
8786: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8787: LD_INT 0
8789: PPUSH
8790: LD_INT 1
8792: PPUSH
8793: LD_VAR 0 1
8797: PPUSH
8798: CALL_OW 380
// un = CreateHuman ;
8802: LD_ADDR_VAR 0 4
8806: PUSH
8807: CALL_OW 44
8811: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8812: LD_ADDR_VAR 0 5
8816: PUSH
8817: LD_VAR 0 2
8821: PPUSH
8822: CALL_OW 254
8826: PUSH
8827: LD_INT 3
8829: MINUS
8830: ST_TO_ADDR
// if dir < 0 then
8831: LD_VAR 0 5
8835: PUSH
8836: LD_INT 0
8838: LESS
8839: IFFALSE 8855
// dir := 6 + dir ;
8841: LD_ADDR_VAR 0 5
8845: PUSH
8846: LD_INT 6
8848: PUSH
8849: LD_VAR 0 5
8853: PLUS
8854: ST_TO_ADDR
// SetDir ( un , dir ) ;
8855: LD_VAR 0 4
8859: PPUSH
8860: LD_VAR 0 5
8864: PPUSH
8865: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8869: LD_VAR 0 4
8873: PPUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 52
// end ;
8883: LD_VAR 0 3
8887: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8888: LD_INT 0
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8895: LD_ADDR_VAR 0 7
8899: PUSH
8900: LD_INT 22
8902: PUSH
8903: LD_VAR 0 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 2
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 24
8924: PUSH
8925: LD_INT 1000
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: PPUSH
8937: CALL_OW 69
8941: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8942: LD_ADDR_VAR 0 5
8946: PUSH
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_INT 22
8954: PUSH
8955: LD_VAR 0 1
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 21
8966: PUSH
8967: LD_INT 3
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 3
8976: PUSH
8977: LD_INT 24
8979: PUSH
8980: LD_INT 1000
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: PPUSH
8999: CALL_OW 70
9003: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9004: LD_VAR 0 5
9008: PUSH
9009: LD_INT 0
9011: GREATER
9012: PUSH
9013: LD_VAR 0 7
9017: PUSH
9018: LD_INT 0
9020: GREATER
9021: AND
9022: IFFALSE 9088
// begin for i in engineerOk_list do
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 7
9033: PUSH
9034: FOR_IN
9035: IFFALSE 9086
// begin for j in buildings_list do
9037: LD_ADDR_VAR 0 8
9041: PUSH
9042: LD_VAR 0 5
9046: PUSH
9047: FOR_IN
9048: IFFALSE 9082
// begin AddComExitBuilding ( i ) ;
9050: LD_VAR 0 6
9054: PPUSH
9055: CALL_OW 182
// wait ( 0 0$1 ) ;
9059: LD_INT 35
9061: PPUSH
9062: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9066: LD_VAR 0 6
9070: PPUSH
9071: LD_VAR 0 8
9075: PPUSH
9076: CALL_OW 190
// end ;
9080: GO 9047
9082: POP
9083: POP
// end ;
9084: GO 9034
9086: POP
9087: POP
// end ; if buildings_list = 0 then
9088: LD_VAR 0 5
9092: PUSH
9093: LD_INT 0
9095: EQUAL
9096: IFFALSE 9129
// begin for i in engineerOK_list do
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 7
9107: PUSH
9108: FOR_IN
9109: IFFALSE 9127
// begin ComEnterUnit ( i , building ) ;
9111: LD_VAR 0 6
9115: PPUSH
9116: LD_VAR 0 2
9120: PPUSH
9121: CALL_OW 120
// end ;
9125: GO 9108
9127: POP
9128: POP
// end ; end ;
9129: LD_VAR 0 4
9133: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9134: LD_INT 0
9136: PPUSH
9137: PPUSH
9138: PPUSH
9139: PPUSH
9140: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9141: LD_ADDR_VAR 0 6
9145: PUSH
9146: LD_INT 22
9148: PUSH
9149: LD_VAR 0 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 25
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 24
9170: PUSH
9171: LD_INT 250
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: PPUSH
9183: CALL_OW 69
9187: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9188: LD_ADDR_VAR 0 9
9192: PUSH
9193: LD_VAR 0 3
9197: PPUSH
9198: LD_INT 22
9200: PUSH
9201: LD_VAR 0 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 21
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 3
9222: PUSH
9223: LD_INT 24
9225: PUSH
9226: LD_INT 650
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 70
9246: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9247: LD_VAR 0 9
9251: PUSH
9252: LD_INT 0
9254: GREATER
9255: PUSH
9256: LD_VAR 0 6
9260: PUSH
9261: LD_INT 0
9263: GREATER
9264: AND
9265: IFFALSE 9392
// begin for i = 1 to damageUnits do
9267: LD_ADDR_VAR 0 7
9271: PUSH
9272: DOUBLE
9273: LD_INT 1
9275: DEC
9276: ST_TO_ADDR
9277: LD_VAR 0 9
9281: PUSH
9282: FOR_TO
9283: IFFALSE 9307
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9285: LD_VAR 0 9
9289: PUSH
9290: LD_VAR 0 7
9294: ARRAY
9295: PPUSH
9296: LD_VAR 0 2
9300: PPUSH
9301: CALL_OW 113
9305: GO 9282
9307: POP
9308: POP
// for i in sci_list do
9309: LD_ADDR_VAR 0 7
9313: PUSH
9314: LD_VAR 0 6
9318: PUSH
9319: FOR_IN
9320: IFFALSE 9388
// begin ComExitBuilding ( i ) ;
9322: LD_VAR 0 7
9326: PPUSH
9327: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9331: LD_ADDR_VAR 0 8
9335: PUSH
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_INT 22
9343: PUSH
9344: LD_VAR 0 1
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PPUSH
9353: CALL_OW 70
9357: PUSH
9358: FOR_IN
9359: IFFALSE 9384
// begin AddComHeal ( i , j ) ;
9361: LD_VAR 0 7
9365: PPUSH
9366: LD_VAR 0 8
9370: PPUSH
9371: CALL_OW 188
// wait ( 1 1$0 ) ;
9375: LD_INT 2100
9377: PPUSH
9378: CALL_OW 67
// end ;
9382: GO 9358
9384: POP
9385: POP
// end ;
9386: GO 9319
9388: POP
9389: POP
// end else
9390: GO 9406
// begin AddComEnterUnit ( sci_list , build ) ;
9392: LD_VAR 0 6
9396: PPUSH
9397: LD_VAR 0 4
9401: PPUSH
9402: CALL_OW 180
// end ; end ;
9406: LD_VAR 0 5
9410: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9411: LD_INT 0
9413: PPUSH
9414: PPUSH
9415: PPUSH
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9421: LD_ADDR_VAR 0 7
9425: PUSH
9426: LD_VAR 0 3
9430: PPUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 2
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 24
9455: PUSH
9456: LD_INT 550
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 34
9465: PUSH
9466: LD_INT 46
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 70
9483: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9484: LD_ADDR_VAR 0 8
9488: PUSH
9489: LD_VAR 0 3
9493: PPUSH
9494: LD_INT 22
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 21
9508: PUSH
9509: LD_INT 2
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 34
9518: PUSH
9519: LD_INT 46
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 3
9528: PUSH
9529: LD_INT 24
9531: PUSH
9532: LD_INT 550
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: PPUSH
9549: CALL_OW 70
9553: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9554: LD_ADDR_VAR 0 9
9558: PUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: LD_INT 22
9566: PUSH
9567: LD_VAR 0 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 34
9588: PUSH
9589: LD_INT 46
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 24
9598: PUSH
9599: LD_INT 1000
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 58
9608: PUSH
9609: EMPTY
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 70
9623: ST_TO_ADDR
// for i in damageVehicle_list do
9624: LD_ADDR_VAR 0 5
9628: PUSH
9629: LD_VAR 0 8
9633: PUSH
9634: FOR_IN
9635: IFFALSE 9654
// mechanicInside_list = UnitsInside ( i ) ;
9637: LD_ADDR_VAR 0 10
9641: PUSH
9642: LD_VAR 0 5
9646: PPUSH
9647: CALL_OW 313
9651: ST_TO_ADDR
9652: GO 9634
9654: POP
9655: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9656: LD_ADDR_VAR 0 11
9660: PUSH
9661: LD_VAR 0 2
9665: PPUSH
9666: LD_INT 22
9668: PUSH
9669: LD_VAR 0 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 25
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 70
9696: ST_TO_ADDR
// if damageVehicle_list > 0 then
9697: LD_VAR 0 8
9701: PUSH
9702: LD_INT 0
9704: GREATER
9705: IFFALSE 9778
// begin for i in damageVehicle_list do
9707: LD_ADDR_VAR 0 5
9711: PUSH
9712: LD_VAR 0 8
9716: PUSH
9717: FOR_IN
9718: IFFALSE 9776
// begin for j in mechanicInside_list do
9720: LD_ADDR_VAR 0 6
9724: PUSH
9725: LD_VAR 0 10
9729: PUSH
9730: FOR_IN
9731: IFFALSE 9772
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9733: LD_VAR 0 8
9737: PPUSH
9738: LD_VAR 0 2
9742: PPUSH
9743: CALL_OW 113
// AddComExitVehicle ( j ) ;
9747: LD_VAR 0 6
9751: PPUSH
9752: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9756: LD_VAR 0 6
9760: PPUSH
9761: LD_VAR 0 5
9765: PPUSH
9766: CALL_OW 189
// end ;
9770: GO 9730
9772: POP
9773: POP
// end ;
9774: GO 9717
9776: POP
9777: POP
// end ; if emptyVehicle_list > 0 then
9778: LD_VAR 0 9
9782: PUSH
9783: LD_INT 0
9785: GREATER
9786: IFFALSE 9836
// begin for i in emptyVehicle_list do
9788: LD_ADDR_VAR 0 5
9792: PUSH
9793: LD_VAR 0 9
9797: PUSH
9798: FOR_IN
9799: IFFALSE 9834
// begin for j in mechanicOutside_list do
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: LD_VAR 0 11
9810: PUSH
9811: FOR_IN
9812: IFFALSE 9830
// begin AddComEnterUnit ( j , i ) ;
9814: LD_VAR 0 6
9818: PPUSH
9819: LD_VAR 0 5
9823: PPUSH
9824: CALL_OW 180
// end ;
9828: GO 9811
9830: POP
9831: POP
// end ;
9832: GO 9798
9834: POP
9835: POP
// end ; if VehicleOK_list > 0 then
9836: LD_VAR 0 7
9840: PUSH
9841: LD_INT 0
9843: GREATER
9844: IFFALSE 9878
// begin for i in VehicleOK_list do
9846: LD_ADDR_VAR 0 5
9850: PUSH
9851: LD_VAR 0 7
9855: PUSH
9856: FOR_IN
9857: IFFALSE 9876
// ComAgressiveMove ( i , 110 , 29 ) ;
9859: LD_VAR 0 5
9863: PPUSH
9864: LD_INT 110
9866: PPUSH
9867: LD_INT 29
9869: PPUSH
9870: CALL_OW 114
9874: GO 9856
9876: POP
9877: POP
// end ; end ;
9878: LD_VAR 0 4
9882: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9883: LD_INT 0
9885: PPUSH
9886: PPUSH
9887: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9888: LD_VAR 0 1
9892: PPUSH
9893: LD_INT 22
9895: PUSH
9896: LD_VAR 0 2
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 2
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 21
9920: PUSH
9921: LD_INT 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 70
9941: PUSH
9942: LD_VAR 0 5
9946: GREATER
9947: IFFALSE 10079
// begin for i in defendersList do
9949: LD_ADDR_VAR 0 7
9953: PUSH
9954: LD_VAR 0 3
9958: PUSH
9959: FOR_IN
9960: IFFALSE 10075
// begin AddComExitBuilding ( i ) ;
9962: LD_VAR 0 7
9966: PPUSH
9967: CALL_OW 182
// wait ( 0 0$1 ) ;
9971: LD_INT 35
9973: PPUSH
9974: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9978: LD_ADDR_VAR 0 8
9982: PUSH
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 2
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 21
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 21
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PPUSH
10032: CALL_OW 70
10036: PUSH
10037: FOR_IN
10038: IFFALSE 10071
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10040: LD_VAR 0 7
10044: PPUSH
10045: LD_VAR 0 8
10049: PPUSH
10050: CALL_OW 250
10054: PPUSH
10055: LD_VAR 0 8
10059: PPUSH
10060: CALL_OW 251
10064: PPUSH
10065: CALL_OW 174
10069: GO 10037
10071: POP
10072: POP
// end ;
10073: GO 9959
10075: POP
10076: POP
// end else
10077: GO 10110
// begin for i in defendersList do
10079: LD_ADDR_VAR 0 7
10083: PUSH
10084: LD_VAR 0 3
10088: PUSH
10089: FOR_IN
10090: IFFALSE 10108
// ComEnterUnit ( i , build ) ;
10092: LD_VAR 0 7
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
10106: GO 10089
10108: POP
10109: POP
// end ; end ;
10110: LD_VAR 0 6
10114: RET
// export function RussianTrap ; var i ; begin
10115: LD_INT 0
10117: PPUSH
10118: PPUSH
// if GetSide ( Brian ) = 4 then
10119: LD_EXP 6
10123: PPUSH
10124: CALL_OW 255
10128: PUSH
10129: LD_INT 4
10131: EQUAL
10132: IFFALSE 10155
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10134: LD_EXP 6
10138: PUSH
10139: LD_EXP 7
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PPUSH
10148: LD_INT 0
10150: PPUSH
10151: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10155: LD_ADDR_VAR 0 2
10159: PUSH
10160: LD_INT 22
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 21
10172: PUSH
10173: LD_INT 1
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 69
10188: PUSH
10189: FOR_IN
10190: IFFALSE 10300
// begin ComExitBuilding ( i ) ;
10192: LD_VAR 0 2
10196: PPUSH
10197: CALL_OW 122
// wait ( 0 0$1 ) ;
10201: LD_INT 35
10203: PPUSH
10204: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10208: LD_VAR 0 2
10212: PPUSH
10213: LD_INT 120
10215: PPUSH
10216: LD_INT 56
10218: PPUSH
10219: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_INT 111
10230: PPUSH
10231: LD_INT 37
10233: PPUSH
10234: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10238: LD_INT 33
10240: PPUSH
10241: CALL_OW 255
10245: PUSH
10246: LD_INT 3
10248: EQUAL
10249: PUSH
10250: LD_INT 33
10252: PPUSH
10253: CALL_OW 302
10257: AND
10258: IFFALSE 10274
// begin AddComEnterUnit ( i , arm2 ) ;
10260: LD_VAR 0 2
10264: PPUSH
10265: LD_INT 33
10267: PPUSH
10268: CALL_OW 180
// end else
10272: GO 10298
// begin AddComCrawl ( i ) ;
10274: LD_VAR 0 2
10278: PPUSH
10279: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10283: LD_VAR 0 2
10287: PPUSH
10288: LD_INT 109
10290: PPUSH
10291: LD_INT 30
10293: PPUSH
10294: CALL_OW 174
// end ; end ;
10298: GO 10189
10300: POP
10301: POP
// end ;
10302: LD_VAR 0 1
10306: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10307: LD_INT 0
10309: PPUSH
10310: PPUSH
10311: PPUSH
10312: PPUSH
10313: PPUSH
// nearest_dist = 1000 ;
10314: LD_ADDR_VAR 0 4
10318: PUSH
10319: LD_INT 1000
10321: ST_TO_ADDR
// nearest_un = un ;
10322: LD_ADDR_VAR 0 5
10326: PUSH
10327: LD_VAR 0 1
10331: ST_TO_ADDR
// for sold in units do
10332: LD_ADDR_VAR 0 6
10336: PUSH
10337: LD_VAR 0 2
10341: PUSH
10342: FOR_IN
10343: IFFALSE 10399
// begin dist = GetDistUnits ( un , sold ) ;
10345: LD_ADDR_VAR 0 7
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: LD_VAR 0 6
10359: PPUSH
10360: CALL_OW 296
10364: ST_TO_ADDR
// if dist < nearest_dist then
10365: LD_VAR 0 7
10369: PUSH
10370: LD_VAR 0 4
10374: LESS
10375: IFFALSE 10397
// begin nearest_un = sold ;
10377: LD_ADDR_VAR 0 5
10381: PUSH
10382: LD_VAR 0 6
10386: ST_TO_ADDR
// nearest_dist = dist ;
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 7
10396: ST_TO_ADDR
// end ; end ;
10397: GO 10342
10399: POP
10400: POP
// result := nearest_un ;
10401: LD_ADDR_VAR 0 3
10405: PUSH
10406: LD_VAR 0 5
10410: ST_TO_ADDR
// end ;
10411: LD_VAR 0 3
10415: RET
// export function PrepareDifficulty ; begin
10416: LD_INT 0
10418: PPUSH
// if Difficulty = 1 then
10419: LD_OWVAR 67
10423: PUSH
10424: LD_INT 1
10426: EQUAL
10427: IFFALSE 10490
// begin RemoveUnit ( brw2 ) ;
10429: LD_INT 9
10431: PPUSH
10432: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10436: LD_INT 30
10438: PPUSH
10439: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10443: LD_INT 52
10445: PPUSH
10446: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10450: LD_INT 63
10452: PPUSH
10453: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10457: LD_INT 5
10459: PUSH
10460: LD_INT 4
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: LD_INT 60
10469: PPUSH
10470: CALL_OW 240
// RuSoldMinLevel = 0 ;
10474: LD_ADDR_EXP 13
10478: PUSH
10479: LD_INT 0
10481: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10482: LD_ADDR_EXP 14
10486: PUSH
10487: LD_INT 1
10489: ST_TO_ADDR
// end ; if Difficulty = 2 then
10490: LD_OWVAR 67
10494: PUSH
10495: LD_INT 2
10497: EQUAL
10498: IFFALSE 10540
// begin RemoveUnit ( brw4 ) ;
10500: LD_INT 52
10502: PPUSH
10503: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10507: LD_INT 5
10509: PUSH
10510: LD_INT 4
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PPUSH
10517: LD_INT 50
10519: PPUSH
10520: CALL_OW 240
// RuSoldMinLevel = 1 ;
10524: LD_ADDR_EXP 13
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10532: LD_ADDR_EXP 14
10536: PUSH
10537: LD_INT 2
10539: ST_TO_ADDR
// end ; if Difficulty = 3 then
10540: LD_OWVAR 67
10544: PUSH
10545: LD_INT 3
10547: EQUAL
10548: IFFALSE 10583
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10550: LD_INT 5
10552: PUSH
10553: LD_INT 4
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PPUSH
10560: LD_INT 40
10562: PPUSH
10563: CALL_OW 240
// RuSoldMinLevel = 2 ;
10567: LD_ADDR_EXP 13
10571: PUSH
10572: LD_INT 2
10574: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10575: LD_ADDR_EXP 14
10579: PUSH
10580: LD_INT 3
10582: ST_TO_ADDR
// end ; end ;
10583: LD_VAR 0 1
10587: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10588: LD_INT 0
10590: PPUSH
10591: PPUSH
10592: PPUSH
// tmp = [ ] ;
10593: LD_ADDR_VAR 0 5
10597: PUSH
10598: EMPTY
10599: ST_TO_ADDR
// if not vehicles then
10600: LD_VAR 0 1
10604: NOT
10605: IFFALSE 10609
// exit ;
10607: GO 10726
// for i in vehicles do
10609: LD_ADDR_VAR 0 4
10613: PUSH
10614: LD_VAR 0 1
10618: PUSH
10619: FOR_IN
10620: IFFALSE 10710
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10622: LD_ADDR_VAR 0 5
10626: PUSH
10627: LD_VAR 0 5
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL_OW 265
10644: PUSH
10645: LD_VAR 0 4
10649: PPUSH
10650: CALL_OW 262
10654: PUSH
10655: LD_VAR 0 4
10659: PPUSH
10660: CALL_OW 263
10664: PUSH
10665: LD_VAR 0 4
10669: PPUSH
10670: CALL_OW 264
10674: PUSH
10675: LD_VAR 0 4
10679: PPUSH
10680: CALL_OW 261
10684: PUSH
10685: LD_VAR 0 4
10689: PPUSH
10690: CALL_OW 256
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 2
10707: ST_TO_ADDR
// end ;
10708: GO 10619
10710: POP
10711: POP
// SaveVariable ( tmp , ident ) ;
10712: LD_VAR 0 5
10716: PPUSH
10717: LD_VAR 0 2
10721: PPUSH
10722: CALL_OW 39
// end ; end_of_file
10726: LD_VAR 0 3
10730: RET
// export function PrepareHeroes ; var plive ; begin
10731: LD_INT 0
10733: PPUSH
10734: PPUSH
// uc_side = 1 ;
10735: LD_ADDR_OWVAR 20
10739: PUSH
10740: LD_INT 1
10742: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10743: LD_ADDR_EXP 1
10747: PUSH
10748: LD_STRING 01_JMM
10750: PPUSH
10751: CALL_OW 34
10755: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10756: LD_ADDR_VAR 0 2
10760: PUSH
10761: LD_STRING 01_JMMLifePoints_1
10763: PPUSH
10764: LD_INT 1000
10766: PPUSH
10767: CALL_OW 30
10771: ST_TO_ADDR
// if plive < 250 then
10772: LD_VAR 0 2
10776: PUSH
10777: LD_INT 250
10779: LESS
10780: IFFALSE 10790
// plive := 300 ;
10782: LD_ADDR_VAR 0 2
10786: PUSH
10787: LD_INT 300
10789: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10790: LD_EXP 1
10794: PPUSH
10795: LD_VAR 0 2
10799: PPUSH
10800: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10804: LD_ADDR_EXP 9
10808: PUSH
10809: LD_STRING Powell
10811: PPUSH
10812: CALL_OW 25
10816: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10817: LD_ADDR_EXP 2
10821: PUSH
10822: LD_STRING 01_Bobby
10824: PPUSH
10825: CALL_OW 34
10829: ST_TO_ADDR
// if Bobby then
10830: LD_EXP 2
10834: IFFALSE 10884
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_STRING 01_BobbyLifePoints_1
10843: PPUSH
10844: LD_INT 1000
10846: PPUSH
10847: CALL_OW 30
10851: ST_TO_ADDR
// if plive < 250 then
10852: LD_VAR 0 2
10856: PUSH
10857: LD_INT 250
10859: LESS
10860: IFFALSE 10870
// plive := 300 ;
10862: LD_ADDR_VAR 0 2
10866: PUSH
10867: LD_INT 300
10869: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10870: LD_EXP 2
10874: PPUSH
10875: LD_VAR 0 2
10879: PPUSH
10880: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10884: LD_ADDR_EXP 3
10888: PUSH
10889: LD_STRING 01_Cyrus
10891: PPUSH
10892: CALL_OW 34
10896: ST_TO_ADDR
// if Cyrus then
10897: LD_EXP 3
10901: IFFALSE 10951
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10903: LD_ADDR_VAR 0 2
10907: PUSH
10908: LD_STRING 01_CyrusLifePoints_1
10910: PPUSH
10911: LD_INT 1000
10913: PPUSH
10914: CALL_OW 30
10918: ST_TO_ADDR
// if plive < 250 then
10919: LD_VAR 0 2
10923: PUSH
10924: LD_INT 250
10926: LESS
10927: IFFALSE 10937
// plive := 300 ;
10929: LD_ADDR_VAR 0 2
10933: PUSH
10934: LD_INT 300
10936: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10937: LD_EXP 3
10941: PPUSH
10942: LD_VAR 0 2
10946: PPUSH
10947: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10951: LD_ADDR_EXP 5
10955: PUSH
10956: LD_STRING Khatam
10958: PPUSH
10959: CALL_OW 25
10963: ST_TO_ADDR
// uc_side = 4 ;
10964: LD_ADDR_OWVAR 20
10968: PUSH
10969: LD_INT 4
10971: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10972: LD_ADDR_EXP 4
10976: PUSH
10977: LD_STRING Lisa
10979: PPUSH
10980: CALL_OW 25
10984: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10985: LD_EXP 1
10989: PPUSH
10990: LD_INT 3
10992: PPUSH
10993: LD_INT 0
10995: PPUSH
10996: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11000: LD_EXP 2
11004: PPUSH
11005: LD_INT 3
11007: PPUSH
11008: LD_INT 0
11010: PPUSH
11011: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11015: LD_EXP 3
11019: PPUSH
11020: LD_INT 3
11022: PPUSH
11023: LD_INT 0
11025: PPUSH
11026: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11030: LD_EXP 4
11034: PPUSH
11035: LD_INT 5
11037: PPUSH
11038: LD_INT 0
11040: PPUSH
11041: CALL_OW 49
// ComCrawl ( Lisa ) ;
11045: LD_EXP 4
11049: PPUSH
11050: CALL_OW 137
// end ;
11054: LD_VAR 0 1
11058: RET
// export function PrepareLisSquad ; var i , un ; begin
11059: LD_INT 0
11061: PPUSH
11062: PPUSH
11063: PPUSH
// uc_side = 4 ;
11064: LD_ADDR_OWVAR 20
11068: PUSH
11069: LD_INT 4
11071: ST_TO_ADDR
// uc_nation = 1 ;
11072: LD_ADDR_OWVAR 21
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// hc_class := 2 ;
11080: LD_ADDR_OWVAR 28
11084: PUSH
11085: LD_INT 2
11087: ST_TO_ADDR
// hc_sex := sex_male ;
11088: LD_ADDR_OWVAR 27
11092: PUSH
11093: LD_INT 1
11095: ST_TO_ADDR
// hc_gallery :=  ;
11096: LD_ADDR_OWVAR 33
11100: PUSH
11101: LD_STRING 
11103: ST_TO_ADDR
// hc_name :=  ;
11104: LD_ADDR_OWVAR 26
11108: PUSH
11109: LD_STRING 
11111: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11112: LD_ADDR_OWVAR 30
11116: PUSH
11117: LD_INT 0
11119: PUSH
11120: LD_INT 1
11122: PUSH
11123: LD_INT 0
11125: PUSH
11126: LD_INT 0
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11135: LD_ADDR_OWVAR 31
11139: PUSH
11140: LD_INT 1
11142: PUSH
11143: LD_INT 2
11145: PUSH
11146: LD_INT 0
11148: PUSH
11149: LD_INT 0
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: ST_TO_ADDR
// un := CreateHuman ;
11158: LD_ADDR_VAR 0 3
11162: PUSH
11163: CALL_OW 44
11167: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 6
11175: PPUSH
11176: LD_INT 0
11178: PPUSH
11179: CALL_OW 49
// hc_sex := sex_female ;
11183: LD_ADDR_OWVAR 27
11187: PUSH
11188: LD_INT 2
11190: ST_TO_ADDR
// hc_gallery :=  ;
11191: LD_ADDR_OWVAR 33
11195: PUSH
11196: LD_STRING 
11198: ST_TO_ADDR
// hc_name :=  ;
11199: LD_ADDR_OWVAR 26
11203: PUSH
11204: LD_STRING 
11206: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11207: LD_ADDR_OWVAR 30
11211: PUSH
11212: LD_INT 0
11214: PUSH
11215: LD_INT 0
11217: PUSH
11218: LD_INT 0
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11230: LD_ADDR_OWVAR 31
11234: PUSH
11235: LD_INT 0
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: LD_INT 0
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: ST_TO_ADDR
// un := CreateHuman ;
11253: LD_ADDR_VAR 0 3
11257: PUSH
11258: CALL_OW 44
11262: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 6
11270: PPUSH
11271: LD_INT 0
11273: PPUSH
11274: CALL_OW 49
// if not Bobby and not Cyrus then
11278: LD_EXP 2
11282: NOT
11283: PUSH
11284: LD_EXP 3
11288: NOT
11289: AND
11290: IFFALSE 11395
// begin hc_class := 1 ;
11292: LD_ADDR_OWVAR 28
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// hc_sex := sex_male ;
11300: LD_ADDR_OWVAR 27
11304: PUSH
11305: LD_INT 1
11307: ST_TO_ADDR
// hc_gallery :=  ;
11308: LD_ADDR_OWVAR 33
11312: PUSH
11313: LD_STRING 
11315: ST_TO_ADDR
// hc_name :=  ;
11316: LD_ADDR_OWVAR 26
11320: PUSH
11321: LD_STRING 
11323: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11324: LD_ADDR_OWVAR 30
11328: PUSH
11329: LD_INT 2
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: LD_INT 1
11337: PUSH
11338: LD_INT 0
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11347: LD_ADDR_OWVAR 31
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: LD_INT 0
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: ST_TO_ADDR
// un := CreateHuman ;
11370: LD_ADDR_VAR 0 3
11374: PUSH
11375: CALL_OW 44
11379: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11380: LD_VAR 0 3
11384: PPUSH
11385: LD_INT 31
11387: PPUSH
11388: LD_INT 0
11390: PPUSH
11391: CALL_OW 49
// end ; InitHc ;
11395: CALL_OW 19
// end ;
11399: LD_VAR 0 1
11403: RET
// export function PrepareOtherAmericans ; begin
11404: LD_INT 0
11406: PPUSH
// uc_side = 4 ;
11407: LD_ADDR_OWVAR 20
11411: PUSH
11412: LD_INT 4
11414: ST_TO_ADDR
// uc_nation = 1 ;
11415: LD_ADDR_OWVAR 21
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// hc_gallery =  ;
11423: LD_ADDR_OWVAR 33
11427: PUSH
11428: LD_STRING 
11430: ST_TO_ADDR
// hc_name = Tom Garvin ;
11431: LD_ADDR_OWVAR 26
11435: PUSH
11436: LD_STRING Tom Garvin
11438: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11439: LD_INT 1
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: LD_INT 2
11450: PPUSH
11451: CALL_OW 12
11455: PPUSH
11456: CALL_OW 380
// Brian = CreateHuman ;
11460: LD_ADDR_EXP 6
11464: PUSH
11465: CALL_OW 44
11469: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11470: LD_EXP 6
11474: PPUSH
11475: LD_INT 10
11477: PPUSH
11478: LD_INT 0
11480: PPUSH
11481: CALL_OW 49
// hc_name = Jerry White ;
11485: LD_ADDR_OWVAR 26
11489: PUSH
11490: LD_STRING Jerry White
11492: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11493: LD_INT 1
11495: PPUSH
11496: LD_INT 3
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: LD_INT 2
11504: PPUSH
11505: CALL_OW 12
11509: PPUSH
11510: CALL_OW 380
// Jerry = CreateHuman ;
11514: LD_ADDR_EXP 7
11518: PUSH
11519: CALL_OW 44
11523: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11524: LD_EXP 7
11528: PPUSH
11529: LD_INT 10
11531: PPUSH
11532: LD_INT 0
11534: PPUSH
11535: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11539: LD_EXP 6
11543: PUSH
11544: LD_EXP 7
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PPUSH
11553: CALL_OW 140
// end ;
11557: LD_VAR 0 1
11561: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11562: LD_INT 0
11564: PPUSH
11565: PPUSH
11566: PPUSH
// for i = 1 to 6 do
11567: LD_ADDR_VAR 0 2
11571: PUSH
11572: DOUBLE
11573: LD_INT 1
11575: DEC
11576: ST_TO_ADDR
11577: LD_INT 6
11579: PUSH
11580: FOR_TO
11581: IFFALSE 11675
// begin uc_side = 4 ;
11583: LD_ADDR_OWVAR 20
11587: PUSH
11588: LD_INT 4
11590: ST_TO_ADDR
// uc_nation = 1 ;
11591: LD_ADDR_OWVAR 21
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// hc_gallery =  ;
11599: LD_ADDR_OWVAR 33
11603: PUSH
11604: LD_STRING 
11606: ST_TO_ADDR
// hc_name =  ;
11607: LD_ADDR_OWVAR 26
11611: PUSH
11612: LD_STRING 
11614: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11615: LD_INT 0
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: LD_INT 4
11623: PPUSH
11624: CALL_OW 12
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 380
// un = CreateHuman ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: CALL_OW 44
11645: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11646: LD_VAR 0 3
11650: PPUSH
11651: LD_INT 16
11653: PPUSH
11654: LD_INT 0
11656: PPUSH
11657: CALL_OW 49
// SetLives ( un , 1 ) ;
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 234
// end ;
11673: GO 11580
11675: POP
11676: POP
// DyingSold = CreateHuman ;
11677: LD_ADDR_EXP 34
11681: PUSH
11682: CALL_OW 44
11686: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11687: LD_EXP 34
11691: PPUSH
11692: LD_INT 16
11694: PPUSH
11695: LD_INT 0
11697: PPUSH
11698: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11702: LD_EXP 34
11706: PPUSH
11707: LD_INT 250
11709: PPUSH
11710: CALL_OW 234
// end ; end_of_file
11714: LD_VAR 0 1
11718: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11719: LD_INT 0
11721: PPUSH
11722: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_INT 22
11730: PUSH
11731: LD_INT 1
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: LD_INT 23
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 25
11750: PUSH
11751: LD_INT 2
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 50
11760: PUSH
11761: EMPTY
11762: LIST
11763: PUSH
11764: LD_INT 56
11766: PUSH
11767: EMPTY
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 69
11781: PUSH
11782: LD_EXP 1
11786: PUSH
11787: EMPTY
11788: LIST
11789: DIFF
11790: ST_TO_ADDR
// uc_side = 6 ;
11791: LD_ADDR_OWVAR 20
11795: PUSH
11796: LD_INT 6
11798: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11799: LD_ADDR_EXP 8
11803: PUSH
11804: LD_STRING Mikhail
11806: PPUSH
11807: CALL_OW 25
11811: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11812: LD_EXP 8
11816: PPUSH
11817: LD_INT 3
11819: PPUSH
11820: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11824: LD_EXP 8
11828: PPUSH
11829: LD_VAR 0 2
11833: PUSH
11834: LD_INT 1
11836: ARRAY
11837: PPUSH
11838: CALL_OW 250
11842: PPUSH
11843: LD_VAR 0 2
11847: PUSH
11848: LD_INT 1
11850: ARRAY
11851: PPUSH
11852: CALL_OW 251
11856: PPUSH
11857: LD_INT 5
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 50
// end ;
11867: LD_VAR 0 1
11871: RET
// export function PrepareRussianCommander ; begin
11872: LD_INT 0
11874: PPUSH
// uc_side = 3 ;
11875: LD_ADDR_OWVAR 20
11879: PUSH
11880: LD_INT 3
11882: ST_TO_ADDR
// uc_nation = 3 ;
11883: LD_ADDR_OWVAR 21
11887: PUSH
11888: LD_INT 3
11890: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11891: LD_ADDR_EXP 19
11895: PUSH
11896: LD_STRING Natasza
11898: PPUSH
11899: CALL_OW 25
11903: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11904: LD_EXP 19
11908: PPUSH
11909: LD_INT 24
11911: PPUSH
11912: LD_INT 0
11914: PPUSH
11915: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11919: LD_EXP 19
11923: PPUSH
11924: LD_INT 56
11926: PPUSH
11927: LD_INT 16
11929: PPUSH
11930: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11934: LD_ADDR_EXP 24
11938: PUSH
11939: LD_EXP 24
11943: PUSH
11944: LD_EXP 19
11948: ADD
11949: ST_TO_ADDR
// end ;
11950: LD_VAR 0 1
11954: RET
// export function PrepareSouthBase ; var i , un ; begin
11955: LD_INT 0
11957: PPUSH
11958: PPUSH
11959: PPUSH
// for i = 1 to 2 do
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: DOUBLE
11966: LD_INT 1
11968: DEC
11969: ST_TO_ADDR
11970: LD_INT 2
11972: PUSH
11973: FOR_TO
11974: IFFALSE 12083
// begin uc_side = 3 ;
11976: LD_ADDR_OWVAR 20
11980: PUSH
11981: LD_INT 3
11983: ST_TO_ADDR
// uc_nation = 3 ;
11984: LD_ADDR_OWVAR 21
11988: PUSH
11989: LD_INT 3
11991: ST_TO_ADDR
// hc_gallery =  ;
11992: LD_ADDR_OWVAR 33
11996: PUSH
11997: LD_STRING 
11999: ST_TO_ADDR
// hc_name =  ;
12000: LD_ADDR_OWVAR 26
12004: PUSH
12005: LD_STRING 
12007: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: LD_EXP 13
12018: PPUSH
12019: LD_EXP 14
12023: PPUSH
12024: CALL_OW 12
12028: PPUSH
12029: CALL_OW 380
// hc_importance = 0 ;
12033: LD_ADDR_OWVAR 32
12037: PUSH
12038: LD_INT 0
12040: ST_TO_ADDR
// un = CreateHuman ;
12041: LD_ADDR_VAR 0 3
12045: PUSH
12046: CALL_OW 44
12050: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 11
12058: PPUSH
12059: LD_INT 0
12061: PPUSH
12062: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12066: LD_VAR 0 3
12070: PPUSH
12071: LD_INT 111
12073: PPUSH
12074: LD_INT 38
12076: PPUSH
12077: CALL_OW 118
// end ;
12081: GO 11973
12083: POP
12084: POP
// for i = 1 to Difficulty do
12085: LD_ADDR_VAR 0 2
12089: PUSH
12090: DOUBLE
12091: LD_INT 1
12093: DEC
12094: ST_TO_ADDR
12095: LD_OWVAR 67
12099: PUSH
12100: FOR_TO
12101: IFFALSE 12184
// begin uc_side = 3 ;
12103: LD_ADDR_OWVAR 20
12107: PUSH
12108: LD_INT 3
12110: ST_TO_ADDR
// uc_nation = 3 ;
12111: LD_ADDR_OWVAR 21
12115: PUSH
12116: LD_INT 3
12118: ST_TO_ADDR
// hc_gallery =  ;
12119: LD_ADDR_OWVAR 33
12123: PUSH
12124: LD_STRING 
12126: ST_TO_ADDR
// hc_name =  ;
12127: LD_ADDR_OWVAR 26
12131: PUSH
12132: LD_STRING 
12134: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12135: LD_INT 0
12137: PPUSH
12138: LD_INT 3
12140: PPUSH
12141: LD_EXP 13
12145: PPUSH
12146: LD_EXP 14
12150: PPUSH
12151: CALL_OW 12
12155: PPUSH
12156: CALL_OW 380
// un = CreateHuman ;
12160: LD_ADDR_VAR 0 3
12164: PUSH
12165: CALL_OW 44
12169: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12170: LD_VAR 0 3
12174: PPUSH
12175: LD_INT 10
12177: PPUSH
12178: CALL_OW 52
// end ;
12182: GO 12100
12184: POP
12185: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12186: LD_INT 3
12188: PPUSH
12189: LD_INT 3
12191: PPUSH
12192: LD_INT 33
12194: PPUSH
12195: LD_EXP 13
12199: PPUSH
12200: LD_EXP 14
12204: PPUSH
12205: CALL_OW 12
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: LD_INT 1
12215: PUSH
12216: LD_INT 1
12218: PPUSH
12219: LD_INT 2
12221: PPUSH
12222: CALL_OW 12
12226: PUSH
12227: LD_INT 1
12229: PPUSH
12230: LD_INT 2
12232: PPUSH
12233: CALL_OW 12
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_OWVAR 67
12247: ARRAY
12248: PPUSH
12249: CALL 8642 0 6
// for i in UnitsInside ( arm2 ) do
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_INT 33
12260: PPUSH
12261: CALL_OW 313
12265: PUSH
12266: FOR_IN
12267: IFFALSE 12287
// southBaseDefenders = southBaseDefenders ^ i ;
12269: LD_ADDR_EXP 25
12273: PUSH
12274: LD_EXP 25
12278: PUSH
12279: LD_VAR 0 2
12283: ADD
12284: ST_TO_ADDR
12285: GO 12266
12287: POP
12288: POP
// end ;
12289: LD_VAR 0 1
12293: RET
// export function PrepareNorthBase ; var i , un ; begin
12294: LD_INT 0
12296: PPUSH
12297: PPUSH
12298: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: DOUBLE
12305: LD_INT 1
12307: DEC
12308: ST_TO_ADDR
12309: LD_INT 1
12311: PPUSH
12312: LD_INT 2
12314: PPUSH
12315: CALL_OW 12
12319: PUSH
12320: LD_INT 2
12322: PPUSH
12323: LD_INT 3
12325: PPUSH
12326: CALL_OW 12
12330: PUSH
12331: LD_INT 3
12333: PPUSH
12334: LD_INT 4
12336: PPUSH
12337: CALL_OW 12
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: LD_OWVAR 67
12351: ARRAY
12352: PUSH
12353: FOR_TO
12354: IFFALSE 12440
// begin uc_side = 3 ;
12356: LD_ADDR_OWVAR 20
12360: PUSH
12361: LD_INT 3
12363: ST_TO_ADDR
// uc_nation = 3 ;
12364: LD_ADDR_OWVAR 21
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// hc_gallery =  ;
12372: LD_ADDR_OWVAR 33
12376: PUSH
12377: LD_STRING 
12379: ST_TO_ADDR
// hc_name =  ;
12380: LD_ADDR_OWVAR 26
12384: PUSH
12385: LD_STRING 
12387: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12388: LD_INT 0
12390: PPUSH
12391: LD_INT 1
12393: PPUSH
12394: LD_EXP 13
12398: PPUSH
12399: LD_EXP 14
12403: PPUSH
12404: CALL_OW 12
12408: PPUSH
12409: CALL_OW 380
// un = CreateHuman ;
12413: LD_ADDR_VAR 0 3
12417: PUSH
12418: CALL_OW 44
12422: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12423: LD_VAR 0 3
12427: PPUSH
12428: LD_INT 14
12430: PPUSH
12431: LD_INT 0
12433: PPUSH
12434: CALL_OW 49
// end ;
12438: GO 12353
12440: POP
12441: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 3
12447: PPUSH
12448: LD_INT 2
12450: PPUSH
12451: LD_EXP 13
12455: PPUSH
12456: LD_EXP 14
12460: PPUSH
12461: CALL_OW 12
12465: PPUSH
12466: LD_INT 1
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: LD_INT 2
12474: PPUSH
12475: CALL_OW 12
12479: PUSH
12480: LD_INT 1
12482: PPUSH
12483: LD_INT 3
12485: PPUSH
12486: CALL_OW 12
12490: PUSH
12491: LD_INT 1
12493: PPUSH
12494: LD_INT 3
12496: PPUSH
12497: CALL_OW 12
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: LD_OWVAR 67
12511: ARRAY
12512: PPUSH
12513: CALL 8642 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12517: LD_INT 3
12519: PPUSH
12520: LD_INT 3
12522: PPUSH
12523: LD_INT 23
12525: PPUSH
12526: LD_EXP 13
12530: PPUSH
12531: LD_EXP 14
12535: PPUSH
12536: CALL_OW 12
12540: PPUSH
12541: LD_INT 4
12543: PPUSH
12544: LD_INT 0
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: LD_OWVAR 67
12562: ARRAY
12563: PPUSH
12564: CALL 8642 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12568: LD_INT 3
12570: PPUSH
12571: LD_INT 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: LD_EXP 13
12581: PPUSH
12582: LD_EXP 14
12586: PPUSH
12587: CALL_OW 12
12591: PPUSH
12592: LD_INT 2
12594: PPUSH
12595: LD_INT 1
12597: PUSH
12598: LD_INT 2
12600: PUSH
12601: LD_INT 2
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: LD_OWVAR 67
12613: ARRAY
12614: PPUSH
12615: CALL 8642 0 6
// for i in UnitsInside ( arm1 ) do
12619: LD_ADDR_VAR 0 2
12623: PUSH
12624: LD_INT 2
12626: PPUSH
12627: CALL_OW 313
12631: PUSH
12632: FOR_IN
12633: IFFALSE 12653
// northBaseDefenders = northBaseDefenders ^ i ;
12635: LD_ADDR_EXP 24
12639: PUSH
12640: LD_EXP 24
12644: PUSH
12645: LD_VAR 0 2
12649: ADD
12650: ST_TO_ADDR
12651: GO 12632
12653: POP
12654: POP
// end ;
12655: LD_VAR 0 1
12659: RET
// export function PrepareOtherRussians ; var i , un ; begin
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
// for i = 1 to 2 do
12665: LD_ADDR_VAR 0 2
12669: PUSH
12670: DOUBLE
12671: LD_INT 1
12673: DEC
12674: ST_TO_ADDR
12675: LD_INT 2
12677: PUSH
12678: FOR_TO
12679: IFFALSE 12780
// begin uc_side = 3 ;
12681: LD_ADDR_OWVAR 20
12685: PUSH
12686: LD_INT 3
12688: ST_TO_ADDR
// uc_nation = 3 ;
12689: LD_ADDR_OWVAR 21
12693: PUSH
12694: LD_INT 3
12696: ST_TO_ADDR
// hc_gallery =  ;
12697: LD_ADDR_OWVAR 33
12701: PUSH
12702: LD_STRING 
12704: ST_TO_ADDR
// hc_name =  ;
12705: LD_ADDR_OWVAR 26
12709: PUSH
12710: LD_STRING 
12712: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12713: LD_INT 0
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: LD_EXP 13
12723: PPUSH
12724: LD_EXP 14
12728: PPUSH
12729: CALL_OW 12
12733: PPUSH
12734: CALL_OW 380
// un = CreateHuman ;
12738: LD_ADDR_VAR 0 3
12742: PUSH
12743: CALL_OW 44
12747: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12748: LD_VAR 0 3
12752: PPUSH
12753: LD_INT 9
12755: PPUSH
12756: LD_INT 0
12758: PPUSH
12759: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12763: LD_VAR 0 3
12767: PPUSH
12768: LD_INT 80
12770: PPUSH
12771: LD_INT 73
12773: PPUSH
12774: CALL_OW 118
// end ;
12778: GO 12678
12780: POP
12781: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12782: LD_ADDR_VAR 0 2
12786: PUSH
12787: LD_INT 22
12789: PUSH
12790: LD_INT 3
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 30
12799: PUSH
12800: LD_INT 31
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 69
12815: PUSH
12816: FOR_IN
12817: IFFALSE 12845
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12819: LD_EXP 13
12823: PPUSH
12824: LD_EXP 14
12828: PPUSH
12829: CALL_OW 12
12833: PPUSH
12834: LD_VAR 0 2
12838: PPUSH
12839: CALL 8752 0 2
12843: GO 12816
12845: POP
12846: POP
// end ;
12847: LD_VAR 0 1
12851: RET
// export function PrepareCargoBays ; begin
12852: LD_INT 0
12854: PPUSH
// uc_side = 3 ;
12855: LD_ADDR_OWVAR 20
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
// uc_nation = 3 ;
12863: LD_ADDR_OWVAR 21
12867: PUSH
12868: LD_INT 3
12870: ST_TO_ADDR
// vc_engine = 1 ;
12871: LD_ADDR_OWVAR 39
12875: PUSH
12876: LD_INT 1
12878: ST_TO_ADDR
// vc_control = 1 ;
12879: LD_ADDR_OWVAR 38
12883: PUSH
12884: LD_INT 1
12886: ST_TO_ADDR
// vc_weapon = 51 ;
12887: LD_ADDR_OWVAR 40
12891: PUSH
12892: LD_INT 51
12894: ST_TO_ADDR
// vc_chassis = 22 ;
12895: LD_ADDR_OWVAR 37
12899: PUSH
12900: LD_INT 22
12902: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12903: LD_ADDR_EXP 15
12907: PUSH
12908: CALL_OW 45
12912: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12913: LD_ADDR_EXP 16
12917: PUSH
12918: CALL_OW 45
12922: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12923: LD_EXP 15
12927: PPUSH
12928: LD_INT 13
12930: PPUSH
12931: LD_INT 0
12933: PPUSH
12934: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12938: LD_EXP 16
12942: PPUSH
12943: LD_INT 13
12945: PPUSH
12946: LD_INT 0
12948: PPUSH
12949: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12953: LD_EXP 15
12957: PPUSH
12958: LD_INT 2
12960: PPUSH
12961: LD_INT 70
12963: PUSH
12964: LD_INT 50
12966: PUSH
12967: LD_INT 30
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: LD_OWVAR 67
12979: ARRAY
12980: PPUSH
12981: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12985: LD_EXP 16
12989: PPUSH
12990: LD_INT 2
12992: PPUSH
12993: LD_INT 70
12995: PUSH
12996: LD_INT 50
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: LD_OWVAR 67
13011: ARRAY
13012: PPUSH
13013: CALL_OW 291
// hc_gallery =  ;
13017: LD_ADDR_OWVAR 33
13021: PUSH
13022: LD_STRING 
13024: ST_TO_ADDR
// hc_name =  ;
13025: LD_ADDR_OWVAR 26
13029: PUSH
13030: LD_STRING 
13032: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13033: LD_INT 1
13035: PPUSH
13036: LD_INT 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: LD_INT 2
13044: PPUSH
13045: CALL_OW 12
13049: PPUSH
13050: CALL_OW 380
// driver1 = CreateHuman ;
13054: LD_ADDR_EXP 17
13058: PUSH
13059: CALL_OW 44
13063: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13064: LD_EXP 17
13068: PPUSH
13069: LD_EXP 15
13073: PPUSH
13074: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13078: LD_ADDR_OWVAR 26
13082: PUSH
13083: LD_STRING Nikolai Andreyev
13085: ST_TO_ADDR
// driver2 = CreateHuman ;
13086: LD_ADDR_EXP 18
13090: PUSH
13091: CALL_OW 44
13095: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13096: LD_EXP 18
13100: PPUSH
13101: LD_EXP 16
13105: PPUSH
13106: CALL_OW 52
// end ;
13110: LD_VAR 0 1
13114: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13115: LD_INT 0
13117: PPUSH
13118: PPUSH
13119: PPUSH
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
// uc_side = 3 ;
13124: LD_ADDR_OWVAR 20
13128: PUSH
13129: LD_INT 3
13131: ST_TO_ADDR
// uc_nation = 3 ;
13132: LD_ADDR_OWVAR 21
13136: PUSH
13137: LD_INT 3
13139: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13140: LD_ADDR_VAR 0 4
13144: PUSH
13145: DOUBLE
13146: LD_INT 1
13148: DEC
13149: ST_TO_ADDR
13150: LD_VAR 0 1
13154: PUSH
13155: LD_INT 1
13157: PPUSH
13158: LD_INT 3
13160: PPUSH
13161: CALL_OW 12
13165: PLUS
13166: PUSH
13167: FOR_TO
13168: IFFALSE 13345
// begin vc_engine = 1 ;
13170: LD_ADDR_OWVAR 39
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// vc_control = 1 ;
13178: LD_ADDR_OWVAR 38
13182: PUSH
13183: LD_INT 1
13185: ST_TO_ADDR
// vc_weapon = 42 ;
13186: LD_ADDR_OWVAR 40
13190: PUSH
13191: LD_INT 42
13193: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13194: LD_ADDR_OWVAR 37
13198: PUSH
13199: LD_INT 21
13201: PUSH
13202: LD_INT 22
13204: PUSH
13205: LD_INT 22
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: PUSH
13213: LD_OWVAR 67
13217: ARRAY
13218: ST_TO_ADDR
// veh = CreateVehicle ;
13219: LD_ADDR_VAR 0 5
13223: PUSH
13224: CALL_OW 45
13228: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13229: LD_VAR 0 5
13233: PPUSH
13234: LD_VAR 0 2
13238: PPUSH
13239: LD_INT 0
13241: PPUSH
13242: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13246: LD_ADDR_EXP 26
13250: PUSH
13251: LD_EXP 26
13255: PUSH
13256: LD_VAR 0 5
13260: ADD
13261: ST_TO_ADDR
// hc_gallery =  ;
13262: LD_ADDR_OWVAR 33
13266: PUSH
13267: LD_STRING 
13269: ST_TO_ADDR
// hc_name =  ;
13270: LD_ADDR_OWVAR 26
13274: PUSH
13275: LD_STRING 
13277: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13278: LD_INT 0
13280: PPUSH
13281: LD_INT 3
13283: PPUSH
13284: LD_EXP 13
13288: PPUSH
13289: LD_EXP 14
13293: PPUSH
13294: CALL_OW 12
13298: PPUSH
13299: CALL_OW 380
// un = CreateHuman ;
13303: LD_ADDR_VAR 0 6
13307: PUSH
13308: CALL_OW 44
13312: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13313: LD_VAR 0 6
13317: PPUSH
13318: LD_VAR 0 5
13322: PPUSH
13323: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13327: LD_ADDR_EXP 26
13331: PUSH
13332: LD_EXP 26
13336: PUSH
13337: LD_VAR 0 6
13341: ADD
13342: ST_TO_ADDR
// end ;
13343: GO 13167
13345: POP
13346: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13347: LD_INT 0
13349: PPUSH
13350: LD_INT 2
13352: PPUSH
13353: LD_EXP 13
13357: PPUSH
13358: LD_EXP 14
13362: PPUSH
13363: CALL_OW 12
13367: PPUSH
13368: CALL_OW 380
// un = CreateHuman ;
13372: LD_ADDR_VAR 0 6
13376: PUSH
13377: CALL_OW 44
13381: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13382: LD_ADDR_VAR 0 4
13386: PUSH
13387: DOUBLE
13388: LD_INT 1
13390: DEC
13391: ST_TO_ADDR
13392: LD_VAR 0 1
13396: PUSH
13397: LD_INT 2
13399: PUSH
13400: LD_INT 2
13402: MUL
13403: PLUS
13404: PUSH
13405: FOR_TO
13406: IFFALSE 13494
// begin hc_gallery =  ;
13408: LD_ADDR_OWVAR 33
13412: PUSH
13413: LD_STRING 
13415: ST_TO_ADDR
// hc_name =  ;
13416: LD_ADDR_OWVAR 26
13420: PUSH
13421: LD_STRING 
13423: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13424: LD_INT 1
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: LD_EXP 13
13434: PPUSH
13435: LD_EXP 14
13439: PPUSH
13440: CALL_OW 12
13444: PPUSH
13445: CALL_OW 380
// un = CreateHuman ;
13449: LD_ADDR_VAR 0 6
13453: PUSH
13454: CALL_OW 44
13458: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13459: LD_VAR 0 6
13463: PPUSH
13464: LD_VAR 0 2
13468: PPUSH
13469: LD_INT 0
13471: PPUSH
13472: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13476: LD_ADDR_EXP 26
13480: PUSH
13481: LD_EXP 26
13485: PUSH
13486: LD_VAR 0 6
13490: ADD
13491: ST_TO_ADDR
// end ;
13492: GO 13405
13494: POP
13495: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13496: LD_ADDR_VAR 0 7
13500: PUSH
13501: LD_INT 26
13503: PPUSH
13504: LD_INT 22
13506: PUSH
13507: LD_INT 3
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 21
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 26
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 70
13543: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13544: LD_VAR 0 7
13548: PUSH
13549: LD_INT 1
13551: ARRAY
13552: PPUSH
13553: LD_STRING D9-Rus3-1
13555: PPUSH
13556: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13560: LD_VAR 0 7
13564: PUSH
13565: LD_INT 2
13567: ARRAY
13568: PPUSH
13569: LD_STRING D9-Russ-1
13571: PPUSH
13572: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13576: LD_INT 35
13578: PPUSH
13579: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13583: LD_ADDR_VAR 0 4
13587: PUSH
13588: LD_INT 26
13590: PPUSH
13591: LD_INT 22
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: PPUSH
13604: CALL_OW 70
13608: PUSH
13609: FOR_IN
13610: IFFALSE 13782
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13612: LD_ADDR_VAR 0 8
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PPUSH
13627: CALL_OW 69
13631: PPUSH
13632: LD_VAR 0 4
13636: PPUSH
13637: CALL_OW 74
13641: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13642: LD_ADDR_VAR 0 9
13646: PUSH
13647: LD_INT 22
13649: PUSH
13650: LD_INT 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 2
13659: PUSH
13660: LD_INT 59
13662: PUSH
13663: EMPTY
13664: LIST
13665: PUSH
13666: LD_INT 21
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: PPUSH
13699: CALL_OW 69
13703: PPUSH
13704: LD_VAR 0 4
13708: PPUSH
13709: CALL_OW 74
13713: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13714: LD_VAR 0 4
13718: PPUSH
13719: LD_VAR 0 8
13723: PPUSH
13724: CALL_OW 296
13728: PUSH
13729: LD_INT 8
13731: PLUS
13732: PUSH
13733: LD_VAR 0 4
13737: PPUSH
13738: LD_VAR 0 9
13742: PPUSH
13743: CALL_OW 296
13747: LESS
13748: IFFALSE 13766
// begin ComAttackUnit ( i , target1 ) ;
13750: LD_VAR 0 4
13754: PPUSH
13755: LD_VAR 0 8
13759: PPUSH
13760: CALL_OW 115
// end else
13764: GO 13780
// begin ComAttackUnit ( i , target2 ) ;
13766: LD_VAR 0 4
13770: PPUSH
13771: LD_VAR 0 9
13775: PPUSH
13776: CALL_OW 115
// end ; end ;
13780: GO 13609
13782: POP
13783: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13784: LD_INT 26
13786: PPUSH
13787: LD_INT 22
13789: PUSH
13790: LD_INT 3
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 21
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 21
13812: PUSH
13813: LD_INT 2
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 59
13822: PUSH
13823: EMPTY
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PPUSH
13836: CALL_OW 70
13840: PUSH
13841: LD_INT 0
13843: EQUAL
13844: IFFALSE 13576
// end ; end_of_file
13846: LD_VAR 0 3
13850: RET
// every 0 0$1 do
13851: GO 13853
13853: DISABLE
// begin enable ;
13854: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13855: LD_INT 3
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 22
13863: PPUSH
13864: CALL 8888 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13868: LD_INT 3
13870: PPUSH
13871: LD_INT 20
13873: PPUSH
13874: LD_INT 22
13876: PPUSH
13877: LD_INT 23
13879: PPUSH
13880: CALL 9134 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13884: LD_INT 3
13886: PPUSH
13887: LD_INT 21
13889: PPUSH
13890: LD_INT 23
13892: PPUSH
13893: CALL 9411 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13897: LD_INT 22
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: LD_EXP 24
13907: PPUSH
13908: LD_INT 2
13910: PPUSH
13911: LD_INT 3
13913: PPUSH
13914: CALL 9883 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13918: LD_INT 23
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: LD_EXP 25
13928: PPUSH
13929: LD_INT 33
13931: PPUSH
13932: LD_INT 1
13934: PPUSH
13935: CALL 9883 0 5
// end ; end_of_file
13939: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13940: LD_VAR 0 1
13944: PPUSH
13945: CALL_OW 266
13949: PUSH
13950: LD_INT 0
13952: EQUAL
13953: IFFALSE 13962
// YouLost ( DepotDestroyed ) ;
13955: LD_STRING DepotDestroyed
13957: PPUSH
13958: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 255
13971: PUSH
13972: LD_INT 1
13974: EQUAL
13975: PUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 247
13985: PUSH
13986: LD_INT 1
13988: EQUAL
13989: AND
13990: IFFALSE 14006
// deadsCounter = deadsCounter + 1 ;
13992: LD_ADDR_EXP 31
13996: PUSH
13997: LD_EXP 31
14001: PUSH
14002: LD_INT 1
14004: PLUS
14005: ST_TO_ADDR
// end ;
14006: PPOPN 1
14008: END
// on Command ( comandid ) do var i , j , tmp ;
14009: LD_INT 0
14011: PPUSH
14012: PPUSH
14013: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14014: LD_ADDR_VAR 0 2
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: PUSH
14048: FOR_IN
14049: IFFALSE 14174
// begin if GetTaskList ( i ) > 0 then
14051: LD_VAR 0 2
14055: PPUSH
14056: CALL_OW 437
14060: PUSH
14061: LD_INT 0
14063: GREATER
14064: IFFALSE 14172
// begin for j = 1 to GetTaskList ( i ) do
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: DOUBLE
14072: LD_INT 1
14074: DEC
14075: ST_TO_ADDR
14076: LD_VAR 0 2
14080: PPUSH
14081: CALL_OW 437
14085: PUSH
14086: FOR_TO
14087: IFFALSE 14170
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14089: LD_ADDR_VAR 0 4
14093: PUSH
14094: LD_VAR 0 2
14098: PPUSH
14099: CALL_OW 437
14103: PUSH
14104: LD_VAR 0 3
14108: ARRAY
14109: PUSH
14110: LD_INT 4
14112: ARRAY
14113: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14114: LD_VAR 0 4
14118: PPUSH
14119: CALL_OW 255
14123: PUSH
14124: LD_INT 3
14126: EQUAL
14127: PUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: CALL_OW 247
14137: PUSH
14138: LD_INT 2
14140: EQUAL
14141: AND
14142: PUSH
14143: LD_VAR 0 4
14147: PPUSH
14148: CALL_OW 264
14152: PUSH
14153: LD_INT 51
14155: EQUAL
14156: AND
14157: IFFALSE 14168
// ComStop ( i ) ;
14159: LD_VAR 0 2
14163: PPUSH
14164: CALL_OW 141
// end ;
14168: GO 14086
14170: POP
14171: POP
// end ; end ;
14172: GO 14048
14174: POP
14175: POP
// end ;
14176: PPOPN 4
14178: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14179: LD_VAR 0 2
14183: PUSH
14184: LD_EXP 8
14188: EQUAL
14189: PUSH
14190: LD_EXP 21
14194: PUSH
14195: LD_INT 4
14197: NONEQUAL
14198: AND
14199: IFFALSE 14351
// begin if IsOk ( Mikhail ) then
14201: LD_EXP 8
14205: PPUSH
14206: CALL_OW 302
14210: IFFALSE 14218
// AskMikhail else
14212: CALL 7173 0 0
14216: GO 14351
// if IsOk ( lab1 ) then
14218: LD_INT 23
14220: PPUSH
14221: CALL_OW 302
14225: IFFALSE 14314
// begin InGameOn ;
14227: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14231: LD_EXP 8
14235: PPUSH
14236: LD_INT 6
14238: PPUSH
14239: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14243: LD_INT 23
14245: PPUSH
14246: LD_INT 6
14248: PPUSH
14249: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14253: LD_EXP 8
14257: PPUSH
14258: LD_INT 23
14260: PPUSH
14261: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14265: LD_INT 35
14267: PPUSH
14268: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14272: LD_EXP 8
14276: PPUSH
14277: CALL_OW 310
14281: PUSH
14282: LD_INT 23
14284: EQUAL
14285: PUSH
14286: LD_EXP 8
14290: PPUSH
14291: CALL_OW 301
14295: OR
14296: IFFALSE 14265
// SetSide ( lab1 , 1 ) ;
14298: LD_INT 23
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 235
// InGameOff ;
14308: CALL_OW 9
// end else
14312: GO 14351
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14314: LD_INT 3
14316: PPUSH
14317: LD_INT 6
14319: PPUSH
14320: LD_INT 2
14322: PPUSH
14323: LD_INT 1
14325: PPUSH
14326: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14330: LD_EXP 8
14334: PPUSH
14335: LD_INT 6
14337: PPUSH
14338: CALL_OW 235
// ComHold ( Mikhail ) ;
14342: LD_EXP 8
14346: PPUSH
14347: CALL_OW 140
// end ; end ; end ;
14351: PPOPN 2
14353: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14354: LD_EXP 8
14358: PPUSH
14359: CALL_OW 257
14363: PUSH
14364: LD_INT 3
14366: NONEQUAL
14367: IFFALSE 14385
14369: GO 14371
14371: DISABLE
// begin enable ;
14372: ENABLE
// SetClass ( Mikhail , 3 ) ;
14373: LD_EXP 8
14377: PPUSH
14378: LD_INT 3
14380: PPUSH
14381: CALL_OW 336
// end ; end_of_file
14385: END
// every 0 0$1 trigger IsDead ( JMM ) do
14386: LD_EXP 1
14390: PPUSH
14391: CALL_OW 301
14395: IFFALSE 14407
14397: GO 14399
14399: DISABLE
// YouLost ( JMM ) ;
14400: LD_STRING JMM
14402: PPUSH
14403: CALL_OW 104
14407: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14408: LD_INT 22
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 21
14420: PUSH
14421: LD_INT 1
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 25
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 69
14447: PUSH
14448: LD_INT 0
14450: EQUAL
14451: PUSH
14452: LD_INT 22
14454: PUSH
14455: LD_INT 4
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 21
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 25
14474: PUSH
14475: LD_INT 2
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: PUSH
14492: LD_INT 0
14494: EQUAL
14495: AND
14496: PUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 255
14504: PUSH
14505: LD_INT 3
14507: EQUAL
14508: AND
14509: PUSH
14510: LD_INT 10
14512: PPUSH
14513: CALL_OW 255
14517: PUSH
14518: LD_INT 3
14520: EQUAL
14521: AND
14522: IFFALSE 14534
14524: GO 14526
14526: DISABLE
// YouLost ( Engineer ) ;
14527: LD_STRING Engineer
14529: PPUSH
14530: CALL_OW 104
14534: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 255
14542: PUSH
14543: LD_INT 3
14545: EQUAL
14546: PUSH
14547: LD_EXP 27
14551: PUSH
14552: LD_INT 1
14554: EQUAL
14555: AND
14556: IFFALSE 14568
14558: GO 14560
14560: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14561: LD_STRING DepotCaptured
14563: PPUSH
14564: CALL_OW 104
14568: END
// export function PrepareTigers ; var i , un ; begin
14569: LD_INT 0
14571: PPUSH
14572: PPUSH
14573: PPUSH
// for i = 1 to Difficulty do
14574: LD_ADDR_VAR 0 2
14578: PUSH
14579: DOUBLE
14580: LD_INT 1
14582: DEC
14583: ST_TO_ADDR
14584: LD_OWVAR 67
14588: PUSH
14589: FOR_TO
14590: IFFALSE 14725
// begin hc_sex = sex_male ;
14592: LD_ADDR_OWVAR 27
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// uc_side = 0 ;
14600: LD_ADDR_OWVAR 20
14604: PUSH
14605: LD_INT 0
14607: ST_TO_ADDR
// uc_nation = nation_nature ;
14608: LD_ADDR_OWVAR 21
14612: PUSH
14613: LD_INT 0
14615: ST_TO_ADDR
// hc_class = class_tiger ;
14616: LD_ADDR_OWVAR 28
14620: PUSH
14621: LD_INT 14
14623: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14624: LD_ADDR_OWVAR 31
14628: PUSH
14629: LD_EXP 14
14633: PUSH
14634: LD_INT 0
14636: PUSH
14637: LD_INT 0
14639: PUSH
14640: LD_INT 0
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14649: LD_ADDR_OWVAR 35
14653: PUSH
14654: LD_INT 30
14656: PPUSH
14657: LD_INT 40
14659: PPUSH
14660: CALL_OW 12
14664: PUSH
14665: LD_INT 40
14667: PPUSH
14668: LD_INT 50
14670: PPUSH
14671: CALL_OW 12
14675: PUSH
14676: LD_INT 50
14678: PPUSH
14679: LD_INT 60
14681: PPUSH
14682: CALL_OW 12
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: PUSH
14692: LD_OWVAR 67
14696: ARRAY
14697: ST_TO_ADDR
// un = CreateHuman ;
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: CALL_OW 44
14707: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14708: LD_VAR 0 3
14712: PPUSH
14713: LD_INT 27
14715: PPUSH
14716: LD_INT 0
14718: PPUSH
14719: CALL_OW 49
// end ;
14723: GO 14589
14725: POP
14726: POP
// end ; end_of_file
14727: LD_VAR 0 1
14731: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14732: LD_INT 1
14734: PPUSH
14735: CALL_OW 255
14739: PUSH
14740: LD_INT 1
14742: EQUAL
14743: PUSH
14744: LD_INT 10
14746: PPUSH
14747: CALL_OW 255
14751: PUSH
14752: LD_INT 1
14754: EQUAL
14755: AND
14756: PUSH
14757: LD_EXP 20
14761: PUSH
14762: LD_INT 1
14764: EQUAL
14765: AND
14766: PUSH
14767: LD_INT 22
14769: PUSH
14770: LD_INT 3
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 51
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 58
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: PUSH
14821: LD_INT 0
14823: EQUAL
14824: AND
14825: IFFALSE 14916
14827: GO 14829
14829: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14830: LD_INT 9450
14832: PUSH
14833: LD_INT 8400
14835: PUSH
14836: LD_INT 6300
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: LD_OWVAR 67
14848: ARRAY
14849: PPUSH
14850: CALL_OW 67
// if cargoEscape = 1 then
14854: LD_EXP 20
14858: PUSH
14859: LD_INT 1
14861: EQUAL
14862: IFFALSE 14916
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14864: LD_EXP 9
14868: PPUSH
14869: LD_STRING D6-Pow-1
14871: PPUSH
14872: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14876: LD_EXP 1
14880: PPUSH
14881: LD_STRING D6-JMM-1
14883: PPUSH
14884: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14888: LD_EXP 9
14892: PPUSH
14893: LD_STRING D6-Pow-2
14895: PPUSH
14896: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14900: LD_EXP 1
14904: PPUSH
14905: LD_STRING D6-JMM-2
14907: PPUSH
14908: CALL_OW 88
// FinishMission ;
14912: CALL 15124 0 0
// end ; end ;
14916: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 255
14924: PUSH
14925: LD_INT 1
14927: EQUAL
14928: PUSH
14929: LD_INT 10
14931: PPUSH
14932: CALL_OW 255
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: AND
14941: PUSH
14942: LD_EXP 20
14946: PUSH
14947: LD_INT 1
14949: GREATER
14950: AND
14951: IFFALSE 15018
14953: GO 14955
14955: DISABLE
14956: LD_INT 0
14958: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14959: LD_INT 11550
14961: PUSH
14962: LD_INT 10500
14964: PUSH
14965: LD_INT 9450
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: LD_OWVAR 67
14977: ARRAY
14978: PPUSH
14979: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14983: LD_INT 1
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 3
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PUSH
14997: LD_OWVAR 67
15001: ARRAY
15002: PPUSH
15003: LD_INT 13
15005: PPUSH
15006: CALL 13115 0 2
// lastBattle = 1 ;
15010: LD_ADDR_EXP 27
15014: PUSH
15015: LD_INT 1
15017: ST_TO_ADDR
// end ;
15018: PPOPN 1
15020: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15021: LD_EXP 27
15025: PUSH
15026: LD_INT 1
15028: EQUAL
15029: PUSH
15030: LD_INT 26
15032: PPUSH
15033: LD_INT 22
15035: PUSH
15036: LD_INT 3
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 21
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 70
15061: PUSH
15062: LD_INT 0
15064: EQUAL
15065: AND
15066: IFFALSE 15123
15068: GO 15070
15070: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15071: LD_EXP 9
15075: PPUSH
15076: LD_STRING D6-Pow-1
15078: PPUSH
15079: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15083: LD_EXP 1
15087: PPUSH
15088: LD_STRING D6-JMM-1
15090: PPUSH
15091: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15095: LD_EXP 9
15099: PPUSH
15100: LD_STRING D6-Pow-2
15102: PPUSH
15103: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15107: LD_EXP 1
15111: PPUSH
15112: LD_STRING D6-JMM-2
15114: PPUSH
15115: CALL_OW 88
// FinishMission ;
15119: CALL 15124 0 0
// end ;
15123: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15124: LD_INT 0
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
// if tick <= 18 18$00 then
15131: LD_OWVAR 1
15135: PUSH
15136: LD_INT 37800
15138: LESSEQUAL
15139: IFFALSE 15148
// SetAchievement ( ACH_ASPEED_2 ) ;
15141: LD_STRING ACH_ASPEED_2
15143: PPUSH
15144: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15148: LD_ADDR_VAR 0 2
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 21
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 24
15175: PUSH
15176: LD_INT 251
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if tmp then
15193: LD_VAR 0 2
15197: IFFALSE 15211
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15199: LD_VAR 0 2
15203: PPUSH
15204: LD_STRING 02_tanks_1
15206: PPUSH
15207: CALL 10588 0 2
// if mikhailStatus = 1 then
15211: LD_EXP 21
15215: PUSH
15216: LD_INT 1
15218: EQUAL
15219: IFFALSE 15233
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15221: LD_EXP 21
15225: PPUSH
15226: LD_STRING 02_mikhailStatus_1
15228: PPUSH
15229: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 274
15240: PPUSH
15241: LD_INT 1
15243: PPUSH
15244: CALL_OW 275
15248: PPUSH
15249: LD_STRING 02_resources_4
15251: PPUSH
15252: CALL_OW 39
// m1 := false ;
15256: LD_ADDR_VAR 0 3
15260: PUSH
15261: LD_INT 0
15263: ST_TO_ADDR
// m2 := false ;
15264: LD_ADDR_VAR 0 4
15268: PUSH
15269: LD_INT 0
15271: ST_TO_ADDR
// m3 := false ;
15272: LD_ADDR_VAR 0 5
15276: PUSH
15277: LD_INT 0
15279: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15280: LD_INT 1
15282: PPUSH
15283: CALL_OW 274
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 275
15295: PUSH
15296: LD_INT 200
15298: GREATEREQUAL
15299: IFFALSE 15321
// begin AddMedal ( Cans , 1 ) ;
15301: LD_STRING Cans
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 101
// m1 := true ;
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// end else
15319: GO 15332
// begin AddMedal ( Cans , - 1 ) ;
15321: LD_STRING Cans
15323: PPUSH
15324: LD_INT 1
15326: NEG
15327: PPUSH
15328: CALL_OW 101
// end ; if deadsCounter < 2 then
15332: LD_EXP 31
15336: PUSH
15337: LD_INT 2
15339: LESS
15340: IFFALSE 15362
// begin AddMedal ( Deaths , 1 ) ;
15342: LD_STRING Deaths
15344: PPUSH
15345: LD_INT 1
15347: PPUSH
15348: CALL_OW 101
// m2 := true ;
15352: LD_ADDR_VAR 0 4
15356: PUSH
15357: LD_INT 1
15359: ST_TO_ADDR
// end else
15360: GO 15373
// begin AddMedal ( Deaths , - 1 ) ;
15362: LD_STRING Deaths
15364: PPUSH
15365: LD_INT 1
15367: NEG
15368: PPUSH
15369: CALL_OW 101
// end ; if mikhailStatus = 0 then
15373: LD_EXP 21
15377: PUSH
15378: LD_INT 0
15380: EQUAL
15381: IFFALSE 15394
// AddMedal ( Prisoner , - 1 ) ;
15383: LD_STRING Prisoner
15385: PPUSH
15386: LD_INT 1
15388: NEG
15389: PPUSH
15390: CALL_OW 101
// if mikhailStatus = 1 then
15394: LD_EXP 21
15398: PUSH
15399: LD_INT 1
15401: EQUAL
15402: IFFALSE 15422
// begin AddMedal ( Prisoner , 1 ) ;
15404: LD_STRING Prisoner
15406: PPUSH
15407: LD_INT 1
15409: PPUSH
15410: CALL_OW 101
// m3 := true ;
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15422: LD_EXP 21
15426: PUSH
15427: LD_INT 2
15429: EQUAL
15430: IFFALSE 15450
// begin AddMedal ( Prisoner , 2 ) ;
15432: LD_STRING Prisoner
15434: PPUSH
15435: LD_INT 2
15437: PPUSH
15438: CALL_OW 101
// m3 := true ;
15442: LD_ADDR_VAR 0 5
15446: PUSH
15447: LD_INT 1
15449: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15450: LD_EXP 21
15454: PUSH
15455: LD_INT 3
15457: EQUAL
15458: IFFALSE 15471
// AddMedal ( Prisoner , - 2 ) ;
15460: LD_STRING Prisoner
15462: PPUSH
15463: LD_INT 2
15465: NEG
15466: PPUSH
15467: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15471: LD_OWVAR 67
15475: PUSH
15476: LD_INT 3
15478: EQUAL
15479: PUSH
15480: LD_VAR 0 3
15484: AND
15485: PUSH
15486: LD_VAR 0 4
15490: AND
15491: PUSH
15492: LD_VAR 0 5
15496: AND
15497: IFFALSE 15509
// SetAchievementEX ( ACH_AMER , 2 ) ;
15499: LD_STRING ACH_AMER
15501: PPUSH
15502: LD_INT 2
15504: PPUSH
15505: CALL_OW 564
// GiveMedals ( MAIN ) ;
15509: LD_STRING MAIN
15511: PPUSH
15512: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15516: LD_INT 22
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 23
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PPUSH
15556: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15560: LD_EXP 1
15564: PPUSH
15565: LD_EXP 33
15569: PUSH
15570: LD_STRING JMM
15572: STR
15573: PPUSH
15574: CALL_OW 38
// if IsOK ( Bobby ) then
15578: LD_EXP 2
15582: PPUSH
15583: CALL_OW 302
15587: IFFALSE 15607
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15589: LD_EXP 2
15593: PPUSH
15594: LD_EXP 33
15598: PUSH
15599: LD_STRING Bobby
15601: STR
15602: PPUSH
15603: CALL_OW 38
// if IsOK ( Cyrus ) then
15607: LD_EXP 3
15611: PPUSH
15612: CALL_OW 302
15616: IFFALSE 15636
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15618: LD_EXP 3
15622: PPUSH
15623: LD_EXP 33
15627: PUSH
15628: LD_STRING Cyrus
15630: STR
15631: PPUSH
15632: CALL_OW 38
// if IsOK ( Lisa ) then
15636: LD_EXP 4
15640: PPUSH
15641: CALL_OW 302
15645: IFFALSE 15665
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15647: LD_EXP 4
15651: PPUSH
15652: LD_EXP 33
15656: PUSH
15657: LD_STRING Lisa
15659: STR
15660: PPUSH
15661: CALL_OW 38
// if IsOK ( Khatam ) then
15665: LD_EXP 5
15669: PPUSH
15670: CALL_OW 302
15674: IFFALSE 15694
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15676: LD_EXP 5
15680: PPUSH
15681: LD_EXP 33
15685: PUSH
15686: LD_STRING Khatam
15688: STR
15689: PPUSH
15690: CALL_OW 38
// if IsOK ( Brian ) then
15694: LD_EXP 6
15698: PPUSH
15699: CALL_OW 302
15703: IFFALSE 15723
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15705: LD_EXP 6
15709: PPUSH
15710: LD_EXP 33
15714: PUSH
15715: LD_STRING Brian
15717: STR
15718: PPUSH
15719: CALL_OW 38
// if IsOk ( Jerry ) then
15723: LD_EXP 7
15727: PPUSH
15728: CALL_OW 302
15732: IFFALSE 15752
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15734: LD_EXP 7
15738: PPUSH
15739: LD_EXP 33
15743: PUSH
15744: LD_STRING Jerry
15746: STR
15747: PPUSH
15748: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15752: LD_EXP 21
15756: PUSH
15757: LD_INT 1
15759: EQUAL
15760: PUSH
15761: LD_EXP 8
15765: PPUSH
15766: CALL_OW 255
15770: PUSH
15771: LD_INT 1
15773: EQUAL
15774: AND
15775: PUSH
15776: LD_EXP 8
15780: PPUSH
15781: CALL_OW 302
15785: AND
15786: IFFALSE 15806
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15788: LD_EXP 8
15792: PPUSH
15793: LD_EXP 33
15797: PUSH
15798: LD_STRING Mikhail
15800: STR
15801: PPUSH
15802: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15806: LD_INT 50
15808: PUSH
15809: EMPTY
15810: LIST
15811: PUSH
15812: LD_INT 22
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: PUSH
15842: LD_EXP 1
15846: PUSH
15847: LD_EXP 2
15851: PUSH
15852: LD_EXP 3
15856: PUSH
15857: LD_EXP 4
15861: PUSH
15862: LD_EXP 5
15866: PUSH
15867: LD_EXP 6
15871: PUSH
15872: LD_EXP 7
15876: PUSH
15877: LD_EXP 8
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: DIFF
15892: PPUSH
15893: LD_STRING 02_other_survivors
15895: PPUSH
15896: CALL_OW 38
// YouWin ;
15900: CALL_OW 103
// end ; end_of_file
15904: LD_VAR 0 1
15908: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
15909: GO 15911
15911: DISABLE
// begin ru_radar := 98 ;
15912: LD_ADDR_EXP 35
15916: PUSH
15917: LD_INT 98
15919: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15920: LD_ADDR_EXP 36
15924: PUSH
15925: LD_INT 89
15927: ST_TO_ADDR
// us_hack := 99 ;
15928: LD_ADDR_EXP 37
15932: PUSH
15933: LD_INT 99
15935: ST_TO_ADDR
// us_artillery := 97 ;
15936: LD_ADDR_EXP 38
15940: PUSH
15941: LD_INT 97
15943: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15944: LD_ADDR_EXP 39
15948: PUSH
15949: LD_INT 91
15951: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
15952: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15953: LD_INT 0
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 264
15968: PUSH
15969: LD_EXP 39
15973: EQUAL
15974: IFFALSE 16046
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15976: LD_INT 68
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 255
15988: PPUSH
15989: CALL_OW 321
15993: PUSH
15994: LD_INT 2
15996: EQUAL
15997: IFFALSE 16009
// eff := 70 else
15999: LD_ADDR_VAR 0 6
16003: PUSH
16004: LD_INT 70
16006: ST_TO_ADDR
16007: GO 16017
// eff := 30 ;
16009: LD_ADDR_VAR 0 6
16013: PUSH
16014: LD_INT 30
16016: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16017: LD_VAR 0 1
16021: PPUSH
16022: CALL_OW 250
16026: PPUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 251
16036: PPUSH
16037: LD_VAR 0 6
16041: PPUSH
16042: CALL_OW 495
// end ; end ;
16046: LD_VAR 0 4
16050: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
// if cmd = 124 then
16059: LD_VAR 0 1
16063: PUSH
16064: LD_INT 124
16066: EQUAL
16067: IFFALSE 16273
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
16069: LD_ADDR_VAR 0 5
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 34
16079: PUSH
16080: LD_INT 53
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 34
16089: PUSH
16090: LD_INT 14
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 69
16106: ST_TO_ADDR
// if not tmp then
16107: LD_VAR 0 5
16111: NOT
16112: IFFALSE 16116
// exit ;
16114: GO 16273
// for i in tmp do
16116: LD_ADDR_VAR 0 3
16120: PUSH
16121: LD_VAR 0 5
16125: PUSH
16126: FOR_IN
16127: IFFALSE 16271
// begin taskList := GetTaskList ( i ) ;
16129: LD_ADDR_VAR 0 6
16133: PUSH
16134: LD_VAR 0 3
16138: PPUSH
16139: CALL_OW 437
16143: ST_TO_ADDR
// if not taskList then
16144: LD_VAR 0 6
16148: NOT
16149: IFFALSE 16153
// continue ;
16151: GO 16126
// for j = 1 to taskList do
16153: LD_ADDR_VAR 0 4
16157: PUSH
16158: DOUBLE
16159: LD_INT 1
16161: DEC
16162: ST_TO_ADDR
16163: LD_VAR 0 6
16167: PUSH
16168: FOR_TO
16169: IFFALSE 16267
// if taskList [ j ] [ 1 ] = | then
16171: LD_VAR 0 6
16175: PUSH
16176: LD_VAR 0 4
16180: ARRAY
16181: PUSH
16182: LD_INT 1
16184: ARRAY
16185: PUSH
16186: LD_STRING |
16188: EQUAL
16189: IFFALSE 16265
// begin _taskList := Delete ( taskList , 1 ) ;
16191: LD_ADDR_VAR 0 7
16195: PUSH
16196: LD_VAR 0 6
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 3
16208: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
16209: LD_VAR 0 3
16213: PPUSH
16214: LD_VAR 0 7
16218: PPUSH
16219: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
16223: LD_VAR 0 3
16227: PPUSH
16228: LD_VAR 0 6
16232: PUSH
16233: LD_VAR 0 4
16237: ARRAY
16238: PUSH
16239: LD_INT 2
16241: ARRAY
16242: PPUSH
16243: LD_VAR 0 6
16247: PUSH
16248: LD_VAR 0 4
16252: ARRAY
16253: PUSH
16254: LD_INT 3
16256: ARRAY
16257: PPUSH
16258: LD_INT 8
16260: PPUSH
16261: CALL 16278 0 4
// end ;
16265: GO 16168
16267: POP
16268: POP
// end ;
16269: GO 16126
16271: POP
16272: POP
// end ; end ;
16273: LD_VAR 0 2
16277: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16289: LD_VAR 0 1
16293: NOT
16294: PUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: CALL_OW 488
16309: NOT
16310: OR
16311: PUSH
16312: LD_VAR 0 4
16316: NOT
16317: OR
16318: IFFALSE 16322
// exit ;
16320: GO 16662
// list := [ ] ;
16322: LD_ADDR_VAR 0 13
16326: PUSH
16327: EMPTY
16328: ST_TO_ADDR
// if x - r < 0 then
16329: LD_VAR 0 2
16333: PUSH
16334: LD_VAR 0 4
16338: MINUS
16339: PUSH
16340: LD_INT 0
16342: LESS
16343: IFFALSE 16355
// min_x := 0 else
16345: LD_ADDR_VAR 0 7
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
16353: GO 16371
// min_x := x - r ;
16355: LD_ADDR_VAR 0 7
16359: PUSH
16360: LD_VAR 0 2
16364: PUSH
16365: LD_VAR 0 4
16369: MINUS
16370: ST_TO_ADDR
// if y - r < 0 then
16371: LD_VAR 0 3
16375: PUSH
16376: LD_VAR 0 4
16380: MINUS
16381: PUSH
16382: LD_INT 0
16384: LESS
16385: IFFALSE 16397
// min_y := 0 else
16387: LD_ADDR_VAR 0 8
16391: PUSH
16392: LD_INT 0
16394: ST_TO_ADDR
16395: GO 16413
// min_y := y - r ;
16397: LD_ADDR_VAR 0 8
16401: PUSH
16402: LD_VAR 0 3
16406: PUSH
16407: LD_VAR 0 4
16411: MINUS
16412: ST_TO_ADDR
// max_x := x + r ;
16413: LD_ADDR_VAR 0 9
16417: PUSH
16418: LD_VAR 0 2
16422: PUSH
16423: LD_VAR 0 4
16427: PLUS
16428: ST_TO_ADDR
// max_y := y + r ;
16429: LD_ADDR_VAR 0 10
16433: PUSH
16434: LD_VAR 0 3
16438: PUSH
16439: LD_VAR 0 4
16443: PLUS
16444: ST_TO_ADDR
// for _x = min_x to max_x do
16445: LD_ADDR_VAR 0 11
16449: PUSH
16450: DOUBLE
16451: LD_VAR 0 7
16455: DEC
16456: ST_TO_ADDR
16457: LD_VAR 0 9
16461: PUSH
16462: FOR_TO
16463: IFFALSE 16580
// for _y = min_y to max_y do
16465: LD_ADDR_VAR 0 12
16469: PUSH
16470: DOUBLE
16471: LD_VAR 0 8
16475: DEC
16476: ST_TO_ADDR
16477: LD_VAR 0 10
16481: PUSH
16482: FOR_TO
16483: IFFALSE 16576
// begin if not ValidHex ( _x , _y ) then
16485: LD_VAR 0 11
16489: PPUSH
16490: LD_VAR 0 12
16494: PPUSH
16495: CALL_OW 488
16499: NOT
16500: IFFALSE 16504
// continue ;
16502: GO 16482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16504: LD_VAR 0 11
16508: PPUSH
16509: LD_VAR 0 12
16513: PPUSH
16514: CALL_OW 351
16518: PUSH
16519: LD_VAR 0 11
16523: PPUSH
16524: LD_VAR 0 12
16528: PPUSH
16529: CALL_OW 554
16533: AND
16534: IFFALSE 16574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16536: LD_ADDR_VAR 0 13
16540: PUSH
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 13
16550: PUSH
16551: LD_INT 1
16553: PLUS
16554: PPUSH
16555: LD_VAR 0 11
16559: PUSH
16560: LD_VAR 0 12
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 2
16573: ST_TO_ADDR
// end ;
16574: GO 16482
16576: POP
16577: POP
16578: GO 16462
16580: POP
16581: POP
// if not list then
16582: LD_VAR 0 13
16586: NOT
16587: IFFALSE 16591
// exit ;
16589: GO 16662
// for i in list do
16591: LD_ADDR_VAR 0 6
16595: PUSH
16596: LD_VAR 0 13
16600: PUSH
16601: FOR_IN
16602: IFFALSE 16660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_STRING M
16611: PUSH
16612: LD_VAR 0 6
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PUSH
16621: LD_VAR 0 6
16625: PUSH
16626: LD_INT 2
16628: ARRAY
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: LD_INT 0
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: PPUSH
16654: CALL_OW 447
16658: GO 16601
16660: POP
16661: POP
// end ;
16662: LD_VAR 0 5
16666: RET
