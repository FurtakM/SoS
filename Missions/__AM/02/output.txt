// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11737 0 0
// PrepareSouthBase ;
  48: CALL 11833 0 0
// PrepareNorthBase ;
  52: CALL 12171 0 0
// PrepareOtherRussians ;
  56: CALL 12566 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10963 0 0
// PrepareOtherAmericans ;
  68: CALL 11276 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11418 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11575 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14872 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12758 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side := 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , mission_prefix ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING JMM
10621: PPUSH
10622: LD_EXP 34
10626: NOT
10627: PPUSH
10628: LD_EXP 33
10632: PPUSH
10633: CALL 33589 0 3
10637: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10638: LD_ADDR_VAR 0 2
10642: PUSH
10643: LD_STRING 01_JMMLifePoints_1
10645: PPUSH
10646: LD_INT 1000
10648: PPUSH
10649: CALL_OW 30
10653: ST_TO_ADDR
// if plive < 250 then
10654: LD_VAR 0 2
10658: PUSH
10659: LD_INT 250
10661: LESS
10662: IFFALSE 10672
// plive := 300 ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_INT 300
10671: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10672: LD_EXP 1
10676: PPUSH
10677: LD_VAR 0 2
10681: PPUSH
10682: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10686: LD_ADDR_EXP 9
10690: PUSH
10691: LD_STRING Powell
10693: PPUSH
10694: CALL_OW 25
10698: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix ) ;
10699: LD_ADDR_EXP 2
10703: PUSH
10704: LD_STRING Bobby
10706: PPUSH
10707: LD_EXP 34
10711: NOT
10712: PPUSH
10713: LD_EXP 33
10717: PPUSH
10718: CALL 33589 0 3
10722: ST_TO_ADDR
// if Bobby then
10723: LD_EXP 2
10727: IFFALSE 10777
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_STRING 01_BobbyLifePoints_1
10736: PPUSH
10737: LD_INT 1000
10739: PPUSH
10740: CALL_OW 30
10744: ST_TO_ADDR
// if plive < 250 then
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 250
10752: LESS
10753: IFFALSE 10763
// plive := 300 ;
10755: LD_ADDR_VAR 0 2
10759: PUSH
10760: LD_INT 300
10762: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10763: LD_EXP 2
10767: PPUSH
10768: LD_VAR 0 2
10772: PPUSH
10773: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix ) ;
10777: LD_ADDR_EXP 3
10781: PUSH
10782: LD_STRING Cyrus
10784: PPUSH
10785: LD_EXP 34
10789: NOT
10790: PPUSH
10791: LD_EXP 33
10795: PPUSH
10796: CALL 33589 0 3
10800: ST_TO_ADDR
// if Cyrus then
10801: LD_EXP 3
10805: IFFALSE 10855
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10807: LD_ADDR_VAR 0 2
10811: PUSH
10812: LD_STRING 01_CyrusLifePoints_1
10814: PPUSH
10815: LD_INT 1000
10817: PPUSH
10818: CALL_OW 30
10822: ST_TO_ADDR
// if plive < 250 then
10823: LD_VAR 0 2
10827: PUSH
10828: LD_INT 250
10830: LESS
10831: IFFALSE 10841
// plive := 300 ;
10833: LD_ADDR_VAR 0 2
10837: PUSH
10838: LD_INT 300
10840: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10841: LD_EXP 3
10845: PPUSH
10846: LD_VAR 0 2
10850: PPUSH
10851: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10855: LD_ADDR_EXP 5
10859: PUSH
10860: LD_STRING Khatam
10862: PPUSH
10863: CALL_OW 25
10867: ST_TO_ADDR
// uc_side := 4 ;
10868: LD_ADDR_OWVAR 20
10872: PUSH
10873: LD_INT 4
10875: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10876: LD_ADDR_EXP 4
10880: PUSH
10881: LD_STRING Lisa
10883: PPUSH
10884: CALL_OW 25
10888: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10889: LD_EXP 1
10893: PPUSH
10894: LD_INT 3
10896: PPUSH
10897: LD_INT 0
10899: PPUSH
10900: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10904: LD_EXP 2
10908: PPUSH
10909: LD_INT 3
10911: PPUSH
10912: LD_INT 0
10914: PPUSH
10915: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10919: LD_EXP 3
10923: PPUSH
10924: LD_INT 3
10926: PPUSH
10927: LD_INT 0
10929: PPUSH
10930: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10934: LD_EXP 4
10938: PPUSH
10939: LD_INT 5
10941: PPUSH
10942: LD_INT 0
10944: PPUSH
10945: CALL_OW 49
// ComCrawl ( Lisa ) ;
10949: LD_EXP 4
10953: PPUSH
10954: CALL_OW 137
// end ;
10958: LD_VAR 0 1
10962: RET
// export function PrepareLisSquad ; var i , un ; begin
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
// uc_side := 4 ;
10968: LD_ADDR_OWVAR 20
10972: PUSH
10973: LD_INT 4
10975: ST_TO_ADDR
// uc_nation := 1 ;
10976: LD_ADDR_OWVAR 21
10980: PUSH
10981: LD_INT 1
10983: ST_TO_ADDR
// hc_class := 2 ;
10984: LD_ADDR_OWVAR 28
10988: PUSH
10989: LD_INT 2
10991: ST_TO_ADDR
// hc_sex := sex_male ;
10992: LD_ADDR_OWVAR 27
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// hc_gallery :=  ;
11000: LD_ADDR_OWVAR 33
11004: PUSH
11005: LD_STRING 
11007: ST_TO_ADDR
// hc_name :=  ;
11008: LD_ADDR_OWVAR 26
11012: PUSH
11013: LD_STRING 
11015: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11016: LD_ADDR_OWVAR 30
11020: PUSH
11021: LD_INT 0
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: LD_INT 0
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11039: LD_ADDR_OWVAR 31
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: LD_INT 0
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: ST_TO_ADDR
// un := CreateHuman ;
11062: LD_ADDR_VAR 0 3
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11072: LD_VAR 0 3
11076: PPUSH
11077: LD_INT 6
11079: PPUSH
11080: LD_INT 0
11082: PPUSH
11083: CALL_OW 49
// hc_sex := sex_female ;
11087: LD_ADDR_OWVAR 27
11091: PUSH
11092: LD_INT 2
11094: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11095: LD_ADDR_OWVAR 30
11099: PUSH
11100: LD_INT 0
11102: PUSH
11103: LD_INT 0
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11118: LD_ADDR_OWVAR 31
11122: PUSH
11123: LD_INT 0
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 0
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: ST_TO_ADDR
// un := CreateHuman ;
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: CALL_OW 44
11150: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 6
11158: PPUSH
11159: LD_INT 0
11161: PPUSH
11162: CALL_OW 49
// if not Bobby and not Cyrus then
11166: LD_EXP 2
11170: NOT
11171: PUSH
11172: LD_EXP 3
11176: NOT
11177: AND
11178: IFFALSE 11267
// begin hc_class := 1 ;
11180: LD_ADDR_OWVAR 28
11184: PUSH
11185: LD_INT 1
11187: ST_TO_ADDR
// hc_sex := sex_male ;
11188: LD_ADDR_OWVAR 27
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11196: LD_ADDR_OWVAR 30
11200: PUSH
11201: LD_INT 2
11203: PUSH
11204: LD_INT 3
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: LD_INT 0
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11219: LD_ADDR_OWVAR 31
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: LD_INT 3
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: LD_INT 0
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: ST_TO_ADDR
// un := CreateHuman ;
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: CALL_OW 44
11251: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 31
11259: PPUSH
11260: LD_INT 0
11262: PPUSH
11263: CALL_OW 49
// end ; InitHc ;
11267: CALL_OW 19
// end ;
11271: LD_VAR 0 1
11275: RET
// export function PrepareOtherAmericans ; begin
11276: LD_INT 0
11278: PPUSH
// uc_side := 4 ;
11279: LD_ADDR_OWVAR 20
11283: PUSH
11284: LD_INT 4
11286: ST_TO_ADDR
// uc_nation := 1 ;
11287: LD_ADDR_OWVAR 21
11291: PUSH
11292: LD_INT 1
11294: ST_TO_ADDR
// hc_gallery :=  ;
11295: LD_ADDR_OWVAR 33
11299: PUSH
11300: LD_STRING 
11302: ST_TO_ADDR
// hc_name := Tom Garvin ;
11303: LD_ADDR_OWVAR 26
11307: PUSH
11308: LD_STRING Tom Garvin
11310: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11311: LD_INT 1
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: LD_INT 2
11319: PPUSH
11320: CALL_OW 380
// Brian := CreateHuman ;
11324: LD_ADDR_EXP 6
11328: PUSH
11329: CALL_OW 44
11333: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11334: LD_EXP 6
11338: PPUSH
11339: LD_INT 10
11341: PPUSH
11342: LD_INT 0
11344: PPUSH
11345: CALL_OW 49
// hc_name := Jerry White ;
11349: LD_ADDR_OWVAR 26
11353: PUSH
11354: LD_STRING Jerry White
11356: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 3
11362: PPUSH
11363: LD_INT 2
11365: PPUSH
11366: CALL_OW 380
// Jerry := CreateHuman ;
11370: LD_ADDR_EXP 7
11374: PUSH
11375: CALL_OW 44
11379: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11380: LD_EXP 7
11384: PPUSH
11385: LD_INT 10
11387: PPUSH
11388: LD_INT 0
11390: PPUSH
11391: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11395: LD_EXP 6
11399: PUSH
11400: LD_EXP 7
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 140
// end ;
11413: LD_VAR 0 1
11417: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11418: LD_INT 0
11420: PPUSH
11421: PPUSH
11422: PPUSH
// for i = 1 to 6 do
11423: LD_ADDR_VAR 0 2
11427: PUSH
11428: DOUBLE
11429: LD_INT 1
11431: DEC
11432: ST_TO_ADDR
11433: LD_INT 6
11435: PUSH
11436: FOR_TO
11437: IFFALSE 11531
// begin uc_side := 4 ;
11439: LD_ADDR_OWVAR 20
11443: PUSH
11444: LD_INT 4
11446: ST_TO_ADDR
// uc_nation := 1 ;
11447: LD_ADDR_OWVAR 21
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// hc_gallery :=  ;
11455: LD_ADDR_OWVAR 33
11459: PUSH
11460: LD_STRING 
11462: ST_TO_ADDR
// hc_name :=  ;
11463: LD_ADDR_OWVAR 26
11467: PUSH
11468: LD_STRING 
11470: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11471: LD_INT 0
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: LD_INT 4
11479: PPUSH
11480: CALL_OW 12
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 380
// un := CreateHuman ;
11492: LD_ADDR_VAR 0 3
11496: PUSH
11497: CALL_OW 44
11501: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 16
11509: PPUSH
11510: LD_INT 0
11512: PPUSH
11513: CALL_OW 49
// SetLives ( un , 1 ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 234
// end ;
11529: GO 11436
11531: POP
11532: POP
// DyingSold := CreateHuman ;
11533: LD_ADDR_EXP 35
11537: PUSH
11538: CALL_OW 44
11542: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11543: LD_EXP 35
11547: PPUSH
11548: LD_INT 16
11550: PPUSH
11551: LD_INT 0
11553: PPUSH
11554: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11558: LD_EXP 35
11562: PPUSH
11563: LD_INT 250
11565: PPUSH
11566: CALL_OW 234
// end ; end_of_file
11570: LD_VAR 0 1
11574: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11575: LD_INT 0
11577: PPUSH
11578: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11579: LD_ADDR_VAR 0 2
11583: PUSH
11584: LD_INT 22
11586: PUSH
11587: LD_INT 1
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 23
11596: PUSH
11597: LD_INT 1
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 50
11616: PUSH
11617: EMPTY
11618: LIST
11619: PUSH
11620: LD_INT 56
11622: PUSH
11623: EMPTY
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: PUSH
11638: LD_EXP 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: DIFF
11646: ST_TO_ADDR
// if not tmp then
11647: LD_VAR 0 2
11651: NOT
11652: IFFALSE 11656
// exit ;
11654: GO 11732
// uc_side = 6 ;
11656: LD_ADDR_OWVAR 20
11660: PUSH
11661: LD_INT 6
11663: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11664: LD_ADDR_EXP 8
11668: PUSH
11669: LD_STRING Mikhail
11671: PPUSH
11672: CALL_OW 25
11676: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11677: LD_EXP 8
11681: PPUSH
11682: LD_INT 3
11684: PPUSH
11685: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11689: LD_EXP 8
11693: PPUSH
11694: LD_VAR 0 2
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: CALL_OW 250
11707: PPUSH
11708: LD_VAR 0 2
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 251
11721: PPUSH
11722: LD_INT 5
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 50
// end ;
11732: LD_VAR 0 1
11736: RET
// export function PrepareRussianCommander ; begin
11737: LD_INT 0
11739: PPUSH
// uc_side = 3 ;
11740: LD_ADDR_OWVAR 20
11744: PUSH
11745: LD_INT 3
11747: ST_TO_ADDR
// uc_nation = 3 ;
11748: LD_ADDR_OWVAR 21
11752: PUSH
11753: LD_INT 3
11755: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11756: LD_ADDR_EXP 19
11760: PUSH
11761: LD_STRING Natasza
11763: PPUSH
11764: CALL_OW 25
11768: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11769: LD_EXP 19
11773: PPUSH
11774: LD_INT 24
11776: PPUSH
11777: LD_INT 0
11779: PPUSH
11780: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11784: LD_EXP 19
11788: PPUSH
11789: LD_INT 56
11791: PPUSH
11792: LD_INT 16
11794: PPUSH
11795: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11799: LD_ADDR_EXP 24
11803: PUSH
11804: LD_EXP 24
11808: PPUSH
11809: LD_EXP 24
11813: PUSH
11814: LD_INT 1
11816: PLUS
11817: PPUSH
11818: LD_EXP 19
11822: PPUSH
11823: CALL_OW 1
11827: ST_TO_ADDR
// end ;
11828: LD_VAR 0 1
11832: RET
// export function PrepareSouthBase ; var i , un ; begin
11833: LD_INT 0
11835: PPUSH
11836: PPUSH
11837: PPUSH
// for i = 1 to 2 do
11838: LD_ADDR_VAR 0 2
11842: PUSH
11843: DOUBLE
11844: LD_INT 1
11846: DEC
11847: ST_TO_ADDR
11848: LD_INT 2
11850: PUSH
11851: FOR_TO
11852: IFFALSE 11961
// begin uc_side = 3 ;
11854: LD_ADDR_OWVAR 20
11858: PUSH
11859: LD_INT 3
11861: ST_TO_ADDR
// uc_nation = 3 ;
11862: LD_ADDR_OWVAR 21
11866: PUSH
11867: LD_INT 3
11869: ST_TO_ADDR
// hc_gallery =  ;
11870: LD_ADDR_OWVAR 33
11874: PUSH
11875: LD_STRING 
11877: ST_TO_ADDR
// hc_name =  ;
11878: LD_ADDR_OWVAR 26
11882: PUSH
11883: LD_STRING 
11885: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11886: LD_INT 1
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: LD_EXP 13
11896: PPUSH
11897: LD_EXP 14
11901: PPUSH
11902: CALL_OW 12
11906: PPUSH
11907: CALL_OW 380
// hc_importance = 0 ;
11911: LD_ADDR_OWVAR 32
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// un = CreateHuman ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: CALL_OW 44
11928: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 11
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 111
11951: PPUSH
11952: LD_INT 38
11954: PPUSH
11955: CALL_OW 118
// end ;
11959: GO 11851
11961: POP
11962: POP
// for i = 1 to 2 do
11963: LD_ADDR_VAR 0 2
11967: PUSH
11968: DOUBLE
11969: LD_INT 1
11971: DEC
11972: ST_TO_ADDR
11973: LD_INT 2
11975: PUSH
11976: FOR_TO
11977: IFFALSE 12060
// begin uc_side = 3 ;
11979: LD_ADDR_OWVAR 20
11983: PUSH
11984: LD_INT 3
11986: ST_TO_ADDR
// uc_nation = 3 ;
11987: LD_ADDR_OWVAR 21
11991: PUSH
11992: LD_INT 3
11994: ST_TO_ADDR
// hc_gallery =  ;
11995: LD_ADDR_OWVAR 33
11999: PUSH
12000: LD_STRING 
12002: ST_TO_ADDR
// hc_name =  ;
12003: LD_ADDR_OWVAR 26
12007: PUSH
12008: LD_STRING 
12010: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12011: LD_INT 0
12013: PPUSH
12014: LD_INT 3
12016: PPUSH
12017: LD_EXP 13
12021: PPUSH
12022: LD_EXP 14
12026: PPUSH
12027: CALL_OW 12
12031: PPUSH
12032: CALL_OW 380
// un = CreateHuman ;
12036: LD_ADDR_VAR 0 3
12040: PUSH
12041: CALL_OW 44
12045: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 52
// end ;
12058: GO 11976
12060: POP
12061: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12062: LD_INT 3
12064: PPUSH
12065: LD_INT 3
12067: PPUSH
12068: LD_INT 33
12070: PPUSH
12071: LD_EXP 13
12075: PPUSH
12076: LD_EXP 14
12080: PPUSH
12081: CALL_OW 12
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: LD_INT 1
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 3
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_OWVAR 67
12111: ARRAY
12112: PPUSH
12113: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: LD_INT 33
12124: PPUSH
12125: CALL_OW 313
12129: PUSH
12130: FOR_IN
12131: IFFALSE 12164
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12133: LD_ADDR_EXP 25
12137: PUSH
12138: LD_EXP 25
12142: PPUSH
12143: LD_EXP 25
12147: PUSH
12148: LD_INT 1
12150: PLUS
12151: PPUSH
12152: LD_VAR 0 2
12156: PPUSH
12157: CALL_OW 1
12161: ST_TO_ADDR
12162: GO 12130
12164: POP
12165: POP
// end ;
12166: LD_VAR 0 1
12170: RET
// export function PrepareNorthBase ; var i , un ; begin
12171: LD_INT 0
12173: PPUSH
12174: PPUSH
12175: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12176: LD_ADDR_VAR 0 2
12180: PUSH
12181: DOUBLE
12182: LD_INT 1
12184: DEC
12185: ST_TO_ADDR
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 2
12191: PPUSH
12192: CALL_OW 12
12196: PUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 3
12202: PPUSH
12203: CALL_OW 12
12207: PUSH
12208: LD_INT 3
12210: PPUSH
12211: LD_INT 4
12213: PPUSH
12214: CALL_OW 12
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_OWVAR 67
12232: ARRAY
12233: PUSH
12234: FOR_TO
12235: IFFALSE 12321
// begin uc_side = 3 ;
12237: LD_ADDR_OWVAR 20
12241: PUSH
12242: LD_INT 3
12244: ST_TO_ADDR
// uc_nation = 3 ;
12245: LD_ADDR_OWVAR 21
12249: PUSH
12250: LD_INT 3
12252: ST_TO_ADDR
// hc_gallery =  ;
12253: LD_ADDR_OWVAR 33
12257: PUSH
12258: LD_STRING 
12260: ST_TO_ADDR
// hc_name =  ;
12261: LD_ADDR_OWVAR 26
12265: PUSH
12266: LD_STRING 
12268: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12269: LD_INT 0
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: LD_EXP 13
12279: PPUSH
12280: LD_EXP 14
12284: PPUSH
12285: CALL_OW 12
12289: PPUSH
12290: CALL_OW 380
// un = CreateHuman ;
12294: LD_ADDR_VAR 0 3
12298: PUSH
12299: CALL_OW 44
12303: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 14
12311: PPUSH
12312: LD_INT 0
12314: PPUSH
12315: CALL_OW 49
// end ;
12319: GO 12234
12321: POP
12322: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12323: LD_INT 3
12325: PPUSH
12326: LD_INT 3
12328: PPUSH
12329: LD_INT 2
12331: PPUSH
12332: LD_EXP 13
12336: PPUSH
12337: LD_EXP 14
12341: PPUSH
12342: CALL_OW 12
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: LD_INT 2
12355: PPUSH
12356: CALL_OW 12
12360: PUSH
12361: LD_INT 1
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: CALL_OW 12
12371: PUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_INT 3
12377: PPUSH
12378: CALL_OW 12
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: PUSH
12392: LD_OWVAR 67
12396: ARRAY
12397: PPUSH
12398: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12402: LD_INT 3
12404: PPUSH
12405: LD_INT 3
12407: PPUSH
12408: LD_INT 23
12410: PPUSH
12411: LD_EXP 13
12415: PPUSH
12416: LD_EXP 14
12420: PPUSH
12421: CALL_OW 12
12425: PPUSH
12426: LD_INT 4
12428: PPUSH
12429: LD_INT 0
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: LD_INT 2
12437: PUSH
12438: LD_INT 2
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_OWVAR 67
12451: ARRAY
12452: PPUSH
12453: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12457: LD_INT 3
12459: PPUSH
12460: LD_INT 3
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_EXP 13
12470: PPUSH
12471: LD_EXP 14
12475: PPUSH
12476: CALL_OW 12
12480: PPUSH
12481: LD_INT 2
12483: PPUSH
12484: LD_INT 1
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: LD_INT 3
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: LD_OWVAR 67
12506: ARRAY
12507: PPUSH
12508: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12512: LD_ADDR_VAR 0 2
12516: PUSH
12517: LD_INT 2
12519: PPUSH
12520: CALL_OW 313
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12559
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_EXP 24
12537: PPUSH
12538: LD_EXP 24
12542: PUSH
12543: LD_INT 1
12545: PLUS
12546: PPUSH
12547: LD_VAR 0 2
12551: PPUSH
12552: CALL_OW 1
12556: ST_TO_ADDR
12557: GO 12525
12559: POP
12560: POP
// end ;
12561: LD_VAR 0 1
12565: RET
// export function PrepareOtherRussians ; var i , un ; begin
12566: LD_INT 0
12568: PPUSH
12569: PPUSH
12570: PPUSH
// for i = 1 to 2 do
12571: LD_ADDR_VAR 0 2
12575: PUSH
12576: DOUBLE
12577: LD_INT 1
12579: DEC
12580: ST_TO_ADDR
12581: LD_INT 2
12583: PUSH
12584: FOR_TO
12585: IFFALSE 12686
// begin uc_side = 3 ;
12587: LD_ADDR_OWVAR 20
12591: PUSH
12592: LD_INT 3
12594: ST_TO_ADDR
// uc_nation = 3 ;
12595: LD_ADDR_OWVAR 21
12599: PUSH
12600: LD_INT 3
12602: ST_TO_ADDR
// hc_gallery =  ;
12603: LD_ADDR_OWVAR 33
12607: PUSH
12608: LD_STRING 
12610: ST_TO_ADDR
// hc_name =  ;
12611: LD_ADDR_OWVAR 26
12615: PUSH
12616: LD_STRING 
12618: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12619: LD_INT 0
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: LD_EXP 13
12629: PPUSH
12630: LD_EXP 14
12634: PPUSH
12635: CALL_OW 12
12639: PPUSH
12640: CALL_OW 380
// un = CreateHuman ;
12644: LD_ADDR_VAR 0 3
12648: PUSH
12649: CALL_OW 44
12653: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 9
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 80
12676: PPUSH
12677: LD_INT 73
12679: PPUSH
12680: CALL_OW 118
// end ;
12684: GO 12584
12686: POP
12687: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: LD_INT 22
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 30
12705: PUSH
12706: LD_INT 31
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PUSH
12722: FOR_IN
12723: IFFALSE 12751
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12725: LD_EXP 13
12729: PPUSH
12730: LD_EXP 14
12734: PPUSH
12735: CALL_OW 12
12739: PPUSH
12740: LD_VAR 0 2
12744: PPUSH
12745: CALL 8838 0 2
12749: GO 12722
12751: POP
12752: POP
// end ;
12753: LD_VAR 0 1
12757: RET
// export function PrepareCargoBays ; begin
12758: LD_INT 0
12760: PPUSH
// uc_side = 3 ;
12761: LD_ADDR_OWVAR 20
12765: PUSH
12766: LD_INT 3
12768: ST_TO_ADDR
// uc_nation = 3 ;
12769: LD_ADDR_OWVAR 21
12773: PUSH
12774: LD_INT 3
12776: ST_TO_ADDR
// vc_engine = 1 ;
12777: LD_ADDR_OWVAR 39
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// vc_control = 1 ;
12785: LD_ADDR_OWVAR 38
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// vc_weapon = 51 ;
12793: LD_ADDR_OWVAR 40
12797: PUSH
12798: LD_INT 51
12800: ST_TO_ADDR
// vc_chassis = 22 ;
12801: LD_ADDR_OWVAR 37
12805: PUSH
12806: LD_INT 22
12808: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12809: LD_ADDR_EXP 15
12813: PUSH
12814: CALL_OW 45
12818: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12819: LD_ADDR_EXP 16
12823: PUSH
12824: CALL_OW 45
12828: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12829: LD_EXP 15
12833: PPUSH
12834: LD_INT 13
12836: PPUSH
12837: LD_INT 0
12839: PPUSH
12840: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12844: LD_EXP 16
12848: PPUSH
12849: LD_INT 13
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12859: LD_EXP 15
12863: PPUSH
12864: LD_INT 2
12866: PPUSH
12867: LD_INT 70
12869: PUSH
12870: LD_INT 50
12872: PUSH
12873: LD_INT 30
12875: PUSH
12876: LD_INT 20
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: LD_OWVAR 67
12889: ARRAY
12890: PPUSH
12891: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12895: LD_EXP 16
12899: PPUSH
12900: LD_INT 2
12902: PPUSH
12903: LD_INT 70
12905: PUSH
12906: LD_INT 50
12908: PUSH
12909: LD_INT 30
12911: PUSH
12912: LD_INT 20
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_OWVAR 67
12925: ARRAY
12926: PPUSH
12927: CALL_OW 291
// hc_gallery =  ;
12931: LD_ADDR_OWVAR 33
12935: PUSH
12936: LD_STRING 
12938: ST_TO_ADDR
// hc_name =  ;
12939: LD_ADDR_OWVAR 26
12943: PUSH
12944: LD_STRING 
12946: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12947: LD_INT 1
12949: PPUSH
12950: LD_INT 3
12952: PPUSH
12953: LD_INT 1
12955: PPUSH
12956: LD_INT 2
12958: PPUSH
12959: CALL_OW 12
12963: PPUSH
12964: CALL_OW 380
// driver1 = CreateHuman ;
12968: LD_ADDR_EXP 17
12972: PUSH
12973: CALL_OW 44
12977: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12978: LD_EXP 17
12982: PPUSH
12983: LD_EXP 15
12987: PPUSH
12988: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12992: LD_ADDR_OWVAR 26
12996: PUSH
12997: LD_STRING Nikolai Andreyev
12999: ST_TO_ADDR
// driver2 = CreateHuman ;
13000: LD_ADDR_EXP 18
13004: PUSH
13005: CALL_OW 44
13009: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13010: LD_EXP 18
13014: PPUSH
13015: LD_EXP 16
13019: PPUSH
13020: CALL_OW 52
// end ;
13024: LD_VAR 0 1
13028: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13029: LD_INT 0
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
// uc_side = 3 ;
13037: LD_ADDR_OWVAR 20
13041: PUSH
13042: LD_INT 3
13044: ST_TO_ADDR
// uc_nation = 3 ;
13045: LD_ADDR_OWVAR 21
13049: PUSH
13050: LD_INT 3
13052: ST_TO_ADDR
// for i := 1 to count do
13053: LD_ADDR_VAR 0 4
13057: PUSH
13058: DOUBLE
13059: LD_INT 1
13061: DEC
13062: ST_TO_ADDR
13063: LD_VAR 0 1
13067: PUSH
13068: FOR_TO
13069: IFFALSE 13331
// begin vc_engine = 1 ;
13071: LD_ADDR_OWVAR 39
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// vc_control = 1 ;
13079: LD_ADDR_OWVAR 38
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13087: LD_ADDR_OWVAR 40
13091: PUSH
13092: LD_INT 42
13094: ST_TO_ADDR
// if Difficulty = 3 then
13095: LD_OWVAR 67
13099: PUSH
13100: LD_INT 3
13102: EQUAL
13103: IFFALSE 13132
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13105: LD_ADDR_OWVAR 40
13109: PUSH
13110: LD_INT 42
13112: PUSH
13113: LD_INT 43
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 1
13122: PPUSH
13123: LD_INT 2
13125: PPUSH
13126: CALL_OW 12
13130: ARRAY
13131: ST_TO_ADDR
// if Difficulty = 4 then
13132: LD_OWVAR 67
13136: PUSH
13137: LD_INT 4
13139: EQUAL
13140: IFFALSE 13177
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13142: LD_ADDR_OWVAR 40
13146: PUSH
13147: LD_INT 42
13149: PUSH
13150: LD_INT 43
13152: PUSH
13153: LD_INT 43
13155: PUSH
13156: LD_INT 44
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 1
13167: PPUSH
13168: LD_INT 4
13170: PPUSH
13171: CALL_OW 12
13175: ARRAY
13176: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13177: LD_ADDR_OWVAR 37
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 22
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 22
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: LD_OWVAR 67
13204: ARRAY
13205: ST_TO_ADDR
// veh = CreateVehicle ;
13206: LD_ADDR_VAR 0 5
13210: PUSH
13211: CALL_OW 45
13215: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13216: LD_VAR 0 5
13220: PPUSH
13221: LD_VAR 0 2
13225: PPUSH
13226: LD_INT 0
13228: PPUSH
13229: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13233: LD_ADDR_EXP 26
13237: PUSH
13238: LD_EXP 26
13242: PUSH
13243: LD_VAR 0 5
13247: ADD
13248: ST_TO_ADDR
// hc_gallery =  ;
13249: LD_ADDR_OWVAR 33
13253: PUSH
13254: LD_STRING 
13256: ST_TO_ADDR
// hc_name =  ;
13257: LD_ADDR_OWVAR 26
13261: PUSH
13262: LD_STRING 
13264: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13265: LD_INT 0
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: LD_EXP 13
13275: PPUSH
13276: LD_EXP 14
13280: PPUSH
13281: CALL_OW 12
13285: PPUSH
13286: CALL_OW 380
// un = CreateHuman ;
13290: LD_ADDR_VAR 0 6
13294: PUSH
13295: CALL_OW 44
13299: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13300: LD_VAR 0 6
13304: PPUSH
13305: LD_VAR 0 5
13309: PPUSH
13310: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13314: LD_VAR 0 6
13318: PPUSH
13319: LD_INT 14
13321: PPUSH
13322: LD_INT 9
13324: PPUSH
13325: CALL_OW 111
// end ;
13329: GO 13068
13331: POP
13332: POP
// wait ( 0 0$1 ) ;
13333: LD_INT 35
13335: PPUSH
13336: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13340: LD_INT 0
13342: PPUSH
13343: LD_INT 2
13345: PPUSH
13346: LD_EXP 13
13350: PPUSH
13351: LD_EXP 14
13355: PPUSH
13356: CALL_OW 12
13360: PPUSH
13361: CALL_OW 380
// un = CreateHuman ;
13365: LD_ADDR_VAR 0 6
13369: PUSH
13370: CALL_OW 44
13374: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13375: LD_ADDR_VAR 0 4
13379: PUSH
13380: DOUBLE
13381: LD_INT 1
13383: DEC
13384: ST_TO_ADDR
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 2
13395: MUL
13396: PLUS
13397: PUSH
13398: FOR_TO
13399: IFFALSE 13491
// begin hc_gallery =  ;
13401: LD_ADDR_OWVAR 33
13405: PUSH
13406: LD_STRING 
13408: ST_TO_ADDR
// hc_name =  ;
13409: LD_ADDR_OWVAR 26
13413: PUSH
13414: LD_STRING 
13416: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13417: LD_INT 1
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: LD_EXP 13
13427: PPUSH
13428: LD_EXP 14
13432: PPUSH
13433: CALL_OW 12
13437: PPUSH
13438: CALL_OW 380
// un = CreateHuman ;
13442: LD_ADDR_VAR 0 6
13446: PUSH
13447: CALL_OW 44
13451: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13452: LD_VAR 0 6
13456: PPUSH
13457: LD_INT 9
13459: PPUSH
13460: LD_INT 13
13462: PPUSH
13463: LD_INT 4
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13473: LD_ADDR_EXP 26
13477: PUSH
13478: LD_EXP 26
13482: PUSH
13483: LD_VAR 0 6
13487: ADD
13488: ST_TO_ADDR
// end ;
13489: GO 13398
13491: POP
13492: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13493: LD_ADDR_VAR 0 7
13497: PUSH
13498: LD_INT 26
13500: PPUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 3
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 21
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 26
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: PPUSH
13536: CALL_OW 70
13540: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13541: LD_VAR 0 7
13545: PUSH
13546: LD_INT 1
13548: ARRAY
13549: PPUSH
13550: LD_STRING D9-Rus3-1
13552: PPUSH
13553: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13557: LD_VAR 0 7
13561: PUSH
13562: LD_INT 2
13564: ARRAY
13565: PPUSH
13566: LD_STRING D9-Russ-1
13568: PPUSH
13569: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13573: LD_EXP 26
13577: PPUSH
13578: LD_INT 31
13580: PPUSH
13581: LD_INT 13
13583: PPUSH
13584: CALL_OW 114
// wait ( 0 0$3 ) ;
13588: LD_INT 105
13590: PPUSH
13591: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13595: LD_INT 35
13597: PPUSH
13598: CALL_OW 67
// for i in attackGroup do
13602: LD_ADDR_VAR 0 4
13606: PUSH
13607: LD_EXP 26
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13980
// begin if IsDead ( i ) then
13615: LD_VAR 0 4
13619: PPUSH
13620: CALL_OW 301
13624: IFFALSE 13644
// begin attackGroup := attackGroup diff i ;
13626: LD_ADDR_EXP 26
13630: PUSH
13631: LD_EXP 26
13635: PUSH
13636: LD_VAR 0 4
13640: DIFF
13641: ST_TO_ADDR
// continue ;
13642: GO 13612
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13644: LD_VAR 0 4
13648: PPUSH
13649: CALL_OW 314
13653: NOT
13654: PUSH
13655: LD_VAR 0 4
13659: PPUSH
13660: CALL_OW 110
13664: NOT
13665: AND
13666: IFFALSE 13702
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13668: LD_VAR 0 4
13672: PPUSH
13673: LD_INT 22
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 69
13687: PPUSH
13688: LD_VAR 0 4
13692: PPUSH
13693: CALL_OW 74
13697: PPUSH
13698: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13702: LD_VAR 0 4
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 4
13717: PPUSH
13718: CALL_OW 256
13722: PUSH
13723: LD_INT 650
13725: LESS
13726: AND
13727: PUSH
13728: LD_VAR 0 4
13732: PPUSH
13733: CALL_OW 247
13737: PUSH
13738: LD_INT 2
13740: EQUAL
13741: AND
13742: IFFALSE 13771
// begin SetTag ( i , 1 ) ;
13744: LD_VAR 0 4
13748: PPUSH
13749: LD_INT 1
13751: PPUSH
13752: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13756: LD_VAR 0 4
13760: PPUSH
13761: LD_INT 20
13763: PPUSH
13764: LD_INT 8
13766: PPUSH
13767: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13771: LD_VAR 0 4
13775: PPUSH
13776: CALL_OW 110
13780: PUSH
13781: LD_INT 1
13783: EQUAL
13784: PUSH
13785: LD_VAR 0 4
13789: PPUSH
13790: LD_INT 20
13792: PPUSH
13793: LD_INT 8
13795: PPUSH
13796: CALL_OW 297
13800: PUSH
13801: LD_INT 6
13803: LESS
13804: AND
13805: IFFALSE 13819
// SetTag ( i , 2 ) ;
13807: LD_VAR 0 4
13811: PPUSH
13812: LD_INT 2
13814: PPUSH
13815: CALL_OW 109
// if GetTag ( i ) = 2 then
13819: LD_VAR 0 4
13823: PPUSH
13824: CALL_OW 110
13828: PUSH
13829: LD_INT 2
13831: EQUAL
13832: IFFALSE 13940
// begin if GetLives ( i ) = 1000 then
13834: LD_VAR 0 4
13838: PPUSH
13839: CALL_OW 256
13843: PUSH
13844: LD_INT 1000
13846: EQUAL
13847: IFFALSE 13863
// SetTag ( i , 3 ) else
13849: LD_VAR 0 4
13853: PPUSH
13854: LD_INT 3
13856: PPUSH
13857: CALL_OW 109
13861: GO 13940
// if IsDrivenBy ( i ) then
13863: LD_VAR 0 4
13867: PPUSH
13868: CALL_OW 311
13872: IFFALSE 13940
// begin mech := IsDrivenBy ( i ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 4
13883: PPUSH
13884: CALL_OW 311
13888: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 8
13896: PPUSH
13897: CALL_OW 292
13901: NOT
13902: PUSH
13903: LD_VAR 0 8
13907: PPUSH
13908: CALL_OW 256
13912: PUSH
13913: LD_INT 1000
13915: LESS
13916: AND
13917: IFFALSE 13931
// SetLives ( mech , 1000 ) ;
13919: LD_VAR 0 8
13923: PPUSH
13924: LD_INT 1000
13926: PPUSH
13927: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
13931: LD_VAR 0 8
13935: PPUSH
13936: CALL 71817 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
13940: LD_VAR 0 4
13944: PPUSH
13945: CALL_OW 110
13949: PUSH
13950: LD_INT 3
13952: EQUAL
13953: PUSH
13954: LD_VAR 0 4
13958: PPUSH
13959: CALL_OW 311
13963: AND
13964: IFFALSE 13978
// SetTag ( i , 0 ) ;
13966: LD_VAR 0 4
13970: PPUSH
13971: LD_INT 0
13973: PPUSH
13974: CALL_OW 109
// end ;
13978: GO 13612
13980: POP
13981: POP
// until not attackGroup ;
13982: LD_EXP 26
13986: NOT
13987: IFFALSE 13595
// end ;
13989: LD_VAR 0 3
13993: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
13994: LD_EXP 26
13998: PPUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 72
14013: IFFALSE 14081
14015: GO 14017
14017: DISABLE
14018: LD_INT 0
14020: PPUSH
// begin enable ;
14021: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: LD_EXP 26
14031: PPUSH
14032: LD_INT 21
14034: PUSH
14035: LD_INT 2
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PPUSH
14042: CALL_OW 72
14046: PUSH
14047: FOR_IN
14048: IFFALSE 14079
// if GetFuel ( i ) < 3 then
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 261
14059: PUSH
14060: LD_INT 3
14062: LESS
14063: IFFALSE 14077
// SetFuel ( i , 3 ) ;
14065: LD_VAR 0 1
14069: PPUSH
14070: LD_INT 3
14072: PPUSH
14073: CALL_OW 240
14077: GO 14047
14079: POP
14080: POP
// end ; end_of_file
14081: PPOPN 1
14083: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 25
14096: PUSH
14097: LD_INT 2
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PPUSH
14108: CALL_OW 69
14112: IFFALSE 14131
14114: GO 14116
14116: DISABLE
// begin enable ;
14117: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14118: LD_INT 3
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: LD_INT 22
14126: PPUSH
14127: CALL 8974 0 3
// end ;
14131: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14132: LD_INT 22
14134: PUSH
14135: LD_INT 3
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: IFFALSE 14182
14162: GO 14164
14164: DISABLE
// begin enable ;
14165: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14166: LD_INT 3
14168: PPUSH
14169: LD_INT 20
14171: PPUSH
14172: LD_INT 22
14174: PPUSH
14175: LD_INT 23
14177: PPUSH
14178: CALL 9306 0 4
// end ;
14182: END
// every 0 0$1 trigger northBaseDefenders do
14183: LD_EXP 24
14187: IFFALSE 14211
14189: GO 14191
14191: DISABLE
// begin enable ;
14192: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14193: LD_INT 22
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: LD_EXP 24
14203: PPUSH
14204: LD_INT 2
14206: PPUSH
14207: CALL 9578 0 4
// end ;
14211: END
// every 0 0$1 trigger southBaseDefenders do
14212: LD_EXP 25
14216: IFFALSE 14240
14218: GO 14220
14220: DISABLE
// begin enable ;
14221: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14222: LD_INT 23
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_EXP 25
14232: PPUSH
14233: LD_INT 33
14235: PPUSH
14236: CALL 9578 0 4
// end ; end_of_file
14240: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
14241: LD_VAR 0 1
14245: PUSH
14246: LD_EXP 1
14250: EQUAL
14251: IFFALSE 14260
// YouLost ( JMM ) ;
14253: LD_STRING JMM
14255: PPUSH
14256: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 266
14269: PUSH
14270: LD_INT 0
14272: EQUAL
14273: IFFALSE 14282
// YouLost ( DepotDestroyed ) ;
14275: LD_STRING DepotDestroyed
14277: PPUSH
14278: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 255
14291: PUSH
14292: LD_INT 1
14294: EQUAL
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 247
14305: PUSH
14306: LD_INT 1
14308: EQUAL
14309: AND
14310: IFFALSE 14326
// deadsCounter = deadsCounter + 1 ;
14312: LD_ADDR_EXP 31
14316: PUSH
14317: LD_EXP 31
14321: PUSH
14322: LD_INT 1
14324: PLUS
14325: ST_TO_ADDR
// end ;
14326: PPOPN 1
14328: END
// on Command ( cmd ) do var i , j , tmp ;
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
14333: PPUSH
// begin SOS_Command ( cmd ) ;
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL 29680 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14343: LD_ADDR_VAR 0 2
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 21
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: PUSH
14377: FOR_IN
14378: IFFALSE 14499
// begin if GetTaskList ( i ) then
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 437
14389: IFFALSE 14497
// begin for j = 1 to GetTaskList ( i ) do
14391: LD_ADDR_VAR 0 3
14395: PUSH
14396: DOUBLE
14397: LD_INT 1
14399: DEC
14400: ST_TO_ADDR
14401: LD_VAR 0 2
14405: PPUSH
14406: CALL_OW 437
14410: PUSH
14411: FOR_TO
14412: IFFALSE 14495
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14414: LD_ADDR_VAR 0 4
14418: PUSH
14419: LD_VAR 0 2
14423: PPUSH
14424: CALL_OW 437
14428: PUSH
14429: LD_VAR 0 3
14433: ARRAY
14434: PUSH
14435: LD_INT 4
14437: ARRAY
14438: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14439: LD_VAR 0 4
14443: PPUSH
14444: CALL_OW 255
14448: PUSH
14449: LD_INT 3
14451: EQUAL
14452: PUSH
14453: LD_VAR 0 4
14457: PPUSH
14458: CALL_OW 247
14462: PUSH
14463: LD_INT 2
14465: EQUAL
14466: AND
14467: PUSH
14468: LD_VAR 0 4
14472: PPUSH
14473: CALL_OW 264
14477: PUSH
14478: LD_INT 51
14480: EQUAL
14481: AND
14482: IFFALSE 14493
// ComStop ( i ) ;
14484: LD_VAR 0 2
14488: PPUSH
14489: CALL_OW 141
// end ;
14493: GO 14411
14495: POP
14496: POP
// end ; end ;
14497: GO 14377
14499: POP
14500: POP
// end ;
14501: PPOPN 4
14503: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14504: LD_VAR 0 2
14508: PUSH
14509: LD_EXP 8
14513: EQUAL
14514: PUSH
14515: LD_EXP 21
14519: PUSH
14520: LD_INT 4
14522: NONEQUAL
14523: AND
14524: IFFALSE 14676
// begin if IsOk ( Mikhail ) then
14526: LD_EXP 8
14530: PPUSH
14531: CALL_OW 302
14535: IFFALSE 14543
// AskMikhail else
14537: CALL 7251 0 0
14541: GO 14676
// if IsOk ( llab1 ) then
14543: LD_INT 23
14545: PPUSH
14546: CALL_OW 302
14550: IFFALSE 14639
// begin InGameOn ;
14552: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14556: LD_EXP 8
14560: PPUSH
14561: LD_INT 6
14563: PPUSH
14564: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14568: LD_INT 23
14570: PPUSH
14571: LD_INT 6
14573: PPUSH
14574: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14578: LD_EXP 8
14582: PPUSH
14583: LD_INT 23
14585: PPUSH
14586: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14590: LD_INT 35
14592: PPUSH
14593: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14597: LD_EXP 8
14601: PPUSH
14602: CALL_OW 310
14606: PUSH
14607: LD_INT 23
14609: EQUAL
14610: PUSH
14611: LD_EXP 8
14615: PPUSH
14616: CALL_OW 301
14620: OR
14621: IFFALSE 14590
// SetSide ( llab1 , 1 ) ;
14623: LD_INT 23
14625: PPUSH
14626: LD_INT 1
14628: PPUSH
14629: CALL_OW 235
// InGameOff ;
14633: CALL_OW 9
// end else
14637: GO 14676
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14639: LD_INT 3
14641: PPUSH
14642: LD_INT 6
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: LD_INT 1
14650: PPUSH
14651: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14655: LD_EXP 8
14659: PPUSH
14660: LD_INT 6
14662: PPUSH
14663: CALL_OW 235
// ComHold ( Mikhail ) ;
14667: LD_EXP 8
14671: PPUSH
14672: CALL_OW 140
// end ; end ; end ;
14676: PPOPN 2
14678: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14679: LD_EXP 8
14683: PPUSH
14684: CALL_OW 257
14688: PUSH
14689: LD_INT 3
14691: NONEQUAL
14692: IFFALSE 14710
14694: GO 14696
14696: DISABLE
// begin enable ;
14697: ENABLE
// SetClass ( Mikhail , 3 ) ;
14698: LD_EXP 8
14702: PPUSH
14703: LD_INT 3
14705: PPUSH
14706: CALL_OW 336
// end ; end_of_file
14710: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14711: LD_INT 22
14713: PUSH
14714: LD_INT 1
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 21
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 25
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 69
14750: PUSH
14751: LD_INT 0
14753: EQUAL
14754: PUSH
14755: LD_INT 22
14757: PUSH
14758: LD_INT 4
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 25
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: LIST
14789: PPUSH
14790: CALL_OW 69
14794: PUSH
14795: LD_INT 0
14797: EQUAL
14798: AND
14799: PUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 3
14810: EQUAL
14811: AND
14812: PUSH
14813: LD_INT 10
14815: PPUSH
14816: CALL_OW 255
14820: PUSH
14821: LD_INT 3
14823: EQUAL
14824: AND
14825: IFFALSE 14837
14827: GO 14829
14829: DISABLE
// YouLost ( Engineer ) ;
14830: LD_STRING Engineer
14832: PPUSH
14833: CALL_OW 104
14837: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14838: LD_INT 1
14840: PPUSH
14841: CALL_OW 255
14845: PUSH
14846: LD_INT 3
14848: EQUAL
14849: PUSH
14850: LD_EXP 27
14854: PUSH
14855: LD_INT 1
14857: EQUAL
14858: AND
14859: IFFALSE 14871
14861: GO 14863
14863: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14864: LD_STRING DepotCaptured
14866: PPUSH
14867: CALL_OW 104
14871: END
// export function PrepareTigers ; var i , un ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14877: LD_ADDR_VAR 0 2
14881: PUSH
14882: DOUBLE
14883: LD_INT 1
14885: DEC
14886: ST_TO_ADDR
14887: LD_INT 2
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: LD_INT 4
14895: PUSH
14896: LD_INT 5
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: PUSH
14905: LD_OWVAR 67
14909: ARRAY
14910: PUSH
14911: FOR_TO
14912: IFFALSE 15027
// begin uc_side := 0 ;
14914: LD_ADDR_OWVAR 20
14918: PUSH
14919: LD_INT 0
14921: ST_TO_ADDR
// uc_nation := nation_nature ;
14922: LD_ADDR_OWVAR 21
14926: PUSH
14927: LD_INT 0
14929: ST_TO_ADDR
// hc_sex := sex_male ;
14930: LD_ADDR_OWVAR 27
14934: PUSH
14935: LD_INT 1
14937: ST_TO_ADDR
// hc_class := class_tiger ;
14938: LD_ADDR_OWVAR 28
14942: PUSH
14943: LD_INT 14
14945: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14946: LD_ADDR_OWVAR 31
14950: PUSH
14951: LD_EXP 14
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: LD_INT 0
14961: PUSH
14962: LD_INT 0
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
14971: LD_ADDR_OWVAR 35
14975: PUSH
14976: LD_INT 30
14978: PUSH
14979: LD_INT 40
14981: PUSH
14982: LD_INT 45
14984: PUSH
14985: LD_INT 50
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: PUSH
14994: LD_OWVAR 67
14998: ARRAY
14999: ST_TO_ADDR
// un = CreateHuman ;
15000: LD_ADDR_VAR 0 3
15004: PUSH
15005: CALL_OW 44
15009: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15010: LD_VAR 0 3
15014: PPUSH
15015: LD_INT 27
15017: PPUSH
15018: LD_INT 0
15020: PPUSH
15021: CALL_OW 49
// end ;
15025: GO 14911
15027: POP
15028: POP
// end ; end_of_file
15029: LD_VAR 0 1
15033: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15034: LD_INT 1
15036: PPUSH
15037: CALL_OW 255
15041: PUSH
15042: LD_INT 1
15044: EQUAL
15045: PUSH
15046: LD_INT 10
15048: PPUSH
15049: CALL_OW 255
15053: PUSH
15054: LD_INT 1
15056: EQUAL
15057: AND
15058: PUSH
15059: LD_EXP 20
15063: PUSH
15064: LD_INT 1
15066: EQUAL
15067: AND
15068: PUSH
15069: LD_INT 22
15071: PUSH
15072: LD_INT 3
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 21
15081: PUSH
15082: LD_INT 2
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 34
15091: PUSH
15092: LD_INT 51
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: LD_INT 58
15104: PUSH
15105: EMPTY
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: PUSH
15123: LD_INT 0
15125: EQUAL
15126: AND
15127: IFFALSE 15222
15129: GO 15131
15131: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15132: LD_INT 9450
15134: PUSH
15135: LD_INT 8400
15137: PUSH
15138: LD_INT 6300
15140: PUSH
15141: LD_INT 6300
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: PUSH
15150: LD_OWVAR 67
15154: ARRAY
15155: PPUSH
15156: CALL_OW 67
// if cargoEscape = 1 then
15160: LD_EXP 20
15164: PUSH
15165: LD_INT 1
15167: EQUAL
15168: IFFALSE 15222
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15170: LD_EXP 9
15174: PPUSH
15175: LD_STRING D6-Pow-1
15177: PPUSH
15178: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15182: LD_EXP 1
15186: PPUSH
15187: LD_STRING D6-JMM-1
15189: PPUSH
15190: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15194: LD_EXP 9
15198: PPUSH
15199: LD_STRING D6-Pow-2
15201: PPUSH
15202: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15206: LD_EXP 1
15210: PPUSH
15211: LD_STRING D6-JMM-2
15213: PPUSH
15214: CALL_OW 88
// FinishMission ;
15218: CALL 15438 0 0
// end ; end ;
15222: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 255
15230: PUSH
15231: LD_INT 1
15233: EQUAL
15234: PUSH
15235: LD_INT 10
15237: PPUSH
15238: CALL_OW 255
15242: PUSH
15243: LD_INT 1
15245: EQUAL
15246: AND
15247: PUSH
15248: LD_EXP 20
15252: PUSH
15253: LD_INT 1
15255: GREATER
15256: AND
15257: IFFALSE 15332
15259: GO 15261
15261: DISABLE
15262: LD_INT 0
15264: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15265: LD_INT 11550
15267: PUSH
15268: LD_INT 10500
15270: PUSH
15271: LD_INT 9450
15273: PUSH
15274: LD_INT 8400
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: PUSH
15283: LD_OWVAR 67
15287: ARRAY
15288: PPUSH
15289: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15293: LD_INT 1
15295: PUSH
15296: LD_INT 2
15298: PUSH
15299: LD_INT 3
15301: PUSH
15302: LD_INT 4
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: LD_OWVAR 67
15315: ARRAY
15316: PPUSH
15317: LD_INT 13
15319: PPUSH
15320: CALL 13029 0 2
// lastBattle = 1 ;
15324: LD_ADDR_EXP 27
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// end ;
15332: PPOPN 1
15334: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15335: LD_EXP 27
15339: PUSH
15340: LD_INT 1
15342: EQUAL
15343: PUSH
15344: LD_INT 26
15346: PPUSH
15347: LD_INT 22
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 21
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 70
15375: PUSH
15376: LD_INT 0
15378: EQUAL
15379: AND
15380: IFFALSE 15437
15382: GO 15384
15384: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15385: LD_EXP 9
15389: PPUSH
15390: LD_STRING D6-Pow-1
15392: PPUSH
15393: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15397: LD_EXP 1
15401: PPUSH
15402: LD_STRING D6-JMM-1
15404: PPUSH
15405: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15409: LD_EXP 9
15413: PPUSH
15414: LD_STRING D6-Pow-2
15416: PPUSH
15417: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15421: LD_EXP 1
15425: PPUSH
15426: LD_STRING D6-JMM-2
15428: PPUSH
15429: CALL_OW 88
// FinishMission ;
15433: CALL 15438 0 0
// end ;
15437: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15438: LD_INT 0
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
// if tick <= 18 18$00 then
15445: LD_OWVAR 1
15449: PUSH
15450: LD_INT 37800
15452: LESSEQUAL
15453: IFFALSE 15462
// SetAchievement ( ACH_ASPEED_2 ) ;
15455: LD_STRING ACH_ASPEED_2
15457: PPUSH
15458: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 2
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 24
15489: PUSH
15490: LD_INT 251
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: PPUSH
15502: CALL_OW 69
15506: ST_TO_ADDR
// if tmp then
15507: LD_VAR 0 2
15511: IFFALSE 15525
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15513: LD_VAR 0 2
15517: PPUSH
15518: LD_STRING 02_tanks_1
15520: PPUSH
15521: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15525: LD_EXP 21
15529: PUSH
15530: LD_INT 1
15532: EQUAL
15533: PUSH
15534: LD_EXP 8
15538: PPUSH
15539: CALL_OW 300
15543: AND
15544: IFFALSE 15558
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15546: LD_EXP 21
15550: PPUSH
15551: LD_STRING 02_mikhailStatus_1
15553: PPUSH
15554: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 274
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 275
15573: PPUSH
15574: LD_STRING 02_resources_4
15576: PPUSH
15577: CALL_OW 39
// m1 := false ;
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: LD_INT 0
15588: ST_TO_ADDR
// m2 := false ;
15589: LD_ADDR_VAR 0 4
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// m3 := false ;
15597: LD_ADDR_VAR 0 5
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15605: LD_INT 1
15607: PPUSH
15608: CALL_OW 274
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 275
15620: PUSH
15621: LD_INT 200
15623: GREATEREQUAL
15624: IFFALSE 15646
// begin AddMedal ( Cans , 1 ) ;
15626: LD_STRING Cans
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 101
// m1 := true ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_INT 1
15643: ST_TO_ADDR
// end else
15644: GO 15657
// begin AddMedal ( Cans , - 1 ) ;
15646: LD_STRING Cans
15648: PPUSH
15649: LD_INT 1
15651: NEG
15652: PPUSH
15653: CALL_OW 101
// end ; if deadsCounter < 2 then
15657: LD_EXP 31
15661: PUSH
15662: LD_INT 2
15664: LESS
15665: IFFALSE 15687
// begin AddMedal ( Deaths , 1 ) ;
15667: LD_STRING Deaths
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 101
// m2 := true ;
15677: LD_ADDR_VAR 0 4
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// end else
15685: GO 15698
// begin AddMedal ( Deaths , - 1 ) ;
15687: LD_STRING Deaths
15689: PPUSH
15690: LD_INT 1
15692: NEG
15693: PPUSH
15694: CALL_OW 101
// end ; if mikhailStatus = 0 then
15698: LD_EXP 21
15702: PUSH
15703: LD_INT 0
15705: EQUAL
15706: IFFALSE 15719
// AddMedal ( Prisoner , - 1 ) ;
15708: LD_STRING Prisoner
15710: PPUSH
15711: LD_INT 1
15713: NEG
15714: PPUSH
15715: CALL_OW 101
// if mikhailStatus = 1 then
15719: LD_EXP 21
15723: PUSH
15724: LD_INT 1
15726: EQUAL
15727: IFFALSE 15747
// begin AddMedal ( Prisoner , 1 ) ;
15729: LD_STRING Prisoner
15731: PPUSH
15732: LD_INT 1
15734: PPUSH
15735: CALL_OW 101
// m3 := true ;
15739: LD_ADDR_VAR 0 5
15743: PUSH
15744: LD_INT 1
15746: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15747: LD_EXP 21
15751: PUSH
15752: LD_INT 2
15754: EQUAL
15755: IFFALSE 15775
// begin AddMedal ( Prisoner , 2 ) ;
15757: LD_STRING Prisoner
15759: PPUSH
15760: LD_INT 2
15762: PPUSH
15763: CALL_OW 101
// m3 := true ;
15767: LD_ADDR_VAR 0 5
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15775: LD_EXP 21
15779: PUSH
15780: LD_INT 3
15782: EQUAL
15783: IFFALSE 15796
// AddMedal ( Prisoner , - 2 ) ;
15785: LD_STRING Prisoner
15787: PPUSH
15788: LD_INT 2
15790: NEG
15791: PPUSH
15792: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15796: LD_OWVAR 67
15800: PUSH
15801: LD_INT 3
15803: GREATEREQUAL
15804: PUSH
15805: LD_VAR 0 3
15809: AND
15810: PUSH
15811: LD_VAR 0 4
15815: AND
15816: PUSH
15817: LD_VAR 0 5
15821: AND
15822: IFFALSE 15834
// SetAchievementEX ( ACH_AMER , 2 ) ;
15824: LD_STRING ACH_AMER
15826: PPUSH
15827: LD_INT 2
15829: PPUSH
15830: CALL_OW 564
// GiveMedals ( MAIN ) ;
15834: LD_STRING MAIN
15836: PPUSH
15837: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15841: LD_INT 22
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 23
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: PPUSH
15881: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15885: LD_EXP 1
15889: PPUSH
15890: LD_EXP 33
15894: PUSH
15895: LD_STRING JMM
15897: STR
15898: PPUSH
15899: CALL_OW 38
// if IsOK ( Bobby ) then
15903: LD_EXP 2
15907: PPUSH
15908: CALL_OW 302
15912: IFFALSE 15932
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15914: LD_EXP 2
15918: PPUSH
15919: LD_EXP 33
15923: PUSH
15924: LD_STRING Bobby
15926: STR
15927: PPUSH
15928: CALL_OW 38
// if IsOK ( Cyrus ) then
15932: LD_EXP 3
15936: PPUSH
15937: CALL_OW 302
15941: IFFALSE 15961
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15943: LD_EXP 3
15947: PPUSH
15948: LD_EXP 33
15952: PUSH
15953: LD_STRING Cyrus
15955: STR
15956: PPUSH
15957: CALL_OW 38
// if IsOK ( Lisa ) then
15961: LD_EXP 4
15965: PPUSH
15966: CALL_OW 302
15970: IFFALSE 15990
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15972: LD_EXP 4
15976: PPUSH
15977: LD_EXP 33
15981: PUSH
15982: LD_STRING Lisa
15984: STR
15985: PPUSH
15986: CALL_OW 38
// if IsOK ( Khatam ) then
15990: LD_EXP 5
15994: PPUSH
15995: CALL_OW 302
15999: IFFALSE 16019
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16001: LD_EXP 5
16005: PPUSH
16006: LD_EXP 33
16010: PUSH
16011: LD_STRING Khatam
16013: STR
16014: PPUSH
16015: CALL_OW 38
// if IsOK ( Brian ) then
16019: LD_EXP 6
16023: PPUSH
16024: CALL_OW 302
16028: IFFALSE 16048
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16030: LD_EXP 6
16034: PPUSH
16035: LD_EXP 33
16039: PUSH
16040: LD_STRING Brian
16042: STR
16043: PPUSH
16044: CALL_OW 38
// if IsOk ( Jerry ) then
16048: LD_EXP 7
16052: PPUSH
16053: CALL_OW 302
16057: IFFALSE 16077
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16059: LD_EXP 7
16063: PPUSH
16064: LD_EXP 33
16068: PUSH
16069: LD_STRING Jerry
16071: STR
16072: PPUSH
16073: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16077: LD_EXP 21
16081: PUSH
16082: LD_INT 1
16084: EQUAL
16085: PUSH
16086: LD_EXP 8
16090: PPUSH
16091: CALL_OW 255
16095: PUSH
16096: LD_INT 1
16098: EQUAL
16099: AND
16100: PUSH
16101: LD_EXP 8
16105: PPUSH
16106: CALL_OW 302
16110: AND
16111: IFFALSE 16131
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16113: LD_EXP 8
16117: PPUSH
16118: LD_EXP 33
16122: PUSH
16123: LD_STRING Mikhail
16125: STR
16126: PPUSH
16127: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16131: LD_INT 50
16133: PUSH
16134: EMPTY
16135: LIST
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_INT 1
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 21
16149: PUSH
16150: LD_INT 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: PPUSH
16162: CALL_OW 69
16166: PUSH
16167: LD_EXP 1
16171: PUSH
16172: LD_EXP 2
16176: PUSH
16177: LD_EXP 3
16181: PUSH
16182: LD_EXP 4
16186: PUSH
16187: LD_EXP 5
16191: PUSH
16192: LD_EXP 6
16196: PUSH
16197: LD_EXP 7
16201: PUSH
16202: LD_EXP 8
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: DIFF
16217: PPUSH
16218: LD_STRING 02_other_survivors
16220: PPUSH
16221: CALL_OW 38
// YouWin ;
16225: CALL_OW 103
// end ; end_of_file
16229: LD_VAR 0 1
16233: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16234: LD_INT 0
16236: PPUSH
// ar_miner := 81 ;
16237: LD_ADDR_EXP 43
16241: PUSH
16242: LD_INT 81
16244: ST_TO_ADDR
// ar_crane := 88 ;
16245: LD_ADDR_EXP 42
16249: PUSH
16250: LD_INT 88
16252: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16253: LD_ADDR_EXP 37
16257: PUSH
16258: LD_INT 89
16260: ST_TO_ADDR
// us_hack := 99 ;
16261: LD_ADDR_EXP 38
16265: PUSH
16266: LD_INT 99
16268: ST_TO_ADDR
// us_artillery := 97 ;
16269: LD_ADDR_EXP 39
16273: PUSH
16274: LD_INT 97
16276: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16277: LD_ADDR_EXP 40
16281: PUSH
16282: LD_INT 91
16284: ST_TO_ADDR
// ar_mortar := 92 ;
16285: LD_ADDR_EXP 41
16289: PUSH
16290: LD_INT 92
16292: ST_TO_ADDR
// ru_radar := 98 ;
16293: LD_ADDR_EXP 36
16297: PUSH
16298: LD_INT 98
16300: ST_TO_ADDR
// tech_Artillery := 80 ;
16301: LD_ADDR_EXP 44
16305: PUSH
16306: LD_INT 80
16308: ST_TO_ADDR
// tech_RadMat := 81 ;
16309: LD_ADDR_EXP 45
16313: PUSH
16314: LD_INT 81
16316: ST_TO_ADDR
// tech_BasicTools := 82 ;
16317: LD_ADDR_EXP 46
16321: PUSH
16322: LD_INT 82
16324: ST_TO_ADDR
// tech_Cargo := 83 ;
16325: LD_ADDR_EXP 47
16329: PUSH
16330: LD_INT 83
16332: ST_TO_ADDR
// tech_Track := 84 ;
16333: LD_ADDR_EXP 48
16337: PUSH
16338: LD_INT 84
16340: ST_TO_ADDR
// tech_Crane := 85 ;
16341: LD_ADDR_EXP 49
16345: PUSH
16346: LD_INT 85
16348: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16349: LD_ADDR_EXP 50
16353: PUSH
16354: LD_INT 86
16356: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16357: LD_ADDR_EXP 51
16361: PUSH
16362: LD_INT 87
16364: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16365: LD_ADDR_EXP 52
16369: PUSH
16370: LD_INT 88
16372: ST_TO_ADDR
// class_mastodont := 31 ;
16373: LD_ADDR_EXP 53
16377: PUSH
16378: LD_INT 31
16380: ST_TO_ADDR
// class_horse := 21 ;
16381: LD_ADDR_EXP 54
16385: PUSH
16386: LD_INT 21
16388: ST_TO_ADDR
// end ;
16389: LD_VAR 0 1
16393: RET
// every 1 do
16394: GO 16396
16396: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16397: CALL 16234 0 0
16401: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16402: LD_INT 0
16404: PPUSH
// if p2 = 100 then
16405: LD_VAR 0 2
16409: PUSH
16410: LD_INT 100
16412: EQUAL
16413: IFFALSE 17362
// begin if not StreamModeActive then
16415: LD_EXP 55
16419: NOT
16420: IFFALSE 16430
// StreamModeActive := true ;
16422: LD_ADDR_EXP 55
16426: PUSH
16427: LD_INT 1
16429: ST_TO_ADDR
// if p3 = 0 then
16430: LD_VAR 0 3
16434: PUSH
16435: LD_INT 0
16437: EQUAL
16438: IFFALSE 16444
// InitStreamMode ;
16440: CALL 17522 0 0
// if p3 = 1 then
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 1
16451: EQUAL
16452: IFFALSE 16462
// sRocket := true ;
16454: LD_ADDR_EXP 60
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// if p3 = 2 then
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 2
16469: EQUAL
16470: IFFALSE 16480
// sSpeed := true ;
16472: LD_ADDR_EXP 59
16476: PUSH
16477: LD_INT 1
16479: ST_TO_ADDR
// if p3 = 3 then
16480: LD_VAR 0 3
16484: PUSH
16485: LD_INT 3
16487: EQUAL
16488: IFFALSE 16498
// sEngine := true ;
16490: LD_ADDR_EXP 61
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if p3 = 4 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 4
16505: EQUAL
16506: IFFALSE 16516
// sSpec := true ;
16508: LD_ADDR_EXP 58
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
// if p3 = 5 then
16516: LD_VAR 0 3
16520: PUSH
16521: LD_INT 5
16523: EQUAL
16524: IFFALSE 16534
// sLevel := true ;
16526: LD_ADDR_EXP 62
16530: PUSH
16531: LD_INT 1
16533: ST_TO_ADDR
// if p3 = 6 then
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 6
16541: EQUAL
16542: IFFALSE 16552
// sArmoury := true ;
16544: LD_ADDR_EXP 63
16548: PUSH
16549: LD_INT 1
16551: ST_TO_ADDR
// if p3 = 7 then
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 7
16559: EQUAL
16560: IFFALSE 16570
// sRadar := true ;
16562: LD_ADDR_EXP 64
16566: PUSH
16567: LD_INT 1
16569: ST_TO_ADDR
// if p3 = 8 then
16570: LD_VAR 0 3
16574: PUSH
16575: LD_INT 8
16577: EQUAL
16578: IFFALSE 16588
// sBunker := true ;
16580: LD_ADDR_EXP 65
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// if p3 = 9 then
16588: LD_VAR 0 3
16592: PUSH
16593: LD_INT 9
16595: EQUAL
16596: IFFALSE 16606
// sHack := true ;
16598: LD_ADDR_EXP 66
16602: PUSH
16603: LD_INT 1
16605: ST_TO_ADDR
// if p3 = 10 then
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 10
16613: EQUAL
16614: IFFALSE 16624
// sFire := true ;
16616: LD_ADDR_EXP 67
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// if p3 = 11 then
16624: LD_VAR 0 3
16628: PUSH
16629: LD_INT 11
16631: EQUAL
16632: IFFALSE 16642
// sRefresh := true ;
16634: LD_ADDR_EXP 68
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// if p3 = 12 then
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 12
16649: EQUAL
16650: IFFALSE 16660
// sExp := true ;
16652: LD_ADDR_EXP 69
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// if p3 = 13 then
16660: LD_VAR 0 3
16664: PUSH
16665: LD_INT 13
16667: EQUAL
16668: IFFALSE 16678
// sDepot := true ;
16670: LD_ADDR_EXP 70
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// if p3 = 14 then
16678: LD_VAR 0 3
16682: PUSH
16683: LD_INT 14
16685: EQUAL
16686: IFFALSE 16696
// sFlag := true ;
16688: LD_ADDR_EXP 71
16692: PUSH
16693: LD_INT 1
16695: ST_TO_ADDR
// if p3 = 15 then
16696: LD_VAR 0 3
16700: PUSH
16701: LD_INT 15
16703: EQUAL
16704: IFFALSE 16714
// sKamikadze := true ;
16706: LD_ADDR_EXP 79
16710: PUSH
16711: LD_INT 1
16713: ST_TO_ADDR
// if p3 = 16 then
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 16
16721: EQUAL
16722: IFFALSE 16732
// sTroll := true ;
16724: LD_ADDR_EXP 80
16728: PUSH
16729: LD_INT 1
16731: ST_TO_ADDR
// if p3 = 17 then
16732: LD_VAR 0 3
16736: PUSH
16737: LD_INT 17
16739: EQUAL
16740: IFFALSE 16750
// sSlow := true ;
16742: LD_ADDR_EXP 81
16746: PUSH
16747: LD_INT 1
16749: ST_TO_ADDR
// if p3 = 18 then
16750: LD_VAR 0 3
16754: PUSH
16755: LD_INT 18
16757: EQUAL
16758: IFFALSE 16768
// sLack := true ;
16760: LD_ADDR_EXP 82
16764: PUSH
16765: LD_INT 1
16767: ST_TO_ADDR
// if p3 = 19 then
16768: LD_VAR 0 3
16772: PUSH
16773: LD_INT 19
16775: EQUAL
16776: IFFALSE 16786
// sTank := true ;
16778: LD_ADDR_EXP 84
16782: PUSH
16783: LD_INT 1
16785: ST_TO_ADDR
// if p3 = 20 then
16786: LD_VAR 0 3
16790: PUSH
16791: LD_INT 20
16793: EQUAL
16794: IFFALSE 16804
// sRemote := true ;
16796: LD_ADDR_EXP 85
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if p3 = 21 then
16804: LD_VAR 0 3
16808: PUSH
16809: LD_INT 21
16811: EQUAL
16812: IFFALSE 16822
// sPowell := true ;
16814: LD_ADDR_EXP 86
16818: PUSH
16819: LD_INT 1
16821: ST_TO_ADDR
// if p3 = 22 then
16822: LD_VAR 0 3
16826: PUSH
16827: LD_INT 22
16829: EQUAL
16830: IFFALSE 16840
// sTeleport := true ;
16832: LD_ADDR_EXP 89
16836: PUSH
16837: LD_INT 1
16839: ST_TO_ADDR
// if p3 = 23 then
16840: LD_VAR 0 3
16844: PUSH
16845: LD_INT 23
16847: EQUAL
16848: IFFALSE 16858
// sOilTower := true ;
16850: LD_ADDR_EXP 91
16854: PUSH
16855: LD_INT 1
16857: ST_TO_ADDR
// if p3 = 24 then
16858: LD_VAR 0 3
16862: PUSH
16863: LD_INT 24
16865: EQUAL
16866: IFFALSE 16876
// sShovel := true ;
16868: LD_ADDR_EXP 92
16872: PUSH
16873: LD_INT 1
16875: ST_TO_ADDR
// if p3 = 25 then
16876: LD_VAR 0 3
16880: PUSH
16881: LD_INT 25
16883: EQUAL
16884: IFFALSE 16894
// sSheik := true ;
16886: LD_ADDR_EXP 93
16890: PUSH
16891: LD_INT 1
16893: ST_TO_ADDR
// if p3 = 26 then
16894: LD_VAR 0 3
16898: PUSH
16899: LD_INT 26
16901: EQUAL
16902: IFFALSE 16912
// sEarthquake := true ;
16904: LD_ADDR_EXP 95
16908: PUSH
16909: LD_INT 1
16911: ST_TO_ADDR
// if p3 = 27 then
16912: LD_VAR 0 3
16916: PUSH
16917: LD_INT 27
16919: EQUAL
16920: IFFALSE 16930
// sAI := true ;
16922: LD_ADDR_EXP 96
16926: PUSH
16927: LD_INT 1
16929: ST_TO_ADDR
// if p3 = 28 then
16930: LD_VAR 0 3
16934: PUSH
16935: LD_INT 28
16937: EQUAL
16938: IFFALSE 16948
// sCargo := true ;
16940: LD_ADDR_EXP 99
16944: PUSH
16945: LD_INT 1
16947: ST_TO_ADDR
// if p3 = 29 then
16948: LD_VAR 0 3
16952: PUSH
16953: LD_INT 29
16955: EQUAL
16956: IFFALSE 16966
// sDLaser := true ;
16958: LD_ADDR_EXP 100
16962: PUSH
16963: LD_INT 1
16965: ST_TO_ADDR
// if p3 = 30 then
16966: LD_VAR 0 3
16970: PUSH
16971: LD_INT 30
16973: EQUAL
16974: IFFALSE 16984
// sExchange := true ;
16976: LD_ADDR_EXP 101
16980: PUSH
16981: LD_INT 1
16983: ST_TO_ADDR
// if p3 = 31 then
16984: LD_VAR 0 3
16988: PUSH
16989: LD_INT 31
16991: EQUAL
16992: IFFALSE 17002
// sFac := true ;
16994: LD_ADDR_EXP 102
16998: PUSH
16999: LD_INT 1
17001: ST_TO_ADDR
// if p3 = 32 then
17002: LD_VAR 0 3
17006: PUSH
17007: LD_INT 32
17009: EQUAL
17010: IFFALSE 17020
// sPower := true ;
17012: LD_ADDR_EXP 103
17016: PUSH
17017: LD_INT 1
17019: ST_TO_ADDR
// if p3 = 33 then
17020: LD_VAR 0 3
17024: PUSH
17025: LD_INT 33
17027: EQUAL
17028: IFFALSE 17038
// sRandom := true ;
17030: LD_ADDR_EXP 104
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// if p3 = 34 then
17038: LD_VAR 0 3
17042: PUSH
17043: LD_INT 34
17045: EQUAL
17046: IFFALSE 17056
// sShield := true ;
17048: LD_ADDR_EXP 105
17052: PUSH
17053: LD_INT 1
17055: ST_TO_ADDR
// if p3 = 35 then
17056: LD_VAR 0 3
17060: PUSH
17061: LD_INT 35
17063: EQUAL
17064: IFFALSE 17074
// sTime := true ;
17066: LD_ADDR_EXP 106
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// if p3 = 36 then
17074: LD_VAR 0 3
17078: PUSH
17079: LD_INT 36
17081: EQUAL
17082: IFFALSE 17092
// sTools := true ;
17084: LD_ADDR_EXP 107
17088: PUSH
17089: LD_INT 1
17091: ST_TO_ADDR
// if p3 = 101 then
17092: LD_VAR 0 3
17096: PUSH
17097: LD_INT 101
17099: EQUAL
17100: IFFALSE 17110
// sSold := true ;
17102: LD_ADDR_EXP 72
17106: PUSH
17107: LD_INT 1
17109: ST_TO_ADDR
// if p3 = 102 then
17110: LD_VAR 0 3
17114: PUSH
17115: LD_INT 102
17117: EQUAL
17118: IFFALSE 17128
// sDiff := true ;
17120: LD_ADDR_EXP 73
17124: PUSH
17125: LD_INT 1
17127: ST_TO_ADDR
// if p3 = 103 then
17128: LD_VAR 0 3
17132: PUSH
17133: LD_INT 103
17135: EQUAL
17136: IFFALSE 17146
// sFog := true ;
17138: LD_ADDR_EXP 76
17142: PUSH
17143: LD_INT 1
17145: ST_TO_ADDR
// if p3 = 104 then
17146: LD_VAR 0 3
17150: PUSH
17151: LD_INT 104
17153: EQUAL
17154: IFFALSE 17164
// sReset := true ;
17156: LD_ADDR_EXP 77
17160: PUSH
17161: LD_INT 1
17163: ST_TO_ADDR
// if p3 = 105 then
17164: LD_VAR 0 3
17168: PUSH
17169: LD_INT 105
17171: EQUAL
17172: IFFALSE 17182
// sSun := true ;
17174: LD_ADDR_EXP 78
17178: PUSH
17179: LD_INT 1
17181: ST_TO_ADDR
// if p3 = 106 then
17182: LD_VAR 0 3
17186: PUSH
17187: LD_INT 106
17189: EQUAL
17190: IFFALSE 17200
// sTiger := true ;
17192: LD_ADDR_EXP 74
17196: PUSH
17197: LD_INT 1
17199: ST_TO_ADDR
// if p3 = 107 then
17200: LD_VAR 0 3
17204: PUSH
17205: LD_INT 107
17207: EQUAL
17208: IFFALSE 17218
// sBomb := true ;
17210: LD_ADDR_EXP 75
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// if p3 = 108 then
17218: LD_VAR 0 3
17222: PUSH
17223: LD_INT 108
17225: EQUAL
17226: IFFALSE 17236
// sWound := true ;
17228: LD_ADDR_EXP 83
17232: PUSH
17233: LD_INT 1
17235: ST_TO_ADDR
// if p3 = 109 then
17236: LD_VAR 0 3
17240: PUSH
17241: LD_INT 109
17243: EQUAL
17244: IFFALSE 17254
// sBetray := true ;
17246: LD_ADDR_EXP 87
17250: PUSH
17251: LD_INT 1
17253: ST_TO_ADDR
// if p3 = 110 then
17254: LD_VAR 0 3
17258: PUSH
17259: LD_INT 110
17261: EQUAL
17262: IFFALSE 17272
// sContamin := true ;
17264: LD_ADDR_EXP 88
17268: PUSH
17269: LD_INT 1
17271: ST_TO_ADDR
// if p3 = 111 then
17272: LD_VAR 0 3
17276: PUSH
17277: LD_INT 111
17279: EQUAL
17280: IFFALSE 17290
// sOil := true ;
17282: LD_ADDR_EXP 90
17286: PUSH
17287: LD_INT 1
17289: ST_TO_ADDR
// if p3 = 112 then
17290: LD_VAR 0 3
17294: PUSH
17295: LD_INT 112
17297: EQUAL
17298: IFFALSE 17308
// sStu := true ;
17300: LD_ADDR_EXP 94
17304: PUSH
17305: LD_INT 1
17307: ST_TO_ADDR
// if p3 = 113 then
17308: LD_VAR 0 3
17312: PUSH
17313: LD_INT 113
17315: EQUAL
17316: IFFALSE 17326
// sBazooka := true ;
17318: LD_ADDR_EXP 97
17322: PUSH
17323: LD_INT 1
17325: ST_TO_ADDR
// if p3 = 114 then
17326: LD_VAR 0 3
17330: PUSH
17331: LD_INT 114
17333: EQUAL
17334: IFFALSE 17344
// sMortar := true ;
17336: LD_ADDR_EXP 98
17340: PUSH
17341: LD_INT 1
17343: ST_TO_ADDR
// if p3 = 115 then
17344: LD_VAR 0 3
17348: PUSH
17349: LD_INT 115
17351: EQUAL
17352: IFFALSE 17362
// sRanger := true ;
17354: LD_ADDR_EXP 108
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// end ; if p2 = 101 then
17362: LD_VAR 0 2
17366: PUSH
17367: LD_INT 101
17369: EQUAL
17370: IFFALSE 17498
// begin case p3 of 1 :
17372: LD_VAR 0 3
17376: PUSH
17377: LD_INT 1
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17392
17385: POP
// hHackUnlimitedResources ; 2 :
17386: CALL 28535 0 0
17390: GO 17498
17392: LD_INT 2
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17407
17400: POP
// hHackSetLevel10 ; 3 :
17401: CALL 28668 0 0
17405: GO 17498
17407: LD_INT 3
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17422
17415: POP
// hHackSetLevel10YourUnits ; 4 :
17416: CALL 28753 0 0
17420: GO 17498
17422: LD_INT 4
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17437
17430: POP
// hHackInvincible ; 5 :
17431: CALL 29201 0 0
17435: GO 17498
17437: LD_INT 5
17439: DOUBLE
17440: EQUAL
17441: IFTRUE 17445
17443: GO 17452
17445: POP
// hHackInvisible ; 6 :
17446: CALL 29312 0 0
17450: GO 17498
17452: LD_INT 6
17454: DOUBLE
17455: EQUAL
17456: IFTRUE 17460
17458: GO 17467
17460: POP
// hHackChangeYourSide ; 7 :
17461: CALL 29369 0 0
17465: GO 17498
17467: LD_INT 7
17469: DOUBLE
17470: EQUAL
17471: IFTRUE 17475
17473: GO 17482
17475: POP
// hHackChangeUnitSide ; 8 :
17476: CALL 29411 0 0
17480: GO 17498
17482: LD_INT 8
17484: DOUBLE
17485: EQUAL
17486: IFTRUE 17490
17488: GO 17497
17490: POP
// hHackFog ; end ;
17491: CALL 29512 0 0
17495: GO 17498
17497: POP
// end ; end ;
17498: LD_VAR 0 7
17502: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17503: GO 17505
17505: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17506: LD_STRING initStreamRollete();
17508: PPUSH
17509: CALL_OW 559
// InitStreamMode ;
17513: CALL 17522 0 0
// DefineStreamItems ( ) ;
17517: CALL 17962 0 0
// end ;
17521: END
// function InitStreamMode ; begin
17522: LD_INT 0
17524: PPUSH
// streamModeActive := false ;
17525: LD_ADDR_EXP 55
17529: PUSH
17530: LD_INT 0
17532: ST_TO_ADDR
// normalCounter := 36 ;
17533: LD_ADDR_EXP 56
17537: PUSH
17538: LD_INT 36
17540: ST_TO_ADDR
// hardcoreCounter := 16 ;
17541: LD_ADDR_EXP 57
17545: PUSH
17546: LD_INT 16
17548: ST_TO_ADDR
// sRocket := false ;
17549: LD_ADDR_EXP 60
17553: PUSH
17554: LD_INT 0
17556: ST_TO_ADDR
// sSpeed := false ;
17557: LD_ADDR_EXP 59
17561: PUSH
17562: LD_INT 0
17564: ST_TO_ADDR
// sEngine := false ;
17565: LD_ADDR_EXP 61
17569: PUSH
17570: LD_INT 0
17572: ST_TO_ADDR
// sSpec := false ;
17573: LD_ADDR_EXP 58
17577: PUSH
17578: LD_INT 0
17580: ST_TO_ADDR
// sLevel := false ;
17581: LD_ADDR_EXP 62
17585: PUSH
17586: LD_INT 0
17588: ST_TO_ADDR
// sArmoury := false ;
17589: LD_ADDR_EXP 63
17593: PUSH
17594: LD_INT 0
17596: ST_TO_ADDR
// sRadar := false ;
17597: LD_ADDR_EXP 64
17601: PUSH
17602: LD_INT 0
17604: ST_TO_ADDR
// sBunker := false ;
17605: LD_ADDR_EXP 65
17609: PUSH
17610: LD_INT 0
17612: ST_TO_ADDR
// sHack := false ;
17613: LD_ADDR_EXP 66
17617: PUSH
17618: LD_INT 0
17620: ST_TO_ADDR
// sFire := false ;
17621: LD_ADDR_EXP 67
17625: PUSH
17626: LD_INT 0
17628: ST_TO_ADDR
// sRefresh := false ;
17629: LD_ADDR_EXP 68
17633: PUSH
17634: LD_INT 0
17636: ST_TO_ADDR
// sExp := false ;
17637: LD_ADDR_EXP 69
17641: PUSH
17642: LD_INT 0
17644: ST_TO_ADDR
// sDepot := false ;
17645: LD_ADDR_EXP 70
17649: PUSH
17650: LD_INT 0
17652: ST_TO_ADDR
// sFlag := false ;
17653: LD_ADDR_EXP 71
17657: PUSH
17658: LD_INT 0
17660: ST_TO_ADDR
// sKamikadze := false ;
17661: LD_ADDR_EXP 79
17665: PUSH
17666: LD_INT 0
17668: ST_TO_ADDR
// sTroll := false ;
17669: LD_ADDR_EXP 80
17673: PUSH
17674: LD_INT 0
17676: ST_TO_ADDR
// sSlow := false ;
17677: LD_ADDR_EXP 81
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// sLack := false ;
17685: LD_ADDR_EXP 82
17689: PUSH
17690: LD_INT 0
17692: ST_TO_ADDR
// sTank := false ;
17693: LD_ADDR_EXP 84
17697: PUSH
17698: LD_INT 0
17700: ST_TO_ADDR
// sRemote := false ;
17701: LD_ADDR_EXP 85
17705: PUSH
17706: LD_INT 0
17708: ST_TO_ADDR
// sPowell := false ;
17709: LD_ADDR_EXP 86
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// sTeleport := false ;
17717: LD_ADDR_EXP 89
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// sOilTower := false ;
17725: LD_ADDR_EXP 91
17729: PUSH
17730: LD_INT 0
17732: ST_TO_ADDR
// sShovel := false ;
17733: LD_ADDR_EXP 92
17737: PUSH
17738: LD_INT 0
17740: ST_TO_ADDR
// sSheik := false ;
17741: LD_ADDR_EXP 93
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
// sEarthquake := false ;
17749: LD_ADDR_EXP 95
17753: PUSH
17754: LD_INT 0
17756: ST_TO_ADDR
// sAI := false ;
17757: LD_ADDR_EXP 96
17761: PUSH
17762: LD_INT 0
17764: ST_TO_ADDR
// sCargo := false ;
17765: LD_ADDR_EXP 99
17769: PUSH
17770: LD_INT 0
17772: ST_TO_ADDR
// sDLaser := false ;
17773: LD_ADDR_EXP 100
17777: PUSH
17778: LD_INT 0
17780: ST_TO_ADDR
// sExchange := false ;
17781: LD_ADDR_EXP 101
17785: PUSH
17786: LD_INT 0
17788: ST_TO_ADDR
// sFac := false ;
17789: LD_ADDR_EXP 102
17793: PUSH
17794: LD_INT 0
17796: ST_TO_ADDR
// sPower := false ;
17797: LD_ADDR_EXP 103
17801: PUSH
17802: LD_INT 0
17804: ST_TO_ADDR
// sRandom := false ;
17805: LD_ADDR_EXP 104
17809: PUSH
17810: LD_INT 0
17812: ST_TO_ADDR
// sShield := false ;
17813: LD_ADDR_EXP 105
17817: PUSH
17818: LD_INT 0
17820: ST_TO_ADDR
// sTime := false ;
17821: LD_ADDR_EXP 106
17825: PUSH
17826: LD_INT 0
17828: ST_TO_ADDR
// sTools := false ;
17829: LD_ADDR_EXP 107
17833: PUSH
17834: LD_INT 0
17836: ST_TO_ADDR
// sSold := false ;
17837: LD_ADDR_EXP 72
17841: PUSH
17842: LD_INT 0
17844: ST_TO_ADDR
// sDiff := false ;
17845: LD_ADDR_EXP 73
17849: PUSH
17850: LD_INT 0
17852: ST_TO_ADDR
// sFog := false ;
17853: LD_ADDR_EXP 76
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// sReset := false ;
17861: LD_ADDR_EXP 77
17865: PUSH
17866: LD_INT 0
17868: ST_TO_ADDR
// sSun := false ;
17869: LD_ADDR_EXP 78
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
// sTiger := false ;
17877: LD_ADDR_EXP 74
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// sBomb := false ;
17885: LD_ADDR_EXP 75
17889: PUSH
17890: LD_INT 0
17892: ST_TO_ADDR
// sWound := false ;
17893: LD_ADDR_EXP 83
17897: PUSH
17898: LD_INT 0
17900: ST_TO_ADDR
// sBetray := false ;
17901: LD_ADDR_EXP 87
17905: PUSH
17906: LD_INT 0
17908: ST_TO_ADDR
// sContamin := false ;
17909: LD_ADDR_EXP 88
17913: PUSH
17914: LD_INT 0
17916: ST_TO_ADDR
// sOil := false ;
17917: LD_ADDR_EXP 90
17921: PUSH
17922: LD_INT 0
17924: ST_TO_ADDR
// sStu := false ;
17925: LD_ADDR_EXP 94
17929: PUSH
17930: LD_INT 0
17932: ST_TO_ADDR
// sBazooka := false ;
17933: LD_ADDR_EXP 97
17937: PUSH
17938: LD_INT 0
17940: ST_TO_ADDR
// sMortar := false ;
17941: LD_ADDR_EXP 98
17945: PUSH
17946: LD_INT 0
17948: ST_TO_ADDR
// sRanger := false ;
17949: LD_ADDR_EXP 108
17953: PUSH
17954: LD_INT 0
17956: ST_TO_ADDR
// end ;
17957: LD_VAR 0 1
17961: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17962: LD_INT 0
17964: PPUSH
17965: PPUSH
17966: PPUSH
17967: PPUSH
17968: PPUSH
// result := [ ] ;
17969: LD_ADDR_VAR 0 1
17973: PUSH
17974: EMPTY
17975: ST_TO_ADDR
// if campaign_id = 1 then
17976: LD_OWVAR 69
17980: PUSH
17981: LD_INT 1
17983: EQUAL
17984: IFFALSE 20922
// begin case mission_number of 1 :
17986: LD_OWVAR 70
17990: PUSH
17991: LD_INT 1
17993: DOUBLE
17994: EQUAL
17995: IFTRUE 17999
17997: GO 18063
17999: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: LD_INT 4
18010: PUSH
18011: LD_INT 11
18013: PUSH
18014: LD_INT 12
18016: PUSH
18017: LD_INT 15
18019: PUSH
18020: LD_INT 16
18022: PUSH
18023: LD_INT 22
18025: PUSH
18026: LD_INT 23
18028: PUSH
18029: LD_INT 26
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 101
18045: PUSH
18046: LD_INT 102
18048: PUSH
18049: LD_INT 106
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: ST_TO_ADDR
18061: GO 20920
18063: LD_INT 2
18065: DOUBLE
18066: EQUAL
18067: IFTRUE 18071
18069: GO 18143
18071: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 4
18082: PUSH
18083: LD_INT 11
18085: PUSH
18086: LD_INT 12
18088: PUSH
18089: LD_INT 15
18091: PUSH
18092: LD_INT 16
18094: PUSH
18095: LD_INT 22
18097: PUSH
18098: LD_INT 23
18100: PUSH
18101: LD_INT 26
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 101
18117: PUSH
18118: LD_INT 102
18120: PUSH
18121: LD_INT 105
18123: PUSH
18124: LD_INT 106
18126: PUSH
18127: LD_INT 108
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: ST_TO_ADDR
18141: GO 20920
18143: LD_INT 3
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18227
18151: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18152: LD_ADDR_VAR 0 1
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 4
18162: PUSH
18163: LD_INT 5
18165: PUSH
18166: LD_INT 11
18168: PUSH
18169: LD_INT 12
18171: PUSH
18172: LD_INT 15
18174: PUSH
18175: LD_INT 16
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 26
18183: PUSH
18184: LD_INT 36
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 101
18201: PUSH
18202: LD_INT 102
18204: PUSH
18205: LD_INT 105
18207: PUSH
18208: LD_INT 106
18210: PUSH
18211: LD_INT 108
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: ST_TO_ADDR
18225: GO 20920
18227: LD_INT 4
18229: DOUBLE
18230: EQUAL
18231: IFTRUE 18235
18233: GO 18319
18235: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: LD_INT 4
18246: PUSH
18247: LD_INT 5
18249: PUSH
18250: LD_INT 8
18252: PUSH
18253: LD_INT 11
18255: PUSH
18256: LD_INT 12
18258: PUSH
18259: LD_INT 15
18261: PUSH
18262: LD_INT 16
18264: PUSH
18265: LD_INT 22
18267: PUSH
18268: LD_INT 23
18270: PUSH
18271: LD_INT 26
18273: PUSH
18274: LD_INT 36
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 101
18293: PUSH
18294: LD_INT 102
18296: PUSH
18297: LD_INT 105
18299: PUSH
18300: LD_INT 106
18302: PUSH
18303: LD_INT 108
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: ST_TO_ADDR
18317: GO 20920
18319: LD_INT 5
18321: DOUBLE
18322: EQUAL
18323: IFTRUE 18327
18325: GO 18427
18327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18328: LD_ADDR_VAR 0 1
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: LD_INT 4
18338: PUSH
18339: LD_INT 5
18341: PUSH
18342: LD_INT 6
18344: PUSH
18345: LD_INT 8
18347: PUSH
18348: LD_INT 11
18350: PUSH
18351: LD_INT 12
18353: PUSH
18354: LD_INT 15
18356: PUSH
18357: LD_INT 16
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_INT 23
18365: PUSH
18366: LD_INT 25
18368: PUSH
18369: LD_INT 26
18371: PUSH
18372: LD_INT 36
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 101
18393: PUSH
18394: LD_INT 102
18396: PUSH
18397: LD_INT 105
18399: PUSH
18400: LD_INT 106
18402: PUSH
18403: LD_INT 108
18405: PUSH
18406: LD_INT 109
18408: PUSH
18409: LD_INT 112
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: ST_TO_ADDR
18425: GO 20920
18427: LD_INT 6
18429: DOUBLE
18430: EQUAL
18431: IFTRUE 18435
18433: GO 18555
18435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18436: LD_ADDR_VAR 0 1
18440: PUSH
18441: LD_INT 2
18443: PUSH
18444: LD_INT 4
18446: PUSH
18447: LD_INT 5
18449: PUSH
18450: LD_INT 6
18452: PUSH
18453: LD_INT 8
18455: PUSH
18456: LD_INT 11
18458: PUSH
18459: LD_INT 12
18461: PUSH
18462: LD_INT 15
18464: PUSH
18465: LD_INT 16
18467: PUSH
18468: LD_INT 20
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_INT 23
18479: PUSH
18480: LD_INT 25
18482: PUSH
18483: LD_INT 26
18485: PUSH
18486: LD_INT 30
18488: PUSH
18489: LD_INT 31
18491: PUSH
18492: LD_INT 32
18494: PUSH
18495: LD_INT 36
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 101
18521: PUSH
18522: LD_INT 102
18524: PUSH
18525: LD_INT 105
18527: PUSH
18528: LD_INT 106
18530: PUSH
18531: LD_INT 108
18533: PUSH
18534: LD_INT 109
18536: PUSH
18537: LD_INT 112
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: ST_TO_ADDR
18553: GO 20920
18555: LD_INT 7
18557: DOUBLE
18558: EQUAL
18559: IFTRUE 18563
18561: GO 18663
18563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18564: LD_ADDR_VAR 0 1
18568: PUSH
18569: LD_INT 2
18571: PUSH
18572: LD_INT 4
18574: PUSH
18575: LD_INT 5
18577: PUSH
18578: LD_INT 7
18580: PUSH
18581: LD_INT 11
18583: PUSH
18584: LD_INT 12
18586: PUSH
18587: LD_INT 15
18589: PUSH
18590: LD_INT 16
18592: PUSH
18593: LD_INT 20
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_INT 23
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 26
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 101
18629: PUSH
18630: LD_INT 102
18632: PUSH
18633: LD_INT 103
18635: PUSH
18636: LD_INT 105
18638: PUSH
18639: LD_INT 106
18641: PUSH
18642: LD_INT 108
18644: PUSH
18645: LD_INT 112
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: ST_TO_ADDR
18661: GO 20920
18663: LD_INT 8
18665: DOUBLE
18666: EQUAL
18667: IFTRUE 18671
18669: GO 18799
18671: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18672: LD_ADDR_VAR 0 1
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: LD_INT 4
18682: PUSH
18683: LD_INT 5
18685: PUSH
18686: LD_INT 6
18688: PUSH
18689: LD_INT 7
18691: PUSH
18692: LD_INT 8
18694: PUSH
18695: LD_INT 11
18697: PUSH
18698: LD_INT 12
18700: PUSH
18701: LD_INT 15
18703: PUSH
18704: LD_INT 16
18706: PUSH
18707: LD_INT 20
18709: PUSH
18710: LD_INT 21
18712: PUSH
18713: LD_INT 22
18715: PUSH
18716: LD_INT 23
18718: PUSH
18719: LD_INT 25
18721: PUSH
18722: LD_INT 26
18724: PUSH
18725: LD_INT 30
18727: PUSH
18728: LD_INT 31
18730: PUSH
18731: LD_INT 32
18733: PUSH
18734: LD_INT 36
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 101
18761: PUSH
18762: LD_INT 102
18764: PUSH
18765: LD_INT 103
18767: PUSH
18768: LD_INT 105
18770: PUSH
18771: LD_INT 106
18773: PUSH
18774: LD_INT 108
18776: PUSH
18777: LD_INT 109
18779: PUSH
18780: LD_INT 112
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: ST_TO_ADDR
18797: GO 20920
18799: LD_INT 9
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18943
18807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18808: LD_ADDR_VAR 0 1
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: LD_INT 4
18818: PUSH
18819: LD_INT 5
18821: PUSH
18822: LD_INT 6
18824: PUSH
18825: LD_INT 7
18827: PUSH
18828: LD_INT 8
18830: PUSH
18831: LD_INT 11
18833: PUSH
18834: LD_INT 12
18836: PUSH
18837: LD_INT 15
18839: PUSH
18840: LD_INT 16
18842: PUSH
18843: LD_INT 20
18845: PUSH
18846: LD_INT 21
18848: PUSH
18849: LD_INT 22
18851: PUSH
18852: LD_INT 23
18854: PUSH
18855: LD_INT 25
18857: PUSH
18858: LD_INT 26
18860: PUSH
18861: LD_INT 28
18863: PUSH
18864: LD_INT 30
18866: PUSH
18867: LD_INT 31
18869: PUSH
18870: LD_INT 32
18872: PUSH
18873: LD_INT 36
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 101
18901: PUSH
18902: LD_INT 102
18904: PUSH
18905: LD_INT 103
18907: PUSH
18908: LD_INT 105
18910: PUSH
18911: LD_INT 106
18913: PUSH
18914: LD_INT 108
18916: PUSH
18917: LD_INT 109
18919: PUSH
18920: LD_INT 112
18922: PUSH
18923: LD_INT 114
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: ST_TO_ADDR
18941: GO 20920
18943: LD_INT 10
18945: DOUBLE
18946: EQUAL
18947: IFTRUE 18951
18949: GO 19135
18951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18952: LD_ADDR_VAR 0 1
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 4
18962: PUSH
18963: LD_INT 5
18965: PUSH
18966: LD_INT 6
18968: PUSH
18969: LD_INT 7
18971: PUSH
18972: LD_INT 8
18974: PUSH
18975: LD_INT 9
18977: PUSH
18978: LD_INT 10
18980: PUSH
18981: LD_INT 11
18983: PUSH
18984: LD_INT 12
18986: PUSH
18987: LD_INT 13
18989: PUSH
18990: LD_INT 14
18992: PUSH
18993: LD_INT 15
18995: PUSH
18996: LD_INT 16
18998: PUSH
18999: LD_INT 17
19001: PUSH
19002: LD_INT 18
19004: PUSH
19005: LD_INT 19
19007: PUSH
19008: LD_INT 20
19010: PUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 23
19019: PUSH
19020: LD_INT 24
19022: PUSH
19023: LD_INT 25
19025: PUSH
19026: LD_INT 26
19028: PUSH
19029: LD_INT 28
19031: PUSH
19032: LD_INT 30
19034: PUSH
19035: LD_INT 31
19037: PUSH
19038: LD_INT 32
19040: PUSH
19041: LD_INT 36
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 101
19077: PUSH
19078: LD_INT 102
19080: PUSH
19081: LD_INT 103
19083: PUSH
19084: LD_INT 104
19086: PUSH
19087: LD_INT 105
19089: PUSH
19090: LD_INT 106
19092: PUSH
19093: LD_INT 107
19095: PUSH
19096: LD_INT 108
19098: PUSH
19099: LD_INT 109
19101: PUSH
19102: LD_INT 110
19104: PUSH
19105: LD_INT 111
19107: PUSH
19108: LD_INT 112
19110: PUSH
19111: LD_INT 114
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: ST_TO_ADDR
19133: GO 20920
19135: LD_INT 11
19137: DOUBLE
19138: EQUAL
19139: IFTRUE 19143
19141: GO 19335
19143: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19144: LD_ADDR_VAR 0 1
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 3
19154: PUSH
19155: LD_INT 4
19157: PUSH
19158: LD_INT 5
19160: PUSH
19161: LD_INT 6
19163: PUSH
19164: LD_INT 7
19166: PUSH
19167: LD_INT 8
19169: PUSH
19170: LD_INT 9
19172: PUSH
19173: LD_INT 10
19175: PUSH
19176: LD_INT 11
19178: PUSH
19179: LD_INT 12
19181: PUSH
19182: LD_INT 13
19184: PUSH
19185: LD_INT 14
19187: PUSH
19188: LD_INT 15
19190: PUSH
19191: LD_INT 16
19193: PUSH
19194: LD_INT 17
19196: PUSH
19197: LD_INT 18
19199: PUSH
19200: LD_INT 19
19202: PUSH
19203: LD_INT 20
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 23
19214: PUSH
19215: LD_INT 24
19217: PUSH
19218: LD_INT 25
19220: PUSH
19221: LD_INT 26
19223: PUSH
19224: LD_INT 28
19226: PUSH
19227: LD_INT 30
19229: PUSH
19230: LD_INT 31
19232: PUSH
19233: LD_INT 32
19235: PUSH
19236: LD_INT 34
19238: PUSH
19239: LD_INT 36
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 101
19277: PUSH
19278: LD_INT 102
19280: PUSH
19281: LD_INT 103
19283: PUSH
19284: LD_INT 104
19286: PUSH
19287: LD_INT 105
19289: PUSH
19290: LD_INT 106
19292: PUSH
19293: LD_INT 107
19295: PUSH
19296: LD_INT 108
19298: PUSH
19299: LD_INT 109
19301: PUSH
19302: LD_INT 110
19304: PUSH
19305: LD_INT 111
19307: PUSH
19308: LD_INT 112
19310: PUSH
19311: LD_INT 114
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: ST_TO_ADDR
19333: GO 20920
19335: LD_INT 12
19337: DOUBLE
19338: EQUAL
19339: IFTRUE 19343
19341: GO 19551
19343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19344: LD_ADDR_VAR 0 1
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: LD_INT 2
19354: PUSH
19355: LD_INT 3
19357: PUSH
19358: LD_INT 4
19360: PUSH
19361: LD_INT 5
19363: PUSH
19364: LD_INT 6
19366: PUSH
19367: LD_INT 7
19369: PUSH
19370: LD_INT 8
19372: PUSH
19373: LD_INT 9
19375: PUSH
19376: LD_INT 10
19378: PUSH
19379: LD_INT 11
19381: PUSH
19382: LD_INT 12
19384: PUSH
19385: LD_INT 13
19387: PUSH
19388: LD_INT 14
19390: PUSH
19391: LD_INT 15
19393: PUSH
19394: LD_INT 16
19396: PUSH
19397: LD_INT 17
19399: PUSH
19400: LD_INT 18
19402: PUSH
19403: LD_INT 19
19405: PUSH
19406: LD_INT 20
19408: PUSH
19409: LD_INT 21
19411: PUSH
19412: LD_INT 22
19414: PUSH
19415: LD_INT 23
19417: PUSH
19418: LD_INT 24
19420: PUSH
19421: LD_INT 25
19423: PUSH
19424: LD_INT 26
19426: PUSH
19427: LD_INT 27
19429: PUSH
19430: LD_INT 28
19432: PUSH
19433: LD_INT 30
19435: PUSH
19436: LD_INT 31
19438: PUSH
19439: LD_INT 32
19441: PUSH
19442: LD_INT 33
19444: PUSH
19445: LD_INT 34
19447: PUSH
19448: LD_INT 36
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 101
19489: PUSH
19490: LD_INT 102
19492: PUSH
19493: LD_INT 103
19495: PUSH
19496: LD_INT 104
19498: PUSH
19499: LD_INT 105
19501: PUSH
19502: LD_INT 106
19504: PUSH
19505: LD_INT 107
19507: PUSH
19508: LD_INT 108
19510: PUSH
19511: LD_INT 109
19513: PUSH
19514: LD_INT 110
19516: PUSH
19517: LD_INT 111
19519: PUSH
19520: LD_INT 112
19522: PUSH
19523: LD_INT 113
19525: PUSH
19526: LD_INT 114
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: ST_TO_ADDR
19549: GO 20920
19551: LD_INT 13
19553: DOUBLE
19554: EQUAL
19555: IFTRUE 19559
19557: GO 19755
19559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19560: LD_ADDR_VAR 0 1
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 3
19573: PUSH
19574: LD_INT 4
19576: PUSH
19577: LD_INT 5
19579: PUSH
19580: LD_INT 8
19582: PUSH
19583: LD_INT 9
19585: PUSH
19586: LD_INT 10
19588: PUSH
19589: LD_INT 11
19591: PUSH
19592: LD_INT 12
19594: PUSH
19595: LD_INT 14
19597: PUSH
19598: LD_INT 15
19600: PUSH
19601: LD_INT 16
19603: PUSH
19604: LD_INT 17
19606: PUSH
19607: LD_INT 18
19609: PUSH
19610: LD_INT 19
19612: PUSH
19613: LD_INT 20
19615: PUSH
19616: LD_INT 21
19618: PUSH
19619: LD_INT 22
19621: PUSH
19622: LD_INT 23
19624: PUSH
19625: LD_INT 24
19627: PUSH
19628: LD_INT 25
19630: PUSH
19631: LD_INT 26
19633: PUSH
19634: LD_INT 27
19636: PUSH
19637: LD_INT 28
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 31
19645: PUSH
19646: LD_INT 32
19648: PUSH
19649: LD_INT 33
19651: PUSH
19652: LD_INT 34
19654: PUSH
19655: LD_INT 36
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 101
19693: PUSH
19694: LD_INT 102
19696: PUSH
19697: LD_INT 103
19699: PUSH
19700: LD_INT 104
19702: PUSH
19703: LD_INT 105
19705: PUSH
19706: LD_INT 106
19708: PUSH
19709: LD_INT 107
19711: PUSH
19712: LD_INT 108
19714: PUSH
19715: LD_INT 109
19717: PUSH
19718: LD_INT 110
19720: PUSH
19721: LD_INT 111
19723: PUSH
19724: LD_INT 112
19726: PUSH
19727: LD_INT 113
19729: PUSH
19730: LD_INT 114
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: ST_TO_ADDR
19753: GO 20920
19755: LD_INT 14
19757: DOUBLE
19758: EQUAL
19759: IFTRUE 19763
19761: GO 19975
19763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19764: LD_ADDR_VAR 0 1
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 3
19777: PUSH
19778: LD_INT 4
19780: PUSH
19781: LD_INT 5
19783: PUSH
19784: LD_INT 6
19786: PUSH
19787: LD_INT 7
19789: PUSH
19790: LD_INT 8
19792: PUSH
19793: LD_INT 9
19795: PUSH
19796: LD_INT 10
19798: PUSH
19799: LD_INT 11
19801: PUSH
19802: LD_INT 12
19804: PUSH
19805: LD_INT 13
19807: PUSH
19808: LD_INT 14
19810: PUSH
19811: LD_INT 15
19813: PUSH
19814: LD_INT 16
19816: PUSH
19817: LD_INT 17
19819: PUSH
19820: LD_INT 18
19822: PUSH
19823: LD_INT 19
19825: PUSH
19826: LD_INT 20
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 22
19834: PUSH
19835: LD_INT 23
19837: PUSH
19838: LD_INT 24
19840: PUSH
19841: LD_INT 25
19843: PUSH
19844: LD_INT 26
19846: PUSH
19847: LD_INT 27
19849: PUSH
19850: LD_INT 28
19852: PUSH
19853: LD_INT 29
19855: PUSH
19856: LD_INT 30
19858: PUSH
19859: LD_INT 31
19861: PUSH
19862: LD_INT 32
19864: PUSH
19865: LD_INT 33
19867: PUSH
19868: LD_INT 34
19870: PUSH
19871: LD_INT 36
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 101
19913: PUSH
19914: LD_INT 102
19916: PUSH
19917: LD_INT 103
19919: PUSH
19920: LD_INT 104
19922: PUSH
19923: LD_INT 105
19925: PUSH
19926: LD_INT 106
19928: PUSH
19929: LD_INT 107
19931: PUSH
19932: LD_INT 108
19934: PUSH
19935: LD_INT 109
19937: PUSH
19938: LD_INT 110
19940: PUSH
19941: LD_INT 111
19943: PUSH
19944: LD_INT 112
19946: PUSH
19947: LD_INT 113
19949: PUSH
19950: LD_INT 114
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: ST_TO_ADDR
19973: GO 20920
19975: LD_INT 15
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20195
19983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: LD_INT 4
20000: PUSH
20001: LD_INT 5
20003: PUSH
20004: LD_INT 6
20006: PUSH
20007: LD_INT 7
20009: PUSH
20010: LD_INT 8
20012: PUSH
20013: LD_INT 9
20015: PUSH
20016: LD_INT 10
20018: PUSH
20019: LD_INT 11
20021: PUSH
20022: LD_INT 12
20024: PUSH
20025: LD_INT 13
20027: PUSH
20028: LD_INT 14
20030: PUSH
20031: LD_INT 15
20033: PUSH
20034: LD_INT 16
20036: PUSH
20037: LD_INT 17
20039: PUSH
20040: LD_INT 18
20042: PUSH
20043: LD_INT 19
20045: PUSH
20046: LD_INT 20
20048: PUSH
20049: LD_INT 21
20051: PUSH
20052: LD_INT 22
20054: PUSH
20055: LD_INT 23
20057: PUSH
20058: LD_INT 24
20060: PUSH
20061: LD_INT 25
20063: PUSH
20064: LD_INT 26
20066: PUSH
20067: LD_INT 27
20069: PUSH
20070: LD_INT 28
20072: PUSH
20073: LD_INT 29
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 31
20081: PUSH
20082: LD_INT 32
20084: PUSH
20085: LD_INT 33
20087: PUSH
20088: LD_INT 34
20090: PUSH
20091: LD_INT 36
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 101
20133: PUSH
20134: LD_INT 102
20136: PUSH
20137: LD_INT 103
20139: PUSH
20140: LD_INT 104
20142: PUSH
20143: LD_INT 105
20145: PUSH
20146: LD_INT 106
20148: PUSH
20149: LD_INT 107
20151: PUSH
20152: LD_INT 108
20154: PUSH
20155: LD_INT 109
20157: PUSH
20158: LD_INT 110
20160: PUSH
20161: LD_INT 111
20163: PUSH
20164: LD_INT 112
20166: PUSH
20167: LD_INT 113
20169: PUSH
20170: LD_INT 114
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: ST_TO_ADDR
20193: GO 20920
20195: LD_INT 16
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20327
20203: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 4
20214: PUSH
20215: LD_INT 5
20217: PUSH
20218: LD_INT 7
20220: PUSH
20221: LD_INT 11
20223: PUSH
20224: LD_INT 12
20226: PUSH
20227: LD_INT 15
20229: PUSH
20230: LD_INT 16
20232: PUSH
20233: LD_INT 20
20235: PUSH
20236: LD_INT 21
20238: PUSH
20239: LD_INT 22
20241: PUSH
20242: LD_INT 23
20244: PUSH
20245: LD_INT 25
20247: PUSH
20248: LD_INT 26
20250: PUSH
20251: LD_INT 30
20253: PUSH
20254: LD_INT 31
20256: PUSH
20257: LD_INT 32
20259: PUSH
20260: LD_INT 33
20262: PUSH
20263: LD_INT 34
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 101
20289: PUSH
20290: LD_INT 102
20292: PUSH
20293: LD_INT 103
20295: PUSH
20296: LD_INT 106
20298: PUSH
20299: LD_INT 108
20301: PUSH
20302: LD_INT 112
20304: PUSH
20305: LD_INT 113
20307: PUSH
20308: LD_INT 114
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: ST_TO_ADDR
20325: GO 20920
20327: LD_INT 17
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20547
20335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20336: LD_ADDR_VAR 0 1
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 3
20349: PUSH
20350: LD_INT 4
20352: PUSH
20353: LD_INT 5
20355: PUSH
20356: LD_INT 6
20358: PUSH
20359: LD_INT 7
20361: PUSH
20362: LD_INT 8
20364: PUSH
20365: LD_INT 9
20367: PUSH
20368: LD_INT 10
20370: PUSH
20371: LD_INT 11
20373: PUSH
20374: LD_INT 12
20376: PUSH
20377: LD_INT 13
20379: PUSH
20380: LD_INT 14
20382: PUSH
20383: LD_INT 15
20385: PUSH
20386: LD_INT 16
20388: PUSH
20389: LD_INT 17
20391: PUSH
20392: LD_INT 18
20394: PUSH
20395: LD_INT 19
20397: PUSH
20398: LD_INT 20
20400: PUSH
20401: LD_INT 21
20403: PUSH
20404: LD_INT 22
20406: PUSH
20407: LD_INT 23
20409: PUSH
20410: LD_INT 24
20412: PUSH
20413: LD_INT 25
20415: PUSH
20416: LD_INT 26
20418: PUSH
20419: LD_INT 27
20421: PUSH
20422: LD_INT 28
20424: PUSH
20425: LD_INT 29
20427: PUSH
20428: LD_INT 30
20430: PUSH
20431: LD_INT 31
20433: PUSH
20434: LD_INT 32
20436: PUSH
20437: LD_INT 33
20439: PUSH
20440: LD_INT 34
20442: PUSH
20443: LD_INT 36
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 101
20485: PUSH
20486: LD_INT 102
20488: PUSH
20489: LD_INT 103
20491: PUSH
20492: LD_INT 104
20494: PUSH
20495: LD_INT 105
20497: PUSH
20498: LD_INT 106
20500: PUSH
20501: LD_INT 107
20503: PUSH
20504: LD_INT 108
20506: PUSH
20507: LD_INT 109
20509: PUSH
20510: LD_INT 110
20512: PUSH
20513: LD_INT 111
20515: PUSH
20516: LD_INT 112
20518: PUSH
20519: LD_INT 113
20521: PUSH
20522: LD_INT 114
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: ST_TO_ADDR
20545: GO 20920
20547: LD_INT 18
20549: DOUBLE
20550: EQUAL
20551: IFTRUE 20555
20553: GO 20691
20555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20556: LD_ADDR_VAR 0 1
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 4
20566: PUSH
20567: LD_INT 5
20569: PUSH
20570: LD_INT 7
20572: PUSH
20573: LD_INT 11
20575: PUSH
20576: LD_INT 12
20578: PUSH
20579: LD_INT 15
20581: PUSH
20582: LD_INT 16
20584: PUSH
20585: LD_INT 20
20587: PUSH
20588: LD_INT 21
20590: PUSH
20591: LD_INT 22
20593: PUSH
20594: LD_INT 23
20596: PUSH
20597: LD_INT 25
20599: PUSH
20600: LD_INT 26
20602: PUSH
20603: LD_INT 30
20605: PUSH
20606: LD_INT 31
20608: PUSH
20609: LD_INT 32
20611: PUSH
20612: LD_INT 33
20614: PUSH
20615: LD_INT 34
20617: PUSH
20618: LD_INT 35
20620: PUSH
20621: LD_INT 36
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 101
20649: PUSH
20650: LD_INT 102
20652: PUSH
20653: LD_INT 103
20655: PUSH
20656: LD_INT 106
20658: PUSH
20659: LD_INT 108
20661: PUSH
20662: LD_INT 112
20664: PUSH
20665: LD_INT 113
20667: PUSH
20668: LD_INT 114
20670: PUSH
20671: LD_INT 115
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: ST_TO_ADDR
20689: GO 20920
20691: LD_INT 19
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20919
20699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20700: LD_ADDR_VAR 0 1
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 3
20713: PUSH
20714: LD_INT 4
20716: PUSH
20717: LD_INT 5
20719: PUSH
20720: LD_INT 6
20722: PUSH
20723: LD_INT 7
20725: PUSH
20726: LD_INT 8
20728: PUSH
20729: LD_INT 9
20731: PUSH
20732: LD_INT 10
20734: PUSH
20735: LD_INT 11
20737: PUSH
20738: LD_INT 12
20740: PUSH
20741: LD_INT 13
20743: PUSH
20744: LD_INT 14
20746: PUSH
20747: LD_INT 15
20749: PUSH
20750: LD_INT 16
20752: PUSH
20753: LD_INT 17
20755: PUSH
20756: LD_INT 18
20758: PUSH
20759: LD_INT 19
20761: PUSH
20762: LD_INT 20
20764: PUSH
20765: LD_INT 21
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_INT 23
20773: PUSH
20774: LD_INT 24
20776: PUSH
20777: LD_INT 25
20779: PUSH
20780: LD_INT 26
20782: PUSH
20783: LD_INT 27
20785: PUSH
20786: LD_INT 28
20788: PUSH
20789: LD_INT 29
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 31
20797: PUSH
20798: LD_INT 32
20800: PUSH
20801: LD_INT 33
20803: PUSH
20804: LD_INT 34
20806: PUSH
20807: LD_INT 35
20809: PUSH
20810: LD_INT 36
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 101
20853: PUSH
20854: LD_INT 102
20856: PUSH
20857: LD_INT 103
20859: PUSH
20860: LD_INT 104
20862: PUSH
20863: LD_INT 105
20865: PUSH
20866: LD_INT 106
20868: PUSH
20869: LD_INT 107
20871: PUSH
20872: LD_INT 108
20874: PUSH
20875: LD_INT 109
20877: PUSH
20878: LD_INT 110
20880: PUSH
20881: LD_INT 111
20883: PUSH
20884: LD_INT 112
20886: PUSH
20887: LD_INT 113
20889: PUSH
20890: LD_INT 114
20892: PUSH
20893: LD_INT 115
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: ST_TO_ADDR
20917: GO 20920
20919: POP
// end else
20920: GO 21139
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20922: LD_ADDR_VAR 0 1
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 3
20935: PUSH
20936: LD_INT 4
20938: PUSH
20939: LD_INT 5
20941: PUSH
20942: LD_INT 6
20944: PUSH
20945: LD_INT 7
20947: PUSH
20948: LD_INT 8
20950: PUSH
20951: LD_INT 9
20953: PUSH
20954: LD_INT 10
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 12
20962: PUSH
20963: LD_INT 13
20965: PUSH
20966: LD_INT 14
20968: PUSH
20969: LD_INT 15
20971: PUSH
20972: LD_INT 16
20974: PUSH
20975: LD_INT 17
20977: PUSH
20978: LD_INT 18
20980: PUSH
20981: LD_INT 19
20983: PUSH
20984: LD_INT 20
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_INT 23
20995: PUSH
20996: LD_INT 24
20998: PUSH
20999: LD_INT 25
21001: PUSH
21002: LD_INT 26
21004: PUSH
21005: LD_INT 27
21007: PUSH
21008: LD_INT 28
21010: PUSH
21011: LD_INT 29
21013: PUSH
21014: LD_INT 30
21016: PUSH
21017: LD_INT 31
21019: PUSH
21020: LD_INT 32
21022: PUSH
21023: LD_INT 33
21025: PUSH
21026: LD_INT 34
21028: PUSH
21029: LD_INT 35
21031: PUSH
21032: LD_INT 36
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 101
21075: PUSH
21076: LD_INT 102
21078: PUSH
21079: LD_INT 103
21081: PUSH
21082: LD_INT 104
21084: PUSH
21085: LD_INT 105
21087: PUSH
21088: LD_INT 106
21090: PUSH
21091: LD_INT 107
21093: PUSH
21094: LD_INT 108
21096: PUSH
21097: LD_INT 109
21099: PUSH
21100: LD_INT 110
21102: PUSH
21103: LD_INT 111
21105: PUSH
21106: LD_INT 112
21108: PUSH
21109: LD_INT 113
21111: PUSH
21112: LD_INT 114
21114: PUSH
21115: LD_INT 115
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: ST_TO_ADDR
// if result then
21139: LD_VAR 0 1
21143: IFFALSE 21432
// begin normal :=  ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_STRING 
21152: ST_TO_ADDR
// hardcore :=  ;
21153: LD_ADDR_VAR 0 4
21157: PUSH
21158: LD_STRING 
21160: ST_TO_ADDR
// for i = 1 to normalCounter do
21161: LD_ADDR_VAR 0 5
21165: PUSH
21166: DOUBLE
21167: LD_INT 1
21169: DEC
21170: ST_TO_ADDR
21171: LD_EXP 56
21175: PUSH
21176: FOR_TO
21177: IFFALSE 21278
// begin tmp := 0 ;
21179: LD_ADDR_VAR 0 2
21183: PUSH
21184: LD_STRING 0
21186: ST_TO_ADDR
// if result [ 1 ] then
21187: LD_VAR 0 1
21191: PUSH
21192: LD_INT 1
21194: ARRAY
21195: IFFALSE 21260
// if result [ 1 ] [ 1 ] = i then
21197: LD_VAR 0 1
21201: PUSH
21202: LD_INT 1
21204: ARRAY
21205: PUSH
21206: LD_INT 1
21208: ARRAY
21209: PUSH
21210: LD_VAR 0 5
21214: EQUAL
21215: IFFALSE 21260
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21217: LD_ADDR_VAR 0 1
21221: PUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: LD_INT 1
21229: PPUSH
21230: LD_VAR 0 1
21234: PUSH
21235: LD_INT 1
21237: ARRAY
21238: PPUSH
21239: LD_INT 1
21241: PPUSH
21242: CALL_OW 3
21246: PPUSH
21247: CALL_OW 1
21251: ST_TO_ADDR
// tmp := 1 ;
21252: LD_ADDR_VAR 0 2
21256: PUSH
21257: LD_STRING 1
21259: ST_TO_ADDR
// end ; normal := normal & tmp ;
21260: LD_ADDR_VAR 0 3
21264: PUSH
21265: LD_VAR 0 3
21269: PUSH
21270: LD_VAR 0 2
21274: STR
21275: ST_TO_ADDR
// end ;
21276: GO 21176
21278: POP
21279: POP
// for i = 1 to hardcoreCounter do
21280: LD_ADDR_VAR 0 5
21284: PUSH
21285: DOUBLE
21286: LD_INT 1
21288: DEC
21289: ST_TO_ADDR
21290: LD_EXP 57
21294: PUSH
21295: FOR_TO
21296: IFFALSE 21401
// begin tmp := 0 ;
21298: LD_ADDR_VAR 0 2
21302: PUSH
21303: LD_STRING 0
21305: ST_TO_ADDR
// if result [ 2 ] then
21306: LD_VAR 0 1
21310: PUSH
21311: LD_INT 2
21313: ARRAY
21314: IFFALSE 21383
// if result [ 2 ] [ 1 ] = 100 + i then
21316: LD_VAR 0 1
21320: PUSH
21321: LD_INT 2
21323: ARRAY
21324: PUSH
21325: LD_INT 1
21327: ARRAY
21328: PUSH
21329: LD_INT 100
21331: PUSH
21332: LD_VAR 0 5
21336: PLUS
21337: EQUAL
21338: IFFALSE 21383
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: LD_VAR 0 1
21349: PPUSH
21350: LD_INT 2
21352: PPUSH
21353: LD_VAR 0 1
21357: PUSH
21358: LD_INT 2
21360: ARRAY
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: CALL_OW 3
21369: PPUSH
21370: CALL_OW 1
21374: ST_TO_ADDR
// tmp := 1 ;
21375: LD_ADDR_VAR 0 2
21379: PUSH
21380: LD_STRING 1
21382: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21383: LD_ADDR_VAR 0 4
21387: PUSH
21388: LD_VAR 0 4
21392: PUSH
21393: LD_VAR 0 2
21397: STR
21398: ST_TO_ADDR
// end ;
21399: GO 21295
21401: POP
21402: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21403: LD_STRING getStreamItemsFromMission("
21405: PUSH
21406: LD_VAR 0 3
21410: STR
21411: PUSH
21412: LD_STRING ","
21414: STR
21415: PUSH
21416: LD_VAR 0 4
21420: STR
21421: PUSH
21422: LD_STRING ")
21424: STR
21425: PPUSH
21426: CALL_OW 559
// end else
21430: GO 21439
// ToLua ( getStreamItemsFromMission("","") ) ;
21432: LD_STRING getStreamItemsFromMission("","")
21434: PPUSH
21435: CALL_OW 559
// end ;
21439: LD_VAR 0 1
21443: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21444: LD_EXP 55
21448: PUSH
21449: LD_EXP 60
21453: AND
21454: IFFALSE 21578
21456: GO 21458
21458: DISABLE
21459: LD_INT 0
21461: PPUSH
21462: PPUSH
// begin enable ;
21463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_INT 22
21471: PUSH
21472: LD_OWVAR 2
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: LD_INT 34
21486: PUSH
21487: LD_INT 7
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 34
21496: PUSH
21497: LD_INT 45
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 34
21506: PUSH
21507: LD_INT 28
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 34
21516: PUSH
21517: LD_INT 47
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PPUSH
21535: CALL_OW 69
21539: ST_TO_ADDR
// if not tmp then
21540: LD_VAR 0 2
21544: NOT
21545: IFFALSE 21549
// exit ;
21547: GO 21578
// for i in tmp do
21549: LD_ADDR_VAR 0 1
21553: PUSH
21554: LD_VAR 0 2
21558: PUSH
21559: FOR_IN
21560: IFFALSE 21576
// begin SetLives ( i , 0 ) ;
21562: LD_VAR 0 1
21566: PPUSH
21567: LD_INT 0
21569: PPUSH
21570: CALL_OW 234
// end ;
21574: GO 21559
21576: POP
21577: POP
// end ;
21578: PPOPN 2
21580: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21581: LD_EXP 55
21585: PUSH
21586: LD_EXP 61
21590: AND
21591: IFFALSE 21675
21593: GO 21595
21595: DISABLE
21596: LD_INT 0
21598: PPUSH
21599: PPUSH
// begin enable ;
21600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21601: LD_ADDR_VAR 0 2
21605: PUSH
21606: LD_INT 22
21608: PUSH
21609: LD_OWVAR 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 32
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PPUSH
21632: CALL_OW 69
21636: ST_TO_ADDR
// if not tmp then
21637: LD_VAR 0 2
21641: NOT
21642: IFFALSE 21646
// exit ;
21644: GO 21675
// for i in tmp do
21646: LD_ADDR_VAR 0 1
21650: PUSH
21651: LD_VAR 0 2
21655: PUSH
21656: FOR_IN
21657: IFFALSE 21673
// begin SetLives ( i , 0 ) ;
21659: LD_VAR 0 1
21663: PPUSH
21664: LD_INT 0
21666: PPUSH
21667: CALL_OW 234
// end ;
21671: GO 21656
21673: POP
21674: POP
// end ;
21675: PPOPN 2
21677: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21678: LD_EXP 55
21682: PUSH
21683: LD_EXP 58
21687: AND
21688: IFFALSE 21781
21690: GO 21692
21692: DISABLE
21693: LD_INT 0
21695: PPUSH
// begin enable ;
21696: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21697: LD_ADDR_VAR 0 1
21701: PUSH
21702: LD_INT 22
21704: PUSH
21705: LD_OWVAR 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: LD_INT 25
21719: PUSH
21720: LD_INT 5
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 25
21729: PUSH
21730: LD_INT 9
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 25
21739: PUSH
21740: LD_INT 8
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PPUSH
21757: CALL_OW 69
21761: PUSH
21762: FOR_IN
21763: IFFALSE 21779
// begin SetClass ( i , 1 ) ;
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_INT 1
21772: PPUSH
21773: CALL_OW 336
// end ;
21777: GO 21762
21779: POP
21780: POP
// end ;
21781: PPOPN 1
21783: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21784: LD_EXP 55
21788: PUSH
21789: LD_EXP 59
21793: AND
21794: PUSH
21795: LD_OWVAR 65
21799: PUSH
21800: LD_INT 7
21802: LESS
21803: AND
21804: IFFALSE 21818
21806: GO 21808
21808: DISABLE
// begin enable ;
21809: ENABLE
// game_speed := 7 ;
21810: LD_ADDR_OWVAR 65
21814: PUSH
21815: LD_INT 7
21817: ST_TO_ADDR
// end ;
21818: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21819: LD_EXP 55
21823: PUSH
21824: LD_EXP 62
21828: AND
21829: IFFALSE 22031
21831: GO 21833
21833: DISABLE
21834: LD_INT 0
21836: PPUSH
21837: PPUSH
21838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21839: LD_ADDR_VAR 0 3
21843: PUSH
21844: LD_INT 81
21846: PUSH
21847: LD_OWVAR 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 21
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PPUSH
21870: CALL_OW 69
21874: ST_TO_ADDR
// if not tmp then
21875: LD_VAR 0 3
21879: NOT
21880: IFFALSE 21884
// exit ;
21882: GO 22031
// if tmp > 5 then
21884: LD_VAR 0 3
21888: PUSH
21889: LD_INT 5
21891: GREATER
21892: IFFALSE 21904
// k := 5 else
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_INT 5
21901: ST_TO_ADDR
21902: GO 21914
// k := tmp ;
21904: LD_ADDR_VAR 0 2
21908: PUSH
21909: LD_VAR 0 3
21913: ST_TO_ADDR
// for i := 1 to k do
21914: LD_ADDR_VAR 0 1
21918: PUSH
21919: DOUBLE
21920: LD_INT 1
21922: DEC
21923: ST_TO_ADDR
21924: LD_VAR 0 2
21928: PUSH
21929: FOR_TO
21930: IFFALSE 22029
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21932: LD_VAR 0 3
21936: PUSH
21937: LD_VAR 0 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 1
21947: PUSH
21948: LD_INT 4
21950: MOD
21951: PUSH
21952: LD_INT 1
21954: PLUS
21955: PPUSH
21956: CALL_OW 259
21960: PUSH
21961: LD_INT 10
21963: LESS
21964: IFFALSE 22027
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21966: LD_VAR 0 3
21970: PUSH
21971: LD_VAR 0 1
21975: ARRAY
21976: PPUSH
21977: LD_VAR 0 1
21981: PUSH
21982: LD_INT 4
21984: MOD
21985: PUSH
21986: LD_INT 1
21988: PLUS
21989: PPUSH
21990: LD_VAR 0 3
21994: PUSH
21995: LD_VAR 0 1
21999: ARRAY
22000: PPUSH
22001: LD_VAR 0 1
22005: PUSH
22006: LD_INT 4
22008: MOD
22009: PUSH
22010: LD_INT 1
22012: PLUS
22013: PPUSH
22014: CALL_OW 259
22018: PUSH
22019: LD_INT 1
22021: PLUS
22022: PPUSH
22023: CALL_OW 237
22027: GO 21929
22029: POP
22030: POP
// end ;
22031: PPOPN 3
22033: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22034: LD_EXP 55
22038: PUSH
22039: LD_EXP 63
22043: AND
22044: IFFALSE 22064
22046: GO 22048
22048: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22049: LD_INT 4
22051: PPUSH
22052: LD_OWVAR 2
22056: PPUSH
22057: LD_INT 0
22059: PPUSH
22060: CALL_OW 324
22064: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22065: LD_EXP 55
22069: PUSH
22070: LD_EXP 92
22074: AND
22075: IFFALSE 22095
22077: GO 22079
22079: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22080: LD_INT 19
22082: PPUSH
22083: LD_OWVAR 2
22087: PPUSH
22088: LD_INT 0
22090: PPUSH
22091: CALL_OW 324
22095: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22096: LD_EXP 55
22100: PUSH
22101: LD_EXP 64
22105: AND
22106: IFFALSE 22208
22108: GO 22110
22110: DISABLE
22111: LD_INT 0
22113: PPUSH
22114: PPUSH
// begin enable ;
22115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22116: LD_ADDR_VAR 0 2
22120: PUSH
22121: LD_INT 22
22123: PUSH
22124: LD_OWVAR 2
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: LD_INT 34
22138: PUSH
22139: LD_INT 11
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 34
22148: PUSH
22149: LD_INT 30
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PPUSH
22165: CALL_OW 69
22169: ST_TO_ADDR
// if not tmp then
22170: LD_VAR 0 2
22174: NOT
22175: IFFALSE 22179
// exit ;
22177: GO 22208
// for i in tmp do
22179: LD_ADDR_VAR 0 1
22183: PUSH
22184: LD_VAR 0 2
22188: PUSH
22189: FOR_IN
22190: IFFALSE 22206
// begin SetLives ( i , 0 ) ;
22192: LD_VAR 0 1
22196: PPUSH
22197: LD_INT 0
22199: PPUSH
22200: CALL_OW 234
// end ;
22204: GO 22189
22206: POP
22207: POP
// end ;
22208: PPOPN 2
22210: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22211: LD_EXP 55
22215: PUSH
22216: LD_EXP 65
22220: AND
22221: IFFALSE 22241
22223: GO 22225
22225: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22226: LD_INT 32
22228: PPUSH
22229: LD_OWVAR 2
22233: PPUSH
22234: LD_INT 0
22236: PPUSH
22237: CALL_OW 324
22241: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22242: LD_EXP 55
22246: PUSH
22247: LD_EXP 66
22251: AND
22252: IFFALSE 22433
22254: GO 22256
22256: DISABLE
22257: LD_INT 0
22259: PPUSH
22260: PPUSH
22261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22262: LD_ADDR_VAR 0 2
22266: PUSH
22267: LD_INT 22
22269: PUSH
22270: LD_OWVAR 2
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 33
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PPUSH
22293: CALL_OW 69
22297: ST_TO_ADDR
// if not tmp then
22298: LD_VAR 0 2
22302: NOT
22303: IFFALSE 22307
// exit ;
22305: GO 22433
// side := 0 ;
22307: LD_ADDR_VAR 0 3
22311: PUSH
22312: LD_INT 0
22314: ST_TO_ADDR
// for i := 1 to 8 do
22315: LD_ADDR_VAR 0 1
22319: PUSH
22320: DOUBLE
22321: LD_INT 1
22323: DEC
22324: ST_TO_ADDR
22325: LD_INT 8
22327: PUSH
22328: FOR_TO
22329: IFFALSE 22377
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22331: LD_OWVAR 2
22335: PUSH
22336: LD_VAR 0 1
22340: NONEQUAL
22341: PUSH
22342: LD_OWVAR 2
22346: PPUSH
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 81
22356: PUSH
22357: LD_INT 2
22359: EQUAL
22360: AND
22361: IFFALSE 22375
// begin side := i ;
22363: LD_ADDR_VAR 0 3
22367: PUSH
22368: LD_VAR 0 1
22372: ST_TO_ADDR
// break ;
22373: GO 22377
// end ;
22375: GO 22328
22377: POP
22378: POP
// if not side then
22379: LD_VAR 0 3
22383: NOT
22384: IFFALSE 22388
// exit ;
22386: GO 22433
// for i := 1 to tmp do
22388: LD_ADDR_VAR 0 1
22392: PUSH
22393: DOUBLE
22394: LD_INT 1
22396: DEC
22397: ST_TO_ADDR
22398: LD_VAR 0 2
22402: PUSH
22403: FOR_TO
22404: IFFALSE 22431
// if Prob ( 60 ) then
22406: LD_INT 60
22408: PPUSH
22409: CALL_OW 13
22413: IFFALSE 22429
// SetSide ( i , side ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: LD_VAR 0 3
22424: PPUSH
22425: CALL_OW 235
22429: GO 22403
22431: POP
22432: POP
// end ;
22433: PPOPN 3
22435: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22436: LD_EXP 55
22440: PUSH
22441: LD_EXP 68
22445: AND
22446: IFFALSE 22565
22448: GO 22450
22450: DISABLE
22451: LD_INT 0
22453: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_OWVAR 2
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 21
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 3
22483: PUSH
22484: LD_INT 23
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: PPUSH
22503: CALL_OW 69
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22563
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 257
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: IN
22539: IFFALSE 22561
// SetClass ( un , rand ( 1 , 4 ) ) ;
22541: LD_VAR 0 1
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: LD_INT 4
22551: PPUSH
22552: CALL_OW 12
22556: PPUSH
22557: CALL_OW 336
22561: GO 22508
22563: POP
22564: POP
// end ;
22565: PPOPN 1
22567: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22568: LD_EXP 55
22572: PUSH
22573: LD_EXP 67
22577: AND
22578: IFFALSE 22657
22580: GO 22582
22582: DISABLE
22583: LD_INT 0
22585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22586: LD_ADDR_VAR 0 1
22590: PUSH
22591: LD_INT 22
22593: PUSH
22594: LD_OWVAR 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 21
22605: PUSH
22606: LD_INT 3
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PPUSH
22617: CALL_OW 69
22621: ST_TO_ADDR
// if not tmp then
22622: LD_VAR 0 1
22626: NOT
22627: IFFALSE 22631
// exit ;
22629: GO 22657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22631: LD_VAR 0 1
22635: PUSH
22636: LD_INT 1
22638: PPUSH
22639: LD_VAR 0 1
22643: PPUSH
22644: CALL_OW 12
22648: ARRAY
22649: PPUSH
22650: LD_INT 100
22652: PPUSH
22653: CALL_OW 234
// end ;
22657: PPOPN 1
22659: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22660: LD_EXP 55
22664: PUSH
22665: LD_EXP 69
22669: AND
22670: IFFALSE 22768
22672: GO 22674
22674: DISABLE
22675: LD_INT 0
22677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22678: LD_ADDR_VAR 0 1
22682: PUSH
22683: LD_INT 22
22685: PUSH
22686: LD_OWVAR 2
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 21
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PPUSH
22709: CALL_OW 69
22713: ST_TO_ADDR
// if not tmp then
22714: LD_VAR 0 1
22718: NOT
22719: IFFALSE 22723
// exit ;
22721: GO 22768
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22723: LD_VAR 0 1
22727: PUSH
22728: LD_INT 1
22730: PPUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 12
22740: ARRAY
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: LD_INT 4
22747: PPUSH
22748: CALL_OW 12
22752: PPUSH
22753: LD_INT 3000
22755: PPUSH
22756: LD_INT 9000
22758: PPUSH
22759: CALL_OW 12
22763: PPUSH
22764: CALL_OW 492
// end ;
22768: PPOPN 1
22770: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22771: LD_EXP 55
22775: PUSH
22776: LD_EXP 70
22780: AND
22781: IFFALSE 22801
22783: GO 22785
22785: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22786: LD_INT 1
22788: PPUSH
22789: LD_OWVAR 2
22793: PPUSH
22794: LD_INT 0
22796: PPUSH
22797: CALL_OW 324
22801: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22802: LD_EXP 55
22806: PUSH
22807: LD_EXP 71
22811: AND
22812: IFFALSE 22895
22814: GO 22816
22816: DISABLE
22817: LD_INT 0
22819: PPUSH
22820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_INT 22
22828: PUSH
22829: LD_OWVAR 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 21
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PPUSH
22852: CALL_OW 69
22856: ST_TO_ADDR
// if not tmp then
22857: LD_VAR 0 2
22861: NOT
22862: IFFALSE 22866
// exit ;
22864: GO 22895
// for i in tmp do
22866: LD_ADDR_VAR 0 1
22870: PUSH
22871: LD_VAR 0 2
22875: PUSH
22876: FOR_IN
22877: IFFALSE 22893
// SetBLevel ( i , 10 ) ;
22879: LD_VAR 0 1
22883: PPUSH
22884: LD_INT 10
22886: PPUSH
22887: CALL_OW 241
22891: GO 22876
22893: POP
22894: POP
// end ;
22895: PPOPN 2
22897: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22898: LD_EXP 55
22902: PUSH
22903: LD_EXP 72
22907: AND
22908: IFFALSE 23019
22910: GO 22912
22912: DISABLE
22913: LD_INT 0
22915: PPUSH
22916: PPUSH
22917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_INT 22
22925: PUSH
22926: LD_OWVAR 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 25
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 69
22953: ST_TO_ADDR
// if not tmp then
22954: LD_VAR 0 3
22958: NOT
22959: IFFALSE 22963
// exit ;
22961: GO 23019
// un := tmp [ rand ( 1 , tmp ) ] ;
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_VAR 0 3
22972: PUSH
22973: LD_INT 1
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: CALL_OW 12
22985: ARRAY
22986: ST_TO_ADDR
// if Crawls ( un ) then
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 318
22996: IFFALSE 23007
// ComWalk ( un ) ;
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_INT 5
23014: PPUSH
23015: CALL_OW 336
// end ;
23019: PPOPN 3
23021: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23022: LD_EXP 55
23026: PUSH
23027: LD_EXP 73
23031: AND
23032: PUSH
23033: LD_OWVAR 67
23037: PUSH
23038: LD_INT 3
23040: LESS
23041: AND
23042: IFFALSE 23061
23044: GO 23046
23046: DISABLE
// Difficulty := Difficulty + 1 ;
23047: LD_ADDR_OWVAR 67
23051: PUSH
23052: LD_OWVAR 67
23056: PUSH
23057: LD_INT 1
23059: PLUS
23060: ST_TO_ADDR
23061: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23062: LD_EXP 55
23066: PUSH
23067: LD_EXP 74
23071: AND
23072: IFFALSE 23175
23074: GO 23076
23076: DISABLE
23077: LD_INT 0
23079: PPUSH
// begin for i := 1 to 5 do
23080: LD_ADDR_VAR 0 1
23084: PUSH
23085: DOUBLE
23086: LD_INT 1
23088: DEC
23089: ST_TO_ADDR
23090: LD_INT 5
23092: PUSH
23093: FOR_TO
23094: IFFALSE 23173
// begin uc_nation := nation_nature ;
23096: LD_ADDR_OWVAR 21
23100: PUSH
23101: LD_INT 0
23103: ST_TO_ADDR
// uc_side := 0 ;
23104: LD_ADDR_OWVAR 20
23108: PUSH
23109: LD_INT 0
23111: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23112: LD_ADDR_OWVAR 29
23116: PUSH
23117: LD_INT 12
23119: PUSH
23120: LD_INT 12
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: ST_TO_ADDR
// hc_agressivity := 20 ;
23127: LD_ADDR_OWVAR 35
23131: PUSH
23132: LD_INT 20
23134: ST_TO_ADDR
// hc_class := class_tiger ;
23135: LD_ADDR_OWVAR 28
23139: PUSH
23140: LD_INT 14
23142: ST_TO_ADDR
// hc_gallery :=  ;
23143: LD_ADDR_OWVAR 33
23147: PUSH
23148: LD_STRING 
23150: ST_TO_ADDR
// hc_name :=  ;
23151: LD_ADDR_OWVAR 26
23155: PUSH
23156: LD_STRING 
23158: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23159: CALL_OW 44
23163: PPUSH
23164: LD_INT 0
23166: PPUSH
23167: CALL_OW 51
// end ;
23171: GO 23093
23173: POP
23174: POP
// end ;
23175: PPOPN 1
23177: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23178: LD_EXP 55
23182: PUSH
23183: LD_EXP 75
23187: AND
23188: IFFALSE 23197
23190: GO 23192
23192: DISABLE
// StreamSibBomb ;
23193: CALL 23198 0 0
23197: END
// export function StreamSibBomb ; var i , x , y ; begin
23198: LD_INT 0
23200: PPUSH
23201: PPUSH
23202: PPUSH
23203: PPUSH
// result := false ;
23204: LD_ADDR_VAR 0 1
23208: PUSH
23209: LD_INT 0
23211: ST_TO_ADDR
// for i := 1 to 16 do
23212: LD_ADDR_VAR 0 2
23216: PUSH
23217: DOUBLE
23218: LD_INT 1
23220: DEC
23221: ST_TO_ADDR
23222: LD_INT 16
23224: PUSH
23225: FOR_TO
23226: IFFALSE 23425
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23228: LD_ADDR_VAR 0 3
23232: PUSH
23233: LD_INT 10
23235: PUSH
23236: LD_INT 20
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 40
23244: PUSH
23245: LD_INT 50
23247: PUSH
23248: LD_INT 60
23250: PUSH
23251: LD_INT 70
23253: PUSH
23254: LD_INT 80
23256: PUSH
23257: LD_INT 90
23259: PUSH
23260: LD_INT 100
23262: PUSH
23263: LD_INT 110
23265: PUSH
23266: LD_INT 120
23268: PUSH
23269: LD_INT 130
23271: PUSH
23272: LD_INT 140
23274: PUSH
23275: LD_INT 150
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: PPUSH
23298: LD_INT 15
23300: PPUSH
23301: CALL_OW 12
23305: ARRAY
23306: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23307: LD_ADDR_VAR 0 4
23311: PUSH
23312: LD_INT 10
23314: PUSH
23315: LD_INT 20
23317: PUSH
23318: LD_INT 30
23320: PUSH
23321: LD_INT 40
23323: PUSH
23324: LD_INT 50
23326: PUSH
23327: LD_INT 60
23329: PUSH
23330: LD_INT 70
23332: PUSH
23333: LD_INT 80
23335: PUSH
23336: LD_INT 90
23338: PUSH
23339: LD_INT 100
23341: PUSH
23342: LD_INT 110
23344: PUSH
23345: LD_INT 120
23347: PUSH
23348: LD_INT 130
23350: PUSH
23351: LD_INT 140
23353: PUSH
23354: LD_INT 150
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_INT 15
23379: PPUSH
23380: CALL_OW 12
23384: ARRAY
23385: ST_TO_ADDR
// if ValidHex ( x , y ) then
23386: LD_VAR 0 3
23390: PPUSH
23391: LD_VAR 0 4
23395: PPUSH
23396: CALL_OW 488
23400: IFFALSE 23423
// begin result := [ x , y ] ;
23402: LD_ADDR_VAR 0 1
23406: PUSH
23407: LD_VAR 0 3
23411: PUSH
23412: LD_VAR 0 4
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: ST_TO_ADDR
// break ;
23421: GO 23425
// end ; end ;
23423: GO 23225
23425: POP
23426: POP
// if result then
23427: LD_VAR 0 1
23431: IFFALSE 23491
// begin ToLua ( playSibBomb() ) ;
23433: LD_STRING playSibBomb()
23435: PPUSH
23436: CALL_OW 559
// wait ( 0 0$14 ) ;
23440: LD_INT 490
23442: PPUSH
23443: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23447: LD_VAR 0 1
23451: PUSH
23452: LD_INT 1
23454: ARRAY
23455: PPUSH
23456: LD_VAR 0 1
23460: PUSH
23461: LD_INT 2
23463: ARRAY
23464: PPUSH
23465: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23469: LD_VAR 0 1
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: PPUSH
23478: LD_VAR 0 1
23482: PUSH
23483: LD_INT 2
23485: ARRAY
23486: PPUSH
23487: CALL_OW 429
// end ; end ;
23491: LD_VAR 0 1
23495: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23496: LD_EXP 55
23500: PUSH
23501: LD_EXP 77
23505: AND
23506: IFFALSE 23518
23508: GO 23510
23510: DISABLE
// YouLost (  ) ;
23511: LD_STRING 
23513: PPUSH
23514: CALL_OW 104
23518: END
// every 0 0$1 trigger StreamModeActive and sFog do
23519: LD_EXP 55
23523: PUSH
23524: LD_EXP 76
23528: AND
23529: IFFALSE 23543
23531: GO 23533
23533: DISABLE
// FogOff ( your_side ) ;
23534: LD_OWVAR 2
23538: PPUSH
23539: CALL_OW 344
23543: END
// every 0 0$1 trigger StreamModeActive and sSun do
23544: LD_EXP 55
23548: PUSH
23549: LD_EXP 78
23553: AND
23554: IFFALSE 23582
23556: GO 23558
23558: DISABLE
// begin solar_recharge_percent := 0 ;
23559: LD_ADDR_OWVAR 79
23563: PUSH
23564: LD_INT 0
23566: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23567: LD_INT 10500
23569: PPUSH
23570: CALL_OW 67
// solar_recharge_percent := 100 ;
23574: LD_ADDR_OWVAR 79
23578: PUSH
23579: LD_INT 100
23581: ST_TO_ADDR
// end ;
23582: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23583: LD_EXP 55
23587: PUSH
23588: LD_EXP 79
23592: AND
23593: IFFALSE 23832
23595: GO 23597
23597: DISABLE
23598: LD_INT 0
23600: PPUSH
23601: PPUSH
23602: PPUSH
// begin tmp := [ ] ;
23603: LD_ADDR_VAR 0 3
23607: PUSH
23608: EMPTY
23609: ST_TO_ADDR
// for i := 1 to 6 do
23610: LD_ADDR_VAR 0 1
23614: PUSH
23615: DOUBLE
23616: LD_INT 1
23618: DEC
23619: ST_TO_ADDR
23620: LD_INT 6
23622: PUSH
23623: FOR_TO
23624: IFFALSE 23729
// begin uc_nation := nation_nature ;
23626: LD_ADDR_OWVAR 21
23630: PUSH
23631: LD_INT 0
23633: ST_TO_ADDR
// uc_side := 0 ;
23634: LD_ADDR_OWVAR 20
23638: PUSH
23639: LD_INT 0
23641: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23642: LD_ADDR_OWVAR 29
23646: PUSH
23647: LD_INT 12
23649: PUSH
23650: LD_INT 12
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// hc_agressivity := 20 ;
23657: LD_ADDR_OWVAR 35
23661: PUSH
23662: LD_INT 20
23664: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23665: LD_ADDR_OWVAR 28
23669: PUSH
23670: LD_INT 17
23672: ST_TO_ADDR
// hc_gallery :=  ;
23673: LD_ADDR_OWVAR 33
23677: PUSH
23678: LD_STRING 
23680: ST_TO_ADDR
// hc_name :=  ;
23681: LD_ADDR_OWVAR 26
23685: PUSH
23686: LD_STRING 
23688: ST_TO_ADDR
// un := CreateHuman ;
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: CALL_OW 44
23698: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23699: LD_VAR 0 2
23703: PPUSH
23704: LD_INT 1
23706: PPUSH
23707: CALL_OW 51
// tmp := tmp ^ un ;
23711: LD_ADDR_VAR 0 3
23715: PUSH
23716: LD_VAR 0 3
23720: PUSH
23721: LD_VAR 0 2
23725: ADD
23726: ST_TO_ADDR
// end ;
23727: GO 23623
23729: POP
23730: POP
// repeat wait ( 0 0$1 ) ;
23731: LD_INT 35
23733: PPUSH
23734: CALL_OW 67
// for un in tmp do
23738: LD_ADDR_VAR 0 2
23742: PUSH
23743: LD_VAR 0 3
23747: PUSH
23748: FOR_IN
23749: IFFALSE 23823
// begin if IsDead ( un ) then
23751: LD_VAR 0 2
23755: PPUSH
23756: CALL_OW 301
23760: IFFALSE 23780
// begin tmp := tmp diff un ;
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_VAR 0 3
23771: PUSH
23772: LD_VAR 0 2
23776: DIFF
23777: ST_TO_ADDR
// continue ;
23778: GO 23748
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23780: LD_VAR 0 2
23784: PPUSH
23785: LD_INT 3
23787: PUSH
23788: LD_INT 22
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PPUSH
23802: CALL_OW 69
23806: PPUSH
23807: LD_VAR 0 2
23811: PPUSH
23812: CALL_OW 74
23816: PPUSH
23817: CALL_OW 115
// end ;
23821: GO 23748
23823: POP
23824: POP
// until not tmp ;
23825: LD_VAR 0 3
23829: NOT
23830: IFFALSE 23731
// end ;
23832: PPOPN 3
23834: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23835: LD_EXP 55
23839: PUSH
23840: LD_EXP 80
23844: AND
23845: IFFALSE 23899
23847: GO 23849
23849: DISABLE
// begin ToLua ( displayTroll(); ) ;
23850: LD_STRING displayTroll();
23852: PPUSH
23853: CALL_OW 559
// wait ( 3 3$00 ) ;
23857: LD_INT 6300
23859: PPUSH
23860: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23864: LD_STRING hideTroll();
23866: PPUSH
23867: CALL_OW 559
// wait ( 1 1$00 ) ;
23871: LD_INT 2100
23873: PPUSH
23874: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23878: LD_STRING displayTroll();
23880: PPUSH
23881: CALL_OW 559
// wait ( 1 1$00 ) ;
23885: LD_INT 2100
23887: PPUSH
23888: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23892: LD_STRING hideTroll();
23894: PPUSH
23895: CALL_OW 559
// end ;
23899: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23900: LD_EXP 55
23904: PUSH
23905: LD_EXP 81
23909: AND
23910: IFFALSE 23973
23912: GO 23914
23914: DISABLE
23915: LD_INT 0
23917: PPUSH
// begin p := 0 ;
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_INT 0
23925: ST_TO_ADDR
// repeat game_speed := 1 ;
23926: LD_ADDR_OWVAR 65
23930: PUSH
23931: LD_INT 1
23933: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23934: LD_INT 35
23936: PPUSH
23937: CALL_OW 67
// p := p + 1 ;
23941: LD_ADDR_VAR 0 1
23945: PUSH
23946: LD_VAR 0 1
23950: PUSH
23951: LD_INT 1
23953: PLUS
23954: ST_TO_ADDR
// until p >= 60 ;
23955: LD_VAR 0 1
23959: PUSH
23960: LD_INT 60
23962: GREATEREQUAL
23963: IFFALSE 23926
// game_speed := 4 ;
23965: LD_ADDR_OWVAR 65
23969: PUSH
23970: LD_INT 4
23972: ST_TO_ADDR
// end ;
23973: PPOPN 1
23975: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23976: LD_EXP 55
23980: PUSH
23981: LD_EXP 82
23985: AND
23986: IFFALSE 24132
23988: GO 23990
23990: DISABLE
23991: LD_INT 0
23993: PPUSH
23994: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23995: LD_ADDR_VAR 0 1
23999: PUSH
24000: LD_INT 22
24002: PUSH
24003: LD_OWVAR 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: LD_INT 30
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 30
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PPUSH
24044: CALL_OW 69
24048: ST_TO_ADDR
// if not depot then
24049: LD_VAR 0 1
24053: NOT
24054: IFFALSE 24058
// exit ;
24056: GO 24132
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24058: LD_ADDR_VAR 0 2
24062: PUSH
24063: LD_VAR 0 1
24067: PUSH
24068: LD_INT 1
24070: PPUSH
24071: LD_VAR 0 1
24075: PPUSH
24076: CALL_OW 12
24080: ARRAY
24081: PPUSH
24082: CALL_OW 274
24086: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24087: LD_VAR 0 2
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: LD_INT 0
24097: PPUSH
24098: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24102: LD_VAR 0 2
24106: PPUSH
24107: LD_INT 2
24109: PPUSH
24110: LD_INT 0
24112: PPUSH
24113: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24117: LD_VAR 0 2
24121: PPUSH
24122: LD_INT 3
24124: PPUSH
24125: LD_INT 0
24127: PPUSH
24128: CALL_OW 277
// end ;
24132: PPOPN 2
24134: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24135: LD_EXP 55
24139: PUSH
24140: LD_EXP 83
24144: AND
24145: IFFALSE 24242
24147: GO 24149
24149: DISABLE
24150: LD_INT 0
24152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24153: LD_ADDR_VAR 0 1
24157: PUSH
24158: LD_INT 22
24160: PUSH
24161: LD_OWVAR 2
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 21
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 3
24182: PUSH
24183: LD_INT 23
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: PPUSH
24202: CALL_OW 69
24206: ST_TO_ADDR
// if not tmp then
24207: LD_VAR 0 1
24211: NOT
24212: IFFALSE 24216
// exit ;
24214: GO 24242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24216: LD_VAR 0 1
24220: PUSH
24221: LD_INT 1
24223: PPUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 12
24233: ARRAY
24234: PPUSH
24235: LD_INT 200
24237: PPUSH
24238: CALL_OW 234
// end ;
24242: PPOPN 1
24244: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24245: LD_EXP 55
24249: PUSH
24250: LD_EXP 84
24254: AND
24255: IFFALSE 24334
24257: GO 24259
24259: DISABLE
24260: LD_INT 0
24262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24263: LD_ADDR_VAR 0 1
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_OWVAR 2
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 21
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PPUSH
24294: CALL_OW 69
24298: ST_TO_ADDR
// if not tmp then
24299: LD_VAR 0 1
24303: NOT
24304: IFFALSE 24308
// exit ;
24306: GO 24334
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24308: LD_VAR 0 1
24312: PUSH
24313: LD_INT 1
24315: PPUSH
24316: LD_VAR 0 1
24320: PPUSH
24321: CALL_OW 12
24325: ARRAY
24326: PPUSH
24327: LD_INT 60
24329: PPUSH
24330: CALL_OW 234
// end ;
24334: PPOPN 1
24336: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24337: LD_EXP 55
24341: PUSH
24342: LD_EXP 85
24346: AND
24347: IFFALSE 24446
24349: GO 24351
24351: DISABLE
24352: LD_INT 0
24354: PPUSH
24355: PPUSH
// begin enable ;
24356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24357: LD_ADDR_VAR 0 1
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_OWVAR 2
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 61
24376: PUSH
24377: EMPTY
24378: LIST
24379: PUSH
24380: LD_INT 33
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: PPUSH
24395: CALL_OW 69
24399: ST_TO_ADDR
// if not tmp then
24400: LD_VAR 0 1
24404: NOT
24405: IFFALSE 24409
// exit ;
24407: GO 24446
// for i in tmp do
24409: LD_ADDR_VAR 0 2
24413: PUSH
24414: LD_VAR 0 1
24418: PUSH
24419: FOR_IN
24420: IFFALSE 24444
// if IsControledBy ( i ) then
24422: LD_VAR 0 2
24426: PPUSH
24427: CALL_OW 312
24431: IFFALSE 24442
// ComUnlink ( i ) ;
24433: LD_VAR 0 2
24437: PPUSH
24438: CALL_OW 136
24442: GO 24419
24444: POP
24445: POP
// end ;
24446: PPOPN 2
24448: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24449: LD_EXP 55
24453: PUSH
24454: LD_EXP 86
24458: AND
24459: IFFALSE 24599
24461: GO 24463
24463: DISABLE
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
// begin ToLua ( displayPowell(); ) ;
24468: LD_STRING displayPowell();
24470: PPUSH
24471: CALL_OW 559
// uc_side := 0 ;
24475: LD_ADDR_OWVAR 20
24479: PUSH
24480: LD_INT 0
24482: ST_TO_ADDR
// uc_nation := 2 ;
24483: LD_ADDR_OWVAR 21
24487: PUSH
24488: LD_INT 2
24490: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24491: LD_ADDR_OWVAR 37
24495: PUSH
24496: LD_INT 14
24498: ST_TO_ADDR
// vc_engine := engine_siberite ;
24499: LD_ADDR_OWVAR 39
24503: PUSH
24504: LD_INT 3
24506: ST_TO_ADDR
// vc_control := control_apeman ;
24507: LD_ADDR_OWVAR 38
24511: PUSH
24512: LD_INT 5
24514: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24515: LD_ADDR_OWVAR 40
24519: PUSH
24520: LD_INT 29
24522: ST_TO_ADDR
// un := CreateVehicle ;
24523: LD_ADDR_VAR 0 2
24527: PUSH
24528: CALL_OW 45
24532: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24533: LD_VAR 0 2
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24545: LD_INT 35
24547: PPUSH
24548: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: LD_INT 22
24559: PUSH
24560: LD_OWVAR 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PPUSH
24569: CALL_OW 69
24573: PPUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: CALL_OW 74
24583: PPUSH
24584: CALL_OW 115
// until IsDead ( un ) ;
24588: LD_VAR 0 2
24592: PPUSH
24593: CALL_OW 301
24597: IFFALSE 24545
// end ;
24599: PPOPN 2
24601: END
// every 0 0$1 trigger StreamModeActive and sStu do
24602: LD_EXP 55
24606: PUSH
24607: LD_EXP 94
24611: AND
24612: IFFALSE 24628
24614: GO 24616
24616: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24617: LD_STRING displayStucuk();
24619: PPUSH
24620: CALL_OW 559
// ResetFog ;
24624: CALL_OW 335
// end ;
24628: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24629: LD_EXP 55
24633: PUSH
24634: LD_EXP 87
24638: AND
24639: IFFALSE 24780
24641: GO 24643
24643: DISABLE
24644: LD_INT 0
24646: PPUSH
24647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_OWVAR 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 21
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PPUSH
24679: CALL_OW 69
24683: ST_TO_ADDR
// if not tmp then
24684: LD_VAR 0 2
24688: NOT
24689: IFFALSE 24693
// exit ;
24691: GO 24780
// un := tmp [ rand ( 1 , tmp ) ] ;
24693: LD_ADDR_VAR 0 1
24697: PUSH
24698: LD_VAR 0 2
24702: PUSH
24703: LD_INT 1
24705: PPUSH
24706: LD_VAR 0 2
24710: PPUSH
24711: CALL_OW 12
24715: ARRAY
24716: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24717: LD_VAR 0 1
24721: PPUSH
24722: LD_INT 0
24724: PPUSH
24725: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24729: LD_VAR 0 1
24733: PPUSH
24734: LD_OWVAR 3
24738: PUSH
24739: LD_VAR 0 1
24743: DIFF
24744: PPUSH
24745: LD_VAR 0 1
24749: PPUSH
24750: CALL_OW 74
24754: PPUSH
24755: CALL_OW 115
// wait ( 0 0$20 ) ;
24759: LD_INT 700
24761: PPUSH
24762: CALL_OW 67
// SetSide ( un , your_side ) ;
24766: LD_VAR 0 1
24770: PPUSH
24771: LD_OWVAR 2
24775: PPUSH
24776: CALL_OW 235
// end ;
24780: PPOPN 2
24782: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24783: LD_EXP 55
24787: PUSH
24788: LD_EXP 88
24792: AND
24793: IFFALSE 24899
24795: GO 24797
24797: DISABLE
24798: LD_INT 0
24800: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24801: LD_ADDR_VAR 0 1
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_OWVAR 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 30
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PPUSH
24850: CALL_OW 69
24854: ST_TO_ADDR
// if not depot then
24855: LD_VAR 0 1
24859: NOT
24860: IFFALSE 24864
// exit ;
24862: GO 24899
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24864: LD_VAR 0 1
24868: PUSH
24869: LD_INT 1
24871: ARRAY
24872: PPUSH
24873: CALL_OW 250
24877: PPUSH
24878: LD_VAR 0 1
24882: PUSH
24883: LD_INT 1
24885: ARRAY
24886: PPUSH
24887: CALL_OW 251
24891: PPUSH
24892: LD_INT 70
24894: PPUSH
24895: CALL_OW 495
// end ;
24899: PPOPN 1
24901: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24902: LD_EXP 55
24906: PUSH
24907: LD_EXP 89
24911: AND
24912: IFFALSE 25123
24914: GO 24916
24916: DISABLE
24917: LD_INT 0
24919: PPUSH
24920: PPUSH
24921: PPUSH
24922: PPUSH
24923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24924: LD_ADDR_VAR 0 5
24928: PUSH
24929: LD_INT 22
24931: PUSH
24932: LD_OWVAR 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 21
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PPUSH
24955: CALL_OW 69
24959: ST_TO_ADDR
// if not tmp then
24960: LD_VAR 0 5
24964: NOT
24965: IFFALSE 24969
// exit ;
24967: GO 25123
// for i in tmp do
24969: LD_ADDR_VAR 0 1
24973: PUSH
24974: LD_VAR 0 5
24978: PUSH
24979: FOR_IN
24980: IFFALSE 25121
// begin d := rand ( 0 , 5 ) ;
24982: LD_ADDR_VAR 0 4
24986: PUSH
24987: LD_INT 0
24989: PPUSH
24990: LD_INT 5
24992: PPUSH
24993: CALL_OW 12
24997: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24998: LD_ADDR_VAR 0 2
25002: PUSH
25003: LD_VAR 0 1
25007: PPUSH
25008: CALL_OW 250
25012: PPUSH
25013: LD_VAR 0 4
25017: PPUSH
25018: LD_INT 3
25020: PPUSH
25021: LD_INT 12
25023: PPUSH
25024: CALL_OW 12
25028: PPUSH
25029: CALL_OW 272
25033: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 251
25048: PPUSH
25049: LD_VAR 0 4
25053: PPUSH
25054: LD_INT 3
25056: PPUSH
25057: LD_INT 12
25059: PPUSH
25060: CALL_OW 12
25064: PPUSH
25065: CALL_OW 273
25069: ST_TO_ADDR
// if ValidHex ( x , y ) then
25070: LD_VAR 0 2
25074: PPUSH
25075: LD_VAR 0 3
25079: PPUSH
25080: CALL_OW 488
25084: IFFALSE 25119
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: LD_INT 3
25103: PPUSH
25104: LD_INT 6
25106: PPUSH
25107: CALL_OW 12
25111: PPUSH
25112: LD_INT 1
25114: PPUSH
25115: CALL_OW 483
// end ;
25119: GO 24979
25121: POP
25122: POP
// end ;
25123: PPOPN 5
25125: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25126: LD_EXP 55
25130: PUSH
25131: LD_EXP 90
25135: AND
25136: IFFALSE 25230
25138: GO 25140
25140: DISABLE
25141: LD_INT 0
25143: PPUSH
25144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25145: LD_ADDR_VAR 0 2
25149: PUSH
25150: LD_INT 22
25152: PUSH
25153: LD_OWVAR 2
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 32
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 21
25174: PUSH
25175: LD_INT 2
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: LIST
25186: PPUSH
25187: CALL_OW 69
25191: ST_TO_ADDR
// if not tmp then
25192: LD_VAR 0 2
25196: NOT
25197: IFFALSE 25201
// exit ;
25199: GO 25230
// for i in tmp do
25201: LD_ADDR_VAR 0 1
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25228
// SetFuel ( i , 0 ) ;
25214: LD_VAR 0 1
25218: PPUSH
25219: LD_INT 0
25221: PPUSH
25222: CALL_OW 240
25226: GO 25211
25228: POP
25229: POP
// end ;
25230: PPOPN 2
25232: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25233: LD_EXP 55
25237: PUSH
25238: LD_EXP 91
25242: AND
25243: IFFALSE 25309
25245: GO 25247
25247: DISABLE
25248: LD_INT 0
25250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25251: LD_ADDR_VAR 0 1
25255: PUSH
25256: LD_INT 22
25258: PUSH
25259: LD_OWVAR 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 30
25270: PUSH
25271: LD_INT 29
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PPUSH
25282: CALL_OW 69
25286: ST_TO_ADDR
// if not tmp then
25287: LD_VAR 0 1
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25309
// DestroyUnit ( tmp [ 1 ] ) ;
25296: LD_VAR 0 1
25300: PUSH
25301: LD_INT 1
25303: ARRAY
25304: PPUSH
25305: CALL_OW 65
// end ;
25309: PPOPN 1
25311: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25312: LD_EXP 55
25316: PUSH
25317: LD_EXP 93
25321: AND
25322: IFFALSE 25451
25324: GO 25326
25326: DISABLE
25327: LD_INT 0
25329: PPUSH
// begin uc_side := 0 ;
25330: LD_ADDR_OWVAR 20
25334: PUSH
25335: LD_INT 0
25337: ST_TO_ADDR
// uc_nation := nation_arabian ;
25338: LD_ADDR_OWVAR 21
25342: PUSH
25343: LD_INT 2
25345: ST_TO_ADDR
// hc_gallery :=  ;
25346: LD_ADDR_OWVAR 33
25350: PUSH
25351: LD_STRING 
25353: ST_TO_ADDR
// hc_name :=  ;
25354: LD_ADDR_OWVAR 26
25358: PUSH
25359: LD_STRING 
25361: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25362: LD_INT 1
25364: PPUSH
25365: LD_INT 11
25367: PPUSH
25368: LD_INT 10
25370: PPUSH
25371: CALL_OW 380
// un := CreateHuman ;
25375: LD_ADDR_VAR 0 1
25379: PUSH
25380: CALL_OW 44
25384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25385: LD_VAR 0 1
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25397: LD_INT 35
25399: PPUSH
25400: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25404: LD_VAR 0 1
25408: PPUSH
25409: LD_INT 22
25411: PUSH
25412: LD_OWVAR 2
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PPUSH
25421: CALL_OW 69
25425: PPUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 74
25435: PPUSH
25436: CALL_OW 115
// until IsDead ( un ) ;
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 301
25449: IFFALSE 25397
// end ;
25451: PPOPN 1
25453: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25454: LD_EXP 55
25458: PUSH
25459: LD_EXP 95
25463: AND
25464: IFFALSE 25476
25466: GO 25468
25468: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25469: LD_STRING earthquake(getX(game), 0, 32)
25471: PPUSH
25472: CALL_OW 559
25476: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25477: LD_EXP 55
25481: PUSH
25482: LD_EXP 96
25486: AND
25487: IFFALSE 25578
25489: GO 25491
25491: DISABLE
25492: LD_INT 0
25494: PPUSH
// begin enable ;
25495: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25496: LD_ADDR_VAR 0 1
25500: PUSH
25501: LD_INT 22
25503: PUSH
25504: LD_OWVAR 2
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 21
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 33
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: PPUSH
25538: CALL_OW 69
25542: ST_TO_ADDR
// if not tmp then
25543: LD_VAR 0 1
25547: NOT
25548: IFFALSE 25552
// exit ;
25550: GO 25578
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25552: LD_VAR 0 1
25556: PUSH
25557: LD_INT 1
25559: PPUSH
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 12
25569: ARRAY
25570: PPUSH
25571: LD_INT 1
25573: PPUSH
25574: CALL_OW 234
// end ;
25578: PPOPN 1
25580: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25581: LD_EXP 55
25585: PUSH
25586: LD_EXP 97
25590: AND
25591: IFFALSE 25732
25593: GO 25595
25595: DISABLE
25596: LD_INT 0
25598: PPUSH
25599: PPUSH
25600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25601: LD_ADDR_VAR 0 3
25605: PUSH
25606: LD_INT 22
25608: PUSH
25609: LD_OWVAR 2
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 25
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 69
25636: ST_TO_ADDR
// if not tmp then
25637: LD_VAR 0 3
25641: NOT
25642: IFFALSE 25646
// exit ;
25644: GO 25732
// un := tmp [ rand ( 1 , tmp ) ] ;
25646: LD_ADDR_VAR 0 2
25650: PUSH
25651: LD_VAR 0 3
25655: PUSH
25656: LD_INT 1
25658: PPUSH
25659: LD_VAR 0 3
25663: PPUSH
25664: CALL_OW 12
25668: ARRAY
25669: ST_TO_ADDR
// if Crawls ( un ) then
25670: LD_VAR 0 2
25674: PPUSH
25675: CALL_OW 318
25679: IFFALSE 25690
// ComWalk ( un ) ;
25681: LD_VAR 0 2
25685: PPUSH
25686: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25690: LD_VAR 0 2
25694: PPUSH
25695: LD_INT 9
25697: PPUSH
25698: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25702: LD_INT 28
25704: PPUSH
25705: LD_OWVAR 2
25709: PPUSH
25710: LD_INT 2
25712: PPUSH
25713: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25717: LD_INT 29
25719: PPUSH
25720: LD_OWVAR 2
25724: PPUSH
25725: LD_INT 2
25727: PPUSH
25728: CALL_OW 322
// end ;
25732: PPOPN 3
25734: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25735: LD_EXP 55
25739: PUSH
25740: LD_EXP 98
25744: AND
25745: IFFALSE 25856
25747: GO 25749
25749: DISABLE
25750: LD_INT 0
25752: PPUSH
25753: PPUSH
25754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25755: LD_ADDR_VAR 0 3
25759: PUSH
25760: LD_INT 22
25762: PUSH
25763: LD_OWVAR 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 25
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 69
25790: ST_TO_ADDR
// if not tmp then
25791: LD_VAR 0 3
25795: NOT
25796: IFFALSE 25800
// exit ;
25798: GO 25856
// un := tmp [ rand ( 1 , tmp ) ] ;
25800: LD_ADDR_VAR 0 2
25804: PUSH
25805: LD_VAR 0 3
25809: PUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_VAR 0 3
25817: PPUSH
25818: CALL_OW 12
25822: ARRAY
25823: ST_TO_ADDR
// if Crawls ( un ) then
25824: LD_VAR 0 2
25828: PPUSH
25829: CALL_OW 318
25833: IFFALSE 25844
// ComWalk ( un ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25844: LD_VAR 0 2
25848: PPUSH
25849: LD_INT 8
25851: PPUSH
25852: CALL_OW 336
// end ;
25856: PPOPN 3
25858: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25859: LD_EXP 55
25863: PUSH
25864: LD_EXP 99
25868: AND
25869: IFFALSE 26013
25871: GO 25873
25873: DISABLE
25874: LD_INT 0
25876: PPUSH
25877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25878: LD_ADDR_VAR 0 2
25882: PUSH
25883: LD_INT 22
25885: PUSH
25886: LD_OWVAR 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 21
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 34
25910: PUSH
25911: LD_INT 12
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 34
25920: PUSH
25921: LD_INT 51
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 32
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 2
25958: NOT
25959: IFFALSE 25963
// exit ;
25961: GO 26013
// for i in tmp do
25963: LD_ADDR_VAR 0 1
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: FOR_IN
25974: IFFALSE 26011
// if GetCargo ( i , mat_artifact ) = 0 then
25976: LD_VAR 0 1
25980: PPUSH
25981: LD_INT 4
25983: PPUSH
25984: CALL_OW 289
25988: PUSH
25989: LD_INT 0
25991: EQUAL
25992: IFFALSE 26009
// SetCargo ( i , mat_siberit , 100 ) ;
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_INT 3
26001: PPUSH
26002: LD_INT 100
26004: PPUSH
26005: CALL_OW 290
26009: GO 25973
26011: POP
26012: POP
// end ;
26013: PPOPN 2
26015: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26016: LD_EXP 55
26020: PUSH
26021: LD_EXP 100
26025: AND
26026: IFFALSE 26209
26028: GO 26030
26030: DISABLE
26031: LD_INT 0
26033: PPUSH
26034: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26035: LD_ADDR_VAR 0 2
26039: PUSH
26040: LD_INT 22
26042: PUSH
26043: LD_OWVAR 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 69
26056: ST_TO_ADDR
// if not tmp then
26057: LD_VAR 0 2
26061: NOT
26062: IFFALSE 26066
// exit ;
26064: GO 26209
// for i := 1 to 2 do
26066: LD_ADDR_VAR 0 1
26070: PUSH
26071: DOUBLE
26072: LD_INT 1
26074: DEC
26075: ST_TO_ADDR
26076: LD_INT 2
26078: PUSH
26079: FOR_TO
26080: IFFALSE 26207
// begin uc_side := your_side ;
26082: LD_ADDR_OWVAR 20
26086: PUSH
26087: LD_OWVAR 2
26091: ST_TO_ADDR
// uc_nation := nation_american ;
26092: LD_ADDR_OWVAR 21
26096: PUSH
26097: LD_INT 1
26099: ST_TO_ADDR
// vc_chassis := us_morphling ;
26100: LD_ADDR_OWVAR 37
26104: PUSH
26105: LD_INT 5
26107: ST_TO_ADDR
// vc_engine := engine_siberite ;
26108: LD_ADDR_OWVAR 39
26112: PUSH
26113: LD_INT 3
26115: ST_TO_ADDR
// vc_control := control_computer ;
26116: LD_ADDR_OWVAR 38
26120: PUSH
26121: LD_INT 3
26123: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26124: LD_ADDR_OWVAR 40
26128: PUSH
26129: LD_INT 10
26131: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26132: LD_VAR 0 2
26136: PUSH
26137: LD_INT 1
26139: ARRAY
26140: PPUSH
26141: CALL_OW 310
26145: NOT
26146: IFFALSE 26193
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26148: CALL_OW 45
26152: PPUSH
26153: LD_VAR 0 2
26157: PUSH
26158: LD_INT 1
26160: ARRAY
26161: PPUSH
26162: CALL_OW 250
26166: PPUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_INT 1
26174: ARRAY
26175: PPUSH
26176: CALL_OW 251
26180: PPUSH
26181: LD_INT 12
26183: PPUSH
26184: LD_INT 1
26186: PPUSH
26187: CALL_OW 50
26191: GO 26205
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26193: CALL_OW 45
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: CALL_OW 51
// end ;
26205: GO 26079
26207: POP
26208: POP
// end ;
26209: PPOPN 2
26211: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26212: LD_EXP 55
26216: PUSH
26217: LD_EXP 101
26221: AND
26222: IFFALSE 26444
26224: GO 26226
26226: DISABLE
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26235: LD_ADDR_VAR 0 6
26239: PUSH
26240: LD_INT 22
26242: PUSH
26243: LD_OWVAR 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 21
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 3
26264: PUSH
26265: LD_INT 23
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL_OW 69
26288: ST_TO_ADDR
// if not tmp then
26289: LD_VAR 0 6
26293: NOT
26294: IFFALSE 26298
// exit ;
26296: GO 26444
// s1 := rand ( 1 , 4 ) ;
26298: LD_ADDR_VAR 0 2
26302: PUSH
26303: LD_INT 1
26305: PPUSH
26306: LD_INT 4
26308: PPUSH
26309: CALL_OW 12
26313: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26314: LD_ADDR_VAR 0 4
26318: PUSH
26319: LD_VAR 0 6
26323: PUSH
26324: LD_INT 1
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 2
26332: PPUSH
26333: CALL_OW 259
26337: ST_TO_ADDR
// if s1 = 1 then
26338: LD_VAR 0 2
26342: PUSH
26343: LD_INT 1
26345: EQUAL
26346: IFFALSE 26366
// s2 := rand ( 2 , 4 ) else
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_INT 2
26355: PPUSH
26356: LD_INT 4
26358: PPUSH
26359: CALL_OW 12
26363: ST_TO_ADDR
26364: GO 26374
// s2 := 1 ;
26366: LD_ADDR_VAR 0 3
26370: PUSH
26371: LD_INT 1
26373: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26374: LD_ADDR_VAR 0 5
26378: PUSH
26379: LD_VAR 0 6
26383: PUSH
26384: LD_INT 1
26386: ARRAY
26387: PPUSH
26388: LD_VAR 0 3
26392: PPUSH
26393: CALL_OW 259
26397: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26398: LD_VAR 0 6
26402: PUSH
26403: LD_INT 1
26405: ARRAY
26406: PPUSH
26407: LD_VAR 0 2
26411: PPUSH
26412: LD_VAR 0 5
26416: PPUSH
26417: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26421: LD_VAR 0 6
26425: PUSH
26426: LD_INT 1
26428: ARRAY
26429: PPUSH
26430: LD_VAR 0 3
26434: PPUSH
26435: LD_VAR 0 4
26439: PPUSH
26440: CALL_OW 237
// end ;
26444: PPOPN 6
26446: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26447: LD_EXP 55
26451: PUSH
26452: LD_EXP 102
26456: AND
26457: IFFALSE 26536
26459: GO 26461
26461: DISABLE
26462: LD_INT 0
26464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26465: LD_ADDR_VAR 0 1
26469: PUSH
26470: LD_INT 22
26472: PUSH
26473: LD_OWVAR 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 30
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PPUSH
26496: CALL_OW 69
26500: ST_TO_ADDR
// if not tmp then
26501: LD_VAR 0 1
26505: NOT
26506: IFFALSE 26510
// exit ;
26508: GO 26536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26510: LD_VAR 0 1
26514: PUSH
26515: LD_INT 1
26517: PPUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 12
26527: ARRAY
26528: PPUSH
26529: LD_INT 1
26531: PPUSH
26532: CALL_OW 234
// end ;
26536: PPOPN 1
26538: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26539: LD_EXP 55
26543: PUSH
26544: LD_EXP 103
26548: AND
26549: IFFALSE 26661
26551: GO 26553
26553: DISABLE
26554: LD_INT 0
26556: PPUSH
26557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_INT 22
26565: PUSH
26566: LD_OWVAR 2
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 30
26580: PUSH
26581: LD_INT 27
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 30
26590: PUSH
26591: LD_INT 26
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 30
26600: PUSH
26601: LD_INT 28
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PPUSH
26618: CALL_OW 69
26622: ST_TO_ADDR
// if not tmp then
26623: LD_VAR 0 2
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26661
// for i in tmp do
26632: LD_ADDR_VAR 0 1
26636: PUSH
26637: LD_VAR 0 2
26641: PUSH
26642: FOR_IN
26643: IFFALSE 26659
// SetLives ( i , 1 ) ;
26645: LD_VAR 0 1
26649: PPUSH
26650: LD_INT 1
26652: PPUSH
26653: CALL_OW 234
26657: GO 26642
26659: POP
26660: POP
// end ;
26661: PPOPN 2
26663: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26664: LD_EXP 55
26668: PUSH
26669: LD_EXP 104
26673: AND
26674: IFFALSE 26948
26676: GO 26678
26678: DISABLE
26679: LD_INT 0
26681: PPUSH
26682: PPUSH
26683: PPUSH
// begin i := rand ( 1 , 7 ) ;
26684: LD_ADDR_VAR 0 1
26688: PUSH
26689: LD_INT 1
26691: PPUSH
26692: LD_INT 7
26694: PPUSH
26695: CALL_OW 12
26699: ST_TO_ADDR
// case i of 1 :
26700: LD_VAR 0 1
26704: PUSH
26705: LD_INT 1
26707: DOUBLE
26708: EQUAL
26709: IFTRUE 26713
26711: GO 26723
26713: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26714: LD_STRING earthquake(getX(game), 0, 32)
26716: PPUSH
26717: CALL_OW 559
26721: GO 26948
26723: LD_INT 2
26725: DOUBLE
26726: EQUAL
26727: IFTRUE 26731
26729: GO 26745
26731: POP
// begin ToLua ( displayStucuk(); ) ;
26732: LD_STRING displayStucuk();
26734: PPUSH
26735: CALL_OW 559
// ResetFog ;
26739: CALL_OW 335
// end ; 3 :
26743: GO 26948
26745: LD_INT 3
26747: DOUBLE
26748: EQUAL
26749: IFTRUE 26753
26751: GO 26857
26753: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26754: LD_ADDR_VAR 0 2
26758: PUSH
26759: LD_INT 22
26761: PUSH
26762: LD_OWVAR 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 25
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 69
26789: ST_TO_ADDR
// if not tmp then
26790: LD_VAR 0 2
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26948
// un := tmp [ rand ( 1 , tmp ) ] ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: LD_VAR 0 2
26808: PUSH
26809: LD_INT 1
26811: PPUSH
26812: LD_VAR 0 2
26816: PPUSH
26817: CALL_OW 12
26821: ARRAY
26822: ST_TO_ADDR
// if Crawls ( un ) then
26823: LD_VAR 0 3
26827: PPUSH
26828: CALL_OW 318
26832: IFFALSE 26843
// ComWalk ( un ) ;
26834: LD_VAR 0 3
26838: PPUSH
26839: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26843: LD_VAR 0 3
26847: PPUSH
26848: LD_INT 8
26850: PPUSH
26851: CALL_OW 336
// end ; 4 :
26855: GO 26948
26857: LD_INT 4
26859: DOUBLE
26860: EQUAL
26861: IFTRUE 26865
26863: GO 26926
26865: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26866: LD_ADDR_VAR 0 2
26870: PUSH
26871: LD_INT 22
26873: PUSH
26874: LD_OWVAR 2
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 30
26885: PUSH
26886: LD_INT 29
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PPUSH
26897: CALL_OW 69
26901: ST_TO_ADDR
// if not tmp then
26902: LD_VAR 0 2
26906: NOT
26907: IFFALSE 26911
// exit ;
26909: GO 26948
// DestroyUnit ( tmp [ 1 ] ) ;
26911: LD_VAR 0 2
26915: PUSH
26916: LD_INT 1
26918: ARRAY
26919: PPUSH
26920: CALL_OW 65
// end ; 5 .. 7 :
26924: GO 26948
26926: LD_INT 5
26928: DOUBLE
26929: GREATEREQUAL
26930: IFFALSE 26938
26932: LD_INT 7
26934: DOUBLE
26935: LESSEQUAL
26936: IFTRUE 26940
26938: GO 26947
26940: POP
// StreamSibBomb ; end ;
26941: CALL 23198 0 0
26945: GO 26948
26947: POP
// end ;
26948: PPOPN 3
26950: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26951: LD_EXP 55
26955: PUSH
26956: LD_EXP 105
26960: AND
26961: IFFALSE 27117
26963: GO 26965
26965: DISABLE
26966: LD_INT 0
26968: PPUSH
26969: PPUSH
26970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: LD_INT 81
26978: PUSH
26979: LD_OWVAR 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 21
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 21
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PPUSH
27020: CALL_OW 69
27024: ST_TO_ADDR
// if not tmp then
27025: LD_VAR 0 2
27029: NOT
27030: IFFALSE 27034
// exit ;
27032: GO 27117
// p := 0 ;
27034: LD_ADDR_VAR 0 3
27038: PUSH
27039: LD_INT 0
27041: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27042: LD_INT 35
27044: PPUSH
27045: CALL_OW 67
// p := p + 1 ;
27049: LD_ADDR_VAR 0 3
27053: PUSH
27054: LD_VAR 0 3
27058: PUSH
27059: LD_INT 1
27061: PLUS
27062: ST_TO_ADDR
// for i in tmp do
27063: LD_ADDR_VAR 0 1
27067: PUSH
27068: LD_VAR 0 2
27072: PUSH
27073: FOR_IN
27074: IFFALSE 27105
// if GetLives ( i ) < 1000 then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 256
27085: PUSH
27086: LD_INT 1000
27088: LESS
27089: IFFALSE 27103
// SetLives ( i , 1000 ) ;
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_INT 1000
27098: PPUSH
27099: CALL_OW 234
27103: GO 27073
27105: POP
27106: POP
// until p > 20 ;
27107: LD_VAR 0 3
27111: PUSH
27112: LD_INT 20
27114: GREATER
27115: IFFALSE 27042
// end ;
27117: PPOPN 3
27119: END
// every 0 0$1 trigger StreamModeActive and sTime do
27120: LD_EXP 55
27124: PUSH
27125: LD_EXP 106
27129: AND
27130: IFFALSE 27165
27132: GO 27134
27134: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27135: LD_INT 28
27137: PPUSH
27138: LD_OWVAR 2
27142: PPUSH
27143: LD_INT 2
27145: PPUSH
27146: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27150: LD_INT 30
27152: PPUSH
27153: LD_OWVAR 2
27157: PPUSH
27158: LD_INT 2
27160: PPUSH
27161: CALL_OW 322
// end ;
27165: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27166: LD_EXP 55
27170: PUSH
27171: LD_EXP 107
27175: AND
27176: IFFALSE 27297
27178: GO 27180
27180: DISABLE
27181: LD_INT 0
27183: PPUSH
27184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27185: LD_ADDR_VAR 0 2
27189: PUSH
27190: LD_INT 22
27192: PUSH
27193: LD_OWVAR 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 21
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 3
27214: PUSH
27215: LD_INT 23
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: PPUSH
27234: CALL_OW 69
27238: ST_TO_ADDR
// if not tmp then
27239: LD_VAR 0 2
27243: NOT
27244: IFFALSE 27248
// exit ;
27246: GO 27297
// for i in tmp do
27248: LD_ADDR_VAR 0 1
27252: PUSH
27253: LD_VAR 0 2
27257: PUSH
27258: FOR_IN
27259: IFFALSE 27295
// begin if Crawls ( i ) then
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL_OW 318
27270: IFFALSE 27281
// ComWalk ( i ) ;
27272: LD_VAR 0 1
27276: PPUSH
27277: CALL_OW 138
// SetClass ( i , 2 ) ;
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_INT 2
27288: PPUSH
27289: CALL_OW 336
// end ;
27293: GO 27258
27295: POP
27296: POP
// end ;
27297: PPOPN 2
27299: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27300: LD_EXP 55
27304: PUSH
27305: LD_EXP 108
27309: AND
27310: IFFALSE 27591
27312: GO 27314
27314: DISABLE
27315: LD_INT 0
27317: PPUSH
27318: PPUSH
27319: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27320: LD_OWVAR 2
27324: PPUSH
27325: LD_INT 9
27327: PPUSH
27328: LD_INT 1
27330: PPUSH
27331: LD_INT 1
27333: PPUSH
27334: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27338: LD_INT 9
27340: PPUSH
27341: LD_OWVAR 2
27345: PPUSH
27346: CALL_OW 343
// uc_side := 9 ;
27350: LD_ADDR_OWVAR 20
27354: PUSH
27355: LD_INT 9
27357: ST_TO_ADDR
// uc_nation := 2 ;
27358: LD_ADDR_OWVAR 21
27362: PUSH
27363: LD_INT 2
27365: ST_TO_ADDR
// hc_name := Dark Warrior ;
27366: LD_ADDR_OWVAR 26
27370: PUSH
27371: LD_STRING Dark Warrior
27373: ST_TO_ADDR
// hc_gallery :=  ;
27374: LD_ADDR_OWVAR 33
27378: PUSH
27379: LD_STRING 
27381: ST_TO_ADDR
// hc_noskilllimit := true ;
27382: LD_ADDR_OWVAR 76
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27390: LD_ADDR_OWVAR 31
27394: PUSH
27395: LD_INT 30
27397: PUSH
27398: LD_INT 30
27400: PUSH
27401: LD_INT 30
27403: PUSH
27404: LD_INT 30
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// un := CreateHuman ;
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: CALL_OW 44
27422: ST_TO_ADDR
// hc_noskilllimit := false ;
27423: LD_ADDR_OWVAR 76
27427: PUSH
27428: LD_INT 0
27430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27431: LD_VAR 0 3
27435: PPUSH
27436: LD_INT 1
27438: PPUSH
27439: CALL_OW 51
// p := 0 ;
27443: LD_ADDR_VAR 0 2
27447: PUSH
27448: LD_INT 0
27450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27451: LD_INT 35
27453: PPUSH
27454: CALL_OW 67
// p := p + 1 ;
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_VAR 0 2
27467: PUSH
27468: LD_INT 1
27470: PLUS
27471: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27472: LD_VAR 0 3
27476: PPUSH
27477: CALL_OW 256
27481: PUSH
27482: LD_INT 1000
27484: LESS
27485: IFFALSE 27499
// SetLives ( un , 1000 ) ;
27487: LD_VAR 0 3
27491: PPUSH
27492: LD_INT 1000
27494: PPUSH
27495: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27499: LD_VAR 0 3
27503: PPUSH
27504: LD_INT 81
27506: PUSH
27507: LD_OWVAR 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 91
27518: PUSH
27519: LD_VAR 0 3
27523: PUSH
27524: LD_INT 30
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PPUSH
27536: CALL_OW 69
27540: PPUSH
27541: LD_VAR 0 3
27545: PPUSH
27546: CALL_OW 74
27550: PPUSH
27551: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27555: LD_VAR 0 2
27559: PUSH
27560: LD_INT 60
27562: GREATER
27563: PUSH
27564: LD_VAR 0 3
27568: PPUSH
27569: CALL_OW 301
27573: OR
27574: IFFALSE 27451
// if un then
27576: LD_VAR 0 3
27580: IFFALSE 27591
// RemoveUnit ( un ) ;
27582: LD_VAR 0 3
27586: PPUSH
27587: CALL_OW 64
// end ;
27591: PPOPN 3
27593: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27594: LD_INT 0
27596: PPUSH
// case cmd of 301 :
27597: LD_VAR 0 1
27601: PUSH
27602: LD_INT 301
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27642
27610: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27611: LD_VAR 0 6
27615: PPUSH
27616: LD_VAR 0 7
27620: PPUSH
27621: LD_VAR 0 8
27625: PPUSH
27626: LD_VAR 0 4
27630: PPUSH
27631: LD_VAR 0 5
27635: PPUSH
27636: CALL 28843 0 5
27640: GO 27763
27642: LD_INT 302
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27687
27650: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27651: LD_VAR 0 6
27655: PPUSH
27656: LD_VAR 0 7
27660: PPUSH
27661: LD_VAR 0 8
27665: PPUSH
27666: LD_VAR 0 9
27670: PPUSH
27671: LD_VAR 0 4
27675: PPUSH
27676: LD_VAR 0 5
27680: PPUSH
27681: CALL 28934 0 6
27685: GO 27763
27687: LD_INT 303
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27732
27695: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27696: LD_VAR 0 6
27700: PPUSH
27701: LD_VAR 0 7
27705: PPUSH
27706: LD_VAR 0 8
27710: PPUSH
27711: LD_VAR 0 9
27715: PPUSH
27716: LD_VAR 0 4
27720: PPUSH
27721: LD_VAR 0 5
27725: PPUSH
27726: CALL 27768 0 6
27730: GO 27763
27732: LD_INT 304
27734: DOUBLE
27735: EQUAL
27736: IFTRUE 27740
27738: GO 27762
27740: POP
// hHackTeleport ( unit , x , y ) ; end ;
27741: LD_VAR 0 2
27745: PPUSH
27746: LD_VAR 0 4
27750: PPUSH
27751: LD_VAR 0 5
27755: PPUSH
27756: CALL 29527 0 3
27760: GO 27763
27762: POP
// end ;
27763: LD_VAR 0 12
27767: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27768: LD_INT 0
27770: PPUSH
27771: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27772: LD_VAR 0 1
27776: PUSH
27777: LD_INT 1
27779: LESS
27780: PUSH
27781: LD_VAR 0 1
27785: PUSH
27786: LD_INT 3
27788: GREATER
27789: OR
27790: PUSH
27791: LD_VAR 0 5
27795: PPUSH
27796: LD_VAR 0 6
27800: PPUSH
27801: CALL_OW 428
27805: OR
27806: IFFALSE 27810
// exit ;
27808: GO 28530
// uc_side := your_side ;
27810: LD_ADDR_OWVAR 20
27814: PUSH
27815: LD_OWVAR 2
27819: ST_TO_ADDR
// uc_nation := nation ;
27820: LD_ADDR_OWVAR 21
27824: PUSH
27825: LD_VAR 0 1
27829: ST_TO_ADDR
// bc_level = 1 ;
27830: LD_ADDR_OWVAR 43
27834: PUSH
27835: LD_INT 1
27837: ST_TO_ADDR
// case btype of 1 :
27838: LD_VAR 0 2
27842: PUSH
27843: LD_INT 1
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27851
27849: GO 27862
27851: POP
// bc_type := b_depot ; 2 :
27852: LD_ADDR_OWVAR 42
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
27860: GO 28474
27862: LD_INT 2
27864: DOUBLE
27865: EQUAL
27866: IFTRUE 27870
27868: GO 27881
27870: POP
// bc_type := b_warehouse ; 3 :
27871: LD_ADDR_OWVAR 42
27875: PUSH
27876: LD_INT 1
27878: ST_TO_ADDR
27879: GO 28474
27881: LD_INT 3
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27889
27887: GO 27900
27889: POP
// bc_type := b_lab ; 4 .. 9 :
27890: LD_ADDR_OWVAR 42
27894: PUSH
27895: LD_INT 6
27897: ST_TO_ADDR
27898: GO 28474
27900: LD_INT 4
27902: DOUBLE
27903: GREATEREQUAL
27904: IFFALSE 27912
27906: LD_INT 9
27908: DOUBLE
27909: LESSEQUAL
27910: IFTRUE 27914
27912: GO 27966
27914: POP
// begin bc_type := b_lab_half ;
27915: LD_ADDR_OWVAR 42
27919: PUSH
27920: LD_INT 7
27922: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27923: LD_ADDR_OWVAR 44
27927: PUSH
27928: LD_INT 10
27930: PUSH
27931: LD_INT 11
27933: PUSH
27934: LD_INT 12
27936: PUSH
27937: LD_INT 15
27939: PUSH
27940: LD_INT 14
27942: PUSH
27943: LD_INT 13
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: PUSH
27954: LD_VAR 0 2
27958: PUSH
27959: LD_INT 3
27961: MINUS
27962: ARRAY
27963: ST_TO_ADDR
// end ; 10 .. 13 :
27964: GO 28474
27966: LD_INT 10
27968: DOUBLE
27969: GREATEREQUAL
27970: IFFALSE 27978
27972: LD_INT 13
27974: DOUBLE
27975: LESSEQUAL
27976: IFTRUE 27980
27978: GO 28057
27980: POP
// begin bc_type := b_lab_full ;
27981: LD_ADDR_OWVAR 42
27985: PUSH
27986: LD_INT 8
27988: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27989: LD_ADDR_OWVAR 44
27993: PUSH
27994: LD_INT 10
27996: PUSH
27997: LD_INT 12
27999: PUSH
28000: LD_INT 14
28002: PUSH
28003: LD_INT 13
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: LD_INT 9
28019: MINUS
28020: ARRAY
28021: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28022: LD_ADDR_OWVAR 45
28026: PUSH
28027: LD_INT 11
28029: PUSH
28030: LD_INT 15
28032: PUSH
28033: LD_INT 12
28035: PUSH
28036: LD_INT 15
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: PUSH
28045: LD_VAR 0 2
28049: PUSH
28050: LD_INT 9
28052: MINUS
28053: ARRAY
28054: ST_TO_ADDR
// end ; 14 :
28055: GO 28474
28057: LD_INT 14
28059: DOUBLE
28060: EQUAL
28061: IFTRUE 28065
28063: GO 28076
28065: POP
// bc_type := b_workshop ; 15 :
28066: LD_ADDR_OWVAR 42
28070: PUSH
28071: LD_INT 2
28073: ST_TO_ADDR
28074: GO 28474
28076: LD_INT 15
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28095
28084: POP
// bc_type := b_factory ; 16 :
28085: LD_ADDR_OWVAR 42
28089: PUSH
28090: LD_INT 3
28092: ST_TO_ADDR
28093: GO 28474
28095: LD_INT 16
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28114
28103: POP
// bc_type := b_ext_gun ; 17 :
28104: LD_ADDR_OWVAR 42
28108: PUSH
28109: LD_INT 17
28111: ST_TO_ADDR
28112: GO 28474
28114: LD_INT 17
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28150
28122: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28123: LD_ADDR_OWVAR 42
28127: PUSH
28128: LD_INT 19
28130: PUSH
28131: LD_INT 23
28133: PUSH
28134: LD_INT 19
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: PUSH
28142: LD_VAR 0 1
28146: ARRAY
28147: ST_TO_ADDR
28148: GO 28474
28150: LD_INT 18
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28169
28158: POP
// bc_type := b_ext_radar ; 19 :
28159: LD_ADDR_OWVAR 42
28163: PUSH
28164: LD_INT 20
28166: ST_TO_ADDR
28167: GO 28474
28169: LD_INT 19
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28188
28177: POP
// bc_type := b_ext_radio ; 20 :
28178: LD_ADDR_OWVAR 42
28182: PUSH
28183: LD_INT 22
28185: ST_TO_ADDR
28186: GO 28474
28188: LD_INT 20
28190: DOUBLE
28191: EQUAL
28192: IFTRUE 28196
28194: GO 28207
28196: POP
// bc_type := b_ext_siberium ; 21 :
28197: LD_ADDR_OWVAR 42
28201: PUSH
28202: LD_INT 21
28204: ST_TO_ADDR
28205: GO 28474
28207: LD_INT 21
28209: DOUBLE
28210: EQUAL
28211: IFTRUE 28215
28213: GO 28226
28215: POP
// bc_type := b_ext_computer ; 22 :
28216: LD_ADDR_OWVAR 42
28220: PUSH
28221: LD_INT 24
28223: ST_TO_ADDR
28224: GO 28474
28226: LD_INT 22
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28234
28232: GO 28245
28234: POP
// bc_type := b_ext_track ; 23 :
28235: LD_ADDR_OWVAR 42
28239: PUSH
28240: LD_INT 16
28242: ST_TO_ADDR
28243: GO 28474
28245: LD_INT 23
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28253
28251: GO 28264
28253: POP
// bc_type := b_ext_laser ; 24 :
28254: LD_ADDR_OWVAR 42
28258: PUSH
28259: LD_INT 25
28261: ST_TO_ADDR
28262: GO 28474
28264: LD_INT 24
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28283
28272: POP
// bc_type := b_control_tower ; 25 :
28273: LD_ADDR_OWVAR 42
28277: PUSH
28278: LD_INT 36
28280: ST_TO_ADDR
28281: GO 28474
28283: LD_INT 25
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28302
28291: POP
// bc_type := b_breastwork ; 26 :
28292: LD_ADDR_OWVAR 42
28296: PUSH
28297: LD_INT 31
28299: ST_TO_ADDR
28300: GO 28474
28302: LD_INT 26
28304: DOUBLE
28305: EQUAL
28306: IFTRUE 28310
28308: GO 28321
28310: POP
// bc_type := b_bunker ; 27 :
28311: LD_ADDR_OWVAR 42
28315: PUSH
28316: LD_INT 32
28318: ST_TO_ADDR
28319: GO 28474
28321: LD_INT 27
28323: DOUBLE
28324: EQUAL
28325: IFTRUE 28329
28327: GO 28340
28329: POP
// bc_type := b_turret ; 28 :
28330: LD_ADDR_OWVAR 42
28334: PUSH
28335: LD_INT 33
28337: ST_TO_ADDR
28338: GO 28474
28340: LD_INT 28
28342: DOUBLE
28343: EQUAL
28344: IFTRUE 28348
28346: GO 28359
28348: POP
// bc_type := b_armoury ; 29 :
28349: LD_ADDR_OWVAR 42
28353: PUSH
28354: LD_INT 4
28356: ST_TO_ADDR
28357: GO 28474
28359: LD_INT 29
28361: DOUBLE
28362: EQUAL
28363: IFTRUE 28367
28365: GO 28378
28367: POP
// bc_type := b_barracks ; 30 :
28368: LD_ADDR_OWVAR 42
28372: PUSH
28373: LD_INT 5
28375: ST_TO_ADDR
28376: GO 28474
28378: LD_INT 30
28380: DOUBLE
28381: EQUAL
28382: IFTRUE 28386
28384: GO 28397
28386: POP
// bc_type := b_solar_power ; 31 :
28387: LD_ADDR_OWVAR 42
28391: PUSH
28392: LD_INT 27
28394: ST_TO_ADDR
28395: GO 28474
28397: LD_INT 31
28399: DOUBLE
28400: EQUAL
28401: IFTRUE 28405
28403: GO 28416
28405: POP
// bc_type := b_oil_power ; 32 :
28406: LD_ADDR_OWVAR 42
28410: PUSH
28411: LD_INT 26
28413: ST_TO_ADDR
28414: GO 28474
28416: LD_INT 32
28418: DOUBLE
28419: EQUAL
28420: IFTRUE 28424
28422: GO 28435
28424: POP
// bc_type := b_siberite_power ; 33 :
28425: LD_ADDR_OWVAR 42
28429: PUSH
28430: LD_INT 28
28432: ST_TO_ADDR
28433: GO 28474
28435: LD_INT 33
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28454
28443: POP
// bc_type := b_oil_mine ; 34 :
28444: LD_ADDR_OWVAR 42
28448: PUSH
28449: LD_INT 29
28451: ST_TO_ADDR
28452: GO 28474
28454: LD_INT 34
28456: DOUBLE
28457: EQUAL
28458: IFTRUE 28462
28460: GO 28473
28462: POP
// bc_type := b_siberite_mine ; end ;
28463: LD_ADDR_OWVAR 42
28467: PUSH
28468: LD_INT 30
28470: ST_TO_ADDR
28471: GO 28474
28473: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28474: LD_ADDR_VAR 0 8
28478: PUSH
28479: LD_VAR 0 5
28483: PPUSH
28484: LD_VAR 0 6
28488: PPUSH
28489: LD_VAR 0 3
28493: PPUSH
28494: CALL_OW 47
28498: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28499: LD_OWVAR 42
28503: PUSH
28504: LD_INT 32
28506: PUSH
28507: LD_INT 33
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: IN
28514: IFFALSE 28530
// PlaceWeaponTurret ( b , weapon ) ;
28516: LD_VAR 0 8
28520: PPUSH
28521: LD_VAR 0 4
28525: PPUSH
28526: CALL_OW 431
// end ;
28530: LD_VAR 0 7
28534: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28535: LD_INT 0
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28541: LD_ADDR_VAR 0 4
28545: PUSH
28546: LD_INT 22
28548: PUSH
28549: LD_OWVAR 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: LD_INT 30
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 30
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PPUSH
28590: CALL_OW 69
28594: ST_TO_ADDR
// if not tmp then
28595: LD_VAR 0 4
28599: NOT
28600: IFFALSE 28604
// exit ;
28602: GO 28663
// for i in tmp do
28604: LD_ADDR_VAR 0 2
28608: PUSH
28609: LD_VAR 0 4
28613: PUSH
28614: FOR_IN
28615: IFFALSE 28661
// for j = 1 to 3 do
28617: LD_ADDR_VAR 0 3
28621: PUSH
28622: DOUBLE
28623: LD_INT 1
28625: DEC
28626: ST_TO_ADDR
28627: LD_INT 3
28629: PUSH
28630: FOR_TO
28631: IFFALSE 28657
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28633: LD_VAR 0 2
28637: PPUSH
28638: CALL_OW 274
28642: PPUSH
28643: LD_VAR 0 3
28647: PPUSH
28648: LD_INT 99999
28650: PPUSH
28651: CALL_OW 277
28655: GO 28630
28657: POP
28658: POP
28659: GO 28614
28661: POP
28662: POP
// end ;
28663: LD_VAR 0 1
28667: RET
// export function hHackSetLevel10 ; var i , j ; begin
28668: LD_INT 0
28670: PPUSH
28671: PPUSH
28672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: LD_INT 21
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PPUSH
28688: CALL_OW 69
28692: PUSH
28693: FOR_IN
28694: IFFALSE 28746
// if IsSelected ( i ) then
28696: LD_VAR 0 2
28700: PPUSH
28701: CALL_OW 306
28705: IFFALSE 28744
// begin for j := 1 to 4 do
28707: LD_ADDR_VAR 0 3
28711: PUSH
28712: DOUBLE
28713: LD_INT 1
28715: DEC
28716: ST_TO_ADDR
28717: LD_INT 4
28719: PUSH
28720: FOR_TO
28721: IFFALSE 28742
// SetSkill ( i , j , 10 ) ;
28723: LD_VAR 0 2
28727: PPUSH
28728: LD_VAR 0 3
28732: PPUSH
28733: LD_INT 10
28735: PPUSH
28736: CALL_OW 237
28740: GO 28720
28742: POP
28743: POP
// end ;
28744: GO 28693
28746: POP
28747: POP
// end ;
28748: LD_VAR 0 1
28752: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28753: LD_INT 0
28755: PPUSH
28756: PPUSH
28757: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28758: LD_ADDR_VAR 0 2
28762: PUSH
28763: LD_INT 22
28765: PUSH
28766: LD_OWVAR 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 21
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PPUSH
28789: CALL_OW 69
28793: PUSH
28794: FOR_IN
28795: IFFALSE 28836
// begin for j := 1 to 4 do
28797: LD_ADDR_VAR 0 3
28801: PUSH
28802: DOUBLE
28803: LD_INT 1
28805: DEC
28806: ST_TO_ADDR
28807: LD_INT 4
28809: PUSH
28810: FOR_TO
28811: IFFALSE 28832
// SetSkill ( i , j , 10 ) ;
28813: LD_VAR 0 2
28817: PPUSH
28818: LD_VAR 0 3
28822: PPUSH
28823: LD_INT 10
28825: PPUSH
28826: CALL_OW 237
28830: GO 28810
28832: POP
28833: POP
// end ;
28834: GO 28794
28836: POP
28837: POP
// end ;
28838: LD_VAR 0 1
28842: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28843: LD_INT 0
28845: PPUSH
// uc_side := your_side ;
28846: LD_ADDR_OWVAR 20
28850: PUSH
28851: LD_OWVAR 2
28855: ST_TO_ADDR
// uc_nation := nation ;
28856: LD_ADDR_OWVAR 21
28860: PUSH
28861: LD_VAR 0 1
28865: ST_TO_ADDR
// InitHc ;
28866: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28870: LD_INT 0
28872: PPUSH
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28887: LD_VAR 0 4
28891: PPUSH
28892: LD_VAR 0 5
28896: PPUSH
28897: CALL_OW 428
28901: PUSH
28902: LD_INT 0
28904: EQUAL
28905: IFFALSE 28929
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28907: CALL_OW 44
28911: PPUSH
28912: LD_VAR 0 4
28916: PPUSH
28917: LD_VAR 0 5
28921: PPUSH
28922: LD_INT 1
28924: PPUSH
28925: CALL_OW 48
// end ;
28929: LD_VAR 0 6
28933: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
// uc_side := your_side ;
28938: LD_ADDR_OWVAR 20
28942: PUSH
28943: LD_OWVAR 2
28947: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: LD_INT 4
28964: PUSH
28965: LD_INT 5
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: IN
28975: IFFALSE 28987
// uc_nation := nation_american else
28977: LD_ADDR_OWVAR 21
28981: PUSH
28982: LD_INT 1
28984: ST_TO_ADDR
28985: GO 29030
// if chassis in [ 11 , 12 , 13 , 14 ] then
28987: LD_VAR 0 1
28991: PUSH
28992: LD_INT 11
28994: PUSH
28995: LD_INT 12
28997: PUSH
28998: LD_INT 13
29000: PUSH
29001: LD_INT 14
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: IN
29010: IFFALSE 29022
// uc_nation := nation_arabian else
29012: LD_ADDR_OWVAR 21
29016: PUSH
29017: LD_INT 2
29019: ST_TO_ADDR
29020: GO 29030
// uc_nation := nation_russian ;
29022: LD_ADDR_OWVAR 21
29026: PUSH
29027: LD_INT 3
29029: ST_TO_ADDR
// vc_chassis := chassis ;
29030: LD_ADDR_OWVAR 37
29034: PUSH
29035: LD_VAR 0 1
29039: ST_TO_ADDR
// vc_engine := engine ;
29040: LD_ADDR_OWVAR 39
29044: PUSH
29045: LD_VAR 0 2
29049: ST_TO_ADDR
// vc_control := control ;
29050: LD_ADDR_OWVAR 38
29054: PUSH
29055: LD_VAR 0 3
29059: ST_TO_ADDR
// vc_weapon := weapon ;
29060: LD_ADDR_OWVAR 40
29064: PUSH
29065: LD_VAR 0 4
29069: ST_TO_ADDR
// un := CreateVehicle ;
29070: LD_ADDR_VAR 0 8
29074: PUSH
29075: CALL_OW 45
29079: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29080: LD_VAR 0 8
29084: PPUSH
29085: LD_INT 0
29087: PPUSH
29088: LD_INT 5
29090: PPUSH
29091: CALL_OW 12
29095: PPUSH
29096: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29100: LD_VAR 0 8
29104: PPUSH
29105: LD_VAR 0 5
29109: PPUSH
29110: LD_VAR 0 6
29114: PPUSH
29115: LD_INT 1
29117: PPUSH
29118: CALL_OW 48
// end ;
29122: LD_VAR 0 7
29126: RET
// export hInvincible ; every 1 do
29127: GO 29129
29129: DISABLE
// hInvincible := [ ] ;
29130: LD_ADDR_EXP 109
29134: PUSH
29135: EMPTY
29136: ST_TO_ADDR
29137: END
// every 10 do var i ;
29138: GO 29140
29140: DISABLE
29141: LD_INT 0
29143: PPUSH
// begin enable ;
29144: ENABLE
// if not hInvincible then
29145: LD_EXP 109
29149: NOT
29150: IFFALSE 29154
// exit ;
29152: GO 29198
// for i in hInvincible do
29154: LD_ADDR_VAR 0 1
29158: PUSH
29159: LD_EXP 109
29163: PUSH
29164: FOR_IN
29165: IFFALSE 29196
// if GetLives ( i ) < 1000 then
29167: LD_VAR 0 1
29171: PPUSH
29172: CALL_OW 256
29176: PUSH
29177: LD_INT 1000
29179: LESS
29180: IFFALSE 29194
// SetLives ( i , 1000 ) ;
29182: LD_VAR 0 1
29186: PPUSH
29187: LD_INT 1000
29189: PPUSH
29190: CALL_OW 234
29194: GO 29164
29196: POP
29197: POP
// end ;
29198: PPOPN 1
29200: END
// export function hHackInvincible ; var i ; begin
29201: LD_INT 0
29203: PPUSH
29204: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29205: LD_ADDR_VAR 0 2
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 21
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 21
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: PUSH
29243: FOR_IN
29244: IFFALSE 29305
// if IsSelected ( i ) then
29246: LD_VAR 0 2
29250: PPUSH
29251: CALL_OW 306
29255: IFFALSE 29303
// begin if i in hInvincible then
29257: LD_VAR 0 2
29261: PUSH
29262: LD_EXP 109
29266: IN
29267: IFFALSE 29287
// hInvincible := hInvincible diff i else
29269: LD_ADDR_EXP 109
29273: PUSH
29274: LD_EXP 109
29278: PUSH
29279: LD_VAR 0 2
29283: DIFF
29284: ST_TO_ADDR
29285: GO 29303
// hInvincible := hInvincible union i ;
29287: LD_ADDR_EXP 109
29291: PUSH
29292: LD_EXP 109
29296: PUSH
29297: LD_VAR 0 2
29301: UNION
29302: ST_TO_ADDR
// end ;
29303: GO 29243
29305: POP
29306: POP
// end ;
29307: LD_VAR 0 1
29311: RET
// export function hHackInvisible ; var i , j ; begin
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
29316: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29317: LD_ADDR_VAR 0 2
29321: PUSH
29322: LD_INT 21
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: CALL_OW 69
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29362
// if IsSelected ( i ) then
29340: LD_VAR 0 2
29344: PPUSH
29345: CALL_OW 306
29349: IFFALSE 29360
// ComForceInvisible ( i ) ;
29351: LD_VAR 0 2
29355: PPUSH
29356: CALL_OW 496
29360: GO 29337
29362: POP
29363: POP
// end ;
29364: LD_VAR 0 1
29368: RET
// export function hHackChangeYourSide ; begin
29369: LD_INT 0
29371: PPUSH
// if your_side = 8 then
29372: LD_OWVAR 2
29376: PUSH
29377: LD_INT 8
29379: EQUAL
29380: IFFALSE 29392
// your_side := 0 else
29382: LD_ADDR_OWVAR 2
29386: PUSH
29387: LD_INT 0
29389: ST_TO_ADDR
29390: GO 29406
// your_side := your_side + 1 ;
29392: LD_ADDR_OWVAR 2
29396: PUSH
29397: LD_OWVAR 2
29401: PUSH
29402: LD_INT 1
29404: PLUS
29405: ST_TO_ADDR
// end ;
29406: LD_VAR 0 1
29410: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29411: LD_INT 0
29413: PPUSH
29414: PPUSH
29415: PPUSH
// for i in all_units do
29416: LD_ADDR_VAR 0 2
29420: PUSH
29421: LD_OWVAR 3
29425: PUSH
29426: FOR_IN
29427: IFFALSE 29505
// if IsSelected ( i ) then
29429: LD_VAR 0 2
29433: PPUSH
29434: CALL_OW 306
29438: IFFALSE 29503
// begin j := GetSide ( i ) ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_VAR 0 2
29449: PPUSH
29450: CALL_OW 255
29454: ST_TO_ADDR
// if j = 8 then
29455: LD_VAR 0 3
29459: PUSH
29460: LD_INT 8
29462: EQUAL
29463: IFFALSE 29475
// j := 0 else
29465: LD_ADDR_VAR 0 3
29469: PUSH
29470: LD_INT 0
29472: ST_TO_ADDR
29473: GO 29489
// j := j + 1 ;
29475: LD_ADDR_VAR 0 3
29479: PUSH
29480: LD_VAR 0 3
29484: PUSH
29485: LD_INT 1
29487: PLUS
29488: ST_TO_ADDR
// SetSide ( i , j ) ;
29489: LD_VAR 0 2
29493: PPUSH
29494: LD_VAR 0 3
29498: PPUSH
29499: CALL_OW 235
// end ;
29503: GO 29426
29505: POP
29506: POP
// end ;
29507: LD_VAR 0 1
29511: RET
// export function hHackFog ; begin
29512: LD_INT 0
29514: PPUSH
// FogOff ( true ) ;
29515: LD_INT 1
29517: PPUSH
29518: CALL_OW 344
// end ;
29522: LD_VAR 0 1
29526: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29527: LD_INT 0
29529: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29530: LD_VAR 0 1
29534: PPUSH
29535: LD_VAR 0 2
29539: PPUSH
29540: LD_VAR 0 3
29544: PPUSH
29545: LD_INT 1
29547: PPUSH
29548: LD_INT 1
29550: PPUSH
29551: CALL_OW 483
// CenterOnXY ( x , y ) ;
29555: LD_VAR 0 2
29559: PPUSH
29560: LD_VAR 0 3
29564: PPUSH
29565: CALL_OW 84
// end ; end_of_file
29569: LD_VAR 0 4
29573: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29574: LD_INT 0
29576: PPUSH
29577: PPUSH
29578: PPUSH
29579: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29580: LD_VAR 0 1
29584: PPUSH
29585: CALL_OW 264
29589: PUSH
29590: LD_EXP 40
29594: EQUAL
29595: IFFALSE 29667
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29597: LD_INT 68
29599: PPUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL_OW 255
29609: PPUSH
29610: CALL_OW 321
29614: PUSH
29615: LD_INT 2
29617: EQUAL
29618: IFFALSE 29630
// eff := 70 else
29620: LD_ADDR_VAR 0 4
29624: PUSH
29625: LD_INT 70
29627: ST_TO_ADDR
29628: GO 29638
// eff := 30 ;
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: LD_INT 30
29637: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 250
29647: PPUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 251
29657: PPUSH
29658: LD_VAR 0 4
29662: PPUSH
29663: CALL_OW 495
// end ; end ;
29667: LD_VAR 0 2
29671: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29672: LD_INT 0
29674: PPUSH
// end ;
29675: LD_VAR 0 4
29679: RET
// export function SOS_Command ( cmd ) ; begin
29680: LD_INT 0
29682: PPUSH
// end ;
29683: LD_VAR 0 2
29687: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29688: LD_INT 0
29690: PPUSH
// if cmd = 121 then
29691: LD_VAR 0 1
29695: PUSH
29696: LD_INT 121
29698: EQUAL
29699: IFFALSE 29701
// end ;
29701: LD_VAR 0 6
29705: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29706: LD_INT 0
29708: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29709: LD_VAR 0 1
29713: PUSH
29714: LD_INT 250
29716: EQUAL
29717: PUSH
29718: LD_VAR 0 2
29722: PPUSH
29723: CALL_OW 264
29727: PUSH
29728: LD_EXP 43
29732: EQUAL
29733: AND
29734: IFFALSE 29755
// MinerPlaceMine ( unit , x , y ) ;
29736: LD_VAR 0 2
29740: PPUSH
29741: LD_VAR 0 4
29745: PPUSH
29746: LD_VAR 0 5
29750: PPUSH
29751: CALL 32104 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29755: LD_VAR 0 1
29759: PUSH
29760: LD_INT 251
29762: EQUAL
29763: PUSH
29764: LD_VAR 0 2
29768: PPUSH
29769: CALL_OW 264
29773: PUSH
29774: LD_EXP 43
29778: EQUAL
29779: AND
29780: IFFALSE 29801
// MinerDetonateMine ( unit , x , y ) ;
29782: LD_VAR 0 2
29786: PPUSH
29787: LD_VAR 0 4
29791: PPUSH
29792: LD_VAR 0 5
29796: PPUSH
29797: CALL 32381 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29801: LD_VAR 0 1
29805: PUSH
29806: LD_INT 252
29808: EQUAL
29809: PUSH
29810: LD_VAR 0 2
29814: PPUSH
29815: CALL_OW 264
29819: PUSH
29820: LD_EXP 43
29824: EQUAL
29825: AND
29826: IFFALSE 29847
// MinerCreateMinefield ( unit , x , y ) ;
29828: LD_VAR 0 2
29832: PPUSH
29833: LD_VAR 0 4
29837: PPUSH
29838: LD_VAR 0 5
29842: PPUSH
29843: CALL 32798 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29847: LD_VAR 0 1
29851: PUSH
29852: LD_INT 253
29854: EQUAL
29855: PUSH
29856: LD_VAR 0 2
29860: PPUSH
29861: CALL_OW 257
29865: PUSH
29866: LD_INT 5
29868: EQUAL
29869: AND
29870: IFFALSE 29891
// ComBinocular ( unit , x , y ) ;
29872: LD_VAR 0 2
29876: PPUSH
29877: LD_VAR 0 4
29881: PPUSH
29882: LD_VAR 0 5
29886: PPUSH
29887: CALL 33169 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29891: LD_VAR 0 1
29895: PUSH
29896: LD_INT 254
29898: EQUAL
29899: PUSH
29900: LD_VAR 0 2
29904: PPUSH
29905: CALL_OW 264
29909: PUSH
29910: LD_EXP 38
29914: EQUAL
29915: AND
29916: PUSH
29917: LD_VAR 0 3
29921: PPUSH
29922: CALL_OW 263
29926: PUSH
29927: LD_INT 3
29929: EQUAL
29930: AND
29931: IFFALSE 29947
// HackDestroyVehicle ( unit , selectedUnit ) ;
29933: LD_VAR 0 2
29937: PPUSH
29938: LD_VAR 0 3
29942: PPUSH
29943: CALL 31464 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29947: LD_VAR 0 1
29951: PUSH
29952: LD_INT 255
29954: EQUAL
29955: PUSH
29956: LD_VAR 0 2
29960: PPUSH
29961: CALL_OW 264
29965: PUSH
29966: LD_INT 14
29968: PUSH
29969: LD_INT 53
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: IN
29976: AND
29977: PUSH
29978: LD_VAR 0 4
29982: PPUSH
29983: LD_VAR 0 5
29987: PPUSH
29988: CALL_OW 488
29992: AND
29993: IFFALSE 30017
// CutTreeXYR ( unit , x , y , 12 ) ;
29995: LD_VAR 0 2
29999: PPUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: LD_VAR 0 5
30009: PPUSH
30010: LD_INT 12
30012: PPUSH
30013: CALL 30030 0 4
// end ;
30017: LD_VAR 0 6
30021: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30022: LD_INT 0
30024: PPUSH
// end ;
30025: LD_VAR 0 4
30029: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30041: LD_VAR 0 1
30045: NOT
30046: PUSH
30047: LD_VAR 0 2
30051: PPUSH
30052: LD_VAR 0 3
30056: PPUSH
30057: CALL_OW 488
30061: NOT
30062: OR
30063: PUSH
30064: LD_VAR 0 4
30068: NOT
30069: OR
30070: IFFALSE 30074
// exit ;
30072: GO 30414
// list := [ ] ;
30074: LD_ADDR_VAR 0 13
30078: PUSH
30079: EMPTY
30080: ST_TO_ADDR
// if x - r < 0 then
30081: LD_VAR 0 2
30085: PUSH
30086: LD_VAR 0 4
30090: MINUS
30091: PUSH
30092: LD_INT 0
30094: LESS
30095: IFFALSE 30107
// min_x := 0 else
30097: LD_ADDR_VAR 0 7
30101: PUSH
30102: LD_INT 0
30104: ST_TO_ADDR
30105: GO 30123
// min_x := x - r ;
30107: LD_ADDR_VAR 0 7
30111: PUSH
30112: LD_VAR 0 2
30116: PUSH
30117: LD_VAR 0 4
30121: MINUS
30122: ST_TO_ADDR
// if y - r < 0 then
30123: LD_VAR 0 3
30127: PUSH
30128: LD_VAR 0 4
30132: MINUS
30133: PUSH
30134: LD_INT 0
30136: LESS
30137: IFFALSE 30149
// min_y := 0 else
30139: LD_ADDR_VAR 0 8
30143: PUSH
30144: LD_INT 0
30146: ST_TO_ADDR
30147: GO 30165
// min_y := y - r ;
30149: LD_ADDR_VAR 0 8
30153: PUSH
30154: LD_VAR 0 3
30158: PUSH
30159: LD_VAR 0 4
30163: MINUS
30164: ST_TO_ADDR
// max_x := x + r ;
30165: LD_ADDR_VAR 0 9
30169: PUSH
30170: LD_VAR 0 2
30174: PUSH
30175: LD_VAR 0 4
30179: PLUS
30180: ST_TO_ADDR
// max_y := y + r ;
30181: LD_ADDR_VAR 0 10
30185: PUSH
30186: LD_VAR 0 3
30190: PUSH
30191: LD_VAR 0 4
30195: PLUS
30196: ST_TO_ADDR
// for _x = min_x to max_x do
30197: LD_ADDR_VAR 0 11
30201: PUSH
30202: DOUBLE
30203: LD_VAR 0 7
30207: DEC
30208: ST_TO_ADDR
30209: LD_VAR 0 9
30213: PUSH
30214: FOR_TO
30215: IFFALSE 30332
// for _y = min_y to max_y do
30217: LD_ADDR_VAR 0 12
30221: PUSH
30222: DOUBLE
30223: LD_VAR 0 8
30227: DEC
30228: ST_TO_ADDR
30229: LD_VAR 0 10
30233: PUSH
30234: FOR_TO
30235: IFFALSE 30328
// begin if not ValidHex ( _x , _y ) then
30237: LD_VAR 0 11
30241: PPUSH
30242: LD_VAR 0 12
30246: PPUSH
30247: CALL_OW 488
30251: NOT
30252: IFFALSE 30256
// continue ;
30254: GO 30234
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30256: LD_VAR 0 11
30260: PPUSH
30261: LD_VAR 0 12
30265: PPUSH
30266: CALL_OW 351
30270: PUSH
30271: LD_VAR 0 11
30275: PPUSH
30276: LD_VAR 0 12
30280: PPUSH
30281: CALL_OW 554
30285: AND
30286: IFFALSE 30326
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30288: LD_ADDR_VAR 0 13
30292: PUSH
30293: LD_VAR 0 13
30297: PPUSH
30298: LD_VAR 0 13
30302: PUSH
30303: LD_INT 1
30305: PLUS
30306: PPUSH
30307: LD_VAR 0 11
30311: PUSH
30312: LD_VAR 0 12
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PPUSH
30321: CALL_OW 2
30325: ST_TO_ADDR
// end ;
30326: GO 30234
30328: POP
30329: POP
30330: GO 30214
30332: POP
30333: POP
// if not list then
30334: LD_VAR 0 13
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30414
// for i in list do
30343: LD_ADDR_VAR 0 6
30347: PUSH
30348: LD_VAR 0 13
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30412
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30356: LD_VAR 0 1
30360: PPUSH
30361: LD_STRING M
30363: PUSH
30364: LD_VAR 0 6
30368: PUSH
30369: LD_INT 1
30371: ARRAY
30372: PUSH
30373: LD_VAR 0 6
30377: PUSH
30378: LD_INT 2
30380: ARRAY
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: PUSH
30403: EMPTY
30404: LIST
30405: PPUSH
30406: CALL_OW 447
30410: GO 30353
30412: POP
30413: POP
// end ;
30414: LD_VAR 0 5
30418: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30419: LD_EXP 112
30423: NOT
30424: IFFALSE 30474
30426: GO 30428
30428: DISABLE
// begin initHack := true ;
30429: LD_ADDR_EXP 112
30433: PUSH
30434: LD_INT 1
30436: ST_TO_ADDR
// hackTanks := [ ] ;
30437: LD_ADDR_EXP 113
30441: PUSH
30442: EMPTY
30443: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30444: LD_ADDR_EXP 114
30448: PUSH
30449: EMPTY
30450: ST_TO_ADDR
// hackLimit := 3 ;
30451: LD_ADDR_EXP 115
30455: PUSH
30456: LD_INT 3
30458: ST_TO_ADDR
// hackDist := 12 ;
30459: LD_ADDR_EXP 116
30463: PUSH
30464: LD_INT 12
30466: ST_TO_ADDR
// hackCounter := [ ] ;
30467: LD_ADDR_EXP 117
30471: PUSH
30472: EMPTY
30473: ST_TO_ADDR
// end ;
30474: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30475: LD_EXP 112
30479: PUSH
30480: LD_INT 34
30482: PUSH
30483: LD_EXP 38
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PPUSH
30492: CALL_OW 69
30496: AND
30497: IFFALSE 30752
30499: GO 30501
30501: DISABLE
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
// begin enable ;
30506: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30507: LD_ADDR_VAR 0 1
30511: PUSH
30512: LD_INT 34
30514: PUSH
30515: LD_EXP 38
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 69
30528: PUSH
30529: FOR_IN
30530: IFFALSE 30750
// begin if not i in hackTanks then
30532: LD_VAR 0 1
30536: PUSH
30537: LD_EXP 113
30541: IN
30542: NOT
30543: IFFALSE 30626
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30545: LD_ADDR_EXP 113
30549: PUSH
30550: LD_EXP 113
30554: PPUSH
30555: LD_EXP 113
30559: PUSH
30560: LD_INT 1
30562: PLUS
30563: PPUSH
30564: LD_VAR 0 1
30568: PPUSH
30569: CALL_OW 1
30573: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30574: LD_ADDR_EXP 114
30578: PUSH
30579: LD_EXP 114
30583: PPUSH
30584: LD_EXP 114
30588: PUSH
30589: LD_INT 1
30591: PLUS
30592: PPUSH
30593: EMPTY
30594: PPUSH
30595: CALL_OW 1
30599: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30600: LD_ADDR_EXP 117
30604: PUSH
30605: LD_EXP 117
30609: PPUSH
30610: LD_EXP 117
30614: PUSH
30615: LD_INT 1
30617: PLUS
30618: PPUSH
30619: EMPTY
30620: PPUSH
30621: CALL_OW 1
30625: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30626: LD_VAR 0 1
30630: PPUSH
30631: CALL_OW 302
30635: NOT
30636: IFFALSE 30649
// begin HackUnlinkAll ( i ) ;
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL 30755 0 1
// continue ;
30647: GO 30529
// end ; HackCheckCapturedStatus ( i ) ;
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL 31198 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30658: LD_ADDR_VAR 0 2
30662: PUSH
30663: LD_INT 81
30665: PUSH
30666: LD_VAR 0 1
30670: PPUSH
30671: CALL_OW 255
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 33
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 91
30692: PUSH
30693: LD_VAR 0 1
30697: PUSH
30698: LD_EXP 116
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 50
30710: PUSH
30711: EMPTY
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: ST_TO_ADDR
// if not tmp then
30725: LD_VAR 0 2
30729: NOT
30730: IFFALSE 30734
// continue ;
30732: GO 30529
// HackLink ( i , tmp ) ;
30734: LD_VAR 0 1
30738: PPUSH
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL 30891 0 2
// end ;
30748: GO 30529
30750: POP
30751: POP
// end ;
30752: PPOPN 2
30754: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30755: LD_INT 0
30757: PPUSH
30758: PPUSH
30759: PPUSH
// if not hack in hackTanks then
30760: LD_VAR 0 1
30764: PUSH
30765: LD_EXP 113
30769: IN
30770: NOT
30771: IFFALSE 30775
// exit ;
30773: GO 30886
// index := GetElementIndex ( hackTanks , hack ) ;
30775: LD_ADDR_VAR 0 4
30779: PUSH
30780: LD_EXP 113
30784: PPUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL 38360 0 2
30794: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30795: LD_EXP 114
30799: PUSH
30800: LD_VAR 0 4
30804: ARRAY
30805: IFFALSE 30886
// begin for i in hackTanksCaptured [ index ] do
30807: LD_ADDR_VAR 0 3
30811: PUSH
30812: LD_EXP 114
30816: PUSH
30817: LD_VAR 0 4
30821: ARRAY
30822: PUSH
30823: FOR_IN
30824: IFFALSE 30850
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30826: LD_VAR 0 3
30830: PUSH
30831: LD_INT 1
30833: ARRAY
30834: PPUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 2
30842: ARRAY
30843: PPUSH
30844: CALL_OW 235
30848: GO 30823
30850: POP
30851: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30852: LD_ADDR_EXP 114
30856: PUSH
30857: LD_EXP 114
30861: PPUSH
30862: LD_VAR 0 4
30866: PPUSH
30867: EMPTY
30868: PPUSH
30869: CALL_OW 1
30873: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_INT 0
30881: PPUSH
30882: CALL_OW 505
// end ; end ;
30886: LD_VAR 0 2
30890: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30891: LD_INT 0
30893: PPUSH
30894: PPUSH
30895: PPUSH
// if not hack in hackTanks or not vehicles then
30896: LD_VAR 0 1
30900: PUSH
30901: LD_EXP 113
30905: IN
30906: NOT
30907: PUSH
30908: LD_VAR 0 2
30912: NOT
30913: OR
30914: IFFALSE 30918
// exit ;
30916: GO 31193
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30918: LD_ADDR_VAR 0 2
30922: PUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: LD_VAR 0 2
30932: PPUSH
30933: LD_INT 1
30935: PPUSH
30936: LD_INT 1
30938: PPUSH
30939: CALL 39010 0 4
30943: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_EXP 113
30953: PPUSH
30954: LD_VAR 0 1
30958: PPUSH
30959: CALL 38360 0 2
30963: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30964: LD_EXP 114
30968: PUSH
30969: LD_VAR 0 5
30973: ARRAY
30974: PUSH
30975: LD_EXP 115
30979: LESS
30980: IFFALSE 31169
// begin for i := 1 to vehicles do
30982: LD_ADDR_VAR 0 4
30986: PUSH
30987: DOUBLE
30988: LD_INT 1
30990: DEC
30991: ST_TO_ADDR
30992: LD_VAR 0 2
30996: PUSH
30997: FOR_TO
30998: IFFALSE 31167
// begin if hackTanksCaptured [ index ] = hackLimit then
31000: LD_EXP 114
31004: PUSH
31005: LD_VAR 0 5
31009: ARRAY
31010: PUSH
31011: LD_EXP 115
31015: EQUAL
31016: IFFALSE 31020
// break ;
31018: GO 31167
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31020: LD_ADDR_EXP 117
31024: PUSH
31025: LD_EXP 117
31029: PPUSH
31030: LD_VAR 0 5
31034: PPUSH
31035: LD_EXP 117
31039: PUSH
31040: LD_VAR 0 5
31044: ARRAY
31045: PUSH
31046: LD_INT 1
31048: PLUS
31049: PPUSH
31050: CALL_OW 1
31054: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31055: LD_ADDR_EXP 114
31059: PUSH
31060: LD_EXP 114
31064: PPUSH
31065: LD_VAR 0 5
31069: PUSH
31070: LD_EXP 114
31074: PUSH
31075: LD_VAR 0 5
31079: ARRAY
31080: PUSH
31081: LD_INT 1
31083: PLUS
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PPUSH
31089: LD_VAR 0 2
31093: PUSH
31094: LD_VAR 0 4
31098: ARRAY
31099: PUSH
31100: LD_VAR 0 2
31104: PUSH
31105: LD_VAR 0 4
31109: ARRAY
31110: PPUSH
31111: CALL_OW 255
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PPUSH
31120: CALL 38575 0 3
31124: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31125: LD_VAR 0 2
31129: PUSH
31130: LD_VAR 0 4
31134: ARRAY
31135: PPUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: CALL_OW 255
31145: PPUSH
31146: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31150: LD_VAR 0 2
31154: PUSH
31155: LD_VAR 0 4
31159: ARRAY
31160: PPUSH
31161: CALL_OW 141
// end ;
31165: GO 30997
31167: POP
31168: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31169: LD_VAR 0 1
31173: PPUSH
31174: LD_EXP 114
31178: PUSH
31179: LD_VAR 0 5
31183: ARRAY
31184: PUSH
31185: LD_INT 0
31187: PLUS
31188: PPUSH
31189: CALL_OW 505
// end ;
31193: LD_VAR 0 3
31197: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31198: LD_INT 0
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
// if not hack in hackTanks then
31204: LD_VAR 0 1
31208: PUSH
31209: LD_EXP 113
31213: IN
31214: NOT
31215: IFFALSE 31219
// exit ;
31217: GO 31459
// index := GetElementIndex ( hackTanks , hack ) ;
31219: LD_ADDR_VAR 0 4
31223: PUSH
31224: LD_EXP 113
31228: PPUSH
31229: LD_VAR 0 1
31233: PPUSH
31234: CALL 38360 0 2
31238: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: DOUBLE
31245: LD_EXP 114
31249: PUSH
31250: LD_VAR 0 4
31254: ARRAY
31255: INC
31256: ST_TO_ADDR
31257: LD_INT 1
31259: PUSH
31260: FOR_DOWNTO
31261: IFFALSE 31433
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31263: LD_ADDR_VAR 0 5
31267: PUSH
31268: LD_EXP 114
31272: PUSH
31273: LD_VAR 0 4
31277: ARRAY
31278: PUSH
31279: LD_VAR 0 3
31283: ARRAY
31284: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31285: LD_VAR 0 5
31289: PUSH
31290: LD_INT 1
31292: ARRAY
31293: PPUSH
31294: CALL_OW 302
31298: NOT
31299: PUSH
31300: LD_VAR 0 5
31304: PUSH
31305: LD_INT 1
31307: ARRAY
31308: PPUSH
31309: CALL_OW 255
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 255
31323: NONEQUAL
31324: OR
31325: IFFALSE 31431
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31327: LD_VAR 0 5
31331: PUSH
31332: LD_INT 1
31334: ARRAY
31335: PPUSH
31336: CALL_OW 305
31340: PUSH
31341: LD_VAR 0 5
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: CALL_OW 255
31354: PUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 255
31364: EQUAL
31365: AND
31366: IFFALSE 31390
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31368: LD_VAR 0 5
31372: PUSH
31373: LD_INT 1
31375: ARRAY
31376: PPUSH
31377: LD_VAR 0 5
31381: PUSH
31382: LD_INT 2
31384: ARRAY
31385: PPUSH
31386: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31390: LD_ADDR_EXP 114
31394: PUSH
31395: LD_EXP 114
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: LD_EXP 114
31409: PUSH
31410: LD_VAR 0 4
31414: ARRAY
31415: PPUSH
31416: LD_VAR 0 3
31420: PPUSH
31421: CALL_OW 3
31425: PPUSH
31426: CALL_OW 1
31430: ST_TO_ADDR
// end ; end ;
31431: GO 31260
31433: POP
31434: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31435: LD_VAR 0 1
31439: PPUSH
31440: LD_EXP 114
31444: PUSH
31445: LD_VAR 0 4
31449: ARRAY
31450: PUSH
31451: LD_INT 0
31453: PLUS
31454: PPUSH
31455: CALL_OW 505
// end ;
31459: LD_VAR 0 2
31463: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31464: LD_INT 0
31466: PPUSH
31467: PPUSH
31468: PPUSH
31469: PPUSH
// if not hack in hackTanks then
31470: LD_VAR 0 1
31474: PUSH
31475: LD_EXP 113
31479: IN
31480: NOT
31481: IFFALSE 31485
// exit ;
31483: GO 31570
// index := GetElementIndex ( hackTanks , hack ) ;
31485: LD_ADDR_VAR 0 5
31489: PUSH
31490: LD_EXP 113
31494: PPUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL 38360 0 2
31504: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31505: LD_ADDR_VAR 0 4
31509: PUSH
31510: DOUBLE
31511: LD_INT 1
31513: DEC
31514: ST_TO_ADDR
31515: LD_EXP 114
31519: PUSH
31520: LD_VAR 0 5
31524: ARRAY
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31568
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31529: LD_EXP 114
31533: PUSH
31534: LD_VAR 0 5
31538: ARRAY
31539: PUSH
31540: LD_VAR 0 4
31544: ARRAY
31545: PUSH
31546: LD_INT 1
31548: ARRAY
31549: PUSH
31550: LD_VAR 0 2
31554: EQUAL
31555: IFFALSE 31566
// KillUnit ( vehicle ) ;
31557: LD_VAR 0 2
31561: PPUSH
31562: CALL_OW 66
31566: GO 31526
31568: POP
31569: POP
// end ;
31570: LD_VAR 0 3
31574: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31575: LD_EXP 118
31579: NOT
31580: IFFALSE 31615
31582: GO 31584
31584: DISABLE
// begin initMiner := true ;
31585: LD_ADDR_EXP 118
31589: PUSH
31590: LD_INT 1
31592: ST_TO_ADDR
// minersList := [ ] ;
31593: LD_ADDR_EXP 119
31597: PUSH
31598: EMPTY
31599: ST_TO_ADDR
// minerMinesList := [ ] ;
31600: LD_ADDR_EXP 120
31604: PUSH
31605: EMPTY
31606: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31607: LD_ADDR_EXP 121
31611: PUSH
31612: LD_INT 5
31614: ST_TO_ADDR
// end ;
31615: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31616: LD_EXP 118
31620: PUSH
31621: LD_INT 34
31623: PUSH
31624: LD_EXP 43
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PPUSH
31633: CALL_OW 69
31637: AND
31638: IFFALSE 32101
31640: GO 31642
31642: DISABLE
31643: LD_INT 0
31645: PPUSH
31646: PPUSH
31647: PPUSH
31648: PPUSH
// begin enable ;
31649: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31650: LD_ADDR_VAR 0 1
31654: PUSH
31655: LD_INT 34
31657: PUSH
31658: LD_EXP 43
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PPUSH
31667: CALL_OW 69
31671: PUSH
31672: FOR_IN
31673: IFFALSE 31745
// begin if not i in minersList then
31675: LD_VAR 0 1
31679: PUSH
31680: LD_EXP 119
31684: IN
31685: NOT
31686: IFFALSE 31743
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31688: LD_ADDR_EXP 119
31692: PUSH
31693: LD_EXP 119
31697: PPUSH
31698: LD_EXP 119
31702: PUSH
31703: LD_INT 1
31705: PLUS
31706: PPUSH
31707: LD_VAR 0 1
31711: PPUSH
31712: CALL_OW 1
31716: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31717: LD_ADDR_EXP 120
31721: PUSH
31722: LD_EXP 120
31726: PPUSH
31727: LD_EXP 120
31731: PUSH
31732: LD_INT 1
31734: PLUS
31735: PPUSH
31736: EMPTY
31737: PPUSH
31738: CALL_OW 1
31742: ST_TO_ADDR
// end end ;
31743: GO 31672
31745: POP
31746: POP
// for i := minerMinesList downto 1 do
31747: LD_ADDR_VAR 0 1
31751: PUSH
31752: DOUBLE
31753: LD_EXP 120
31757: INC
31758: ST_TO_ADDR
31759: LD_INT 1
31761: PUSH
31762: FOR_DOWNTO
31763: IFFALSE 32099
// begin if IsLive ( minersList [ i ] ) then
31765: LD_EXP 119
31769: PUSH
31770: LD_VAR 0 1
31774: ARRAY
31775: PPUSH
31776: CALL_OW 300
31780: IFFALSE 31808
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31782: LD_EXP 119
31786: PUSH
31787: LD_VAR 0 1
31791: ARRAY
31792: PPUSH
31793: LD_EXP 120
31797: PUSH
31798: LD_VAR 0 1
31802: ARRAY
31803: PPUSH
31804: CALL_OW 505
// if not minerMinesList [ i ] then
31808: LD_EXP 120
31812: PUSH
31813: LD_VAR 0 1
31817: ARRAY
31818: NOT
31819: IFFALSE 31823
// continue ;
31821: GO 31762
// for j := minerMinesList [ i ] downto 1 do
31823: LD_ADDR_VAR 0 2
31827: PUSH
31828: DOUBLE
31829: LD_EXP 120
31833: PUSH
31834: LD_VAR 0 1
31838: ARRAY
31839: INC
31840: ST_TO_ADDR
31841: LD_INT 1
31843: PUSH
31844: FOR_DOWNTO
31845: IFFALSE 32095
// begin side := GetSide ( minersList [ i ] ) ;
31847: LD_ADDR_VAR 0 3
31851: PUSH
31852: LD_EXP 119
31856: PUSH
31857: LD_VAR 0 1
31861: ARRAY
31862: PPUSH
31863: CALL_OW 255
31867: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31868: LD_ADDR_VAR 0 4
31872: PUSH
31873: LD_EXP 120
31877: PUSH
31878: LD_VAR 0 1
31882: ARRAY
31883: PUSH
31884: LD_VAR 0 2
31888: ARRAY
31889: PUSH
31890: LD_INT 1
31892: ARRAY
31893: PPUSH
31894: LD_EXP 120
31898: PUSH
31899: LD_VAR 0 1
31903: ARRAY
31904: PUSH
31905: LD_VAR 0 2
31909: ARRAY
31910: PUSH
31911: LD_INT 2
31913: ARRAY
31914: PPUSH
31915: CALL_OW 428
31919: ST_TO_ADDR
// if not tmp then
31920: LD_VAR 0 4
31924: NOT
31925: IFFALSE 31929
// continue ;
31927: GO 31844
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31929: LD_VAR 0 4
31933: PUSH
31934: LD_INT 81
31936: PUSH
31937: LD_VAR 0 3
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PPUSH
31946: CALL_OW 69
31950: IN
31951: PUSH
31952: LD_EXP 120
31956: PUSH
31957: LD_VAR 0 1
31961: ARRAY
31962: PUSH
31963: LD_VAR 0 2
31967: ARRAY
31968: PUSH
31969: LD_INT 1
31971: ARRAY
31972: PPUSH
31973: LD_EXP 120
31977: PUSH
31978: LD_VAR 0 1
31982: ARRAY
31983: PUSH
31984: LD_VAR 0 2
31988: ARRAY
31989: PUSH
31990: LD_INT 2
31992: ARRAY
31993: PPUSH
31994: CALL_OW 458
31998: AND
31999: IFFALSE 32093
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32001: LD_EXP 120
32005: PUSH
32006: LD_VAR 0 1
32010: ARRAY
32011: PUSH
32012: LD_VAR 0 2
32016: ARRAY
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: PPUSH
32022: LD_EXP 120
32026: PUSH
32027: LD_VAR 0 1
32031: ARRAY
32032: PUSH
32033: LD_VAR 0 2
32037: ARRAY
32038: PUSH
32039: LD_INT 2
32041: ARRAY
32042: PPUSH
32043: LD_VAR 0 3
32047: PPUSH
32048: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32052: LD_ADDR_EXP 120
32056: PUSH
32057: LD_EXP 120
32061: PPUSH
32062: LD_VAR 0 1
32066: PPUSH
32067: LD_EXP 120
32071: PUSH
32072: LD_VAR 0 1
32076: ARRAY
32077: PPUSH
32078: LD_VAR 0 2
32082: PPUSH
32083: CALL_OW 3
32087: PPUSH
32088: CALL_OW 1
32092: ST_TO_ADDR
// end ; end ;
32093: GO 31844
32095: POP
32096: POP
// end ;
32097: GO 31762
32099: POP
32100: POP
// end ;
32101: PPOPN 4
32103: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
// result := false ;
32108: LD_ADDR_VAR 0 4
32112: PUSH
32113: LD_INT 0
32115: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32116: LD_VAR 0 1
32120: PPUSH
32121: CALL_OW 264
32125: PUSH
32126: LD_EXP 43
32130: EQUAL
32131: NOT
32132: IFFALSE 32136
// exit ;
32134: GO 32376
// index := GetElementIndex ( minersList , unit ) ;
32136: LD_ADDR_VAR 0 5
32140: PUSH
32141: LD_EXP 119
32145: PPUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL 38360 0 2
32155: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32156: LD_EXP 120
32160: PUSH
32161: LD_VAR 0 5
32165: ARRAY
32166: PUSH
32167: LD_EXP 121
32171: GREATEREQUAL
32172: IFFALSE 32176
// exit ;
32174: GO 32376
// ComMoveXY ( unit , x , y ) ;
32176: LD_VAR 0 1
32180: PPUSH
32181: LD_VAR 0 2
32185: PPUSH
32186: LD_VAR 0 3
32190: PPUSH
32191: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32195: LD_INT 35
32197: PPUSH
32198: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32202: LD_VAR 0 1
32206: PPUSH
32207: LD_VAR 0 2
32211: PPUSH
32212: LD_VAR 0 3
32216: PPUSH
32217: CALL 69132 0 3
32221: NOT
32222: PUSH
32223: LD_VAR 0 1
32227: PPUSH
32228: CALL_OW 314
32232: AND
32233: IFFALSE 32237
// exit ;
32235: GO 32376
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32237: LD_VAR 0 2
32241: PPUSH
32242: LD_VAR 0 3
32246: PPUSH
32247: CALL_OW 428
32251: PUSH
32252: LD_VAR 0 1
32256: EQUAL
32257: PUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 314
32267: NOT
32268: AND
32269: IFFALSE 32195
// PlaySoundXY ( x , y , PlantMine ) ;
32271: LD_VAR 0 2
32275: PPUSH
32276: LD_VAR 0 3
32280: PPUSH
32281: LD_STRING PlantMine
32283: PPUSH
32284: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32288: LD_VAR 0 2
32292: PPUSH
32293: LD_VAR 0 3
32297: PPUSH
32298: LD_VAR 0 1
32302: PPUSH
32303: CALL_OW 255
32307: PPUSH
32308: LD_INT 0
32310: PPUSH
32311: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32315: LD_ADDR_EXP 120
32319: PUSH
32320: LD_EXP 120
32324: PPUSH
32325: LD_VAR 0 5
32329: PUSH
32330: LD_EXP 120
32334: PUSH
32335: LD_VAR 0 5
32339: ARRAY
32340: PUSH
32341: LD_INT 1
32343: PLUS
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PPUSH
32349: LD_VAR 0 2
32353: PUSH
32354: LD_VAR 0 3
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PPUSH
32363: CALL 38575 0 3
32367: ST_TO_ADDR
// result := true ;
32368: LD_ADDR_VAR 0 4
32372: PUSH
32373: LD_INT 1
32375: ST_TO_ADDR
// end ;
32376: LD_VAR 0 4
32380: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
32385: PPUSH
// if not unit in minersList then
32386: LD_VAR 0 1
32390: PUSH
32391: LD_EXP 119
32395: IN
32396: NOT
32397: IFFALSE 32401
// exit ;
32399: GO 32793
// index := GetElementIndex ( minersList , unit ) ;
32401: LD_ADDR_VAR 0 6
32405: PUSH
32406: LD_EXP 119
32410: PPUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL 38360 0 2
32420: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32421: LD_ADDR_VAR 0 5
32425: PUSH
32426: DOUBLE
32427: LD_EXP 120
32431: PUSH
32432: LD_VAR 0 6
32436: ARRAY
32437: INC
32438: ST_TO_ADDR
32439: LD_INT 1
32441: PUSH
32442: FOR_DOWNTO
32443: IFFALSE 32604
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32445: LD_EXP 120
32449: PUSH
32450: LD_VAR 0 6
32454: ARRAY
32455: PUSH
32456: LD_VAR 0 5
32460: ARRAY
32461: PUSH
32462: LD_INT 1
32464: ARRAY
32465: PUSH
32466: LD_VAR 0 2
32470: EQUAL
32471: PUSH
32472: LD_EXP 120
32476: PUSH
32477: LD_VAR 0 6
32481: ARRAY
32482: PUSH
32483: LD_VAR 0 5
32487: ARRAY
32488: PUSH
32489: LD_INT 2
32491: ARRAY
32492: PUSH
32493: LD_VAR 0 3
32497: EQUAL
32498: AND
32499: IFFALSE 32602
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32501: LD_EXP 120
32505: PUSH
32506: LD_VAR 0 6
32510: ARRAY
32511: PUSH
32512: LD_VAR 0 5
32516: ARRAY
32517: PUSH
32518: LD_INT 1
32520: ARRAY
32521: PPUSH
32522: LD_EXP 120
32526: PUSH
32527: LD_VAR 0 6
32531: ARRAY
32532: PUSH
32533: LD_VAR 0 5
32537: ARRAY
32538: PUSH
32539: LD_INT 2
32541: ARRAY
32542: PPUSH
32543: LD_VAR 0 1
32547: PPUSH
32548: CALL_OW 255
32552: PPUSH
32553: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32557: LD_ADDR_EXP 120
32561: PUSH
32562: LD_EXP 120
32566: PPUSH
32567: LD_VAR 0 6
32571: PPUSH
32572: LD_EXP 120
32576: PUSH
32577: LD_VAR 0 6
32581: ARRAY
32582: PPUSH
32583: LD_VAR 0 5
32587: PPUSH
32588: CALL_OW 3
32592: PPUSH
32593: CALL_OW 1
32597: ST_TO_ADDR
// exit ;
32598: POP
32599: POP
32600: GO 32793
// end ; end ;
32602: GO 32442
32604: POP
32605: POP
// for i := minerMinesList [ index ] downto 1 do
32606: LD_ADDR_VAR 0 5
32610: PUSH
32611: DOUBLE
32612: LD_EXP 120
32616: PUSH
32617: LD_VAR 0 6
32621: ARRAY
32622: INC
32623: ST_TO_ADDR
32624: LD_INT 1
32626: PUSH
32627: FOR_DOWNTO
32628: IFFALSE 32791
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32630: LD_EXP 120
32634: PUSH
32635: LD_VAR 0 6
32639: ARRAY
32640: PUSH
32641: LD_VAR 0 5
32645: ARRAY
32646: PUSH
32647: LD_INT 1
32649: ARRAY
32650: PPUSH
32651: LD_EXP 120
32655: PUSH
32656: LD_VAR 0 6
32660: ARRAY
32661: PUSH
32662: LD_VAR 0 5
32666: ARRAY
32667: PUSH
32668: LD_INT 2
32670: ARRAY
32671: PPUSH
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: CALL_OW 298
32686: PUSH
32687: LD_INT 6
32689: LESS
32690: IFFALSE 32789
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32692: LD_EXP 120
32696: PUSH
32697: LD_VAR 0 6
32701: ARRAY
32702: PUSH
32703: LD_VAR 0 5
32707: ARRAY
32708: PUSH
32709: LD_INT 1
32711: ARRAY
32712: PPUSH
32713: LD_EXP 120
32717: PUSH
32718: LD_VAR 0 6
32722: ARRAY
32723: PUSH
32724: LD_VAR 0 5
32728: ARRAY
32729: PUSH
32730: LD_INT 2
32732: ARRAY
32733: PPUSH
32734: LD_VAR 0 1
32738: PPUSH
32739: CALL_OW 255
32743: PPUSH
32744: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32748: LD_ADDR_EXP 120
32752: PUSH
32753: LD_EXP 120
32757: PPUSH
32758: LD_VAR 0 6
32762: PPUSH
32763: LD_EXP 120
32767: PUSH
32768: LD_VAR 0 6
32772: ARRAY
32773: PPUSH
32774: LD_VAR 0 5
32778: PPUSH
32779: CALL_OW 3
32783: PPUSH
32784: CALL_OW 1
32788: ST_TO_ADDR
// end ; end ;
32789: GO 32627
32791: POP
32792: POP
// end ;
32793: LD_VAR 0 4
32797: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32798: LD_INT 0
32800: PPUSH
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32809: LD_VAR 0 1
32813: PPUSH
32814: CALL_OW 264
32818: PUSH
32819: LD_EXP 43
32823: EQUAL
32824: NOT
32825: PUSH
32826: LD_VAR 0 1
32830: PUSH
32831: LD_EXP 119
32835: IN
32836: NOT
32837: OR
32838: IFFALSE 32842
// exit ;
32840: GO 33164
// index := GetElementIndex ( minersList , unit ) ;
32842: LD_ADDR_VAR 0 6
32846: PUSH
32847: LD_EXP 119
32851: PPUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL 38360 0 2
32861: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32862: LD_ADDR_VAR 0 8
32866: PUSH
32867: LD_EXP 121
32871: PUSH
32872: LD_EXP 120
32876: PUSH
32877: LD_VAR 0 6
32881: ARRAY
32882: MINUS
32883: ST_TO_ADDR
// if not minesFreeAmount then
32884: LD_VAR 0 8
32888: NOT
32889: IFFALSE 32893
// exit ;
32891: GO 33164
// tmp := [ ] ;
32893: LD_ADDR_VAR 0 7
32897: PUSH
32898: EMPTY
32899: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32900: LD_ADDR_VAR 0 5
32904: PUSH
32905: DOUBLE
32906: LD_INT 1
32908: DEC
32909: ST_TO_ADDR
32910: LD_VAR 0 8
32914: PUSH
32915: FOR_TO
32916: IFFALSE 33111
// begin _d := rand ( 0 , 5 ) ;
32918: LD_ADDR_VAR 0 11
32922: PUSH
32923: LD_INT 0
32925: PPUSH
32926: LD_INT 5
32928: PPUSH
32929: CALL_OW 12
32933: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32934: LD_ADDR_VAR 0 12
32938: PUSH
32939: LD_INT 2
32941: PPUSH
32942: LD_INT 6
32944: PPUSH
32945: CALL_OW 12
32949: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32950: LD_ADDR_VAR 0 9
32954: PUSH
32955: LD_VAR 0 2
32959: PPUSH
32960: LD_VAR 0 11
32964: PPUSH
32965: LD_VAR 0 12
32969: PPUSH
32970: CALL_OW 272
32974: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32975: LD_ADDR_VAR 0 10
32979: PUSH
32980: LD_VAR 0 3
32984: PPUSH
32985: LD_VAR 0 11
32989: PPUSH
32990: LD_VAR 0 12
32994: PPUSH
32995: CALL_OW 273
32999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33000: LD_VAR 0 9
33004: PPUSH
33005: LD_VAR 0 10
33009: PPUSH
33010: CALL_OW 488
33014: PUSH
33015: LD_VAR 0 9
33019: PUSH
33020: LD_VAR 0 10
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_VAR 0 7
33033: IN
33034: NOT
33035: AND
33036: PUSH
33037: LD_VAR 0 9
33041: PPUSH
33042: LD_VAR 0 10
33046: PPUSH
33047: CALL_OW 458
33051: NOT
33052: AND
33053: IFFALSE 33095
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33055: LD_ADDR_VAR 0 7
33059: PUSH
33060: LD_VAR 0 7
33064: PPUSH
33065: LD_VAR 0 7
33069: PUSH
33070: LD_INT 1
33072: PLUS
33073: PPUSH
33074: LD_VAR 0 9
33078: PUSH
33079: LD_VAR 0 10
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PPUSH
33088: CALL_OW 1
33092: ST_TO_ADDR
33093: GO 33109
// i := i - 1 ;
33095: LD_ADDR_VAR 0 5
33099: PUSH
33100: LD_VAR 0 5
33104: PUSH
33105: LD_INT 1
33107: MINUS
33108: ST_TO_ADDR
// end ;
33109: GO 32915
33111: POP
33112: POP
// for i in tmp do
33113: LD_ADDR_VAR 0 5
33117: PUSH
33118: LD_VAR 0 7
33122: PUSH
33123: FOR_IN
33124: IFFALSE 33162
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33126: LD_VAR 0 1
33130: PPUSH
33131: LD_VAR 0 5
33135: PUSH
33136: LD_INT 1
33138: ARRAY
33139: PPUSH
33140: LD_VAR 0 5
33144: PUSH
33145: LD_INT 2
33147: ARRAY
33148: PPUSH
33149: CALL 32104 0 3
33153: NOT
33154: IFFALSE 33160
// exit ;
33156: POP
33157: POP
33158: GO 33164
33160: GO 33123
33162: POP
33163: POP
// end ;
33164: LD_VAR 0 4
33168: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33169: LD_INT 0
33171: PPUSH
33172: PPUSH
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
// if not GetClass ( unit ) = class_sniper then
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 257
33187: PUSH
33188: LD_INT 5
33190: EQUAL
33191: NOT
33192: IFFALSE 33196
// exit ;
33194: GO 33584
// dist := 8 ;
33196: LD_ADDR_VAR 0 5
33200: PUSH
33201: LD_INT 8
33203: ST_TO_ADDR
// viewRange := 12 ;
33204: LD_ADDR_VAR 0 7
33208: PUSH
33209: LD_INT 12
33211: ST_TO_ADDR
// side := GetSide ( unit ) ;
33212: LD_ADDR_VAR 0 6
33216: PUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL_OW 255
33226: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33227: LD_INT 61
33229: PPUSH
33230: LD_VAR 0 6
33234: PPUSH
33235: CALL_OW 321
33239: PUSH
33240: LD_INT 2
33242: EQUAL
33243: IFFALSE 33253
// viewRange := 16 ;
33245: LD_ADDR_VAR 0 7
33249: PUSH
33250: LD_INT 16
33252: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_VAR 0 2
33262: PPUSH
33263: LD_VAR 0 3
33267: PPUSH
33268: CALL_OW 297
33272: PUSH
33273: LD_VAR 0 5
33277: GREATER
33278: IFFALSE 33357
// begin ComMoveXY ( unit , x , y ) ;
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_VAR 0 2
33289: PPUSH
33290: LD_VAR 0 3
33294: PPUSH
33295: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33299: LD_INT 35
33301: PPUSH
33302: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33306: LD_VAR 0 1
33310: PPUSH
33311: LD_VAR 0 2
33315: PPUSH
33316: LD_VAR 0 3
33320: PPUSH
33321: CALL 69132 0 3
33325: NOT
33326: IFFALSE 33330
// exit ;
33328: GO 33584
// until GetDistUnitXY ( unit , x , y ) < dist ;
33330: LD_VAR 0 1
33334: PPUSH
33335: LD_VAR 0 2
33339: PPUSH
33340: LD_VAR 0 3
33344: PPUSH
33345: CALL_OW 297
33349: PUSH
33350: LD_VAR 0 5
33354: LESS
33355: IFFALSE 33299
// end ; ComTurnXY ( unit , x , y ) ;
33357: LD_VAR 0 1
33361: PPUSH
33362: LD_VAR 0 2
33366: PPUSH
33367: LD_VAR 0 3
33371: PPUSH
33372: CALL_OW 118
// wait ( 5 ) ;
33376: LD_INT 5
33378: PPUSH
33379: CALL_OW 67
// _d := GetDir ( unit ) ;
33383: LD_ADDR_VAR 0 10
33387: PUSH
33388: LD_VAR 0 1
33392: PPUSH
33393: CALL_OW 254
33397: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33398: LD_ADDR_VAR 0 8
33402: PUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 250
33412: PPUSH
33413: LD_VAR 0 10
33417: PPUSH
33418: LD_VAR 0 5
33422: PPUSH
33423: CALL_OW 272
33427: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33428: LD_ADDR_VAR 0 9
33432: PUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 251
33442: PPUSH
33443: LD_VAR 0 10
33447: PPUSH
33448: LD_VAR 0 5
33452: PPUSH
33453: CALL_OW 273
33457: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33458: LD_VAR 0 8
33462: PPUSH
33463: LD_VAR 0 9
33467: PPUSH
33468: CALL_OW 488
33472: NOT
33473: IFFALSE 33477
// exit ;
33475: GO 33584
// ComAnimCustom ( unit , 1 ) ;
33477: LD_VAR 0 1
33481: PPUSH
33482: LD_INT 1
33484: PPUSH
33485: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33489: LD_VAR 0 8
33493: PPUSH
33494: LD_VAR 0 9
33498: PPUSH
33499: LD_VAR 0 6
33503: PPUSH
33504: LD_VAR 0 7
33508: PPUSH
33509: CALL_OW 330
// repeat wait ( 1 ) ;
33513: LD_INT 1
33515: PPUSH
33516: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33520: LD_VAR 0 1
33524: PPUSH
33525: CALL_OW 316
33529: PUSH
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 314
33539: OR
33540: PUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 302
33550: NOT
33551: OR
33552: PUSH
33553: LD_VAR 0 1
33557: PPUSH
33558: CALL_OW 301
33562: OR
33563: IFFALSE 33513
// RemoveSeeing ( _x , _y , side ) ;
33565: LD_VAR 0 8
33569: PPUSH
33570: LD_VAR 0 9
33574: PPUSH
33575: LD_VAR 0 6
33579: PPUSH
33580: CALL_OW 331
// end ; end_of_file
33584: LD_VAR 0 4
33588: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
// if exist_mode then
33593: LD_VAR 0 2
33597: IFFALSE 33622
// unit := CreateCharacter ( prefix & ident ) else
33599: LD_ADDR_VAR 0 5
33603: PUSH
33604: LD_VAR 0 3
33608: PUSH
33609: LD_VAR 0 1
33613: STR
33614: PPUSH
33615: CALL_OW 34
33619: ST_TO_ADDR
33620: GO 33637
// unit := NewCharacter ( ident ) ;
33622: LD_ADDR_VAR 0 5
33626: PUSH
33627: LD_VAR 0 1
33631: PPUSH
33632: CALL_OW 25
33636: ST_TO_ADDR
// result := unit ;
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_VAR 0 5
33646: ST_TO_ADDR
// end ;
33647: LD_VAR 0 4
33651: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33652: LD_INT 0
33654: PPUSH
33655: PPUSH
// if not side or not nation then
33656: LD_VAR 0 1
33660: NOT
33661: PUSH
33662: LD_VAR 0 2
33666: NOT
33667: OR
33668: IFFALSE 33672
// exit ;
33670: GO 34440
// case nation of nation_american :
33672: LD_VAR 0 2
33676: PUSH
33677: LD_INT 1
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33899
33685: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33686: LD_ADDR_VAR 0 4
33690: PUSH
33691: LD_INT 35
33693: PUSH
33694: LD_INT 45
33696: PUSH
33697: LD_INT 46
33699: PUSH
33700: LD_INT 47
33702: PUSH
33703: LD_INT 82
33705: PUSH
33706: LD_INT 83
33708: PUSH
33709: LD_INT 84
33711: PUSH
33712: LD_INT 85
33714: PUSH
33715: LD_INT 86
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 6
33726: PUSH
33727: LD_INT 15
33729: PUSH
33730: LD_INT 16
33732: PUSH
33733: LD_INT 7
33735: PUSH
33736: LD_INT 12
33738: PUSH
33739: LD_INT 13
33741: PUSH
33742: LD_INT 10
33744: PUSH
33745: LD_INT 14
33747: PUSH
33748: LD_INT 20
33750: PUSH
33751: LD_INT 21
33753: PUSH
33754: LD_INT 22
33756: PUSH
33757: LD_INT 25
33759: PUSH
33760: LD_INT 32
33762: PUSH
33763: LD_INT 27
33765: PUSH
33766: LD_INT 36
33768: PUSH
33769: LD_INT 69
33771: PUSH
33772: LD_INT 39
33774: PUSH
33775: LD_INT 34
33777: PUSH
33778: LD_INT 40
33780: PUSH
33781: LD_INT 48
33783: PUSH
33784: LD_INT 49
33786: PUSH
33787: LD_INT 50
33789: PUSH
33790: LD_INT 51
33792: PUSH
33793: LD_INT 52
33795: PUSH
33796: LD_INT 53
33798: PUSH
33799: LD_INT 54
33801: PUSH
33802: LD_INT 55
33804: PUSH
33805: LD_INT 56
33807: PUSH
33808: LD_INT 57
33810: PUSH
33811: LD_INT 58
33813: PUSH
33814: LD_INT 59
33816: PUSH
33817: LD_INT 60
33819: PUSH
33820: LD_INT 61
33822: PUSH
33823: LD_INT 62
33825: PUSH
33826: LD_INT 80
33828: PUSH
33829: LD_INT 82
33831: PUSH
33832: LD_INT 83
33834: PUSH
33835: LD_INT 84
33837: PUSH
33838: LD_INT 85
33840: PUSH
33841: LD_INT 86
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: ST_TO_ADDR
33897: GO 34364
33899: LD_INT 2
33901: DOUBLE
33902: EQUAL
33903: IFTRUE 33907
33905: GO 34133
33907: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33908: LD_ADDR_VAR 0 4
33912: PUSH
33913: LD_INT 35
33915: PUSH
33916: LD_INT 45
33918: PUSH
33919: LD_INT 46
33921: PUSH
33922: LD_INT 47
33924: PUSH
33925: LD_INT 82
33927: PUSH
33928: LD_INT 83
33930: PUSH
33931: LD_INT 84
33933: PUSH
33934: LD_INT 85
33936: PUSH
33937: LD_INT 87
33939: PUSH
33940: LD_INT 70
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 11
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: LD_INT 6
33960: PUSH
33961: LD_INT 15
33963: PUSH
33964: LD_INT 18
33966: PUSH
33967: LD_INT 7
33969: PUSH
33970: LD_INT 17
33972: PUSH
33973: LD_INT 8
33975: PUSH
33976: LD_INT 20
33978: PUSH
33979: LD_INT 21
33981: PUSH
33982: LD_INT 22
33984: PUSH
33985: LD_INT 72
33987: PUSH
33988: LD_INT 26
33990: PUSH
33991: LD_INT 69
33993: PUSH
33994: LD_INT 39
33996: PUSH
33997: LD_INT 40
33999: PUSH
34000: LD_INT 41
34002: PUSH
34003: LD_INT 42
34005: PUSH
34006: LD_INT 43
34008: PUSH
34009: LD_INT 48
34011: PUSH
34012: LD_INT 49
34014: PUSH
34015: LD_INT 50
34017: PUSH
34018: LD_INT 51
34020: PUSH
34021: LD_INT 52
34023: PUSH
34024: LD_INT 53
34026: PUSH
34027: LD_INT 54
34029: PUSH
34030: LD_INT 55
34032: PUSH
34033: LD_INT 56
34035: PUSH
34036: LD_INT 60
34038: PUSH
34039: LD_INT 61
34041: PUSH
34042: LD_INT 62
34044: PUSH
34045: LD_INT 66
34047: PUSH
34048: LD_INT 67
34050: PUSH
34051: LD_INT 68
34053: PUSH
34054: LD_INT 81
34056: PUSH
34057: LD_INT 82
34059: PUSH
34060: LD_INT 83
34062: PUSH
34063: LD_INT 84
34065: PUSH
34066: LD_INT 85
34068: PUSH
34069: LD_INT 87
34071: PUSH
34072: LD_INT 88
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
34131: GO 34364
34133: LD_INT 3
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34363
34141: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34142: LD_ADDR_VAR 0 4
34146: PUSH
34147: LD_INT 46
34149: PUSH
34150: LD_INT 47
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: LD_INT 82
34161: PUSH
34162: LD_INT 83
34164: PUSH
34165: LD_INT 84
34167: PUSH
34168: LD_INT 85
34170: PUSH
34171: LD_INT 86
34173: PUSH
34174: LD_INT 11
34176: PUSH
34177: LD_INT 9
34179: PUSH
34180: LD_INT 20
34182: PUSH
34183: LD_INT 19
34185: PUSH
34186: LD_INT 21
34188: PUSH
34189: LD_INT 24
34191: PUSH
34192: LD_INT 22
34194: PUSH
34195: LD_INT 25
34197: PUSH
34198: LD_INT 28
34200: PUSH
34201: LD_INT 29
34203: PUSH
34204: LD_INT 30
34206: PUSH
34207: LD_INT 31
34209: PUSH
34210: LD_INT 37
34212: PUSH
34213: LD_INT 38
34215: PUSH
34216: LD_INT 32
34218: PUSH
34219: LD_INT 27
34221: PUSH
34222: LD_INT 33
34224: PUSH
34225: LD_INT 69
34227: PUSH
34228: LD_INT 39
34230: PUSH
34231: LD_INT 34
34233: PUSH
34234: LD_INT 40
34236: PUSH
34237: LD_INT 71
34239: PUSH
34240: LD_INT 23
34242: PUSH
34243: LD_INT 44
34245: PUSH
34246: LD_INT 48
34248: PUSH
34249: LD_INT 49
34251: PUSH
34252: LD_INT 50
34254: PUSH
34255: LD_INT 51
34257: PUSH
34258: LD_INT 52
34260: PUSH
34261: LD_INT 53
34263: PUSH
34264: LD_INT 54
34266: PUSH
34267: LD_INT 55
34269: PUSH
34270: LD_INT 56
34272: PUSH
34273: LD_INT 57
34275: PUSH
34276: LD_INT 58
34278: PUSH
34279: LD_INT 59
34281: PUSH
34282: LD_INT 63
34284: PUSH
34285: LD_INT 64
34287: PUSH
34288: LD_INT 65
34290: PUSH
34291: LD_INT 82
34293: PUSH
34294: LD_INT 83
34296: PUSH
34297: LD_INT 84
34299: PUSH
34300: LD_INT 85
34302: PUSH
34303: LD_INT 86
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: ST_TO_ADDR
34361: GO 34364
34363: POP
// if state > - 1 and state < 3 then
34364: LD_VAR 0 3
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: GREATER
34373: PUSH
34374: LD_VAR 0 3
34378: PUSH
34379: LD_INT 3
34381: LESS
34382: AND
34383: IFFALSE 34440
// for i in result do
34385: LD_ADDR_VAR 0 5
34389: PUSH
34390: LD_VAR 0 4
34394: PUSH
34395: FOR_IN
34396: IFFALSE 34438
// if GetTech ( i , side ) <> state then
34398: LD_VAR 0 5
34402: PPUSH
34403: LD_VAR 0 1
34407: PPUSH
34408: CALL_OW 321
34412: PUSH
34413: LD_VAR 0 3
34417: NONEQUAL
34418: IFFALSE 34436
// result := result diff i ;
34420: LD_ADDR_VAR 0 4
34424: PUSH
34425: LD_VAR 0 4
34429: PUSH
34430: LD_VAR 0 5
34434: DIFF
34435: ST_TO_ADDR
34436: GO 34395
34438: POP
34439: POP
// end ;
34440: LD_VAR 0 4
34444: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34445: LD_INT 0
34447: PPUSH
34448: PPUSH
34449: PPUSH
// result := true ;
34450: LD_ADDR_VAR 0 3
34454: PUSH
34455: LD_INT 1
34457: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34458: LD_ADDR_VAR 0 5
34462: PUSH
34463: LD_VAR 0 2
34467: PPUSH
34468: CALL_OW 480
34472: ST_TO_ADDR
// if not tmp then
34473: LD_VAR 0 5
34477: NOT
34478: IFFALSE 34482
// exit ;
34480: GO 34531
// for i in tmp do
34482: LD_ADDR_VAR 0 4
34486: PUSH
34487: LD_VAR 0 5
34491: PUSH
34492: FOR_IN
34493: IFFALSE 34529
// if GetTech ( i , side ) <> state_researched then
34495: LD_VAR 0 4
34499: PPUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 321
34509: PUSH
34510: LD_INT 2
34512: NONEQUAL
34513: IFFALSE 34527
// begin result := false ;
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: LD_INT 0
34522: ST_TO_ADDR
// exit ;
34523: POP
34524: POP
34525: GO 34531
// end ;
34527: GO 34492
34529: POP
34530: POP
// end ;
34531: LD_VAR 0 3
34535: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34536: LD_INT 0
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
34550: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34551: LD_VAR 0 1
34555: NOT
34556: PUSH
34557: LD_VAR 0 1
34561: PPUSH
34562: CALL_OW 257
34566: PUSH
34567: LD_INT 9
34569: NONEQUAL
34570: OR
34571: IFFALSE 34575
// exit ;
34573: GO 35148
// side := GetSide ( unit ) ;
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 255
34589: ST_TO_ADDR
// tech_space := tech_spacanom ;
34590: LD_ADDR_VAR 0 12
34594: PUSH
34595: LD_INT 29
34597: ST_TO_ADDR
// tech_time := tech_taurad ;
34598: LD_ADDR_VAR 0 13
34602: PUSH
34603: LD_INT 28
34605: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34606: LD_ADDR_VAR 0 11
34610: PUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 310
34620: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34621: LD_VAR 0 11
34625: PPUSH
34626: CALL_OW 247
34630: PUSH
34631: LD_INT 2
34633: EQUAL
34634: IFFALSE 34638
// exit ;
34636: GO 35148
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34638: LD_ADDR_VAR 0 8
34642: PUSH
34643: LD_INT 81
34645: PUSH
34646: LD_VAR 0 9
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: LD_INT 21
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PPUSH
34676: CALL_OW 69
34680: ST_TO_ADDR
// if not tmp then
34681: LD_VAR 0 8
34685: NOT
34686: IFFALSE 34690
// exit ;
34688: GO 35148
// if in_unit then
34690: LD_VAR 0 11
34694: IFFALSE 34718
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34696: LD_ADDR_VAR 0 10
34700: PUSH
34701: LD_VAR 0 8
34705: PPUSH
34706: LD_VAR 0 11
34710: PPUSH
34711: CALL_OW 74
34715: ST_TO_ADDR
34716: GO 34738
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34718: LD_ADDR_VAR 0 10
34722: PUSH
34723: LD_VAR 0 8
34727: PPUSH
34728: LD_VAR 0 1
34732: PPUSH
34733: CALL_OW 74
34737: ST_TO_ADDR
// if not enemy then
34738: LD_VAR 0 10
34742: NOT
34743: IFFALSE 34747
// exit ;
34745: GO 35148
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34747: LD_VAR 0 11
34751: PUSH
34752: LD_VAR 0 11
34756: PPUSH
34757: LD_VAR 0 10
34761: PPUSH
34762: CALL_OW 296
34766: PUSH
34767: LD_INT 13
34769: GREATER
34770: AND
34771: PUSH
34772: LD_VAR 0 1
34776: PPUSH
34777: LD_VAR 0 10
34781: PPUSH
34782: CALL_OW 296
34786: PUSH
34787: LD_INT 12
34789: GREATER
34790: OR
34791: IFFALSE 34795
// exit ;
34793: GO 35148
// missile := [ 1 ] ;
34795: LD_ADDR_VAR 0 14
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34806: LD_VAR 0 9
34810: PPUSH
34811: LD_VAR 0 12
34815: PPUSH
34816: CALL_OW 325
34820: IFFALSE 34849
// missile := Insert ( missile , missile + 1 , 2 ) ;
34822: LD_ADDR_VAR 0 14
34826: PUSH
34827: LD_VAR 0 14
34831: PPUSH
34832: LD_VAR 0 14
34836: PUSH
34837: LD_INT 1
34839: PLUS
34840: PPUSH
34841: LD_INT 2
34843: PPUSH
34844: CALL_OW 2
34848: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34849: LD_VAR 0 9
34853: PPUSH
34854: LD_VAR 0 13
34858: PPUSH
34859: CALL_OW 325
34863: PUSH
34864: LD_VAR 0 10
34868: PPUSH
34869: CALL_OW 255
34873: PPUSH
34874: LD_VAR 0 13
34878: PPUSH
34879: CALL_OW 325
34883: NOT
34884: AND
34885: IFFALSE 34914
// missile := Insert ( missile , missile + 1 , 3 ) ;
34887: LD_ADDR_VAR 0 14
34891: PUSH
34892: LD_VAR 0 14
34896: PPUSH
34897: LD_VAR 0 14
34901: PUSH
34902: LD_INT 1
34904: PLUS
34905: PPUSH
34906: LD_INT 3
34908: PPUSH
34909: CALL_OW 2
34913: ST_TO_ADDR
// if missile < 2 then
34914: LD_VAR 0 14
34918: PUSH
34919: LD_INT 2
34921: LESS
34922: IFFALSE 34926
// exit ;
34924: GO 35148
// x := GetX ( enemy ) ;
34926: LD_ADDR_VAR 0 4
34930: PUSH
34931: LD_VAR 0 10
34935: PPUSH
34936: CALL_OW 250
34940: ST_TO_ADDR
// y := GetY ( enemy ) ;
34941: LD_ADDR_VAR 0 5
34945: PUSH
34946: LD_VAR 0 10
34950: PPUSH
34951: CALL_OW 251
34955: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34956: LD_ADDR_VAR 0 6
34960: PUSH
34961: LD_VAR 0 4
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PPUSH
34970: LD_INT 1
34972: PPUSH
34973: CALL_OW 12
34977: PLUS
34978: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34979: LD_ADDR_VAR 0 7
34983: PUSH
34984: LD_VAR 0 5
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PPUSH
34993: LD_INT 1
34995: PPUSH
34996: CALL_OW 12
35000: PLUS
35001: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35002: LD_VAR 0 6
35006: PPUSH
35007: LD_VAR 0 7
35011: PPUSH
35012: CALL_OW 488
35016: NOT
35017: IFFALSE 35039
// begin _x := x ;
35019: LD_ADDR_VAR 0 6
35023: PUSH
35024: LD_VAR 0 4
35028: ST_TO_ADDR
// _y := y ;
35029: LD_ADDR_VAR 0 7
35033: PUSH
35034: LD_VAR 0 5
35038: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 1
35046: PPUSH
35047: LD_VAR 0 14
35051: PPUSH
35052: CALL_OW 12
35056: ST_TO_ADDR
// case i of 1 :
35057: LD_VAR 0 3
35061: PUSH
35062: LD_INT 1
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35087
35070: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_VAR 0 10
35080: PPUSH
35081: CALL_OW 115
35085: GO 35148
35087: LD_INT 2
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35117
35095: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_VAR 0 6
35105: PPUSH
35106: LD_VAR 0 7
35110: PPUSH
35111: CALL_OW 153
35115: GO 35148
35117: LD_INT 3
35119: DOUBLE
35120: EQUAL
35121: IFTRUE 35125
35123: GO 35147
35125: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35126: LD_VAR 0 1
35130: PPUSH
35131: LD_VAR 0 6
35135: PPUSH
35136: LD_VAR 0 7
35140: PPUSH
35141: CALL_OW 154
35145: GO 35148
35147: POP
// end ;
35148: LD_VAR 0 2
35152: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35153: LD_INT 0
35155: PPUSH
35156: PPUSH
35157: PPUSH
35158: PPUSH
35159: PPUSH
35160: PPUSH
// if not unit or not building then
35161: LD_VAR 0 1
35165: NOT
35166: PUSH
35167: LD_VAR 0 2
35171: NOT
35172: OR
35173: IFFALSE 35177
// exit ;
35175: GO 35335
// x := GetX ( building ) ;
35177: LD_ADDR_VAR 0 5
35181: PUSH
35182: LD_VAR 0 2
35186: PPUSH
35187: CALL_OW 250
35191: ST_TO_ADDR
// y := GetY ( building ) ;
35192: LD_ADDR_VAR 0 6
35196: PUSH
35197: LD_VAR 0 2
35201: PPUSH
35202: CALL_OW 251
35206: ST_TO_ADDR
// for i = 0 to 5 do
35207: LD_ADDR_VAR 0 4
35211: PUSH
35212: DOUBLE
35213: LD_INT 0
35215: DEC
35216: ST_TO_ADDR
35217: LD_INT 5
35219: PUSH
35220: FOR_TO
35221: IFFALSE 35333
// begin _x := ShiftX ( x , i , 3 ) ;
35223: LD_ADDR_VAR 0 7
35227: PUSH
35228: LD_VAR 0 5
35232: PPUSH
35233: LD_VAR 0 4
35237: PPUSH
35238: LD_INT 3
35240: PPUSH
35241: CALL_OW 272
35245: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35246: LD_ADDR_VAR 0 8
35250: PUSH
35251: LD_VAR 0 6
35255: PPUSH
35256: LD_VAR 0 4
35260: PPUSH
35261: LD_INT 3
35263: PPUSH
35264: CALL_OW 273
35268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35269: LD_VAR 0 7
35273: PPUSH
35274: LD_VAR 0 8
35278: PPUSH
35279: CALL_OW 488
35283: NOT
35284: IFFALSE 35288
// continue ;
35286: GO 35220
// if HexInfo ( _x , _y ) = 0 then
35288: LD_VAR 0 7
35292: PPUSH
35293: LD_VAR 0 8
35297: PPUSH
35298: CALL_OW 428
35302: PUSH
35303: LD_INT 0
35305: EQUAL
35306: IFFALSE 35331
// begin ComMoveXY ( unit , _x , _y ) ;
35308: LD_VAR 0 1
35312: PPUSH
35313: LD_VAR 0 7
35317: PPUSH
35318: LD_VAR 0 8
35322: PPUSH
35323: CALL_OW 111
// exit ;
35327: POP
35328: POP
35329: GO 35335
// end ; end ;
35331: GO 35220
35333: POP
35334: POP
// end ;
35335: LD_VAR 0 3
35339: RET
// export function ScanBase ( side , base_area ) ; begin
35340: LD_INT 0
35342: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35343: LD_ADDR_VAR 0 3
35347: PUSH
35348: LD_VAR 0 2
35352: PPUSH
35353: LD_INT 81
35355: PUSH
35356: LD_VAR 0 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PPUSH
35365: CALL_OW 70
35369: ST_TO_ADDR
// end ;
35370: LD_VAR 0 3
35374: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
// result := false ;
35381: LD_ADDR_VAR 0 2
35385: PUSH
35386: LD_INT 0
35388: ST_TO_ADDR
// side := GetSide ( unit ) ;
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_VAR 0 1
35398: PPUSH
35399: CALL_OW 255
35403: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35404: LD_ADDR_VAR 0 4
35408: PUSH
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 248
35418: ST_TO_ADDR
// case nat of 1 :
35419: LD_VAR 0 4
35423: PUSH
35424: LD_INT 1
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35432
35430: GO 35443
35432: POP
// tech := tech_lassight ; 2 :
35433: LD_ADDR_VAR 0 5
35437: PUSH
35438: LD_INT 12
35440: ST_TO_ADDR
35441: GO 35482
35443: LD_INT 2
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35451
35449: GO 35462
35451: POP
// tech := tech_mortar ; 3 :
35452: LD_ADDR_VAR 0 5
35456: PUSH
35457: LD_INT 41
35459: ST_TO_ADDR
35460: GO 35482
35462: LD_INT 3
35464: DOUBLE
35465: EQUAL
35466: IFTRUE 35470
35468: GO 35481
35470: POP
// tech := tech_bazooka ; end ;
35471: LD_ADDR_VAR 0 5
35475: PUSH
35476: LD_INT 44
35478: ST_TO_ADDR
35479: GO 35482
35481: POP
// if Researched ( side , tech ) then
35482: LD_VAR 0 3
35486: PPUSH
35487: LD_VAR 0 5
35491: PPUSH
35492: CALL_OW 325
35496: IFFALSE 35523
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35498: LD_ADDR_VAR 0 2
35502: PUSH
35503: LD_INT 5
35505: PUSH
35506: LD_INT 8
35508: PUSH
35509: LD_INT 9
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: PUSH
35517: LD_VAR 0 4
35521: ARRAY
35522: ST_TO_ADDR
// end ;
35523: LD_VAR 0 2
35527: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35528: LD_INT 0
35530: PPUSH
35531: PPUSH
35532: PPUSH
// if not mines then
35533: LD_VAR 0 2
35537: NOT
35538: IFFALSE 35542
// exit ;
35540: GO 35686
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35542: LD_ADDR_VAR 0 5
35546: PUSH
35547: LD_INT 81
35549: PUSH
35550: LD_VAR 0 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 3
35561: PUSH
35562: LD_INT 21
35564: PUSH
35565: LD_INT 3
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 69
35584: ST_TO_ADDR
// for i in mines do
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 2
35594: PUSH
35595: FOR_IN
35596: IFFALSE 35684
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35598: LD_VAR 0 4
35602: PUSH
35603: LD_INT 1
35605: ARRAY
35606: PPUSH
35607: LD_VAR 0 4
35611: PUSH
35612: LD_INT 2
35614: ARRAY
35615: PPUSH
35616: CALL_OW 458
35620: NOT
35621: IFFALSE 35625
// continue ;
35623: GO 35595
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35625: LD_VAR 0 4
35629: PUSH
35630: LD_INT 1
35632: ARRAY
35633: PPUSH
35634: LD_VAR 0 4
35638: PUSH
35639: LD_INT 2
35641: ARRAY
35642: PPUSH
35643: CALL_OW 428
35647: PUSH
35648: LD_VAR 0 5
35652: IN
35653: IFFALSE 35682
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35655: LD_VAR 0 4
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: PPUSH
35664: LD_VAR 0 4
35668: PUSH
35669: LD_INT 2
35671: ARRAY
35672: PPUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 456
// end ;
35682: GO 35595
35684: POP
35685: POP
// end ;
35686: LD_VAR 0 3
35690: RET
// export function Count ( array ) ; var i ; begin
35691: LD_INT 0
35693: PPUSH
35694: PPUSH
// result := 0 ;
35695: LD_ADDR_VAR 0 2
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// for i in array do
35703: LD_ADDR_VAR 0 3
35707: PUSH
35708: LD_VAR 0 1
35712: PUSH
35713: FOR_IN
35714: IFFALSE 35738
// if i then
35716: LD_VAR 0 3
35720: IFFALSE 35736
// result := result + 1 ;
35722: LD_ADDR_VAR 0 2
35726: PUSH
35727: LD_VAR 0 2
35731: PUSH
35732: LD_INT 1
35734: PLUS
35735: ST_TO_ADDR
35736: GO 35713
35738: POP
35739: POP
// end ;
35740: LD_VAR 0 2
35744: RET
// export function IsEmpty ( building ) ; begin
35745: LD_INT 0
35747: PPUSH
// if not building then
35748: LD_VAR 0 1
35752: NOT
35753: IFFALSE 35757
// exit ;
35755: GO 35800
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35757: LD_ADDR_VAR 0 2
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 22
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 255
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 58
35786: PUSH
35787: EMPTY
35788: LIST
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PPUSH
35794: CALL_OW 69
35798: IN
35799: ST_TO_ADDR
// end ;
35800: LD_VAR 0 2
35804: RET
// export function IsNotFull ( building ) ; begin
35805: LD_INT 0
35807: PPUSH
// if not building then
35808: LD_VAR 0 1
35812: NOT
35813: IFFALSE 35817
// exit ;
35815: GO 35836
// result := UnitsInside ( building ) < 6 ;
35817: LD_ADDR_VAR 0 2
35821: PUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: CALL_OW 313
35831: PUSH
35832: LD_INT 6
35834: LESS
35835: ST_TO_ADDR
// end ;
35836: LD_VAR 0 2
35840: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35841: LD_INT 0
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
// tmp := [ ] ;
35847: LD_ADDR_VAR 0 3
35851: PUSH
35852: EMPTY
35853: ST_TO_ADDR
// list := [ ] ;
35854: LD_ADDR_VAR 0 5
35858: PUSH
35859: EMPTY
35860: ST_TO_ADDR
// for i = 16 to 25 do
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: DOUBLE
35867: LD_INT 16
35869: DEC
35870: ST_TO_ADDR
35871: LD_INT 25
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35948
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35877: LD_ADDR_VAR 0 3
35881: PUSH
35882: LD_VAR 0 3
35886: PUSH
35887: LD_INT 22
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL_OW 255
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 91
35906: PUSH
35907: LD_VAR 0 1
35911: PUSH
35912: LD_INT 6
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 30
35922: PUSH
35923: LD_VAR 0 4
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: PPUSH
35940: CALL_OW 69
35944: ADD
35945: ST_TO_ADDR
35946: GO 35874
35948: POP
35949: POP
// for i = 1 to tmp do
35950: LD_ADDR_VAR 0 4
35954: PUSH
35955: DOUBLE
35956: LD_INT 1
35958: DEC
35959: ST_TO_ADDR
35960: LD_VAR 0 3
35964: PUSH
35965: FOR_TO
35966: IFFALSE 36054
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35968: LD_ADDR_VAR 0 5
35972: PUSH
35973: LD_VAR 0 5
35977: PUSH
35978: LD_VAR 0 3
35982: PUSH
35983: LD_VAR 0 4
35987: ARRAY
35988: PPUSH
35989: CALL_OW 266
35993: PUSH
35994: LD_VAR 0 3
35998: PUSH
35999: LD_VAR 0 4
36003: ARRAY
36004: PPUSH
36005: CALL_OW 250
36009: PUSH
36010: LD_VAR 0 3
36014: PUSH
36015: LD_VAR 0 4
36019: ARRAY
36020: PPUSH
36021: CALL_OW 251
36025: PUSH
36026: LD_VAR 0 3
36030: PUSH
36031: LD_VAR 0 4
36035: ARRAY
36036: PPUSH
36037: CALL_OW 254
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: PUSH
36048: EMPTY
36049: LIST
36050: ADD
36051: ST_TO_ADDR
36052: GO 35965
36054: POP
36055: POP
// result := list ;
36056: LD_ADDR_VAR 0 2
36060: PUSH
36061: LD_VAR 0 5
36065: ST_TO_ADDR
// end ;
36066: LD_VAR 0 2
36070: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36071: LD_INT 0
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
// if not factory then
36080: LD_VAR 0 1
36084: NOT
36085: IFFALSE 36089
// exit ;
36087: GO 36682
// if control = control_apeman then
36089: LD_VAR 0 4
36093: PUSH
36094: LD_INT 5
36096: EQUAL
36097: IFFALSE 36206
// begin tmp := UnitsInside ( factory ) ;
36099: LD_ADDR_VAR 0 8
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 313
36113: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36114: LD_VAR 0 8
36118: PPUSH
36119: LD_INT 25
36121: PUSH
36122: LD_INT 12
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PPUSH
36129: CALL_OW 72
36133: NOT
36134: IFFALSE 36144
// control := control_manual ;
36136: LD_ADDR_VAR 0 4
36140: PUSH
36141: LD_INT 1
36143: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36144: LD_ADDR_VAR 0 8
36148: PUSH
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL 35841 0 1
36158: ST_TO_ADDR
// if tmp then
36159: LD_VAR 0 8
36163: IFFALSE 36206
// begin for i in tmp do
36165: LD_ADDR_VAR 0 7
36169: PUSH
36170: LD_VAR 0 8
36174: PUSH
36175: FOR_IN
36176: IFFALSE 36204
// if i [ 1 ] = b_ext_radio then
36178: LD_VAR 0 7
36182: PUSH
36183: LD_INT 1
36185: ARRAY
36186: PUSH
36187: LD_INT 22
36189: EQUAL
36190: IFFALSE 36202
// begin control := control_remote ;
36192: LD_ADDR_VAR 0 4
36196: PUSH
36197: LD_INT 2
36199: ST_TO_ADDR
// break ;
36200: GO 36204
// end ;
36202: GO 36175
36204: POP
36205: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36206: LD_VAR 0 1
36210: PPUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: LD_VAR 0 4
36225: PPUSH
36226: LD_VAR 0 5
36230: PPUSH
36231: CALL_OW 448
36235: IFFALSE 36270
// begin result := [ chassis , engine , control , weapon ] ;
36237: LD_ADDR_VAR 0 6
36241: PUSH
36242: LD_VAR 0 2
36246: PUSH
36247: LD_VAR 0 3
36251: PUSH
36252: LD_VAR 0 4
36256: PUSH
36257: LD_VAR 0 5
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
// exit ;
36268: GO 36682
// end ; _chassis := AvailableChassisList ( factory ) ;
36270: LD_ADDR_VAR 0 9
36274: PUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL_OW 475
36284: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36285: LD_ADDR_VAR 0 11
36289: PUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 476
36299: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36300: LD_ADDR_VAR 0 12
36304: PUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL_OW 477
36314: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36315: LD_ADDR_VAR 0 10
36319: PUSH
36320: LD_VAR 0 1
36324: PPUSH
36325: CALL_OW 478
36329: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36330: LD_VAR 0 9
36334: NOT
36335: PUSH
36336: LD_VAR 0 11
36340: NOT
36341: OR
36342: PUSH
36343: LD_VAR 0 12
36347: NOT
36348: OR
36349: PUSH
36350: LD_VAR 0 10
36354: NOT
36355: OR
36356: IFFALSE 36391
// begin result := [ chassis , engine , control , weapon ] ;
36358: LD_ADDR_VAR 0 6
36362: PUSH
36363: LD_VAR 0 2
36367: PUSH
36368: LD_VAR 0 3
36372: PUSH
36373: LD_VAR 0 4
36377: PUSH
36378: LD_VAR 0 5
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// exit ;
36389: GO 36682
// end ; if not chassis in _chassis then
36391: LD_VAR 0 2
36395: PUSH
36396: LD_VAR 0 9
36400: IN
36401: NOT
36402: IFFALSE 36428
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36404: LD_ADDR_VAR 0 2
36408: PUSH
36409: LD_VAR 0 9
36413: PUSH
36414: LD_INT 1
36416: PPUSH
36417: LD_VAR 0 9
36421: PPUSH
36422: CALL_OW 12
36426: ARRAY
36427: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36428: LD_VAR 0 2
36432: PPUSH
36433: LD_VAR 0 3
36437: PPUSH
36438: CALL 36687 0 2
36442: NOT
36443: IFFALSE 36502
// repeat engine := _engine [ 1 ] ;
36445: LD_ADDR_VAR 0 3
36449: PUSH
36450: LD_VAR 0 11
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36459: LD_ADDR_VAR 0 11
36463: PUSH
36464: LD_VAR 0 11
36468: PPUSH
36469: LD_INT 1
36471: PPUSH
36472: CALL_OW 3
36476: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36477: LD_VAR 0 2
36481: PPUSH
36482: LD_VAR 0 3
36486: PPUSH
36487: CALL 36687 0 2
36491: PUSH
36492: LD_VAR 0 11
36496: PUSH
36497: EMPTY
36498: EQUAL
36499: OR
36500: IFFALSE 36445
// if not control in _control then
36502: LD_VAR 0 4
36506: PUSH
36507: LD_VAR 0 12
36511: IN
36512: NOT
36513: IFFALSE 36539
// control := _control [ rand ( 1 , _control ) ] ;
36515: LD_ADDR_VAR 0 4
36519: PUSH
36520: LD_VAR 0 12
36524: PUSH
36525: LD_INT 1
36527: PPUSH
36528: LD_VAR 0 12
36532: PPUSH
36533: CALL_OW 12
36537: ARRAY
36538: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36539: LD_VAR 0 2
36543: PPUSH
36544: LD_VAR 0 5
36548: PPUSH
36549: CALL 36907 0 2
36553: NOT
36554: IFFALSE 36613
// repeat weapon := _weapon [ 1 ] ;
36556: LD_ADDR_VAR 0 5
36560: PUSH
36561: LD_VAR 0 10
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36570: LD_ADDR_VAR 0 10
36574: PUSH
36575: LD_VAR 0 10
36579: PPUSH
36580: LD_INT 1
36582: PPUSH
36583: CALL_OW 3
36587: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36588: LD_VAR 0 2
36592: PPUSH
36593: LD_VAR 0 5
36597: PPUSH
36598: CALL 36907 0 2
36602: PUSH
36603: LD_VAR 0 10
36607: PUSH
36608: EMPTY
36609: EQUAL
36610: OR
36611: IFFALSE 36556
// result := [ ] ;
36613: LD_ADDR_VAR 0 6
36617: PUSH
36618: EMPTY
36619: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36620: LD_VAR 0 1
36624: PPUSH
36625: LD_VAR 0 2
36629: PPUSH
36630: LD_VAR 0 3
36634: PPUSH
36635: LD_VAR 0 4
36639: PPUSH
36640: LD_VAR 0 5
36644: PPUSH
36645: CALL_OW 448
36649: IFFALSE 36682
// result := [ chassis , engine , control , weapon ] ;
36651: LD_ADDR_VAR 0 6
36655: PUSH
36656: LD_VAR 0 2
36660: PUSH
36661: LD_VAR 0 3
36665: PUSH
36666: LD_VAR 0 4
36670: PUSH
36671: LD_VAR 0 5
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
// end ;
36682: LD_VAR 0 6
36686: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36687: LD_INT 0
36689: PPUSH
// if not chassis or not engine then
36690: LD_VAR 0 1
36694: NOT
36695: PUSH
36696: LD_VAR 0 2
36700: NOT
36701: OR
36702: IFFALSE 36706
// exit ;
36704: GO 36902
// case engine of engine_solar :
36706: LD_VAR 0 2
36710: PUSH
36711: LD_INT 2
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 36757
36719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36720: LD_ADDR_VAR 0 3
36724: PUSH
36725: LD_INT 11
36727: PUSH
36728: LD_INT 12
36730: PUSH
36731: LD_INT 13
36733: PUSH
36734: LD_INT 14
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
36755: GO 36886
36757: LD_INT 1
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36765
36763: GO 36827
36765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_INT 11
36773: PUSH
36774: LD_INT 12
36776: PUSH
36777: LD_INT 13
36779: PUSH
36780: LD_INT 14
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 2
36788: PUSH
36789: LD_INT 3
36791: PUSH
36792: LD_INT 4
36794: PUSH
36795: LD_INT 5
36797: PUSH
36798: LD_INT 21
36800: PUSH
36801: LD_INT 23
36803: PUSH
36804: LD_INT 22
36806: PUSH
36807: LD_INT 24
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: ST_TO_ADDR
36825: GO 36886
36827: LD_INT 3
36829: DOUBLE
36830: EQUAL
36831: IFTRUE 36835
36833: GO 36885
36835: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36836: LD_ADDR_VAR 0 3
36840: PUSH
36841: LD_INT 13
36843: PUSH
36844: LD_INT 14
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 3
36852: PUSH
36853: LD_INT 4
36855: PUSH
36856: LD_INT 5
36858: PUSH
36859: LD_INT 21
36861: PUSH
36862: LD_INT 22
36864: PUSH
36865: LD_INT 23
36867: PUSH
36868: LD_INT 24
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: ST_TO_ADDR
36883: GO 36886
36885: POP
// result := ( chassis in result ) ;
36886: LD_ADDR_VAR 0 3
36890: PUSH
36891: LD_VAR 0 1
36895: PUSH
36896: LD_VAR 0 3
36900: IN
36901: ST_TO_ADDR
// end ;
36902: LD_VAR 0 3
36906: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36907: LD_INT 0
36909: PPUSH
// if not chassis or not weapon then
36910: LD_VAR 0 1
36914: NOT
36915: PUSH
36916: LD_VAR 0 2
36920: NOT
36921: OR
36922: IFFALSE 36926
// exit ;
36924: GO 37988
// case weapon of us_machine_gun :
36926: LD_VAR 0 2
36930: PUSH
36931: LD_INT 2
36933: DOUBLE
36934: EQUAL
36935: IFTRUE 36939
36937: GO 36969
36939: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36940: LD_ADDR_VAR 0 3
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: LD_INT 4
36956: PUSH
36957: LD_INT 5
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: ST_TO_ADDR
36967: GO 37972
36969: LD_INT 3
36971: DOUBLE
36972: EQUAL
36973: IFTRUE 36977
36975: GO 37007
36977: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36978: LD_ADDR_VAR 0 3
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: LD_INT 4
36994: PUSH
36995: LD_INT 5
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: ST_TO_ADDR
37005: GO 37972
37007: LD_INT 11
37009: DOUBLE
37010: EQUAL
37011: IFTRUE 37015
37013: GO 37045
37015: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37016: LD_ADDR_VAR 0 3
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: LD_INT 4
37032: PUSH
37033: LD_INT 5
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
37043: GO 37972
37045: LD_INT 4
37047: DOUBLE
37048: EQUAL
37049: IFTRUE 37053
37051: GO 37079
37053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37054: LD_ADDR_VAR 0 3
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 3
37064: PUSH
37065: LD_INT 4
37067: PUSH
37068: LD_INT 5
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: ST_TO_ADDR
37077: GO 37972
37079: LD_INT 5
37081: DOUBLE
37082: EQUAL
37083: IFTRUE 37087
37085: GO 37113
37087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 3
37098: PUSH
37099: LD_INT 4
37101: PUSH
37102: LD_INT 5
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
37111: GO 37972
37113: LD_INT 9
37115: DOUBLE
37116: EQUAL
37117: IFTRUE 37121
37119: GO 37147
37121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: LD_INT 4
37135: PUSH
37136: LD_INT 5
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: ST_TO_ADDR
37145: GO 37972
37147: LD_INT 7
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37181
37155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 3
37166: PUSH
37167: LD_INT 4
37169: PUSH
37170: LD_INT 5
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
37179: GO 37972
37181: LD_INT 12
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37189
37187: GO 37215
37189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37190: LD_ADDR_VAR 0 3
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: LD_INT 4
37203: PUSH
37204: LD_INT 5
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
37213: GO 37972
37215: LD_INT 13
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37223
37221: GO 37249
37223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37224: LD_ADDR_VAR 0 3
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: LD_INT 4
37237: PUSH
37238: LD_INT 5
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
37247: GO 37972
37249: LD_INT 14
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37275
37257: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 4
37265: PUSH
37266: LD_INT 5
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: ST_TO_ADDR
37273: GO 37972
37275: LD_INT 6
37277: DOUBLE
37278: EQUAL
37279: IFTRUE 37283
37281: GO 37301
37283: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37284: LD_ADDR_VAR 0 3
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: LD_INT 5
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: ST_TO_ADDR
37299: GO 37972
37301: LD_INT 10
37303: DOUBLE
37304: EQUAL
37305: IFTRUE 37309
37307: GO 37327
37309: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 4
37317: PUSH
37318: LD_INT 5
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: ST_TO_ADDR
37325: GO 37972
37327: LD_INT 22
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37335
37333: GO 37361
37335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37336: LD_ADDR_VAR 0 3
37340: PUSH
37341: LD_INT 11
37343: PUSH
37344: LD_INT 12
37346: PUSH
37347: LD_INT 13
37349: PUSH
37350: LD_INT 14
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: ST_TO_ADDR
37359: GO 37972
37361: LD_INT 23
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37395
37369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37370: LD_ADDR_VAR 0 3
37374: PUSH
37375: LD_INT 11
37377: PUSH
37378: LD_INT 12
37380: PUSH
37381: LD_INT 13
37383: PUSH
37384: LD_INT 14
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
37393: GO 37972
37395: LD_INT 24
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37403
37401: GO 37429
37403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 11
37411: PUSH
37412: LD_INT 12
37414: PUSH
37415: LD_INT 13
37417: PUSH
37418: LD_INT 14
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
37427: GO 37972
37429: LD_INT 30
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37463
37437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37438: LD_ADDR_VAR 0 3
37442: PUSH
37443: LD_INT 11
37445: PUSH
37446: LD_INT 12
37448: PUSH
37449: LD_INT 13
37451: PUSH
37452: LD_INT 14
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
37461: GO 37972
37463: LD_INT 25
37465: DOUBLE
37466: EQUAL
37467: IFTRUE 37471
37469: GO 37489
37471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: LD_INT 13
37479: PUSH
37480: LD_INT 14
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: ST_TO_ADDR
37487: GO 37972
37489: LD_INT 27
37491: DOUBLE
37492: EQUAL
37493: IFTRUE 37497
37495: GO 37515
37497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_INT 13
37505: PUSH
37506: LD_INT 14
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: ST_TO_ADDR
37513: GO 37972
37515: LD_EXP 41
37519: DOUBLE
37520: EQUAL
37521: IFTRUE 37525
37523: GO 37551
37525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37526: LD_ADDR_VAR 0 3
37530: PUSH
37531: LD_INT 11
37533: PUSH
37534: LD_INT 12
37536: PUSH
37537: LD_INT 13
37539: PUSH
37540: LD_INT 14
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
37549: GO 37972
37551: LD_INT 28
37553: DOUBLE
37554: EQUAL
37555: IFTRUE 37559
37557: GO 37577
37559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37560: LD_ADDR_VAR 0 3
37564: PUSH
37565: LD_INT 13
37567: PUSH
37568: LD_INT 14
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: ST_TO_ADDR
37575: GO 37972
37577: LD_INT 29
37579: DOUBLE
37580: EQUAL
37581: IFTRUE 37585
37583: GO 37603
37585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37586: LD_ADDR_VAR 0 3
37590: PUSH
37591: LD_INT 13
37593: PUSH
37594: LD_INT 14
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: ST_TO_ADDR
37601: GO 37972
37603: LD_INT 31
37605: DOUBLE
37606: EQUAL
37607: IFTRUE 37611
37609: GO 37629
37611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37612: LD_ADDR_VAR 0 3
37616: PUSH
37617: LD_INT 13
37619: PUSH
37620: LD_INT 14
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: ST_TO_ADDR
37627: GO 37972
37629: LD_INT 26
37631: DOUBLE
37632: EQUAL
37633: IFTRUE 37637
37635: GO 37655
37637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 13
37645: PUSH
37646: LD_INT 14
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: ST_TO_ADDR
37653: GO 37972
37655: LD_INT 42
37657: DOUBLE
37658: EQUAL
37659: IFTRUE 37663
37661: GO 37689
37663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37664: LD_ADDR_VAR 0 3
37668: PUSH
37669: LD_INT 21
37671: PUSH
37672: LD_INT 22
37674: PUSH
37675: LD_INT 23
37677: PUSH
37678: LD_INT 24
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: ST_TO_ADDR
37687: GO 37972
37689: LD_INT 43
37691: DOUBLE
37692: EQUAL
37693: IFTRUE 37697
37695: GO 37723
37697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37698: LD_ADDR_VAR 0 3
37702: PUSH
37703: LD_INT 21
37705: PUSH
37706: LD_INT 22
37708: PUSH
37709: LD_INT 23
37711: PUSH
37712: LD_INT 24
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
37721: GO 37972
37723: LD_INT 44
37725: DOUBLE
37726: EQUAL
37727: IFTRUE 37731
37729: GO 37757
37731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37732: LD_ADDR_VAR 0 3
37736: PUSH
37737: LD_INT 21
37739: PUSH
37740: LD_INT 22
37742: PUSH
37743: LD_INT 23
37745: PUSH
37746: LD_INT 24
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: ST_TO_ADDR
37755: GO 37972
37757: LD_INT 45
37759: DOUBLE
37760: EQUAL
37761: IFTRUE 37765
37763: GO 37791
37765: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37766: LD_ADDR_VAR 0 3
37770: PUSH
37771: LD_INT 21
37773: PUSH
37774: LD_INT 22
37776: PUSH
37777: LD_INT 23
37779: PUSH
37780: LD_INT 24
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
37789: GO 37972
37791: LD_INT 49
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37825
37799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 21
37807: PUSH
37808: LD_INT 22
37810: PUSH
37811: LD_INT 23
37813: PUSH
37814: LD_INT 24
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
37823: GO 37972
37825: LD_INT 51
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37859
37833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_INT 21
37841: PUSH
37842: LD_INT 22
37844: PUSH
37845: LD_INT 23
37847: PUSH
37848: LD_INT 24
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
37857: GO 37972
37859: LD_INT 52
37861: DOUBLE
37862: EQUAL
37863: IFTRUE 37867
37865: GO 37893
37867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37868: LD_ADDR_VAR 0 3
37872: PUSH
37873: LD_INT 21
37875: PUSH
37876: LD_INT 22
37878: PUSH
37879: LD_INT 23
37881: PUSH
37882: LD_INT 24
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: ST_TO_ADDR
37891: GO 37972
37893: LD_INT 53
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37919
37901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 23
37909: PUSH
37910: LD_INT 24
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: ST_TO_ADDR
37917: GO 37972
37919: LD_INT 46
37921: DOUBLE
37922: EQUAL
37923: IFTRUE 37927
37925: GO 37945
37927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37928: LD_ADDR_VAR 0 3
37932: PUSH
37933: LD_INT 23
37935: PUSH
37936: LD_INT 24
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: ST_TO_ADDR
37943: GO 37972
37945: LD_INT 47
37947: DOUBLE
37948: EQUAL
37949: IFTRUE 37953
37951: GO 37971
37953: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: LD_INT 23
37961: PUSH
37962: LD_INT 24
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: ST_TO_ADDR
37969: GO 37972
37971: POP
// result := ( chassis in result ) ;
37972: LD_ADDR_VAR 0 3
37976: PUSH
37977: LD_VAR 0 1
37981: PUSH
37982: LD_VAR 0 3
37986: IN
37987: ST_TO_ADDR
// end ;
37988: LD_VAR 0 3
37992: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37993: LD_INT 0
37995: PPUSH
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
// result := array ;
38002: LD_ADDR_VAR 0 5
38006: PUSH
38007: LD_VAR 0 1
38011: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38012: LD_VAR 0 1
38016: NOT
38017: PUSH
38018: LD_VAR 0 2
38022: NOT
38023: OR
38024: PUSH
38025: LD_VAR 0 3
38029: NOT
38030: OR
38031: PUSH
38032: LD_VAR 0 2
38036: PUSH
38037: LD_VAR 0 1
38041: GREATER
38042: OR
38043: PUSH
38044: LD_VAR 0 3
38048: PUSH
38049: LD_VAR 0 1
38053: GREATER
38054: OR
38055: IFFALSE 38059
// exit ;
38057: GO 38355
// if direction then
38059: LD_VAR 0 4
38063: IFFALSE 38127
// begin d := 1 ;
38065: LD_ADDR_VAR 0 9
38069: PUSH
38070: LD_INT 1
38072: ST_TO_ADDR
// if i_from > i_to then
38073: LD_VAR 0 2
38077: PUSH
38078: LD_VAR 0 3
38082: GREATER
38083: IFFALSE 38109
// length := ( array - i_from ) + i_to else
38085: LD_ADDR_VAR 0 11
38089: PUSH
38090: LD_VAR 0 1
38094: PUSH
38095: LD_VAR 0 2
38099: MINUS
38100: PUSH
38101: LD_VAR 0 3
38105: PLUS
38106: ST_TO_ADDR
38107: GO 38125
// length := i_to - i_from ;
38109: LD_ADDR_VAR 0 11
38113: PUSH
38114: LD_VAR 0 3
38118: PUSH
38119: LD_VAR 0 2
38123: MINUS
38124: ST_TO_ADDR
// end else
38125: GO 38188
// begin d := - 1 ;
38127: LD_ADDR_VAR 0 9
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: ST_TO_ADDR
// if i_from > i_to then
38136: LD_VAR 0 2
38140: PUSH
38141: LD_VAR 0 3
38145: GREATER
38146: IFFALSE 38166
// length := i_from - i_to else
38148: LD_ADDR_VAR 0 11
38152: PUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_VAR 0 3
38162: MINUS
38163: ST_TO_ADDR
38164: GO 38188
// length := ( array - i_to ) + i_from ;
38166: LD_ADDR_VAR 0 11
38170: PUSH
38171: LD_VAR 0 1
38175: PUSH
38176: LD_VAR 0 3
38180: MINUS
38181: PUSH
38182: LD_VAR 0 2
38186: PLUS
38187: ST_TO_ADDR
// end ; if not length then
38188: LD_VAR 0 11
38192: NOT
38193: IFFALSE 38197
// exit ;
38195: GO 38355
// tmp := array ;
38197: LD_ADDR_VAR 0 10
38201: PUSH
38202: LD_VAR 0 1
38206: ST_TO_ADDR
// for i = 1 to length do
38207: LD_ADDR_VAR 0 6
38211: PUSH
38212: DOUBLE
38213: LD_INT 1
38215: DEC
38216: ST_TO_ADDR
38217: LD_VAR 0 11
38221: PUSH
38222: FOR_TO
38223: IFFALSE 38343
// begin for j = 1 to array do
38225: LD_ADDR_VAR 0 7
38229: PUSH
38230: DOUBLE
38231: LD_INT 1
38233: DEC
38234: ST_TO_ADDR
38235: LD_VAR 0 1
38239: PUSH
38240: FOR_TO
38241: IFFALSE 38329
// begin k := j + d ;
38243: LD_ADDR_VAR 0 8
38247: PUSH
38248: LD_VAR 0 7
38252: PUSH
38253: LD_VAR 0 9
38257: PLUS
38258: ST_TO_ADDR
// if k > array then
38259: LD_VAR 0 8
38263: PUSH
38264: LD_VAR 0 1
38268: GREATER
38269: IFFALSE 38279
// k := 1 ;
38271: LD_ADDR_VAR 0 8
38275: PUSH
38276: LD_INT 1
38278: ST_TO_ADDR
// if not k then
38279: LD_VAR 0 8
38283: NOT
38284: IFFALSE 38296
// k := array ;
38286: LD_ADDR_VAR 0 8
38290: PUSH
38291: LD_VAR 0 1
38295: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38296: LD_ADDR_VAR 0 10
38300: PUSH
38301: LD_VAR 0 10
38305: PPUSH
38306: LD_VAR 0 8
38310: PPUSH
38311: LD_VAR 0 1
38315: PUSH
38316: LD_VAR 0 7
38320: ARRAY
38321: PPUSH
38322: CALL_OW 1
38326: ST_TO_ADDR
// end ;
38327: GO 38240
38329: POP
38330: POP
// array := tmp ;
38331: LD_ADDR_VAR 0 1
38335: PUSH
38336: LD_VAR 0 10
38340: ST_TO_ADDR
// end ;
38341: GO 38222
38343: POP
38344: POP
// result := array ;
38345: LD_ADDR_VAR 0 5
38349: PUSH
38350: LD_VAR 0 1
38354: ST_TO_ADDR
// end ;
38355: LD_VAR 0 5
38359: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38360: LD_INT 0
38362: PPUSH
38363: PPUSH
// result := 0 ;
38364: LD_ADDR_VAR 0 3
38368: PUSH
38369: LD_INT 0
38371: ST_TO_ADDR
// if not array or not value in array then
38372: LD_VAR 0 1
38376: NOT
38377: PUSH
38378: LD_VAR 0 2
38382: PUSH
38383: LD_VAR 0 1
38387: IN
38388: NOT
38389: OR
38390: IFFALSE 38394
// exit ;
38392: GO 38448
// for i = 1 to array do
38394: LD_ADDR_VAR 0 4
38398: PUSH
38399: DOUBLE
38400: LD_INT 1
38402: DEC
38403: ST_TO_ADDR
38404: LD_VAR 0 1
38408: PUSH
38409: FOR_TO
38410: IFFALSE 38446
// if value = array [ i ] then
38412: LD_VAR 0 2
38416: PUSH
38417: LD_VAR 0 1
38421: PUSH
38422: LD_VAR 0 4
38426: ARRAY
38427: EQUAL
38428: IFFALSE 38444
// begin result := i ;
38430: LD_ADDR_VAR 0 3
38434: PUSH
38435: LD_VAR 0 4
38439: ST_TO_ADDR
// exit ;
38440: POP
38441: POP
38442: GO 38448
// end ;
38444: GO 38409
38446: POP
38447: POP
// end ;
38448: LD_VAR 0 3
38452: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38453: LD_INT 0
38455: PPUSH
// vc_chassis := chassis ;
38456: LD_ADDR_OWVAR 37
38460: PUSH
38461: LD_VAR 0 1
38465: ST_TO_ADDR
// vc_engine := engine ;
38466: LD_ADDR_OWVAR 39
38470: PUSH
38471: LD_VAR 0 2
38475: ST_TO_ADDR
// vc_control := control ;
38476: LD_ADDR_OWVAR 38
38480: PUSH
38481: LD_VAR 0 3
38485: ST_TO_ADDR
// vc_weapon := weapon ;
38486: LD_ADDR_OWVAR 40
38490: PUSH
38491: LD_VAR 0 4
38495: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38496: LD_ADDR_OWVAR 41
38500: PUSH
38501: LD_VAR 0 5
38505: ST_TO_ADDR
// end ;
38506: LD_VAR 0 6
38510: RET
// export function WantPlant ( unit ) ; var task ; begin
38511: LD_INT 0
38513: PPUSH
38514: PPUSH
// result := false ;
38515: LD_ADDR_VAR 0 2
38519: PUSH
38520: LD_INT 0
38522: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38523: LD_ADDR_VAR 0 3
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 437
38537: ST_TO_ADDR
// if task then
38538: LD_VAR 0 3
38542: IFFALSE 38570
// if task [ 1 ] [ 1 ] = p then
38544: LD_VAR 0 3
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PUSH
38553: LD_INT 1
38555: ARRAY
38556: PUSH
38557: LD_STRING p
38559: EQUAL
38560: IFFALSE 38570
// result := true ;
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_INT 1
38569: ST_TO_ADDR
// end ;
38570: LD_VAR 0 2
38574: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38575: LD_INT 0
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
// if pos < 1 then
38581: LD_VAR 0 2
38585: PUSH
38586: LD_INT 1
38588: LESS
38589: IFFALSE 38593
// exit ;
38591: GO 38896
// if pos = 1 then
38593: LD_VAR 0 2
38597: PUSH
38598: LD_INT 1
38600: EQUAL
38601: IFFALSE 38634
// result := Replace ( arr , pos [ 1 ] , value ) else
38603: LD_ADDR_VAR 0 4
38607: PUSH
38608: LD_VAR 0 1
38612: PPUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 1
38620: ARRAY
38621: PPUSH
38622: LD_VAR 0 3
38626: PPUSH
38627: CALL_OW 1
38631: ST_TO_ADDR
38632: GO 38896
// begin tmp := arr ;
38634: LD_ADDR_VAR 0 6
38638: PUSH
38639: LD_VAR 0 1
38643: ST_TO_ADDR
// s_arr := [ tmp ] ;
38644: LD_ADDR_VAR 0 7
38648: PUSH
38649: LD_VAR 0 6
38653: PUSH
38654: EMPTY
38655: LIST
38656: ST_TO_ADDR
// for i = 1 to pos - 1 do
38657: LD_ADDR_VAR 0 5
38661: PUSH
38662: DOUBLE
38663: LD_INT 1
38665: DEC
38666: ST_TO_ADDR
38667: LD_VAR 0 2
38671: PUSH
38672: LD_INT 1
38674: MINUS
38675: PUSH
38676: FOR_TO
38677: IFFALSE 38722
// begin tmp := tmp [ pos [ i ] ] ;
38679: LD_ADDR_VAR 0 6
38683: PUSH
38684: LD_VAR 0 6
38688: PUSH
38689: LD_VAR 0 2
38693: PUSH
38694: LD_VAR 0 5
38698: ARRAY
38699: ARRAY
38700: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38701: LD_ADDR_VAR 0 7
38705: PUSH
38706: LD_VAR 0 7
38710: PUSH
38711: LD_VAR 0 6
38715: PUSH
38716: EMPTY
38717: LIST
38718: ADD
38719: ST_TO_ADDR
// end ;
38720: GO 38676
38722: POP
38723: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38724: LD_ADDR_VAR 0 6
38728: PUSH
38729: LD_VAR 0 6
38733: PPUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_VAR 0 2
38743: ARRAY
38744: PPUSH
38745: LD_VAR 0 3
38749: PPUSH
38750: CALL_OW 1
38754: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38755: LD_ADDR_VAR 0 7
38759: PUSH
38760: LD_VAR 0 7
38764: PPUSH
38765: LD_VAR 0 7
38769: PPUSH
38770: LD_VAR 0 6
38774: PPUSH
38775: CALL_OW 1
38779: ST_TO_ADDR
// for i = s_arr downto 2 do
38780: LD_ADDR_VAR 0 5
38784: PUSH
38785: DOUBLE
38786: LD_VAR 0 7
38790: INC
38791: ST_TO_ADDR
38792: LD_INT 2
38794: PUSH
38795: FOR_DOWNTO
38796: IFFALSE 38880
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 7
38807: PUSH
38808: LD_VAR 0 5
38812: PUSH
38813: LD_INT 1
38815: MINUS
38816: ARRAY
38817: PPUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_VAR 0 5
38827: PUSH
38828: LD_INT 1
38830: MINUS
38831: ARRAY
38832: PPUSH
38833: LD_VAR 0 7
38837: PUSH
38838: LD_VAR 0 5
38842: ARRAY
38843: PPUSH
38844: CALL_OW 1
38848: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38849: LD_ADDR_VAR 0 7
38853: PUSH
38854: LD_VAR 0 7
38858: PPUSH
38859: LD_VAR 0 5
38863: PUSH
38864: LD_INT 1
38866: MINUS
38867: PPUSH
38868: LD_VAR 0 6
38872: PPUSH
38873: CALL_OW 1
38877: ST_TO_ADDR
// end ;
38878: GO 38795
38880: POP
38881: POP
// result := s_arr [ 1 ] ;
38882: LD_ADDR_VAR 0 4
38886: PUSH
38887: LD_VAR 0 7
38891: PUSH
38892: LD_INT 1
38894: ARRAY
38895: ST_TO_ADDR
// end ; end ;
38896: LD_VAR 0 4
38900: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38901: LD_INT 0
38903: PPUSH
38904: PPUSH
// if not list then
38905: LD_VAR 0 1
38909: NOT
38910: IFFALSE 38914
// exit ;
38912: GO 39005
// i := list [ pos1 ] ;
38914: LD_ADDR_VAR 0 5
38918: PUSH
38919: LD_VAR 0 1
38923: PUSH
38924: LD_VAR 0 2
38928: ARRAY
38929: ST_TO_ADDR
// if not i then
38930: LD_VAR 0 5
38934: NOT
38935: IFFALSE 38939
// exit ;
38937: GO 39005
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38939: LD_ADDR_VAR 0 1
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: LD_VAR 0 2
38953: PPUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_VAR 0 3
38963: ARRAY
38964: PPUSH
38965: CALL_OW 1
38969: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38970: LD_ADDR_VAR 0 1
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_VAR 0 3
38984: PPUSH
38985: LD_VAR 0 5
38989: PPUSH
38990: CALL_OW 1
38994: ST_TO_ADDR
// result := list ;
38995: LD_ADDR_VAR 0 4
38999: PUSH
39000: LD_VAR 0 1
39004: ST_TO_ADDR
// end ;
39005: LD_VAR 0 4
39009: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39010: LD_INT 0
39012: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39013: LD_ADDR_VAR 0 5
39017: PUSH
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 250
39027: PPUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL_OW 251
39037: PPUSH
39038: LD_VAR 0 2
39042: PPUSH
39043: LD_VAR 0 3
39047: PPUSH
39048: LD_VAR 0 4
39052: PPUSH
39053: CALL 39063 0 5
39057: ST_TO_ADDR
// end ;
39058: LD_VAR 0 5
39062: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39063: LD_INT 0
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
// if not list then
39069: LD_VAR 0 3
39073: NOT
39074: IFFALSE 39078
// exit ;
39076: GO 39466
// result := [ ] ;
39078: LD_ADDR_VAR 0 6
39082: PUSH
39083: EMPTY
39084: ST_TO_ADDR
// for i in list do
39085: LD_ADDR_VAR 0 7
39089: PUSH
39090: LD_VAR 0 3
39094: PUSH
39095: FOR_IN
39096: IFFALSE 39298
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39098: LD_ADDR_VAR 0 9
39102: PUSH
39103: LD_VAR 0 7
39107: PPUSH
39108: LD_VAR 0 1
39112: PPUSH
39113: LD_VAR 0 2
39117: PPUSH
39118: CALL_OW 297
39122: ST_TO_ADDR
// if not result then
39123: LD_VAR 0 6
39127: NOT
39128: IFFALSE 39154
// result := [ [ i , tmp ] ] else
39130: LD_ADDR_VAR 0 6
39134: PUSH
39135: LD_VAR 0 7
39139: PUSH
39140: LD_VAR 0 9
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: EMPTY
39150: LIST
39151: ST_TO_ADDR
39152: GO 39296
// begin if result [ result ] [ 2 ] < tmp then
39154: LD_VAR 0 6
39158: PUSH
39159: LD_VAR 0 6
39163: ARRAY
39164: PUSH
39165: LD_INT 2
39167: ARRAY
39168: PUSH
39169: LD_VAR 0 9
39173: LESS
39174: IFFALSE 39216
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39176: LD_ADDR_VAR 0 6
39180: PUSH
39181: LD_VAR 0 6
39185: PPUSH
39186: LD_VAR 0 6
39190: PUSH
39191: LD_INT 1
39193: PLUS
39194: PPUSH
39195: LD_VAR 0 7
39199: PUSH
39200: LD_VAR 0 9
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 2
39213: ST_TO_ADDR
39214: GO 39296
// for j = 1 to result do
39216: LD_ADDR_VAR 0 8
39220: PUSH
39221: DOUBLE
39222: LD_INT 1
39224: DEC
39225: ST_TO_ADDR
39226: LD_VAR 0 6
39230: PUSH
39231: FOR_TO
39232: IFFALSE 39294
// begin if tmp < result [ j ] [ 2 ] then
39234: LD_VAR 0 9
39238: PUSH
39239: LD_VAR 0 6
39243: PUSH
39244: LD_VAR 0 8
39248: ARRAY
39249: PUSH
39250: LD_INT 2
39252: ARRAY
39253: LESS
39254: IFFALSE 39292
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39256: LD_ADDR_VAR 0 6
39260: PUSH
39261: LD_VAR 0 6
39265: PPUSH
39266: LD_VAR 0 8
39270: PPUSH
39271: LD_VAR 0 7
39275: PUSH
39276: LD_VAR 0 9
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PPUSH
39285: CALL_OW 2
39289: ST_TO_ADDR
// break ;
39290: GO 39294
// end ; end ;
39292: GO 39231
39294: POP
39295: POP
// end ; end ;
39296: GO 39095
39298: POP
39299: POP
// if result and not asc then
39300: LD_VAR 0 6
39304: PUSH
39305: LD_VAR 0 4
39309: NOT
39310: AND
39311: IFFALSE 39386
// begin tmp := result ;
39313: LD_ADDR_VAR 0 9
39317: PUSH
39318: LD_VAR 0 6
39322: ST_TO_ADDR
// for i = tmp downto 1 do
39323: LD_ADDR_VAR 0 7
39327: PUSH
39328: DOUBLE
39329: LD_VAR 0 9
39333: INC
39334: ST_TO_ADDR
39335: LD_INT 1
39337: PUSH
39338: FOR_DOWNTO
39339: IFFALSE 39384
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39341: LD_ADDR_VAR 0 6
39345: PUSH
39346: LD_VAR 0 6
39350: PPUSH
39351: LD_VAR 0 9
39355: PUSH
39356: LD_VAR 0 7
39360: MINUS
39361: PUSH
39362: LD_INT 1
39364: PLUS
39365: PPUSH
39366: LD_VAR 0 9
39370: PUSH
39371: LD_VAR 0 7
39375: ARRAY
39376: PPUSH
39377: CALL_OW 1
39381: ST_TO_ADDR
39382: GO 39338
39384: POP
39385: POP
// end ; tmp := [ ] ;
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: EMPTY
39392: ST_TO_ADDR
// if mode then
39393: LD_VAR 0 5
39397: IFFALSE 39466
// begin for i = 1 to result do
39399: LD_ADDR_VAR 0 7
39403: PUSH
39404: DOUBLE
39405: LD_INT 1
39407: DEC
39408: ST_TO_ADDR
39409: LD_VAR 0 6
39413: PUSH
39414: FOR_TO
39415: IFFALSE 39454
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39417: LD_ADDR_VAR 0 9
39421: PUSH
39422: LD_VAR 0 9
39426: PPUSH
39427: LD_VAR 0 7
39431: PPUSH
39432: LD_VAR 0 6
39436: PUSH
39437: LD_VAR 0 7
39441: ARRAY
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: PPUSH
39447: CALL_OW 1
39451: ST_TO_ADDR
39452: GO 39414
39454: POP
39455: POP
// result := tmp ;
39456: LD_ADDR_VAR 0 6
39460: PUSH
39461: LD_VAR 0 9
39465: ST_TO_ADDR
// end ; end ;
39466: LD_VAR 0 6
39470: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39471: LD_INT 0
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39479: LD_ADDR_VAR 0 5
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: ST_TO_ADDR
// if not x or not y then
39501: LD_VAR 0 2
39505: NOT
39506: PUSH
39507: LD_VAR 0 3
39511: NOT
39512: OR
39513: IFFALSE 39517
// exit ;
39515: GO 41169
// if not range then
39517: LD_VAR 0 4
39521: NOT
39522: IFFALSE 39532
// range := 10 ;
39524: LD_ADDR_VAR 0 4
39528: PUSH
39529: LD_INT 10
39531: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39532: LD_ADDR_VAR 0 8
39536: PUSH
39537: LD_INT 81
39539: PUSH
39540: LD_VAR 0 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 92
39551: PUSH
39552: LD_VAR 0 2
39556: PUSH
39557: LD_VAR 0 3
39561: PUSH
39562: LD_VAR 0 4
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: LD_INT 21
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: LIST
39594: PPUSH
39595: CALL_OW 69
39599: ST_TO_ADDR
// if not tmp then
39600: LD_VAR 0 8
39604: NOT
39605: IFFALSE 39609
// exit ;
39607: GO 41169
// for i in tmp do
39609: LD_ADDR_VAR 0 6
39613: PUSH
39614: LD_VAR 0 8
39618: PUSH
39619: FOR_IN
39620: IFFALSE 41144
// begin points := [ 0 , 0 , 0 ] ;
39622: LD_ADDR_VAR 0 9
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// bpoints := 1 ;
39641: LD_ADDR_VAR 0 10
39645: PUSH
39646: LD_INT 1
39648: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39649: LD_VAR 0 6
39653: PPUSH
39654: CALL_OW 247
39658: PUSH
39659: LD_INT 1
39661: DOUBLE
39662: EQUAL
39663: IFTRUE 39667
39665: GO 40245
39667: POP
// begin if GetClass ( i ) = 1 then
39668: LD_VAR 0 6
39672: PPUSH
39673: CALL_OW 257
39677: PUSH
39678: LD_INT 1
39680: EQUAL
39681: IFFALSE 39702
// points := [ 10 , 5 , 3 ] ;
39683: LD_ADDR_VAR 0 9
39687: PUSH
39688: LD_INT 10
39690: PUSH
39691: LD_INT 5
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39702: LD_VAR 0 6
39706: PPUSH
39707: CALL_OW 257
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: LD_INT 4
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: IN
39726: IFFALSE 39747
// points := [ 3 , 2 , 1 ] ;
39728: LD_ADDR_VAR 0 9
39732: PUSH
39733: LD_INT 3
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39747: LD_VAR 0 6
39751: PPUSH
39752: CALL_OW 257
39756: PUSH
39757: LD_INT 5
39759: EQUAL
39760: IFFALSE 39781
// points := [ 130 , 5 , 2 ] ;
39762: LD_ADDR_VAR 0 9
39766: PUSH
39767: LD_INT 130
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39781: LD_VAR 0 6
39785: PPUSH
39786: CALL_OW 257
39790: PUSH
39791: LD_INT 8
39793: EQUAL
39794: IFFALSE 39815
// points := [ 35 , 35 , 30 ] ;
39796: LD_ADDR_VAR 0 9
39800: PUSH
39801: LD_INT 35
39803: PUSH
39804: LD_INT 35
39806: PUSH
39807: LD_INT 30
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39815: LD_VAR 0 6
39819: PPUSH
39820: CALL_OW 257
39824: PUSH
39825: LD_INT 9
39827: EQUAL
39828: IFFALSE 39849
// points := [ 20 , 55 , 40 ] ;
39830: LD_ADDR_VAR 0 9
39834: PUSH
39835: LD_INT 20
39837: PUSH
39838: LD_INT 55
39840: PUSH
39841: LD_INT 40
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39849: LD_VAR 0 6
39853: PPUSH
39854: CALL_OW 257
39858: PUSH
39859: LD_INT 12
39861: PUSH
39862: LD_INT 16
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: IN
39869: IFFALSE 39890
// points := [ 5 , 3 , 2 ] ;
39871: LD_ADDR_VAR 0 9
39875: PUSH
39876: LD_INT 5
39878: PUSH
39879: LD_INT 3
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39890: LD_VAR 0 6
39894: PPUSH
39895: CALL_OW 257
39899: PUSH
39900: LD_INT 17
39902: EQUAL
39903: IFFALSE 39924
// points := [ 100 , 50 , 75 ] ;
39905: LD_ADDR_VAR 0 9
39909: PUSH
39910: LD_INT 100
39912: PUSH
39913: LD_INT 50
39915: PUSH
39916: LD_INT 75
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39924: LD_VAR 0 6
39928: PPUSH
39929: CALL_OW 257
39933: PUSH
39934: LD_INT 15
39936: EQUAL
39937: IFFALSE 39958
// points := [ 10 , 5 , 3 ] ;
39939: LD_ADDR_VAR 0 9
39943: PUSH
39944: LD_INT 10
39946: PUSH
39947: LD_INT 5
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39958: LD_VAR 0 6
39962: PPUSH
39963: CALL_OW 257
39967: PUSH
39968: LD_INT 14
39970: EQUAL
39971: IFFALSE 39992
// points := [ 10 , 0 , 0 ] ;
39973: LD_ADDR_VAR 0 9
39977: PUSH
39978: LD_INT 10
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39992: LD_VAR 0 6
39996: PPUSH
39997: CALL_OW 257
40001: PUSH
40002: LD_INT 11
40004: EQUAL
40005: IFFALSE 40026
// points := [ 30 , 10 , 5 ] ;
40007: LD_ADDR_VAR 0 9
40011: PUSH
40012: LD_INT 30
40014: PUSH
40015: LD_INT 10
40017: PUSH
40018: LD_INT 5
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40026: LD_VAR 0 1
40030: PPUSH
40031: LD_INT 5
40033: PPUSH
40034: CALL_OW 321
40038: PUSH
40039: LD_INT 2
40041: EQUAL
40042: IFFALSE 40059
// bpoints := bpoints * 1.8 ;
40044: LD_ADDR_VAR 0 10
40048: PUSH
40049: LD_VAR 0 10
40053: PUSH
40054: LD_REAL  1.80000000000000E+0000
40057: MUL
40058: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40059: LD_VAR 0 6
40063: PPUSH
40064: CALL_OW 257
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: LD_INT 4
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: IN
40087: PUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: LD_INT 51
40095: PPUSH
40096: CALL_OW 321
40100: PUSH
40101: LD_INT 2
40103: EQUAL
40104: AND
40105: IFFALSE 40122
// bpoints := bpoints * 1.2 ;
40107: LD_ADDR_VAR 0 10
40111: PUSH
40112: LD_VAR 0 10
40116: PUSH
40117: LD_REAL  1.20000000000000E+0000
40120: MUL
40121: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40122: LD_VAR 0 6
40126: PPUSH
40127: CALL_OW 257
40131: PUSH
40132: LD_INT 5
40134: PUSH
40135: LD_INT 7
40137: PUSH
40138: LD_INT 9
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: IN
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: LD_INT 52
40154: PPUSH
40155: CALL_OW 321
40159: PUSH
40160: LD_INT 2
40162: EQUAL
40163: AND
40164: IFFALSE 40181
// bpoints := bpoints * 1.5 ;
40166: LD_ADDR_VAR 0 10
40170: PUSH
40171: LD_VAR 0 10
40175: PUSH
40176: LD_REAL  1.50000000000000E+0000
40179: MUL
40180: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40181: LD_VAR 0 1
40185: PPUSH
40186: LD_INT 66
40188: PPUSH
40189: CALL_OW 321
40193: PUSH
40194: LD_INT 2
40196: EQUAL
40197: IFFALSE 40214
// bpoints := bpoints * 1.1 ;
40199: LD_ADDR_VAR 0 10
40203: PUSH
40204: LD_VAR 0 10
40208: PUSH
40209: LD_REAL  1.10000000000000E+0000
40212: MUL
40213: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40214: LD_ADDR_VAR 0 10
40218: PUSH
40219: LD_VAR 0 10
40223: PUSH
40224: LD_VAR 0 6
40228: PPUSH
40229: LD_INT 1
40231: PPUSH
40232: CALL_OW 259
40236: PUSH
40237: LD_REAL  1.15000000000000E+0000
40240: MUL
40241: MUL
40242: ST_TO_ADDR
// end ; unit_vehicle :
40243: GO 41073
40245: LD_INT 2
40247: DOUBLE
40248: EQUAL
40249: IFTRUE 40253
40251: GO 41061
40253: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40254: LD_VAR 0 6
40258: PPUSH
40259: CALL_OW 264
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: LD_INT 42
40269: PUSH
40270: LD_INT 24
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: IN
40278: IFFALSE 40299
// points := [ 25 , 5 , 3 ] ;
40280: LD_ADDR_VAR 0 9
40284: PUSH
40285: LD_INT 25
40287: PUSH
40288: LD_INT 5
40290: PUSH
40291: LD_INT 3
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40299: LD_VAR 0 6
40303: PPUSH
40304: CALL_OW 264
40308: PUSH
40309: LD_INT 4
40311: PUSH
40312: LD_INT 43
40314: PUSH
40315: LD_INT 25
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: IN
40323: IFFALSE 40344
// points := [ 40 , 15 , 5 ] ;
40325: LD_ADDR_VAR 0 9
40329: PUSH
40330: LD_INT 40
40332: PUSH
40333: LD_INT 15
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: LIST
40343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40344: LD_VAR 0 6
40348: PPUSH
40349: CALL_OW 264
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: LD_INT 23
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: IN
40364: IFFALSE 40385
// points := [ 7 , 25 , 8 ] ;
40366: LD_ADDR_VAR 0 9
40370: PUSH
40371: LD_INT 7
40373: PUSH
40374: LD_INT 25
40376: PUSH
40377: LD_INT 8
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40385: LD_VAR 0 6
40389: PPUSH
40390: CALL_OW 264
40394: PUSH
40395: LD_INT 5
40397: PUSH
40398: LD_INT 27
40400: PUSH
40401: LD_INT 44
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: LIST
40408: IN
40409: IFFALSE 40430
// points := [ 14 , 50 , 16 ] ;
40411: LD_ADDR_VAR 0 9
40415: PUSH
40416: LD_INT 14
40418: PUSH
40419: LD_INT 50
40421: PUSH
40422: LD_INT 16
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40430: LD_VAR 0 6
40434: PPUSH
40435: CALL_OW 264
40439: PUSH
40440: LD_INT 6
40442: PUSH
40443: LD_INT 46
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: IN
40450: IFFALSE 40471
// points := [ 32 , 120 , 70 ] ;
40452: LD_ADDR_VAR 0 9
40456: PUSH
40457: LD_INT 32
40459: PUSH
40460: LD_INT 120
40462: PUSH
40463: LD_INT 70
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40471: LD_VAR 0 6
40475: PPUSH
40476: CALL_OW 264
40480: PUSH
40481: LD_INT 7
40483: PUSH
40484: LD_INT 28
40486: PUSH
40487: LD_INT 45
40489: PUSH
40490: LD_EXP 41
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: IN
40501: IFFALSE 40522
// points := [ 35 , 20 , 45 ] ;
40503: LD_ADDR_VAR 0 9
40507: PUSH
40508: LD_INT 35
40510: PUSH
40511: LD_INT 20
40513: PUSH
40514: LD_INT 45
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40522: LD_VAR 0 6
40526: PPUSH
40527: CALL_OW 264
40531: PUSH
40532: LD_INT 47
40534: PUSH
40535: EMPTY
40536: LIST
40537: IN
40538: IFFALSE 40559
// points := [ 67 , 45 , 75 ] ;
40540: LD_ADDR_VAR 0 9
40544: PUSH
40545: LD_INT 67
40547: PUSH
40548: LD_INT 45
40550: PUSH
40551: LD_INT 75
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40559: LD_VAR 0 6
40563: PPUSH
40564: CALL_OW 264
40568: PUSH
40569: LD_INT 26
40571: PUSH
40572: EMPTY
40573: LIST
40574: IN
40575: IFFALSE 40596
// points := [ 120 , 30 , 80 ] ;
40577: LD_ADDR_VAR 0 9
40581: PUSH
40582: LD_INT 120
40584: PUSH
40585: LD_INT 30
40587: PUSH
40588: LD_INT 80
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: LIST
40595: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40596: LD_VAR 0 6
40600: PPUSH
40601: CALL_OW 264
40605: PUSH
40606: LD_INT 22
40608: PUSH
40609: EMPTY
40610: LIST
40611: IN
40612: IFFALSE 40633
// points := [ 40 , 1 , 1 ] ;
40614: LD_ADDR_VAR 0 9
40618: PUSH
40619: LD_INT 40
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40633: LD_VAR 0 6
40637: PPUSH
40638: CALL_OW 264
40642: PUSH
40643: LD_INT 29
40645: PUSH
40646: EMPTY
40647: LIST
40648: IN
40649: IFFALSE 40670
// points := [ 70 , 200 , 400 ] ;
40651: LD_ADDR_VAR 0 9
40655: PUSH
40656: LD_INT 70
40658: PUSH
40659: LD_INT 200
40661: PUSH
40662: LD_INT 400
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40670: LD_VAR 0 6
40674: PPUSH
40675: CALL_OW 264
40679: PUSH
40680: LD_INT 14
40682: PUSH
40683: LD_INT 53
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: IN
40690: IFFALSE 40711
// points := [ 40 , 10 , 20 ] ;
40692: LD_ADDR_VAR 0 9
40696: PUSH
40697: LD_INT 40
40699: PUSH
40700: LD_INT 10
40702: PUSH
40703: LD_INT 20
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40711: LD_VAR 0 6
40715: PPUSH
40716: CALL_OW 264
40720: PUSH
40721: LD_INT 9
40723: PUSH
40724: EMPTY
40725: LIST
40726: IN
40727: IFFALSE 40748
// points := [ 5 , 70 , 20 ] ;
40729: LD_ADDR_VAR 0 9
40733: PUSH
40734: LD_INT 5
40736: PUSH
40737: LD_INT 70
40739: PUSH
40740: LD_INT 20
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40748: LD_VAR 0 6
40752: PPUSH
40753: CALL_OW 264
40757: PUSH
40758: LD_INT 10
40760: PUSH
40761: EMPTY
40762: LIST
40763: IN
40764: IFFALSE 40785
// points := [ 35 , 110 , 70 ] ;
40766: LD_ADDR_VAR 0 9
40770: PUSH
40771: LD_INT 35
40773: PUSH
40774: LD_INT 110
40776: PUSH
40777: LD_INT 70
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40785: LD_VAR 0 6
40789: PPUSH
40790: CALL_OW 265
40794: PUSH
40795: LD_INT 25
40797: EQUAL
40798: IFFALSE 40819
// points := [ 80 , 65 , 100 ] ;
40800: LD_ADDR_VAR 0 9
40804: PUSH
40805: LD_INT 80
40807: PUSH
40808: LD_INT 65
40810: PUSH
40811: LD_INT 100
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40819: LD_VAR 0 6
40823: PPUSH
40824: CALL_OW 263
40828: PUSH
40829: LD_INT 1
40831: EQUAL
40832: IFFALSE 40867
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40834: LD_ADDR_VAR 0 10
40838: PUSH
40839: LD_VAR 0 10
40843: PUSH
40844: LD_VAR 0 6
40848: PPUSH
40849: CALL_OW 311
40853: PPUSH
40854: LD_INT 3
40856: PPUSH
40857: CALL_OW 259
40861: PUSH
40862: LD_INT 4
40864: MUL
40865: MUL
40866: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40867: LD_VAR 0 6
40871: PPUSH
40872: CALL_OW 263
40876: PUSH
40877: LD_INT 2
40879: EQUAL
40880: IFFALSE 40931
// begin j := IsControledBy ( i ) ;
40882: LD_ADDR_VAR 0 7
40886: PUSH
40887: LD_VAR 0 6
40891: PPUSH
40892: CALL_OW 312
40896: ST_TO_ADDR
// if j then
40897: LD_VAR 0 7
40901: IFFALSE 40931
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40903: LD_ADDR_VAR 0 10
40907: PUSH
40908: LD_VAR 0 10
40912: PUSH
40913: LD_VAR 0 7
40917: PPUSH
40918: LD_INT 3
40920: PPUSH
40921: CALL_OW 259
40925: PUSH
40926: LD_INT 3
40928: MUL
40929: MUL
40930: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40931: LD_VAR 0 6
40935: PPUSH
40936: CALL_OW 264
40940: PUSH
40941: LD_INT 5
40943: PUSH
40944: LD_INT 6
40946: PUSH
40947: LD_INT 46
40949: PUSH
40950: LD_INT 44
40952: PUSH
40953: LD_INT 47
40955: PUSH
40956: LD_INT 45
40958: PUSH
40959: LD_INT 28
40961: PUSH
40962: LD_INT 7
40964: PUSH
40965: LD_INT 27
40967: PUSH
40968: LD_INT 29
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: IN
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: LD_INT 52
40991: PPUSH
40992: CALL_OW 321
40996: PUSH
40997: LD_INT 2
40999: EQUAL
41000: AND
41001: IFFALSE 41018
// bpoints := bpoints * 1.2 ;
41003: LD_ADDR_VAR 0 10
41007: PUSH
41008: LD_VAR 0 10
41012: PUSH
41013: LD_REAL  1.20000000000000E+0000
41016: MUL
41017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41018: LD_VAR 0 6
41022: PPUSH
41023: CALL_OW 264
41027: PUSH
41028: LD_INT 6
41030: PUSH
41031: LD_INT 46
41033: PUSH
41034: LD_INT 47
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: IN
41042: IFFALSE 41059
// bpoints := bpoints * 1.2 ;
41044: LD_ADDR_VAR 0 10
41048: PUSH
41049: LD_VAR 0 10
41053: PUSH
41054: LD_REAL  1.20000000000000E+0000
41057: MUL
41058: ST_TO_ADDR
// end ; unit_building :
41059: GO 41073
41061: LD_INT 3
41063: DOUBLE
41064: EQUAL
41065: IFTRUE 41069
41067: GO 41072
41069: POP
// ; end ;
41070: GO 41073
41072: POP
// for j = 1 to 3 do
41073: LD_ADDR_VAR 0 7
41077: PUSH
41078: DOUBLE
41079: LD_INT 1
41081: DEC
41082: ST_TO_ADDR
41083: LD_INT 3
41085: PUSH
41086: FOR_TO
41087: IFFALSE 41140
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41089: LD_ADDR_VAR 0 5
41093: PUSH
41094: LD_VAR 0 5
41098: PPUSH
41099: LD_VAR 0 7
41103: PPUSH
41104: LD_VAR 0 5
41108: PUSH
41109: LD_VAR 0 7
41113: ARRAY
41114: PUSH
41115: LD_VAR 0 9
41119: PUSH
41120: LD_VAR 0 7
41124: ARRAY
41125: PUSH
41126: LD_VAR 0 10
41130: MUL
41131: PLUS
41132: PPUSH
41133: CALL_OW 1
41137: ST_TO_ADDR
41138: GO 41086
41140: POP
41141: POP
// end ;
41142: GO 39619
41144: POP
41145: POP
// result := Replace ( result , 4 , tmp ) ;
41146: LD_ADDR_VAR 0 5
41150: PUSH
41151: LD_VAR 0 5
41155: PPUSH
41156: LD_INT 4
41158: PPUSH
41159: LD_VAR 0 8
41163: PPUSH
41164: CALL_OW 1
41168: ST_TO_ADDR
// end ;
41169: LD_VAR 0 5
41173: RET
// export function DangerAtRange ( unit , range ) ; begin
41174: LD_INT 0
41176: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41177: LD_ADDR_VAR 0 3
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 255
41191: PPUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 250
41201: PPUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 251
41211: PPUSH
41212: LD_VAR 0 2
41216: PPUSH
41217: CALL 39471 0 4
41221: ST_TO_ADDR
// end ;
41222: LD_VAR 0 3
41226: RET
// export function DangerInArea ( side , area ) ; begin
41227: LD_INT 0
41229: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 2
41239: PPUSH
41240: LD_INT 81
41242: PUSH
41243: LD_VAR 0 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PPUSH
41252: CALL_OW 70
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 3
41261: RET
// export function IsExtension ( b ) ; begin
41262: LD_INT 0
41264: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41265: LD_ADDR_VAR 0 2
41269: PUSH
41270: LD_VAR 0 1
41274: PUSH
41275: LD_INT 23
41277: PUSH
41278: LD_INT 20
41280: PUSH
41281: LD_INT 22
41283: PUSH
41284: LD_INT 17
41286: PUSH
41287: LD_INT 24
41289: PUSH
41290: LD_INT 21
41292: PUSH
41293: LD_INT 19
41295: PUSH
41296: LD_INT 16
41298: PUSH
41299: LD_INT 25
41301: PUSH
41302: LD_INT 18
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: IN
41317: ST_TO_ADDR
// end ;
41318: LD_VAR 0 2
41322: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41323: LD_INT 0
41325: PPUSH
41326: PPUSH
41327: PPUSH
// result := [ ] ;
41328: LD_ADDR_VAR 0 4
41332: PUSH
41333: EMPTY
41334: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41335: LD_ADDR_VAR 0 5
41339: PUSH
41340: LD_VAR 0 2
41344: PPUSH
41345: LD_INT 21
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PPUSH
41355: CALL_OW 70
41359: ST_TO_ADDR
// if not tmp then
41360: LD_VAR 0 5
41364: NOT
41365: IFFALSE 41369
// exit ;
41367: GO 41433
// if checkLink then
41369: LD_VAR 0 3
41373: IFFALSE 41423
// begin for i in tmp do
41375: LD_ADDR_VAR 0 6
41379: PUSH
41380: LD_VAR 0 5
41384: PUSH
41385: FOR_IN
41386: IFFALSE 41421
// if GetBase ( i ) <> base then
41388: LD_VAR 0 6
41392: PPUSH
41393: CALL_OW 274
41397: PUSH
41398: LD_VAR 0 1
41402: NONEQUAL
41403: IFFALSE 41419
// ComLinkToBase ( base , i ) ;
41405: LD_VAR 0 1
41409: PPUSH
41410: LD_VAR 0 6
41414: PPUSH
41415: CALL_OW 169
41419: GO 41385
41421: POP
41422: POP
// end ; result := tmp ;
41423: LD_ADDR_VAR 0 4
41427: PUSH
41428: LD_VAR 0 5
41432: ST_TO_ADDR
// end ;
41433: LD_VAR 0 4
41437: RET
// export function ComComplete ( units , b ) ; var i ; begin
41438: LD_INT 0
41440: PPUSH
41441: PPUSH
// if not units then
41442: LD_VAR 0 1
41446: NOT
41447: IFFALSE 41451
// exit ;
41449: GO 41541
// for i in units do
41451: LD_ADDR_VAR 0 4
41455: PUSH
41456: LD_VAR 0 1
41460: PUSH
41461: FOR_IN
41462: IFFALSE 41539
// if BuildingStatus ( b ) = bs_build then
41464: LD_VAR 0 2
41468: PPUSH
41469: CALL_OW 461
41473: PUSH
41474: LD_INT 1
41476: EQUAL
41477: IFFALSE 41537
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41479: LD_VAR 0 4
41483: PPUSH
41484: LD_STRING h
41486: PUSH
41487: LD_VAR 0 2
41491: PPUSH
41492: CALL_OW 250
41496: PUSH
41497: LD_VAR 0 2
41501: PPUSH
41502: CALL_OW 251
41506: PUSH
41507: LD_VAR 0 2
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: PUSH
41530: EMPTY
41531: LIST
41532: PPUSH
41533: CALL_OW 446
41537: GO 41461
41539: POP
41540: POP
// end ;
41541: LD_VAR 0 3
41545: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41546: LD_INT 0
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41554: LD_VAR 0 1
41558: NOT
41559: PUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 263
41569: PUSH
41570: LD_INT 2
41572: NONEQUAL
41573: OR
41574: IFFALSE 41578
// exit ;
41576: GO 41894
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41578: LD_ADDR_VAR 0 6
41582: PUSH
41583: LD_INT 22
41585: PUSH
41586: LD_VAR 0 1
41590: PPUSH
41591: CALL_OW 255
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 30
41605: PUSH
41606: LD_INT 36
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 34
41615: PUSH
41616: LD_INT 31
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PPUSH
41632: CALL_OW 69
41636: ST_TO_ADDR
// if not tmp then
41637: LD_VAR 0 6
41641: NOT
41642: IFFALSE 41646
// exit ;
41644: GO 41894
// result := [ ] ;
41646: LD_ADDR_VAR 0 2
41650: PUSH
41651: EMPTY
41652: ST_TO_ADDR
// for i in tmp do
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_VAR 0 6
41662: PUSH
41663: FOR_IN
41664: IFFALSE 41735
// begin t := UnitsInside ( i ) ;
41666: LD_ADDR_VAR 0 4
41670: PUSH
41671: LD_VAR 0 3
41675: PPUSH
41676: CALL_OW 313
41680: ST_TO_ADDR
// if t then
41681: LD_VAR 0 4
41685: IFFALSE 41733
// for j in t do
41687: LD_ADDR_VAR 0 7
41691: PUSH
41692: LD_VAR 0 4
41696: PUSH
41697: FOR_IN
41698: IFFALSE 41731
// result := Replace ( result , result + 1 , j ) ;
41700: LD_ADDR_VAR 0 2
41704: PUSH
41705: LD_VAR 0 2
41709: PPUSH
41710: LD_VAR 0 2
41714: PUSH
41715: LD_INT 1
41717: PLUS
41718: PPUSH
41719: LD_VAR 0 7
41723: PPUSH
41724: CALL_OW 1
41728: ST_TO_ADDR
41729: GO 41697
41731: POP
41732: POP
// end ;
41733: GO 41663
41735: POP
41736: POP
// if not result then
41737: LD_VAR 0 2
41741: NOT
41742: IFFALSE 41746
// exit ;
41744: GO 41894
// mech := result [ 1 ] ;
41746: LD_ADDR_VAR 0 5
41750: PUSH
41751: LD_VAR 0 2
41755: PUSH
41756: LD_INT 1
41758: ARRAY
41759: ST_TO_ADDR
// if result > 1 then
41760: LD_VAR 0 2
41764: PUSH
41765: LD_INT 1
41767: GREATER
41768: IFFALSE 41880
// begin for i = 2 to result do
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: DOUBLE
41776: LD_INT 2
41778: DEC
41779: ST_TO_ADDR
41780: LD_VAR 0 2
41784: PUSH
41785: FOR_TO
41786: IFFALSE 41878
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41788: LD_ADDR_VAR 0 4
41792: PUSH
41793: LD_VAR 0 2
41797: PUSH
41798: LD_VAR 0 3
41802: ARRAY
41803: PPUSH
41804: LD_INT 3
41806: PPUSH
41807: CALL_OW 259
41811: PUSH
41812: LD_VAR 0 2
41816: PUSH
41817: LD_VAR 0 3
41821: ARRAY
41822: PPUSH
41823: CALL_OW 432
41827: MINUS
41828: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41829: LD_VAR 0 4
41833: PUSH
41834: LD_VAR 0 5
41838: PPUSH
41839: LD_INT 3
41841: PPUSH
41842: CALL_OW 259
41846: PUSH
41847: LD_VAR 0 5
41851: PPUSH
41852: CALL_OW 432
41856: MINUS
41857: GREATEREQUAL
41858: IFFALSE 41876
// mech := result [ i ] ;
41860: LD_ADDR_VAR 0 5
41864: PUSH
41865: LD_VAR 0 2
41869: PUSH
41870: LD_VAR 0 3
41874: ARRAY
41875: ST_TO_ADDR
// end ;
41876: GO 41785
41878: POP
41879: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41880: LD_VAR 0 1
41884: PPUSH
41885: LD_VAR 0 5
41889: PPUSH
41890: CALL_OW 135
// end ;
41894: LD_VAR 0 2
41898: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41899: LD_INT 0
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
// result := [ ] ;
41914: LD_ADDR_VAR 0 7
41918: PUSH
41919: EMPTY
41920: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 266
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: IN
41941: NOT
41942: IFFALSE 41946
// exit ;
41944: GO 43580
// if name then
41946: LD_VAR 0 3
41950: IFFALSE 41966
// SetBName ( base_dep , name ) ;
41952: LD_VAR 0 1
41956: PPUSH
41957: LD_VAR 0 3
41961: PPUSH
41962: CALL_OW 500
// base := GetBase ( base_dep ) ;
41966: LD_ADDR_VAR 0 15
41970: PUSH
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 274
41980: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41981: LD_ADDR_VAR 0 16
41985: PUSH
41986: LD_VAR 0 1
41990: PPUSH
41991: CALL_OW 255
41995: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41996: LD_ADDR_VAR 0 17
42000: PUSH
42001: LD_VAR 0 1
42005: PPUSH
42006: CALL_OW 248
42010: ST_TO_ADDR
// if sources then
42011: LD_VAR 0 5
42015: IFFALSE 42062
// for i = 1 to 3 do
42017: LD_ADDR_VAR 0 8
42021: PUSH
42022: DOUBLE
42023: LD_INT 1
42025: DEC
42026: ST_TO_ADDR
42027: LD_INT 3
42029: PUSH
42030: FOR_TO
42031: IFFALSE 42060
// AddResourceType ( base , i , sources [ i ] ) ;
42033: LD_VAR 0 15
42037: PPUSH
42038: LD_VAR 0 8
42042: PPUSH
42043: LD_VAR 0 5
42047: PUSH
42048: LD_VAR 0 8
42052: ARRAY
42053: PPUSH
42054: CALL_OW 276
42058: GO 42030
42060: POP
42061: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42062: LD_ADDR_VAR 0 18
42066: PUSH
42067: LD_VAR 0 15
42071: PPUSH
42072: LD_VAR 0 2
42076: PPUSH
42077: LD_INT 1
42079: PPUSH
42080: CALL 41323 0 3
42084: ST_TO_ADDR
// InitHc ;
42085: CALL_OW 19
// InitUc ;
42089: CALL_OW 18
// uc_side := side ;
42093: LD_ADDR_OWVAR 20
42097: PUSH
42098: LD_VAR 0 16
42102: ST_TO_ADDR
// uc_nation := nation ;
42103: LD_ADDR_OWVAR 21
42107: PUSH
42108: LD_VAR 0 17
42112: ST_TO_ADDR
// if buildings then
42113: LD_VAR 0 18
42117: IFFALSE 43439
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42119: LD_ADDR_VAR 0 19
42123: PUSH
42124: LD_VAR 0 18
42128: PPUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 30
42134: PUSH
42135: LD_INT 29
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 30
42144: PUSH
42145: LD_INT 30
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: PPUSH
42157: CALL_OW 72
42161: ST_TO_ADDR
// if tmp then
42162: LD_VAR 0 19
42166: IFFALSE 42214
// for i in tmp do
42168: LD_ADDR_VAR 0 8
42172: PUSH
42173: LD_VAR 0 19
42177: PUSH
42178: FOR_IN
42179: IFFALSE 42212
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42181: LD_VAR 0 8
42185: PPUSH
42186: CALL_OW 250
42190: PPUSH
42191: LD_VAR 0 8
42195: PPUSH
42196: CALL_OW 251
42200: PPUSH
42201: LD_VAR 0 16
42205: PPUSH
42206: CALL_OW 441
42210: GO 42178
42212: POP
42213: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42214: LD_VAR 0 18
42218: PPUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 30
42224: PUSH
42225: LD_INT 32
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 30
42234: PUSH
42235: LD_INT 33
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: PPUSH
42247: CALL_OW 72
42251: IFFALSE 42339
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42253: LD_ADDR_VAR 0 8
42257: PUSH
42258: LD_VAR 0 18
42262: PPUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 30
42268: PUSH
42269: LD_INT 32
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 30
42278: PUSH
42279: LD_INT 33
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: PPUSH
42291: CALL_OW 72
42295: PUSH
42296: FOR_IN
42297: IFFALSE 42337
// begin if not GetBWeapon ( i ) then
42299: LD_VAR 0 8
42303: PPUSH
42304: CALL_OW 269
42308: NOT
42309: IFFALSE 42335
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42311: LD_VAR 0 8
42315: PPUSH
42316: LD_VAR 0 8
42320: PPUSH
42321: LD_VAR 0 2
42325: PPUSH
42326: CALL 43585 0 2
42330: PPUSH
42331: CALL_OW 431
// end ;
42335: GO 42296
42337: POP
42338: POP
// end ; for i = 1 to personel do
42339: LD_ADDR_VAR 0 8
42343: PUSH
42344: DOUBLE
42345: LD_INT 1
42347: DEC
42348: ST_TO_ADDR
42349: LD_VAR 0 6
42353: PUSH
42354: FOR_TO
42355: IFFALSE 43419
// begin if i > 4 then
42357: LD_VAR 0 8
42361: PUSH
42362: LD_INT 4
42364: GREATER
42365: IFFALSE 42369
// break ;
42367: GO 43419
// case i of 1 :
42369: LD_VAR 0 8
42373: PUSH
42374: LD_INT 1
42376: DOUBLE
42377: EQUAL
42378: IFTRUE 42382
42380: GO 42462
42382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42383: LD_ADDR_VAR 0 12
42387: PUSH
42388: LD_VAR 0 18
42392: PPUSH
42393: LD_INT 22
42395: PUSH
42396: LD_VAR 0 16
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 58
42407: PUSH
42408: EMPTY
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 30
42416: PUSH
42417: LD_INT 32
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 30
42426: PUSH
42427: LD_INT 4
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 30
42436: PUSH
42437: LD_INT 5
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: PPUSH
42455: CALL_OW 72
42459: ST_TO_ADDR
42460: GO 42684
42462: LD_INT 2
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42470
42468: GO 42532
42470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42471: LD_ADDR_VAR 0 12
42475: PUSH
42476: LD_VAR 0 18
42480: PPUSH
42481: LD_INT 22
42483: PUSH
42484: LD_VAR 0 16
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 30
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 30
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PPUSH
42525: CALL_OW 72
42529: ST_TO_ADDR
42530: GO 42684
42532: LD_INT 3
42534: DOUBLE
42535: EQUAL
42536: IFTRUE 42540
42538: GO 42602
42540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42541: LD_ADDR_VAR 0 12
42545: PUSH
42546: LD_VAR 0 18
42550: PPUSH
42551: LD_INT 22
42553: PUSH
42554: LD_VAR 0 16
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 30
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 30
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PPUSH
42595: CALL_OW 72
42599: ST_TO_ADDR
42600: GO 42684
42602: LD_INT 4
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42683
42610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42611: LD_ADDR_VAR 0 12
42615: PUSH
42616: LD_VAR 0 18
42620: PPUSH
42621: LD_INT 22
42623: PUSH
42624: LD_VAR 0 16
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 30
42638: PUSH
42639: LD_INT 6
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 30
42648: PUSH
42649: LD_INT 7
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 30
42658: PUSH
42659: LD_INT 8
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PPUSH
42676: CALL_OW 72
42680: ST_TO_ADDR
42681: GO 42684
42683: POP
// if i = 1 then
42684: LD_VAR 0 8
42688: PUSH
42689: LD_INT 1
42691: EQUAL
42692: IFFALSE 42803
// begin tmp := [ ] ;
42694: LD_ADDR_VAR 0 19
42698: PUSH
42699: EMPTY
42700: ST_TO_ADDR
// for j in f do
42701: LD_ADDR_VAR 0 9
42705: PUSH
42706: LD_VAR 0 12
42710: PUSH
42711: FOR_IN
42712: IFFALSE 42785
// if GetBType ( j ) = b_bunker then
42714: LD_VAR 0 9
42718: PPUSH
42719: CALL_OW 266
42723: PUSH
42724: LD_INT 32
42726: EQUAL
42727: IFFALSE 42754
// tmp := Insert ( tmp , 1 , j ) else
42729: LD_ADDR_VAR 0 19
42733: PUSH
42734: LD_VAR 0 19
42738: PPUSH
42739: LD_INT 1
42741: PPUSH
42742: LD_VAR 0 9
42746: PPUSH
42747: CALL_OW 2
42751: ST_TO_ADDR
42752: GO 42783
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42754: LD_ADDR_VAR 0 19
42758: PUSH
42759: LD_VAR 0 19
42763: PPUSH
42764: LD_VAR 0 19
42768: PUSH
42769: LD_INT 1
42771: PLUS
42772: PPUSH
42773: LD_VAR 0 9
42777: PPUSH
42778: CALL_OW 2
42782: ST_TO_ADDR
42783: GO 42711
42785: POP
42786: POP
// if tmp then
42787: LD_VAR 0 19
42791: IFFALSE 42803
// f := tmp ;
42793: LD_ADDR_VAR 0 12
42797: PUSH
42798: LD_VAR 0 19
42802: ST_TO_ADDR
// end ; x := personel [ i ] ;
42803: LD_ADDR_VAR 0 13
42807: PUSH
42808: LD_VAR 0 6
42812: PUSH
42813: LD_VAR 0 8
42817: ARRAY
42818: ST_TO_ADDR
// if x = - 1 then
42819: LD_VAR 0 13
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: EQUAL
42828: IFFALSE 43037
// begin for j in f do
42830: LD_ADDR_VAR 0 9
42834: PUSH
42835: LD_VAR 0 12
42839: PUSH
42840: FOR_IN
42841: IFFALSE 43033
// repeat InitHc ;
42843: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42847: LD_VAR 0 9
42851: PPUSH
42852: CALL_OW 266
42856: PUSH
42857: LD_INT 5
42859: EQUAL
42860: IFFALSE 42930
// begin if UnitsInside ( j ) < 3 then
42862: LD_VAR 0 9
42866: PPUSH
42867: CALL_OW 313
42871: PUSH
42872: LD_INT 3
42874: LESS
42875: IFFALSE 42911
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42877: LD_INT 0
42879: PPUSH
42880: LD_INT 5
42882: PUSH
42883: LD_INT 8
42885: PUSH
42886: LD_INT 9
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: PUSH
42894: LD_VAR 0 17
42898: ARRAY
42899: PPUSH
42900: LD_VAR 0 4
42904: PPUSH
42905: CALL_OW 380
42909: GO 42928
// PrepareHuman ( false , i , skill ) ;
42911: LD_INT 0
42913: PPUSH
42914: LD_VAR 0 8
42918: PPUSH
42919: LD_VAR 0 4
42923: PPUSH
42924: CALL_OW 380
// end else
42928: GO 42947
// PrepareHuman ( false , i , skill ) ;
42930: LD_INT 0
42932: PPUSH
42933: LD_VAR 0 8
42937: PPUSH
42938: LD_VAR 0 4
42942: PPUSH
42943: CALL_OW 380
// un := CreateHuman ;
42947: LD_ADDR_VAR 0 14
42951: PUSH
42952: CALL_OW 44
42956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42957: LD_ADDR_VAR 0 7
42961: PUSH
42962: LD_VAR 0 7
42966: PPUSH
42967: LD_INT 1
42969: PPUSH
42970: LD_VAR 0 14
42974: PPUSH
42975: CALL_OW 2
42979: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42980: LD_VAR 0 14
42984: PPUSH
42985: LD_VAR 0 9
42989: PPUSH
42990: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42994: LD_VAR 0 9
42998: PPUSH
42999: CALL_OW 313
43003: PUSH
43004: LD_INT 6
43006: EQUAL
43007: PUSH
43008: LD_VAR 0 9
43012: PPUSH
43013: CALL_OW 266
43017: PUSH
43018: LD_INT 32
43020: PUSH
43021: LD_INT 31
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: IN
43028: OR
43029: IFFALSE 42843
43031: GO 42840
43033: POP
43034: POP
// end else
43035: GO 43417
// for j = 1 to x do
43037: LD_ADDR_VAR 0 9
43041: PUSH
43042: DOUBLE
43043: LD_INT 1
43045: DEC
43046: ST_TO_ADDR
43047: LD_VAR 0 13
43051: PUSH
43052: FOR_TO
43053: IFFALSE 43415
// begin InitHc ;
43055: CALL_OW 19
// if not f then
43059: LD_VAR 0 12
43063: NOT
43064: IFFALSE 43153
// begin PrepareHuman ( false , i , skill ) ;
43066: LD_INT 0
43068: PPUSH
43069: LD_VAR 0 8
43073: PPUSH
43074: LD_VAR 0 4
43078: PPUSH
43079: CALL_OW 380
// un := CreateHuman ;
43083: LD_ADDR_VAR 0 14
43087: PUSH
43088: CALL_OW 44
43092: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43093: LD_ADDR_VAR 0 7
43097: PUSH
43098: LD_VAR 0 7
43102: PPUSH
43103: LD_INT 1
43105: PPUSH
43106: LD_VAR 0 14
43110: PPUSH
43111: CALL_OW 2
43115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43116: LD_VAR 0 14
43120: PPUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: CALL_OW 250
43130: PPUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 251
43140: PPUSH
43141: LD_INT 10
43143: PPUSH
43144: LD_INT 0
43146: PPUSH
43147: CALL_OW 50
// continue ;
43151: GO 43052
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43153: LD_VAR 0 12
43157: PUSH
43158: LD_INT 1
43160: ARRAY
43161: PPUSH
43162: CALL_OW 313
43166: PUSH
43167: LD_VAR 0 12
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PPUSH
43176: CALL_OW 266
43180: PUSH
43181: LD_INT 32
43183: PUSH
43184: LD_INT 31
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: IN
43191: AND
43192: PUSH
43193: LD_VAR 0 12
43197: PUSH
43198: LD_INT 1
43200: ARRAY
43201: PPUSH
43202: CALL_OW 313
43206: PUSH
43207: LD_INT 6
43209: EQUAL
43210: OR
43211: IFFALSE 43231
// f := Delete ( f , 1 ) ;
43213: LD_ADDR_VAR 0 12
43217: PUSH
43218: LD_VAR 0 12
43222: PPUSH
43223: LD_INT 1
43225: PPUSH
43226: CALL_OW 3
43230: ST_TO_ADDR
// if not f then
43231: LD_VAR 0 12
43235: NOT
43236: IFFALSE 43254
// begin x := x + 2 ;
43238: LD_ADDR_VAR 0 13
43242: PUSH
43243: LD_VAR 0 13
43247: PUSH
43248: LD_INT 2
43250: PLUS
43251: ST_TO_ADDR
// continue ;
43252: GO 43052
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43254: LD_VAR 0 12
43258: PUSH
43259: LD_INT 1
43261: ARRAY
43262: PPUSH
43263: CALL_OW 266
43267: PUSH
43268: LD_INT 5
43270: EQUAL
43271: IFFALSE 43345
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43273: LD_VAR 0 12
43277: PUSH
43278: LD_INT 1
43280: ARRAY
43281: PPUSH
43282: CALL_OW 313
43286: PUSH
43287: LD_INT 3
43289: LESS
43290: IFFALSE 43326
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43292: LD_INT 0
43294: PPUSH
43295: LD_INT 5
43297: PUSH
43298: LD_INT 8
43300: PUSH
43301: LD_INT 9
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: PUSH
43309: LD_VAR 0 17
43313: ARRAY
43314: PPUSH
43315: LD_VAR 0 4
43319: PPUSH
43320: CALL_OW 380
43324: GO 43343
// PrepareHuman ( false , i , skill ) ;
43326: LD_INT 0
43328: PPUSH
43329: LD_VAR 0 8
43333: PPUSH
43334: LD_VAR 0 4
43338: PPUSH
43339: CALL_OW 380
// end else
43343: GO 43362
// PrepareHuman ( false , i , skill ) ;
43345: LD_INT 0
43347: PPUSH
43348: LD_VAR 0 8
43352: PPUSH
43353: LD_VAR 0 4
43357: PPUSH
43358: CALL_OW 380
// un := CreateHuman ;
43362: LD_ADDR_VAR 0 14
43366: PUSH
43367: CALL_OW 44
43371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43372: LD_ADDR_VAR 0 7
43376: PUSH
43377: LD_VAR 0 7
43381: PPUSH
43382: LD_INT 1
43384: PPUSH
43385: LD_VAR 0 14
43389: PPUSH
43390: CALL_OW 2
43394: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43395: LD_VAR 0 14
43399: PPUSH
43400: LD_VAR 0 12
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PPUSH
43409: CALL_OW 52
// end ;
43413: GO 43052
43415: POP
43416: POP
// end ;
43417: GO 42354
43419: POP
43420: POP
// result := result ^ buildings ;
43421: LD_ADDR_VAR 0 7
43425: PUSH
43426: LD_VAR 0 7
43430: PUSH
43431: LD_VAR 0 18
43435: ADD
43436: ST_TO_ADDR
// end else
43437: GO 43580
// begin for i = 1 to personel do
43439: LD_ADDR_VAR 0 8
43443: PUSH
43444: DOUBLE
43445: LD_INT 1
43447: DEC
43448: ST_TO_ADDR
43449: LD_VAR 0 6
43453: PUSH
43454: FOR_TO
43455: IFFALSE 43578
// begin if i > 4 then
43457: LD_VAR 0 8
43461: PUSH
43462: LD_INT 4
43464: GREATER
43465: IFFALSE 43469
// break ;
43467: GO 43578
// x := personel [ i ] ;
43469: LD_ADDR_VAR 0 13
43473: PUSH
43474: LD_VAR 0 6
43478: PUSH
43479: LD_VAR 0 8
43483: ARRAY
43484: ST_TO_ADDR
// if x = - 1 then
43485: LD_VAR 0 13
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: EQUAL
43494: IFFALSE 43498
// continue ;
43496: GO 43454
// PrepareHuman ( false , i , skill ) ;
43498: LD_INT 0
43500: PPUSH
43501: LD_VAR 0 8
43505: PPUSH
43506: LD_VAR 0 4
43510: PPUSH
43511: CALL_OW 380
// un := CreateHuman ;
43515: LD_ADDR_VAR 0 14
43519: PUSH
43520: CALL_OW 44
43524: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43525: LD_VAR 0 14
43529: PPUSH
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 250
43539: PPUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 251
43549: PPUSH
43550: LD_INT 10
43552: PPUSH
43553: LD_INT 0
43555: PPUSH
43556: CALL_OW 50
// result := result ^ un ;
43560: LD_ADDR_VAR 0 7
43564: PUSH
43565: LD_VAR 0 7
43569: PUSH
43570: LD_VAR 0 14
43574: ADD
43575: ST_TO_ADDR
// end ;
43576: GO 43454
43578: POP
43579: POP
// end ; end ;
43580: LD_VAR 0 7
43584: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43585: LD_INT 0
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
// result := false ;
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_INT 0
43610: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43611: LD_VAR 0 1
43615: NOT
43616: PUSH
43617: LD_VAR 0 1
43621: PPUSH
43622: CALL_OW 266
43626: PUSH
43627: LD_INT 32
43629: PUSH
43630: LD_INT 33
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: IN
43637: NOT
43638: OR
43639: IFFALSE 43643
// exit ;
43641: GO 44752
// nat := GetNation ( tower ) ;
43643: LD_ADDR_VAR 0 12
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 248
43657: ST_TO_ADDR
// side := GetSide ( tower ) ;
43658: LD_ADDR_VAR 0 16
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 255
43672: ST_TO_ADDR
// x := GetX ( tower ) ;
43673: LD_ADDR_VAR 0 10
43677: PUSH
43678: LD_VAR 0 1
43682: PPUSH
43683: CALL_OW 250
43687: ST_TO_ADDR
// y := GetY ( tower ) ;
43688: LD_ADDR_VAR 0 11
43692: PUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: CALL_OW 251
43702: ST_TO_ADDR
// if not x or not y then
43703: LD_VAR 0 10
43707: NOT
43708: PUSH
43709: LD_VAR 0 11
43713: NOT
43714: OR
43715: IFFALSE 43719
// exit ;
43717: GO 44752
// weapon := 0 ;
43719: LD_ADDR_VAR 0 18
43723: PUSH
43724: LD_INT 0
43726: ST_TO_ADDR
// fac_list := [ ] ;
43727: LD_ADDR_VAR 0 17
43731: PUSH
43732: EMPTY
43733: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43734: LD_ADDR_VAR 0 6
43738: PUSH
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL_OW 274
43748: PPUSH
43749: LD_VAR 0 2
43753: PPUSH
43754: LD_INT 0
43756: PPUSH
43757: CALL 41323 0 3
43761: PPUSH
43762: LD_INT 30
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PPUSH
43772: CALL_OW 72
43776: ST_TO_ADDR
// if not factories then
43777: LD_VAR 0 6
43781: NOT
43782: IFFALSE 43786
// exit ;
43784: GO 44752
// for i in factories do
43786: LD_ADDR_VAR 0 8
43790: PUSH
43791: LD_VAR 0 6
43795: PUSH
43796: FOR_IN
43797: IFFALSE 43822
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43799: LD_ADDR_VAR 0 17
43803: PUSH
43804: LD_VAR 0 17
43808: PUSH
43809: LD_VAR 0 8
43813: PPUSH
43814: CALL_OW 478
43818: UNION
43819: ST_TO_ADDR
43820: GO 43796
43822: POP
43823: POP
// if not fac_list then
43824: LD_VAR 0 17
43828: NOT
43829: IFFALSE 43833
// exit ;
43831: GO 44752
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43833: LD_ADDR_VAR 0 5
43837: PUSH
43838: LD_INT 4
43840: PUSH
43841: LD_INT 5
43843: PUSH
43844: LD_INT 9
43846: PUSH
43847: LD_INT 10
43849: PUSH
43850: LD_INT 6
43852: PUSH
43853: LD_INT 7
43855: PUSH
43856: LD_INT 11
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 27
43870: PUSH
43871: LD_INT 28
43873: PUSH
43874: LD_INT 26
43876: PUSH
43877: LD_INT 30
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 43
43888: PUSH
43889: LD_INT 44
43891: PUSH
43892: LD_INT 46
43894: PUSH
43895: LD_INT 45
43897: PUSH
43898: LD_INT 47
43900: PUSH
43901: LD_INT 49
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: PUSH
43917: LD_VAR 0 12
43921: ARRAY
43922: ST_TO_ADDR
// list := list isect fac_list ;
43923: LD_ADDR_VAR 0 5
43927: PUSH
43928: LD_VAR 0 5
43932: PUSH
43933: LD_VAR 0 17
43937: ISECT
43938: ST_TO_ADDR
// if not list then
43939: LD_VAR 0 5
43943: NOT
43944: IFFALSE 43948
// exit ;
43946: GO 44752
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43948: LD_VAR 0 12
43952: PUSH
43953: LD_INT 3
43955: EQUAL
43956: PUSH
43957: LD_INT 49
43959: PUSH
43960: LD_VAR 0 5
43964: IN
43965: AND
43966: PUSH
43967: LD_INT 31
43969: PPUSH
43970: LD_VAR 0 16
43974: PPUSH
43975: CALL_OW 321
43979: PUSH
43980: LD_INT 2
43982: EQUAL
43983: AND
43984: IFFALSE 44044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43986: LD_INT 22
43988: PUSH
43989: LD_VAR 0 16
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 35
44000: PUSH
44001: LD_INT 49
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 91
44010: PUSH
44011: LD_VAR 0 1
44015: PUSH
44016: LD_INT 10
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: LIST
44028: PPUSH
44029: CALL_OW 69
44033: NOT
44034: IFFALSE 44044
// weapon := ru_time_lapser ;
44036: LD_ADDR_VAR 0 18
44040: PUSH
44041: LD_INT 49
44043: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44044: LD_VAR 0 12
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: IN
44059: PUSH
44060: LD_INT 11
44062: PUSH
44063: LD_VAR 0 5
44067: IN
44068: PUSH
44069: LD_INT 30
44071: PUSH
44072: LD_VAR 0 5
44076: IN
44077: OR
44078: AND
44079: PUSH
44080: LD_INT 6
44082: PPUSH
44083: LD_VAR 0 16
44087: PPUSH
44088: CALL_OW 321
44092: PUSH
44093: LD_INT 2
44095: EQUAL
44096: AND
44097: IFFALSE 44262
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44099: LD_INT 22
44101: PUSH
44102: LD_VAR 0 16
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 35
44116: PUSH
44117: LD_INT 11
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 35
44126: PUSH
44127: LD_INT 30
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 91
44141: PUSH
44142: LD_VAR 0 1
44146: PUSH
44147: LD_INT 18
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: PPUSH
44160: CALL_OW 69
44164: NOT
44165: PUSH
44166: LD_INT 22
44168: PUSH
44169: LD_VAR 0 16
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 30
44183: PUSH
44184: LD_INT 32
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 30
44193: PUSH
44194: LD_INT 33
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 91
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: LD_INT 12
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: PPUSH
44230: CALL_OW 69
44234: PUSH
44235: LD_INT 2
44237: GREATER
44238: AND
44239: IFFALSE 44262
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44241: LD_ADDR_VAR 0 18
44245: PUSH
44246: LD_INT 11
44248: PUSH
44249: LD_INT 30
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_VAR 0 12
44260: ARRAY
44261: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44262: LD_VAR 0 18
44266: NOT
44267: PUSH
44268: LD_INT 40
44270: PPUSH
44271: LD_VAR 0 16
44275: PPUSH
44276: CALL_OW 321
44280: PUSH
44281: LD_INT 2
44283: EQUAL
44284: AND
44285: PUSH
44286: LD_INT 7
44288: PUSH
44289: LD_VAR 0 5
44293: IN
44294: PUSH
44295: LD_INT 28
44297: PUSH
44298: LD_VAR 0 5
44302: IN
44303: OR
44304: PUSH
44305: LD_INT 45
44307: PUSH
44308: LD_VAR 0 5
44312: IN
44313: OR
44314: AND
44315: IFFALSE 44569
// begin hex := GetHexInfo ( x , y ) ;
44317: LD_ADDR_VAR 0 4
44321: PUSH
44322: LD_VAR 0 10
44326: PPUSH
44327: LD_VAR 0 11
44331: PPUSH
44332: CALL_OW 546
44336: ST_TO_ADDR
// if hex [ 1 ] then
44337: LD_VAR 0 4
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: IFFALSE 44349
// exit ;
44347: GO 44752
// height := hex [ 2 ] ;
44349: LD_ADDR_VAR 0 15
44353: PUSH
44354: LD_VAR 0 4
44358: PUSH
44359: LD_INT 2
44361: ARRAY
44362: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44363: LD_ADDR_VAR 0 14
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: LD_INT 5
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: ST_TO_ADDR
// for i in tmp do
44386: LD_ADDR_VAR 0 8
44390: PUSH
44391: LD_VAR 0 14
44395: PUSH
44396: FOR_IN
44397: IFFALSE 44567
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44399: LD_ADDR_VAR 0 9
44403: PUSH
44404: LD_VAR 0 10
44408: PPUSH
44409: LD_VAR 0 8
44413: PPUSH
44414: LD_INT 5
44416: PPUSH
44417: CALL_OW 272
44421: PUSH
44422: LD_VAR 0 11
44426: PPUSH
44427: LD_VAR 0 8
44431: PPUSH
44432: LD_INT 5
44434: PPUSH
44435: CALL_OW 273
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44444: LD_VAR 0 9
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: PPUSH
44453: LD_VAR 0 9
44457: PUSH
44458: LD_INT 2
44460: ARRAY
44461: PPUSH
44462: CALL_OW 488
44466: IFFALSE 44565
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44468: LD_ADDR_VAR 0 4
44472: PUSH
44473: LD_VAR 0 9
44477: PUSH
44478: LD_INT 1
44480: ARRAY
44481: PPUSH
44482: LD_VAR 0 9
44486: PUSH
44487: LD_INT 2
44489: ARRAY
44490: PPUSH
44491: CALL_OW 546
44495: ST_TO_ADDR
// if hex [ 1 ] then
44496: LD_VAR 0 4
44500: PUSH
44501: LD_INT 1
44503: ARRAY
44504: IFFALSE 44508
// continue ;
44506: GO 44396
// h := hex [ 2 ] ;
44508: LD_ADDR_VAR 0 13
44512: PUSH
44513: LD_VAR 0 4
44517: PUSH
44518: LD_INT 2
44520: ARRAY
44521: ST_TO_ADDR
// if h + 7 < height then
44522: LD_VAR 0 13
44526: PUSH
44527: LD_INT 7
44529: PLUS
44530: PUSH
44531: LD_VAR 0 15
44535: LESS
44536: IFFALSE 44565
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44538: LD_ADDR_VAR 0 18
44542: PUSH
44543: LD_INT 7
44545: PUSH
44546: LD_INT 28
44548: PUSH
44549: LD_INT 45
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: PUSH
44557: LD_VAR 0 12
44561: ARRAY
44562: ST_TO_ADDR
// break ;
44563: GO 44567
// end ; end ; end ;
44565: GO 44396
44567: POP
44568: POP
// end ; if not weapon then
44569: LD_VAR 0 18
44573: NOT
44574: IFFALSE 44634
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_VAR 0 5
44585: PUSH
44586: LD_INT 11
44588: PUSH
44589: LD_INT 30
44591: PUSH
44592: LD_INT 49
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: DIFF
44600: ST_TO_ADDR
// if not list then
44601: LD_VAR 0 5
44605: NOT
44606: IFFALSE 44610
// exit ;
44608: GO 44752
// weapon := list [ rand ( 1 , list ) ] ;
44610: LD_ADDR_VAR 0 18
44614: PUSH
44615: LD_VAR 0 5
44619: PUSH
44620: LD_INT 1
44622: PPUSH
44623: LD_VAR 0 5
44627: PPUSH
44628: CALL_OW 12
44632: ARRAY
44633: ST_TO_ADDR
// end ; if weapon then
44634: LD_VAR 0 18
44638: IFFALSE 44752
// begin tmp := CostOfWeapon ( weapon ) ;
44640: LD_ADDR_VAR 0 14
44644: PUSH
44645: LD_VAR 0 18
44649: PPUSH
44650: CALL_OW 451
44654: ST_TO_ADDR
// j := GetBase ( tower ) ;
44655: LD_ADDR_VAR 0 9
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: CALL_OW 274
44669: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44670: LD_VAR 0 9
44674: PPUSH
44675: LD_INT 1
44677: PPUSH
44678: CALL_OW 275
44682: PUSH
44683: LD_VAR 0 14
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: GREATEREQUAL
44692: PUSH
44693: LD_VAR 0 9
44697: PPUSH
44698: LD_INT 2
44700: PPUSH
44701: CALL_OW 275
44705: PUSH
44706: LD_VAR 0 14
44710: PUSH
44711: LD_INT 2
44713: ARRAY
44714: GREATEREQUAL
44715: AND
44716: PUSH
44717: LD_VAR 0 9
44721: PPUSH
44722: LD_INT 3
44724: PPUSH
44725: CALL_OW 275
44729: PUSH
44730: LD_VAR 0 14
44734: PUSH
44735: LD_INT 3
44737: ARRAY
44738: GREATEREQUAL
44739: AND
44740: IFFALSE 44752
// result := weapon ;
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_VAR 0 18
44751: ST_TO_ADDR
// end ; end ;
44752: LD_VAR 0 3
44756: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44757: LD_INT 0
44759: PPUSH
44760: PPUSH
// result := true ;
44761: LD_ADDR_VAR 0 3
44765: PUSH
44766: LD_INT 1
44768: ST_TO_ADDR
// if array1 = array2 then
44769: LD_VAR 0 1
44773: PUSH
44774: LD_VAR 0 2
44778: EQUAL
44779: IFFALSE 44839
// begin for i = 1 to array1 do
44781: LD_ADDR_VAR 0 4
44785: PUSH
44786: DOUBLE
44787: LD_INT 1
44789: DEC
44790: ST_TO_ADDR
44791: LD_VAR 0 1
44795: PUSH
44796: FOR_TO
44797: IFFALSE 44835
// if array1 [ i ] <> array2 [ i ] then
44799: LD_VAR 0 1
44803: PUSH
44804: LD_VAR 0 4
44808: ARRAY
44809: PUSH
44810: LD_VAR 0 2
44814: PUSH
44815: LD_VAR 0 4
44819: ARRAY
44820: NONEQUAL
44821: IFFALSE 44833
// begin result := false ;
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: LD_INT 0
44830: ST_TO_ADDR
// break ;
44831: GO 44835
// end ;
44833: GO 44796
44835: POP
44836: POP
// end else
44837: GO 44847
// result := false ;
44839: LD_ADDR_VAR 0 3
44843: PUSH
44844: LD_INT 0
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 3
44851: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
// if not array1 or not array2 then
44856: LD_VAR 0 1
44860: NOT
44861: PUSH
44862: LD_VAR 0 2
44866: NOT
44867: OR
44868: IFFALSE 44872
// exit ;
44870: GO 44936
// result := true ;
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 1
44879: ST_TO_ADDR
// for i = 1 to array1 do
44880: LD_ADDR_VAR 0 4
44884: PUSH
44885: DOUBLE
44886: LD_INT 1
44888: DEC
44889: ST_TO_ADDR
44890: LD_VAR 0 1
44894: PUSH
44895: FOR_TO
44896: IFFALSE 44934
// if array1 [ i ] <> array2 [ i ] then
44898: LD_VAR 0 1
44902: PUSH
44903: LD_VAR 0 4
44907: ARRAY
44908: PUSH
44909: LD_VAR 0 2
44913: PUSH
44914: LD_VAR 0 4
44918: ARRAY
44919: NONEQUAL
44920: IFFALSE 44932
// begin result := false ;
44922: LD_ADDR_VAR 0 3
44926: PUSH
44927: LD_INT 0
44929: ST_TO_ADDR
// break ;
44930: GO 44934
// end ;
44932: GO 44895
44934: POP
44935: POP
// end ;
44936: LD_VAR 0 3
44940: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44941: LD_INT 0
44943: PPUSH
44944: PPUSH
44945: PPUSH
// pom := GetBase ( fac ) ;
44946: LD_ADDR_VAR 0 5
44950: PUSH
44951: LD_VAR 0 1
44955: PPUSH
44956: CALL_OW 274
44960: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44961: LD_ADDR_VAR 0 4
44965: PUSH
44966: LD_VAR 0 2
44970: PUSH
44971: LD_INT 1
44973: ARRAY
44974: PPUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_INT 2
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 3
44991: ARRAY
44992: PPUSH
44993: LD_VAR 0 2
44997: PUSH
44998: LD_INT 4
45000: ARRAY
45001: PPUSH
45002: CALL_OW 449
45006: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_VAR 0 5
45016: PPUSH
45017: LD_INT 1
45019: PPUSH
45020: CALL_OW 275
45024: PUSH
45025: LD_VAR 0 4
45029: PUSH
45030: LD_INT 1
45032: ARRAY
45033: GREATEREQUAL
45034: PUSH
45035: LD_VAR 0 5
45039: PPUSH
45040: LD_INT 2
45042: PPUSH
45043: CALL_OW 275
45047: PUSH
45048: LD_VAR 0 4
45052: PUSH
45053: LD_INT 2
45055: ARRAY
45056: GREATEREQUAL
45057: AND
45058: PUSH
45059: LD_VAR 0 5
45063: PPUSH
45064: LD_INT 3
45066: PPUSH
45067: CALL_OW 275
45071: PUSH
45072: LD_VAR 0 4
45076: PUSH
45077: LD_INT 3
45079: ARRAY
45080: GREATEREQUAL
45081: AND
45082: ST_TO_ADDR
// end ;
45083: LD_VAR 0 3
45087: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45088: LD_INT 0
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
// pom := GetBase ( building ) ;
45094: LD_ADDR_VAR 0 3
45098: PUSH
45099: LD_VAR 0 1
45103: PPUSH
45104: CALL_OW 274
45108: ST_TO_ADDR
// if not pom then
45109: LD_VAR 0 3
45113: NOT
45114: IFFALSE 45118
// exit ;
45116: GO 45288
// btype := GetBType ( building ) ;
45118: LD_ADDR_VAR 0 5
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: CALL_OW 266
45132: ST_TO_ADDR
// if btype = b_armoury then
45133: LD_VAR 0 5
45137: PUSH
45138: LD_INT 4
45140: EQUAL
45141: IFFALSE 45151
// btype := b_barracks ;
45143: LD_ADDR_VAR 0 5
45147: PUSH
45148: LD_INT 5
45150: ST_TO_ADDR
// if btype = b_depot then
45151: LD_VAR 0 5
45155: PUSH
45156: LD_INT 0
45158: EQUAL
45159: IFFALSE 45169
// btype := b_warehouse ;
45161: LD_ADDR_VAR 0 5
45165: PUSH
45166: LD_INT 1
45168: ST_TO_ADDR
// if btype = b_workshop then
45169: LD_VAR 0 5
45173: PUSH
45174: LD_INT 2
45176: EQUAL
45177: IFFALSE 45187
// btype := b_factory ;
45179: LD_ADDR_VAR 0 5
45183: PUSH
45184: LD_INT 3
45186: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45187: LD_ADDR_VAR 0 4
45191: PUSH
45192: LD_VAR 0 5
45196: PPUSH
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 248
45206: PPUSH
45207: CALL_OW 450
45211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45212: LD_ADDR_VAR 0 2
45216: PUSH
45217: LD_VAR 0 3
45221: PPUSH
45222: LD_INT 1
45224: PPUSH
45225: CALL_OW 275
45229: PUSH
45230: LD_VAR 0 4
45234: PUSH
45235: LD_INT 1
45237: ARRAY
45238: GREATEREQUAL
45239: PUSH
45240: LD_VAR 0 3
45244: PPUSH
45245: LD_INT 2
45247: PPUSH
45248: CALL_OW 275
45252: PUSH
45253: LD_VAR 0 4
45257: PUSH
45258: LD_INT 2
45260: ARRAY
45261: GREATEREQUAL
45262: AND
45263: PUSH
45264: LD_VAR 0 3
45268: PPUSH
45269: LD_INT 3
45271: PPUSH
45272: CALL_OW 275
45276: PUSH
45277: LD_VAR 0 4
45281: PUSH
45282: LD_INT 3
45284: ARRAY
45285: GREATEREQUAL
45286: AND
45287: ST_TO_ADDR
// end ;
45288: LD_VAR 0 2
45292: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45293: LD_INT 0
45295: PPUSH
45296: PPUSH
45297: PPUSH
// pom := GetBase ( building ) ;
45298: LD_ADDR_VAR 0 4
45302: PUSH
45303: LD_VAR 0 1
45307: PPUSH
45308: CALL_OW 274
45312: ST_TO_ADDR
// if not pom then
45313: LD_VAR 0 4
45317: NOT
45318: IFFALSE 45322
// exit ;
45320: GO 45423
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45322: LD_ADDR_VAR 0 5
45326: PUSH
45327: LD_VAR 0 2
45331: PPUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: CALL_OW 248
45341: PPUSH
45342: CALL_OW 450
45346: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45347: LD_ADDR_VAR 0 3
45351: PUSH
45352: LD_VAR 0 4
45356: PPUSH
45357: LD_INT 1
45359: PPUSH
45360: CALL_OW 275
45364: PUSH
45365: LD_VAR 0 5
45369: PUSH
45370: LD_INT 1
45372: ARRAY
45373: GREATEREQUAL
45374: PUSH
45375: LD_VAR 0 4
45379: PPUSH
45380: LD_INT 2
45382: PPUSH
45383: CALL_OW 275
45387: PUSH
45388: LD_VAR 0 5
45392: PUSH
45393: LD_INT 2
45395: ARRAY
45396: GREATEREQUAL
45397: AND
45398: PUSH
45399: LD_VAR 0 4
45403: PPUSH
45404: LD_INT 3
45406: PPUSH
45407: CALL_OW 275
45411: PUSH
45412: LD_VAR 0 5
45416: PUSH
45417: LD_INT 3
45419: ARRAY
45420: GREATEREQUAL
45421: AND
45422: ST_TO_ADDR
// end ;
45423: LD_VAR 0 3
45427: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45428: LD_INT 0
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
// result := false ;
45441: LD_ADDR_VAR 0 8
45445: PUSH
45446: LD_INT 0
45448: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45449: LD_VAR 0 5
45453: NOT
45454: PUSH
45455: LD_VAR 0 1
45459: NOT
45460: OR
45461: PUSH
45462: LD_VAR 0 2
45466: NOT
45467: OR
45468: PUSH
45469: LD_VAR 0 3
45473: NOT
45474: OR
45475: IFFALSE 45479
// exit ;
45477: GO 46293
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45479: LD_ADDR_VAR 0 14
45483: PUSH
45484: LD_VAR 0 1
45488: PPUSH
45489: LD_VAR 0 2
45493: PPUSH
45494: LD_VAR 0 3
45498: PPUSH
45499: LD_VAR 0 4
45503: PPUSH
45504: LD_VAR 0 5
45508: PUSH
45509: LD_INT 1
45511: ARRAY
45512: PPUSH
45513: CALL_OW 248
45517: PPUSH
45518: LD_INT 0
45520: PPUSH
45521: CALL 47530 0 6
45525: ST_TO_ADDR
// if not hexes then
45526: LD_VAR 0 14
45530: NOT
45531: IFFALSE 45535
// exit ;
45533: GO 46293
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45535: LD_ADDR_VAR 0 17
45539: PUSH
45540: LD_VAR 0 5
45544: PPUSH
45545: LD_INT 22
45547: PUSH
45548: LD_VAR 0 13
45552: PPUSH
45553: CALL_OW 255
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 30
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 30
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PPUSH
45594: CALL_OW 72
45598: ST_TO_ADDR
// for i = 1 to hexes do
45599: LD_ADDR_VAR 0 9
45603: PUSH
45604: DOUBLE
45605: LD_INT 1
45607: DEC
45608: ST_TO_ADDR
45609: LD_VAR 0 14
45613: PUSH
45614: FOR_TO
45615: IFFALSE 46291
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45617: LD_ADDR_VAR 0 13
45621: PUSH
45622: LD_VAR 0 14
45626: PUSH
45627: LD_VAR 0 9
45631: ARRAY
45632: PUSH
45633: LD_INT 1
45635: ARRAY
45636: PPUSH
45637: LD_VAR 0 14
45641: PUSH
45642: LD_VAR 0 9
45646: ARRAY
45647: PUSH
45648: LD_INT 2
45650: ARRAY
45651: PPUSH
45652: CALL_OW 428
45656: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45657: LD_VAR 0 14
45661: PUSH
45662: LD_VAR 0 9
45666: ARRAY
45667: PUSH
45668: LD_INT 1
45670: ARRAY
45671: PPUSH
45672: LD_VAR 0 14
45676: PUSH
45677: LD_VAR 0 9
45681: ARRAY
45682: PUSH
45683: LD_INT 2
45685: ARRAY
45686: PPUSH
45687: CALL_OW 351
45691: PUSH
45692: LD_VAR 0 14
45696: PUSH
45697: LD_VAR 0 9
45701: ARRAY
45702: PUSH
45703: LD_INT 1
45705: ARRAY
45706: PPUSH
45707: LD_VAR 0 14
45711: PUSH
45712: LD_VAR 0 9
45716: ARRAY
45717: PUSH
45718: LD_INT 2
45720: ARRAY
45721: PPUSH
45722: CALL_OW 488
45726: NOT
45727: OR
45728: PUSH
45729: LD_VAR 0 13
45733: PPUSH
45734: CALL_OW 247
45738: PUSH
45739: LD_INT 3
45741: EQUAL
45742: OR
45743: IFFALSE 45749
// exit ;
45745: POP
45746: POP
45747: GO 46293
// if not tmp then
45749: LD_VAR 0 13
45753: NOT
45754: IFFALSE 45758
// continue ;
45756: GO 45614
// result := true ;
45758: LD_ADDR_VAR 0 8
45762: PUSH
45763: LD_INT 1
45765: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45766: LD_VAR 0 6
45770: PUSH
45771: LD_VAR 0 13
45775: PPUSH
45776: CALL_OW 247
45780: PUSH
45781: LD_INT 2
45783: EQUAL
45784: AND
45785: PUSH
45786: LD_VAR 0 13
45790: PPUSH
45791: CALL_OW 263
45795: PUSH
45796: LD_INT 1
45798: EQUAL
45799: AND
45800: IFFALSE 45964
// begin if IsDrivenBy ( tmp ) then
45802: LD_VAR 0 13
45806: PPUSH
45807: CALL_OW 311
45811: IFFALSE 45815
// continue ;
45813: GO 45614
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45815: LD_VAR 0 6
45819: PPUSH
45820: LD_INT 3
45822: PUSH
45823: LD_INT 60
45825: PUSH
45826: EMPTY
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 55
45838: PUSH
45839: EMPTY
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PPUSH
45850: CALL_OW 72
45854: IFFALSE 45962
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45856: LD_ADDR_VAR 0 18
45860: PUSH
45861: LD_VAR 0 6
45865: PPUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 60
45871: PUSH
45872: EMPTY
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 55
45884: PUSH
45885: EMPTY
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PPUSH
45896: CALL_OW 72
45900: PUSH
45901: LD_INT 1
45903: ARRAY
45904: ST_TO_ADDR
// if IsInUnit ( driver ) then
45905: LD_VAR 0 18
45909: PPUSH
45910: CALL_OW 310
45914: IFFALSE 45925
// ComExit ( driver ) ;
45916: LD_VAR 0 18
45920: PPUSH
45921: CALL 70714 0 1
// AddComEnterUnit ( driver , tmp ) ;
45925: LD_VAR 0 18
45929: PPUSH
45930: LD_VAR 0 13
45934: PPUSH
45935: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45939: LD_VAR 0 18
45943: PPUSH
45944: LD_VAR 0 7
45948: PPUSH
45949: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45953: LD_VAR 0 18
45957: PPUSH
45958: CALL_OW 181
// end ; continue ;
45962: GO 45614
// end ; if not cleaners or not tmp in cleaners then
45964: LD_VAR 0 6
45968: NOT
45969: PUSH
45970: LD_VAR 0 13
45974: PUSH
45975: LD_VAR 0 6
45979: IN
45980: NOT
45981: OR
45982: IFFALSE 46289
// begin if dep then
45984: LD_VAR 0 17
45988: IFFALSE 46124
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45990: LD_ADDR_VAR 0 16
45994: PUSH
45995: LD_VAR 0 17
45999: PUSH
46000: LD_INT 1
46002: ARRAY
46003: PPUSH
46004: CALL_OW 250
46008: PPUSH
46009: LD_VAR 0 17
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: PPUSH
46018: CALL_OW 254
46022: PPUSH
46023: LD_INT 5
46025: PPUSH
46026: CALL_OW 272
46030: PUSH
46031: LD_VAR 0 17
46035: PUSH
46036: LD_INT 1
46038: ARRAY
46039: PPUSH
46040: CALL_OW 251
46044: PPUSH
46045: LD_VAR 0 17
46049: PUSH
46050: LD_INT 1
46052: ARRAY
46053: PPUSH
46054: CALL_OW 254
46058: PPUSH
46059: LD_INT 5
46061: PPUSH
46062: CALL_OW 273
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46071: LD_VAR 0 16
46075: PUSH
46076: LD_INT 1
46078: ARRAY
46079: PPUSH
46080: LD_VAR 0 16
46084: PUSH
46085: LD_INT 2
46087: ARRAY
46088: PPUSH
46089: CALL_OW 488
46093: IFFALSE 46124
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46095: LD_VAR 0 13
46099: PPUSH
46100: LD_VAR 0 16
46104: PUSH
46105: LD_INT 1
46107: ARRAY
46108: PPUSH
46109: LD_VAR 0 16
46113: PUSH
46114: LD_INT 2
46116: ARRAY
46117: PPUSH
46118: CALL_OW 111
// continue ;
46122: GO 45614
// end ; end ; r := GetDir ( tmp ) ;
46124: LD_ADDR_VAR 0 15
46128: PUSH
46129: LD_VAR 0 13
46133: PPUSH
46134: CALL_OW 254
46138: ST_TO_ADDR
// if r = 5 then
46139: LD_VAR 0 15
46143: PUSH
46144: LD_INT 5
46146: EQUAL
46147: IFFALSE 46157
// r := 0 ;
46149: LD_ADDR_VAR 0 15
46153: PUSH
46154: LD_INT 0
46156: ST_TO_ADDR
// for j = r to 5 do
46157: LD_ADDR_VAR 0 10
46161: PUSH
46162: DOUBLE
46163: LD_VAR 0 15
46167: DEC
46168: ST_TO_ADDR
46169: LD_INT 5
46171: PUSH
46172: FOR_TO
46173: IFFALSE 46287
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46175: LD_ADDR_VAR 0 11
46179: PUSH
46180: LD_VAR 0 13
46184: PPUSH
46185: CALL_OW 250
46189: PPUSH
46190: LD_VAR 0 10
46194: PPUSH
46195: LD_INT 2
46197: PPUSH
46198: CALL_OW 272
46202: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46203: LD_ADDR_VAR 0 12
46207: PUSH
46208: LD_VAR 0 13
46212: PPUSH
46213: CALL_OW 251
46217: PPUSH
46218: LD_VAR 0 10
46222: PPUSH
46223: LD_INT 2
46225: PPUSH
46226: CALL_OW 273
46230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46231: LD_VAR 0 11
46235: PPUSH
46236: LD_VAR 0 12
46240: PPUSH
46241: CALL_OW 488
46245: PUSH
46246: LD_VAR 0 11
46250: PPUSH
46251: LD_VAR 0 12
46255: PPUSH
46256: CALL_OW 428
46260: NOT
46261: AND
46262: IFFALSE 46285
// begin ComMoveXY ( tmp , _x , _y ) ;
46264: LD_VAR 0 13
46268: PPUSH
46269: LD_VAR 0 11
46273: PPUSH
46274: LD_VAR 0 12
46278: PPUSH
46279: CALL_OW 111
// break ;
46283: GO 46287
// end ; end ;
46285: GO 46172
46287: POP
46288: POP
// end ; end ;
46289: GO 45614
46291: POP
46292: POP
// end ;
46293: LD_VAR 0 8
46297: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46298: LD_INT 0
46300: PPUSH
// result := true ;
46301: LD_ADDR_VAR 0 3
46305: PUSH
46306: LD_INT 1
46308: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 24
46316: DOUBLE
46317: EQUAL
46318: IFTRUE 46328
46320: LD_INT 33
46322: DOUBLE
46323: EQUAL
46324: IFTRUE 46328
46326: GO 46353
46328: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46329: LD_ADDR_VAR 0 3
46333: PUSH
46334: LD_INT 32
46336: PPUSH
46337: LD_VAR 0 1
46341: PPUSH
46342: CALL_OW 321
46346: PUSH
46347: LD_INT 2
46349: EQUAL
46350: ST_TO_ADDR
46351: GO 46673
46353: LD_INT 20
46355: DOUBLE
46356: EQUAL
46357: IFTRUE 46361
46359: GO 46386
46361: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: LD_INT 6
46369: PPUSH
46370: LD_VAR 0 1
46374: PPUSH
46375: CALL_OW 321
46379: PUSH
46380: LD_INT 2
46382: EQUAL
46383: ST_TO_ADDR
46384: GO 46673
46386: LD_INT 22
46388: DOUBLE
46389: EQUAL
46390: IFTRUE 46400
46392: LD_INT 36
46394: DOUBLE
46395: EQUAL
46396: IFTRUE 46400
46398: GO 46425
46400: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46401: LD_ADDR_VAR 0 3
46405: PUSH
46406: LD_INT 15
46408: PPUSH
46409: LD_VAR 0 1
46413: PPUSH
46414: CALL_OW 321
46418: PUSH
46419: LD_INT 2
46421: EQUAL
46422: ST_TO_ADDR
46423: GO 46673
46425: LD_INT 30
46427: DOUBLE
46428: EQUAL
46429: IFTRUE 46433
46431: GO 46458
46433: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46434: LD_ADDR_VAR 0 3
46438: PUSH
46439: LD_INT 20
46441: PPUSH
46442: LD_VAR 0 1
46446: PPUSH
46447: CALL_OW 321
46451: PUSH
46452: LD_INT 2
46454: EQUAL
46455: ST_TO_ADDR
46456: GO 46673
46458: LD_INT 28
46460: DOUBLE
46461: EQUAL
46462: IFTRUE 46472
46464: LD_INT 21
46466: DOUBLE
46467: EQUAL
46468: IFTRUE 46472
46470: GO 46497
46472: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46473: LD_ADDR_VAR 0 3
46477: PUSH
46478: LD_INT 21
46480: PPUSH
46481: LD_VAR 0 1
46485: PPUSH
46486: CALL_OW 321
46490: PUSH
46491: LD_INT 2
46493: EQUAL
46494: ST_TO_ADDR
46495: GO 46673
46497: LD_INT 16
46499: DOUBLE
46500: EQUAL
46501: IFTRUE 46505
46503: GO 46532
46505: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46506: LD_ADDR_VAR 0 3
46510: PUSH
46511: LD_EXP 48
46515: PPUSH
46516: LD_VAR 0 1
46520: PPUSH
46521: CALL_OW 321
46525: PUSH
46526: LD_INT 2
46528: EQUAL
46529: ST_TO_ADDR
46530: GO 46673
46532: LD_INT 19
46534: DOUBLE
46535: EQUAL
46536: IFTRUE 46546
46538: LD_INT 23
46540: DOUBLE
46541: EQUAL
46542: IFTRUE 46546
46544: GO 46573
46546: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46547: LD_ADDR_VAR 0 3
46551: PUSH
46552: LD_EXP 47
46556: PPUSH
46557: LD_VAR 0 1
46561: PPUSH
46562: CALL_OW 321
46566: PUSH
46567: LD_INT 2
46569: EQUAL
46570: ST_TO_ADDR
46571: GO 46673
46573: LD_INT 17
46575: DOUBLE
46576: EQUAL
46577: IFTRUE 46581
46579: GO 46606
46581: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46582: LD_ADDR_VAR 0 3
46586: PUSH
46587: LD_INT 39
46589: PPUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: CALL_OW 321
46599: PUSH
46600: LD_INT 2
46602: EQUAL
46603: ST_TO_ADDR
46604: GO 46673
46606: LD_INT 18
46608: DOUBLE
46609: EQUAL
46610: IFTRUE 46614
46612: GO 46639
46614: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46615: LD_ADDR_VAR 0 3
46619: PUSH
46620: LD_INT 40
46622: PPUSH
46623: LD_VAR 0 1
46627: PPUSH
46628: CALL_OW 321
46632: PUSH
46633: LD_INT 2
46635: EQUAL
46636: ST_TO_ADDR
46637: GO 46673
46639: LD_INT 27
46641: DOUBLE
46642: EQUAL
46643: IFTRUE 46647
46645: GO 46672
46647: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46648: LD_ADDR_VAR 0 3
46652: PUSH
46653: LD_INT 35
46655: PPUSH
46656: LD_VAR 0 1
46660: PPUSH
46661: CALL_OW 321
46665: PUSH
46666: LD_INT 2
46668: EQUAL
46669: ST_TO_ADDR
46670: GO 46673
46672: POP
// end ;
46673: LD_VAR 0 3
46677: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46678: LD_INT 0
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
// result := false ;
46691: LD_ADDR_VAR 0 6
46695: PUSH
46696: LD_INT 0
46698: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46699: LD_VAR 0 1
46703: NOT
46704: PUSH
46705: LD_VAR 0 1
46709: PPUSH
46710: CALL_OW 266
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: IN
46725: NOT
46726: OR
46727: PUSH
46728: LD_VAR 0 2
46732: NOT
46733: OR
46734: PUSH
46735: LD_VAR 0 5
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: LD_INT 5
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: IN
46766: NOT
46767: OR
46768: PUSH
46769: LD_VAR 0 3
46773: PPUSH
46774: LD_VAR 0 4
46778: PPUSH
46779: CALL_OW 488
46783: NOT
46784: OR
46785: IFFALSE 46789
// exit ;
46787: GO 47525
// side := GetSide ( depot ) ;
46789: LD_ADDR_VAR 0 9
46793: PUSH
46794: LD_VAR 0 1
46798: PPUSH
46799: CALL_OW 255
46803: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46804: LD_VAR 0 9
46808: PPUSH
46809: LD_VAR 0 2
46813: PPUSH
46814: CALL 46298 0 2
46818: NOT
46819: IFFALSE 46823
// exit ;
46821: GO 47525
// pom := GetBase ( depot ) ;
46823: LD_ADDR_VAR 0 10
46827: PUSH
46828: LD_VAR 0 1
46832: PPUSH
46833: CALL_OW 274
46837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46838: LD_ADDR_VAR 0 11
46842: PUSH
46843: LD_VAR 0 2
46847: PPUSH
46848: LD_VAR 0 1
46852: PPUSH
46853: CALL_OW 248
46857: PPUSH
46858: CALL_OW 450
46862: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46863: LD_VAR 0 10
46867: PPUSH
46868: LD_INT 1
46870: PPUSH
46871: CALL_OW 275
46875: PUSH
46876: LD_VAR 0 11
46880: PUSH
46881: LD_INT 1
46883: ARRAY
46884: GREATEREQUAL
46885: PUSH
46886: LD_VAR 0 10
46890: PPUSH
46891: LD_INT 2
46893: PPUSH
46894: CALL_OW 275
46898: PUSH
46899: LD_VAR 0 11
46903: PUSH
46904: LD_INT 2
46906: ARRAY
46907: GREATEREQUAL
46908: AND
46909: PUSH
46910: LD_VAR 0 10
46914: PPUSH
46915: LD_INT 3
46917: PPUSH
46918: CALL_OW 275
46922: PUSH
46923: LD_VAR 0 11
46927: PUSH
46928: LD_INT 3
46930: ARRAY
46931: GREATEREQUAL
46932: AND
46933: NOT
46934: IFFALSE 46938
// exit ;
46936: GO 47525
// if GetBType ( depot ) = b_depot then
46938: LD_VAR 0 1
46942: PPUSH
46943: CALL_OW 266
46947: PUSH
46948: LD_INT 0
46950: EQUAL
46951: IFFALSE 46963
// dist := 28 else
46953: LD_ADDR_VAR 0 14
46957: PUSH
46958: LD_INT 28
46960: ST_TO_ADDR
46961: GO 46971
// dist := 36 ;
46963: LD_ADDR_VAR 0 14
46967: PUSH
46968: LD_INT 36
46970: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46971: LD_VAR 0 1
46975: PPUSH
46976: LD_VAR 0 3
46980: PPUSH
46981: LD_VAR 0 4
46985: PPUSH
46986: CALL_OW 297
46990: PUSH
46991: LD_VAR 0 14
46995: GREATER
46996: IFFALSE 47000
// exit ;
46998: GO 47525
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47000: LD_ADDR_VAR 0 12
47004: PUSH
47005: LD_VAR 0 2
47009: PPUSH
47010: LD_VAR 0 3
47014: PPUSH
47015: LD_VAR 0 4
47019: PPUSH
47020: LD_VAR 0 5
47024: PPUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 248
47034: PPUSH
47035: LD_INT 0
47037: PPUSH
47038: CALL 47530 0 6
47042: ST_TO_ADDR
// if not hexes then
47043: LD_VAR 0 12
47047: NOT
47048: IFFALSE 47052
// exit ;
47050: GO 47525
// hex := GetHexInfo ( x , y ) ;
47052: LD_ADDR_VAR 0 15
47056: PUSH
47057: LD_VAR 0 3
47061: PPUSH
47062: LD_VAR 0 4
47066: PPUSH
47067: CALL_OW 546
47071: ST_TO_ADDR
// if hex [ 1 ] then
47072: LD_VAR 0 15
47076: PUSH
47077: LD_INT 1
47079: ARRAY
47080: IFFALSE 47084
// exit ;
47082: GO 47525
// height := hex [ 2 ] ;
47084: LD_ADDR_VAR 0 13
47088: PUSH
47089: LD_VAR 0 15
47093: PUSH
47094: LD_INT 2
47096: ARRAY
47097: ST_TO_ADDR
// for i = 1 to hexes do
47098: LD_ADDR_VAR 0 7
47102: PUSH
47103: DOUBLE
47104: LD_INT 1
47106: DEC
47107: ST_TO_ADDR
47108: LD_VAR 0 12
47112: PUSH
47113: FOR_TO
47114: IFFALSE 47444
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47116: LD_VAR 0 12
47120: PUSH
47121: LD_VAR 0 7
47125: ARRAY
47126: PUSH
47127: LD_INT 1
47129: ARRAY
47130: PPUSH
47131: LD_VAR 0 12
47135: PUSH
47136: LD_VAR 0 7
47140: ARRAY
47141: PUSH
47142: LD_INT 2
47144: ARRAY
47145: PPUSH
47146: CALL_OW 488
47150: NOT
47151: PUSH
47152: LD_VAR 0 12
47156: PUSH
47157: LD_VAR 0 7
47161: ARRAY
47162: PUSH
47163: LD_INT 1
47165: ARRAY
47166: PPUSH
47167: LD_VAR 0 12
47171: PUSH
47172: LD_VAR 0 7
47176: ARRAY
47177: PUSH
47178: LD_INT 2
47180: ARRAY
47181: PPUSH
47182: CALL_OW 428
47186: PUSH
47187: LD_INT 0
47189: GREATER
47190: OR
47191: PUSH
47192: LD_VAR 0 12
47196: PUSH
47197: LD_VAR 0 7
47201: ARRAY
47202: PUSH
47203: LD_INT 1
47205: ARRAY
47206: PPUSH
47207: LD_VAR 0 12
47211: PUSH
47212: LD_VAR 0 7
47216: ARRAY
47217: PUSH
47218: LD_INT 2
47220: ARRAY
47221: PPUSH
47222: CALL_OW 351
47226: OR
47227: IFFALSE 47233
// exit ;
47229: POP
47230: POP
47231: GO 47525
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47233: LD_ADDR_VAR 0 8
47237: PUSH
47238: LD_VAR 0 12
47242: PUSH
47243: LD_VAR 0 7
47247: ARRAY
47248: PUSH
47249: LD_INT 1
47251: ARRAY
47252: PPUSH
47253: LD_VAR 0 12
47257: PUSH
47258: LD_VAR 0 7
47262: ARRAY
47263: PUSH
47264: LD_INT 2
47266: ARRAY
47267: PPUSH
47268: CALL_OW 546
47272: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47273: LD_VAR 0 8
47277: PUSH
47278: LD_INT 1
47280: ARRAY
47281: PUSH
47282: LD_VAR 0 8
47286: PUSH
47287: LD_INT 2
47289: ARRAY
47290: PUSH
47291: LD_VAR 0 13
47295: PUSH
47296: LD_INT 2
47298: PLUS
47299: GREATER
47300: OR
47301: PUSH
47302: LD_VAR 0 8
47306: PUSH
47307: LD_INT 2
47309: ARRAY
47310: PUSH
47311: LD_VAR 0 13
47315: PUSH
47316: LD_INT 2
47318: MINUS
47319: LESS
47320: OR
47321: PUSH
47322: LD_VAR 0 8
47326: PUSH
47327: LD_INT 3
47329: ARRAY
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 8
47336: PUSH
47337: LD_INT 9
47339: PUSH
47340: LD_INT 10
47342: PUSH
47343: LD_INT 11
47345: PUSH
47346: LD_INT 12
47348: PUSH
47349: LD_INT 13
47351: PUSH
47352: LD_INT 16
47354: PUSH
47355: LD_INT 17
47357: PUSH
47358: LD_INT 18
47360: PUSH
47361: LD_INT 19
47363: PUSH
47364: LD_INT 20
47366: PUSH
47367: LD_INT 21
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: IN
47385: NOT
47386: OR
47387: PUSH
47388: LD_VAR 0 8
47392: PUSH
47393: LD_INT 5
47395: ARRAY
47396: NOT
47397: OR
47398: PUSH
47399: LD_VAR 0 8
47403: PUSH
47404: LD_INT 6
47406: ARRAY
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 7
47416: PUSH
47417: LD_INT 9
47419: PUSH
47420: LD_INT 10
47422: PUSH
47423: LD_INT 11
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: IN
47434: NOT
47435: OR
47436: IFFALSE 47442
// exit ;
47438: POP
47439: POP
47440: GO 47525
// end ;
47442: GO 47113
47444: POP
47445: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47446: LD_VAR 0 9
47450: PPUSH
47451: LD_VAR 0 3
47455: PPUSH
47456: LD_VAR 0 4
47460: PPUSH
47461: LD_INT 20
47463: PPUSH
47464: CALL 39471 0 4
47468: PUSH
47469: LD_INT 4
47471: ARRAY
47472: IFFALSE 47476
// exit ;
47474: GO 47525
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47476: LD_VAR 0 2
47480: PUSH
47481: LD_INT 29
47483: PUSH
47484: LD_INT 30
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: IN
47491: PUSH
47492: LD_VAR 0 3
47496: PPUSH
47497: LD_VAR 0 4
47501: PPUSH
47502: LD_VAR 0 9
47506: PPUSH
47507: CALL_OW 440
47511: NOT
47512: AND
47513: IFFALSE 47517
// exit ;
47515: GO 47525
// result := true ;
47517: LD_ADDR_VAR 0 6
47521: PUSH
47522: LD_INT 1
47524: ST_TO_ADDR
// end ;
47525: LD_VAR 0 6
47529: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47530: LD_INT 0
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
// result = [ ] ;
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: EMPTY
47596: ST_TO_ADDR
// temp_list = [ ] ;
47597: LD_ADDR_VAR 0 9
47601: PUSH
47602: EMPTY
47603: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47604: LD_VAR 0 4
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 4
47623: PUSH
47624: LD_INT 5
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: IN
47635: NOT
47636: PUSH
47637: LD_VAR 0 1
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: IN
47652: PUSH
47653: LD_VAR 0 5
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: IN
47672: NOT
47673: AND
47674: OR
47675: IFFALSE 47679
// exit ;
47677: GO 66070
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47679: LD_VAR 0 1
47683: PUSH
47684: LD_INT 6
47686: PUSH
47687: LD_INT 7
47689: PUSH
47690: LD_INT 8
47692: PUSH
47693: LD_INT 13
47695: PUSH
47696: LD_INT 12
47698: PUSH
47699: LD_INT 15
47701: PUSH
47702: LD_INT 11
47704: PUSH
47705: LD_INT 14
47707: PUSH
47708: LD_INT 10
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: IN
47722: IFFALSE 47732
// btype = b_lab ;
47724: LD_ADDR_VAR 0 1
47728: PUSH
47729: LD_INT 6
47731: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47732: LD_VAR 0 6
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: IN
47751: NOT
47752: PUSH
47753: LD_VAR 0 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: LD_INT 6
47772: PUSH
47773: LD_INT 36
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: LD_INT 5
47781: PUSH
47782: LD_INT 31
47784: PUSH
47785: LD_INT 32
47787: PUSH
47788: LD_INT 33
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: IN
47804: NOT
47805: PUSH
47806: LD_VAR 0 6
47810: PUSH
47811: LD_INT 1
47813: EQUAL
47814: AND
47815: OR
47816: PUSH
47817: LD_VAR 0 1
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: IN
47832: NOT
47833: PUSH
47834: LD_VAR 0 6
47838: PUSH
47839: LD_INT 2
47841: EQUAL
47842: AND
47843: OR
47844: IFFALSE 47854
// mode = 0 ;
47846: LD_ADDR_VAR 0 6
47850: PUSH
47851: LD_INT 0
47853: ST_TO_ADDR
// case mode of 0 :
47854: LD_VAR 0 6
47858: PUSH
47859: LD_INT 0
47861: DOUBLE
47862: EQUAL
47863: IFTRUE 47867
47865: GO 59320
47867: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47868: LD_ADDR_VAR 0 11
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 3
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48061: LD_ADDR_VAR 0 12
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48257: LD_ADDR_VAR 0 13
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48456: LD_ADDR_VAR 0 14
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48652: LD_ADDR_VAR 0 15
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48845: LD_ADDR_VAR 0 16
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49038: LD_ADDR_VAR 0 17
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49268: LD_ADDR_VAR 0 18
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49498: LD_ADDR_VAR 0 19
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49728: LD_ADDR_VAR 0 20
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49958: LD_ADDR_VAR 0 21
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50188: LD_ADDR_VAR 0 22
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50418: LD_ADDR_VAR 0 23
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50698: LD_ADDR_VAR 0 24
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50974: LD_ADDR_VAR 0 25
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51248: LD_ADDR_VAR 0 26
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 3
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 3
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51524: LD_ADDR_VAR 0 27
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51804: LD_ADDR_VAR 0 28
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52086: LD_ADDR_VAR 0 29
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52365: LD_ADDR_VAR 0 30
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52643: LD_ADDR_VAR 0 31
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52921: LD_ADDR_VAR 0 32
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53199: LD_ADDR_VAR 0 33
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53478: LD_ADDR_VAR 0 34
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53758: LD_ADDR_VAR 0 35
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53870: LD_ADDR_VAR 0 36
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53982: LD_ADDR_VAR 0 37
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54094: LD_ADDR_VAR 0 38
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54206: LD_ADDR_VAR 0 39
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54318: LD_ADDR_VAR 0 40
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54430: LD_ADDR_VAR 0 41
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54780: LD_ADDR_VAR 0 42
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 3
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55130: LD_ADDR_VAR 0 43
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 3
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55478: LD_ADDR_VAR 0 44
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 3
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55828: LD_ADDR_VAR 0 45
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56178: LD_ADDR_VAR 0 46
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56526: LD_ADDR_VAR 0 47
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56677: LD_ADDR_VAR 0 48
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56824: LD_ADDR_VAR 0 49
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56968: LD_ADDR_VAR 0 50
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57112: LD_ADDR_VAR 0 51
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57259: LD_ADDR_VAR 0 52
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57410: LD_ADDR_VAR 0 53
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57640: LD_ADDR_VAR 0 54
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57870: LD_ADDR_VAR 0 55
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58100: LD_ADDR_VAR 0 56
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58330: LD_ADDR_VAR 0 57
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58560: LD_ADDR_VAR 0 58
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58790: LD_ADDR_VAR 0 59
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58878: LD_ADDR_VAR 0 60
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58966: LD_ADDR_VAR 0 61
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59054: LD_ADDR_VAR 0 62
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59142: LD_ADDR_VAR 0 63
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59230: LD_ADDR_VAR 0 64
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: ST_TO_ADDR
// end ; 1 :
59318: GO 65215
59320: LD_INT 1
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59328
59326: GO 61951
59328: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59329: LD_ADDR_VAR 0 11
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59373: LD_ADDR_VAR 0 12
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59414: LD_ADDR_VAR 0 13
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59454: LD_ADDR_VAR 0 14
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59495: LD_ADDR_VAR 0 15
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59539: LD_ADDR_VAR 0 16
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59585: LD_ADDR_VAR 0 17
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59629: LD_ADDR_VAR 0 18
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59670: LD_ADDR_VAR 0 19
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 3
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59710: LD_ADDR_VAR 0 20
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 3
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59751: LD_ADDR_VAR 0 21
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59795: LD_ADDR_VAR 0 22
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 3
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59841: LD_ADDR_VAR 0 23
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 4
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59885: LD_ADDR_VAR 0 24
59889: PUSH
59890: LD_INT 3
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59926: LD_ADDR_VAR 0 25
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: LD_INT 3
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 4
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: LD_INT 4
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59966: LD_ADDR_VAR 0 26
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 3
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60007: LD_ADDR_VAR 0 27
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 4
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60051: LD_ADDR_VAR 0 28
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60097: LD_ADDR_VAR 0 29
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 5
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 5
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 6
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 6
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 5
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60252: LD_ADDR_VAR 0 30
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 4
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 4
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 4
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 5
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 5
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 5
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 6
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 6
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60395: LD_ADDR_VAR 0 31
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 4
60432: PUSH
60433: LD_INT 3
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 4
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 5
60472: PUSH
60473: LD_INT 5
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: LD_INT 5
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 6
60492: PUSH
60493: LD_INT 5
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 6
60502: PUSH
60503: LD_INT 6
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 5
60512: PUSH
60513: LD_INT 6
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60534: LD_ADDR_VAR 0 32
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 4
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 4
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 5
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 5
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 4
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 6
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 6
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 5
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60677: LD_ADDR_VAR 0 33
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 4
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 5
60763: NEG
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 5
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 5
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 6
60797: NEG
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 6
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60832: LD_ADDR_VAR 0 34
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: NEG
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 4
60911: NEG
60912: PUSH
60913: LD_INT 5
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 5
60923: NEG
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 5
60935: NEG
60936: PUSH
60937: LD_INT 5
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: LD_INT 6
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 6
60959: NEG
60960: PUSH
60961: LD_INT 5
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 6
60971: NEG
60972: PUSH
60973: LD_INT 6
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60995: LD_ADDR_VAR 0 41
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61039: LD_ADDR_VAR 0 42
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61080: LD_ADDR_VAR 0 43
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61120: LD_ADDR_VAR 0 44
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61161: LD_ADDR_VAR 0 45
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61205: LD_ADDR_VAR 0 46
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61251: LD_ADDR_VAR 0 47
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 3
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61284: LD_ADDR_VAR 0 48
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61315: LD_ADDR_VAR 0 49
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61344: LD_ADDR_VAR 0 50
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61373: LD_ADDR_VAR 0 51
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61404: LD_ADDR_VAR 0 52
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61437: LD_ADDR_VAR 0 53
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 3
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61481: LD_ADDR_VAR 0 54
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61522: LD_ADDR_VAR 0 55
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61562: LD_ADDR_VAR 0 56
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: LIST
61602: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61603: LD_ADDR_VAR 0 57
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61647: LD_ADDR_VAR 0 58
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: LD_INT 3
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61693: LD_ADDR_VAR 0 59
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61737: LD_ADDR_VAR 0 60
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61778: LD_ADDR_VAR 0 61
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61818: LD_ADDR_VAR 0 62
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: LIST
61858: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61859: LD_ADDR_VAR 0 63
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: NEG
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61903: LD_ADDR_VAR 0 64
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// end ; 2 :
61949: GO 65215
61951: LD_INT 2
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61959
61957: GO 65214
61959: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61960: LD_ADDR_VAR 0 29
61964: PUSH
61965: LD_INT 4
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 4
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 5
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 4
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: LD_INT 4
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 3
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 4
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: LD_INT 4
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: LD_INT 5
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 5
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 4
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: LD_INT 5
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: NEG
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: NEG
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 4
62299: NEG
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 4
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 4
62322: NEG
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: NEG
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 4
62345: NEG
62346: PUSH
62347: LD_INT 4
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: LD_INT 5
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 3
62369: NEG
62370: PUSH
62371: LD_INT 4
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: NEG
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 4
62393: NEG
62394: PUSH
62395: LD_INT 3
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 5
62405: NEG
62406: PUSH
62407: LD_INT 4
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 5
62417: NEG
62418: PUSH
62419: LD_INT 5
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: LD_INT 5
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 5
62441: NEG
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62498: LD_ADDR_VAR 0 30
62502: PUSH
62503: LD_INT 4
62505: PUSH
62506: LD_INT 4
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 4
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 5
62525: PUSH
62526: LD_INT 4
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: LD_INT 5
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 4
62545: PUSH
62546: LD_INT 5
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: LD_INT 4
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 5
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 5
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 4
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 4
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 4
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 4
62688: NEG
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 4
62699: NEG
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 4
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 5
62744: NEG
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 5
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 5
62767: NEG
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: NEG
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 3
62790: NEG
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: NEG
62803: PUSH
62804: LD_INT 4
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 4
62850: NEG
62851: PUSH
62852: LD_INT 3
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 4
62862: NEG
62863: PUSH
62864: LD_INT 4
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: LD_INT 4
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: NEG
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 5
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 4
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 5
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 5
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63045: LD_ADDR_VAR 0 31
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 4
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 3
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 4
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 5
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 5
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 4
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: LD_INT 5
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 3
63145: NEG
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 3
63156: NEG
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: NEG
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 4
63201: NEG
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 4
63212: NEG
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 4
63224: NEG
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 4
63247: NEG
63248: PUSH
63249: LD_INT 4
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 4
63259: NEG
63260: PUSH
63261: LD_INT 5
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 4
63295: NEG
63296: PUSH
63297: LD_INT 3
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 5
63307: NEG
63308: PUSH
63309: LD_INT 4
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 5
63319: NEG
63320: PUSH
63321: LD_INT 5
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: LD_INT 5
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 5
63343: NEG
63344: PUSH
63345: LD_INT 3
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 3
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 4
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 3
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: LD_INT 4
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 4
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 4
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 4
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 5
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 5
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 4
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 5
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63595: LD_ADDR_VAR 0 32
63599: PUSH
63600: LD_INT 4
63602: NEG
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: NEG
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 3
63625: NEG
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 4
63647: NEG
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 5
63658: NEG
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 5
63669: NEG
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 5
63681: NEG
63682: PUSH
63683: LD_INT 2
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 3
63693: NEG
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: NEG
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: LD_INT 4
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: LD_INT 3
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 3
63752: NEG
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 4
63764: NEG
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 4
63776: NEG
63777: PUSH
63778: LD_INT 4
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: LD_INT 4
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 4
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 4
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 5
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 4
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 3
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: LD_INT 3
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 4
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 5
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 5
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 3
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 4
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 4
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 2
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 4
64007: PUSH
64008: LD_INT 4
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 5
64027: PUSH
64028: LD_INT 4
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 5
64037: PUSH
64038: LD_INT 5
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: LD_INT 5
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 4
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 5
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: LD_INT 5
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64142: LD_ADDR_VAR 0 33
64146: PUSH
64147: LD_INT 4
64149: NEG
64150: PUSH
64151: LD_INT 4
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 4
64161: NEG
64162: PUSH
64163: LD_INT 5
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 4
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 4
64197: NEG
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 5
64209: NEG
64210: PUSH
64211: LD_INT 4
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 5
64221: NEG
64222: PUSH
64223: LD_INT 5
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 5
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 5
64245: NEG
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 3
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 4
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: LD_INT 4
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 2
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: LD_INT 4
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 4
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 5
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 5
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 4
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 3
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 3
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 5
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: LD_INT 3
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 4
64472: PUSH
64473: LD_INT 3
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: LD_INT 4
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: LD_INT 4
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 4
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 4
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: LD_INT 4
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: LD_INT 4
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: LD_INT 5
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 5
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 4
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 5
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: NEG
64625: PUSH
64626: LD_INT 3
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64680: LD_ADDR_VAR 0 34
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 4
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: LD_INT 5
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: LD_INT 4
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: LD_INT 4
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 5
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 3
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 2
64777: NEG
64778: PUSH
64779: LD_INT 5
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 3
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 3
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 4
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 4
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: LD_INT 1
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 4
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 4
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 4
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 5
64902: PUSH
64903: LD_INT 4
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 5
64912: PUSH
64913: LD_INT 5
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 4
64922: PUSH
64923: LD_INT 5
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: LD_INT 4
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 5
64952: PUSH
64953: LD_INT 3
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: LD_INT 5
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: LD_INT 2
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 3
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 4
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 4
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 3
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: LD_INT 2
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 4
65065: NEG
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 4
65076: NEG
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 3
65088: NEG
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 3
65099: NEG
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 4
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 5
65121: NEG
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 5
65132: NEG
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 5
65144: NEG
65145: PUSH
65146: LD_INT 2
65148: NEG
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 2
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// end ; end ;
65212: GO 65215
65214: POP
// case btype of b_depot , b_warehouse :
65215: LD_VAR 0 1
65219: PUSH
65220: LD_INT 0
65222: DOUBLE
65223: EQUAL
65224: IFTRUE 65234
65226: LD_INT 1
65228: DOUBLE
65229: EQUAL
65230: IFTRUE 65234
65232: GO 65435
65234: POP
// case nation of nation_american :
65235: LD_VAR 0 5
65239: PUSH
65240: LD_INT 1
65242: DOUBLE
65243: EQUAL
65244: IFTRUE 65248
65246: GO 65304
65248: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65249: LD_ADDR_VAR 0 9
65253: PUSH
65254: LD_VAR 0 11
65258: PUSH
65259: LD_VAR 0 12
65263: PUSH
65264: LD_VAR 0 13
65268: PUSH
65269: LD_VAR 0 14
65273: PUSH
65274: LD_VAR 0 15
65278: PUSH
65279: LD_VAR 0 16
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 4
65296: PUSH
65297: LD_INT 1
65299: PLUS
65300: ARRAY
65301: ST_TO_ADDR
65302: GO 65433
65304: LD_INT 2
65306: DOUBLE
65307: EQUAL
65308: IFTRUE 65312
65310: GO 65368
65312: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65313: LD_ADDR_VAR 0 9
65317: PUSH
65318: LD_VAR 0 17
65322: PUSH
65323: LD_VAR 0 18
65327: PUSH
65328: LD_VAR 0 19
65332: PUSH
65333: LD_VAR 0 20
65337: PUSH
65338: LD_VAR 0 21
65342: PUSH
65343: LD_VAR 0 22
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: PUSH
65356: LD_VAR 0 4
65360: PUSH
65361: LD_INT 1
65363: PLUS
65364: ARRAY
65365: ST_TO_ADDR
65366: GO 65433
65368: LD_INT 3
65370: DOUBLE
65371: EQUAL
65372: IFTRUE 65376
65374: GO 65432
65376: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65377: LD_ADDR_VAR 0 9
65381: PUSH
65382: LD_VAR 0 23
65386: PUSH
65387: LD_VAR 0 24
65391: PUSH
65392: LD_VAR 0 25
65396: PUSH
65397: LD_VAR 0 26
65401: PUSH
65402: LD_VAR 0 27
65406: PUSH
65407: LD_VAR 0 28
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: PUSH
65420: LD_VAR 0 4
65424: PUSH
65425: LD_INT 1
65427: PLUS
65428: ARRAY
65429: ST_TO_ADDR
65430: GO 65433
65432: POP
65433: GO 65988
65435: LD_INT 2
65437: DOUBLE
65438: EQUAL
65439: IFTRUE 65449
65441: LD_INT 3
65443: DOUBLE
65444: EQUAL
65445: IFTRUE 65449
65447: GO 65505
65449: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65450: LD_ADDR_VAR 0 9
65454: PUSH
65455: LD_VAR 0 29
65459: PUSH
65460: LD_VAR 0 30
65464: PUSH
65465: LD_VAR 0 31
65469: PUSH
65470: LD_VAR 0 32
65474: PUSH
65475: LD_VAR 0 33
65479: PUSH
65480: LD_VAR 0 34
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: PUSH
65493: LD_VAR 0 4
65497: PUSH
65498: LD_INT 1
65500: PLUS
65501: ARRAY
65502: ST_TO_ADDR
65503: GO 65988
65505: LD_INT 16
65507: DOUBLE
65508: EQUAL
65509: IFTRUE 65567
65511: LD_INT 17
65513: DOUBLE
65514: EQUAL
65515: IFTRUE 65567
65517: LD_INT 18
65519: DOUBLE
65520: EQUAL
65521: IFTRUE 65567
65523: LD_INT 19
65525: DOUBLE
65526: EQUAL
65527: IFTRUE 65567
65529: LD_INT 22
65531: DOUBLE
65532: EQUAL
65533: IFTRUE 65567
65535: LD_INT 20
65537: DOUBLE
65538: EQUAL
65539: IFTRUE 65567
65541: LD_INT 21
65543: DOUBLE
65544: EQUAL
65545: IFTRUE 65567
65547: LD_INT 23
65549: DOUBLE
65550: EQUAL
65551: IFTRUE 65567
65553: LD_INT 24
65555: DOUBLE
65556: EQUAL
65557: IFTRUE 65567
65559: LD_INT 25
65561: DOUBLE
65562: EQUAL
65563: IFTRUE 65567
65565: GO 65623
65567: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65568: LD_ADDR_VAR 0 9
65572: PUSH
65573: LD_VAR 0 35
65577: PUSH
65578: LD_VAR 0 36
65582: PUSH
65583: LD_VAR 0 37
65587: PUSH
65588: LD_VAR 0 38
65592: PUSH
65593: LD_VAR 0 39
65597: PUSH
65598: LD_VAR 0 40
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: PUSH
65611: LD_VAR 0 4
65615: PUSH
65616: LD_INT 1
65618: PLUS
65619: ARRAY
65620: ST_TO_ADDR
65621: GO 65988
65623: LD_INT 6
65625: DOUBLE
65626: EQUAL
65627: IFTRUE 65679
65629: LD_INT 7
65631: DOUBLE
65632: EQUAL
65633: IFTRUE 65679
65635: LD_INT 8
65637: DOUBLE
65638: EQUAL
65639: IFTRUE 65679
65641: LD_INT 13
65643: DOUBLE
65644: EQUAL
65645: IFTRUE 65679
65647: LD_INT 12
65649: DOUBLE
65650: EQUAL
65651: IFTRUE 65679
65653: LD_INT 15
65655: DOUBLE
65656: EQUAL
65657: IFTRUE 65679
65659: LD_INT 11
65661: DOUBLE
65662: EQUAL
65663: IFTRUE 65679
65665: LD_INT 14
65667: DOUBLE
65668: EQUAL
65669: IFTRUE 65679
65671: LD_INT 10
65673: DOUBLE
65674: EQUAL
65675: IFTRUE 65679
65677: GO 65735
65679: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65680: LD_ADDR_VAR 0 9
65684: PUSH
65685: LD_VAR 0 41
65689: PUSH
65690: LD_VAR 0 42
65694: PUSH
65695: LD_VAR 0 43
65699: PUSH
65700: LD_VAR 0 44
65704: PUSH
65705: LD_VAR 0 45
65709: PUSH
65710: LD_VAR 0 46
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: PUSH
65723: LD_VAR 0 4
65727: PUSH
65728: LD_INT 1
65730: PLUS
65731: ARRAY
65732: ST_TO_ADDR
65733: GO 65988
65735: LD_INT 36
65737: DOUBLE
65738: EQUAL
65739: IFTRUE 65743
65741: GO 65799
65743: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65744: LD_ADDR_VAR 0 9
65748: PUSH
65749: LD_VAR 0 47
65753: PUSH
65754: LD_VAR 0 48
65758: PUSH
65759: LD_VAR 0 49
65763: PUSH
65764: LD_VAR 0 50
65768: PUSH
65769: LD_VAR 0 51
65773: PUSH
65774: LD_VAR 0 52
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: PUSH
65787: LD_VAR 0 4
65791: PUSH
65792: LD_INT 1
65794: PLUS
65795: ARRAY
65796: ST_TO_ADDR
65797: GO 65988
65799: LD_INT 4
65801: DOUBLE
65802: EQUAL
65803: IFTRUE 65825
65805: LD_INT 5
65807: DOUBLE
65808: EQUAL
65809: IFTRUE 65825
65811: LD_INT 34
65813: DOUBLE
65814: EQUAL
65815: IFTRUE 65825
65817: LD_INT 37
65819: DOUBLE
65820: EQUAL
65821: IFTRUE 65825
65823: GO 65881
65825: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65826: LD_ADDR_VAR 0 9
65830: PUSH
65831: LD_VAR 0 53
65835: PUSH
65836: LD_VAR 0 54
65840: PUSH
65841: LD_VAR 0 55
65845: PUSH
65846: LD_VAR 0 56
65850: PUSH
65851: LD_VAR 0 57
65855: PUSH
65856: LD_VAR 0 58
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: PUSH
65869: LD_VAR 0 4
65873: PUSH
65874: LD_INT 1
65876: PLUS
65877: ARRAY
65878: ST_TO_ADDR
65879: GO 65988
65881: LD_INT 31
65883: DOUBLE
65884: EQUAL
65885: IFTRUE 65931
65887: LD_INT 32
65889: DOUBLE
65890: EQUAL
65891: IFTRUE 65931
65893: LD_INT 33
65895: DOUBLE
65896: EQUAL
65897: IFTRUE 65931
65899: LD_INT 27
65901: DOUBLE
65902: EQUAL
65903: IFTRUE 65931
65905: LD_INT 26
65907: DOUBLE
65908: EQUAL
65909: IFTRUE 65931
65911: LD_INT 28
65913: DOUBLE
65914: EQUAL
65915: IFTRUE 65931
65917: LD_INT 29
65919: DOUBLE
65920: EQUAL
65921: IFTRUE 65931
65923: LD_INT 30
65925: DOUBLE
65926: EQUAL
65927: IFTRUE 65931
65929: GO 65987
65931: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65932: LD_ADDR_VAR 0 9
65936: PUSH
65937: LD_VAR 0 59
65941: PUSH
65942: LD_VAR 0 60
65946: PUSH
65947: LD_VAR 0 61
65951: PUSH
65952: LD_VAR 0 62
65956: PUSH
65957: LD_VAR 0 63
65961: PUSH
65962: LD_VAR 0 64
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: PUSH
65975: LD_VAR 0 4
65979: PUSH
65980: LD_INT 1
65982: PLUS
65983: ARRAY
65984: ST_TO_ADDR
65985: GO 65988
65987: POP
// temp_list2 = [ ] ;
65988: LD_ADDR_VAR 0 10
65992: PUSH
65993: EMPTY
65994: ST_TO_ADDR
// for i in temp_list do
65995: LD_ADDR_VAR 0 8
65999: PUSH
66000: LD_VAR 0 9
66004: PUSH
66005: FOR_IN
66006: IFFALSE 66058
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66008: LD_ADDR_VAR 0 10
66012: PUSH
66013: LD_VAR 0 10
66017: PUSH
66018: LD_VAR 0 8
66022: PUSH
66023: LD_INT 1
66025: ARRAY
66026: PUSH
66027: LD_VAR 0 2
66031: PLUS
66032: PUSH
66033: LD_VAR 0 8
66037: PUSH
66038: LD_INT 2
66040: ARRAY
66041: PUSH
66042: LD_VAR 0 3
66046: PLUS
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: ADD
66055: ST_TO_ADDR
66056: GO 66005
66058: POP
66059: POP
// result = temp_list2 ;
66060: LD_ADDR_VAR 0 7
66064: PUSH
66065: LD_VAR 0 10
66069: ST_TO_ADDR
// end ;
66070: LD_VAR 0 7
66074: RET
// export function EnemyInRange ( unit , dist ) ; begin
66075: LD_INT 0
66077: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66078: LD_ADDR_VAR 0 3
66082: PUSH
66083: LD_VAR 0 1
66087: PPUSH
66088: CALL_OW 255
66092: PPUSH
66093: LD_VAR 0 1
66097: PPUSH
66098: CALL_OW 250
66102: PPUSH
66103: LD_VAR 0 1
66107: PPUSH
66108: CALL_OW 251
66112: PPUSH
66113: LD_VAR 0 2
66117: PPUSH
66118: CALL 39471 0 4
66122: PUSH
66123: LD_INT 4
66125: ARRAY
66126: ST_TO_ADDR
// end ;
66127: LD_VAR 0 3
66131: RET
// export function PlayerSeeMe ( unit ) ; begin
66132: LD_INT 0
66134: PPUSH
// result := See ( your_side , unit ) ;
66135: LD_ADDR_VAR 0 2
66139: PUSH
66140: LD_OWVAR 2
66144: PPUSH
66145: LD_VAR 0 1
66149: PPUSH
66150: CALL_OW 292
66154: ST_TO_ADDR
// end ;
66155: LD_VAR 0 2
66159: RET
// export function ReverseDir ( unit ) ; begin
66160: LD_INT 0
66162: PPUSH
// if not unit then
66163: LD_VAR 0 1
66167: NOT
66168: IFFALSE 66172
// exit ;
66170: GO 66195
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66172: LD_ADDR_VAR 0 2
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL_OW 254
66186: PUSH
66187: LD_INT 3
66189: PLUS
66190: PUSH
66191: LD_INT 6
66193: MOD
66194: ST_TO_ADDR
// end ;
66195: LD_VAR 0 2
66199: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66200: LD_INT 0
66202: PPUSH
66203: PPUSH
66204: PPUSH
66205: PPUSH
66206: PPUSH
// if not hexes then
66207: LD_VAR 0 2
66211: NOT
66212: IFFALSE 66216
// exit ;
66214: GO 66364
// dist := 9999 ;
66216: LD_ADDR_VAR 0 5
66220: PUSH
66221: LD_INT 9999
66223: ST_TO_ADDR
// for i = 1 to hexes do
66224: LD_ADDR_VAR 0 4
66228: PUSH
66229: DOUBLE
66230: LD_INT 1
66232: DEC
66233: ST_TO_ADDR
66234: LD_VAR 0 2
66238: PUSH
66239: FOR_TO
66240: IFFALSE 66352
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66242: LD_VAR 0 1
66246: PPUSH
66247: LD_VAR 0 2
66251: PUSH
66252: LD_VAR 0 4
66256: ARRAY
66257: PUSH
66258: LD_INT 1
66260: ARRAY
66261: PPUSH
66262: LD_VAR 0 2
66266: PUSH
66267: LD_VAR 0 4
66271: ARRAY
66272: PUSH
66273: LD_INT 2
66275: ARRAY
66276: PPUSH
66277: CALL_OW 297
66281: PUSH
66282: LD_VAR 0 5
66286: LESS
66287: IFFALSE 66350
// begin hex := hexes [ i ] ;
66289: LD_ADDR_VAR 0 7
66293: PUSH
66294: LD_VAR 0 2
66298: PUSH
66299: LD_VAR 0 4
66303: ARRAY
66304: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66305: LD_ADDR_VAR 0 5
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: LD_VAR 0 2
66319: PUSH
66320: LD_VAR 0 4
66324: ARRAY
66325: PUSH
66326: LD_INT 1
66328: ARRAY
66329: PPUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_VAR 0 4
66339: ARRAY
66340: PUSH
66341: LD_INT 2
66343: ARRAY
66344: PPUSH
66345: CALL_OW 297
66349: ST_TO_ADDR
// end ; end ;
66350: GO 66239
66352: POP
66353: POP
// result := hex ;
66354: LD_ADDR_VAR 0 3
66358: PUSH
66359: LD_VAR 0 7
66363: ST_TO_ADDR
// end ;
66364: LD_VAR 0 3
66368: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66369: LD_INT 0
66371: PPUSH
66372: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66373: LD_VAR 0 1
66377: NOT
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_INT 21
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 23
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PPUSH
66408: CALL_OW 69
66412: IN
66413: NOT
66414: OR
66415: IFFALSE 66419
// exit ;
66417: GO 66466
// for i = 1 to 3 do
66419: LD_ADDR_VAR 0 3
66423: PUSH
66424: DOUBLE
66425: LD_INT 1
66427: DEC
66428: ST_TO_ADDR
66429: LD_INT 3
66431: PUSH
66432: FOR_TO
66433: IFFALSE 66464
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66435: LD_VAR 0 1
66439: PPUSH
66440: CALL_OW 250
66444: PPUSH
66445: LD_VAR 0 1
66449: PPUSH
66450: CALL_OW 251
66454: PPUSH
66455: LD_INT 1
66457: PPUSH
66458: CALL_OW 453
66462: GO 66432
66464: POP
66465: POP
// end ;
66466: LD_VAR 0 2
66470: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66471: LD_INT 0
66473: PPUSH
66474: PPUSH
66475: PPUSH
66476: PPUSH
66477: PPUSH
66478: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66479: LD_VAR 0 1
66483: NOT
66484: PUSH
66485: LD_VAR 0 2
66489: NOT
66490: OR
66491: PUSH
66492: LD_VAR 0 1
66496: PPUSH
66497: CALL_OW 314
66501: OR
66502: IFFALSE 66506
// exit ;
66504: GO 66947
// x := GetX ( enemy_unit ) ;
66506: LD_ADDR_VAR 0 7
66510: PUSH
66511: LD_VAR 0 2
66515: PPUSH
66516: CALL_OW 250
66520: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66521: LD_ADDR_VAR 0 8
66525: PUSH
66526: LD_VAR 0 2
66530: PPUSH
66531: CALL_OW 251
66535: ST_TO_ADDR
// if not x or not y then
66536: LD_VAR 0 7
66540: NOT
66541: PUSH
66542: LD_VAR 0 8
66546: NOT
66547: OR
66548: IFFALSE 66552
// exit ;
66550: GO 66947
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66552: LD_ADDR_VAR 0 6
66556: PUSH
66557: LD_VAR 0 7
66561: PPUSH
66562: LD_INT 0
66564: PPUSH
66565: LD_INT 4
66567: PPUSH
66568: CALL_OW 272
66572: PUSH
66573: LD_VAR 0 8
66577: PPUSH
66578: LD_INT 0
66580: PPUSH
66581: LD_INT 4
66583: PPUSH
66584: CALL_OW 273
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_VAR 0 7
66597: PPUSH
66598: LD_INT 1
66600: PPUSH
66601: LD_INT 4
66603: PPUSH
66604: CALL_OW 272
66608: PUSH
66609: LD_VAR 0 8
66613: PPUSH
66614: LD_INT 1
66616: PPUSH
66617: LD_INT 4
66619: PPUSH
66620: CALL_OW 273
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_VAR 0 7
66633: PPUSH
66634: LD_INT 2
66636: PPUSH
66637: LD_INT 4
66639: PPUSH
66640: CALL_OW 272
66644: PUSH
66645: LD_VAR 0 8
66649: PPUSH
66650: LD_INT 2
66652: PPUSH
66653: LD_INT 4
66655: PPUSH
66656: CALL_OW 273
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_VAR 0 7
66669: PPUSH
66670: LD_INT 3
66672: PPUSH
66673: LD_INT 4
66675: PPUSH
66676: CALL_OW 272
66680: PUSH
66681: LD_VAR 0 8
66685: PPUSH
66686: LD_INT 3
66688: PPUSH
66689: LD_INT 4
66691: PPUSH
66692: CALL_OW 273
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_VAR 0 7
66705: PPUSH
66706: LD_INT 4
66708: PPUSH
66709: LD_INT 4
66711: PPUSH
66712: CALL_OW 272
66716: PUSH
66717: LD_VAR 0 8
66721: PPUSH
66722: LD_INT 4
66724: PPUSH
66725: LD_INT 4
66727: PPUSH
66728: CALL_OW 273
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_VAR 0 7
66741: PPUSH
66742: LD_INT 5
66744: PPUSH
66745: LD_INT 4
66747: PPUSH
66748: CALL_OW 272
66752: PUSH
66753: LD_VAR 0 8
66757: PPUSH
66758: LD_INT 5
66760: PPUSH
66761: LD_INT 4
66763: PPUSH
66764: CALL_OW 273
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: ST_TO_ADDR
// for i = tmp downto 1 do
66781: LD_ADDR_VAR 0 4
66785: PUSH
66786: DOUBLE
66787: LD_VAR 0 6
66791: INC
66792: ST_TO_ADDR
66793: LD_INT 1
66795: PUSH
66796: FOR_DOWNTO
66797: IFFALSE 66898
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66799: LD_VAR 0 6
66803: PUSH
66804: LD_VAR 0 4
66808: ARRAY
66809: PUSH
66810: LD_INT 1
66812: ARRAY
66813: PPUSH
66814: LD_VAR 0 6
66818: PUSH
66819: LD_VAR 0 4
66823: ARRAY
66824: PUSH
66825: LD_INT 2
66827: ARRAY
66828: PPUSH
66829: CALL_OW 488
66833: NOT
66834: PUSH
66835: LD_VAR 0 6
66839: PUSH
66840: LD_VAR 0 4
66844: ARRAY
66845: PUSH
66846: LD_INT 1
66848: ARRAY
66849: PPUSH
66850: LD_VAR 0 6
66854: PUSH
66855: LD_VAR 0 4
66859: ARRAY
66860: PUSH
66861: LD_INT 2
66863: ARRAY
66864: PPUSH
66865: CALL_OW 428
66869: PUSH
66870: LD_INT 0
66872: NONEQUAL
66873: OR
66874: IFFALSE 66896
// tmp := Delete ( tmp , i ) ;
66876: LD_ADDR_VAR 0 6
66880: PUSH
66881: LD_VAR 0 6
66885: PPUSH
66886: LD_VAR 0 4
66890: PPUSH
66891: CALL_OW 3
66895: ST_TO_ADDR
66896: GO 66796
66898: POP
66899: POP
// j := GetClosestHex ( unit , tmp ) ;
66900: LD_ADDR_VAR 0 5
66904: PUSH
66905: LD_VAR 0 1
66909: PPUSH
66910: LD_VAR 0 6
66914: PPUSH
66915: CALL 66200 0 2
66919: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66920: LD_VAR 0 1
66924: PPUSH
66925: LD_VAR 0 5
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PPUSH
66934: LD_VAR 0 5
66938: PUSH
66939: LD_INT 2
66941: ARRAY
66942: PPUSH
66943: CALL_OW 111
// end ;
66947: LD_VAR 0 3
66951: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66952: LD_INT 0
66954: PPUSH
66955: PPUSH
66956: PPUSH
// uc_side = 0 ;
66957: LD_ADDR_OWVAR 20
66961: PUSH
66962: LD_INT 0
66964: ST_TO_ADDR
// uc_nation = 0 ;
66965: LD_ADDR_OWVAR 21
66969: PUSH
66970: LD_INT 0
66972: ST_TO_ADDR
// InitHc_All ( ) ;
66973: CALL_OW 584
// InitVc ;
66977: CALL_OW 20
// if mastodonts then
66981: LD_VAR 0 6
66985: IFFALSE 67052
// for i = 1 to mastodonts do
66987: LD_ADDR_VAR 0 11
66991: PUSH
66992: DOUBLE
66993: LD_INT 1
66995: DEC
66996: ST_TO_ADDR
66997: LD_VAR 0 6
67001: PUSH
67002: FOR_TO
67003: IFFALSE 67050
// begin vc_chassis := 31 ;
67005: LD_ADDR_OWVAR 37
67009: PUSH
67010: LD_INT 31
67012: ST_TO_ADDR
// vc_control := control_rider ;
67013: LD_ADDR_OWVAR 38
67017: PUSH
67018: LD_INT 4
67020: ST_TO_ADDR
// animal := CreateVehicle ;
67021: LD_ADDR_VAR 0 12
67025: PUSH
67026: CALL_OW 45
67030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67031: LD_VAR 0 12
67035: PPUSH
67036: LD_VAR 0 8
67040: PPUSH
67041: LD_INT 0
67043: PPUSH
67044: CALL 69240 0 3
// end ;
67048: GO 67002
67050: POP
67051: POP
// if horses then
67052: LD_VAR 0 5
67056: IFFALSE 67123
// for i = 1 to horses do
67058: LD_ADDR_VAR 0 11
67062: PUSH
67063: DOUBLE
67064: LD_INT 1
67066: DEC
67067: ST_TO_ADDR
67068: LD_VAR 0 5
67072: PUSH
67073: FOR_TO
67074: IFFALSE 67121
// begin hc_class := 21 ;
67076: LD_ADDR_OWVAR 28
67080: PUSH
67081: LD_INT 21
67083: ST_TO_ADDR
// hc_gallery :=  ;
67084: LD_ADDR_OWVAR 33
67088: PUSH
67089: LD_STRING 
67091: ST_TO_ADDR
// animal := CreateHuman ;
67092: LD_ADDR_VAR 0 12
67096: PUSH
67097: CALL_OW 44
67101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67102: LD_VAR 0 12
67106: PPUSH
67107: LD_VAR 0 8
67111: PPUSH
67112: LD_INT 0
67114: PPUSH
67115: CALL 69240 0 3
// end ;
67119: GO 67073
67121: POP
67122: POP
// if birds then
67123: LD_VAR 0 1
67127: IFFALSE 67194
// for i = 1 to birds do
67129: LD_ADDR_VAR 0 11
67133: PUSH
67134: DOUBLE
67135: LD_INT 1
67137: DEC
67138: ST_TO_ADDR
67139: LD_VAR 0 1
67143: PUSH
67144: FOR_TO
67145: IFFALSE 67192
// begin hc_class = 18 ;
67147: LD_ADDR_OWVAR 28
67151: PUSH
67152: LD_INT 18
67154: ST_TO_ADDR
// hc_gallery =  ;
67155: LD_ADDR_OWVAR 33
67159: PUSH
67160: LD_STRING 
67162: ST_TO_ADDR
// animal := CreateHuman ;
67163: LD_ADDR_VAR 0 12
67167: PUSH
67168: CALL_OW 44
67172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67173: LD_VAR 0 12
67177: PPUSH
67178: LD_VAR 0 8
67182: PPUSH
67183: LD_INT 0
67185: PPUSH
67186: CALL 69240 0 3
// end ;
67190: GO 67144
67192: POP
67193: POP
// if tigers then
67194: LD_VAR 0 2
67198: IFFALSE 67282
// for i = 1 to tigers do
67200: LD_ADDR_VAR 0 11
67204: PUSH
67205: DOUBLE
67206: LD_INT 1
67208: DEC
67209: ST_TO_ADDR
67210: LD_VAR 0 2
67214: PUSH
67215: FOR_TO
67216: IFFALSE 67280
// begin hc_class = class_tiger ;
67218: LD_ADDR_OWVAR 28
67222: PUSH
67223: LD_INT 14
67225: ST_TO_ADDR
// hc_gallery =  ;
67226: LD_ADDR_OWVAR 33
67230: PUSH
67231: LD_STRING 
67233: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67234: LD_ADDR_OWVAR 35
67238: PUSH
67239: LD_INT 7
67241: NEG
67242: PPUSH
67243: LD_INT 7
67245: PPUSH
67246: CALL_OW 12
67250: ST_TO_ADDR
// animal := CreateHuman ;
67251: LD_ADDR_VAR 0 12
67255: PUSH
67256: CALL_OW 44
67260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67261: LD_VAR 0 12
67265: PPUSH
67266: LD_VAR 0 8
67270: PPUSH
67271: LD_INT 0
67273: PPUSH
67274: CALL 69240 0 3
// end ;
67278: GO 67215
67280: POP
67281: POP
// if apemans then
67282: LD_VAR 0 3
67286: IFFALSE 67409
// for i = 1 to apemans do
67288: LD_ADDR_VAR 0 11
67292: PUSH
67293: DOUBLE
67294: LD_INT 1
67296: DEC
67297: ST_TO_ADDR
67298: LD_VAR 0 3
67302: PUSH
67303: FOR_TO
67304: IFFALSE 67407
// begin hc_class = class_apeman ;
67306: LD_ADDR_OWVAR 28
67310: PUSH
67311: LD_INT 12
67313: ST_TO_ADDR
// hc_gallery =  ;
67314: LD_ADDR_OWVAR 33
67318: PUSH
67319: LD_STRING 
67321: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67322: LD_ADDR_OWVAR 35
67326: PUSH
67327: LD_INT 2
67329: NEG
67330: PPUSH
67331: LD_INT 2
67333: PPUSH
67334: CALL_OW 12
67338: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67339: LD_ADDR_OWVAR 31
67343: PUSH
67344: LD_INT 1
67346: PPUSH
67347: LD_INT 3
67349: PPUSH
67350: CALL_OW 12
67354: PUSH
67355: LD_INT 1
67357: PPUSH
67358: LD_INT 3
67360: PPUSH
67361: CALL_OW 12
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: ST_TO_ADDR
// animal := CreateHuman ;
67378: LD_ADDR_VAR 0 12
67382: PUSH
67383: CALL_OW 44
67387: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67388: LD_VAR 0 12
67392: PPUSH
67393: LD_VAR 0 8
67397: PPUSH
67398: LD_INT 0
67400: PPUSH
67401: CALL 69240 0 3
// end ;
67405: GO 67303
67407: POP
67408: POP
// if enchidnas then
67409: LD_VAR 0 4
67413: IFFALSE 67480
// for i = 1 to enchidnas do
67415: LD_ADDR_VAR 0 11
67419: PUSH
67420: DOUBLE
67421: LD_INT 1
67423: DEC
67424: ST_TO_ADDR
67425: LD_VAR 0 4
67429: PUSH
67430: FOR_TO
67431: IFFALSE 67478
// begin hc_class = 13 ;
67433: LD_ADDR_OWVAR 28
67437: PUSH
67438: LD_INT 13
67440: ST_TO_ADDR
// hc_gallery =  ;
67441: LD_ADDR_OWVAR 33
67445: PUSH
67446: LD_STRING 
67448: ST_TO_ADDR
// animal := CreateHuman ;
67449: LD_ADDR_VAR 0 12
67453: PUSH
67454: CALL_OW 44
67458: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67459: LD_VAR 0 12
67463: PPUSH
67464: LD_VAR 0 8
67468: PPUSH
67469: LD_INT 0
67471: PPUSH
67472: CALL 69240 0 3
// end ;
67476: GO 67430
67478: POP
67479: POP
// if fishes then
67480: LD_VAR 0 7
67484: IFFALSE 67551
// for i = 1 to fishes do
67486: LD_ADDR_VAR 0 11
67490: PUSH
67491: DOUBLE
67492: LD_INT 1
67494: DEC
67495: ST_TO_ADDR
67496: LD_VAR 0 7
67500: PUSH
67501: FOR_TO
67502: IFFALSE 67549
// begin hc_class = 20 ;
67504: LD_ADDR_OWVAR 28
67508: PUSH
67509: LD_INT 20
67511: ST_TO_ADDR
// hc_gallery =  ;
67512: LD_ADDR_OWVAR 33
67516: PUSH
67517: LD_STRING 
67519: ST_TO_ADDR
// animal := CreateHuman ;
67520: LD_ADDR_VAR 0 12
67524: PUSH
67525: CALL_OW 44
67529: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67530: LD_VAR 0 12
67534: PPUSH
67535: LD_VAR 0 9
67539: PPUSH
67540: LD_INT 0
67542: PPUSH
67543: CALL 69240 0 3
// end ;
67547: GO 67501
67549: POP
67550: POP
// end ;
67551: LD_VAR 0 10
67555: RET
// export function WantHeal ( sci , unit ) ; begin
67556: LD_INT 0
67558: PPUSH
// if GetTaskList ( sci ) > 0 then
67559: LD_VAR 0 1
67563: PPUSH
67564: CALL_OW 437
67568: PUSH
67569: LD_INT 0
67571: GREATER
67572: IFFALSE 67642
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67574: LD_VAR 0 1
67578: PPUSH
67579: CALL_OW 437
67583: PUSH
67584: LD_INT 1
67586: ARRAY
67587: PUSH
67588: LD_INT 1
67590: ARRAY
67591: PUSH
67592: LD_STRING l
67594: EQUAL
67595: PUSH
67596: LD_VAR 0 1
67600: PPUSH
67601: CALL_OW 437
67605: PUSH
67606: LD_INT 1
67608: ARRAY
67609: PUSH
67610: LD_INT 4
67612: ARRAY
67613: PUSH
67614: LD_VAR 0 2
67618: EQUAL
67619: AND
67620: IFFALSE 67632
// result := true else
67622: LD_ADDR_VAR 0 3
67626: PUSH
67627: LD_INT 1
67629: ST_TO_ADDR
67630: GO 67640
// result := false ;
67632: LD_ADDR_VAR 0 3
67636: PUSH
67637: LD_INT 0
67639: ST_TO_ADDR
// end else
67640: GO 67650
// result := false ;
67642: LD_ADDR_VAR 0 3
67646: PUSH
67647: LD_INT 0
67649: ST_TO_ADDR
// end ;
67650: LD_VAR 0 3
67654: RET
// export function HealTarget ( sci ) ; begin
67655: LD_INT 0
67657: PPUSH
// if not sci then
67658: LD_VAR 0 1
67662: NOT
67663: IFFALSE 67667
// exit ;
67665: GO 67732
// result := 0 ;
67667: LD_ADDR_VAR 0 2
67671: PUSH
67672: LD_INT 0
67674: ST_TO_ADDR
// if GetTaskList ( sci ) then
67675: LD_VAR 0 1
67679: PPUSH
67680: CALL_OW 437
67684: IFFALSE 67732
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67686: LD_VAR 0 1
67690: PPUSH
67691: CALL_OW 437
67695: PUSH
67696: LD_INT 1
67698: ARRAY
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: PUSH
67704: LD_STRING l
67706: EQUAL
67707: IFFALSE 67732
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67709: LD_ADDR_VAR 0 2
67713: PUSH
67714: LD_VAR 0 1
67718: PPUSH
67719: CALL_OW 437
67723: PUSH
67724: LD_INT 1
67726: ARRAY
67727: PUSH
67728: LD_INT 4
67730: ARRAY
67731: ST_TO_ADDR
// end ;
67732: LD_VAR 0 2
67736: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67737: LD_INT 0
67739: PPUSH
67740: PPUSH
67741: PPUSH
67742: PPUSH
// if not base_units then
67743: LD_VAR 0 1
67747: NOT
67748: IFFALSE 67752
// exit ;
67750: GO 67839
// result := false ;
67752: LD_ADDR_VAR 0 2
67756: PUSH
67757: LD_INT 0
67759: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67760: LD_ADDR_VAR 0 5
67764: PUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: LD_INT 21
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PPUSH
67780: CALL_OW 72
67784: ST_TO_ADDR
// if not tmp then
67785: LD_VAR 0 5
67789: NOT
67790: IFFALSE 67794
// exit ;
67792: GO 67839
// for i in tmp do
67794: LD_ADDR_VAR 0 3
67798: PUSH
67799: LD_VAR 0 5
67803: PUSH
67804: FOR_IN
67805: IFFALSE 67837
// begin result := EnemyInRange ( i , 22 ) ;
67807: LD_ADDR_VAR 0 2
67811: PUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: LD_INT 22
67819: PPUSH
67820: CALL 66075 0 2
67824: ST_TO_ADDR
// if result then
67825: LD_VAR 0 2
67829: IFFALSE 67835
// exit ;
67831: POP
67832: POP
67833: GO 67839
// end ;
67835: GO 67804
67837: POP
67838: POP
// end ;
67839: LD_VAR 0 2
67843: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67844: LD_INT 0
67846: PPUSH
67847: PPUSH
// if not units then
67848: LD_VAR 0 1
67852: NOT
67853: IFFALSE 67857
// exit ;
67855: GO 67927
// result := [ ] ;
67857: LD_ADDR_VAR 0 3
67861: PUSH
67862: EMPTY
67863: ST_TO_ADDR
// for i in units do
67864: LD_ADDR_VAR 0 4
67868: PUSH
67869: LD_VAR 0 1
67873: PUSH
67874: FOR_IN
67875: IFFALSE 67925
// if GetTag ( i ) = tag then
67877: LD_VAR 0 4
67881: PPUSH
67882: CALL_OW 110
67886: PUSH
67887: LD_VAR 0 2
67891: EQUAL
67892: IFFALSE 67923
// result := Insert ( result , result + 1 , i ) ;
67894: LD_ADDR_VAR 0 3
67898: PUSH
67899: LD_VAR 0 3
67903: PPUSH
67904: LD_VAR 0 3
67908: PUSH
67909: LD_INT 1
67911: PLUS
67912: PPUSH
67913: LD_VAR 0 4
67917: PPUSH
67918: CALL_OW 2
67922: ST_TO_ADDR
67923: GO 67874
67925: POP
67926: POP
// end ;
67927: LD_VAR 0 3
67931: RET
// export function IsDriver ( un ) ; begin
67932: LD_INT 0
67934: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67935: LD_ADDR_VAR 0 2
67939: PUSH
67940: LD_VAR 0 1
67944: PUSH
67945: LD_INT 55
67947: PUSH
67948: EMPTY
67949: LIST
67950: PPUSH
67951: CALL_OW 69
67955: IN
67956: ST_TO_ADDR
// end ;
67957: LD_VAR 0 2
67961: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67962: LD_INT 0
67964: PPUSH
67965: PPUSH
// list := [ ] ;
67966: LD_ADDR_VAR 0 5
67970: PUSH
67971: EMPTY
67972: ST_TO_ADDR
// case d of 0 :
67973: LD_VAR 0 3
67977: PUSH
67978: LD_INT 0
67980: DOUBLE
67981: EQUAL
67982: IFTRUE 67986
67984: GO 68119
67986: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67987: LD_ADDR_VAR 0 5
67991: PUSH
67992: LD_VAR 0 1
67996: PUSH
67997: LD_INT 4
67999: MINUS
68000: PUSH
68001: LD_VAR 0 2
68005: PUSH
68006: LD_INT 4
68008: MINUS
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_INT 3
68025: MINUS
68026: PUSH
68027: LD_VAR 0 2
68031: PUSH
68032: LD_INT 1
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: PUSH
68040: LD_VAR 0 1
68044: PUSH
68045: LD_INT 4
68047: PLUS
68048: PUSH
68049: LD_VAR 0 2
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: LIST
68061: PUSH
68062: LD_VAR 0 1
68066: PUSH
68067: LD_INT 3
68069: PLUS
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: LD_INT 3
68078: PLUS
68079: PUSH
68080: LD_INT 5
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_VAR 0 2
68097: PUSH
68098: LD_INT 4
68100: PLUS
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// end ; 1 :
68117: GO 68817
68119: LD_INT 1
68121: DOUBLE
68122: EQUAL
68123: IFTRUE 68127
68125: GO 68260
68127: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68128: LD_ADDR_VAR 0 5
68132: PUSH
68133: LD_VAR 0 1
68137: PUSH
68138: LD_VAR 0 2
68142: PUSH
68143: LD_INT 4
68145: MINUS
68146: PUSH
68147: LD_INT 3
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: PUSH
68155: LD_VAR 0 1
68159: PUSH
68160: LD_INT 3
68162: MINUS
68163: PUSH
68164: LD_VAR 0 2
68168: PUSH
68169: LD_INT 3
68171: MINUS
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 4
68188: MINUS
68189: PUSH
68190: LD_VAR 0 2
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: PUSH
68203: LD_VAR 0 1
68207: PUSH
68208: LD_VAR 0 2
68212: PUSH
68213: LD_INT 3
68215: PLUS
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: PUSH
68225: LD_VAR 0 1
68229: PUSH
68230: LD_INT 4
68232: PLUS
68233: PUSH
68234: LD_VAR 0 2
68238: PUSH
68239: LD_INT 4
68241: PLUS
68242: PUSH
68243: LD_INT 5
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: ST_TO_ADDR
// end ; 2 :
68258: GO 68817
68260: LD_INT 2
68262: DOUBLE
68263: EQUAL
68264: IFTRUE 68268
68266: GO 68397
68268: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68269: LD_ADDR_VAR 0 5
68273: PUSH
68274: LD_VAR 0 1
68278: PUSH
68279: LD_VAR 0 2
68283: PUSH
68284: LD_INT 3
68286: MINUS
68287: PUSH
68288: LD_INT 3
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: LIST
68295: PUSH
68296: LD_VAR 0 1
68300: PUSH
68301: LD_INT 4
68303: PLUS
68304: PUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_INT 4
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: LD_VAR 0 2
68327: PUSH
68328: LD_INT 4
68330: PLUS
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: PUSH
68340: LD_VAR 0 1
68344: PUSH
68345: LD_INT 3
68347: MINUS
68348: PUSH
68349: LD_VAR 0 2
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: LIST
68361: PUSH
68362: LD_VAR 0 1
68366: PUSH
68367: LD_INT 4
68369: MINUS
68370: PUSH
68371: LD_VAR 0 2
68375: PUSH
68376: LD_INT 4
68378: MINUS
68379: PUSH
68380: LD_INT 2
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// end ; 3 :
68395: GO 68817
68397: LD_INT 3
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68405
68403: GO 68538
68405: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68406: LD_ADDR_VAR 0 5
68410: PUSH
68411: LD_VAR 0 1
68415: PUSH
68416: LD_INT 3
68418: PLUS
68419: PUSH
68420: LD_VAR 0 2
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: PUSH
68433: LD_VAR 0 1
68437: PUSH
68438: LD_INT 4
68440: PLUS
68441: PUSH
68442: LD_VAR 0 2
68446: PUSH
68447: LD_INT 4
68449: PLUS
68450: PUSH
68451: LD_INT 5
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: PUSH
68459: LD_VAR 0 1
68463: PUSH
68464: LD_INT 4
68466: MINUS
68467: PUSH
68468: LD_VAR 0 2
68472: PUSH
68473: LD_INT 1
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: LIST
68480: PUSH
68481: LD_VAR 0 1
68485: PUSH
68486: LD_VAR 0 2
68490: PUSH
68491: LD_INT 4
68493: MINUS
68494: PUSH
68495: LD_INT 3
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: LIST
68502: PUSH
68503: LD_VAR 0 1
68507: PUSH
68508: LD_INT 3
68510: MINUS
68511: PUSH
68512: LD_VAR 0 2
68516: PUSH
68517: LD_INT 3
68519: MINUS
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// end ; 4 :
68536: GO 68817
68538: LD_INT 4
68540: DOUBLE
68541: EQUAL
68542: IFTRUE 68546
68544: GO 68679
68546: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68547: LD_ADDR_VAR 0 5
68551: PUSH
68552: LD_VAR 0 1
68556: PUSH
68557: LD_VAR 0 2
68561: PUSH
68562: LD_INT 4
68564: PLUS
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: LIST
68573: PUSH
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 3
68581: PLUS
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: LD_INT 3
68590: PLUS
68591: PUSH
68592: LD_INT 5
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: PUSH
68600: LD_VAR 0 1
68604: PUSH
68605: LD_INT 4
68607: PLUS
68608: PUSH
68609: LD_VAR 0 2
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: LIST
68621: PUSH
68622: LD_VAR 0 1
68626: PUSH
68627: LD_VAR 0 2
68631: PUSH
68632: LD_INT 3
68634: MINUS
68635: PUSH
68636: LD_INT 3
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: LIST
68643: PUSH
68644: LD_VAR 0 1
68648: PUSH
68649: LD_INT 4
68651: MINUS
68652: PUSH
68653: LD_VAR 0 2
68657: PUSH
68658: LD_INT 4
68660: MINUS
68661: PUSH
68662: LD_INT 2
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: ST_TO_ADDR
// end ; 5 :
68677: GO 68817
68679: LD_INT 5
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68687
68685: GO 68816
68687: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68688: LD_ADDR_VAR 0 5
68692: PUSH
68693: LD_VAR 0 1
68697: PUSH
68698: LD_INT 4
68700: MINUS
68701: PUSH
68702: LD_VAR 0 2
68706: PUSH
68707: LD_INT 1
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: PUSH
68715: LD_VAR 0 1
68719: PUSH
68720: LD_VAR 0 2
68724: PUSH
68725: LD_INT 4
68727: MINUS
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 4
68744: PLUS
68745: PUSH
68746: LD_VAR 0 2
68750: PUSH
68751: LD_INT 4
68753: PLUS
68754: PUSH
68755: LD_INT 5
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: LIST
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_INT 3
68770: PLUS
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: PUSH
68785: LD_VAR 0 1
68789: PUSH
68790: LD_VAR 0 2
68794: PUSH
68795: LD_INT 3
68797: PLUS
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: LIST
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// end ; end ;
68814: GO 68817
68816: POP
// result := list ;
68817: LD_ADDR_VAR 0 4
68821: PUSH
68822: LD_VAR 0 5
68826: ST_TO_ADDR
// end ;
68827: LD_VAR 0 4
68831: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68832: LD_INT 0
68834: PPUSH
68835: PPUSH
68836: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68837: LD_VAR 0 1
68841: NOT
68842: PUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 3
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: IN
68866: NOT
68867: OR
68868: IFFALSE 68872
// exit ;
68870: GO 68964
// tmp := [ ] ;
68872: LD_ADDR_VAR 0 5
68876: PUSH
68877: EMPTY
68878: ST_TO_ADDR
// for i in units do
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 1
68888: PUSH
68889: FOR_IN
68890: IFFALSE 68933
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68892: LD_ADDR_VAR 0 5
68896: PUSH
68897: LD_VAR 0 5
68901: PPUSH
68902: LD_VAR 0 5
68906: PUSH
68907: LD_INT 1
68909: PLUS
68910: PPUSH
68911: LD_VAR 0 4
68915: PPUSH
68916: LD_VAR 0 2
68920: PPUSH
68921: CALL_OW 259
68925: PPUSH
68926: CALL_OW 2
68930: ST_TO_ADDR
68931: GO 68889
68933: POP
68934: POP
// if not tmp then
68935: LD_VAR 0 5
68939: NOT
68940: IFFALSE 68944
// exit ;
68942: GO 68964
// result := SortListByListDesc ( units , tmp ) ;
68944: LD_ADDR_VAR 0 3
68948: PUSH
68949: LD_VAR 0 1
68953: PPUSH
68954: LD_VAR 0 5
68958: PPUSH
68959: CALL_OW 77
68963: ST_TO_ADDR
// end ;
68964: LD_VAR 0 3
68968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68969: LD_INT 0
68971: PPUSH
68972: PPUSH
68973: PPUSH
// result := false ;
68974: LD_ADDR_VAR 0 3
68978: PUSH
68979: LD_INT 0
68981: ST_TO_ADDR
// x := GetX ( building ) ;
68982: LD_ADDR_VAR 0 4
68986: PUSH
68987: LD_VAR 0 2
68991: PPUSH
68992: CALL_OW 250
68996: ST_TO_ADDR
// y := GetY ( building ) ;
68997: LD_ADDR_VAR 0 5
69001: PUSH
69002: LD_VAR 0 2
69006: PPUSH
69007: CALL_OW 251
69011: ST_TO_ADDR
// if not building or not x or not y then
69012: LD_VAR 0 2
69016: NOT
69017: PUSH
69018: LD_VAR 0 4
69022: NOT
69023: OR
69024: PUSH
69025: LD_VAR 0 5
69029: NOT
69030: OR
69031: IFFALSE 69035
// exit ;
69033: GO 69127
// if GetTaskList ( unit ) then
69035: LD_VAR 0 1
69039: PPUSH
69040: CALL_OW 437
69044: IFFALSE 69127
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69046: LD_STRING e
69048: PUSH
69049: LD_VAR 0 1
69053: PPUSH
69054: CALL_OW 437
69058: PUSH
69059: LD_INT 1
69061: ARRAY
69062: PUSH
69063: LD_INT 1
69065: ARRAY
69066: EQUAL
69067: PUSH
69068: LD_VAR 0 4
69072: PUSH
69073: LD_VAR 0 1
69077: PPUSH
69078: CALL_OW 437
69082: PUSH
69083: LD_INT 1
69085: ARRAY
69086: PUSH
69087: LD_INT 2
69089: ARRAY
69090: EQUAL
69091: AND
69092: PUSH
69093: LD_VAR 0 5
69097: PUSH
69098: LD_VAR 0 1
69102: PPUSH
69103: CALL_OW 437
69107: PUSH
69108: LD_INT 1
69110: ARRAY
69111: PUSH
69112: LD_INT 3
69114: ARRAY
69115: EQUAL
69116: AND
69117: IFFALSE 69127
// result := true end ;
69119: LD_ADDR_VAR 0 3
69123: PUSH
69124: LD_INT 1
69126: ST_TO_ADDR
// end ;
69127: LD_VAR 0 3
69131: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69132: LD_INT 0
69134: PPUSH
// result := false ;
69135: LD_ADDR_VAR 0 4
69139: PUSH
69140: LD_INT 0
69142: ST_TO_ADDR
// if GetTaskList ( unit ) then
69143: LD_VAR 0 1
69147: PPUSH
69148: CALL_OW 437
69152: IFFALSE 69235
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69154: LD_STRING M
69156: PUSH
69157: LD_VAR 0 1
69161: PPUSH
69162: CALL_OW 437
69166: PUSH
69167: LD_INT 1
69169: ARRAY
69170: PUSH
69171: LD_INT 1
69173: ARRAY
69174: EQUAL
69175: PUSH
69176: LD_VAR 0 2
69180: PUSH
69181: LD_VAR 0 1
69185: PPUSH
69186: CALL_OW 437
69190: PUSH
69191: LD_INT 1
69193: ARRAY
69194: PUSH
69195: LD_INT 2
69197: ARRAY
69198: EQUAL
69199: AND
69200: PUSH
69201: LD_VAR 0 3
69205: PUSH
69206: LD_VAR 0 1
69210: PPUSH
69211: CALL_OW 437
69215: PUSH
69216: LD_INT 1
69218: ARRAY
69219: PUSH
69220: LD_INT 3
69222: ARRAY
69223: EQUAL
69224: AND
69225: IFFALSE 69235
// result := true ;
69227: LD_ADDR_VAR 0 4
69231: PUSH
69232: LD_INT 1
69234: ST_TO_ADDR
// end ; end ;
69235: LD_VAR 0 4
69239: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69240: LD_INT 0
69242: PPUSH
69243: PPUSH
69244: PPUSH
69245: PPUSH
// if not unit or not area then
69246: LD_VAR 0 1
69250: NOT
69251: PUSH
69252: LD_VAR 0 2
69256: NOT
69257: OR
69258: IFFALSE 69262
// exit ;
69260: GO 69426
// tmp := AreaToList ( area , i ) ;
69262: LD_ADDR_VAR 0 6
69266: PUSH
69267: LD_VAR 0 2
69271: PPUSH
69272: LD_VAR 0 5
69276: PPUSH
69277: CALL_OW 517
69281: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69282: LD_ADDR_VAR 0 5
69286: PUSH
69287: DOUBLE
69288: LD_INT 1
69290: DEC
69291: ST_TO_ADDR
69292: LD_VAR 0 6
69296: PUSH
69297: LD_INT 1
69299: ARRAY
69300: PUSH
69301: FOR_TO
69302: IFFALSE 69424
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69304: LD_ADDR_VAR 0 7
69308: PUSH
69309: LD_VAR 0 6
69313: PUSH
69314: LD_INT 1
69316: ARRAY
69317: PUSH
69318: LD_VAR 0 5
69322: ARRAY
69323: PUSH
69324: LD_VAR 0 6
69328: PUSH
69329: LD_INT 2
69331: ARRAY
69332: PUSH
69333: LD_VAR 0 5
69337: ARRAY
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69343: LD_VAR 0 7
69347: PUSH
69348: LD_INT 1
69350: ARRAY
69351: PPUSH
69352: LD_VAR 0 7
69356: PUSH
69357: LD_INT 2
69359: ARRAY
69360: PPUSH
69361: CALL_OW 428
69365: PUSH
69366: LD_INT 0
69368: EQUAL
69369: IFFALSE 69422
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69371: LD_VAR 0 1
69375: PPUSH
69376: LD_VAR 0 7
69380: PUSH
69381: LD_INT 1
69383: ARRAY
69384: PPUSH
69385: LD_VAR 0 7
69389: PUSH
69390: LD_INT 2
69392: ARRAY
69393: PPUSH
69394: LD_VAR 0 3
69398: PPUSH
69399: CALL_OW 48
// result := IsPlaced ( unit ) ;
69403: LD_ADDR_VAR 0 4
69407: PUSH
69408: LD_VAR 0 1
69412: PPUSH
69413: CALL_OW 305
69417: ST_TO_ADDR
// exit ;
69418: POP
69419: POP
69420: GO 69426
// end ; end ;
69422: GO 69301
69424: POP
69425: POP
// end ;
69426: LD_VAR 0 4
69430: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69431: LD_INT 0
69433: PPUSH
69434: PPUSH
69435: PPUSH
// if not side or side > 8 then
69436: LD_VAR 0 1
69440: NOT
69441: PUSH
69442: LD_VAR 0 1
69446: PUSH
69447: LD_INT 8
69449: GREATER
69450: OR
69451: IFFALSE 69455
// exit ;
69453: GO 69642
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69455: LD_ADDR_VAR 0 4
69459: PUSH
69460: LD_INT 22
69462: PUSH
69463: LD_VAR 0 1
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 21
69474: PUSH
69475: LD_INT 3
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PPUSH
69486: CALL_OW 69
69490: ST_TO_ADDR
// if not tmp then
69491: LD_VAR 0 4
69495: NOT
69496: IFFALSE 69500
// exit ;
69498: GO 69642
// enable_addtolog := true ;
69500: LD_ADDR_OWVAR 81
69504: PUSH
69505: LD_INT 1
69507: ST_TO_ADDR
// AddToLog ( [ ) ;
69508: LD_STRING [
69510: PPUSH
69511: CALL_OW 561
// for i in tmp do
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_VAR 0 4
69524: PUSH
69525: FOR_IN
69526: IFFALSE 69633
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69528: LD_STRING [
69530: PUSH
69531: LD_VAR 0 3
69535: PPUSH
69536: CALL_OW 266
69540: STR
69541: PUSH
69542: LD_STRING , 
69544: STR
69545: PUSH
69546: LD_VAR 0 3
69550: PPUSH
69551: CALL_OW 250
69555: STR
69556: PUSH
69557: LD_STRING , 
69559: STR
69560: PUSH
69561: LD_VAR 0 3
69565: PPUSH
69566: CALL_OW 251
69570: STR
69571: PUSH
69572: LD_STRING , 
69574: STR
69575: PUSH
69576: LD_VAR 0 3
69580: PPUSH
69581: CALL_OW 254
69585: STR
69586: PUSH
69587: LD_STRING , 
69589: STR
69590: PUSH
69591: LD_VAR 0 3
69595: PPUSH
69596: LD_INT 1
69598: PPUSH
69599: CALL_OW 268
69603: STR
69604: PUSH
69605: LD_STRING , 
69607: STR
69608: PUSH
69609: LD_VAR 0 3
69613: PPUSH
69614: LD_INT 2
69616: PPUSH
69617: CALL_OW 268
69621: STR
69622: PUSH
69623: LD_STRING ],
69625: STR
69626: PPUSH
69627: CALL_OW 561
// end ;
69631: GO 69525
69633: POP
69634: POP
// AddToLog ( ]; ) ;
69635: LD_STRING ];
69637: PPUSH
69638: CALL_OW 561
// end ;
69642: LD_VAR 0 2
69646: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69647: LD_INT 0
69649: PPUSH
69650: PPUSH
69651: PPUSH
69652: PPUSH
69653: PPUSH
// if not area or not rate or not max then
69654: LD_VAR 0 1
69658: NOT
69659: PUSH
69660: LD_VAR 0 2
69664: NOT
69665: OR
69666: PUSH
69667: LD_VAR 0 4
69671: NOT
69672: OR
69673: IFFALSE 69677
// exit ;
69675: GO 69869
// while 1 do
69677: LD_INT 1
69679: IFFALSE 69869
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69681: LD_ADDR_VAR 0 9
69685: PUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: LD_INT 1
69693: PPUSH
69694: CALL_OW 287
69698: PUSH
69699: LD_INT 10
69701: MUL
69702: ST_TO_ADDR
// r := rate / 10 ;
69703: LD_ADDR_VAR 0 7
69707: PUSH
69708: LD_VAR 0 2
69712: PUSH
69713: LD_INT 10
69715: DIVREAL
69716: ST_TO_ADDR
// time := 1 1$00 ;
69717: LD_ADDR_VAR 0 8
69721: PUSH
69722: LD_INT 2100
69724: ST_TO_ADDR
// if amount < min then
69725: LD_VAR 0 9
69729: PUSH
69730: LD_VAR 0 3
69734: LESS
69735: IFFALSE 69753
// r := r * 2 else
69737: LD_ADDR_VAR 0 7
69741: PUSH
69742: LD_VAR 0 7
69746: PUSH
69747: LD_INT 2
69749: MUL
69750: ST_TO_ADDR
69751: GO 69779
// if amount > max then
69753: LD_VAR 0 9
69757: PUSH
69758: LD_VAR 0 4
69762: GREATER
69763: IFFALSE 69779
// r := r / 2 ;
69765: LD_ADDR_VAR 0 7
69769: PUSH
69770: LD_VAR 0 7
69774: PUSH
69775: LD_INT 2
69777: DIVREAL
69778: ST_TO_ADDR
// time := time / r ;
69779: LD_ADDR_VAR 0 8
69783: PUSH
69784: LD_VAR 0 8
69788: PUSH
69789: LD_VAR 0 7
69793: DIVREAL
69794: ST_TO_ADDR
// if time < 0 then
69795: LD_VAR 0 8
69799: PUSH
69800: LD_INT 0
69802: LESS
69803: IFFALSE 69820
// time := time * - 1 ;
69805: LD_ADDR_VAR 0 8
69809: PUSH
69810: LD_VAR 0 8
69814: PUSH
69815: LD_INT 1
69817: NEG
69818: MUL
69819: ST_TO_ADDR
// wait ( time ) ;
69820: LD_VAR 0 8
69824: PPUSH
69825: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69829: LD_INT 35
69831: PPUSH
69832: LD_INT 875
69834: PPUSH
69835: CALL_OW 12
69839: PPUSH
69840: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69844: LD_INT 1
69846: PPUSH
69847: LD_INT 5
69849: PPUSH
69850: CALL_OW 12
69854: PPUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: LD_INT 1
69862: PPUSH
69863: CALL_OW 55
// end ;
69867: GO 69677
// end ;
69869: LD_VAR 0 5
69873: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69874: LD_INT 0
69876: PPUSH
69877: PPUSH
69878: PPUSH
69879: PPUSH
69880: PPUSH
69881: PPUSH
69882: PPUSH
69883: PPUSH
// if not turrets or not factories then
69884: LD_VAR 0 1
69888: NOT
69889: PUSH
69890: LD_VAR 0 2
69894: NOT
69895: OR
69896: IFFALSE 69900
// exit ;
69898: GO 70207
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69900: LD_ADDR_VAR 0 10
69904: PUSH
69905: LD_INT 5
69907: PUSH
69908: LD_INT 6
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 24
69942: PUSH
69943: LD_INT 25
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 23
69952: PUSH
69953: LD_INT 27
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 42
69966: PUSH
69967: LD_INT 43
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 44
69976: PUSH
69977: LD_INT 46
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 45
69986: PUSH
69987: LD_INT 47
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: LIST
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: LIST
70003: ST_TO_ADDR
// result := [ ] ;
70004: LD_ADDR_VAR 0 3
70008: PUSH
70009: EMPTY
70010: ST_TO_ADDR
// for i in turrets do
70011: LD_ADDR_VAR 0 4
70015: PUSH
70016: LD_VAR 0 1
70020: PUSH
70021: FOR_IN
70022: IFFALSE 70205
// begin nat := GetNation ( i ) ;
70024: LD_ADDR_VAR 0 7
70028: PUSH
70029: LD_VAR 0 4
70033: PPUSH
70034: CALL_OW 248
70038: ST_TO_ADDR
// weapon := 0 ;
70039: LD_ADDR_VAR 0 8
70043: PUSH
70044: LD_INT 0
70046: ST_TO_ADDR
// if not nat then
70047: LD_VAR 0 7
70051: NOT
70052: IFFALSE 70056
// continue ;
70054: GO 70021
// for j in list [ nat ] do
70056: LD_ADDR_VAR 0 5
70060: PUSH
70061: LD_VAR 0 10
70065: PUSH
70066: LD_VAR 0 7
70070: ARRAY
70071: PUSH
70072: FOR_IN
70073: IFFALSE 70114
// if GetBWeapon ( i ) = j [ 1 ] then
70075: LD_VAR 0 4
70079: PPUSH
70080: CALL_OW 269
70084: PUSH
70085: LD_VAR 0 5
70089: PUSH
70090: LD_INT 1
70092: ARRAY
70093: EQUAL
70094: IFFALSE 70112
// begin weapon := j [ 2 ] ;
70096: LD_ADDR_VAR 0 8
70100: PUSH
70101: LD_VAR 0 5
70105: PUSH
70106: LD_INT 2
70108: ARRAY
70109: ST_TO_ADDR
// break ;
70110: GO 70114
// end ;
70112: GO 70072
70114: POP
70115: POP
// if not weapon then
70116: LD_VAR 0 8
70120: NOT
70121: IFFALSE 70125
// continue ;
70123: GO 70021
// for k in factories do
70125: LD_ADDR_VAR 0 6
70129: PUSH
70130: LD_VAR 0 2
70134: PUSH
70135: FOR_IN
70136: IFFALSE 70201
// begin weapons := AvailableWeaponList ( k ) ;
70138: LD_ADDR_VAR 0 9
70142: PUSH
70143: LD_VAR 0 6
70147: PPUSH
70148: CALL_OW 478
70152: ST_TO_ADDR
// if not weapons then
70153: LD_VAR 0 9
70157: NOT
70158: IFFALSE 70162
// continue ;
70160: GO 70135
// if weapon in weapons then
70162: LD_VAR 0 8
70166: PUSH
70167: LD_VAR 0 9
70171: IN
70172: IFFALSE 70199
// begin result := [ i , weapon ] ;
70174: LD_ADDR_VAR 0 3
70178: PUSH
70179: LD_VAR 0 4
70183: PUSH
70184: LD_VAR 0 8
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: ST_TO_ADDR
// exit ;
70193: POP
70194: POP
70195: POP
70196: POP
70197: GO 70207
// end ; end ;
70199: GO 70135
70201: POP
70202: POP
// end ;
70203: GO 70021
70205: POP
70206: POP
// end ;
70207: LD_VAR 0 3
70211: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70212: LD_INT 0
70214: PPUSH
// if not side or side > 8 then
70215: LD_VAR 0 3
70219: NOT
70220: PUSH
70221: LD_VAR 0 3
70225: PUSH
70226: LD_INT 8
70228: GREATER
70229: OR
70230: IFFALSE 70234
// exit ;
70232: GO 70293
// if not range then
70234: LD_VAR 0 4
70238: NOT
70239: IFFALSE 70250
// range := - 12 ;
70241: LD_ADDR_VAR 0 4
70245: PUSH
70246: LD_INT 12
70248: NEG
70249: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70250: LD_VAR 0 1
70254: PPUSH
70255: LD_VAR 0 2
70259: PPUSH
70260: LD_VAR 0 3
70264: PPUSH
70265: LD_VAR 0 4
70269: PPUSH
70270: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70274: LD_VAR 0 1
70278: PPUSH
70279: LD_VAR 0 2
70283: PPUSH
70284: LD_VAR 0 3
70288: PPUSH
70289: CALL_OW 331
// end ;
70293: LD_VAR 0 5
70297: RET
// export function Video ( mode ) ; begin
70298: LD_INT 0
70300: PPUSH
// ingame_video = mode ;
70301: LD_ADDR_OWVAR 52
70305: PUSH
70306: LD_VAR 0 1
70310: ST_TO_ADDR
// interface_hidden = mode ;
70311: LD_ADDR_OWVAR 54
70315: PUSH
70316: LD_VAR 0 1
70320: ST_TO_ADDR
// end ;
70321: LD_VAR 0 2
70325: RET
// export function Join ( array , element ) ; begin
70326: LD_INT 0
70328: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70329: LD_ADDR_VAR 0 3
70333: PUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: LD_VAR 0 1
70343: PUSH
70344: LD_INT 1
70346: PLUS
70347: PPUSH
70348: LD_VAR 0 2
70352: PPUSH
70353: CALL_OW 1
70357: ST_TO_ADDR
// end ;
70358: LD_VAR 0 3
70362: RET
// export function JoinUnion ( array , element ) ; begin
70363: LD_INT 0
70365: PPUSH
// result := array union element ;
70366: LD_ADDR_VAR 0 3
70370: PUSH
70371: LD_VAR 0 1
70375: PUSH
70376: LD_VAR 0 2
70380: UNION
70381: ST_TO_ADDR
// end ;
70382: LD_VAR 0 3
70386: RET
// export function GetBehemoths ( side ) ; begin
70387: LD_INT 0
70389: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70390: LD_ADDR_VAR 0 2
70394: PUSH
70395: LD_INT 22
70397: PUSH
70398: LD_VAR 0 1
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 31
70409: PUSH
70410: LD_INT 25
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PPUSH
70421: CALL_OW 69
70425: ST_TO_ADDR
// end ;
70426: LD_VAR 0 2
70430: RET
// export function Shuffle ( array ) ; var i , index ; begin
70431: LD_INT 0
70433: PPUSH
70434: PPUSH
70435: PPUSH
// result := [ ] ;
70436: LD_ADDR_VAR 0 2
70440: PUSH
70441: EMPTY
70442: ST_TO_ADDR
// if not array then
70443: LD_VAR 0 1
70447: NOT
70448: IFFALSE 70452
// exit ;
70450: GO 70551
// Randomize ;
70452: CALL_OW 10
// for i = array downto 1 do
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: DOUBLE
70462: LD_VAR 0 1
70466: INC
70467: ST_TO_ADDR
70468: LD_INT 1
70470: PUSH
70471: FOR_DOWNTO
70472: IFFALSE 70549
// begin index := rand ( 1 , array ) ;
70474: LD_ADDR_VAR 0 4
70478: PUSH
70479: LD_INT 1
70481: PPUSH
70482: LD_VAR 0 1
70486: PPUSH
70487: CALL_OW 12
70491: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70492: LD_ADDR_VAR 0 2
70496: PUSH
70497: LD_VAR 0 2
70501: PPUSH
70502: LD_VAR 0 2
70506: PUSH
70507: LD_INT 1
70509: PLUS
70510: PPUSH
70511: LD_VAR 0 1
70515: PUSH
70516: LD_VAR 0 4
70520: ARRAY
70521: PPUSH
70522: CALL_OW 2
70526: ST_TO_ADDR
// array := Delete ( array , index ) ;
70527: LD_ADDR_VAR 0 1
70531: PUSH
70532: LD_VAR 0 1
70536: PPUSH
70537: LD_VAR 0 4
70541: PPUSH
70542: CALL_OW 3
70546: ST_TO_ADDR
// end ;
70547: GO 70471
70549: POP
70550: POP
// end ;
70551: LD_VAR 0 2
70555: RET
// export function GetBaseMaterials ( base ) ; begin
70556: LD_INT 0
70558: PPUSH
// result := [ 0 , 0 , 0 ] ;
70559: LD_ADDR_VAR 0 2
70563: PUSH
70564: LD_INT 0
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: LD_INT 0
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: LIST
70577: ST_TO_ADDR
// if not base then
70578: LD_VAR 0 1
70582: NOT
70583: IFFALSE 70587
// exit ;
70585: GO 70636
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70587: LD_ADDR_VAR 0 2
70591: PUSH
70592: LD_VAR 0 1
70596: PPUSH
70597: LD_INT 1
70599: PPUSH
70600: CALL_OW 275
70604: PUSH
70605: LD_VAR 0 1
70609: PPUSH
70610: LD_INT 2
70612: PPUSH
70613: CALL_OW 275
70617: PUSH
70618: LD_VAR 0 1
70622: PPUSH
70623: LD_INT 3
70625: PPUSH
70626: CALL_OW 275
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: LIST
70635: ST_TO_ADDR
// end ;
70636: LD_VAR 0 2
70640: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70641: LD_INT 0
70643: PPUSH
70644: PPUSH
// result := array ;
70645: LD_ADDR_VAR 0 3
70649: PUSH
70650: LD_VAR 0 1
70654: ST_TO_ADDR
// if size > 0 then
70655: LD_VAR 0 2
70659: PUSH
70660: LD_INT 0
70662: GREATER
70663: IFFALSE 70709
// for i := array downto size do
70665: LD_ADDR_VAR 0 4
70669: PUSH
70670: DOUBLE
70671: LD_VAR 0 1
70675: INC
70676: ST_TO_ADDR
70677: LD_VAR 0 2
70681: PUSH
70682: FOR_DOWNTO
70683: IFFALSE 70707
// result := Delete ( result , result ) ;
70685: LD_ADDR_VAR 0 3
70689: PUSH
70690: LD_VAR 0 3
70694: PPUSH
70695: LD_VAR 0 3
70699: PPUSH
70700: CALL_OW 3
70704: ST_TO_ADDR
70705: GO 70682
70707: POP
70708: POP
// end ;
70709: LD_VAR 0 3
70713: RET
// export function ComExit ( unit ) ; var tmp ; begin
70714: LD_INT 0
70716: PPUSH
70717: PPUSH
// if not IsInUnit ( unit ) then
70718: LD_VAR 0 1
70722: PPUSH
70723: CALL_OW 310
70727: NOT
70728: IFFALSE 70732
// exit ;
70730: GO 70792
// tmp := IsInUnit ( unit ) ;
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: CALL_OW 310
70746: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70747: LD_VAR 0 3
70751: PPUSH
70752: CALL_OW 247
70756: PUSH
70757: LD_INT 2
70759: EQUAL
70760: IFFALSE 70773
// ComExitVehicle ( unit ) else
70762: LD_VAR 0 1
70766: PPUSH
70767: CALL_OW 121
70771: GO 70782
// ComExitBuilding ( unit ) ;
70773: LD_VAR 0 1
70777: PPUSH
70778: CALL_OW 122
// result := tmp ;
70782: LD_ADDR_VAR 0 2
70786: PUSH
70787: LD_VAR 0 3
70791: ST_TO_ADDR
// end ;
70792: LD_VAR 0 2
70796: RET
// export function ComExitAll ( units ) ; var i ; begin
70797: LD_INT 0
70799: PPUSH
70800: PPUSH
// if not units then
70801: LD_VAR 0 1
70805: NOT
70806: IFFALSE 70810
// exit ;
70808: GO 70836
// for i in units do
70810: LD_ADDR_VAR 0 3
70814: PUSH
70815: LD_VAR 0 1
70819: PUSH
70820: FOR_IN
70821: IFFALSE 70834
// ComExit ( i ) ;
70823: LD_VAR 0 3
70827: PPUSH
70828: CALL 70714 0 1
70832: GO 70820
70834: POP
70835: POP
// end ;
70836: LD_VAR 0 2
70840: RET
// export function ResetHc ; begin
70841: LD_INT 0
70843: PPUSH
// InitHc ;
70844: CALL_OW 19
// hc_importance := 0 ;
70848: LD_ADDR_OWVAR 32
70852: PUSH
70853: LD_INT 0
70855: ST_TO_ADDR
// end ;
70856: LD_VAR 0 1
70860: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70861: LD_INT 0
70863: PPUSH
70864: PPUSH
70865: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70866: LD_ADDR_VAR 0 6
70870: PUSH
70871: LD_VAR 0 1
70875: PUSH
70876: LD_VAR 0 3
70880: PLUS
70881: PUSH
70882: LD_INT 2
70884: DIV
70885: ST_TO_ADDR
// if _x < 0 then
70886: LD_VAR 0 6
70890: PUSH
70891: LD_INT 0
70893: LESS
70894: IFFALSE 70911
// _x := _x * - 1 ;
70896: LD_ADDR_VAR 0 6
70900: PUSH
70901: LD_VAR 0 6
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: MUL
70910: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70911: LD_ADDR_VAR 0 7
70915: PUSH
70916: LD_VAR 0 2
70920: PUSH
70921: LD_VAR 0 4
70925: PLUS
70926: PUSH
70927: LD_INT 2
70929: DIV
70930: ST_TO_ADDR
// if _y < 0 then
70931: LD_VAR 0 7
70935: PUSH
70936: LD_INT 0
70938: LESS
70939: IFFALSE 70956
// _y := _y * - 1 ;
70941: LD_ADDR_VAR 0 7
70945: PUSH
70946: LD_VAR 0 7
70950: PUSH
70951: LD_INT 1
70953: NEG
70954: MUL
70955: ST_TO_ADDR
// result := [ _x , _y ] ;
70956: LD_ADDR_VAR 0 5
70960: PUSH
70961: LD_VAR 0 6
70965: PUSH
70966: LD_VAR 0 7
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: ST_TO_ADDR
// end ;
70975: LD_VAR 0 5
70979: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70980: LD_INT 0
70982: PPUSH
70983: PPUSH
70984: PPUSH
70985: PPUSH
// task := GetTaskList ( unit ) ;
70986: LD_ADDR_VAR 0 7
70990: PUSH
70991: LD_VAR 0 1
70995: PPUSH
70996: CALL_OW 437
71000: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71001: LD_VAR 0 7
71005: NOT
71006: PUSH
71007: LD_VAR 0 1
71011: PPUSH
71012: LD_VAR 0 2
71016: PPUSH
71017: CALL_OW 308
71021: NOT
71022: AND
71023: IFFALSE 71027
// exit ;
71025: GO 71145
// if IsInArea ( unit , area ) then
71027: LD_VAR 0 1
71031: PPUSH
71032: LD_VAR 0 2
71036: PPUSH
71037: CALL_OW 308
71041: IFFALSE 71059
// begin ComMoveToArea ( unit , goAway ) ;
71043: LD_VAR 0 1
71047: PPUSH
71048: LD_VAR 0 3
71052: PPUSH
71053: CALL_OW 113
// exit ;
71057: GO 71145
// end ; if task [ 1 ] [ 1 ] <> M then
71059: LD_VAR 0 7
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PUSH
71068: LD_INT 1
71070: ARRAY
71071: PUSH
71072: LD_STRING M
71074: NONEQUAL
71075: IFFALSE 71079
// exit ;
71077: GO 71145
// x := task [ 1 ] [ 2 ] ;
71079: LD_ADDR_VAR 0 5
71083: PUSH
71084: LD_VAR 0 7
71088: PUSH
71089: LD_INT 1
71091: ARRAY
71092: PUSH
71093: LD_INT 2
71095: ARRAY
71096: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71097: LD_ADDR_VAR 0 6
71101: PUSH
71102: LD_VAR 0 7
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 3
71113: ARRAY
71114: ST_TO_ADDR
// if InArea ( x , y , area ) then
71115: LD_VAR 0 5
71119: PPUSH
71120: LD_VAR 0 6
71124: PPUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: CALL_OW 309
71134: IFFALSE 71145
// ComStop ( unit ) ;
71136: LD_VAR 0 1
71140: PPUSH
71141: CALL_OW 141
// end ;
71145: LD_VAR 0 4
71149: RET
// export function Abs ( value ) ; begin
71150: LD_INT 0
71152: PPUSH
// result := value ;
71153: LD_ADDR_VAR 0 2
71157: PUSH
71158: LD_VAR 0 1
71162: ST_TO_ADDR
// if value < 0 then
71163: LD_VAR 0 1
71167: PUSH
71168: LD_INT 0
71170: LESS
71171: IFFALSE 71188
// result := value * - 1 ;
71173: LD_ADDR_VAR 0 2
71177: PUSH
71178: LD_VAR 0 1
71182: PUSH
71183: LD_INT 1
71185: NEG
71186: MUL
71187: ST_TO_ADDR
// end ;
71188: LD_VAR 0 2
71192: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71193: LD_INT 0
71195: PPUSH
71196: PPUSH
71197: PPUSH
71198: PPUSH
71199: PPUSH
71200: PPUSH
71201: PPUSH
71202: PPUSH
// if not unit or not building then
71203: LD_VAR 0 1
71207: NOT
71208: PUSH
71209: LD_VAR 0 2
71213: NOT
71214: OR
71215: IFFALSE 71219
// exit ;
71217: GO 71445
// x := GetX ( building ) ;
71219: LD_ADDR_VAR 0 4
71223: PUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: CALL_OW 250
71233: ST_TO_ADDR
// y := GetY ( building ) ;
71234: LD_ADDR_VAR 0 6
71238: PUSH
71239: LD_VAR 0 2
71243: PPUSH
71244: CALL_OW 251
71248: ST_TO_ADDR
// d := GetDir ( building ) ;
71249: LD_ADDR_VAR 0 8
71253: PUSH
71254: LD_VAR 0 2
71258: PPUSH
71259: CALL_OW 254
71263: ST_TO_ADDR
// r := 4 ;
71264: LD_ADDR_VAR 0 9
71268: PUSH
71269: LD_INT 4
71271: ST_TO_ADDR
// for i := 1 to 5 do
71272: LD_ADDR_VAR 0 10
71276: PUSH
71277: DOUBLE
71278: LD_INT 1
71280: DEC
71281: ST_TO_ADDR
71282: LD_INT 5
71284: PUSH
71285: FOR_TO
71286: IFFALSE 71443
// begin _x := ShiftX ( x , d , r + i ) ;
71288: LD_ADDR_VAR 0 5
71292: PUSH
71293: LD_VAR 0 4
71297: PPUSH
71298: LD_VAR 0 8
71302: PPUSH
71303: LD_VAR 0 9
71307: PUSH
71308: LD_VAR 0 10
71312: PLUS
71313: PPUSH
71314: CALL_OW 272
71318: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71319: LD_ADDR_VAR 0 7
71323: PUSH
71324: LD_VAR 0 6
71328: PPUSH
71329: LD_VAR 0 8
71333: PPUSH
71334: LD_VAR 0 9
71338: PUSH
71339: LD_VAR 0 10
71343: PLUS
71344: PPUSH
71345: CALL_OW 273
71349: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71350: LD_VAR 0 5
71354: PPUSH
71355: LD_VAR 0 7
71359: PPUSH
71360: CALL_OW 488
71364: PUSH
71365: LD_VAR 0 5
71369: PPUSH
71370: LD_VAR 0 7
71374: PPUSH
71375: CALL_OW 428
71379: PPUSH
71380: CALL_OW 247
71384: PUSH
71385: LD_INT 3
71387: PUSH
71388: LD_INT 2
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: IN
71395: NOT
71396: AND
71397: IFFALSE 71441
// begin ComMoveXY ( unit , _x , _y ) ;
71399: LD_VAR 0 1
71403: PPUSH
71404: LD_VAR 0 5
71408: PPUSH
71409: LD_VAR 0 7
71413: PPUSH
71414: CALL_OW 111
// result := [ _x , _y ] ;
71418: LD_ADDR_VAR 0 3
71422: PUSH
71423: LD_VAR 0 5
71427: PUSH
71428: LD_VAR 0 7
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: ST_TO_ADDR
// exit ;
71437: POP
71438: POP
71439: GO 71445
// end ; end ;
71441: GO 71285
71443: POP
71444: POP
// end ;
71445: LD_VAR 0 3
71449: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71450: LD_INT 0
71452: PPUSH
71453: PPUSH
71454: PPUSH
// result := 0 ;
71455: LD_ADDR_VAR 0 3
71459: PUSH
71460: LD_INT 0
71462: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71463: LD_VAR 0 1
71467: PUSH
71468: LD_INT 0
71470: LESS
71471: PUSH
71472: LD_VAR 0 1
71476: PUSH
71477: LD_INT 8
71479: GREATER
71480: OR
71481: PUSH
71482: LD_VAR 0 2
71486: PUSH
71487: LD_INT 0
71489: LESS
71490: OR
71491: PUSH
71492: LD_VAR 0 2
71496: PUSH
71497: LD_INT 8
71499: GREATER
71500: OR
71501: IFFALSE 71505
// exit ;
71503: GO 71580
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71505: LD_ADDR_VAR 0 4
71509: PUSH
71510: LD_INT 22
71512: PUSH
71513: LD_VAR 0 2
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PPUSH
71522: CALL_OW 69
71526: PUSH
71527: FOR_IN
71528: IFFALSE 71578
// begin un := UnitShoot ( i ) ;
71530: LD_ADDR_VAR 0 5
71534: PUSH
71535: LD_VAR 0 4
71539: PPUSH
71540: CALL_OW 504
71544: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71545: LD_VAR 0 5
71549: PPUSH
71550: CALL_OW 255
71554: PUSH
71555: LD_VAR 0 1
71559: EQUAL
71560: IFFALSE 71576
// begin result := un ;
71562: LD_ADDR_VAR 0 3
71566: PUSH
71567: LD_VAR 0 5
71571: ST_TO_ADDR
// exit ;
71572: POP
71573: POP
71574: GO 71580
// end ; end ;
71576: GO 71527
71578: POP
71579: POP
// end ;
71580: LD_VAR 0 3
71584: RET
// export function GetCargoBay ( units ) ; begin
71585: LD_INT 0
71587: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71588: LD_ADDR_VAR 0 2
71592: PUSH
71593: LD_VAR 0 1
71597: PPUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 34
71603: PUSH
71604: LD_INT 12
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 34
71613: PUSH
71614: LD_INT 51
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 34
71623: PUSH
71624: LD_INT 32
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 34
71633: PUSH
71634: LD_EXP 37
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: PPUSH
71650: CALL_OW 72
71654: ST_TO_ADDR
// end ;
71655: LD_VAR 0 2
71659: RET
// export function Negate ( value ) ; begin
71660: LD_INT 0
71662: PPUSH
// result := not value ;
71663: LD_ADDR_VAR 0 2
71667: PUSH
71668: LD_VAR 0 1
71672: NOT
71673: ST_TO_ADDR
// end ;
71674: LD_VAR 0 2
71678: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
71679: LD_INT 0
71681: PPUSH
// if x1 = x2 then
71682: LD_VAR 0 1
71686: PUSH
71687: LD_VAR 0 3
71691: EQUAL
71692: IFFALSE 71726
// begin if y1 > y2 then
71694: LD_VAR 0 2
71698: PUSH
71699: LD_VAR 0 4
71703: GREATER
71704: IFFALSE 71716
// result := 0 else
71706: LD_ADDR_VAR 0 5
71710: PUSH
71711: LD_INT 0
71713: ST_TO_ADDR
71714: GO 71724
// result := 3 ;
71716: LD_ADDR_VAR 0 5
71720: PUSH
71721: LD_INT 3
71723: ST_TO_ADDR
// exit ;
71724: GO 71812
// end ; if y1 = y2 then
71726: LD_VAR 0 2
71730: PUSH
71731: LD_VAR 0 4
71735: EQUAL
71736: IFFALSE 71770
// begin if x1 > x2 then
71738: LD_VAR 0 1
71742: PUSH
71743: LD_VAR 0 3
71747: GREATER
71748: IFFALSE 71760
// result := 1 else
71750: LD_ADDR_VAR 0 5
71754: PUSH
71755: LD_INT 1
71757: ST_TO_ADDR
71758: GO 71768
// result := 4 ;
71760: LD_ADDR_VAR 0 5
71764: PUSH
71765: LD_INT 4
71767: ST_TO_ADDR
// exit ;
71768: GO 71812
// end ; if x1 > x2 and y1 > y2 then
71770: LD_VAR 0 1
71774: PUSH
71775: LD_VAR 0 3
71779: GREATER
71780: PUSH
71781: LD_VAR 0 2
71785: PUSH
71786: LD_VAR 0 4
71790: GREATER
71791: AND
71792: IFFALSE 71804
// result := 2 else
71794: LD_ADDR_VAR 0 5
71798: PUSH
71799: LD_INT 2
71801: ST_TO_ADDR
71802: GO 71812
// result := 5 ;
71804: LD_ADDR_VAR 0 5
71808: PUSH
71809: LD_INT 5
71811: ST_TO_ADDR
// end ;
71812: LD_VAR 0 5
71816: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71817: LD_INT 0
71819: PPUSH
71820: PPUSH
// if not driver or not IsInUnit ( driver ) then
71821: LD_VAR 0 1
71825: NOT
71826: PUSH
71827: LD_VAR 0 1
71831: PPUSH
71832: CALL_OW 310
71836: NOT
71837: OR
71838: IFFALSE 71842
// exit ;
71840: GO 71932
// vehicle := IsInUnit ( driver ) ;
71842: LD_ADDR_VAR 0 3
71846: PUSH
71847: LD_VAR 0 1
71851: PPUSH
71852: CALL_OW 310
71856: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71857: LD_VAR 0 1
71861: PPUSH
71862: LD_STRING \
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: LD_INT 0
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: PUSH
71892: LD_STRING E
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: LD_VAR 0 3
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: LD_INT 0
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PPUSH
71928: CALL_OW 446
// end ;
71932: LD_VAR 0 2
71936: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71937: LD_INT 0
71939: PPUSH
71940: PPUSH
// if not driver or not IsInUnit ( driver ) then
71941: LD_VAR 0 1
71945: NOT
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: CALL_OW 310
71956: NOT
71957: OR
71958: IFFALSE 71962
// exit ;
71960: GO 72076
// vehicle := IsInUnit ( driver ) ;
71962: LD_ADDR_VAR 0 3
71966: PUSH
71967: LD_VAR 0 1
71971: PPUSH
71972: CALL_OW 310
71976: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71977: LD_VAR 0 1
71981: PPUSH
71982: LD_STRING \
71984: PUSH
71985: LD_INT 0
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: LD_INT 0
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: PUSH
72012: LD_STRING E
72014: PUSH
72015: LD_INT 0
72017: PUSH
72018: LD_INT 0
72020: PUSH
72021: LD_VAR 0 3
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: LD_INT 0
72031: PUSH
72032: LD_INT 0
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PPUSH
72048: CALL_OW 447
// display_strings := [ driver , GetTaskList ( driver ) ] ;
72052: LD_ADDR_OWVAR 47
72056: PUSH
72057: LD_VAR 0 1
72061: PUSH
72062: LD_VAR 0 1
72066: PPUSH
72067: CALL_OW 437
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: ST_TO_ADDR
// end ;
72076: LD_VAR 0 2
72080: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72081: LD_INT 0
72083: PPUSH
72084: PPUSH
72085: PPUSH
// tmp := [ ] ;
72086: LD_ADDR_VAR 0 5
72090: PUSH
72091: EMPTY
72092: ST_TO_ADDR
// for i in units do
72093: LD_ADDR_VAR 0 4
72097: PUSH
72098: LD_VAR 0 1
72102: PUSH
72103: FOR_IN
72104: IFFALSE 72142
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72106: LD_ADDR_VAR 0 5
72110: PUSH
72111: LD_VAR 0 5
72115: PPUSH
72116: LD_VAR 0 5
72120: PUSH
72121: LD_INT 1
72123: PLUS
72124: PPUSH
72125: LD_VAR 0 4
72129: PPUSH
72130: CALL_OW 256
72134: PPUSH
72135: CALL_OW 2
72139: ST_TO_ADDR
72140: GO 72103
72142: POP
72143: POP
// if not tmp then
72144: LD_VAR 0 5
72148: NOT
72149: IFFALSE 72153
// exit ;
72151: GO 72201
// if asc then
72153: LD_VAR 0 2
72157: IFFALSE 72181
// result := SortListByListAsc ( units , tmp ) else
72159: LD_ADDR_VAR 0 3
72163: PUSH
72164: LD_VAR 0 1
72168: PPUSH
72169: LD_VAR 0 5
72173: PPUSH
72174: CALL_OW 76
72178: ST_TO_ADDR
72179: GO 72201
// result := SortListByListDesc ( units , tmp ) ;
72181: LD_ADDR_VAR 0 3
72185: PUSH
72186: LD_VAR 0 1
72190: PPUSH
72191: LD_VAR 0 5
72195: PPUSH
72196: CALL_OW 77
72200: ST_TO_ADDR
// end ;
72201: LD_VAR 0 3
72205: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72206: LD_INT 0
72208: PPUSH
72209: PPUSH
// task := GetTaskList ( mech ) ;
72210: LD_ADDR_VAR 0 4
72214: PUSH
72215: LD_VAR 0 1
72219: PPUSH
72220: CALL_OW 437
72224: ST_TO_ADDR
// if not task then
72225: LD_VAR 0 4
72229: NOT
72230: IFFALSE 72234
// exit ;
72232: GO 72276
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72234: LD_ADDR_VAR 0 3
72238: PUSH
72239: LD_VAR 0 4
72243: PUSH
72244: LD_INT 1
72246: ARRAY
72247: PUSH
72248: LD_INT 1
72250: ARRAY
72251: PUSH
72252: LD_STRING r
72254: EQUAL
72255: PUSH
72256: LD_VAR 0 4
72260: PUSH
72261: LD_INT 1
72263: ARRAY
72264: PUSH
72265: LD_INT 4
72267: ARRAY
72268: PUSH
72269: LD_VAR 0 2
72273: EQUAL
72274: AND
72275: ST_TO_ADDR
// end ;
72276: LD_VAR 0 3
72280: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72281: LD_INT 0
72283: PPUSH
// SetDir ( unit , d ) ;
72284: LD_VAR 0 1
72288: PPUSH
72289: LD_VAR 0 4
72293: PPUSH
72294: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72298: LD_VAR 0 1
72302: PPUSH
72303: LD_VAR 0 2
72307: PPUSH
72308: LD_VAR 0 3
72312: PPUSH
72313: LD_VAR 0 5
72317: PPUSH
72318: CALL_OW 48
// end ;
72322: LD_VAR 0 6
72326: RET
// export function ToNaturalNumber ( number ) ; begin
72327: LD_INT 0
72329: PPUSH
// result := number div 1 ;
72330: LD_ADDR_VAR 0 2
72334: PUSH
72335: LD_VAR 0 1
72339: PUSH
72340: LD_INT 1
72342: DIV
72343: ST_TO_ADDR
// if number < 0 then
72344: LD_VAR 0 1
72348: PUSH
72349: LD_INT 0
72351: LESS
72352: IFFALSE 72362
// result := 0 ;
72354: LD_ADDR_VAR 0 2
72358: PUSH
72359: LD_INT 0
72361: ST_TO_ADDR
// end ;
72362: LD_VAR 0 2
72366: RET
// export function SortByClass ( units , class ) ; var un ; begin
72367: LD_INT 0
72369: PPUSH
72370: PPUSH
// if not units or not class then
72371: LD_VAR 0 1
72375: NOT
72376: PUSH
72377: LD_VAR 0 2
72381: NOT
72382: OR
72383: IFFALSE 72387
// exit ;
72385: GO 72482
// result := [ ] ;
72387: LD_ADDR_VAR 0 3
72391: PUSH
72392: EMPTY
72393: ST_TO_ADDR
// for un in units do
72394: LD_ADDR_VAR 0 4
72398: PUSH
72399: LD_VAR 0 1
72403: PUSH
72404: FOR_IN
72405: IFFALSE 72480
// if GetClass ( un ) = class then
72407: LD_VAR 0 4
72411: PPUSH
72412: CALL_OW 257
72416: PUSH
72417: LD_VAR 0 2
72421: EQUAL
72422: IFFALSE 72449
// result := Insert ( result , 1 , un ) else
72424: LD_ADDR_VAR 0 3
72428: PUSH
72429: LD_VAR 0 3
72433: PPUSH
72434: LD_INT 1
72436: PPUSH
72437: LD_VAR 0 4
72441: PPUSH
72442: CALL_OW 2
72446: ST_TO_ADDR
72447: GO 72478
// result := Replace ( result , result + 1 , un ) ;
72449: LD_ADDR_VAR 0 3
72453: PUSH
72454: LD_VAR 0 3
72458: PPUSH
72459: LD_VAR 0 3
72463: PUSH
72464: LD_INT 1
72466: PLUS
72467: PPUSH
72468: LD_VAR 0 4
72472: PPUSH
72473: CALL_OW 1
72477: ST_TO_ADDR
72478: GO 72404
72480: POP
72481: POP
// end ; end_of_file
72482: LD_VAR 0 3
72486: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72487: LD_VAR 0 1
72491: PUSH
72492: LD_INT 200
72494: DOUBLE
72495: GREATEREQUAL
72496: IFFALSE 72504
72498: LD_INT 299
72500: DOUBLE
72501: LESSEQUAL
72502: IFTRUE 72506
72504: GO 72538
72506: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72507: LD_VAR 0 1
72511: PPUSH
72512: LD_VAR 0 2
72516: PPUSH
72517: LD_VAR 0 3
72521: PPUSH
72522: LD_VAR 0 4
72526: PPUSH
72527: LD_VAR 0 5
72531: PPUSH
72532: CALL 29706 0 5
72536: GO 72615
72538: LD_INT 300
72540: DOUBLE
72541: GREATEREQUAL
72542: IFFALSE 72550
72544: LD_INT 399
72546: DOUBLE
72547: LESSEQUAL
72548: IFTRUE 72552
72550: GO 72614
72552: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72553: LD_VAR 0 1
72557: PPUSH
72558: LD_VAR 0 2
72562: PPUSH
72563: LD_VAR 0 3
72567: PPUSH
72568: LD_VAR 0 4
72572: PPUSH
72573: LD_VAR 0 5
72577: PPUSH
72578: LD_VAR 0 6
72582: PPUSH
72583: LD_VAR 0 7
72587: PPUSH
72588: LD_VAR 0 8
72592: PPUSH
72593: LD_VAR 0 9
72597: PPUSH
72598: LD_VAR 0 10
72602: PPUSH
72603: LD_VAR 0 11
72607: PPUSH
72608: CALL 27594 0 11
72612: GO 72615
72614: POP
// end ;
72615: PPOPN 11
72617: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72618: LD_VAR 0 1
72622: PPUSH
72623: LD_VAR 0 2
72627: PPUSH
72628: LD_VAR 0 3
72632: PPUSH
72633: LD_VAR 0 4
72637: PPUSH
72638: LD_VAR 0 5
72642: PPUSH
72643: CALL 29688 0 5
// end ; end_of_file
72647: PPOPN 5
72649: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72650: LD_VAR 0 1
72654: PPUSH
72655: LD_VAR 0 2
72659: PPUSH
72660: LD_VAR 0 3
72664: PPUSH
72665: LD_VAR 0 4
72669: PPUSH
72670: LD_VAR 0 5
72674: PPUSH
72675: LD_VAR 0 6
72679: PPUSH
72680: CALL 16402 0 6
// end ;
72684: PPOPN 6
72686: END
