// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15305 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76405 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77624 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36767 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36767 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36767 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75759 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32478 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 255
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: IFFALSE 14742
// begin ComMoveXY ( driver , 6 , 10 ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 6
14673: PPUSH
14674: LD_INT 10
14676: PPUSH
14677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14681: LD_INT 35
14683: PPUSH
14684: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 6
14695: PPUSH
14696: LD_INT 10
14698: PPUSH
14699: CALL_OW 111
// if IsDead ( driver ) then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14716
// exit ;
14714: GO 14742
// until IsAt ( driver , 6 , 10 ) ;
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 6
14723: PPUSH
14724: LD_INT 10
14726: PPUSH
14727: CALL_OW 307
14731: IFFALSE 14681
// RemoveUnit ( driver ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 64
// end ; end ;
14742: PPOPN 4
14744: END
// on Command ( cmd ) do var i , j , tmp ;
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin SOS_Command ( cmd ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 32582 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14915
// begin if GetTaskList ( i ) then
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 437
14805: IFFALSE 14913
// begin for j = 1 to GetTaskList ( i ) do
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: DOUBLE
14813: LD_INT 1
14815: DEC
14816: ST_TO_ADDR
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 437
14826: PUSH
14827: FOR_TO
14828: IFFALSE 14911
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: CALL_OW 437
14844: PUSH
14845: LD_VAR 0 3
14849: ARRAY
14850: PUSH
14851: LD_INT 4
14853: ARRAY
14854: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14855: LD_VAR 0 4
14859: PPUSH
14860: CALL_OW 255
14864: PUSH
14865: LD_INT 3
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 4
14873: PPUSH
14874: CALL_OW 247
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: AND
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 51
14896: EQUAL
14897: AND
14898: IFFALSE 14909
// ComStop ( i ) ;
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 141
// end ;
14909: GO 14827
14911: POP
14912: POP
// end ; end ;
14913: GO 14793
14915: POP
14916: POP
// end ;
14917: PPOPN 4
14919: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_EXP 8
14929: EQUAL
14930: PUSH
14931: LD_EXP 21
14935: PUSH
14936: LD_INT 4
14938: NONEQUAL
14939: AND
14940: IFFALSE 15092
// begin if IsOk ( Mikhail ) then
14942: LD_EXP 8
14946: PPUSH
14947: CALL_OW 302
14951: IFFALSE 14959
// AskMikhail else
14953: CALL 7486 0 0
14957: GO 15092
// if IsOk ( llab1 ) then
14959: LD_INT 23
14961: PPUSH
14962: CALL_OW 302
14966: IFFALSE 15055
// begin InGameOn ;
14968: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14972: LD_EXP 8
14976: PPUSH
14977: LD_INT 6
14979: PPUSH
14980: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14984: LD_INT 23
14986: PPUSH
14987: LD_INT 6
14989: PPUSH
14990: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14994: LD_EXP 8
14998: PPUSH
14999: LD_INT 23
15001: PPUSH
15002: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15006: LD_INT 35
15008: PPUSH
15009: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15013: LD_EXP 8
15017: PPUSH
15018: CALL_OW 310
15022: PUSH
15023: LD_INT 23
15025: EQUAL
15026: PUSH
15027: LD_EXP 8
15031: PPUSH
15032: CALL_OW 301
15036: OR
15037: IFFALSE 15006
// SetSide ( llab1 , 1 ) ;
15039: LD_INT 23
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 235
// InGameOff ;
15049: CALL_OW 9
// end else
15053: GO 15092
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15055: LD_INT 3
15057: PPUSH
15058: LD_INT 6
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15071: LD_EXP 8
15075: PPUSH
15076: LD_INT 6
15078: PPUSH
15079: CALL_OW 235
// ComHold ( Mikhail ) ;
15083: LD_EXP 8
15087: PPUSH
15088: CALL_OW 140
// end ; end ; end ;
15092: PPOPN 2
15094: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL 32598 0 2
// end ;
15109: PPOPN 2
15111: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15112: LD_EXP 8
15116: PPUSH
15117: CALL_OW 257
15121: PUSH
15122: LD_INT 3
15124: NONEQUAL
15125: IFFALSE 15143
15127: GO 15129
15129: DISABLE
// begin enable ;
15130: ENABLE
// SetClass ( Mikhail , 3 ) ;
15131: LD_EXP 8
15135: PPUSH
15136: LD_INT 3
15138: PPUSH
15139: CALL_OW 336
// end ; end_of_file
15143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15144: LD_INT 22
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 4
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: PUSH
15228: LD_INT 0
15230: EQUAL
15231: AND
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: AND
15245: PUSH
15246: LD_INT 10
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_INT 3
15256: EQUAL
15257: AND
15258: IFFALSE 15270
15260: GO 15262
15262: DISABLE
// YouLost ( Engineer ) ;
15263: LD_STRING Engineer
15265: PPUSH
15266: CALL_OW 104
15270: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 3
15281: EQUAL
15282: PUSH
15283: LD_EXP 27
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15304
15294: GO 15296
15296: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15297: LD_STRING DepotCaptured
15299: PPUSH
15300: CALL_OW 104
15304: END
// export function PrepareTigers ; var i , un ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_INT 2
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: LD_INT 4
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_OWVAR 67
15342: ARRAY
15343: PUSH
15344: FOR_TO
15345: IFFALSE 15460
// begin uc_side := 0 ;
15347: LD_ADDR_OWVAR 20
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// uc_nation := nation_nature ;
15355: LD_ADDR_OWVAR 21
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// hc_sex := sex_male ;
15363: LD_ADDR_OWVAR 27
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// hc_class := class_tiger ;
15371: LD_ADDR_OWVAR 28
15375: PUSH
15376: LD_INT 14
15378: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15379: LD_ADDR_OWVAR 31
15383: PUSH
15384: LD_EXP 14
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 40
15414: PUSH
15415: LD_INT 45
15417: PUSH
15418: LD_INT 50
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: ST_TO_ADDR
// un = CreateHuman ;
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 27
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 49
// end ;
15458: GO 15344
15460: POP
15461: POP
// end ; end_of_file
15462: LD_VAR 0 1
15466: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 255
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: PUSH
15479: LD_INT 10
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_EXP 20
15496: PUSH
15497: LD_INT 1
15499: EQUAL
15500: AND
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 3
15534: PUSH
15535: LD_INT 58
15537: PUSH
15538: EMPTY
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PUSH
15556: LD_INT 0
15558: EQUAL
15559: AND
15560: IFFALSE 15651
15562: GO 15564
15564: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15565: LD_INT 9450
15567: PUSH
15568: LD_INT 8400
15570: PUSH
15571: LD_INT 6300
15573: PUSH
15574: LD_INT 6300
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: PUSH
15583: LD_OWVAR 67
15587: ARRAY
15588: PPUSH
15589: CALL_OW 67
// if cargoEscape then
15593: LD_EXP 20
15597: IFFALSE 15651
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15599: LD_EXP 9
15603: PPUSH
15604: LD_STRING D6-Pow-1
15606: PPUSH
15607: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15611: LD_EXP 1
15615: PPUSH
15616: LD_STRING D6-JMM-1
15618: PPUSH
15619: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15623: LD_EXP 9
15627: PPUSH
15628: LD_STRING D6-Pow-2
15630: PPUSH
15631: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_STRING D6-JMM-2
15642: PPUSH
15643: CALL_OW 88
// FinishMission ;
15647: CALL 15867 0 0
// end ; end ;
15651: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 255
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: PUSH
15664: LD_INT 10
15666: PPUSH
15667: CALL_OW 255
15671: PUSH
15672: LD_INT 1
15674: EQUAL
15675: AND
15676: PUSH
15677: LD_EXP 20
15681: PUSH
15682: LD_INT 1
15684: GREATER
15685: AND
15686: IFFALSE 15761
15688: GO 15690
15690: DISABLE
15691: LD_INT 0
15693: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15694: LD_INT 11550
15696: PUSH
15697: LD_INT 10500
15699: PUSH
15700: LD_INT 9450
15702: PUSH
15703: LD_INT 8400
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_OWVAR 67
15716: ARRAY
15717: PPUSH
15718: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: LD_OWVAR 67
15744: ARRAY
15745: PPUSH
15746: LD_INT 13
15748: PPUSH
15749: CALL 13342 0 2
// lastBattle = 1 ;
15753: LD_ADDR_EXP 27
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// end ;
15761: PPOPN 1
15763: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15764: LD_EXP 27
15768: PUSH
15769: LD_INT 1
15771: EQUAL
15772: PUSH
15773: LD_INT 26
15775: PPUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 70
15804: PUSH
15805: LD_INT 0
15807: EQUAL
15808: AND
15809: IFFALSE 15866
15811: GO 15813
15813: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15814: LD_EXP 9
15818: PPUSH
15819: LD_STRING D6-Pow-1
15821: PPUSH
15822: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15826: LD_EXP 1
15830: PPUSH
15831: LD_STRING D6-JMM-1
15833: PPUSH
15834: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15838: LD_EXP 9
15842: PPUSH
15843: LD_STRING D6-Pow-2
15845: PPUSH
15846: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15850: LD_EXP 1
15854: PPUSH
15855: LD_STRING D6-JMM-2
15857: PPUSH
15858: CALL_OW 88
// FinishMission ;
15862: CALL 15867 0 0
// end ;
15866: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// if tick <= 18 18$00 then
15874: LD_OWVAR 1
15878: PUSH
15879: LD_INT 37800
15881: LESSEQUAL
15882: IFFALSE 15891
// SetAchievement ( ACH_ASPEED_2 ) ;
15884: LD_STRING ACH_ASPEED_2
15886: PPUSH
15887: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 24
15918: PUSH
15919: LD_INT 251
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 69
15935: ST_TO_ADDR
// if tmp then
15936: LD_VAR 0 2
15940: IFFALSE 15954
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_STRING 02_tanks_1
15949: PPUSH
15950: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15954: LD_EXP 21
15958: PUSH
15959: LD_INT 1
15961: EQUAL
15962: PUSH
15963: LD_EXP 8
15967: PPUSH
15968: CALL_OW 300
15972: AND
15973: IFFALSE 15987
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15975: LD_EXP 21
15979: PPUSH
15980: LD_STRING 02_mikhailStatus_1
15982: PPUSH
15983: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 274
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 275
16002: PPUSH
16003: LD_STRING 02_resources_4
16005: PPUSH
16006: CALL_OW 39
// m1 := false ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// m2 := false ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// m3 := false ;
16026: LD_ADDR_VAR 0 5
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 274
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 275
16049: PUSH
16050: LD_INT 200
16052: GREATEREQUAL
16053: IFFALSE 16075
// begin AddMedal ( Cans , 1 ) ;
16055: LD_STRING Cans
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 101
// m1 := true ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// end else
16073: GO 16086
// begin AddMedal ( Cans , - 1 ) ;
16075: LD_STRING Cans
16077: PPUSH
16078: LD_INT 1
16080: NEG
16081: PPUSH
16082: CALL_OW 101
// end ; if deadsCounter < 2 then
16086: LD_EXP 31
16090: PUSH
16091: LD_INT 2
16093: LESS
16094: IFFALSE 16116
// begin AddMedal ( Deaths , 1 ) ;
16096: LD_STRING Deaths
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 101
// m2 := true ;
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end else
16114: GO 16127
// begin AddMedal ( Deaths , - 1 ) ;
16116: LD_STRING Deaths
16118: PPUSH
16119: LD_INT 1
16121: NEG
16122: PPUSH
16123: CALL_OW 101
// end ; if mikhailStatus = 0 then
16127: LD_EXP 21
16131: PUSH
16132: LD_INT 0
16134: EQUAL
16135: IFFALSE 16148
// AddMedal ( Prisoner , - 1 ) ;
16137: LD_STRING Prisoner
16139: PPUSH
16140: LD_INT 1
16142: NEG
16143: PPUSH
16144: CALL_OW 101
// if mikhailStatus = 1 then
16148: LD_EXP 21
16152: PUSH
16153: LD_INT 1
16155: EQUAL
16156: IFFALSE 16176
// begin AddMedal ( Prisoner , 1 ) ;
16158: LD_STRING Prisoner
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 101
// m3 := true ;
16168: LD_ADDR_VAR 0 5
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16176: LD_EXP 21
16180: PUSH
16181: LD_INT 2
16183: EQUAL
16184: IFFALSE 16204
// begin AddMedal ( Prisoner , 2 ) ;
16186: LD_STRING Prisoner
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 101
// m3 := true ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16204: LD_EXP 21
16208: PUSH
16209: LD_INT 3
16211: EQUAL
16212: IFFALSE 16225
// AddMedal ( Prisoner , - 2 ) ;
16214: LD_STRING Prisoner
16216: PPUSH
16217: LD_INT 2
16219: NEG
16220: PPUSH
16221: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: GREATEREQUAL
16233: PUSH
16234: LD_VAR 0 3
16238: AND
16239: PUSH
16240: LD_VAR 0 4
16244: AND
16245: PUSH
16246: LD_VAR 0 5
16250: AND
16251: IFFALSE 16263
// SetAchievementEX ( ACH_AMER , 2 ) ;
16253: LD_STRING ACH_AMER
16255: PPUSH
16256: LD_INT 2
16258: PPUSH
16259: CALL_OW 564
// GiveMedals ( MAIN ) ;
16263: LD_STRING MAIN
16265: PPUSH
16266: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: PPUSH
16310: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16314: LD_EXP 1
16318: PPUSH
16319: LD_EXP 33
16323: PUSH
16324: LD_STRING JMM
16326: STR
16327: PPUSH
16328: CALL_OW 38
// if IsOK ( Bobby ) then
16332: LD_EXP 2
16336: PPUSH
16337: CALL_OW 302
16341: IFFALSE 16361
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16343: LD_EXP 2
16347: PPUSH
16348: LD_EXP 33
16352: PUSH
16353: LD_STRING Bobby
16355: STR
16356: PPUSH
16357: CALL_OW 38
// if IsOK ( Cyrus ) then
16361: LD_EXP 3
16365: PPUSH
16366: CALL_OW 302
16370: IFFALSE 16390
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16372: LD_EXP 3
16376: PPUSH
16377: LD_EXP 33
16381: PUSH
16382: LD_STRING Cyrus
16384: STR
16385: PPUSH
16386: CALL_OW 38
// if IsOK ( Lisa ) then
16390: LD_EXP 4
16394: PPUSH
16395: CALL_OW 302
16399: IFFALSE 16426
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16401: LD_STRING enableBioCharacter(BIO_LISA)
16403: PPUSH
16404: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16408: LD_EXP 4
16412: PPUSH
16413: LD_EXP 33
16417: PUSH
16418: LD_STRING Lisa
16420: STR
16421: PPUSH
16422: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16426: LD_EXP 5
16430: PPUSH
16431: CALL_OW 302
16435: IFFALSE 16462
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16437: LD_STRING enableBioCharacter(BIO_KHAT)
16439: PPUSH
16440: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16444: LD_EXP 5
16448: PPUSH
16449: LD_EXP 33
16453: PUSH
16454: LD_STRING Khatam
16456: STR
16457: PPUSH
16458: CALL_OW 38
// end ; if IsOK ( Brian ) then
16462: LD_EXP 6
16466: PPUSH
16467: CALL_OW 302
16471: IFFALSE 16491
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16473: LD_EXP 6
16477: PPUSH
16478: LD_EXP 33
16482: PUSH
16483: LD_STRING Brian
16485: STR
16486: PPUSH
16487: CALL_OW 38
// if IsOk ( Jerry ) then
16491: LD_EXP 7
16495: PPUSH
16496: CALL_OW 302
16500: IFFALSE 16520
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16502: LD_EXP 7
16506: PPUSH
16507: LD_EXP 33
16511: PUSH
16512: LD_STRING Jerry
16514: STR
16515: PPUSH
16516: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16520: LD_EXP 21
16524: PUSH
16525: LD_INT 1
16527: EQUAL
16528: PUSH
16529: LD_EXP 8
16533: PPUSH
16534: CALL_OW 255
16538: PUSH
16539: LD_INT 1
16541: EQUAL
16542: AND
16543: PUSH
16544: LD_EXP 8
16548: PPUSH
16549: CALL_OW 302
16553: AND
16554: IFFALSE 16581
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16556: LD_STRING enableBioCharacter(BIO_MICH)
16558: PPUSH
16559: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16563: LD_EXP 8
16567: PPUSH
16568: LD_EXP 33
16572: PUSH
16573: LD_STRING Mikhail
16575: STR
16576: PPUSH
16577: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16581: LD_INT 50
16583: PUSH
16584: EMPTY
16585: LIST
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_EXP 1
16621: PUSH
16622: LD_EXP 2
16626: PUSH
16627: LD_EXP 3
16631: PUSH
16632: LD_EXP 4
16636: PUSH
16637: LD_EXP 5
16641: PUSH
16642: LD_EXP 6
16646: PUSH
16647: LD_EXP 7
16651: PUSH
16652: LD_EXP 8
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: DIFF
16667: PPUSH
16668: LD_STRING 02_other_survivors
16670: PPUSH
16671: CALL_OW 38
// YouWin ;
16675: CALL_OW 103
// end ; end_of_file end_of_file
16679: LD_VAR 0 1
16683: RET
// export globalGameSaveCounter ; every 0 0$1 do
16684: GO 16686
16686: DISABLE
// begin enable ;
16687: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16688: LD_STRING updateTimer(
16690: PUSH
16691: LD_OWVAR 1
16695: STR
16696: PUSH
16697: LD_STRING );
16699: STR
16700: PPUSH
16701: CALL_OW 559
// end ;
16705: END
// every 0 0$1 do
16706: GO 16708
16708: DISABLE
// begin globalGameSaveCounter := 0 ;
16709: LD_ADDR_EXP 36
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16717: LD_STRING setGameSaveCounter(0)
16719: PPUSH
16720: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16724: LD_STRING initStreamRollete();
16726: PPUSH
16727: CALL_OW 559
// InitStreamMode ;
16731: CALL 18057 0 0
// DefineStreamItems ( false ) ;
16735: LD_INT 0
16737: PPUSH
16738: CALL 18521 0 1
// end ;
16742: END
// export function SOS_MapStart ( ) ; begin
16743: LD_INT 0
16745: PPUSH
// if streamModeActive then
16746: LD_EXP 37
16750: IFFALSE 16759
// DefineStreamItems ( true ) ;
16752: LD_INT 1
16754: PPUSH
16755: CALL 18521 0 1
// UpdateLuaVariables ( ) ;
16759: CALL 16776 0 0
// UpdateFactoryWaypoints ( ) ;
16763: CALL 31382 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16767: CALL 31639 0 0
// end ;
16771: LD_VAR 0 1
16775: RET
// function UpdateLuaVariables ( ) ; begin
16776: LD_INT 0
16778: PPUSH
// if globalGameSaveCounter then
16779: LD_EXP 36
16783: IFFALSE 16817
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16785: LD_ADDR_EXP 36
16789: PUSH
16790: LD_EXP 36
16794: PPUSH
16795: CALL 75420 0 1
16799: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16800: LD_STRING setGameSaveCounter(
16802: PUSH
16803: LD_EXP 36
16807: STR
16808: PUSH
16809: LD_STRING )
16811: STR
16812: PPUSH
16813: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16817: LD_STRING setGameDifficulty(
16819: PUSH
16820: LD_OWVAR 67
16824: STR
16825: PUSH
16826: LD_STRING )
16828: STR
16829: PPUSH
16830: CALL_OW 559
// end ;
16834: LD_VAR 0 1
16838: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16839: LD_INT 0
16841: PPUSH
// if p2 = stream_mode then
16842: LD_VAR 0 2
16846: PUSH
16847: LD_INT 100
16849: EQUAL
16850: IFFALSE 17853
// begin if not StreamModeActive then
16852: LD_EXP 37
16856: NOT
16857: IFFALSE 16867
// StreamModeActive := true ;
16859: LD_ADDR_EXP 37
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 0 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 0
16874: EQUAL
16875: IFFALSE 16881
// InitStreamMode ;
16877: CALL 18057 0 0
// if p3 = 1 then
16881: LD_VAR 0 3
16885: PUSH
16886: LD_INT 1
16888: EQUAL
16889: IFFALSE 16899
// sRocket := true ;
16891: LD_ADDR_EXP 42
16895: PUSH
16896: LD_INT 1
16898: ST_TO_ADDR
// if p3 = 2 then
16899: LD_VAR 0 3
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: IFFALSE 16917
// sSpeed := true ;
16909: LD_ADDR_EXP 41
16913: PUSH
16914: LD_INT 1
16916: ST_TO_ADDR
// if p3 = 3 then
16917: LD_VAR 0 3
16921: PUSH
16922: LD_INT 3
16924: EQUAL
16925: IFFALSE 16935
// sEngine := true ;
16927: LD_ADDR_EXP 43
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
// if p3 = 4 then
16935: LD_VAR 0 3
16939: PUSH
16940: LD_INT 4
16942: EQUAL
16943: IFFALSE 16953
// sSpec := true ;
16945: LD_ADDR_EXP 40
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// if p3 = 5 then
16953: LD_VAR 0 3
16957: PUSH
16958: LD_INT 5
16960: EQUAL
16961: IFFALSE 16971
// sLevel := true ;
16963: LD_ADDR_EXP 44
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// if p3 = 6 then
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 6
16978: EQUAL
16979: IFFALSE 16989
// sArmoury := true ;
16981: LD_ADDR_EXP 45
16985: PUSH
16986: LD_INT 1
16988: ST_TO_ADDR
// if p3 = 7 then
16989: LD_VAR 0 3
16993: PUSH
16994: LD_INT 7
16996: EQUAL
16997: IFFALSE 17007
// sRadar := true ;
16999: LD_ADDR_EXP 46
17003: PUSH
17004: LD_INT 1
17006: ST_TO_ADDR
// if p3 = 8 then
17007: LD_VAR 0 3
17011: PUSH
17012: LD_INT 8
17014: EQUAL
17015: IFFALSE 17025
// sBunker := true ;
17017: LD_ADDR_EXP 47
17021: PUSH
17022: LD_INT 1
17024: ST_TO_ADDR
// if p3 = 9 then
17025: LD_VAR 0 3
17029: PUSH
17030: LD_INT 9
17032: EQUAL
17033: IFFALSE 17043
// sHack := true ;
17035: LD_ADDR_EXP 48
17039: PUSH
17040: LD_INT 1
17042: ST_TO_ADDR
// if p3 = 10 then
17043: LD_VAR 0 3
17047: PUSH
17048: LD_INT 10
17050: EQUAL
17051: IFFALSE 17061
// sFire := true ;
17053: LD_ADDR_EXP 49
17057: PUSH
17058: LD_INT 1
17060: ST_TO_ADDR
// if p3 = 11 then
17061: LD_VAR 0 3
17065: PUSH
17066: LD_INT 11
17068: EQUAL
17069: IFFALSE 17079
// sRefresh := true ;
17071: LD_ADDR_EXP 50
17075: PUSH
17076: LD_INT 1
17078: ST_TO_ADDR
// if p3 = 12 then
17079: LD_VAR 0 3
17083: PUSH
17084: LD_INT 12
17086: EQUAL
17087: IFFALSE 17097
// sExp := true ;
17089: LD_ADDR_EXP 51
17093: PUSH
17094: LD_INT 1
17096: ST_TO_ADDR
// if p3 = 13 then
17097: LD_VAR 0 3
17101: PUSH
17102: LD_INT 13
17104: EQUAL
17105: IFFALSE 17115
// sDepot := true ;
17107: LD_ADDR_EXP 52
17111: PUSH
17112: LD_INT 1
17114: ST_TO_ADDR
// if p3 = 14 then
17115: LD_VAR 0 3
17119: PUSH
17120: LD_INT 14
17122: EQUAL
17123: IFFALSE 17133
// sFlag := true ;
17125: LD_ADDR_EXP 53
17129: PUSH
17130: LD_INT 1
17132: ST_TO_ADDR
// if p3 = 15 then
17133: LD_VAR 0 3
17137: PUSH
17138: LD_INT 15
17140: EQUAL
17141: IFFALSE 17151
// sKamikadze := true ;
17143: LD_ADDR_EXP 61
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// if p3 = 16 then
17151: LD_VAR 0 3
17155: PUSH
17156: LD_INT 16
17158: EQUAL
17159: IFFALSE 17169
// sTroll := true ;
17161: LD_ADDR_EXP 62
17165: PUSH
17166: LD_INT 1
17168: ST_TO_ADDR
// if p3 = 17 then
17169: LD_VAR 0 3
17173: PUSH
17174: LD_INT 17
17176: EQUAL
17177: IFFALSE 17187
// sSlow := true ;
17179: LD_ADDR_EXP 63
17183: PUSH
17184: LD_INT 1
17186: ST_TO_ADDR
// if p3 = 18 then
17187: LD_VAR 0 3
17191: PUSH
17192: LD_INT 18
17194: EQUAL
17195: IFFALSE 17205
// sLack := true ;
17197: LD_ADDR_EXP 64
17201: PUSH
17202: LD_INT 1
17204: ST_TO_ADDR
// if p3 = 19 then
17205: LD_VAR 0 3
17209: PUSH
17210: LD_INT 19
17212: EQUAL
17213: IFFALSE 17223
// sTank := true ;
17215: LD_ADDR_EXP 66
17219: PUSH
17220: LD_INT 1
17222: ST_TO_ADDR
// if p3 = 20 then
17223: LD_VAR 0 3
17227: PUSH
17228: LD_INT 20
17230: EQUAL
17231: IFFALSE 17241
// sRemote := true ;
17233: LD_ADDR_EXP 67
17237: PUSH
17238: LD_INT 1
17240: ST_TO_ADDR
// if p3 = 21 then
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 21
17248: EQUAL
17249: IFFALSE 17259
// sPowell := true ;
17251: LD_ADDR_EXP 68
17255: PUSH
17256: LD_INT 1
17258: ST_TO_ADDR
// if p3 = 22 then
17259: LD_VAR 0 3
17263: PUSH
17264: LD_INT 22
17266: EQUAL
17267: IFFALSE 17277
// sTeleport := true ;
17269: LD_ADDR_EXP 71
17273: PUSH
17274: LD_INT 1
17276: ST_TO_ADDR
// if p3 = 23 then
17277: LD_VAR 0 3
17281: PUSH
17282: LD_INT 23
17284: EQUAL
17285: IFFALSE 17295
// sOilTower := true ;
17287: LD_ADDR_EXP 73
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// if p3 = 24 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_INT 24
17302: EQUAL
17303: IFFALSE 17313
// sShovel := true ;
17305: LD_ADDR_EXP 74
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// if p3 = 25 then
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 25
17320: EQUAL
17321: IFFALSE 17331
// sSheik := true ;
17323: LD_ADDR_EXP 75
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// if p3 = 26 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 26
17338: EQUAL
17339: IFFALSE 17349
// sEarthquake := true ;
17341: LD_ADDR_EXP 77
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// if p3 = 27 then
17349: LD_VAR 0 3
17353: PUSH
17354: LD_INT 27
17356: EQUAL
17357: IFFALSE 17367
// sAI := true ;
17359: LD_ADDR_EXP 78
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// if p3 = 28 then
17367: LD_VAR 0 3
17371: PUSH
17372: LD_INT 28
17374: EQUAL
17375: IFFALSE 17385
// sCargo := true ;
17377: LD_ADDR_EXP 81
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// if p3 = 29 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_INT 29
17392: EQUAL
17393: IFFALSE 17403
// sDLaser := true ;
17395: LD_ADDR_EXP 82
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// if p3 = 30 then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_INT 30
17410: EQUAL
17411: IFFALSE 17421
// sExchange := true ;
17413: LD_ADDR_EXP 83
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// if p3 = 31 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 31
17428: EQUAL
17429: IFFALSE 17439
// sFac := true ;
17431: LD_ADDR_EXP 84
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if p3 = 32 then
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 32
17446: EQUAL
17447: IFFALSE 17457
// sPower := true ;
17449: LD_ADDR_EXP 85
17453: PUSH
17454: LD_INT 1
17456: ST_TO_ADDR
// if p3 = 33 then
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 33
17464: EQUAL
17465: IFFALSE 17475
// sRandom := true ;
17467: LD_ADDR_EXP 86
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// if p3 = 34 then
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 34
17482: EQUAL
17483: IFFALSE 17493
// sShield := true ;
17485: LD_ADDR_EXP 87
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// if p3 = 35 then
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 35
17500: EQUAL
17501: IFFALSE 17511
// sTime := true ;
17503: LD_ADDR_EXP 88
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if p3 = 36 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 36
17518: EQUAL
17519: IFFALSE 17529
// sTools := true ;
17521: LD_ADDR_EXP 89
17525: PUSH
17526: LD_INT 1
17528: ST_TO_ADDR
// if p3 = 101 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_INT 101
17536: EQUAL
17537: IFFALSE 17547
// sSold := true ;
17539: LD_ADDR_EXP 54
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if p3 = 102 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 102
17554: EQUAL
17555: IFFALSE 17565
// sDiff := true ;
17557: LD_ADDR_EXP 55
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// if p3 = 103 then
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 103
17572: EQUAL
17573: IFFALSE 17583
// sFog := true ;
17575: LD_ADDR_EXP 58
17579: PUSH
17580: LD_INT 1
17582: ST_TO_ADDR
// if p3 = 104 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 104
17590: EQUAL
17591: IFFALSE 17601
// sReset := true ;
17593: LD_ADDR_EXP 59
17597: PUSH
17598: LD_INT 1
17600: ST_TO_ADDR
// if p3 = 105 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_INT 105
17608: EQUAL
17609: IFFALSE 17619
// sSun := true ;
17611: LD_ADDR_EXP 60
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// if p3 = 106 then
17619: LD_VAR 0 3
17623: PUSH
17624: LD_INT 106
17626: EQUAL
17627: IFFALSE 17637
// sTiger := true ;
17629: LD_ADDR_EXP 56
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// if p3 = 107 then
17637: LD_VAR 0 3
17641: PUSH
17642: LD_INT 107
17644: EQUAL
17645: IFFALSE 17655
// sBomb := true ;
17647: LD_ADDR_EXP 57
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// if p3 = 108 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 108
17662: EQUAL
17663: IFFALSE 17673
// sWound := true ;
17665: LD_ADDR_EXP 65
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// if p3 = 109 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 109
17680: EQUAL
17681: IFFALSE 17691
// sBetray := true ;
17683: LD_ADDR_EXP 69
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// if p3 = 110 then
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 110
17698: EQUAL
17699: IFFALSE 17709
// sContamin := true ;
17701: LD_ADDR_EXP 70
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// if p3 = 111 then
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 111
17716: EQUAL
17717: IFFALSE 17727
// sOil := true ;
17719: LD_ADDR_EXP 72
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// if p3 = 112 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 112
17734: EQUAL
17735: IFFALSE 17745
// sStu := true ;
17737: LD_ADDR_EXP 76
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// if p3 = 113 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 113
17752: EQUAL
17753: IFFALSE 17763
// sBazooka := true ;
17755: LD_ADDR_EXP 79
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
// if p3 = 114 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_INT 114
17770: EQUAL
17771: IFFALSE 17781
// sMortar := true ;
17773: LD_ADDR_EXP 80
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// if p3 = 115 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_INT 115
17788: EQUAL
17789: IFFALSE 17799
// sRanger := true ;
17791: LD_ADDR_EXP 90
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
// if p3 = 116 then
17799: LD_VAR 0 3
17803: PUSH
17804: LD_INT 116
17806: EQUAL
17807: IFFALSE 17817
// sComputer := true ;
17809: LD_ADDR_EXP 91
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// if p3 = 117 then
17817: LD_VAR 0 3
17821: PUSH
17822: LD_INT 117
17824: EQUAL
17825: IFFALSE 17835
// s30 := true ;
17827: LD_ADDR_EXP 92
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// if p3 = 118 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_INT 118
17842: EQUAL
17843: IFFALSE 17853
// s60 := true ;
17845: LD_ADDR_EXP 93
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// end ; if p2 = hack_mode then
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 101
17860: EQUAL
17861: IFFALSE 17989
// begin case p3 of 1 :
17863: LD_VAR 0 3
17867: PUSH
17868: LD_INT 1
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17883
17876: POP
// hHackUnlimitedResources ; 2 :
17877: CALL 30128 0 0
17881: GO 17989
17883: LD_INT 2
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17898
17891: POP
// hHackSetLevel10 ; 3 :
17892: CALL 30261 0 0
17896: GO 17989
17898: LD_INT 3
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17913
17906: POP
// hHackSetLevel10YourUnits ; 4 :
17907: CALL 30346 0 0
17911: GO 17989
17913: LD_INT 4
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 17928
17921: POP
// hHackInvincible ; 5 :
17922: CALL 30794 0 0
17926: GO 17989
17928: LD_INT 5
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17943
17936: POP
// hHackInvisible ; 6 :
17937: CALL 30905 0 0
17941: GO 17989
17943: LD_INT 6
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17958
17951: POP
// hHackChangeYourSide ; 7 :
17952: CALL 30962 0 0
17956: GO 17989
17958: LD_INT 7
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17973
17966: POP
// hHackChangeUnitSide ; 8 :
17967: CALL 31004 0 0
17971: GO 17989
17973: LD_INT 8
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17988
17981: POP
// hHackFog ; end ;
17982: CALL 31105 0 0
17986: GO 17989
17988: POP
// end ; if p2 = game_save_mode then
17989: LD_VAR 0 2
17993: PUSH
17994: LD_INT 102
17996: EQUAL
17997: IFFALSE 18052
// begin if p3 = 1 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18019
// globalGameSaveCounter := p4 ;
18009: LD_ADDR_EXP 36
18013: PUSH
18014: LD_VAR 0 4
18018: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 2
18026: EQUAL
18027: PUSH
18028: LD_EXP 36
18032: AND
18033: IFFALSE 18052
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18035: LD_STRING setGameSaveCounter(
18037: PUSH
18038: LD_EXP 36
18042: STR
18043: PUSH
18044: LD_STRING )
18046: STR
18047: PPUSH
18048: CALL_OW 559
// end ; end ;
18052: LD_VAR 0 7
18056: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18057: LD_INT 0
18059: PPUSH
// streamModeActive := false ;
18060: LD_ADDR_EXP 37
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// normalCounter := 36 ;
18068: LD_ADDR_EXP 38
18072: PUSH
18073: LD_INT 36
18075: ST_TO_ADDR
// hardcoreCounter := 18 ;
18076: LD_ADDR_EXP 39
18080: PUSH
18081: LD_INT 18
18083: ST_TO_ADDR
// sRocket := false ;
18084: LD_ADDR_EXP 42
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sSpeed := false ;
18092: LD_ADDR_EXP 41
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sEngine := false ;
18100: LD_ADDR_EXP 43
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sSpec := false ;
18108: LD_ADDR_EXP 40
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sLevel := false ;
18116: LD_ADDR_EXP 44
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sArmoury := false ;
18124: LD_ADDR_EXP 45
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sRadar := false ;
18132: LD_ADDR_EXP 46
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sBunker := false ;
18140: LD_ADDR_EXP 47
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sHack := false ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sFire := false ;
18156: LD_ADDR_EXP 49
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sRefresh := false ;
18164: LD_ADDR_EXP 50
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sExp := false ;
18172: LD_ADDR_EXP 51
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sDepot := false ;
18180: LD_ADDR_EXP 52
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sFlag := false ;
18188: LD_ADDR_EXP 53
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sKamikadze := false ;
18196: LD_ADDR_EXP 61
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sTroll := false ;
18204: LD_ADDR_EXP 62
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sSlow := false ;
18212: LD_ADDR_EXP 63
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sLack := false ;
18220: LD_ADDR_EXP 64
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sTank := false ;
18228: LD_ADDR_EXP 66
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sRemote := false ;
18236: LD_ADDR_EXP 67
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sPowell := false ;
18244: LD_ADDR_EXP 68
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sTeleport := false ;
18252: LD_ADDR_EXP 71
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sOilTower := false ;
18260: LD_ADDR_EXP 73
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sShovel := false ;
18268: LD_ADDR_EXP 74
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sSheik := false ;
18276: LD_ADDR_EXP 75
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sEarthquake := false ;
18284: LD_ADDR_EXP 77
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sAI := false ;
18292: LD_ADDR_EXP 78
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sCargo := false ;
18300: LD_ADDR_EXP 81
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sDLaser := false ;
18308: LD_ADDR_EXP 82
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sExchange := false ;
18316: LD_ADDR_EXP 83
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sFac := false ;
18324: LD_ADDR_EXP 84
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sPower := false ;
18332: LD_ADDR_EXP 85
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sRandom := false ;
18340: LD_ADDR_EXP 86
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sShield := false ;
18348: LD_ADDR_EXP 87
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sTime := false ;
18356: LD_ADDR_EXP 88
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sTools := false ;
18364: LD_ADDR_EXP 89
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sSold := false ;
18372: LD_ADDR_EXP 54
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sDiff := false ;
18380: LD_ADDR_EXP 55
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sFog := false ;
18388: LD_ADDR_EXP 58
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sReset := false ;
18396: LD_ADDR_EXP 59
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sSun := false ;
18404: LD_ADDR_EXP 60
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sTiger := false ;
18412: LD_ADDR_EXP 56
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sBomb := false ;
18420: LD_ADDR_EXP 57
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sWound := false ;
18428: LD_ADDR_EXP 65
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sBetray := false ;
18436: LD_ADDR_EXP 69
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sContamin := false ;
18444: LD_ADDR_EXP 70
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sOil := false ;
18452: LD_ADDR_EXP 72
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sStu := false ;
18460: LD_ADDR_EXP 76
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sBazooka := false ;
18468: LD_ADDR_EXP 79
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sMortar := false ;
18476: LD_ADDR_EXP 80
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sRanger := false ;
18484: LD_ADDR_EXP 90
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sComputer := false ;
18492: LD_ADDR_EXP 91
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// s30 := false ;
18500: LD_ADDR_EXP 92
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// s60 := false ;
18508: LD_ADDR_EXP 93
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// end ;
18516: LD_VAR 0 1
18520: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
// result := [ ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: EMPTY
18536: ST_TO_ADDR
// if campaign_id = 1 then
18537: LD_OWVAR 69
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: IFFALSE 21711
// begin case mission_number of 1 :
18547: LD_OWVAR 70
18551: PUSH
18552: LD_INT 1
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18636
18560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 23
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 101
18606: PUSH
18607: LD_INT 102
18609: PUSH
18610: LD_INT 106
18612: PUSH
18613: LD_INT 116
18615: PUSH
18616: LD_INT 117
18618: PUSH
18619: LD_INT 118
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 21709
18636: LD_INT 2
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18728
18644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 11
18658: PUSH
18659: LD_INT 12
18661: PUSH
18662: LD_INT 15
18664: PUSH
18665: LD_INT 16
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 26
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 108
18702: PUSH
18703: LD_INT 116
18705: PUSH
18706: LD_INT 117
18708: PUSH
18709: LD_INT 118
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: ST_TO_ADDR
18726: GO 21709
18728: LD_INT 3
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18824
18736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 4
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: LD_INT 11
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: LD_INT 15
18759: PUSH
18760: LD_INT 16
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_INT 26
18768: PUSH
18769: LD_INT 36
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 101
18786: PUSH
18787: LD_INT 102
18789: PUSH
18790: LD_INT 105
18792: PUSH
18793: LD_INT 106
18795: PUSH
18796: LD_INT 108
18798: PUSH
18799: LD_INT 116
18801: PUSH
18802: LD_INT 117
18804: PUSH
18805: LD_INT 118
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: ST_TO_ADDR
18822: GO 21709
18824: LD_INT 4
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18928
18832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: LD_INT 8
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 15
18858: PUSH
18859: LD_INT 16
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 23
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: LD_INT 36
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 101
18890: PUSH
18891: LD_INT 102
18893: PUSH
18894: LD_INT 105
18896: PUSH
18897: LD_INT 106
18899: PUSH
18900: LD_INT 108
18902: PUSH
18903: LD_INT 116
18905: PUSH
18906: LD_INT 117
18908: PUSH
18909: LD_INT 118
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 21709
18928: LD_INT 5
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19048
18936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 4
18947: PUSH
18948: LD_INT 5
18950: PUSH
18951: LD_INT 6
18953: PUSH
18954: LD_INT 8
18956: PUSH
18957: LD_INT 11
18959: PUSH
18960: LD_INT 12
18962: PUSH
18963: LD_INT 15
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_INT 23
18974: PUSH
18975: LD_INT 25
18977: PUSH
18978: LD_INT 26
18980: PUSH
18981: LD_INT 36
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 101
19002: PUSH
19003: LD_INT 102
19005: PUSH
19006: LD_INT 105
19008: PUSH
19009: LD_INT 106
19011: PUSH
19012: LD_INT 108
19014: PUSH
19015: LD_INT 109
19017: PUSH
19018: LD_INT 112
19020: PUSH
19021: LD_INT 116
19023: PUSH
19024: LD_INT 117
19026: PUSH
19027: LD_INT 118
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 21709
19048: LD_INT 6
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19188
19056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: LD_INT 6
19073: PUSH
19074: LD_INT 8
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 16
19088: PUSH
19089: LD_INT 20
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 26
19106: PUSH
19107: LD_INT 30
19109: PUSH
19110: LD_INT 31
19112: PUSH
19113: LD_INT 32
19115: PUSH
19116: LD_INT 36
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 101
19142: PUSH
19143: LD_INT 102
19145: PUSH
19146: LD_INT 105
19148: PUSH
19149: LD_INT 106
19151: PUSH
19152: LD_INT 108
19154: PUSH
19155: LD_INT 109
19157: PUSH
19158: LD_INT 112
19160: PUSH
19161: LD_INT 116
19163: PUSH
19164: LD_INT 117
19166: PUSH
19167: LD_INT 118
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: ST_TO_ADDR
19186: GO 21709
19188: LD_INT 7
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19308
19196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 4
19207: PUSH
19208: LD_INT 5
19210: PUSH
19211: LD_INT 7
19213: PUSH
19214: LD_INT 11
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: LD_INT 15
19222: PUSH
19223: LD_INT 16
19225: PUSH
19226: LD_INT 20
19228: PUSH
19229: LD_INT 21
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 23
19237: PUSH
19238: LD_INT 25
19240: PUSH
19241: LD_INT 26
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 101
19262: PUSH
19263: LD_INT 102
19265: PUSH
19266: LD_INT 103
19268: PUSH
19269: LD_INT 105
19271: PUSH
19272: LD_INT 106
19274: PUSH
19275: LD_INT 108
19277: PUSH
19278: LD_INT 112
19280: PUSH
19281: LD_INT 116
19283: PUSH
19284: LD_INT 117
19286: PUSH
19287: LD_INT 118
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: ST_TO_ADDR
19306: GO 21709
19308: LD_INT 8
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19456
19316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: LD_INT 5
19330: PUSH
19331: LD_INT 6
19333: PUSH
19334: LD_INT 7
19336: PUSH
19337: LD_INT 8
19339: PUSH
19340: LD_INT 11
19342: PUSH
19343: LD_INT 12
19345: PUSH
19346: LD_INT 15
19348: PUSH
19349: LD_INT 16
19351: PUSH
19352: LD_INT 20
19354: PUSH
19355: LD_INT 21
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_INT 23
19363: PUSH
19364: LD_INT 25
19366: PUSH
19367: LD_INT 26
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 31
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: LD_INT 36
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 101
19406: PUSH
19407: LD_INT 102
19409: PUSH
19410: LD_INT 103
19412: PUSH
19413: LD_INT 105
19415: PUSH
19416: LD_INT 106
19418: PUSH
19419: LD_INT 108
19421: PUSH
19422: LD_INT 109
19424: PUSH
19425: LD_INT 112
19427: PUSH
19428: LD_INT 116
19430: PUSH
19431: LD_INT 117
19433: PUSH
19434: LD_INT 118
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21709
19456: LD_INT 9
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19612
19464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 6
19481: PUSH
19482: LD_INT 7
19484: PUSH
19485: LD_INT 8
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 15
19496: PUSH
19497: LD_INT 16
19499: PUSH
19500: LD_INT 20
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 25
19514: PUSH
19515: LD_INT 26
19517: PUSH
19518: LD_INT 28
19520: PUSH
19521: LD_INT 30
19523: PUSH
19524: LD_INT 31
19526: PUSH
19527: LD_INT 32
19529: PUSH
19530: LD_INT 36
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 101
19558: PUSH
19559: LD_INT 102
19561: PUSH
19562: LD_INT 103
19564: PUSH
19565: LD_INT 105
19567: PUSH
19568: LD_INT 106
19570: PUSH
19571: LD_INT 108
19573: PUSH
19574: LD_INT 109
19576: PUSH
19577: LD_INT 112
19579: PUSH
19580: LD_INT 114
19582: PUSH
19583: LD_INT 116
19585: PUSH
19586: LD_INT 117
19588: PUSH
19589: LD_INT 118
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: ST_TO_ADDR
19610: GO 21709
19612: LD_INT 10
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19816
19620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 4
19631: PUSH
19632: LD_INT 5
19634: PUSH
19635: LD_INT 6
19637: PUSH
19638: LD_INT 7
19640: PUSH
19641: LD_INT 8
19643: PUSH
19644: LD_INT 9
19646: PUSH
19647: LD_INT 10
19649: PUSH
19650: LD_INT 11
19652: PUSH
19653: LD_INT 12
19655: PUSH
19656: LD_INT 13
19658: PUSH
19659: LD_INT 14
19661: PUSH
19662: LD_INT 15
19664: PUSH
19665: LD_INT 16
19667: PUSH
19668: LD_INT 17
19670: PUSH
19671: LD_INT 18
19673: PUSH
19674: LD_INT 19
19676: PUSH
19677: LD_INT 20
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 23
19688: PUSH
19689: LD_INT 24
19691: PUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 26
19697: PUSH
19698: LD_INT 28
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 31
19706: PUSH
19707: LD_INT 32
19709: PUSH
19710: LD_INT 36
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 101
19746: PUSH
19747: LD_INT 102
19749: PUSH
19750: LD_INT 103
19752: PUSH
19753: LD_INT 104
19755: PUSH
19756: LD_INT 105
19758: PUSH
19759: LD_INT 106
19761: PUSH
19762: LD_INT 107
19764: PUSH
19765: LD_INT 108
19767: PUSH
19768: LD_INT 109
19770: PUSH
19771: LD_INT 110
19773: PUSH
19774: LD_INT 111
19776: PUSH
19777: LD_INT 112
19779: PUSH
19780: LD_INT 114
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 21709
19816: LD_INT 11
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 20028
19824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 3
19835: PUSH
19836: LD_INT 4
19838: PUSH
19839: LD_INT 5
19841: PUSH
19842: LD_INT 6
19844: PUSH
19845: LD_INT 7
19847: PUSH
19848: LD_INT 8
19850: PUSH
19851: LD_INT 9
19853: PUSH
19854: LD_INT 10
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 13
19865: PUSH
19866: LD_INT 14
19868: PUSH
19869: LD_INT 15
19871: PUSH
19872: LD_INT 16
19874: PUSH
19875: LD_INT 17
19877: PUSH
19878: LD_INT 18
19880: PUSH
19881: LD_INT 19
19883: PUSH
19884: LD_INT 20
19886: PUSH
19887: LD_INT 21
19889: PUSH
19890: LD_INT 22
19892: PUSH
19893: LD_INT 23
19895: PUSH
19896: LD_INT 24
19898: PUSH
19899: LD_INT 25
19901: PUSH
19902: LD_INT 26
19904: PUSH
19905: LD_INT 28
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 31
19913: PUSH
19914: LD_INT 32
19916: PUSH
19917: LD_INT 34
19919: PUSH
19920: LD_INT 36
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 101
19958: PUSH
19959: LD_INT 102
19961: PUSH
19962: LD_INT 103
19964: PUSH
19965: LD_INT 104
19967: PUSH
19968: LD_INT 105
19970: PUSH
19971: LD_INT 106
19973: PUSH
19974: LD_INT 107
19976: PUSH
19977: LD_INT 108
19979: PUSH
19980: LD_INT 109
19982: PUSH
19983: LD_INT 110
19985: PUSH
19986: LD_INT 111
19988: PUSH
19989: LD_INT 112
19991: PUSH
19992: LD_INT 114
19994: PUSH
19995: LD_INT 116
19997: PUSH
19998: LD_INT 117
20000: PUSH
20001: LD_INT 118
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 21709
20028: LD_INT 12
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20256
20036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: LD_INT 4
20053: PUSH
20054: LD_INT 5
20056: PUSH
20057: LD_INT 6
20059: PUSH
20060: LD_INT 7
20062: PUSH
20063: LD_INT 8
20065: PUSH
20066: LD_INT 9
20068: PUSH
20069: LD_INT 10
20071: PUSH
20072: LD_INT 11
20074: PUSH
20075: LD_INT 12
20077: PUSH
20078: LD_INT 13
20080: PUSH
20081: LD_INT 14
20083: PUSH
20084: LD_INT 15
20086: PUSH
20087: LD_INT 16
20089: PUSH
20090: LD_INT 17
20092: PUSH
20093: LD_INT 18
20095: PUSH
20096: LD_INT 19
20098: PUSH
20099: LD_INT 20
20101: PUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_INT 23
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 25
20116: PUSH
20117: LD_INT 26
20119: PUSH
20120: LD_INT 27
20122: PUSH
20123: LD_INT 28
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 31
20131: PUSH
20132: LD_INT 32
20134: PUSH
20135: LD_INT 33
20137: PUSH
20138: LD_INT 34
20140: PUSH
20141: LD_INT 36
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 101
20182: PUSH
20183: LD_INT 102
20185: PUSH
20186: LD_INT 103
20188: PUSH
20189: LD_INT 104
20191: PUSH
20192: LD_INT 105
20194: PUSH
20195: LD_INT 106
20197: PUSH
20198: LD_INT 107
20200: PUSH
20201: LD_INT 108
20203: PUSH
20204: LD_INT 109
20206: PUSH
20207: LD_INT 110
20209: PUSH
20210: LD_INT 111
20212: PUSH
20213: LD_INT 112
20215: PUSH
20216: LD_INT 113
20218: PUSH
20219: LD_INT 114
20221: PUSH
20222: LD_INT 116
20224: PUSH
20225: LD_INT 117
20227: PUSH
20228: LD_INT 118
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 21709
20256: LD_INT 13
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20472
20264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: LD_INT 4
20281: PUSH
20282: LD_INT 5
20284: PUSH
20285: LD_INT 8
20287: PUSH
20288: LD_INT 9
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 14
20302: PUSH
20303: LD_INT 15
20305: PUSH
20306: LD_INT 16
20308: PUSH
20309: LD_INT 17
20311: PUSH
20312: LD_INT 18
20314: PUSH
20315: LD_INT 19
20317: PUSH
20318: LD_INT 20
20320: PUSH
20321: LD_INT 21
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_INT 23
20329: PUSH
20330: LD_INT 24
20332: PUSH
20333: LD_INT 25
20335: PUSH
20336: LD_INT 26
20338: PUSH
20339: LD_INT 27
20341: PUSH
20342: LD_INT 28
20344: PUSH
20345: LD_INT 30
20347: PUSH
20348: LD_INT 31
20350: PUSH
20351: LD_INT 32
20353: PUSH
20354: LD_INT 33
20356: PUSH
20357: LD_INT 34
20359: PUSH
20360: LD_INT 36
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 101
20398: PUSH
20399: LD_INT 102
20401: PUSH
20402: LD_INT 103
20404: PUSH
20405: LD_INT 104
20407: PUSH
20408: LD_INT 105
20410: PUSH
20411: LD_INT 106
20413: PUSH
20414: LD_INT 107
20416: PUSH
20417: LD_INT 108
20419: PUSH
20420: LD_INT 109
20422: PUSH
20423: LD_INT 110
20425: PUSH
20426: LD_INT 111
20428: PUSH
20429: LD_INT 112
20431: PUSH
20432: LD_INT 113
20434: PUSH
20435: LD_INT 114
20437: PUSH
20438: LD_INT 116
20440: PUSH
20441: LD_INT 117
20443: PUSH
20444: LD_INT 118
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 21709
20472: LD_INT 14
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20704
20480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: LD_INT 6
20503: PUSH
20504: LD_INT 7
20506: PUSH
20507: LD_INT 8
20509: PUSH
20510: LD_INT 9
20512: PUSH
20513: LD_INT 10
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 13
20524: PUSH
20525: LD_INT 14
20527: PUSH
20528: LD_INT 15
20530: PUSH
20531: LD_INT 16
20533: PUSH
20534: LD_INT 17
20536: PUSH
20537: LD_INT 18
20539: PUSH
20540: LD_INT 19
20542: PUSH
20543: LD_INT 20
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: LD_INT 25
20560: PUSH
20561: LD_INT 26
20563: PUSH
20564: LD_INT 27
20566: PUSH
20567: LD_INT 28
20569: PUSH
20570: LD_INT 29
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 33
20584: PUSH
20585: LD_INT 34
20587: PUSH
20588: LD_INT 36
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 101
20630: PUSH
20631: LD_INT 102
20633: PUSH
20634: LD_INT 103
20636: PUSH
20637: LD_INT 104
20639: PUSH
20640: LD_INT 105
20642: PUSH
20643: LD_INT 106
20645: PUSH
20646: LD_INT 107
20648: PUSH
20649: LD_INT 108
20651: PUSH
20652: LD_INT 109
20654: PUSH
20655: LD_INT 110
20657: PUSH
20658: LD_INT 111
20660: PUSH
20661: LD_INT 112
20663: PUSH
20664: LD_INT 113
20666: PUSH
20667: LD_INT 114
20669: PUSH
20670: LD_INT 116
20672: PUSH
20673: LD_INT 117
20675: PUSH
20676: LD_INT 118
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: ST_TO_ADDR
20702: GO 21709
20704: LD_INT 15
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20936
20712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 4
20729: PUSH
20730: LD_INT 5
20732: PUSH
20733: LD_INT 6
20735: PUSH
20736: LD_INT 7
20738: PUSH
20739: LD_INT 8
20741: PUSH
20742: LD_INT 9
20744: PUSH
20745: LD_INT 10
20747: PUSH
20748: LD_INT 11
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 13
20756: PUSH
20757: LD_INT 14
20759: PUSH
20760: LD_INT 15
20762: PUSH
20763: LD_INT 16
20765: PUSH
20766: LD_INT 17
20768: PUSH
20769: LD_INT 18
20771: PUSH
20772: LD_INT 19
20774: PUSH
20775: LD_INT 20
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_INT 23
20786: PUSH
20787: LD_INT 24
20789: PUSH
20790: LD_INT 25
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: LD_INT 27
20798: PUSH
20799: LD_INT 28
20801: PUSH
20802: LD_INT 29
20804: PUSH
20805: LD_INT 30
20807: PUSH
20808: LD_INT 31
20810: PUSH
20811: LD_INT 32
20813: PUSH
20814: LD_INT 33
20816: PUSH
20817: LD_INT 34
20819: PUSH
20820: LD_INT 36
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 103
20868: PUSH
20869: LD_INT 104
20871: PUSH
20872: LD_INT 105
20874: PUSH
20875: LD_INT 106
20877: PUSH
20878: LD_INT 107
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 110
20889: PUSH
20890: LD_INT 111
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 113
20898: PUSH
20899: LD_INT 114
20901: PUSH
20902: LD_INT 116
20904: PUSH
20905: LD_INT 117
20907: PUSH
20908: LD_INT 118
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: ST_TO_ADDR
20934: GO 21709
20936: LD_INT 16
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 21080
20944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20945: LD_ADDR_VAR 0 2
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 4
20955: PUSH
20956: LD_INT 5
20958: PUSH
20959: LD_INT 7
20961: PUSH
20962: LD_INT 11
20964: PUSH
20965: LD_INT 12
20967: PUSH
20968: LD_INT 15
20970: PUSH
20971: LD_INT 16
20973: PUSH
20974: LD_INT 20
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 23
20985: PUSH
20986: LD_INT 25
20988: PUSH
20989: LD_INT 26
20991: PUSH
20992: LD_INT 30
20994: PUSH
20995: LD_INT 31
20997: PUSH
20998: LD_INT 32
21000: PUSH
21001: LD_INT 33
21003: PUSH
21004: LD_INT 34
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 103
21036: PUSH
21037: LD_INT 106
21039: PUSH
21040: LD_INT 108
21042: PUSH
21043: LD_INT 112
21045: PUSH
21046: LD_INT 113
21048: PUSH
21049: LD_INT 114
21051: PUSH
21052: LD_INT 116
21054: PUSH
21055: LD_INT 117
21057: PUSH
21058: LD_INT 118
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: ST_TO_ADDR
21078: GO 21709
21080: LD_INT 17
21082: DOUBLE
21083: EQUAL
21084: IFTRUE 21088
21086: GO 21312
21088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21089: LD_ADDR_VAR 0 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: LD_INT 7
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 9
21120: PUSH
21121: LD_INT 10
21123: PUSH
21124: LD_INT 11
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: LD_INT 13
21132: PUSH
21133: LD_INT 14
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 17
21144: PUSH
21145: LD_INT 18
21147: PUSH
21148: LD_INT 19
21150: PUSH
21151: LD_INT 20
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 24
21165: PUSH
21166: LD_INT 25
21168: PUSH
21169: LD_INT 26
21171: PUSH
21172: LD_INT 27
21174: PUSH
21175: LD_INT 28
21177: PUSH
21178: LD_INT 29
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 31
21186: PUSH
21187: LD_INT 32
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 34
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 101
21238: PUSH
21239: LD_INT 102
21241: PUSH
21242: LD_INT 103
21244: PUSH
21245: LD_INT 104
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 107
21256: PUSH
21257: LD_INT 108
21259: PUSH
21260: LD_INT 109
21262: PUSH
21263: LD_INT 110
21265: PUSH
21266: LD_INT 111
21268: PUSH
21269: LD_INT 112
21271: PUSH
21272: LD_INT 113
21274: PUSH
21275: LD_INT 114
21277: PUSH
21278: LD_INT 116
21280: PUSH
21281: LD_INT 117
21283: PUSH
21284: LD_INT 118
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 21709
21312: LD_INT 18
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21468
21320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 7
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_INT 12
21343: PUSH
21344: LD_INT 15
21346: PUSH
21347: LD_INT 16
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 30
21370: PUSH
21371: LD_INT 31
21373: PUSH
21374: LD_INT 32
21376: PUSH
21377: LD_INT 33
21379: PUSH
21380: LD_INT 34
21382: PUSH
21383: LD_INT 35
21385: PUSH
21386: LD_INT 36
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 101
21414: PUSH
21415: LD_INT 102
21417: PUSH
21418: LD_INT 103
21420: PUSH
21421: LD_INT 106
21423: PUSH
21424: LD_INT 108
21426: PUSH
21427: LD_INT 112
21429: PUSH
21430: LD_INT 113
21432: PUSH
21433: LD_INT 114
21435: PUSH
21436: LD_INT 115
21438: PUSH
21439: LD_INT 116
21441: PUSH
21442: LD_INT 117
21444: PUSH
21445: LD_INT 118
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: ST_TO_ADDR
21466: GO 21709
21468: LD_INT 19
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21708
21476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 3
21490: PUSH
21491: LD_INT 4
21493: PUSH
21494: LD_INT 5
21496: PUSH
21497: LD_INT 6
21499: PUSH
21500: LD_INT 7
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: LD_INT 9
21508: PUSH
21509: LD_INT 10
21511: PUSH
21512: LD_INT 11
21514: PUSH
21515: LD_INT 12
21517: PUSH
21518: LD_INT 13
21520: PUSH
21521: LD_INT 14
21523: PUSH
21524: LD_INT 15
21526: PUSH
21527: LD_INT 16
21529: PUSH
21530: LD_INT 17
21532: PUSH
21533: LD_INT 18
21535: PUSH
21536: LD_INT 19
21538: PUSH
21539: LD_INT 20
21541: PUSH
21542: LD_INT 21
21544: PUSH
21545: LD_INT 22
21547: PUSH
21548: LD_INT 23
21550: PUSH
21551: LD_INT 24
21553: PUSH
21554: LD_INT 25
21556: PUSH
21557: LD_INT 26
21559: PUSH
21560: LD_INT 27
21562: PUSH
21563: LD_INT 28
21565: PUSH
21566: LD_INT 29
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 31
21574: PUSH
21575: LD_INT 32
21577: PUSH
21578: LD_INT 33
21580: PUSH
21581: LD_INT 34
21583: PUSH
21584: LD_INT 35
21586: PUSH
21587: LD_INT 36
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 101
21630: PUSH
21631: LD_INT 102
21633: PUSH
21634: LD_INT 103
21636: PUSH
21637: LD_INT 104
21639: PUSH
21640: LD_INT 105
21642: PUSH
21643: LD_INT 106
21645: PUSH
21646: LD_INT 107
21648: PUSH
21649: LD_INT 108
21651: PUSH
21652: LD_INT 109
21654: PUSH
21655: LD_INT 110
21657: PUSH
21658: LD_INT 111
21660: PUSH
21661: LD_INT 112
21663: PUSH
21664: LD_INT 113
21666: PUSH
21667: LD_INT 114
21669: PUSH
21670: LD_INT 115
21672: PUSH
21673: LD_INT 116
21675: PUSH
21676: LD_INT 117
21678: PUSH
21679: LD_INT 118
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: ST_TO_ADDR
21706: GO 21709
21708: POP
// end else
21709: GO 21940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 4
21727: PUSH
21728: LD_INT 5
21730: PUSH
21731: LD_INT 6
21733: PUSH
21734: LD_INT 7
21736: PUSH
21737: LD_INT 8
21739: PUSH
21740: LD_INT 9
21742: PUSH
21743: LD_INT 10
21745: PUSH
21746: LD_INT 11
21748: PUSH
21749: LD_INT 12
21751: PUSH
21752: LD_INT 13
21754: PUSH
21755: LD_INT 14
21757: PUSH
21758: LD_INT 15
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 17
21766: PUSH
21767: LD_INT 18
21769: PUSH
21770: LD_INT 19
21772: PUSH
21773: LD_INT 20
21775: PUSH
21776: LD_INT 21
21778: PUSH
21779: LD_INT 22
21781: PUSH
21782: LD_INT 23
21784: PUSH
21785: LD_INT 24
21787: PUSH
21788: LD_INT 25
21790: PUSH
21791: LD_INT 26
21793: PUSH
21794: LD_INT 27
21796: PUSH
21797: LD_INT 28
21799: PUSH
21800: LD_INT 29
21802: PUSH
21803: LD_INT 30
21805: PUSH
21806: LD_INT 31
21808: PUSH
21809: LD_INT 32
21811: PUSH
21812: LD_INT 33
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 35
21820: PUSH
21821: LD_INT 36
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 101
21864: PUSH
21865: LD_INT 102
21867: PUSH
21868: LD_INT 103
21870: PUSH
21871: LD_INT 104
21873: PUSH
21874: LD_INT 105
21876: PUSH
21877: LD_INT 106
21879: PUSH
21880: LD_INT 107
21882: PUSH
21883: LD_INT 108
21885: PUSH
21886: LD_INT 109
21888: PUSH
21889: LD_INT 110
21891: PUSH
21892: LD_INT 111
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 113
21900: PUSH
21901: LD_INT 114
21903: PUSH
21904: LD_INT 115
21906: PUSH
21907: LD_INT 116
21909: PUSH
21910: LD_INT 117
21912: PUSH
21913: LD_INT 118
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// if result then
21940: LD_VAR 0 2
21944: IFFALSE 22730
// begin normal :=  ;
21946: LD_ADDR_VAR 0 5
21950: PUSH
21951: LD_STRING 
21953: ST_TO_ADDR
// hardcore :=  ;
21954: LD_ADDR_VAR 0 6
21958: PUSH
21959: LD_STRING 
21961: ST_TO_ADDR
// active :=  ;
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: LD_STRING 
21969: ST_TO_ADDR
// for i = 1 to normalCounter do
21970: LD_ADDR_VAR 0 8
21974: PUSH
21975: DOUBLE
21976: LD_INT 1
21978: DEC
21979: ST_TO_ADDR
21980: LD_EXP 38
21984: PUSH
21985: FOR_TO
21986: IFFALSE 22087
// begin tmp := 0 ;
21988: LD_ADDR_VAR 0 3
21992: PUSH
21993: LD_STRING 0
21995: ST_TO_ADDR
// if result [ 1 ] then
21996: LD_VAR 0 2
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: IFFALSE 22069
// if result [ 1 ] [ 1 ] = i then
22006: LD_VAR 0 2
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: PUSH
22019: LD_VAR 0 8
22023: EQUAL
22024: IFFALSE 22069
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: LD_VAR 0 2
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 3
22055: PPUSH
22056: CALL_OW 1
22060: ST_TO_ADDR
// tmp := 1 ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_STRING 1
22068: ST_TO_ADDR
// end ; normal := normal & tmp ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_VAR 0 5
22078: PUSH
22079: LD_VAR 0 3
22083: STR
22084: ST_TO_ADDR
// end ;
22085: GO 21985
22087: POP
22088: POP
// for i = 1 to hardcoreCounter do
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: DOUBLE
22095: LD_INT 1
22097: DEC
22098: ST_TO_ADDR
22099: LD_EXP 39
22103: PUSH
22104: FOR_TO
22105: IFFALSE 22210
// begin tmp := 0 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_STRING 0
22114: ST_TO_ADDR
// if result [ 2 ] then
22115: LD_VAR 0 2
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: IFFALSE 22192
// if result [ 2 ] [ 1 ] = 100 + i then
22125: LD_VAR 0 2
22129: PUSH
22130: LD_INT 2
22132: ARRAY
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PUSH
22138: LD_INT 100
22140: PUSH
22141: LD_VAR 0 8
22145: PLUS
22146: EQUAL
22147: IFFALSE 22192
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22149: LD_ADDR_VAR 0 2
22153: PUSH
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_INT 2
22161: PPUSH
22162: LD_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: CALL_OW 3
22178: PPUSH
22179: CALL_OW 1
22183: ST_TO_ADDR
// tmp := 1 ;
22184: LD_ADDR_VAR 0 3
22188: PUSH
22189: LD_STRING 1
22191: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22192: LD_ADDR_VAR 0 6
22196: PUSH
22197: LD_VAR 0 6
22201: PUSH
22202: LD_VAR 0 3
22206: STR
22207: ST_TO_ADDR
// end ;
22208: GO 22104
22210: POP
22211: POP
// if isGameLoad then
22212: LD_VAR 0 1
22216: IFFALSE 22691
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22218: LD_ADDR_VAR 0 4
22222: PUSH
22223: LD_EXP 42
22227: PUSH
22228: LD_EXP 41
22232: PUSH
22233: LD_EXP 43
22237: PUSH
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 44
22247: PUSH
22248: LD_EXP 45
22252: PUSH
22253: LD_EXP 46
22257: PUSH
22258: LD_EXP 47
22262: PUSH
22263: LD_EXP 48
22267: PUSH
22268: LD_EXP 49
22272: PUSH
22273: LD_EXP 50
22277: PUSH
22278: LD_EXP 51
22282: PUSH
22283: LD_EXP 52
22287: PUSH
22288: LD_EXP 53
22292: PUSH
22293: LD_EXP 61
22297: PUSH
22298: LD_EXP 62
22302: PUSH
22303: LD_EXP 63
22307: PUSH
22308: LD_EXP 64
22312: PUSH
22313: LD_EXP 66
22317: PUSH
22318: LD_EXP 67
22322: PUSH
22323: LD_EXP 68
22327: PUSH
22328: LD_EXP 71
22332: PUSH
22333: LD_EXP 73
22337: PUSH
22338: LD_EXP 74
22342: PUSH
22343: LD_EXP 75
22347: PUSH
22348: LD_EXP 77
22352: PUSH
22353: LD_EXP 78
22357: PUSH
22358: LD_EXP 81
22362: PUSH
22363: LD_EXP 82
22367: PUSH
22368: LD_EXP 83
22372: PUSH
22373: LD_EXP 84
22377: PUSH
22378: LD_EXP 85
22382: PUSH
22383: LD_EXP 86
22387: PUSH
22388: LD_EXP 87
22392: PUSH
22393: LD_EXP 88
22397: PUSH
22398: LD_EXP 89
22402: PUSH
22403: LD_EXP 54
22407: PUSH
22408: LD_EXP 55
22412: PUSH
22413: LD_EXP 58
22417: PUSH
22418: LD_EXP 59
22422: PUSH
22423: LD_EXP 60
22427: PUSH
22428: LD_EXP 56
22432: PUSH
22433: LD_EXP 57
22437: PUSH
22438: LD_EXP 65
22442: PUSH
22443: LD_EXP 69
22447: PUSH
22448: LD_EXP 70
22452: PUSH
22453: LD_EXP 72
22457: PUSH
22458: LD_EXP 76
22462: PUSH
22463: LD_EXP 79
22467: PUSH
22468: LD_EXP 80
22472: PUSH
22473: LD_EXP 90
22477: PUSH
22478: LD_EXP 91
22482: PUSH
22483: LD_EXP 92
22487: PUSH
22488: LD_EXP 93
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// tmp :=  ;
22549: LD_ADDR_VAR 0 3
22553: PUSH
22554: LD_STRING 
22556: ST_TO_ADDR
// for i = 1 to normalCounter do
22557: LD_ADDR_VAR 0 8
22561: PUSH
22562: DOUBLE
22563: LD_INT 1
22565: DEC
22566: ST_TO_ADDR
22567: LD_EXP 38
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22609
// begin if flags [ i ] then
22575: LD_VAR 0 4
22579: PUSH
22580: LD_VAR 0 8
22584: ARRAY
22585: IFFALSE 22607
// tmp := tmp & i & ; ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: LD_VAR 0 3
22596: PUSH
22597: LD_VAR 0 8
22601: STR
22602: PUSH
22603: LD_STRING ;
22605: STR
22606: ST_TO_ADDR
// end ;
22607: GO 22572
22609: POP
22610: POP
// for i = 1 to hardcoreCounter do
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: DOUBLE
22617: LD_INT 1
22619: DEC
22620: ST_TO_ADDR
22621: LD_EXP 39
22625: PUSH
22626: FOR_TO
22627: IFFALSE 22673
// begin if flags [ normalCounter + i ] then
22629: LD_VAR 0 4
22633: PUSH
22634: LD_EXP 38
22638: PUSH
22639: LD_VAR 0 8
22643: PLUS
22644: ARRAY
22645: IFFALSE 22671
// tmp := tmp & ( 100 + i ) & ; ;
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 100
22659: PUSH
22660: LD_VAR 0 8
22664: PLUS
22665: STR
22666: PUSH
22667: LD_STRING ;
22669: STR
22670: ST_TO_ADDR
// end ;
22671: GO 22626
22673: POP
22674: POP
// if tmp then
22675: LD_VAR 0 3
22679: IFFALSE 22691
// active := tmp ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 3
22690: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22691: LD_STRING getStreamItemsFromMission("
22693: PUSH
22694: LD_VAR 0 5
22698: STR
22699: PUSH
22700: LD_STRING ","
22702: STR
22703: PUSH
22704: LD_VAR 0 6
22708: STR
22709: PUSH
22710: LD_STRING ","
22712: STR
22713: PUSH
22714: LD_VAR 0 7
22718: STR
22719: PUSH
22720: LD_STRING ")
22722: STR
22723: PPUSH
22724: CALL_OW 559
// end else
22728: GO 22737
// ToLua ( getStreamItemsFromMission("","","") ) ;
22730: LD_STRING getStreamItemsFromMission("","","")
22732: PPUSH
22733: CALL_OW 559
// end ;
22737: LD_VAR 0 2
22741: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22742: LD_EXP 37
22746: PUSH
22747: LD_EXP 42
22751: AND
22752: IFFALSE 22876
22754: GO 22756
22756: DISABLE
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// begin enable ;
22761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 34
22784: PUSH
22785: LD_INT 7
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 34
22794: PUSH
22795: LD_INT 45
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 34
22804: PUSH
22805: LD_INT 28
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 34
22814: PUSH
22815: LD_INT 47
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: ST_TO_ADDR
// if not tmp then
22838: LD_VAR 0 2
22842: NOT
22843: IFFALSE 22847
// exit ;
22845: GO 22876
// for i in tmp do
22847: LD_ADDR_VAR 0 1
22851: PUSH
22852: LD_VAR 0 2
22856: PUSH
22857: FOR_IN
22858: IFFALSE 22874
// begin SetLives ( i , 0 ) ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_INT 0
22867: PPUSH
22868: CALL_OW 234
// end ;
22872: GO 22857
22874: POP
22875: POP
// end ;
22876: PPOPN 2
22878: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22879: LD_EXP 37
22883: PUSH
22884: LD_EXP 43
22888: AND
22889: IFFALSE 22973
22891: GO 22893
22893: DISABLE
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// begin enable ;
22898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22973
// for i in tmp do
22944: LD_ADDR_VAR 0 1
22948: PUSH
22949: LD_VAR 0 2
22953: PUSH
22954: FOR_IN
22955: IFFALSE 22971
// begin SetLives ( i , 0 ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_INT 0
22964: PPUSH
22965: CALL_OW 234
// end ;
22969: GO 22954
22971: POP
22972: POP
// end ;
22973: PPOPN 2
22975: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22976: LD_EXP 37
22980: PUSH
22981: LD_EXP 40
22985: AND
22986: IFFALSE 23079
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
// begin enable ;
22994: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22995: LD_ADDR_VAR 0 1
22999: PUSH
23000: LD_INT 22
23002: PUSH
23003: LD_OWVAR 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 5
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 25
23027: PUSH
23028: LD_INT 9
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 8
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PPUSH
23055: CALL_OW 69
23059: PUSH
23060: FOR_IN
23061: IFFALSE 23077
// begin SetClass ( i , 1 ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 336
// end ;
23075: GO 23060
23077: POP
23078: POP
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23082: LD_EXP 37
23086: PUSH
23087: LD_EXP 41
23091: AND
23092: PUSH
23093: LD_OWVAR 65
23097: PUSH
23098: LD_INT 7
23100: LESS
23101: AND
23102: IFFALSE 23116
23104: GO 23106
23106: DISABLE
// begin enable ;
23107: ENABLE
// game_speed := 7 ;
23108: LD_ADDR_OWVAR 65
23112: PUSH
23113: LD_INT 7
23115: ST_TO_ADDR
// end ;
23116: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23117: LD_EXP 37
23121: PUSH
23122: LD_EXP 44
23126: AND
23127: IFFALSE 23329
23129: GO 23131
23131: DISABLE
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 81
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: ST_TO_ADDR
// if not tmp then
23173: LD_VAR 0 3
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23329
// if tmp > 5 then
23182: LD_VAR 0 3
23186: PUSH
23187: LD_INT 5
23189: GREATER
23190: IFFALSE 23202
// k := 5 else
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_INT 5
23199: ST_TO_ADDR
23200: GO 23212
// k := tmp ;
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: LD_VAR 0 3
23211: ST_TO_ADDR
// for i := 1 to k do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: DOUBLE
23218: LD_INT 1
23220: DEC
23221: ST_TO_ADDR
23222: LD_VAR 0 2
23226: PUSH
23227: FOR_TO
23228: IFFALSE 23327
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23230: LD_VAR 0 3
23234: PUSH
23235: LD_VAR 0 1
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 4
23248: MOD
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: PPUSH
23254: CALL_OW 259
23258: PUSH
23259: LD_INT 10
23261: LESS
23262: IFFALSE 23325
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23264: LD_VAR 0 3
23268: PUSH
23269: LD_VAR 0 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 4
23282: MOD
23283: PUSH
23284: LD_INT 1
23286: PLUS
23287: PPUSH
23288: LD_VAR 0 3
23292: PUSH
23293: LD_VAR 0 1
23297: ARRAY
23298: PPUSH
23299: LD_VAR 0 1
23303: PUSH
23304: LD_INT 4
23306: MOD
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: PPUSH
23312: CALL_OW 259
23316: PUSH
23317: LD_INT 1
23319: PLUS
23320: PPUSH
23321: CALL_OW 237
23325: GO 23227
23327: POP
23328: POP
// end ;
23329: PPOPN 3
23331: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23332: LD_EXP 37
23336: PUSH
23337: LD_EXP 45
23341: AND
23342: IFFALSE 23362
23344: GO 23346
23346: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23347: LD_INT 4
23349: PPUSH
23350: LD_OWVAR 2
23354: PPUSH
23355: LD_INT 0
23357: PPUSH
23358: CALL_OW 324
23362: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23363: LD_EXP 37
23367: PUSH
23368: LD_EXP 74
23372: AND
23373: IFFALSE 23393
23375: GO 23377
23377: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23378: LD_INT 19
23380: PPUSH
23381: LD_OWVAR 2
23385: PPUSH
23386: LD_INT 0
23388: PPUSH
23389: CALL_OW 324
23393: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23394: LD_EXP 37
23398: PUSH
23399: LD_EXP 46
23403: AND
23404: IFFALSE 23506
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
// begin enable ;
23413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 34
23436: PUSH
23437: LD_INT 11
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 34
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not tmp then
23468: LD_VAR 0 2
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23506
// for i in tmp do
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_VAR 0 2
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23504
// begin SetLives ( i , 0 ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: CALL_OW 234
// end ;
23502: GO 23487
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23509: LD_EXP 37
23513: PUSH
23514: LD_EXP 47
23518: AND
23519: IFFALSE 23539
23521: GO 23523
23523: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23524: LD_INT 32
23526: PPUSH
23527: LD_OWVAR 2
23531: PPUSH
23532: LD_INT 0
23534: PPUSH
23535: CALL_OW 324
23539: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23540: LD_EXP 37
23544: PUSH
23545: LD_EXP 48
23549: AND
23550: IFFALSE 23731
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
23559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23560: LD_ADDR_VAR 0 2
23564: PUSH
23565: LD_INT 22
23567: PUSH
23568: LD_OWVAR 2
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 33
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: ST_TO_ADDR
// if not tmp then
23596: LD_VAR 0 2
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 23731
// side := 0 ;
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// for i := 1 to 8 do
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_INT 8
23625: PUSH
23626: FOR_TO
23627: IFFALSE 23675
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23629: LD_OWVAR 2
23633: PUSH
23634: LD_VAR 0 1
23638: NONEQUAL
23639: PUSH
23640: LD_OWVAR 2
23644: PPUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 81
23654: PUSH
23655: LD_INT 2
23657: EQUAL
23658: AND
23659: IFFALSE 23673
// begin side := i ;
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: LD_VAR 0 1
23670: ST_TO_ADDR
// break ;
23671: GO 23675
// end ;
23673: GO 23626
23675: POP
23676: POP
// if not side then
23677: LD_VAR 0 3
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23731
// for i := 1 to tmp do
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_VAR 0 2
23700: PUSH
23701: FOR_TO
23702: IFFALSE 23729
// if Prob ( 60 ) then
23704: LD_INT 60
23706: PPUSH
23707: CALL_OW 13
23711: IFFALSE 23727
// SetSide ( i , side ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: CALL_OW 235
23727: GO 23701
23729: POP
23730: POP
// end ;
23731: PPOPN 3
23733: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23734: LD_EXP 37
23738: PUSH
23739: LD_EXP 50
23743: AND
23744: IFFALSE 23863
23746: GO 23748
23748: DISABLE
23749: LD_INT 0
23751: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_OWVAR 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: PUSH
23806: FOR_IN
23807: IFFALSE 23861
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 257
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: IN
23837: IFFALSE 23859
// SetClass ( un , rand ( 1 , 4 ) ) ;
23839: LD_VAR 0 1
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: LD_INT 4
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: CALL_OW 336
23859: GO 23806
23861: POP
23862: POP
// end ;
23863: PPOPN 1
23865: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23866: LD_EXP 37
23870: PUSH
23871: LD_EXP 49
23875: AND
23876: IFFALSE 23955
23878: GO 23880
23880: DISABLE
23881: LD_INT 0
23883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_OWVAR 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 21
23903: PUSH
23904: LD_INT 3
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 69
23919: ST_TO_ADDR
// if not tmp then
23920: LD_VAR 0 1
23924: NOT
23925: IFFALSE 23929
// exit ;
23927: GO 23955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23929: LD_VAR 0 1
23933: PUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 12
23946: ARRAY
23947: PPUSH
23948: LD_INT 100
23950: PPUSH
23951: CALL_OW 234
// end ;
23955: PPOPN 1
23957: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23958: LD_EXP 37
23962: PUSH
23963: LD_EXP 51
23967: AND
23968: IFFALSE 24066
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_OWVAR 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 21
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 69
24011: ST_TO_ADDR
// if not tmp then
24012: LD_VAR 0 1
24016: NOT
24017: IFFALSE 24021
// exit ;
24019: GO 24066
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24021: LD_VAR 0 1
24025: PUSH
24026: LD_INT 1
24028: PPUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 12
24038: ARRAY
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: LD_INT 4
24045: PPUSH
24046: CALL_OW 12
24050: PPUSH
24051: LD_INT 3000
24053: PPUSH
24054: LD_INT 9000
24056: PPUSH
24057: CALL_OW 12
24061: PPUSH
24062: CALL_OW 492
// end ;
24066: PPOPN 1
24068: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24069: LD_EXP 37
24073: PUSH
24074: LD_EXP 52
24078: AND
24079: IFFALSE 24099
24081: GO 24083
24083: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24084: LD_INT 1
24086: PPUSH
24087: LD_OWVAR 2
24091: PPUSH
24092: LD_INT 0
24094: PPUSH
24095: CALL_OW 324
24099: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24100: LD_EXP 37
24104: PUSH
24105: LD_EXP 53
24109: AND
24110: IFFALSE 24193
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_OWVAR 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 21
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PPUSH
24150: CALL_OW 69
24154: ST_TO_ADDR
// if not tmp then
24155: LD_VAR 0 2
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24193
// for i in tmp do
24164: LD_ADDR_VAR 0 1
24168: PUSH
24169: LD_VAR 0 2
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// SetBLevel ( i , 10 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 10
24184: PPUSH
24185: CALL_OW 241
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 2
24195: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24196: LD_EXP 37
24200: PUSH
24201: LD_EXP 54
24205: AND
24206: IFFALSE 24317
24208: GO 24210
24210: DISABLE
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_OWVAR 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 25
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PPUSH
24247: CALL_OW 69
24251: ST_TO_ADDR
// if not tmp then
24252: LD_VAR 0 3
24256: NOT
24257: IFFALSE 24261
// exit ;
24259: GO 24317
// un := tmp [ rand ( 1 , tmp ) ] ;
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL_OW 12
24283: ARRAY
24284: ST_TO_ADDR
// if Crawls ( un ) then
24285: LD_VAR 0 2
24289: PPUSH
24290: CALL_OW 318
24294: IFFALSE 24305
// ComWalk ( un ) ;
24296: LD_VAR 0 2
24300: PPUSH
24301: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24305: LD_VAR 0 2
24309: PPUSH
24310: LD_INT 5
24312: PPUSH
24313: CALL_OW 336
// end ;
24317: PPOPN 3
24319: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24320: LD_EXP 37
24324: PUSH
24325: LD_EXP 55
24329: AND
24330: PUSH
24331: LD_OWVAR 67
24335: PUSH
24336: LD_INT 4
24338: LESS
24339: AND
24340: IFFALSE 24359
24342: GO 24344
24344: DISABLE
// begin Difficulty := Difficulty + 1 ;
24345: LD_ADDR_OWVAR 67
24349: PUSH
24350: LD_OWVAR 67
24354: PUSH
24355: LD_INT 1
24357: PLUS
24358: ST_TO_ADDR
// end ;
24359: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24360: LD_EXP 37
24364: PUSH
24365: LD_EXP 56
24369: AND
24370: IFFALSE 24473
24372: GO 24374
24374: DISABLE
24375: LD_INT 0
24377: PPUSH
// begin for i := 1 to 5 do
24378: LD_ADDR_VAR 0 1
24382: PUSH
24383: DOUBLE
24384: LD_INT 1
24386: DEC
24387: ST_TO_ADDR
24388: LD_INT 5
24390: PUSH
24391: FOR_TO
24392: IFFALSE 24471
// begin uc_nation := nation_nature ;
24394: LD_ADDR_OWVAR 21
24398: PUSH
24399: LD_INT 0
24401: ST_TO_ADDR
// uc_side := 0 ;
24402: LD_ADDR_OWVAR 20
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24410: LD_ADDR_OWVAR 29
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 12
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// hc_agressivity := 20 ;
24425: LD_ADDR_OWVAR 35
24429: PUSH
24430: LD_INT 20
24432: ST_TO_ADDR
// hc_class := class_tiger ;
24433: LD_ADDR_OWVAR 28
24437: PUSH
24438: LD_INT 14
24440: ST_TO_ADDR
// hc_gallery :=  ;
24441: LD_ADDR_OWVAR 33
24445: PUSH
24446: LD_STRING 
24448: ST_TO_ADDR
// hc_name :=  ;
24449: LD_ADDR_OWVAR 26
24453: PUSH
24454: LD_STRING 
24456: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24457: CALL_OW 44
24461: PPUSH
24462: LD_INT 0
24464: PPUSH
24465: CALL_OW 51
// end ;
24469: GO 24391
24471: POP
24472: POP
// end ;
24473: PPOPN 1
24475: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24476: LD_EXP 37
24480: PUSH
24481: LD_EXP 57
24485: AND
24486: IFFALSE 24495
24488: GO 24490
24490: DISABLE
// StreamSibBomb ;
24491: CALL 24496 0 0
24495: END
// export function StreamSibBomb ; var i , x , y ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
// result := false ;
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_INT 0
24509: ST_TO_ADDR
// for i := 1 to 16 do
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: DOUBLE
24516: LD_INT 1
24518: DEC
24519: ST_TO_ADDR
24520: LD_INT 16
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24723
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24526: LD_ADDR_VAR 0 3
24530: PUSH
24531: LD_INT 10
24533: PUSH
24534: LD_INT 20
24536: PUSH
24537: LD_INT 30
24539: PUSH
24540: LD_INT 40
24542: PUSH
24543: LD_INT 50
24545: PUSH
24546: LD_INT 60
24548: PUSH
24549: LD_INT 70
24551: PUSH
24552: LD_INT 80
24554: PUSH
24555: LD_INT 90
24557: PUSH
24558: LD_INT 100
24560: PUSH
24561: LD_INT 110
24563: PUSH
24564: LD_INT 120
24566: PUSH
24567: LD_INT 130
24569: PUSH
24570: LD_INT 140
24572: PUSH
24573: LD_INT 150
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PPUSH
24596: LD_INT 15
24598: PPUSH
24599: CALL_OW 12
24603: ARRAY
24604: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24605: LD_ADDR_VAR 0 4
24609: PUSH
24610: LD_INT 10
24612: PUSH
24613: LD_INT 20
24615: PUSH
24616: LD_INT 30
24618: PUSH
24619: LD_INT 40
24621: PUSH
24622: LD_INT 50
24624: PUSH
24625: LD_INT 60
24627: PUSH
24628: LD_INT 70
24630: PUSH
24631: LD_INT 80
24633: PUSH
24634: LD_INT 90
24636: PUSH
24637: LD_INT 100
24639: PUSH
24640: LD_INT 110
24642: PUSH
24643: LD_INT 120
24645: PUSH
24646: LD_INT 130
24648: PUSH
24649: LD_INT 140
24651: PUSH
24652: LD_INT 150
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PPUSH
24675: LD_INT 15
24677: PPUSH
24678: CALL_OW 12
24682: ARRAY
24683: ST_TO_ADDR
// if ValidHex ( x , y ) then
24684: LD_VAR 0 3
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: CALL_OW 488
24698: IFFALSE 24721
// begin result := [ x , y ] ;
24700: LD_ADDR_VAR 0 1
24704: PUSH
24705: LD_VAR 0 3
24709: PUSH
24710: LD_VAR 0 4
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: ST_TO_ADDR
// break ;
24719: GO 24723
// end ; end ;
24721: GO 24523
24723: POP
24724: POP
// if result then
24725: LD_VAR 0 1
24729: IFFALSE 24789
// begin ToLua ( playSibBomb() ) ;
24731: LD_STRING playSibBomb()
24733: PPUSH
24734: CALL_OW 559
// wait ( 0 0$14 ) ;
24738: LD_INT 490
24740: PPUSH
24741: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: LD_VAR 0 1
24758: PUSH
24759: LD_INT 2
24761: ARRAY
24762: PPUSH
24763: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24767: LD_VAR 0 1
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 2
24783: ARRAY
24784: PPUSH
24785: CALL_OW 429
// end ; end ;
24789: LD_VAR 0 1
24793: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24794: LD_EXP 37
24798: PUSH
24799: LD_EXP 59
24803: AND
24804: IFFALSE 24816
24806: GO 24808
24808: DISABLE
// YouLost (  ) ;
24809: LD_STRING 
24811: PPUSH
24812: CALL_OW 104
24816: END
// every 0 0$1 trigger StreamModeActive and sFog do
24817: LD_EXP 37
24821: PUSH
24822: LD_EXP 58
24826: AND
24827: IFFALSE 24841
24829: GO 24831
24831: DISABLE
// FogOff ( your_side ) ;
24832: LD_OWVAR 2
24836: PPUSH
24837: CALL_OW 344
24841: END
// every 0 0$1 trigger StreamModeActive and sSun do
24842: LD_EXP 37
24846: PUSH
24847: LD_EXP 60
24851: AND
24852: IFFALSE 24880
24854: GO 24856
24856: DISABLE
// begin solar_recharge_percent := 0 ;
24857: LD_ADDR_OWVAR 79
24861: PUSH
24862: LD_INT 0
24864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24865: LD_INT 10500
24867: PPUSH
24868: CALL_OW 67
// solar_recharge_percent := 100 ;
24872: LD_ADDR_OWVAR 79
24876: PUSH
24877: LD_INT 100
24879: ST_TO_ADDR
// end ;
24880: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24881: LD_EXP 37
24885: PUSH
24886: LD_EXP 61
24890: AND
24891: IFFALSE 25130
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
24899: PPUSH
24900: PPUSH
// begin tmp := [ ] ;
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: EMPTY
24907: ST_TO_ADDR
// for i := 1 to 6 do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_INT 6
24920: PUSH
24921: FOR_TO
24922: IFFALSE 25027
// begin uc_nation := nation_nature ;
24924: LD_ADDR_OWVAR 21
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// uc_side := 0 ;
24932: LD_ADDR_OWVAR 20
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24940: LD_ADDR_OWVAR 29
24944: PUSH
24945: LD_INT 12
24947: PUSH
24948: LD_INT 12
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// hc_agressivity := 20 ;
24955: LD_ADDR_OWVAR 35
24959: PUSH
24960: LD_INT 20
24962: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24963: LD_ADDR_OWVAR 28
24967: PUSH
24968: LD_INT 17
24970: ST_TO_ADDR
// hc_gallery :=  ;
24971: LD_ADDR_OWVAR 33
24975: PUSH
24976: LD_STRING 
24978: ST_TO_ADDR
// hc_name :=  ;
24979: LD_ADDR_OWVAR 26
24983: PUSH
24984: LD_STRING 
24986: ST_TO_ADDR
// un := CreateHuman ;
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: CALL_OW 44
24996: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_INT 1
25004: PPUSH
25005: CALL_OW 51
// tmp := tmp ^ un ;
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_VAR 0 3
25018: PUSH
25019: LD_VAR 0 2
25023: ADD
25024: ST_TO_ADDR
// end ;
25025: GO 24921
25027: POP
25028: POP
// repeat wait ( 0 0$1 ) ;
25029: LD_INT 35
25031: PPUSH
25032: CALL_OW 67
// for un in tmp do
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25121
// begin if IsDead ( un ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 301
25058: IFFALSE 25078
// begin tmp := tmp diff un ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_VAR 0 2
25074: DIFF
25075: ST_TO_ADDR
// continue ;
25076: GO 25046
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25078: LD_VAR 0 2
25082: PPUSH
25083: LD_INT 3
25085: PUSH
25086: LD_INT 22
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 69
25104: PPUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: CALL_OW 74
25114: PPUSH
25115: CALL_OW 115
// end ;
25119: GO 25046
25121: POP
25122: POP
// until not tmp ;
25123: LD_VAR 0 3
25127: NOT
25128: IFFALSE 25029
// end ;
25130: PPOPN 3
25132: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25133: LD_EXP 37
25137: PUSH
25138: LD_EXP 62
25142: AND
25143: IFFALSE 25197
25145: GO 25147
25147: DISABLE
// begin ToLua ( displayTroll(); ) ;
25148: LD_STRING displayTroll();
25150: PPUSH
25151: CALL_OW 559
// wait ( 3 3$00 ) ;
25155: LD_INT 6300
25157: PPUSH
25158: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25162: LD_STRING hideTroll();
25164: PPUSH
25165: CALL_OW 559
// wait ( 1 1$00 ) ;
25169: LD_INT 2100
25171: PPUSH
25172: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25176: LD_STRING displayTroll();
25178: PPUSH
25179: CALL_OW 559
// wait ( 1 1$00 ) ;
25183: LD_INT 2100
25185: PPUSH
25186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25190: LD_STRING hideTroll();
25192: PPUSH
25193: CALL_OW 559
// end ;
25197: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25198: LD_EXP 37
25202: PUSH
25203: LD_EXP 63
25207: AND
25208: IFFALSE 25271
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
// begin p := 0 ;
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_INT 0
25223: ST_TO_ADDR
// repeat game_speed := 1 ;
25224: LD_ADDR_OWVAR 65
25228: PUSH
25229: LD_INT 1
25231: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25232: LD_INT 35
25234: PPUSH
25235: CALL_OW 67
// p := p + 1 ;
25239: LD_ADDR_VAR 0 1
25243: PUSH
25244: LD_VAR 0 1
25248: PUSH
25249: LD_INT 1
25251: PLUS
25252: ST_TO_ADDR
// until p >= 60 ;
25253: LD_VAR 0 1
25257: PUSH
25258: LD_INT 60
25260: GREATEREQUAL
25261: IFFALSE 25224
// game_speed := 4 ;
25263: LD_ADDR_OWVAR 65
25267: PUSH
25268: LD_INT 4
25270: ST_TO_ADDR
// end ;
25271: PPOPN 1
25273: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25274: LD_EXP 37
25278: PUSH
25279: LD_EXP 64
25283: AND
25284: IFFALSE 25430
25286: GO 25288
25288: DISABLE
25289: LD_INT 0
25291: PPUSH
25292: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25293: LD_ADDR_VAR 0 1
25297: PUSH
25298: LD_INT 22
25300: PUSH
25301: LD_OWVAR 2
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 30
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PPUSH
25342: CALL_OW 69
25346: ST_TO_ADDR
// if not depot then
25347: LD_VAR 0 1
25351: NOT
25352: IFFALSE 25356
// exit ;
25354: GO 25430
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25356: LD_ADDR_VAR 0 2
25360: PUSH
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 1
25368: PPUSH
25369: LD_VAR 0 1
25373: PPUSH
25374: CALL_OW 12
25378: ARRAY
25379: PPUSH
25380: CALL_OW 274
25384: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_INT 0
25395: PPUSH
25396: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25400: LD_VAR 0 2
25404: PPUSH
25405: LD_INT 2
25407: PPUSH
25408: LD_INT 0
25410: PPUSH
25411: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 0
25425: PPUSH
25426: CALL_OW 277
// end ;
25430: PPOPN 2
25432: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25433: LD_EXP 37
25437: PUSH
25438: LD_EXP 65
25442: AND
25443: IFFALSE 25540
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25451: LD_ADDR_VAR 0 1
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_OWVAR 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 69
25504: ST_TO_ADDR
// if not tmp then
25505: LD_VAR 0 1
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25514: LD_VAR 0 1
25518: PUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 12
25531: ARRAY
25532: PPUSH
25533: LD_INT 200
25535: PPUSH
25536: CALL_OW 234
// end ;
25540: PPOPN 1
25542: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25543: LD_EXP 37
25547: PUSH
25548: LD_EXP 66
25552: AND
25553: IFFALSE 25632
25555: GO 25557
25557: DISABLE
25558: LD_INT 0
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 1
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25606: LD_VAR 0 1
25610: PUSH
25611: LD_INT 1
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 12
25623: ARRAY
25624: PPUSH
25625: LD_INT 60
25627: PPUSH
25628: CALL_OW 234
// end ;
25632: PPOPN 1
25634: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25635: LD_EXP 37
25639: PUSH
25640: LD_EXP 67
25644: AND
25645: IFFALSE 25744
25647: GO 25649
25649: DISABLE
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
// begin enable ;
25654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 61
25674: PUSH
25675: EMPTY
25676: LIST
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: ST_TO_ADDR
// if not tmp then
25698: LD_VAR 0 1
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25744
// for i in tmp do
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: LD_VAR 0 1
25716: PUSH
25717: FOR_IN
25718: IFFALSE 25742
// if IsControledBy ( i ) then
25720: LD_VAR 0 2
25724: PPUSH
25725: CALL_OW 312
25729: IFFALSE 25740
// ComUnlink ( i ) ;
25731: LD_VAR 0 2
25735: PPUSH
25736: CALL_OW 136
25740: GO 25717
25742: POP
25743: POP
// end ;
25744: PPOPN 2
25746: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25747: LD_EXP 37
25751: PUSH
25752: LD_EXP 68
25756: AND
25757: IFFALSE 25897
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
// begin ToLua ( displayPowell(); ) ;
25766: LD_STRING displayPowell();
25768: PPUSH
25769: CALL_OW 559
// uc_side := 0 ;
25773: LD_ADDR_OWVAR 20
25777: PUSH
25778: LD_INT 0
25780: ST_TO_ADDR
// uc_nation := 2 ;
25781: LD_ADDR_OWVAR 21
25785: PUSH
25786: LD_INT 2
25788: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25789: LD_ADDR_OWVAR 37
25793: PUSH
25794: LD_INT 14
25796: ST_TO_ADDR
// vc_engine := engine_siberite ;
25797: LD_ADDR_OWVAR 39
25801: PUSH
25802: LD_INT 3
25804: ST_TO_ADDR
// vc_control := control_apeman ;
25805: LD_ADDR_OWVAR 38
25809: PUSH
25810: LD_INT 5
25812: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25813: LD_ADDR_OWVAR 40
25817: PUSH
25818: LD_INT 29
25820: ST_TO_ADDR
// un := CreateVehicle ;
25821: LD_ADDR_VAR 0 2
25825: PUSH
25826: CALL_OW 45
25830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25831: LD_VAR 0 2
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25843: LD_INT 35
25845: PPUSH
25846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PPUSH
25872: LD_VAR 0 2
25876: PPUSH
25877: CALL_OW 74
25881: PPUSH
25882: CALL_OW 115
// until IsDead ( un ) ;
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 301
25895: IFFALSE 25843
// end ;
25897: PPOPN 2
25899: END
// every 0 0$1 trigger StreamModeActive and sStu do
25900: LD_EXP 37
25904: PUSH
25905: LD_EXP 76
25909: AND
25910: IFFALSE 25926
25912: GO 25914
25914: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25915: LD_STRING displayStucuk();
25917: PPUSH
25918: CALL_OW 559
// ResetFog ;
25922: CALL_OW 335
// end ;
25926: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25927: LD_EXP 37
25931: PUSH
25932: LD_EXP 69
25936: AND
25937: IFFALSE 26078
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: LD_INT 22
25953: PUSH
25954: LD_OWVAR 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 21
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: ST_TO_ADDR
// if not tmp then
25982: LD_VAR 0 2
25986: NOT
25987: IFFALSE 25991
// exit ;
25989: GO 26078
// un := tmp [ rand ( 1 , tmp ) ] ;
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_VAR 0 2
26000: PUSH
26001: LD_INT 1
26003: PPUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: CALL_OW 12
26013: ARRAY
26014: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26015: LD_VAR 0 1
26019: PPUSH
26020: LD_INT 0
26022: PPUSH
26023: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26027: LD_VAR 0 1
26031: PPUSH
26032: LD_OWVAR 3
26036: PUSH
26037: LD_VAR 0 1
26041: DIFF
26042: PPUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 74
26052: PPUSH
26053: CALL_OW 115
// wait ( 0 0$20 ) ;
26057: LD_INT 700
26059: PPUSH
26060: CALL_OW 67
// SetSide ( un , your_side ) ;
26064: LD_VAR 0 1
26068: PPUSH
26069: LD_OWVAR 2
26073: PPUSH
26074: CALL_OW 235
// end ;
26078: PPOPN 2
26080: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26081: LD_EXP 37
26085: PUSH
26086: LD_EXP 70
26090: AND
26091: IFFALSE 26197
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 30
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 30
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: CALL_OW 69
26152: ST_TO_ADDR
// if not depot then
26153: LD_VAR 0 1
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26197
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26162: LD_VAR 0 1
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: CALL_OW 250
26175: PPUSH
26176: LD_VAR 0 1
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: PPUSH
26185: CALL_OW 251
26189: PPUSH
26190: LD_INT 70
26192: PPUSH
26193: CALL_OW 495
// end ;
26197: PPOPN 1
26199: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26200: LD_EXP 37
26204: PUSH
26205: LD_EXP 71
26209: AND
26210: IFFALSE 26421
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: ST_TO_ADDR
// if not tmp then
26258: LD_VAR 0 5
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26421
// for i in tmp do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_VAR 0 5
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26419
// begin d := rand ( 0 , 5 ) ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_INT 0
26287: PPUSH
26288: LD_INT 5
26290: PPUSH
26291: CALL_OW 12
26295: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 250
26310: PPUSH
26311: LD_VAR 0 4
26315: PPUSH
26316: LD_INT 3
26318: PPUSH
26319: LD_INT 12
26321: PPUSH
26322: CALL_OW 12
26326: PPUSH
26327: CALL_OW 272
26331: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 251
26346: PPUSH
26347: LD_VAR 0 4
26351: PPUSH
26352: LD_INT 3
26354: PPUSH
26355: LD_INT 12
26357: PPUSH
26358: CALL_OW 12
26362: PPUSH
26363: CALL_OW 273
26367: ST_TO_ADDR
// if ValidHex ( x , y ) then
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: CALL_OW 488
26382: IFFALSE 26417
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26384: LD_VAR 0 1
26388: PPUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: LD_INT 3
26401: PPUSH
26402: LD_INT 6
26404: PPUSH
26405: CALL_OW 12
26409: PPUSH
26410: LD_INT 1
26412: PPUSH
26413: CALL_OW 483
// end ;
26417: GO 26277
26419: POP
26420: POP
// end ;
26421: PPOPN 5
26423: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26424: LD_EXP 37
26428: PUSH
26429: LD_EXP 72
26433: AND
26434: IFFALSE 26528
26436: GO 26438
26438: DISABLE
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 32
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 21
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 69
26489: ST_TO_ADDR
// if not tmp then
26490: LD_VAR 0 2
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26528
// for i in tmp do
26499: LD_ADDR_VAR 0 1
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26526
// SetFuel ( i , 0 ) ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_INT 0
26519: PPUSH
26520: CALL_OW 240
26524: GO 26509
26526: POP
26527: POP
// end ;
26528: PPOPN 2
26530: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26531: LD_EXP 37
26535: PUSH
26536: LD_EXP 73
26540: AND
26541: IFFALSE 26607
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 30
26568: PUSH
26569: LD_INT 29
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 1
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26607
// DestroyUnit ( tmp [ 1 ] ) ;
26594: LD_VAR 0 1
26598: PUSH
26599: LD_INT 1
26601: ARRAY
26602: PPUSH
26603: CALL_OW 65
// end ;
26607: PPOPN 1
26609: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26610: LD_EXP 37
26614: PUSH
26615: LD_EXP 75
26619: AND
26620: IFFALSE 26749
26622: GO 26624
26624: DISABLE
26625: LD_INT 0
26627: PPUSH
// begin uc_side := 0 ;
26628: LD_ADDR_OWVAR 20
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// uc_nation := nation_arabian ;
26636: LD_ADDR_OWVAR 21
26640: PUSH
26641: LD_INT 2
26643: ST_TO_ADDR
// hc_gallery :=  ;
26644: LD_ADDR_OWVAR 33
26648: PUSH
26649: LD_STRING 
26651: ST_TO_ADDR
// hc_name :=  ;
26652: LD_ADDR_OWVAR 26
26656: PUSH
26657: LD_STRING 
26659: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26660: LD_INT 1
26662: PPUSH
26663: LD_INT 11
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 380
// un := CreateHuman ;
26673: LD_ADDR_VAR 0 1
26677: PUSH
26678: CALL_OW 44
26682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26683: LD_VAR 0 1
26687: PPUSH
26688: LD_INT 1
26690: PPUSH
26691: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26695: LD_INT 35
26697: PPUSH
26698: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_INT 22
26709: PUSH
26710: LD_OWVAR 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PPUSH
26719: CALL_OW 69
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 74
26733: PPUSH
26734: CALL_OW 115
// until IsDead ( un ) ;
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 301
26747: IFFALSE 26695
// end ;
26749: PPOPN 1
26751: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26752: LD_EXP 37
26756: PUSH
26757: LD_EXP 77
26761: AND
26762: IFFALSE 26774
26764: GO 26766
26766: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26767: LD_STRING earthquake(getX(game), 0, 32)
26769: PPUSH
26770: CALL_OW 559
26774: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26775: LD_EXP 37
26779: PUSH
26780: LD_EXP 78
26784: AND
26785: IFFALSE 26876
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin enable ;
26793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26794: LD_ADDR_VAR 0 1
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_OWVAR 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 33
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: ST_TO_ADDR
// if not tmp then
26841: LD_VAR 0 1
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 26876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26850: LD_VAR 0 1
26854: PUSH
26855: LD_INT 1
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 12
26867: ARRAY
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: CALL_OW 234
// end ;
26876: PPOPN 1
26878: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26879: LD_EXP 37
26883: PUSH
26884: LD_EXP 79
26888: AND
26889: IFFALSE 27030
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 25
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 3
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27030
// un := tmp [ rand ( 1 , tmp ) ] ;
26944: LD_ADDR_VAR 0 2
26948: PUSH
26949: LD_VAR 0 3
26953: PUSH
26954: LD_INT 1
26956: PPUSH
26957: LD_VAR 0 3
26961: PPUSH
26962: CALL_OW 12
26966: ARRAY
26967: ST_TO_ADDR
// if Crawls ( un ) then
26968: LD_VAR 0 2
26972: PPUSH
26973: CALL_OW 318
26977: IFFALSE 26988
// ComWalk ( un ) ;
26979: LD_VAR 0 2
26983: PPUSH
26984: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26988: LD_VAR 0 2
26992: PPUSH
26993: LD_INT 9
26995: PPUSH
26996: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27000: LD_INT 28
27002: PPUSH
27003: LD_OWVAR 2
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27015: LD_INT 29
27017: PPUSH
27018: LD_OWVAR 2
27022: PPUSH
27023: LD_INT 2
27025: PPUSH
27026: CALL_OW 322
// end ;
27030: PPOPN 3
27032: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27033: LD_EXP 37
27037: PUSH
27038: LD_EXP 80
27042: AND
27043: IFFALSE 27154
27045: GO 27047
27047: DISABLE
27048: LD_INT 0
27050: PPUSH
27051: PPUSH
27052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_OWVAR 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 25
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 69
27088: ST_TO_ADDR
// if not tmp then
27089: LD_VAR 0 3
27093: NOT
27094: IFFALSE 27098
// exit ;
27096: GO 27154
// un := tmp [ rand ( 1 , tmp ) ] ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_VAR 0 3
27107: PUSH
27108: LD_INT 1
27110: PPUSH
27111: LD_VAR 0 3
27115: PPUSH
27116: CALL_OW 12
27120: ARRAY
27121: ST_TO_ADDR
// if Crawls ( un ) then
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 318
27131: IFFALSE 27142
// ComWalk ( un ) ;
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_INT 8
27149: PPUSH
27150: CALL_OW 336
// end ;
27154: PPOPN 3
27156: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27157: LD_EXP 37
27161: PUSH
27162: LD_EXP 81
27166: AND
27167: IFFALSE 27311
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_OWVAR 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 21
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 34
27208: PUSH
27209: LD_INT 12
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 34
27218: PUSH
27219: LD_INT 51
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 34
27228: PUSH
27229: LD_INT 32
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 2
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27311
// for i in tmp do
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_VAR 0 2
27270: PUSH
27271: FOR_IN
27272: IFFALSE 27309
// if GetCargo ( i , mat_artifact ) = 0 then
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_INT 4
27281: PPUSH
27282: CALL_OW 289
27286: PUSH
27287: LD_INT 0
27289: EQUAL
27290: IFFALSE 27307
// SetCargo ( i , mat_siberit , 100 ) ;
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_INT 3
27299: PPUSH
27300: LD_INT 100
27302: PPUSH
27303: CALL_OW 290
27307: GO 27271
27309: POP
27310: POP
// end ;
27311: PPOPN 2
27313: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27314: LD_EXP 37
27318: PUSH
27319: LD_EXP 82
27323: AND
27324: IFFALSE 27507
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_OWVAR 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ST_TO_ADDR
// if not tmp then
27355: LD_VAR 0 2
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27507
// for i := 1 to 2 do
27364: LD_ADDR_VAR 0 1
27368: PUSH
27369: DOUBLE
27370: LD_INT 1
27372: DEC
27373: ST_TO_ADDR
27374: LD_INT 2
27376: PUSH
27377: FOR_TO
27378: IFFALSE 27505
// begin uc_side := your_side ;
27380: LD_ADDR_OWVAR 20
27384: PUSH
27385: LD_OWVAR 2
27389: ST_TO_ADDR
// uc_nation := nation_american ;
27390: LD_ADDR_OWVAR 21
27394: PUSH
27395: LD_INT 1
27397: ST_TO_ADDR
// vc_chassis := us_morphling ;
27398: LD_ADDR_OWVAR 37
27402: PUSH
27403: LD_INT 5
27405: ST_TO_ADDR
// vc_engine := engine_siberite ;
27406: LD_ADDR_OWVAR 39
27410: PUSH
27411: LD_INT 3
27413: ST_TO_ADDR
// vc_control := control_computer ;
27414: LD_ADDR_OWVAR 38
27418: PUSH
27419: LD_INT 3
27421: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27422: LD_ADDR_OWVAR 40
27426: PUSH
27427: LD_INT 10
27429: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: CALL_OW 310
27443: NOT
27444: IFFALSE 27491
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27446: CALL_OW 45
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_INT 1
27458: ARRAY
27459: PPUSH
27460: CALL_OW 250
27464: PPUSH
27465: LD_VAR 0 2
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: CALL_OW 251
27478: PPUSH
27479: LD_INT 12
27481: PPUSH
27482: LD_INT 1
27484: PPUSH
27485: CALL_OW 50
27489: GO 27503
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27491: CALL_OW 45
27495: PPUSH
27496: LD_INT 1
27498: PPUSH
27499: CALL_OW 51
// end ;
27503: GO 27377
27505: POP
27506: POP
// end ;
27507: PPOPN 2
27509: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27510: LD_EXP 37
27514: PUSH
27515: LD_EXP 83
27519: AND
27520: IFFALSE 27742
27522: GO 27524
27524: DISABLE
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27533: LD_ADDR_VAR 0 6
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 21
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: LD_INT 23
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: PPUSH
27582: CALL_OW 69
27586: ST_TO_ADDR
// if not tmp then
27587: LD_VAR 0 6
27591: NOT
27592: IFFALSE 27596
// exit ;
27594: GO 27742
// s1 := rand ( 1 , 4 ) ;
27596: LD_ADDR_VAR 0 2
27600: PUSH
27601: LD_INT 1
27603: PPUSH
27604: LD_INT 4
27606: PPUSH
27607: CALL_OW 12
27611: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_VAR 0 6
27621: PUSH
27622: LD_INT 1
27624: ARRAY
27625: PPUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 259
27635: ST_TO_ADDR
// if s1 = 1 then
27636: LD_VAR 0 2
27640: PUSH
27641: LD_INT 1
27643: EQUAL
27644: IFFALSE 27664
// s2 := rand ( 2 , 4 ) else
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 2
27653: PPUSH
27654: LD_INT 4
27656: PPUSH
27657: CALL_OW 12
27661: ST_TO_ADDR
27662: GO 27672
// s2 := 1 ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_INT 1
27671: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_VAR 0 6
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 3
27690: PPUSH
27691: CALL_OW 259
27695: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27696: LD_VAR 0 6
27700: PUSH
27701: LD_INT 1
27703: ARRAY
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 5
27714: PPUSH
27715: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27719: LD_VAR 0 6
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: LD_VAR 0 3
27732: PPUSH
27733: LD_VAR 0 4
27737: PPUSH
27738: CALL_OW 237
// end ;
27742: PPOPN 6
27744: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27745: LD_EXP 37
27749: PUSH
27750: LD_EXP 84
27754: AND
27755: IFFALSE 27834
27757: GO 27759
27759: DISABLE
27760: LD_INT 0
27762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_INT 22
27770: PUSH
27771: LD_OWVAR 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 30
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 69
27798: ST_TO_ADDR
// if not tmp then
27799: LD_VAR 0 1
27803: NOT
27804: IFFALSE 27808
// exit ;
27806: GO 27834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27808: LD_VAR 0 1
27812: PUSH
27813: LD_INT 1
27815: PPUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: CALL_OW 12
27825: ARRAY
27826: PPUSH
27827: LD_INT 1
27829: PPUSH
27830: CALL_OW 234
// end ;
27834: PPOPN 1
27836: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27837: LD_EXP 37
27841: PUSH
27842: LD_EXP 85
27846: AND
27847: IFFALSE 27959
27849: GO 27851
27851: DISABLE
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_OWVAR 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 27
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 26
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: LD_INT 28
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: ST_TO_ADDR
// if not tmp then
27921: LD_VAR 0 2
27925: NOT
27926: IFFALSE 27930
// exit ;
27928: GO 27959
// for i in tmp do
27930: LD_ADDR_VAR 0 1
27934: PUSH
27935: LD_VAR 0 2
27939: PUSH
27940: FOR_IN
27941: IFFALSE 27957
// SetLives ( i , 1 ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: CALL_OW 234
27955: GO 27940
27957: POP
27958: POP
// end ;
27959: PPOPN 2
27961: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27962: LD_EXP 37
27966: PUSH
27967: LD_EXP 86
27971: AND
27972: IFFALSE 28259
27974: GO 27976
27976: DISABLE
27977: LD_INT 0
27979: PPUSH
27980: PPUSH
27981: PPUSH
// begin i := rand ( 1 , 7 ) ;
27982: LD_ADDR_VAR 0 1
27986: PUSH
27987: LD_INT 1
27989: PPUSH
27990: LD_INT 7
27992: PPUSH
27993: CALL_OW 12
27997: ST_TO_ADDR
// case i of 1 :
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28021
28011: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28012: LD_STRING earthquake(getX(game), 0, 32)
28014: PPUSH
28015: CALL_OW 559
28019: GO 28259
28021: LD_INT 2
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28043
28029: POP
// begin ToLua ( displayStucuk(); ) ;
28030: LD_STRING displayStucuk();
28032: PPUSH
28033: CALL_OW 559
// ResetFog ;
28037: CALL_OW 335
// end ; 3 :
28041: GO 28259
28043: LD_INT 3
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28155
28051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 25
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PPUSH
28083: CALL_OW 69
28087: ST_TO_ADDR
// if not tmp then
28088: LD_VAR 0 2
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28259
// un := tmp [ rand ( 1 , tmp ) ] ;
28097: LD_ADDR_VAR 0 3
28101: PUSH
28102: LD_VAR 0 2
28106: PUSH
28107: LD_INT 1
28109: PPUSH
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 12
28119: ARRAY
28120: ST_TO_ADDR
// if Crawls ( un ) then
28121: LD_VAR 0 3
28125: PPUSH
28126: CALL_OW 318
28130: IFFALSE 28141
// ComWalk ( un ) ;
28132: LD_VAR 0 3
28136: PPUSH
28137: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28141: LD_VAR 0 3
28145: PPUSH
28146: LD_INT 8
28148: PPUSH
28149: CALL_OW 336
// end ; 4 :
28153: GO 28259
28155: LD_INT 4
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28237
28163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28164: LD_ADDR_VAR 0 2
28168: PUSH
28169: LD_INT 22
28171: PUSH
28172: LD_OWVAR 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 30
28183: PUSH
28184: LD_INT 29
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PPUSH
28195: CALL_OW 69
28199: ST_TO_ADDR
// if not tmp then
28200: LD_VAR 0 2
28204: NOT
28205: IFFALSE 28209
// exit ;
28207: GO 28259
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28209: LD_VAR 0 2
28213: PUSH
28214: LD_INT 1
28216: ARRAY
28217: PPUSH
28218: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28222: LD_VAR 0 2
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PPUSH
28231: CALL_OW 65
// end ; 5 .. 7 :
28235: GO 28259
28237: LD_INT 5
28239: DOUBLE
28240: GREATEREQUAL
28241: IFFALSE 28249
28243: LD_INT 7
28245: DOUBLE
28246: LESSEQUAL
28247: IFTRUE 28251
28249: GO 28258
28251: POP
// StreamSibBomb ; end ;
28252: CALL 24496 0 0
28256: GO 28259
28258: POP
// end ;
28259: PPOPN 3
28261: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28262: LD_EXP 37
28266: PUSH
28267: LD_EXP 87
28271: AND
28272: IFFALSE 28428
28274: GO 28276
28276: DISABLE
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
28281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28282: LD_ADDR_VAR 0 2
28286: PUSH
28287: LD_INT 81
28289: PUSH
28290: LD_OWVAR 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 21
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 21
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28428
// p := 0 ;
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28353: LD_INT 35
28355: PPUSH
28356: CALL_OW 67
// p := p + 1 ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 3
28369: PUSH
28370: LD_INT 1
28372: PLUS
28373: ST_TO_ADDR
// for i in tmp do
28374: LD_ADDR_VAR 0 1
28378: PUSH
28379: LD_VAR 0 2
28383: PUSH
28384: FOR_IN
28385: IFFALSE 28416
// if GetLives ( i ) < 1000 then
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 256
28396: PUSH
28397: LD_INT 1000
28399: LESS
28400: IFFALSE 28414
// SetLives ( i , 1000 ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: LD_INT 1000
28409: PPUSH
28410: CALL_OW 234
28414: GO 28384
28416: POP
28417: POP
// until p > 20 ;
28418: LD_VAR 0 3
28422: PUSH
28423: LD_INT 20
28425: GREATER
28426: IFFALSE 28353
// end ;
28428: PPOPN 3
28430: END
// every 0 0$1 trigger StreamModeActive and sTime do
28431: LD_EXP 37
28435: PUSH
28436: LD_EXP 88
28440: AND
28441: IFFALSE 28476
28443: GO 28445
28445: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28446: LD_INT 28
28448: PPUSH
28449: LD_OWVAR 2
28453: PPUSH
28454: LD_INT 2
28456: PPUSH
28457: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28461: LD_INT 30
28463: PPUSH
28464: LD_OWVAR 2
28468: PPUSH
28469: LD_INT 2
28471: PPUSH
28472: CALL_OW 322
// end ;
28476: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28477: LD_EXP 37
28481: PUSH
28482: LD_EXP 89
28486: AND
28487: IFFALSE 28608
28489: GO 28491
28491: DISABLE
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 22
28503: PUSH
28504: LD_OWVAR 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 23
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: PPUSH
28545: CALL_OW 69
28549: ST_TO_ADDR
// if not tmp then
28550: LD_VAR 0 2
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28608
// for i in tmp do
28559: LD_ADDR_VAR 0 1
28563: PUSH
28564: LD_VAR 0 2
28568: PUSH
28569: FOR_IN
28570: IFFALSE 28606
// begin if Crawls ( i ) then
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL_OW 318
28581: IFFALSE 28592
// ComWalk ( i ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 138
// SetClass ( i , 2 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 2
28599: PPUSH
28600: CALL_OW 336
// end ;
28604: GO 28569
28606: POP
28607: POP
// end ;
28608: PPOPN 2
28610: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28611: LD_EXP 37
28615: PUSH
28616: LD_EXP 90
28620: AND
28621: IFFALSE 28909
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28631: LD_OWVAR 2
28635: PPUSH
28636: LD_INT 9
28638: PPUSH
28639: LD_INT 1
28641: PPUSH
28642: LD_INT 1
28644: PPUSH
28645: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28649: LD_INT 9
28651: PPUSH
28652: LD_OWVAR 2
28656: PPUSH
28657: CALL_OW 343
// uc_side := 9 ;
28661: LD_ADDR_OWVAR 20
28665: PUSH
28666: LD_INT 9
28668: ST_TO_ADDR
// uc_nation := 2 ;
28669: LD_ADDR_OWVAR 21
28673: PUSH
28674: LD_INT 2
28676: ST_TO_ADDR
// hc_name := Dark Warrior ;
28677: LD_ADDR_OWVAR 26
28681: PUSH
28682: LD_STRING Dark Warrior
28684: ST_TO_ADDR
// hc_gallery :=  ;
28685: LD_ADDR_OWVAR 33
28689: PUSH
28690: LD_STRING 
28692: ST_TO_ADDR
// hc_noskilllimit := true ;
28693: LD_ADDR_OWVAR 76
28697: PUSH
28698: LD_INT 1
28700: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28701: LD_ADDR_OWVAR 31
28705: PUSH
28706: LD_INT 30
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 30
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// un := CreateHuman ;
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: CALL_OW 44
28733: ST_TO_ADDR
// hc_noskilllimit := false ;
28734: LD_ADDR_OWVAR 76
28738: PUSH
28739: LD_INT 0
28741: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28742: LD_VAR 0 3
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 51
// ToLua ( playRanger() ) ;
28754: LD_STRING playRanger()
28756: PPUSH
28757: CALL_OW 559
// p := 0 ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_INT 0
28768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28769: LD_INT 35
28771: PPUSH
28772: CALL_OW 67
// p := p + 1 ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_VAR 0 2
28785: PUSH
28786: LD_INT 1
28788: PLUS
28789: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 256
28799: PUSH
28800: LD_INT 1000
28802: LESS
28803: IFFALSE 28817
// SetLives ( un , 1000 ) ;
28805: LD_VAR 0 3
28809: PPUSH
28810: LD_INT 1000
28812: PPUSH
28813: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_INT 81
28824: PUSH
28825: LD_OWVAR 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 91
28836: PUSH
28837: LD_VAR 0 3
28841: PUSH
28842: LD_INT 30
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: PPUSH
28859: LD_VAR 0 3
28863: PPUSH
28864: CALL_OW 74
28868: PPUSH
28869: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28873: LD_VAR 0 2
28877: PUSH
28878: LD_INT 80
28880: GREATER
28881: PUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 301
28891: OR
28892: IFFALSE 28769
// if un then
28894: LD_VAR 0 3
28898: IFFALSE 28909
// RemoveUnit ( un ) ;
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 64
// end ;
28909: PPOPN 3
28911: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28912: LD_EXP 91
28916: IFFALSE 29032
28918: GO 28920
28920: DISABLE
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
28925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28926: LD_ADDR_VAR 0 2
28930: PUSH
28931: LD_INT 81
28933: PUSH
28934: LD_OWVAR 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 21
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28962: LD_STRING playComputer()
28964: PPUSH
28965: CALL_OW 559
// if not tmp then
28969: LD_VAR 0 2
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29032
// for i in tmp do
28978: LD_ADDR_VAR 0 1
28982: PUSH
28983: LD_VAR 0 2
28987: PUSH
28988: FOR_IN
28989: IFFALSE 29030
// for j := 1 to 4 do
28991: LD_ADDR_VAR 0 3
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_INT 4
29003: PUSH
29004: FOR_TO
29005: IFFALSE 29026
// SetSkill ( i , j , 10 ) ;
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_VAR 0 3
29016: PPUSH
29017: LD_INT 10
29019: PPUSH
29020: CALL_OW 237
29024: GO 29004
29026: POP
29027: POP
29028: GO 28988
29030: POP
29031: POP
// end ;
29032: PPOPN 3
29034: END
// every 0 0$1 trigger s30 do var i , tmp ;
29035: LD_EXP 92
29039: IFFALSE 29108
29041: GO 29043
29043: DISABLE
29044: LD_INT 0
29046: PPUSH
29047: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29048: LD_ADDR_VAR 0 2
29052: PUSH
29053: LD_INT 22
29055: PUSH
29056: LD_OWVAR 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29108
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29106
// SetLives ( i , 300 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_INT 300
29099: PPUSH
29100: CALL_OW 234
29104: GO 29089
29106: POP
29107: POP
// end ;
29108: PPOPN 2
29110: END
// every 0 0$1 trigger s60 do var i , tmp ;
29111: LD_EXP 93
29115: IFFALSE 29184
29117: GO 29119
29119: DISABLE
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 69
29145: ST_TO_ADDR
// if not tmp then
29146: LD_VAR 0 2
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29184
// for i in tmp do
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_VAR 0 2
29164: PUSH
29165: FOR_IN
29166: IFFALSE 29182
// SetLives ( i , 600 ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_INT 600
29175: PPUSH
29176: CALL_OW 234
29180: GO 29165
29182: POP
29183: POP
// end ;
29184: PPOPN 2
29186: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29187: LD_INT 0
29189: PPUSH
// case cmd of 301 :
29190: LD_VAR 0 1
29194: PUSH
29195: LD_INT 301
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29235
29203: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29204: LD_VAR 0 6
29208: PPUSH
29209: LD_VAR 0 7
29213: PPUSH
29214: LD_VAR 0 8
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: LD_VAR 0 5
29228: PPUSH
29229: CALL 30436 0 5
29233: GO 29356
29235: LD_INT 302
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29280
29243: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29244: LD_VAR 0 6
29248: PPUSH
29249: LD_VAR 0 7
29253: PPUSH
29254: LD_VAR 0 8
29258: PPUSH
29259: LD_VAR 0 9
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL 30527 0 6
29278: GO 29356
29280: LD_INT 303
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29325
29288: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29289: LD_VAR 0 6
29293: PPUSH
29294: LD_VAR 0 7
29298: PPUSH
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 29361 0 6
29323: GO 29356
29325: LD_INT 304
29327: DOUBLE
29328: EQUAL
29329: IFTRUE 29333
29331: GO 29355
29333: POP
// hHackTeleport ( unit , x , y ) ; end ;
29334: LD_VAR 0 2
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: LD_VAR 0 5
29348: PPUSH
29349: CALL 31120 0 3
29353: GO 29356
29355: POP
// end ;
29356: LD_VAR 0 12
29360: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29365: LD_VAR 0 1
29369: PUSH
29370: LD_INT 1
29372: LESS
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 3
29381: GREATER
29382: OR
29383: PUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: LD_VAR 0 6
29393: PPUSH
29394: CALL_OW 428
29398: OR
29399: IFFALSE 29403
// exit ;
29401: GO 30123
// uc_side := your_side ;
29403: LD_ADDR_OWVAR 20
29407: PUSH
29408: LD_OWVAR 2
29412: ST_TO_ADDR
// uc_nation := nation ;
29413: LD_ADDR_OWVAR 21
29417: PUSH
29418: LD_VAR 0 1
29422: ST_TO_ADDR
// bc_level = 1 ;
29423: LD_ADDR_OWVAR 43
29427: PUSH
29428: LD_INT 1
29430: ST_TO_ADDR
// case btype of 1 :
29431: LD_VAR 0 2
29435: PUSH
29436: LD_INT 1
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29455
29444: POP
// bc_type := b_depot ; 2 :
29445: LD_ADDR_OWVAR 42
29449: PUSH
29450: LD_INT 0
29452: ST_TO_ADDR
29453: GO 30067
29455: LD_INT 2
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29474
29463: POP
// bc_type := b_warehouse ; 3 :
29464: LD_ADDR_OWVAR 42
29468: PUSH
29469: LD_INT 1
29471: ST_TO_ADDR
29472: GO 30067
29474: LD_INT 3
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29493
29482: POP
// bc_type := b_lab ; 4 .. 9 :
29483: LD_ADDR_OWVAR 42
29487: PUSH
29488: LD_INT 6
29490: ST_TO_ADDR
29491: GO 30067
29493: LD_INT 4
29495: DOUBLE
29496: GREATEREQUAL
29497: IFFALSE 29505
29499: LD_INT 9
29501: DOUBLE
29502: LESSEQUAL
29503: IFTRUE 29507
29505: GO 29559
29507: POP
// begin bc_type := b_lab_half ;
29508: LD_ADDR_OWVAR 42
29512: PUSH
29513: LD_INT 7
29515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29516: LD_ADDR_OWVAR 44
29520: PUSH
29521: LD_INT 10
29523: PUSH
29524: LD_INT 11
29526: PUSH
29527: LD_INT 12
29529: PUSH
29530: LD_INT 15
29532: PUSH
29533: LD_INT 14
29535: PUSH
29536: LD_INT 13
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_VAR 0 2
29551: PUSH
29552: LD_INT 3
29554: MINUS
29555: ARRAY
29556: ST_TO_ADDR
// end ; 10 .. 13 :
29557: GO 30067
29559: LD_INT 10
29561: DOUBLE
29562: GREATEREQUAL
29563: IFFALSE 29571
29565: LD_INT 13
29567: DOUBLE
29568: LESSEQUAL
29569: IFTRUE 29573
29571: GO 29650
29573: POP
// begin bc_type := b_lab_full ;
29574: LD_ADDR_OWVAR 42
29578: PUSH
29579: LD_INT 8
29581: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29582: LD_ADDR_OWVAR 44
29586: PUSH
29587: LD_INT 10
29589: PUSH
29590: LD_INT 12
29592: PUSH
29593: LD_INT 14
29595: PUSH
29596: LD_INT 13
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: PUSH
29605: LD_VAR 0 2
29609: PUSH
29610: LD_INT 9
29612: MINUS
29613: ARRAY
29614: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29615: LD_ADDR_OWVAR 45
29619: PUSH
29620: LD_INT 11
29622: PUSH
29623: LD_INT 15
29625: PUSH
29626: LD_INT 12
29628: PUSH
29629: LD_INT 15
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: PUSH
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 9
29645: MINUS
29646: ARRAY
29647: ST_TO_ADDR
// end ; 14 :
29648: GO 30067
29650: LD_INT 14
29652: DOUBLE
29653: EQUAL
29654: IFTRUE 29658
29656: GO 29669
29658: POP
// bc_type := b_workshop ; 15 :
29659: LD_ADDR_OWVAR 42
29663: PUSH
29664: LD_INT 2
29666: ST_TO_ADDR
29667: GO 30067
29669: LD_INT 15
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29677
29675: GO 29688
29677: POP
// bc_type := b_factory ; 16 :
29678: LD_ADDR_OWVAR 42
29682: PUSH
29683: LD_INT 3
29685: ST_TO_ADDR
29686: GO 30067
29688: LD_INT 16
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29696
29694: GO 29707
29696: POP
// bc_type := b_ext_gun ; 17 :
29697: LD_ADDR_OWVAR 42
29701: PUSH
29702: LD_INT 17
29704: ST_TO_ADDR
29705: GO 30067
29707: LD_INT 17
29709: DOUBLE
29710: EQUAL
29711: IFTRUE 29715
29713: GO 29743
29715: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29716: LD_ADDR_OWVAR 42
29720: PUSH
29721: LD_INT 19
29723: PUSH
29724: LD_INT 23
29726: PUSH
29727: LD_INT 19
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: PUSH
29735: LD_VAR 0 1
29739: ARRAY
29740: ST_TO_ADDR
29741: GO 30067
29743: LD_INT 18
29745: DOUBLE
29746: EQUAL
29747: IFTRUE 29751
29749: GO 29762
29751: POP
// bc_type := b_ext_radar ; 19 :
29752: LD_ADDR_OWVAR 42
29756: PUSH
29757: LD_INT 20
29759: ST_TO_ADDR
29760: GO 30067
29762: LD_INT 19
29764: DOUBLE
29765: EQUAL
29766: IFTRUE 29770
29768: GO 29781
29770: POP
// bc_type := b_ext_radio ; 20 :
29771: LD_ADDR_OWVAR 42
29775: PUSH
29776: LD_INT 22
29778: ST_TO_ADDR
29779: GO 30067
29781: LD_INT 20
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 29800
29789: POP
// bc_type := b_ext_siberium ; 21 :
29790: LD_ADDR_OWVAR 42
29794: PUSH
29795: LD_INT 21
29797: ST_TO_ADDR
29798: GO 30067
29800: LD_INT 21
29802: DOUBLE
29803: EQUAL
29804: IFTRUE 29808
29806: GO 29819
29808: POP
// bc_type := b_ext_computer ; 22 :
29809: LD_ADDR_OWVAR 42
29813: PUSH
29814: LD_INT 24
29816: ST_TO_ADDR
29817: GO 30067
29819: LD_INT 22
29821: DOUBLE
29822: EQUAL
29823: IFTRUE 29827
29825: GO 29838
29827: POP
// bc_type := b_ext_track ; 23 :
29828: LD_ADDR_OWVAR 42
29832: PUSH
29833: LD_INT 16
29835: ST_TO_ADDR
29836: GO 30067
29838: LD_INT 23
29840: DOUBLE
29841: EQUAL
29842: IFTRUE 29846
29844: GO 29857
29846: POP
// bc_type := b_ext_laser ; 24 :
29847: LD_ADDR_OWVAR 42
29851: PUSH
29852: LD_INT 25
29854: ST_TO_ADDR
29855: GO 30067
29857: LD_INT 24
29859: DOUBLE
29860: EQUAL
29861: IFTRUE 29865
29863: GO 29876
29865: POP
// bc_type := b_control_tower ; 25 :
29866: LD_ADDR_OWVAR 42
29870: PUSH
29871: LD_INT 36
29873: ST_TO_ADDR
29874: GO 30067
29876: LD_INT 25
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 29895
29884: POP
// bc_type := b_breastwork ; 26 :
29885: LD_ADDR_OWVAR 42
29889: PUSH
29890: LD_INT 31
29892: ST_TO_ADDR
29893: GO 30067
29895: LD_INT 26
29897: DOUBLE
29898: EQUAL
29899: IFTRUE 29903
29901: GO 29914
29903: POP
// bc_type := b_bunker ; 27 :
29904: LD_ADDR_OWVAR 42
29908: PUSH
29909: LD_INT 32
29911: ST_TO_ADDR
29912: GO 30067
29914: LD_INT 27
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 29933
29922: POP
// bc_type := b_turret ; 28 :
29923: LD_ADDR_OWVAR 42
29927: PUSH
29928: LD_INT 33
29930: ST_TO_ADDR
29931: GO 30067
29933: LD_INT 28
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 29952
29941: POP
// bc_type := b_armoury ; 29 :
29942: LD_ADDR_OWVAR 42
29946: PUSH
29947: LD_INT 4
29949: ST_TO_ADDR
29950: GO 30067
29952: LD_INT 29
29954: DOUBLE
29955: EQUAL
29956: IFTRUE 29960
29958: GO 29971
29960: POP
// bc_type := b_barracks ; 30 :
29961: LD_ADDR_OWVAR 42
29965: PUSH
29966: LD_INT 5
29968: ST_TO_ADDR
29969: GO 30067
29971: LD_INT 30
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 29990
29979: POP
// bc_type := b_solar_power ; 31 :
29980: LD_ADDR_OWVAR 42
29984: PUSH
29985: LD_INT 27
29987: ST_TO_ADDR
29988: GO 30067
29990: LD_INT 31
29992: DOUBLE
29993: EQUAL
29994: IFTRUE 29998
29996: GO 30009
29998: POP
// bc_type := b_oil_power ; 32 :
29999: LD_ADDR_OWVAR 42
30003: PUSH
30004: LD_INT 26
30006: ST_TO_ADDR
30007: GO 30067
30009: LD_INT 32
30011: DOUBLE
30012: EQUAL
30013: IFTRUE 30017
30015: GO 30028
30017: POP
// bc_type := b_siberite_power ; 33 :
30018: LD_ADDR_OWVAR 42
30022: PUSH
30023: LD_INT 28
30025: ST_TO_ADDR
30026: GO 30067
30028: LD_INT 33
30030: DOUBLE
30031: EQUAL
30032: IFTRUE 30036
30034: GO 30047
30036: POP
// bc_type := b_oil_mine ; 34 :
30037: LD_ADDR_OWVAR 42
30041: PUSH
30042: LD_INT 29
30044: ST_TO_ADDR
30045: GO 30067
30047: LD_INT 34
30049: DOUBLE
30050: EQUAL
30051: IFTRUE 30055
30053: GO 30066
30055: POP
// bc_type := b_siberite_mine ; end ;
30056: LD_ADDR_OWVAR 42
30060: PUSH
30061: LD_INT 30
30063: ST_TO_ADDR
30064: GO 30067
30066: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30067: LD_ADDR_VAR 0 8
30071: PUSH
30072: LD_VAR 0 5
30076: PPUSH
30077: LD_VAR 0 6
30081: PPUSH
30082: LD_VAR 0 3
30086: PPUSH
30087: CALL_OW 47
30091: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30092: LD_OWVAR 42
30096: PUSH
30097: LD_INT 32
30099: PUSH
30100: LD_INT 33
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: IN
30107: IFFALSE 30123
// PlaceWeaponTurret ( b , weapon ) ;
30109: LD_VAR 0 8
30113: PPUSH
30114: LD_VAR 0 4
30118: PPUSH
30119: CALL_OW 431
// end ;
30123: LD_VAR 0 7
30127: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30128: LD_INT 0
30130: PPUSH
30131: PPUSH
30132: PPUSH
30133: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30134: LD_ADDR_VAR 0 4
30138: PUSH
30139: LD_INT 22
30141: PUSH
30142: LD_OWVAR 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 30
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: ST_TO_ADDR
// if not tmp then
30188: LD_VAR 0 4
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30256
// for i in tmp do
30197: LD_ADDR_VAR 0 2
30201: PUSH
30202: LD_VAR 0 4
30206: PUSH
30207: FOR_IN
30208: IFFALSE 30254
// for j = 1 to 3 do
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: DOUBLE
30216: LD_INT 1
30218: DEC
30219: ST_TO_ADDR
30220: LD_INT 3
30222: PUSH
30223: FOR_TO
30224: IFFALSE 30250
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 274
30235: PPUSH
30236: LD_VAR 0 3
30240: PPUSH
30241: LD_INT 99999
30243: PPUSH
30244: CALL_OW 277
30248: GO 30223
30250: POP
30251: POP
30252: GO 30207
30254: POP
30255: POP
// end ;
30256: LD_VAR 0 1
30260: RET
// export function hHackSetLevel10 ; var i , j ; begin
30261: LD_INT 0
30263: PPUSH
30264: PPUSH
30265: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30266: LD_ADDR_VAR 0 2
30270: PUSH
30271: LD_INT 21
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PPUSH
30281: CALL_OW 69
30285: PUSH
30286: FOR_IN
30287: IFFALSE 30339
// if IsSelected ( i ) then
30289: LD_VAR 0 2
30293: PPUSH
30294: CALL_OW 306
30298: IFFALSE 30337
// begin for j := 1 to 4 do
30300: LD_ADDR_VAR 0 3
30304: PUSH
30305: DOUBLE
30306: LD_INT 1
30308: DEC
30309: ST_TO_ADDR
30310: LD_INT 4
30312: PUSH
30313: FOR_TO
30314: IFFALSE 30335
// SetSkill ( i , j , 10 ) ;
30316: LD_VAR 0 2
30320: PPUSH
30321: LD_VAR 0 3
30325: PPUSH
30326: LD_INT 10
30328: PPUSH
30329: CALL_OW 237
30333: GO 30313
30335: POP
30336: POP
// end ;
30337: GO 30286
30339: POP
30340: POP
// end ;
30341: LD_VAR 0 1
30345: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
30350: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30351: LD_ADDR_VAR 0 2
30355: PUSH
30356: LD_INT 22
30358: PUSH
30359: LD_OWVAR 2
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 21
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: CALL_OW 69
30386: PUSH
30387: FOR_IN
30388: IFFALSE 30429
// begin for j := 1 to 4 do
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: DOUBLE
30396: LD_INT 1
30398: DEC
30399: ST_TO_ADDR
30400: LD_INT 4
30402: PUSH
30403: FOR_TO
30404: IFFALSE 30425
// SetSkill ( i , j , 10 ) ;
30406: LD_VAR 0 2
30410: PPUSH
30411: LD_VAR 0 3
30415: PPUSH
30416: LD_INT 10
30418: PPUSH
30419: CALL_OW 237
30423: GO 30403
30425: POP
30426: POP
// end ;
30427: GO 30387
30429: POP
30430: POP
// end ;
30431: LD_VAR 0 1
30435: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30436: LD_INT 0
30438: PPUSH
// uc_side := your_side ;
30439: LD_ADDR_OWVAR 20
30443: PUSH
30444: LD_OWVAR 2
30448: ST_TO_ADDR
// uc_nation := nation ;
30449: LD_ADDR_OWVAR 21
30453: PUSH
30454: LD_VAR 0 1
30458: ST_TO_ADDR
// InitHc ;
30459: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30463: LD_INT 0
30465: PPUSH
30466: LD_VAR 0 2
30470: PPUSH
30471: LD_VAR 0 3
30475: PPUSH
30476: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30480: LD_VAR 0 4
30484: PPUSH
30485: LD_VAR 0 5
30489: PPUSH
30490: CALL_OW 428
30494: PUSH
30495: LD_INT 0
30497: EQUAL
30498: IFFALSE 30522
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30500: CALL_OW 44
30504: PPUSH
30505: LD_VAR 0 4
30509: PPUSH
30510: LD_VAR 0 5
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 48
// end ;
30522: LD_VAR 0 6
30526: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30527: LD_INT 0
30529: PPUSH
30530: PPUSH
// uc_side := your_side ;
30531: LD_ADDR_OWVAR 20
30535: PUSH
30536: LD_OWVAR 2
30540: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30541: LD_VAR 0 1
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: LD_INT 4
30557: PUSH
30558: LD_INT 5
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: IN
30568: IFFALSE 30580
// uc_nation := nation_american else
30570: LD_ADDR_OWVAR 21
30574: PUSH
30575: LD_INT 1
30577: ST_TO_ADDR
30578: GO 30623
// if chassis in [ 11 , 12 , 13 , 14 ] then
30580: LD_VAR 0 1
30584: PUSH
30585: LD_INT 11
30587: PUSH
30588: LD_INT 12
30590: PUSH
30591: LD_INT 13
30593: PUSH
30594: LD_INT 14
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: IN
30603: IFFALSE 30615
// uc_nation := nation_arabian else
30605: LD_ADDR_OWVAR 21
30609: PUSH
30610: LD_INT 2
30612: ST_TO_ADDR
30613: GO 30623
// uc_nation := nation_russian ;
30615: LD_ADDR_OWVAR 21
30619: PUSH
30620: LD_INT 3
30622: ST_TO_ADDR
// vc_chassis := chassis ;
30623: LD_ADDR_OWVAR 37
30627: PUSH
30628: LD_VAR 0 1
30632: ST_TO_ADDR
// vc_engine := engine ;
30633: LD_ADDR_OWVAR 39
30637: PUSH
30638: LD_VAR 0 2
30642: ST_TO_ADDR
// vc_control := control ;
30643: LD_ADDR_OWVAR 38
30647: PUSH
30648: LD_VAR 0 3
30652: ST_TO_ADDR
// vc_weapon := weapon ;
30653: LD_ADDR_OWVAR 40
30657: PUSH
30658: LD_VAR 0 4
30662: ST_TO_ADDR
// un := CreateVehicle ;
30663: LD_ADDR_VAR 0 8
30667: PUSH
30668: CALL_OW 45
30672: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30673: LD_VAR 0 8
30677: PPUSH
30678: LD_INT 0
30680: PPUSH
30681: LD_INT 5
30683: PPUSH
30684: CALL_OW 12
30688: PPUSH
30689: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30693: LD_VAR 0 8
30697: PPUSH
30698: LD_VAR 0 5
30702: PPUSH
30703: LD_VAR 0 6
30707: PPUSH
30708: LD_INT 1
30710: PPUSH
30711: CALL_OW 48
// end ;
30715: LD_VAR 0 7
30719: RET
// export hInvincible ; every 1 do
30720: GO 30722
30722: DISABLE
// hInvincible := [ ] ;
30723: LD_ADDR_EXP 94
30727: PUSH
30728: EMPTY
30729: ST_TO_ADDR
30730: END
// every 10 do var i ;
30731: GO 30733
30733: DISABLE
30734: LD_INT 0
30736: PPUSH
// begin enable ;
30737: ENABLE
// if not hInvincible then
30738: LD_EXP 94
30742: NOT
30743: IFFALSE 30747
// exit ;
30745: GO 30791
// for i in hInvincible do
30747: LD_ADDR_VAR 0 1
30751: PUSH
30752: LD_EXP 94
30756: PUSH
30757: FOR_IN
30758: IFFALSE 30789
// if GetLives ( i ) < 1000 then
30760: LD_VAR 0 1
30764: PPUSH
30765: CALL_OW 256
30769: PUSH
30770: LD_INT 1000
30772: LESS
30773: IFFALSE 30787
// SetLives ( i , 1000 ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_INT 1000
30782: PPUSH
30783: CALL_OW 234
30787: GO 30757
30789: POP
30790: POP
// end ;
30791: PPOPN 1
30793: END
// export function hHackInvincible ; var i ; begin
30794: LD_INT 0
30796: PPUSH
30797: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30798: LD_ADDR_VAR 0 2
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: LD_INT 21
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 21
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 69
30835: PUSH
30836: FOR_IN
30837: IFFALSE 30898
// if IsSelected ( i ) then
30839: LD_VAR 0 2
30843: PPUSH
30844: CALL_OW 306
30848: IFFALSE 30896
// begin if i in hInvincible then
30850: LD_VAR 0 2
30854: PUSH
30855: LD_EXP 94
30859: IN
30860: IFFALSE 30880
// hInvincible := hInvincible diff i else
30862: LD_ADDR_EXP 94
30866: PUSH
30867: LD_EXP 94
30871: PUSH
30872: LD_VAR 0 2
30876: DIFF
30877: ST_TO_ADDR
30878: GO 30896
// hInvincible := hInvincible union i ;
30880: LD_ADDR_EXP 94
30884: PUSH
30885: LD_EXP 94
30889: PUSH
30890: LD_VAR 0 2
30894: UNION
30895: ST_TO_ADDR
// end ;
30896: GO 30836
30898: POP
30899: POP
// end ;
30900: LD_VAR 0 1
30904: RET
// export function hHackInvisible ; var i , j ; begin
30905: LD_INT 0
30907: PPUSH
30908: PPUSH
30909: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30910: LD_ADDR_VAR 0 2
30914: PUSH
30915: LD_INT 21
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PPUSH
30925: CALL_OW 69
30929: PUSH
30930: FOR_IN
30931: IFFALSE 30955
// if IsSelected ( i ) then
30933: LD_VAR 0 2
30937: PPUSH
30938: CALL_OW 306
30942: IFFALSE 30953
// ComForceInvisible ( i ) ;
30944: LD_VAR 0 2
30948: PPUSH
30949: CALL_OW 496
30953: GO 30930
30955: POP
30956: POP
// end ;
30957: LD_VAR 0 1
30961: RET
// export function hHackChangeYourSide ; begin
30962: LD_INT 0
30964: PPUSH
// if your_side = 8 then
30965: LD_OWVAR 2
30969: PUSH
30970: LD_INT 8
30972: EQUAL
30973: IFFALSE 30985
// your_side := 0 else
30975: LD_ADDR_OWVAR 2
30979: PUSH
30980: LD_INT 0
30982: ST_TO_ADDR
30983: GO 30999
// your_side := your_side + 1 ;
30985: LD_ADDR_OWVAR 2
30989: PUSH
30990: LD_OWVAR 2
30994: PUSH
30995: LD_INT 1
30997: PLUS
30998: ST_TO_ADDR
// end ;
30999: LD_VAR 0 1
31003: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31004: LD_INT 0
31006: PPUSH
31007: PPUSH
31008: PPUSH
// for i in all_units do
31009: LD_ADDR_VAR 0 2
31013: PUSH
31014: LD_OWVAR 3
31018: PUSH
31019: FOR_IN
31020: IFFALSE 31098
// if IsSelected ( i ) then
31022: LD_VAR 0 2
31026: PPUSH
31027: CALL_OW 306
31031: IFFALSE 31096
// begin j := GetSide ( i ) ;
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_VAR 0 2
31042: PPUSH
31043: CALL_OW 255
31047: ST_TO_ADDR
// if j = 8 then
31048: LD_VAR 0 3
31052: PUSH
31053: LD_INT 8
31055: EQUAL
31056: IFFALSE 31068
// j := 0 else
31058: LD_ADDR_VAR 0 3
31062: PUSH
31063: LD_INT 0
31065: ST_TO_ADDR
31066: GO 31082
// j := j + 1 ;
31068: LD_ADDR_VAR 0 3
31072: PUSH
31073: LD_VAR 0 3
31077: PUSH
31078: LD_INT 1
31080: PLUS
31081: ST_TO_ADDR
// SetSide ( i , j ) ;
31082: LD_VAR 0 2
31086: PPUSH
31087: LD_VAR 0 3
31091: PPUSH
31092: CALL_OW 235
// end ;
31096: GO 31019
31098: POP
31099: POP
// end ;
31100: LD_VAR 0 1
31104: RET
// export function hHackFog ; begin
31105: LD_INT 0
31107: PPUSH
// FogOff ( true ) ;
31108: LD_INT 1
31110: PPUSH
31111: CALL_OW 344
// end ;
31115: LD_VAR 0 1
31119: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31120: LD_INT 0
31122: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31123: LD_VAR 0 1
31127: PPUSH
31128: LD_VAR 0 2
31132: PPUSH
31133: LD_VAR 0 3
31137: PPUSH
31138: LD_INT 1
31140: PPUSH
31141: LD_INT 1
31143: PPUSH
31144: CALL_OW 483
// CenterOnXY ( x , y ) ;
31148: LD_VAR 0 2
31152: PPUSH
31153: LD_VAR 0 3
31157: PPUSH
31158: CALL_OW 84
// end ;
31162: LD_VAR 0 4
31166: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31167: LD_INT 0
31169: PPUSH
31170: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31171: LD_VAR 0 1
31175: NOT
31176: PUSH
31177: LD_VAR 0 2
31181: PPUSH
31182: LD_VAR 0 3
31186: PPUSH
31187: CALL_OW 488
31191: NOT
31192: OR
31193: PUSH
31194: LD_VAR 0 1
31198: PPUSH
31199: CALL_OW 266
31203: PUSH
31204: LD_INT 3
31206: NONEQUAL
31207: PUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 247
31217: PUSH
31218: LD_INT 1
31220: EQUAL
31221: NOT
31222: AND
31223: OR
31224: IFFALSE 31228
// exit ;
31226: GO 31377
// if GetType ( factory ) = unit_human then
31228: LD_VAR 0 1
31232: PPUSH
31233: CALL_OW 247
31237: PUSH
31238: LD_INT 1
31240: EQUAL
31241: IFFALSE 31258
// factory := IsInUnit ( factory ) ;
31243: LD_ADDR_VAR 0 1
31247: PUSH
31248: LD_VAR 0 1
31252: PPUSH
31253: CALL_OW 310
31257: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31258: LD_VAR 0 1
31262: PPUSH
31263: CALL_OW 266
31267: PUSH
31268: LD_INT 3
31270: NONEQUAL
31271: IFFALSE 31275
// exit ;
31273: GO 31377
// if HexInfo ( x , y ) = factory then
31275: LD_VAR 0 2
31279: PPUSH
31280: LD_VAR 0 3
31284: PPUSH
31285: CALL_OW 428
31289: PUSH
31290: LD_VAR 0 1
31294: EQUAL
31295: IFFALSE 31322
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31297: LD_ADDR_EXP 95
31301: PUSH
31302: LD_EXP 95
31306: PPUSH
31307: LD_VAR 0 1
31311: PPUSH
31312: LD_INT 0
31314: PPUSH
31315: CALL_OW 1
31319: ST_TO_ADDR
31320: GO 31373
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31322: LD_ADDR_EXP 95
31326: PUSH
31327: LD_EXP 95
31331: PPUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: LD_VAR 0 1
31341: PPUSH
31342: CALL_OW 255
31346: PUSH
31347: LD_VAR 0 1
31351: PUSH
31352: LD_VAR 0 2
31356: PUSH
31357: LD_VAR 0 3
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: PPUSH
31368: CALL_OW 1
31372: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31373: CALL 31382 0 0
// end ;
31377: LD_VAR 0 4
31381: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31382: LD_INT 0
31384: PPUSH
31385: PPUSH
31386: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31387: LD_STRING resetFactoryWaypoint();
31389: PPUSH
31390: CALL_OW 559
// if factoryWaypoints then
31394: LD_EXP 95
31398: IFFALSE 31524
// begin list := PrepareArray ( factoryWaypoints ) ;
31400: LD_ADDR_VAR 0 3
31404: PUSH
31405: LD_EXP 95
31409: PPUSH
31410: CALL 77817 0 1
31414: ST_TO_ADDR
// for i := 1 to list do
31415: LD_ADDR_VAR 0 2
31419: PUSH
31420: DOUBLE
31421: LD_INT 1
31423: DEC
31424: ST_TO_ADDR
31425: LD_VAR 0 3
31429: PUSH
31430: FOR_TO
31431: IFFALSE 31522
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31433: LD_STRING setFactoryWaypointXY(
31435: PUSH
31436: LD_VAR 0 3
31440: PUSH
31441: LD_VAR 0 2
31445: ARRAY
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: STR
31451: PUSH
31452: LD_STRING ,
31454: STR
31455: PUSH
31456: LD_VAR 0 3
31460: PUSH
31461: LD_VAR 0 2
31465: ARRAY
31466: PUSH
31467: LD_INT 2
31469: ARRAY
31470: STR
31471: PUSH
31472: LD_STRING ,
31474: STR
31475: PUSH
31476: LD_VAR 0 3
31480: PUSH
31481: LD_VAR 0 2
31485: ARRAY
31486: PUSH
31487: LD_INT 3
31489: ARRAY
31490: STR
31491: PUSH
31492: LD_STRING ,
31494: STR
31495: PUSH
31496: LD_VAR 0 3
31500: PUSH
31501: LD_VAR 0 2
31505: ARRAY
31506: PUSH
31507: LD_INT 4
31509: ARRAY
31510: STR
31511: PUSH
31512: LD_STRING )
31514: STR
31515: PPUSH
31516: CALL_OW 559
31520: GO 31430
31522: POP
31523: POP
// end ; end ;
31524: LD_VAR 0 1
31528: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31529: LD_INT 0
31531: PPUSH
// if HexInfo ( x , y ) = warehouse then
31532: LD_VAR 0 2
31536: PPUSH
31537: LD_VAR 0 3
31541: PPUSH
31542: CALL_OW 428
31546: PUSH
31547: LD_VAR 0 1
31551: EQUAL
31552: IFFALSE 31579
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31554: LD_ADDR_EXP 96
31558: PUSH
31559: LD_EXP 96
31563: PPUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: LD_INT 0
31571: PPUSH
31572: CALL_OW 1
31576: ST_TO_ADDR
31577: GO 31630
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31579: LD_ADDR_EXP 96
31583: PUSH
31584: LD_EXP 96
31588: PPUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 255
31603: PUSH
31604: LD_VAR 0 1
31608: PUSH
31609: LD_VAR 0 2
31613: PUSH
31614: LD_VAR 0 3
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: PPUSH
31625: CALL_OW 1
31629: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31630: CALL 31639 0 0
// end ;
31634: LD_VAR 0 4
31638: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31639: LD_INT 0
31641: PPUSH
31642: PPUSH
31643: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31644: LD_STRING resetWarehouseGatheringPoints();
31646: PPUSH
31647: CALL_OW 559
// if warehouseGatheringPoints then
31651: LD_EXP 96
31655: IFFALSE 31781
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_EXP 96
31666: PPUSH
31667: CALL 77817 0 1
31671: ST_TO_ADDR
// for i := 1 to list do
31672: LD_ADDR_VAR 0 2
31676: PUSH
31677: DOUBLE
31678: LD_INT 1
31680: DEC
31681: ST_TO_ADDR
31682: LD_VAR 0 3
31686: PUSH
31687: FOR_TO
31688: IFFALSE 31779
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31690: LD_STRING setWarehouseGatheringPointXY(
31692: PUSH
31693: LD_VAR 0 3
31697: PUSH
31698: LD_VAR 0 2
31702: ARRAY
31703: PUSH
31704: LD_INT 1
31706: ARRAY
31707: STR
31708: PUSH
31709: LD_STRING ,
31711: STR
31712: PUSH
31713: LD_VAR 0 3
31717: PUSH
31718: LD_VAR 0 2
31722: ARRAY
31723: PUSH
31724: LD_INT 2
31726: ARRAY
31727: STR
31728: PUSH
31729: LD_STRING ,
31731: STR
31732: PUSH
31733: LD_VAR 0 3
31737: PUSH
31738: LD_VAR 0 2
31742: ARRAY
31743: PUSH
31744: LD_INT 3
31746: ARRAY
31747: STR
31748: PUSH
31749: LD_STRING ,
31751: STR
31752: PUSH
31753: LD_VAR 0 3
31757: PUSH
31758: LD_VAR 0 2
31762: ARRAY
31763: PUSH
31764: LD_INT 4
31766: ARRAY
31767: STR
31768: PUSH
31769: LD_STRING )
31771: STR
31772: PPUSH
31773: CALL_OW 559
31777: GO 31687
31779: POP
31780: POP
// end ; end ;
31781: LD_VAR 0 1
31785: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31786: LD_EXP 96
31790: IFFALSE 32475
31792: GO 31794
31794: DISABLE
31795: LD_INT 0
31797: PPUSH
31798: PPUSH
31799: PPUSH
31800: PPUSH
31801: PPUSH
31802: PPUSH
31803: PPUSH
31804: PPUSH
31805: PPUSH
// begin enable ;
31806: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31807: LD_ADDR_VAR 0 3
31811: PUSH
31812: LD_EXP 96
31816: PPUSH
31817: CALL 77817 0 1
31821: ST_TO_ADDR
// if not list then
31822: LD_VAR 0 3
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 32475
// for i := 1 to list do
31831: LD_ADDR_VAR 0 1
31835: PUSH
31836: DOUBLE
31837: LD_INT 1
31839: DEC
31840: ST_TO_ADDR
31841: LD_VAR 0 3
31845: PUSH
31846: FOR_TO
31847: IFFALSE 32473
// begin depot := list [ i ] [ 2 ] ;
31849: LD_ADDR_VAR 0 8
31853: PUSH
31854: LD_VAR 0 3
31858: PUSH
31859: LD_VAR 0 1
31863: ARRAY
31864: PUSH
31865: LD_INT 2
31867: ARRAY
31868: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31869: LD_ADDR_VAR 0 5
31873: PUSH
31874: LD_VAR 0 3
31878: PUSH
31879: LD_VAR 0 1
31883: ARRAY
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31889: LD_VAR 0 8
31893: PPUSH
31894: CALL_OW 301
31898: PUSH
31899: LD_VAR 0 5
31903: PUSH
31904: LD_VAR 0 8
31908: PPUSH
31909: CALL_OW 255
31913: NONEQUAL
31914: OR
31915: IFFALSE 31944
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31917: LD_ADDR_EXP 96
31921: PUSH
31922: LD_EXP 96
31926: PPUSH
31927: LD_VAR 0 8
31931: PPUSH
31932: LD_INT 0
31934: PPUSH
31935: CALL_OW 1
31939: ST_TO_ADDR
// exit ;
31940: POP
31941: POP
31942: GO 32475
// end ; x := list [ i ] [ 3 ] ;
31944: LD_ADDR_VAR 0 6
31948: PUSH
31949: LD_VAR 0 3
31953: PUSH
31954: LD_VAR 0 1
31958: ARRAY
31959: PUSH
31960: LD_INT 3
31962: ARRAY
31963: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31964: LD_ADDR_VAR 0 7
31968: PUSH
31969: LD_VAR 0 3
31973: PUSH
31974: LD_VAR 0 1
31978: ARRAY
31979: PUSH
31980: LD_INT 4
31982: ARRAY
31983: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31984: LD_ADDR_VAR 0 9
31988: PUSH
31989: LD_VAR 0 6
31993: PPUSH
31994: LD_VAR 0 7
31998: PPUSH
31999: LD_INT 16
32001: PPUSH
32002: CALL 76405 0 3
32006: ST_TO_ADDR
// if not cratesNearbyPoint then
32007: LD_VAR 0 9
32011: NOT
32012: IFFALSE 32018
// exit ;
32014: POP
32015: POP
32016: GO 32475
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: LD_INT 22
32025: PUSH
32026: LD_VAR 0 5
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 60
32040: PUSH
32041: EMPTY
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 91
32050: PUSH
32051: LD_VAR 0 8
32055: PUSH
32056: LD_INT 6
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 25
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 25
32079: PUSH
32080: LD_INT 16
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: PPUSH
32098: CALL_OW 69
32102: PUSH
32103: LD_VAR 0 8
32107: PPUSH
32108: CALL_OW 313
32112: PPUSH
32113: LD_INT 3
32115: PUSH
32116: LD_INT 60
32118: PUSH
32119: EMPTY
32120: LIST
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 25
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 25
32141: PUSH
32142: LD_INT 16
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PPUSH
32158: CALL_OW 72
32162: UNION
32163: ST_TO_ADDR
// if tmp then
32164: LD_VAR 0 4
32168: IFFALSE 32248
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32170: LD_ADDR_VAR 0 4
32174: PUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: LD_INT 3
32182: PPUSH
32183: CALL 74374 0 2
32187: ST_TO_ADDR
// for j in tmp do
32188: LD_ADDR_VAR 0 2
32192: PUSH
32193: LD_VAR 0 4
32197: PUSH
32198: FOR_IN
32199: IFFALSE 32242
// begin if IsInUnit ( j ) then
32201: LD_VAR 0 2
32205: PPUSH
32206: CALL_OW 310
32210: IFFALSE 32221
// ComExit ( j ) ;
32212: LD_VAR 0 2
32216: PPUSH
32217: CALL 74457 0 1
// AddComCollect ( j , x , y ) ;
32221: LD_VAR 0 2
32225: PPUSH
32226: LD_VAR 0 6
32230: PPUSH
32231: LD_VAR 0 7
32235: PPUSH
32236: CALL_OW 177
// end ;
32240: GO 32198
32242: POP
32243: POP
// exit ;
32244: POP
32245: POP
32246: GO 32475
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32248: LD_ADDR_VAR 0 4
32252: PUSH
32253: LD_INT 22
32255: PUSH
32256: LD_VAR 0 5
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 91
32267: PUSH
32268: LD_VAR 0 8
32272: PUSH
32273: LD_INT 8
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 34
32286: PUSH
32287: LD_INT 12
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 34
32296: PUSH
32297: LD_INT 51
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 34
32306: PUSH
32307: LD_INT 32
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 34
32316: PUSH
32317: LD_INT 89
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: LIST
32335: PPUSH
32336: CALL_OW 69
32340: ST_TO_ADDR
// if tmp then
32341: LD_VAR 0 4
32345: IFFALSE 32471
// begin for j in tmp do
32347: LD_ADDR_VAR 0 2
32351: PUSH
32352: LD_VAR 0 4
32356: PUSH
32357: FOR_IN
32358: IFFALSE 32469
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32360: LD_VAR 0 2
32364: PPUSH
32365: CALL_OW 262
32369: PUSH
32370: LD_INT 3
32372: EQUAL
32373: PUSH
32374: LD_VAR 0 2
32378: PPUSH
32379: CALL_OW 261
32383: PUSH
32384: LD_INT 20
32386: GREATER
32387: OR
32388: PUSH
32389: LD_VAR 0 2
32393: PPUSH
32394: CALL_OW 314
32398: NOT
32399: AND
32400: PUSH
32401: LD_VAR 0 2
32405: PPUSH
32406: CALL_OW 263
32410: PUSH
32411: LD_INT 1
32413: NONEQUAL
32414: PUSH
32415: LD_VAR 0 2
32419: PPUSH
32420: CALL_OW 311
32424: OR
32425: AND
32426: IFFALSE 32467
// begin ComCollect ( j , x , y ) ;
32428: LD_VAR 0 2
32432: PPUSH
32433: LD_VAR 0 6
32437: PPUSH
32438: LD_VAR 0 7
32442: PPUSH
32443: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32447: LD_VAR 0 2
32451: PPUSH
32452: LD_VAR 0 8
32456: PPUSH
32457: CALL_OW 172
// exit ;
32461: POP
32462: POP
32463: POP
32464: POP
32465: GO 32475
// end ;
32467: GO 32357
32469: POP
32470: POP
// end ; end ;
32471: GO 31846
32473: POP
32474: POP
// end ; end_of_file
32475: PPOPN 9
32477: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32478: LD_INT 0
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 264
32493: PUSH
32494: LD_INT 91
32496: EQUAL
32497: IFFALSE 32569
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32499: LD_INT 68
32501: PPUSH
32502: LD_VAR 0 1
32506: PPUSH
32507: CALL_OW 255
32511: PPUSH
32512: CALL_OW 321
32516: PUSH
32517: LD_INT 2
32519: EQUAL
32520: IFFALSE 32532
// eff := 70 else
32522: LD_ADDR_VAR 0 4
32526: PUSH
32527: LD_INT 70
32529: ST_TO_ADDR
32530: GO 32540
// eff := 30 ;
32532: LD_ADDR_VAR 0 4
32536: PUSH
32537: LD_INT 30
32539: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32540: LD_VAR 0 1
32544: PPUSH
32545: CALL_OW 250
32549: PPUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 251
32559: PPUSH
32560: LD_VAR 0 4
32564: PPUSH
32565: CALL_OW 495
// end ; end ;
32569: LD_VAR 0 2
32573: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32574: LD_INT 0
32576: PPUSH
// end ;
32577: LD_VAR 0 4
32581: RET
// export function SOS_Command ( cmd ) ; begin
32582: LD_INT 0
32584: PPUSH
// end ;
32585: LD_VAR 0 2
32589: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32590: LD_INT 0
32592: PPUSH
// end ;
32593: LD_VAR 0 6
32597: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32598: LD_INT 0
32600: PPUSH
32601: PPUSH
// if not vehicle or not factory then
32602: LD_VAR 0 1
32606: NOT
32607: PUSH
32608: LD_VAR 0 2
32612: NOT
32613: OR
32614: IFFALSE 32618
// exit ;
32616: GO 32849
// if factoryWaypoints >= factory then
32618: LD_EXP 95
32622: PUSH
32623: LD_VAR 0 2
32627: GREATEREQUAL
32628: IFFALSE 32849
// if factoryWaypoints [ factory ] then
32630: LD_EXP 95
32634: PUSH
32635: LD_VAR 0 2
32639: ARRAY
32640: IFFALSE 32849
// begin if GetControl ( vehicle ) = control_manual then
32642: LD_VAR 0 1
32646: PPUSH
32647: CALL_OW 263
32651: PUSH
32652: LD_INT 1
32654: EQUAL
32655: IFFALSE 32736
// begin driver := IsDrivenBy ( vehicle ) ;
32657: LD_ADDR_VAR 0 4
32661: PUSH
32662: LD_VAR 0 1
32666: PPUSH
32667: CALL_OW 311
32671: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32672: LD_VAR 0 4
32676: PPUSH
32677: LD_EXP 95
32681: PUSH
32682: LD_VAR 0 2
32686: ARRAY
32687: PUSH
32688: LD_INT 3
32690: ARRAY
32691: PPUSH
32692: LD_EXP 95
32696: PUSH
32697: LD_VAR 0 2
32701: ARRAY
32702: PUSH
32703: LD_INT 4
32705: ARRAY
32706: PPUSH
32707: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32711: LD_VAR 0 4
32715: PPUSH
32716: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32720: LD_VAR 0 4
32724: PPUSH
32725: LD_VAR 0 2
32729: PPUSH
32730: CALL_OW 180
// end else
32734: GO 32849
// if GetControl ( vehicle ) = control_remote then
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 263
32745: PUSH
32746: LD_INT 2
32748: EQUAL
32749: IFFALSE 32810
// begin wait ( 0 0$2 ) ;
32751: LD_INT 70
32753: PPUSH
32754: CALL_OW 67
// if Connect ( vehicle ) then
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL 44698 0 1
32767: IFFALSE 32808
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32769: LD_VAR 0 1
32773: PPUSH
32774: LD_EXP 95
32778: PUSH
32779: LD_VAR 0 2
32783: ARRAY
32784: PUSH
32785: LD_INT 3
32787: ARRAY
32788: PPUSH
32789: LD_EXP 95
32793: PUSH
32794: LD_VAR 0 2
32798: ARRAY
32799: PUSH
32800: LD_INT 4
32802: ARRAY
32803: PPUSH
32804: CALL_OW 171
// end else
32808: GO 32849
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32810: LD_VAR 0 1
32814: PPUSH
32815: LD_EXP 95
32819: PUSH
32820: LD_VAR 0 2
32824: ARRAY
32825: PUSH
32826: LD_INT 3
32828: ARRAY
32829: PPUSH
32830: LD_EXP 95
32834: PUSH
32835: LD_VAR 0 2
32839: ARRAY
32840: PUSH
32841: LD_INT 4
32843: ARRAY
32844: PPUSH
32845: CALL_OW 171
// end ; end ;
32849: LD_VAR 0 3
32853: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32854: LD_INT 0
32856: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32857: LD_VAR 0 1
32861: PUSH
32862: LD_INT 250
32864: EQUAL
32865: PUSH
32866: LD_VAR 0 2
32870: PPUSH
32871: CALL_OW 264
32875: PUSH
32876: LD_INT 81
32878: EQUAL
32879: AND
32880: IFFALSE 32901
// MinerPlaceMine ( unit , x , y ) ;
32882: LD_VAR 0 2
32886: PPUSH
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_VAR 0 5
32896: PPUSH
32897: CALL 35286 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32901: LD_VAR 0 1
32905: PUSH
32906: LD_INT 251
32908: EQUAL
32909: PUSH
32910: LD_VAR 0 2
32914: PPUSH
32915: CALL_OW 264
32919: PUSH
32920: LD_INT 81
32922: EQUAL
32923: AND
32924: IFFALSE 32945
// MinerDetonateMine ( unit , x , y ) ;
32926: LD_VAR 0 2
32930: PPUSH
32931: LD_VAR 0 4
32935: PPUSH
32936: LD_VAR 0 5
32940: PPUSH
32941: CALL 35561 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32945: LD_VAR 0 1
32949: PUSH
32950: LD_INT 252
32952: EQUAL
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL_OW 264
32963: PUSH
32964: LD_INT 81
32966: EQUAL
32967: AND
32968: IFFALSE 32989
// MinerCreateMinefield ( unit , x , y ) ;
32970: LD_VAR 0 2
32974: PPUSH
32975: LD_VAR 0 4
32979: PPUSH
32980: LD_VAR 0 5
32984: PPUSH
32985: CALL 35978 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32989: LD_VAR 0 1
32993: PUSH
32994: LD_INT 253
32996: EQUAL
32997: PUSH
32998: LD_VAR 0 2
33002: PPUSH
33003: CALL_OW 257
33007: PUSH
33008: LD_INT 5
33010: EQUAL
33011: AND
33012: IFFALSE 33033
// ComBinocular ( unit , x , y ) ;
33014: LD_VAR 0 2
33018: PPUSH
33019: LD_VAR 0 4
33023: PPUSH
33024: LD_VAR 0 5
33028: PPUSH
33029: CALL 36347 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33033: LD_VAR 0 1
33037: PUSH
33038: LD_INT 254
33040: EQUAL
33041: PUSH
33042: LD_VAR 0 2
33046: PPUSH
33047: CALL_OW 264
33051: PUSH
33052: LD_INT 99
33054: EQUAL
33055: AND
33056: PUSH
33057: LD_VAR 0 3
33061: PPUSH
33062: CALL_OW 263
33066: PUSH
33067: LD_INT 3
33069: EQUAL
33070: AND
33071: IFFALSE 33087
// HackDestroyVehicle ( unit , selectedUnit ) ;
33073: LD_VAR 0 2
33077: PPUSH
33078: LD_VAR 0 3
33082: PPUSH
33083: CALL 34650 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33087: LD_VAR 0 1
33091: PUSH
33092: LD_INT 255
33094: EQUAL
33095: PUSH
33096: LD_VAR 0 2
33100: PPUSH
33101: CALL_OW 264
33105: PUSH
33106: LD_INT 14
33108: PUSH
33109: LD_INT 53
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: IN
33116: AND
33117: PUSH
33118: LD_VAR 0 4
33122: PPUSH
33123: LD_VAR 0 5
33127: PPUSH
33128: CALL_OW 488
33132: AND
33133: IFFALSE 33157
// CutTreeXYR ( unit , x , y , 12 ) ;
33135: LD_VAR 0 2
33139: PPUSH
33140: LD_VAR 0 4
33144: PPUSH
33145: LD_VAR 0 5
33149: PPUSH
33150: LD_INT 12
33152: PPUSH
33153: CALL 33220 0 4
// if cmd = 256 then
33157: LD_VAR 0 1
33161: PUSH
33162: LD_INT 256
33164: EQUAL
33165: IFFALSE 33186
// SetFactoryWaypoint ( unit , x , y ) ;
33167: LD_VAR 0 2
33171: PPUSH
33172: LD_VAR 0 4
33176: PPUSH
33177: LD_VAR 0 5
33181: PPUSH
33182: CALL 31167 0 3
// if cmd = 257 then
33186: LD_VAR 0 1
33190: PUSH
33191: LD_INT 257
33193: EQUAL
33194: IFFALSE 33215
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33196: LD_VAR 0 2
33200: PPUSH
33201: LD_VAR 0 4
33205: PPUSH
33206: LD_VAR 0 5
33210: PPUSH
33211: CALL 31529 0 3
// end ;
33215: LD_VAR 0 6
33219: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
33227: PPUSH
33228: PPUSH
33229: PPUSH
33230: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33231: LD_VAR 0 1
33235: NOT
33236: PUSH
33237: LD_VAR 0 2
33241: PPUSH
33242: LD_VAR 0 3
33246: PPUSH
33247: CALL_OW 488
33251: NOT
33252: OR
33253: PUSH
33254: LD_VAR 0 4
33258: NOT
33259: OR
33260: IFFALSE 33264
// exit ;
33262: GO 33604
// list := [ ] ;
33264: LD_ADDR_VAR 0 13
33268: PUSH
33269: EMPTY
33270: ST_TO_ADDR
// if x - r < 0 then
33271: LD_VAR 0 2
33275: PUSH
33276: LD_VAR 0 4
33280: MINUS
33281: PUSH
33282: LD_INT 0
33284: LESS
33285: IFFALSE 33297
// min_x := 0 else
33287: LD_ADDR_VAR 0 7
33291: PUSH
33292: LD_INT 0
33294: ST_TO_ADDR
33295: GO 33313
// min_x := x - r ;
33297: LD_ADDR_VAR 0 7
33301: PUSH
33302: LD_VAR 0 2
33306: PUSH
33307: LD_VAR 0 4
33311: MINUS
33312: ST_TO_ADDR
// if y - r < 0 then
33313: LD_VAR 0 3
33317: PUSH
33318: LD_VAR 0 4
33322: MINUS
33323: PUSH
33324: LD_INT 0
33326: LESS
33327: IFFALSE 33339
// min_y := 0 else
33329: LD_ADDR_VAR 0 8
33333: PUSH
33334: LD_INT 0
33336: ST_TO_ADDR
33337: GO 33355
// min_y := y - r ;
33339: LD_ADDR_VAR 0 8
33343: PUSH
33344: LD_VAR 0 3
33348: PUSH
33349: LD_VAR 0 4
33353: MINUS
33354: ST_TO_ADDR
// max_x := x + r ;
33355: LD_ADDR_VAR 0 9
33359: PUSH
33360: LD_VAR 0 2
33364: PUSH
33365: LD_VAR 0 4
33369: PLUS
33370: ST_TO_ADDR
// max_y := y + r ;
33371: LD_ADDR_VAR 0 10
33375: PUSH
33376: LD_VAR 0 3
33380: PUSH
33381: LD_VAR 0 4
33385: PLUS
33386: ST_TO_ADDR
// for _x = min_x to max_x do
33387: LD_ADDR_VAR 0 11
33391: PUSH
33392: DOUBLE
33393: LD_VAR 0 7
33397: DEC
33398: ST_TO_ADDR
33399: LD_VAR 0 9
33403: PUSH
33404: FOR_TO
33405: IFFALSE 33522
// for _y = min_y to max_y do
33407: LD_ADDR_VAR 0 12
33411: PUSH
33412: DOUBLE
33413: LD_VAR 0 8
33417: DEC
33418: ST_TO_ADDR
33419: LD_VAR 0 10
33423: PUSH
33424: FOR_TO
33425: IFFALSE 33518
// begin if not ValidHex ( _x , _y ) then
33427: LD_VAR 0 11
33431: PPUSH
33432: LD_VAR 0 12
33436: PPUSH
33437: CALL_OW 488
33441: NOT
33442: IFFALSE 33446
// continue ;
33444: GO 33424
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33446: LD_VAR 0 11
33450: PPUSH
33451: LD_VAR 0 12
33455: PPUSH
33456: CALL_OW 351
33460: PUSH
33461: LD_VAR 0 11
33465: PPUSH
33466: LD_VAR 0 12
33470: PPUSH
33471: CALL_OW 554
33475: AND
33476: IFFALSE 33516
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33478: LD_ADDR_VAR 0 13
33482: PUSH
33483: LD_VAR 0 13
33487: PPUSH
33488: LD_VAR 0 13
33492: PUSH
33493: LD_INT 1
33495: PLUS
33496: PPUSH
33497: LD_VAR 0 11
33501: PUSH
33502: LD_VAR 0 12
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PPUSH
33511: CALL_OW 2
33515: ST_TO_ADDR
// end ;
33516: GO 33424
33518: POP
33519: POP
33520: GO 33404
33522: POP
33523: POP
// if not list then
33524: LD_VAR 0 13
33528: NOT
33529: IFFALSE 33533
// exit ;
33531: GO 33604
// for i in list do
33533: LD_ADDR_VAR 0 6
33537: PUSH
33538: LD_VAR 0 13
33542: PUSH
33543: FOR_IN
33544: IFFALSE 33602
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33546: LD_VAR 0 1
33550: PPUSH
33551: LD_STRING M
33553: PUSH
33554: LD_VAR 0 6
33558: PUSH
33559: LD_INT 1
33561: ARRAY
33562: PUSH
33563: LD_VAR 0 6
33567: PUSH
33568: LD_INT 2
33570: ARRAY
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: PPUSH
33596: CALL_OW 447
33600: GO 33543
33602: POP
33603: POP
// end ;
33604: LD_VAR 0 5
33608: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33609: LD_EXP 98
33613: NOT
33614: IFFALSE 33664
33616: GO 33618
33618: DISABLE
// begin initHack := true ;
33619: LD_ADDR_EXP 98
33623: PUSH
33624: LD_INT 1
33626: ST_TO_ADDR
// hackTanks := [ ] ;
33627: LD_ADDR_EXP 99
33631: PUSH
33632: EMPTY
33633: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33634: LD_ADDR_EXP 100
33638: PUSH
33639: EMPTY
33640: ST_TO_ADDR
// hackLimit := 3 ;
33641: LD_ADDR_EXP 101
33645: PUSH
33646: LD_INT 3
33648: ST_TO_ADDR
// hackDist := 12 ;
33649: LD_ADDR_EXP 102
33653: PUSH
33654: LD_INT 12
33656: ST_TO_ADDR
// hackCounter := [ ] ;
33657: LD_ADDR_EXP 103
33661: PUSH
33662: EMPTY
33663: ST_TO_ADDR
// end ;
33664: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33665: LD_EXP 98
33669: PUSH
33670: LD_INT 34
33672: PUSH
33673: LD_INT 99
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: AND
33685: IFFALSE 33938
33687: GO 33689
33689: DISABLE
33690: LD_INT 0
33692: PPUSH
33693: PPUSH
// begin enable ;
33694: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33695: LD_ADDR_VAR 0 1
33699: PUSH
33700: LD_INT 34
33702: PUSH
33703: LD_INT 99
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PPUSH
33710: CALL_OW 69
33714: PUSH
33715: FOR_IN
33716: IFFALSE 33936
// begin if not i in hackTanks then
33718: LD_VAR 0 1
33722: PUSH
33723: LD_EXP 99
33727: IN
33728: NOT
33729: IFFALSE 33812
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33731: LD_ADDR_EXP 99
33735: PUSH
33736: LD_EXP 99
33740: PPUSH
33741: LD_EXP 99
33745: PUSH
33746: LD_INT 1
33748: PLUS
33749: PPUSH
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 1
33759: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33760: LD_ADDR_EXP 100
33764: PUSH
33765: LD_EXP 100
33769: PPUSH
33770: LD_EXP 100
33774: PUSH
33775: LD_INT 1
33777: PLUS
33778: PPUSH
33779: EMPTY
33780: PPUSH
33781: CALL_OW 1
33785: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33786: LD_ADDR_EXP 103
33790: PUSH
33791: LD_EXP 103
33795: PPUSH
33796: LD_EXP 103
33800: PUSH
33801: LD_INT 1
33803: PLUS
33804: PPUSH
33805: EMPTY
33806: PPUSH
33807: CALL_OW 1
33811: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33812: LD_VAR 0 1
33816: PPUSH
33817: CALL_OW 302
33821: NOT
33822: IFFALSE 33835
// begin HackUnlinkAll ( i ) ;
33824: LD_VAR 0 1
33828: PPUSH
33829: CALL 33941 0 1
// continue ;
33833: GO 33715
// end ; HackCheckCapturedStatus ( i ) ;
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL 34384 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33844: LD_ADDR_VAR 0 2
33848: PUSH
33849: LD_INT 81
33851: PUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL_OW 255
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 33
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 91
33878: PUSH
33879: LD_VAR 0 1
33883: PUSH
33884: LD_EXP 102
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 50
33896: PUSH
33897: EMPTY
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: PPUSH
33906: CALL_OW 69
33910: ST_TO_ADDR
// if not tmp then
33911: LD_VAR 0 2
33915: NOT
33916: IFFALSE 33920
// continue ;
33918: GO 33715
// HackLink ( i , tmp ) ;
33920: LD_VAR 0 1
33924: PPUSH
33925: LD_VAR 0 2
33929: PPUSH
33930: CALL 34077 0 2
// end ;
33934: GO 33715
33936: POP
33937: POP
// end ;
33938: PPOPN 2
33940: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33941: LD_INT 0
33943: PPUSH
33944: PPUSH
33945: PPUSH
// if not hack in hackTanks then
33946: LD_VAR 0 1
33950: PUSH
33951: LD_EXP 99
33955: IN
33956: NOT
33957: IFFALSE 33961
// exit ;
33959: GO 34072
// index := GetElementIndex ( hackTanks , hack ) ;
33961: LD_ADDR_VAR 0 4
33965: PUSH
33966: LD_EXP 99
33970: PPUSH
33971: LD_VAR 0 1
33975: PPUSH
33976: CALL 41514 0 2
33980: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33981: LD_EXP 100
33985: PUSH
33986: LD_VAR 0 4
33990: ARRAY
33991: IFFALSE 34072
// begin for i in hackTanksCaptured [ index ] do
33993: LD_ADDR_VAR 0 3
33997: PUSH
33998: LD_EXP 100
34002: PUSH
34003: LD_VAR 0 4
34007: ARRAY
34008: PUSH
34009: FOR_IN
34010: IFFALSE 34036
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34012: LD_VAR 0 3
34016: PUSH
34017: LD_INT 1
34019: ARRAY
34020: PPUSH
34021: LD_VAR 0 3
34025: PUSH
34026: LD_INT 2
34028: ARRAY
34029: PPUSH
34030: CALL_OW 235
34034: GO 34009
34036: POP
34037: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34038: LD_ADDR_EXP 100
34042: PUSH
34043: LD_EXP 100
34047: PPUSH
34048: LD_VAR 0 4
34052: PPUSH
34053: EMPTY
34054: PPUSH
34055: CALL_OW 1
34059: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34060: LD_VAR 0 1
34064: PPUSH
34065: LD_INT 0
34067: PPUSH
34068: CALL_OW 505
// end ; end ;
34072: LD_VAR 0 2
34076: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34077: LD_INT 0
34079: PPUSH
34080: PPUSH
34081: PPUSH
// if not hack in hackTanks or not vehicles then
34082: LD_VAR 0 1
34086: PUSH
34087: LD_EXP 99
34091: IN
34092: NOT
34093: PUSH
34094: LD_VAR 0 2
34098: NOT
34099: OR
34100: IFFALSE 34104
// exit ;
34102: GO 34379
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34104: LD_ADDR_VAR 0 2
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: LD_VAR 0 2
34118: PPUSH
34119: LD_INT 1
34121: PPUSH
34122: LD_INT 1
34124: PPUSH
34125: CALL 42164 0 4
34129: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34130: LD_ADDR_VAR 0 5
34134: PUSH
34135: LD_EXP 99
34139: PPUSH
34140: LD_VAR 0 1
34144: PPUSH
34145: CALL 41514 0 2
34149: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34150: LD_EXP 100
34154: PUSH
34155: LD_VAR 0 5
34159: ARRAY
34160: PUSH
34161: LD_EXP 101
34165: LESS
34166: IFFALSE 34355
// begin for i := 1 to vehicles do
34168: LD_ADDR_VAR 0 4
34172: PUSH
34173: DOUBLE
34174: LD_INT 1
34176: DEC
34177: ST_TO_ADDR
34178: LD_VAR 0 2
34182: PUSH
34183: FOR_TO
34184: IFFALSE 34353
// begin if hackTanksCaptured [ index ] = hackLimit then
34186: LD_EXP 100
34190: PUSH
34191: LD_VAR 0 5
34195: ARRAY
34196: PUSH
34197: LD_EXP 101
34201: EQUAL
34202: IFFALSE 34206
// break ;
34204: GO 34353
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34206: LD_ADDR_EXP 103
34210: PUSH
34211: LD_EXP 103
34215: PPUSH
34216: LD_VAR 0 5
34220: PPUSH
34221: LD_EXP 103
34225: PUSH
34226: LD_VAR 0 5
34230: ARRAY
34231: PUSH
34232: LD_INT 1
34234: PLUS
34235: PPUSH
34236: CALL_OW 1
34240: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34241: LD_ADDR_EXP 100
34245: PUSH
34246: LD_EXP 100
34250: PPUSH
34251: LD_VAR 0 5
34255: PUSH
34256: LD_EXP 100
34260: PUSH
34261: LD_VAR 0 5
34265: ARRAY
34266: PUSH
34267: LD_INT 1
34269: PLUS
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PPUSH
34275: LD_VAR 0 2
34279: PUSH
34280: LD_VAR 0 4
34284: ARRAY
34285: PUSH
34286: LD_VAR 0 2
34290: PUSH
34291: LD_VAR 0 4
34295: ARRAY
34296: PPUSH
34297: CALL_OW 255
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PPUSH
34306: CALL 41729 0 3
34310: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34311: LD_VAR 0 2
34315: PUSH
34316: LD_VAR 0 4
34320: ARRAY
34321: PPUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 255
34331: PPUSH
34332: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34336: LD_VAR 0 2
34340: PUSH
34341: LD_VAR 0 4
34345: ARRAY
34346: PPUSH
34347: CALL_OW 141
// end ;
34351: GO 34183
34353: POP
34354: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_EXP 100
34364: PUSH
34365: LD_VAR 0 5
34369: ARRAY
34370: PUSH
34371: LD_INT 0
34373: PLUS
34374: PPUSH
34375: CALL_OW 505
// end ;
34379: LD_VAR 0 3
34383: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34384: LD_INT 0
34386: PPUSH
34387: PPUSH
34388: PPUSH
34389: PPUSH
// if not hack in hackTanks then
34390: LD_VAR 0 1
34394: PUSH
34395: LD_EXP 99
34399: IN
34400: NOT
34401: IFFALSE 34405
// exit ;
34403: GO 34645
// index := GetElementIndex ( hackTanks , hack ) ;
34405: LD_ADDR_VAR 0 4
34409: PUSH
34410: LD_EXP 99
34414: PPUSH
34415: LD_VAR 0 1
34419: PPUSH
34420: CALL 41514 0 2
34424: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34425: LD_ADDR_VAR 0 3
34429: PUSH
34430: DOUBLE
34431: LD_EXP 100
34435: PUSH
34436: LD_VAR 0 4
34440: ARRAY
34441: INC
34442: ST_TO_ADDR
34443: LD_INT 1
34445: PUSH
34446: FOR_DOWNTO
34447: IFFALSE 34619
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34449: LD_ADDR_VAR 0 5
34453: PUSH
34454: LD_EXP 100
34458: PUSH
34459: LD_VAR 0 4
34463: ARRAY
34464: PUSH
34465: LD_VAR 0 3
34469: ARRAY
34470: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34471: LD_VAR 0 5
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: PPUSH
34480: CALL_OW 302
34484: NOT
34485: PUSH
34486: LD_VAR 0 5
34490: PUSH
34491: LD_INT 1
34493: ARRAY
34494: PPUSH
34495: CALL_OW 255
34499: PUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 255
34509: NONEQUAL
34510: OR
34511: IFFALSE 34617
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34513: LD_VAR 0 5
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PPUSH
34522: CALL_OW 305
34526: PUSH
34527: LD_VAR 0 5
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PPUSH
34536: CALL_OW 255
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 255
34550: EQUAL
34551: AND
34552: IFFALSE 34576
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34554: LD_VAR 0 5
34558: PUSH
34559: LD_INT 1
34561: ARRAY
34562: PPUSH
34563: LD_VAR 0 5
34567: PUSH
34568: LD_INT 2
34570: ARRAY
34571: PPUSH
34572: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34576: LD_ADDR_EXP 100
34580: PUSH
34581: LD_EXP 100
34585: PPUSH
34586: LD_VAR 0 4
34590: PPUSH
34591: LD_EXP 100
34595: PUSH
34596: LD_VAR 0 4
34600: ARRAY
34601: PPUSH
34602: LD_VAR 0 3
34606: PPUSH
34607: CALL_OW 3
34611: PPUSH
34612: CALL_OW 1
34616: ST_TO_ADDR
// end ; end ;
34617: GO 34446
34619: POP
34620: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34621: LD_VAR 0 1
34625: PPUSH
34626: LD_EXP 100
34630: PUSH
34631: LD_VAR 0 4
34635: ARRAY
34636: PUSH
34637: LD_INT 0
34639: PLUS
34640: PPUSH
34641: CALL_OW 505
// end ;
34645: LD_VAR 0 2
34649: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34650: LD_INT 0
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
// if not hack in hackTanks then
34656: LD_VAR 0 1
34660: PUSH
34661: LD_EXP 99
34665: IN
34666: NOT
34667: IFFALSE 34671
// exit ;
34669: GO 34756
// index := GetElementIndex ( hackTanks , hack ) ;
34671: LD_ADDR_VAR 0 5
34675: PUSH
34676: LD_EXP 99
34680: PPUSH
34681: LD_VAR 0 1
34685: PPUSH
34686: CALL 41514 0 2
34690: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34691: LD_ADDR_VAR 0 4
34695: PUSH
34696: DOUBLE
34697: LD_INT 1
34699: DEC
34700: ST_TO_ADDR
34701: LD_EXP 100
34705: PUSH
34706: LD_VAR 0 5
34710: ARRAY
34711: PUSH
34712: FOR_TO
34713: IFFALSE 34754
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34715: LD_EXP 100
34719: PUSH
34720: LD_VAR 0 5
34724: ARRAY
34725: PUSH
34726: LD_VAR 0 4
34730: ARRAY
34731: PUSH
34732: LD_INT 1
34734: ARRAY
34735: PUSH
34736: LD_VAR 0 2
34740: EQUAL
34741: IFFALSE 34752
// KillUnit ( vehicle ) ;
34743: LD_VAR 0 2
34747: PPUSH
34748: CALL_OW 66
34752: GO 34712
34754: POP
34755: POP
// end ;
34756: LD_VAR 0 3
34760: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34761: LD_EXP 104
34765: NOT
34766: IFFALSE 34801
34768: GO 34770
34770: DISABLE
// begin initMiner := true ;
34771: LD_ADDR_EXP 104
34775: PUSH
34776: LD_INT 1
34778: ST_TO_ADDR
// minersList := [ ] ;
34779: LD_ADDR_EXP 105
34783: PUSH
34784: EMPTY
34785: ST_TO_ADDR
// minerMinesList := [ ] ;
34786: LD_ADDR_EXP 106
34790: PUSH
34791: EMPTY
34792: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34793: LD_ADDR_EXP 107
34797: PUSH
34798: LD_INT 5
34800: ST_TO_ADDR
// end ;
34801: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34802: LD_EXP 104
34806: PUSH
34807: LD_INT 34
34809: PUSH
34810: LD_INT 81
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PPUSH
34817: CALL_OW 69
34821: AND
34822: IFFALSE 35283
34824: GO 34826
34826: DISABLE
34827: LD_INT 0
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
// begin enable ;
34833: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34834: LD_ADDR_VAR 0 1
34838: PUSH
34839: LD_INT 34
34841: PUSH
34842: LD_INT 81
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PPUSH
34849: CALL_OW 69
34853: PUSH
34854: FOR_IN
34855: IFFALSE 34927
// begin if not i in minersList then
34857: LD_VAR 0 1
34861: PUSH
34862: LD_EXP 105
34866: IN
34867: NOT
34868: IFFALSE 34925
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34870: LD_ADDR_EXP 105
34874: PUSH
34875: LD_EXP 105
34879: PPUSH
34880: LD_EXP 105
34884: PUSH
34885: LD_INT 1
34887: PLUS
34888: PPUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 1
34898: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34899: LD_ADDR_EXP 106
34903: PUSH
34904: LD_EXP 106
34908: PPUSH
34909: LD_EXP 106
34913: PUSH
34914: LD_INT 1
34916: PLUS
34917: PPUSH
34918: EMPTY
34919: PPUSH
34920: CALL_OW 1
34924: ST_TO_ADDR
// end end ;
34925: GO 34854
34927: POP
34928: POP
// for i := minerMinesList downto 1 do
34929: LD_ADDR_VAR 0 1
34933: PUSH
34934: DOUBLE
34935: LD_EXP 106
34939: INC
34940: ST_TO_ADDR
34941: LD_INT 1
34943: PUSH
34944: FOR_DOWNTO
34945: IFFALSE 35281
// begin if IsLive ( minersList [ i ] ) then
34947: LD_EXP 105
34951: PUSH
34952: LD_VAR 0 1
34956: ARRAY
34957: PPUSH
34958: CALL_OW 300
34962: IFFALSE 34990
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34964: LD_EXP 105
34968: PUSH
34969: LD_VAR 0 1
34973: ARRAY
34974: PPUSH
34975: LD_EXP 106
34979: PUSH
34980: LD_VAR 0 1
34984: ARRAY
34985: PPUSH
34986: CALL_OW 505
// if not minerMinesList [ i ] then
34990: LD_EXP 106
34994: PUSH
34995: LD_VAR 0 1
34999: ARRAY
35000: NOT
35001: IFFALSE 35005
// continue ;
35003: GO 34944
// for j := minerMinesList [ i ] downto 1 do
35005: LD_ADDR_VAR 0 2
35009: PUSH
35010: DOUBLE
35011: LD_EXP 106
35015: PUSH
35016: LD_VAR 0 1
35020: ARRAY
35021: INC
35022: ST_TO_ADDR
35023: LD_INT 1
35025: PUSH
35026: FOR_DOWNTO
35027: IFFALSE 35277
// begin side := GetSide ( minersList [ i ] ) ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_EXP 105
35038: PUSH
35039: LD_VAR 0 1
35043: ARRAY
35044: PPUSH
35045: CALL_OW 255
35049: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35050: LD_ADDR_VAR 0 4
35054: PUSH
35055: LD_EXP 106
35059: PUSH
35060: LD_VAR 0 1
35064: ARRAY
35065: PUSH
35066: LD_VAR 0 2
35070: ARRAY
35071: PUSH
35072: LD_INT 1
35074: ARRAY
35075: PPUSH
35076: LD_EXP 106
35080: PUSH
35081: LD_VAR 0 1
35085: ARRAY
35086: PUSH
35087: LD_VAR 0 2
35091: ARRAY
35092: PUSH
35093: LD_INT 2
35095: ARRAY
35096: PPUSH
35097: CALL_OW 428
35101: ST_TO_ADDR
// if not tmp then
35102: LD_VAR 0 4
35106: NOT
35107: IFFALSE 35111
// continue ;
35109: GO 35026
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35111: LD_VAR 0 4
35115: PUSH
35116: LD_INT 81
35118: PUSH
35119: LD_VAR 0 3
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PPUSH
35128: CALL_OW 69
35132: IN
35133: PUSH
35134: LD_EXP 106
35138: PUSH
35139: LD_VAR 0 1
35143: ARRAY
35144: PUSH
35145: LD_VAR 0 2
35149: ARRAY
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PPUSH
35155: LD_EXP 106
35159: PUSH
35160: LD_VAR 0 1
35164: ARRAY
35165: PUSH
35166: LD_VAR 0 2
35170: ARRAY
35171: PUSH
35172: LD_INT 2
35174: ARRAY
35175: PPUSH
35176: CALL_OW 458
35180: AND
35181: IFFALSE 35275
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35183: LD_EXP 106
35187: PUSH
35188: LD_VAR 0 1
35192: ARRAY
35193: PUSH
35194: LD_VAR 0 2
35198: ARRAY
35199: PUSH
35200: LD_INT 1
35202: ARRAY
35203: PPUSH
35204: LD_EXP 106
35208: PUSH
35209: LD_VAR 0 1
35213: ARRAY
35214: PUSH
35215: LD_VAR 0 2
35219: ARRAY
35220: PUSH
35221: LD_INT 2
35223: ARRAY
35224: PPUSH
35225: LD_VAR 0 3
35229: PPUSH
35230: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35234: LD_ADDR_EXP 106
35238: PUSH
35239: LD_EXP 106
35243: PPUSH
35244: LD_VAR 0 1
35248: PPUSH
35249: LD_EXP 106
35253: PUSH
35254: LD_VAR 0 1
35258: ARRAY
35259: PPUSH
35260: LD_VAR 0 2
35264: PPUSH
35265: CALL_OW 3
35269: PPUSH
35270: CALL_OW 1
35274: ST_TO_ADDR
// end ; end ;
35275: GO 35026
35277: POP
35278: POP
// end ;
35279: GO 34944
35281: POP
35282: POP
// end ;
35283: PPOPN 4
35285: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35286: LD_INT 0
35288: PPUSH
35289: PPUSH
// result := false ;
35290: LD_ADDR_VAR 0 4
35294: PUSH
35295: LD_INT 0
35297: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35298: LD_VAR 0 1
35302: PPUSH
35303: CALL_OW 264
35307: PUSH
35308: LD_INT 81
35310: EQUAL
35311: NOT
35312: IFFALSE 35316
// exit ;
35314: GO 35556
// index := GetElementIndex ( minersList , unit ) ;
35316: LD_ADDR_VAR 0 5
35320: PUSH
35321: LD_EXP 105
35325: PPUSH
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL 41514 0 2
35335: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35336: LD_EXP 106
35340: PUSH
35341: LD_VAR 0 5
35345: ARRAY
35346: PUSH
35347: LD_EXP 107
35351: GREATEREQUAL
35352: IFFALSE 35356
// exit ;
35354: GO 35556
// ComMoveXY ( unit , x , y ) ;
35356: LD_VAR 0 1
35360: PPUSH
35361: LD_VAR 0 2
35365: PPUSH
35366: LD_VAR 0 3
35370: PPUSH
35371: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35375: LD_INT 35
35377: PPUSH
35378: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35382: LD_VAR 0 1
35386: PPUSH
35387: LD_VAR 0 2
35391: PPUSH
35392: LD_VAR 0 3
35396: PPUSH
35397: CALL 72869 0 3
35401: NOT
35402: PUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 314
35412: AND
35413: IFFALSE 35417
// exit ;
35415: GO 35556
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35417: LD_VAR 0 2
35421: PPUSH
35422: LD_VAR 0 3
35426: PPUSH
35427: CALL_OW 428
35431: PUSH
35432: LD_VAR 0 1
35436: EQUAL
35437: PUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: CALL_OW 314
35447: NOT
35448: AND
35449: IFFALSE 35375
// PlaySoundXY ( x , y , PlantMine ) ;
35451: LD_VAR 0 2
35455: PPUSH
35456: LD_VAR 0 3
35460: PPUSH
35461: LD_STRING PlantMine
35463: PPUSH
35464: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35468: LD_VAR 0 2
35472: PPUSH
35473: LD_VAR 0 3
35477: PPUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 255
35487: PPUSH
35488: LD_INT 0
35490: PPUSH
35491: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35495: LD_ADDR_EXP 106
35499: PUSH
35500: LD_EXP 106
35504: PPUSH
35505: LD_VAR 0 5
35509: PUSH
35510: LD_EXP 106
35514: PUSH
35515: LD_VAR 0 5
35519: ARRAY
35520: PUSH
35521: LD_INT 1
35523: PLUS
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PPUSH
35529: LD_VAR 0 2
35533: PUSH
35534: LD_VAR 0 3
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PPUSH
35543: CALL 41729 0 3
35547: ST_TO_ADDR
// result := true ;
35548: LD_ADDR_VAR 0 4
35552: PUSH
35553: LD_INT 1
35555: ST_TO_ADDR
// end ;
35556: LD_VAR 0 4
35560: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35561: LD_INT 0
35563: PPUSH
35564: PPUSH
35565: PPUSH
// if not unit in minersList then
35566: LD_VAR 0 1
35570: PUSH
35571: LD_EXP 105
35575: IN
35576: NOT
35577: IFFALSE 35581
// exit ;
35579: GO 35973
// index := GetElementIndex ( minersList , unit ) ;
35581: LD_ADDR_VAR 0 6
35585: PUSH
35586: LD_EXP 105
35590: PPUSH
35591: LD_VAR 0 1
35595: PPUSH
35596: CALL 41514 0 2
35600: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35601: LD_ADDR_VAR 0 5
35605: PUSH
35606: DOUBLE
35607: LD_EXP 106
35611: PUSH
35612: LD_VAR 0 6
35616: ARRAY
35617: INC
35618: ST_TO_ADDR
35619: LD_INT 1
35621: PUSH
35622: FOR_DOWNTO
35623: IFFALSE 35784
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35625: LD_EXP 106
35629: PUSH
35630: LD_VAR 0 6
35634: ARRAY
35635: PUSH
35636: LD_VAR 0 5
35640: ARRAY
35641: PUSH
35642: LD_INT 1
35644: ARRAY
35645: PUSH
35646: LD_VAR 0 2
35650: EQUAL
35651: PUSH
35652: LD_EXP 106
35656: PUSH
35657: LD_VAR 0 6
35661: ARRAY
35662: PUSH
35663: LD_VAR 0 5
35667: ARRAY
35668: PUSH
35669: LD_INT 2
35671: ARRAY
35672: PUSH
35673: LD_VAR 0 3
35677: EQUAL
35678: AND
35679: IFFALSE 35782
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35681: LD_EXP 106
35685: PUSH
35686: LD_VAR 0 6
35690: ARRAY
35691: PUSH
35692: LD_VAR 0 5
35696: ARRAY
35697: PUSH
35698: LD_INT 1
35700: ARRAY
35701: PPUSH
35702: LD_EXP 106
35706: PUSH
35707: LD_VAR 0 6
35711: ARRAY
35712: PUSH
35713: LD_VAR 0 5
35717: ARRAY
35718: PUSH
35719: LD_INT 2
35721: ARRAY
35722: PPUSH
35723: LD_VAR 0 1
35727: PPUSH
35728: CALL_OW 255
35732: PPUSH
35733: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35737: LD_ADDR_EXP 106
35741: PUSH
35742: LD_EXP 106
35746: PPUSH
35747: LD_VAR 0 6
35751: PPUSH
35752: LD_EXP 106
35756: PUSH
35757: LD_VAR 0 6
35761: ARRAY
35762: PPUSH
35763: LD_VAR 0 5
35767: PPUSH
35768: CALL_OW 3
35772: PPUSH
35773: CALL_OW 1
35777: ST_TO_ADDR
// exit ;
35778: POP
35779: POP
35780: GO 35973
// end ; end ;
35782: GO 35622
35784: POP
35785: POP
// for i := minerMinesList [ index ] downto 1 do
35786: LD_ADDR_VAR 0 5
35790: PUSH
35791: DOUBLE
35792: LD_EXP 106
35796: PUSH
35797: LD_VAR 0 6
35801: ARRAY
35802: INC
35803: ST_TO_ADDR
35804: LD_INT 1
35806: PUSH
35807: FOR_DOWNTO
35808: IFFALSE 35971
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35810: LD_EXP 106
35814: PUSH
35815: LD_VAR 0 6
35819: ARRAY
35820: PUSH
35821: LD_VAR 0 5
35825: ARRAY
35826: PUSH
35827: LD_INT 1
35829: ARRAY
35830: PPUSH
35831: LD_EXP 106
35835: PUSH
35836: LD_VAR 0 6
35840: ARRAY
35841: PUSH
35842: LD_VAR 0 5
35846: ARRAY
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: LD_VAR 0 3
35861: PPUSH
35862: CALL_OW 298
35866: PUSH
35867: LD_INT 6
35869: LESS
35870: IFFALSE 35969
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35872: LD_EXP 106
35876: PUSH
35877: LD_VAR 0 6
35881: ARRAY
35882: PUSH
35883: LD_VAR 0 5
35887: ARRAY
35888: PUSH
35889: LD_INT 1
35891: ARRAY
35892: PPUSH
35893: LD_EXP 106
35897: PUSH
35898: LD_VAR 0 6
35902: ARRAY
35903: PUSH
35904: LD_VAR 0 5
35908: ARRAY
35909: PUSH
35910: LD_INT 2
35912: ARRAY
35913: PPUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL_OW 255
35923: PPUSH
35924: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35928: LD_ADDR_EXP 106
35932: PUSH
35933: LD_EXP 106
35937: PPUSH
35938: LD_VAR 0 6
35942: PPUSH
35943: LD_EXP 106
35947: PUSH
35948: LD_VAR 0 6
35952: ARRAY
35953: PPUSH
35954: LD_VAR 0 5
35958: PPUSH
35959: CALL_OW 3
35963: PPUSH
35964: CALL_OW 1
35968: ST_TO_ADDR
// end ; end ;
35969: GO 35807
35971: POP
35972: POP
// end ;
35973: LD_VAR 0 4
35977: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35978: LD_INT 0
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 264
35998: PUSH
35999: LD_INT 81
36001: EQUAL
36002: NOT
36003: PUSH
36004: LD_VAR 0 1
36008: PUSH
36009: LD_EXP 105
36013: IN
36014: NOT
36015: OR
36016: IFFALSE 36020
// exit ;
36018: GO 36342
// index := GetElementIndex ( minersList , unit ) ;
36020: LD_ADDR_VAR 0 6
36024: PUSH
36025: LD_EXP 105
36029: PPUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL 41514 0 2
36039: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36040: LD_ADDR_VAR 0 8
36044: PUSH
36045: LD_EXP 107
36049: PUSH
36050: LD_EXP 106
36054: PUSH
36055: LD_VAR 0 6
36059: ARRAY
36060: MINUS
36061: ST_TO_ADDR
// if not minesFreeAmount then
36062: LD_VAR 0 8
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 36342
// tmp := [ ] ;
36071: LD_ADDR_VAR 0 7
36075: PUSH
36076: EMPTY
36077: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36078: LD_ADDR_VAR 0 5
36082: PUSH
36083: DOUBLE
36084: LD_INT 1
36086: DEC
36087: ST_TO_ADDR
36088: LD_VAR 0 8
36092: PUSH
36093: FOR_TO
36094: IFFALSE 36289
// begin _d := rand ( 0 , 5 ) ;
36096: LD_ADDR_VAR 0 11
36100: PUSH
36101: LD_INT 0
36103: PPUSH
36104: LD_INT 5
36106: PPUSH
36107: CALL_OW 12
36111: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36112: LD_ADDR_VAR 0 12
36116: PUSH
36117: LD_INT 2
36119: PPUSH
36120: LD_INT 6
36122: PPUSH
36123: CALL_OW 12
36127: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36128: LD_ADDR_VAR 0 9
36132: PUSH
36133: LD_VAR 0 2
36137: PPUSH
36138: LD_VAR 0 11
36142: PPUSH
36143: LD_VAR 0 12
36147: PPUSH
36148: CALL_OW 272
36152: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36153: LD_ADDR_VAR 0 10
36157: PUSH
36158: LD_VAR 0 3
36162: PPUSH
36163: LD_VAR 0 11
36167: PPUSH
36168: LD_VAR 0 12
36172: PPUSH
36173: CALL_OW 273
36177: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36178: LD_VAR 0 9
36182: PPUSH
36183: LD_VAR 0 10
36187: PPUSH
36188: CALL_OW 488
36192: PUSH
36193: LD_VAR 0 9
36197: PUSH
36198: LD_VAR 0 10
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_VAR 0 7
36211: IN
36212: NOT
36213: AND
36214: PUSH
36215: LD_VAR 0 9
36219: PPUSH
36220: LD_VAR 0 10
36224: PPUSH
36225: CALL_OW 458
36229: NOT
36230: AND
36231: IFFALSE 36273
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36233: LD_ADDR_VAR 0 7
36237: PUSH
36238: LD_VAR 0 7
36242: PPUSH
36243: LD_VAR 0 7
36247: PUSH
36248: LD_INT 1
36250: PLUS
36251: PPUSH
36252: LD_VAR 0 9
36256: PUSH
36257: LD_VAR 0 10
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PPUSH
36266: CALL_OW 1
36270: ST_TO_ADDR
36271: GO 36287
// i := i - 1 ;
36273: LD_ADDR_VAR 0 5
36277: PUSH
36278: LD_VAR 0 5
36282: PUSH
36283: LD_INT 1
36285: MINUS
36286: ST_TO_ADDR
// end ;
36287: GO 36093
36289: POP
36290: POP
// for i in tmp do
36291: LD_ADDR_VAR 0 5
36295: PUSH
36296: LD_VAR 0 7
36300: PUSH
36301: FOR_IN
36302: IFFALSE 36340
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36304: LD_VAR 0 1
36308: PPUSH
36309: LD_VAR 0 5
36313: PUSH
36314: LD_INT 1
36316: ARRAY
36317: PPUSH
36318: LD_VAR 0 5
36322: PUSH
36323: LD_INT 2
36325: ARRAY
36326: PPUSH
36327: CALL 35286 0 3
36331: NOT
36332: IFFALSE 36338
// exit ;
36334: POP
36335: POP
36336: GO 36342
36338: GO 36301
36340: POP
36341: POP
// end ;
36342: LD_VAR 0 4
36346: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36347: LD_INT 0
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
// if not GetClass ( unit ) = class_sniper then
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 257
36365: PUSH
36366: LD_INT 5
36368: EQUAL
36369: NOT
36370: IFFALSE 36374
// exit ;
36372: GO 36762
// dist := 8 ;
36374: LD_ADDR_VAR 0 5
36378: PUSH
36379: LD_INT 8
36381: ST_TO_ADDR
// viewRange := 12 ;
36382: LD_ADDR_VAR 0 7
36386: PUSH
36387: LD_INT 12
36389: ST_TO_ADDR
// side := GetSide ( unit ) ;
36390: LD_ADDR_VAR 0 6
36394: PUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: CALL_OW 255
36404: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36405: LD_INT 61
36407: PPUSH
36408: LD_VAR 0 6
36412: PPUSH
36413: CALL_OW 321
36417: PUSH
36418: LD_INT 2
36420: EQUAL
36421: IFFALSE 36431
// viewRange := 16 ;
36423: LD_ADDR_VAR 0 7
36427: PUSH
36428: LD_INT 16
36430: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36431: LD_VAR 0 1
36435: PPUSH
36436: LD_VAR 0 2
36440: PPUSH
36441: LD_VAR 0 3
36445: PPUSH
36446: CALL_OW 297
36450: PUSH
36451: LD_VAR 0 5
36455: GREATER
36456: IFFALSE 36535
// begin ComMoveXY ( unit , x , y ) ;
36458: LD_VAR 0 1
36462: PPUSH
36463: LD_VAR 0 2
36467: PPUSH
36468: LD_VAR 0 3
36472: PPUSH
36473: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36477: LD_INT 35
36479: PPUSH
36480: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36484: LD_VAR 0 1
36488: PPUSH
36489: LD_VAR 0 2
36493: PPUSH
36494: LD_VAR 0 3
36498: PPUSH
36499: CALL 72869 0 3
36503: NOT
36504: IFFALSE 36508
// exit ;
36506: GO 36762
// until GetDistUnitXY ( unit , x , y ) < dist ;
36508: LD_VAR 0 1
36512: PPUSH
36513: LD_VAR 0 2
36517: PPUSH
36518: LD_VAR 0 3
36522: PPUSH
36523: CALL_OW 297
36527: PUSH
36528: LD_VAR 0 5
36532: LESS
36533: IFFALSE 36477
// end ; ComTurnXY ( unit , x , y ) ;
36535: LD_VAR 0 1
36539: PPUSH
36540: LD_VAR 0 2
36544: PPUSH
36545: LD_VAR 0 3
36549: PPUSH
36550: CALL_OW 118
// wait ( 5 ) ;
36554: LD_INT 5
36556: PPUSH
36557: CALL_OW 67
// _d := GetDir ( unit ) ;
36561: LD_ADDR_VAR 0 10
36565: PUSH
36566: LD_VAR 0 1
36570: PPUSH
36571: CALL_OW 254
36575: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36576: LD_ADDR_VAR 0 8
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 250
36590: PPUSH
36591: LD_VAR 0 10
36595: PPUSH
36596: LD_VAR 0 5
36600: PPUSH
36601: CALL_OW 272
36605: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36606: LD_ADDR_VAR 0 9
36610: PUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 251
36620: PPUSH
36621: LD_VAR 0 10
36625: PPUSH
36626: LD_VAR 0 5
36630: PPUSH
36631: CALL_OW 273
36635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36636: LD_VAR 0 8
36640: PPUSH
36641: LD_VAR 0 9
36645: PPUSH
36646: CALL_OW 488
36650: NOT
36651: IFFALSE 36655
// exit ;
36653: GO 36762
// ComAnimCustom ( unit , 1 ) ;
36655: LD_VAR 0 1
36659: PPUSH
36660: LD_INT 1
36662: PPUSH
36663: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36667: LD_VAR 0 8
36671: PPUSH
36672: LD_VAR 0 9
36676: PPUSH
36677: LD_VAR 0 6
36681: PPUSH
36682: LD_VAR 0 7
36686: PPUSH
36687: CALL_OW 330
// repeat wait ( 1 ) ;
36691: LD_INT 1
36693: PPUSH
36694: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36698: LD_VAR 0 1
36702: PPUSH
36703: CALL_OW 316
36707: PUSH
36708: LD_VAR 0 1
36712: PPUSH
36713: CALL_OW 314
36717: OR
36718: PUSH
36719: LD_VAR 0 1
36723: PPUSH
36724: CALL_OW 302
36728: NOT
36729: OR
36730: PUSH
36731: LD_VAR 0 1
36735: PPUSH
36736: CALL_OW 301
36740: OR
36741: IFFALSE 36691
// RemoveSeeing ( _x , _y , side ) ;
36743: LD_VAR 0 8
36747: PPUSH
36748: LD_VAR 0 9
36752: PPUSH
36753: LD_VAR 0 6
36757: PPUSH
36758: CALL_OW 331
// end ; end_of_file
36762: LD_VAR 0 4
36766: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36767: LD_INT 0
36769: PPUSH
36770: PPUSH
// if exist_mode then
36771: LD_VAR 0 2
36775: IFFALSE 36800
// unit := CreateCharacter ( prefix & ident ) else
36777: LD_ADDR_VAR 0 5
36781: PUSH
36782: LD_VAR 0 3
36786: PUSH
36787: LD_VAR 0 1
36791: STR
36792: PPUSH
36793: CALL_OW 34
36797: ST_TO_ADDR
36798: GO 36815
// unit := NewCharacter ( ident ) ;
36800: LD_ADDR_VAR 0 5
36804: PUSH
36805: LD_VAR 0 1
36809: PPUSH
36810: CALL_OW 25
36814: ST_TO_ADDR
// result := unit ;
36815: LD_ADDR_VAR 0 4
36819: PUSH
36820: LD_VAR 0 5
36824: ST_TO_ADDR
// end ;
36825: LD_VAR 0 4
36829: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36830: LD_INT 0
36832: PPUSH
36833: PPUSH
// if not side or not nation then
36834: LD_VAR 0 1
36838: NOT
36839: PUSH
36840: LD_VAR 0 2
36844: NOT
36845: OR
36846: IFFALSE 36850
// exit ;
36848: GO 37618
// case nation of nation_american :
36850: LD_VAR 0 2
36854: PUSH
36855: LD_INT 1
36857: DOUBLE
36858: EQUAL
36859: IFTRUE 36863
36861: GO 37077
36863: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36864: LD_ADDR_VAR 0 4
36868: PUSH
36869: LD_INT 35
36871: PUSH
36872: LD_INT 45
36874: PUSH
36875: LD_INT 46
36877: PUSH
36878: LD_INT 47
36880: PUSH
36881: LD_INT 82
36883: PUSH
36884: LD_INT 83
36886: PUSH
36887: LD_INT 84
36889: PUSH
36890: LD_INT 85
36892: PUSH
36893: LD_INT 86
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 6
36904: PUSH
36905: LD_INT 15
36907: PUSH
36908: LD_INT 16
36910: PUSH
36911: LD_INT 7
36913: PUSH
36914: LD_INT 12
36916: PUSH
36917: LD_INT 13
36919: PUSH
36920: LD_INT 10
36922: PUSH
36923: LD_INT 14
36925: PUSH
36926: LD_INT 20
36928: PUSH
36929: LD_INT 21
36931: PUSH
36932: LD_INT 22
36934: PUSH
36935: LD_INT 25
36937: PUSH
36938: LD_INT 32
36940: PUSH
36941: LD_INT 27
36943: PUSH
36944: LD_INT 36
36946: PUSH
36947: LD_INT 69
36949: PUSH
36950: LD_INT 39
36952: PUSH
36953: LD_INT 34
36955: PUSH
36956: LD_INT 40
36958: PUSH
36959: LD_INT 48
36961: PUSH
36962: LD_INT 49
36964: PUSH
36965: LD_INT 50
36967: PUSH
36968: LD_INT 51
36970: PUSH
36971: LD_INT 52
36973: PUSH
36974: LD_INT 53
36976: PUSH
36977: LD_INT 54
36979: PUSH
36980: LD_INT 55
36982: PUSH
36983: LD_INT 56
36985: PUSH
36986: LD_INT 57
36988: PUSH
36989: LD_INT 58
36991: PUSH
36992: LD_INT 59
36994: PUSH
36995: LD_INT 60
36997: PUSH
36998: LD_INT 61
37000: PUSH
37001: LD_INT 62
37003: PUSH
37004: LD_INT 80
37006: PUSH
37007: LD_INT 82
37009: PUSH
37010: LD_INT 83
37012: PUSH
37013: LD_INT 84
37015: PUSH
37016: LD_INT 85
37018: PUSH
37019: LD_INT 86
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
37075: GO 37542
37077: LD_INT 2
37079: DOUBLE
37080: EQUAL
37081: IFTRUE 37085
37083: GO 37311
37085: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37086: LD_ADDR_VAR 0 4
37090: PUSH
37091: LD_INT 35
37093: PUSH
37094: LD_INT 45
37096: PUSH
37097: LD_INT 46
37099: PUSH
37100: LD_INT 47
37102: PUSH
37103: LD_INT 82
37105: PUSH
37106: LD_INT 83
37108: PUSH
37109: LD_INT 84
37111: PUSH
37112: LD_INT 85
37114: PUSH
37115: LD_INT 87
37117: PUSH
37118: LD_INT 70
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 11
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: LD_INT 4
37132: PUSH
37133: LD_INT 5
37135: PUSH
37136: LD_INT 6
37138: PUSH
37139: LD_INT 15
37141: PUSH
37142: LD_INT 18
37144: PUSH
37145: LD_INT 7
37147: PUSH
37148: LD_INT 17
37150: PUSH
37151: LD_INT 8
37153: PUSH
37154: LD_INT 20
37156: PUSH
37157: LD_INT 21
37159: PUSH
37160: LD_INT 22
37162: PUSH
37163: LD_INT 72
37165: PUSH
37166: LD_INT 26
37168: PUSH
37169: LD_INT 69
37171: PUSH
37172: LD_INT 39
37174: PUSH
37175: LD_INT 40
37177: PUSH
37178: LD_INT 41
37180: PUSH
37181: LD_INT 42
37183: PUSH
37184: LD_INT 43
37186: PUSH
37187: LD_INT 48
37189: PUSH
37190: LD_INT 49
37192: PUSH
37193: LD_INT 50
37195: PUSH
37196: LD_INT 51
37198: PUSH
37199: LD_INT 52
37201: PUSH
37202: LD_INT 53
37204: PUSH
37205: LD_INT 54
37207: PUSH
37208: LD_INT 55
37210: PUSH
37211: LD_INT 56
37213: PUSH
37214: LD_INT 60
37216: PUSH
37217: LD_INT 61
37219: PUSH
37220: LD_INT 62
37222: PUSH
37223: LD_INT 66
37225: PUSH
37226: LD_INT 67
37228: PUSH
37229: LD_INT 68
37231: PUSH
37232: LD_INT 81
37234: PUSH
37235: LD_INT 82
37237: PUSH
37238: LD_INT 83
37240: PUSH
37241: LD_INT 84
37243: PUSH
37244: LD_INT 85
37246: PUSH
37247: LD_INT 87
37249: PUSH
37250: LD_INT 88
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
37309: GO 37542
37311: LD_INT 3
37313: DOUBLE
37314: EQUAL
37315: IFTRUE 37319
37317: GO 37541
37319: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37320: LD_ADDR_VAR 0 4
37324: PUSH
37325: LD_INT 46
37327: PUSH
37328: LD_INT 47
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 82
37339: PUSH
37340: LD_INT 83
37342: PUSH
37343: LD_INT 84
37345: PUSH
37346: LD_INT 85
37348: PUSH
37349: LD_INT 86
37351: PUSH
37352: LD_INT 11
37354: PUSH
37355: LD_INT 9
37357: PUSH
37358: LD_INT 20
37360: PUSH
37361: LD_INT 19
37363: PUSH
37364: LD_INT 21
37366: PUSH
37367: LD_INT 24
37369: PUSH
37370: LD_INT 22
37372: PUSH
37373: LD_INT 25
37375: PUSH
37376: LD_INT 28
37378: PUSH
37379: LD_INT 29
37381: PUSH
37382: LD_INT 30
37384: PUSH
37385: LD_INT 31
37387: PUSH
37388: LD_INT 37
37390: PUSH
37391: LD_INT 38
37393: PUSH
37394: LD_INT 32
37396: PUSH
37397: LD_INT 27
37399: PUSH
37400: LD_INT 33
37402: PUSH
37403: LD_INT 69
37405: PUSH
37406: LD_INT 39
37408: PUSH
37409: LD_INT 34
37411: PUSH
37412: LD_INT 40
37414: PUSH
37415: LD_INT 71
37417: PUSH
37418: LD_INT 23
37420: PUSH
37421: LD_INT 44
37423: PUSH
37424: LD_INT 48
37426: PUSH
37427: LD_INT 49
37429: PUSH
37430: LD_INT 50
37432: PUSH
37433: LD_INT 51
37435: PUSH
37436: LD_INT 52
37438: PUSH
37439: LD_INT 53
37441: PUSH
37442: LD_INT 54
37444: PUSH
37445: LD_INT 55
37447: PUSH
37448: LD_INT 56
37450: PUSH
37451: LD_INT 57
37453: PUSH
37454: LD_INT 58
37456: PUSH
37457: LD_INT 59
37459: PUSH
37460: LD_INT 63
37462: PUSH
37463: LD_INT 64
37465: PUSH
37466: LD_INT 65
37468: PUSH
37469: LD_INT 82
37471: PUSH
37472: LD_INT 83
37474: PUSH
37475: LD_INT 84
37477: PUSH
37478: LD_INT 85
37480: PUSH
37481: LD_INT 86
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: ST_TO_ADDR
37539: GO 37542
37541: POP
// if state > - 1 and state < 3 then
37542: LD_VAR 0 3
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: GREATER
37551: PUSH
37552: LD_VAR 0 3
37556: PUSH
37557: LD_INT 3
37559: LESS
37560: AND
37561: IFFALSE 37618
// for i in result do
37563: LD_ADDR_VAR 0 5
37567: PUSH
37568: LD_VAR 0 4
37572: PUSH
37573: FOR_IN
37574: IFFALSE 37616
// if GetTech ( i , side ) <> state then
37576: LD_VAR 0 5
37580: PPUSH
37581: LD_VAR 0 1
37585: PPUSH
37586: CALL_OW 321
37590: PUSH
37591: LD_VAR 0 3
37595: NONEQUAL
37596: IFFALSE 37614
// result := result diff i ;
37598: LD_ADDR_VAR 0 4
37602: PUSH
37603: LD_VAR 0 4
37607: PUSH
37608: LD_VAR 0 5
37612: DIFF
37613: ST_TO_ADDR
37614: GO 37573
37616: POP
37617: POP
// end ;
37618: LD_VAR 0 4
37622: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37623: LD_INT 0
37625: PPUSH
37626: PPUSH
37627: PPUSH
// result := true ;
37628: LD_ADDR_VAR 0 3
37632: PUSH
37633: LD_INT 1
37635: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37636: LD_ADDR_VAR 0 5
37640: PUSH
37641: LD_VAR 0 2
37645: PPUSH
37646: CALL_OW 480
37650: ST_TO_ADDR
// if not tmp then
37651: LD_VAR 0 5
37655: NOT
37656: IFFALSE 37660
// exit ;
37658: GO 37709
// for i in tmp do
37660: LD_ADDR_VAR 0 4
37664: PUSH
37665: LD_VAR 0 5
37669: PUSH
37670: FOR_IN
37671: IFFALSE 37707
// if GetTech ( i , side ) <> state_researched then
37673: LD_VAR 0 4
37677: PPUSH
37678: LD_VAR 0 1
37682: PPUSH
37683: CALL_OW 321
37687: PUSH
37688: LD_INT 2
37690: NONEQUAL
37691: IFFALSE 37705
// begin result := false ;
37693: LD_ADDR_VAR 0 3
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// exit ;
37701: POP
37702: POP
37703: GO 37709
// end ;
37705: GO 37670
37707: POP
37708: POP
// end ;
37709: LD_VAR 0 3
37713: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37729: LD_VAR 0 1
37733: NOT
37734: PUSH
37735: LD_VAR 0 1
37739: PPUSH
37740: CALL_OW 257
37744: PUSH
37745: LD_INT 9
37747: NONEQUAL
37748: OR
37749: IFFALSE 37753
// exit ;
37751: GO 38326
// side := GetSide ( unit ) ;
37753: LD_ADDR_VAR 0 9
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 255
37767: ST_TO_ADDR
// tech_space := tech_spacanom ;
37768: LD_ADDR_VAR 0 12
37772: PUSH
37773: LD_INT 29
37775: ST_TO_ADDR
// tech_time := tech_taurad ;
37776: LD_ADDR_VAR 0 13
37780: PUSH
37781: LD_INT 28
37783: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37784: LD_ADDR_VAR 0 11
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 310
37798: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37799: LD_VAR 0 11
37803: PPUSH
37804: CALL_OW 247
37808: PUSH
37809: LD_INT 2
37811: EQUAL
37812: IFFALSE 37816
// exit ;
37814: GO 38326
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37816: LD_ADDR_VAR 0 8
37820: PUSH
37821: LD_INT 81
37823: PUSH
37824: LD_VAR 0 9
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: LD_INT 21
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL_OW 69
37858: ST_TO_ADDR
// if not tmp then
37859: LD_VAR 0 8
37863: NOT
37864: IFFALSE 37868
// exit ;
37866: GO 38326
// if in_unit then
37868: LD_VAR 0 11
37872: IFFALSE 37896
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37874: LD_ADDR_VAR 0 10
37878: PUSH
37879: LD_VAR 0 8
37883: PPUSH
37884: LD_VAR 0 11
37888: PPUSH
37889: CALL_OW 74
37893: ST_TO_ADDR
37894: GO 37916
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37896: LD_ADDR_VAR 0 10
37900: PUSH
37901: LD_VAR 0 8
37905: PPUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 74
37915: ST_TO_ADDR
// if not enemy then
37916: LD_VAR 0 10
37920: NOT
37921: IFFALSE 37925
// exit ;
37923: GO 38326
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37925: LD_VAR 0 11
37929: PUSH
37930: LD_VAR 0 11
37934: PPUSH
37935: LD_VAR 0 10
37939: PPUSH
37940: CALL_OW 296
37944: PUSH
37945: LD_INT 13
37947: GREATER
37948: AND
37949: PUSH
37950: LD_VAR 0 1
37954: PPUSH
37955: LD_VAR 0 10
37959: PPUSH
37960: CALL_OW 296
37964: PUSH
37965: LD_INT 12
37967: GREATER
37968: OR
37969: IFFALSE 37973
// exit ;
37971: GO 38326
// missile := [ 1 ] ;
37973: LD_ADDR_VAR 0 14
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37984: LD_VAR 0 9
37988: PPUSH
37989: LD_VAR 0 12
37993: PPUSH
37994: CALL_OW 325
37998: IFFALSE 38027
// missile := Replace ( missile , missile + 1 , 2 ) ;
38000: LD_ADDR_VAR 0 14
38004: PUSH
38005: LD_VAR 0 14
38009: PPUSH
38010: LD_VAR 0 14
38014: PUSH
38015: LD_INT 1
38017: PLUS
38018: PPUSH
38019: LD_INT 2
38021: PPUSH
38022: CALL_OW 1
38026: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38027: LD_VAR 0 9
38031: PPUSH
38032: LD_VAR 0 13
38036: PPUSH
38037: CALL_OW 325
38041: PUSH
38042: LD_VAR 0 10
38046: PPUSH
38047: CALL_OW 255
38051: PPUSH
38052: LD_VAR 0 13
38056: PPUSH
38057: CALL_OW 325
38061: NOT
38062: AND
38063: IFFALSE 38092
// missile := Replace ( missile , missile + 1 , 3 ) ;
38065: LD_ADDR_VAR 0 14
38069: PUSH
38070: LD_VAR 0 14
38074: PPUSH
38075: LD_VAR 0 14
38079: PUSH
38080: LD_INT 1
38082: PLUS
38083: PPUSH
38084: LD_INT 3
38086: PPUSH
38087: CALL_OW 1
38091: ST_TO_ADDR
// if missile < 2 then
38092: LD_VAR 0 14
38096: PUSH
38097: LD_INT 2
38099: LESS
38100: IFFALSE 38104
// exit ;
38102: GO 38326
// x := GetX ( enemy ) ;
38104: LD_ADDR_VAR 0 4
38108: PUSH
38109: LD_VAR 0 10
38113: PPUSH
38114: CALL_OW 250
38118: ST_TO_ADDR
// y := GetY ( enemy ) ;
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_VAR 0 10
38128: PPUSH
38129: CALL_OW 251
38133: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38134: LD_ADDR_VAR 0 6
38138: PUSH
38139: LD_VAR 0 4
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PPUSH
38148: LD_INT 1
38150: PPUSH
38151: CALL_OW 12
38155: PLUS
38156: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38157: LD_ADDR_VAR 0 7
38161: PUSH
38162: LD_VAR 0 5
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PPUSH
38171: LD_INT 1
38173: PPUSH
38174: CALL_OW 12
38178: PLUS
38179: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38180: LD_VAR 0 6
38184: PPUSH
38185: LD_VAR 0 7
38189: PPUSH
38190: CALL_OW 488
38194: NOT
38195: IFFALSE 38217
// begin _x := x ;
38197: LD_ADDR_VAR 0 6
38201: PUSH
38202: LD_VAR 0 4
38206: ST_TO_ADDR
// _y := y ;
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: LD_VAR 0 5
38216: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38217: LD_ADDR_VAR 0 3
38221: PUSH
38222: LD_INT 1
38224: PPUSH
38225: LD_VAR 0 14
38229: PPUSH
38230: CALL_OW 12
38234: ST_TO_ADDR
// case i of 1 :
38235: LD_VAR 0 3
38239: PUSH
38240: LD_INT 1
38242: DOUBLE
38243: EQUAL
38244: IFTRUE 38248
38246: GO 38265
38248: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38249: LD_VAR 0 1
38253: PPUSH
38254: LD_VAR 0 10
38258: PPUSH
38259: CALL_OW 115
38263: GO 38326
38265: LD_INT 2
38267: DOUBLE
38268: EQUAL
38269: IFTRUE 38273
38271: GO 38295
38273: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38274: LD_VAR 0 1
38278: PPUSH
38279: LD_VAR 0 6
38283: PPUSH
38284: LD_VAR 0 7
38288: PPUSH
38289: CALL_OW 153
38293: GO 38326
38295: LD_INT 3
38297: DOUBLE
38298: EQUAL
38299: IFTRUE 38303
38301: GO 38325
38303: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38304: LD_VAR 0 1
38308: PPUSH
38309: LD_VAR 0 6
38313: PPUSH
38314: LD_VAR 0 7
38318: PPUSH
38319: CALL_OW 154
38323: GO 38326
38325: POP
// end ;
38326: LD_VAR 0 2
38330: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38331: LD_INT 0
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
// if not unit or not building then
38339: LD_VAR 0 1
38343: NOT
38344: PUSH
38345: LD_VAR 0 2
38349: NOT
38350: OR
38351: IFFALSE 38355
// exit ;
38353: GO 38513
// x := GetX ( building ) ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_VAR 0 2
38364: PPUSH
38365: CALL_OW 250
38369: ST_TO_ADDR
// y := GetY ( building ) ;
38370: LD_ADDR_VAR 0 6
38374: PUSH
38375: LD_VAR 0 2
38379: PPUSH
38380: CALL_OW 251
38384: ST_TO_ADDR
// for i = 0 to 5 do
38385: LD_ADDR_VAR 0 4
38389: PUSH
38390: DOUBLE
38391: LD_INT 0
38393: DEC
38394: ST_TO_ADDR
38395: LD_INT 5
38397: PUSH
38398: FOR_TO
38399: IFFALSE 38511
// begin _x := ShiftX ( x , i , 3 ) ;
38401: LD_ADDR_VAR 0 7
38405: PUSH
38406: LD_VAR 0 5
38410: PPUSH
38411: LD_VAR 0 4
38415: PPUSH
38416: LD_INT 3
38418: PPUSH
38419: CALL_OW 272
38423: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38424: LD_ADDR_VAR 0 8
38428: PUSH
38429: LD_VAR 0 6
38433: PPUSH
38434: LD_VAR 0 4
38438: PPUSH
38439: LD_INT 3
38441: PPUSH
38442: CALL_OW 273
38446: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38447: LD_VAR 0 7
38451: PPUSH
38452: LD_VAR 0 8
38456: PPUSH
38457: CALL_OW 488
38461: NOT
38462: IFFALSE 38466
// continue ;
38464: GO 38398
// if HexInfo ( _x , _y ) = 0 then
38466: LD_VAR 0 7
38470: PPUSH
38471: LD_VAR 0 8
38475: PPUSH
38476: CALL_OW 428
38480: PUSH
38481: LD_INT 0
38483: EQUAL
38484: IFFALSE 38509
// begin ComMoveXY ( unit , _x , _y ) ;
38486: LD_VAR 0 1
38490: PPUSH
38491: LD_VAR 0 7
38495: PPUSH
38496: LD_VAR 0 8
38500: PPUSH
38501: CALL_OW 111
// exit ;
38505: POP
38506: POP
38507: GO 38513
// end ; end ;
38509: GO 38398
38511: POP
38512: POP
// end ;
38513: LD_VAR 0 3
38517: RET
// export function ScanBase ( side , base_area ) ; begin
38518: LD_INT 0
38520: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38521: LD_ADDR_VAR 0 3
38525: PUSH
38526: LD_VAR 0 2
38530: PPUSH
38531: LD_INT 81
38533: PUSH
38534: LD_VAR 0 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PPUSH
38543: CALL_OW 70
38547: ST_TO_ADDR
// end ;
38548: LD_VAR 0 3
38552: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38553: LD_INT 0
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
// result := false ;
38559: LD_ADDR_VAR 0 2
38563: PUSH
38564: LD_INT 0
38566: ST_TO_ADDR
// side := GetSide ( unit ) ;
38567: LD_ADDR_VAR 0 3
38571: PUSH
38572: LD_VAR 0 1
38576: PPUSH
38577: CALL_OW 255
38581: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38582: LD_ADDR_VAR 0 4
38586: PUSH
38587: LD_VAR 0 1
38591: PPUSH
38592: CALL_OW 248
38596: ST_TO_ADDR
// case nat of 1 :
38597: LD_VAR 0 4
38601: PUSH
38602: LD_INT 1
38604: DOUBLE
38605: EQUAL
38606: IFTRUE 38610
38608: GO 38621
38610: POP
// tech := tech_lassight ; 2 :
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_INT 12
38618: ST_TO_ADDR
38619: GO 38660
38621: LD_INT 2
38623: DOUBLE
38624: EQUAL
38625: IFTRUE 38629
38627: GO 38640
38629: POP
// tech := tech_mortar ; 3 :
38630: LD_ADDR_VAR 0 5
38634: PUSH
38635: LD_INT 41
38637: ST_TO_ADDR
38638: GO 38660
38640: LD_INT 3
38642: DOUBLE
38643: EQUAL
38644: IFTRUE 38648
38646: GO 38659
38648: POP
// tech := tech_bazooka ; end ;
38649: LD_ADDR_VAR 0 5
38653: PUSH
38654: LD_INT 44
38656: ST_TO_ADDR
38657: GO 38660
38659: POP
// if Researched ( side , tech ) then
38660: LD_VAR 0 3
38664: PPUSH
38665: LD_VAR 0 5
38669: PPUSH
38670: CALL_OW 325
38674: IFFALSE 38701
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38676: LD_ADDR_VAR 0 2
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: LD_INT 8
38686: PUSH
38687: LD_INT 9
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: LD_VAR 0 4
38699: ARRAY
38700: ST_TO_ADDR
// end ;
38701: LD_VAR 0 2
38705: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38706: LD_INT 0
38708: PPUSH
38709: PPUSH
38710: PPUSH
// if not mines then
38711: LD_VAR 0 2
38715: NOT
38716: IFFALSE 38720
// exit ;
38718: GO 38864
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38720: LD_ADDR_VAR 0 5
38724: PUSH
38725: LD_INT 81
38727: PUSH
38728: LD_VAR 0 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: LD_INT 21
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL_OW 69
38762: ST_TO_ADDR
// for i in mines do
38763: LD_ADDR_VAR 0 4
38767: PUSH
38768: LD_VAR 0 2
38772: PUSH
38773: FOR_IN
38774: IFFALSE 38862
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38776: LD_VAR 0 4
38780: PUSH
38781: LD_INT 1
38783: ARRAY
38784: PPUSH
38785: LD_VAR 0 4
38789: PUSH
38790: LD_INT 2
38792: ARRAY
38793: PPUSH
38794: CALL_OW 458
38798: NOT
38799: IFFALSE 38803
// continue ;
38801: GO 38773
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38803: LD_VAR 0 4
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: PPUSH
38812: LD_VAR 0 4
38816: PUSH
38817: LD_INT 2
38819: ARRAY
38820: PPUSH
38821: CALL_OW 428
38825: PUSH
38826: LD_VAR 0 5
38830: IN
38831: IFFALSE 38860
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38833: LD_VAR 0 4
38837: PUSH
38838: LD_INT 1
38840: ARRAY
38841: PPUSH
38842: LD_VAR 0 4
38846: PUSH
38847: LD_INT 2
38849: ARRAY
38850: PPUSH
38851: LD_VAR 0 1
38855: PPUSH
38856: CALL_OW 456
// end ;
38860: GO 38773
38862: POP
38863: POP
// end ;
38864: LD_VAR 0 3
38868: RET
// export function Count ( array ) ; begin
38869: LD_INT 0
38871: PPUSH
// result := array + 0 ;
38872: LD_ADDR_VAR 0 2
38876: PUSH
38877: LD_VAR 0 1
38881: PUSH
38882: LD_INT 0
38884: PLUS
38885: ST_TO_ADDR
// end ;
38886: LD_VAR 0 2
38890: RET
// export function IsEmpty ( building ) ; begin
38891: LD_INT 0
38893: PPUSH
// if not building then
38894: LD_VAR 0 1
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 38946
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38903: LD_ADDR_VAR 0 2
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_INT 22
38915: PUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 255
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 58
38932: PUSH
38933: EMPTY
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PPUSH
38940: CALL_OW 69
38944: IN
38945: ST_TO_ADDR
// end ;
38946: LD_VAR 0 2
38950: RET
// export function IsNotFull ( building ) ; var places ; begin
38951: LD_INT 0
38953: PPUSH
38954: PPUSH
// if not building then
38955: LD_VAR 0 1
38959: NOT
38960: IFFALSE 38964
// exit ;
38962: GO 38992
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38964: LD_ADDR_VAR 0 2
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: LD_INT 3
38976: PUSH
38977: LD_INT 62
38979: PUSH
38980: EMPTY
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PPUSH
38987: CALL_OW 72
38991: ST_TO_ADDR
// end ;
38992: LD_VAR 0 2
38996: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38997: LD_INT 0
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
// tmp := [ ] ;
39003: LD_ADDR_VAR 0 3
39007: PUSH
39008: EMPTY
39009: ST_TO_ADDR
// list := [ ] ;
39010: LD_ADDR_VAR 0 5
39014: PUSH
39015: EMPTY
39016: ST_TO_ADDR
// for i = 16 to 25 do
39017: LD_ADDR_VAR 0 4
39021: PUSH
39022: DOUBLE
39023: LD_INT 16
39025: DEC
39026: ST_TO_ADDR
39027: LD_INT 25
39029: PUSH
39030: FOR_TO
39031: IFFALSE 39104
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39033: LD_ADDR_VAR 0 3
39037: PUSH
39038: LD_VAR 0 3
39042: PUSH
39043: LD_INT 22
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 255
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 91
39062: PUSH
39063: LD_VAR 0 1
39067: PUSH
39068: LD_INT 6
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 30
39078: PUSH
39079: LD_VAR 0 4
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: PPUSH
39096: CALL_OW 69
39100: ADD
39101: ST_TO_ADDR
39102: GO 39030
39104: POP
39105: POP
// for i = 1 to tmp do
39106: LD_ADDR_VAR 0 4
39110: PUSH
39111: DOUBLE
39112: LD_INT 1
39114: DEC
39115: ST_TO_ADDR
39116: LD_VAR 0 3
39120: PUSH
39121: FOR_TO
39122: IFFALSE 39210
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_VAR 0 5
39133: PUSH
39134: LD_VAR 0 3
39138: PUSH
39139: LD_VAR 0 4
39143: ARRAY
39144: PPUSH
39145: CALL_OW 266
39149: PUSH
39150: LD_VAR 0 3
39154: PUSH
39155: LD_VAR 0 4
39159: ARRAY
39160: PPUSH
39161: CALL_OW 250
39165: PUSH
39166: LD_VAR 0 3
39170: PUSH
39171: LD_VAR 0 4
39175: ARRAY
39176: PPUSH
39177: CALL_OW 251
39181: PUSH
39182: LD_VAR 0 3
39186: PUSH
39187: LD_VAR 0 4
39191: ARRAY
39192: PPUSH
39193: CALL_OW 254
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: ADD
39207: ST_TO_ADDR
39208: GO 39121
39210: POP
39211: POP
// result := list ;
39212: LD_ADDR_VAR 0 2
39216: PUSH
39217: LD_VAR 0 5
39221: ST_TO_ADDR
// end ;
39222: LD_VAR 0 2
39226: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39227: LD_INT 0
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
// if not factory then
39236: LD_VAR 0 1
39240: NOT
39241: IFFALSE 39245
// exit ;
39243: GO 39838
// if control = control_apeman then
39245: LD_VAR 0 4
39249: PUSH
39250: LD_INT 5
39252: EQUAL
39253: IFFALSE 39362
// begin tmp := UnitsInside ( factory ) ;
39255: LD_ADDR_VAR 0 8
39259: PUSH
39260: LD_VAR 0 1
39264: PPUSH
39265: CALL_OW 313
39269: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39270: LD_VAR 0 8
39274: PPUSH
39275: LD_INT 25
39277: PUSH
39278: LD_INT 12
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PPUSH
39285: CALL_OW 72
39289: NOT
39290: IFFALSE 39300
// control := control_manual ;
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: LD_INT 1
39299: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39300: LD_ADDR_VAR 0 8
39304: PUSH
39305: LD_VAR 0 1
39309: PPUSH
39310: CALL 38997 0 1
39314: ST_TO_ADDR
// if tmp then
39315: LD_VAR 0 8
39319: IFFALSE 39362
// begin for i in tmp do
39321: LD_ADDR_VAR 0 7
39325: PUSH
39326: LD_VAR 0 8
39330: PUSH
39331: FOR_IN
39332: IFFALSE 39360
// if i [ 1 ] = b_ext_radio then
39334: LD_VAR 0 7
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PUSH
39343: LD_INT 22
39345: EQUAL
39346: IFFALSE 39358
// begin control := control_remote ;
39348: LD_ADDR_VAR 0 4
39352: PUSH
39353: LD_INT 2
39355: ST_TO_ADDR
// break ;
39356: GO 39360
// end ;
39358: GO 39331
39360: POP
39361: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39362: LD_VAR 0 1
39366: PPUSH
39367: LD_VAR 0 2
39371: PPUSH
39372: LD_VAR 0 3
39376: PPUSH
39377: LD_VAR 0 4
39381: PPUSH
39382: LD_VAR 0 5
39386: PPUSH
39387: CALL_OW 448
39391: IFFALSE 39426
// begin result := [ chassis , engine , control , weapon ] ;
39393: LD_ADDR_VAR 0 6
39397: PUSH
39398: LD_VAR 0 2
39402: PUSH
39403: LD_VAR 0 3
39407: PUSH
39408: LD_VAR 0 4
39412: PUSH
39413: LD_VAR 0 5
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: ST_TO_ADDR
// exit ;
39424: GO 39838
// end ; _chassis := AvailableChassisList ( factory ) ;
39426: LD_ADDR_VAR 0 9
39430: PUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: CALL_OW 475
39440: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39441: LD_ADDR_VAR 0 11
39445: PUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 476
39455: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39456: LD_ADDR_VAR 0 12
39460: PUSH
39461: LD_VAR 0 1
39465: PPUSH
39466: CALL_OW 477
39470: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39471: LD_ADDR_VAR 0 10
39475: PUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 478
39485: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39486: LD_VAR 0 9
39490: NOT
39491: PUSH
39492: LD_VAR 0 11
39496: NOT
39497: OR
39498: PUSH
39499: LD_VAR 0 12
39503: NOT
39504: OR
39505: PUSH
39506: LD_VAR 0 10
39510: NOT
39511: OR
39512: IFFALSE 39547
// begin result := [ chassis , engine , control , weapon ] ;
39514: LD_ADDR_VAR 0 6
39518: PUSH
39519: LD_VAR 0 2
39523: PUSH
39524: LD_VAR 0 3
39528: PUSH
39529: LD_VAR 0 4
39533: PUSH
39534: LD_VAR 0 5
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
// exit ;
39545: GO 39838
// end ; if not chassis in _chassis then
39547: LD_VAR 0 2
39551: PUSH
39552: LD_VAR 0 9
39556: IN
39557: NOT
39558: IFFALSE 39584
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39560: LD_ADDR_VAR 0 2
39564: PUSH
39565: LD_VAR 0 9
39569: PUSH
39570: LD_INT 1
39572: PPUSH
39573: LD_VAR 0 9
39577: PPUSH
39578: CALL_OW 12
39582: ARRAY
39583: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39584: LD_VAR 0 2
39588: PPUSH
39589: LD_VAR 0 3
39593: PPUSH
39594: CALL 39843 0 2
39598: NOT
39599: IFFALSE 39658
// repeat engine := _engine [ 1 ] ;
39601: LD_ADDR_VAR 0 3
39605: PUSH
39606: LD_VAR 0 11
39610: PUSH
39611: LD_INT 1
39613: ARRAY
39614: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39615: LD_ADDR_VAR 0 11
39619: PUSH
39620: LD_VAR 0 11
39624: PPUSH
39625: LD_INT 1
39627: PPUSH
39628: CALL_OW 3
39632: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39633: LD_VAR 0 2
39637: PPUSH
39638: LD_VAR 0 3
39642: PPUSH
39643: CALL 39843 0 2
39647: PUSH
39648: LD_VAR 0 11
39652: PUSH
39653: EMPTY
39654: EQUAL
39655: OR
39656: IFFALSE 39601
// if not control in _control then
39658: LD_VAR 0 4
39662: PUSH
39663: LD_VAR 0 12
39667: IN
39668: NOT
39669: IFFALSE 39695
// control := _control [ rand ( 1 , _control ) ] ;
39671: LD_ADDR_VAR 0 4
39675: PUSH
39676: LD_VAR 0 12
39680: PUSH
39681: LD_INT 1
39683: PPUSH
39684: LD_VAR 0 12
39688: PPUSH
39689: CALL_OW 12
39693: ARRAY
39694: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39695: LD_VAR 0 2
39699: PPUSH
39700: LD_VAR 0 5
39704: PPUSH
39705: CALL 40063 0 2
39709: NOT
39710: IFFALSE 39769
// repeat weapon := _weapon [ 1 ] ;
39712: LD_ADDR_VAR 0 5
39716: PUSH
39717: LD_VAR 0 10
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39726: LD_ADDR_VAR 0 10
39730: PUSH
39731: LD_VAR 0 10
39735: PPUSH
39736: LD_INT 1
39738: PPUSH
39739: CALL_OW 3
39743: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39744: LD_VAR 0 2
39748: PPUSH
39749: LD_VAR 0 5
39753: PPUSH
39754: CALL 40063 0 2
39758: PUSH
39759: LD_VAR 0 10
39763: PUSH
39764: EMPTY
39765: EQUAL
39766: OR
39767: IFFALSE 39712
// result := [ ] ;
39769: LD_ADDR_VAR 0 6
39773: PUSH
39774: EMPTY
39775: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39776: LD_VAR 0 1
39780: PPUSH
39781: LD_VAR 0 2
39785: PPUSH
39786: LD_VAR 0 3
39790: PPUSH
39791: LD_VAR 0 4
39795: PPUSH
39796: LD_VAR 0 5
39800: PPUSH
39801: CALL_OW 448
39805: IFFALSE 39838
// result := [ chassis , engine , control , weapon ] ;
39807: LD_ADDR_VAR 0 6
39811: PUSH
39812: LD_VAR 0 2
39816: PUSH
39817: LD_VAR 0 3
39821: PUSH
39822: LD_VAR 0 4
39826: PUSH
39827: LD_VAR 0 5
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// end ;
39838: LD_VAR 0 6
39842: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39843: LD_INT 0
39845: PPUSH
// if not chassis or not engine then
39846: LD_VAR 0 1
39850: NOT
39851: PUSH
39852: LD_VAR 0 2
39856: NOT
39857: OR
39858: IFFALSE 39862
// exit ;
39860: GO 40058
// case engine of engine_solar :
39862: LD_VAR 0 2
39866: PUSH
39867: LD_INT 2
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39875
39873: GO 39913
39875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39876: LD_ADDR_VAR 0 3
39880: PUSH
39881: LD_INT 11
39883: PUSH
39884: LD_INT 12
39886: PUSH
39887: LD_INT 13
39889: PUSH
39890: LD_INT 14
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: ST_TO_ADDR
39911: GO 40042
39913: LD_INT 1
39915: DOUBLE
39916: EQUAL
39917: IFTRUE 39921
39919: GO 39983
39921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39922: LD_ADDR_VAR 0 3
39926: PUSH
39927: LD_INT 11
39929: PUSH
39930: LD_INT 12
39932: PUSH
39933: LD_INT 13
39935: PUSH
39936: LD_INT 14
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: LD_INT 4
39950: PUSH
39951: LD_INT 5
39953: PUSH
39954: LD_INT 21
39956: PUSH
39957: LD_INT 23
39959: PUSH
39960: LD_INT 22
39962: PUSH
39963: LD_INT 24
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: ST_TO_ADDR
39981: GO 40042
39983: LD_INT 3
39985: DOUBLE
39986: EQUAL
39987: IFTRUE 39991
39989: GO 40041
39991: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_INT 13
39999: PUSH
40000: LD_INT 14
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 3
40008: PUSH
40009: LD_INT 4
40011: PUSH
40012: LD_INT 5
40014: PUSH
40015: LD_INT 21
40017: PUSH
40018: LD_INT 22
40020: PUSH
40021: LD_INT 23
40023: PUSH
40024: LD_INT 24
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: ST_TO_ADDR
40039: GO 40042
40041: POP
// result := ( chassis in result ) ;
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_VAR 0 1
40051: PUSH
40052: LD_VAR 0 3
40056: IN
40057: ST_TO_ADDR
// end ;
40058: LD_VAR 0 3
40062: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40063: LD_INT 0
40065: PPUSH
// if not chassis or not weapon then
40066: LD_VAR 0 1
40070: NOT
40071: PUSH
40072: LD_VAR 0 2
40076: NOT
40077: OR
40078: IFFALSE 40082
// exit ;
40080: GO 41142
// case weapon of us_machine_gun :
40082: LD_VAR 0 2
40086: PUSH
40087: LD_INT 2
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40095
40093: GO 40125
40095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: LD_INT 5
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
40123: GO 41126
40125: LD_INT 3
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40133
40131: GO 40163
40133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: LD_INT 4
40150: PUSH
40151: LD_INT 5
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
40161: GO 41126
40163: LD_INT 11
40165: DOUBLE
40166: EQUAL
40167: IFTRUE 40171
40169: GO 40201
40171: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: LD_INT 4
40188: PUSH
40189: LD_INT 5
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
40199: GO 41126
40201: LD_INT 4
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40209
40207: GO 40235
40209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40210: LD_ADDR_VAR 0 3
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: LD_INT 4
40223: PUSH
40224: LD_INT 5
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
40233: GO 41126
40235: LD_INT 5
40237: DOUBLE
40238: EQUAL
40239: IFTRUE 40243
40241: GO 40269
40243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: LD_INT 4
40257: PUSH
40258: LD_INT 5
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
40267: GO 41126
40269: LD_INT 9
40271: DOUBLE
40272: EQUAL
40273: IFTRUE 40277
40275: GO 40303
40277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: LD_INT 4
40291: PUSH
40292: LD_INT 5
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
40301: GO 41126
40303: LD_INT 7
40305: DOUBLE
40306: EQUAL
40307: IFTRUE 40311
40309: GO 40337
40311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40312: LD_ADDR_VAR 0 3
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 4
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
40335: GO 41126
40337: LD_INT 12
40339: DOUBLE
40340: EQUAL
40341: IFTRUE 40345
40343: GO 40371
40345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40346: LD_ADDR_VAR 0 3
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: LD_INT 4
40359: PUSH
40360: LD_INT 5
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
40369: GO 41126
40371: LD_INT 13
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40379
40377: GO 40405
40379: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: LD_INT 4
40393: PUSH
40394: LD_INT 5
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
40403: GO 41126
40405: LD_INT 14
40407: DOUBLE
40408: EQUAL
40409: IFTRUE 40413
40411: GO 40431
40413: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_INT 4
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: ST_TO_ADDR
40429: GO 41126
40431: LD_INT 6
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40439
40437: GO 40457
40439: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40440: LD_ADDR_VAR 0 3
40444: PUSH
40445: LD_INT 4
40447: PUSH
40448: LD_INT 5
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: ST_TO_ADDR
40455: GO 41126
40457: LD_INT 10
40459: DOUBLE
40460: EQUAL
40461: IFTRUE 40465
40463: GO 40483
40465: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40466: LD_ADDR_VAR 0 3
40470: PUSH
40471: LD_INT 4
40473: PUSH
40474: LD_INT 5
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: ST_TO_ADDR
40481: GO 41126
40483: LD_INT 22
40485: DOUBLE
40486: EQUAL
40487: IFTRUE 40491
40489: GO 40517
40491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40492: LD_ADDR_VAR 0 3
40496: PUSH
40497: LD_INT 11
40499: PUSH
40500: LD_INT 12
40502: PUSH
40503: LD_INT 13
40505: PUSH
40506: LD_INT 14
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: ST_TO_ADDR
40515: GO 41126
40517: LD_INT 23
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40551
40525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40526: LD_ADDR_VAR 0 3
40530: PUSH
40531: LD_INT 11
40533: PUSH
40534: LD_INT 12
40536: PUSH
40537: LD_INT 13
40539: PUSH
40540: LD_INT 14
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
40549: GO 41126
40551: LD_INT 24
40553: DOUBLE
40554: EQUAL
40555: IFTRUE 40559
40557: GO 40585
40559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40560: LD_ADDR_VAR 0 3
40564: PUSH
40565: LD_INT 11
40567: PUSH
40568: LD_INT 12
40570: PUSH
40571: LD_INT 13
40573: PUSH
40574: LD_INT 14
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: ST_TO_ADDR
40583: GO 41126
40585: LD_INT 30
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40619
40593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40594: LD_ADDR_VAR 0 3
40598: PUSH
40599: LD_INT 11
40601: PUSH
40602: LD_INT 12
40604: PUSH
40605: LD_INT 13
40607: PUSH
40608: LD_INT 14
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
40617: GO 41126
40619: LD_INT 25
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40645
40627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_INT 13
40635: PUSH
40636: LD_INT 14
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: ST_TO_ADDR
40643: GO 41126
40645: LD_INT 27
40647: DOUBLE
40648: EQUAL
40649: IFTRUE 40653
40651: GO 40671
40653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_INT 13
40661: PUSH
40662: LD_INT 14
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: ST_TO_ADDR
40669: GO 41126
40671: LD_INT 92
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40705
40679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_INT 11
40687: PUSH
40688: LD_INT 12
40690: PUSH
40691: LD_INT 13
40693: PUSH
40694: LD_INT 14
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: ST_TO_ADDR
40703: GO 41126
40705: LD_INT 28
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40731
40713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 13
40721: PUSH
40722: LD_INT 14
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: ST_TO_ADDR
40729: GO 41126
40731: LD_INT 29
40733: DOUBLE
40734: EQUAL
40735: IFTRUE 40739
40737: GO 40757
40739: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_INT 13
40747: PUSH
40748: LD_INT 14
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: ST_TO_ADDR
40755: GO 41126
40757: LD_INT 31
40759: DOUBLE
40760: EQUAL
40761: IFTRUE 40765
40763: GO 40783
40765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40766: LD_ADDR_VAR 0 3
40770: PUSH
40771: LD_INT 13
40773: PUSH
40774: LD_INT 14
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: ST_TO_ADDR
40781: GO 41126
40783: LD_INT 26
40785: DOUBLE
40786: EQUAL
40787: IFTRUE 40791
40789: GO 40809
40791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40792: LD_ADDR_VAR 0 3
40796: PUSH
40797: LD_INT 13
40799: PUSH
40800: LD_INT 14
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: ST_TO_ADDR
40807: GO 41126
40809: LD_INT 42
40811: DOUBLE
40812: EQUAL
40813: IFTRUE 40817
40815: GO 40843
40817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40818: LD_ADDR_VAR 0 3
40822: PUSH
40823: LD_INT 21
40825: PUSH
40826: LD_INT 22
40828: PUSH
40829: LD_INT 23
40831: PUSH
40832: LD_INT 24
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: ST_TO_ADDR
40841: GO 41126
40843: LD_INT 43
40845: DOUBLE
40846: EQUAL
40847: IFTRUE 40851
40849: GO 40877
40851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 21
40859: PUSH
40860: LD_INT 22
40862: PUSH
40863: LD_INT 23
40865: PUSH
40866: LD_INT 24
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
40875: GO 41126
40877: LD_INT 44
40879: DOUBLE
40880: EQUAL
40881: IFTRUE 40885
40883: GO 40911
40885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40886: LD_ADDR_VAR 0 3
40890: PUSH
40891: LD_INT 21
40893: PUSH
40894: LD_INT 22
40896: PUSH
40897: LD_INT 23
40899: PUSH
40900: LD_INT 24
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
40909: GO 41126
40911: LD_INT 45
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40919
40917: GO 40945
40919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_INT 21
40927: PUSH
40928: LD_INT 22
40930: PUSH
40931: LD_INT 23
40933: PUSH
40934: LD_INT 24
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
40943: GO 41126
40945: LD_INT 49
40947: DOUBLE
40948: EQUAL
40949: IFTRUE 40953
40951: GO 40979
40953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40954: LD_ADDR_VAR 0 3
40958: PUSH
40959: LD_INT 21
40961: PUSH
40962: LD_INT 22
40964: PUSH
40965: LD_INT 23
40967: PUSH
40968: LD_INT 24
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: ST_TO_ADDR
40977: GO 41126
40979: LD_INT 51
40981: DOUBLE
40982: EQUAL
40983: IFTRUE 40987
40985: GO 41013
40987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40988: LD_ADDR_VAR 0 3
40992: PUSH
40993: LD_INT 21
40995: PUSH
40996: LD_INT 22
40998: PUSH
40999: LD_INT 23
41001: PUSH
41002: LD_INT 24
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
41011: GO 41126
41013: LD_INT 52
41015: DOUBLE
41016: EQUAL
41017: IFTRUE 41021
41019: GO 41047
41021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41022: LD_ADDR_VAR 0 3
41026: PUSH
41027: LD_INT 21
41029: PUSH
41030: LD_INT 22
41032: PUSH
41033: LD_INT 23
41035: PUSH
41036: LD_INT 24
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: ST_TO_ADDR
41045: GO 41126
41047: LD_INT 53
41049: DOUBLE
41050: EQUAL
41051: IFTRUE 41055
41053: GO 41073
41055: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41056: LD_ADDR_VAR 0 3
41060: PUSH
41061: LD_INT 23
41063: PUSH
41064: LD_INT 24
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: ST_TO_ADDR
41071: GO 41126
41073: LD_INT 46
41075: DOUBLE
41076: EQUAL
41077: IFTRUE 41081
41079: GO 41099
41081: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41082: LD_ADDR_VAR 0 3
41086: PUSH
41087: LD_INT 23
41089: PUSH
41090: LD_INT 24
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: ST_TO_ADDR
41097: GO 41126
41099: LD_INT 47
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41125
41107: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 23
41115: PUSH
41116: LD_INT 24
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: ST_TO_ADDR
41123: GO 41126
41125: POP
// result := ( chassis in result ) ;
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_VAR 0 1
41135: PUSH
41136: LD_VAR 0 3
41140: IN
41141: ST_TO_ADDR
// end ;
41142: LD_VAR 0 3
41146: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41147: LD_INT 0
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
// result := array ;
41156: LD_ADDR_VAR 0 5
41160: PUSH
41161: LD_VAR 0 1
41165: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41166: LD_VAR 0 1
41170: NOT
41171: PUSH
41172: LD_VAR 0 2
41176: NOT
41177: OR
41178: PUSH
41179: LD_VAR 0 3
41183: NOT
41184: OR
41185: PUSH
41186: LD_VAR 0 2
41190: PUSH
41191: LD_VAR 0 1
41195: GREATER
41196: OR
41197: PUSH
41198: LD_VAR 0 3
41202: PUSH
41203: LD_VAR 0 1
41207: GREATER
41208: OR
41209: IFFALSE 41213
// exit ;
41211: GO 41509
// if direction then
41213: LD_VAR 0 4
41217: IFFALSE 41281
// begin d := 1 ;
41219: LD_ADDR_VAR 0 9
41223: PUSH
41224: LD_INT 1
41226: ST_TO_ADDR
// if i_from > i_to then
41227: LD_VAR 0 2
41231: PUSH
41232: LD_VAR 0 3
41236: GREATER
41237: IFFALSE 41263
// length := ( array - i_from ) + i_to else
41239: LD_ADDR_VAR 0 11
41243: PUSH
41244: LD_VAR 0 1
41248: PUSH
41249: LD_VAR 0 2
41253: MINUS
41254: PUSH
41255: LD_VAR 0 3
41259: PLUS
41260: ST_TO_ADDR
41261: GO 41279
// length := i_to - i_from ;
41263: LD_ADDR_VAR 0 11
41267: PUSH
41268: LD_VAR 0 3
41272: PUSH
41273: LD_VAR 0 2
41277: MINUS
41278: ST_TO_ADDR
// end else
41279: GO 41342
// begin d := - 1 ;
41281: LD_ADDR_VAR 0 9
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: ST_TO_ADDR
// if i_from > i_to then
41290: LD_VAR 0 2
41294: PUSH
41295: LD_VAR 0 3
41299: GREATER
41300: IFFALSE 41320
// length := i_from - i_to else
41302: LD_ADDR_VAR 0 11
41306: PUSH
41307: LD_VAR 0 2
41311: PUSH
41312: LD_VAR 0 3
41316: MINUS
41317: ST_TO_ADDR
41318: GO 41342
// length := ( array - i_to ) + i_from ;
41320: LD_ADDR_VAR 0 11
41324: PUSH
41325: LD_VAR 0 1
41329: PUSH
41330: LD_VAR 0 3
41334: MINUS
41335: PUSH
41336: LD_VAR 0 2
41340: PLUS
41341: ST_TO_ADDR
// end ; if not length then
41342: LD_VAR 0 11
41346: NOT
41347: IFFALSE 41351
// exit ;
41349: GO 41509
// tmp := array ;
41351: LD_ADDR_VAR 0 10
41355: PUSH
41356: LD_VAR 0 1
41360: ST_TO_ADDR
// for i = 1 to length do
41361: LD_ADDR_VAR 0 6
41365: PUSH
41366: DOUBLE
41367: LD_INT 1
41369: DEC
41370: ST_TO_ADDR
41371: LD_VAR 0 11
41375: PUSH
41376: FOR_TO
41377: IFFALSE 41497
// begin for j = 1 to array do
41379: LD_ADDR_VAR 0 7
41383: PUSH
41384: DOUBLE
41385: LD_INT 1
41387: DEC
41388: ST_TO_ADDR
41389: LD_VAR 0 1
41393: PUSH
41394: FOR_TO
41395: IFFALSE 41483
// begin k := j + d ;
41397: LD_ADDR_VAR 0 8
41401: PUSH
41402: LD_VAR 0 7
41406: PUSH
41407: LD_VAR 0 9
41411: PLUS
41412: ST_TO_ADDR
// if k > array then
41413: LD_VAR 0 8
41417: PUSH
41418: LD_VAR 0 1
41422: GREATER
41423: IFFALSE 41433
// k := 1 ;
41425: LD_ADDR_VAR 0 8
41429: PUSH
41430: LD_INT 1
41432: ST_TO_ADDR
// if not k then
41433: LD_VAR 0 8
41437: NOT
41438: IFFALSE 41450
// k := array ;
41440: LD_ADDR_VAR 0 8
41444: PUSH
41445: LD_VAR 0 1
41449: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41450: LD_ADDR_VAR 0 10
41454: PUSH
41455: LD_VAR 0 10
41459: PPUSH
41460: LD_VAR 0 8
41464: PPUSH
41465: LD_VAR 0 1
41469: PUSH
41470: LD_VAR 0 7
41474: ARRAY
41475: PPUSH
41476: CALL_OW 1
41480: ST_TO_ADDR
// end ;
41481: GO 41394
41483: POP
41484: POP
// array := tmp ;
41485: LD_ADDR_VAR 0 1
41489: PUSH
41490: LD_VAR 0 10
41494: ST_TO_ADDR
// end ;
41495: GO 41376
41497: POP
41498: POP
// result := array ;
41499: LD_ADDR_VAR 0 5
41503: PUSH
41504: LD_VAR 0 1
41508: ST_TO_ADDR
// end ;
41509: LD_VAR 0 5
41513: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
// result := 0 ;
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_INT 0
41525: ST_TO_ADDR
// if not array or not value in array then
41526: LD_VAR 0 1
41530: NOT
41531: PUSH
41532: LD_VAR 0 2
41536: PUSH
41537: LD_VAR 0 1
41541: IN
41542: NOT
41543: OR
41544: IFFALSE 41548
// exit ;
41546: GO 41602
// for i = 1 to array do
41548: LD_ADDR_VAR 0 4
41552: PUSH
41553: DOUBLE
41554: LD_INT 1
41556: DEC
41557: ST_TO_ADDR
41558: LD_VAR 0 1
41562: PUSH
41563: FOR_TO
41564: IFFALSE 41600
// if value = array [ i ] then
41566: LD_VAR 0 2
41570: PUSH
41571: LD_VAR 0 1
41575: PUSH
41576: LD_VAR 0 4
41580: ARRAY
41581: EQUAL
41582: IFFALSE 41598
// begin result := i ;
41584: LD_ADDR_VAR 0 3
41588: PUSH
41589: LD_VAR 0 4
41593: ST_TO_ADDR
// exit ;
41594: POP
41595: POP
41596: GO 41602
// end ;
41598: GO 41563
41600: POP
41601: POP
// end ;
41602: LD_VAR 0 3
41606: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41607: LD_INT 0
41609: PPUSH
// vc_chassis := chassis ;
41610: LD_ADDR_OWVAR 37
41614: PUSH
41615: LD_VAR 0 1
41619: ST_TO_ADDR
// vc_engine := engine ;
41620: LD_ADDR_OWVAR 39
41624: PUSH
41625: LD_VAR 0 2
41629: ST_TO_ADDR
// vc_control := control ;
41630: LD_ADDR_OWVAR 38
41634: PUSH
41635: LD_VAR 0 3
41639: ST_TO_ADDR
// vc_weapon := weapon ;
41640: LD_ADDR_OWVAR 40
41644: PUSH
41645: LD_VAR 0 4
41649: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41650: LD_ADDR_OWVAR 41
41654: PUSH
41655: LD_VAR 0 5
41659: ST_TO_ADDR
// end ;
41660: LD_VAR 0 6
41664: RET
// export function WantPlant ( unit ) ; var task ; begin
41665: LD_INT 0
41667: PPUSH
41668: PPUSH
// result := false ;
41669: LD_ADDR_VAR 0 2
41673: PUSH
41674: LD_INT 0
41676: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41677: LD_ADDR_VAR 0 3
41681: PUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL_OW 437
41691: ST_TO_ADDR
// if task then
41692: LD_VAR 0 3
41696: IFFALSE 41724
// if task [ 1 ] [ 1 ] = p then
41698: LD_VAR 0 3
41702: PUSH
41703: LD_INT 1
41705: ARRAY
41706: PUSH
41707: LD_INT 1
41709: ARRAY
41710: PUSH
41711: LD_STRING p
41713: EQUAL
41714: IFFALSE 41724
// result := true ;
41716: LD_ADDR_VAR 0 2
41720: PUSH
41721: LD_INT 1
41723: ST_TO_ADDR
// end ;
41724: LD_VAR 0 2
41728: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41729: LD_INT 0
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
// if pos < 1 then
41735: LD_VAR 0 2
41739: PUSH
41740: LD_INT 1
41742: LESS
41743: IFFALSE 41747
// exit ;
41745: GO 42050
// if pos = 1 then
41747: LD_VAR 0 2
41751: PUSH
41752: LD_INT 1
41754: EQUAL
41755: IFFALSE 41788
// result := Replace ( arr , pos [ 1 ] , value ) else
41757: LD_ADDR_VAR 0 4
41761: PUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: LD_VAR 0 2
41771: PUSH
41772: LD_INT 1
41774: ARRAY
41775: PPUSH
41776: LD_VAR 0 3
41780: PPUSH
41781: CALL_OW 1
41785: ST_TO_ADDR
41786: GO 42050
// begin tmp := arr ;
41788: LD_ADDR_VAR 0 6
41792: PUSH
41793: LD_VAR 0 1
41797: ST_TO_ADDR
// s_arr := [ tmp ] ;
41798: LD_ADDR_VAR 0 7
41802: PUSH
41803: LD_VAR 0 6
41807: PUSH
41808: EMPTY
41809: LIST
41810: ST_TO_ADDR
// for i = 1 to pos - 1 do
41811: LD_ADDR_VAR 0 5
41815: PUSH
41816: DOUBLE
41817: LD_INT 1
41819: DEC
41820: ST_TO_ADDR
41821: LD_VAR 0 2
41825: PUSH
41826: LD_INT 1
41828: MINUS
41829: PUSH
41830: FOR_TO
41831: IFFALSE 41876
// begin tmp := tmp [ pos [ i ] ] ;
41833: LD_ADDR_VAR 0 6
41837: PUSH
41838: LD_VAR 0 6
41842: PUSH
41843: LD_VAR 0 2
41847: PUSH
41848: LD_VAR 0 5
41852: ARRAY
41853: ARRAY
41854: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41855: LD_ADDR_VAR 0 7
41859: PUSH
41860: LD_VAR 0 7
41864: PUSH
41865: LD_VAR 0 6
41869: PUSH
41870: EMPTY
41871: LIST
41872: ADD
41873: ST_TO_ADDR
// end ;
41874: GO 41830
41876: POP
41877: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41878: LD_ADDR_VAR 0 6
41882: PUSH
41883: LD_VAR 0 6
41887: PPUSH
41888: LD_VAR 0 2
41892: PUSH
41893: LD_VAR 0 2
41897: ARRAY
41898: PPUSH
41899: LD_VAR 0 3
41903: PPUSH
41904: CALL_OW 1
41908: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41909: LD_ADDR_VAR 0 7
41913: PUSH
41914: LD_VAR 0 7
41918: PPUSH
41919: LD_VAR 0 7
41923: PPUSH
41924: LD_VAR 0 6
41928: PPUSH
41929: CALL_OW 1
41933: ST_TO_ADDR
// for i = s_arr downto 2 do
41934: LD_ADDR_VAR 0 5
41938: PUSH
41939: DOUBLE
41940: LD_VAR 0 7
41944: INC
41945: ST_TO_ADDR
41946: LD_INT 2
41948: PUSH
41949: FOR_DOWNTO
41950: IFFALSE 42034
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41952: LD_ADDR_VAR 0 6
41956: PUSH
41957: LD_VAR 0 7
41961: PUSH
41962: LD_VAR 0 5
41966: PUSH
41967: LD_INT 1
41969: MINUS
41970: ARRAY
41971: PPUSH
41972: LD_VAR 0 2
41976: PUSH
41977: LD_VAR 0 5
41981: PUSH
41982: LD_INT 1
41984: MINUS
41985: ARRAY
41986: PPUSH
41987: LD_VAR 0 7
41991: PUSH
41992: LD_VAR 0 5
41996: ARRAY
41997: PPUSH
41998: CALL_OW 1
42002: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42003: LD_ADDR_VAR 0 7
42007: PUSH
42008: LD_VAR 0 7
42012: PPUSH
42013: LD_VAR 0 5
42017: PUSH
42018: LD_INT 1
42020: MINUS
42021: PPUSH
42022: LD_VAR 0 6
42026: PPUSH
42027: CALL_OW 1
42031: ST_TO_ADDR
// end ;
42032: GO 41949
42034: POP
42035: POP
// result := s_arr [ 1 ] ;
42036: LD_ADDR_VAR 0 4
42040: PUSH
42041: LD_VAR 0 7
42045: PUSH
42046: LD_INT 1
42048: ARRAY
42049: ST_TO_ADDR
// end ; end ;
42050: LD_VAR 0 4
42054: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42055: LD_INT 0
42057: PPUSH
42058: PPUSH
// if not list then
42059: LD_VAR 0 1
42063: NOT
42064: IFFALSE 42068
// exit ;
42066: GO 42159
// i := list [ pos1 ] ;
42068: LD_ADDR_VAR 0 5
42072: PUSH
42073: LD_VAR 0 1
42077: PUSH
42078: LD_VAR 0 2
42082: ARRAY
42083: ST_TO_ADDR
// if not i then
42084: LD_VAR 0 5
42088: NOT
42089: IFFALSE 42093
// exit ;
42091: GO 42159
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42093: LD_ADDR_VAR 0 1
42097: PUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: LD_VAR 0 2
42107: PPUSH
42108: LD_VAR 0 1
42112: PUSH
42113: LD_VAR 0 3
42117: ARRAY
42118: PPUSH
42119: CALL_OW 1
42123: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42124: LD_ADDR_VAR 0 1
42128: PUSH
42129: LD_VAR 0 1
42133: PPUSH
42134: LD_VAR 0 3
42138: PPUSH
42139: LD_VAR 0 5
42143: PPUSH
42144: CALL_OW 1
42148: ST_TO_ADDR
// result := list ;
42149: LD_ADDR_VAR 0 4
42153: PUSH
42154: LD_VAR 0 1
42158: ST_TO_ADDR
// end ;
42159: LD_VAR 0 4
42163: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42164: LD_INT 0
42166: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42167: LD_ADDR_VAR 0 5
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 250
42181: PPUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 251
42191: PPUSH
42192: LD_VAR 0 2
42196: PPUSH
42197: LD_VAR 0 3
42201: PPUSH
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL 42217 0 5
42211: ST_TO_ADDR
// end ;
42212: LD_VAR 0 5
42216: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42217: LD_INT 0
42219: PPUSH
42220: PPUSH
42221: PPUSH
42222: PPUSH
// if not list then
42223: LD_VAR 0 3
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42620
// result := [ ] ;
42232: LD_ADDR_VAR 0 6
42236: PUSH
42237: EMPTY
42238: ST_TO_ADDR
// for i in list do
42239: LD_ADDR_VAR 0 7
42243: PUSH
42244: LD_VAR 0 3
42248: PUSH
42249: FOR_IN
42250: IFFALSE 42452
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42252: LD_ADDR_VAR 0 9
42256: PUSH
42257: LD_VAR 0 7
42261: PPUSH
42262: LD_VAR 0 1
42266: PPUSH
42267: LD_VAR 0 2
42271: PPUSH
42272: CALL_OW 297
42276: ST_TO_ADDR
// if not result then
42277: LD_VAR 0 6
42281: NOT
42282: IFFALSE 42308
// result := [ [ i , tmp ] ] else
42284: LD_ADDR_VAR 0 6
42288: PUSH
42289: LD_VAR 0 7
42293: PUSH
42294: LD_VAR 0 9
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: ST_TO_ADDR
42306: GO 42450
// begin if result [ result ] [ 2 ] < tmp then
42308: LD_VAR 0 6
42312: PUSH
42313: LD_VAR 0 6
42317: ARRAY
42318: PUSH
42319: LD_INT 2
42321: ARRAY
42322: PUSH
42323: LD_VAR 0 9
42327: LESS
42328: IFFALSE 42370
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42330: LD_ADDR_VAR 0 6
42334: PUSH
42335: LD_VAR 0 6
42339: PPUSH
42340: LD_VAR 0 6
42344: PUSH
42345: LD_INT 1
42347: PLUS
42348: PPUSH
42349: LD_VAR 0 7
42353: PUSH
42354: LD_VAR 0 9
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PPUSH
42363: CALL_OW 2
42367: ST_TO_ADDR
42368: GO 42450
// for j = 1 to result do
42370: LD_ADDR_VAR 0 8
42374: PUSH
42375: DOUBLE
42376: LD_INT 1
42378: DEC
42379: ST_TO_ADDR
42380: LD_VAR 0 6
42384: PUSH
42385: FOR_TO
42386: IFFALSE 42448
// begin if tmp < result [ j ] [ 2 ] then
42388: LD_VAR 0 9
42392: PUSH
42393: LD_VAR 0 6
42397: PUSH
42398: LD_VAR 0 8
42402: ARRAY
42403: PUSH
42404: LD_INT 2
42406: ARRAY
42407: LESS
42408: IFFALSE 42446
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42410: LD_ADDR_VAR 0 6
42414: PUSH
42415: LD_VAR 0 6
42419: PPUSH
42420: LD_VAR 0 8
42424: PPUSH
42425: LD_VAR 0 7
42429: PUSH
42430: LD_VAR 0 9
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PPUSH
42439: CALL_OW 2
42443: ST_TO_ADDR
// break ;
42444: GO 42448
// end ; end ;
42446: GO 42385
42448: POP
42449: POP
// end ; end ;
42450: GO 42249
42452: POP
42453: POP
// if result and not asc then
42454: LD_VAR 0 6
42458: PUSH
42459: LD_VAR 0 4
42463: NOT
42464: AND
42465: IFFALSE 42540
// begin tmp := result ;
42467: LD_ADDR_VAR 0 9
42471: PUSH
42472: LD_VAR 0 6
42476: ST_TO_ADDR
// for i = tmp downto 1 do
42477: LD_ADDR_VAR 0 7
42481: PUSH
42482: DOUBLE
42483: LD_VAR 0 9
42487: INC
42488: ST_TO_ADDR
42489: LD_INT 1
42491: PUSH
42492: FOR_DOWNTO
42493: IFFALSE 42538
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42495: LD_ADDR_VAR 0 6
42499: PUSH
42500: LD_VAR 0 6
42504: PPUSH
42505: LD_VAR 0 9
42509: PUSH
42510: LD_VAR 0 7
42514: MINUS
42515: PUSH
42516: LD_INT 1
42518: PLUS
42519: PPUSH
42520: LD_VAR 0 9
42524: PUSH
42525: LD_VAR 0 7
42529: ARRAY
42530: PPUSH
42531: CALL_OW 1
42535: ST_TO_ADDR
42536: GO 42492
42538: POP
42539: POP
// end ; tmp := [ ] ;
42540: LD_ADDR_VAR 0 9
42544: PUSH
42545: EMPTY
42546: ST_TO_ADDR
// if mode then
42547: LD_VAR 0 5
42551: IFFALSE 42620
// begin for i = 1 to result do
42553: LD_ADDR_VAR 0 7
42557: PUSH
42558: DOUBLE
42559: LD_INT 1
42561: DEC
42562: ST_TO_ADDR
42563: LD_VAR 0 6
42567: PUSH
42568: FOR_TO
42569: IFFALSE 42608
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: LD_VAR 0 9
42580: PPUSH
42581: LD_VAR 0 7
42585: PPUSH
42586: LD_VAR 0 6
42590: PUSH
42591: LD_VAR 0 7
42595: ARRAY
42596: PUSH
42597: LD_INT 1
42599: ARRAY
42600: PPUSH
42601: CALL_OW 1
42605: ST_TO_ADDR
42606: GO 42568
42608: POP
42609: POP
// result := tmp ;
42610: LD_ADDR_VAR 0 6
42614: PUSH
42615: LD_VAR 0 9
42619: ST_TO_ADDR
// end ; end ;
42620: LD_VAR 0 6
42624: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42625: LD_INT 0
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42633: LD_ADDR_VAR 0 5
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// if not x or not y then
42655: LD_VAR 0 2
42659: NOT
42660: PUSH
42661: LD_VAR 0 3
42665: NOT
42666: OR
42667: IFFALSE 42671
// exit ;
42669: GO 44321
// if not range then
42671: LD_VAR 0 4
42675: NOT
42676: IFFALSE 42686
// range := 10 ;
42678: LD_ADDR_VAR 0 4
42682: PUSH
42683: LD_INT 10
42685: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42686: LD_ADDR_VAR 0 8
42690: PUSH
42691: LD_INT 81
42693: PUSH
42694: LD_VAR 0 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 92
42705: PUSH
42706: LD_VAR 0 2
42710: PUSH
42711: LD_VAR 0 3
42715: PUSH
42716: LD_VAR 0 4
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: LD_INT 21
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: PPUSH
42749: CALL_OW 69
42753: ST_TO_ADDR
// if not tmp then
42754: LD_VAR 0 8
42758: NOT
42759: IFFALSE 42763
// exit ;
42761: GO 44321
// for i in tmp do
42763: LD_ADDR_VAR 0 6
42767: PUSH
42768: LD_VAR 0 8
42772: PUSH
42773: FOR_IN
42774: IFFALSE 44296
// begin points := [ 0 , 0 , 0 ] ;
42776: LD_ADDR_VAR 0 9
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// bpoints := 1 ;
42795: LD_ADDR_VAR 0 10
42799: PUSH
42800: LD_INT 1
42802: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42803: LD_VAR 0 6
42807: PPUSH
42808: CALL_OW 247
42812: PUSH
42813: LD_INT 1
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 43399
42821: POP
// begin if GetClass ( i ) = 1 then
42822: LD_VAR 0 6
42826: PPUSH
42827: CALL_OW 257
42831: PUSH
42832: LD_INT 1
42834: EQUAL
42835: IFFALSE 42856
// points := [ 10 , 5 , 3 ] ;
42837: LD_ADDR_VAR 0 9
42841: PUSH
42842: LD_INT 10
42844: PUSH
42845: LD_INT 5
42847: PUSH
42848: LD_INT 3
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42856: LD_VAR 0 6
42860: PPUSH
42861: CALL_OW 257
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: LD_INT 4
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: IN
42880: IFFALSE 42901
// points := [ 3 , 2 , 1 ] ;
42882: LD_ADDR_VAR 0 9
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42901: LD_VAR 0 6
42905: PPUSH
42906: CALL_OW 257
42910: PUSH
42911: LD_INT 5
42913: EQUAL
42914: IFFALSE 42935
// points := [ 130 , 5 , 2 ] ;
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: LD_INT 130
42923: PUSH
42924: LD_INT 5
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 257
42944: PUSH
42945: LD_INT 8
42947: EQUAL
42948: IFFALSE 42969
// points := [ 35 , 35 , 30 ] ;
42950: LD_ADDR_VAR 0 9
42954: PUSH
42955: LD_INT 35
42957: PUSH
42958: LD_INT 35
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42969: LD_VAR 0 6
42973: PPUSH
42974: CALL_OW 257
42978: PUSH
42979: LD_INT 9
42981: EQUAL
42982: IFFALSE 43003
// points := [ 20 , 55 , 40 ] ;
42984: LD_ADDR_VAR 0 9
42988: PUSH
42989: LD_INT 20
42991: PUSH
42992: LD_INT 55
42994: PUSH
42995: LD_INT 40
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 257
43012: PUSH
43013: LD_INT 12
43015: PUSH
43016: LD_INT 16
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: IN
43023: IFFALSE 43044
// points := [ 5 , 3 , 2 ] ;
43025: LD_ADDR_VAR 0 9
43029: PUSH
43030: LD_INT 5
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43044: LD_VAR 0 6
43048: PPUSH
43049: CALL_OW 257
43053: PUSH
43054: LD_INT 17
43056: EQUAL
43057: IFFALSE 43078
// points := [ 100 , 50 , 75 ] ;
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_INT 100
43066: PUSH
43067: LD_INT 50
43069: PUSH
43070: LD_INT 75
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43078: LD_VAR 0 6
43082: PPUSH
43083: CALL_OW 257
43087: PUSH
43088: LD_INT 15
43090: EQUAL
43091: IFFALSE 43112
// points := [ 10 , 5 , 3 ] ;
43093: LD_ADDR_VAR 0 9
43097: PUSH
43098: LD_INT 10
43100: PUSH
43101: LD_INT 5
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43112: LD_VAR 0 6
43116: PPUSH
43117: CALL_OW 257
43121: PUSH
43122: LD_INT 14
43124: EQUAL
43125: IFFALSE 43146
// points := [ 10 , 0 , 0 ] ;
43127: LD_ADDR_VAR 0 9
43131: PUSH
43132: LD_INT 10
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43146: LD_VAR 0 6
43150: PPUSH
43151: CALL_OW 257
43155: PUSH
43156: LD_INT 11
43158: EQUAL
43159: IFFALSE 43180
// points := [ 30 , 10 , 5 ] ;
43161: LD_ADDR_VAR 0 9
43165: PUSH
43166: LD_INT 30
43168: PUSH
43169: LD_INT 10
43171: PUSH
43172: LD_INT 5
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43180: LD_VAR 0 1
43184: PPUSH
43185: LD_INT 5
43187: PPUSH
43188: CALL_OW 321
43192: PUSH
43193: LD_INT 2
43195: EQUAL
43196: IFFALSE 43213
// bpoints := bpoints * 1.8 ;
43198: LD_ADDR_VAR 0 10
43202: PUSH
43203: LD_VAR 0 10
43207: PUSH
43208: LD_REAL  1.80000000000000E+0000
43211: MUL
43212: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43213: LD_VAR 0 6
43217: PPUSH
43218: CALL_OW 257
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: LD_INT 4
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: IN
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_INT 51
43249: PPUSH
43250: CALL_OW 321
43254: PUSH
43255: LD_INT 2
43257: EQUAL
43258: AND
43259: IFFALSE 43276
// bpoints := bpoints * 1.2 ;
43261: LD_ADDR_VAR 0 10
43265: PUSH
43266: LD_VAR 0 10
43270: PUSH
43271: LD_REAL  1.20000000000000E+0000
43274: MUL
43275: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43276: LD_VAR 0 6
43280: PPUSH
43281: CALL_OW 257
43285: PUSH
43286: LD_INT 5
43288: PUSH
43289: LD_INT 7
43291: PUSH
43292: LD_INT 9
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: IN
43300: PUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: LD_INT 52
43308: PPUSH
43309: CALL_OW 321
43313: PUSH
43314: LD_INT 2
43316: EQUAL
43317: AND
43318: IFFALSE 43335
// bpoints := bpoints * 1.5 ;
43320: LD_ADDR_VAR 0 10
43324: PUSH
43325: LD_VAR 0 10
43329: PUSH
43330: LD_REAL  1.50000000000000E+0000
43333: MUL
43334: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43335: LD_VAR 0 1
43339: PPUSH
43340: LD_INT 66
43342: PPUSH
43343: CALL_OW 321
43347: PUSH
43348: LD_INT 2
43350: EQUAL
43351: IFFALSE 43368
// bpoints := bpoints * 1.1 ;
43353: LD_ADDR_VAR 0 10
43357: PUSH
43358: LD_VAR 0 10
43362: PUSH
43363: LD_REAL  1.10000000000000E+0000
43366: MUL
43367: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43368: LD_ADDR_VAR 0 10
43372: PUSH
43373: LD_VAR 0 10
43377: PUSH
43378: LD_VAR 0 6
43382: PPUSH
43383: LD_INT 1
43385: PPUSH
43386: CALL_OW 259
43390: PUSH
43391: LD_REAL  1.15000000000000E+0000
43394: MUL
43395: MUL
43396: ST_TO_ADDR
// end ; unit_vehicle :
43397: GO 44225
43399: LD_INT 2
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43407
43405: GO 44213
43407: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43408: LD_VAR 0 6
43412: PPUSH
43413: CALL_OW 264
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 42
43423: PUSH
43424: LD_INT 24
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: IN
43432: IFFALSE 43453
// points := [ 25 , 5 , 3 ] ;
43434: LD_ADDR_VAR 0 9
43438: PUSH
43439: LD_INT 25
43441: PUSH
43442: LD_INT 5
43444: PUSH
43445: LD_INT 3
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43453: LD_VAR 0 6
43457: PPUSH
43458: CALL_OW 264
43462: PUSH
43463: LD_INT 4
43465: PUSH
43466: LD_INT 43
43468: PUSH
43469: LD_INT 25
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: IN
43477: IFFALSE 43498
// points := [ 40 , 15 , 5 ] ;
43479: LD_ADDR_VAR 0 9
43483: PUSH
43484: LD_INT 40
43486: PUSH
43487: LD_INT 15
43489: PUSH
43490: LD_INT 5
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43498: LD_VAR 0 6
43502: PPUSH
43503: CALL_OW 264
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: LD_INT 23
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: IN
43518: IFFALSE 43539
// points := [ 7 , 25 , 8 ] ;
43520: LD_ADDR_VAR 0 9
43524: PUSH
43525: LD_INT 7
43527: PUSH
43528: LD_INT 25
43530: PUSH
43531: LD_INT 8
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43539: LD_VAR 0 6
43543: PPUSH
43544: CALL_OW 264
43548: PUSH
43549: LD_INT 5
43551: PUSH
43552: LD_INT 27
43554: PUSH
43555: LD_INT 44
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: IN
43563: IFFALSE 43584
// points := [ 14 , 50 , 16 ] ;
43565: LD_ADDR_VAR 0 9
43569: PUSH
43570: LD_INT 14
43572: PUSH
43573: LD_INT 50
43575: PUSH
43576: LD_INT 16
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43584: LD_VAR 0 6
43588: PPUSH
43589: CALL_OW 264
43593: PUSH
43594: LD_INT 6
43596: PUSH
43597: LD_INT 46
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: IN
43604: IFFALSE 43625
// points := [ 32 , 120 , 70 ] ;
43606: LD_ADDR_VAR 0 9
43610: PUSH
43611: LD_INT 32
43613: PUSH
43614: LD_INT 120
43616: PUSH
43617: LD_INT 70
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43625: LD_VAR 0 6
43629: PPUSH
43630: CALL_OW 264
43634: PUSH
43635: LD_INT 7
43637: PUSH
43638: LD_INT 28
43640: PUSH
43641: LD_INT 45
43643: PUSH
43644: LD_INT 92
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: IN
43653: IFFALSE 43674
// points := [ 35 , 20 , 45 ] ;
43655: LD_ADDR_VAR 0 9
43659: PUSH
43660: LD_INT 35
43662: PUSH
43663: LD_INT 20
43665: PUSH
43666: LD_INT 45
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43674: LD_VAR 0 6
43678: PPUSH
43679: CALL_OW 264
43683: PUSH
43684: LD_INT 47
43686: PUSH
43687: EMPTY
43688: LIST
43689: IN
43690: IFFALSE 43711
// points := [ 67 , 45 , 75 ] ;
43692: LD_ADDR_VAR 0 9
43696: PUSH
43697: LD_INT 67
43699: PUSH
43700: LD_INT 45
43702: PUSH
43703: LD_INT 75
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43711: LD_VAR 0 6
43715: PPUSH
43716: CALL_OW 264
43720: PUSH
43721: LD_INT 26
43723: PUSH
43724: EMPTY
43725: LIST
43726: IN
43727: IFFALSE 43748
// points := [ 120 , 30 , 80 ] ;
43729: LD_ADDR_VAR 0 9
43733: PUSH
43734: LD_INT 120
43736: PUSH
43737: LD_INT 30
43739: PUSH
43740: LD_INT 80
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43748: LD_VAR 0 6
43752: PPUSH
43753: CALL_OW 264
43757: PUSH
43758: LD_INT 22
43760: PUSH
43761: EMPTY
43762: LIST
43763: IN
43764: IFFALSE 43785
// points := [ 40 , 1 , 1 ] ;
43766: LD_ADDR_VAR 0 9
43770: PUSH
43771: LD_INT 40
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43785: LD_VAR 0 6
43789: PPUSH
43790: CALL_OW 264
43794: PUSH
43795: LD_INT 29
43797: PUSH
43798: EMPTY
43799: LIST
43800: IN
43801: IFFALSE 43822
// points := [ 70 , 200 , 400 ] ;
43803: LD_ADDR_VAR 0 9
43807: PUSH
43808: LD_INT 70
43810: PUSH
43811: LD_INT 200
43813: PUSH
43814: LD_INT 400
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43822: LD_VAR 0 6
43826: PPUSH
43827: CALL_OW 264
43831: PUSH
43832: LD_INT 14
43834: PUSH
43835: LD_INT 53
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: IN
43842: IFFALSE 43863
// points := [ 40 , 10 , 20 ] ;
43844: LD_ADDR_VAR 0 9
43848: PUSH
43849: LD_INT 40
43851: PUSH
43852: LD_INT 10
43854: PUSH
43855: LD_INT 20
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43863: LD_VAR 0 6
43867: PPUSH
43868: CALL_OW 264
43872: PUSH
43873: LD_INT 9
43875: PUSH
43876: EMPTY
43877: LIST
43878: IN
43879: IFFALSE 43900
// points := [ 5 , 70 , 20 ] ;
43881: LD_ADDR_VAR 0 9
43885: PUSH
43886: LD_INT 5
43888: PUSH
43889: LD_INT 70
43891: PUSH
43892: LD_INT 20
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43900: LD_VAR 0 6
43904: PPUSH
43905: CALL_OW 264
43909: PUSH
43910: LD_INT 10
43912: PUSH
43913: EMPTY
43914: LIST
43915: IN
43916: IFFALSE 43937
// points := [ 35 , 110 , 70 ] ;
43918: LD_ADDR_VAR 0 9
43922: PUSH
43923: LD_INT 35
43925: PUSH
43926: LD_INT 110
43928: PUSH
43929: LD_INT 70
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43937: LD_VAR 0 6
43941: PPUSH
43942: CALL_OW 265
43946: PUSH
43947: LD_INT 25
43949: EQUAL
43950: IFFALSE 43971
// points := [ 80 , 65 , 100 ] ;
43952: LD_ADDR_VAR 0 9
43956: PUSH
43957: LD_INT 80
43959: PUSH
43960: LD_INT 65
43962: PUSH
43963: LD_INT 100
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43971: LD_VAR 0 6
43975: PPUSH
43976: CALL_OW 263
43980: PUSH
43981: LD_INT 1
43983: EQUAL
43984: IFFALSE 44019
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43986: LD_ADDR_VAR 0 10
43990: PUSH
43991: LD_VAR 0 10
43995: PUSH
43996: LD_VAR 0 6
44000: PPUSH
44001: CALL_OW 311
44005: PPUSH
44006: LD_INT 3
44008: PPUSH
44009: CALL_OW 259
44013: PUSH
44014: LD_INT 4
44016: MUL
44017: MUL
44018: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44019: LD_VAR 0 6
44023: PPUSH
44024: CALL_OW 263
44028: PUSH
44029: LD_INT 2
44031: EQUAL
44032: IFFALSE 44083
// begin j := IsControledBy ( i ) ;
44034: LD_ADDR_VAR 0 7
44038: PUSH
44039: LD_VAR 0 6
44043: PPUSH
44044: CALL_OW 312
44048: ST_TO_ADDR
// if j then
44049: LD_VAR 0 7
44053: IFFALSE 44083
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44055: LD_ADDR_VAR 0 10
44059: PUSH
44060: LD_VAR 0 10
44064: PUSH
44065: LD_VAR 0 7
44069: PPUSH
44070: LD_INT 3
44072: PPUSH
44073: CALL_OW 259
44077: PUSH
44078: LD_INT 3
44080: MUL
44081: MUL
44082: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44083: LD_VAR 0 6
44087: PPUSH
44088: CALL_OW 264
44092: PUSH
44093: LD_INT 5
44095: PUSH
44096: LD_INT 6
44098: PUSH
44099: LD_INT 46
44101: PUSH
44102: LD_INT 44
44104: PUSH
44105: LD_INT 47
44107: PUSH
44108: LD_INT 45
44110: PUSH
44111: LD_INT 28
44113: PUSH
44114: LD_INT 7
44116: PUSH
44117: LD_INT 27
44119: PUSH
44120: LD_INT 29
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: IN
44135: PUSH
44136: LD_VAR 0 1
44140: PPUSH
44141: LD_INT 52
44143: PPUSH
44144: CALL_OW 321
44148: PUSH
44149: LD_INT 2
44151: EQUAL
44152: AND
44153: IFFALSE 44170
// bpoints := bpoints * 1.2 ;
44155: LD_ADDR_VAR 0 10
44159: PUSH
44160: LD_VAR 0 10
44164: PUSH
44165: LD_REAL  1.20000000000000E+0000
44168: MUL
44169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44170: LD_VAR 0 6
44174: PPUSH
44175: CALL_OW 264
44179: PUSH
44180: LD_INT 6
44182: PUSH
44183: LD_INT 46
44185: PUSH
44186: LD_INT 47
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: LIST
44193: IN
44194: IFFALSE 44211
// bpoints := bpoints * 1.2 ;
44196: LD_ADDR_VAR 0 10
44200: PUSH
44201: LD_VAR 0 10
44205: PUSH
44206: LD_REAL  1.20000000000000E+0000
44209: MUL
44210: ST_TO_ADDR
// end ; unit_building :
44211: GO 44225
44213: LD_INT 3
44215: DOUBLE
44216: EQUAL
44217: IFTRUE 44221
44219: GO 44224
44221: POP
// ; end ;
44222: GO 44225
44224: POP
// for j = 1 to 3 do
44225: LD_ADDR_VAR 0 7
44229: PUSH
44230: DOUBLE
44231: LD_INT 1
44233: DEC
44234: ST_TO_ADDR
44235: LD_INT 3
44237: PUSH
44238: FOR_TO
44239: IFFALSE 44292
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44241: LD_ADDR_VAR 0 5
44245: PUSH
44246: LD_VAR 0 5
44250: PPUSH
44251: LD_VAR 0 7
44255: PPUSH
44256: LD_VAR 0 5
44260: PUSH
44261: LD_VAR 0 7
44265: ARRAY
44266: PUSH
44267: LD_VAR 0 9
44271: PUSH
44272: LD_VAR 0 7
44276: ARRAY
44277: PUSH
44278: LD_VAR 0 10
44282: MUL
44283: PLUS
44284: PPUSH
44285: CALL_OW 1
44289: ST_TO_ADDR
44290: GO 44238
44292: POP
44293: POP
// end ;
44294: GO 42773
44296: POP
44297: POP
// result := Replace ( result , 4 , tmp ) ;
44298: LD_ADDR_VAR 0 5
44302: PUSH
44303: LD_VAR 0 5
44307: PPUSH
44308: LD_INT 4
44310: PPUSH
44311: LD_VAR 0 8
44315: PPUSH
44316: CALL_OW 1
44320: ST_TO_ADDR
// end ;
44321: LD_VAR 0 5
44325: RET
// export function DangerAtRange ( unit , range ) ; begin
44326: LD_INT 0
44328: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44329: LD_ADDR_VAR 0 3
44333: PUSH
44334: LD_VAR 0 1
44338: PPUSH
44339: CALL_OW 255
44343: PPUSH
44344: LD_VAR 0 1
44348: PPUSH
44349: CALL_OW 250
44353: PPUSH
44354: LD_VAR 0 1
44358: PPUSH
44359: CALL_OW 251
44363: PPUSH
44364: LD_VAR 0 2
44368: PPUSH
44369: CALL 42625 0 4
44373: ST_TO_ADDR
// end ;
44374: LD_VAR 0 3
44378: RET
// export function DangerInArea ( side , area ) ; begin
44379: LD_INT 0
44381: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44382: LD_ADDR_VAR 0 3
44386: PUSH
44387: LD_VAR 0 2
44391: PPUSH
44392: LD_INT 81
44394: PUSH
44395: LD_VAR 0 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PPUSH
44404: CALL_OW 70
44408: ST_TO_ADDR
// end ;
44409: LD_VAR 0 3
44413: RET
// export function IsExtension ( b ) ; begin
44414: LD_INT 0
44416: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44417: LD_ADDR_VAR 0 2
44421: PUSH
44422: LD_VAR 0 1
44426: PUSH
44427: LD_INT 23
44429: PUSH
44430: LD_INT 20
44432: PUSH
44433: LD_INT 22
44435: PUSH
44436: LD_INT 17
44438: PUSH
44439: LD_INT 24
44441: PUSH
44442: LD_INT 21
44444: PUSH
44445: LD_INT 19
44447: PUSH
44448: LD_INT 16
44450: PUSH
44451: LD_INT 25
44453: PUSH
44454: LD_INT 18
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: IN
44469: ST_TO_ADDR
// end ;
44470: LD_VAR 0 2
44474: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44475: LD_INT 0
44477: PPUSH
44478: PPUSH
44479: PPUSH
// result := [ ] ;
44480: LD_ADDR_VAR 0 4
44484: PUSH
44485: EMPTY
44486: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44487: LD_ADDR_VAR 0 5
44491: PUSH
44492: LD_VAR 0 2
44496: PPUSH
44497: LD_INT 21
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PPUSH
44507: CALL_OW 70
44511: ST_TO_ADDR
// if not tmp then
44512: LD_VAR 0 5
44516: NOT
44517: IFFALSE 44521
// exit ;
44519: GO 44585
// if checkLink then
44521: LD_VAR 0 3
44525: IFFALSE 44575
// begin for i in tmp do
44527: LD_ADDR_VAR 0 6
44531: PUSH
44532: LD_VAR 0 5
44536: PUSH
44537: FOR_IN
44538: IFFALSE 44573
// if GetBase ( i ) <> base then
44540: LD_VAR 0 6
44544: PPUSH
44545: CALL_OW 274
44549: PUSH
44550: LD_VAR 0 1
44554: NONEQUAL
44555: IFFALSE 44571
// ComLinkToBase ( base , i ) ;
44557: LD_VAR 0 1
44561: PPUSH
44562: LD_VAR 0 6
44566: PPUSH
44567: CALL_OW 169
44571: GO 44537
44573: POP
44574: POP
// end ; result := tmp ;
44575: LD_ADDR_VAR 0 4
44579: PUSH
44580: LD_VAR 0 5
44584: ST_TO_ADDR
// end ;
44585: LD_VAR 0 4
44589: RET
// export function ComComplete ( units , b ) ; var i ; begin
44590: LD_INT 0
44592: PPUSH
44593: PPUSH
// if not units then
44594: LD_VAR 0 1
44598: NOT
44599: IFFALSE 44603
// exit ;
44601: GO 44693
// for i in units do
44603: LD_ADDR_VAR 0 4
44607: PUSH
44608: LD_VAR 0 1
44612: PUSH
44613: FOR_IN
44614: IFFALSE 44691
// if BuildingStatus ( b ) = bs_build then
44616: LD_VAR 0 2
44620: PPUSH
44621: CALL_OW 461
44625: PUSH
44626: LD_INT 1
44628: EQUAL
44629: IFFALSE 44689
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_STRING h
44638: PUSH
44639: LD_VAR 0 2
44643: PPUSH
44644: CALL_OW 250
44648: PUSH
44649: LD_VAR 0 2
44653: PPUSH
44654: CALL_OW 251
44658: PUSH
44659: LD_VAR 0 2
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: PPUSH
44685: CALL_OW 446
44689: GO 44613
44691: POP
44692: POP
// end ;
44693: LD_VAR 0 3
44697: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44698: LD_INT 0
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44706: LD_VAR 0 1
44710: NOT
44711: PUSH
44712: LD_VAR 0 1
44716: PPUSH
44717: CALL_OW 263
44721: PUSH
44722: LD_INT 2
44724: NONEQUAL
44725: OR
44726: IFFALSE 44730
// exit ;
44728: GO 45046
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44730: LD_ADDR_VAR 0 6
44734: PUSH
44735: LD_INT 22
44737: PUSH
44738: LD_VAR 0 1
44742: PPUSH
44743: CALL_OW 255
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 30
44757: PUSH
44758: LD_INT 36
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 34
44767: PUSH
44768: LD_INT 31
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PPUSH
44784: CALL_OW 69
44788: ST_TO_ADDR
// if not tmp then
44789: LD_VAR 0 6
44793: NOT
44794: IFFALSE 44798
// exit ;
44796: GO 45046
// result := [ ] ;
44798: LD_ADDR_VAR 0 2
44802: PUSH
44803: EMPTY
44804: ST_TO_ADDR
// for i in tmp do
44805: LD_ADDR_VAR 0 3
44809: PUSH
44810: LD_VAR 0 6
44814: PUSH
44815: FOR_IN
44816: IFFALSE 44887
// begin t := UnitsInside ( i ) ;
44818: LD_ADDR_VAR 0 4
44822: PUSH
44823: LD_VAR 0 3
44827: PPUSH
44828: CALL_OW 313
44832: ST_TO_ADDR
// if t then
44833: LD_VAR 0 4
44837: IFFALSE 44885
// for j in t do
44839: LD_ADDR_VAR 0 7
44843: PUSH
44844: LD_VAR 0 4
44848: PUSH
44849: FOR_IN
44850: IFFALSE 44883
// result := Replace ( result , result + 1 , j ) ;
44852: LD_ADDR_VAR 0 2
44856: PUSH
44857: LD_VAR 0 2
44861: PPUSH
44862: LD_VAR 0 2
44866: PUSH
44867: LD_INT 1
44869: PLUS
44870: PPUSH
44871: LD_VAR 0 7
44875: PPUSH
44876: CALL_OW 1
44880: ST_TO_ADDR
44881: GO 44849
44883: POP
44884: POP
// end ;
44885: GO 44815
44887: POP
44888: POP
// if not result then
44889: LD_VAR 0 2
44893: NOT
44894: IFFALSE 44898
// exit ;
44896: GO 45046
// mech := result [ 1 ] ;
44898: LD_ADDR_VAR 0 5
44902: PUSH
44903: LD_VAR 0 2
44907: PUSH
44908: LD_INT 1
44910: ARRAY
44911: ST_TO_ADDR
// if result > 1 then
44912: LD_VAR 0 2
44916: PUSH
44917: LD_INT 1
44919: GREATER
44920: IFFALSE 45032
// begin for i = 2 to result do
44922: LD_ADDR_VAR 0 3
44926: PUSH
44927: DOUBLE
44928: LD_INT 2
44930: DEC
44931: ST_TO_ADDR
44932: LD_VAR 0 2
44936: PUSH
44937: FOR_TO
44938: IFFALSE 45030
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44940: LD_ADDR_VAR 0 4
44944: PUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_VAR 0 3
44954: ARRAY
44955: PPUSH
44956: LD_INT 3
44958: PPUSH
44959: CALL_OW 259
44963: PUSH
44964: LD_VAR 0 2
44968: PUSH
44969: LD_VAR 0 3
44973: ARRAY
44974: PPUSH
44975: CALL_OW 432
44979: MINUS
44980: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44981: LD_VAR 0 4
44985: PUSH
44986: LD_VAR 0 5
44990: PPUSH
44991: LD_INT 3
44993: PPUSH
44994: CALL_OW 259
44998: PUSH
44999: LD_VAR 0 5
45003: PPUSH
45004: CALL_OW 432
45008: MINUS
45009: GREATEREQUAL
45010: IFFALSE 45028
// mech := result [ i ] ;
45012: LD_ADDR_VAR 0 5
45016: PUSH
45017: LD_VAR 0 2
45021: PUSH
45022: LD_VAR 0 3
45026: ARRAY
45027: ST_TO_ADDR
// end ;
45028: GO 44937
45030: POP
45031: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45032: LD_VAR 0 1
45036: PPUSH
45037: LD_VAR 0 5
45041: PPUSH
45042: CALL_OW 135
// end ;
45046: LD_VAR 0 2
45050: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45051: LD_INT 0
45053: PPUSH
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
// result := [ ] ;
45066: LD_ADDR_VAR 0 7
45070: PUSH
45071: EMPTY
45072: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45073: LD_VAR 0 1
45077: PPUSH
45078: CALL_OW 266
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: IN
45093: NOT
45094: IFFALSE 45098
// exit ;
45096: GO 46732
// if name then
45098: LD_VAR 0 3
45102: IFFALSE 45118
// SetBName ( base_dep , name ) ;
45104: LD_VAR 0 1
45108: PPUSH
45109: LD_VAR 0 3
45113: PPUSH
45114: CALL_OW 500
// base := GetBase ( base_dep ) ;
45118: LD_ADDR_VAR 0 15
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: CALL_OW 274
45132: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45133: LD_ADDR_VAR 0 16
45137: PUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 255
45147: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45148: LD_ADDR_VAR 0 17
45152: PUSH
45153: LD_VAR 0 1
45157: PPUSH
45158: CALL_OW 248
45162: ST_TO_ADDR
// if sources then
45163: LD_VAR 0 5
45167: IFFALSE 45214
// for i = 1 to 3 do
45169: LD_ADDR_VAR 0 8
45173: PUSH
45174: DOUBLE
45175: LD_INT 1
45177: DEC
45178: ST_TO_ADDR
45179: LD_INT 3
45181: PUSH
45182: FOR_TO
45183: IFFALSE 45212
// AddResourceType ( base , i , sources [ i ] ) ;
45185: LD_VAR 0 15
45189: PPUSH
45190: LD_VAR 0 8
45194: PPUSH
45195: LD_VAR 0 5
45199: PUSH
45200: LD_VAR 0 8
45204: ARRAY
45205: PPUSH
45206: CALL_OW 276
45210: GO 45182
45212: POP
45213: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45214: LD_ADDR_VAR 0 18
45218: PUSH
45219: LD_VAR 0 15
45223: PPUSH
45224: LD_VAR 0 2
45228: PPUSH
45229: LD_INT 1
45231: PPUSH
45232: CALL 44475 0 3
45236: ST_TO_ADDR
// InitHc ;
45237: CALL_OW 19
// InitUc ;
45241: CALL_OW 18
// uc_side := side ;
45245: LD_ADDR_OWVAR 20
45249: PUSH
45250: LD_VAR 0 16
45254: ST_TO_ADDR
// uc_nation := nation ;
45255: LD_ADDR_OWVAR 21
45259: PUSH
45260: LD_VAR 0 17
45264: ST_TO_ADDR
// if buildings then
45265: LD_VAR 0 18
45269: IFFALSE 46591
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45271: LD_ADDR_VAR 0 19
45275: PUSH
45276: LD_VAR 0 18
45280: PPUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 30
45286: PUSH
45287: LD_INT 29
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 30
45296: PUSH
45297: LD_INT 30
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: PPUSH
45309: CALL_OW 72
45313: ST_TO_ADDR
// if tmp then
45314: LD_VAR 0 19
45318: IFFALSE 45366
// for i in tmp do
45320: LD_ADDR_VAR 0 8
45324: PUSH
45325: LD_VAR 0 19
45329: PUSH
45330: FOR_IN
45331: IFFALSE 45364
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45333: LD_VAR 0 8
45337: PPUSH
45338: CALL_OW 250
45342: PPUSH
45343: LD_VAR 0 8
45347: PPUSH
45348: CALL_OW 251
45352: PPUSH
45353: LD_VAR 0 16
45357: PPUSH
45358: CALL_OW 441
45362: GO 45330
45364: POP
45365: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45366: LD_VAR 0 18
45370: PPUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 30
45376: PUSH
45377: LD_INT 32
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 30
45386: PUSH
45387: LD_INT 33
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: PPUSH
45399: CALL_OW 72
45403: IFFALSE 45491
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45405: LD_ADDR_VAR 0 8
45409: PUSH
45410: LD_VAR 0 18
45414: PPUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 30
45420: PUSH
45421: LD_INT 32
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 30
45430: PUSH
45431: LD_INT 33
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: PPUSH
45443: CALL_OW 72
45447: PUSH
45448: FOR_IN
45449: IFFALSE 45489
// begin if not GetBWeapon ( i ) then
45451: LD_VAR 0 8
45455: PPUSH
45456: CALL_OW 269
45460: NOT
45461: IFFALSE 45487
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45463: LD_VAR 0 8
45467: PPUSH
45468: LD_VAR 0 8
45472: PPUSH
45473: LD_VAR 0 2
45477: PPUSH
45478: CALL 46737 0 2
45482: PPUSH
45483: CALL_OW 431
// end ;
45487: GO 45448
45489: POP
45490: POP
// end ; for i = 1 to personel do
45491: LD_ADDR_VAR 0 8
45495: PUSH
45496: DOUBLE
45497: LD_INT 1
45499: DEC
45500: ST_TO_ADDR
45501: LD_VAR 0 6
45505: PUSH
45506: FOR_TO
45507: IFFALSE 46571
// begin if i > 4 then
45509: LD_VAR 0 8
45513: PUSH
45514: LD_INT 4
45516: GREATER
45517: IFFALSE 45521
// break ;
45519: GO 46571
// case i of 1 :
45521: LD_VAR 0 8
45525: PUSH
45526: LD_INT 1
45528: DOUBLE
45529: EQUAL
45530: IFTRUE 45534
45532: GO 45614
45534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45535: LD_ADDR_VAR 0 12
45539: PUSH
45540: LD_VAR 0 18
45544: PPUSH
45545: LD_INT 22
45547: PUSH
45548: LD_VAR 0 16
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 58
45559: PUSH
45560: EMPTY
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 30
45568: PUSH
45569: LD_INT 32
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 30
45578: PUSH
45579: LD_INT 4
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 30
45588: PUSH
45589: LD_INT 5
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: PPUSH
45607: CALL_OW 72
45611: ST_TO_ADDR
45612: GO 45836
45614: LD_INT 2
45616: DOUBLE
45617: EQUAL
45618: IFTRUE 45622
45620: GO 45684
45622: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45623: LD_ADDR_VAR 0 12
45627: PUSH
45628: LD_VAR 0 18
45632: PPUSH
45633: LD_INT 22
45635: PUSH
45636: LD_VAR 0 16
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 30
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 30
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PPUSH
45677: CALL_OW 72
45681: ST_TO_ADDR
45682: GO 45836
45684: LD_INT 3
45686: DOUBLE
45687: EQUAL
45688: IFTRUE 45692
45690: GO 45754
45692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45693: LD_ADDR_VAR 0 12
45697: PUSH
45698: LD_VAR 0 18
45702: PPUSH
45703: LD_INT 22
45705: PUSH
45706: LD_VAR 0 16
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 30
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 30
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PPUSH
45747: CALL_OW 72
45751: ST_TO_ADDR
45752: GO 45836
45754: LD_INT 4
45756: DOUBLE
45757: EQUAL
45758: IFTRUE 45762
45760: GO 45835
45762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45763: LD_ADDR_VAR 0 12
45767: PUSH
45768: LD_VAR 0 18
45772: PPUSH
45773: LD_INT 22
45775: PUSH
45776: LD_VAR 0 16
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 30
45790: PUSH
45791: LD_INT 6
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 30
45800: PUSH
45801: LD_INT 7
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 30
45810: PUSH
45811: LD_INT 8
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PPUSH
45828: CALL_OW 72
45832: ST_TO_ADDR
45833: GO 45836
45835: POP
// if i = 1 then
45836: LD_VAR 0 8
45840: PUSH
45841: LD_INT 1
45843: EQUAL
45844: IFFALSE 45955
// begin tmp := [ ] ;
45846: LD_ADDR_VAR 0 19
45850: PUSH
45851: EMPTY
45852: ST_TO_ADDR
// for j in f do
45853: LD_ADDR_VAR 0 9
45857: PUSH
45858: LD_VAR 0 12
45862: PUSH
45863: FOR_IN
45864: IFFALSE 45937
// if GetBType ( j ) = b_bunker then
45866: LD_VAR 0 9
45870: PPUSH
45871: CALL_OW 266
45875: PUSH
45876: LD_INT 32
45878: EQUAL
45879: IFFALSE 45906
// tmp := Insert ( tmp , 1 , j ) else
45881: LD_ADDR_VAR 0 19
45885: PUSH
45886: LD_VAR 0 19
45890: PPUSH
45891: LD_INT 1
45893: PPUSH
45894: LD_VAR 0 9
45898: PPUSH
45899: CALL_OW 2
45903: ST_TO_ADDR
45904: GO 45935
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45906: LD_ADDR_VAR 0 19
45910: PUSH
45911: LD_VAR 0 19
45915: PPUSH
45916: LD_VAR 0 19
45920: PUSH
45921: LD_INT 1
45923: PLUS
45924: PPUSH
45925: LD_VAR 0 9
45929: PPUSH
45930: CALL_OW 2
45934: ST_TO_ADDR
45935: GO 45863
45937: POP
45938: POP
// if tmp then
45939: LD_VAR 0 19
45943: IFFALSE 45955
// f := tmp ;
45945: LD_ADDR_VAR 0 12
45949: PUSH
45950: LD_VAR 0 19
45954: ST_TO_ADDR
// end ; x := personel [ i ] ;
45955: LD_ADDR_VAR 0 13
45959: PUSH
45960: LD_VAR 0 6
45964: PUSH
45965: LD_VAR 0 8
45969: ARRAY
45970: ST_TO_ADDR
// if x = - 1 then
45971: LD_VAR 0 13
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: EQUAL
45980: IFFALSE 46189
// begin for j in f do
45982: LD_ADDR_VAR 0 9
45986: PUSH
45987: LD_VAR 0 12
45991: PUSH
45992: FOR_IN
45993: IFFALSE 46185
// repeat InitHc ;
45995: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45999: LD_VAR 0 9
46003: PPUSH
46004: CALL_OW 266
46008: PUSH
46009: LD_INT 5
46011: EQUAL
46012: IFFALSE 46082
// begin if UnitsInside ( j ) < 3 then
46014: LD_VAR 0 9
46018: PPUSH
46019: CALL_OW 313
46023: PUSH
46024: LD_INT 3
46026: LESS
46027: IFFALSE 46063
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46029: LD_INT 0
46031: PPUSH
46032: LD_INT 5
46034: PUSH
46035: LD_INT 8
46037: PUSH
46038: LD_INT 9
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: PUSH
46046: LD_VAR 0 17
46050: ARRAY
46051: PPUSH
46052: LD_VAR 0 4
46056: PPUSH
46057: CALL_OW 380
46061: GO 46080
// PrepareHuman ( false , i , skill ) ;
46063: LD_INT 0
46065: PPUSH
46066: LD_VAR 0 8
46070: PPUSH
46071: LD_VAR 0 4
46075: PPUSH
46076: CALL_OW 380
// end else
46080: GO 46099
// PrepareHuman ( false , i , skill ) ;
46082: LD_INT 0
46084: PPUSH
46085: LD_VAR 0 8
46089: PPUSH
46090: LD_VAR 0 4
46094: PPUSH
46095: CALL_OW 380
// un := CreateHuman ;
46099: LD_ADDR_VAR 0 14
46103: PUSH
46104: CALL_OW 44
46108: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46109: LD_ADDR_VAR 0 7
46113: PUSH
46114: LD_VAR 0 7
46118: PPUSH
46119: LD_INT 1
46121: PPUSH
46122: LD_VAR 0 14
46126: PPUSH
46127: CALL_OW 2
46131: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46132: LD_VAR 0 14
46136: PPUSH
46137: LD_VAR 0 9
46141: PPUSH
46142: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46146: LD_VAR 0 9
46150: PPUSH
46151: CALL_OW 313
46155: PUSH
46156: LD_INT 6
46158: EQUAL
46159: PUSH
46160: LD_VAR 0 9
46164: PPUSH
46165: CALL_OW 266
46169: PUSH
46170: LD_INT 32
46172: PUSH
46173: LD_INT 31
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: IN
46180: OR
46181: IFFALSE 45995
46183: GO 45992
46185: POP
46186: POP
// end else
46187: GO 46569
// for j = 1 to x do
46189: LD_ADDR_VAR 0 9
46193: PUSH
46194: DOUBLE
46195: LD_INT 1
46197: DEC
46198: ST_TO_ADDR
46199: LD_VAR 0 13
46203: PUSH
46204: FOR_TO
46205: IFFALSE 46567
// begin InitHc ;
46207: CALL_OW 19
// if not f then
46211: LD_VAR 0 12
46215: NOT
46216: IFFALSE 46305
// begin PrepareHuman ( false , i , skill ) ;
46218: LD_INT 0
46220: PPUSH
46221: LD_VAR 0 8
46225: PPUSH
46226: LD_VAR 0 4
46230: PPUSH
46231: CALL_OW 380
// un := CreateHuman ;
46235: LD_ADDR_VAR 0 14
46239: PUSH
46240: CALL_OW 44
46244: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46245: LD_ADDR_VAR 0 7
46249: PUSH
46250: LD_VAR 0 7
46254: PPUSH
46255: LD_INT 1
46257: PPUSH
46258: LD_VAR 0 14
46262: PPUSH
46263: CALL_OW 2
46267: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46268: LD_VAR 0 14
46272: PPUSH
46273: LD_VAR 0 1
46277: PPUSH
46278: CALL_OW 250
46282: PPUSH
46283: LD_VAR 0 1
46287: PPUSH
46288: CALL_OW 251
46292: PPUSH
46293: LD_INT 10
46295: PPUSH
46296: LD_INT 0
46298: PPUSH
46299: CALL_OW 50
// continue ;
46303: GO 46204
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46305: LD_VAR 0 12
46309: PUSH
46310: LD_INT 1
46312: ARRAY
46313: PPUSH
46314: CALL_OW 313
46318: PUSH
46319: LD_VAR 0 12
46323: PUSH
46324: LD_INT 1
46326: ARRAY
46327: PPUSH
46328: CALL_OW 266
46332: PUSH
46333: LD_INT 32
46335: PUSH
46336: LD_INT 31
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: IN
46343: AND
46344: PUSH
46345: LD_VAR 0 12
46349: PUSH
46350: LD_INT 1
46352: ARRAY
46353: PPUSH
46354: CALL_OW 313
46358: PUSH
46359: LD_INT 6
46361: EQUAL
46362: OR
46363: IFFALSE 46383
// f := Delete ( f , 1 ) ;
46365: LD_ADDR_VAR 0 12
46369: PUSH
46370: LD_VAR 0 12
46374: PPUSH
46375: LD_INT 1
46377: PPUSH
46378: CALL_OW 3
46382: ST_TO_ADDR
// if not f then
46383: LD_VAR 0 12
46387: NOT
46388: IFFALSE 46406
// begin x := x + 2 ;
46390: LD_ADDR_VAR 0 13
46394: PUSH
46395: LD_VAR 0 13
46399: PUSH
46400: LD_INT 2
46402: PLUS
46403: ST_TO_ADDR
// continue ;
46404: GO 46204
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46406: LD_VAR 0 12
46410: PUSH
46411: LD_INT 1
46413: ARRAY
46414: PPUSH
46415: CALL_OW 266
46419: PUSH
46420: LD_INT 5
46422: EQUAL
46423: IFFALSE 46497
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46425: LD_VAR 0 12
46429: PUSH
46430: LD_INT 1
46432: ARRAY
46433: PPUSH
46434: CALL_OW 313
46438: PUSH
46439: LD_INT 3
46441: LESS
46442: IFFALSE 46478
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46444: LD_INT 0
46446: PPUSH
46447: LD_INT 5
46449: PUSH
46450: LD_INT 8
46452: PUSH
46453: LD_INT 9
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: PUSH
46461: LD_VAR 0 17
46465: ARRAY
46466: PPUSH
46467: LD_VAR 0 4
46471: PPUSH
46472: CALL_OW 380
46476: GO 46495
// PrepareHuman ( false , i , skill ) ;
46478: LD_INT 0
46480: PPUSH
46481: LD_VAR 0 8
46485: PPUSH
46486: LD_VAR 0 4
46490: PPUSH
46491: CALL_OW 380
// end else
46495: GO 46514
// PrepareHuman ( false , i , skill ) ;
46497: LD_INT 0
46499: PPUSH
46500: LD_VAR 0 8
46504: PPUSH
46505: LD_VAR 0 4
46509: PPUSH
46510: CALL_OW 380
// un := CreateHuman ;
46514: LD_ADDR_VAR 0 14
46518: PUSH
46519: CALL_OW 44
46523: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46524: LD_ADDR_VAR 0 7
46528: PUSH
46529: LD_VAR 0 7
46533: PPUSH
46534: LD_INT 1
46536: PPUSH
46537: LD_VAR 0 14
46541: PPUSH
46542: CALL_OW 2
46546: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46547: LD_VAR 0 14
46551: PPUSH
46552: LD_VAR 0 12
46556: PUSH
46557: LD_INT 1
46559: ARRAY
46560: PPUSH
46561: CALL_OW 52
// end ;
46565: GO 46204
46567: POP
46568: POP
// end ;
46569: GO 45506
46571: POP
46572: POP
// result := result ^ buildings ;
46573: LD_ADDR_VAR 0 7
46577: PUSH
46578: LD_VAR 0 7
46582: PUSH
46583: LD_VAR 0 18
46587: ADD
46588: ST_TO_ADDR
// end else
46589: GO 46732
// begin for i = 1 to personel do
46591: LD_ADDR_VAR 0 8
46595: PUSH
46596: DOUBLE
46597: LD_INT 1
46599: DEC
46600: ST_TO_ADDR
46601: LD_VAR 0 6
46605: PUSH
46606: FOR_TO
46607: IFFALSE 46730
// begin if i > 4 then
46609: LD_VAR 0 8
46613: PUSH
46614: LD_INT 4
46616: GREATER
46617: IFFALSE 46621
// break ;
46619: GO 46730
// x := personel [ i ] ;
46621: LD_ADDR_VAR 0 13
46625: PUSH
46626: LD_VAR 0 6
46630: PUSH
46631: LD_VAR 0 8
46635: ARRAY
46636: ST_TO_ADDR
// if x = - 1 then
46637: LD_VAR 0 13
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: EQUAL
46646: IFFALSE 46650
// continue ;
46648: GO 46606
// PrepareHuman ( false , i , skill ) ;
46650: LD_INT 0
46652: PPUSH
46653: LD_VAR 0 8
46657: PPUSH
46658: LD_VAR 0 4
46662: PPUSH
46663: CALL_OW 380
// un := CreateHuman ;
46667: LD_ADDR_VAR 0 14
46671: PUSH
46672: CALL_OW 44
46676: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46677: LD_VAR 0 14
46681: PPUSH
46682: LD_VAR 0 1
46686: PPUSH
46687: CALL_OW 250
46691: PPUSH
46692: LD_VAR 0 1
46696: PPUSH
46697: CALL_OW 251
46701: PPUSH
46702: LD_INT 10
46704: PPUSH
46705: LD_INT 0
46707: PPUSH
46708: CALL_OW 50
// result := result ^ un ;
46712: LD_ADDR_VAR 0 7
46716: PUSH
46717: LD_VAR 0 7
46721: PUSH
46722: LD_VAR 0 14
46726: ADD
46727: ST_TO_ADDR
// end ;
46728: GO 46606
46730: POP
46731: POP
// end ; end ;
46732: LD_VAR 0 7
46736: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46737: LD_INT 0
46739: PPUSH
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
// result := false ;
46755: LD_ADDR_VAR 0 3
46759: PUSH
46760: LD_INT 0
46762: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46763: LD_VAR 0 1
46767: NOT
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 266
46778: PUSH
46779: LD_INT 32
46781: PUSH
46782: LD_INT 33
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: IN
46789: NOT
46790: OR
46791: IFFALSE 46795
// exit ;
46793: GO 47904
// nat := GetNation ( tower ) ;
46795: LD_ADDR_VAR 0 12
46799: PUSH
46800: LD_VAR 0 1
46804: PPUSH
46805: CALL_OW 248
46809: ST_TO_ADDR
// side := GetSide ( tower ) ;
46810: LD_ADDR_VAR 0 16
46814: PUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 255
46824: ST_TO_ADDR
// x := GetX ( tower ) ;
46825: LD_ADDR_VAR 0 10
46829: PUSH
46830: LD_VAR 0 1
46834: PPUSH
46835: CALL_OW 250
46839: ST_TO_ADDR
// y := GetY ( tower ) ;
46840: LD_ADDR_VAR 0 11
46844: PUSH
46845: LD_VAR 0 1
46849: PPUSH
46850: CALL_OW 251
46854: ST_TO_ADDR
// if not x or not y then
46855: LD_VAR 0 10
46859: NOT
46860: PUSH
46861: LD_VAR 0 11
46865: NOT
46866: OR
46867: IFFALSE 46871
// exit ;
46869: GO 47904
// weapon := 0 ;
46871: LD_ADDR_VAR 0 18
46875: PUSH
46876: LD_INT 0
46878: ST_TO_ADDR
// fac_list := [ ] ;
46879: LD_ADDR_VAR 0 17
46883: PUSH
46884: EMPTY
46885: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46886: LD_ADDR_VAR 0 6
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 274
46900: PPUSH
46901: LD_VAR 0 2
46905: PPUSH
46906: LD_INT 0
46908: PPUSH
46909: CALL 44475 0 3
46913: PPUSH
46914: LD_INT 30
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PPUSH
46924: CALL_OW 72
46928: ST_TO_ADDR
// if not factories then
46929: LD_VAR 0 6
46933: NOT
46934: IFFALSE 46938
// exit ;
46936: GO 47904
// for i in factories do
46938: LD_ADDR_VAR 0 8
46942: PUSH
46943: LD_VAR 0 6
46947: PUSH
46948: FOR_IN
46949: IFFALSE 46974
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46951: LD_ADDR_VAR 0 17
46955: PUSH
46956: LD_VAR 0 17
46960: PUSH
46961: LD_VAR 0 8
46965: PPUSH
46966: CALL_OW 478
46970: UNION
46971: ST_TO_ADDR
46972: GO 46948
46974: POP
46975: POP
// if not fac_list then
46976: LD_VAR 0 17
46980: NOT
46981: IFFALSE 46985
// exit ;
46983: GO 47904
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46985: LD_ADDR_VAR 0 5
46989: PUSH
46990: LD_INT 4
46992: PUSH
46993: LD_INT 5
46995: PUSH
46996: LD_INT 9
46998: PUSH
46999: LD_INT 10
47001: PUSH
47002: LD_INT 6
47004: PUSH
47005: LD_INT 7
47007: PUSH
47008: LD_INT 11
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 27
47022: PUSH
47023: LD_INT 28
47025: PUSH
47026: LD_INT 26
47028: PUSH
47029: LD_INT 30
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 43
47040: PUSH
47041: LD_INT 44
47043: PUSH
47044: LD_INT 46
47046: PUSH
47047: LD_INT 45
47049: PUSH
47050: LD_INT 47
47052: PUSH
47053: LD_INT 49
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: PUSH
47069: LD_VAR 0 12
47073: ARRAY
47074: ST_TO_ADDR
// list := list isect fac_list ;
47075: LD_ADDR_VAR 0 5
47079: PUSH
47080: LD_VAR 0 5
47084: PUSH
47085: LD_VAR 0 17
47089: ISECT
47090: ST_TO_ADDR
// if not list then
47091: LD_VAR 0 5
47095: NOT
47096: IFFALSE 47100
// exit ;
47098: GO 47904
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47100: LD_VAR 0 12
47104: PUSH
47105: LD_INT 3
47107: EQUAL
47108: PUSH
47109: LD_INT 49
47111: PUSH
47112: LD_VAR 0 5
47116: IN
47117: AND
47118: PUSH
47119: LD_INT 31
47121: PPUSH
47122: LD_VAR 0 16
47126: PPUSH
47127: CALL_OW 321
47131: PUSH
47132: LD_INT 2
47134: EQUAL
47135: AND
47136: IFFALSE 47196
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47138: LD_INT 22
47140: PUSH
47141: LD_VAR 0 16
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 35
47152: PUSH
47153: LD_INT 49
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 91
47162: PUSH
47163: LD_VAR 0 1
47167: PUSH
47168: LD_INT 10
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: PPUSH
47181: CALL_OW 69
47185: NOT
47186: IFFALSE 47196
// weapon := ru_time_lapser ;
47188: LD_ADDR_VAR 0 18
47192: PUSH
47193: LD_INT 49
47195: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47196: LD_VAR 0 12
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: IN
47211: PUSH
47212: LD_INT 11
47214: PUSH
47215: LD_VAR 0 5
47219: IN
47220: PUSH
47221: LD_INT 30
47223: PUSH
47224: LD_VAR 0 5
47228: IN
47229: OR
47230: AND
47231: PUSH
47232: LD_INT 6
47234: PPUSH
47235: LD_VAR 0 16
47239: PPUSH
47240: CALL_OW 321
47244: PUSH
47245: LD_INT 2
47247: EQUAL
47248: AND
47249: IFFALSE 47414
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47251: LD_INT 22
47253: PUSH
47254: LD_VAR 0 16
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 35
47268: PUSH
47269: LD_INT 11
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 35
47278: PUSH
47279: LD_INT 30
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 91
47293: PUSH
47294: LD_VAR 0 1
47298: PUSH
47299: LD_INT 18
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: PPUSH
47312: CALL_OW 69
47316: NOT
47317: PUSH
47318: LD_INT 22
47320: PUSH
47321: LD_VAR 0 16
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 30
47335: PUSH
47336: LD_INT 32
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 30
47345: PUSH
47346: LD_INT 33
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 91
47360: PUSH
47361: LD_VAR 0 1
47365: PUSH
47366: LD_INT 12
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: PUSH
47379: EMPTY
47380: LIST
47381: PPUSH
47382: CALL_OW 69
47386: PUSH
47387: LD_INT 2
47389: GREATER
47390: AND
47391: IFFALSE 47414
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47393: LD_ADDR_VAR 0 18
47397: PUSH
47398: LD_INT 11
47400: PUSH
47401: LD_INT 30
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_VAR 0 12
47412: ARRAY
47413: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47414: LD_VAR 0 18
47418: NOT
47419: PUSH
47420: LD_INT 40
47422: PPUSH
47423: LD_VAR 0 16
47427: PPUSH
47428: CALL_OW 321
47432: PUSH
47433: LD_INT 2
47435: EQUAL
47436: AND
47437: PUSH
47438: LD_INT 7
47440: PUSH
47441: LD_VAR 0 5
47445: IN
47446: PUSH
47447: LD_INT 28
47449: PUSH
47450: LD_VAR 0 5
47454: IN
47455: OR
47456: PUSH
47457: LD_INT 45
47459: PUSH
47460: LD_VAR 0 5
47464: IN
47465: OR
47466: AND
47467: IFFALSE 47721
// begin hex := GetHexInfo ( x , y ) ;
47469: LD_ADDR_VAR 0 4
47473: PUSH
47474: LD_VAR 0 10
47478: PPUSH
47479: LD_VAR 0 11
47483: PPUSH
47484: CALL_OW 546
47488: ST_TO_ADDR
// if hex [ 1 ] then
47489: LD_VAR 0 4
47493: PUSH
47494: LD_INT 1
47496: ARRAY
47497: IFFALSE 47501
// exit ;
47499: GO 47904
// height := hex [ 2 ] ;
47501: LD_ADDR_VAR 0 15
47505: PUSH
47506: LD_VAR 0 4
47510: PUSH
47511: LD_INT 2
47513: ARRAY
47514: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47515: LD_ADDR_VAR 0 14
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 5
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// for i in tmp do
47538: LD_ADDR_VAR 0 8
47542: PUSH
47543: LD_VAR 0 14
47547: PUSH
47548: FOR_IN
47549: IFFALSE 47719
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47551: LD_ADDR_VAR 0 9
47555: PUSH
47556: LD_VAR 0 10
47560: PPUSH
47561: LD_VAR 0 8
47565: PPUSH
47566: LD_INT 5
47568: PPUSH
47569: CALL_OW 272
47573: PUSH
47574: LD_VAR 0 11
47578: PPUSH
47579: LD_VAR 0 8
47583: PPUSH
47584: LD_INT 5
47586: PPUSH
47587: CALL_OW 273
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47596: LD_VAR 0 9
47600: PUSH
47601: LD_INT 1
47603: ARRAY
47604: PPUSH
47605: LD_VAR 0 9
47609: PUSH
47610: LD_INT 2
47612: ARRAY
47613: PPUSH
47614: CALL_OW 488
47618: IFFALSE 47717
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47620: LD_ADDR_VAR 0 4
47624: PUSH
47625: LD_VAR 0 9
47629: PUSH
47630: LD_INT 1
47632: ARRAY
47633: PPUSH
47634: LD_VAR 0 9
47638: PUSH
47639: LD_INT 2
47641: ARRAY
47642: PPUSH
47643: CALL_OW 546
47647: ST_TO_ADDR
// if hex [ 1 ] then
47648: LD_VAR 0 4
47652: PUSH
47653: LD_INT 1
47655: ARRAY
47656: IFFALSE 47660
// continue ;
47658: GO 47548
// h := hex [ 2 ] ;
47660: LD_ADDR_VAR 0 13
47664: PUSH
47665: LD_VAR 0 4
47669: PUSH
47670: LD_INT 2
47672: ARRAY
47673: ST_TO_ADDR
// if h + 7 < height then
47674: LD_VAR 0 13
47678: PUSH
47679: LD_INT 7
47681: PLUS
47682: PUSH
47683: LD_VAR 0 15
47687: LESS
47688: IFFALSE 47717
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47690: LD_ADDR_VAR 0 18
47694: PUSH
47695: LD_INT 7
47697: PUSH
47698: LD_INT 28
47700: PUSH
47701: LD_INT 45
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: PUSH
47709: LD_VAR 0 12
47713: ARRAY
47714: ST_TO_ADDR
// break ;
47715: GO 47719
// end ; end ; end ;
47717: GO 47548
47719: POP
47720: POP
// end ; if not weapon then
47721: LD_VAR 0 18
47725: NOT
47726: IFFALSE 47786
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47728: LD_ADDR_VAR 0 5
47732: PUSH
47733: LD_VAR 0 5
47737: PUSH
47738: LD_INT 11
47740: PUSH
47741: LD_INT 30
47743: PUSH
47744: LD_INT 49
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: DIFF
47752: ST_TO_ADDR
// if not list then
47753: LD_VAR 0 5
47757: NOT
47758: IFFALSE 47762
// exit ;
47760: GO 47904
// weapon := list [ rand ( 1 , list ) ] ;
47762: LD_ADDR_VAR 0 18
47766: PUSH
47767: LD_VAR 0 5
47771: PUSH
47772: LD_INT 1
47774: PPUSH
47775: LD_VAR 0 5
47779: PPUSH
47780: CALL_OW 12
47784: ARRAY
47785: ST_TO_ADDR
// end ; if weapon then
47786: LD_VAR 0 18
47790: IFFALSE 47904
// begin tmp := CostOfWeapon ( weapon ) ;
47792: LD_ADDR_VAR 0 14
47796: PUSH
47797: LD_VAR 0 18
47801: PPUSH
47802: CALL_OW 451
47806: ST_TO_ADDR
// j := GetBase ( tower ) ;
47807: LD_ADDR_VAR 0 9
47811: PUSH
47812: LD_VAR 0 1
47816: PPUSH
47817: CALL_OW 274
47821: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47822: LD_VAR 0 9
47826: PPUSH
47827: LD_INT 1
47829: PPUSH
47830: CALL_OW 275
47834: PUSH
47835: LD_VAR 0 14
47839: PUSH
47840: LD_INT 1
47842: ARRAY
47843: GREATEREQUAL
47844: PUSH
47845: LD_VAR 0 9
47849: PPUSH
47850: LD_INT 2
47852: PPUSH
47853: CALL_OW 275
47857: PUSH
47858: LD_VAR 0 14
47862: PUSH
47863: LD_INT 2
47865: ARRAY
47866: GREATEREQUAL
47867: AND
47868: PUSH
47869: LD_VAR 0 9
47873: PPUSH
47874: LD_INT 3
47876: PPUSH
47877: CALL_OW 275
47881: PUSH
47882: LD_VAR 0 14
47886: PUSH
47887: LD_INT 3
47889: ARRAY
47890: GREATEREQUAL
47891: AND
47892: IFFALSE 47904
// result := weapon ;
47894: LD_ADDR_VAR 0 3
47898: PUSH
47899: LD_VAR 0 18
47903: ST_TO_ADDR
// end ; end ;
47904: LD_VAR 0 3
47908: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47909: LD_INT 0
47911: PPUSH
47912: PPUSH
// result := true ;
47913: LD_ADDR_VAR 0 3
47917: PUSH
47918: LD_INT 1
47920: ST_TO_ADDR
// if array1 = array2 then
47921: LD_VAR 0 1
47925: PUSH
47926: LD_VAR 0 2
47930: EQUAL
47931: IFFALSE 47991
// begin for i = 1 to array1 do
47933: LD_ADDR_VAR 0 4
47937: PUSH
47938: DOUBLE
47939: LD_INT 1
47941: DEC
47942: ST_TO_ADDR
47943: LD_VAR 0 1
47947: PUSH
47948: FOR_TO
47949: IFFALSE 47987
// if array1 [ i ] <> array2 [ i ] then
47951: LD_VAR 0 1
47955: PUSH
47956: LD_VAR 0 4
47960: ARRAY
47961: PUSH
47962: LD_VAR 0 2
47966: PUSH
47967: LD_VAR 0 4
47971: ARRAY
47972: NONEQUAL
47973: IFFALSE 47985
// begin result := false ;
47975: LD_ADDR_VAR 0 3
47979: PUSH
47980: LD_INT 0
47982: ST_TO_ADDR
// break ;
47983: GO 47987
// end ;
47985: GO 47948
47987: POP
47988: POP
// end else
47989: GO 47999
// result := false ;
47991: LD_ADDR_VAR 0 3
47995: PUSH
47996: LD_INT 0
47998: ST_TO_ADDR
// end ;
47999: LD_VAR 0 3
48003: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48004: LD_INT 0
48006: PPUSH
48007: PPUSH
// if not array1 or not array2 then
48008: LD_VAR 0 1
48012: NOT
48013: PUSH
48014: LD_VAR 0 2
48018: NOT
48019: OR
48020: IFFALSE 48024
// exit ;
48022: GO 48088
// result := true ;
48024: LD_ADDR_VAR 0 3
48028: PUSH
48029: LD_INT 1
48031: ST_TO_ADDR
// for i = 1 to array1 do
48032: LD_ADDR_VAR 0 4
48036: PUSH
48037: DOUBLE
48038: LD_INT 1
48040: DEC
48041: ST_TO_ADDR
48042: LD_VAR 0 1
48046: PUSH
48047: FOR_TO
48048: IFFALSE 48086
// if array1 [ i ] <> array2 [ i ] then
48050: LD_VAR 0 1
48054: PUSH
48055: LD_VAR 0 4
48059: ARRAY
48060: PUSH
48061: LD_VAR 0 2
48065: PUSH
48066: LD_VAR 0 4
48070: ARRAY
48071: NONEQUAL
48072: IFFALSE 48084
// begin result := false ;
48074: LD_ADDR_VAR 0 3
48078: PUSH
48079: LD_INT 0
48081: ST_TO_ADDR
// break ;
48082: GO 48086
// end ;
48084: GO 48047
48086: POP
48087: POP
// end ;
48088: LD_VAR 0 3
48092: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48093: LD_INT 0
48095: PPUSH
48096: PPUSH
48097: PPUSH
// pom := GetBase ( fac ) ;
48098: LD_ADDR_VAR 0 5
48102: PUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 274
48112: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48113: LD_ADDR_VAR 0 4
48117: PUSH
48118: LD_VAR 0 2
48122: PUSH
48123: LD_INT 1
48125: ARRAY
48126: PPUSH
48127: LD_VAR 0 2
48131: PUSH
48132: LD_INT 2
48134: ARRAY
48135: PPUSH
48136: LD_VAR 0 2
48140: PUSH
48141: LD_INT 3
48143: ARRAY
48144: PPUSH
48145: LD_VAR 0 2
48149: PUSH
48150: LD_INT 4
48152: ARRAY
48153: PPUSH
48154: CALL_OW 449
48158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48159: LD_ADDR_VAR 0 3
48163: PUSH
48164: LD_VAR 0 5
48168: PPUSH
48169: LD_INT 1
48171: PPUSH
48172: CALL_OW 275
48176: PUSH
48177: LD_VAR 0 4
48181: PUSH
48182: LD_INT 1
48184: ARRAY
48185: GREATEREQUAL
48186: PUSH
48187: LD_VAR 0 5
48191: PPUSH
48192: LD_INT 2
48194: PPUSH
48195: CALL_OW 275
48199: PUSH
48200: LD_VAR 0 4
48204: PUSH
48205: LD_INT 2
48207: ARRAY
48208: GREATEREQUAL
48209: AND
48210: PUSH
48211: LD_VAR 0 5
48215: PPUSH
48216: LD_INT 3
48218: PPUSH
48219: CALL_OW 275
48223: PUSH
48224: LD_VAR 0 4
48228: PUSH
48229: LD_INT 3
48231: ARRAY
48232: GREATEREQUAL
48233: AND
48234: ST_TO_ADDR
// end ;
48235: LD_VAR 0 3
48239: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48240: LD_INT 0
48242: PPUSH
48243: PPUSH
48244: PPUSH
48245: PPUSH
// pom := GetBase ( building ) ;
48246: LD_ADDR_VAR 0 3
48250: PUSH
48251: LD_VAR 0 1
48255: PPUSH
48256: CALL_OW 274
48260: ST_TO_ADDR
// if not pom then
48261: LD_VAR 0 3
48265: NOT
48266: IFFALSE 48270
// exit ;
48268: GO 48440
// btype := GetBType ( building ) ;
48270: LD_ADDR_VAR 0 5
48274: PUSH
48275: LD_VAR 0 1
48279: PPUSH
48280: CALL_OW 266
48284: ST_TO_ADDR
// if btype = b_armoury then
48285: LD_VAR 0 5
48289: PUSH
48290: LD_INT 4
48292: EQUAL
48293: IFFALSE 48303
// btype := b_barracks ;
48295: LD_ADDR_VAR 0 5
48299: PUSH
48300: LD_INT 5
48302: ST_TO_ADDR
// if btype = b_depot then
48303: LD_VAR 0 5
48307: PUSH
48308: LD_INT 0
48310: EQUAL
48311: IFFALSE 48321
// btype := b_warehouse ;
48313: LD_ADDR_VAR 0 5
48317: PUSH
48318: LD_INT 1
48320: ST_TO_ADDR
// if btype = b_workshop then
48321: LD_VAR 0 5
48325: PUSH
48326: LD_INT 2
48328: EQUAL
48329: IFFALSE 48339
// btype := b_factory ;
48331: LD_ADDR_VAR 0 5
48335: PUSH
48336: LD_INT 3
48338: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48339: LD_ADDR_VAR 0 4
48343: PUSH
48344: LD_VAR 0 5
48348: PPUSH
48349: LD_VAR 0 1
48353: PPUSH
48354: CALL_OW 248
48358: PPUSH
48359: CALL_OW 450
48363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48364: LD_ADDR_VAR 0 2
48368: PUSH
48369: LD_VAR 0 3
48373: PPUSH
48374: LD_INT 1
48376: PPUSH
48377: CALL_OW 275
48381: PUSH
48382: LD_VAR 0 4
48386: PUSH
48387: LD_INT 1
48389: ARRAY
48390: GREATEREQUAL
48391: PUSH
48392: LD_VAR 0 3
48396: PPUSH
48397: LD_INT 2
48399: PPUSH
48400: CALL_OW 275
48404: PUSH
48405: LD_VAR 0 4
48409: PUSH
48410: LD_INT 2
48412: ARRAY
48413: GREATEREQUAL
48414: AND
48415: PUSH
48416: LD_VAR 0 3
48420: PPUSH
48421: LD_INT 3
48423: PPUSH
48424: CALL_OW 275
48428: PUSH
48429: LD_VAR 0 4
48433: PUSH
48434: LD_INT 3
48436: ARRAY
48437: GREATEREQUAL
48438: AND
48439: ST_TO_ADDR
// end ;
48440: LD_VAR 0 2
48444: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48445: LD_INT 0
48447: PPUSH
48448: PPUSH
48449: PPUSH
// pom := GetBase ( building ) ;
48450: LD_ADDR_VAR 0 4
48454: PUSH
48455: LD_VAR 0 1
48459: PPUSH
48460: CALL_OW 274
48464: ST_TO_ADDR
// if not pom then
48465: LD_VAR 0 4
48469: NOT
48470: IFFALSE 48474
// exit ;
48472: GO 48575
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48474: LD_ADDR_VAR 0 5
48478: PUSH
48479: LD_VAR 0 2
48483: PPUSH
48484: LD_VAR 0 1
48488: PPUSH
48489: CALL_OW 248
48493: PPUSH
48494: CALL_OW 450
48498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48499: LD_ADDR_VAR 0 3
48503: PUSH
48504: LD_VAR 0 4
48508: PPUSH
48509: LD_INT 1
48511: PPUSH
48512: CALL_OW 275
48516: PUSH
48517: LD_VAR 0 5
48521: PUSH
48522: LD_INT 1
48524: ARRAY
48525: GREATEREQUAL
48526: PUSH
48527: LD_VAR 0 4
48531: PPUSH
48532: LD_INT 2
48534: PPUSH
48535: CALL_OW 275
48539: PUSH
48540: LD_VAR 0 5
48544: PUSH
48545: LD_INT 2
48547: ARRAY
48548: GREATEREQUAL
48549: AND
48550: PUSH
48551: LD_VAR 0 4
48555: PPUSH
48556: LD_INT 3
48558: PPUSH
48559: CALL_OW 275
48563: PUSH
48564: LD_VAR 0 5
48568: PUSH
48569: LD_INT 3
48571: ARRAY
48572: GREATEREQUAL
48573: AND
48574: ST_TO_ADDR
// end ;
48575: LD_VAR 0 3
48579: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48580: LD_INT 0
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
// result := false ;
48593: LD_ADDR_VAR 0 8
48597: PUSH
48598: LD_INT 0
48600: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48601: LD_VAR 0 5
48605: NOT
48606: PUSH
48607: LD_VAR 0 1
48611: NOT
48612: OR
48613: PUSH
48614: LD_VAR 0 2
48618: NOT
48619: OR
48620: PUSH
48621: LD_VAR 0 3
48625: NOT
48626: OR
48627: IFFALSE 48631
// exit ;
48629: GO 49445
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48631: LD_ADDR_VAR 0 14
48635: PUSH
48636: LD_VAR 0 1
48640: PPUSH
48641: LD_VAR 0 2
48645: PPUSH
48646: LD_VAR 0 3
48650: PPUSH
48651: LD_VAR 0 4
48655: PPUSH
48656: LD_VAR 0 5
48660: PUSH
48661: LD_INT 1
48663: ARRAY
48664: PPUSH
48665: CALL_OW 248
48669: PPUSH
48670: LD_INT 0
48672: PPUSH
48673: CALL 50678 0 6
48677: ST_TO_ADDR
// if not hexes then
48678: LD_VAR 0 14
48682: NOT
48683: IFFALSE 48687
// exit ;
48685: GO 49445
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48687: LD_ADDR_VAR 0 17
48691: PUSH
48692: LD_VAR 0 5
48696: PPUSH
48697: LD_INT 22
48699: PUSH
48700: LD_VAR 0 13
48704: PPUSH
48705: CALL_OW 255
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 30
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 30
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PPUSH
48746: CALL_OW 72
48750: ST_TO_ADDR
// for i = 1 to hexes do
48751: LD_ADDR_VAR 0 9
48755: PUSH
48756: DOUBLE
48757: LD_INT 1
48759: DEC
48760: ST_TO_ADDR
48761: LD_VAR 0 14
48765: PUSH
48766: FOR_TO
48767: IFFALSE 49443
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48769: LD_ADDR_VAR 0 13
48773: PUSH
48774: LD_VAR 0 14
48778: PUSH
48779: LD_VAR 0 9
48783: ARRAY
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: PPUSH
48789: LD_VAR 0 14
48793: PUSH
48794: LD_VAR 0 9
48798: ARRAY
48799: PUSH
48800: LD_INT 2
48802: ARRAY
48803: PPUSH
48804: CALL_OW 428
48808: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48809: LD_VAR 0 14
48813: PUSH
48814: LD_VAR 0 9
48818: ARRAY
48819: PUSH
48820: LD_INT 1
48822: ARRAY
48823: PPUSH
48824: LD_VAR 0 14
48828: PUSH
48829: LD_VAR 0 9
48833: ARRAY
48834: PUSH
48835: LD_INT 2
48837: ARRAY
48838: PPUSH
48839: CALL_OW 351
48843: PUSH
48844: LD_VAR 0 14
48848: PUSH
48849: LD_VAR 0 9
48853: ARRAY
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: PPUSH
48859: LD_VAR 0 14
48863: PUSH
48864: LD_VAR 0 9
48868: ARRAY
48869: PUSH
48870: LD_INT 2
48872: ARRAY
48873: PPUSH
48874: CALL_OW 488
48878: NOT
48879: OR
48880: PUSH
48881: LD_VAR 0 13
48885: PPUSH
48886: CALL_OW 247
48890: PUSH
48891: LD_INT 3
48893: EQUAL
48894: OR
48895: IFFALSE 48901
// exit ;
48897: POP
48898: POP
48899: GO 49445
// if not tmp then
48901: LD_VAR 0 13
48905: NOT
48906: IFFALSE 48910
// continue ;
48908: GO 48766
// result := true ;
48910: LD_ADDR_VAR 0 8
48914: PUSH
48915: LD_INT 1
48917: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48918: LD_VAR 0 6
48922: PUSH
48923: LD_VAR 0 13
48927: PPUSH
48928: CALL_OW 247
48932: PUSH
48933: LD_INT 2
48935: EQUAL
48936: AND
48937: PUSH
48938: LD_VAR 0 13
48942: PPUSH
48943: CALL_OW 263
48947: PUSH
48948: LD_INT 1
48950: EQUAL
48951: AND
48952: IFFALSE 49116
// begin if IsDrivenBy ( tmp ) then
48954: LD_VAR 0 13
48958: PPUSH
48959: CALL_OW 311
48963: IFFALSE 48967
// continue ;
48965: GO 48766
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48967: LD_VAR 0 6
48971: PPUSH
48972: LD_INT 3
48974: PUSH
48975: LD_INT 60
48977: PUSH
48978: EMPTY
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: LD_INT 55
48990: PUSH
48991: EMPTY
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PPUSH
49002: CALL_OW 72
49006: IFFALSE 49114
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49008: LD_ADDR_VAR 0 18
49012: PUSH
49013: LD_VAR 0 6
49017: PPUSH
49018: LD_INT 3
49020: PUSH
49021: LD_INT 60
49023: PUSH
49024: EMPTY
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: LD_INT 55
49036: PUSH
49037: EMPTY
49038: LIST
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PPUSH
49048: CALL_OW 72
49052: PUSH
49053: LD_INT 1
49055: ARRAY
49056: ST_TO_ADDR
// if IsInUnit ( driver ) then
49057: LD_VAR 0 18
49061: PPUSH
49062: CALL_OW 310
49066: IFFALSE 49077
// ComExit ( driver ) ;
49068: LD_VAR 0 18
49072: PPUSH
49073: CALL 74457 0 1
// AddComEnterUnit ( driver , tmp ) ;
49077: LD_VAR 0 18
49081: PPUSH
49082: LD_VAR 0 13
49086: PPUSH
49087: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49091: LD_VAR 0 18
49095: PPUSH
49096: LD_VAR 0 7
49100: PPUSH
49101: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49105: LD_VAR 0 18
49109: PPUSH
49110: CALL_OW 181
// end ; continue ;
49114: GO 48766
// end ; if not cleaners or not tmp in cleaners then
49116: LD_VAR 0 6
49120: NOT
49121: PUSH
49122: LD_VAR 0 13
49126: PUSH
49127: LD_VAR 0 6
49131: IN
49132: NOT
49133: OR
49134: IFFALSE 49441
// begin if dep then
49136: LD_VAR 0 17
49140: IFFALSE 49276
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49142: LD_ADDR_VAR 0 16
49146: PUSH
49147: LD_VAR 0 17
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: PPUSH
49156: CALL_OW 250
49160: PPUSH
49161: LD_VAR 0 17
49165: PUSH
49166: LD_INT 1
49168: ARRAY
49169: PPUSH
49170: CALL_OW 254
49174: PPUSH
49175: LD_INT 5
49177: PPUSH
49178: CALL_OW 272
49182: PUSH
49183: LD_VAR 0 17
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: PPUSH
49192: CALL_OW 251
49196: PPUSH
49197: LD_VAR 0 17
49201: PUSH
49202: LD_INT 1
49204: ARRAY
49205: PPUSH
49206: CALL_OW 254
49210: PPUSH
49211: LD_INT 5
49213: PPUSH
49214: CALL_OW 273
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49223: LD_VAR 0 16
49227: PUSH
49228: LD_INT 1
49230: ARRAY
49231: PPUSH
49232: LD_VAR 0 16
49236: PUSH
49237: LD_INT 2
49239: ARRAY
49240: PPUSH
49241: CALL_OW 488
49245: IFFALSE 49276
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49247: LD_VAR 0 13
49251: PPUSH
49252: LD_VAR 0 16
49256: PUSH
49257: LD_INT 1
49259: ARRAY
49260: PPUSH
49261: LD_VAR 0 16
49265: PUSH
49266: LD_INT 2
49268: ARRAY
49269: PPUSH
49270: CALL_OW 111
// continue ;
49274: GO 48766
// end ; end ; r := GetDir ( tmp ) ;
49276: LD_ADDR_VAR 0 15
49280: PUSH
49281: LD_VAR 0 13
49285: PPUSH
49286: CALL_OW 254
49290: ST_TO_ADDR
// if r = 5 then
49291: LD_VAR 0 15
49295: PUSH
49296: LD_INT 5
49298: EQUAL
49299: IFFALSE 49309
// r := 0 ;
49301: LD_ADDR_VAR 0 15
49305: PUSH
49306: LD_INT 0
49308: ST_TO_ADDR
// for j = r to 5 do
49309: LD_ADDR_VAR 0 10
49313: PUSH
49314: DOUBLE
49315: LD_VAR 0 15
49319: DEC
49320: ST_TO_ADDR
49321: LD_INT 5
49323: PUSH
49324: FOR_TO
49325: IFFALSE 49439
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49327: LD_ADDR_VAR 0 11
49331: PUSH
49332: LD_VAR 0 13
49336: PPUSH
49337: CALL_OW 250
49341: PPUSH
49342: LD_VAR 0 10
49346: PPUSH
49347: LD_INT 2
49349: PPUSH
49350: CALL_OW 272
49354: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49355: LD_ADDR_VAR 0 12
49359: PUSH
49360: LD_VAR 0 13
49364: PPUSH
49365: CALL_OW 251
49369: PPUSH
49370: LD_VAR 0 10
49374: PPUSH
49375: LD_INT 2
49377: PPUSH
49378: CALL_OW 273
49382: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49383: LD_VAR 0 11
49387: PPUSH
49388: LD_VAR 0 12
49392: PPUSH
49393: CALL_OW 488
49397: PUSH
49398: LD_VAR 0 11
49402: PPUSH
49403: LD_VAR 0 12
49407: PPUSH
49408: CALL_OW 428
49412: NOT
49413: AND
49414: IFFALSE 49437
// begin ComMoveXY ( tmp , _x , _y ) ;
49416: LD_VAR 0 13
49420: PPUSH
49421: LD_VAR 0 11
49425: PPUSH
49426: LD_VAR 0 12
49430: PPUSH
49431: CALL_OW 111
// break ;
49435: GO 49439
// end ; end ;
49437: GO 49324
49439: POP
49440: POP
// end ; end ;
49441: GO 48766
49443: POP
49444: POP
// end ;
49445: LD_VAR 0 8
49449: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49450: LD_INT 0
49452: PPUSH
// result := true ;
49453: LD_ADDR_VAR 0 3
49457: PUSH
49458: LD_INT 1
49460: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49461: LD_VAR 0 2
49465: PUSH
49466: LD_INT 24
49468: DOUBLE
49469: EQUAL
49470: IFTRUE 49480
49472: LD_INT 33
49474: DOUBLE
49475: EQUAL
49476: IFTRUE 49480
49478: GO 49505
49480: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_INT 32
49488: PPUSH
49489: LD_VAR 0 1
49493: PPUSH
49494: CALL_OW 321
49498: PUSH
49499: LD_INT 2
49501: EQUAL
49502: ST_TO_ADDR
49503: GO 49821
49505: LD_INT 20
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49513
49511: GO 49538
49513: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49514: LD_ADDR_VAR 0 3
49518: PUSH
49519: LD_INT 6
49521: PPUSH
49522: LD_VAR 0 1
49526: PPUSH
49527: CALL_OW 321
49531: PUSH
49532: LD_INT 2
49534: EQUAL
49535: ST_TO_ADDR
49536: GO 49821
49538: LD_INT 22
49540: DOUBLE
49541: EQUAL
49542: IFTRUE 49552
49544: LD_INT 36
49546: DOUBLE
49547: EQUAL
49548: IFTRUE 49552
49550: GO 49577
49552: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49553: LD_ADDR_VAR 0 3
49557: PUSH
49558: LD_INT 15
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 321
49570: PUSH
49571: LD_INT 2
49573: EQUAL
49574: ST_TO_ADDR
49575: GO 49821
49577: LD_INT 30
49579: DOUBLE
49580: EQUAL
49581: IFTRUE 49585
49583: GO 49610
49585: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49586: LD_ADDR_VAR 0 3
49590: PUSH
49591: LD_INT 20
49593: PPUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: CALL_OW 321
49603: PUSH
49604: LD_INT 2
49606: EQUAL
49607: ST_TO_ADDR
49608: GO 49821
49610: LD_INT 28
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49624
49616: LD_INT 21
49618: DOUBLE
49619: EQUAL
49620: IFTRUE 49624
49622: GO 49649
49624: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49625: LD_ADDR_VAR 0 3
49629: PUSH
49630: LD_INT 21
49632: PPUSH
49633: LD_VAR 0 1
49637: PPUSH
49638: CALL_OW 321
49642: PUSH
49643: LD_INT 2
49645: EQUAL
49646: ST_TO_ADDR
49647: GO 49821
49649: LD_INT 16
49651: DOUBLE
49652: EQUAL
49653: IFTRUE 49657
49655: GO 49682
49657: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49658: LD_ADDR_VAR 0 3
49662: PUSH
49663: LD_INT 84
49665: PPUSH
49666: LD_VAR 0 1
49670: PPUSH
49671: CALL_OW 321
49675: PUSH
49676: LD_INT 2
49678: EQUAL
49679: ST_TO_ADDR
49680: GO 49821
49682: LD_INT 19
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49696
49688: LD_INT 23
49690: DOUBLE
49691: EQUAL
49692: IFTRUE 49696
49694: GO 49721
49696: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49697: LD_ADDR_VAR 0 3
49701: PUSH
49702: LD_INT 83
49704: PPUSH
49705: LD_VAR 0 1
49709: PPUSH
49710: CALL_OW 321
49714: PUSH
49715: LD_INT 2
49717: EQUAL
49718: ST_TO_ADDR
49719: GO 49821
49721: LD_INT 17
49723: DOUBLE
49724: EQUAL
49725: IFTRUE 49729
49727: GO 49754
49729: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49730: LD_ADDR_VAR 0 3
49734: PUSH
49735: LD_INT 39
49737: PPUSH
49738: LD_VAR 0 1
49742: PPUSH
49743: CALL_OW 321
49747: PUSH
49748: LD_INT 2
49750: EQUAL
49751: ST_TO_ADDR
49752: GO 49821
49754: LD_INT 18
49756: DOUBLE
49757: EQUAL
49758: IFTRUE 49762
49760: GO 49787
49762: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49763: LD_ADDR_VAR 0 3
49767: PUSH
49768: LD_INT 40
49770: PPUSH
49771: LD_VAR 0 1
49775: PPUSH
49776: CALL_OW 321
49780: PUSH
49781: LD_INT 2
49783: EQUAL
49784: ST_TO_ADDR
49785: GO 49821
49787: LD_INT 27
49789: DOUBLE
49790: EQUAL
49791: IFTRUE 49795
49793: GO 49820
49795: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49796: LD_ADDR_VAR 0 3
49800: PUSH
49801: LD_INT 35
49803: PPUSH
49804: LD_VAR 0 1
49808: PPUSH
49809: CALL_OW 321
49813: PUSH
49814: LD_INT 2
49816: EQUAL
49817: ST_TO_ADDR
49818: GO 49821
49820: POP
// end ;
49821: LD_VAR 0 3
49825: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49826: LD_INT 0
49828: PPUSH
49829: PPUSH
49830: PPUSH
49831: PPUSH
49832: PPUSH
49833: PPUSH
49834: PPUSH
49835: PPUSH
49836: PPUSH
49837: PPUSH
49838: PPUSH
// result := false ;
49839: LD_ADDR_VAR 0 6
49843: PUSH
49844: LD_INT 0
49846: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49847: LD_VAR 0 1
49851: NOT
49852: PUSH
49853: LD_VAR 0 1
49857: PPUSH
49858: CALL_OW 266
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: IN
49873: NOT
49874: OR
49875: PUSH
49876: LD_VAR 0 2
49880: NOT
49881: OR
49882: PUSH
49883: LD_VAR 0 5
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: LD_INT 4
49902: PUSH
49903: LD_INT 5
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: IN
49914: NOT
49915: OR
49916: PUSH
49917: LD_VAR 0 3
49921: PPUSH
49922: LD_VAR 0 4
49926: PPUSH
49927: CALL_OW 488
49931: NOT
49932: OR
49933: IFFALSE 49937
// exit ;
49935: GO 50673
// side := GetSide ( depot ) ;
49937: LD_ADDR_VAR 0 9
49941: PUSH
49942: LD_VAR 0 1
49946: PPUSH
49947: CALL_OW 255
49951: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49952: LD_VAR 0 9
49956: PPUSH
49957: LD_VAR 0 2
49961: PPUSH
49962: CALL 49450 0 2
49966: NOT
49967: IFFALSE 49971
// exit ;
49969: GO 50673
// pom := GetBase ( depot ) ;
49971: LD_ADDR_VAR 0 10
49975: PUSH
49976: LD_VAR 0 1
49980: PPUSH
49981: CALL_OW 274
49985: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49986: LD_ADDR_VAR 0 11
49990: PUSH
49991: LD_VAR 0 2
49995: PPUSH
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 248
50005: PPUSH
50006: CALL_OW 450
50010: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50011: LD_VAR 0 10
50015: PPUSH
50016: LD_INT 1
50018: PPUSH
50019: CALL_OW 275
50023: PUSH
50024: LD_VAR 0 11
50028: PUSH
50029: LD_INT 1
50031: ARRAY
50032: GREATEREQUAL
50033: PUSH
50034: LD_VAR 0 10
50038: PPUSH
50039: LD_INT 2
50041: PPUSH
50042: CALL_OW 275
50046: PUSH
50047: LD_VAR 0 11
50051: PUSH
50052: LD_INT 2
50054: ARRAY
50055: GREATEREQUAL
50056: AND
50057: PUSH
50058: LD_VAR 0 10
50062: PPUSH
50063: LD_INT 3
50065: PPUSH
50066: CALL_OW 275
50070: PUSH
50071: LD_VAR 0 11
50075: PUSH
50076: LD_INT 3
50078: ARRAY
50079: GREATEREQUAL
50080: AND
50081: NOT
50082: IFFALSE 50086
// exit ;
50084: GO 50673
// if GetBType ( depot ) = b_depot then
50086: LD_VAR 0 1
50090: PPUSH
50091: CALL_OW 266
50095: PUSH
50096: LD_INT 0
50098: EQUAL
50099: IFFALSE 50111
// dist := 28 else
50101: LD_ADDR_VAR 0 14
50105: PUSH
50106: LD_INT 28
50108: ST_TO_ADDR
50109: GO 50119
// dist := 36 ;
50111: LD_ADDR_VAR 0 14
50115: PUSH
50116: LD_INT 36
50118: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50119: LD_VAR 0 1
50123: PPUSH
50124: LD_VAR 0 3
50128: PPUSH
50129: LD_VAR 0 4
50133: PPUSH
50134: CALL_OW 297
50138: PUSH
50139: LD_VAR 0 14
50143: GREATER
50144: IFFALSE 50148
// exit ;
50146: GO 50673
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50148: LD_ADDR_VAR 0 12
50152: PUSH
50153: LD_VAR 0 2
50157: PPUSH
50158: LD_VAR 0 3
50162: PPUSH
50163: LD_VAR 0 4
50167: PPUSH
50168: LD_VAR 0 5
50172: PPUSH
50173: LD_VAR 0 1
50177: PPUSH
50178: CALL_OW 248
50182: PPUSH
50183: LD_INT 0
50185: PPUSH
50186: CALL 50678 0 6
50190: ST_TO_ADDR
// if not hexes then
50191: LD_VAR 0 12
50195: NOT
50196: IFFALSE 50200
// exit ;
50198: GO 50673
// hex := GetHexInfo ( x , y ) ;
50200: LD_ADDR_VAR 0 15
50204: PUSH
50205: LD_VAR 0 3
50209: PPUSH
50210: LD_VAR 0 4
50214: PPUSH
50215: CALL_OW 546
50219: ST_TO_ADDR
// if hex [ 1 ] then
50220: LD_VAR 0 15
50224: PUSH
50225: LD_INT 1
50227: ARRAY
50228: IFFALSE 50232
// exit ;
50230: GO 50673
// height := hex [ 2 ] ;
50232: LD_ADDR_VAR 0 13
50236: PUSH
50237: LD_VAR 0 15
50241: PUSH
50242: LD_INT 2
50244: ARRAY
50245: ST_TO_ADDR
// for i = 1 to hexes do
50246: LD_ADDR_VAR 0 7
50250: PUSH
50251: DOUBLE
50252: LD_INT 1
50254: DEC
50255: ST_TO_ADDR
50256: LD_VAR 0 12
50260: PUSH
50261: FOR_TO
50262: IFFALSE 50592
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50264: LD_VAR 0 12
50268: PUSH
50269: LD_VAR 0 7
50273: ARRAY
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 12
50283: PUSH
50284: LD_VAR 0 7
50288: ARRAY
50289: PUSH
50290: LD_INT 2
50292: ARRAY
50293: PPUSH
50294: CALL_OW 488
50298: NOT
50299: PUSH
50300: LD_VAR 0 12
50304: PUSH
50305: LD_VAR 0 7
50309: ARRAY
50310: PUSH
50311: LD_INT 1
50313: ARRAY
50314: PPUSH
50315: LD_VAR 0 12
50319: PUSH
50320: LD_VAR 0 7
50324: ARRAY
50325: PUSH
50326: LD_INT 2
50328: ARRAY
50329: PPUSH
50330: CALL_OW 428
50334: PUSH
50335: LD_INT 0
50337: GREATER
50338: OR
50339: PUSH
50340: LD_VAR 0 12
50344: PUSH
50345: LD_VAR 0 7
50349: ARRAY
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PPUSH
50355: LD_VAR 0 12
50359: PUSH
50360: LD_VAR 0 7
50364: ARRAY
50365: PUSH
50366: LD_INT 2
50368: ARRAY
50369: PPUSH
50370: CALL_OW 351
50374: OR
50375: IFFALSE 50381
// exit ;
50377: POP
50378: POP
50379: GO 50673
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50381: LD_ADDR_VAR 0 8
50385: PUSH
50386: LD_VAR 0 12
50390: PUSH
50391: LD_VAR 0 7
50395: ARRAY
50396: PUSH
50397: LD_INT 1
50399: ARRAY
50400: PPUSH
50401: LD_VAR 0 12
50405: PUSH
50406: LD_VAR 0 7
50410: ARRAY
50411: PUSH
50412: LD_INT 2
50414: ARRAY
50415: PPUSH
50416: CALL_OW 546
50420: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50421: LD_VAR 0 8
50425: PUSH
50426: LD_INT 1
50428: ARRAY
50429: PUSH
50430: LD_VAR 0 8
50434: PUSH
50435: LD_INT 2
50437: ARRAY
50438: PUSH
50439: LD_VAR 0 13
50443: PUSH
50444: LD_INT 2
50446: PLUS
50447: GREATER
50448: OR
50449: PUSH
50450: LD_VAR 0 8
50454: PUSH
50455: LD_INT 2
50457: ARRAY
50458: PUSH
50459: LD_VAR 0 13
50463: PUSH
50464: LD_INT 2
50466: MINUS
50467: LESS
50468: OR
50469: PUSH
50470: LD_VAR 0 8
50474: PUSH
50475: LD_INT 3
50477: ARRAY
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 8
50484: PUSH
50485: LD_INT 9
50487: PUSH
50488: LD_INT 10
50490: PUSH
50491: LD_INT 11
50493: PUSH
50494: LD_INT 12
50496: PUSH
50497: LD_INT 13
50499: PUSH
50500: LD_INT 16
50502: PUSH
50503: LD_INT 17
50505: PUSH
50506: LD_INT 18
50508: PUSH
50509: LD_INT 19
50511: PUSH
50512: LD_INT 20
50514: PUSH
50515: LD_INT 21
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: IN
50533: NOT
50534: OR
50535: PUSH
50536: LD_VAR 0 8
50540: PUSH
50541: LD_INT 5
50543: ARRAY
50544: NOT
50545: OR
50546: PUSH
50547: LD_VAR 0 8
50551: PUSH
50552: LD_INT 6
50554: ARRAY
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 7
50564: PUSH
50565: LD_INT 9
50567: PUSH
50568: LD_INT 10
50570: PUSH
50571: LD_INT 11
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: IN
50582: NOT
50583: OR
50584: IFFALSE 50590
// exit ;
50586: POP
50587: POP
50588: GO 50673
// end ;
50590: GO 50261
50592: POP
50593: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50594: LD_VAR 0 9
50598: PPUSH
50599: LD_VAR 0 3
50603: PPUSH
50604: LD_VAR 0 4
50608: PPUSH
50609: LD_INT 20
50611: PPUSH
50612: CALL 42625 0 4
50616: PUSH
50617: LD_INT 4
50619: ARRAY
50620: IFFALSE 50624
// exit ;
50622: GO 50673
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50624: LD_VAR 0 2
50628: PUSH
50629: LD_INT 29
50631: PUSH
50632: LD_INT 30
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: IN
50639: PUSH
50640: LD_VAR 0 3
50644: PPUSH
50645: LD_VAR 0 4
50649: PPUSH
50650: LD_VAR 0 9
50654: PPUSH
50655: CALL_OW 440
50659: NOT
50660: AND
50661: IFFALSE 50665
// exit ;
50663: GO 50673
// result := true ;
50665: LD_ADDR_VAR 0 6
50669: PUSH
50670: LD_INT 1
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 6
50677: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50678: LD_INT 0
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
// result = [ ] ;
50738: LD_ADDR_VAR 0 7
50742: PUSH
50743: EMPTY
50744: ST_TO_ADDR
// temp_list = [ ] ;
50745: LD_ADDR_VAR 0 9
50749: PUSH
50750: EMPTY
50751: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50752: LD_VAR 0 4
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 4
50771: PUSH
50772: LD_INT 5
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: IN
50783: NOT
50784: PUSH
50785: LD_VAR 0 1
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: IN
50800: PUSH
50801: LD_VAR 0 5
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: IN
50820: NOT
50821: AND
50822: OR
50823: IFFALSE 50827
// exit ;
50825: GO 69218
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50827: LD_VAR 0 1
50831: PUSH
50832: LD_INT 6
50834: PUSH
50835: LD_INT 7
50837: PUSH
50838: LD_INT 8
50840: PUSH
50841: LD_INT 13
50843: PUSH
50844: LD_INT 12
50846: PUSH
50847: LD_INT 15
50849: PUSH
50850: LD_INT 11
50852: PUSH
50853: LD_INT 14
50855: PUSH
50856: LD_INT 10
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: IN
50870: IFFALSE 50880
// btype = b_lab ;
50872: LD_ADDR_VAR 0 1
50876: PUSH
50877: LD_INT 6
50879: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50880: LD_VAR 0 6
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: IN
50899: NOT
50900: PUSH
50901: LD_VAR 0 1
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 6
50920: PUSH
50921: LD_INT 36
50923: PUSH
50924: LD_INT 4
50926: PUSH
50927: LD_INT 5
50929: PUSH
50930: LD_INT 31
50932: PUSH
50933: LD_INT 32
50935: PUSH
50936: LD_INT 33
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: IN
50952: NOT
50953: PUSH
50954: LD_VAR 0 6
50958: PUSH
50959: LD_INT 1
50961: EQUAL
50962: AND
50963: OR
50964: PUSH
50965: LD_VAR 0 1
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: IN
50980: NOT
50981: PUSH
50982: LD_VAR 0 6
50986: PUSH
50987: LD_INT 2
50989: EQUAL
50990: AND
50991: OR
50992: IFFALSE 51002
// mode = 0 ;
50994: LD_ADDR_VAR 0 6
50998: PUSH
50999: LD_INT 0
51001: ST_TO_ADDR
// case mode of 0 :
51002: LD_VAR 0 6
51006: PUSH
51007: LD_INT 0
51009: DOUBLE
51010: EQUAL
51011: IFTRUE 51015
51013: GO 62468
51015: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51016: LD_ADDR_VAR 0 11
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51209: LD_ADDR_VAR 0 12
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51405: LD_ADDR_VAR 0 13
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51604: LD_ADDR_VAR 0 14
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51800: LD_ADDR_VAR 0 15
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51993: LD_ADDR_VAR 0 16
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52186: LD_ADDR_VAR 0 17
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52416: LD_ADDR_VAR 0 18
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52646: LD_ADDR_VAR 0 19
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52876: LD_ADDR_VAR 0 20
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53106: LD_ADDR_VAR 0 21
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53336: LD_ADDR_VAR 0 22
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53566: LD_ADDR_VAR 0 23
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53846: LD_ADDR_VAR 0 24
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54122: LD_ADDR_VAR 0 25
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 3
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54396: LD_ADDR_VAR 0 26
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54672: LD_ADDR_VAR 0 27
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 3
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54952: LD_ADDR_VAR 0 28
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55234: LD_ADDR_VAR 0 29
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 3
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55513: LD_ADDR_VAR 0 30
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55791: LD_ADDR_VAR 0 31
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56069: LD_ADDR_VAR 0 32
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56347: LD_ADDR_VAR 0 33
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56626: LD_ADDR_VAR 0 34
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 3
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56906: LD_ADDR_VAR 0 35
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57018: LD_ADDR_VAR 0 36
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57130: LD_ADDR_VAR 0 37
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57242: LD_ADDR_VAR 0 38
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57354: LD_ADDR_VAR 0 39
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57466: LD_ADDR_VAR 0 40
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57578: LD_ADDR_VAR 0 41
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57928: LD_ADDR_VAR 0 42
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58278: LD_ADDR_VAR 0 43
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58626: LD_ADDR_VAR 0 44
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58976: LD_ADDR_VAR 0 45
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 3
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 3
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: NEG
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59326: LD_ADDR_VAR 0 46
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59674: LD_ADDR_VAR 0 47
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59825: LD_ADDR_VAR 0 48
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59972: LD_ADDR_VAR 0 49
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60116: LD_ADDR_VAR 0 50
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60260: LD_ADDR_VAR 0 51
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60407: LD_ADDR_VAR 0 52
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60558: LD_ADDR_VAR 0 53
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 2
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60788: LD_ADDR_VAR 0 54
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61018: LD_ADDR_VAR 0 55
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61248: LD_ADDR_VAR 0 56
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 2
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61478: LD_ADDR_VAR 0 57
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61708: LD_ADDR_VAR 0 58
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61938: LD_ADDR_VAR 0 59
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62026: LD_ADDR_VAR 0 60
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62114: LD_ADDR_VAR 0 61
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62202: LD_ADDR_VAR 0 62
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62290: LD_ADDR_VAR 0 63
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62378: LD_ADDR_VAR 0 64
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: ST_TO_ADDR
// end ; 1 :
62466: GO 68363
62468: LD_INT 1
62470: DOUBLE
62471: EQUAL
62472: IFTRUE 62476
62474: GO 65099
62476: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62477: LD_ADDR_VAR 0 11
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 3
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62521: LD_ADDR_VAR 0 12
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62562: LD_ADDR_VAR 0 13
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62602: LD_ADDR_VAR 0 14
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62643: LD_ADDR_VAR 0 15
62647: PUSH
62648: LD_INT 2
62650: NEG
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 3
62661: NEG
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62687: LD_ADDR_VAR 0 16
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62733: LD_ADDR_VAR 0 17
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 3
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 3
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62777: LD_ADDR_VAR 0 18
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62818: LD_ADDR_VAR 0 19
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 3
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62858: LD_ADDR_VAR 0 20
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62899: LD_ADDR_VAR 0 21
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 3
62917: NEG
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62943: LD_ADDR_VAR 0 22
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 3
62974: NEG
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62989: LD_ADDR_VAR 0 23
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 3
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 4
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63033: LD_ADDR_VAR 0 24
63037: PUSH
63038: LD_INT 3
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 3
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63074: LD_ADDR_VAR 0 25
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 4
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63114: LD_ADDR_VAR 0 26
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 4
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: LD_INT 3
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63155: LD_ADDR_VAR 0 27
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 4
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63199: LD_ADDR_VAR 0 28
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: LD_INT 3
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63245: LD_ADDR_VAR 0 29
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 3
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 3
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 4
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 4
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 3
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 5
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 5
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: LD_INT 4
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 6
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 6
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 5
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63400: LD_ADDR_VAR 0 30
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 4
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 5
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 6
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 6
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63543: LD_ADDR_VAR 0 31
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: LD_INT 2
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 4
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: LD_INT 4
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 5
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: LD_INT 5
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 4
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 6
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 6
63650: PUSH
63651: LD_INT 6
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: LD_INT 6
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63682: LD_ADDR_VAR 0 32
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 4
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 4
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: LD_INT 5
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 5
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 6
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 6
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: LD_INT 5
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63825: LD_ADDR_VAR 0 33
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 4
63877: NEG
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 4
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 5
63911: NEG
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 5
63922: NEG
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 5
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 6
63945: NEG
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 6
63956: NEG
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63980: LD_ADDR_VAR 0 34
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: LD_INT 3
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: LD_INT 4
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 4
64035: NEG
64036: PUSH
64037: LD_INT 3
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: NEG
64048: PUSH
64049: LD_INT 4
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 4
64059: NEG
64060: PUSH
64061: LD_INT 5
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 5
64071: NEG
64072: PUSH
64073: LD_INT 4
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 5
64083: NEG
64084: PUSH
64085: LD_INT 5
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 5
64095: NEG
64096: PUSH
64097: LD_INT 6
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 6
64107: NEG
64108: PUSH
64109: LD_INT 5
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 6
64119: NEG
64120: PUSH
64121: LD_INT 6
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64143: LD_ADDR_VAR 0 41
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64187: LD_ADDR_VAR 0 42
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64228: LD_ADDR_VAR 0 43
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: LD_INT 3
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64268: LD_ADDR_VAR 0 44
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64309: LD_ADDR_VAR 0 45
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 3
64338: NEG
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64353: LD_ADDR_VAR 0 46
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 3
64384: NEG
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64399: LD_ADDR_VAR 0 47
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64432: LD_ADDR_VAR 0 48
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64463: LD_ADDR_VAR 0 49
64467: PUSH
64468: LD_INT 3
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 3
64480: PUSH
64481: LD_INT 2
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64492: LD_ADDR_VAR 0 50
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: LD_INT 3
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64521: LD_ADDR_VAR 0 51
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64552: LD_ADDR_VAR 0 52
64556: PUSH
64557: LD_INT 3
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64585: LD_ADDR_VAR 0 53
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 3
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64629: LD_ADDR_VAR 0 54
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64670: LD_ADDR_VAR 0 55
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 3
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 2
64697: PUSH
64698: LD_INT 3
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64710: LD_ADDR_VAR 0 56
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: LD_INT 3
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 3
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 2
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: LIST
64750: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64751: LD_ADDR_VAR 0 57
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: LIST
64794: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64795: LD_ADDR_VAR 0 58
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 3
64826: NEG
64827: PUSH
64828: LD_INT 3
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64841: LD_ADDR_VAR 0 59
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64885: LD_ADDR_VAR 0 60
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64926: LD_ADDR_VAR 0 61
64930: PUSH
64931: LD_INT 2
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64966: LD_ADDR_VAR 0 62
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65007: LD_ADDR_VAR 0 63
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 2
65025: NEG
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 2
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: LIST
65050: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65051: LD_ADDR_VAR 0 64
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: LD_INT 2
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// end ; 2 :
65097: GO 68363
65099: LD_INT 2
65101: DOUBLE
65102: EQUAL
65103: IFTRUE 65107
65105: GO 68362
65107: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65108: LD_ADDR_VAR 0 29
65112: PUSH
65113: LD_INT 4
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 4
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 5
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 5
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 4
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 3
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 3
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 3
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 5
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 4
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 4
65238: PUSH
65239: LD_INT 4
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: LD_INT 4
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: PUSH
65259: LD_INT 3
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 4
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: LD_INT 4
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 4
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 4
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 5
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 4
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: LD_INT 5
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 3
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 3
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 4
65447: NEG
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 4
65458: NEG
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 4
65470: NEG
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 4
65493: NEG
65494: PUSH
65495: LD_INT 4
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: LD_INT 5
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: LD_INT 4
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 3
65529: NEG
65530: PUSH
65531: LD_INT 3
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 4
65541: NEG
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 5
65553: NEG
65554: PUSH
65555: LD_INT 4
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 5
65565: NEG
65566: PUSH
65567: LD_INT 5
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: LD_INT 5
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 5
65589: NEG
65590: PUSH
65591: LD_INT 3
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65646: LD_ADDR_VAR 0 30
65650: PUSH
65651: LD_INT 4
65653: PUSH
65654: LD_INT 4
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 4
65663: PUSH
65664: LD_INT 3
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 5
65673: PUSH
65674: LD_INT 4
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 5
65683: PUSH
65684: LD_INT 5
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: LD_INT 5
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 5
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 3
65733: PUSH
65734: LD_INT 5
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: LD_INT 4
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: LD_INT 4
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: LD_INT 2
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: LD_INT 4
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 4
65836: NEG
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 4
65847: NEG
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 4
65881: NEG
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 5
65892: NEG
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 5
65903: NEG
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 5
65915: NEG
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: NEG
65939: PUSH
65940: LD_INT 3
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 3
65950: NEG
65951: PUSH
65952: LD_INT 4
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: NEG
65963: PUSH
65964: LD_INT 3
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 4
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 4
66010: NEG
66011: PUSH
66012: LD_INT 4
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 4
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 4
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: LD_INT 4
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 5
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: LD_INT 4
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 3
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: LD_INT 4
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 5
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: LD_INT 3
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: LD_INT 5
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66193: LD_ADDR_VAR 0 31
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 4
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: LD_INT 4
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: LD_INT 5
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 5
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: LD_INT 4
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 3
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 5
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 2
66282: NEG
66283: PUSH
66284: LD_INT 3
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 3
66304: NEG
66305: PUSH
66306: LD_INT 1
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: NEG
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 4
66349: NEG
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 4
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 2
66384: NEG
66385: PUSH
66386: LD_INT 2
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 4
66395: NEG
66396: PUSH
66397: LD_INT 4
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: LD_INT 5
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: NEG
66420: PUSH
66421: LD_INT 4
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: LD_INT 3
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 4
66443: NEG
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 5
66455: NEG
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 5
66467: NEG
66468: PUSH
66469: LD_INT 5
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: LD_INT 5
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 5
66491: NEG
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: LD_INT 3
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: LD_INT 4
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: LD_INT 2
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: LD_INT 2
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 4
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 4
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 5
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 5
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 4
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: LD_INT 1
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 3
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 5
66688: PUSH
66689: LD_INT 2
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66743: LD_ADDR_VAR 0 32
66747: PUSH
66748: LD_INT 4
66750: NEG
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 4
66761: NEG
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 4
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 5
66806: NEG
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 5
66817: NEG
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: LD_INT 2
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: LD_INT 2
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 3
66852: NEG
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: LD_INT 4
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: LD_INT 3
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: LD_INT 2
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 4
66912: NEG
66913: PUSH
66914: LD_INT 3
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 4
66924: NEG
66925: PUSH
66926: LD_INT 4
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: NEG
66937: PUSH
66938: LD_INT 4
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 4
66948: NEG
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: LD_INT 4
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 5
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 4
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 3
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 3
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: LD_INT 4
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: LD_INT 5
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: LD_INT 3
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 5
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 4
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: LD_INT 2
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 4
67145: PUSH
67146: LD_INT 2
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: LD_INT 4
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 5
67175: PUSH
67176: LD_INT 4
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: LD_INT 5
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 4
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: LD_INT 4
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 5
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 3
67235: PUSH
67236: LD_INT 5
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67290: LD_ADDR_VAR 0 33
67294: PUSH
67295: LD_INT 4
67297: NEG
67298: PUSH
67299: LD_INT 4
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: LD_INT 5
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: LD_INT 4
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: LD_INT 3
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 4
67345: NEG
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 5
67357: NEG
67358: PUSH
67359: LD_INT 4
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 5
67369: NEG
67370: PUSH
67371: LD_INT 5
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 5
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 5
67393: NEG
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: LD_INT 3
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 4
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: NEG
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: NEG
67473: PUSH
67474: LD_INT 4
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: LD_INT 2
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: LD_INT 4
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 4
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 4
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 5
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 5
67538: PUSH
67539: LD_INT 1
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 4
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 3
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 5
67590: PUSH
67591: LD_INT 2
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: PUSH
67601: LD_INT 3
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: LD_INT 2
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 4
67620: PUSH
67621: LD_INT 3
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 4
67630: PUSH
67631: LD_INT 4
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 3
67640: PUSH
67641: LD_INT 4
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 2
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 4
67670: PUSH
67671: LD_INT 2
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: LD_INT 4
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: LD_INT 4
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 0
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: LD_INT 4
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: LD_INT 5
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 5
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: LD_INT 4
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: LD_INT 3
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: LD_INT 5
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 2
67772: NEG
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67828: LD_ADDR_VAR 0 34
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: LD_INT 4
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: LD_INT 5
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: LD_INT 4
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: PUSH
67869: LD_INT 3
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: LD_INT 3
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: LD_INT 4
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 5
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 2
67914: PUSH
67915: LD_INT 3
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 2
67925: NEG
67926: PUSH
67927: LD_INT 5
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 4
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: LD_INT 2
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: LD_INT 4
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 4
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 5
68050: PUSH
68051: LD_INT 4
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 5
68060: PUSH
68061: LD_INT 5
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 4
68070: PUSH
68071: LD_INT 5
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 5
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: LD_INT 3
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: LD_INT 2
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: LD_INT 4
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: LD_INT 3
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: PUSH
68193: LD_INT 4
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: NEG
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 4
68213: NEG
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: LD_INT 1
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 0
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 3
68247: NEG
68248: PUSH
68249: LD_INT 1
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 4
68258: NEG
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 5
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: LD_INT 2
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// end ; end ;
68360: GO 68363
68362: POP
// case btype of b_depot , b_warehouse :
68363: LD_VAR 0 1
68367: PUSH
68368: LD_INT 0
68370: DOUBLE
68371: EQUAL
68372: IFTRUE 68382
68374: LD_INT 1
68376: DOUBLE
68377: EQUAL
68378: IFTRUE 68382
68380: GO 68583
68382: POP
// case nation of nation_american :
68383: LD_VAR 0 5
68387: PUSH
68388: LD_INT 1
68390: DOUBLE
68391: EQUAL
68392: IFTRUE 68396
68394: GO 68452
68396: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68397: LD_ADDR_VAR 0 9
68401: PUSH
68402: LD_VAR 0 11
68406: PUSH
68407: LD_VAR 0 12
68411: PUSH
68412: LD_VAR 0 13
68416: PUSH
68417: LD_VAR 0 14
68421: PUSH
68422: LD_VAR 0 15
68426: PUSH
68427: LD_VAR 0 16
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: PUSH
68440: LD_VAR 0 4
68444: PUSH
68445: LD_INT 1
68447: PLUS
68448: ARRAY
68449: ST_TO_ADDR
68450: GO 68581
68452: LD_INT 2
68454: DOUBLE
68455: EQUAL
68456: IFTRUE 68460
68458: GO 68516
68460: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68461: LD_ADDR_VAR 0 9
68465: PUSH
68466: LD_VAR 0 17
68470: PUSH
68471: LD_VAR 0 18
68475: PUSH
68476: LD_VAR 0 19
68480: PUSH
68481: LD_VAR 0 20
68485: PUSH
68486: LD_VAR 0 21
68490: PUSH
68491: LD_VAR 0 22
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: PUSH
68504: LD_VAR 0 4
68508: PUSH
68509: LD_INT 1
68511: PLUS
68512: ARRAY
68513: ST_TO_ADDR
68514: GO 68581
68516: LD_INT 3
68518: DOUBLE
68519: EQUAL
68520: IFTRUE 68524
68522: GO 68580
68524: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68525: LD_ADDR_VAR 0 9
68529: PUSH
68530: LD_VAR 0 23
68534: PUSH
68535: LD_VAR 0 24
68539: PUSH
68540: LD_VAR 0 25
68544: PUSH
68545: LD_VAR 0 26
68549: PUSH
68550: LD_VAR 0 27
68554: PUSH
68555: LD_VAR 0 28
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: PUSH
68568: LD_VAR 0 4
68572: PUSH
68573: LD_INT 1
68575: PLUS
68576: ARRAY
68577: ST_TO_ADDR
68578: GO 68581
68580: POP
68581: GO 69136
68583: LD_INT 2
68585: DOUBLE
68586: EQUAL
68587: IFTRUE 68597
68589: LD_INT 3
68591: DOUBLE
68592: EQUAL
68593: IFTRUE 68597
68595: GO 68653
68597: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68598: LD_ADDR_VAR 0 9
68602: PUSH
68603: LD_VAR 0 29
68607: PUSH
68608: LD_VAR 0 30
68612: PUSH
68613: LD_VAR 0 31
68617: PUSH
68618: LD_VAR 0 32
68622: PUSH
68623: LD_VAR 0 33
68627: PUSH
68628: LD_VAR 0 34
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: PUSH
68641: LD_VAR 0 4
68645: PUSH
68646: LD_INT 1
68648: PLUS
68649: ARRAY
68650: ST_TO_ADDR
68651: GO 69136
68653: LD_INT 16
68655: DOUBLE
68656: EQUAL
68657: IFTRUE 68715
68659: LD_INT 17
68661: DOUBLE
68662: EQUAL
68663: IFTRUE 68715
68665: LD_INT 18
68667: DOUBLE
68668: EQUAL
68669: IFTRUE 68715
68671: LD_INT 19
68673: DOUBLE
68674: EQUAL
68675: IFTRUE 68715
68677: LD_INT 22
68679: DOUBLE
68680: EQUAL
68681: IFTRUE 68715
68683: LD_INT 20
68685: DOUBLE
68686: EQUAL
68687: IFTRUE 68715
68689: LD_INT 21
68691: DOUBLE
68692: EQUAL
68693: IFTRUE 68715
68695: LD_INT 23
68697: DOUBLE
68698: EQUAL
68699: IFTRUE 68715
68701: LD_INT 24
68703: DOUBLE
68704: EQUAL
68705: IFTRUE 68715
68707: LD_INT 25
68709: DOUBLE
68710: EQUAL
68711: IFTRUE 68715
68713: GO 68771
68715: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68716: LD_ADDR_VAR 0 9
68720: PUSH
68721: LD_VAR 0 35
68725: PUSH
68726: LD_VAR 0 36
68730: PUSH
68731: LD_VAR 0 37
68735: PUSH
68736: LD_VAR 0 38
68740: PUSH
68741: LD_VAR 0 39
68745: PUSH
68746: LD_VAR 0 40
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: PUSH
68759: LD_VAR 0 4
68763: PUSH
68764: LD_INT 1
68766: PLUS
68767: ARRAY
68768: ST_TO_ADDR
68769: GO 69136
68771: LD_INT 6
68773: DOUBLE
68774: EQUAL
68775: IFTRUE 68827
68777: LD_INT 7
68779: DOUBLE
68780: EQUAL
68781: IFTRUE 68827
68783: LD_INT 8
68785: DOUBLE
68786: EQUAL
68787: IFTRUE 68827
68789: LD_INT 13
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68827
68795: LD_INT 12
68797: DOUBLE
68798: EQUAL
68799: IFTRUE 68827
68801: LD_INT 15
68803: DOUBLE
68804: EQUAL
68805: IFTRUE 68827
68807: LD_INT 11
68809: DOUBLE
68810: EQUAL
68811: IFTRUE 68827
68813: LD_INT 14
68815: DOUBLE
68816: EQUAL
68817: IFTRUE 68827
68819: LD_INT 10
68821: DOUBLE
68822: EQUAL
68823: IFTRUE 68827
68825: GO 68883
68827: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68828: LD_ADDR_VAR 0 9
68832: PUSH
68833: LD_VAR 0 41
68837: PUSH
68838: LD_VAR 0 42
68842: PUSH
68843: LD_VAR 0 43
68847: PUSH
68848: LD_VAR 0 44
68852: PUSH
68853: LD_VAR 0 45
68857: PUSH
68858: LD_VAR 0 46
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: PUSH
68871: LD_VAR 0 4
68875: PUSH
68876: LD_INT 1
68878: PLUS
68879: ARRAY
68880: ST_TO_ADDR
68881: GO 69136
68883: LD_INT 36
68885: DOUBLE
68886: EQUAL
68887: IFTRUE 68891
68889: GO 68947
68891: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68892: LD_ADDR_VAR 0 9
68896: PUSH
68897: LD_VAR 0 47
68901: PUSH
68902: LD_VAR 0 48
68906: PUSH
68907: LD_VAR 0 49
68911: PUSH
68912: LD_VAR 0 50
68916: PUSH
68917: LD_VAR 0 51
68921: PUSH
68922: LD_VAR 0 52
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: PUSH
68935: LD_VAR 0 4
68939: PUSH
68940: LD_INT 1
68942: PLUS
68943: ARRAY
68944: ST_TO_ADDR
68945: GO 69136
68947: LD_INT 4
68949: DOUBLE
68950: EQUAL
68951: IFTRUE 68973
68953: LD_INT 5
68955: DOUBLE
68956: EQUAL
68957: IFTRUE 68973
68959: LD_INT 34
68961: DOUBLE
68962: EQUAL
68963: IFTRUE 68973
68965: LD_INT 37
68967: DOUBLE
68968: EQUAL
68969: IFTRUE 68973
68971: GO 69029
68973: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68974: LD_ADDR_VAR 0 9
68978: PUSH
68979: LD_VAR 0 53
68983: PUSH
68984: LD_VAR 0 54
68988: PUSH
68989: LD_VAR 0 55
68993: PUSH
68994: LD_VAR 0 56
68998: PUSH
68999: LD_VAR 0 57
69003: PUSH
69004: LD_VAR 0 58
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: PUSH
69017: LD_VAR 0 4
69021: PUSH
69022: LD_INT 1
69024: PLUS
69025: ARRAY
69026: ST_TO_ADDR
69027: GO 69136
69029: LD_INT 31
69031: DOUBLE
69032: EQUAL
69033: IFTRUE 69079
69035: LD_INT 32
69037: DOUBLE
69038: EQUAL
69039: IFTRUE 69079
69041: LD_INT 33
69043: DOUBLE
69044: EQUAL
69045: IFTRUE 69079
69047: LD_INT 27
69049: DOUBLE
69050: EQUAL
69051: IFTRUE 69079
69053: LD_INT 26
69055: DOUBLE
69056: EQUAL
69057: IFTRUE 69079
69059: LD_INT 28
69061: DOUBLE
69062: EQUAL
69063: IFTRUE 69079
69065: LD_INT 29
69067: DOUBLE
69068: EQUAL
69069: IFTRUE 69079
69071: LD_INT 30
69073: DOUBLE
69074: EQUAL
69075: IFTRUE 69079
69077: GO 69135
69079: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69080: LD_ADDR_VAR 0 9
69084: PUSH
69085: LD_VAR 0 59
69089: PUSH
69090: LD_VAR 0 60
69094: PUSH
69095: LD_VAR 0 61
69099: PUSH
69100: LD_VAR 0 62
69104: PUSH
69105: LD_VAR 0 63
69109: PUSH
69110: LD_VAR 0 64
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: PUSH
69123: LD_VAR 0 4
69127: PUSH
69128: LD_INT 1
69130: PLUS
69131: ARRAY
69132: ST_TO_ADDR
69133: GO 69136
69135: POP
// temp_list2 = [ ] ;
69136: LD_ADDR_VAR 0 10
69140: PUSH
69141: EMPTY
69142: ST_TO_ADDR
// for i in temp_list do
69143: LD_ADDR_VAR 0 8
69147: PUSH
69148: LD_VAR 0 9
69152: PUSH
69153: FOR_IN
69154: IFFALSE 69206
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69156: LD_ADDR_VAR 0 10
69160: PUSH
69161: LD_VAR 0 10
69165: PUSH
69166: LD_VAR 0 8
69170: PUSH
69171: LD_INT 1
69173: ARRAY
69174: PUSH
69175: LD_VAR 0 2
69179: PLUS
69180: PUSH
69181: LD_VAR 0 8
69185: PUSH
69186: LD_INT 2
69188: ARRAY
69189: PUSH
69190: LD_VAR 0 3
69194: PLUS
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: EMPTY
69201: LIST
69202: ADD
69203: ST_TO_ADDR
69204: GO 69153
69206: POP
69207: POP
// result = temp_list2 ;
69208: LD_ADDR_VAR 0 7
69212: PUSH
69213: LD_VAR 0 10
69217: ST_TO_ADDR
// end ;
69218: LD_VAR 0 7
69222: RET
// export function EnemyInRange ( unit , dist ) ; begin
69223: LD_INT 0
69225: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69226: LD_ADDR_VAR 0 3
69230: PUSH
69231: LD_VAR 0 1
69235: PPUSH
69236: CALL_OW 255
69240: PPUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: CALL_OW 250
69250: PPUSH
69251: LD_VAR 0 1
69255: PPUSH
69256: CALL_OW 251
69260: PPUSH
69261: LD_VAR 0 2
69265: PPUSH
69266: CALL 42625 0 4
69270: PUSH
69271: LD_INT 4
69273: ARRAY
69274: ST_TO_ADDR
// end ;
69275: LD_VAR 0 3
69279: RET
// export function PlayerSeeMe ( unit ) ; begin
69280: LD_INT 0
69282: PPUSH
// result := See ( your_side , unit ) ;
69283: LD_ADDR_VAR 0 2
69287: PUSH
69288: LD_OWVAR 2
69292: PPUSH
69293: LD_VAR 0 1
69297: PPUSH
69298: CALL_OW 292
69302: ST_TO_ADDR
// end ;
69303: LD_VAR 0 2
69307: RET
// export function ReverseDir ( unit ) ; begin
69308: LD_INT 0
69310: PPUSH
// if not unit then
69311: LD_VAR 0 1
69315: NOT
69316: IFFALSE 69320
// exit ;
69318: GO 69343
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69320: LD_ADDR_VAR 0 2
69324: PUSH
69325: LD_VAR 0 1
69329: PPUSH
69330: CALL_OW 254
69334: PUSH
69335: LD_INT 3
69337: PLUS
69338: PUSH
69339: LD_INT 6
69341: MOD
69342: ST_TO_ADDR
// end ;
69343: LD_VAR 0 2
69347: RET
// export function ReverseArray ( array ) ; var i ; begin
69348: LD_INT 0
69350: PPUSH
69351: PPUSH
// if not array then
69352: LD_VAR 0 1
69356: NOT
69357: IFFALSE 69361
// exit ;
69359: GO 69416
// result := [ ] ;
69361: LD_ADDR_VAR 0 2
69365: PUSH
69366: EMPTY
69367: ST_TO_ADDR
// for i := array downto 1 do
69368: LD_ADDR_VAR 0 3
69372: PUSH
69373: DOUBLE
69374: LD_VAR 0 1
69378: INC
69379: ST_TO_ADDR
69380: LD_INT 1
69382: PUSH
69383: FOR_DOWNTO
69384: IFFALSE 69414
// result := Join ( result , array [ i ] ) ;
69386: LD_ADDR_VAR 0 2
69390: PUSH
69391: LD_VAR 0 2
69395: PPUSH
69396: LD_VAR 0 1
69400: PUSH
69401: LD_VAR 0 3
69405: ARRAY
69406: PPUSH
69407: CALL 74059 0 2
69411: ST_TO_ADDR
69412: GO 69383
69414: POP
69415: POP
// end ;
69416: LD_VAR 0 2
69420: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69421: LD_INT 0
69423: PPUSH
69424: PPUSH
69425: PPUSH
69426: PPUSH
69427: PPUSH
69428: PPUSH
// if not unit or not hexes then
69429: LD_VAR 0 1
69433: NOT
69434: PUSH
69435: LD_VAR 0 2
69439: NOT
69440: OR
69441: IFFALSE 69445
// exit ;
69443: GO 69568
// dist := 9999 ;
69445: LD_ADDR_VAR 0 5
69449: PUSH
69450: LD_INT 9999
69452: ST_TO_ADDR
// for i = 1 to hexes do
69453: LD_ADDR_VAR 0 4
69457: PUSH
69458: DOUBLE
69459: LD_INT 1
69461: DEC
69462: ST_TO_ADDR
69463: LD_VAR 0 2
69467: PUSH
69468: FOR_TO
69469: IFFALSE 69556
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69471: LD_ADDR_VAR 0 6
69475: PUSH
69476: LD_VAR 0 1
69480: PPUSH
69481: LD_VAR 0 2
69485: PUSH
69486: LD_VAR 0 4
69490: ARRAY
69491: PUSH
69492: LD_INT 1
69494: ARRAY
69495: PPUSH
69496: LD_VAR 0 2
69500: PUSH
69501: LD_VAR 0 4
69505: ARRAY
69506: PUSH
69507: LD_INT 2
69509: ARRAY
69510: PPUSH
69511: CALL_OW 297
69515: ST_TO_ADDR
// if tdist < dist then
69516: LD_VAR 0 6
69520: PUSH
69521: LD_VAR 0 5
69525: LESS
69526: IFFALSE 69554
// begin hex := hexes [ i ] ;
69528: LD_ADDR_VAR 0 8
69532: PUSH
69533: LD_VAR 0 2
69537: PUSH
69538: LD_VAR 0 4
69542: ARRAY
69543: ST_TO_ADDR
// dist := tdist ;
69544: LD_ADDR_VAR 0 5
69548: PUSH
69549: LD_VAR 0 6
69553: ST_TO_ADDR
// end ; end ;
69554: GO 69468
69556: POP
69557: POP
// result := hex ;
69558: LD_ADDR_VAR 0 3
69562: PUSH
69563: LD_VAR 0 8
69567: ST_TO_ADDR
// end ;
69568: LD_VAR 0 3
69572: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69573: LD_INT 0
69575: PPUSH
69576: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69577: LD_VAR 0 1
69581: NOT
69582: PUSH
69583: LD_VAR 0 1
69587: PUSH
69588: LD_INT 21
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 23
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PPUSH
69612: CALL_OW 69
69616: IN
69617: NOT
69618: OR
69619: IFFALSE 69623
// exit ;
69621: GO 69670
// for i = 1 to 3 do
69623: LD_ADDR_VAR 0 3
69627: PUSH
69628: DOUBLE
69629: LD_INT 1
69631: DEC
69632: ST_TO_ADDR
69633: LD_INT 3
69635: PUSH
69636: FOR_TO
69637: IFFALSE 69668
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69639: LD_VAR 0 1
69643: PPUSH
69644: CALL_OW 250
69648: PPUSH
69649: LD_VAR 0 1
69653: PPUSH
69654: CALL_OW 251
69658: PPUSH
69659: LD_INT 1
69661: PPUSH
69662: CALL_OW 453
69666: GO 69636
69668: POP
69669: POP
// end ;
69670: LD_VAR 0 2
69674: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69675: LD_INT 0
69677: PPUSH
69678: PPUSH
69679: PPUSH
69680: PPUSH
69681: PPUSH
69682: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69683: LD_VAR 0 1
69687: NOT
69688: PUSH
69689: LD_VAR 0 2
69693: NOT
69694: OR
69695: PUSH
69696: LD_VAR 0 1
69700: PPUSH
69701: CALL_OW 314
69705: OR
69706: IFFALSE 69710
// exit ;
69708: GO 70177
// if GetLives ( i ) < 250 then
69710: LD_VAR 0 4
69714: PPUSH
69715: CALL_OW 256
69719: PUSH
69720: LD_INT 250
69722: LESS
69723: IFFALSE 69736
// begin ComAutodestruct ( i ) ;
69725: LD_VAR 0 4
69729: PPUSH
69730: CALL 69573 0 1
// exit ;
69734: GO 70177
// end ; x := GetX ( enemy_unit ) ;
69736: LD_ADDR_VAR 0 7
69740: PUSH
69741: LD_VAR 0 2
69745: PPUSH
69746: CALL_OW 250
69750: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69751: LD_ADDR_VAR 0 8
69755: PUSH
69756: LD_VAR 0 2
69760: PPUSH
69761: CALL_OW 251
69765: ST_TO_ADDR
// if not x or not y then
69766: LD_VAR 0 7
69770: NOT
69771: PUSH
69772: LD_VAR 0 8
69776: NOT
69777: OR
69778: IFFALSE 69782
// exit ;
69780: GO 70177
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69782: LD_ADDR_VAR 0 6
69786: PUSH
69787: LD_VAR 0 7
69791: PPUSH
69792: LD_INT 0
69794: PPUSH
69795: LD_INT 4
69797: PPUSH
69798: CALL_OW 272
69802: PUSH
69803: LD_VAR 0 8
69807: PPUSH
69808: LD_INT 0
69810: PPUSH
69811: LD_INT 4
69813: PPUSH
69814: CALL_OW 273
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_VAR 0 7
69827: PPUSH
69828: LD_INT 1
69830: PPUSH
69831: LD_INT 4
69833: PPUSH
69834: CALL_OW 272
69838: PUSH
69839: LD_VAR 0 8
69843: PPUSH
69844: LD_INT 1
69846: PPUSH
69847: LD_INT 4
69849: PPUSH
69850: CALL_OW 273
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_VAR 0 7
69863: PPUSH
69864: LD_INT 2
69866: PPUSH
69867: LD_INT 4
69869: PPUSH
69870: CALL_OW 272
69874: PUSH
69875: LD_VAR 0 8
69879: PPUSH
69880: LD_INT 2
69882: PPUSH
69883: LD_INT 4
69885: PPUSH
69886: CALL_OW 273
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_VAR 0 7
69899: PPUSH
69900: LD_INT 3
69902: PPUSH
69903: LD_INT 4
69905: PPUSH
69906: CALL_OW 272
69910: PUSH
69911: LD_VAR 0 8
69915: PPUSH
69916: LD_INT 3
69918: PPUSH
69919: LD_INT 4
69921: PPUSH
69922: CALL_OW 273
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_VAR 0 7
69935: PPUSH
69936: LD_INT 4
69938: PPUSH
69939: LD_INT 4
69941: PPUSH
69942: CALL_OW 272
69946: PUSH
69947: LD_VAR 0 8
69951: PPUSH
69952: LD_INT 4
69954: PPUSH
69955: LD_INT 4
69957: PPUSH
69958: CALL_OW 273
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_VAR 0 7
69971: PPUSH
69972: LD_INT 5
69974: PPUSH
69975: LD_INT 4
69977: PPUSH
69978: CALL_OW 272
69982: PUSH
69983: LD_VAR 0 8
69987: PPUSH
69988: LD_INT 5
69990: PPUSH
69991: LD_INT 4
69993: PPUSH
69994: CALL_OW 273
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: ST_TO_ADDR
// for i = tmp downto 1 do
70011: LD_ADDR_VAR 0 4
70015: PUSH
70016: DOUBLE
70017: LD_VAR 0 6
70021: INC
70022: ST_TO_ADDR
70023: LD_INT 1
70025: PUSH
70026: FOR_DOWNTO
70027: IFFALSE 70128
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70029: LD_VAR 0 6
70033: PUSH
70034: LD_VAR 0 4
70038: ARRAY
70039: PUSH
70040: LD_INT 1
70042: ARRAY
70043: PPUSH
70044: LD_VAR 0 6
70048: PUSH
70049: LD_VAR 0 4
70053: ARRAY
70054: PUSH
70055: LD_INT 2
70057: ARRAY
70058: PPUSH
70059: CALL_OW 488
70063: NOT
70064: PUSH
70065: LD_VAR 0 6
70069: PUSH
70070: LD_VAR 0 4
70074: ARRAY
70075: PUSH
70076: LD_INT 1
70078: ARRAY
70079: PPUSH
70080: LD_VAR 0 6
70084: PUSH
70085: LD_VAR 0 4
70089: ARRAY
70090: PUSH
70091: LD_INT 2
70093: ARRAY
70094: PPUSH
70095: CALL_OW 428
70099: PUSH
70100: LD_INT 0
70102: NONEQUAL
70103: OR
70104: IFFALSE 70126
// tmp := Delete ( tmp , i ) ;
70106: LD_ADDR_VAR 0 6
70110: PUSH
70111: LD_VAR 0 6
70115: PPUSH
70116: LD_VAR 0 4
70120: PPUSH
70121: CALL_OW 3
70125: ST_TO_ADDR
70126: GO 70026
70128: POP
70129: POP
// j := GetClosestHex ( unit , tmp ) ;
70130: LD_ADDR_VAR 0 5
70134: PUSH
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_VAR 0 6
70144: PPUSH
70145: CALL 69421 0 2
70149: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70150: LD_VAR 0 1
70154: PPUSH
70155: LD_VAR 0 5
70159: PUSH
70160: LD_INT 1
70162: ARRAY
70163: PPUSH
70164: LD_VAR 0 5
70168: PUSH
70169: LD_INT 2
70171: ARRAY
70172: PPUSH
70173: CALL_OW 111
// end ;
70177: LD_VAR 0 3
70181: RET
// export function PrepareApemanSoldier ( ) ; begin
70182: LD_INT 0
70184: PPUSH
// uc_nation := 0 ;
70185: LD_ADDR_OWVAR 21
70189: PUSH
70190: LD_INT 0
70192: ST_TO_ADDR
// hc_sex := sex_male ;
70193: LD_ADDR_OWVAR 27
70197: PUSH
70198: LD_INT 1
70200: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70201: LD_ADDR_OWVAR 28
70205: PUSH
70206: LD_INT 15
70208: ST_TO_ADDR
// hc_gallery :=  ;
70209: LD_ADDR_OWVAR 33
70213: PUSH
70214: LD_STRING 
70216: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70217: LD_ADDR_OWVAR 31
70221: PUSH
70222: LD_INT 0
70224: PPUSH
70225: LD_INT 3
70227: PPUSH
70228: CALL_OW 12
70232: PUSH
70233: LD_INT 0
70235: PPUSH
70236: LD_INT 3
70238: PPUSH
70239: CALL_OW 12
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: LD_INT 0
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: ST_TO_ADDR
// end ;
70256: LD_VAR 0 1
70260: RET
// export function PrepareApemanEngineer ( ) ; begin
70261: LD_INT 0
70263: PPUSH
// uc_nation := 0 ;
70264: LD_ADDR_OWVAR 21
70268: PUSH
70269: LD_INT 0
70271: ST_TO_ADDR
// hc_sex := sex_male ;
70272: LD_ADDR_OWVAR 27
70276: PUSH
70277: LD_INT 1
70279: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70280: LD_ADDR_OWVAR 28
70284: PUSH
70285: LD_INT 16
70287: ST_TO_ADDR
// hc_gallery :=  ;
70288: LD_ADDR_OWVAR 33
70292: PUSH
70293: LD_STRING 
70295: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70296: LD_ADDR_OWVAR 31
70300: PUSH
70301: LD_INT 0
70303: PPUSH
70304: LD_INT 3
70306: PPUSH
70307: CALL_OW 12
70311: PUSH
70312: LD_INT 0
70314: PPUSH
70315: LD_INT 3
70317: PPUSH
70318: CALL_OW 12
70322: PUSH
70323: LD_INT 0
70325: PUSH
70326: LD_INT 0
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: ST_TO_ADDR
// end ;
70335: LD_VAR 0 1
70339: RET
// export function PrepareApeman ( agressivity ) ; begin
70340: LD_INT 0
70342: PPUSH
// uc_side := 0 ;
70343: LD_ADDR_OWVAR 20
70347: PUSH
70348: LD_INT 0
70350: ST_TO_ADDR
// uc_nation := 0 ;
70351: LD_ADDR_OWVAR 21
70355: PUSH
70356: LD_INT 0
70358: ST_TO_ADDR
// hc_sex := sex_male ;
70359: LD_ADDR_OWVAR 27
70363: PUSH
70364: LD_INT 1
70366: ST_TO_ADDR
// hc_class := class_apeman ;
70367: LD_ADDR_OWVAR 28
70371: PUSH
70372: LD_INT 12
70374: ST_TO_ADDR
// hc_gallery :=  ;
70375: LD_ADDR_OWVAR 33
70379: PUSH
70380: LD_STRING 
70382: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70383: LD_ADDR_OWVAR 35
70387: PUSH
70388: LD_VAR 0 1
70392: NEG
70393: PPUSH
70394: LD_VAR 0 1
70398: PPUSH
70399: CALL_OW 12
70403: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70404: LD_ADDR_OWVAR 31
70408: PUSH
70409: LD_INT 0
70411: PPUSH
70412: LD_INT 3
70414: PPUSH
70415: CALL_OW 12
70419: PUSH
70420: LD_INT 0
70422: PPUSH
70423: LD_INT 3
70425: PPUSH
70426: CALL_OW 12
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: ST_TO_ADDR
// end ;
70443: LD_VAR 0 2
70447: RET
// export function PrepareTiger ( agressivity ) ; begin
70448: LD_INT 0
70450: PPUSH
// uc_side := 0 ;
70451: LD_ADDR_OWVAR 20
70455: PUSH
70456: LD_INT 0
70458: ST_TO_ADDR
// uc_nation := 0 ;
70459: LD_ADDR_OWVAR 21
70463: PUSH
70464: LD_INT 0
70466: ST_TO_ADDR
// hc_class := class_tiger ;
70467: LD_ADDR_OWVAR 28
70471: PUSH
70472: LD_INT 14
70474: ST_TO_ADDR
// hc_gallery :=  ;
70475: LD_ADDR_OWVAR 33
70479: PUSH
70480: LD_STRING 
70482: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70483: LD_ADDR_OWVAR 35
70487: PUSH
70488: LD_VAR 0 1
70492: NEG
70493: PPUSH
70494: LD_VAR 0 1
70498: PPUSH
70499: CALL_OW 12
70503: ST_TO_ADDR
// end ;
70504: LD_VAR 0 2
70508: RET
// export function PrepareEnchidna ( ) ; begin
70509: LD_INT 0
70511: PPUSH
// uc_side := 0 ;
70512: LD_ADDR_OWVAR 20
70516: PUSH
70517: LD_INT 0
70519: ST_TO_ADDR
// uc_nation := 0 ;
70520: LD_ADDR_OWVAR 21
70524: PUSH
70525: LD_INT 0
70527: ST_TO_ADDR
// hc_class := class_baggie ;
70528: LD_ADDR_OWVAR 28
70532: PUSH
70533: LD_INT 13
70535: ST_TO_ADDR
// hc_gallery :=  ;
70536: LD_ADDR_OWVAR 33
70540: PUSH
70541: LD_STRING 
70543: ST_TO_ADDR
// end ;
70544: LD_VAR 0 1
70548: RET
// export function PrepareFrog ( ) ; begin
70549: LD_INT 0
70551: PPUSH
// uc_side := 0 ;
70552: LD_ADDR_OWVAR 20
70556: PUSH
70557: LD_INT 0
70559: ST_TO_ADDR
// uc_nation := 0 ;
70560: LD_ADDR_OWVAR 21
70564: PUSH
70565: LD_INT 0
70567: ST_TO_ADDR
// hc_class := class_frog ;
70568: LD_ADDR_OWVAR 28
70572: PUSH
70573: LD_INT 19
70575: ST_TO_ADDR
// hc_gallery :=  ;
70576: LD_ADDR_OWVAR 33
70580: PUSH
70581: LD_STRING 
70583: ST_TO_ADDR
// end ;
70584: LD_VAR 0 1
70588: RET
// export function PrepareFish ( ) ; begin
70589: LD_INT 0
70591: PPUSH
// uc_side := 0 ;
70592: LD_ADDR_OWVAR 20
70596: PUSH
70597: LD_INT 0
70599: ST_TO_ADDR
// uc_nation := 0 ;
70600: LD_ADDR_OWVAR 21
70604: PUSH
70605: LD_INT 0
70607: ST_TO_ADDR
// hc_class := class_fish ;
70608: LD_ADDR_OWVAR 28
70612: PUSH
70613: LD_INT 20
70615: ST_TO_ADDR
// hc_gallery :=  ;
70616: LD_ADDR_OWVAR 33
70620: PUSH
70621: LD_STRING 
70623: ST_TO_ADDR
// end ;
70624: LD_VAR 0 1
70628: RET
// export function PrepareBird ( ) ; begin
70629: LD_INT 0
70631: PPUSH
// uc_side := 0 ;
70632: LD_ADDR_OWVAR 20
70636: PUSH
70637: LD_INT 0
70639: ST_TO_ADDR
// uc_nation := 0 ;
70640: LD_ADDR_OWVAR 21
70644: PUSH
70645: LD_INT 0
70647: ST_TO_ADDR
// hc_class := class_phororhacos ;
70648: LD_ADDR_OWVAR 28
70652: PUSH
70653: LD_INT 18
70655: ST_TO_ADDR
// hc_gallery :=  ;
70656: LD_ADDR_OWVAR 33
70660: PUSH
70661: LD_STRING 
70663: ST_TO_ADDR
// end ;
70664: LD_VAR 0 1
70668: RET
// export function PrepareHorse ( ) ; begin
70669: LD_INT 0
70671: PPUSH
// uc_side := 0 ;
70672: LD_ADDR_OWVAR 20
70676: PUSH
70677: LD_INT 0
70679: ST_TO_ADDR
// uc_nation := 0 ;
70680: LD_ADDR_OWVAR 21
70684: PUSH
70685: LD_INT 0
70687: ST_TO_ADDR
// hc_class := class_horse ;
70688: LD_ADDR_OWVAR 28
70692: PUSH
70693: LD_INT 21
70695: ST_TO_ADDR
// hc_gallery :=  ;
70696: LD_ADDR_OWVAR 33
70700: PUSH
70701: LD_STRING 
70703: ST_TO_ADDR
// end ;
70704: LD_VAR 0 1
70708: RET
// export function PrepareMastodont ( ) ; begin
70709: LD_INT 0
70711: PPUSH
// uc_side := 0 ;
70712: LD_ADDR_OWVAR 20
70716: PUSH
70717: LD_INT 0
70719: ST_TO_ADDR
// uc_nation := 0 ;
70720: LD_ADDR_OWVAR 21
70724: PUSH
70725: LD_INT 0
70727: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70728: LD_ADDR_OWVAR 37
70732: PUSH
70733: LD_INT 31
70735: ST_TO_ADDR
// vc_control := control_rider ;
70736: LD_ADDR_OWVAR 38
70740: PUSH
70741: LD_INT 4
70743: ST_TO_ADDR
// end ;
70744: LD_VAR 0 1
70748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70749: LD_INT 0
70751: PPUSH
70752: PPUSH
70753: PPUSH
// uc_side = 0 ;
70754: LD_ADDR_OWVAR 20
70758: PUSH
70759: LD_INT 0
70761: ST_TO_ADDR
// uc_nation = 0 ;
70762: LD_ADDR_OWVAR 21
70766: PUSH
70767: LD_INT 0
70769: ST_TO_ADDR
// InitHc_All ( ) ;
70770: CALL_OW 584
// InitVc ;
70774: CALL_OW 20
// if mastodonts then
70778: LD_VAR 0 6
70782: IFFALSE 70849
// for i = 1 to mastodonts do
70784: LD_ADDR_VAR 0 11
70788: PUSH
70789: DOUBLE
70790: LD_INT 1
70792: DEC
70793: ST_TO_ADDR
70794: LD_VAR 0 6
70798: PUSH
70799: FOR_TO
70800: IFFALSE 70847
// begin vc_chassis := 31 ;
70802: LD_ADDR_OWVAR 37
70806: PUSH
70807: LD_INT 31
70809: ST_TO_ADDR
// vc_control := control_rider ;
70810: LD_ADDR_OWVAR 38
70814: PUSH
70815: LD_INT 4
70817: ST_TO_ADDR
// animal := CreateVehicle ;
70818: LD_ADDR_VAR 0 12
70822: PUSH
70823: CALL_OW 45
70827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70828: LD_VAR 0 12
70832: PPUSH
70833: LD_VAR 0 8
70837: PPUSH
70838: LD_INT 0
70840: PPUSH
70841: CALL 72977 0 3
// end ;
70845: GO 70799
70847: POP
70848: POP
// if horses then
70849: LD_VAR 0 5
70853: IFFALSE 70920
// for i = 1 to horses do
70855: LD_ADDR_VAR 0 11
70859: PUSH
70860: DOUBLE
70861: LD_INT 1
70863: DEC
70864: ST_TO_ADDR
70865: LD_VAR 0 5
70869: PUSH
70870: FOR_TO
70871: IFFALSE 70918
// begin hc_class := 21 ;
70873: LD_ADDR_OWVAR 28
70877: PUSH
70878: LD_INT 21
70880: ST_TO_ADDR
// hc_gallery :=  ;
70881: LD_ADDR_OWVAR 33
70885: PUSH
70886: LD_STRING 
70888: ST_TO_ADDR
// animal := CreateHuman ;
70889: LD_ADDR_VAR 0 12
70893: PUSH
70894: CALL_OW 44
70898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70899: LD_VAR 0 12
70903: PPUSH
70904: LD_VAR 0 8
70908: PPUSH
70909: LD_INT 0
70911: PPUSH
70912: CALL 72977 0 3
// end ;
70916: GO 70870
70918: POP
70919: POP
// if birds then
70920: LD_VAR 0 1
70924: IFFALSE 70991
// for i = 1 to birds do
70926: LD_ADDR_VAR 0 11
70930: PUSH
70931: DOUBLE
70932: LD_INT 1
70934: DEC
70935: ST_TO_ADDR
70936: LD_VAR 0 1
70940: PUSH
70941: FOR_TO
70942: IFFALSE 70989
// begin hc_class = 18 ;
70944: LD_ADDR_OWVAR 28
70948: PUSH
70949: LD_INT 18
70951: ST_TO_ADDR
// hc_gallery =  ;
70952: LD_ADDR_OWVAR 33
70956: PUSH
70957: LD_STRING 
70959: ST_TO_ADDR
// animal := CreateHuman ;
70960: LD_ADDR_VAR 0 12
70964: PUSH
70965: CALL_OW 44
70969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70970: LD_VAR 0 12
70974: PPUSH
70975: LD_VAR 0 8
70979: PPUSH
70980: LD_INT 0
70982: PPUSH
70983: CALL 72977 0 3
// end ;
70987: GO 70941
70989: POP
70990: POP
// if tigers then
70991: LD_VAR 0 2
70995: IFFALSE 71079
// for i = 1 to tigers do
70997: LD_ADDR_VAR 0 11
71001: PUSH
71002: DOUBLE
71003: LD_INT 1
71005: DEC
71006: ST_TO_ADDR
71007: LD_VAR 0 2
71011: PUSH
71012: FOR_TO
71013: IFFALSE 71077
// begin hc_class = class_tiger ;
71015: LD_ADDR_OWVAR 28
71019: PUSH
71020: LD_INT 14
71022: ST_TO_ADDR
// hc_gallery =  ;
71023: LD_ADDR_OWVAR 33
71027: PUSH
71028: LD_STRING 
71030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71031: LD_ADDR_OWVAR 35
71035: PUSH
71036: LD_INT 7
71038: NEG
71039: PPUSH
71040: LD_INT 7
71042: PPUSH
71043: CALL_OW 12
71047: ST_TO_ADDR
// animal := CreateHuman ;
71048: LD_ADDR_VAR 0 12
71052: PUSH
71053: CALL_OW 44
71057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71058: LD_VAR 0 12
71062: PPUSH
71063: LD_VAR 0 8
71067: PPUSH
71068: LD_INT 0
71070: PPUSH
71071: CALL 72977 0 3
// end ;
71075: GO 71012
71077: POP
71078: POP
// if apemans then
71079: LD_VAR 0 3
71083: IFFALSE 71206
// for i = 1 to apemans do
71085: LD_ADDR_VAR 0 11
71089: PUSH
71090: DOUBLE
71091: LD_INT 1
71093: DEC
71094: ST_TO_ADDR
71095: LD_VAR 0 3
71099: PUSH
71100: FOR_TO
71101: IFFALSE 71204
// begin hc_class = class_apeman ;
71103: LD_ADDR_OWVAR 28
71107: PUSH
71108: LD_INT 12
71110: ST_TO_ADDR
// hc_gallery =  ;
71111: LD_ADDR_OWVAR 33
71115: PUSH
71116: LD_STRING 
71118: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71119: LD_ADDR_OWVAR 35
71123: PUSH
71124: LD_INT 2
71126: NEG
71127: PPUSH
71128: LD_INT 2
71130: PPUSH
71131: CALL_OW 12
71135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71136: LD_ADDR_OWVAR 31
71140: PUSH
71141: LD_INT 1
71143: PPUSH
71144: LD_INT 3
71146: PPUSH
71147: CALL_OW 12
71151: PUSH
71152: LD_INT 1
71154: PPUSH
71155: LD_INT 3
71157: PPUSH
71158: CALL_OW 12
71162: PUSH
71163: LD_INT 0
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: ST_TO_ADDR
// animal := CreateHuman ;
71175: LD_ADDR_VAR 0 12
71179: PUSH
71180: CALL_OW 44
71184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71185: LD_VAR 0 12
71189: PPUSH
71190: LD_VAR 0 8
71194: PPUSH
71195: LD_INT 0
71197: PPUSH
71198: CALL 72977 0 3
// end ;
71202: GO 71100
71204: POP
71205: POP
// if enchidnas then
71206: LD_VAR 0 4
71210: IFFALSE 71277
// for i = 1 to enchidnas do
71212: LD_ADDR_VAR 0 11
71216: PUSH
71217: DOUBLE
71218: LD_INT 1
71220: DEC
71221: ST_TO_ADDR
71222: LD_VAR 0 4
71226: PUSH
71227: FOR_TO
71228: IFFALSE 71275
// begin hc_class = 13 ;
71230: LD_ADDR_OWVAR 28
71234: PUSH
71235: LD_INT 13
71237: ST_TO_ADDR
// hc_gallery =  ;
71238: LD_ADDR_OWVAR 33
71242: PUSH
71243: LD_STRING 
71245: ST_TO_ADDR
// animal := CreateHuman ;
71246: LD_ADDR_VAR 0 12
71250: PUSH
71251: CALL_OW 44
71255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71256: LD_VAR 0 12
71260: PPUSH
71261: LD_VAR 0 8
71265: PPUSH
71266: LD_INT 0
71268: PPUSH
71269: CALL 72977 0 3
// end ;
71273: GO 71227
71275: POP
71276: POP
// if fishes then
71277: LD_VAR 0 7
71281: IFFALSE 71348
// for i = 1 to fishes do
71283: LD_ADDR_VAR 0 11
71287: PUSH
71288: DOUBLE
71289: LD_INT 1
71291: DEC
71292: ST_TO_ADDR
71293: LD_VAR 0 7
71297: PUSH
71298: FOR_TO
71299: IFFALSE 71346
// begin hc_class = 20 ;
71301: LD_ADDR_OWVAR 28
71305: PUSH
71306: LD_INT 20
71308: ST_TO_ADDR
// hc_gallery =  ;
71309: LD_ADDR_OWVAR 33
71313: PUSH
71314: LD_STRING 
71316: ST_TO_ADDR
// animal := CreateHuman ;
71317: LD_ADDR_VAR 0 12
71321: PUSH
71322: CALL_OW 44
71326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71327: LD_VAR 0 12
71331: PPUSH
71332: LD_VAR 0 9
71336: PPUSH
71337: LD_INT 0
71339: PPUSH
71340: CALL 72977 0 3
// end ;
71344: GO 71298
71346: POP
71347: POP
// end ;
71348: LD_VAR 0 10
71352: RET
// export function WantHeal ( sci , unit ) ; begin
71353: LD_INT 0
71355: PPUSH
// if GetTaskList ( sci ) > 0 then
71356: LD_VAR 0 1
71360: PPUSH
71361: CALL_OW 437
71365: PUSH
71366: LD_INT 0
71368: GREATER
71369: IFFALSE 71439
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71371: LD_VAR 0 1
71375: PPUSH
71376: CALL_OW 437
71380: PUSH
71381: LD_INT 1
71383: ARRAY
71384: PUSH
71385: LD_INT 1
71387: ARRAY
71388: PUSH
71389: LD_STRING l
71391: EQUAL
71392: PUSH
71393: LD_VAR 0 1
71397: PPUSH
71398: CALL_OW 437
71402: PUSH
71403: LD_INT 1
71405: ARRAY
71406: PUSH
71407: LD_INT 4
71409: ARRAY
71410: PUSH
71411: LD_VAR 0 2
71415: EQUAL
71416: AND
71417: IFFALSE 71429
// result := true else
71419: LD_ADDR_VAR 0 3
71423: PUSH
71424: LD_INT 1
71426: ST_TO_ADDR
71427: GO 71437
// result := false ;
71429: LD_ADDR_VAR 0 3
71433: PUSH
71434: LD_INT 0
71436: ST_TO_ADDR
// end else
71437: GO 71447
// result := false ;
71439: LD_ADDR_VAR 0 3
71443: PUSH
71444: LD_INT 0
71446: ST_TO_ADDR
// end ;
71447: LD_VAR 0 3
71451: RET
// export function HealTarget ( sci ) ; begin
71452: LD_INT 0
71454: PPUSH
// if not sci then
71455: LD_VAR 0 1
71459: NOT
71460: IFFALSE 71464
// exit ;
71462: GO 71529
// result := 0 ;
71464: LD_ADDR_VAR 0 2
71468: PUSH
71469: LD_INT 0
71471: ST_TO_ADDR
// if GetTaskList ( sci ) then
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 437
71481: IFFALSE 71529
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71483: LD_VAR 0 1
71487: PPUSH
71488: CALL_OW 437
71492: PUSH
71493: LD_INT 1
71495: ARRAY
71496: PUSH
71497: LD_INT 1
71499: ARRAY
71500: PUSH
71501: LD_STRING l
71503: EQUAL
71504: IFFALSE 71529
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71506: LD_ADDR_VAR 0 2
71510: PUSH
71511: LD_VAR 0 1
71515: PPUSH
71516: CALL_OW 437
71520: PUSH
71521: LD_INT 1
71523: ARRAY
71524: PUSH
71525: LD_INT 4
71527: ARRAY
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 2
71533: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
71538: PPUSH
71539: PPUSH
// if not base_units then
71540: LD_VAR 0 1
71544: NOT
71545: IFFALSE 71549
// exit ;
71547: GO 71636
// result := false ;
71549: LD_ADDR_VAR 0 2
71553: PUSH
71554: LD_INT 0
71556: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71557: LD_ADDR_VAR 0 5
71561: PUSH
71562: LD_VAR 0 1
71566: PPUSH
71567: LD_INT 21
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PPUSH
71577: CALL_OW 72
71581: ST_TO_ADDR
// if not tmp then
71582: LD_VAR 0 5
71586: NOT
71587: IFFALSE 71591
// exit ;
71589: GO 71636
// for i in tmp do
71591: LD_ADDR_VAR 0 3
71595: PUSH
71596: LD_VAR 0 5
71600: PUSH
71601: FOR_IN
71602: IFFALSE 71634
// begin result := EnemyInRange ( i , 22 ) ;
71604: LD_ADDR_VAR 0 2
71608: PUSH
71609: LD_VAR 0 3
71613: PPUSH
71614: LD_INT 22
71616: PPUSH
71617: CALL 69223 0 2
71621: ST_TO_ADDR
// if result then
71622: LD_VAR 0 2
71626: IFFALSE 71632
// exit ;
71628: POP
71629: POP
71630: GO 71636
// end ;
71632: GO 71601
71634: POP
71635: POP
// end ;
71636: LD_VAR 0 2
71640: RET
// export function FilterByTag ( units , tag ) ; begin
71641: LD_INT 0
71643: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: LD_INT 120
71656: PUSH
71657: LD_VAR 0 2
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PPUSH
71666: CALL_OW 72
71670: ST_TO_ADDR
// end ;
71671: LD_VAR 0 3
71675: RET
// export function IsDriver ( un ) ; begin
71676: LD_INT 0
71678: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71679: LD_ADDR_VAR 0 2
71683: PUSH
71684: LD_VAR 0 1
71688: PUSH
71689: LD_INT 55
71691: PUSH
71692: EMPTY
71693: LIST
71694: PPUSH
71695: CALL_OW 69
71699: IN
71700: ST_TO_ADDR
// end ;
71701: LD_VAR 0 2
71705: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71706: LD_INT 0
71708: PPUSH
71709: PPUSH
// list := [ ] ;
71710: LD_ADDR_VAR 0 5
71714: PUSH
71715: EMPTY
71716: ST_TO_ADDR
// case d of 0 :
71717: LD_VAR 0 3
71721: PUSH
71722: LD_INT 0
71724: DOUBLE
71725: EQUAL
71726: IFTRUE 71730
71728: GO 71863
71730: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71731: LD_ADDR_VAR 0 5
71735: PUSH
71736: LD_VAR 0 1
71740: PUSH
71741: LD_INT 4
71743: MINUS
71744: PUSH
71745: LD_VAR 0 2
71749: PUSH
71750: LD_INT 4
71752: MINUS
71753: PUSH
71754: LD_INT 2
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: LD_INT 3
71769: MINUS
71770: PUSH
71771: LD_VAR 0 2
71775: PUSH
71776: LD_INT 1
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: LIST
71783: PUSH
71784: LD_VAR 0 1
71788: PUSH
71789: LD_INT 4
71791: PLUS
71792: PUSH
71793: LD_VAR 0 2
71797: PUSH
71798: LD_INT 4
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: PUSH
71806: LD_VAR 0 1
71810: PUSH
71811: LD_INT 3
71813: PLUS
71814: PUSH
71815: LD_VAR 0 2
71819: PUSH
71820: LD_INT 3
71822: PLUS
71823: PUSH
71824: LD_INT 5
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: LIST
71831: PUSH
71832: LD_VAR 0 1
71836: PUSH
71837: LD_VAR 0 2
71841: PUSH
71842: LD_INT 4
71844: PLUS
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: ST_TO_ADDR
// end ; 1 :
71861: GO 72561
71863: LD_INT 1
71865: DOUBLE
71866: EQUAL
71867: IFTRUE 71871
71869: GO 72004
71871: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71872: LD_ADDR_VAR 0 5
71876: PUSH
71877: LD_VAR 0 1
71881: PUSH
71882: LD_VAR 0 2
71886: PUSH
71887: LD_INT 4
71889: MINUS
71890: PUSH
71891: LD_INT 3
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: LIST
71898: PUSH
71899: LD_VAR 0 1
71903: PUSH
71904: LD_INT 3
71906: MINUS
71907: PUSH
71908: LD_VAR 0 2
71912: PUSH
71913: LD_INT 3
71915: MINUS
71916: PUSH
71917: LD_INT 2
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: PUSH
71925: LD_VAR 0 1
71929: PUSH
71930: LD_INT 4
71932: MINUS
71933: PUSH
71934: LD_VAR 0 2
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: LIST
71946: PUSH
71947: LD_VAR 0 1
71951: PUSH
71952: LD_VAR 0 2
71956: PUSH
71957: LD_INT 3
71959: PLUS
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: LD_VAR 0 1
71973: PUSH
71974: LD_INT 4
71976: PLUS
71977: PUSH
71978: LD_VAR 0 2
71982: PUSH
71983: LD_INT 4
71985: PLUS
71986: PUSH
71987: LD_INT 5
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: ST_TO_ADDR
// end ; 2 :
72002: GO 72561
72004: LD_INT 2
72006: DOUBLE
72007: EQUAL
72008: IFTRUE 72012
72010: GO 72141
72012: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: LD_VAR 0 1
72022: PUSH
72023: LD_VAR 0 2
72027: PUSH
72028: LD_INT 3
72030: MINUS
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: LIST
72039: PUSH
72040: LD_VAR 0 1
72044: PUSH
72045: LD_INT 4
72047: PLUS
72048: PUSH
72049: LD_VAR 0 2
72053: PUSH
72054: LD_INT 4
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: LIST
72061: PUSH
72062: LD_VAR 0 1
72066: PUSH
72067: LD_VAR 0 2
72071: PUSH
72072: LD_INT 4
72074: PLUS
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: PUSH
72084: LD_VAR 0 1
72088: PUSH
72089: LD_INT 3
72091: MINUS
72092: PUSH
72093: LD_VAR 0 2
72097: PUSH
72098: LD_INT 1
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 4
72113: MINUS
72114: PUSH
72115: LD_VAR 0 2
72119: PUSH
72120: LD_INT 4
72122: MINUS
72123: PUSH
72124: LD_INT 2
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: LIST
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: ST_TO_ADDR
// end ; 3 :
72139: GO 72561
72141: LD_INT 3
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72149
72147: GO 72282
72149: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72150: LD_ADDR_VAR 0 5
72154: PUSH
72155: LD_VAR 0 1
72159: PUSH
72160: LD_INT 3
72162: PLUS
72163: PUSH
72164: LD_VAR 0 2
72168: PUSH
72169: LD_INT 4
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: LIST
72176: PUSH
72177: LD_VAR 0 1
72181: PUSH
72182: LD_INT 4
72184: PLUS
72185: PUSH
72186: LD_VAR 0 2
72190: PUSH
72191: LD_INT 4
72193: PLUS
72194: PUSH
72195: LD_INT 5
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: LIST
72202: PUSH
72203: LD_VAR 0 1
72207: PUSH
72208: LD_INT 4
72210: MINUS
72211: PUSH
72212: LD_VAR 0 2
72216: PUSH
72217: LD_INT 1
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: LIST
72224: PUSH
72225: LD_VAR 0 1
72229: PUSH
72230: LD_VAR 0 2
72234: PUSH
72235: LD_INT 4
72237: MINUS
72238: PUSH
72239: LD_INT 3
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: LIST
72246: PUSH
72247: LD_VAR 0 1
72251: PUSH
72252: LD_INT 3
72254: MINUS
72255: PUSH
72256: LD_VAR 0 2
72260: PUSH
72261: LD_INT 3
72263: MINUS
72264: PUSH
72265: LD_INT 2
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: LIST
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: ST_TO_ADDR
// end ; 4 :
72280: GO 72561
72282: LD_INT 4
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72290
72288: GO 72423
72290: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72291: LD_ADDR_VAR 0 5
72295: PUSH
72296: LD_VAR 0 1
72300: PUSH
72301: LD_VAR 0 2
72305: PUSH
72306: LD_INT 4
72308: PLUS
72309: PUSH
72310: LD_INT 0
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: LIST
72317: PUSH
72318: LD_VAR 0 1
72322: PUSH
72323: LD_INT 3
72325: PLUS
72326: PUSH
72327: LD_VAR 0 2
72331: PUSH
72332: LD_INT 3
72334: PLUS
72335: PUSH
72336: LD_INT 5
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: LIST
72343: PUSH
72344: LD_VAR 0 1
72348: PUSH
72349: LD_INT 4
72351: PLUS
72352: PUSH
72353: LD_VAR 0 2
72357: PUSH
72358: LD_INT 4
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: PUSH
72366: LD_VAR 0 1
72370: PUSH
72371: LD_VAR 0 2
72375: PUSH
72376: LD_INT 3
72378: MINUS
72379: PUSH
72380: LD_INT 3
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: LIST
72387: PUSH
72388: LD_VAR 0 1
72392: PUSH
72393: LD_INT 4
72395: MINUS
72396: PUSH
72397: LD_VAR 0 2
72401: PUSH
72402: LD_INT 4
72404: MINUS
72405: PUSH
72406: LD_INT 2
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: LIST
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: ST_TO_ADDR
// end ; 5 :
72421: GO 72561
72423: LD_INT 5
72425: DOUBLE
72426: EQUAL
72427: IFTRUE 72431
72429: GO 72560
72431: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72432: LD_ADDR_VAR 0 5
72436: PUSH
72437: LD_VAR 0 1
72441: PUSH
72442: LD_INT 4
72444: MINUS
72445: PUSH
72446: LD_VAR 0 2
72450: PUSH
72451: LD_INT 1
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: LIST
72458: PUSH
72459: LD_VAR 0 1
72463: PUSH
72464: LD_VAR 0 2
72468: PUSH
72469: LD_INT 4
72471: MINUS
72472: PUSH
72473: LD_INT 3
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: PUSH
72481: LD_VAR 0 1
72485: PUSH
72486: LD_INT 4
72488: PLUS
72489: PUSH
72490: LD_VAR 0 2
72494: PUSH
72495: LD_INT 4
72497: PLUS
72498: PUSH
72499: LD_INT 5
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: LIST
72506: PUSH
72507: LD_VAR 0 1
72511: PUSH
72512: LD_INT 3
72514: PLUS
72515: PUSH
72516: LD_VAR 0 2
72520: PUSH
72521: LD_INT 4
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: LIST
72528: PUSH
72529: LD_VAR 0 1
72533: PUSH
72534: LD_VAR 0 2
72538: PUSH
72539: LD_INT 3
72541: PLUS
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: ST_TO_ADDR
// end ; end ;
72558: GO 72561
72560: POP
// result := list ;
72561: LD_ADDR_VAR 0 4
72565: PUSH
72566: LD_VAR 0 5
72570: ST_TO_ADDR
// end ;
72571: LD_VAR 0 4
72575: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72576: LD_INT 0
72578: PPUSH
72579: PPUSH
72580: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72581: LD_VAR 0 1
72585: NOT
72586: PUSH
72587: LD_VAR 0 2
72591: PUSH
72592: LD_INT 1
72594: PUSH
72595: LD_INT 2
72597: PUSH
72598: LD_INT 3
72600: PUSH
72601: LD_INT 4
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: IN
72610: NOT
72611: OR
72612: IFFALSE 72616
// exit ;
72614: GO 72699
// tmp := [ ] ;
72616: LD_ADDR_VAR 0 5
72620: PUSH
72621: EMPTY
72622: ST_TO_ADDR
// for i in units do
72623: LD_ADDR_VAR 0 4
72627: PUSH
72628: LD_VAR 0 1
72632: PUSH
72633: FOR_IN
72634: IFFALSE 72668
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72636: LD_ADDR_VAR 0 5
72640: PUSH
72641: LD_VAR 0 5
72645: PPUSH
72646: LD_VAR 0 4
72650: PPUSH
72651: LD_VAR 0 2
72655: PPUSH
72656: CALL_OW 259
72660: PPUSH
72661: CALL 74059 0 2
72665: ST_TO_ADDR
72666: GO 72633
72668: POP
72669: POP
// if not tmp then
72670: LD_VAR 0 5
72674: NOT
72675: IFFALSE 72679
// exit ;
72677: GO 72699
// result := SortListByListDesc ( units , tmp ) ;
72679: LD_ADDR_VAR 0 3
72683: PUSH
72684: LD_VAR 0 1
72688: PPUSH
72689: LD_VAR 0 5
72693: PPUSH
72694: CALL_OW 77
72698: ST_TO_ADDR
// end ;
72699: LD_VAR 0 3
72703: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72704: LD_INT 0
72706: PPUSH
72707: PPUSH
72708: PPUSH
// result := false ;
72709: LD_ADDR_VAR 0 3
72713: PUSH
72714: LD_INT 0
72716: ST_TO_ADDR
// if not building then
72717: LD_VAR 0 2
72721: NOT
72722: IFFALSE 72726
// exit ;
72724: GO 72864
// x := GetX ( building ) ;
72726: LD_ADDR_VAR 0 4
72730: PUSH
72731: LD_VAR 0 2
72735: PPUSH
72736: CALL_OW 250
72740: ST_TO_ADDR
// y := GetY ( building ) ;
72741: LD_ADDR_VAR 0 5
72745: PUSH
72746: LD_VAR 0 2
72750: PPUSH
72751: CALL_OW 251
72755: ST_TO_ADDR
// if not x or not y then
72756: LD_VAR 0 4
72760: NOT
72761: PUSH
72762: LD_VAR 0 5
72766: NOT
72767: OR
72768: IFFALSE 72772
// exit ;
72770: GO 72864
// if GetTaskList ( unit ) then
72772: LD_VAR 0 1
72776: PPUSH
72777: CALL_OW 437
72781: IFFALSE 72864
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72783: LD_STRING e
72785: PUSH
72786: LD_VAR 0 1
72790: PPUSH
72791: CALL_OW 437
72795: PUSH
72796: LD_INT 1
72798: ARRAY
72799: PUSH
72800: LD_INT 1
72802: ARRAY
72803: EQUAL
72804: PUSH
72805: LD_VAR 0 4
72809: PUSH
72810: LD_VAR 0 1
72814: PPUSH
72815: CALL_OW 437
72819: PUSH
72820: LD_INT 1
72822: ARRAY
72823: PUSH
72824: LD_INT 2
72826: ARRAY
72827: EQUAL
72828: AND
72829: PUSH
72830: LD_VAR 0 5
72834: PUSH
72835: LD_VAR 0 1
72839: PPUSH
72840: CALL_OW 437
72844: PUSH
72845: LD_INT 1
72847: ARRAY
72848: PUSH
72849: LD_INT 3
72851: ARRAY
72852: EQUAL
72853: AND
72854: IFFALSE 72864
// result := true end ;
72856: LD_ADDR_VAR 0 3
72860: PUSH
72861: LD_INT 1
72863: ST_TO_ADDR
// end ;
72864: LD_VAR 0 3
72868: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72869: LD_INT 0
72871: PPUSH
// result := false ;
72872: LD_ADDR_VAR 0 4
72876: PUSH
72877: LD_INT 0
72879: ST_TO_ADDR
// if GetTaskList ( unit ) then
72880: LD_VAR 0 1
72884: PPUSH
72885: CALL_OW 437
72889: IFFALSE 72972
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72891: LD_STRING M
72893: PUSH
72894: LD_VAR 0 1
72898: PPUSH
72899: CALL_OW 437
72903: PUSH
72904: LD_INT 1
72906: ARRAY
72907: PUSH
72908: LD_INT 1
72910: ARRAY
72911: EQUAL
72912: PUSH
72913: LD_VAR 0 2
72917: PUSH
72918: LD_VAR 0 1
72922: PPUSH
72923: CALL_OW 437
72927: PUSH
72928: LD_INT 1
72930: ARRAY
72931: PUSH
72932: LD_INT 2
72934: ARRAY
72935: EQUAL
72936: AND
72937: PUSH
72938: LD_VAR 0 3
72942: PUSH
72943: LD_VAR 0 1
72947: PPUSH
72948: CALL_OW 437
72952: PUSH
72953: LD_INT 1
72955: ARRAY
72956: PUSH
72957: LD_INT 3
72959: ARRAY
72960: EQUAL
72961: AND
72962: IFFALSE 72972
// result := true ;
72964: LD_ADDR_VAR 0 4
72968: PUSH
72969: LD_INT 1
72971: ST_TO_ADDR
// end ; end ;
72972: LD_VAR 0 4
72976: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72977: LD_INT 0
72979: PPUSH
72980: PPUSH
72981: PPUSH
72982: PPUSH
// if not unit or not area then
72983: LD_VAR 0 1
72987: NOT
72988: PUSH
72989: LD_VAR 0 2
72993: NOT
72994: OR
72995: IFFALSE 72999
// exit ;
72997: GO 73162
// tmp := AreaToList ( area , i ) ;
72999: LD_ADDR_VAR 0 6
73003: PUSH
73004: LD_VAR 0 2
73008: PPUSH
73009: LD_VAR 0 5
73013: PPUSH
73014: CALL_OW 517
73018: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73019: LD_ADDR_VAR 0 5
73023: PUSH
73024: DOUBLE
73025: LD_INT 1
73027: DEC
73028: ST_TO_ADDR
73029: LD_VAR 0 6
73033: PUSH
73034: LD_INT 1
73036: ARRAY
73037: PUSH
73038: FOR_TO
73039: IFFALSE 73160
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73041: LD_ADDR_VAR 0 7
73045: PUSH
73046: LD_VAR 0 6
73050: PUSH
73051: LD_INT 1
73053: ARRAY
73054: PUSH
73055: LD_VAR 0 5
73059: ARRAY
73060: PUSH
73061: LD_VAR 0 6
73065: PUSH
73066: LD_INT 2
73068: ARRAY
73069: PUSH
73070: LD_VAR 0 5
73074: ARRAY
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
73080: LD_INT 92
73082: PUSH
73083: LD_VAR 0 7
73087: PUSH
73088: LD_INT 1
73090: ARRAY
73091: PUSH
73092: LD_VAR 0 7
73096: PUSH
73097: LD_INT 2
73099: ARRAY
73100: PUSH
73101: LD_INT 3
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: PPUSH
73110: CALL_OW 69
73114: PUSH
73115: LD_INT 0
73117: EQUAL
73118: IFFALSE 73158
// begin PlaceUnitArea ( unit , area , mode ) ;
73120: LD_VAR 0 1
73124: PPUSH
73125: LD_VAR 0 2
73129: PPUSH
73130: LD_VAR 0 3
73134: PPUSH
73135: CALL_OW 49
// result := IsPlaced ( unit ) ;
73139: LD_ADDR_VAR 0 4
73143: PUSH
73144: LD_VAR 0 1
73148: PPUSH
73149: CALL_OW 305
73153: ST_TO_ADDR
// exit ;
73154: POP
73155: POP
73156: GO 73162
// end ; end ;
73158: GO 73038
73160: POP
73161: POP
// end ;
73162: LD_VAR 0 4
73166: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73167: LD_INT 0
73169: PPUSH
73170: PPUSH
73171: PPUSH
// if not side or side > 8 then
73172: LD_VAR 0 1
73176: NOT
73177: PUSH
73178: LD_VAR 0 1
73182: PUSH
73183: LD_INT 8
73185: GREATER
73186: OR
73187: IFFALSE 73191
// exit ;
73189: GO 73378
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73191: LD_ADDR_VAR 0 4
73195: PUSH
73196: LD_INT 22
73198: PUSH
73199: LD_VAR 0 1
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 21
73210: PUSH
73211: LD_INT 3
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PPUSH
73222: CALL_OW 69
73226: ST_TO_ADDR
// if not tmp then
73227: LD_VAR 0 4
73231: NOT
73232: IFFALSE 73236
// exit ;
73234: GO 73378
// enable_addtolog := true ;
73236: LD_ADDR_OWVAR 81
73240: PUSH
73241: LD_INT 1
73243: ST_TO_ADDR
// AddToLog ( [ ) ;
73244: LD_STRING [
73246: PPUSH
73247: CALL_OW 561
// for i in tmp do
73251: LD_ADDR_VAR 0 3
73255: PUSH
73256: LD_VAR 0 4
73260: PUSH
73261: FOR_IN
73262: IFFALSE 73369
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73264: LD_STRING [
73266: PUSH
73267: LD_VAR 0 3
73271: PPUSH
73272: CALL_OW 266
73276: STR
73277: PUSH
73278: LD_STRING , 
73280: STR
73281: PUSH
73282: LD_VAR 0 3
73286: PPUSH
73287: CALL_OW 250
73291: STR
73292: PUSH
73293: LD_STRING , 
73295: STR
73296: PUSH
73297: LD_VAR 0 3
73301: PPUSH
73302: CALL_OW 251
73306: STR
73307: PUSH
73308: LD_STRING , 
73310: STR
73311: PUSH
73312: LD_VAR 0 3
73316: PPUSH
73317: CALL_OW 254
73321: STR
73322: PUSH
73323: LD_STRING , 
73325: STR
73326: PUSH
73327: LD_VAR 0 3
73331: PPUSH
73332: LD_INT 1
73334: PPUSH
73335: CALL_OW 268
73339: STR
73340: PUSH
73341: LD_STRING , 
73343: STR
73344: PUSH
73345: LD_VAR 0 3
73349: PPUSH
73350: LD_INT 2
73352: PPUSH
73353: CALL_OW 268
73357: STR
73358: PUSH
73359: LD_STRING ],
73361: STR
73362: PPUSH
73363: CALL_OW 561
// end ;
73367: GO 73261
73369: POP
73370: POP
// AddToLog ( ]; ) ;
73371: LD_STRING ];
73373: PPUSH
73374: CALL_OW 561
// end ;
73378: LD_VAR 0 2
73382: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73383: LD_INT 0
73385: PPUSH
73386: PPUSH
73387: PPUSH
73388: PPUSH
73389: PPUSH
// if not area or not rate or not max then
73390: LD_VAR 0 1
73394: NOT
73395: PUSH
73396: LD_VAR 0 2
73400: NOT
73401: OR
73402: PUSH
73403: LD_VAR 0 4
73407: NOT
73408: OR
73409: IFFALSE 73413
// exit ;
73411: GO 73602
// while 1 do
73413: LD_INT 1
73415: IFFALSE 73602
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73417: LD_ADDR_VAR 0 9
73421: PUSH
73422: LD_VAR 0 1
73426: PPUSH
73427: LD_INT 1
73429: PPUSH
73430: CALL_OW 287
73434: PUSH
73435: LD_INT 10
73437: MUL
73438: ST_TO_ADDR
// r := rate / 10 ;
73439: LD_ADDR_VAR 0 7
73443: PUSH
73444: LD_VAR 0 2
73448: PUSH
73449: LD_INT 10
73451: DIVREAL
73452: ST_TO_ADDR
// time := 1 1$00 ;
73453: LD_ADDR_VAR 0 8
73457: PUSH
73458: LD_INT 2100
73460: ST_TO_ADDR
// if amount < min then
73461: LD_VAR 0 9
73465: PUSH
73466: LD_VAR 0 3
73470: LESS
73471: IFFALSE 73489
// r := r * 2 else
73473: LD_ADDR_VAR 0 7
73477: PUSH
73478: LD_VAR 0 7
73482: PUSH
73483: LD_INT 2
73485: MUL
73486: ST_TO_ADDR
73487: GO 73515
// if amount > max then
73489: LD_VAR 0 9
73493: PUSH
73494: LD_VAR 0 4
73498: GREATER
73499: IFFALSE 73515
// r := r / 2 ;
73501: LD_ADDR_VAR 0 7
73505: PUSH
73506: LD_VAR 0 7
73510: PUSH
73511: LD_INT 2
73513: DIVREAL
73514: ST_TO_ADDR
// time := time / r ;
73515: LD_ADDR_VAR 0 8
73519: PUSH
73520: LD_VAR 0 8
73524: PUSH
73525: LD_VAR 0 7
73529: DIVREAL
73530: ST_TO_ADDR
// if time < 0 then
73531: LD_VAR 0 8
73535: PUSH
73536: LD_INT 0
73538: LESS
73539: IFFALSE 73556
// time := time * - 1 ;
73541: LD_ADDR_VAR 0 8
73545: PUSH
73546: LD_VAR 0 8
73550: PUSH
73551: LD_INT 1
73553: NEG
73554: MUL
73555: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73556: LD_VAR 0 8
73560: PUSH
73561: LD_INT 35
73563: PPUSH
73564: LD_INT 875
73566: PPUSH
73567: CALL_OW 12
73571: PLUS
73572: PPUSH
73573: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73577: LD_INT 1
73579: PPUSH
73580: LD_INT 5
73582: PPUSH
73583: CALL_OW 12
73587: PPUSH
73588: LD_VAR 0 1
73592: PPUSH
73593: LD_INT 1
73595: PPUSH
73596: CALL_OW 55
// end ;
73600: GO 73413
// end ;
73602: LD_VAR 0 5
73606: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73607: LD_INT 0
73609: PPUSH
73610: PPUSH
73611: PPUSH
73612: PPUSH
73613: PPUSH
73614: PPUSH
73615: PPUSH
73616: PPUSH
// if not turrets or not factories then
73617: LD_VAR 0 1
73621: NOT
73622: PUSH
73623: LD_VAR 0 2
73627: NOT
73628: OR
73629: IFFALSE 73633
// exit ;
73631: GO 73940
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73633: LD_ADDR_VAR 0 10
73637: PUSH
73638: LD_INT 5
73640: PUSH
73641: LD_INT 6
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 2
73650: PUSH
73651: LD_INT 4
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 3
73660: PUSH
73661: LD_INT 5
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 24
73675: PUSH
73676: LD_INT 25
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 23
73685: PUSH
73686: LD_INT 27
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 42
73699: PUSH
73700: LD_INT 43
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 44
73709: PUSH
73710: LD_INT 46
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 45
73719: PUSH
73720: LD_INT 47
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: LIST
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: LIST
73736: ST_TO_ADDR
// result := [ ] ;
73737: LD_ADDR_VAR 0 3
73741: PUSH
73742: EMPTY
73743: ST_TO_ADDR
// for i in turrets do
73744: LD_ADDR_VAR 0 4
73748: PUSH
73749: LD_VAR 0 1
73753: PUSH
73754: FOR_IN
73755: IFFALSE 73938
// begin nat := GetNation ( i ) ;
73757: LD_ADDR_VAR 0 7
73761: PUSH
73762: LD_VAR 0 4
73766: PPUSH
73767: CALL_OW 248
73771: ST_TO_ADDR
// weapon := 0 ;
73772: LD_ADDR_VAR 0 8
73776: PUSH
73777: LD_INT 0
73779: ST_TO_ADDR
// if not nat then
73780: LD_VAR 0 7
73784: NOT
73785: IFFALSE 73789
// continue ;
73787: GO 73754
// for j in list [ nat ] do
73789: LD_ADDR_VAR 0 5
73793: PUSH
73794: LD_VAR 0 10
73798: PUSH
73799: LD_VAR 0 7
73803: ARRAY
73804: PUSH
73805: FOR_IN
73806: IFFALSE 73847
// if GetBWeapon ( i ) = j [ 1 ] then
73808: LD_VAR 0 4
73812: PPUSH
73813: CALL_OW 269
73817: PUSH
73818: LD_VAR 0 5
73822: PUSH
73823: LD_INT 1
73825: ARRAY
73826: EQUAL
73827: IFFALSE 73845
// begin weapon := j [ 2 ] ;
73829: LD_ADDR_VAR 0 8
73833: PUSH
73834: LD_VAR 0 5
73838: PUSH
73839: LD_INT 2
73841: ARRAY
73842: ST_TO_ADDR
// break ;
73843: GO 73847
// end ;
73845: GO 73805
73847: POP
73848: POP
// if not weapon then
73849: LD_VAR 0 8
73853: NOT
73854: IFFALSE 73858
// continue ;
73856: GO 73754
// for k in factories do
73858: LD_ADDR_VAR 0 6
73862: PUSH
73863: LD_VAR 0 2
73867: PUSH
73868: FOR_IN
73869: IFFALSE 73934
// begin weapons := AvailableWeaponList ( k ) ;
73871: LD_ADDR_VAR 0 9
73875: PUSH
73876: LD_VAR 0 6
73880: PPUSH
73881: CALL_OW 478
73885: ST_TO_ADDR
// if not weapons then
73886: LD_VAR 0 9
73890: NOT
73891: IFFALSE 73895
// continue ;
73893: GO 73868
// if weapon in weapons then
73895: LD_VAR 0 8
73899: PUSH
73900: LD_VAR 0 9
73904: IN
73905: IFFALSE 73932
// begin result := [ i , weapon ] ;
73907: LD_ADDR_VAR 0 3
73911: PUSH
73912: LD_VAR 0 4
73916: PUSH
73917: LD_VAR 0 8
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: ST_TO_ADDR
// exit ;
73926: POP
73927: POP
73928: POP
73929: POP
73930: GO 73940
// end ; end ;
73932: GO 73868
73934: POP
73935: POP
// end ;
73936: GO 73754
73938: POP
73939: POP
// end ;
73940: LD_VAR 0 3
73944: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73945: LD_INT 0
73947: PPUSH
// if not side or side > 8 then
73948: LD_VAR 0 3
73952: NOT
73953: PUSH
73954: LD_VAR 0 3
73958: PUSH
73959: LD_INT 8
73961: GREATER
73962: OR
73963: IFFALSE 73967
// exit ;
73965: GO 74026
// if not range then
73967: LD_VAR 0 4
73971: NOT
73972: IFFALSE 73983
// range := - 12 ;
73974: LD_ADDR_VAR 0 4
73978: PUSH
73979: LD_INT 12
73981: NEG
73982: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73983: LD_VAR 0 1
73987: PPUSH
73988: LD_VAR 0 2
73992: PPUSH
73993: LD_VAR 0 3
73997: PPUSH
73998: LD_VAR 0 4
74002: PPUSH
74003: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74007: LD_VAR 0 1
74011: PPUSH
74012: LD_VAR 0 2
74016: PPUSH
74017: LD_VAR 0 3
74021: PPUSH
74022: CALL_OW 331
// end ;
74026: LD_VAR 0 5
74030: RET
// export function Video ( mode ) ; begin
74031: LD_INT 0
74033: PPUSH
// ingame_video = mode ;
74034: LD_ADDR_OWVAR 52
74038: PUSH
74039: LD_VAR 0 1
74043: ST_TO_ADDR
// interface_hidden = mode ;
74044: LD_ADDR_OWVAR 54
74048: PUSH
74049: LD_VAR 0 1
74053: ST_TO_ADDR
// end ;
74054: LD_VAR 0 2
74058: RET
// export function Join ( array , element ) ; begin
74059: LD_INT 0
74061: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74062: LD_ADDR_VAR 0 3
74066: PUSH
74067: LD_VAR 0 1
74071: PPUSH
74072: LD_VAR 0 1
74076: PUSH
74077: LD_INT 1
74079: PLUS
74080: PPUSH
74081: LD_VAR 0 2
74085: PPUSH
74086: CALL_OW 1
74090: ST_TO_ADDR
// end ;
74091: LD_VAR 0 3
74095: RET
// export function JoinUnion ( array , element ) ; begin
74096: LD_INT 0
74098: PPUSH
// result := array union element ;
74099: LD_ADDR_VAR 0 3
74103: PUSH
74104: LD_VAR 0 1
74108: PUSH
74109: LD_VAR 0 2
74113: UNION
74114: ST_TO_ADDR
// end ;
74115: LD_VAR 0 3
74119: RET
// export function GetBehemoths ( side ) ; begin
74120: LD_INT 0
74122: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74123: LD_ADDR_VAR 0 2
74127: PUSH
74128: LD_INT 22
74130: PUSH
74131: LD_VAR 0 1
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 31
74142: PUSH
74143: LD_INT 25
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: PPUSH
74154: CALL_OW 69
74158: ST_TO_ADDR
// end ;
74159: LD_VAR 0 2
74163: RET
// export function Shuffle ( array ) ; var i , index ; begin
74164: LD_INT 0
74166: PPUSH
74167: PPUSH
74168: PPUSH
// result := [ ] ;
74169: LD_ADDR_VAR 0 2
74173: PUSH
74174: EMPTY
74175: ST_TO_ADDR
// if not array then
74176: LD_VAR 0 1
74180: NOT
74181: IFFALSE 74185
// exit ;
74183: GO 74284
// Randomize ;
74185: CALL_OW 10
// for i = array downto 1 do
74189: LD_ADDR_VAR 0 3
74193: PUSH
74194: DOUBLE
74195: LD_VAR 0 1
74199: INC
74200: ST_TO_ADDR
74201: LD_INT 1
74203: PUSH
74204: FOR_DOWNTO
74205: IFFALSE 74282
// begin index := rand ( 1 , array ) ;
74207: LD_ADDR_VAR 0 4
74211: PUSH
74212: LD_INT 1
74214: PPUSH
74215: LD_VAR 0 1
74219: PPUSH
74220: CALL_OW 12
74224: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74225: LD_ADDR_VAR 0 2
74229: PUSH
74230: LD_VAR 0 2
74234: PPUSH
74235: LD_VAR 0 2
74239: PUSH
74240: LD_INT 1
74242: PLUS
74243: PPUSH
74244: LD_VAR 0 1
74248: PUSH
74249: LD_VAR 0 4
74253: ARRAY
74254: PPUSH
74255: CALL_OW 2
74259: ST_TO_ADDR
// array := Delete ( array , index ) ;
74260: LD_ADDR_VAR 0 1
74264: PUSH
74265: LD_VAR 0 1
74269: PPUSH
74270: LD_VAR 0 4
74274: PPUSH
74275: CALL_OW 3
74279: ST_TO_ADDR
// end ;
74280: GO 74204
74282: POP
74283: POP
// end ;
74284: LD_VAR 0 2
74288: RET
// export function GetBaseMaterials ( base ) ; begin
74289: LD_INT 0
74291: PPUSH
// result := [ 0 , 0 , 0 ] ;
74292: LD_ADDR_VAR 0 2
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: LD_INT 0
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: LIST
74310: ST_TO_ADDR
// if not base then
74311: LD_VAR 0 1
74315: NOT
74316: IFFALSE 74320
// exit ;
74318: GO 74369
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74320: LD_ADDR_VAR 0 2
74324: PUSH
74325: LD_VAR 0 1
74329: PPUSH
74330: LD_INT 1
74332: PPUSH
74333: CALL_OW 275
74337: PUSH
74338: LD_VAR 0 1
74342: PPUSH
74343: LD_INT 2
74345: PPUSH
74346: CALL_OW 275
74350: PUSH
74351: LD_VAR 0 1
74355: PPUSH
74356: LD_INT 3
74358: PPUSH
74359: CALL_OW 275
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: LIST
74368: ST_TO_ADDR
// end ;
74369: LD_VAR 0 2
74373: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74374: LD_INT 0
74376: PPUSH
74377: PPUSH
// result := array ;
74378: LD_ADDR_VAR 0 3
74382: PUSH
74383: LD_VAR 0 1
74387: ST_TO_ADDR
// if size >= result then
74388: LD_VAR 0 2
74392: PUSH
74393: LD_VAR 0 3
74397: GREATEREQUAL
74398: IFFALSE 74402
// exit ;
74400: GO 74452
// if size then
74402: LD_VAR 0 2
74406: IFFALSE 74452
// for i := array downto size do
74408: LD_ADDR_VAR 0 4
74412: PUSH
74413: DOUBLE
74414: LD_VAR 0 1
74418: INC
74419: ST_TO_ADDR
74420: LD_VAR 0 2
74424: PUSH
74425: FOR_DOWNTO
74426: IFFALSE 74450
// result := Delete ( result , result ) ;
74428: LD_ADDR_VAR 0 3
74432: PUSH
74433: LD_VAR 0 3
74437: PPUSH
74438: LD_VAR 0 3
74442: PPUSH
74443: CALL_OW 3
74447: ST_TO_ADDR
74448: GO 74425
74450: POP
74451: POP
// end ;
74452: LD_VAR 0 3
74456: RET
// export function ComExit ( unit ) ; var tmp ; begin
74457: LD_INT 0
74459: PPUSH
74460: PPUSH
// if not IsInUnit ( unit ) then
74461: LD_VAR 0 1
74465: PPUSH
74466: CALL_OW 310
74470: NOT
74471: IFFALSE 74475
// exit ;
74473: GO 74535
// tmp := IsInUnit ( unit ) ;
74475: LD_ADDR_VAR 0 3
74479: PUSH
74480: LD_VAR 0 1
74484: PPUSH
74485: CALL_OW 310
74489: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74490: LD_VAR 0 3
74494: PPUSH
74495: CALL_OW 247
74499: PUSH
74500: LD_INT 2
74502: EQUAL
74503: IFFALSE 74516
// ComExitVehicle ( unit ) else
74505: LD_VAR 0 1
74509: PPUSH
74510: CALL_OW 121
74514: GO 74525
// ComExitBuilding ( unit ) ;
74516: LD_VAR 0 1
74520: PPUSH
74521: CALL_OW 122
// result := tmp ;
74525: LD_ADDR_VAR 0 2
74529: PUSH
74530: LD_VAR 0 3
74534: ST_TO_ADDR
// end ;
74535: LD_VAR 0 2
74539: RET
// export function ComExitAll ( units ) ; var i ; begin
74540: LD_INT 0
74542: PPUSH
74543: PPUSH
// if not units then
74544: LD_VAR 0 1
74548: NOT
74549: IFFALSE 74553
// exit ;
74551: GO 74579
// for i in units do
74553: LD_ADDR_VAR 0 3
74557: PUSH
74558: LD_VAR 0 1
74562: PUSH
74563: FOR_IN
74564: IFFALSE 74577
// ComExit ( i ) ;
74566: LD_VAR 0 3
74570: PPUSH
74571: CALL 74457 0 1
74575: GO 74563
74577: POP
74578: POP
// end ;
74579: LD_VAR 0 2
74583: RET
// export function ResetHc ; begin
74584: LD_INT 0
74586: PPUSH
// InitHc ;
74587: CALL_OW 19
// hc_importance := 0 ;
74591: LD_ADDR_OWVAR 32
74595: PUSH
74596: LD_INT 0
74598: ST_TO_ADDR
// end ;
74599: LD_VAR 0 1
74603: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74604: LD_INT 0
74606: PPUSH
74607: PPUSH
74608: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74609: LD_ADDR_VAR 0 6
74613: PUSH
74614: LD_VAR 0 1
74618: PUSH
74619: LD_VAR 0 3
74623: PLUS
74624: PUSH
74625: LD_INT 2
74627: DIV
74628: ST_TO_ADDR
// if _x < 0 then
74629: LD_VAR 0 6
74633: PUSH
74634: LD_INT 0
74636: LESS
74637: IFFALSE 74654
// _x := _x * - 1 ;
74639: LD_ADDR_VAR 0 6
74643: PUSH
74644: LD_VAR 0 6
74648: PUSH
74649: LD_INT 1
74651: NEG
74652: MUL
74653: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74654: LD_ADDR_VAR 0 7
74658: PUSH
74659: LD_VAR 0 2
74663: PUSH
74664: LD_VAR 0 4
74668: PLUS
74669: PUSH
74670: LD_INT 2
74672: DIV
74673: ST_TO_ADDR
// if _y < 0 then
74674: LD_VAR 0 7
74678: PUSH
74679: LD_INT 0
74681: LESS
74682: IFFALSE 74699
// _y := _y * - 1 ;
74684: LD_ADDR_VAR 0 7
74688: PUSH
74689: LD_VAR 0 7
74693: PUSH
74694: LD_INT 1
74696: NEG
74697: MUL
74698: ST_TO_ADDR
// result := [ _x , _y ] ;
74699: LD_ADDR_VAR 0 5
74703: PUSH
74704: LD_VAR 0 6
74708: PUSH
74709: LD_VAR 0 7
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: ST_TO_ADDR
// end ;
74718: LD_VAR 0 5
74722: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74723: LD_INT 0
74725: PPUSH
74726: PPUSH
74727: PPUSH
74728: PPUSH
// task := GetTaskList ( unit ) ;
74729: LD_ADDR_VAR 0 7
74733: PUSH
74734: LD_VAR 0 1
74738: PPUSH
74739: CALL_OW 437
74743: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74744: LD_VAR 0 7
74748: NOT
74749: PUSH
74750: LD_VAR 0 1
74754: PPUSH
74755: LD_VAR 0 2
74759: PPUSH
74760: CALL_OW 308
74764: NOT
74765: AND
74766: IFFALSE 74770
// exit ;
74768: GO 74888
// if IsInArea ( unit , area ) then
74770: LD_VAR 0 1
74774: PPUSH
74775: LD_VAR 0 2
74779: PPUSH
74780: CALL_OW 308
74784: IFFALSE 74802
// begin ComMoveToArea ( unit , goAway ) ;
74786: LD_VAR 0 1
74790: PPUSH
74791: LD_VAR 0 3
74795: PPUSH
74796: CALL_OW 113
// exit ;
74800: GO 74888
// end ; if task [ 1 ] [ 1 ] <> M then
74802: LD_VAR 0 7
74806: PUSH
74807: LD_INT 1
74809: ARRAY
74810: PUSH
74811: LD_INT 1
74813: ARRAY
74814: PUSH
74815: LD_STRING M
74817: NONEQUAL
74818: IFFALSE 74822
// exit ;
74820: GO 74888
// x := task [ 1 ] [ 2 ] ;
74822: LD_ADDR_VAR 0 5
74826: PUSH
74827: LD_VAR 0 7
74831: PUSH
74832: LD_INT 1
74834: ARRAY
74835: PUSH
74836: LD_INT 2
74838: ARRAY
74839: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74840: LD_ADDR_VAR 0 6
74844: PUSH
74845: LD_VAR 0 7
74849: PUSH
74850: LD_INT 1
74852: ARRAY
74853: PUSH
74854: LD_INT 3
74856: ARRAY
74857: ST_TO_ADDR
// if InArea ( x , y , area ) then
74858: LD_VAR 0 5
74862: PPUSH
74863: LD_VAR 0 6
74867: PPUSH
74868: LD_VAR 0 2
74872: PPUSH
74873: CALL_OW 309
74877: IFFALSE 74888
// ComStop ( unit ) ;
74879: LD_VAR 0 1
74883: PPUSH
74884: CALL_OW 141
// end ;
74888: LD_VAR 0 4
74892: RET
// export function Abs ( value ) ; begin
74893: LD_INT 0
74895: PPUSH
// result := value ;
74896: LD_ADDR_VAR 0 2
74900: PUSH
74901: LD_VAR 0 1
74905: ST_TO_ADDR
// if value < 0 then
74906: LD_VAR 0 1
74910: PUSH
74911: LD_INT 0
74913: LESS
74914: IFFALSE 74931
// result := value * - 1 ;
74916: LD_ADDR_VAR 0 2
74920: PUSH
74921: LD_VAR 0 1
74925: PUSH
74926: LD_INT 1
74928: NEG
74929: MUL
74930: ST_TO_ADDR
// end ;
74931: LD_VAR 0 2
74935: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74936: LD_INT 0
74938: PPUSH
74939: PPUSH
74940: PPUSH
74941: PPUSH
74942: PPUSH
74943: PPUSH
74944: PPUSH
74945: PPUSH
// if not unit or not building then
74946: LD_VAR 0 1
74950: NOT
74951: PUSH
74952: LD_VAR 0 2
74956: NOT
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 75188
// x := GetX ( building ) ;
74962: LD_ADDR_VAR 0 4
74966: PUSH
74967: LD_VAR 0 2
74971: PPUSH
74972: CALL_OW 250
74976: ST_TO_ADDR
// y := GetY ( building ) ;
74977: LD_ADDR_VAR 0 6
74981: PUSH
74982: LD_VAR 0 2
74986: PPUSH
74987: CALL_OW 251
74991: ST_TO_ADDR
// d := GetDir ( building ) ;
74992: LD_ADDR_VAR 0 8
74996: PUSH
74997: LD_VAR 0 2
75001: PPUSH
75002: CALL_OW 254
75006: ST_TO_ADDR
// r := 4 ;
75007: LD_ADDR_VAR 0 9
75011: PUSH
75012: LD_INT 4
75014: ST_TO_ADDR
// for i := 1 to 5 do
75015: LD_ADDR_VAR 0 10
75019: PUSH
75020: DOUBLE
75021: LD_INT 1
75023: DEC
75024: ST_TO_ADDR
75025: LD_INT 5
75027: PUSH
75028: FOR_TO
75029: IFFALSE 75186
// begin _x := ShiftX ( x , d , r + i ) ;
75031: LD_ADDR_VAR 0 5
75035: PUSH
75036: LD_VAR 0 4
75040: PPUSH
75041: LD_VAR 0 8
75045: PPUSH
75046: LD_VAR 0 9
75050: PUSH
75051: LD_VAR 0 10
75055: PLUS
75056: PPUSH
75057: CALL_OW 272
75061: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75062: LD_ADDR_VAR 0 7
75066: PUSH
75067: LD_VAR 0 6
75071: PPUSH
75072: LD_VAR 0 8
75076: PPUSH
75077: LD_VAR 0 9
75081: PUSH
75082: LD_VAR 0 10
75086: PLUS
75087: PPUSH
75088: CALL_OW 273
75092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75093: LD_VAR 0 5
75097: PPUSH
75098: LD_VAR 0 7
75102: PPUSH
75103: CALL_OW 488
75107: PUSH
75108: LD_VAR 0 5
75112: PPUSH
75113: LD_VAR 0 7
75117: PPUSH
75118: CALL_OW 428
75122: PPUSH
75123: CALL_OW 247
75127: PUSH
75128: LD_INT 3
75130: PUSH
75131: LD_INT 2
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: IN
75138: NOT
75139: AND
75140: IFFALSE 75184
// begin ComMoveXY ( unit , _x , _y ) ;
75142: LD_VAR 0 1
75146: PPUSH
75147: LD_VAR 0 5
75151: PPUSH
75152: LD_VAR 0 7
75156: PPUSH
75157: CALL_OW 111
// result := [ _x , _y ] ;
75161: LD_ADDR_VAR 0 3
75165: PUSH
75166: LD_VAR 0 5
75170: PUSH
75171: LD_VAR 0 7
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: ST_TO_ADDR
// exit ;
75180: POP
75181: POP
75182: GO 75188
// end ; end ;
75184: GO 75028
75186: POP
75187: POP
// end ;
75188: LD_VAR 0 3
75192: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75193: LD_INT 0
75195: PPUSH
75196: PPUSH
75197: PPUSH
// result := 0 ;
75198: LD_ADDR_VAR 0 3
75202: PUSH
75203: LD_INT 0
75205: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75206: LD_VAR 0 1
75210: PUSH
75211: LD_INT 0
75213: LESS
75214: PUSH
75215: LD_VAR 0 1
75219: PUSH
75220: LD_INT 8
75222: GREATER
75223: OR
75224: PUSH
75225: LD_VAR 0 2
75229: PUSH
75230: LD_INT 0
75232: LESS
75233: OR
75234: PUSH
75235: LD_VAR 0 2
75239: PUSH
75240: LD_INT 8
75242: GREATER
75243: OR
75244: IFFALSE 75248
// exit ;
75246: GO 75323
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75248: LD_ADDR_VAR 0 4
75252: PUSH
75253: LD_INT 22
75255: PUSH
75256: LD_VAR 0 2
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PPUSH
75265: CALL_OW 69
75269: PUSH
75270: FOR_IN
75271: IFFALSE 75321
// begin un := UnitShoot ( i ) ;
75273: LD_ADDR_VAR 0 5
75277: PUSH
75278: LD_VAR 0 4
75282: PPUSH
75283: CALL_OW 504
75287: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75288: LD_VAR 0 5
75292: PPUSH
75293: CALL_OW 255
75297: PUSH
75298: LD_VAR 0 1
75302: EQUAL
75303: IFFALSE 75319
// begin result := un ;
75305: LD_ADDR_VAR 0 3
75309: PUSH
75310: LD_VAR 0 5
75314: ST_TO_ADDR
// exit ;
75315: POP
75316: POP
75317: GO 75323
// end ; end ;
75319: GO 75270
75321: POP
75322: POP
// end ;
75323: LD_VAR 0 3
75327: RET
// export function GetCargoBay ( units ) ; begin
75328: LD_INT 0
75330: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75331: LD_ADDR_VAR 0 2
75335: PUSH
75336: LD_VAR 0 1
75340: PPUSH
75341: LD_INT 2
75343: PUSH
75344: LD_INT 34
75346: PUSH
75347: LD_INT 12
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 34
75356: PUSH
75357: LD_INT 51
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 34
75366: PUSH
75367: LD_INT 32
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 34
75376: PUSH
75377: LD_INT 89
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: PPUSH
75391: CALL_OW 72
75395: ST_TO_ADDR
// end ;
75396: LD_VAR 0 2
75400: RET
// export function Negate ( value ) ; begin
75401: LD_INT 0
75403: PPUSH
// result := not value ;
75404: LD_ADDR_VAR 0 2
75408: PUSH
75409: LD_VAR 0 1
75413: NOT
75414: ST_TO_ADDR
// end ;
75415: LD_VAR 0 2
75419: RET
// export function Inc ( value ) ; begin
75420: LD_INT 0
75422: PPUSH
// result := value + 1 ;
75423: LD_ADDR_VAR 0 2
75427: PUSH
75428: LD_VAR 0 1
75432: PUSH
75433: LD_INT 1
75435: PLUS
75436: ST_TO_ADDR
// end ;
75437: LD_VAR 0 2
75441: RET
// export function Dec ( value ) ; begin
75442: LD_INT 0
75444: PPUSH
// result := value - 1 ;
75445: LD_ADDR_VAR 0 2
75449: PUSH
75450: LD_VAR 0 1
75454: PUSH
75455: LD_INT 1
75457: MINUS
75458: ST_TO_ADDR
// end ;
75459: LD_VAR 0 2
75463: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75464: LD_INT 0
75466: PPUSH
75467: PPUSH
75468: PPUSH
75469: PPUSH
75470: PPUSH
75471: PPUSH
75472: PPUSH
75473: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75474: LD_VAR 0 1
75478: PPUSH
75479: LD_VAR 0 2
75483: PPUSH
75484: CALL_OW 488
75488: NOT
75489: PUSH
75490: LD_VAR 0 3
75494: PPUSH
75495: LD_VAR 0 4
75499: PPUSH
75500: CALL_OW 488
75504: NOT
75505: OR
75506: IFFALSE 75519
// begin result := - 1 ;
75508: LD_ADDR_VAR 0 5
75512: PUSH
75513: LD_INT 1
75515: NEG
75516: ST_TO_ADDR
// exit ;
75517: GO 75754
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75519: LD_ADDR_VAR 0 12
75523: PUSH
75524: LD_VAR 0 1
75528: PPUSH
75529: LD_VAR 0 2
75533: PPUSH
75534: LD_VAR 0 3
75538: PPUSH
75539: LD_VAR 0 4
75543: PPUSH
75544: CALL 74604 0 4
75548: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75549: LD_ADDR_VAR 0 11
75553: PUSH
75554: LD_VAR 0 1
75558: PPUSH
75559: LD_VAR 0 2
75563: PPUSH
75564: LD_VAR 0 12
75568: PUSH
75569: LD_INT 1
75571: ARRAY
75572: PPUSH
75573: LD_VAR 0 12
75577: PUSH
75578: LD_INT 2
75580: ARRAY
75581: PPUSH
75582: CALL_OW 298
75586: ST_TO_ADDR
// distance := 9999 ;
75587: LD_ADDR_VAR 0 10
75591: PUSH
75592: LD_INT 9999
75594: ST_TO_ADDR
// for i := 0 to 5 do
75595: LD_ADDR_VAR 0 6
75599: PUSH
75600: DOUBLE
75601: LD_INT 0
75603: DEC
75604: ST_TO_ADDR
75605: LD_INT 5
75607: PUSH
75608: FOR_TO
75609: IFFALSE 75752
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75611: LD_ADDR_VAR 0 7
75615: PUSH
75616: LD_VAR 0 1
75620: PPUSH
75621: LD_VAR 0 6
75625: PPUSH
75626: LD_VAR 0 11
75630: PPUSH
75631: CALL_OW 272
75635: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75636: LD_ADDR_VAR 0 8
75640: PUSH
75641: LD_VAR 0 2
75645: PPUSH
75646: LD_VAR 0 6
75650: PPUSH
75651: LD_VAR 0 11
75655: PPUSH
75656: CALL_OW 273
75660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75661: LD_VAR 0 7
75665: PPUSH
75666: LD_VAR 0 8
75670: PPUSH
75671: CALL_OW 488
75675: NOT
75676: IFFALSE 75680
// continue ;
75678: GO 75608
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75680: LD_ADDR_VAR 0 9
75684: PUSH
75685: LD_VAR 0 12
75689: PUSH
75690: LD_INT 1
75692: ARRAY
75693: PPUSH
75694: LD_VAR 0 12
75698: PUSH
75699: LD_INT 2
75701: ARRAY
75702: PPUSH
75703: LD_VAR 0 7
75707: PPUSH
75708: LD_VAR 0 8
75712: PPUSH
75713: CALL_OW 298
75717: ST_TO_ADDR
// if tmp < distance then
75718: LD_VAR 0 9
75722: PUSH
75723: LD_VAR 0 10
75727: LESS
75728: IFFALSE 75750
// begin result := i ;
75730: LD_ADDR_VAR 0 5
75734: PUSH
75735: LD_VAR 0 6
75739: ST_TO_ADDR
// distance := tmp ;
75740: LD_ADDR_VAR 0 10
75744: PUSH
75745: LD_VAR 0 9
75749: ST_TO_ADDR
// end ; end ;
75750: GO 75608
75752: POP
75753: POP
// end ;
75754: LD_VAR 0 5
75758: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75759: LD_INT 0
75761: PPUSH
75762: PPUSH
// if not driver or not IsInUnit ( driver ) then
75763: LD_VAR 0 1
75767: NOT
75768: PUSH
75769: LD_VAR 0 1
75773: PPUSH
75774: CALL_OW 310
75778: NOT
75779: OR
75780: IFFALSE 75784
// exit ;
75782: GO 75874
// vehicle := IsInUnit ( driver ) ;
75784: LD_ADDR_VAR 0 3
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 310
75798: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75799: LD_VAR 0 1
75803: PPUSH
75804: LD_STRING \
75806: PUSH
75807: LD_INT 0
75809: PUSH
75810: LD_INT 0
75812: PUSH
75813: LD_INT 0
75815: PUSH
75816: LD_INT 0
75818: PUSH
75819: LD_INT 0
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: PUSH
75834: LD_STRING E
75836: PUSH
75837: LD_INT 0
75839: PUSH
75840: LD_INT 0
75842: PUSH
75843: LD_VAR 0 3
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 0
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PPUSH
75870: CALL_OW 446
// end ;
75874: LD_VAR 0 2
75878: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75879: LD_INT 0
75881: PPUSH
75882: PPUSH
// if not driver or not IsInUnit ( driver ) then
75883: LD_VAR 0 1
75887: NOT
75888: PUSH
75889: LD_VAR 0 1
75893: PPUSH
75894: CALL_OW 310
75898: NOT
75899: OR
75900: IFFALSE 75904
// exit ;
75902: GO 75994
// vehicle := IsInUnit ( driver ) ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_VAR 0 1
75913: PPUSH
75914: CALL_OW 310
75918: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_STRING \
75926: PUSH
75927: LD_INT 0
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: LD_INT 0
75935: PUSH
75936: LD_INT 0
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: PUSH
75954: LD_STRING E
75956: PUSH
75957: LD_INT 0
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_VAR 0 3
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PPUSH
75990: CALL_OW 447
// end ;
75994: LD_VAR 0 2
75998: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75999: LD_INT 0
76001: PPUSH
76002: PPUSH
76003: PPUSH
// tmp := [ ] ;
76004: LD_ADDR_VAR 0 5
76008: PUSH
76009: EMPTY
76010: ST_TO_ADDR
// for i in units do
76011: LD_ADDR_VAR 0 4
76015: PUSH
76016: LD_VAR 0 1
76020: PUSH
76021: FOR_IN
76022: IFFALSE 76060
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76024: LD_ADDR_VAR 0 5
76028: PUSH
76029: LD_VAR 0 5
76033: PPUSH
76034: LD_VAR 0 5
76038: PUSH
76039: LD_INT 1
76041: PLUS
76042: PPUSH
76043: LD_VAR 0 4
76047: PPUSH
76048: CALL_OW 256
76052: PPUSH
76053: CALL_OW 2
76057: ST_TO_ADDR
76058: GO 76021
76060: POP
76061: POP
// if not tmp then
76062: LD_VAR 0 5
76066: NOT
76067: IFFALSE 76071
// exit ;
76069: GO 76119
// if asc then
76071: LD_VAR 0 2
76075: IFFALSE 76099
// result := SortListByListAsc ( units , tmp ) else
76077: LD_ADDR_VAR 0 3
76081: PUSH
76082: LD_VAR 0 1
76086: PPUSH
76087: LD_VAR 0 5
76091: PPUSH
76092: CALL_OW 76
76096: ST_TO_ADDR
76097: GO 76119
// result := SortListByListDesc ( units , tmp ) ;
76099: LD_ADDR_VAR 0 3
76103: PUSH
76104: LD_VAR 0 1
76108: PPUSH
76109: LD_VAR 0 5
76113: PPUSH
76114: CALL_OW 77
76118: ST_TO_ADDR
// end ;
76119: LD_VAR 0 3
76123: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76124: LD_INT 0
76126: PPUSH
76127: PPUSH
// task := GetTaskList ( mech ) ;
76128: LD_ADDR_VAR 0 4
76132: PUSH
76133: LD_VAR 0 1
76137: PPUSH
76138: CALL_OW 437
76142: ST_TO_ADDR
// if not task then
76143: LD_VAR 0 4
76147: NOT
76148: IFFALSE 76152
// exit ;
76150: GO 76194
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76152: LD_ADDR_VAR 0 3
76156: PUSH
76157: LD_VAR 0 4
76161: PUSH
76162: LD_INT 1
76164: ARRAY
76165: PUSH
76166: LD_INT 1
76168: ARRAY
76169: PUSH
76170: LD_STRING r
76172: EQUAL
76173: PUSH
76174: LD_VAR 0 4
76178: PUSH
76179: LD_INT 1
76181: ARRAY
76182: PUSH
76183: LD_INT 4
76185: ARRAY
76186: PUSH
76187: LD_VAR 0 2
76191: EQUAL
76192: AND
76193: ST_TO_ADDR
// end ;
76194: LD_VAR 0 3
76198: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76199: LD_INT 0
76201: PPUSH
// SetDir ( unit , d ) ;
76202: LD_VAR 0 1
76206: PPUSH
76207: LD_VAR 0 4
76211: PPUSH
76212: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: LD_VAR 0 3
76230: PPUSH
76231: LD_VAR 0 5
76235: PPUSH
76236: CALL_OW 48
// end ;
76240: LD_VAR 0 6
76244: RET
// export function ToNaturalNumber ( number ) ; begin
76245: LD_INT 0
76247: PPUSH
// result := number div 1 ;
76248: LD_ADDR_VAR 0 2
76252: PUSH
76253: LD_VAR 0 1
76257: PUSH
76258: LD_INT 1
76260: DIV
76261: ST_TO_ADDR
// if number < 0 then
76262: LD_VAR 0 1
76266: PUSH
76267: LD_INT 0
76269: LESS
76270: IFFALSE 76280
// result := 0 ;
76272: LD_ADDR_VAR 0 2
76276: PUSH
76277: LD_INT 0
76279: ST_TO_ADDR
// end ;
76280: LD_VAR 0 2
76284: RET
// export function SortByClass ( units , class ) ; var un ; begin
76285: LD_INT 0
76287: PPUSH
76288: PPUSH
// if not units or not class then
76289: LD_VAR 0 1
76293: NOT
76294: PUSH
76295: LD_VAR 0 2
76299: NOT
76300: OR
76301: IFFALSE 76305
// exit ;
76303: GO 76400
// result := [ ] ;
76305: LD_ADDR_VAR 0 3
76309: PUSH
76310: EMPTY
76311: ST_TO_ADDR
// for un in units do
76312: LD_ADDR_VAR 0 4
76316: PUSH
76317: LD_VAR 0 1
76321: PUSH
76322: FOR_IN
76323: IFFALSE 76398
// if GetClass ( un ) = class then
76325: LD_VAR 0 4
76329: PPUSH
76330: CALL_OW 257
76334: PUSH
76335: LD_VAR 0 2
76339: EQUAL
76340: IFFALSE 76367
// result := Insert ( result , 1 , un ) else
76342: LD_ADDR_VAR 0 3
76346: PUSH
76347: LD_VAR 0 3
76351: PPUSH
76352: LD_INT 1
76354: PPUSH
76355: LD_VAR 0 4
76359: PPUSH
76360: CALL_OW 2
76364: ST_TO_ADDR
76365: GO 76396
// result := Replace ( result , result + 1 , un ) ;
76367: LD_ADDR_VAR 0 3
76371: PUSH
76372: LD_VAR 0 3
76376: PPUSH
76377: LD_VAR 0 3
76381: PUSH
76382: LD_INT 1
76384: PLUS
76385: PPUSH
76386: LD_VAR 0 4
76390: PPUSH
76391: CALL_OW 1
76395: ST_TO_ADDR
76396: GO 76322
76398: POP
76399: POP
// end ;
76400: LD_VAR 0 3
76404: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76405: LD_INT 0
76407: PPUSH
76408: PPUSH
76409: PPUSH
76410: PPUSH
76411: PPUSH
76412: PPUSH
76413: PPUSH
// result := [ ] ;
76414: LD_ADDR_VAR 0 4
76418: PUSH
76419: EMPTY
76420: ST_TO_ADDR
// if x - r < 0 then
76421: LD_VAR 0 1
76425: PUSH
76426: LD_VAR 0 3
76430: MINUS
76431: PUSH
76432: LD_INT 0
76434: LESS
76435: IFFALSE 76447
// min_x := 0 else
76437: LD_ADDR_VAR 0 8
76441: PUSH
76442: LD_INT 0
76444: ST_TO_ADDR
76445: GO 76463
// min_x := x - r ;
76447: LD_ADDR_VAR 0 8
76451: PUSH
76452: LD_VAR 0 1
76456: PUSH
76457: LD_VAR 0 3
76461: MINUS
76462: ST_TO_ADDR
// if y - r < 0 then
76463: LD_VAR 0 2
76467: PUSH
76468: LD_VAR 0 3
76472: MINUS
76473: PUSH
76474: LD_INT 0
76476: LESS
76477: IFFALSE 76489
// min_y := 0 else
76479: LD_ADDR_VAR 0 7
76483: PUSH
76484: LD_INT 0
76486: ST_TO_ADDR
76487: GO 76505
// min_y := y - r ;
76489: LD_ADDR_VAR 0 7
76493: PUSH
76494: LD_VAR 0 2
76498: PUSH
76499: LD_VAR 0 3
76503: MINUS
76504: ST_TO_ADDR
// max_x := x + r ;
76505: LD_ADDR_VAR 0 9
76509: PUSH
76510: LD_VAR 0 1
76514: PUSH
76515: LD_VAR 0 3
76519: PLUS
76520: ST_TO_ADDR
// max_y := y + r ;
76521: LD_ADDR_VAR 0 10
76525: PUSH
76526: LD_VAR 0 2
76530: PUSH
76531: LD_VAR 0 3
76535: PLUS
76536: ST_TO_ADDR
// for _x = min_x to max_x do
76537: LD_ADDR_VAR 0 5
76541: PUSH
76542: DOUBLE
76543: LD_VAR 0 8
76547: DEC
76548: ST_TO_ADDR
76549: LD_VAR 0 9
76553: PUSH
76554: FOR_TO
76555: IFFALSE 76656
// for _y = min_y to max_y do
76557: LD_ADDR_VAR 0 6
76561: PUSH
76562: DOUBLE
76563: LD_VAR 0 7
76567: DEC
76568: ST_TO_ADDR
76569: LD_VAR 0 10
76573: PUSH
76574: FOR_TO
76575: IFFALSE 76652
// begin if not ValidHex ( _x , _y ) then
76577: LD_VAR 0 5
76581: PPUSH
76582: LD_VAR 0 6
76586: PPUSH
76587: CALL_OW 488
76591: NOT
76592: IFFALSE 76596
// continue ;
76594: GO 76574
// if GetResourceTypeXY ( _x , _y ) then
76596: LD_VAR 0 5
76600: PPUSH
76601: LD_VAR 0 6
76605: PPUSH
76606: CALL_OW 283
76610: IFFALSE 76650
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76612: LD_ADDR_VAR 0 4
76616: PUSH
76617: LD_VAR 0 4
76621: PPUSH
76622: LD_VAR 0 4
76626: PUSH
76627: LD_INT 1
76629: PLUS
76630: PPUSH
76631: LD_VAR 0 5
76635: PUSH
76636: LD_VAR 0 6
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PPUSH
76645: CALL_OW 1
76649: ST_TO_ADDR
// end ;
76650: GO 76574
76652: POP
76653: POP
76654: GO 76554
76656: POP
76657: POP
// end ;
76658: LD_VAR 0 4
76662: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76663: LD_INT 0
76665: PPUSH
76666: PPUSH
76667: PPUSH
76668: PPUSH
76669: PPUSH
76670: PPUSH
76671: PPUSH
76672: PPUSH
// if not units then
76673: LD_VAR 0 1
76677: NOT
76678: IFFALSE 76682
// exit ;
76680: GO 77206
// result := UnitFilter ( units , [ f_ok ] ) ;
76682: LD_ADDR_VAR 0 3
76686: PUSH
76687: LD_VAR 0 1
76691: PPUSH
76692: LD_INT 50
76694: PUSH
76695: EMPTY
76696: LIST
76697: PPUSH
76698: CALL_OW 72
76702: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76703: LD_ADDR_VAR 0 8
76707: PUSH
76708: LD_VAR 0 1
76712: PUSH
76713: LD_INT 1
76715: ARRAY
76716: PPUSH
76717: CALL_OW 255
76721: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76722: LD_ADDR_VAR 0 10
76726: PUSH
76727: LD_INT 29
76729: PUSH
76730: LD_INT 91
76732: PUSH
76733: LD_INT 49
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: LIST
76740: ST_TO_ADDR
// if not result then
76741: LD_VAR 0 3
76745: NOT
76746: IFFALSE 76750
// exit ;
76748: GO 77206
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76750: LD_ADDR_VAR 0 5
76754: PUSH
76755: LD_INT 81
76757: PUSH
76758: LD_VAR 0 8
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PPUSH
76767: CALL_OW 69
76771: ST_TO_ADDR
// for i in result do
76772: LD_ADDR_VAR 0 4
76776: PUSH
76777: LD_VAR 0 3
76781: PUSH
76782: FOR_IN
76783: IFFALSE 77204
// begin tag := GetTag ( i ) + 1 ;
76785: LD_ADDR_VAR 0 9
76789: PUSH
76790: LD_VAR 0 4
76794: PPUSH
76795: CALL_OW 110
76799: PUSH
76800: LD_INT 1
76802: PLUS
76803: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76804: LD_ADDR_VAR 0 7
76808: PUSH
76809: LD_VAR 0 4
76813: PPUSH
76814: CALL_OW 250
76818: PPUSH
76819: LD_VAR 0 4
76823: PPUSH
76824: CALL_OW 251
76828: PPUSH
76829: LD_INT 6
76831: PPUSH
76832: CALL 76405 0 3
76836: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76837: LD_VAR 0 4
76841: PPUSH
76842: CALL_OW 247
76846: PUSH
76847: LD_INT 2
76849: EQUAL
76850: PUSH
76851: LD_VAR 0 7
76855: AND
76856: PUSH
76857: LD_VAR 0 4
76861: PPUSH
76862: CALL_OW 264
76866: PUSH
76867: LD_VAR 0 10
76871: IN
76872: NOT
76873: AND
76874: IFFALSE 76913
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76876: LD_VAR 0 4
76880: PPUSH
76881: LD_VAR 0 7
76885: PUSH
76886: LD_INT 1
76888: ARRAY
76889: PUSH
76890: LD_INT 1
76892: ARRAY
76893: PPUSH
76894: LD_VAR 0 7
76898: PUSH
76899: LD_INT 1
76901: ARRAY
76902: PUSH
76903: LD_INT 2
76905: ARRAY
76906: PPUSH
76907: CALL_OW 116
76911: GO 77202
// if path > tag then
76913: LD_VAR 0 2
76917: PUSH
76918: LD_VAR 0 9
76922: GREATER
76923: IFFALSE 77131
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76925: LD_ADDR_VAR 0 6
76929: PUSH
76930: LD_VAR 0 5
76934: PPUSH
76935: LD_INT 91
76937: PUSH
76938: LD_VAR 0 4
76942: PUSH
76943: LD_INT 8
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: LIST
76950: PPUSH
76951: CALL_OW 72
76955: ST_TO_ADDR
// if nearEnemy then
76956: LD_VAR 0 6
76960: IFFALSE 77029
// begin if GetWeapon ( i ) = ru_time_lapser then
76962: LD_VAR 0 4
76966: PPUSH
76967: CALL_OW 264
76971: PUSH
76972: LD_INT 49
76974: EQUAL
76975: IFFALSE 77003
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76977: LD_VAR 0 4
76981: PPUSH
76982: LD_VAR 0 6
76986: PPUSH
76987: LD_VAR 0 4
76991: PPUSH
76992: CALL_OW 74
76996: PPUSH
76997: CALL_OW 112
77001: GO 77027
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77003: LD_VAR 0 4
77007: PPUSH
77008: LD_VAR 0 6
77012: PPUSH
77013: LD_VAR 0 4
77017: PPUSH
77018: CALL_OW 74
77022: PPUSH
77023: CALL_OW 115
// end else
77027: GO 77129
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77029: LD_VAR 0 4
77033: PPUSH
77034: LD_VAR 0 2
77038: PUSH
77039: LD_VAR 0 9
77043: ARRAY
77044: PUSH
77045: LD_INT 1
77047: ARRAY
77048: PPUSH
77049: LD_VAR 0 2
77053: PUSH
77054: LD_VAR 0 9
77058: ARRAY
77059: PUSH
77060: LD_INT 2
77062: ARRAY
77063: PPUSH
77064: CALL_OW 297
77068: PUSH
77069: LD_INT 6
77071: GREATER
77072: IFFALSE 77115
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77074: LD_VAR 0 4
77078: PPUSH
77079: LD_VAR 0 2
77083: PUSH
77084: LD_VAR 0 9
77088: ARRAY
77089: PUSH
77090: LD_INT 1
77092: ARRAY
77093: PPUSH
77094: LD_VAR 0 2
77098: PUSH
77099: LD_VAR 0 9
77103: ARRAY
77104: PUSH
77105: LD_INT 2
77107: ARRAY
77108: PPUSH
77109: CALL_OW 114
77113: GO 77129
// SetTag ( i , tag ) ;
77115: LD_VAR 0 4
77119: PPUSH
77120: LD_VAR 0 9
77124: PPUSH
77125: CALL_OW 109
// end else
77129: GO 77202
// if enemy then
77131: LD_VAR 0 5
77135: IFFALSE 77202
// begin if GetWeapon ( i ) = ru_time_lapser then
77137: LD_VAR 0 4
77141: PPUSH
77142: CALL_OW 264
77146: PUSH
77147: LD_INT 49
77149: EQUAL
77150: IFFALSE 77178
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77152: LD_VAR 0 4
77156: PPUSH
77157: LD_VAR 0 5
77161: PPUSH
77162: LD_VAR 0 4
77166: PPUSH
77167: CALL_OW 74
77171: PPUSH
77172: CALL_OW 112
77176: GO 77202
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77178: LD_VAR 0 4
77182: PPUSH
77183: LD_VAR 0 5
77187: PPUSH
77188: LD_VAR 0 4
77192: PPUSH
77193: CALL_OW 74
77197: PPUSH
77198: CALL_OW 115
// end ; end ;
77202: GO 76782
77204: POP
77205: POP
// end ;
77206: LD_VAR 0 3
77210: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77211: LD_INT 0
77213: PPUSH
77214: PPUSH
77215: PPUSH
// if not unit or IsInUnit ( unit ) then
77216: LD_VAR 0 1
77220: NOT
77221: PUSH
77222: LD_VAR 0 1
77226: PPUSH
77227: CALL_OW 310
77231: OR
77232: IFFALSE 77236
// exit ;
77234: GO 77327
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77236: LD_ADDR_VAR 0 4
77240: PUSH
77241: LD_VAR 0 1
77245: PPUSH
77246: CALL_OW 250
77250: PPUSH
77251: LD_VAR 0 2
77255: PPUSH
77256: LD_INT 1
77258: PPUSH
77259: CALL_OW 272
77263: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77264: LD_ADDR_VAR 0 5
77268: PUSH
77269: LD_VAR 0 1
77273: PPUSH
77274: CALL_OW 251
77278: PPUSH
77279: LD_VAR 0 2
77283: PPUSH
77284: LD_INT 1
77286: PPUSH
77287: CALL_OW 273
77291: ST_TO_ADDR
// if ValidHex ( x , y ) then
77292: LD_VAR 0 4
77296: PPUSH
77297: LD_VAR 0 5
77301: PPUSH
77302: CALL_OW 488
77306: IFFALSE 77327
// ComTurnXY ( unit , x , y ) ;
77308: LD_VAR 0 1
77312: PPUSH
77313: LD_VAR 0 4
77317: PPUSH
77318: LD_VAR 0 5
77322: PPUSH
77323: CALL_OW 118
// end ;
77327: LD_VAR 0 3
77331: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77332: LD_INT 0
77334: PPUSH
77335: PPUSH
// result := false ;
77336: LD_ADDR_VAR 0 3
77340: PUSH
77341: LD_INT 0
77343: ST_TO_ADDR
// if not units then
77344: LD_VAR 0 2
77348: NOT
77349: IFFALSE 77353
// exit ;
77351: GO 77398
// for i in units do
77353: LD_ADDR_VAR 0 4
77357: PUSH
77358: LD_VAR 0 2
77362: PUSH
77363: FOR_IN
77364: IFFALSE 77396
// if See ( side , i ) then
77366: LD_VAR 0 1
77370: PPUSH
77371: LD_VAR 0 4
77375: PPUSH
77376: CALL_OW 292
77380: IFFALSE 77394
// begin result := true ;
77382: LD_ADDR_VAR 0 3
77386: PUSH
77387: LD_INT 1
77389: ST_TO_ADDR
// exit ;
77390: POP
77391: POP
77392: GO 77398
// end ;
77394: GO 77363
77396: POP
77397: POP
// end ;
77398: LD_VAR 0 3
77402: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77403: LD_INT 0
77405: PPUSH
77406: PPUSH
77407: PPUSH
77408: PPUSH
// if not unit or not points then
77409: LD_VAR 0 1
77413: NOT
77414: PUSH
77415: LD_VAR 0 2
77419: NOT
77420: OR
77421: IFFALSE 77425
// exit ;
77423: GO 77515
// dist := 99999 ;
77425: LD_ADDR_VAR 0 5
77429: PUSH
77430: LD_INT 99999
77432: ST_TO_ADDR
// for i in points do
77433: LD_ADDR_VAR 0 4
77437: PUSH
77438: LD_VAR 0 2
77442: PUSH
77443: FOR_IN
77444: IFFALSE 77513
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77446: LD_ADDR_VAR 0 6
77450: PUSH
77451: LD_VAR 0 1
77455: PPUSH
77456: LD_VAR 0 4
77460: PUSH
77461: LD_INT 1
77463: ARRAY
77464: PPUSH
77465: LD_VAR 0 4
77469: PUSH
77470: LD_INT 2
77472: ARRAY
77473: PPUSH
77474: CALL_OW 297
77478: ST_TO_ADDR
// if tmpDist < dist then
77479: LD_VAR 0 6
77483: PUSH
77484: LD_VAR 0 5
77488: LESS
77489: IFFALSE 77511
// begin result := i ;
77491: LD_ADDR_VAR 0 3
77495: PUSH
77496: LD_VAR 0 4
77500: ST_TO_ADDR
// dist := tmpDist ;
77501: LD_ADDR_VAR 0 5
77505: PUSH
77506: LD_VAR 0 6
77510: ST_TO_ADDR
// end ; end ;
77511: GO 77443
77513: POP
77514: POP
// end ;
77515: LD_VAR 0 3
77519: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77520: LD_INT 0
77522: PPUSH
// uc_side := side ;
77523: LD_ADDR_OWVAR 20
77527: PUSH
77528: LD_VAR 0 1
77532: ST_TO_ADDR
// uc_nation := 3 ;
77533: LD_ADDR_OWVAR 21
77537: PUSH
77538: LD_INT 3
77540: ST_TO_ADDR
// vc_chassis := 25 ;
77541: LD_ADDR_OWVAR 37
77545: PUSH
77546: LD_INT 25
77548: ST_TO_ADDR
// vc_engine := engine_siberite ;
77549: LD_ADDR_OWVAR 39
77553: PUSH
77554: LD_INT 3
77556: ST_TO_ADDR
// vc_control := control_computer ;
77557: LD_ADDR_OWVAR 38
77561: PUSH
77562: LD_INT 3
77564: ST_TO_ADDR
// vc_weapon := 59 ;
77565: LD_ADDR_OWVAR 40
77569: PUSH
77570: LD_INT 59
77572: ST_TO_ADDR
// result := CreateVehicle ;
77573: LD_ADDR_VAR 0 5
77577: PUSH
77578: CALL_OW 45
77582: ST_TO_ADDR
// SetDir ( result , d ) ;
77583: LD_VAR 0 5
77587: PPUSH
77588: LD_VAR 0 4
77592: PPUSH
77593: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77597: LD_VAR 0 5
77601: PPUSH
77602: LD_VAR 0 2
77606: PPUSH
77607: LD_VAR 0 3
77611: PPUSH
77612: LD_INT 0
77614: PPUSH
77615: CALL_OW 48
// end ;
77619: LD_VAR 0 5
77623: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77624: LD_INT 0
77626: PPUSH
77627: PPUSH
77628: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77629: LD_ADDR_VAR 0 2
77633: PUSH
77634: LD_INT 0
77636: PUSH
77637: LD_INT 0
77639: PUSH
77640: LD_INT 0
77642: PUSH
77643: LD_INT 0
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: LIST
77650: LIST
77651: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77652: LD_VAR 0 1
77656: NOT
77657: PUSH
77658: LD_VAR 0 1
77662: PPUSH
77663: CALL_OW 264
77667: PUSH
77668: LD_INT 12
77670: PUSH
77671: LD_INT 51
77673: PUSH
77674: LD_INT 32
77676: PUSH
77677: LD_INT 89
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: IN
77686: NOT
77687: OR
77688: IFFALSE 77692
// exit ;
77690: GO 77790
// for i := 1 to 3 do
77692: LD_ADDR_VAR 0 3
77696: PUSH
77697: DOUBLE
77698: LD_INT 1
77700: DEC
77701: ST_TO_ADDR
77702: LD_INT 3
77704: PUSH
77705: FOR_TO
77706: IFFALSE 77788
// begin tmp := GetCargo ( cargo , i ) ;
77708: LD_ADDR_VAR 0 4
77712: PUSH
77713: LD_VAR 0 1
77717: PPUSH
77718: LD_VAR 0 3
77722: PPUSH
77723: CALL_OW 289
77727: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77728: LD_ADDR_VAR 0 2
77732: PUSH
77733: LD_VAR 0 2
77737: PPUSH
77738: LD_VAR 0 3
77742: PPUSH
77743: LD_VAR 0 4
77747: PPUSH
77748: CALL_OW 1
77752: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77753: LD_ADDR_VAR 0 2
77757: PUSH
77758: LD_VAR 0 2
77762: PPUSH
77763: LD_INT 4
77765: PPUSH
77766: LD_VAR 0 2
77770: PUSH
77771: LD_INT 4
77773: ARRAY
77774: PUSH
77775: LD_VAR 0 4
77779: PLUS
77780: PPUSH
77781: CALL_OW 1
77785: ST_TO_ADDR
// end ;
77786: GO 77705
77788: POP
77789: POP
// end ;
77790: LD_VAR 0 2
77794: RET
// export function Length ( array ) ; begin
77795: LD_INT 0
77797: PPUSH
// result := array + 0 ;
77798: LD_ADDR_VAR 0 2
77802: PUSH
77803: LD_VAR 0 1
77807: PUSH
77808: LD_INT 0
77810: PLUS
77811: ST_TO_ADDR
// end ;
77812: LD_VAR 0 2
77816: RET
// export function PrepareArray ( array ) ; begin
77817: LD_INT 0
77819: PPUSH
// result := array diff 0 ;
77820: LD_ADDR_VAR 0 2
77824: PUSH
77825: LD_VAR 0 1
77829: PUSH
77830: LD_INT 0
77832: DIFF
77833: ST_TO_ADDR
// if not result [ 1 ] then
77834: LD_VAR 0 2
77838: PUSH
77839: LD_INT 1
77841: ARRAY
77842: NOT
77843: IFFALSE 77863
// result := Delete ( result , 1 ) ;
77845: LD_ADDR_VAR 0 2
77849: PUSH
77850: LD_VAR 0 2
77854: PPUSH
77855: LD_INT 1
77857: PPUSH
77858: CALL_OW 3
77862: ST_TO_ADDR
// end ;
77863: LD_VAR 0 2
77867: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77868: LD_INT 0
77870: PPUSH
77871: PPUSH
77872: PPUSH
77873: PPUSH
// sibRocketRange := 25 ;
77874: LD_ADDR_VAR 0 6
77878: PUSH
77879: LD_INT 25
77881: ST_TO_ADDR
// result := false ;
77882: LD_ADDR_VAR 0 4
77886: PUSH
77887: LD_INT 0
77889: ST_TO_ADDR
// for i := 0 to 5 do
77890: LD_ADDR_VAR 0 5
77894: PUSH
77895: DOUBLE
77896: LD_INT 0
77898: DEC
77899: ST_TO_ADDR
77900: LD_INT 5
77902: PUSH
77903: FOR_TO
77904: IFFALSE 77971
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77906: LD_VAR 0 1
77910: PPUSH
77911: LD_VAR 0 5
77915: PPUSH
77916: LD_VAR 0 6
77920: PPUSH
77921: CALL_OW 272
77925: PPUSH
77926: LD_VAR 0 2
77930: PPUSH
77931: LD_VAR 0 5
77935: PPUSH
77936: LD_VAR 0 6
77940: PPUSH
77941: CALL_OW 273
77945: PPUSH
77946: LD_VAR 0 3
77950: PPUSH
77951: CALL_OW 309
77955: IFFALSE 77969
// begin result := true ;
77957: LD_ADDR_VAR 0 4
77961: PUSH
77962: LD_INT 1
77964: ST_TO_ADDR
// exit ;
77965: POP
77966: POP
77967: GO 77973
// end ;
77969: GO 77903
77971: POP
77972: POP
// end ;
77973: LD_VAR 0 4
77977: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77978: LD_INT 0
77980: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77981: LD_VAR 0 1
77985: PPUSH
77986: LD_VAR 0 2
77990: PPUSH
77991: LD_INT 0
77993: PPUSH
77994: LD_INT 0
77996: PPUSH
77997: LD_INT 1
77999: PPUSH
78000: LD_INT 0
78002: PPUSH
78003: CALL_OW 587
// end ;
78007: LD_VAR 0 3
78011: RET
// export function CenterOnNow ( unit ) ; begin
78012: LD_INT 0
78014: PPUSH
// result := IsInUnit ( unit ) ;
78015: LD_ADDR_VAR 0 2
78019: PUSH
78020: LD_VAR 0 1
78024: PPUSH
78025: CALL_OW 310
78029: ST_TO_ADDR
// if not result then
78030: LD_VAR 0 2
78034: NOT
78035: IFFALSE 78047
// result := unit ;
78037: LD_ADDR_VAR 0 2
78041: PUSH
78042: LD_VAR 0 1
78046: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78047: LD_VAR 0 1
78051: PPUSH
78052: CALL_OW 87
// end ;
78056: LD_VAR 0 2
78060: RET
// export function ComMoveHex ( unit , hex ) ; begin
78061: LD_INT 0
78063: PPUSH
// if not hex then
78064: LD_VAR 0 2
78068: NOT
78069: IFFALSE 78073
// exit ;
78071: GO 78126
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78073: LD_VAR 0 2
78077: PUSH
78078: LD_INT 1
78080: ARRAY
78081: PPUSH
78082: LD_VAR 0 2
78086: PUSH
78087: LD_INT 2
78089: ARRAY
78090: PPUSH
78091: CALL_OW 428
78095: IFFALSE 78099
// exit ;
78097: GO 78126
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78099: LD_VAR 0 1
78103: PPUSH
78104: LD_VAR 0 2
78108: PUSH
78109: LD_INT 1
78111: ARRAY
78112: PPUSH
78113: LD_VAR 0 2
78117: PUSH
78118: LD_INT 2
78120: ARRAY
78121: PPUSH
78122: CALL_OW 111
// end ; end_of_file
78126: LD_VAR 0 3
78130: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78131: LD_VAR 0 1
78135: PUSH
78136: LD_INT 200
78138: DOUBLE
78139: GREATEREQUAL
78140: IFFALSE 78148
78142: LD_INT 299
78144: DOUBLE
78145: LESSEQUAL
78146: IFTRUE 78150
78148: GO 78182
78150: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78151: LD_VAR 0 1
78155: PPUSH
78156: LD_VAR 0 2
78160: PPUSH
78161: LD_VAR 0 3
78165: PPUSH
78166: LD_VAR 0 4
78170: PPUSH
78171: LD_VAR 0 5
78175: PPUSH
78176: CALL 32854 0 5
78180: GO 78259
78182: LD_INT 300
78184: DOUBLE
78185: GREATEREQUAL
78186: IFFALSE 78194
78188: LD_INT 399
78190: DOUBLE
78191: LESSEQUAL
78192: IFTRUE 78196
78194: GO 78258
78196: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78197: LD_VAR 0 1
78201: PPUSH
78202: LD_VAR 0 2
78206: PPUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: LD_VAR 0 4
78216: PPUSH
78217: LD_VAR 0 5
78221: PPUSH
78222: LD_VAR 0 6
78226: PPUSH
78227: LD_VAR 0 7
78231: PPUSH
78232: LD_VAR 0 8
78236: PPUSH
78237: LD_VAR 0 9
78241: PPUSH
78242: LD_VAR 0 10
78246: PPUSH
78247: LD_VAR 0 11
78251: PPUSH
78252: CALL 29187 0 11
78256: GO 78259
78258: POP
// end ;
78259: PPOPN 11
78261: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78262: LD_VAR 0 1
78266: PPUSH
78267: LD_VAR 0 2
78271: PPUSH
78272: LD_VAR 0 3
78276: PPUSH
78277: LD_VAR 0 4
78281: PPUSH
78282: LD_VAR 0 5
78286: PPUSH
78287: CALL 32590 0 5
// end ; end_of_file
78291: PPOPN 5
78293: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78294: LD_VAR 0 1
78298: PPUSH
78299: LD_VAR 0 2
78303: PPUSH
78304: LD_VAR 0 3
78308: PPUSH
78309: LD_VAR 0 4
78313: PPUSH
78314: LD_VAR 0 5
78318: PPUSH
78319: LD_VAR 0 6
78323: PPUSH
78324: CALL 16839 0 6
// end ;
78328: PPOPN 6
78330: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78331: LD_INT 0
78333: PPUSH
// begin if not units then
78334: LD_VAR 0 1
78338: NOT
78339: IFFALSE 78343
// exit ;
78341: GO 78343
// end ;
78343: PPOPN 7
78345: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78346: CALL 16743 0 0
// end ;
78350: PPOPN 1
78352: END
