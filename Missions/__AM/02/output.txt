// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15211 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 74742 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 75948 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 35723 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 35723 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 35723 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 74096 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 31083 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on Command ( cmd ) do var i , j , tmp ;
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
// begin SOS_Command ( cmd ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL 31189 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PUSH
14699: FOR_IN
14700: IFFALSE 14821
// begin if GetTaskList ( i ) then
14702: LD_VAR 0 2
14706: PPUSH
14707: CALL_OW 437
14711: IFFALSE 14819
// begin for j = 1 to GetTaskList ( i ) do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 437
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14817
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 437
14750: PUSH
14751: LD_VAR 0 3
14755: ARRAY
14756: PUSH
14757: LD_INT 4
14759: ARRAY
14760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 4
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14815
// ComStop ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 141
// end ;
14815: GO 14733
14817: POP
14818: POP
// end ; end ;
14819: GO 14699
14821: POP
14822: POP
// end ;
14823: PPOPN 4
14825: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_EXP 8
14835: EQUAL
14836: PUSH
14837: LD_EXP 21
14841: PUSH
14842: LD_INT 4
14844: NONEQUAL
14845: AND
14846: IFFALSE 14998
// begin if IsOk ( Mikhail ) then
14848: LD_EXP 8
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14865
// AskMikhail else
14859: CALL 7486 0 0
14863: GO 14998
// if IsOk ( llab1 ) then
14865: LD_INT 23
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14961
// begin InGameOn ;
14874: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14878: LD_EXP 8
14882: PPUSH
14883: LD_INT 6
14885: PPUSH
14886: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14890: LD_INT 23
14892: PPUSH
14893: LD_INT 6
14895: PPUSH
14896: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14900: LD_EXP 8
14904: PPUSH
14905: LD_INT 23
14907: PPUSH
14908: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14919: LD_EXP 8
14923: PPUSH
14924: CALL_OW 310
14928: PUSH
14929: LD_INT 23
14931: EQUAL
14932: PUSH
14933: LD_EXP 8
14937: PPUSH
14938: CALL_OW 301
14942: OR
14943: IFFALSE 14912
// SetSide ( llab1 , 1 ) ;
14945: LD_INT 23
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 235
// InGameOff ;
14955: CALL_OW 9
// end else
14959: GO 14998
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14961: LD_INT 3
14963: PPUSH
14964: LD_INT 6
14966: PPUSH
14967: LD_INT 2
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14977: LD_EXP 8
14981: PPUSH
14982: LD_INT 6
14984: PPUSH
14985: CALL_OW 235
// ComHold ( Mikhail ) ;
14989: LD_EXP 8
14993: PPUSH
14994: CALL_OW 140
// end ; end ; end ;
14998: PPOPN 2
15000: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL 31205 0 2
// end ;
15015: PPOPN 2
15017: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15018: LD_EXP 8
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 3
15030: NONEQUAL
15031: IFFALSE 15049
15033: GO 15035
15035: DISABLE
// begin enable ;
15036: ENABLE
// SetClass ( Mikhail , 3 ) ;
15037: LD_EXP 8
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 336
// end ; end_of_file
15049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15050: LD_INT 22
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_INT 0
15136: EQUAL
15137: AND
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 255
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: AND
15151: PUSH
15152: LD_INT 10
15154: PPUSH
15155: CALL_OW 255
15159: PUSH
15160: LD_INT 3
15162: EQUAL
15163: AND
15164: IFFALSE 15176
15166: GO 15168
15168: DISABLE
// YouLost ( Engineer ) ;
15169: LD_STRING Engineer
15171: PPUSH
15172: CALL_OW 104
15176: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 255
15184: PUSH
15185: LD_INT 3
15187: EQUAL
15188: PUSH
15189: LD_EXP 27
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15210
15200: GO 15202
15202: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15203: LD_STRING DepotCaptured
15205: PPUSH
15206: CALL_OW 104
15210: END
// export function PrepareTigers ; var i , un ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_INT 2
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 4
15234: PUSH
15235: LD_INT 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: LD_OWVAR 67
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15366
// begin uc_side := 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_sex := sex_male ;
15269: LD_ADDR_OWVAR 27
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// hc_class := class_tiger ;
15277: LD_ADDR_OWVAR 28
15281: PUSH
15282: LD_INT 14
15284: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15285: LD_ADDR_OWVAR 31
15289: PUSH
15290: LD_EXP 14
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 40
15320: PUSH
15321: LD_INT 45
15323: PUSH
15324: LD_INT 50
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_OWVAR 67
15337: ARRAY
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 27
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15250
15366: POP
15367: POP
// end ; end_of_file
15368: LD_VAR 0 1
15372: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 255
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: PUSH
15385: LD_INT 10
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: AND
15397: PUSH
15398: LD_EXP 20
15402: PUSH
15403: LD_INT 1
15405: EQUAL
15406: AND
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 34
15430: PUSH
15431: LD_INT 51
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 58
15443: PUSH
15444: EMPTY
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: EQUAL
15465: AND
15466: IFFALSE 15561
15468: GO 15470
15470: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15471: LD_INT 9450
15473: PUSH
15474: LD_INT 8400
15476: PUSH
15477: LD_INT 6300
15479: PUSH
15480: LD_INT 6300
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: PPUSH
15495: CALL_OW 67
// if cargoEscape = 1 then
15499: LD_EXP 20
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: IFFALSE 15561
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15509: LD_EXP 9
15513: PPUSH
15514: LD_STRING D6-Pow-1
15516: PPUSH
15517: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15521: LD_EXP 1
15525: PPUSH
15526: LD_STRING D6-JMM-1
15528: PPUSH
15529: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15533: LD_EXP 9
15537: PPUSH
15538: LD_STRING D6-Pow-2
15540: PPUSH
15541: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15545: LD_EXP 1
15549: PPUSH
15550: LD_STRING D6-JMM-2
15552: PPUSH
15553: CALL_OW 88
// FinishMission ;
15557: CALL 15777 0 0
// end ; end ;
15561: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 255
15569: PUSH
15570: LD_INT 1
15572: EQUAL
15573: PUSH
15574: LD_INT 10
15576: PPUSH
15577: CALL_OW 255
15581: PUSH
15582: LD_INT 1
15584: EQUAL
15585: AND
15586: PUSH
15587: LD_EXP 20
15591: PUSH
15592: LD_INT 1
15594: GREATER
15595: AND
15596: IFFALSE 15671
15598: GO 15600
15600: DISABLE
15601: LD_INT 0
15603: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15604: LD_INT 11550
15606: PUSH
15607: LD_INT 10500
15609: PUSH
15610: LD_INT 9450
15612: PUSH
15613: LD_INT 8400
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: PUSH
15622: LD_OWVAR 67
15626: ARRAY
15627: PPUSH
15628: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15632: LD_INT 1
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: LD_INT 3
15640: PUSH
15641: LD_INT 4
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: PUSH
15650: LD_OWVAR 67
15654: ARRAY
15655: PPUSH
15656: LD_INT 13
15658: PPUSH
15659: CALL 13342 0 2
// lastBattle = 1 ;
15663: LD_ADDR_EXP 27
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// end ;
15671: PPOPN 1
15673: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15674: LD_EXP 27
15678: PUSH
15679: LD_INT 1
15681: EQUAL
15682: PUSH
15683: LD_INT 26
15685: PPUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 70
15714: PUSH
15715: LD_INT 0
15717: EQUAL
15718: AND
15719: IFFALSE 15776
15721: GO 15723
15723: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15724: LD_EXP 9
15728: PPUSH
15729: LD_STRING D6-Pow-1
15731: PPUSH
15732: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15736: LD_EXP 1
15740: PPUSH
15741: LD_STRING D6-JMM-1
15743: PPUSH
15744: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15748: LD_EXP 9
15752: PPUSH
15753: LD_STRING D6-Pow-2
15755: PPUSH
15756: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15760: LD_EXP 1
15764: PPUSH
15765: LD_STRING D6-JMM-2
15767: PPUSH
15768: CALL_OW 88
// FinishMission ;
15772: CALL 15777 0 0
// end ;
15776: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15777: LD_INT 0
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
// if tick <= 18 18$00 then
15784: LD_OWVAR 1
15788: PUSH
15789: LD_INT 37800
15791: LESSEQUAL
15792: IFFALSE 15801
// SetAchievement ( ACH_ASPEED_2 ) ;
15794: LD_STRING ACH_ASPEED_2
15796: PPUSH
15797: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 251
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PPUSH
15841: CALL_OW 69
15845: ST_TO_ADDR
// if tmp then
15846: LD_VAR 0 2
15850: IFFALSE 15864
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15852: LD_VAR 0 2
15856: PPUSH
15857: LD_STRING 02_tanks_1
15859: PPUSH
15860: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15864: LD_EXP 21
15868: PUSH
15869: LD_INT 1
15871: EQUAL
15872: PUSH
15873: LD_EXP 8
15877: PPUSH
15878: CALL_OW 300
15882: AND
15883: IFFALSE 15897
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15885: LD_EXP 21
15889: PPUSH
15890: LD_STRING 02_mikhailStatus_1
15892: PPUSH
15893: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 274
15904: PPUSH
15905: LD_INT 1
15907: PPUSH
15908: CALL_OW 275
15912: PPUSH
15913: LD_STRING 02_resources_4
15915: PPUSH
15916: CALL_OW 39
// m1 := false ;
15920: LD_ADDR_VAR 0 3
15924: PUSH
15925: LD_INT 0
15927: ST_TO_ADDR
// m2 := false ;
15928: LD_ADDR_VAR 0 4
15932: PUSH
15933: LD_INT 0
15935: ST_TO_ADDR
// m3 := false ;
15936: LD_ADDR_VAR 0 5
15940: PUSH
15941: LD_INT 0
15943: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 274
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 275
15959: PUSH
15960: LD_INT 200
15962: GREATEREQUAL
15963: IFFALSE 15985
// begin AddMedal ( Cans , 1 ) ;
15965: LD_STRING Cans
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 101
// m1 := true ;
15975: LD_ADDR_VAR 0 3
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// end else
15983: GO 15996
// begin AddMedal ( Cans , - 1 ) ;
15985: LD_STRING Cans
15987: PPUSH
15988: LD_INT 1
15990: NEG
15991: PPUSH
15992: CALL_OW 101
// end ; if deadsCounter < 2 then
15996: LD_EXP 31
16000: PUSH
16001: LD_INT 2
16003: LESS
16004: IFFALSE 16026
// begin AddMedal ( Deaths , 1 ) ;
16006: LD_STRING Deaths
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 101
// m2 := true ;
16016: LD_ADDR_VAR 0 4
16020: PUSH
16021: LD_INT 1
16023: ST_TO_ADDR
// end else
16024: GO 16037
// begin AddMedal ( Deaths , - 1 ) ;
16026: LD_STRING Deaths
16028: PPUSH
16029: LD_INT 1
16031: NEG
16032: PPUSH
16033: CALL_OW 101
// end ; if mikhailStatus = 0 then
16037: LD_EXP 21
16041: PUSH
16042: LD_INT 0
16044: EQUAL
16045: IFFALSE 16058
// AddMedal ( Prisoner , - 1 ) ;
16047: LD_STRING Prisoner
16049: PPUSH
16050: LD_INT 1
16052: NEG
16053: PPUSH
16054: CALL_OW 101
// if mikhailStatus = 1 then
16058: LD_EXP 21
16062: PUSH
16063: LD_INT 1
16065: EQUAL
16066: IFFALSE 16086
// begin AddMedal ( Prisoner , 1 ) ;
16068: LD_STRING Prisoner
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: CALL_OW 101
// m3 := true ;
16078: LD_ADDR_VAR 0 5
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 2
16093: EQUAL
16094: IFFALSE 16114
// begin AddMedal ( Prisoner , 2 ) ;
16096: LD_STRING Prisoner
16098: PPUSH
16099: LD_INT 2
16101: PPUSH
16102: CALL_OW 101
// m3 := true ;
16106: LD_ADDR_VAR 0 5
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16114: LD_EXP 21
16118: PUSH
16119: LD_INT 3
16121: EQUAL
16122: IFFALSE 16135
// AddMedal ( Prisoner , - 2 ) ;
16124: LD_STRING Prisoner
16126: PPUSH
16127: LD_INT 2
16129: NEG
16130: PPUSH
16131: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16135: LD_OWVAR 67
16139: PUSH
16140: LD_INT 3
16142: GREATEREQUAL
16143: PUSH
16144: LD_VAR 0 3
16148: AND
16149: PUSH
16150: LD_VAR 0 4
16154: AND
16155: PUSH
16156: LD_VAR 0 5
16160: AND
16161: IFFALSE 16173
// SetAchievementEX ( ACH_AMER , 2 ) ;
16163: LD_STRING ACH_AMER
16165: PPUSH
16166: LD_INT 2
16168: PPUSH
16169: CALL_OW 564
// GiveMedals ( MAIN ) ;
16173: LD_STRING MAIN
16175: PPUSH
16176: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16180: LD_INT 22
16182: PUSH
16183: LD_INT 1
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 23
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PPUSH
16215: CALL_OW 69
16219: PPUSH
16220: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16224: LD_EXP 1
16228: PPUSH
16229: LD_EXP 33
16233: PUSH
16234: LD_STRING JMM
16236: STR
16237: PPUSH
16238: CALL_OW 38
// if IsOK ( Bobby ) then
16242: LD_EXP 2
16246: PPUSH
16247: CALL_OW 302
16251: IFFALSE 16271
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16253: LD_EXP 2
16257: PPUSH
16258: LD_EXP 33
16262: PUSH
16263: LD_STRING Bobby
16265: STR
16266: PPUSH
16267: CALL_OW 38
// if IsOK ( Cyrus ) then
16271: LD_EXP 3
16275: PPUSH
16276: CALL_OW 302
16280: IFFALSE 16300
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16282: LD_EXP 3
16286: PPUSH
16287: LD_EXP 33
16291: PUSH
16292: LD_STRING Cyrus
16294: STR
16295: PPUSH
16296: CALL_OW 38
// if IsOK ( Lisa ) then
16300: LD_EXP 4
16304: PPUSH
16305: CALL_OW 302
16309: IFFALSE 16329
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16311: LD_EXP 4
16315: PPUSH
16316: LD_EXP 33
16320: PUSH
16321: LD_STRING Lisa
16323: STR
16324: PPUSH
16325: CALL_OW 38
// if IsOK ( Khatam ) then
16329: LD_EXP 5
16333: PPUSH
16334: CALL_OW 302
16338: IFFALSE 16358
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16340: LD_EXP 5
16344: PPUSH
16345: LD_EXP 33
16349: PUSH
16350: LD_STRING Khatam
16352: STR
16353: PPUSH
16354: CALL_OW 38
// if IsOK ( Brian ) then
16358: LD_EXP 6
16362: PPUSH
16363: CALL_OW 302
16367: IFFALSE 16387
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16369: LD_EXP 6
16373: PPUSH
16374: LD_EXP 33
16378: PUSH
16379: LD_STRING Brian
16381: STR
16382: PPUSH
16383: CALL_OW 38
// if IsOk ( Jerry ) then
16387: LD_EXP 7
16391: PPUSH
16392: CALL_OW 302
16396: IFFALSE 16416
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16398: LD_EXP 7
16402: PPUSH
16403: LD_EXP 33
16407: PUSH
16408: LD_STRING Jerry
16410: STR
16411: PPUSH
16412: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16416: LD_EXP 21
16420: PUSH
16421: LD_INT 1
16423: EQUAL
16424: PUSH
16425: LD_EXP 8
16429: PPUSH
16430: CALL_OW 255
16434: PUSH
16435: LD_INT 1
16437: EQUAL
16438: AND
16439: PUSH
16440: LD_EXP 8
16444: PPUSH
16445: CALL_OW 302
16449: AND
16450: IFFALSE 16470
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16452: LD_EXP 8
16456: PPUSH
16457: LD_EXP 33
16461: PUSH
16462: LD_STRING Mikhail
16464: STR
16465: PPUSH
16466: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16470: LD_INT 50
16472: PUSH
16473: EMPTY
16474: LIST
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL_OW 69
16505: PUSH
16506: LD_EXP 1
16510: PUSH
16511: LD_EXP 2
16515: PUSH
16516: LD_EXP 3
16520: PUSH
16521: LD_EXP 4
16525: PUSH
16526: LD_EXP 5
16530: PUSH
16531: LD_EXP 6
16535: PUSH
16536: LD_EXP 7
16540: PUSH
16541: LD_EXP 8
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: DIFF
16556: PPUSH
16557: LD_STRING 02_other_survivors
16559: PPUSH
16560: CALL_OW 38
// YouWin ;
16564: CALL_OW 103
// end ; end_of_file
16568: LD_VAR 0 1
16572: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16573: LD_INT 0
16575: PPUSH
// ar_miner := 81 ;
16576: LD_ADDR_EXP 43
16580: PUSH
16581: LD_INT 81
16583: ST_TO_ADDR
// ar_crane := 88 ;
16584: LD_ADDR_EXP 42
16588: PUSH
16589: LD_INT 88
16591: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16592: LD_ADDR_EXP 37
16596: PUSH
16597: LD_INT 89
16599: ST_TO_ADDR
// us_hack := 99 ;
16600: LD_ADDR_EXP 38
16604: PUSH
16605: LD_INT 99
16607: ST_TO_ADDR
// us_artillery := 97 ;
16608: LD_ADDR_EXP 39
16612: PUSH
16613: LD_INT 97
16615: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16616: LD_ADDR_EXP 40
16620: PUSH
16621: LD_INT 91
16623: ST_TO_ADDR
// ar_mortar := 92 ;
16624: LD_ADDR_EXP 41
16628: PUSH
16629: LD_INT 92
16631: ST_TO_ADDR
// ru_flamethrower := 93 ;
16632: LD_ADDR_EXP 44
16636: PUSH
16637: LD_INT 93
16639: ST_TO_ADDR
// ru_radar := 98 ;
16640: LD_ADDR_EXP 36
16644: PUSH
16645: LD_INT 98
16647: ST_TO_ADDR
// tech_Artillery := 80 ;
16648: LD_ADDR_EXP 45
16652: PUSH
16653: LD_INT 80
16655: ST_TO_ADDR
// tech_RadMat := 81 ;
16656: LD_ADDR_EXP 46
16660: PUSH
16661: LD_INT 81
16663: ST_TO_ADDR
// tech_BasicTools := 82 ;
16664: LD_ADDR_EXP 47
16668: PUSH
16669: LD_INT 82
16671: ST_TO_ADDR
// tech_Cargo := 83 ;
16672: LD_ADDR_EXP 48
16676: PUSH
16677: LD_INT 83
16679: ST_TO_ADDR
// tech_Track := 84 ;
16680: LD_ADDR_EXP 49
16684: PUSH
16685: LD_INT 84
16687: ST_TO_ADDR
// tech_Crane := 85 ;
16688: LD_ADDR_EXP 50
16692: PUSH
16693: LD_INT 85
16695: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16696: LD_ADDR_EXP 51
16700: PUSH
16701: LD_INT 86
16703: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16704: LD_ADDR_EXP 52
16708: PUSH
16709: LD_INT 87
16711: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16712: LD_ADDR_EXP 53
16716: PUSH
16717: LD_INT 88
16719: ST_TO_ADDR
// class_mastodont := 31 ;
16720: LD_ADDR_EXP 54
16724: PUSH
16725: LD_INT 31
16727: ST_TO_ADDR
// class_horse := 21 ;
16728: LD_ADDR_EXP 55
16732: PUSH
16733: LD_INT 21
16735: ST_TO_ADDR
// end ;
16736: LD_VAR 0 1
16740: RET
// every 1 do
16741: GO 16743
16743: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16744: CALL 16573 0 0
16748: END
// every 0 0$1 do
16749: GO 16751
16751: DISABLE
// begin enable ;
16752: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16753: LD_STRING updateTimer(
16755: PUSH
16756: LD_OWVAR 1
16760: STR
16761: PUSH
16762: LD_STRING );
16764: STR
16765: PPUSH
16766: CALL_OW 559
// end ;
16770: END
// export function SOS_MapStart ( ) ; begin
16771: LD_INT 0
16773: PPUSH
// if streamModeActive then
16774: LD_EXP 56
16778: IFFALSE 16787
// DefineStreamItems ( true ) ;
16780: LD_INT 1
16782: PPUSH
16783: CALL 18437 0 1
// UpdateFactoryWaypoints ( ) ;
16787: CALL 32021 0 0
// end ;
16791: LD_VAR 0 1
16795: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16796: LD_INT 0
16798: PPUSH
// if p2 = 100 then
16799: LD_VAR 0 2
16803: PUSH
16804: LD_INT 100
16806: EQUAL
16807: IFFALSE 17810
// begin if not StreamModeActive then
16809: LD_EXP 56
16813: NOT
16814: IFFALSE 16824
// StreamModeActive := true ;
16816: LD_ADDR_EXP 56
16820: PUSH
16821: LD_INT 1
16823: ST_TO_ADDR
// if p3 = 0 then
16824: LD_VAR 0 3
16828: PUSH
16829: LD_INT 0
16831: EQUAL
16832: IFFALSE 16838
// InitStreamMode ;
16834: CALL 17973 0 0
// if p3 = 1 then
16838: LD_VAR 0 3
16842: PUSH
16843: LD_INT 1
16845: EQUAL
16846: IFFALSE 16856
// sRocket := true ;
16848: LD_ADDR_EXP 61
16852: PUSH
16853: LD_INT 1
16855: ST_TO_ADDR
// if p3 = 2 then
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 2
16863: EQUAL
16864: IFFALSE 16874
// sSpeed := true ;
16866: LD_ADDR_EXP 60
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// if p3 = 3 then
16874: LD_VAR 0 3
16878: PUSH
16879: LD_INT 3
16881: EQUAL
16882: IFFALSE 16892
// sEngine := true ;
16884: LD_ADDR_EXP 62
16888: PUSH
16889: LD_INT 1
16891: ST_TO_ADDR
// if p3 = 4 then
16892: LD_VAR 0 3
16896: PUSH
16897: LD_INT 4
16899: EQUAL
16900: IFFALSE 16910
// sSpec := true ;
16902: LD_ADDR_EXP 59
16906: PUSH
16907: LD_INT 1
16909: ST_TO_ADDR
// if p3 = 5 then
16910: LD_VAR 0 3
16914: PUSH
16915: LD_INT 5
16917: EQUAL
16918: IFFALSE 16928
// sLevel := true ;
16920: LD_ADDR_EXP 63
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if p3 = 6 then
16928: LD_VAR 0 3
16932: PUSH
16933: LD_INT 6
16935: EQUAL
16936: IFFALSE 16946
// sArmoury := true ;
16938: LD_ADDR_EXP 64
16942: PUSH
16943: LD_INT 1
16945: ST_TO_ADDR
// if p3 = 7 then
16946: LD_VAR 0 3
16950: PUSH
16951: LD_INT 7
16953: EQUAL
16954: IFFALSE 16964
// sRadar := true ;
16956: LD_ADDR_EXP 65
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// if p3 = 8 then
16964: LD_VAR 0 3
16968: PUSH
16969: LD_INT 8
16971: EQUAL
16972: IFFALSE 16982
// sBunker := true ;
16974: LD_ADDR_EXP 66
16978: PUSH
16979: LD_INT 1
16981: ST_TO_ADDR
// if p3 = 9 then
16982: LD_VAR 0 3
16986: PUSH
16987: LD_INT 9
16989: EQUAL
16990: IFFALSE 17000
// sHack := true ;
16992: LD_ADDR_EXP 67
16996: PUSH
16997: LD_INT 1
16999: ST_TO_ADDR
// if p3 = 10 then
17000: LD_VAR 0 3
17004: PUSH
17005: LD_INT 10
17007: EQUAL
17008: IFFALSE 17018
// sFire := true ;
17010: LD_ADDR_EXP 68
17014: PUSH
17015: LD_INT 1
17017: ST_TO_ADDR
// if p3 = 11 then
17018: LD_VAR 0 3
17022: PUSH
17023: LD_INT 11
17025: EQUAL
17026: IFFALSE 17036
// sRefresh := true ;
17028: LD_ADDR_EXP 69
17032: PUSH
17033: LD_INT 1
17035: ST_TO_ADDR
// if p3 = 12 then
17036: LD_VAR 0 3
17040: PUSH
17041: LD_INT 12
17043: EQUAL
17044: IFFALSE 17054
// sExp := true ;
17046: LD_ADDR_EXP 70
17050: PUSH
17051: LD_INT 1
17053: ST_TO_ADDR
// if p3 = 13 then
17054: LD_VAR 0 3
17058: PUSH
17059: LD_INT 13
17061: EQUAL
17062: IFFALSE 17072
// sDepot := true ;
17064: LD_ADDR_EXP 71
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// if p3 = 14 then
17072: LD_VAR 0 3
17076: PUSH
17077: LD_INT 14
17079: EQUAL
17080: IFFALSE 17090
// sFlag := true ;
17082: LD_ADDR_EXP 72
17086: PUSH
17087: LD_INT 1
17089: ST_TO_ADDR
// if p3 = 15 then
17090: LD_VAR 0 3
17094: PUSH
17095: LD_INT 15
17097: EQUAL
17098: IFFALSE 17108
// sKamikadze := true ;
17100: LD_ADDR_EXP 80
17104: PUSH
17105: LD_INT 1
17107: ST_TO_ADDR
// if p3 = 16 then
17108: LD_VAR 0 3
17112: PUSH
17113: LD_INT 16
17115: EQUAL
17116: IFFALSE 17126
// sTroll := true ;
17118: LD_ADDR_EXP 81
17122: PUSH
17123: LD_INT 1
17125: ST_TO_ADDR
// if p3 = 17 then
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 17
17133: EQUAL
17134: IFFALSE 17144
// sSlow := true ;
17136: LD_ADDR_EXP 82
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// if p3 = 18 then
17144: LD_VAR 0 3
17148: PUSH
17149: LD_INT 18
17151: EQUAL
17152: IFFALSE 17162
// sLack := true ;
17154: LD_ADDR_EXP 83
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// if p3 = 19 then
17162: LD_VAR 0 3
17166: PUSH
17167: LD_INT 19
17169: EQUAL
17170: IFFALSE 17180
// sTank := true ;
17172: LD_ADDR_EXP 85
17176: PUSH
17177: LD_INT 1
17179: ST_TO_ADDR
// if p3 = 20 then
17180: LD_VAR 0 3
17184: PUSH
17185: LD_INT 20
17187: EQUAL
17188: IFFALSE 17198
// sRemote := true ;
17190: LD_ADDR_EXP 86
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// if p3 = 21 then
17198: LD_VAR 0 3
17202: PUSH
17203: LD_INT 21
17205: EQUAL
17206: IFFALSE 17216
// sPowell := true ;
17208: LD_ADDR_EXP 87
17212: PUSH
17213: LD_INT 1
17215: ST_TO_ADDR
// if p3 = 22 then
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 22
17223: EQUAL
17224: IFFALSE 17234
// sTeleport := true ;
17226: LD_ADDR_EXP 90
17230: PUSH
17231: LD_INT 1
17233: ST_TO_ADDR
// if p3 = 23 then
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 23
17241: EQUAL
17242: IFFALSE 17252
// sOilTower := true ;
17244: LD_ADDR_EXP 92
17248: PUSH
17249: LD_INT 1
17251: ST_TO_ADDR
// if p3 = 24 then
17252: LD_VAR 0 3
17256: PUSH
17257: LD_INT 24
17259: EQUAL
17260: IFFALSE 17270
// sShovel := true ;
17262: LD_ADDR_EXP 93
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// if p3 = 25 then
17270: LD_VAR 0 3
17274: PUSH
17275: LD_INT 25
17277: EQUAL
17278: IFFALSE 17288
// sSheik := true ;
17280: LD_ADDR_EXP 94
17284: PUSH
17285: LD_INT 1
17287: ST_TO_ADDR
// if p3 = 26 then
17288: LD_VAR 0 3
17292: PUSH
17293: LD_INT 26
17295: EQUAL
17296: IFFALSE 17306
// sEarthquake := true ;
17298: LD_ADDR_EXP 96
17302: PUSH
17303: LD_INT 1
17305: ST_TO_ADDR
// if p3 = 27 then
17306: LD_VAR 0 3
17310: PUSH
17311: LD_INT 27
17313: EQUAL
17314: IFFALSE 17324
// sAI := true ;
17316: LD_ADDR_EXP 97
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// if p3 = 28 then
17324: LD_VAR 0 3
17328: PUSH
17329: LD_INT 28
17331: EQUAL
17332: IFFALSE 17342
// sCargo := true ;
17334: LD_ADDR_EXP 100
17338: PUSH
17339: LD_INT 1
17341: ST_TO_ADDR
// if p3 = 29 then
17342: LD_VAR 0 3
17346: PUSH
17347: LD_INT 29
17349: EQUAL
17350: IFFALSE 17360
// sDLaser := true ;
17352: LD_ADDR_EXP 101
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
// if p3 = 30 then
17360: LD_VAR 0 3
17364: PUSH
17365: LD_INT 30
17367: EQUAL
17368: IFFALSE 17378
// sExchange := true ;
17370: LD_ADDR_EXP 102
17374: PUSH
17375: LD_INT 1
17377: ST_TO_ADDR
// if p3 = 31 then
17378: LD_VAR 0 3
17382: PUSH
17383: LD_INT 31
17385: EQUAL
17386: IFFALSE 17396
// sFac := true ;
17388: LD_ADDR_EXP 103
17392: PUSH
17393: LD_INT 1
17395: ST_TO_ADDR
// if p3 = 32 then
17396: LD_VAR 0 3
17400: PUSH
17401: LD_INT 32
17403: EQUAL
17404: IFFALSE 17414
// sPower := true ;
17406: LD_ADDR_EXP 104
17410: PUSH
17411: LD_INT 1
17413: ST_TO_ADDR
// if p3 = 33 then
17414: LD_VAR 0 3
17418: PUSH
17419: LD_INT 33
17421: EQUAL
17422: IFFALSE 17432
// sRandom := true ;
17424: LD_ADDR_EXP 105
17428: PUSH
17429: LD_INT 1
17431: ST_TO_ADDR
// if p3 = 34 then
17432: LD_VAR 0 3
17436: PUSH
17437: LD_INT 34
17439: EQUAL
17440: IFFALSE 17450
// sShield := true ;
17442: LD_ADDR_EXP 106
17446: PUSH
17447: LD_INT 1
17449: ST_TO_ADDR
// if p3 = 35 then
17450: LD_VAR 0 3
17454: PUSH
17455: LD_INT 35
17457: EQUAL
17458: IFFALSE 17468
// sTime := true ;
17460: LD_ADDR_EXP 107
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// if p3 = 36 then
17468: LD_VAR 0 3
17472: PUSH
17473: LD_INT 36
17475: EQUAL
17476: IFFALSE 17486
// sTools := true ;
17478: LD_ADDR_EXP 108
17482: PUSH
17483: LD_INT 1
17485: ST_TO_ADDR
// if p3 = 101 then
17486: LD_VAR 0 3
17490: PUSH
17491: LD_INT 101
17493: EQUAL
17494: IFFALSE 17504
// sSold := true ;
17496: LD_ADDR_EXP 73
17500: PUSH
17501: LD_INT 1
17503: ST_TO_ADDR
// if p3 = 102 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 102
17511: EQUAL
17512: IFFALSE 17522
// sDiff := true ;
17514: LD_ADDR_EXP 74
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// if p3 = 103 then
17522: LD_VAR 0 3
17526: PUSH
17527: LD_INT 103
17529: EQUAL
17530: IFFALSE 17540
// sFog := true ;
17532: LD_ADDR_EXP 77
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// if p3 = 104 then
17540: LD_VAR 0 3
17544: PUSH
17545: LD_INT 104
17547: EQUAL
17548: IFFALSE 17558
// sReset := true ;
17550: LD_ADDR_EXP 78
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// if p3 = 105 then
17558: LD_VAR 0 3
17562: PUSH
17563: LD_INT 105
17565: EQUAL
17566: IFFALSE 17576
// sSun := true ;
17568: LD_ADDR_EXP 79
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
// if p3 = 106 then
17576: LD_VAR 0 3
17580: PUSH
17581: LD_INT 106
17583: EQUAL
17584: IFFALSE 17594
// sTiger := true ;
17586: LD_ADDR_EXP 75
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// if p3 = 107 then
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 107
17601: EQUAL
17602: IFFALSE 17612
// sBomb := true ;
17604: LD_ADDR_EXP 76
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// if p3 = 108 then
17612: LD_VAR 0 3
17616: PUSH
17617: LD_INT 108
17619: EQUAL
17620: IFFALSE 17630
// sWound := true ;
17622: LD_ADDR_EXP 84
17626: PUSH
17627: LD_INT 1
17629: ST_TO_ADDR
// if p3 = 109 then
17630: LD_VAR 0 3
17634: PUSH
17635: LD_INT 109
17637: EQUAL
17638: IFFALSE 17648
// sBetray := true ;
17640: LD_ADDR_EXP 88
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// if p3 = 110 then
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 110
17655: EQUAL
17656: IFFALSE 17666
// sContamin := true ;
17658: LD_ADDR_EXP 89
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// if p3 = 111 then
17666: LD_VAR 0 3
17670: PUSH
17671: LD_INT 111
17673: EQUAL
17674: IFFALSE 17684
// sOil := true ;
17676: LD_ADDR_EXP 91
17680: PUSH
17681: LD_INT 1
17683: ST_TO_ADDR
// if p3 = 112 then
17684: LD_VAR 0 3
17688: PUSH
17689: LD_INT 112
17691: EQUAL
17692: IFFALSE 17702
// sStu := true ;
17694: LD_ADDR_EXP 95
17698: PUSH
17699: LD_INT 1
17701: ST_TO_ADDR
// if p3 = 113 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 113
17709: EQUAL
17710: IFFALSE 17720
// sBazooka := true ;
17712: LD_ADDR_EXP 98
17716: PUSH
17717: LD_INT 1
17719: ST_TO_ADDR
// if p3 = 114 then
17720: LD_VAR 0 3
17724: PUSH
17725: LD_INT 114
17727: EQUAL
17728: IFFALSE 17738
// sMortar := true ;
17730: LD_ADDR_EXP 99
17734: PUSH
17735: LD_INT 1
17737: ST_TO_ADDR
// if p3 = 115 then
17738: LD_VAR 0 3
17742: PUSH
17743: LD_INT 115
17745: EQUAL
17746: IFFALSE 17756
// sRanger := true ;
17748: LD_ADDR_EXP 109
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
// if p3 = 116 then
17756: LD_VAR 0 3
17760: PUSH
17761: LD_INT 116
17763: EQUAL
17764: IFFALSE 17774
// sComputer := true ;
17766: LD_ADDR_EXP 110
17770: PUSH
17771: LD_INT 1
17773: ST_TO_ADDR
// if p3 = 117 then
17774: LD_VAR 0 3
17778: PUSH
17779: LD_INT 117
17781: EQUAL
17782: IFFALSE 17792
// s30 := true ;
17784: LD_ADDR_EXP 111
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// if p3 = 118 then
17792: LD_VAR 0 3
17796: PUSH
17797: LD_INT 118
17799: EQUAL
17800: IFFALSE 17810
// s60 := true ;
17802: LD_ADDR_EXP 112
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// end ; if p2 = 101 then
17810: LD_VAR 0 2
17814: PUSH
17815: LD_INT 101
17817: EQUAL
17818: IFFALSE 17946
// begin case p3 of 1 :
17820: LD_VAR 0 3
17824: PUSH
17825: LD_INT 1
17827: DOUBLE
17828: EQUAL
17829: IFTRUE 17833
17831: GO 17840
17833: POP
// hHackUnlimitedResources ; 2 :
17834: CALL 30044 0 0
17838: GO 17946
17840: LD_INT 2
17842: DOUBLE
17843: EQUAL
17844: IFTRUE 17848
17846: GO 17855
17848: POP
// hHackSetLevel10 ; 3 :
17849: CALL 30177 0 0
17853: GO 17946
17855: LD_INT 3
17857: DOUBLE
17858: EQUAL
17859: IFTRUE 17863
17861: GO 17870
17863: POP
// hHackSetLevel10YourUnits ; 4 :
17864: CALL 30262 0 0
17868: GO 17946
17870: LD_INT 4
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 17885
17878: POP
// hHackInvincible ; 5 :
17879: CALL 30710 0 0
17883: GO 17946
17885: LD_INT 5
17887: DOUBLE
17888: EQUAL
17889: IFTRUE 17893
17891: GO 17900
17893: POP
// hHackInvisible ; 6 :
17894: CALL 30821 0 0
17898: GO 17946
17900: LD_INT 6
17902: DOUBLE
17903: EQUAL
17904: IFTRUE 17908
17906: GO 17915
17908: POP
// hHackChangeYourSide ; 7 :
17909: CALL 30878 0 0
17913: GO 17946
17915: LD_INT 7
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 17930
17923: POP
// hHackChangeUnitSide ; 8 :
17924: CALL 30920 0 0
17928: GO 17946
17930: LD_INT 8
17932: DOUBLE
17933: EQUAL
17934: IFTRUE 17938
17936: GO 17945
17938: POP
// hHackFog ; end ;
17939: CALL 31021 0 0
17943: GO 17946
17945: POP
// end ; end ;
17946: LD_VAR 0 7
17950: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17951: GO 17953
17953: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17954: LD_STRING initStreamRollete();
17956: PPUSH
17957: CALL_OW 559
// InitStreamMode ;
17961: CALL 17973 0 0
// DefineStreamItems ( false ) ;
17965: LD_INT 0
17967: PPUSH
17968: CALL 18437 0 1
// end ;
17972: END
// function InitStreamMode ; begin
17973: LD_INT 0
17975: PPUSH
// streamModeActive := false ;
17976: LD_ADDR_EXP 56
17980: PUSH
17981: LD_INT 0
17983: ST_TO_ADDR
// normalCounter := 36 ;
17984: LD_ADDR_EXP 57
17988: PUSH
17989: LD_INT 36
17991: ST_TO_ADDR
// hardcoreCounter := 18 ;
17992: LD_ADDR_EXP 58
17996: PUSH
17997: LD_INT 18
17999: ST_TO_ADDR
// sRocket := false ;
18000: LD_ADDR_EXP 61
18004: PUSH
18005: LD_INT 0
18007: ST_TO_ADDR
// sSpeed := false ;
18008: LD_ADDR_EXP 60
18012: PUSH
18013: LD_INT 0
18015: ST_TO_ADDR
// sEngine := false ;
18016: LD_ADDR_EXP 62
18020: PUSH
18021: LD_INT 0
18023: ST_TO_ADDR
// sSpec := false ;
18024: LD_ADDR_EXP 59
18028: PUSH
18029: LD_INT 0
18031: ST_TO_ADDR
// sLevel := false ;
18032: LD_ADDR_EXP 63
18036: PUSH
18037: LD_INT 0
18039: ST_TO_ADDR
// sArmoury := false ;
18040: LD_ADDR_EXP 64
18044: PUSH
18045: LD_INT 0
18047: ST_TO_ADDR
// sRadar := false ;
18048: LD_ADDR_EXP 65
18052: PUSH
18053: LD_INT 0
18055: ST_TO_ADDR
// sBunker := false ;
18056: LD_ADDR_EXP 66
18060: PUSH
18061: LD_INT 0
18063: ST_TO_ADDR
// sHack := false ;
18064: LD_ADDR_EXP 67
18068: PUSH
18069: LD_INT 0
18071: ST_TO_ADDR
// sFire := false ;
18072: LD_ADDR_EXP 68
18076: PUSH
18077: LD_INT 0
18079: ST_TO_ADDR
// sRefresh := false ;
18080: LD_ADDR_EXP 69
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// sExp := false ;
18088: LD_ADDR_EXP 70
18092: PUSH
18093: LD_INT 0
18095: ST_TO_ADDR
// sDepot := false ;
18096: LD_ADDR_EXP 71
18100: PUSH
18101: LD_INT 0
18103: ST_TO_ADDR
// sFlag := false ;
18104: LD_ADDR_EXP 72
18108: PUSH
18109: LD_INT 0
18111: ST_TO_ADDR
// sKamikadze := false ;
18112: LD_ADDR_EXP 80
18116: PUSH
18117: LD_INT 0
18119: ST_TO_ADDR
// sTroll := false ;
18120: LD_ADDR_EXP 81
18124: PUSH
18125: LD_INT 0
18127: ST_TO_ADDR
// sSlow := false ;
18128: LD_ADDR_EXP 82
18132: PUSH
18133: LD_INT 0
18135: ST_TO_ADDR
// sLack := false ;
18136: LD_ADDR_EXP 83
18140: PUSH
18141: LD_INT 0
18143: ST_TO_ADDR
// sTank := false ;
18144: LD_ADDR_EXP 85
18148: PUSH
18149: LD_INT 0
18151: ST_TO_ADDR
// sRemote := false ;
18152: LD_ADDR_EXP 86
18156: PUSH
18157: LD_INT 0
18159: ST_TO_ADDR
// sPowell := false ;
18160: LD_ADDR_EXP 87
18164: PUSH
18165: LD_INT 0
18167: ST_TO_ADDR
// sTeleport := false ;
18168: LD_ADDR_EXP 90
18172: PUSH
18173: LD_INT 0
18175: ST_TO_ADDR
// sOilTower := false ;
18176: LD_ADDR_EXP 92
18180: PUSH
18181: LD_INT 0
18183: ST_TO_ADDR
// sShovel := false ;
18184: LD_ADDR_EXP 93
18188: PUSH
18189: LD_INT 0
18191: ST_TO_ADDR
// sSheik := false ;
18192: LD_ADDR_EXP 94
18196: PUSH
18197: LD_INT 0
18199: ST_TO_ADDR
// sEarthquake := false ;
18200: LD_ADDR_EXP 96
18204: PUSH
18205: LD_INT 0
18207: ST_TO_ADDR
// sAI := false ;
18208: LD_ADDR_EXP 97
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// sCargo := false ;
18216: LD_ADDR_EXP 100
18220: PUSH
18221: LD_INT 0
18223: ST_TO_ADDR
// sDLaser := false ;
18224: LD_ADDR_EXP 101
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// sExchange := false ;
18232: LD_ADDR_EXP 102
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// sFac := false ;
18240: LD_ADDR_EXP 103
18244: PUSH
18245: LD_INT 0
18247: ST_TO_ADDR
// sPower := false ;
18248: LD_ADDR_EXP 104
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// sRandom := false ;
18256: LD_ADDR_EXP 105
18260: PUSH
18261: LD_INT 0
18263: ST_TO_ADDR
// sShield := false ;
18264: LD_ADDR_EXP 106
18268: PUSH
18269: LD_INT 0
18271: ST_TO_ADDR
// sTime := false ;
18272: LD_ADDR_EXP 107
18276: PUSH
18277: LD_INT 0
18279: ST_TO_ADDR
// sTools := false ;
18280: LD_ADDR_EXP 108
18284: PUSH
18285: LD_INT 0
18287: ST_TO_ADDR
// sSold := false ;
18288: LD_ADDR_EXP 73
18292: PUSH
18293: LD_INT 0
18295: ST_TO_ADDR
// sDiff := false ;
18296: LD_ADDR_EXP 74
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// sFog := false ;
18304: LD_ADDR_EXP 77
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// sReset := false ;
18312: LD_ADDR_EXP 78
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// sSun := false ;
18320: LD_ADDR_EXP 79
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// sTiger := false ;
18328: LD_ADDR_EXP 75
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// sBomb := false ;
18336: LD_ADDR_EXP 76
18340: PUSH
18341: LD_INT 0
18343: ST_TO_ADDR
// sWound := false ;
18344: LD_ADDR_EXP 84
18348: PUSH
18349: LD_INT 0
18351: ST_TO_ADDR
// sBetray := false ;
18352: LD_ADDR_EXP 88
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sContamin := false ;
18360: LD_ADDR_EXP 89
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sOil := false ;
18368: LD_ADDR_EXP 91
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sStu := false ;
18376: LD_ADDR_EXP 95
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sBazooka := false ;
18384: LD_ADDR_EXP 98
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sMortar := false ;
18392: LD_ADDR_EXP 99
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sRanger := false ;
18400: LD_ADDR_EXP 109
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sComputer := false ;
18408: LD_ADDR_EXP 110
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// s30 := false ;
18416: LD_ADDR_EXP 111
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// s60 := false ;
18424: LD_ADDR_EXP 112
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// end ;
18432: LD_VAR 0 1
18436: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18437: LD_INT 0
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
// result := [ ] ;
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: EMPTY
18452: ST_TO_ADDR
// if campaign_id = 1 then
18453: LD_OWVAR 69
18457: PUSH
18458: LD_INT 1
18460: EQUAL
18461: IFFALSE 21627
// begin case mission_number of 1 :
18463: LD_OWVAR 70
18467: PUSH
18468: LD_INT 1
18470: DOUBLE
18471: EQUAL
18472: IFTRUE 18476
18474: GO 18552
18476: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18477: LD_ADDR_VAR 0 2
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: LD_INT 4
18487: PUSH
18488: LD_INT 11
18490: PUSH
18491: LD_INT 12
18493: PUSH
18494: LD_INT 15
18496: PUSH
18497: LD_INT 16
18499: PUSH
18500: LD_INT 22
18502: PUSH
18503: LD_INT 23
18505: PUSH
18506: LD_INT 26
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 101
18522: PUSH
18523: LD_INT 102
18525: PUSH
18526: LD_INT 106
18528: PUSH
18529: LD_INT 116
18531: PUSH
18532: LD_INT 117
18534: PUSH
18535: LD_INT 118
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: ST_TO_ADDR
18550: GO 21625
18552: LD_INT 2
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18644
18560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 23
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 101
18606: PUSH
18607: LD_INT 102
18609: PUSH
18610: LD_INT 105
18612: PUSH
18613: LD_INT 106
18615: PUSH
18616: LD_INT 108
18618: PUSH
18619: LD_INT 116
18621: PUSH
18622: LD_INT 117
18624: PUSH
18625: LD_INT 118
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: ST_TO_ADDR
18642: GO 21625
18644: LD_INT 3
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18740
18652: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18653: LD_ADDR_VAR 0 2
18657: PUSH
18658: LD_INT 2
18660: PUSH
18661: LD_INT 4
18663: PUSH
18664: LD_INT 5
18666: PUSH
18667: LD_INT 11
18669: PUSH
18670: LD_INT 12
18672: PUSH
18673: LD_INT 15
18675: PUSH
18676: LD_INT 16
18678: PUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 26
18684: PUSH
18685: LD_INT 36
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 101
18702: PUSH
18703: LD_INT 102
18705: PUSH
18706: LD_INT 105
18708: PUSH
18709: LD_INT 106
18711: PUSH
18712: LD_INT 108
18714: PUSH
18715: LD_INT 116
18717: PUSH
18718: LD_INT 117
18720: PUSH
18721: LD_INT 118
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: ST_TO_ADDR
18738: GO 21625
18740: LD_INT 4
18742: DOUBLE
18743: EQUAL
18744: IFTRUE 18748
18746: GO 18844
18748: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18749: LD_ADDR_VAR 0 2
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 4
18759: PUSH
18760: LD_INT 5
18762: PUSH
18763: LD_INT 8
18765: PUSH
18766: LD_INT 11
18768: PUSH
18769: LD_INT 12
18771: PUSH
18772: LD_INT 15
18774: PUSH
18775: LD_INT 16
18777: PUSH
18778: LD_INT 22
18780: PUSH
18781: LD_INT 23
18783: PUSH
18784: LD_INT 26
18786: PUSH
18787: LD_INT 36
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 101
18806: PUSH
18807: LD_INT 102
18809: PUSH
18810: LD_INT 105
18812: PUSH
18813: LD_INT 106
18815: PUSH
18816: LD_INT 108
18818: PUSH
18819: LD_INT 116
18821: PUSH
18822: LD_INT 117
18824: PUSH
18825: LD_INT 118
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: ST_TO_ADDR
18842: GO 21625
18844: LD_INT 5
18846: DOUBLE
18847: EQUAL
18848: IFTRUE 18852
18850: GO 18964
18852: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18853: LD_ADDR_VAR 0 2
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 4
18863: PUSH
18864: LD_INT 5
18866: PUSH
18867: LD_INT 6
18869: PUSH
18870: LD_INT 8
18872: PUSH
18873: LD_INT 11
18875: PUSH
18876: LD_INT 12
18878: PUSH
18879: LD_INT 15
18881: PUSH
18882: LD_INT 16
18884: PUSH
18885: LD_INT 22
18887: PUSH
18888: LD_INT 23
18890: PUSH
18891: LD_INT 25
18893: PUSH
18894: LD_INT 26
18896: PUSH
18897: LD_INT 36
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 101
18918: PUSH
18919: LD_INT 102
18921: PUSH
18922: LD_INT 105
18924: PUSH
18925: LD_INT 106
18927: PUSH
18928: LD_INT 108
18930: PUSH
18931: LD_INT 109
18933: PUSH
18934: LD_INT 112
18936: PUSH
18937: LD_INT 116
18939: PUSH
18940: LD_INT 117
18942: PUSH
18943: LD_INT 118
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: ST_TO_ADDR
18962: GO 21625
18964: LD_INT 6
18966: DOUBLE
18967: EQUAL
18968: IFTRUE 18972
18970: GO 19104
18972: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18973: LD_ADDR_VAR 0 2
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: LD_INT 4
18983: PUSH
18984: LD_INT 5
18986: PUSH
18987: LD_INT 6
18989: PUSH
18990: LD_INT 8
18992: PUSH
18993: LD_INT 11
18995: PUSH
18996: LD_INT 12
18998: PUSH
18999: LD_INT 15
19001: PUSH
19002: LD_INT 16
19004: PUSH
19005: LD_INT 20
19007: PUSH
19008: LD_INT 21
19010: PUSH
19011: LD_INT 22
19013: PUSH
19014: LD_INT 23
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 26
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 31
19028: PUSH
19029: LD_INT 32
19031: PUSH
19032: LD_INT 36
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 101
19058: PUSH
19059: LD_INT 102
19061: PUSH
19062: LD_INT 105
19064: PUSH
19065: LD_INT 106
19067: PUSH
19068: LD_INT 108
19070: PUSH
19071: LD_INT 109
19073: PUSH
19074: LD_INT 112
19076: PUSH
19077: LD_INT 116
19079: PUSH
19080: LD_INT 117
19082: PUSH
19083: LD_INT 118
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: ST_TO_ADDR
19102: GO 21625
19104: LD_INT 7
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19224
19112: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 4
19123: PUSH
19124: LD_INT 5
19126: PUSH
19127: LD_INT 7
19129: PUSH
19130: LD_INT 11
19132: PUSH
19133: LD_INT 12
19135: PUSH
19136: LD_INT 15
19138: PUSH
19139: LD_INT 16
19141: PUSH
19142: LD_INT 20
19144: PUSH
19145: LD_INT 21
19147: PUSH
19148: LD_INT 22
19150: PUSH
19151: LD_INT 23
19153: PUSH
19154: LD_INT 25
19156: PUSH
19157: LD_INT 26
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 101
19178: PUSH
19179: LD_INT 102
19181: PUSH
19182: LD_INT 103
19184: PUSH
19185: LD_INT 105
19187: PUSH
19188: LD_INT 106
19190: PUSH
19191: LD_INT 108
19193: PUSH
19194: LD_INT 112
19196: PUSH
19197: LD_INT 116
19199: PUSH
19200: LD_INT 117
19202: PUSH
19203: LD_INT 118
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: ST_TO_ADDR
19222: GO 21625
19224: LD_INT 8
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19372
19232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 4
19243: PUSH
19244: LD_INT 5
19246: PUSH
19247: LD_INT 6
19249: PUSH
19250: LD_INT 7
19252: PUSH
19253: LD_INT 8
19255: PUSH
19256: LD_INT 11
19258: PUSH
19259: LD_INT 12
19261: PUSH
19262: LD_INT 15
19264: PUSH
19265: LD_INT 16
19267: PUSH
19268: LD_INT 20
19270: PUSH
19271: LD_INT 21
19273: PUSH
19274: LD_INT 22
19276: PUSH
19277: LD_INT 23
19279: PUSH
19280: LD_INT 25
19282: PUSH
19283: LD_INT 26
19285: PUSH
19286: LD_INT 30
19288: PUSH
19289: LD_INT 31
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 36
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 101
19322: PUSH
19323: LD_INT 102
19325: PUSH
19326: LD_INT 103
19328: PUSH
19329: LD_INT 105
19331: PUSH
19332: LD_INT 106
19334: PUSH
19335: LD_INT 108
19337: PUSH
19338: LD_INT 109
19340: PUSH
19341: LD_INT 112
19343: PUSH
19344: LD_INT 116
19346: PUSH
19347: LD_INT 117
19349: PUSH
19350: LD_INT 118
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: ST_TO_ADDR
19370: GO 21625
19372: LD_INT 9
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 19528
19380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 4
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: LD_INT 6
19397: PUSH
19398: LD_INT 7
19400: PUSH
19401: LD_INT 8
19403: PUSH
19404: LD_INT 11
19406: PUSH
19407: LD_INT 12
19409: PUSH
19410: LD_INT 15
19412: PUSH
19413: LD_INT 16
19415: PUSH
19416: LD_INT 20
19418: PUSH
19419: LD_INT 21
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_INT 23
19427: PUSH
19428: LD_INT 25
19430: PUSH
19431: LD_INT 26
19433: PUSH
19434: LD_INT 28
19436: PUSH
19437: LD_INT 30
19439: PUSH
19440: LD_INT 31
19442: PUSH
19443: LD_INT 32
19445: PUSH
19446: LD_INT 36
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 101
19474: PUSH
19475: LD_INT 102
19477: PUSH
19478: LD_INT 103
19480: PUSH
19481: LD_INT 105
19483: PUSH
19484: LD_INT 106
19486: PUSH
19487: LD_INT 108
19489: PUSH
19490: LD_INT 109
19492: PUSH
19493: LD_INT 112
19495: PUSH
19496: LD_INT 114
19498: PUSH
19499: LD_INT 116
19501: PUSH
19502: LD_INT 117
19504: PUSH
19505: LD_INT 118
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: ST_TO_ADDR
19526: GO 21625
19528: LD_INT 10
19530: DOUBLE
19531: EQUAL
19532: IFTRUE 19536
19534: GO 19732
19536: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19537: LD_ADDR_VAR 0 2
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 4
19547: PUSH
19548: LD_INT 5
19550: PUSH
19551: LD_INT 6
19553: PUSH
19554: LD_INT 7
19556: PUSH
19557: LD_INT 8
19559: PUSH
19560: LD_INT 9
19562: PUSH
19563: LD_INT 10
19565: PUSH
19566: LD_INT 11
19568: PUSH
19569: LD_INT 12
19571: PUSH
19572: LD_INT 13
19574: PUSH
19575: LD_INT 14
19577: PUSH
19578: LD_INT 15
19580: PUSH
19581: LD_INT 16
19583: PUSH
19584: LD_INT 17
19586: PUSH
19587: LD_INT 18
19589: PUSH
19590: LD_INT 19
19592: PUSH
19593: LD_INT 20
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_INT 23
19604: PUSH
19605: LD_INT 24
19607: PUSH
19608: LD_INT 25
19610: PUSH
19611: LD_INT 26
19613: PUSH
19614: LD_INT 28
19616: PUSH
19617: LD_INT 30
19619: PUSH
19620: LD_INT 31
19622: PUSH
19623: LD_INT 32
19625: PUSH
19626: LD_INT 36
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 101
19662: PUSH
19663: LD_INT 102
19665: PUSH
19666: LD_INT 103
19668: PUSH
19669: LD_INT 104
19671: PUSH
19672: LD_INT 105
19674: PUSH
19675: LD_INT 106
19677: PUSH
19678: LD_INT 107
19680: PUSH
19681: LD_INT 108
19683: PUSH
19684: LD_INT 109
19686: PUSH
19687: LD_INT 110
19689: PUSH
19690: LD_INT 111
19692: PUSH
19693: LD_INT 112
19695: PUSH
19696: LD_INT 114
19698: PUSH
19699: LD_INT 116
19701: PUSH
19702: LD_INT 117
19704: PUSH
19705: LD_INT 118
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: ST_TO_ADDR
19730: GO 21625
19732: LD_INT 11
19734: DOUBLE
19735: EQUAL
19736: IFTRUE 19740
19738: GO 19944
19740: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19741: LD_ADDR_VAR 0 2
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: LD_INT 4
19754: PUSH
19755: LD_INT 5
19757: PUSH
19758: LD_INT 6
19760: PUSH
19761: LD_INT 7
19763: PUSH
19764: LD_INT 8
19766: PUSH
19767: LD_INT 9
19769: PUSH
19770: LD_INT 10
19772: PUSH
19773: LD_INT 11
19775: PUSH
19776: LD_INT 12
19778: PUSH
19779: LD_INT 13
19781: PUSH
19782: LD_INT 14
19784: PUSH
19785: LD_INT 15
19787: PUSH
19788: LD_INT 16
19790: PUSH
19791: LD_INT 17
19793: PUSH
19794: LD_INT 18
19796: PUSH
19797: LD_INT 19
19799: PUSH
19800: LD_INT 20
19802: PUSH
19803: LD_INT 21
19805: PUSH
19806: LD_INT 22
19808: PUSH
19809: LD_INT 23
19811: PUSH
19812: LD_INT 24
19814: PUSH
19815: LD_INT 25
19817: PUSH
19818: LD_INT 26
19820: PUSH
19821: LD_INT 28
19823: PUSH
19824: LD_INT 30
19826: PUSH
19827: LD_INT 31
19829: PUSH
19830: LD_INT 32
19832: PUSH
19833: LD_INT 34
19835: PUSH
19836: LD_INT 36
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 103
19880: PUSH
19881: LD_INT 104
19883: PUSH
19884: LD_INT 105
19886: PUSH
19887: LD_INT 106
19889: PUSH
19890: LD_INT 107
19892: PUSH
19893: LD_INT 108
19895: PUSH
19896: LD_INT 109
19898: PUSH
19899: LD_INT 110
19901: PUSH
19902: LD_INT 111
19904: PUSH
19905: LD_INT 112
19907: PUSH
19908: LD_INT 114
19910: PUSH
19911: LD_INT 116
19913: PUSH
19914: LD_INT 117
19916: PUSH
19917: LD_INT 118
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: ST_TO_ADDR
19942: GO 21625
19944: LD_INT 12
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 20172
19952: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19953: LD_ADDR_VAR 0 2
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 3
19966: PUSH
19967: LD_INT 4
19969: PUSH
19970: LD_INT 5
19972: PUSH
19973: LD_INT 6
19975: PUSH
19976: LD_INT 7
19978: PUSH
19979: LD_INT 8
19981: PUSH
19982: LD_INT 9
19984: PUSH
19985: LD_INT 10
19987: PUSH
19988: LD_INT 11
19990: PUSH
19991: LD_INT 12
19993: PUSH
19994: LD_INT 13
19996: PUSH
19997: LD_INT 14
19999: PUSH
20000: LD_INT 15
20002: PUSH
20003: LD_INT 16
20005: PUSH
20006: LD_INT 17
20008: PUSH
20009: LD_INT 18
20011: PUSH
20012: LD_INT 19
20014: PUSH
20015: LD_INT 20
20017: PUSH
20018: LD_INT 21
20020: PUSH
20021: LD_INT 22
20023: PUSH
20024: LD_INT 23
20026: PUSH
20027: LD_INT 24
20029: PUSH
20030: LD_INT 25
20032: PUSH
20033: LD_INT 26
20035: PUSH
20036: LD_INT 27
20038: PUSH
20039: LD_INT 28
20041: PUSH
20042: LD_INT 30
20044: PUSH
20045: LD_INT 31
20047: PUSH
20048: LD_INT 32
20050: PUSH
20051: LD_INT 33
20053: PUSH
20054: LD_INT 34
20056: PUSH
20057: LD_INT 36
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 101
20098: PUSH
20099: LD_INT 102
20101: PUSH
20102: LD_INT 103
20104: PUSH
20105: LD_INT 104
20107: PUSH
20108: LD_INT 105
20110: PUSH
20111: LD_INT 106
20113: PUSH
20114: LD_INT 107
20116: PUSH
20117: LD_INT 108
20119: PUSH
20120: LD_INT 109
20122: PUSH
20123: LD_INT 110
20125: PUSH
20126: LD_INT 111
20128: PUSH
20129: LD_INT 112
20131: PUSH
20132: LD_INT 113
20134: PUSH
20135: LD_INT 114
20137: PUSH
20138: LD_INT 116
20140: PUSH
20141: LD_INT 117
20143: PUSH
20144: LD_INT 118
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: ST_TO_ADDR
20170: GO 21625
20172: LD_INT 13
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20388
20180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: LD_INT 3
20194: PUSH
20195: LD_INT 4
20197: PUSH
20198: LD_INT 5
20200: PUSH
20201: LD_INT 8
20203: PUSH
20204: LD_INT 9
20206: PUSH
20207: LD_INT 10
20209: PUSH
20210: LD_INT 11
20212: PUSH
20213: LD_INT 12
20215: PUSH
20216: LD_INT 14
20218: PUSH
20219: LD_INT 15
20221: PUSH
20222: LD_INT 16
20224: PUSH
20225: LD_INT 17
20227: PUSH
20228: LD_INT 18
20230: PUSH
20231: LD_INT 19
20233: PUSH
20234: LD_INT 20
20236: PUSH
20237: LD_INT 21
20239: PUSH
20240: LD_INT 22
20242: PUSH
20243: LD_INT 23
20245: PUSH
20246: LD_INT 24
20248: PUSH
20249: LD_INT 25
20251: PUSH
20252: LD_INT 26
20254: PUSH
20255: LD_INT 27
20257: PUSH
20258: LD_INT 28
20260: PUSH
20261: LD_INT 30
20263: PUSH
20264: LD_INT 31
20266: PUSH
20267: LD_INT 32
20269: PUSH
20270: LD_INT 33
20272: PUSH
20273: LD_INT 34
20275: PUSH
20276: LD_INT 36
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 101
20314: PUSH
20315: LD_INT 102
20317: PUSH
20318: LD_INT 103
20320: PUSH
20321: LD_INT 104
20323: PUSH
20324: LD_INT 105
20326: PUSH
20327: LD_INT 106
20329: PUSH
20330: LD_INT 107
20332: PUSH
20333: LD_INT 108
20335: PUSH
20336: LD_INT 109
20338: PUSH
20339: LD_INT 110
20341: PUSH
20342: LD_INT 111
20344: PUSH
20345: LD_INT 112
20347: PUSH
20348: LD_INT 113
20350: PUSH
20351: LD_INT 114
20353: PUSH
20354: LD_INT 116
20356: PUSH
20357: LD_INT 117
20359: PUSH
20360: LD_INT 118
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: ST_TO_ADDR
20386: GO 21625
20388: LD_INT 14
20390: DOUBLE
20391: EQUAL
20392: IFTRUE 20396
20394: GO 20620
20396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20397: LD_ADDR_VAR 0 2
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: LD_INT 3
20410: PUSH
20411: LD_INT 4
20413: PUSH
20414: LD_INT 5
20416: PUSH
20417: LD_INT 6
20419: PUSH
20420: LD_INT 7
20422: PUSH
20423: LD_INT 8
20425: PUSH
20426: LD_INT 9
20428: PUSH
20429: LD_INT 10
20431: PUSH
20432: LD_INT 11
20434: PUSH
20435: LD_INT 12
20437: PUSH
20438: LD_INT 13
20440: PUSH
20441: LD_INT 14
20443: PUSH
20444: LD_INT 15
20446: PUSH
20447: LD_INT 16
20449: PUSH
20450: LD_INT 17
20452: PUSH
20453: LD_INT 18
20455: PUSH
20456: LD_INT 19
20458: PUSH
20459: LD_INT 20
20461: PUSH
20462: LD_INT 21
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_INT 23
20470: PUSH
20471: LD_INT 24
20473: PUSH
20474: LD_INT 25
20476: PUSH
20477: LD_INT 26
20479: PUSH
20480: LD_INT 27
20482: PUSH
20483: LD_INT 28
20485: PUSH
20486: LD_INT 29
20488: PUSH
20489: LD_INT 30
20491: PUSH
20492: LD_INT 31
20494: PUSH
20495: LD_INT 32
20497: PUSH
20498: LD_INT 33
20500: PUSH
20501: LD_INT 34
20503: PUSH
20504: LD_INT 36
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 101
20546: PUSH
20547: LD_INT 102
20549: PUSH
20550: LD_INT 103
20552: PUSH
20553: LD_INT 104
20555: PUSH
20556: LD_INT 105
20558: PUSH
20559: LD_INT 106
20561: PUSH
20562: LD_INT 107
20564: PUSH
20565: LD_INT 108
20567: PUSH
20568: LD_INT 109
20570: PUSH
20571: LD_INT 110
20573: PUSH
20574: LD_INT 111
20576: PUSH
20577: LD_INT 112
20579: PUSH
20580: LD_INT 113
20582: PUSH
20583: LD_INT 114
20585: PUSH
20586: LD_INT 116
20588: PUSH
20589: LD_INT 117
20591: PUSH
20592: LD_INT 118
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: ST_TO_ADDR
20618: GO 21625
20620: LD_INT 15
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20852
20628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20629: LD_ADDR_VAR 0 2
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 3
20642: PUSH
20643: LD_INT 4
20645: PUSH
20646: LD_INT 5
20648: PUSH
20649: LD_INT 6
20651: PUSH
20652: LD_INT 7
20654: PUSH
20655: LD_INT 8
20657: PUSH
20658: LD_INT 9
20660: PUSH
20661: LD_INT 10
20663: PUSH
20664: LD_INT 11
20666: PUSH
20667: LD_INT 12
20669: PUSH
20670: LD_INT 13
20672: PUSH
20673: LD_INT 14
20675: PUSH
20676: LD_INT 15
20678: PUSH
20679: LD_INT 16
20681: PUSH
20682: LD_INT 17
20684: PUSH
20685: LD_INT 18
20687: PUSH
20688: LD_INT 19
20690: PUSH
20691: LD_INT 20
20693: PUSH
20694: LD_INT 21
20696: PUSH
20697: LD_INT 22
20699: PUSH
20700: LD_INT 23
20702: PUSH
20703: LD_INT 24
20705: PUSH
20706: LD_INT 25
20708: PUSH
20709: LD_INT 26
20711: PUSH
20712: LD_INT 27
20714: PUSH
20715: LD_INT 28
20717: PUSH
20718: LD_INT 29
20720: PUSH
20721: LD_INT 30
20723: PUSH
20724: LD_INT 31
20726: PUSH
20727: LD_INT 32
20729: PUSH
20730: LD_INT 33
20732: PUSH
20733: LD_INT 34
20735: PUSH
20736: LD_INT 36
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 101
20778: PUSH
20779: LD_INT 102
20781: PUSH
20782: LD_INT 103
20784: PUSH
20785: LD_INT 104
20787: PUSH
20788: LD_INT 105
20790: PUSH
20791: LD_INT 106
20793: PUSH
20794: LD_INT 107
20796: PUSH
20797: LD_INT 108
20799: PUSH
20800: LD_INT 109
20802: PUSH
20803: LD_INT 110
20805: PUSH
20806: LD_INT 111
20808: PUSH
20809: LD_INT 112
20811: PUSH
20812: LD_INT 113
20814: PUSH
20815: LD_INT 114
20817: PUSH
20818: LD_INT 116
20820: PUSH
20821: LD_INT 117
20823: PUSH
20824: LD_INT 118
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: ST_TO_ADDR
20850: GO 21625
20852: LD_INT 16
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20996
20860: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20861: LD_ADDR_VAR 0 2
20865: PUSH
20866: LD_INT 2
20868: PUSH
20869: LD_INT 4
20871: PUSH
20872: LD_INT 5
20874: PUSH
20875: LD_INT 7
20877: PUSH
20878: LD_INT 11
20880: PUSH
20881: LD_INT 12
20883: PUSH
20884: LD_INT 15
20886: PUSH
20887: LD_INT 16
20889: PUSH
20890: LD_INT 20
20892: PUSH
20893: LD_INT 21
20895: PUSH
20896: LD_INT 22
20898: PUSH
20899: LD_INT 23
20901: PUSH
20902: LD_INT 25
20904: PUSH
20905: LD_INT 26
20907: PUSH
20908: LD_INT 30
20910: PUSH
20911: LD_INT 31
20913: PUSH
20914: LD_INT 32
20916: PUSH
20917: LD_INT 33
20919: PUSH
20920: LD_INT 34
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 101
20946: PUSH
20947: LD_INT 102
20949: PUSH
20950: LD_INT 103
20952: PUSH
20953: LD_INT 106
20955: PUSH
20956: LD_INT 108
20958: PUSH
20959: LD_INT 112
20961: PUSH
20962: LD_INT 113
20964: PUSH
20965: LD_INT 114
20967: PUSH
20968: LD_INT 116
20970: PUSH
20971: LD_INT 117
20973: PUSH
20974: LD_INT 118
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: ST_TO_ADDR
20994: GO 21625
20996: LD_INT 17
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21228
21004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 3
21018: PUSH
21019: LD_INT 4
21021: PUSH
21022: LD_INT 5
21024: PUSH
21025: LD_INT 6
21027: PUSH
21028: LD_INT 7
21030: PUSH
21031: LD_INT 8
21033: PUSH
21034: LD_INT 9
21036: PUSH
21037: LD_INT 10
21039: PUSH
21040: LD_INT 11
21042: PUSH
21043: LD_INT 12
21045: PUSH
21046: LD_INT 13
21048: PUSH
21049: LD_INT 14
21051: PUSH
21052: LD_INT 15
21054: PUSH
21055: LD_INT 16
21057: PUSH
21058: LD_INT 17
21060: PUSH
21061: LD_INT 18
21063: PUSH
21064: LD_INT 19
21066: PUSH
21067: LD_INT 20
21069: PUSH
21070: LD_INT 21
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_INT 23
21078: PUSH
21079: LD_INT 24
21081: PUSH
21082: LD_INT 25
21084: PUSH
21085: LD_INT 26
21087: PUSH
21088: LD_INT 27
21090: PUSH
21091: LD_INT 28
21093: PUSH
21094: LD_INT 29
21096: PUSH
21097: LD_INT 30
21099: PUSH
21100: LD_INT 31
21102: PUSH
21103: LD_INT 32
21105: PUSH
21106: LD_INT 33
21108: PUSH
21109: LD_INT 34
21111: PUSH
21112: LD_INT 36
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 101
21154: PUSH
21155: LD_INT 102
21157: PUSH
21158: LD_INT 103
21160: PUSH
21161: LD_INT 104
21163: PUSH
21164: LD_INT 105
21166: PUSH
21167: LD_INT 106
21169: PUSH
21170: LD_INT 107
21172: PUSH
21173: LD_INT 108
21175: PUSH
21176: LD_INT 109
21178: PUSH
21179: LD_INT 110
21181: PUSH
21182: LD_INT 111
21184: PUSH
21185: LD_INT 112
21187: PUSH
21188: LD_INT 113
21190: PUSH
21191: LD_INT 114
21193: PUSH
21194: LD_INT 116
21196: PUSH
21197: LD_INT 117
21199: PUSH
21200: LD_INT 118
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: ST_TO_ADDR
21226: GO 21625
21228: LD_INT 18
21230: DOUBLE
21231: EQUAL
21232: IFTRUE 21236
21234: GO 21384
21236: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21237: LD_ADDR_VAR 0 2
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: LD_INT 4
21247: PUSH
21248: LD_INT 5
21250: PUSH
21251: LD_INT 7
21253: PUSH
21254: LD_INT 11
21256: PUSH
21257: LD_INT 12
21259: PUSH
21260: LD_INT 15
21262: PUSH
21263: LD_INT 16
21265: PUSH
21266: LD_INT 20
21268: PUSH
21269: LD_INT 21
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_INT 23
21277: PUSH
21278: LD_INT 25
21280: PUSH
21281: LD_INT 26
21283: PUSH
21284: LD_INT 30
21286: PUSH
21287: LD_INT 31
21289: PUSH
21290: LD_INT 32
21292: PUSH
21293: LD_INT 33
21295: PUSH
21296: LD_INT 34
21298: PUSH
21299: LD_INT 35
21301: PUSH
21302: LD_INT 36
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 101
21330: PUSH
21331: LD_INT 102
21333: PUSH
21334: LD_INT 103
21336: PUSH
21337: LD_INT 106
21339: PUSH
21340: LD_INT 108
21342: PUSH
21343: LD_INT 112
21345: PUSH
21346: LD_INT 113
21348: PUSH
21349: LD_INT 114
21351: PUSH
21352: LD_INT 115
21354: PUSH
21355: LD_INT 116
21357: PUSH
21358: LD_INT 117
21360: PUSH
21361: LD_INT 118
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: ST_TO_ADDR
21382: GO 21625
21384: LD_INT 19
21386: DOUBLE
21387: EQUAL
21388: IFTRUE 21392
21390: GO 21624
21392: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21393: LD_ADDR_VAR 0 2
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 3
21406: PUSH
21407: LD_INT 4
21409: PUSH
21410: LD_INT 5
21412: PUSH
21413: LD_INT 6
21415: PUSH
21416: LD_INT 7
21418: PUSH
21419: LD_INT 8
21421: PUSH
21422: LD_INT 9
21424: PUSH
21425: LD_INT 10
21427: PUSH
21428: LD_INT 11
21430: PUSH
21431: LD_INT 12
21433: PUSH
21434: LD_INT 13
21436: PUSH
21437: LD_INT 14
21439: PUSH
21440: LD_INT 15
21442: PUSH
21443: LD_INT 16
21445: PUSH
21446: LD_INT 17
21448: PUSH
21449: LD_INT 18
21451: PUSH
21452: LD_INT 19
21454: PUSH
21455: LD_INT 20
21457: PUSH
21458: LD_INT 21
21460: PUSH
21461: LD_INT 22
21463: PUSH
21464: LD_INT 23
21466: PUSH
21467: LD_INT 24
21469: PUSH
21470: LD_INT 25
21472: PUSH
21473: LD_INT 26
21475: PUSH
21476: LD_INT 27
21478: PUSH
21479: LD_INT 28
21481: PUSH
21482: LD_INT 29
21484: PUSH
21485: LD_INT 30
21487: PUSH
21488: LD_INT 31
21490: PUSH
21491: LD_INT 32
21493: PUSH
21494: LD_INT 33
21496: PUSH
21497: LD_INT 34
21499: PUSH
21500: LD_INT 35
21502: PUSH
21503: LD_INT 36
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 101
21546: PUSH
21547: LD_INT 102
21549: PUSH
21550: LD_INT 103
21552: PUSH
21553: LD_INT 104
21555: PUSH
21556: LD_INT 105
21558: PUSH
21559: LD_INT 106
21561: PUSH
21562: LD_INT 107
21564: PUSH
21565: LD_INT 108
21567: PUSH
21568: LD_INT 109
21570: PUSH
21571: LD_INT 110
21573: PUSH
21574: LD_INT 111
21576: PUSH
21577: LD_INT 112
21579: PUSH
21580: LD_INT 113
21582: PUSH
21583: LD_INT 114
21585: PUSH
21586: LD_INT 115
21588: PUSH
21589: LD_INT 116
21591: PUSH
21592: LD_INT 117
21594: PUSH
21595: LD_INT 118
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: ST_TO_ADDR
21622: GO 21625
21624: POP
// end else
21625: GO 21856
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21627: LD_ADDR_VAR 0 2
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: LD_INT 3
21640: PUSH
21641: LD_INT 4
21643: PUSH
21644: LD_INT 5
21646: PUSH
21647: LD_INT 6
21649: PUSH
21650: LD_INT 7
21652: PUSH
21653: LD_INT 8
21655: PUSH
21656: LD_INT 9
21658: PUSH
21659: LD_INT 10
21661: PUSH
21662: LD_INT 11
21664: PUSH
21665: LD_INT 12
21667: PUSH
21668: LD_INT 13
21670: PUSH
21671: LD_INT 14
21673: PUSH
21674: LD_INT 15
21676: PUSH
21677: LD_INT 16
21679: PUSH
21680: LD_INT 17
21682: PUSH
21683: LD_INT 18
21685: PUSH
21686: LD_INT 19
21688: PUSH
21689: LD_INT 20
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 22
21697: PUSH
21698: LD_INT 23
21700: PUSH
21701: LD_INT 24
21703: PUSH
21704: LD_INT 25
21706: PUSH
21707: LD_INT 26
21709: PUSH
21710: LD_INT 27
21712: PUSH
21713: LD_INT 28
21715: PUSH
21716: LD_INT 29
21718: PUSH
21719: LD_INT 30
21721: PUSH
21722: LD_INT 31
21724: PUSH
21725: LD_INT 32
21727: PUSH
21728: LD_INT 33
21730: PUSH
21731: LD_INT 34
21733: PUSH
21734: LD_INT 35
21736: PUSH
21737: LD_INT 36
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 101
21780: PUSH
21781: LD_INT 102
21783: PUSH
21784: LD_INT 103
21786: PUSH
21787: LD_INT 104
21789: PUSH
21790: LD_INT 105
21792: PUSH
21793: LD_INT 106
21795: PUSH
21796: LD_INT 107
21798: PUSH
21799: LD_INT 108
21801: PUSH
21802: LD_INT 109
21804: PUSH
21805: LD_INT 110
21807: PUSH
21808: LD_INT 111
21810: PUSH
21811: LD_INT 112
21813: PUSH
21814: LD_INT 113
21816: PUSH
21817: LD_INT 114
21819: PUSH
21820: LD_INT 115
21822: PUSH
21823: LD_INT 116
21825: PUSH
21826: LD_INT 117
21828: PUSH
21829: LD_INT 118
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: ST_TO_ADDR
// if result then
21856: LD_VAR 0 2
21860: IFFALSE 22646
// begin normal :=  ;
21862: LD_ADDR_VAR 0 5
21866: PUSH
21867: LD_STRING 
21869: ST_TO_ADDR
// hardcore :=  ;
21870: LD_ADDR_VAR 0 6
21874: PUSH
21875: LD_STRING 
21877: ST_TO_ADDR
// active :=  ;
21878: LD_ADDR_VAR 0 7
21882: PUSH
21883: LD_STRING 
21885: ST_TO_ADDR
// for i = 1 to normalCounter do
21886: LD_ADDR_VAR 0 8
21890: PUSH
21891: DOUBLE
21892: LD_INT 1
21894: DEC
21895: ST_TO_ADDR
21896: LD_EXP 57
21900: PUSH
21901: FOR_TO
21902: IFFALSE 22003
// begin tmp := 0 ;
21904: LD_ADDR_VAR 0 3
21908: PUSH
21909: LD_STRING 0
21911: ST_TO_ADDR
// if result [ 1 ] then
21912: LD_VAR 0 2
21916: PUSH
21917: LD_INT 1
21919: ARRAY
21920: IFFALSE 21985
// if result [ 1 ] [ 1 ] = i then
21922: LD_VAR 0 2
21926: PUSH
21927: LD_INT 1
21929: ARRAY
21930: PUSH
21931: LD_INT 1
21933: ARRAY
21934: PUSH
21935: LD_VAR 0 8
21939: EQUAL
21940: IFFALSE 21985
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_VAR 0 2
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 2
21959: PUSH
21960: LD_INT 1
21962: ARRAY
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 3
21971: PPUSH
21972: CALL_OW 1
21976: ST_TO_ADDR
// tmp := 1 ;
21977: LD_ADDR_VAR 0 3
21981: PUSH
21982: LD_STRING 1
21984: ST_TO_ADDR
// end ; normal := normal & tmp ;
21985: LD_ADDR_VAR 0 5
21989: PUSH
21990: LD_VAR 0 5
21994: PUSH
21995: LD_VAR 0 3
21999: STR
22000: ST_TO_ADDR
// end ;
22001: GO 21901
22003: POP
22004: POP
// for i = 1 to hardcoreCounter do
22005: LD_ADDR_VAR 0 8
22009: PUSH
22010: DOUBLE
22011: LD_INT 1
22013: DEC
22014: ST_TO_ADDR
22015: LD_EXP 58
22019: PUSH
22020: FOR_TO
22021: IFFALSE 22126
// begin tmp := 0 ;
22023: LD_ADDR_VAR 0 3
22027: PUSH
22028: LD_STRING 0
22030: ST_TO_ADDR
// if result [ 2 ] then
22031: LD_VAR 0 2
22035: PUSH
22036: LD_INT 2
22038: ARRAY
22039: IFFALSE 22108
// if result [ 2 ] [ 1 ] = 100 + i then
22041: LD_VAR 0 2
22045: PUSH
22046: LD_INT 2
22048: ARRAY
22049: PUSH
22050: LD_INT 1
22052: ARRAY
22053: PUSH
22054: LD_INT 100
22056: PUSH
22057: LD_VAR 0 8
22061: PLUS
22062: EQUAL
22063: IFFALSE 22108
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_VAR 0 2
22074: PPUSH
22075: LD_INT 2
22077: PPUSH
22078: LD_VAR 0 2
22082: PUSH
22083: LD_INT 2
22085: ARRAY
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 3
22094: PPUSH
22095: CALL_OW 1
22099: ST_TO_ADDR
// tmp := 1 ;
22100: LD_ADDR_VAR 0 3
22104: PUSH
22105: LD_STRING 1
22107: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22108: LD_ADDR_VAR 0 6
22112: PUSH
22113: LD_VAR 0 6
22117: PUSH
22118: LD_VAR 0 3
22122: STR
22123: ST_TO_ADDR
// end ;
22124: GO 22020
22126: POP
22127: POP
// if isGameLoad then
22128: LD_VAR 0 1
22132: IFFALSE 22607
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22134: LD_ADDR_VAR 0 4
22138: PUSH
22139: LD_EXP 61
22143: PUSH
22144: LD_EXP 60
22148: PUSH
22149: LD_EXP 62
22153: PUSH
22154: LD_EXP 59
22158: PUSH
22159: LD_EXP 63
22163: PUSH
22164: LD_EXP 64
22168: PUSH
22169: LD_EXP 65
22173: PUSH
22174: LD_EXP 66
22178: PUSH
22179: LD_EXP 67
22183: PUSH
22184: LD_EXP 68
22188: PUSH
22189: LD_EXP 69
22193: PUSH
22194: LD_EXP 70
22198: PUSH
22199: LD_EXP 71
22203: PUSH
22204: LD_EXP 72
22208: PUSH
22209: LD_EXP 80
22213: PUSH
22214: LD_EXP 81
22218: PUSH
22219: LD_EXP 82
22223: PUSH
22224: LD_EXP 83
22228: PUSH
22229: LD_EXP 85
22233: PUSH
22234: LD_EXP 86
22238: PUSH
22239: LD_EXP 87
22243: PUSH
22244: LD_EXP 90
22248: PUSH
22249: LD_EXP 92
22253: PUSH
22254: LD_EXP 93
22258: PUSH
22259: LD_EXP 94
22263: PUSH
22264: LD_EXP 96
22268: PUSH
22269: LD_EXP 97
22273: PUSH
22274: LD_EXP 100
22278: PUSH
22279: LD_EXP 101
22283: PUSH
22284: LD_EXP 102
22288: PUSH
22289: LD_EXP 103
22293: PUSH
22294: LD_EXP 104
22298: PUSH
22299: LD_EXP 105
22303: PUSH
22304: LD_EXP 106
22308: PUSH
22309: LD_EXP 107
22313: PUSH
22314: LD_EXP 108
22318: PUSH
22319: LD_EXP 73
22323: PUSH
22324: LD_EXP 74
22328: PUSH
22329: LD_EXP 77
22333: PUSH
22334: LD_EXP 78
22338: PUSH
22339: LD_EXP 79
22343: PUSH
22344: LD_EXP 75
22348: PUSH
22349: LD_EXP 76
22353: PUSH
22354: LD_EXP 84
22358: PUSH
22359: LD_EXP 88
22363: PUSH
22364: LD_EXP 89
22368: PUSH
22369: LD_EXP 91
22373: PUSH
22374: LD_EXP 95
22378: PUSH
22379: LD_EXP 98
22383: PUSH
22384: LD_EXP 99
22388: PUSH
22389: LD_EXP 109
22393: PUSH
22394: LD_EXP 110
22398: PUSH
22399: LD_EXP 111
22403: PUSH
22404: LD_EXP 112
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: ST_TO_ADDR
// tmp :=  ;
22465: LD_ADDR_VAR 0 3
22469: PUSH
22470: LD_STRING 
22472: ST_TO_ADDR
// for i = 1 to normalCounter do
22473: LD_ADDR_VAR 0 8
22477: PUSH
22478: DOUBLE
22479: LD_INT 1
22481: DEC
22482: ST_TO_ADDR
22483: LD_EXP 57
22487: PUSH
22488: FOR_TO
22489: IFFALSE 22525
// begin if flags [ i ] then
22491: LD_VAR 0 4
22495: PUSH
22496: LD_VAR 0 8
22500: ARRAY
22501: IFFALSE 22523
// tmp := tmp & i & ; ;
22503: LD_ADDR_VAR 0 3
22507: PUSH
22508: LD_VAR 0 3
22512: PUSH
22513: LD_VAR 0 8
22517: STR
22518: PUSH
22519: LD_STRING ;
22521: STR
22522: ST_TO_ADDR
// end ;
22523: GO 22488
22525: POP
22526: POP
// for i = 1 to hardcoreCounter do
22527: LD_ADDR_VAR 0 8
22531: PUSH
22532: DOUBLE
22533: LD_INT 1
22535: DEC
22536: ST_TO_ADDR
22537: LD_EXP 58
22541: PUSH
22542: FOR_TO
22543: IFFALSE 22589
// begin if flags [ normalCounter + i ] then
22545: LD_VAR 0 4
22549: PUSH
22550: LD_EXP 57
22554: PUSH
22555: LD_VAR 0 8
22559: PLUS
22560: ARRAY
22561: IFFALSE 22587
// tmp := tmp & ( 100 + i ) & ; ;
22563: LD_ADDR_VAR 0 3
22567: PUSH
22568: LD_VAR 0 3
22572: PUSH
22573: LD_INT 100
22575: PUSH
22576: LD_VAR 0 8
22580: PLUS
22581: STR
22582: PUSH
22583: LD_STRING ;
22585: STR
22586: ST_TO_ADDR
// end ;
22587: GO 22542
22589: POP
22590: POP
// if tmp then
22591: LD_VAR 0 3
22595: IFFALSE 22607
// active := tmp ;
22597: LD_ADDR_VAR 0 7
22601: PUSH
22602: LD_VAR 0 3
22606: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22607: LD_STRING getStreamItemsFromMission("
22609: PUSH
22610: LD_VAR 0 5
22614: STR
22615: PUSH
22616: LD_STRING ","
22618: STR
22619: PUSH
22620: LD_VAR 0 6
22624: STR
22625: PUSH
22626: LD_STRING ","
22628: STR
22629: PUSH
22630: LD_VAR 0 7
22634: STR
22635: PUSH
22636: LD_STRING ")
22638: STR
22639: PPUSH
22640: CALL_OW 559
// end else
22644: GO 22653
// ToLua ( getStreamItemsFromMission("","","") ) ;
22646: LD_STRING getStreamItemsFromMission("","","")
22648: PPUSH
22649: CALL_OW 559
// end ;
22653: LD_VAR 0 2
22657: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22658: LD_EXP 56
22662: PUSH
22663: LD_EXP 61
22667: AND
22668: IFFALSE 22792
22670: GO 22672
22672: DISABLE
22673: LD_INT 0
22675: PPUSH
22676: PPUSH
// begin enable ;
22677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22678: LD_ADDR_VAR 0 2
22682: PUSH
22683: LD_INT 22
22685: PUSH
22686: LD_OWVAR 2
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 2
22697: PUSH
22698: LD_INT 34
22700: PUSH
22701: LD_INT 7
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 34
22710: PUSH
22711: LD_INT 45
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 34
22720: PUSH
22721: LD_INT 28
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 34
22730: PUSH
22731: LD_INT 47
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PPUSH
22749: CALL_OW 69
22753: ST_TO_ADDR
// if not tmp then
22754: LD_VAR 0 2
22758: NOT
22759: IFFALSE 22763
// exit ;
22761: GO 22792
// for i in tmp do
22763: LD_ADDR_VAR 0 1
22767: PUSH
22768: LD_VAR 0 2
22772: PUSH
22773: FOR_IN
22774: IFFALSE 22790
// begin SetLives ( i , 0 ) ;
22776: LD_VAR 0 1
22780: PPUSH
22781: LD_INT 0
22783: PPUSH
22784: CALL_OW 234
// end ;
22788: GO 22773
22790: POP
22791: POP
// end ;
22792: PPOPN 2
22794: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22795: LD_EXP 56
22799: PUSH
22800: LD_EXP 62
22804: AND
22805: IFFALSE 22889
22807: GO 22809
22809: DISABLE
22810: LD_INT 0
22812: PPUSH
22813: PPUSH
// begin enable ;
22814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22815: LD_ADDR_VAR 0 2
22819: PUSH
22820: LD_INT 22
22822: PUSH
22823: LD_OWVAR 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 32
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PPUSH
22846: CALL_OW 69
22850: ST_TO_ADDR
// if not tmp then
22851: LD_VAR 0 2
22855: NOT
22856: IFFALSE 22860
// exit ;
22858: GO 22889
// for i in tmp do
22860: LD_ADDR_VAR 0 1
22864: PUSH
22865: LD_VAR 0 2
22869: PUSH
22870: FOR_IN
22871: IFFALSE 22887
// begin SetLives ( i , 0 ) ;
22873: LD_VAR 0 1
22877: PPUSH
22878: LD_INT 0
22880: PPUSH
22881: CALL_OW 234
// end ;
22885: GO 22870
22887: POP
22888: POP
// end ;
22889: PPOPN 2
22891: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22892: LD_EXP 56
22896: PUSH
22897: LD_EXP 59
22901: AND
22902: IFFALSE 22995
22904: GO 22906
22906: DISABLE
22907: LD_INT 0
22909: PPUSH
// begin enable ;
22910: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22911: LD_ADDR_VAR 0 1
22915: PUSH
22916: LD_INT 22
22918: PUSH
22919: LD_OWVAR 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: LD_INT 25
22933: PUSH
22934: LD_INT 5
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 25
22943: PUSH
22944: LD_INT 9
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 25
22953: PUSH
22954: LD_INT 8
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PPUSH
22971: CALL_OW 69
22975: PUSH
22976: FOR_IN
22977: IFFALSE 22993
// begin SetClass ( i , 1 ) ;
22979: LD_VAR 0 1
22983: PPUSH
22984: LD_INT 1
22986: PPUSH
22987: CALL_OW 336
// end ;
22991: GO 22976
22993: POP
22994: POP
// end ;
22995: PPOPN 1
22997: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22998: LD_EXP 56
23002: PUSH
23003: LD_EXP 60
23007: AND
23008: PUSH
23009: LD_OWVAR 65
23013: PUSH
23014: LD_INT 7
23016: LESS
23017: AND
23018: IFFALSE 23032
23020: GO 23022
23022: DISABLE
// begin enable ;
23023: ENABLE
// game_speed := 7 ;
23024: LD_ADDR_OWVAR 65
23028: PUSH
23029: LD_INT 7
23031: ST_TO_ADDR
// end ;
23032: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23033: LD_EXP 56
23037: PUSH
23038: LD_EXP 63
23042: AND
23043: IFFALSE 23245
23045: GO 23047
23047: DISABLE
23048: LD_INT 0
23050: PPUSH
23051: PPUSH
23052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23053: LD_ADDR_VAR 0 3
23057: PUSH
23058: LD_INT 81
23060: PUSH
23061: LD_OWVAR 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 21
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PPUSH
23084: CALL_OW 69
23088: ST_TO_ADDR
// if not tmp then
23089: LD_VAR 0 3
23093: NOT
23094: IFFALSE 23098
// exit ;
23096: GO 23245
// if tmp > 5 then
23098: LD_VAR 0 3
23102: PUSH
23103: LD_INT 5
23105: GREATER
23106: IFFALSE 23118
// k := 5 else
23108: LD_ADDR_VAR 0 2
23112: PUSH
23113: LD_INT 5
23115: ST_TO_ADDR
23116: GO 23128
// k := tmp ;
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: LD_VAR 0 3
23127: ST_TO_ADDR
// for i := 1 to k do
23128: LD_ADDR_VAR 0 1
23132: PUSH
23133: DOUBLE
23134: LD_INT 1
23136: DEC
23137: ST_TO_ADDR
23138: LD_VAR 0 2
23142: PUSH
23143: FOR_TO
23144: IFFALSE 23243
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23146: LD_VAR 0 3
23150: PUSH
23151: LD_VAR 0 1
23155: ARRAY
23156: PPUSH
23157: LD_VAR 0 1
23161: PUSH
23162: LD_INT 4
23164: MOD
23165: PUSH
23166: LD_INT 1
23168: PLUS
23169: PPUSH
23170: CALL_OW 259
23174: PUSH
23175: LD_INT 10
23177: LESS
23178: IFFALSE 23241
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23180: LD_VAR 0 3
23184: PUSH
23185: LD_VAR 0 1
23189: ARRAY
23190: PPUSH
23191: LD_VAR 0 1
23195: PUSH
23196: LD_INT 4
23198: MOD
23199: PUSH
23200: LD_INT 1
23202: PLUS
23203: PPUSH
23204: LD_VAR 0 3
23208: PUSH
23209: LD_VAR 0 1
23213: ARRAY
23214: PPUSH
23215: LD_VAR 0 1
23219: PUSH
23220: LD_INT 4
23222: MOD
23223: PUSH
23224: LD_INT 1
23226: PLUS
23227: PPUSH
23228: CALL_OW 259
23232: PUSH
23233: LD_INT 1
23235: PLUS
23236: PPUSH
23237: CALL_OW 237
23241: GO 23143
23243: POP
23244: POP
// end ;
23245: PPOPN 3
23247: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23248: LD_EXP 56
23252: PUSH
23253: LD_EXP 64
23257: AND
23258: IFFALSE 23278
23260: GO 23262
23262: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23263: LD_INT 4
23265: PPUSH
23266: LD_OWVAR 2
23270: PPUSH
23271: LD_INT 0
23273: PPUSH
23274: CALL_OW 324
23278: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23279: LD_EXP 56
23283: PUSH
23284: LD_EXP 93
23288: AND
23289: IFFALSE 23309
23291: GO 23293
23293: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23294: LD_INT 19
23296: PPUSH
23297: LD_OWVAR 2
23301: PPUSH
23302: LD_INT 0
23304: PPUSH
23305: CALL_OW 324
23309: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23310: LD_EXP 56
23314: PUSH
23315: LD_EXP 65
23319: AND
23320: IFFALSE 23422
23322: GO 23324
23324: DISABLE
23325: LD_INT 0
23327: PPUSH
23328: PPUSH
// begin enable ;
23329: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23330: LD_ADDR_VAR 0 2
23334: PUSH
23335: LD_INT 22
23337: PUSH
23338: LD_OWVAR 2
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: LD_INT 34
23352: PUSH
23353: LD_INT 11
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 34
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PPUSH
23379: CALL_OW 69
23383: ST_TO_ADDR
// if not tmp then
23384: LD_VAR 0 2
23388: NOT
23389: IFFALSE 23393
// exit ;
23391: GO 23422
// for i in tmp do
23393: LD_ADDR_VAR 0 1
23397: PUSH
23398: LD_VAR 0 2
23402: PUSH
23403: FOR_IN
23404: IFFALSE 23420
// begin SetLives ( i , 0 ) ;
23406: LD_VAR 0 1
23410: PPUSH
23411: LD_INT 0
23413: PPUSH
23414: CALL_OW 234
// end ;
23418: GO 23403
23420: POP
23421: POP
// end ;
23422: PPOPN 2
23424: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23425: LD_EXP 56
23429: PUSH
23430: LD_EXP 66
23434: AND
23435: IFFALSE 23455
23437: GO 23439
23439: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23440: LD_INT 32
23442: PPUSH
23443: LD_OWVAR 2
23447: PPUSH
23448: LD_INT 0
23450: PPUSH
23451: CALL_OW 324
23455: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23456: LD_EXP 56
23460: PUSH
23461: LD_EXP 67
23465: AND
23466: IFFALSE 23647
23468: GO 23470
23470: DISABLE
23471: LD_INT 0
23473: PPUSH
23474: PPUSH
23475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_INT 22
23483: PUSH
23484: LD_OWVAR 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 33
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PPUSH
23507: CALL_OW 69
23511: ST_TO_ADDR
// if not tmp then
23512: LD_VAR 0 2
23516: NOT
23517: IFFALSE 23521
// exit ;
23519: GO 23647
// side := 0 ;
23521: LD_ADDR_VAR 0 3
23525: PUSH
23526: LD_INT 0
23528: ST_TO_ADDR
// for i := 1 to 8 do
23529: LD_ADDR_VAR 0 1
23533: PUSH
23534: DOUBLE
23535: LD_INT 1
23537: DEC
23538: ST_TO_ADDR
23539: LD_INT 8
23541: PUSH
23542: FOR_TO
23543: IFFALSE 23591
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23545: LD_OWVAR 2
23549: PUSH
23550: LD_VAR 0 1
23554: NONEQUAL
23555: PUSH
23556: LD_OWVAR 2
23560: PPUSH
23561: LD_VAR 0 1
23565: PPUSH
23566: CALL_OW 81
23570: PUSH
23571: LD_INT 2
23573: EQUAL
23574: AND
23575: IFFALSE 23589
// begin side := i ;
23577: LD_ADDR_VAR 0 3
23581: PUSH
23582: LD_VAR 0 1
23586: ST_TO_ADDR
// break ;
23587: GO 23591
// end ;
23589: GO 23542
23591: POP
23592: POP
// if not side then
23593: LD_VAR 0 3
23597: NOT
23598: IFFALSE 23602
// exit ;
23600: GO 23647
// for i := 1 to tmp do
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: DOUBLE
23608: LD_INT 1
23610: DEC
23611: ST_TO_ADDR
23612: LD_VAR 0 2
23616: PUSH
23617: FOR_TO
23618: IFFALSE 23645
// if Prob ( 60 ) then
23620: LD_INT 60
23622: PPUSH
23623: CALL_OW 13
23627: IFFALSE 23643
// SetSide ( i , side ) ;
23629: LD_VAR 0 1
23633: PPUSH
23634: LD_VAR 0 3
23638: PPUSH
23639: CALL_OW 235
23643: GO 23617
23645: POP
23646: POP
// end ;
23647: PPOPN 3
23649: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23650: LD_EXP 56
23654: PUSH
23655: LD_EXP 69
23659: AND
23660: IFFALSE 23779
23662: GO 23664
23664: DISABLE
23665: LD_INT 0
23667: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23668: LD_ADDR_VAR 0 1
23672: PUSH
23673: LD_INT 22
23675: PUSH
23676: LD_OWVAR 2
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 21
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 3
23697: PUSH
23698: LD_INT 23
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: PPUSH
23717: CALL_OW 69
23721: PUSH
23722: FOR_IN
23723: IFFALSE 23777
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23725: LD_VAR 0 1
23729: PPUSH
23730: CALL_OW 257
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 3
23743: PUSH
23744: LD_INT 4
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: IN
23753: IFFALSE 23775
// SetClass ( un , rand ( 1 , 4 ) ) ;
23755: LD_VAR 0 1
23759: PPUSH
23760: LD_INT 1
23762: PPUSH
23763: LD_INT 4
23765: PPUSH
23766: CALL_OW 12
23770: PPUSH
23771: CALL_OW 336
23775: GO 23722
23777: POP
23778: POP
// end ;
23779: PPOPN 1
23781: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23782: LD_EXP 56
23786: PUSH
23787: LD_EXP 68
23791: AND
23792: IFFALSE 23871
23794: GO 23796
23796: DISABLE
23797: LD_INT 0
23799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23800: LD_ADDR_VAR 0 1
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_OWVAR 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 21
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: ST_TO_ADDR
// if not tmp then
23836: LD_VAR 0 1
23840: NOT
23841: IFFALSE 23845
// exit ;
23843: GO 23871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23845: LD_VAR 0 1
23849: PUSH
23850: LD_INT 1
23852: PPUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 12
23862: ARRAY
23863: PPUSH
23864: LD_INT 100
23866: PPUSH
23867: CALL_OW 234
// end ;
23871: PPOPN 1
23873: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23874: LD_EXP 56
23878: PUSH
23879: LD_EXP 70
23883: AND
23884: IFFALSE 23982
23886: GO 23888
23888: DISABLE
23889: LD_INT 0
23891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23892: LD_ADDR_VAR 0 1
23896: PUSH
23897: LD_INT 22
23899: PUSH
23900: LD_OWVAR 2
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 21
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PPUSH
23923: CALL_OW 69
23927: ST_TO_ADDR
// if not tmp then
23928: LD_VAR 0 1
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 23982
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23937: LD_VAR 0 1
23941: PUSH
23942: LD_INT 1
23944: PPUSH
23945: LD_VAR 0 1
23949: PPUSH
23950: CALL_OW 12
23954: ARRAY
23955: PPUSH
23956: LD_INT 1
23958: PPUSH
23959: LD_INT 4
23961: PPUSH
23962: CALL_OW 12
23966: PPUSH
23967: LD_INT 3000
23969: PPUSH
23970: LD_INT 9000
23972: PPUSH
23973: CALL_OW 12
23977: PPUSH
23978: CALL_OW 492
// end ;
23982: PPOPN 1
23984: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23985: LD_EXP 56
23989: PUSH
23990: LD_EXP 71
23994: AND
23995: IFFALSE 24015
23997: GO 23999
23999: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24000: LD_INT 1
24002: PPUSH
24003: LD_OWVAR 2
24007: PPUSH
24008: LD_INT 0
24010: PPUSH
24011: CALL_OW 324
24015: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24016: LD_EXP 56
24020: PUSH
24021: LD_EXP 72
24025: AND
24026: IFFALSE 24109
24028: GO 24030
24030: DISABLE
24031: LD_INT 0
24033: PPUSH
24034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24035: LD_ADDR_VAR 0 2
24039: PUSH
24040: LD_INT 22
24042: PUSH
24043: LD_OWVAR 2
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 21
24054: PUSH
24055: LD_INT 3
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PPUSH
24066: CALL_OW 69
24070: ST_TO_ADDR
// if not tmp then
24071: LD_VAR 0 2
24075: NOT
24076: IFFALSE 24080
// exit ;
24078: GO 24109
// for i in tmp do
24080: LD_ADDR_VAR 0 1
24084: PUSH
24085: LD_VAR 0 2
24089: PUSH
24090: FOR_IN
24091: IFFALSE 24107
// SetBLevel ( i , 10 ) ;
24093: LD_VAR 0 1
24097: PPUSH
24098: LD_INT 10
24100: PPUSH
24101: CALL_OW 241
24105: GO 24090
24107: POP
24108: POP
// end ;
24109: PPOPN 2
24111: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24112: LD_EXP 56
24116: PUSH
24117: LD_EXP 73
24121: AND
24122: IFFALSE 24233
24124: GO 24126
24126: DISABLE
24127: LD_INT 0
24129: PPUSH
24130: PPUSH
24131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24132: LD_ADDR_VAR 0 3
24136: PUSH
24137: LD_INT 22
24139: PUSH
24140: LD_OWVAR 2
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 25
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: ST_TO_ADDR
// if not tmp then
24168: LD_VAR 0 3
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24233
// un := tmp [ rand ( 1 , tmp ) ] ;
24177: LD_ADDR_VAR 0 2
24181: PUSH
24182: LD_VAR 0 3
24186: PUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: CALL_OW 12
24199: ARRAY
24200: ST_TO_ADDR
// if Crawls ( un ) then
24201: LD_VAR 0 2
24205: PPUSH
24206: CALL_OW 318
24210: IFFALSE 24221
// ComWalk ( un ) ;
24212: LD_VAR 0 2
24216: PPUSH
24217: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24221: LD_VAR 0 2
24225: PPUSH
24226: LD_INT 5
24228: PPUSH
24229: CALL_OW 336
// end ;
24233: PPOPN 3
24235: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24236: LD_EXP 56
24240: PUSH
24241: LD_EXP 74
24245: AND
24246: PUSH
24247: LD_OWVAR 67
24251: PUSH
24252: LD_INT 4
24254: LESS
24255: AND
24256: IFFALSE 24275
24258: GO 24260
24260: DISABLE
// begin Difficulty := Difficulty + 1 ;
24261: LD_ADDR_OWVAR 67
24265: PUSH
24266: LD_OWVAR 67
24270: PUSH
24271: LD_INT 1
24273: PLUS
24274: ST_TO_ADDR
// end ;
24275: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24276: LD_EXP 56
24280: PUSH
24281: LD_EXP 75
24285: AND
24286: IFFALSE 24389
24288: GO 24290
24290: DISABLE
24291: LD_INT 0
24293: PPUSH
// begin for i := 1 to 5 do
24294: LD_ADDR_VAR 0 1
24298: PUSH
24299: DOUBLE
24300: LD_INT 1
24302: DEC
24303: ST_TO_ADDR
24304: LD_INT 5
24306: PUSH
24307: FOR_TO
24308: IFFALSE 24387
// begin uc_nation := nation_nature ;
24310: LD_ADDR_OWVAR 21
24314: PUSH
24315: LD_INT 0
24317: ST_TO_ADDR
// uc_side := 0 ;
24318: LD_ADDR_OWVAR 20
24322: PUSH
24323: LD_INT 0
24325: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24326: LD_ADDR_OWVAR 29
24330: PUSH
24331: LD_INT 12
24333: PUSH
24334: LD_INT 12
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: ST_TO_ADDR
// hc_agressivity := 20 ;
24341: LD_ADDR_OWVAR 35
24345: PUSH
24346: LD_INT 20
24348: ST_TO_ADDR
// hc_class := class_tiger ;
24349: LD_ADDR_OWVAR 28
24353: PUSH
24354: LD_INT 14
24356: ST_TO_ADDR
// hc_gallery :=  ;
24357: LD_ADDR_OWVAR 33
24361: PUSH
24362: LD_STRING 
24364: ST_TO_ADDR
// hc_name :=  ;
24365: LD_ADDR_OWVAR 26
24369: PUSH
24370: LD_STRING 
24372: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24373: CALL_OW 44
24377: PPUSH
24378: LD_INT 0
24380: PPUSH
24381: CALL_OW 51
// end ;
24385: GO 24307
24387: POP
24388: POP
// end ;
24389: PPOPN 1
24391: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24392: LD_EXP 56
24396: PUSH
24397: LD_EXP 76
24401: AND
24402: IFFALSE 24411
24404: GO 24406
24406: DISABLE
// StreamSibBomb ;
24407: CALL 24412 0 0
24411: END
// export function StreamSibBomb ; var i , x , y ; begin
24412: LD_INT 0
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
// result := false ;
24418: LD_ADDR_VAR 0 1
24422: PUSH
24423: LD_INT 0
24425: ST_TO_ADDR
// for i := 1 to 16 do
24426: LD_ADDR_VAR 0 2
24430: PUSH
24431: DOUBLE
24432: LD_INT 1
24434: DEC
24435: ST_TO_ADDR
24436: LD_INT 16
24438: PUSH
24439: FOR_TO
24440: IFFALSE 24639
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24442: LD_ADDR_VAR 0 3
24446: PUSH
24447: LD_INT 10
24449: PUSH
24450: LD_INT 20
24452: PUSH
24453: LD_INT 30
24455: PUSH
24456: LD_INT 40
24458: PUSH
24459: LD_INT 50
24461: PUSH
24462: LD_INT 60
24464: PUSH
24465: LD_INT 70
24467: PUSH
24468: LD_INT 80
24470: PUSH
24471: LD_INT 90
24473: PUSH
24474: LD_INT 100
24476: PUSH
24477: LD_INT 110
24479: PUSH
24480: LD_INT 120
24482: PUSH
24483: LD_INT 130
24485: PUSH
24486: LD_INT 140
24488: PUSH
24489: LD_INT 150
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: PPUSH
24512: LD_INT 15
24514: PPUSH
24515: CALL_OW 12
24519: ARRAY
24520: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24521: LD_ADDR_VAR 0 4
24525: PUSH
24526: LD_INT 10
24528: PUSH
24529: LD_INT 20
24531: PUSH
24532: LD_INT 30
24534: PUSH
24535: LD_INT 40
24537: PUSH
24538: LD_INT 50
24540: PUSH
24541: LD_INT 60
24543: PUSH
24544: LD_INT 70
24546: PUSH
24547: LD_INT 80
24549: PUSH
24550: LD_INT 90
24552: PUSH
24553: LD_INT 100
24555: PUSH
24556: LD_INT 110
24558: PUSH
24559: LD_INT 120
24561: PUSH
24562: LD_INT 130
24564: PUSH
24565: LD_INT 140
24567: PUSH
24568: LD_INT 150
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PPUSH
24591: LD_INT 15
24593: PPUSH
24594: CALL_OW 12
24598: ARRAY
24599: ST_TO_ADDR
// if ValidHex ( x , y ) then
24600: LD_VAR 0 3
24604: PPUSH
24605: LD_VAR 0 4
24609: PPUSH
24610: CALL_OW 488
24614: IFFALSE 24637
// begin result := [ x , y ] ;
24616: LD_ADDR_VAR 0 1
24620: PUSH
24621: LD_VAR 0 3
24625: PUSH
24626: LD_VAR 0 4
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: ST_TO_ADDR
// break ;
24635: GO 24639
// end ; end ;
24637: GO 24439
24639: POP
24640: POP
// if result then
24641: LD_VAR 0 1
24645: IFFALSE 24705
// begin ToLua ( playSibBomb() ) ;
24647: LD_STRING playSibBomb()
24649: PPUSH
24650: CALL_OW 559
// wait ( 0 0$14 ) ;
24654: LD_INT 490
24656: PPUSH
24657: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24661: LD_VAR 0 1
24665: PUSH
24666: LD_INT 1
24668: ARRAY
24669: PPUSH
24670: LD_VAR 0 1
24674: PUSH
24675: LD_INT 2
24677: ARRAY
24678: PPUSH
24679: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24683: LD_VAR 0 1
24687: PUSH
24688: LD_INT 1
24690: ARRAY
24691: PPUSH
24692: LD_VAR 0 1
24696: PUSH
24697: LD_INT 2
24699: ARRAY
24700: PPUSH
24701: CALL_OW 429
// end ; end ;
24705: LD_VAR 0 1
24709: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24710: LD_EXP 56
24714: PUSH
24715: LD_EXP 78
24719: AND
24720: IFFALSE 24732
24722: GO 24724
24724: DISABLE
// YouLost (  ) ;
24725: LD_STRING 
24727: PPUSH
24728: CALL_OW 104
24732: END
// every 0 0$1 trigger StreamModeActive and sFog do
24733: LD_EXP 56
24737: PUSH
24738: LD_EXP 77
24742: AND
24743: IFFALSE 24757
24745: GO 24747
24747: DISABLE
// FogOff ( your_side ) ;
24748: LD_OWVAR 2
24752: PPUSH
24753: CALL_OW 344
24757: END
// every 0 0$1 trigger StreamModeActive and sSun do
24758: LD_EXP 56
24762: PUSH
24763: LD_EXP 79
24767: AND
24768: IFFALSE 24796
24770: GO 24772
24772: DISABLE
// begin solar_recharge_percent := 0 ;
24773: LD_ADDR_OWVAR 79
24777: PUSH
24778: LD_INT 0
24780: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24781: LD_INT 10500
24783: PPUSH
24784: CALL_OW 67
// solar_recharge_percent := 100 ;
24788: LD_ADDR_OWVAR 79
24792: PUSH
24793: LD_INT 100
24795: ST_TO_ADDR
// end ;
24796: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24797: LD_EXP 56
24801: PUSH
24802: LD_EXP 80
24806: AND
24807: IFFALSE 25046
24809: GO 24811
24811: DISABLE
24812: LD_INT 0
24814: PPUSH
24815: PPUSH
24816: PPUSH
// begin tmp := [ ] ;
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: EMPTY
24823: ST_TO_ADDR
// for i := 1 to 6 do
24824: LD_ADDR_VAR 0 1
24828: PUSH
24829: DOUBLE
24830: LD_INT 1
24832: DEC
24833: ST_TO_ADDR
24834: LD_INT 6
24836: PUSH
24837: FOR_TO
24838: IFFALSE 24943
// begin uc_nation := nation_nature ;
24840: LD_ADDR_OWVAR 21
24844: PUSH
24845: LD_INT 0
24847: ST_TO_ADDR
// uc_side := 0 ;
24848: LD_ADDR_OWVAR 20
24852: PUSH
24853: LD_INT 0
24855: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24856: LD_ADDR_OWVAR 29
24860: PUSH
24861: LD_INT 12
24863: PUSH
24864: LD_INT 12
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: ST_TO_ADDR
// hc_agressivity := 20 ;
24871: LD_ADDR_OWVAR 35
24875: PUSH
24876: LD_INT 20
24878: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24879: LD_ADDR_OWVAR 28
24883: PUSH
24884: LD_INT 17
24886: ST_TO_ADDR
// hc_gallery :=  ;
24887: LD_ADDR_OWVAR 33
24891: PUSH
24892: LD_STRING 
24894: ST_TO_ADDR
// hc_name :=  ;
24895: LD_ADDR_OWVAR 26
24899: PUSH
24900: LD_STRING 
24902: ST_TO_ADDR
// un := CreateHuman ;
24903: LD_ADDR_VAR 0 2
24907: PUSH
24908: CALL_OW 44
24912: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_INT 1
24920: PPUSH
24921: CALL_OW 51
// tmp := tmp ^ un ;
24925: LD_ADDR_VAR 0 3
24929: PUSH
24930: LD_VAR 0 3
24934: PUSH
24935: LD_VAR 0 2
24939: ADD
24940: ST_TO_ADDR
// end ;
24941: GO 24837
24943: POP
24944: POP
// repeat wait ( 0 0$1 ) ;
24945: LD_INT 35
24947: PPUSH
24948: CALL_OW 67
// for un in tmp do
24952: LD_ADDR_VAR 0 2
24956: PUSH
24957: LD_VAR 0 3
24961: PUSH
24962: FOR_IN
24963: IFFALSE 25037
// begin if IsDead ( un ) then
24965: LD_VAR 0 2
24969: PPUSH
24970: CALL_OW 301
24974: IFFALSE 24994
// begin tmp := tmp diff un ;
24976: LD_ADDR_VAR 0 3
24980: PUSH
24981: LD_VAR 0 3
24985: PUSH
24986: LD_VAR 0 2
24990: DIFF
24991: ST_TO_ADDR
// continue ;
24992: GO 24962
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24994: LD_VAR 0 2
24998: PPUSH
24999: LD_INT 3
25001: PUSH
25002: LD_INT 22
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 69
25020: PPUSH
25021: LD_VAR 0 2
25025: PPUSH
25026: CALL_OW 74
25030: PPUSH
25031: CALL_OW 115
// end ;
25035: GO 24962
25037: POP
25038: POP
// until not tmp ;
25039: LD_VAR 0 3
25043: NOT
25044: IFFALSE 24945
// end ;
25046: PPOPN 3
25048: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25049: LD_EXP 56
25053: PUSH
25054: LD_EXP 81
25058: AND
25059: IFFALSE 25113
25061: GO 25063
25063: DISABLE
// begin ToLua ( displayTroll(); ) ;
25064: LD_STRING displayTroll();
25066: PPUSH
25067: CALL_OW 559
// wait ( 3 3$00 ) ;
25071: LD_INT 6300
25073: PPUSH
25074: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25078: LD_STRING hideTroll();
25080: PPUSH
25081: CALL_OW 559
// wait ( 1 1$00 ) ;
25085: LD_INT 2100
25087: PPUSH
25088: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25092: LD_STRING displayTroll();
25094: PPUSH
25095: CALL_OW 559
// wait ( 1 1$00 ) ;
25099: LD_INT 2100
25101: PPUSH
25102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25106: LD_STRING hideTroll();
25108: PPUSH
25109: CALL_OW 559
// end ;
25113: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25114: LD_EXP 56
25118: PUSH
25119: LD_EXP 82
25123: AND
25124: IFFALSE 25187
25126: GO 25128
25128: DISABLE
25129: LD_INT 0
25131: PPUSH
// begin p := 0 ;
25132: LD_ADDR_VAR 0 1
25136: PUSH
25137: LD_INT 0
25139: ST_TO_ADDR
// repeat game_speed := 1 ;
25140: LD_ADDR_OWVAR 65
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25148: LD_INT 35
25150: PPUSH
25151: CALL_OW 67
// p := p + 1 ;
25155: LD_ADDR_VAR 0 1
25159: PUSH
25160: LD_VAR 0 1
25164: PUSH
25165: LD_INT 1
25167: PLUS
25168: ST_TO_ADDR
// until p >= 60 ;
25169: LD_VAR 0 1
25173: PUSH
25174: LD_INT 60
25176: GREATEREQUAL
25177: IFFALSE 25140
// game_speed := 4 ;
25179: LD_ADDR_OWVAR 65
25183: PUSH
25184: LD_INT 4
25186: ST_TO_ADDR
// end ;
25187: PPOPN 1
25189: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25190: LD_EXP 56
25194: PUSH
25195: LD_EXP 83
25199: AND
25200: IFFALSE 25346
25202: GO 25204
25204: DISABLE
25205: LD_INT 0
25207: PPUSH
25208: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25209: LD_ADDR_VAR 0 1
25213: PUSH
25214: LD_INT 22
25216: PUSH
25217: LD_OWVAR 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: LD_INT 30
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 30
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL_OW 69
25262: ST_TO_ADDR
// if not depot then
25263: LD_VAR 0 1
25267: NOT
25268: IFFALSE 25272
// exit ;
25270: GO 25346
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25272: LD_ADDR_VAR 0 2
25276: PUSH
25277: LD_VAR 0 1
25281: PUSH
25282: LD_INT 1
25284: PPUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 12
25294: ARRAY
25295: PPUSH
25296: CALL_OW 274
25300: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25301: LD_VAR 0 2
25305: PPUSH
25306: LD_INT 1
25308: PPUSH
25309: LD_INT 0
25311: PPUSH
25312: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25316: LD_VAR 0 2
25320: PPUSH
25321: LD_INT 2
25323: PPUSH
25324: LD_INT 0
25326: PPUSH
25327: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25331: LD_VAR 0 2
25335: PPUSH
25336: LD_INT 3
25338: PPUSH
25339: LD_INT 0
25341: PPUSH
25342: CALL_OW 277
// end ;
25346: PPOPN 2
25348: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25349: LD_EXP 56
25353: PUSH
25354: LD_EXP 84
25358: AND
25359: IFFALSE 25456
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25367: LD_ADDR_VAR 0 1
25371: PUSH
25372: LD_INT 22
25374: PUSH
25375: LD_OWVAR 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 21
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: LD_INT 23
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: PPUSH
25416: CALL_OW 69
25420: ST_TO_ADDR
// if not tmp then
25421: LD_VAR 0 1
25425: NOT
25426: IFFALSE 25430
// exit ;
25428: GO 25456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25430: LD_VAR 0 1
25434: PUSH
25435: LD_INT 1
25437: PPUSH
25438: LD_VAR 0 1
25442: PPUSH
25443: CALL_OW 12
25447: ARRAY
25448: PPUSH
25449: LD_INT 200
25451: PPUSH
25452: CALL_OW 234
// end ;
25456: PPOPN 1
25458: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25459: LD_EXP 56
25463: PUSH
25464: LD_EXP 85
25468: AND
25469: IFFALSE 25548
25471: GO 25473
25473: DISABLE
25474: LD_INT 0
25476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25477: LD_ADDR_VAR 0 1
25481: PUSH
25482: LD_INT 22
25484: PUSH
25485: LD_OWVAR 2
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 21
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: ST_TO_ADDR
// if not tmp then
25513: LD_VAR 0 1
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25522: LD_VAR 0 1
25526: PUSH
25527: LD_INT 1
25529: PPUSH
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 12
25539: ARRAY
25540: PPUSH
25541: LD_INT 60
25543: PPUSH
25544: CALL_OW 234
// end ;
25548: PPOPN 1
25550: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25551: LD_EXP 56
25555: PUSH
25556: LD_EXP 86
25560: AND
25561: IFFALSE 25660
25563: GO 25565
25565: DISABLE
25566: LD_INT 0
25568: PPUSH
25569: PPUSH
// begin enable ;
25570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25571: LD_ADDR_VAR 0 1
25575: PUSH
25576: LD_INT 22
25578: PUSH
25579: LD_OWVAR 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 61
25590: PUSH
25591: EMPTY
25592: LIST
25593: PUSH
25594: LD_INT 33
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: ST_TO_ADDR
// if not tmp then
25614: LD_VAR 0 1
25618: NOT
25619: IFFALSE 25623
// exit ;
25621: GO 25660
// for i in tmp do
25623: LD_ADDR_VAR 0 2
25627: PUSH
25628: LD_VAR 0 1
25632: PUSH
25633: FOR_IN
25634: IFFALSE 25658
// if IsControledBy ( i ) then
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 312
25645: IFFALSE 25656
// ComUnlink ( i ) ;
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL_OW 136
25656: GO 25633
25658: POP
25659: POP
// end ;
25660: PPOPN 2
25662: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25663: LD_EXP 56
25667: PUSH
25668: LD_EXP 87
25672: AND
25673: IFFALSE 25813
25675: GO 25677
25677: DISABLE
25678: LD_INT 0
25680: PPUSH
25681: PPUSH
// begin ToLua ( displayPowell(); ) ;
25682: LD_STRING displayPowell();
25684: PPUSH
25685: CALL_OW 559
// uc_side := 0 ;
25689: LD_ADDR_OWVAR 20
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
// uc_nation := 2 ;
25697: LD_ADDR_OWVAR 21
25701: PUSH
25702: LD_INT 2
25704: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25705: LD_ADDR_OWVAR 37
25709: PUSH
25710: LD_INT 14
25712: ST_TO_ADDR
// vc_engine := engine_siberite ;
25713: LD_ADDR_OWVAR 39
25717: PUSH
25718: LD_INT 3
25720: ST_TO_ADDR
// vc_control := control_apeman ;
25721: LD_ADDR_OWVAR 38
25725: PUSH
25726: LD_INT 5
25728: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25729: LD_ADDR_OWVAR 40
25733: PUSH
25734: LD_INT 29
25736: ST_TO_ADDR
// un := CreateVehicle ;
25737: LD_ADDR_VAR 0 2
25741: PUSH
25742: CALL_OW 45
25746: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25747: LD_VAR 0 2
25751: PPUSH
25752: LD_INT 1
25754: PPUSH
25755: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25759: LD_INT 35
25761: PPUSH
25762: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25766: LD_VAR 0 2
25770: PPUSH
25771: LD_INT 22
25773: PUSH
25774: LD_OWVAR 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 69
25787: PPUSH
25788: LD_VAR 0 2
25792: PPUSH
25793: CALL_OW 74
25797: PPUSH
25798: CALL_OW 115
// until IsDead ( un ) ;
25802: LD_VAR 0 2
25806: PPUSH
25807: CALL_OW 301
25811: IFFALSE 25759
// end ;
25813: PPOPN 2
25815: END
// every 0 0$1 trigger StreamModeActive and sStu do
25816: LD_EXP 56
25820: PUSH
25821: LD_EXP 95
25825: AND
25826: IFFALSE 25842
25828: GO 25830
25830: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25831: LD_STRING displayStucuk();
25833: PPUSH
25834: CALL_OW 559
// ResetFog ;
25838: CALL_OW 335
// end ;
25842: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25843: LD_EXP 56
25847: PUSH
25848: LD_EXP 88
25852: AND
25853: IFFALSE 25994
25855: GO 25857
25857: DISABLE
25858: LD_INT 0
25860: PPUSH
25861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25862: LD_ADDR_VAR 0 2
25866: PUSH
25867: LD_INT 22
25869: PUSH
25870: LD_OWVAR 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 21
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: ST_TO_ADDR
// if not tmp then
25898: LD_VAR 0 2
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 25994
// un := tmp [ rand ( 1 , tmp ) ] ;
25907: LD_ADDR_VAR 0 1
25911: PUSH
25912: LD_VAR 0 2
25916: PUSH
25917: LD_INT 1
25919: PPUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: CALL_OW 12
25929: ARRAY
25930: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25931: LD_VAR 0 1
25935: PPUSH
25936: LD_INT 0
25938: PPUSH
25939: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25943: LD_VAR 0 1
25947: PPUSH
25948: LD_OWVAR 3
25952: PUSH
25953: LD_VAR 0 1
25957: DIFF
25958: PPUSH
25959: LD_VAR 0 1
25963: PPUSH
25964: CALL_OW 74
25968: PPUSH
25969: CALL_OW 115
// wait ( 0 0$20 ) ;
25973: LD_INT 700
25975: PPUSH
25976: CALL_OW 67
// SetSide ( un , your_side ) ;
25980: LD_VAR 0 1
25984: PPUSH
25985: LD_OWVAR 2
25989: PPUSH
25990: CALL_OW 235
// end ;
25994: PPOPN 2
25996: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25997: LD_EXP 56
26001: PUSH
26002: LD_EXP 89
26006: AND
26007: IFFALSE 26113
26009: GO 26011
26011: DISABLE
26012: LD_INT 0
26014: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26015: LD_ADDR_VAR 0 1
26019: PUSH
26020: LD_INT 22
26022: PUSH
26023: LD_OWVAR 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 30
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 30
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PPUSH
26064: CALL_OW 69
26068: ST_TO_ADDR
// if not depot then
26069: LD_VAR 0 1
26073: NOT
26074: IFFALSE 26078
// exit ;
26076: GO 26113
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26078: LD_VAR 0 1
26082: PUSH
26083: LD_INT 1
26085: ARRAY
26086: PPUSH
26087: CALL_OW 250
26091: PPUSH
26092: LD_VAR 0 1
26096: PUSH
26097: LD_INT 1
26099: ARRAY
26100: PPUSH
26101: CALL_OW 251
26105: PPUSH
26106: LD_INT 70
26108: PPUSH
26109: CALL_OW 495
// end ;
26113: PPOPN 1
26115: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26116: LD_EXP 56
26120: PUSH
26121: LD_EXP 90
26125: AND
26126: IFFALSE 26337
26128: GO 26130
26130: DISABLE
26131: LD_INT 0
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26138: LD_ADDR_VAR 0 5
26142: PUSH
26143: LD_INT 22
26145: PUSH
26146: LD_OWVAR 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 21
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: ST_TO_ADDR
// if not tmp then
26174: LD_VAR 0 5
26178: NOT
26179: IFFALSE 26183
// exit ;
26181: GO 26337
// for i in tmp do
26183: LD_ADDR_VAR 0 1
26187: PUSH
26188: LD_VAR 0 5
26192: PUSH
26193: FOR_IN
26194: IFFALSE 26335
// begin d := rand ( 0 , 5 ) ;
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_INT 0
26203: PPUSH
26204: LD_INT 5
26206: PPUSH
26207: CALL_OW 12
26211: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26212: LD_ADDR_VAR 0 2
26216: PUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 250
26226: PPUSH
26227: LD_VAR 0 4
26231: PPUSH
26232: LD_INT 3
26234: PPUSH
26235: LD_INT 12
26237: PPUSH
26238: CALL_OW 12
26242: PPUSH
26243: CALL_OW 272
26247: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26248: LD_ADDR_VAR 0 3
26252: PUSH
26253: LD_VAR 0 1
26257: PPUSH
26258: CALL_OW 251
26262: PPUSH
26263: LD_VAR 0 4
26267: PPUSH
26268: LD_INT 3
26270: PPUSH
26271: LD_INT 12
26273: PPUSH
26274: CALL_OW 12
26278: PPUSH
26279: CALL_OW 273
26283: ST_TO_ADDR
// if ValidHex ( x , y ) then
26284: LD_VAR 0 2
26288: PPUSH
26289: LD_VAR 0 3
26293: PPUSH
26294: CALL_OW 488
26298: IFFALSE 26333
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26300: LD_VAR 0 1
26304: PPUSH
26305: LD_VAR 0 2
26309: PPUSH
26310: LD_VAR 0 3
26314: PPUSH
26315: LD_INT 3
26317: PPUSH
26318: LD_INT 6
26320: PPUSH
26321: CALL_OW 12
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 483
// end ;
26333: GO 26193
26335: POP
26336: POP
// end ;
26337: PPOPN 5
26339: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26340: LD_EXP 56
26344: PUSH
26345: LD_EXP 91
26349: AND
26350: IFFALSE 26444
26352: GO 26354
26354: DISABLE
26355: LD_INT 0
26357: PPUSH
26358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26359: LD_ADDR_VAR 0 2
26363: PUSH
26364: LD_INT 22
26366: PUSH
26367: LD_OWVAR 2
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 32
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 21
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: ST_TO_ADDR
// if not tmp then
26406: LD_VAR 0 2
26410: NOT
26411: IFFALSE 26415
// exit ;
26413: GO 26444
// for i in tmp do
26415: LD_ADDR_VAR 0 1
26419: PUSH
26420: LD_VAR 0 2
26424: PUSH
26425: FOR_IN
26426: IFFALSE 26442
// SetFuel ( i , 0 ) ;
26428: LD_VAR 0 1
26432: PPUSH
26433: LD_INT 0
26435: PPUSH
26436: CALL_OW 240
26440: GO 26425
26442: POP
26443: POP
// end ;
26444: PPOPN 2
26446: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26447: LD_EXP 56
26451: PUSH
26452: LD_EXP 92
26456: AND
26457: IFFALSE 26523
26459: GO 26461
26461: DISABLE
26462: LD_INT 0
26464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26465: LD_ADDR_VAR 0 1
26469: PUSH
26470: LD_INT 22
26472: PUSH
26473: LD_OWVAR 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 30
26484: PUSH
26485: LD_INT 29
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PPUSH
26496: CALL_OW 69
26500: ST_TO_ADDR
// if not tmp then
26501: LD_VAR 0 1
26505: NOT
26506: IFFALSE 26510
// exit ;
26508: GO 26523
// DestroyUnit ( tmp [ 1 ] ) ;
26510: LD_VAR 0 1
26514: PUSH
26515: LD_INT 1
26517: ARRAY
26518: PPUSH
26519: CALL_OW 65
// end ;
26523: PPOPN 1
26525: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26526: LD_EXP 56
26530: PUSH
26531: LD_EXP 94
26535: AND
26536: IFFALSE 26665
26538: GO 26540
26540: DISABLE
26541: LD_INT 0
26543: PPUSH
// begin uc_side := 0 ;
26544: LD_ADDR_OWVAR 20
26548: PUSH
26549: LD_INT 0
26551: ST_TO_ADDR
// uc_nation := nation_arabian ;
26552: LD_ADDR_OWVAR 21
26556: PUSH
26557: LD_INT 2
26559: ST_TO_ADDR
// hc_gallery :=  ;
26560: LD_ADDR_OWVAR 33
26564: PUSH
26565: LD_STRING 
26567: ST_TO_ADDR
// hc_name :=  ;
26568: LD_ADDR_OWVAR 26
26572: PUSH
26573: LD_STRING 
26575: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26576: LD_INT 1
26578: PPUSH
26579: LD_INT 11
26581: PPUSH
26582: LD_INT 10
26584: PPUSH
26585: CALL_OW 380
// un := CreateHuman ;
26589: LD_ADDR_VAR 0 1
26593: PUSH
26594: CALL_OW 44
26598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26599: LD_VAR 0 1
26603: PPUSH
26604: LD_INT 1
26606: PPUSH
26607: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26611: LD_INT 35
26613: PPUSH
26614: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26618: LD_VAR 0 1
26622: PPUSH
26623: LD_INT 22
26625: PUSH
26626: LD_OWVAR 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PPUSH
26635: CALL_OW 69
26639: PPUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 74
26649: PPUSH
26650: CALL_OW 115
// until IsDead ( un ) ;
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 301
26663: IFFALSE 26611
// end ;
26665: PPOPN 1
26667: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26668: LD_EXP 56
26672: PUSH
26673: LD_EXP 96
26677: AND
26678: IFFALSE 26690
26680: GO 26682
26682: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26683: LD_STRING earthquake(getX(game), 0, 32)
26685: PPUSH
26686: CALL_OW 559
26690: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26691: LD_EXP 56
26695: PUSH
26696: LD_EXP 97
26700: AND
26701: IFFALSE 26792
26703: GO 26705
26705: DISABLE
26706: LD_INT 0
26708: PPUSH
// begin enable ;
26709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26710: LD_ADDR_VAR 0 1
26714: PUSH
26715: LD_INT 22
26717: PUSH
26718: LD_OWVAR 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 21
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 33
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 69
26756: ST_TO_ADDR
// if not tmp then
26757: LD_VAR 0 1
26761: NOT
26762: IFFALSE 26766
// exit ;
26764: GO 26792
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26766: LD_VAR 0 1
26770: PUSH
26771: LD_INT 1
26773: PPUSH
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 12
26783: ARRAY
26784: PPUSH
26785: LD_INT 1
26787: PPUSH
26788: CALL_OW 234
// end ;
26792: PPOPN 1
26794: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26795: LD_EXP 56
26799: PUSH
26800: LD_EXP 98
26804: AND
26805: IFFALSE 26946
26807: GO 26809
26809: DISABLE
26810: LD_INT 0
26812: PPUSH
26813: PPUSH
26814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_INT 22
26822: PUSH
26823: LD_OWVAR 2
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 25
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PPUSH
26846: CALL_OW 69
26850: ST_TO_ADDR
// if not tmp then
26851: LD_VAR 0 3
26855: NOT
26856: IFFALSE 26860
// exit ;
26858: GO 26946
// un := tmp [ rand ( 1 , tmp ) ] ;
26860: LD_ADDR_VAR 0 2
26864: PUSH
26865: LD_VAR 0 3
26869: PUSH
26870: LD_INT 1
26872: PPUSH
26873: LD_VAR 0 3
26877: PPUSH
26878: CALL_OW 12
26882: ARRAY
26883: ST_TO_ADDR
// if Crawls ( un ) then
26884: LD_VAR 0 2
26888: PPUSH
26889: CALL_OW 318
26893: IFFALSE 26904
// ComWalk ( un ) ;
26895: LD_VAR 0 2
26899: PPUSH
26900: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26904: LD_VAR 0 2
26908: PPUSH
26909: LD_INT 9
26911: PPUSH
26912: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26916: LD_INT 28
26918: PPUSH
26919: LD_OWVAR 2
26923: PPUSH
26924: LD_INT 2
26926: PPUSH
26927: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26931: LD_INT 29
26933: PPUSH
26934: LD_OWVAR 2
26938: PPUSH
26939: LD_INT 2
26941: PPUSH
26942: CALL_OW 322
// end ;
26946: PPOPN 3
26948: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26949: LD_EXP 56
26953: PUSH
26954: LD_EXP 99
26958: AND
26959: IFFALSE 27070
26961: GO 26963
26963: DISABLE
26964: LD_INT 0
26966: PPUSH
26967: PPUSH
26968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26969: LD_ADDR_VAR 0 3
26973: PUSH
26974: LD_INT 22
26976: PUSH
26977: LD_OWVAR 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 25
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PPUSH
27000: CALL_OW 69
27004: ST_TO_ADDR
// if not tmp then
27005: LD_VAR 0 3
27009: NOT
27010: IFFALSE 27014
// exit ;
27012: GO 27070
// un := tmp [ rand ( 1 , tmp ) ] ;
27014: LD_ADDR_VAR 0 2
27018: PUSH
27019: LD_VAR 0 3
27023: PUSH
27024: LD_INT 1
27026: PPUSH
27027: LD_VAR 0 3
27031: PPUSH
27032: CALL_OW 12
27036: ARRAY
27037: ST_TO_ADDR
// if Crawls ( un ) then
27038: LD_VAR 0 2
27042: PPUSH
27043: CALL_OW 318
27047: IFFALSE 27058
// ComWalk ( un ) ;
27049: LD_VAR 0 2
27053: PPUSH
27054: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_INT 8
27065: PPUSH
27066: CALL_OW 336
// end ;
27070: PPOPN 3
27072: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27073: LD_EXP 56
27077: PUSH
27078: LD_EXP 100
27082: AND
27083: IFFALSE 27227
27085: GO 27087
27087: DISABLE
27088: LD_INT 0
27090: PPUSH
27091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27092: LD_ADDR_VAR 0 2
27096: PUSH
27097: LD_INT 22
27099: PUSH
27100: LD_OWVAR 2
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 21
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 34
27124: PUSH
27125: LD_INT 12
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 34
27134: PUSH
27135: LD_INT 51
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 34
27144: PUSH
27145: LD_INT 32
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 69
27167: ST_TO_ADDR
// if not tmp then
27168: LD_VAR 0 2
27172: NOT
27173: IFFALSE 27177
// exit ;
27175: GO 27227
// for i in tmp do
27177: LD_ADDR_VAR 0 1
27181: PUSH
27182: LD_VAR 0 2
27186: PUSH
27187: FOR_IN
27188: IFFALSE 27225
// if GetCargo ( i , mat_artifact ) = 0 then
27190: LD_VAR 0 1
27194: PPUSH
27195: LD_INT 4
27197: PPUSH
27198: CALL_OW 289
27202: PUSH
27203: LD_INT 0
27205: EQUAL
27206: IFFALSE 27223
// SetCargo ( i , mat_siberit , 100 ) ;
27208: LD_VAR 0 1
27212: PPUSH
27213: LD_INT 3
27215: PPUSH
27216: LD_INT 100
27218: PPUSH
27219: CALL_OW 290
27223: GO 27187
27225: POP
27226: POP
// end ;
27227: PPOPN 2
27229: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27230: LD_EXP 56
27234: PUSH
27235: LD_EXP 101
27239: AND
27240: IFFALSE 27423
27242: GO 27244
27244: DISABLE
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27249: LD_ADDR_VAR 0 2
27253: PUSH
27254: LD_INT 22
27256: PUSH
27257: LD_OWVAR 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 69
27270: ST_TO_ADDR
// if not tmp then
27271: LD_VAR 0 2
27275: NOT
27276: IFFALSE 27280
// exit ;
27278: GO 27423
// for i := 1 to 2 do
27280: LD_ADDR_VAR 0 1
27284: PUSH
27285: DOUBLE
27286: LD_INT 1
27288: DEC
27289: ST_TO_ADDR
27290: LD_INT 2
27292: PUSH
27293: FOR_TO
27294: IFFALSE 27421
// begin uc_side := your_side ;
27296: LD_ADDR_OWVAR 20
27300: PUSH
27301: LD_OWVAR 2
27305: ST_TO_ADDR
// uc_nation := nation_american ;
27306: LD_ADDR_OWVAR 21
27310: PUSH
27311: LD_INT 1
27313: ST_TO_ADDR
// vc_chassis := us_morphling ;
27314: LD_ADDR_OWVAR 37
27318: PUSH
27319: LD_INT 5
27321: ST_TO_ADDR
// vc_engine := engine_siberite ;
27322: LD_ADDR_OWVAR 39
27326: PUSH
27327: LD_INT 3
27329: ST_TO_ADDR
// vc_control := control_computer ;
27330: LD_ADDR_OWVAR 38
27334: PUSH
27335: LD_INT 3
27337: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27338: LD_ADDR_OWVAR 40
27342: PUSH
27343: LD_INT 10
27345: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27346: LD_VAR 0 2
27350: PUSH
27351: LD_INT 1
27353: ARRAY
27354: PPUSH
27355: CALL_OW 310
27359: NOT
27360: IFFALSE 27407
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27362: CALL_OW 45
27366: PPUSH
27367: LD_VAR 0 2
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: CALL_OW 250
27380: PPUSH
27381: LD_VAR 0 2
27385: PUSH
27386: LD_INT 1
27388: ARRAY
27389: PPUSH
27390: CALL_OW 251
27394: PPUSH
27395: LD_INT 12
27397: PPUSH
27398: LD_INT 1
27400: PPUSH
27401: CALL_OW 50
27405: GO 27419
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27407: CALL_OW 45
27411: PPUSH
27412: LD_INT 1
27414: PPUSH
27415: CALL_OW 51
// end ;
27419: GO 27293
27421: POP
27422: POP
// end ;
27423: PPOPN 2
27425: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27426: LD_EXP 56
27430: PUSH
27431: LD_EXP 102
27435: AND
27436: IFFALSE 27658
27438: GO 27440
27440: DISABLE
27441: LD_INT 0
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27449: LD_ADDR_VAR 0 6
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_OWVAR 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 21
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 3
27478: PUSH
27479: LD_INT 23
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 69
27502: ST_TO_ADDR
// if not tmp then
27503: LD_VAR 0 6
27507: NOT
27508: IFFALSE 27512
// exit ;
27510: GO 27658
// s1 := rand ( 1 , 4 ) ;
27512: LD_ADDR_VAR 0 2
27516: PUSH
27517: LD_INT 1
27519: PPUSH
27520: LD_INT 4
27522: PPUSH
27523: CALL_OW 12
27527: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27528: LD_ADDR_VAR 0 4
27532: PUSH
27533: LD_VAR 0 6
27537: PUSH
27538: LD_INT 1
27540: ARRAY
27541: PPUSH
27542: LD_VAR 0 2
27546: PPUSH
27547: CALL_OW 259
27551: ST_TO_ADDR
// if s1 = 1 then
27552: LD_VAR 0 2
27556: PUSH
27557: LD_INT 1
27559: EQUAL
27560: IFFALSE 27580
// s2 := rand ( 2 , 4 ) else
27562: LD_ADDR_VAR 0 3
27566: PUSH
27567: LD_INT 2
27569: PPUSH
27570: LD_INT 4
27572: PPUSH
27573: CALL_OW 12
27577: ST_TO_ADDR
27578: GO 27588
// s2 := 1 ;
27580: LD_ADDR_VAR 0 3
27584: PUSH
27585: LD_INT 1
27587: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27588: LD_ADDR_VAR 0 5
27592: PUSH
27593: LD_VAR 0 6
27597: PUSH
27598: LD_INT 1
27600: ARRAY
27601: PPUSH
27602: LD_VAR 0 3
27606: PPUSH
27607: CALL_OW 259
27611: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27612: LD_VAR 0 6
27616: PUSH
27617: LD_INT 1
27619: ARRAY
27620: PPUSH
27621: LD_VAR 0 2
27625: PPUSH
27626: LD_VAR 0 5
27630: PPUSH
27631: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27635: LD_VAR 0 6
27639: PUSH
27640: LD_INT 1
27642: ARRAY
27643: PPUSH
27644: LD_VAR 0 3
27648: PPUSH
27649: LD_VAR 0 4
27653: PPUSH
27654: CALL_OW 237
// end ;
27658: PPOPN 6
27660: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27661: LD_EXP 56
27665: PUSH
27666: LD_EXP 103
27670: AND
27671: IFFALSE 27750
27673: GO 27675
27675: DISABLE
27676: LD_INT 0
27678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27679: LD_ADDR_VAR 0 1
27683: PUSH
27684: LD_INT 22
27686: PUSH
27687: LD_OWVAR 2
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 30
27698: PUSH
27699: LD_INT 3
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PPUSH
27710: CALL_OW 69
27714: ST_TO_ADDR
// if not tmp then
27715: LD_VAR 0 1
27719: NOT
27720: IFFALSE 27724
// exit ;
27722: GO 27750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27724: LD_VAR 0 1
27728: PUSH
27729: LD_INT 1
27731: PPUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 12
27741: ARRAY
27742: PPUSH
27743: LD_INT 1
27745: PPUSH
27746: CALL_OW 234
// end ;
27750: PPOPN 1
27752: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27753: LD_EXP 56
27757: PUSH
27758: LD_EXP 104
27762: AND
27763: IFFALSE 27875
27765: GO 27767
27767: DISABLE
27768: LD_INT 0
27770: PPUSH
27771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27772: LD_ADDR_VAR 0 2
27776: PUSH
27777: LD_INT 22
27779: PUSH
27780: LD_OWVAR 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: LD_INT 30
27794: PUSH
27795: LD_INT 27
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 30
27804: PUSH
27805: LD_INT 26
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 30
27814: PUSH
27815: LD_INT 28
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: ST_TO_ADDR
// if not tmp then
27837: LD_VAR 0 2
27841: NOT
27842: IFFALSE 27846
// exit ;
27844: GO 27875
// for i in tmp do
27846: LD_ADDR_VAR 0 1
27850: PUSH
27851: LD_VAR 0 2
27855: PUSH
27856: FOR_IN
27857: IFFALSE 27873
// SetLives ( i , 1 ) ;
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_INT 1
27866: PPUSH
27867: CALL_OW 234
27871: GO 27856
27873: POP
27874: POP
// end ;
27875: PPOPN 2
27877: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27878: LD_EXP 56
27882: PUSH
27883: LD_EXP 105
27887: AND
27888: IFFALSE 28175
27890: GO 27892
27892: DISABLE
27893: LD_INT 0
27895: PPUSH
27896: PPUSH
27897: PPUSH
// begin i := rand ( 1 , 7 ) ;
27898: LD_ADDR_VAR 0 1
27902: PUSH
27903: LD_INT 1
27905: PPUSH
27906: LD_INT 7
27908: PPUSH
27909: CALL_OW 12
27913: ST_TO_ADDR
// case i of 1 :
27914: LD_VAR 0 1
27918: PUSH
27919: LD_INT 1
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27927
27925: GO 27937
27927: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27928: LD_STRING earthquake(getX(game), 0, 32)
27930: PPUSH
27931: CALL_OW 559
27935: GO 28175
27937: LD_INT 2
27939: DOUBLE
27940: EQUAL
27941: IFTRUE 27945
27943: GO 27959
27945: POP
// begin ToLua ( displayStucuk(); ) ;
27946: LD_STRING displayStucuk();
27948: PPUSH
27949: CALL_OW 559
// ResetFog ;
27953: CALL_OW 335
// end ; 3 :
27957: GO 28175
27959: LD_INT 3
27961: DOUBLE
27962: EQUAL
27963: IFTRUE 27967
27965: GO 28071
27967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 25
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PPUSH
27999: CALL_OW 69
28003: ST_TO_ADDR
// if not tmp then
28004: LD_VAR 0 2
28008: NOT
28009: IFFALSE 28013
// exit ;
28011: GO 28175
// un := tmp [ rand ( 1 , tmp ) ] ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_VAR 0 2
28022: PUSH
28023: LD_INT 1
28025: PPUSH
28026: LD_VAR 0 2
28030: PPUSH
28031: CALL_OW 12
28035: ARRAY
28036: ST_TO_ADDR
// if Crawls ( un ) then
28037: LD_VAR 0 3
28041: PPUSH
28042: CALL_OW 318
28046: IFFALSE 28057
// ComWalk ( un ) ;
28048: LD_VAR 0 3
28052: PPUSH
28053: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28057: LD_VAR 0 3
28061: PPUSH
28062: LD_INT 8
28064: PPUSH
28065: CALL_OW 336
// end ; 4 :
28069: GO 28175
28071: LD_INT 4
28073: DOUBLE
28074: EQUAL
28075: IFTRUE 28079
28077: GO 28153
28079: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28080: LD_ADDR_VAR 0 2
28084: PUSH
28085: LD_INT 22
28087: PUSH
28088: LD_OWVAR 2
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 30
28099: PUSH
28100: LD_INT 29
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PPUSH
28111: CALL_OW 69
28115: ST_TO_ADDR
// if not tmp then
28116: LD_VAR 0 2
28120: NOT
28121: IFFALSE 28125
// exit ;
28123: GO 28175
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28125: LD_VAR 0 2
28129: PUSH
28130: LD_INT 1
28132: ARRAY
28133: PPUSH
28134: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28138: LD_VAR 0 2
28142: PUSH
28143: LD_INT 1
28145: ARRAY
28146: PPUSH
28147: CALL_OW 65
// end ; 5 .. 7 :
28151: GO 28175
28153: LD_INT 5
28155: DOUBLE
28156: GREATEREQUAL
28157: IFFALSE 28165
28159: LD_INT 7
28161: DOUBLE
28162: LESSEQUAL
28163: IFTRUE 28167
28165: GO 28174
28167: POP
// StreamSibBomb ; end ;
28168: CALL 24412 0 0
28172: GO 28175
28174: POP
// end ;
28175: PPOPN 3
28177: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28178: LD_EXP 56
28182: PUSH
28183: LD_EXP 106
28187: AND
28188: IFFALSE 28344
28190: GO 28192
28192: DISABLE
28193: LD_INT 0
28195: PPUSH
28196: PPUSH
28197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28198: LD_ADDR_VAR 0 2
28202: PUSH
28203: LD_INT 81
28205: PUSH
28206: LD_OWVAR 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 21
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 21
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PPUSH
28247: CALL_OW 69
28251: ST_TO_ADDR
// if not tmp then
28252: LD_VAR 0 2
28256: NOT
28257: IFFALSE 28261
// exit ;
28259: GO 28344
// p := 0 ;
28261: LD_ADDR_VAR 0 3
28265: PUSH
28266: LD_INT 0
28268: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28269: LD_INT 35
28271: PPUSH
28272: CALL_OW 67
// p := p + 1 ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_VAR 0 3
28285: PUSH
28286: LD_INT 1
28288: PLUS
28289: ST_TO_ADDR
// for i in tmp do
28290: LD_ADDR_VAR 0 1
28294: PUSH
28295: LD_VAR 0 2
28299: PUSH
28300: FOR_IN
28301: IFFALSE 28332
// if GetLives ( i ) < 1000 then
28303: LD_VAR 0 1
28307: PPUSH
28308: CALL_OW 256
28312: PUSH
28313: LD_INT 1000
28315: LESS
28316: IFFALSE 28330
// SetLives ( i , 1000 ) ;
28318: LD_VAR 0 1
28322: PPUSH
28323: LD_INT 1000
28325: PPUSH
28326: CALL_OW 234
28330: GO 28300
28332: POP
28333: POP
// until p > 20 ;
28334: LD_VAR 0 3
28338: PUSH
28339: LD_INT 20
28341: GREATER
28342: IFFALSE 28269
// end ;
28344: PPOPN 3
28346: END
// every 0 0$1 trigger StreamModeActive and sTime do
28347: LD_EXP 56
28351: PUSH
28352: LD_EXP 107
28356: AND
28357: IFFALSE 28392
28359: GO 28361
28361: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28362: LD_INT 28
28364: PPUSH
28365: LD_OWVAR 2
28369: PPUSH
28370: LD_INT 2
28372: PPUSH
28373: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28377: LD_INT 30
28379: PPUSH
28380: LD_OWVAR 2
28384: PPUSH
28385: LD_INT 2
28387: PPUSH
28388: CALL_OW 322
// end ;
28392: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28393: LD_EXP 56
28397: PUSH
28398: LD_EXP 108
28402: AND
28403: IFFALSE 28524
28405: GO 28407
28407: DISABLE
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28412: LD_ADDR_VAR 0 2
28416: PUSH
28417: LD_INT 22
28419: PUSH
28420: LD_OWVAR 2
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 21
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 3
28441: PUSH
28442: LD_INT 23
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 2
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28524
// for i in tmp do
28475: LD_ADDR_VAR 0 1
28479: PUSH
28480: LD_VAR 0 2
28484: PUSH
28485: FOR_IN
28486: IFFALSE 28522
// begin if Crawls ( i ) then
28488: LD_VAR 0 1
28492: PPUSH
28493: CALL_OW 318
28497: IFFALSE 28508
// ComWalk ( i ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 138
// SetClass ( i , 2 ) ;
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_INT 2
28515: PPUSH
28516: CALL_OW 336
// end ;
28520: GO 28485
28522: POP
28523: POP
// end ;
28524: PPOPN 2
28526: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28527: LD_EXP 56
28531: PUSH
28532: LD_EXP 109
28536: AND
28537: IFFALSE 28825
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
28546: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28547: LD_OWVAR 2
28551: PPUSH
28552: LD_INT 9
28554: PPUSH
28555: LD_INT 1
28557: PPUSH
28558: LD_INT 1
28560: PPUSH
28561: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28565: LD_INT 9
28567: PPUSH
28568: LD_OWVAR 2
28572: PPUSH
28573: CALL_OW 343
// uc_side := 9 ;
28577: LD_ADDR_OWVAR 20
28581: PUSH
28582: LD_INT 9
28584: ST_TO_ADDR
// uc_nation := 2 ;
28585: LD_ADDR_OWVAR 21
28589: PUSH
28590: LD_INT 2
28592: ST_TO_ADDR
// hc_name := Dark Warrior ;
28593: LD_ADDR_OWVAR 26
28597: PUSH
28598: LD_STRING Dark Warrior
28600: ST_TO_ADDR
// hc_gallery :=  ;
28601: LD_ADDR_OWVAR 33
28605: PUSH
28606: LD_STRING 
28608: ST_TO_ADDR
// hc_noskilllimit := true ;
28609: LD_ADDR_OWVAR 76
28613: PUSH
28614: LD_INT 1
28616: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28617: LD_ADDR_OWVAR 31
28621: PUSH
28622: LD_INT 30
28624: PUSH
28625: LD_INT 30
28627: PUSH
28628: LD_INT 30
28630: PUSH
28631: LD_INT 30
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// un := CreateHuman ;
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: CALL_OW 44
28649: ST_TO_ADDR
// hc_noskilllimit := false ;
28650: LD_ADDR_OWVAR 76
28654: PUSH
28655: LD_INT 0
28657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28658: LD_VAR 0 3
28662: PPUSH
28663: LD_INT 1
28665: PPUSH
28666: CALL_OW 51
// ToLua ( playRanger() ) ;
28670: LD_STRING playRanger()
28672: PPUSH
28673: CALL_OW 559
// p := 0 ;
28677: LD_ADDR_VAR 0 2
28681: PUSH
28682: LD_INT 0
28684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28685: LD_INT 35
28687: PPUSH
28688: CALL_OW 67
// p := p + 1 ;
28692: LD_ADDR_VAR 0 2
28696: PUSH
28697: LD_VAR 0 2
28701: PUSH
28702: LD_INT 1
28704: PLUS
28705: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28706: LD_VAR 0 3
28710: PPUSH
28711: CALL_OW 256
28715: PUSH
28716: LD_INT 1000
28718: LESS
28719: IFFALSE 28733
// SetLives ( un , 1000 ) ;
28721: LD_VAR 0 3
28725: PPUSH
28726: LD_INT 1000
28728: PPUSH
28729: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28733: LD_VAR 0 3
28737: PPUSH
28738: LD_INT 81
28740: PUSH
28741: LD_OWVAR 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 91
28752: PUSH
28753: LD_VAR 0 3
28757: PUSH
28758: LD_INT 30
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PPUSH
28770: CALL_OW 69
28774: PPUSH
28775: LD_VAR 0 3
28779: PPUSH
28780: CALL_OW 74
28784: PPUSH
28785: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28789: LD_VAR 0 2
28793: PUSH
28794: LD_INT 80
28796: GREATER
28797: PUSH
28798: LD_VAR 0 3
28802: PPUSH
28803: CALL_OW 301
28807: OR
28808: IFFALSE 28685
// if un then
28810: LD_VAR 0 3
28814: IFFALSE 28825
// RemoveUnit ( un ) ;
28816: LD_VAR 0 3
28820: PPUSH
28821: CALL_OW 64
// end ;
28825: PPOPN 3
28827: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28828: LD_EXP 110
28832: IFFALSE 28948
28834: GO 28836
28836: DISABLE
28837: LD_INT 0
28839: PPUSH
28840: PPUSH
28841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28842: LD_ADDR_VAR 0 2
28846: PUSH
28847: LD_INT 81
28849: PUSH
28850: LD_OWVAR 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 21
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PPUSH
28873: CALL_OW 69
28877: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28878: LD_STRING playComputer()
28880: PPUSH
28881: CALL_OW 559
// if not tmp then
28885: LD_VAR 0 2
28889: NOT
28890: IFFALSE 28894
// exit ;
28892: GO 28948
// for i in tmp do
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: LD_VAR 0 2
28903: PUSH
28904: FOR_IN
28905: IFFALSE 28946
// for j := 1 to 4 do
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: DOUBLE
28913: LD_INT 1
28915: DEC
28916: ST_TO_ADDR
28917: LD_INT 4
28919: PUSH
28920: FOR_TO
28921: IFFALSE 28942
// SetSkill ( i , j , 10 ) ;
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_VAR 0 3
28932: PPUSH
28933: LD_INT 10
28935: PPUSH
28936: CALL_OW 237
28940: GO 28920
28942: POP
28943: POP
28944: GO 28904
28946: POP
28947: POP
// end ;
28948: PPOPN 3
28950: END
// every 0 0$1 trigger s30 do var i , tmp ;
28951: LD_EXP 111
28955: IFFALSE 29024
28957: GO 28959
28959: DISABLE
28960: LD_INT 0
28962: PPUSH
28963: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28964: LD_ADDR_VAR 0 2
28968: PUSH
28969: LD_INT 22
28971: PUSH
28972: LD_OWVAR 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PPUSH
28981: CALL_OW 69
28985: ST_TO_ADDR
// if not tmp then
28986: LD_VAR 0 2
28990: NOT
28991: IFFALSE 28995
// exit ;
28993: GO 29024
// for i in tmp do
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_VAR 0 2
29004: PUSH
29005: FOR_IN
29006: IFFALSE 29022
// SetLives ( i , 300 ) ;
29008: LD_VAR 0 1
29012: PPUSH
29013: LD_INT 300
29015: PPUSH
29016: CALL_OW 234
29020: GO 29005
29022: POP
29023: POP
// end ;
29024: PPOPN 2
29026: END
// every 0 0$1 trigger s60 do var i , tmp ;
29027: LD_EXP 112
29031: IFFALSE 29100
29033: GO 29035
29035: DISABLE
29036: LD_INT 0
29038: PPUSH
29039: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29040: LD_ADDR_VAR 0 2
29044: PUSH
29045: LD_INT 22
29047: PUSH
29048: LD_OWVAR 2
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 69
29061: ST_TO_ADDR
// if not tmp then
29062: LD_VAR 0 2
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29100
// for i in tmp do
29071: LD_ADDR_VAR 0 1
29075: PUSH
29076: LD_VAR 0 2
29080: PUSH
29081: FOR_IN
29082: IFFALSE 29098
// SetLives ( i , 600 ) ;
29084: LD_VAR 0 1
29088: PPUSH
29089: LD_INT 600
29091: PPUSH
29092: CALL_OW 234
29096: GO 29081
29098: POP
29099: POP
// end ;
29100: PPOPN 2
29102: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29103: LD_INT 0
29105: PPUSH
// case cmd of 301 :
29106: LD_VAR 0 1
29110: PUSH
29111: LD_INT 301
29113: DOUBLE
29114: EQUAL
29115: IFTRUE 29119
29117: GO 29151
29119: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29120: LD_VAR 0 6
29124: PPUSH
29125: LD_VAR 0 7
29129: PPUSH
29130: LD_VAR 0 8
29134: PPUSH
29135: LD_VAR 0 4
29139: PPUSH
29140: LD_VAR 0 5
29144: PPUSH
29145: CALL 30352 0 5
29149: GO 29272
29151: LD_INT 302
29153: DOUBLE
29154: EQUAL
29155: IFTRUE 29159
29157: GO 29196
29159: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29160: LD_VAR 0 6
29164: PPUSH
29165: LD_VAR 0 7
29169: PPUSH
29170: LD_VAR 0 8
29174: PPUSH
29175: LD_VAR 0 9
29179: PPUSH
29180: LD_VAR 0 4
29184: PPUSH
29185: LD_VAR 0 5
29189: PPUSH
29190: CALL 30443 0 6
29194: GO 29272
29196: LD_INT 303
29198: DOUBLE
29199: EQUAL
29200: IFTRUE 29204
29202: GO 29241
29204: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29205: LD_VAR 0 6
29209: PPUSH
29210: LD_VAR 0 7
29214: PPUSH
29215: LD_VAR 0 8
29219: PPUSH
29220: LD_VAR 0 9
29224: PPUSH
29225: LD_VAR 0 4
29229: PPUSH
29230: LD_VAR 0 5
29234: PPUSH
29235: CALL 29277 0 6
29239: GO 29272
29241: LD_INT 304
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29271
29249: POP
// hHackTeleport ( unit , x , y ) ; end ;
29250: LD_VAR 0 2
29254: PPUSH
29255: LD_VAR 0 4
29259: PPUSH
29260: LD_VAR 0 5
29264: PPUSH
29265: CALL 31036 0 3
29269: GO 29272
29271: POP
// end ;
29272: LD_VAR 0 12
29276: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29277: LD_INT 0
29279: PPUSH
29280: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29281: LD_VAR 0 1
29285: PUSH
29286: LD_INT 1
29288: LESS
29289: PUSH
29290: LD_VAR 0 1
29294: PUSH
29295: LD_INT 3
29297: GREATER
29298: OR
29299: PUSH
29300: LD_VAR 0 5
29304: PPUSH
29305: LD_VAR 0 6
29309: PPUSH
29310: CALL_OW 428
29314: OR
29315: IFFALSE 29319
// exit ;
29317: GO 30039
// uc_side := your_side ;
29319: LD_ADDR_OWVAR 20
29323: PUSH
29324: LD_OWVAR 2
29328: ST_TO_ADDR
// uc_nation := nation ;
29329: LD_ADDR_OWVAR 21
29333: PUSH
29334: LD_VAR 0 1
29338: ST_TO_ADDR
// bc_level = 1 ;
29339: LD_ADDR_OWVAR 43
29343: PUSH
29344: LD_INT 1
29346: ST_TO_ADDR
// case btype of 1 :
29347: LD_VAR 0 2
29351: PUSH
29352: LD_INT 1
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29371
29360: POP
// bc_type := b_depot ; 2 :
29361: LD_ADDR_OWVAR 42
29365: PUSH
29366: LD_INT 0
29368: ST_TO_ADDR
29369: GO 29983
29371: LD_INT 2
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29390
29379: POP
// bc_type := b_warehouse ; 3 :
29380: LD_ADDR_OWVAR 42
29384: PUSH
29385: LD_INT 1
29387: ST_TO_ADDR
29388: GO 29983
29390: LD_INT 3
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29409
29398: POP
// bc_type := b_lab ; 4 .. 9 :
29399: LD_ADDR_OWVAR 42
29403: PUSH
29404: LD_INT 6
29406: ST_TO_ADDR
29407: GO 29983
29409: LD_INT 4
29411: DOUBLE
29412: GREATEREQUAL
29413: IFFALSE 29421
29415: LD_INT 9
29417: DOUBLE
29418: LESSEQUAL
29419: IFTRUE 29423
29421: GO 29475
29423: POP
// begin bc_type := b_lab_half ;
29424: LD_ADDR_OWVAR 42
29428: PUSH
29429: LD_INT 7
29431: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29432: LD_ADDR_OWVAR 44
29436: PUSH
29437: LD_INT 10
29439: PUSH
29440: LD_INT 11
29442: PUSH
29443: LD_INT 12
29445: PUSH
29446: LD_INT 15
29448: PUSH
29449: LD_INT 14
29451: PUSH
29452: LD_INT 13
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: LD_VAR 0 2
29467: PUSH
29468: LD_INT 3
29470: MINUS
29471: ARRAY
29472: ST_TO_ADDR
// end ; 10 .. 13 :
29473: GO 29983
29475: LD_INT 10
29477: DOUBLE
29478: GREATEREQUAL
29479: IFFALSE 29487
29481: LD_INT 13
29483: DOUBLE
29484: LESSEQUAL
29485: IFTRUE 29489
29487: GO 29566
29489: POP
// begin bc_type := b_lab_full ;
29490: LD_ADDR_OWVAR 42
29494: PUSH
29495: LD_INT 8
29497: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29498: LD_ADDR_OWVAR 44
29502: PUSH
29503: LD_INT 10
29505: PUSH
29506: LD_INT 12
29508: PUSH
29509: LD_INT 14
29511: PUSH
29512: LD_INT 13
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: PUSH
29521: LD_VAR 0 2
29525: PUSH
29526: LD_INT 9
29528: MINUS
29529: ARRAY
29530: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29531: LD_ADDR_OWVAR 45
29535: PUSH
29536: LD_INT 11
29538: PUSH
29539: LD_INT 15
29541: PUSH
29542: LD_INT 12
29544: PUSH
29545: LD_INT 15
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: PUSH
29554: LD_VAR 0 2
29558: PUSH
29559: LD_INT 9
29561: MINUS
29562: ARRAY
29563: ST_TO_ADDR
// end ; 14 :
29564: GO 29983
29566: LD_INT 14
29568: DOUBLE
29569: EQUAL
29570: IFTRUE 29574
29572: GO 29585
29574: POP
// bc_type := b_workshop ; 15 :
29575: LD_ADDR_OWVAR 42
29579: PUSH
29580: LD_INT 2
29582: ST_TO_ADDR
29583: GO 29983
29585: LD_INT 15
29587: DOUBLE
29588: EQUAL
29589: IFTRUE 29593
29591: GO 29604
29593: POP
// bc_type := b_factory ; 16 :
29594: LD_ADDR_OWVAR 42
29598: PUSH
29599: LD_INT 3
29601: ST_TO_ADDR
29602: GO 29983
29604: LD_INT 16
29606: DOUBLE
29607: EQUAL
29608: IFTRUE 29612
29610: GO 29623
29612: POP
// bc_type := b_ext_gun ; 17 :
29613: LD_ADDR_OWVAR 42
29617: PUSH
29618: LD_INT 17
29620: ST_TO_ADDR
29621: GO 29983
29623: LD_INT 17
29625: DOUBLE
29626: EQUAL
29627: IFTRUE 29631
29629: GO 29659
29631: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29632: LD_ADDR_OWVAR 42
29636: PUSH
29637: LD_INT 19
29639: PUSH
29640: LD_INT 23
29642: PUSH
29643: LD_INT 19
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: PUSH
29651: LD_VAR 0 1
29655: ARRAY
29656: ST_TO_ADDR
29657: GO 29983
29659: LD_INT 18
29661: DOUBLE
29662: EQUAL
29663: IFTRUE 29667
29665: GO 29678
29667: POP
// bc_type := b_ext_radar ; 19 :
29668: LD_ADDR_OWVAR 42
29672: PUSH
29673: LD_INT 20
29675: ST_TO_ADDR
29676: GO 29983
29678: LD_INT 19
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29697
29686: POP
// bc_type := b_ext_radio ; 20 :
29687: LD_ADDR_OWVAR 42
29691: PUSH
29692: LD_INT 22
29694: ST_TO_ADDR
29695: GO 29983
29697: LD_INT 20
29699: DOUBLE
29700: EQUAL
29701: IFTRUE 29705
29703: GO 29716
29705: POP
// bc_type := b_ext_siberium ; 21 :
29706: LD_ADDR_OWVAR 42
29710: PUSH
29711: LD_INT 21
29713: ST_TO_ADDR
29714: GO 29983
29716: LD_INT 21
29718: DOUBLE
29719: EQUAL
29720: IFTRUE 29724
29722: GO 29735
29724: POP
// bc_type := b_ext_computer ; 22 :
29725: LD_ADDR_OWVAR 42
29729: PUSH
29730: LD_INT 24
29732: ST_TO_ADDR
29733: GO 29983
29735: LD_INT 22
29737: DOUBLE
29738: EQUAL
29739: IFTRUE 29743
29741: GO 29754
29743: POP
// bc_type := b_ext_track ; 23 :
29744: LD_ADDR_OWVAR 42
29748: PUSH
29749: LD_INT 16
29751: ST_TO_ADDR
29752: GO 29983
29754: LD_INT 23
29756: DOUBLE
29757: EQUAL
29758: IFTRUE 29762
29760: GO 29773
29762: POP
// bc_type := b_ext_laser ; 24 :
29763: LD_ADDR_OWVAR 42
29767: PUSH
29768: LD_INT 25
29770: ST_TO_ADDR
29771: GO 29983
29773: LD_INT 24
29775: DOUBLE
29776: EQUAL
29777: IFTRUE 29781
29779: GO 29792
29781: POP
// bc_type := b_control_tower ; 25 :
29782: LD_ADDR_OWVAR 42
29786: PUSH
29787: LD_INT 36
29789: ST_TO_ADDR
29790: GO 29983
29792: LD_INT 25
29794: DOUBLE
29795: EQUAL
29796: IFTRUE 29800
29798: GO 29811
29800: POP
// bc_type := b_breastwork ; 26 :
29801: LD_ADDR_OWVAR 42
29805: PUSH
29806: LD_INT 31
29808: ST_TO_ADDR
29809: GO 29983
29811: LD_INT 26
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 29830
29819: POP
// bc_type := b_bunker ; 27 :
29820: LD_ADDR_OWVAR 42
29824: PUSH
29825: LD_INT 32
29827: ST_TO_ADDR
29828: GO 29983
29830: LD_INT 27
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29849
29838: POP
// bc_type := b_turret ; 28 :
29839: LD_ADDR_OWVAR 42
29843: PUSH
29844: LD_INT 33
29846: ST_TO_ADDR
29847: GO 29983
29849: LD_INT 28
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29868
29857: POP
// bc_type := b_armoury ; 29 :
29858: LD_ADDR_OWVAR 42
29862: PUSH
29863: LD_INT 4
29865: ST_TO_ADDR
29866: GO 29983
29868: LD_INT 29
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29887
29876: POP
// bc_type := b_barracks ; 30 :
29877: LD_ADDR_OWVAR 42
29881: PUSH
29882: LD_INT 5
29884: ST_TO_ADDR
29885: GO 29983
29887: LD_INT 30
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29906
29895: POP
// bc_type := b_solar_power ; 31 :
29896: LD_ADDR_OWVAR 42
29900: PUSH
29901: LD_INT 27
29903: ST_TO_ADDR
29904: GO 29983
29906: LD_INT 31
29908: DOUBLE
29909: EQUAL
29910: IFTRUE 29914
29912: GO 29925
29914: POP
// bc_type := b_oil_power ; 32 :
29915: LD_ADDR_OWVAR 42
29919: PUSH
29920: LD_INT 26
29922: ST_TO_ADDR
29923: GO 29983
29925: LD_INT 32
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29944
29933: POP
// bc_type := b_siberite_power ; 33 :
29934: LD_ADDR_OWVAR 42
29938: PUSH
29939: LD_INT 28
29941: ST_TO_ADDR
29942: GO 29983
29944: LD_INT 33
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29963
29952: POP
// bc_type := b_oil_mine ; 34 :
29953: LD_ADDR_OWVAR 42
29957: PUSH
29958: LD_INT 29
29960: ST_TO_ADDR
29961: GO 29983
29963: LD_INT 34
29965: DOUBLE
29966: EQUAL
29967: IFTRUE 29971
29969: GO 29982
29971: POP
// bc_type := b_siberite_mine ; end ;
29972: LD_ADDR_OWVAR 42
29976: PUSH
29977: LD_INT 30
29979: ST_TO_ADDR
29980: GO 29983
29982: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29983: LD_ADDR_VAR 0 8
29987: PUSH
29988: LD_VAR 0 5
29992: PPUSH
29993: LD_VAR 0 6
29997: PPUSH
29998: LD_VAR 0 3
30002: PPUSH
30003: CALL_OW 47
30007: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30008: LD_OWVAR 42
30012: PUSH
30013: LD_INT 32
30015: PUSH
30016: LD_INT 33
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: IN
30023: IFFALSE 30039
// PlaceWeaponTurret ( b , weapon ) ;
30025: LD_VAR 0 8
30029: PPUSH
30030: LD_VAR 0 4
30034: PPUSH
30035: CALL_OW 431
// end ;
30039: LD_VAR 0 7
30043: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30044: LD_INT 0
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30050: LD_ADDR_VAR 0 4
30054: PUSH
30055: LD_INT 22
30057: PUSH
30058: LD_OWVAR 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 30
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 30
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: ST_TO_ADDR
// if not tmp then
30104: LD_VAR 0 4
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 30172
// for i in tmp do
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_VAR 0 4
30122: PUSH
30123: FOR_IN
30124: IFFALSE 30170
// for j = 1 to 3 do
30126: LD_ADDR_VAR 0 3
30130: PUSH
30131: DOUBLE
30132: LD_INT 1
30134: DEC
30135: ST_TO_ADDR
30136: LD_INT 3
30138: PUSH
30139: FOR_TO
30140: IFFALSE 30166
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30142: LD_VAR 0 2
30146: PPUSH
30147: CALL_OW 274
30151: PPUSH
30152: LD_VAR 0 3
30156: PPUSH
30157: LD_INT 99999
30159: PPUSH
30160: CALL_OW 277
30164: GO 30139
30166: POP
30167: POP
30168: GO 30123
30170: POP
30171: POP
// end ;
30172: LD_VAR 0 1
30176: RET
// export function hHackSetLevel10 ; var i , j ; begin
30177: LD_INT 0
30179: PPUSH
30180: PPUSH
30181: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30182: LD_ADDR_VAR 0 2
30186: PUSH
30187: LD_INT 21
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PPUSH
30197: CALL_OW 69
30201: PUSH
30202: FOR_IN
30203: IFFALSE 30255
// if IsSelected ( i ) then
30205: LD_VAR 0 2
30209: PPUSH
30210: CALL_OW 306
30214: IFFALSE 30253
// begin for j := 1 to 4 do
30216: LD_ADDR_VAR 0 3
30220: PUSH
30221: DOUBLE
30222: LD_INT 1
30224: DEC
30225: ST_TO_ADDR
30226: LD_INT 4
30228: PUSH
30229: FOR_TO
30230: IFFALSE 30251
// SetSkill ( i , j , 10 ) ;
30232: LD_VAR 0 2
30236: PPUSH
30237: LD_VAR 0 3
30241: PPUSH
30242: LD_INT 10
30244: PPUSH
30245: CALL_OW 237
30249: GO 30229
30251: POP
30252: POP
// end ;
30253: GO 30202
30255: POP
30256: POP
// end ;
30257: LD_VAR 0 1
30261: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30262: LD_INT 0
30264: PPUSH
30265: PPUSH
30266: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30267: LD_ADDR_VAR 0 2
30271: PUSH
30272: LD_INT 22
30274: PUSH
30275: LD_OWVAR 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 21
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PPUSH
30298: CALL_OW 69
30302: PUSH
30303: FOR_IN
30304: IFFALSE 30345
// begin for j := 1 to 4 do
30306: LD_ADDR_VAR 0 3
30310: PUSH
30311: DOUBLE
30312: LD_INT 1
30314: DEC
30315: ST_TO_ADDR
30316: LD_INT 4
30318: PUSH
30319: FOR_TO
30320: IFFALSE 30341
// SetSkill ( i , j , 10 ) ;
30322: LD_VAR 0 2
30326: PPUSH
30327: LD_VAR 0 3
30331: PPUSH
30332: LD_INT 10
30334: PPUSH
30335: CALL_OW 237
30339: GO 30319
30341: POP
30342: POP
// end ;
30343: GO 30303
30345: POP
30346: POP
// end ;
30347: LD_VAR 0 1
30351: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30352: LD_INT 0
30354: PPUSH
// uc_side := your_side ;
30355: LD_ADDR_OWVAR 20
30359: PUSH
30360: LD_OWVAR 2
30364: ST_TO_ADDR
// uc_nation := nation ;
30365: LD_ADDR_OWVAR 21
30369: PUSH
30370: LD_VAR 0 1
30374: ST_TO_ADDR
// InitHc ;
30375: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30379: LD_INT 0
30381: PPUSH
30382: LD_VAR 0 2
30386: PPUSH
30387: LD_VAR 0 3
30391: PPUSH
30392: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30396: LD_VAR 0 4
30400: PPUSH
30401: LD_VAR 0 5
30405: PPUSH
30406: CALL_OW 428
30410: PUSH
30411: LD_INT 0
30413: EQUAL
30414: IFFALSE 30438
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30416: CALL_OW 44
30420: PPUSH
30421: LD_VAR 0 4
30425: PPUSH
30426: LD_VAR 0 5
30430: PPUSH
30431: LD_INT 1
30433: PPUSH
30434: CALL_OW 48
// end ;
30438: LD_VAR 0 6
30442: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
// uc_side := your_side ;
30447: LD_ADDR_OWVAR 20
30451: PUSH
30452: LD_OWVAR 2
30456: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30457: LD_VAR 0 1
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: LD_INT 3
30470: PUSH
30471: LD_INT 4
30473: PUSH
30474: LD_INT 5
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: IN
30484: IFFALSE 30496
// uc_nation := nation_american else
30486: LD_ADDR_OWVAR 21
30490: PUSH
30491: LD_INT 1
30493: ST_TO_ADDR
30494: GO 30539
// if chassis in [ 11 , 12 , 13 , 14 ] then
30496: LD_VAR 0 1
30500: PUSH
30501: LD_INT 11
30503: PUSH
30504: LD_INT 12
30506: PUSH
30507: LD_INT 13
30509: PUSH
30510: LD_INT 14
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: IN
30519: IFFALSE 30531
// uc_nation := nation_arabian else
30521: LD_ADDR_OWVAR 21
30525: PUSH
30526: LD_INT 2
30528: ST_TO_ADDR
30529: GO 30539
// uc_nation := nation_russian ;
30531: LD_ADDR_OWVAR 21
30535: PUSH
30536: LD_INT 3
30538: ST_TO_ADDR
// vc_chassis := chassis ;
30539: LD_ADDR_OWVAR 37
30543: PUSH
30544: LD_VAR 0 1
30548: ST_TO_ADDR
// vc_engine := engine ;
30549: LD_ADDR_OWVAR 39
30553: PUSH
30554: LD_VAR 0 2
30558: ST_TO_ADDR
// vc_control := control ;
30559: LD_ADDR_OWVAR 38
30563: PUSH
30564: LD_VAR 0 3
30568: ST_TO_ADDR
// vc_weapon := weapon ;
30569: LD_ADDR_OWVAR 40
30573: PUSH
30574: LD_VAR 0 4
30578: ST_TO_ADDR
// un := CreateVehicle ;
30579: LD_ADDR_VAR 0 8
30583: PUSH
30584: CALL_OW 45
30588: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30589: LD_VAR 0 8
30593: PPUSH
30594: LD_INT 0
30596: PPUSH
30597: LD_INT 5
30599: PPUSH
30600: CALL_OW 12
30604: PPUSH
30605: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30609: LD_VAR 0 8
30613: PPUSH
30614: LD_VAR 0 5
30618: PPUSH
30619: LD_VAR 0 6
30623: PPUSH
30624: LD_INT 1
30626: PPUSH
30627: CALL_OW 48
// end ;
30631: LD_VAR 0 7
30635: RET
// export hInvincible ; every 1 do
30636: GO 30638
30638: DISABLE
// hInvincible := [ ] ;
30639: LD_ADDR_EXP 113
30643: PUSH
30644: EMPTY
30645: ST_TO_ADDR
30646: END
// every 10 do var i ;
30647: GO 30649
30649: DISABLE
30650: LD_INT 0
30652: PPUSH
// begin enable ;
30653: ENABLE
// if not hInvincible then
30654: LD_EXP 113
30658: NOT
30659: IFFALSE 30663
// exit ;
30661: GO 30707
// for i in hInvincible do
30663: LD_ADDR_VAR 0 1
30667: PUSH
30668: LD_EXP 113
30672: PUSH
30673: FOR_IN
30674: IFFALSE 30705
// if GetLives ( i ) < 1000 then
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 256
30685: PUSH
30686: LD_INT 1000
30688: LESS
30689: IFFALSE 30703
// SetLives ( i , 1000 ) ;
30691: LD_VAR 0 1
30695: PPUSH
30696: LD_INT 1000
30698: PPUSH
30699: CALL_OW 234
30703: GO 30673
30705: POP
30706: POP
// end ;
30707: PPOPN 1
30709: END
// export function hHackInvincible ; var i ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30714: LD_ADDR_VAR 0 2
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: LD_INT 21
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 21
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL_OW 69
30751: PUSH
30752: FOR_IN
30753: IFFALSE 30814
// if IsSelected ( i ) then
30755: LD_VAR 0 2
30759: PPUSH
30760: CALL_OW 306
30764: IFFALSE 30812
// begin if i in hInvincible then
30766: LD_VAR 0 2
30770: PUSH
30771: LD_EXP 113
30775: IN
30776: IFFALSE 30796
// hInvincible := hInvincible diff i else
30778: LD_ADDR_EXP 113
30782: PUSH
30783: LD_EXP 113
30787: PUSH
30788: LD_VAR 0 2
30792: DIFF
30793: ST_TO_ADDR
30794: GO 30812
// hInvincible := hInvincible union i ;
30796: LD_ADDR_EXP 113
30800: PUSH
30801: LD_EXP 113
30805: PUSH
30806: LD_VAR 0 2
30810: UNION
30811: ST_TO_ADDR
// end ;
30812: GO 30752
30814: POP
30815: POP
// end ;
30816: LD_VAR 0 1
30820: RET
// export function hHackInvisible ; var i , j ; begin
30821: LD_INT 0
30823: PPUSH
30824: PPUSH
30825: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30826: LD_ADDR_VAR 0 2
30830: PUSH
30831: LD_INT 21
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PPUSH
30841: CALL_OW 69
30845: PUSH
30846: FOR_IN
30847: IFFALSE 30871
// if IsSelected ( i ) then
30849: LD_VAR 0 2
30853: PPUSH
30854: CALL_OW 306
30858: IFFALSE 30869
// ComForceInvisible ( i ) ;
30860: LD_VAR 0 2
30864: PPUSH
30865: CALL_OW 496
30869: GO 30846
30871: POP
30872: POP
// end ;
30873: LD_VAR 0 1
30877: RET
// export function hHackChangeYourSide ; begin
30878: LD_INT 0
30880: PPUSH
// if your_side = 8 then
30881: LD_OWVAR 2
30885: PUSH
30886: LD_INT 8
30888: EQUAL
30889: IFFALSE 30901
// your_side := 0 else
30891: LD_ADDR_OWVAR 2
30895: PUSH
30896: LD_INT 0
30898: ST_TO_ADDR
30899: GO 30915
// your_side := your_side + 1 ;
30901: LD_ADDR_OWVAR 2
30905: PUSH
30906: LD_OWVAR 2
30910: PUSH
30911: LD_INT 1
30913: PLUS
30914: ST_TO_ADDR
// end ;
30915: LD_VAR 0 1
30919: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30920: LD_INT 0
30922: PPUSH
30923: PPUSH
30924: PPUSH
// for i in all_units do
30925: LD_ADDR_VAR 0 2
30929: PUSH
30930: LD_OWVAR 3
30934: PUSH
30935: FOR_IN
30936: IFFALSE 31014
// if IsSelected ( i ) then
30938: LD_VAR 0 2
30942: PPUSH
30943: CALL_OW 306
30947: IFFALSE 31012
// begin j := GetSide ( i ) ;
30949: LD_ADDR_VAR 0 3
30953: PUSH
30954: LD_VAR 0 2
30958: PPUSH
30959: CALL_OW 255
30963: ST_TO_ADDR
// if j = 8 then
30964: LD_VAR 0 3
30968: PUSH
30969: LD_INT 8
30971: EQUAL
30972: IFFALSE 30984
// j := 0 else
30974: LD_ADDR_VAR 0 3
30978: PUSH
30979: LD_INT 0
30981: ST_TO_ADDR
30982: GO 30998
// j := j + 1 ;
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_VAR 0 3
30993: PUSH
30994: LD_INT 1
30996: PLUS
30997: ST_TO_ADDR
// SetSide ( i , j ) ;
30998: LD_VAR 0 2
31002: PPUSH
31003: LD_VAR 0 3
31007: PPUSH
31008: CALL_OW 235
// end ;
31012: GO 30935
31014: POP
31015: POP
// end ;
31016: LD_VAR 0 1
31020: RET
// export function hHackFog ; begin
31021: LD_INT 0
31023: PPUSH
// FogOff ( true ) ;
31024: LD_INT 1
31026: PPUSH
31027: CALL_OW 344
// end ;
31031: LD_VAR 0 1
31035: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31036: LD_INT 0
31038: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31039: LD_VAR 0 1
31043: PPUSH
31044: LD_VAR 0 2
31048: PPUSH
31049: LD_VAR 0 3
31053: PPUSH
31054: LD_INT 1
31056: PPUSH
31057: LD_INT 1
31059: PPUSH
31060: CALL_OW 483
// CenterOnXY ( x , y ) ;
31064: LD_VAR 0 2
31068: PPUSH
31069: LD_VAR 0 3
31073: PPUSH
31074: CALL_OW 84
// end ; end_of_file
31078: LD_VAR 0 4
31082: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31083: LD_INT 0
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 264
31098: PUSH
31099: LD_EXP 40
31103: EQUAL
31104: IFFALSE 31176
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31106: LD_INT 68
31108: PPUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 255
31118: PPUSH
31119: CALL_OW 321
31123: PUSH
31124: LD_INT 2
31126: EQUAL
31127: IFFALSE 31139
// eff := 70 else
31129: LD_ADDR_VAR 0 4
31133: PUSH
31134: LD_INT 70
31136: ST_TO_ADDR
31137: GO 31147
// eff := 30 ;
31139: LD_ADDR_VAR 0 4
31143: PUSH
31144: LD_INT 30
31146: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31147: LD_VAR 0 1
31151: PPUSH
31152: CALL_OW 250
31156: PPUSH
31157: LD_VAR 0 1
31161: PPUSH
31162: CALL_OW 251
31166: PPUSH
31167: LD_VAR 0 4
31171: PPUSH
31172: CALL_OW 495
// end ; end ;
31176: LD_VAR 0 2
31180: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31181: LD_INT 0
31183: PPUSH
// end ;
31184: LD_VAR 0 4
31188: RET
// export function SOS_Command ( cmd ) ; begin
31189: LD_INT 0
31191: PPUSH
// end ;
31192: LD_VAR 0 2
31196: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31197: LD_INT 0
31199: PPUSH
// end ;
31200: LD_VAR 0 6
31204: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31205: LD_INT 0
31207: PPUSH
31208: PPUSH
// if not vehicle or not factory then
31209: LD_VAR 0 1
31213: NOT
31214: PUSH
31215: LD_VAR 0 2
31219: NOT
31220: OR
31221: IFFALSE 31225
// exit ;
31223: GO 31456
// if factoryWaypoints >= factory then
31225: LD_EXP 114
31229: PUSH
31230: LD_VAR 0 2
31234: GREATEREQUAL
31235: IFFALSE 31456
// if factoryWaypoints [ factory ] then
31237: LD_EXP 114
31241: PUSH
31242: LD_VAR 0 2
31246: ARRAY
31247: IFFALSE 31456
// begin if GetControl ( vehicle ) = control_manual then
31249: LD_VAR 0 1
31253: PPUSH
31254: CALL_OW 263
31258: PUSH
31259: LD_INT 1
31261: EQUAL
31262: IFFALSE 31343
// begin driver := IsDrivenBy ( vehicle ) ;
31264: LD_ADDR_VAR 0 4
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 311
31278: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31279: LD_VAR 0 4
31283: PPUSH
31284: LD_EXP 114
31288: PUSH
31289: LD_VAR 0 2
31293: ARRAY
31294: PUSH
31295: LD_INT 3
31297: ARRAY
31298: PPUSH
31299: LD_EXP 114
31303: PUSH
31304: LD_VAR 0 2
31308: ARRAY
31309: PUSH
31310: LD_INT 4
31312: ARRAY
31313: PPUSH
31314: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31318: LD_VAR 0 4
31322: PPUSH
31323: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31327: LD_VAR 0 4
31331: PPUSH
31332: LD_VAR 0 2
31336: PPUSH
31337: CALL_OW 180
// end else
31341: GO 31456
// if GetControl ( vehicle ) = control_remote then
31343: LD_VAR 0 1
31347: PPUSH
31348: CALL_OW 263
31352: PUSH
31353: LD_INT 2
31355: EQUAL
31356: IFFALSE 31417
// begin wait ( 0 0$2 ) ;
31358: LD_INT 70
31360: PPUSH
31361: CALL_OW 67
// if Connect ( vehicle ) then
31365: LD_VAR 0 1
31369: PPUSH
31370: CALL 43680 0 1
31374: IFFALSE 31415
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31376: LD_VAR 0 1
31380: PPUSH
31381: LD_EXP 114
31385: PUSH
31386: LD_VAR 0 2
31390: ARRAY
31391: PUSH
31392: LD_INT 3
31394: ARRAY
31395: PPUSH
31396: LD_EXP 114
31400: PUSH
31401: LD_VAR 0 2
31405: ARRAY
31406: PUSH
31407: LD_INT 4
31409: ARRAY
31410: PPUSH
31411: CALL_OW 171
// end else
31415: GO 31456
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31417: LD_VAR 0 1
31421: PPUSH
31422: LD_EXP 114
31426: PUSH
31427: LD_VAR 0 2
31431: ARRAY
31432: PUSH
31433: LD_INT 3
31435: ARRAY
31436: PPUSH
31437: LD_EXP 114
31441: PUSH
31442: LD_VAR 0 2
31446: ARRAY
31447: PUSH
31448: LD_INT 4
31450: ARRAY
31451: PPUSH
31452: CALL_OW 171
// end ; end ;
31456: LD_VAR 0 3
31460: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31461: LD_INT 0
31463: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31464: LD_VAR 0 1
31468: PUSH
31469: LD_INT 250
31471: EQUAL
31472: PUSH
31473: LD_VAR 0 2
31477: PPUSH
31478: CALL_OW 264
31482: PUSH
31483: LD_EXP 43
31487: EQUAL
31488: AND
31489: IFFALSE 31510
// MinerPlaceMine ( unit , x , y ) ;
31491: LD_VAR 0 2
31495: PPUSH
31496: LD_VAR 0 4
31500: PPUSH
31501: LD_VAR 0 5
31505: PPUSH
31506: CALL 34238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31510: LD_VAR 0 1
31514: PUSH
31515: LD_INT 251
31517: EQUAL
31518: PUSH
31519: LD_VAR 0 2
31523: PPUSH
31524: CALL_OW 264
31528: PUSH
31529: LD_EXP 43
31533: EQUAL
31534: AND
31535: IFFALSE 31556
// MinerDetonateMine ( unit , x , y ) ;
31537: LD_VAR 0 2
31541: PPUSH
31542: LD_VAR 0 4
31546: PPUSH
31547: LD_VAR 0 5
31551: PPUSH
31552: CALL 34515 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31556: LD_VAR 0 1
31560: PUSH
31561: LD_INT 252
31563: EQUAL
31564: PUSH
31565: LD_VAR 0 2
31569: PPUSH
31570: CALL_OW 264
31574: PUSH
31575: LD_EXP 43
31579: EQUAL
31580: AND
31581: IFFALSE 31602
// MinerCreateMinefield ( unit , x , y ) ;
31583: LD_VAR 0 2
31587: PPUSH
31588: LD_VAR 0 4
31592: PPUSH
31593: LD_VAR 0 5
31597: PPUSH
31598: CALL 34932 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31602: LD_VAR 0 1
31606: PUSH
31607: LD_INT 253
31609: EQUAL
31610: PUSH
31611: LD_VAR 0 2
31615: PPUSH
31616: CALL_OW 257
31620: PUSH
31621: LD_INT 5
31623: EQUAL
31624: AND
31625: IFFALSE 31646
// ComBinocular ( unit , x , y ) ;
31627: LD_VAR 0 2
31631: PPUSH
31632: LD_VAR 0 4
31636: PPUSH
31637: LD_VAR 0 5
31641: PPUSH
31642: CALL 35303 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31646: LD_VAR 0 1
31650: PUSH
31651: LD_INT 254
31653: EQUAL
31654: PUSH
31655: LD_VAR 0 2
31659: PPUSH
31660: CALL_OW 264
31664: PUSH
31665: LD_EXP 38
31669: EQUAL
31670: AND
31671: PUSH
31672: LD_VAR 0 3
31676: PPUSH
31677: CALL_OW 263
31681: PUSH
31682: LD_INT 3
31684: EQUAL
31685: AND
31686: IFFALSE 31702
// HackDestroyVehicle ( unit , selectedUnit ) ;
31688: LD_VAR 0 2
31692: PPUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: CALL 33598 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31702: LD_VAR 0 1
31706: PUSH
31707: LD_INT 255
31709: EQUAL
31710: PUSH
31711: LD_VAR 0 2
31715: PPUSH
31716: CALL_OW 264
31720: PUSH
31721: LD_INT 14
31723: PUSH
31724: LD_INT 53
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: IN
31731: AND
31732: PUSH
31733: LD_VAR 0 4
31737: PPUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: CALL_OW 488
31747: AND
31748: IFFALSE 31772
// CutTreeXYR ( unit , x , y , 12 ) ;
31750: LD_VAR 0 2
31754: PPUSH
31755: LD_VAR 0 4
31759: PPUSH
31760: LD_VAR 0 5
31764: PPUSH
31765: LD_INT 12
31767: PPUSH
31768: CALL 32164 0 4
// if cmd = 256 then
31772: LD_VAR 0 1
31776: PUSH
31777: LD_INT 256
31779: EQUAL
31780: IFFALSE 31801
// SetFactoryWaypoint ( unit , x , y ) ;
31782: LD_VAR 0 2
31786: PPUSH
31787: LD_VAR 0 4
31791: PPUSH
31792: LD_VAR 0 5
31796: PPUSH
31797: CALL 31806 0 3
// end ;
31801: LD_VAR 0 6
31805: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31806: LD_INT 0
31808: PPUSH
31809: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31810: LD_VAR 0 1
31814: NOT
31815: PUSH
31816: LD_VAR 0 2
31820: PPUSH
31821: LD_VAR 0 3
31825: PPUSH
31826: CALL_OW 488
31830: NOT
31831: OR
31832: PUSH
31833: LD_VAR 0 1
31837: PPUSH
31838: CALL_OW 266
31842: PUSH
31843: LD_INT 3
31845: NONEQUAL
31846: PUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 247
31856: PUSH
31857: LD_INT 1
31859: EQUAL
31860: NOT
31861: AND
31862: OR
31863: IFFALSE 31867
// exit ;
31865: GO 32016
// if GetType ( factory ) = unit_human then
31867: LD_VAR 0 1
31871: PPUSH
31872: CALL_OW 247
31876: PUSH
31877: LD_INT 1
31879: EQUAL
31880: IFFALSE 31897
// factory := IsInUnit ( factory ) ;
31882: LD_ADDR_VAR 0 1
31886: PUSH
31887: LD_VAR 0 1
31891: PPUSH
31892: CALL_OW 310
31896: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL_OW 266
31906: PUSH
31907: LD_INT 3
31909: NONEQUAL
31910: IFFALSE 31914
// exit ;
31912: GO 32016
// if HexInfo ( x , y ) = factory then
31914: LD_VAR 0 2
31918: PPUSH
31919: LD_VAR 0 3
31923: PPUSH
31924: CALL_OW 428
31928: PUSH
31929: LD_VAR 0 1
31933: EQUAL
31934: IFFALSE 31961
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31936: LD_ADDR_EXP 114
31940: PUSH
31941: LD_EXP 114
31945: PPUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_INT 0
31953: PPUSH
31954: CALL_OW 1
31958: ST_TO_ADDR
31959: GO 32012
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31961: LD_ADDR_EXP 114
31965: PUSH
31966: LD_EXP 114
31970: PPUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: LD_VAR 0 1
31980: PPUSH
31981: CALL_OW 255
31985: PUSH
31986: LD_VAR 0 1
31990: PUSH
31991: LD_VAR 0 2
31995: PUSH
31996: LD_VAR 0 3
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: PPUSH
32007: CALL_OW 1
32011: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32012: CALL 32021 0 0
// end ;
32016: LD_VAR 0 4
32020: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32025: LD_STRING resetFactoryWaypoint();
32027: PPUSH
32028: CALL_OW 559
// if factoryWaypoints then
32032: LD_EXP 114
32036: IFFALSE 32159
// begin for i := 1 to factoryWaypoints do
32038: LD_ADDR_VAR 0 2
32042: PUSH
32043: DOUBLE
32044: LD_INT 1
32046: DEC
32047: ST_TO_ADDR
32048: LD_EXP 114
32052: PUSH
32053: FOR_TO
32054: IFFALSE 32157
// if factoryWaypoints [ i ] then
32056: LD_EXP 114
32060: PUSH
32061: LD_VAR 0 2
32065: ARRAY
32066: IFFALSE 32155
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
32068: LD_STRING setFactoryWaypointXY(
32070: PUSH
32071: LD_EXP 114
32075: PUSH
32076: LD_VAR 0 2
32080: ARRAY
32081: PUSH
32082: LD_INT 1
32084: ARRAY
32085: STR
32086: PUSH
32087: LD_STRING ,
32089: STR
32090: PUSH
32091: LD_EXP 114
32095: PUSH
32096: LD_VAR 0 2
32100: ARRAY
32101: PUSH
32102: LD_INT 2
32104: ARRAY
32105: STR
32106: PUSH
32107: LD_STRING ,
32109: STR
32110: PUSH
32111: LD_EXP 114
32115: PUSH
32116: LD_VAR 0 2
32120: ARRAY
32121: PUSH
32122: LD_INT 3
32124: ARRAY
32125: STR
32126: PUSH
32127: LD_STRING ,
32129: STR
32130: PUSH
32131: LD_EXP 114
32135: PUSH
32136: LD_VAR 0 2
32140: ARRAY
32141: PUSH
32142: LD_INT 4
32144: ARRAY
32145: STR
32146: PUSH
32147: LD_STRING )
32149: STR
32150: PPUSH
32151: CALL_OW 559
32155: GO 32053
32157: POP
32158: POP
// end ; end ;
32159: LD_VAR 0 1
32163: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32164: LD_INT 0
32166: PPUSH
32167: PPUSH
32168: PPUSH
32169: PPUSH
32170: PPUSH
32171: PPUSH
32172: PPUSH
32173: PPUSH
32174: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32175: LD_VAR 0 1
32179: NOT
32180: PUSH
32181: LD_VAR 0 2
32185: PPUSH
32186: LD_VAR 0 3
32190: PPUSH
32191: CALL_OW 488
32195: NOT
32196: OR
32197: PUSH
32198: LD_VAR 0 4
32202: NOT
32203: OR
32204: IFFALSE 32208
// exit ;
32206: GO 32548
// list := [ ] ;
32208: LD_ADDR_VAR 0 13
32212: PUSH
32213: EMPTY
32214: ST_TO_ADDR
// if x - r < 0 then
32215: LD_VAR 0 2
32219: PUSH
32220: LD_VAR 0 4
32224: MINUS
32225: PUSH
32226: LD_INT 0
32228: LESS
32229: IFFALSE 32241
// min_x := 0 else
32231: LD_ADDR_VAR 0 7
32235: PUSH
32236: LD_INT 0
32238: ST_TO_ADDR
32239: GO 32257
// min_x := x - r ;
32241: LD_ADDR_VAR 0 7
32245: PUSH
32246: LD_VAR 0 2
32250: PUSH
32251: LD_VAR 0 4
32255: MINUS
32256: ST_TO_ADDR
// if y - r < 0 then
32257: LD_VAR 0 3
32261: PUSH
32262: LD_VAR 0 4
32266: MINUS
32267: PUSH
32268: LD_INT 0
32270: LESS
32271: IFFALSE 32283
// min_y := 0 else
32273: LD_ADDR_VAR 0 8
32277: PUSH
32278: LD_INT 0
32280: ST_TO_ADDR
32281: GO 32299
// min_y := y - r ;
32283: LD_ADDR_VAR 0 8
32287: PUSH
32288: LD_VAR 0 3
32292: PUSH
32293: LD_VAR 0 4
32297: MINUS
32298: ST_TO_ADDR
// max_x := x + r ;
32299: LD_ADDR_VAR 0 9
32303: PUSH
32304: LD_VAR 0 2
32308: PUSH
32309: LD_VAR 0 4
32313: PLUS
32314: ST_TO_ADDR
// max_y := y + r ;
32315: LD_ADDR_VAR 0 10
32319: PUSH
32320: LD_VAR 0 3
32324: PUSH
32325: LD_VAR 0 4
32329: PLUS
32330: ST_TO_ADDR
// for _x = min_x to max_x do
32331: LD_ADDR_VAR 0 11
32335: PUSH
32336: DOUBLE
32337: LD_VAR 0 7
32341: DEC
32342: ST_TO_ADDR
32343: LD_VAR 0 9
32347: PUSH
32348: FOR_TO
32349: IFFALSE 32466
// for _y = min_y to max_y do
32351: LD_ADDR_VAR 0 12
32355: PUSH
32356: DOUBLE
32357: LD_VAR 0 8
32361: DEC
32362: ST_TO_ADDR
32363: LD_VAR 0 10
32367: PUSH
32368: FOR_TO
32369: IFFALSE 32462
// begin if not ValidHex ( _x , _y ) then
32371: LD_VAR 0 11
32375: PPUSH
32376: LD_VAR 0 12
32380: PPUSH
32381: CALL_OW 488
32385: NOT
32386: IFFALSE 32390
// continue ;
32388: GO 32368
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32390: LD_VAR 0 11
32394: PPUSH
32395: LD_VAR 0 12
32399: PPUSH
32400: CALL_OW 351
32404: PUSH
32405: LD_VAR 0 11
32409: PPUSH
32410: LD_VAR 0 12
32414: PPUSH
32415: CALL_OW 554
32419: AND
32420: IFFALSE 32460
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32422: LD_ADDR_VAR 0 13
32426: PUSH
32427: LD_VAR 0 13
32431: PPUSH
32432: LD_VAR 0 13
32436: PUSH
32437: LD_INT 1
32439: PLUS
32440: PPUSH
32441: LD_VAR 0 11
32445: PUSH
32446: LD_VAR 0 12
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PPUSH
32455: CALL_OW 2
32459: ST_TO_ADDR
// end ;
32460: GO 32368
32462: POP
32463: POP
32464: GO 32348
32466: POP
32467: POP
// if not list then
32468: LD_VAR 0 13
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32548
// for i in list do
32477: LD_ADDR_VAR 0 6
32481: PUSH
32482: LD_VAR 0 13
32486: PUSH
32487: FOR_IN
32488: IFFALSE 32546
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32490: LD_VAR 0 1
32494: PPUSH
32495: LD_STRING M
32497: PUSH
32498: LD_VAR 0 6
32502: PUSH
32503: LD_INT 1
32505: ARRAY
32506: PUSH
32507: LD_VAR 0 6
32511: PUSH
32512: LD_INT 2
32514: ARRAY
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: PPUSH
32540: CALL_OW 447
32544: GO 32487
32546: POP
32547: POP
// end ;
32548: LD_VAR 0 5
32552: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32553: LD_EXP 115
32557: NOT
32558: IFFALSE 32608
32560: GO 32562
32562: DISABLE
// begin initHack := true ;
32563: LD_ADDR_EXP 115
32567: PUSH
32568: LD_INT 1
32570: ST_TO_ADDR
// hackTanks := [ ] ;
32571: LD_ADDR_EXP 116
32575: PUSH
32576: EMPTY
32577: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32578: LD_ADDR_EXP 117
32582: PUSH
32583: EMPTY
32584: ST_TO_ADDR
// hackLimit := 3 ;
32585: LD_ADDR_EXP 118
32589: PUSH
32590: LD_INT 3
32592: ST_TO_ADDR
// hackDist := 12 ;
32593: LD_ADDR_EXP 119
32597: PUSH
32598: LD_INT 12
32600: ST_TO_ADDR
// hackCounter := [ ] ;
32601: LD_ADDR_EXP 120
32605: PUSH
32606: EMPTY
32607: ST_TO_ADDR
// end ;
32608: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32609: LD_EXP 115
32613: PUSH
32614: LD_INT 34
32616: PUSH
32617: LD_EXP 38
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PPUSH
32626: CALL_OW 69
32630: AND
32631: IFFALSE 32886
32633: GO 32635
32635: DISABLE
32636: LD_INT 0
32638: PPUSH
32639: PPUSH
// begin enable ;
32640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32641: LD_ADDR_VAR 0 1
32645: PUSH
32646: LD_INT 34
32648: PUSH
32649: LD_EXP 38
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PPUSH
32658: CALL_OW 69
32662: PUSH
32663: FOR_IN
32664: IFFALSE 32884
// begin if not i in hackTanks then
32666: LD_VAR 0 1
32670: PUSH
32671: LD_EXP 116
32675: IN
32676: NOT
32677: IFFALSE 32760
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32679: LD_ADDR_EXP 116
32683: PUSH
32684: LD_EXP 116
32688: PPUSH
32689: LD_EXP 116
32693: PUSH
32694: LD_INT 1
32696: PLUS
32697: PPUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 1
32707: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32708: LD_ADDR_EXP 117
32712: PUSH
32713: LD_EXP 117
32717: PPUSH
32718: LD_EXP 117
32722: PUSH
32723: LD_INT 1
32725: PLUS
32726: PPUSH
32727: EMPTY
32728: PPUSH
32729: CALL_OW 1
32733: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32734: LD_ADDR_EXP 120
32738: PUSH
32739: LD_EXP 120
32743: PPUSH
32744: LD_EXP 120
32748: PUSH
32749: LD_INT 1
32751: PLUS
32752: PPUSH
32753: EMPTY
32754: PPUSH
32755: CALL_OW 1
32759: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 302
32769: NOT
32770: IFFALSE 32783
// begin HackUnlinkAll ( i ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: CALL 32889 0 1
// continue ;
32781: GO 32663
// end ; HackCheckCapturedStatus ( i ) ;
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL 33332 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32792: LD_ADDR_VAR 0 2
32796: PUSH
32797: LD_INT 81
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 255
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 33
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 91
32826: PUSH
32827: LD_VAR 0 1
32831: PUSH
32832: LD_EXP 119
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 50
32844: PUSH
32845: EMPTY
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: PPUSH
32854: CALL_OW 69
32858: ST_TO_ADDR
// if not tmp then
32859: LD_VAR 0 2
32863: NOT
32864: IFFALSE 32868
// continue ;
32866: GO 32663
// HackLink ( i , tmp ) ;
32868: LD_VAR 0 1
32872: PPUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: CALL 33025 0 2
// end ;
32882: GO 32663
32884: POP
32885: POP
// end ;
32886: PPOPN 2
32888: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32889: LD_INT 0
32891: PPUSH
32892: PPUSH
32893: PPUSH
// if not hack in hackTanks then
32894: LD_VAR 0 1
32898: PUSH
32899: LD_EXP 116
32903: IN
32904: NOT
32905: IFFALSE 32909
// exit ;
32907: GO 33020
// index := GetElementIndex ( hackTanks , hack ) ;
32909: LD_ADDR_VAR 0 4
32913: PUSH
32914: LD_EXP 116
32918: PPUSH
32919: LD_VAR 0 1
32923: PPUSH
32924: CALL 40494 0 2
32928: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32929: LD_EXP 117
32933: PUSH
32934: LD_VAR 0 4
32938: ARRAY
32939: IFFALSE 33020
// begin for i in hackTanksCaptured [ index ] do
32941: LD_ADDR_VAR 0 3
32945: PUSH
32946: LD_EXP 117
32950: PUSH
32951: LD_VAR 0 4
32955: ARRAY
32956: PUSH
32957: FOR_IN
32958: IFFALSE 32984
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32960: LD_VAR 0 3
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: LD_VAR 0 3
32973: PUSH
32974: LD_INT 2
32976: ARRAY
32977: PPUSH
32978: CALL_OW 235
32982: GO 32957
32984: POP
32985: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32986: LD_ADDR_EXP 117
32990: PUSH
32991: LD_EXP 117
32995: PPUSH
32996: LD_VAR 0 4
33000: PPUSH
33001: EMPTY
33002: PPUSH
33003: CALL_OW 1
33007: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33008: LD_VAR 0 1
33012: PPUSH
33013: LD_INT 0
33015: PPUSH
33016: CALL_OW 505
// end ; end ;
33020: LD_VAR 0 2
33024: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33025: LD_INT 0
33027: PPUSH
33028: PPUSH
33029: PPUSH
// if not hack in hackTanks or not vehicles then
33030: LD_VAR 0 1
33034: PUSH
33035: LD_EXP 116
33039: IN
33040: NOT
33041: PUSH
33042: LD_VAR 0 2
33046: NOT
33047: OR
33048: IFFALSE 33052
// exit ;
33050: GO 33327
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33052: LD_ADDR_VAR 0 2
33056: PUSH
33057: LD_VAR 0 1
33061: PPUSH
33062: LD_VAR 0 2
33066: PPUSH
33067: LD_INT 1
33069: PPUSH
33070: LD_INT 1
33072: PPUSH
33073: CALL 41144 0 4
33077: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33078: LD_ADDR_VAR 0 5
33082: PUSH
33083: LD_EXP 116
33087: PPUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL 40494 0 2
33097: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33098: LD_EXP 117
33102: PUSH
33103: LD_VAR 0 5
33107: ARRAY
33108: PUSH
33109: LD_EXP 118
33113: LESS
33114: IFFALSE 33303
// begin for i := 1 to vehicles do
33116: LD_ADDR_VAR 0 4
33120: PUSH
33121: DOUBLE
33122: LD_INT 1
33124: DEC
33125: ST_TO_ADDR
33126: LD_VAR 0 2
33130: PUSH
33131: FOR_TO
33132: IFFALSE 33301
// begin if hackTanksCaptured [ index ] = hackLimit then
33134: LD_EXP 117
33138: PUSH
33139: LD_VAR 0 5
33143: ARRAY
33144: PUSH
33145: LD_EXP 118
33149: EQUAL
33150: IFFALSE 33154
// break ;
33152: GO 33301
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33154: LD_ADDR_EXP 120
33158: PUSH
33159: LD_EXP 120
33163: PPUSH
33164: LD_VAR 0 5
33168: PPUSH
33169: LD_EXP 120
33173: PUSH
33174: LD_VAR 0 5
33178: ARRAY
33179: PUSH
33180: LD_INT 1
33182: PLUS
33183: PPUSH
33184: CALL_OW 1
33188: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33189: LD_ADDR_EXP 117
33193: PUSH
33194: LD_EXP 117
33198: PPUSH
33199: LD_VAR 0 5
33203: PUSH
33204: LD_EXP 117
33208: PUSH
33209: LD_VAR 0 5
33213: ARRAY
33214: PUSH
33215: LD_INT 1
33217: PLUS
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PPUSH
33223: LD_VAR 0 2
33227: PUSH
33228: LD_VAR 0 4
33232: ARRAY
33233: PUSH
33234: LD_VAR 0 2
33238: PUSH
33239: LD_VAR 0 4
33243: ARRAY
33244: PPUSH
33245: CALL_OW 255
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PPUSH
33254: CALL 40709 0 3
33258: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33259: LD_VAR 0 2
33263: PUSH
33264: LD_VAR 0 4
33268: ARRAY
33269: PPUSH
33270: LD_VAR 0 1
33274: PPUSH
33275: CALL_OW 255
33279: PPUSH
33280: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33284: LD_VAR 0 2
33288: PUSH
33289: LD_VAR 0 4
33293: ARRAY
33294: PPUSH
33295: CALL_OW 141
// end ;
33299: GO 33131
33301: POP
33302: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33303: LD_VAR 0 1
33307: PPUSH
33308: LD_EXP 117
33312: PUSH
33313: LD_VAR 0 5
33317: ARRAY
33318: PUSH
33319: LD_INT 0
33321: PLUS
33322: PPUSH
33323: CALL_OW 505
// end ;
33327: LD_VAR 0 3
33331: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33332: LD_INT 0
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
// if not hack in hackTanks then
33338: LD_VAR 0 1
33342: PUSH
33343: LD_EXP 116
33347: IN
33348: NOT
33349: IFFALSE 33353
// exit ;
33351: GO 33593
// index := GetElementIndex ( hackTanks , hack ) ;
33353: LD_ADDR_VAR 0 4
33357: PUSH
33358: LD_EXP 116
33362: PPUSH
33363: LD_VAR 0 1
33367: PPUSH
33368: CALL 40494 0 2
33372: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33373: LD_ADDR_VAR 0 3
33377: PUSH
33378: DOUBLE
33379: LD_EXP 117
33383: PUSH
33384: LD_VAR 0 4
33388: ARRAY
33389: INC
33390: ST_TO_ADDR
33391: LD_INT 1
33393: PUSH
33394: FOR_DOWNTO
33395: IFFALSE 33567
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33397: LD_ADDR_VAR 0 5
33401: PUSH
33402: LD_EXP 117
33406: PUSH
33407: LD_VAR 0 4
33411: ARRAY
33412: PUSH
33413: LD_VAR 0 3
33417: ARRAY
33418: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33419: LD_VAR 0 5
33423: PUSH
33424: LD_INT 1
33426: ARRAY
33427: PPUSH
33428: CALL_OW 302
33432: NOT
33433: PUSH
33434: LD_VAR 0 5
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: PPUSH
33443: CALL_OW 255
33447: PUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 255
33457: NONEQUAL
33458: OR
33459: IFFALSE 33565
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33461: LD_VAR 0 5
33465: PUSH
33466: LD_INT 1
33468: ARRAY
33469: PPUSH
33470: CALL_OW 305
33474: PUSH
33475: LD_VAR 0 5
33479: PUSH
33480: LD_INT 1
33482: ARRAY
33483: PPUSH
33484: CALL_OW 255
33488: PUSH
33489: LD_VAR 0 1
33493: PPUSH
33494: CALL_OW 255
33498: EQUAL
33499: AND
33500: IFFALSE 33524
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33502: LD_VAR 0 5
33506: PUSH
33507: LD_INT 1
33509: ARRAY
33510: PPUSH
33511: LD_VAR 0 5
33515: PUSH
33516: LD_INT 2
33518: ARRAY
33519: PPUSH
33520: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33524: LD_ADDR_EXP 117
33528: PUSH
33529: LD_EXP 117
33533: PPUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: LD_EXP 117
33543: PUSH
33544: LD_VAR 0 4
33548: ARRAY
33549: PPUSH
33550: LD_VAR 0 3
33554: PPUSH
33555: CALL_OW 3
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
// end ; end ;
33565: GO 33394
33567: POP
33568: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33569: LD_VAR 0 1
33573: PPUSH
33574: LD_EXP 117
33578: PUSH
33579: LD_VAR 0 4
33583: ARRAY
33584: PUSH
33585: LD_INT 0
33587: PLUS
33588: PPUSH
33589: CALL_OW 505
// end ;
33593: LD_VAR 0 2
33597: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
// if not hack in hackTanks then
33604: LD_VAR 0 1
33608: PUSH
33609: LD_EXP 116
33613: IN
33614: NOT
33615: IFFALSE 33619
// exit ;
33617: GO 33704
// index := GetElementIndex ( hackTanks , hack ) ;
33619: LD_ADDR_VAR 0 5
33623: PUSH
33624: LD_EXP 116
33628: PPUSH
33629: LD_VAR 0 1
33633: PPUSH
33634: CALL 40494 0 2
33638: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33639: LD_ADDR_VAR 0 4
33643: PUSH
33644: DOUBLE
33645: LD_INT 1
33647: DEC
33648: ST_TO_ADDR
33649: LD_EXP 117
33653: PUSH
33654: LD_VAR 0 5
33658: ARRAY
33659: PUSH
33660: FOR_TO
33661: IFFALSE 33702
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33663: LD_EXP 117
33667: PUSH
33668: LD_VAR 0 5
33672: ARRAY
33673: PUSH
33674: LD_VAR 0 4
33678: ARRAY
33679: PUSH
33680: LD_INT 1
33682: ARRAY
33683: PUSH
33684: LD_VAR 0 2
33688: EQUAL
33689: IFFALSE 33700
// KillUnit ( vehicle ) ;
33691: LD_VAR 0 2
33695: PPUSH
33696: CALL_OW 66
33700: GO 33660
33702: POP
33703: POP
// end ;
33704: LD_VAR 0 3
33708: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33709: LD_EXP 121
33713: NOT
33714: IFFALSE 33749
33716: GO 33718
33718: DISABLE
// begin initMiner := true ;
33719: LD_ADDR_EXP 121
33723: PUSH
33724: LD_INT 1
33726: ST_TO_ADDR
// minersList := [ ] ;
33727: LD_ADDR_EXP 122
33731: PUSH
33732: EMPTY
33733: ST_TO_ADDR
// minerMinesList := [ ] ;
33734: LD_ADDR_EXP 123
33738: PUSH
33739: EMPTY
33740: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33741: LD_ADDR_EXP 124
33745: PUSH
33746: LD_INT 5
33748: ST_TO_ADDR
// end ;
33749: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33750: LD_EXP 121
33754: PUSH
33755: LD_INT 34
33757: PUSH
33758: LD_EXP 43
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PPUSH
33767: CALL_OW 69
33771: AND
33772: IFFALSE 34235
33774: GO 33776
33776: DISABLE
33777: LD_INT 0
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
// begin enable ;
33783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33784: LD_ADDR_VAR 0 1
33788: PUSH
33789: LD_INT 34
33791: PUSH
33792: LD_EXP 43
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL_OW 69
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33879
// begin if not i in minersList then
33809: LD_VAR 0 1
33813: PUSH
33814: LD_EXP 122
33818: IN
33819: NOT
33820: IFFALSE 33877
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33822: LD_ADDR_EXP 122
33826: PUSH
33827: LD_EXP 122
33831: PPUSH
33832: LD_EXP 122
33836: PUSH
33837: LD_INT 1
33839: PLUS
33840: PPUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 1
33850: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33851: LD_ADDR_EXP 123
33855: PUSH
33856: LD_EXP 123
33860: PPUSH
33861: LD_EXP 123
33865: PUSH
33866: LD_INT 1
33868: PLUS
33869: PPUSH
33870: EMPTY
33871: PPUSH
33872: CALL_OW 1
33876: ST_TO_ADDR
// end end ;
33877: GO 33806
33879: POP
33880: POP
// for i := minerMinesList downto 1 do
33881: LD_ADDR_VAR 0 1
33885: PUSH
33886: DOUBLE
33887: LD_EXP 123
33891: INC
33892: ST_TO_ADDR
33893: LD_INT 1
33895: PUSH
33896: FOR_DOWNTO
33897: IFFALSE 34233
// begin if IsLive ( minersList [ i ] ) then
33899: LD_EXP 122
33903: PUSH
33904: LD_VAR 0 1
33908: ARRAY
33909: PPUSH
33910: CALL_OW 300
33914: IFFALSE 33942
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33916: LD_EXP 122
33920: PUSH
33921: LD_VAR 0 1
33925: ARRAY
33926: PPUSH
33927: LD_EXP 123
33931: PUSH
33932: LD_VAR 0 1
33936: ARRAY
33937: PPUSH
33938: CALL_OW 505
// if not minerMinesList [ i ] then
33942: LD_EXP 123
33946: PUSH
33947: LD_VAR 0 1
33951: ARRAY
33952: NOT
33953: IFFALSE 33957
// continue ;
33955: GO 33896
// for j := minerMinesList [ i ] downto 1 do
33957: LD_ADDR_VAR 0 2
33961: PUSH
33962: DOUBLE
33963: LD_EXP 123
33967: PUSH
33968: LD_VAR 0 1
33972: ARRAY
33973: INC
33974: ST_TO_ADDR
33975: LD_INT 1
33977: PUSH
33978: FOR_DOWNTO
33979: IFFALSE 34229
// begin side := GetSide ( minersList [ i ] ) ;
33981: LD_ADDR_VAR 0 3
33985: PUSH
33986: LD_EXP 122
33990: PUSH
33991: LD_VAR 0 1
33995: ARRAY
33996: PPUSH
33997: CALL_OW 255
34001: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34002: LD_ADDR_VAR 0 4
34006: PUSH
34007: LD_EXP 123
34011: PUSH
34012: LD_VAR 0 1
34016: ARRAY
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_INT 1
34026: ARRAY
34027: PPUSH
34028: LD_EXP 123
34032: PUSH
34033: LD_VAR 0 1
34037: ARRAY
34038: PUSH
34039: LD_VAR 0 2
34043: ARRAY
34044: PUSH
34045: LD_INT 2
34047: ARRAY
34048: PPUSH
34049: CALL_OW 428
34053: ST_TO_ADDR
// if not tmp then
34054: LD_VAR 0 4
34058: NOT
34059: IFFALSE 34063
// continue ;
34061: GO 33978
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34063: LD_VAR 0 4
34067: PUSH
34068: LD_INT 81
34070: PUSH
34071: LD_VAR 0 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PPUSH
34080: CALL_OW 69
34084: IN
34085: PUSH
34086: LD_EXP 123
34090: PUSH
34091: LD_VAR 0 1
34095: ARRAY
34096: PUSH
34097: LD_VAR 0 2
34101: ARRAY
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: PPUSH
34107: LD_EXP 123
34111: PUSH
34112: LD_VAR 0 1
34116: ARRAY
34117: PUSH
34118: LD_VAR 0 2
34122: ARRAY
34123: PUSH
34124: LD_INT 2
34126: ARRAY
34127: PPUSH
34128: CALL_OW 458
34132: AND
34133: IFFALSE 34227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34135: LD_EXP 123
34139: PUSH
34140: LD_VAR 0 1
34144: ARRAY
34145: PUSH
34146: LD_VAR 0 2
34150: ARRAY
34151: PUSH
34152: LD_INT 1
34154: ARRAY
34155: PPUSH
34156: LD_EXP 123
34160: PUSH
34161: LD_VAR 0 1
34165: ARRAY
34166: PUSH
34167: LD_VAR 0 2
34171: ARRAY
34172: PUSH
34173: LD_INT 2
34175: ARRAY
34176: PPUSH
34177: LD_VAR 0 3
34181: PPUSH
34182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34186: LD_ADDR_EXP 123
34190: PUSH
34191: LD_EXP 123
34195: PPUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: LD_EXP 123
34205: PUSH
34206: LD_VAR 0 1
34210: ARRAY
34211: PPUSH
34212: LD_VAR 0 2
34216: PPUSH
34217: CALL_OW 3
34221: PPUSH
34222: CALL_OW 1
34226: ST_TO_ADDR
// end ; end ;
34227: GO 33978
34229: POP
34230: POP
// end ;
34231: GO 33896
34233: POP
34234: POP
// end ;
34235: PPOPN 4
34237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34238: LD_INT 0
34240: PPUSH
34241: PPUSH
// result := false ;
34242: LD_ADDR_VAR 0 4
34246: PUSH
34247: LD_INT 0
34249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 264
34259: PUSH
34260: LD_EXP 43
34264: EQUAL
34265: NOT
34266: IFFALSE 34270
// exit ;
34268: GO 34510
// index := GetElementIndex ( minersList , unit ) ;
34270: LD_ADDR_VAR 0 5
34274: PUSH
34275: LD_EXP 122
34279: PPUSH
34280: LD_VAR 0 1
34284: PPUSH
34285: CALL 40494 0 2
34289: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34290: LD_EXP 123
34294: PUSH
34295: LD_VAR 0 5
34299: ARRAY
34300: PUSH
34301: LD_EXP 124
34305: GREATEREQUAL
34306: IFFALSE 34310
// exit ;
34308: GO 34510
// ComMoveXY ( unit , x , y ) ;
34310: LD_VAR 0 1
34314: PPUSH
34315: LD_VAR 0 2
34319: PPUSH
34320: LD_VAR 0 3
34324: PPUSH
34325: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34329: LD_INT 35
34331: PPUSH
34332: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34336: LD_VAR 0 1
34340: PPUSH
34341: LD_VAR 0 2
34345: PPUSH
34346: LD_VAR 0 3
34350: PPUSH
34351: CALL 71213 0 3
34355: NOT
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 314
34366: AND
34367: IFFALSE 34371
// exit ;
34369: GO 34510
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34371: LD_VAR 0 2
34375: PPUSH
34376: LD_VAR 0 3
34380: PPUSH
34381: CALL_OW 428
34385: PUSH
34386: LD_VAR 0 1
34390: EQUAL
34391: PUSH
34392: LD_VAR 0 1
34396: PPUSH
34397: CALL_OW 314
34401: NOT
34402: AND
34403: IFFALSE 34329
// PlaySoundXY ( x , y , PlantMine ) ;
34405: LD_VAR 0 2
34409: PPUSH
34410: LD_VAR 0 3
34414: PPUSH
34415: LD_STRING PlantMine
34417: PPUSH
34418: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34422: LD_VAR 0 2
34426: PPUSH
34427: LD_VAR 0 3
34431: PPUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: CALL_OW 255
34441: PPUSH
34442: LD_INT 0
34444: PPUSH
34445: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34449: LD_ADDR_EXP 123
34453: PUSH
34454: LD_EXP 123
34458: PPUSH
34459: LD_VAR 0 5
34463: PUSH
34464: LD_EXP 123
34468: PUSH
34469: LD_VAR 0 5
34473: ARRAY
34474: PUSH
34475: LD_INT 1
34477: PLUS
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PPUSH
34483: LD_VAR 0 2
34487: PUSH
34488: LD_VAR 0 3
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PPUSH
34497: CALL 40709 0 3
34501: ST_TO_ADDR
// result := true ;
34502: LD_ADDR_VAR 0 4
34506: PUSH
34507: LD_INT 1
34509: ST_TO_ADDR
// end ;
34510: LD_VAR 0 4
34514: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34515: LD_INT 0
34517: PPUSH
34518: PPUSH
34519: PPUSH
// if not unit in minersList then
34520: LD_VAR 0 1
34524: PUSH
34525: LD_EXP 122
34529: IN
34530: NOT
34531: IFFALSE 34535
// exit ;
34533: GO 34927
// index := GetElementIndex ( minersList , unit ) ;
34535: LD_ADDR_VAR 0 6
34539: PUSH
34540: LD_EXP 122
34544: PPUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL 40494 0 2
34554: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34555: LD_ADDR_VAR 0 5
34559: PUSH
34560: DOUBLE
34561: LD_EXP 123
34565: PUSH
34566: LD_VAR 0 6
34570: ARRAY
34571: INC
34572: ST_TO_ADDR
34573: LD_INT 1
34575: PUSH
34576: FOR_DOWNTO
34577: IFFALSE 34738
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34579: LD_EXP 123
34583: PUSH
34584: LD_VAR 0 6
34588: ARRAY
34589: PUSH
34590: LD_VAR 0 5
34594: ARRAY
34595: PUSH
34596: LD_INT 1
34598: ARRAY
34599: PUSH
34600: LD_VAR 0 2
34604: EQUAL
34605: PUSH
34606: LD_EXP 123
34610: PUSH
34611: LD_VAR 0 6
34615: ARRAY
34616: PUSH
34617: LD_VAR 0 5
34621: ARRAY
34622: PUSH
34623: LD_INT 2
34625: ARRAY
34626: PUSH
34627: LD_VAR 0 3
34631: EQUAL
34632: AND
34633: IFFALSE 34736
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34635: LD_EXP 123
34639: PUSH
34640: LD_VAR 0 6
34644: ARRAY
34645: PUSH
34646: LD_VAR 0 5
34650: ARRAY
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PPUSH
34656: LD_EXP 123
34660: PUSH
34661: LD_VAR 0 6
34665: ARRAY
34666: PUSH
34667: LD_VAR 0 5
34671: ARRAY
34672: PUSH
34673: LD_INT 2
34675: ARRAY
34676: PPUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 255
34686: PPUSH
34687: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34691: LD_ADDR_EXP 123
34695: PUSH
34696: LD_EXP 123
34700: PPUSH
34701: LD_VAR 0 6
34705: PPUSH
34706: LD_EXP 123
34710: PUSH
34711: LD_VAR 0 6
34715: ARRAY
34716: PPUSH
34717: LD_VAR 0 5
34721: PPUSH
34722: CALL_OW 3
34726: PPUSH
34727: CALL_OW 1
34731: ST_TO_ADDR
// exit ;
34732: POP
34733: POP
34734: GO 34927
// end ; end ;
34736: GO 34576
34738: POP
34739: POP
// for i := minerMinesList [ index ] downto 1 do
34740: LD_ADDR_VAR 0 5
34744: PUSH
34745: DOUBLE
34746: LD_EXP 123
34750: PUSH
34751: LD_VAR 0 6
34755: ARRAY
34756: INC
34757: ST_TO_ADDR
34758: LD_INT 1
34760: PUSH
34761: FOR_DOWNTO
34762: IFFALSE 34925
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34764: LD_EXP 123
34768: PUSH
34769: LD_VAR 0 6
34773: ARRAY
34774: PUSH
34775: LD_VAR 0 5
34779: ARRAY
34780: PUSH
34781: LD_INT 1
34783: ARRAY
34784: PPUSH
34785: LD_EXP 123
34789: PUSH
34790: LD_VAR 0 6
34794: ARRAY
34795: PUSH
34796: LD_VAR 0 5
34800: ARRAY
34801: PUSH
34802: LD_INT 2
34804: ARRAY
34805: PPUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_VAR 0 3
34815: PPUSH
34816: CALL_OW 298
34820: PUSH
34821: LD_INT 6
34823: LESS
34824: IFFALSE 34923
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34826: LD_EXP 123
34830: PUSH
34831: LD_VAR 0 6
34835: ARRAY
34836: PUSH
34837: LD_VAR 0 5
34841: ARRAY
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: LD_EXP 123
34851: PUSH
34852: LD_VAR 0 6
34856: ARRAY
34857: PUSH
34858: LD_VAR 0 5
34862: ARRAY
34863: PUSH
34864: LD_INT 2
34866: ARRAY
34867: PPUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 255
34877: PPUSH
34878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34882: LD_ADDR_EXP 123
34886: PUSH
34887: LD_EXP 123
34891: PPUSH
34892: LD_VAR 0 6
34896: PPUSH
34897: LD_EXP 123
34901: PUSH
34902: LD_VAR 0 6
34906: ARRAY
34907: PPUSH
34908: LD_VAR 0 5
34912: PPUSH
34913: CALL_OW 3
34917: PPUSH
34918: CALL_OW 1
34922: ST_TO_ADDR
// end ; end ;
34923: GO 34761
34925: POP
34926: POP
// end ;
34927: LD_VAR 0 4
34931: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 264
34952: PUSH
34953: LD_EXP 43
34957: EQUAL
34958: NOT
34959: PUSH
34960: LD_VAR 0 1
34964: PUSH
34965: LD_EXP 122
34969: IN
34970: NOT
34971: OR
34972: IFFALSE 34976
// exit ;
34974: GO 35298
// index := GetElementIndex ( minersList , unit ) ;
34976: LD_ADDR_VAR 0 6
34980: PUSH
34981: LD_EXP 122
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL 40494 0 2
34995: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34996: LD_ADDR_VAR 0 8
35000: PUSH
35001: LD_EXP 124
35005: PUSH
35006: LD_EXP 123
35010: PUSH
35011: LD_VAR 0 6
35015: ARRAY
35016: MINUS
35017: ST_TO_ADDR
// if not minesFreeAmount then
35018: LD_VAR 0 8
35022: NOT
35023: IFFALSE 35027
// exit ;
35025: GO 35298
// tmp := [ ] ;
35027: LD_ADDR_VAR 0 7
35031: PUSH
35032: EMPTY
35033: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35034: LD_ADDR_VAR 0 5
35038: PUSH
35039: DOUBLE
35040: LD_INT 1
35042: DEC
35043: ST_TO_ADDR
35044: LD_VAR 0 8
35048: PUSH
35049: FOR_TO
35050: IFFALSE 35245
// begin _d := rand ( 0 , 5 ) ;
35052: LD_ADDR_VAR 0 11
35056: PUSH
35057: LD_INT 0
35059: PPUSH
35060: LD_INT 5
35062: PPUSH
35063: CALL_OW 12
35067: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35068: LD_ADDR_VAR 0 12
35072: PUSH
35073: LD_INT 2
35075: PPUSH
35076: LD_INT 6
35078: PPUSH
35079: CALL_OW 12
35083: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35084: LD_ADDR_VAR 0 9
35088: PUSH
35089: LD_VAR 0 2
35093: PPUSH
35094: LD_VAR 0 11
35098: PPUSH
35099: LD_VAR 0 12
35103: PPUSH
35104: CALL_OW 272
35108: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35109: LD_ADDR_VAR 0 10
35113: PUSH
35114: LD_VAR 0 3
35118: PPUSH
35119: LD_VAR 0 11
35123: PPUSH
35124: LD_VAR 0 12
35128: PPUSH
35129: CALL_OW 273
35133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35134: LD_VAR 0 9
35138: PPUSH
35139: LD_VAR 0 10
35143: PPUSH
35144: CALL_OW 488
35148: PUSH
35149: LD_VAR 0 9
35153: PUSH
35154: LD_VAR 0 10
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_VAR 0 7
35167: IN
35168: NOT
35169: AND
35170: PUSH
35171: LD_VAR 0 9
35175: PPUSH
35176: LD_VAR 0 10
35180: PPUSH
35181: CALL_OW 458
35185: NOT
35186: AND
35187: IFFALSE 35229
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35189: LD_ADDR_VAR 0 7
35193: PUSH
35194: LD_VAR 0 7
35198: PPUSH
35199: LD_VAR 0 7
35203: PUSH
35204: LD_INT 1
35206: PLUS
35207: PPUSH
35208: LD_VAR 0 9
35212: PUSH
35213: LD_VAR 0 10
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PPUSH
35222: CALL_OW 1
35226: ST_TO_ADDR
35227: GO 35243
// i := i - 1 ;
35229: LD_ADDR_VAR 0 5
35233: PUSH
35234: LD_VAR 0 5
35238: PUSH
35239: LD_INT 1
35241: MINUS
35242: ST_TO_ADDR
// end ;
35243: GO 35049
35245: POP
35246: POP
// for i in tmp do
35247: LD_ADDR_VAR 0 5
35251: PUSH
35252: LD_VAR 0 7
35256: PUSH
35257: FOR_IN
35258: IFFALSE 35296
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35260: LD_VAR 0 1
35264: PPUSH
35265: LD_VAR 0 5
35269: PUSH
35270: LD_INT 1
35272: ARRAY
35273: PPUSH
35274: LD_VAR 0 5
35278: PUSH
35279: LD_INT 2
35281: ARRAY
35282: PPUSH
35283: CALL 34238 0 3
35287: NOT
35288: IFFALSE 35294
// exit ;
35290: POP
35291: POP
35292: GO 35298
35294: GO 35257
35296: POP
35297: POP
// end ;
35298: LD_VAR 0 4
35302: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35303: LD_INT 0
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
// if not GetClass ( unit ) = class_sniper then
35312: LD_VAR 0 1
35316: PPUSH
35317: CALL_OW 257
35321: PUSH
35322: LD_INT 5
35324: EQUAL
35325: NOT
35326: IFFALSE 35330
// exit ;
35328: GO 35718
// dist := 8 ;
35330: LD_ADDR_VAR 0 5
35334: PUSH
35335: LD_INT 8
35337: ST_TO_ADDR
// viewRange := 12 ;
35338: LD_ADDR_VAR 0 7
35342: PUSH
35343: LD_INT 12
35345: ST_TO_ADDR
// side := GetSide ( unit ) ;
35346: LD_ADDR_VAR 0 6
35350: PUSH
35351: LD_VAR 0 1
35355: PPUSH
35356: CALL_OW 255
35360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35361: LD_INT 61
35363: PPUSH
35364: LD_VAR 0 6
35368: PPUSH
35369: CALL_OW 321
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: IFFALSE 35387
// viewRange := 16 ;
35379: LD_ADDR_VAR 0 7
35383: PUSH
35384: LD_INT 16
35386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_VAR 0 2
35396: PPUSH
35397: LD_VAR 0 3
35401: PPUSH
35402: CALL_OW 297
35406: PUSH
35407: LD_VAR 0 5
35411: GREATER
35412: IFFALSE 35491
// begin ComMoveXY ( unit , x , y ) ;
35414: LD_VAR 0 1
35418: PPUSH
35419: LD_VAR 0 2
35423: PPUSH
35424: LD_VAR 0 3
35428: PPUSH
35429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35433: LD_INT 35
35435: PPUSH
35436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35440: LD_VAR 0 1
35444: PPUSH
35445: LD_VAR 0 2
35449: PPUSH
35450: LD_VAR 0 3
35454: PPUSH
35455: CALL 71213 0 3
35459: NOT
35460: IFFALSE 35464
// exit ;
35462: GO 35718
// until GetDistUnitXY ( unit , x , y ) < dist ;
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_VAR 0 2
35473: PPUSH
35474: LD_VAR 0 3
35478: PPUSH
35479: CALL_OW 297
35483: PUSH
35484: LD_VAR 0 5
35488: LESS
35489: IFFALSE 35433
// end ; ComTurnXY ( unit , x , y ) ;
35491: LD_VAR 0 1
35495: PPUSH
35496: LD_VAR 0 2
35500: PPUSH
35501: LD_VAR 0 3
35505: PPUSH
35506: CALL_OW 118
// wait ( 5 ) ;
35510: LD_INT 5
35512: PPUSH
35513: CALL_OW 67
// _d := GetDir ( unit ) ;
35517: LD_ADDR_VAR 0 10
35521: PUSH
35522: LD_VAR 0 1
35526: PPUSH
35527: CALL_OW 254
35531: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35532: LD_ADDR_VAR 0 8
35536: PUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 250
35546: PPUSH
35547: LD_VAR 0 10
35551: PPUSH
35552: LD_VAR 0 5
35556: PPUSH
35557: CALL_OW 272
35561: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35562: LD_ADDR_VAR 0 9
35566: PUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 251
35576: PPUSH
35577: LD_VAR 0 10
35581: PPUSH
35582: LD_VAR 0 5
35586: PPUSH
35587: CALL_OW 273
35591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35592: LD_VAR 0 8
35596: PPUSH
35597: LD_VAR 0 9
35601: PPUSH
35602: CALL_OW 488
35606: NOT
35607: IFFALSE 35611
// exit ;
35609: GO 35718
// ComAnimCustom ( unit , 1 ) ;
35611: LD_VAR 0 1
35615: PPUSH
35616: LD_INT 1
35618: PPUSH
35619: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35623: LD_VAR 0 8
35627: PPUSH
35628: LD_VAR 0 9
35632: PPUSH
35633: LD_VAR 0 6
35637: PPUSH
35638: LD_VAR 0 7
35642: PPUSH
35643: CALL_OW 330
// repeat wait ( 1 ) ;
35647: LD_INT 1
35649: PPUSH
35650: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35654: LD_VAR 0 1
35658: PPUSH
35659: CALL_OW 316
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 314
35673: OR
35674: PUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: CALL_OW 302
35684: NOT
35685: OR
35686: PUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 301
35696: OR
35697: IFFALSE 35647
// RemoveSeeing ( _x , _y , side ) ;
35699: LD_VAR 0 8
35703: PPUSH
35704: LD_VAR 0 9
35708: PPUSH
35709: LD_VAR 0 6
35713: PPUSH
35714: CALL_OW 331
// end ; end_of_file
35718: LD_VAR 0 4
35722: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35723: LD_INT 0
35725: PPUSH
35726: PPUSH
// if exist_mode then
35727: LD_VAR 0 2
35731: IFFALSE 35756
// unit := CreateCharacter ( prefix & ident ) else
35733: LD_ADDR_VAR 0 5
35737: PUSH
35738: LD_VAR 0 3
35742: PUSH
35743: LD_VAR 0 1
35747: STR
35748: PPUSH
35749: CALL_OW 34
35753: ST_TO_ADDR
35754: GO 35771
// unit := NewCharacter ( ident ) ;
35756: LD_ADDR_VAR 0 5
35760: PUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 25
35770: ST_TO_ADDR
// result := unit ;
35771: LD_ADDR_VAR 0 4
35775: PUSH
35776: LD_VAR 0 5
35780: ST_TO_ADDR
// end ;
35781: LD_VAR 0 4
35785: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35786: LD_INT 0
35788: PPUSH
35789: PPUSH
// if not side or not nation then
35790: LD_VAR 0 1
35794: NOT
35795: PUSH
35796: LD_VAR 0 2
35800: NOT
35801: OR
35802: IFFALSE 35806
// exit ;
35804: GO 36574
// case nation of nation_american :
35806: LD_VAR 0 2
35810: PUSH
35811: LD_INT 1
35813: DOUBLE
35814: EQUAL
35815: IFTRUE 35819
35817: GO 36033
35819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35820: LD_ADDR_VAR 0 4
35824: PUSH
35825: LD_INT 35
35827: PUSH
35828: LD_INT 45
35830: PUSH
35831: LD_INT 46
35833: PUSH
35834: LD_INT 47
35836: PUSH
35837: LD_INT 82
35839: PUSH
35840: LD_INT 83
35842: PUSH
35843: LD_INT 84
35845: PUSH
35846: LD_INT 85
35848: PUSH
35849: LD_INT 86
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 6
35860: PUSH
35861: LD_INT 15
35863: PUSH
35864: LD_INT 16
35866: PUSH
35867: LD_INT 7
35869: PUSH
35870: LD_INT 12
35872: PUSH
35873: LD_INT 13
35875: PUSH
35876: LD_INT 10
35878: PUSH
35879: LD_INT 14
35881: PUSH
35882: LD_INT 20
35884: PUSH
35885: LD_INT 21
35887: PUSH
35888: LD_INT 22
35890: PUSH
35891: LD_INT 25
35893: PUSH
35894: LD_INT 32
35896: PUSH
35897: LD_INT 27
35899: PUSH
35900: LD_INT 36
35902: PUSH
35903: LD_INT 69
35905: PUSH
35906: LD_INT 39
35908: PUSH
35909: LD_INT 34
35911: PUSH
35912: LD_INT 40
35914: PUSH
35915: LD_INT 48
35917: PUSH
35918: LD_INT 49
35920: PUSH
35921: LD_INT 50
35923: PUSH
35924: LD_INT 51
35926: PUSH
35927: LD_INT 52
35929: PUSH
35930: LD_INT 53
35932: PUSH
35933: LD_INT 54
35935: PUSH
35936: LD_INT 55
35938: PUSH
35939: LD_INT 56
35941: PUSH
35942: LD_INT 57
35944: PUSH
35945: LD_INT 58
35947: PUSH
35948: LD_INT 59
35950: PUSH
35951: LD_INT 60
35953: PUSH
35954: LD_INT 61
35956: PUSH
35957: LD_INT 62
35959: PUSH
35960: LD_INT 80
35962: PUSH
35963: LD_INT 82
35965: PUSH
35966: LD_INT 83
35968: PUSH
35969: LD_INT 84
35971: PUSH
35972: LD_INT 85
35974: PUSH
35975: LD_INT 86
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: ST_TO_ADDR
36031: GO 36498
36033: LD_INT 2
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36267
36041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: LD_INT 35
36049: PUSH
36050: LD_INT 45
36052: PUSH
36053: LD_INT 46
36055: PUSH
36056: LD_INT 47
36058: PUSH
36059: LD_INT 82
36061: PUSH
36062: LD_INT 83
36064: PUSH
36065: LD_INT 84
36067: PUSH
36068: LD_INT 85
36070: PUSH
36071: LD_INT 87
36073: PUSH
36074: LD_INT 70
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 11
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: LD_INT 4
36088: PUSH
36089: LD_INT 5
36091: PUSH
36092: LD_INT 6
36094: PUSH
36095: LD_INT 15
36097: PUSH
36098: LD_INT 18
36100: PUSH
36101: LD_INT 7
36103: PUSH
36104: LD_INT 17
36106: PUSH
36107: LD_INT 8
36109: PUSH
36110: LD_INT 20
36112: PUSH
36113: LD_INT 21
36115: PUSH
36116: LD_INT 22
36118: PUSH
36119: LD_INT 72
36121: PUSH
36122: LD_INT 26
36124: PUSH
36125: LD_INT 69
36127: PUSH
36128: LD_INT 39
36130: PUSH
36131: LD_INT 40
36133: PUSH
36134: LD_INT 41
36136: PUSH
36137: LD_INT 42
36139: PUSH
36140: LD_INT 43
36142: PUSH
36143: LD_INT 48
36145: PUSH
36146: LD_INT 49
36148: PUSH
36149: LD_INT 50
36151: PUSH
36152: LD_INT 51
36154: PUSH
36155: LD_INT 52
36157: PUSH
36158: LD_INT 53
36160: PUSH
36161: LD_INT 54
36163: PUSH
36164: LD_INT 55
36166: PUSH
36167: LD_INT 56
36169: PUSH
36170: LD_INT 60
36172: PUSH
36173: LD_INT 61
36175: PUSH
36176: LD_INT 62
36178: PUSH
36179: LD_INT 66
36181: PUSH
36182: LD_INT 67
36184: PUSH
36185: LD_INT 68
36187: PUSH
36188: LD_INT 81
36190: PUSH
36191: LD_INT 82
36193: PUSH
36194: LD_INT 83
36196: PUSH
36197: LD_INT 84
36199: PUSH
36200: LD_INT 85
36202: PUSH
36203: LD_INT 87
36205: PUSH
36206: LD_INT 88
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
36265: GO 36498
36267: LD_INT 3
36269: DOUBLE
36270: EQUAL
36271: IFTRUE 36275
36273: GO 36497
36275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36276: LD_ADDR_VAR 0 4
36280: PUSH
36281: LD_INT 46
36283: PUSH
36284: LD_INT 47
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 82
36295: PUSH
36296: LD_INT 83
36298: PUSH
36299: LD_INT 84
36301: PUSH
36302: LD_INT 85
36304: PUSH
36305: LD_INT 86
36307: PUSH
36308: LD_INT 11
36310: PUSH
36311: LD_INT 9
36313: PUSH
36314: LD_INT 20
36316: PUSH
36317: LD_INT 19
36319: PUSH
36320: LD_INT 21
36322: PUSH
36323: LD_INT 24
36325: PUSH
36326: LD_INT 22
36328: PUSH
36329: LD_INT 25
36331: PUSH
36332: LD_INT 28
36334: PUSH
36335: LD_INT 29
36337: PUSH
36338: LD_INT 30
36340: PUSH
36341: LD_INT 31
36343: PUSH
36344: LD_INT 37
36346: PUSH
36347: LD_INT 38
36349: PUSH
36350: LD_INT 32
36352: PUSH
36353: LD_INT 27
36355: PUSH
36356: LD_INT 33
36358: PUSH
36359: LD_INT 69
36361: PUSH
36362: LD_INT 39
36364: PUSH
36365: LD_INT 34
36367: PUSH
36368: LD_INT 40
36370: PUSH
36371: LD_INT 71
36373: PUSH
36374: LD_INT 23
36376: PUSH
36377: LD_INT 44
36379: PUSH
36380: LD_INT 48
36382: PUSH
36383: LD_INT 49
36385: PUSH
36386: LD_INT 50
36388: PUSH
36389: LD_INT 51
36391: PUSH
36392: LD_INT 52
36394: PUSH
36395: LD_INT 53
36397: PUSH
36398: LD_INT 54
36400: PUSH
36401: LD_INT 55
36403: PUSH
36404: LD_INT 56
36406: PUSH
36407: LD_INT 57
36409: PUSH
36410: LD_INT 58
36412: PUSH
36413: LD_INT 59
36415: PUSH
36416: LD_INT 63
36418: PUSH
36419: LD_INT 64
36421: PUSH
36422: LD_INT 65
36424: PUSH
36425: LD_INT 82
36427: PUSH
36428: LD_INT 83
36430: PUSH
36431: LD_INT 84
36433: PUSH
36434: LD_INT 85
36436: PUSH
36437: LD_INT 86
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
36495: GO 36498
36497: POP
// if state > - 1 and state < 3 then
36498: LD_VAR 0 3
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: GREATER
36507: PUSH
36508: LD_VAR 0 3
36512: PUSH
36513: LD_INT 3
36515: LESS
36516: AND
36517: IFFALSE 36574
// for i in result do
36519: LD_ADDR_VAR 0 5
36523: PUSH
36524: LD_VAR 0 4
36528: PUSH
36529: FOR_IN
36530: IFFALSE 36572
// if GetTech ( i , side ) <> state then
36532: LD_VAR 0 5
36536: PPUSH
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL_OW 321
36546: PUSH
36547: LD_VAR 0 3
36551: NONEQUAL
36552: IFFALSE 36570
// result := result diff i ;
36554: LD_ADDR_VAR 0 4
36558: PUSH
36559: LD_VAR 0 4
36563: PUSH
36564: LD_VAR 0 5
36568: DIFF
36569: ST_TO_ADDR
36570: GO 36529
36572: POP
36573: POP
// end ;
36574: LD_VAR 0 4
36578: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36579: LD_INT 0
36581: PPUSH
36582: PPUSH
36583: PPUSH
// result := true ;
36584: LD_ADDR_VAR 0 3
36588: PUSH
36589: LD_INT 1
36591: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36592: LD_ADDR_VAR 0 5
36596: PUSH
36597: LD_VAR 0 2
36601: PPUSH
36602: CALL_OW 480
36606: ST_TO_ADDR
// if not tmp then
36607: LD_VAR 0 5
36611: NOT
36612: IFFALSE 36616
// exit ;
36614: GO 36665
// for i in tmp do
36616: LD_ADDR_VAR 0 4
36620: PUSH
36621: LD_VAR 0 5
36625: PUSH
36626: FOR_IN
36627: IFFALSE 36663
// if GetTech ( i , side ) <> state_researched then
36629: LD_VAR 0 4
36633: PPUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 321
36643: PUSH
36644: LD_INT 2
36646: NONEQUAL
36647: IFFALSE 36661
// begin result := false ;
36649: LD_ADDR_VAR 0 3
36653: PUSH
36654: LD_INT 0
36656: ST_TO_ADDR
// exit ;
36657: POP
36658: POP
36659: GO 36665
// end ;
36661: GO 36626
36663: POP
36664: POP
// end ;
36665: LD_VAR 0 3
36669: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36670: LD_INT 0
36672: PPUSH
36673: PPUSH
36674: PPUSH
36675: PPUSH
36676: PPUSH
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36685: LD_VAR 0 1
36689: NOT
36690: PUSH
36691: LD_VAR 0 1
36695: PPUSH
36696: CALL_OW 257
36700: PUSH
36701: LD_INT 9
36703: NONEQUAL
36704: OR
36705: IFFALSE 36709
// exit ;
36707: GO 37282
// side := GetSide ( unit ) ;
36709: LD_ADDR_VAR 0 9
36713: PUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 255
36723: ST_TO_ADDR
// tech_space := tech_spacanom ;
36724: LD_ADDR_VAR 0 12
36728: PUSH
36729: LD_INT 29
36731: ST_TO_ADDR
// tech_time := tech_taurad ;
36732: LD_ADDR_VAR 0 13
36736: PUSH
36737: LD_INT 28
36739: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36740: LD_ADDR_VAR 0 11
36744: PUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: CALL_OW 310
36754: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36755: LD_VAR 0 11
36759: PPUSH
36760: CALL_OW 247
36764: PUSH
36765: LD_INT 2
36767: EQUAL
36768: IFFALSE 36772
// exit ;
36770: GO 37282
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36772: LD_ADDR_VAR 0 8
36776: PUSH
36777: LD_INT 81
36779: PUSH
36780: LD_VAR 0 9
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 3
36791: PUSH
36792: LD_INT 21
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PPUSH
36810: CALL_OW 69
36814: ST_TO_ADDR
// if not tmp then
36815: LD_VAR 0 8
36819: NOT
36820: IFFALSE 36824
// exit ;
36822: GO 37282
// if in_unit then
36824: LD_VAR 0 11
36828: IFFALSE 36852
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36830: LD_ADDR_VAR 0 10
36834: PUSH
36835: LD_VAR 0 8
36839: PPUSH
36840: LD_VAR 0 11
36844: PPUSH
36845: CALL_OW 74
36849: ST_TO_ADDR
36850: GO 36872
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36852: LD_ADDR_VAR 0 10
36856: PUSH
36857: LD_VAR 0 8
36861: PPUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 74
36871: ST_TO_ADDR
// if not enemy then
36872: LD_VAR 0 10
36876: NOT
36877: IFFALSE 36881
// exit ;
36879: GO 37282
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36881: LD_VAR 0 11
36885: PUSH
36886: LD_VAR 0 11
36890: PPUSH
36891: LD_VAR 0 10
36895: PPUSH
36896: CALL_OW 296
36900: PUSH
36901: LD_INT 13
36903: GREATER
36904: AND
36905: PUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: LD_VAR 0 10
36915: PPUSH
36916: CALL_OW 296
36920: PUSH
36921: LD_INT 12
36923: GREATER
36924: OR
36925: IFFALSE 36929
// exit ;
36927: GO 37282
// missile := [ 1 ] ;
36929: LD_ADDR_VAR 0 14
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36940: LD_VAR 0 9
36944: PPUSH
36945: LD_VAR 0 12
36949: PPUSH
36950: CALL_OW 325
36954: IFFALSE 36983
// missile := Replace ( missile , missile + 1 , 2 ) ;
36956: LD_ADDR_VAR 0 14
36960: PUSH
36961: LD_VAR 0 14
36965: PPUSH
36966: LD_VAR 0 14
36970: PUSH
36971: LD_INT 1
36973: PLUS
36974: PPUSH
36975: LD_INT 2
36977: PPUSH
36978: CALL_OW 1
36982: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36983: LD_VAR 0 9
36987: PPUSH
36988: LD_VAR 0 13
36992: PPUSH
36993: CALL_OW 325
36997: PUSH
36998: LD_VAR 0 10
37002: PPUSH
37003: CALL_OW 255
37007: PPUSH
37008: LD_VAR 0 13
37012: PPUSH
37013: CALL_OW 325
37017: NOT
37018: AND
37019: IFFALSE 37048
// missile := Replace ( missile , missile + 1 , 3 ) ;
37021: LD_ADDR_VAR 0 14
37025: PUSH
37026: LD_VAR 0 14
37030: PPUSH
37031: LD_VAR 0 14
37035: PUSH
37036: LD_INT 1
37038: PLUS
37039: PPUSH
37040: LD_INT 3
37042: PPUSH
37043: CALL_OW 1
37047: ST_TO_ADDR
// if missile < 2 then
37048: LD_VAR 0 14
37052: PUSH
37053: LD_INT 2
37055: LESS
37056: IFFALSE 37060
// exit ;
37058: GO 37282
// x := GetX ( enemy ) ;
37060: LD_ADDR_VAR 0 4
37064: PUSH
37065: LD_VAR 0 10
37069: PPUSH
37070: CALL_OW 250
37074: ST_TO_ADDR
// y := GetY ( enemy ) ;
37075: LD_ADDR_VAR 0 5
37079: PUSH
37080: LD_VAR 0 10
37084: PPUSH
37085: CALL_OW 251
37089: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37090: LD_ADDR_VAR 0 6
37094: PUSH
37095: LD_VAR 0 4
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PPUSH
37104: LD_INT 1
37106: PPUSH
37107: CALL_OW 12
37111: PLUS
37112: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37113: LD_ADDR_VAR 0 7
37117: PUSH
37118: LD_VAR 0 5
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PPUSH
37127: LD_INT 1
37129: PPUSH
37130: CALL_OW 12
37134: PLUS
37135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37136: LD_VAR 0 6
37140: PPUSH
37141: LD_VAR 0 7
37145: PPUSH
37146: CALL_OW 488
37150: NOT
37151: IFFALSE 37173
// begin _x := x ;
37153: LD_ADDR_VAR 0 6
37157: PUSH
37158: LD_VAR 0 4
37162: ST_TO_ADDR
// _y := y ;
37163: LD_ADDR_VAR 0 7
37167: PUSH
37168: LD_VAR 0 5
37172: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 1
37180: PPUSH
37181: LD_VAR 0 14
37185: PPUSH
37186: CALL_OW 12
37190: ST_TO_ADDR
// case i of 1 :
37191: LD_VAR 0 3
37195: PUSH
37196: LD_INT 1
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37204
37202: GO 37221
37204: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37205: LD_VAR 0 1
37209: PPUSH
37210: LD_VAR 0 10
37214: PPUSH
37215: CALL_OW 115
37219: GO 37282
37221: LD_INT 2
37223: DOUBLE
37224: EQUAL
37225: IFTRUE 37229
37227: GO 37251
37229: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37230: LD_VAR 0 1
37234: PPUSH
37235: LD_VAR 0 6
37239: PPUSH
37240: LD_VAR 0 7
37244: PPUSH
37245: CALL_OW 153
37249: GO 37282
37251: LD_INT 3
37253: DOUBLE
37254: EQUAL
37255: IFTRUE 37259
37257: GO 37281
37259: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37260: LD_VAR 0 1
37264: PPUSH
37265: LD_VAR 0 6
37269: PPUSH
37270: LD_VAR 0 7
37274: PPUSH
37275: CALL_OW 154
37279: GO 37282
37281: POP
// end ;
37282: LD_VAR 0 2
37286: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37287: LD_INT 0
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
// if not unit or not building then
37295: LD_VAR 0 1
37299: NOT
37300: PUSH
37301: LD_VAR 0 2
37305: NOT
37306: OR
37307: IFFALSE 37311
// exit ;
37309: GO 37469
// x := GetX ( building ) ;
37311: LD_ADDR_VAR 0 5
37315: PUSH
37316: LD_VAR 0 2
37320: PPUSH
37321: CALL_OW 250
37325: ST_TO_ADDR
// y := GetY ( building ) ;
37326: LD_ADDR_VAR 0 6
37330: PUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: CALL_OW 251
37340: ST_TO_ADDR
// for i = 0 to 5 do
37341: LD_ADDR_VAR 0 4
37345: PUSH
37346: DOUBLE
37347: LD_INT 0
37349: DEC
37350: ST_TO_ADDR
37351: LD_INT 5
37353: PUSH
37354: FOR_TO
37355: IFFALSE 37467
// begin _x := ShiftX ( x , i , 3 ) ;
37357: LD_ADDR_VAR 0 7
37361: PUSH
37362: LD_VAR 0 5
37366: PPUSH
37367: LD_VAR 0 4
37371: PPUSH
37372: LD_INT 3
37374: PPUSH
37375: CALL_OW 272
37379: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37380: LD_ADDR_VAR 0 8
37384: PUSH
37385: LD_VAR 0 6
37389: PPUSH
37390: LD_VAR 0 4
37394: PPUSH
37395: LD_INT 3
37397: PPUSH
37398: CALL_OW 273
37402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37403: LD_VAR 0 7
37407: PPUSH
37408: LD_VAR 0 8
37412: PPUSH
37413: CALL_OW 488
37417: NOT
37418: IFFALSE 37422
// continue ;
37420: GO 37354
// if HexInfo ( _x , _y ) = 0 then
37422: LD_VAR 0 7
37426: PPUSH
37427: LD_VAR 0 8
37431: PPUSH
37432: CALL_OW 428
37436: PUSH
37437: LD_INT 0
37439: EQUAL
37440: IFFALSE 37465
// begin ComMoveXY ( unit , _x , _y ) ;
37442: LD_VAR 0 1
37446: PPUSH
37447: LD_VAR 0 7
37451: PPUSH
37452: LD_VAR 0 8
37456: PPUSH
37457: CALL_OW 111
// exit ;
37461: POP
37462: POP
37463: GO 37469
// end ; end ;
37465: GO 37354
37467: POP
37468: POP
// end ;
37469: LD_VAR 0 3
37473: RET
// export function ScanBase ( side , base_area ) ; begin
37474: LD_INT 0
37476: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_VAR 0 2
37486: PPUSH
37487: LD_INT 81
37489: PUSH
37490: LD_VAR 0 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PPUSH
37499: CALL_OW 70
37503: ST_TO_ADDR
// end ;
37504: LD_VAR 0 3
37508: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37509: LD_INT 0
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
// result := false ;
37515: LD_ADDR_VAR 0 2
37519: PUSH
37520: LD_INT 0
37522: ST_TO_ADDR
// side := GetSide ( unit ) ;
37523: LD_ADDR_VAR 0 3
37527: PUSH
37528: LD_VAR 0 1
37532: PPUSH
37533: CALL_OW 255
37537: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37538: LD_ADDR_VAR 0 4
37542: PUSH
37543: LD_VAR 0 1
37547: PPUSH
37548: CALL_OW 248
37552: ST_TO_ADDR
// case nat of 1 :
37553: LD_VAR 0 4
37557: PUSH
37558: LD_INT 1
37560: DOUBLE
37561: EQUAL
37562: IFTRUE 37566
37564: GO 37577
37566: POP
// tech := tech_lassight ; 2 :
37567: LD_ADDR_VAR 0 5
37571: PUSH
37572: LD_INT 12
37574: ST_TO_ADDR
37575: GO 37616
37577: LD_INT 2
37579: DOUBLE
37580: EQUAL
37581: IFTRUE 37585
37583: GO 37596
37585: POP
// tech := tech_mortar ; 3 :
37586: LD_ADDR_VAR 0 5
37590: PUSH
37591: LD_INT 41
37593: ST_TO_ADDR
37594: GO 37616
37596: LD_INT 3
37598: DOUBLE
37599: EQUAL
37600: IFTRUE 37604
37602: GO 37615
37604: POP
// tech := tech_bazooka ; end ;
37605: LD_ADDR_VAR 0 5
37609: PUSH
37610: LD_INT 44
37612: ST_TO_ADDR
37613: GO 37616
37615: POP
// if Researched ( side , tech ) then
37616: LD_VAR 0 3
37620: PPUSH
37621: LD_VAR 0 5
37625: PPUSH
37626: CALL_OW 325
37630: IFFALSE 37657
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37632: LD_ADDR_VAR 0 2
37636: PUSH
37637: LD_INT 5
37639: PUSH
37640: LD_INT 8
37642: PUSH
37643: LD_INT 9
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: PUSH
37651: LD_VAR 0 4
37655: ARRAY
37656: ST_TO_ADDR
// end ;
37657: LD_VAR 0 2
37661: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37662: LD_INT 0
37664: PPUSH
37665: PPUSH
37666: PPUSH
// if not mines then
37667: LD_VAR 0 2
37671: NOT
37672: IFFALSE 37676
// exit ;
37674: GO 37820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37676: LD_ADDR_VAR 0 5
37680: PUSH
37681: LD_INT 81
37683: PUSH
37684: LD_VAR 0 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 21
37698: PUSH
37699: LD_INT 3
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PPUSH
37714: CALL_OW 69
37718: ST_TO_ADDR
// for i in mines do
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: LD_VAR 0 2
37728: PUSH
37729: FOR_IN
37730: IFFALSE 37818
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37732: LD_VAR 0 4
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: PPUSH
37741: LD_VAR 0 4
37745: PUSH
37746: LD_INT 2
37748: ARRAY
37749: PPUSH
37750: CALL_OW 458
37754: NOT
37755: IFFALSE 37759
// continue ;
37757: GO 37729
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37759: LD_VAR 0 4
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PPUSH
37768: LD_VAR 0 4
37772: PUSH
37773: LD_INT 2
37775: ARRAY
37776: PPUSH
37777: CALL_OW 428
37781: PUSH
37782: LD_VAR 0 5
37786: IN
37787: IFFALSE 37816
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37789: LD_VAR 0 4
37793: PUSH
37794: LD_INT 1
37796: ARRAY
37797: PPUSH
37798: LD_VAR 0 4
37802: PUSH
37803: LD_INT 2
37805: ARRAY
37806: PPUSH
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 456
// end ;
37816: GO 37729
37818: POP
37819: POP
// end ;
37820: LD_VAR 0 3
37824: RET
// export function Count ( array ) ; var i ; begin
37825: LD_INT 0
37827: PPUSH
37828: PPUSH
// result := 0 ;
37829: LD_ADDR_VAR 0 2
37833: PUSH
37834: LD_INT 0
37836: ST_TO_ADDR
// for i in array do
37837: LD_ADDR_VAR 0 3
37841: PUSH
37842: LD_VAR 0 1
37846: PUSH
37847: FOR_IN
37848: IFFALSE 37872
// if i then
37850: LD_VAR 0 3
37854: IFFALSE 37870
// result := result + 1 ;
37856: LD_ADDR_VAR 0 2
37860: PUSH
37861: LD_VAR 0 2
37865: PUSH
37866: LD_INT 1
37868: PLUS
37869: ST_TO_ADDR
37870: GO 37847
37872: POP
37873: POP
// end ;
37874: LD_VAR 0 2
37878: RET
// export function IsEmpty ( building ) ; begin
37879: LD_INT 0
37881: PPUSH
// if not building then
37882: LD_VAR 0 1
37886: NOT
37887: IFFALSE 37891
// exit ;
37889: GO 37934
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37891: LD_ADDR_VAR 0 2
37895: PUSH
37896: LD_VAR 0 1
37900: PUSH
37901: LD_INT 22
37903: PUSH
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 255
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 58
37920: PUSH
37921: EMPTY
37922: LIST
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PPUSH
37928: CALL_OW 69
37932: IN
37933: ST_TO_ADDR
// end ;
37934: LD_VAR 0 2
37938: RET
// export function IsNotFull ( building ) ; begin
37939: LD_INT 0
37941: PPUSH
// if not building then
37942: LD_VAR 0 1
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 37970
// result := UnitsInside ( building ) < 6 ;
37951: LD_ADDR_VAR 0 2
37955: PUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: CALL_OW 313
37965: PUSH
37966: LD_INT 6
37968: LESS
37969: ST_TO_ADDR
// end ;
37970: LD_VAR 0 2
37974: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37975: LD_INT 0
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
// tmp := [ ] ;
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: EMPTY
37987: ST_TO_ADDR
// list := [ ] ;
37988: LD_ADDR_VAR 0 5
37992: PUSH
37993: EMPTY
37994: ST_TO_ADDR
// for i = 16 to 25 do
37995: LD_ADDR_VAR 0 4
37999: PUSH
38000: DOUBLE
38001: LD_INT 16
38003: DEC
38004: ST_TO_ADDR
38005: LD_INT 25
38007: PUSH
38008: FOR_TO
38009: IFFALSE 38082
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38011: LD_ADDR_VAR 0 3
38015: PUSH
38016: LD_VAR 0 3
38020: PUSH
38021: LD_INT 22
38023: PUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: CALL_OW 255
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 91
38040: PUSH
38041: LD_VAR 0 1
38045: PUSH
38046: LD_INT 6
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 30
38056: PUSH
38057: LD_VAR 0 4
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: PPUSH
38074: CALL_OW 69
38078: ADD
38079: ST_TO_ADDR
38080: GO 38008
38082: POP
38083: POP
// for i = 1 to tmp do
38084: LD_ADDR_VAR 0 4
38088: PUSH
38089: DOUBLE
38090: LD_INT 1
38092: DEC
38093: ST_TO_ADDR
38094: LD_VAR 0 3
38098: PUSH
38099: FOR_TO
38100: IFFALSE 38188
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: LD_VAR 0 5
38111: PUSH
38112: LD_VAR 0 3
38116: PUSH
38117: LD_VAR 0 4
38121: ARRAY
38122: PPUSH
38123: CALL_OW 266
38127: PUSH
38128: LD_VAR 0 3
38132: PUSH
38133: LD_VAR 0 4
38137: ARRAY
38138: PPUSH
38139: CALL_OW 250
38143: PUSH
38144: LD_VAR 0 3
38148: PUSH
38149: LD_VAR 0 4
38153: ARRAY
38154: PPUSH
38155: CALL_OW 251
38159: PUSH
38160: LD_VAR 0 3
38164: PUSH
38165: LD_VAR 0 4
38169: ARRAY
38170: PPUSH
38171: CALL_OW 254
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: ADD
38185: ST_TO_ADDR
38186: GO 38099
38188: POP
38189: POP
// result := list ;
38190: LD_ADDR_VAR 0 2
38194: PUSH
38195: LD_VAR 0 5
38199: ST_TO_ADDR
// end ;
38200: LD_VAR 0 2
38204: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38205: LD_INT 0
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
38213: PPUSH
// if not factory then
38214: LD_VAR 0 1
38218: NOT
38219: IFFALSE 38223
// exit ;
38221: GO 38816
// if control = control_apeman then
38223: LD_VAR 0 4
38227: PUSH
38228: LD_INT 5
38230: EQUAL
38231: IFFALSE 38340
// begin tmp := UnitsInside ( factory ) ;
38233: LD_ADDR_VAR 0 8
38237: PUSH
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 313
38247: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38248: LD_VAR 0 8
38252: PPUSH
38253: LD_INT 25
38255: PUSH
38256: LD_INT 12
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PPUSH
38263: CALL_OW 72
38267: NOT
38268: IFFALSE 38278
// control := control_manual ;
38270: LD_ADDR_VAR 0 4
38274: PUSH
38275: LD_INT 1
38277: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38278: LD_ADDR_VAR 0 8
38282: PUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL 37975 0 1
38292: ST_TO_ADDR
// if tmp then
38293: LD_VAR 0 8
38297: IFFALSE 38340
// begin for i in tmp do
38299: LD_ADDR_VAR 0 7
38303: PUSH
38304: LD_VAR 0 8
38308: PUSH
38309: FOR_IN
38310: IFFALSE 38338
// if i [ 1 ] = b_ext_radio then
38312: LD_VAR 0 7
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: PUSH
38321: LD_INT 22
38323: EQUAL
38324: IFFALSE 38336
// begin control := control_remote ;
38326: LD_ADDR_VAR 0 4
38330: PUSH
38331: LD_INT 2
38333: ST_TO_ADDR
// break ;
38334: GO 38338
// end ;
38336: GO 38309
38338: POP
38339: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38340: LD_VAR 0 1
38344: PPUSH
38345: LD_VAR 0 2
38349: PPUSH
38350: LD_VAR 0 3
38354: PPUSH
38355: LD_VAR 0 4
38359: PPUSH
38360: LD_VAR 0 5
38364: PPUSH
38365: CALL_OW 448
38369: IFFALSE 38404
// begin result := [ chassis , engine , control , weapon ] ;
38371: LD_ADDR_VAR 0 6
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_VAR 0 3
38385: PUSH
38386: LD_VAR 0 4
38390: PUSH
38391: LD_VAR 0 5
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// exit ;
38402: GO 38816
// end ; _chassis := AvailableChassisList ( factory ) ;
38404: LD_ADDR_VAR 0 9
38408: PUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 475
38418: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38419: LD_ADDR_VAR 0 11
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 476
38433: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38434: LD_ADDR_VAR 0 12
38438: PUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 477
38448: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38449: LD_ADDR_VAR 0 10
38453: PUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 478
38463: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38464: LD_VAR 0 9
38468: NOT
38469: PUSH
38470: LD_VAR 0 11
38474: NOT
38475: OR
38476: PUSH
38477: LD_VAR 0 12
38481: NOT
38482: OR
38483: PUSH
38484: LD_VAR 0 10
38488: NOT
38489: OR
38490: IFFALSE 38525
// begin result := [ chassis , engine , control , weapon ] ;
38492: LD_ADDR_VAR 0 6
38496: PUSH
38497: LD_VAR 0 2
38501: PUSH
38502: LD_VAR 0 3
38506: PUSH
38507: LD_VAR 0 4
38511: PUSH
38512: LD_VAR 0 5
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// exit ;
38523: GO 38816
// end ; if not chassis in _chassis then
38525: LD_VAR 0 2
38529: PUSH
38530: LD_VAR 0 9
38534: IN
38535: NOT
38536: IFFALSE 38562
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38538: LD_ADDR_VAR 0 2
38542: PUSH
38543: LD_VAR 0 9
38547: PUSH
38548: LD_INT 1
38550: PPUSH
38551: LD_VAR 0 9
38555: PPUSH
38556: CALL_OW 12
38560: ARRAY
38561: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38562: LD_VAR 0 2
38566: PPUSH
38567: LD_VAR 0 3
38571: PPUSH
38572: CALL 38821 0 2
38576: NOT
38577: IFFALSE 38636
// repeat engine := _engine [ 1 ] ;
38579: LD_ADDR_VAR 0 3
38583: PUSH
38584: LD_VAR 0 11
38588: PUSH
38589: LD_INT 1
38591: ARRAY
38592: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38593: LD_ADDR_VAR 0 11
38597: PUSH
38598: LD_VAR 0 11
38602: PPUSH
38603: LD_INT 1
38605: PPUSH
38606: CALL_OW 3
38610: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38611: LD_VAR 0 2
38615: PPUSH
38616: LD_VAR 0 3
38620: PPUSH
38621: CALL 38821 0 2
38625: PUSH
38626: LD_VAR 0 11
38630: PUSH
38631: EMPTY
38632: EQUAL
38633: OR
38634: IFFALSE 38579
// if not control in _control then
38636: LD_VAR 0 4
38640: PUSH
38641: LD_VAR 0 12
38645: IN
38646: NOT
38647: IFFALSE 38673
// control := _control [ rand ( 1 , _control ) ] ;
38649: LD_ADDR_VAR 0 4
38653: PUSH
38654: LD_VAR 0 12
38658: PUSH
38659: LD_INT 1
38661: PPUSH
38662: LD_VAR 0 12
38666: PPUSH
38667: CALL_OW 12
38671: ARRAY
38672: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38673: LD_VAR 0 2
38677: PPUSH
38678: LD_VAR 0 5
38682: PPUSH
38683: CALL 39041 0 2
38687: NOT
38688: IFFALSE 38747
// repeat weapon := _weapon [ 1 ] ;
38690: LD_ADDR_VAR 0 5
38694: PUSH
38695: LD_VAR 0 10
38699: PUSH
38700: LD_INT 1
38702: ARRAY
38703: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38704: LD_ADDR_VAR 0 10
38708: PUSH
38709: LD_VAR 0 10
38713: PPUSH
38714: LD_INT 1
38716: PPUSH
38717: CALL_OW 3
38721: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38722: LD_VAR 0 2
38726: PPUSH
38727: LD_VAR 0 5
38731: PPUSH
38732: CALL 39041 0 2
38736: PUSH
38737: LD_VAR 0 10
38741: PUSH
38742: EMPTY
38743: EQUAL
38744: OR
38745: IFFALSE 38690
// result := [ ] ;
38747: LD_ADDR_VAR 0 6
38751: PUSH
38752: EMPTY
38753: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38754: LD_VAR 0 1
38758: PPUSH
38759: LD_VAR 0 2
38763: PPUSH
38764: LD_VAR 0 3
38768: PPUSH
38769: LD_VAR 0 4
38773: PPUSH
38774: LD_VAR 0 5
38778: PPUSH
38779: CALL_OW 448
38783: IFFALSE 38816
// result := [ chassis , engine , control , weapon ] ;
38785: LD_ADDR_VAR 0 6
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_VAR 0 3
38799: PUSH
38800: LD_VAR 0 4
38804: PUSH
38805: LD_VAR 0 5
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// end ;
38816: LD_VAR 0 6
38820: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38821: LD_INT 0
38823: PPUSH
// if not chassis or not engine then
38824: LD_VAR 0 1
38828: NOT
38829: PUSH
38830: LD_VAR 0 2
38834: NOT
38835: OR
38836: IFFALSE 38840
// exit ;
38838: GO 39036
// case engine of engine_solar :
38840: LD_VAR 0 2
38844: PUSH
38845: LD_INT 2
38847: DOUBLE
38848: EQUAL
38849: IFTRUE 38853
38851: GO 38891
38853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38854: LD_ADDR_VAR 0 3
38858: PUSH
38859: LD_INT 11
38861: PUSH
38862: LD_INT 12
38864: PUSH
38865: LD_INT 13
38867: PUSH
38868: LD_INT 14
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
38889: GO 39020
38891: LD_INT 1
38893: DOUBLE
38894: EQUAL
38895: IFTRUE 38899
38897: GO 38961
38899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38900: LD_ADDR_VAR 0 3
38904: PUSH
38905: LD_INT 11
38907: PUSH
38908: LD_INT 12
38910: PUSH
38911: LD_INT 13
38913: PUSH
38914: LD_INT 14
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: LD_INT 3
38925: PUSH
38926: LD_INT 4
38928: PUSH
38929: LD_INT 5
38931: PUSH
38932: LD_INT 21
38934: PUSH
38935: LD_INT 23
38937: PUSH
38938: LD_INT 22
38940: PUSH
38941: LD_INT 24
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: ST_TO_ADDR
38959: GO 39020
38961: LD_INT 3
38963: DOUBLE
38964: EQUAL
38965: IFTRUE 38969
38967: GO 39019
38969: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38970: LD_ADDR_VAR 0 3
38974: PUSH
38975: LD_INT 13
38977: PUSH
38978: LD_INT 14
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: LD_INT 4
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: LD_INT 21
38995: PUSH
38996: LD_INT 22
38998: PUSH
38999: LD_INT 23
39001: PUSH
39002: LD_INT 24
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
39017: GO 39020
39019: POP
// result := ( chassis in result ) ;
39020: LD_ADDR_VAR 0 3
39024: PUSH
39025: LD_VAR 0 1
39029: PUSH
39030: LD_VAR 0 3
39034: IN
39035: ST_TO_ADDR
// end ;
39036: LD_VAR 0 3
39040: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39041: LD_INT 0
39043: PPUSH
// if not chassis or not weapon then
39044: LD_VAR 0 1
39048: NOT
39049: PUSH
39050: LD_VAR 0 2
39054: NOT
39055: OR
39056: IFFALSE 39060
// exit ;
39058: GO 40122
// case weapon of us_machine_gun :
39060: LD_VAR 0 2
39064: PUSH
39065: LD_INT 2
39067: DOUBLE
39068: EQUAL
39069: IFTRUE 39073
39071: GO 39103
39073: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39074: LD_ADDR_VAR 0 3
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 3
39087: PUSH
39088: LD_INT 4
39090: PUSH
39091: LD_INT 5
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: ST_TO_ADDR
39101: GO 40106
39103: LD_INT 3
39105: DOUBLE
39106: EQUAL
39107: IFTRUE 39111
39109: GO 39141
39111: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39112: LD_ADDR_VAR 0 3
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: LD_INT 4
39128: PUSH
39129: LD_INT 5
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
39139: GO 40106
39141: LD_INT 11
39143: DOUBLE
39144: EQUAL
39145: IFTRUE 39149
39147: GO 39179
39149: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39150: LD_ADDR_VAR 0 3
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: LD_INT 4
39166: PUSH
39167: LD_INT 5
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: ST_TO_ADDR
39177: GO 40106
39179: LD_INT 4
39181: DOUBLE
39182: EQUAL
39183: IFTRUE 39187
39185: GO 39213
39187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39188: LD_ADDR_VAR 0 3
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: LD_INT 4
39201: PUSH
39202: LD_INT 5
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: ST_TO_ADDR
39211: GO 40106
39213: LD_INT 5
39215: DOUBLE
39216: EQUAL
39217: IFTRUE 39221
39219: GO 39247
39221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: LD_INT 4
39235: PUSH
39236: LD_INT 5
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
39245: GO 40106
39247: LD_INT 9
39249: DOUBLE
39250: EQUAL
39251: IFTRUE 39255
39253: GO 39281
39255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39256: LD_ADDR_VAR 0 3
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: LD_INT 4
39269: PUSH
39270: LD_INT 5
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
39279: GO 40106
39281: LD_INT 7
39283: DOUBLE
39284: EQUAL
39285: IFTRUE 39289
39287: GO 39315
39289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 4
39303: PUSH
39304: LD_INT 5
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
39313: GO 40106
39315: LD_INT 12
39317: DOUBLE
39318: EQUAL
39319: IFTRUE 39323
39321: GO 39349
39323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39324: LD_ADDR_VAR 0 3
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 4
39337: PUSH
39338: LD_INT 5
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
39347: GO 40106
39349: LD_INT 13
39351: DOUBLE
39352: EQUAL
39353: IFTRUE 39357
39355: GO 39383
39357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: LD_INT 4
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
39381: GO 40106
39383: LD_INT 14
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39409
39391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 4
39399: PUSH
39400: LD_INT 5
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: ST_TO_ADDR
39407: GO 40106
39409: LD_INT 6
39411: DOUBLE
39412: EQUAL
39413: IFTRUE 39417
39415: GO 39435
39417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39418: LD_ADDR_VAR 0 3
39422: PUSH
39423: LD_INT 4
39425: PUSH
39426: LD_INT 5
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: ST_TO_ADDR
39433: GO 40106
39435: LD_INT 10
39437: DOUBLE
39438: EQUAL
39439: IFTRUE 39443
39441: GO 39461
39443: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39444: LD_ADDR_VAR 0 3
39448: PUSH
39449: LD_INT 4
39451: PUSH
39452: LD_INT 5
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: ST_TO_ADDR
39459: GO 40106
39461: LD_INT 22
39463: DOUBLE
39464: EQUAL
39465: IFTRUE 39469
39467: GO 39495
39469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_INT 11
39477: PUSH
39478: LD_INT 12
39480: PUSH
39481: LD_INT 13
39483: PUSH
39484: LD_INT 14
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
39493: GO 40106
39495: LD_INT 23
39497: DOUBLE
39498: EQUAL
39499: IFTRUE 39503
39501: GO 39529
39503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39504: LD_ADDR_VAR 0 3
39508: PUSH
39509: LD_INT 11
39511: PUSH
39512: LD_INT 12
39514: PUSH
39515: LD_INT 13
39517: PUSH
39518: LD_INT 14
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
39527: GO 40106
39529: LD_INT 24
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39537
39535: GO 39563
39537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39538: LD_ADDR_VAR 0 3
39542: PUSH
39543: LD_INT 11
39545: PUSH
39546: LD_INT 12
39548: PUSH
39549: LD_INT 13
39551: PUSH
39552: LD_INT 14
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
39561: GO 40106
39563: LD_INT 30
39565: DOUBLE
39566: EQUAL
39567: IFTRUE 39571
39569: GO 39597
39571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: LD_INT 11
39579: PUSH
39580: LD_INT 12
39582: PUSH
39583: LD_INT 13
39585: PUSH
39586: LD_INT 14
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
39595: GO 40106
39597: LD_INT 25
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39623
39605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39606: LD_ADDR_VAR 0 3
39610: PUSH
39611: LD_INT 13
39613: PUSH
39614: LD_INT 14
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: ST_TO_ADDR
39621: GO 40106
39623: LD_INT 27
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39649
39631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: LD_INT 13
39639: PUSH
39640: LD_INT 14
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: ST_TO_ADDR
39647: GO 40106
39649: LD_EXP 41
39653: DOUBLE
39654: EQUAL
39655: IFTRUE 39659
39657: GO 39685
39659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_INT 11
39667: PUSH
39668: LD_INT 12
39670: PUSH
39671: LD_INT 13
39673: PUSH
39674: LD_INT 14
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: ST_TO_ADDR
39683: GO 40106
39685: LD_INT 28
39687: DOUBLE
39688: EQUAL
39689: IFTRUE 39693
39691: GO 39711
39693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39694: LD_ADDR_VAR 0 3
39698: PUSH
39699: LD_INT 13
39701: PUSH
39702: LD_INT 14
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: ST_TO_ADDR
39709: GO 40106
39711: LD_INT 29
39713: DOUBLE
39714: EQUAL
39715: IFTRUE 39719
39717: GO 39737
39719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39720: LD_ADDR_VAR 0 3
39724: PUSH
39725: LD_INT 13
39727: PUSH
39728: LD_INT 14
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: ST_TO_ADDR
39735: GO 40106
39737: LD_INT 31
39739: DOUBLE
39740: EQUAL
39741: IFTRUE 39745
39743: GO 39763
39745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39746: LD_ADDR_VAR 0 3
39750: PUSH
39751: LD_INT 13
39753: PUSH
39754: LD_INT 14
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: ST_TO_ADDR
39761: GO 40106
39763: LD_INT 26
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39789
39771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_INT 13
39779: PUSH
39780: LD_INT 14
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: ST_TO_ADDR
39787: GO 40106
39789: LD_INT 42
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39823
39797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 21
39805: PUSH
39806: LD_INT 22
39808: PUSH
39809: LD_INT 23
39811: PUSH
39812: LD_INT 24
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: ST_TO_ADDR
39821: GO 40106
39823: LD_INT 43
39825: DOUBLE
39826: EQUAL
39827: IFTRUE 39831
39829: GO 39857
39831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39832: LD_ADDR_VAR 0 3
39836: PUSH
39837: LD_INT 21
39839: PUSH
39840: LD_INT 22
39842: PUSH
39843: LD_INT 23
39845: PUSH
39846: LD_INT 24
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
39855: GO 40106
39857: LD_INT 44
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 39891
39865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39866: LD_ADDR_VAR 0 3
39870: PUSH
39871: LD_INT 21
39873: PUSH
39874: LD_INT 22
39876: PUSH
39877: LD_INT 23
39879: PUSH
39880: LD_INT 24
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: ST_TO_ADDR
39889: GO 40106
39891: LD_INT 45
39893: DOUBLE
39894: EQUAL
39895: IFTRUE 39899
39897: GO 39925
39899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_INT 21
39907: PUSH
39908: LD_INT 22
39910: PUSH
39911: LD_INT 23
39913: PUSH
39914: LD_INT 24
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: ST_TO_ADDR
39923: GO 40106
39925: LD_INT 49
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 39959
39933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_INT 21
39941: PUSH
39942: LD_INT 22
39944: PUSH
39945: LD_INT 23
39947: PUSH
39948: LD_INT 24
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: ST_TO_ADDR
39957: GO 40106
39959: LD_INT 51
39961: DOUBLE
39962: EQUAL
39963: IFTRUE 39967
39965: GO 39993
39967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39968: LD_ADDR_VAR 0 3
39972: PUSH
39973: LD_INT 21
39975: PUSH
39976: LD_INT 22
39978: PUSH
39979: LD_INT 23
39981: PUSH
39982: LD_INT 24
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
39991: GO 40106
39993: LD_INT 52
39995: DOUBLE
39996: EQUAL
39997: IFTRUE 40001
39999: GO 40027
40001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40002: LD_ADDR_VAR 0 3
40006: PUSH
40007: LD_INT 21
40009: PUSH
40010: LD_INT 22
40012: PUSH
40013: LD_INT 23
40015: PUSH
40016: LD_INT 24
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: ST_TO_ADDR
40025: GO 40106
40027: LD_INT 53
40029: DOUBLE
40030: EQUAL
40031: IFTRUE 40035
40033: GO 40053
40035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40036: LD_ADDR_VAR 0 3
40040: PUSH
40041: LD_INT 23
40043: PUSH
40044: LD_INT 24
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: ST_TO_ADDR
40051: GO 40106
40053: LD_INT 46
40055: DOUBLE
40056: EQUAL
40057: IFTRUE 40061
40059: GO 40079
40061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40062: LD_ADDR_VAR 0 3
40066: PUSH
40067: LD_INT 23
40069: PUSH
40070: LD_INT 24
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: ST_TO_ADDR
40077: GO 40106
40079: LD_INT 47
40081: DOUBLE
40082: EQUAL
40083: IFTRUE 40087
40085: GO 40105
40087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40088: LD_ADDR_VAR 0 3
40092: PUSH
40093: LD_INT 23
40095: PUSH
40096: LD_INT 24
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: ST_TO_ADDR
40103: GO 40106
40105: POP
// result := ( chassis in result ) ;
40106: LD_ADDR_VAR 0 3
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: LD_VAR 0 3
40120: IN
40121: ST_TO_ADDR
// end ;
40122: LD_VAR 0 3
40126: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40127: LD_INT 0
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
// result := array ;
40136: LD_ADDR_VAR 0 5
40140: PUSH
40141: LD_VAR 0 1
40145: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40146: LD_VAR 0 1
40150: NOT
40151: PUSH
40152: LD_VAR 0 2
40156: NOT
40157: OR
40158: PUSH
40159: LD_VAR 0 3
40163: NOT
40164: OR
40165: PUSH
40166: LD_VAR 0 2
40170: PUSH
40171: LD_VAR 0 1
40175: GREATER
40176: OR
40177: PUSH
40178: LD_VAR 0 3
40182: PUSH
40183: LD_VAR 0 1
40187: GREATER
40188: OR
40189: IFFALSE 40193
// exit ;
40191: GO 40489
// if direction then
40193: LD_VAR 0 4
40197: IFFALSE 40261
// begin d := 1 ;
40199: LD_ADDR_VAR 0 9
40203: PUSH
40204: LD_INT 1
40206: ST_TO_ADDR
// if i_from > i_to then
40207: LD_VAR 0 2
40211: PUSH
40212: LD_VAR 0 3
40216: GREATER
40217: IFFALSE 40243
// length := ( array - i_from ) + i_to else
40219: LD_ADDR_VAR 0 11
40223: PUSH
40224: LD_VAR 0 1
40228: PUSH
40229: LD_VAR 0 2
40233: MINUS
40234: PUSH
40235: LD_VAR 0 3
40239: PLUS
40240: ST_TO_ADDR
40241: GO 40259
// length := i_to - i_from ;
40243: LD_ADDR_VAR 0 11
40247: PUSH
40248: LD_VAR 0 3
40252: PUSH
40253: LD_VAR 0 2
40257: MINUS
40258: ST_TO_ADDR
// end else
40259: GO 40322
// begin d := - 1 ;
40261: LD_ADDR_VAR 0 9
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: ST_TO_ADDR
// if i_from > i_to then
40270: LD_VAR 0 2
40274: PUSH
40275: LD_VAR 0 3
40279: GREATER
40280: IFFALSE 40300
// length := i_from - i_to else
40282: LD_ADDR_VAR 0 11
40286: PUSH
40287: LD_VAR 0 2
40291: PUSH
40292: LD_VAR 0 3
40296: MINUS
40297: ST_TO_ADDR
40298: GO 40322
// length := ( array - i_to ) + i_from ;
40300: LD_ADDR_VAR 0 11
40304: PUSH
40305: LD_VAR 0 1
40309: PUSH
40310: LD_VAR 0 3
40314: MINUS
40315: PUSH
40316: LD_VAR 0 2
40320: PLUS
40321: ST_TO_ADDR
// end ; if not length then
40322: LD_VAR 0 11
40326: NOT
40327: IFFALSE 40331
// exit ;
40329: GO 40489
// tmp := array ;
40331: LD_ADDR_VAR 0 10
40335: PUSH
40336: LD_VAR 0 1
40340: ST_TO_ADDR
// for i = 1 to length do
40341: LD_ADDR_VAR 0 6
40345: PUSH
40346: DOUBLE
40347: LD_INT 1
40349: DEC
40350: ST_TO_ADDR
40351: LD_VAR 0 11
40355: PUSH
40356: FOR_TO
40357: IFFALSE 40477
// begin for j = 1 to array do
40359: LD_ADDR_VAR 0 7
40363: PUSH
40364: DOUBLE
40365: LD_INT 1
40367: DEC
40368: ST_TO_ADDR
40369: LD_VAR 0 1
40373: PUSH
40374: FOR_TO
40375: IFFALSE 40463
// begin k := j + d ;
40377: LD_ADDR_VAR 0 8
40381: PUSH
40382: LD_VAR 0 7
40386: PUSH
40387: LD_VAR 0 9
40391: PLUS
40392: ST_TO_ADDR
// if k > array then
40393: LD_VAR 0 8
40397: PUSH
40398: LD_VAR 0 1
40402: GREATER
40403: IFFALSE 40413
// k := 1 ;
40405: LD_ADDR_VAR 0 8
40409: PUSH
40410: LD_INT 1
40412: ST_TO_ADDR
// if not k then
40413: LD_VAR 0 8
40417: NOT
40418: IFFALSE 40430
// k := array ;
40420: LD_ADDR_VAR 0 8
40424: PUSH
40425: LD_VAR 0 1
40429: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40430: LD_ADDR_VAR 0 10
40434: PUSH
40435: LD_VAR 0 10
40439: PPUSH
40440: LD_VAR 0 8
40444: PPUSH
40445: LD_VAR 0 1
40449: PUSH
40450: LD_VAR 0 7
40454: ARRAY
40455: PPUSH
40456: CALL_OW 1
40460: ST_TO_ADDR
// end ;
40461: GO 40374
40463: POP
40464: POP
// array := tmp ;
40465: LD_ADDR_VAR 0 1
40469: PUSH
40470: LD_VAR 0 10
40474: ST_TO_ADDR
// end ;
40475: GO 40356
40477: POP
40478: POP
// result := array ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_VAR 0 1
40488: ST_TO_ADDR
// end ;
40489: LD_VAR 0 5
40493: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40494: LD_INT 0
40496: PPUSH
40497: PPUSH
// result := 0 ;
40498: LD_ADDR_VAR 0 3
40502: PUSH
40503: LD_INT 0
40505: ST_TO_ADDR
// if not array or not value in array then
40506: LD_VAR 0 1
40510: NOT
40511: PUSH
40512: LD_VAR 0 2
40516: PUSH
40517: LD_VAR 0 1
40521: IN
40522: NOT
40523: OR
40524: IFFALSE 40528
// exit ;
40526: GO 40582
// for i = 1 to array do
40528: LD_ADDR_VAR 0 4
40532: PUSH
40533: DOUBLE
40534: LD_INT 1
40536: DEC
40537: ST_TO_ADDR
40538: LD_VAR 0 1
40542: PUSH
40543: FOR_TO
40544: IFFALSE 40580
// if value = array [ i ] then
40546: LD_VAR 0 2
40550: PUSH
40551: LD_VAR 0 1
40555: PUSH
40556: LD_VAR 0 4
40560: ARRAY
40561: EQUAL
40562: IFFALSE 40578
// begin result := i ;
40564: LD_ADDR_VAR 0 3
40568: PUSH
40569: LD_VAR 0 4
40573: ST_TO_ADDR
// exit ;
40574: POP
40575: POP
40576: GO 40582
// end ;
40578: GO 40543
40580: POP
40581: POP
// end ;
40582: LD_VAR 0 3
40586: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40587: LD_INT 0
40589: PPUSH
// vc_chassis := chassis ;
40590: LD_ADDR_OWVAR 37
40594: PUSH
40595: LD_VAR 0 1
40599: ST_TO_ADDR
// vc_engine := engine ;
40600: LD_ADDR_OWVAR 39
40604: PUSH
40605: LD_VAR 0 2
40609: ST_TO_ADDR
// vc_control := control ;
40610: LD_ADDR_OWVAR 38
40614: PUSH
40615: LD_VAR 0 3
40619: ST_TO_ADDR
// vc_weapon := weapon ;
40620: LD_ADDR_OWVAR 40
40624: PUSH
40625: LD_VAR 0 4
40629: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40630: LD_ADDR_OWVAR 41
40634: PUSH
40635: LD_VAR 0 5
40639: ST_TO_ADDR
// end ;
40640: LD_VAR 0 6
40644: RET
// export function WantPlant ( unit ) ; var task ; begin
40645: LD_INT 0
40647: PPUSH
40648: PPUSH
// result := false ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_INT 0
40656: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_VAR 0 1
40666: PPUSH
40667: CALL_OW 437
40671: ST_TO_ADDR
// if task then
40672: LD_VAR 0 3
40676: IFFALSE 40704
// if task [ 1 ] [ 1 ] = p then
40678: LD_VAR 0 3
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PUSH
40687: LD_INT 1
40689: ARRAY
40690: PUSH
40691: LD_STRING p
40693: EQUAL
40694: IFFALSE 40704
// result := true ;
40696: LD_ADDR_VAR 0 2
40700: PUSH
40701: LD_INT 1
40703: ST_TO_ADDR
// end ;
40704: LD_VAR 0 2
40708: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40709: LD_INT 0
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
// if pos < 1 then
40715: LD_VAR 0 2
40719: PUSH
40720: LD_INT 1
40722: LESS
40723: IFFALSE 40727
// exit ;
40725: GO 41030
// if pos = 1 then
40727: LD_VAR 0 2
40731: PUSH
40732: LD_INT 1
40734: EQUAL
40735: IFFALSE 40768
// result := Replace ( arr , pos [ 1 ] , value ) else
40737: LD_ADDR_VAR 0 4
40741: PUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: LD_VAR 0 2
40751: PUSH
40752: LD_INT 1
40754: ARRAY
40755: PPUSH
40756: LD_VAR 0 3
40760: PPUSH
40761: CALL_OW 1
40765: ST_TO_ADDR
40766: GO 41030
// begin tmp := arr ;
40768: LD_ADDR_VAR 0 6
40772: PUSH
40773: LD_VAR 0 1
40777: ST_TO_ADDR
// s_arr := [ tmp ] ;
40778: LD_ADDR_VAR 0 7
40782: PUSH
40783: LD_VAR 0 6
40787: PUSH
40788: EMPTY
40789: LIST
40790: ST_TO_ADDR
// for i = 1 to pos - 1 do
40791: LD_ADDR_VAR 0 5
40795: PUSH
40796: DOUBLE
40797: LD_INT 1
40799: DEC
40800: ST_TO_ADDR
40801: LD_VAR 0 2
40805: PUSH
40806: LD_INT 1
40808: MINUS
40809: PUSH
40810: FOR_TO
40811: IFFALSE 40856
// begin tmp := tmp [ pos [ i ] ] ;
40813: LD_ADDR_VAR 0 6
40817: PUSH
40818: LD_VAR 0 6
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 5
40832: ARRAY
40833: ARRAY
40834: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40835: LD_ADDR_VAR 0 7
40839: PUSH
40840: LD_VAR 0 7
40844: PUSH
40845: LD_VAR 0 6
40849: PUSH
40850: EMPTY
40851: LIST
40852: ADD
40853: ST_TO_ADDR
// end ;
40854: GO 40810
40856: POP
40857: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40858: LD_ADDR_VAR 0 6
40862: PUSH
40863: LD_VAR 0 6
40867: PPUSH
40868: LD_VAR 0 2
40872: PUSH
40873: LD_VAR 0 2
40877: ARRAY
40878: PPUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: CALL_OW 1
40888: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40889: LD_ADDR_VAR 0 7
40893: PUSH
40894: LD_VAR 0 7
40898: PPUSH
40899: LD_VAR 0 7
40903: PPUSH
40904: LD_VAR 0 6
40908: PPUSH
40909: CALL_OW 1
40913: ST_TO_ADDR
// for i = s_arr downto 2 do
40914: LD_ADDR_VAR 0 5
40918: PUSH
40919: DOUBLE
40920: LD_VAR 0 7
40924: INC
40925: ST_TO_ADDR
40926: LD_INT 2
40928: PUSH
40929: FOR_DOWNTO
40930: IFFALSE 41014
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40932: LD_ADDR_VAR 0 6
40936: PUSH
40937: LD_VAR 0 7
40941: PUSH
40942: LD_VAR 0 5
40946: PUSH
40947: LD_INT 1
40949: MINUS
40950: ARRAY
40951: PPUSH
40952: LD_VAR 0 2
40956: PUSH
40957: LD_VAR 0 5
40961: PUSH
40962: LD_INT 1
40964: MINUS
40965: ARRAY
40966: PPUSH
40967: LD_VAR 0 7
40971: PUSH
40972: LD_VAR 0 5
40976: ARRAY
40977: PPUSH
40978: CALL_OW 1
40982: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40983: LD_ADDR_VAR 0 7
40987: PUSH
40988: LD_VAR 0 7
40992: PPUSH
40993: LD_VAR 0 5
40997: PUSH
40998: LD_INT 1
41000: MINUS
41001: PPUSH
41002: LD_VAR 0 6
41006: PPUSH
41007: CALL_OW 1
41011: ST_TO_ADDR
// end ;
41012: GO 40929
41014: POP
41015: POP
// result := s_arr [ 1 ] ;
41016: LD_ADDR_VAR 0 4
41020: PUSH
41021: LD_VAR 0 7
41025: PUSH
41026: LD_INT 1
41028: ARRAY
41029: ST_TO_ADDR
// end ; end ;
41030: LD_VAR 0 4
41034: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41035: LD_INT 0
41037: PPUSH
41038: PPUSH
// if not list then
41039: LD_VAR 0 1
41043: NOT
41044: IFFALSE 41048
// exit ;
41046: GO 41139
// i := list [ pos1 ] ;
41048: LD_ADDR_VAR 0 5
41052: PUSH
41053: LD_VAR 0 1
41057: PUSH
41058: LD_VAR 0 2
41062: ARRAY
41063: ST_TO_ADDR
// if not i then
41064: LD_VAR 0 5
41068: NOT
41069: IFFALSE 41073
// exit ;
41071: GO 41139
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41073: LD_ADDR_VAR 0 1
41077: PUSH
41078: LD_VAR 0 1
41082: PPUSH
41083: LD_VAR 0 2
41087: PPUSH
41088: LD_VAR 0 1
41092: PUSH
41093: LD_VAR 0 3
41097: ARRAY
41098: PPUSH
41099: CALL_OW 1
41103: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41104: LD_ADDR_VAR 0 1
41108: PUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: LD_VAR 0 3
41118: PPUSH
41119: LD_VAR 0 5
41123: PPUSH
41124: CALL_OW 1
41128: ST_TO_ADDR
// result := list ;
41129: LD_ADDR_VAR 0 4
41133: PUSH
41134: LD_VAR 0 1
41138: ST_TO_ADDR
// end ;
41139: LD_VAR 0 4
41143: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41144: LD_INT 0
41146: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41147: LD_ADDR_VAR 0 5
41151: PUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: CALL_OW 250
41161: PPUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 251
41171: PPUSH
41172: LD_VAR 0 2
41176: PPUSH
41177: LD_VAR 0 3
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: CALL 41197 0 5
41191: ST_TO_ADDR
// end ;
41192: LD_VAR 0 5
41196: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41197: LD_INT 0
41199: PPUSH
41200: PPUSH
41201: PPUSH
41202: PPUSH
// if not list then
41203: LD_VAR 0 3
41207: NOT
41208: IFFALSE 41212
// exit ;
41210: GO 41600
// result := [ ] ;
41212: LD_ADDR_VAR 0 6
41216: PUSH
41217: EMPTY
41218: ST_TO_ADDR
// for i in list do
41219: LD_ADDR_VAR 0 7
41223: PUSH
41224: LD_VAR 0 3
41228: PUSH
41229: FOR_IN
41230: IFFALSE 41432
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41232: LD_ADDR_VAR 0 9
41236: PUSH
41237: LD_VAR 0 7
41241: PPUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 2
41251: PPUSH
41252: CALL_OW 297
41256: ST_TO_ADDR
// if not result then
41257: LD_VAR 0 6
41261: NOT
41262: IFFALSE 41288
// result := [ [ i , tmp ] ] else
41264: LD_ADDR_VAR 0 6
41268: PUSH
41269: LD_VAR 0 7
41273: PUSH
41274: LD_VAR 0 9
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: ST_TO_ADDR
41286: GO 41430
// begin if result [ result ] [ 2 ] < tmp then
41288: LD_VAR 0 6
41292: PUSH
41293: LD_VAR 0 6
41297: ARRAY
41298: PUSH
41299: LD_INT 2
41301: ARRAY
41302: PUSH
41303: LD_VAR 0 9
41307: LESS
41308: IFFALSE 41350
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41310: LD_ADDR_VAR 0 6
41314: PUSH
41315: LD_VAR 0 6
41319: PPUSH
41320: LD_VAR 0 6
41324: PUSH
41325: LD_INT 1
41327: PLUS
41328: PPUSH
41329: LD_VAR 0 7
41333: PUSH
41334: LD_VAR 0 9
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL_OW 2
41347: ST_TO_ADDR
41348: GO 41430
// for j = 1 to result do
41350: LD_ADDR_VAR 0 8
41354: PUSH
41355: DOUBLE
41356: LD_INT 1
41358: DEC
41359: ST_TO_ADDR
41360: LD_VAR 0 6
41364: PUSH
41365: FOR_TO
41366: IFFALSE 41428
// begin if tmp < result [ j ] [ 2 ] then
41368: LD_VAR 0 9
41372: PUSH
41373: LD_VAR 0 6
41377: PUSH
41378: LD_VAR 0 8
41382: ARRAY
41383: PUSH
41384: LD_INT 2
41386: ARRAY
41387: LESS
41388: IFFALSE 41426
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41390: LD_ADDR_VAR 0 6
41394: PUSH
41395: LD_VAR 0 6
41399: PPUSH
41400: LD_VAR 0 8
41404: PPUSH
41405: LD_VAR 0 7
41409: PUSH
41410: LD_VAR 0 9
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PPUSH
41419: CALL_OW 2
41423: ST_TO_ADDR
// break ;
41424: GO 41428
// end ; end ;
41426: GO 41365
41428: POP
41429: POP
// end ; end ;
41430: GO 41229
41432: POP
41433: POP
// if result and not asc then
41434: LD_VAR 0 6
41438: PUSH
41439: LD_VAR 0 4
41443: NOT
41444: AND
41445: IFFALSE 41520
// begin tmp := result ;
41447: LD_ADDR_VAR 0 9
41451: PUSH
41452: LD_VAR 0 6
41456: ST_TO_ADDR
// for i = tmp downto 1 do
41457: LD_ADDR_VAR 0 7
41461: PUSH
41462: DOUBLE
41463: LD_VAR 0 9
41467: INC
41468: ST_TO_ADDR
41469: LD_INT 1
41471: PUSH
41472: FOR_DOWNTO
41473: IFFALSE 41518
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41475: LD_ADDR_VAR 0 6
41479: PUSH
41480: LD_VAR 0 6
41484: PPUSH
41485: LD_VAR 0 9
41489: PUSH
41490: LD_VAR 0 7
41494: MINUS
41495: PUSH
41496: LD_INT 1
41498: PLUS
41499: PPUSH
41500: LD_VAR 0 9
41504: PUSH
41505: LD_VAR 0 7
41509: ARRAY
41510: PPUSH
41511: CALL_OW 1
41515: ST_TO_ADDR
41516: GO 41472
41518: POP
41519: POP
// end ; tmp := [ ] ;
41520: LD_ADDR_VAR 0 9
41524: PUSH
41525: EMPTY
41526: ST_TO_ADDR
// if mode then
41527: LD_VAR 0 5
41531: IFFALSE 41600
// begin for i = 1 to result do
41533: LD_ADDR_VAR 0 7
41537: PUSH
41538: DOUBLE
41539: LD_INT 1
41541: DEC
41542: ST_TO_ADDR
41543: LD_VAR 0 6
41547: PUSH
41548: FOR_TO
41549: IFFALSE 41588
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41551: LD_ADDR_VAR 0 9
41555: PUSH
41556: LD_VAR 0 9
41560: PPUSH
41561: LD_VAR 0 7
41565: PPUSH
41566: LD_VAR 0 6
41570: PUSH
41571: LD_VAR 0 7
41575: ARRAY
41576: PUSH
41577: LD_INT 1
41579: ARRAY
41580: PPUSH
41581: CALL_OW 1
41585: ST_TO_ADDR
41586: GO 41548
41588: POP
41589: POP
// result := tmp ;
41590: LD_ADDR_VAR 0 6
41594: PUSH
41595: LD_VAR 0 9
41599: ST_TO_ADDR
// end ; end ;
41600: LD_VAR 0 6
41604: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41605: LD_INT 0
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41613: LD_ADDR_VAR 0 5
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// if not x or not y then
41635: LD_VAR 0 2
41639: NOT
41640: PUSH
41641: LD_VAR 0 3
41645: NOT
41646: OR
41647: IFFALSE 41651
// exit ;
41649: GO 43303
// if not range then
41651: LD_VAR 0 4
41655: NOT
41656: IFFALSE 41666
// range := 10 ;
41658: LD_ADDR_VAR 0 4
41662: PUSH
41663: LD_INT 10
41665: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41666: LD_ADDR_VAR 0 8
41670: PUSH
41671: LD_INT 81
41673: PUSH
41674: LD_VAR 0 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 92
41685: PUSH
41686: LD_VAR 0 2
41690: PUSH
41691: LD_VAR 0 3
41695: PUSH
41696: LD_VAR 0 4
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: PUSH
41710: LD_INT 21
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: PPUSH
41729: CALL_OW 69
41733: ST_TO_ADDR
// if not tmp then
41734: LD_VAR 0 8
41738: NOT
41739: IFFALSE 41743
// exit ;
41741: GO 43303
// for i in tmp do
41743: LD_ADDR_VAR 0 6
41747: PUSH
41748: LD_VAR 0 8
41752: PUSH
41753: FOR_IN
41754: IFFALSE 43278
// begin points := [ 0 , 0 , 0 ] ;
41756: LD_ADDR_VAR 0 9
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
// bpoints := 1 ;
41775: LD_ADDR_VAR 0 10
41779: PUSH
41780: LD_INT 1
41782: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41783: LD_VAR 0 6
41787: PPUSH
41788: CALL_OW 247
41792: PUSH
41793: LD_INT 1
41795: DOUBLE
41796: EQUAL
41797: IFTRUE 41801
41799: GO 42379
41801: POP
// begin if GetClass ( i ) = 1 then
41802: LD_VAR 0 6
41806: PPUSH
41807: CALL_OW 257
41811: PUSH
41812: LD_INT 1
41814: EQUAL
41815: IFFALSE 41836
// points := [ 10 , 5 , 3 ] ;
41817: LD_ADDR_VAR 0 9
41821: PUSH
41822: LD_INT 10
41824: PUSH
41825: LD_INT 5
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41836: LD_VAR 0 6
41840: PPUSH
41841: CALL_OW 257
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: IN
41860: IFFALSE 41881
// points := [ 3 , 2 , 1 ] ;
41862: LD_ADDR_VAR 0 9
41866: PUSH
41867: LD_INT 3
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41881: LD_VAR 0 6
41885: PPUSH
41886: CALL_OW 257
41890: PUSH
41891: LD_INT 5
41893: EQUAL
41894: IFFALSE 41915
// points := [ 130 , 5 , 2 ] ;
41896: LD_ADDR_VAR 0 9
41900: PUSH
41901: LD_INT 130
41903: PUSH
41904: LD_INT 5
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41915: LD_VAR 0 6
41919: PPUSH
41920: CALL_OW 257
41924: PUSH
41925: LD_INT 8
41927: EQUAL
41928: IFFALSE 41949
// points := [ 35 , 35 , 30 ] ;
41930: LD_ADDR_VAR 0 9
41934: PUSH
41935: LD_INT 35
41937: PUSH
41938: LD_INT 35
41940: PUSH
41941: LD_INT 30
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41949: LD_VAR 0 6
41953: PPUSH
41954: CALL_OW 257
41958: PUSH
41959: LD_INT 9
41961: EQUAL
41962: IFFALSE 41983
// points := [ 20 , 55 , 40 ] ;
41964: LD_ADDR_VAR 0 9
41968: PUSH
41969: LD_INT 20
41971: PUSH
41972: LD_INT 55
41974: PUSH
41975: LD_INT 40
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41983: LD_VAR 0 6
41987: PPUSH
41988: CALL_OW 257
41992: PUSH
41993: LD_INT 12
41995: PUSH
41996: LD_INT 16
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: IN
42003: IFFALSE 42024
// points := [ 5 , 3 , 2 ] ;
42005: LD_ADDR_VAR 0 9
42009: PUSH
42010: LD_INT 5
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42024: LD_VAR 0 6
42028: PPUSH
42029: CALL_OW 257
42033: PUSH
42034: LD_INT 17
42036: EQUAL
42037: IFFALSE 42058
// points := [ 100 , 50 , 75 ] ;
42039: LD_ADDR_VAR 0 9
42043: PUSH
42044: LD_INT 100
42046: PUSH
42047: LD_INT 50
42049: PUSH
42050: LD_INT 75
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42058: LD_VAR 0 6
42062: PPUSH
42063: CALL_OW 257
42067: PUSH
42068: LD_INT 15
42070: EQUAL
42071: IFFALSE 42092
// points := [ 10 , 5 , 3 ] ;
42073: LD_ADDR_VAR 0 9
42077: PUSH
42078: LD_INT 10
42080: PUSH
42081: LD_INT 5
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42092: LD_VAR 0 6
42096: PPUSH
42097: CALL_OW 257
42101: PUSH
42102: LD_INT 14
42104: EQUAL
42105: IFFALSE 42126
// points := [ 10 , 0 , 0 ] ;
42107: LD_ADDR_VAR 0 9
42111: PUSH
42112: LD_INT 10
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42126: LD_VAR 0 6
42130: PPUSH
42131: CALL_OW 257
42135: PUSH
42136: LD_INT 11
42138: EQUAL
42139: IFFALSE 42160
// points := [ 30 , 10 , 5 ] ;
42141: LD_ADDR_VAR 0 9
42145: PUSH
42146: LD_INT 30
42148: PUSH
42149: LD_INT 10
42151: PUSH
42152: LD_INT 5
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_INT 5
42167: PPUSH
42168: CALL_OW 321
42172: PUSH
42173: LD_INT 2
42175: EQUAL
42176: IFFALSE 42193
// bpoints := bpoints * 1.8 ;
42178: LD_ADDR_VAR 0 10
42182: PUSH
42183: LD_VAR 0 10
42187: PUSH
42188: LD_REAL  1.80000000000000E+0000
42191: MUL
42192: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42193: LD_VAR 0 6
42197: PPUSH
42198: CALL_OW 257
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 4
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: IN
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: LD_INT 51
42229: PPUSH
42230: CALL_OW 321
42234: PUSH
42235: LD_INT 2
42237: EQUAL
42238: AND
42239: IFFALSE 42256
// bpoints := bpoints * 1.2 ;
42241: LD_ADDR_VAR 0 10
42245: PUSH
42246: LD_VAR 0 10
42250: PUSH
42251: LD_REAL  1.20000000000000E+0000
42254: MUL
42255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42256: LD_VAR 0 6
42260: PPUSH
42261: CALL_OW 257
42265: PUSH
42266: LD_INT 5
42268: PUSH
42269: LD_INT 7
42271: PUSH
42272: LD_INT 9
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: IN
42280: PUSH
42281: LD_VAR 0 1
42285: PPUSH
42286: LD_INT 52
42288: PPUSH
42289: CALL_OW 321
42293: PUSH
42294: LD_INT 2
42296: EQUAL
42297: AND
42298: IFFALSE 42315
// bpoints := bpoints * 1.5 ;
42300: LD_ADDR_VAR 0 10
42304: PUSH
42305: LD_VAR 0 10
42309: PUSH
42310: LD_REAL  1.50000000000000E+0000
42313: MUL
42314: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42315: LD_VAR 0 1
42319: PPUSH
42320: LD_INT 66
42322: PPUSH
42323: CALL_OW 321
42327: PUSH
42328: LD_INT 2
42330: EQUAL
42331: IFFALSE 42348
// bpoints := bpoints * 1.1 ;
42333: LD_ADDR_VAR 0 10
42337: PUSH
42338: LD_VAR 0 10
42342: PUSH
42343: LD_REAL  1.10000000000000E+0000
42346: MUL
42347: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42348: LD_ADDR_VAR 0 10
42352: PUSH
42353: LD_VAR 0 10
42357: PUSH
42358: LD_VAR 0 6
42362: PPUSH
42363: LD_INT 1
42365: PPUSH
42366: CALL_OW 259
42370: PUSH
42371: LD_REAL  1.15000000000000E+0000
42374: MUL
42375: MUL
42376: ST_TO_ADDR
// end ; unit_vehicle :
42377: GO 43207
42379: LD_INT 2
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 43195
42387: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42388: LD_VAR 0 6
42392: PPUSH
42393: CALL_OW 264
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: LD_INT 42
42403: PUSH
42404: LD_INT 24
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: IN
42412: IFFALSE 42433
// points := [ 25 , 5 , 3 ] ;
42414: LD_ADDR_VAR 0 9
42418: PUSH
42419: LD_INT 25
42421: PUSH
42422: LD_INT 5
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42433: LD_VAR 0 6
42437: PPUSH
42438: CALL_OW 264
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: LD_INT 43
42448: PUSH
42449: LD_INT 25
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: IN
42457: IFFALSE 42478
// points := [ 40 , 15 , 5 ] ;
42459: LD_ADDR_VAR 0 9
42463: PUSH
42464: LD_INT 40
42466: PUSH
42467: LD_INT 15
42469: PUSH
42470: LD_INT 5
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42478: LD_VAR 0 6
42482: PPUSH
42483: CALL_OW 264
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: LD_INT 23
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: IN
42498: IFFALSE 42519
// points := [ 7 , 25 , 8 ] ;
42500: LD_ADDR_VAR 0 9
42504: PUSH
42505: LD_INT 7
42507: PUSH
42508: LD_INT 25
42510: PUSH
42511: LD_INT 8
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42519: LD_VAR 0 6
42523: PPUSH
42524: CALL_OW 264
42528: PUSH
42529: LD_INT 5
42531: PUSH
42532: LD_INT 27
42534: PUSH
42535: LD_INT 44
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: IN
42543: IFFALSE 42564
// points := [ 14 , 50 , 16 ] ;
42545: LD_ADDR_VAR 0 9
42549: PUSH
42550: LD_INT 14
42552: PUSH
42553: LD_INT 50
42555: PUSH
42556: LD_INT 16
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42564: LD_VAR 0 6
42568: PPUSH
42569: CALL_OW 264
42573: PUSH
42574: LD_INT 6
42576: PUSH
42577: LD_INT 46
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: IN
42584: IFFALSE 42605
// points := [ 32 , 120 , 70 ] ;
42586: LD_ADDR_VAR 0 9
42590: PUSH
42591: LD_INT 32
42593: PUSH
42594: LD_INT 120
42596: PUSH
42597: LD_INT 70
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42605: LD_VAR 0 6
42609: PPUSH
42610: CALL_OW 264
42614: PUSH
42615: LD_INT 7
42617: PUSH
42618: LD_INT 28
42620: PUSH
42621: LD_INT 45
42623: PUSH
42624: LD_EXP 41
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: IN
42635: IFFALSE 42656
// points := [ 35 , 20 , 45 ] ;
42637: LD_ADDR_VAR 0 9
42641: PUSH
42642: LD_INT 35
42644: PUSH
42645: LD_INT 20
42647: PUSH
42648: LD_INT 45
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42656: LD_VAR 0 6
42660: PPUSH
42661: CALL_OW 264
42665: PUSH
42666: LD_INT 47
42668: PUSH
42669: EMPTY
42670: LIST
42671: IN
42672: IFFALSE 42693
// points := [ 67 , 45 , 75 ] ;
42674: LD_ADDR_VAR 0 9
42678: PUSH
42679: LD_INT 67
42681: PUSH
42682: LD_INT 45
42684: PUSH
42685: LD_INT 75
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42693: LD_VAR 0 6
42697: PPUSH
42698: CALL_OW 264
42702: PUSH
42703: LD_INT 26
42705: PUSH
42706: EMPTY
42707: LIST
42708: IN
42709: IFFALSE 42730
// points := [ 120 , 30 , 80 ] ;
42711: LD_ADDR_VAR 0 9
42715: PUSH
42716: LD_INT 120
42718: PUSH
42719: LD_INT 30
42721: PUSH
42722: LD_INT 80
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42730: LD_VAR 0 6
42734: PPUSH
42735: CALL_OW 264
42739: PUSH
42740: LD_INT 22
42742: PUSH
42743: EMPTY
42744: LIST
42745: IN
42746: IFFALSE 42767
// points := [ 40 , 1 , 1 ] ;
42748: LD_ADDR_VAR 0 9
42752: PUSH
42753: LD_INT 40
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42767: LD_VAR 0 6
42771: PPUSH
42772: CALL_OW 264
42776: PUSH
42777: LD_INT 29
42779: PUSH
42780: EMPTY
42781: LIST
42782: IN
42783: IFFALSE 42804
// points := [ 70 , 200 , 400 ] ;
42785: LD_ADDR_VAR 0 9
42789: PUSH
42790: LD_INT 70
42792: PUSH
42793: LD_INT 200
42795: PUSH
42796: LD_INT 400
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42804: LD_VAR 0 6
42808: PPUSH
42809: CALL_OW 264
42813: PUSH
42814: LD_INT 14
42816: PUSH
42817: LD_INT 53
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: IN
42824: IFFALSE 42845
// points := [ 40 , 10 , 20 ] ;
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_INT 40
42833: PUSH
42834: LD_INT 10
42836: PUSH
42837: LD_INT 20
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42845: LD_VAR 0 6
42849: PPUSH
42850: CALL_OW 264
42854: PUSH
42855: LD_INT 9
42857: PUSH
42858: EMPTY
42859: LIST
42860: IN
42861: IFFALSE 42882
// points := [ 5 , 70 , 20 ] ;
42863: LD_ADDR_VAR 0 9
42867: PUSH
42868: LD_INT 5
42870: PUSH
42871: LD_INT 70
42873: PUSH
42874: LD_INT 20
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42882: LD_VAR 0 6
42886: PPUSH
42887: CALL_OW 264
42891: PUSH
42892: LD_INT 10
42894: PUSH
42895: EMPTY
42896: LIST
42897: IN
42898: IFFALSE 42919
// points := [ 35 , 110 , 70 ] ;
42900: LD_ADDR_VAR 0 9
42904: PUSH
42905: LD_INT 35
42907: PUSH
42908: LD_INT 110
42910: PUSH
42911: LD_INT 70
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42919: LD_VAR 0 6
42923: PPUSH
42924: CALL_OW 265
42928: PUSH
42929: LD_INT 25
42931: EQUAL
42932: IFFALSE 42953
// points := [ 80 , 65 , 100 ] ;
42934: LD_ADDR_VAR 0 9
42938: PUSH
42939: LD_INT 80
42941: PUSH
42942: LD_INT 65
42944: PUSH
42945: LD_INT 100
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42953: LD_VAR 0 6
42957: PPUSH
42958: CALL_OW 263
42962: PUSH
42963: LD_INT 1
42965: EQUAL
42966: IFFALSE 43001
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42968: LD_ADDR_VAR 0 10
42972: PUSH
42973: LD_VAR 0 10
42977: PUSH
42978: LD_VAR 0 6
42982: PPUSH
42983: CALL_OW 311
42987: PPUSH
42988: LD_INT 3
42990: PPUSH
42991: CALL_OW 259
42995: PUSH
42996: LD_INT 4
42998: MUL
42999: MUL
43000: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43001: LD_VAR 0 6
43005: PPUSH
43006: CALL_OW 263
43010: PUSH
43011: LD_INT 2
43013: EQUAL
43014: IFFALSE 43065
// begin j := IsControledBy ( i ) ;
43016: LD_ADDR_VAR 0 7
43020: PUSH
43021: LD_VAR 0 6
43025: PPUSH
43026: CALL_OW 312
43030: ST_TO_ADDR
// if j then
43031: LD_VAR 0 7
43035: IFFALSE 43065
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43037: LD_ADDR_VAR 0 10
43041: PUSH
43042: LD_VAR 0 10
43046: PUSH
43047: LD_VAR 0 7
43051: PPUSH
43052: LD_INT 3
43054: PPUSH
43055: CALL_OW 259
43059: PUSH
43060: LD_INT 3
43062: MUL
43063: MUL
43064: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43065: LD_VAR 0 6
43069: PPUSH
43070: CALL_OW 264
43074: PUSH
43075: LD_INT 5
43077: PUSH
43078: LD_INT 6
43080: PUSH
43081: LD_INT 46
43083: PUSH
43084: LD_INT 44
43086: PUSH
43087: LD_INT 47
43089: PUSH
43090: LD_INT 45
43092: PUSH
43093: LD_INT 28
43095: PUSH
43096: LD_INT 7
43098: PUSH
43099: LD_INT 27
43101: PUSH
43102: LD_INT 29
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: IN
43117: PUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: LD_INT 52
43125: PPUSH
43126: CALL_OW 321
43130: PUSH
43131: LD_INT 2
43133: EQUAL
43134: AND
43135: IFFALSE 43152
// bpoints := bpoints * 1.2 ;
43137: LD_ADDR_VAR 0 10
43141: PUSH
43142: LD_VAR 0 10
43146: PUSH
43147: LD_REAL  1.20000000000000E+0000
43150: MUL
43151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43152: LD_VAR 0 6
43156: PPUSH
43157: CALL_OW 264
43161: PUSH
43162: LD_INT 6
43164: PUSH
43165: LD_INT 46
43167: PUSH
43168: LD_INT 47
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: IN
43176: IFFALSE 43193
// bpoints := bpoints * 1.2 ;
43178: LD_ADDR_VAR 0 10
43182: PUSH
43183: LD_VAR 0 10
43187: PUSH
43188: LD_REAL  1.20000000000000E+0000
43191: MUL
43192: ST_TO_ADDR
// end ; unit_building :
43193: GO 43207
43195: LD_INT 3
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43203
43201: GO 43206
43203: POP
// ; end ;
43204: GO 43207
43206: POP
// for j = 1 to 3 do
43207: LD_ADDR_VAR 0 7
43211: PUSH
43212: DOUBLE
43213: LD_INT 1
43215: DEC
43216: ST_TO_ADDR
43217: LD_INT 3
43219: PUSH
43220: FOR_TO
43221: IFFALSE 43274
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: LD_VAR 0 5
43232: PPUSH
43233: LD_VAR 0 7
43237: PPUSH
43238: LD_VAR 0 5
43242: PUSH
43243: LD_VAR 0 7
43247: ARRAY
43248: PUSH
43249: LD_VAR 0 9
43253: PUSH
43254: LD_VAR 0 7
43258: ARRAY
43259: PUSH
43260: LD_VAR 0 10
43264: MUL
43265: PLUS
43266: PPUSH
43267: CALL_OW 1
43271: ST_TO_ADDR
43272: GO 43220
43274: POP
43275: POP
// end ;
43276: GO 41753
43278: POP
43279: POP
// result := Replace ( result , 4 , tmp ) ;
43280: LD_ADDR_VAR 0 5
43284: PUSH
43285: LD_VAR 0 5
43289: PPUSH
43290: LD_INT 4
43292: PPUSH
43293: LD_VAR 0 8
43297: PPUSH
43298: CALL_OW 1
43302: ST_TO_ADDR
// end ;
43303: LD_VAR 0 5
43307: RET
// export function DangerAtRange ( unit , range ) ; begin
43308: LD_INT 0
43310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_VAR 0 1
43320: PPUSH
43321: CALL_OW 255
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 250
43335: PPUSH
43336: LD_VAR 0 1
43340: PPUSH
43341: CALL_OW 251
43345: PPUSH
43346: LD_VAR 0 2
43350: PPUSH
43351: CALL 41605 0 4
43355: ST_TO_ADDR
// end ;
43356: LD_VAR 0 3
43360: RET
// export function DangerInArea ( side , area ) ; begin
43361: LD_INT 0
43363: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_VAR 0 2
43373: PPUSH
43374: LD_INT 81
43376: PUSH
43377: LD_VAR 0 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PPUSH
43386: CALL_OW 70
43390: ST_TO_ADDR
// end ;
43391: LD_VAR 0 3
43395: RET
// export function IsExtension ( b ) ; begin
43396: LD_INT 0
43398: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43399: LD_ADDR_VAR 0 2
43403: PUSH
43404: LD_VAR 0 1
43408: PUSH
43409: LD_INT 23
43411: PUSH
43412: LD_INT 20
43414: PUSH
43415: LD_INT 22
43417: PUSH
43418: LD_INT 17
43420: PUSH
43421: LD_INT 24
43423: PUSH
43424: LD_INT 21
43426: PUSH
43427: LD_INT 19
43429: PUSH
43430: LD_INT 16
43432: PUSH
43433: LD_INT 25
43435: PUSH
43436: LD_INT 18
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: IN
43451: ST_TO_ADDR
// end ;
43452: LD_VAR 0 2
43456: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43457: LD_INT 0
43459: PPUSH
43460: PPUSH
43461: PPUSH
// result := [ ] ;
43462: LD_ADDR_VAR 0 4
43466: PUSH
43467: EMPTY
43468: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_VAR 0 2
43478: PPUSH
43479: LD_INT 21
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PPUSH
43489: CALL_OW 70
43493: ST_TO_ADDR
// if not tmp then
43494: LD_VAR 0 5
43498: NOT
43499: IFFALSE 43503
// exit ;
43501: GO 43567
// if checkLink then
43503: LD_VAR 0 3
43507: IFFALSE 43557
// begin for i in tmp do
43509: LD_ADDR_VAR 0 6
43513: PUSH
43514: LD_VAR 0 5
43518: PUSH
43519: FOR_IN
43520: IFFALSE 43555
// if GetBase ( i ) <> base then
43522: LD_VAR 0 6
43526: PPUSH
43527: CALL_OW 274
43531: PUSH
43532: LD_VAR 0 1
43536: NONEQUAL
43537: IFFALSE 43553
// ComLinkToBase ( base , i ) ;
43539: LD_VAR 0 1
43543: PPUSH
43544: LD_VAR 0 6
43548: PPUSH
43549: CALL_OW 169
43553: GO 43519
43555: POP
43556: POP
// end ; result := tmp ;
43557: LD_ADDR_VAR 0 4
43561: PUSH
43562: LD_VAR 0 5
43566: ST_TO_ADDR
// end ;
43567: LD_VAR 0 4
43571: RET
// export function ComComplete ( units , b ) ; var i ; begin
43572: LD_INT 0
43574: PPUSH
43575: PPUSH
// if not units then
43576: LD_VAR 0 1
43580: NOT
43581: IFFALSE 43585
// exit ;
43583: GO 43675
// for i in units do
43585: LD_ADDR_VAR 0 4
43589: PUSH
43590: LD_VAR 0 1
43594: PUSH
43595: FOR_IN
43596: IFFALSE 43673
// if BuildingStatus ( b ) = bs_build then
43598: LD_VAR 0 2
43602: PPUSH
43603: CALL_OW 461
43607: PUSH
43608: LD_INT 1
43610: EQUAL
43611: IFFALSE 43671
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43613: LD_VAR 0 4
43617: PPUSH
43618: LD_STRING h
43620: PUSH
43621: LD_VAR 0 2
43625: PPUSH
43626: CALL_OW 250
43630: PUSH
43631: LD_VAR 0 2
43635: PPUSH
43636: CALL_OW 251
43640: PUSH
43641: LD_VAR 0 2
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: PUSH
43664: EMPTY
43665: LIST
43666: PPUSH
43667: CALL_OW 446
43671: GO 43595
43673: POP
43674: POP
// end ;
43675: LD_VAR 0 3
43679: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43680: LD_INT 0
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43688: LD_VAR 0 1
43692: NOT
43693: PUSH
43694: LD_VAR 0 1
43698: PPUSH
43699: CALL_OW 263
43703: PUSH
43704: LD_INT 2
43706: NONEQUAL
43707: OR
43708: IFFALSE 43712
// exit ;
43710: GO 44028
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43712: LD_ADDR_VAR 0 6
43716: PUSH
43717: LD_INT 22
43719: PUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 255
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 30
43739: PUSH
43740: LD_INT 36
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 34
43749: PUSH
43750: LD_INT 31
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PPUSH
43766: CALL_OW 69
43770: ST_TO_ADDR
// if not tmp then
43771: LD_VAR 0 6
43775: NOT
43776: IFFALSE 43780
// exit ;
43778: GO 44028
// result := [ ] ;
43780: LD_ADDR_VAR 0 2
43784: PUSH
43785: EMPTY
43786: ST_TO_ADDR
// for i in tmp do
43787: LD_ADDR_VAR 0 3
43791: PUSH
43792: LD_VAR 0 6
43796: PUSH
43797: FOR_IN
43798: IFFALSE 43869
// begin t := UnitsInside ( i ) ;
43800: LD_ADDR_VAR 0 4
43804: PUSH
43805: LD_VAR 0 3
43809: PPUSH
43810: CALL_OW 313
43814: ST_TO_ADDR
// if t then
43815: LD_VAR 0 4
43819: IFFALSE 43867
// for j in t do
43821: LD_ADDR_VAR 0 7
43825: PUSH
43826: LD_VAR 0 4
43830: PUSH
43831: FOR_IN
43832: IFFALSE 43865
// result := Replace ( result , result + 1 , j ) ;
43834: LD_ADDR_VAR 0 2
43838: PUSH
43839: LD_VAR 0 2
43843: PPUSH
43844: LD_VAR 0 2
43848: PUSH
43849: LD_INT 1
43851: PLUS
43852: PPUSH
43853: LD_VAR 0 7
43857: PPUSH
43858: CALL_OW 1
43862: ST_TO_ADDR
43863: GO 43831
43865: POP
43866: POP
// end ;
43867: GO 43797
43869: POP
43870: POP
// if not result then
43871: LD_VAR 0 2
43875: NOT
43876: IFFALSE 43880
// exit ;
43878: GO 44028
// mech := result [ 1 ] ;
43880: LD_ADDR_VAR 0 5
43884: PUSH
43885: LD_VAR 0 2
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: ST_TO_ADDR
// if result > 1 then
43894: LD_VAR 0 2
43898: PUSH
43899: LD_INT 1
43901: GREATER
43902: IFFALSE 44014
// begin for i = 2 to result do
43904: LD_ADDR_VAR 0 3
43908: PUSH
43909: DOUBLE
43910: LD_INT 2
43912: DEC
43913: ST_TO_ADDR
43914: LD_VAR 0 2
43918: PUSH
43919: FOR_TO
43920: IFFALSE 44012
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43922: LD_ADDR_VAR 0 4
43926: PUSH
43927: LD_VAR 0 2
43931: PUSH
43932: LD_VAR 0 3
43936: ARRAY
43937: PPUSH
43938: LD_INT 3
43940: PPUSH
43941: CALL_OW 259
43945: PUSH
43946: LD_VAR 0 2
43950: PUSH
43951: LD_VAR 0 3
43955: ARRAY
43956: PPUSH
43957: CALL_OW 432
43961: MINUS
43962: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43963: LD_VAR 0 4
43967: PUSH
43968: LD_VAR 0 5
43972: PPUSH
43973: LD_INT 3
43975: PPUSH
43976: CALL_OW 259
43980: PUSH
43981: LD_VAR 0 5
43985: PPUSH
43986: CALL_OW 432
43990: MINUS
43991: GREATEREQUAL
43992: IFFALSE 44010
// mech := result [ i ] ;
43994: LD_ADDR_VAR 0 5
43998: PUSH
43999: LD_VAR 0 2
44003: PUSH
44004: LD_VAR 0 3
44008: ARRAY
44009: ST_TO_ADDR
// end ;
44010: GO 43919
44012: POP
44013: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44014: LD_VAR 0 1
44018: PPUSH
44019: LD_VAR 0 5
44023: PPUSH
44024: CALL_OW 135
// end ;
44028: LD_VAR 0 2
44032: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44033: LD_INT 0
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
// result := [ ] ;
44048: LD_ADDR_VAR 0 7
44052: PUSH
44053: EMPTY
44054: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 266
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: IN
44075: NOT
44076: IFFALSE 44080
// exit ;
44078: GO 45714
// if name then
44080: LD_VAR 0 3
44084: IFFALSE 44100
// SetBName ( base_dep , name ) ;
44086: LD_VAR 0 1
44090: PPUSH
44091: LD_VAR 0 3
44095: PPUSH
44096: CALL_OW 500
// base := GetBase ( base_dep ) ;
44100: LD_ADDR_VAR 0 15
44104: PUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 274
44114: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44115: LD_ADDR_VAR 0 16
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 255
44129: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44130: LD_ADDR_VAR 0 17
44134: PUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 248
44144: ST_TO_ADDR
// if sources then
44145: LD_VAR 0 5
44149: IFFALSE 44196
// for i = 1 to 3 do
44151: LD_ADDR_VAR 0 8
44155: PUSH
44156: DOUBLE
44157: LD_INT 1
44159: DEC
44160: ST_TO_ADDR
44161: LD_INT 3
44163: PUSH
44164: FOR_TO
44165: IFFALSE 44194
// AddResourceType ( base , i , sources [ i ] ) ;
44167: LD_VAR 0 15
44171: PPUSH
44172: LD_VAR 0 8
44176: PPUSH
44177: LD_VAR 0 5
44181: PUSH
44182: LD_VAR 0 8
44186: ARRAY
44187: PPUSH
44188: CALL_OW 276
44192: GO 44164
44194: POP
44195: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44196: LD_ADDR_VAR 0 18
44200: PUSH
44201: LD_VAR 0 15
44205: PPUSH
44206: LD_VAR 0 2
44210: PPUSH
44211: LD_INT 1
44213: PPUSH
44214: CALL 43457 0 3
44218: ST_TO_ADDR
// InitHc ;
44219: CALL_OW 19
// InitUc ;
44223: CALL_OW 18
// uc_side := side ;
44227: LD_ADDR_OWVAR 20
44231: PUSH
44232: LD_VAR 0 16
44236: ST_TO_ADDR
// uc_nation := nation ;
44237: LD_ADDR_OWVAR 21
44241: PUSH
44242: LD_VAR 0 17
44246: ST_TO_ADDR
// if buildings then
44247: LD_VAR 0 18
44251: IFFALSE 45573
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44253: LD_ADDR_VAR 0 19
44257: PUSH
44258: LD_VAR 0 18
44262: PPUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 30
44268: PUSH
44269: LD_INT 29
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 30
44278: PUSH
44279: LD_INT 30
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: PPUSH
44291: CALL_OW 72
44295: ST_TO_ADDR
// if tmp then
44296: LD_VAR 0 19
44300: IFFALSE 44348
// for i in tmp do
44302: LD_ADDR_VAR 0 8
44306: PUSH
44307: LD_VAR 0 19
44311: PUSH
44312: FOR_IN
44313: IFFALSE 44346
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44315: LD_VAR 0 8
44319: PPUSH
44320: CALL_OW 250
44324: PPUSH
44325: LD_VAR 0 8
44329: PPUSH
44330: CALL_OW 251
44334: PPUSH
44335: LD_VAR 0 16
44339: PPUSH
44340: CALL_OW 441
44344: GO 44312
44346: POP
44347: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44348: LD_VAR 0 18
44352: PPUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 30
44358: PUSH
44359: LD_INT 32
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 30
44368: PUSH
44369: LD_INT 33
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: PPUSH
44381: CALL_OW 72
44385: IFFALSE 44473
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44387: LD_ADDR_VAR 0 8
44391: PUSH
44392: LD_VAR 0 18
44396: PPUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 30
44402: PUSH
44403: LD_INT 32
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 30
44412: PUSH
44413: LD_INT 33
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: PPUSH
44425: CALL_OW 72
44429: PUSH
44430: FOR_IN
44431: IFFALSE 44471
// begin if not GetBWeapon ( i ) then
44433: LD_VAR 0 8
44437: PPUSH
44438: CALL_OW 269
44442: NOT
44443: IFFALSE 44469
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44445: LD_VAR 0 8
44449: PPUSH
44450: LD_VAR 0 8
44454: PPUSH
44455: LD_VAR 0 2
44459: PPUSH
44460: CALL 45719 0 2
44464: PPUSH
44465: CALL_OW 431
// end ;
44469: GO 44430
44471: POP
44472: POP
// end ; for i = 1 to personel do
44473: LD_ADDR_VAR 0 8
44477: PUSH
44478: DOUBLE
44479: LD_INT 1
44481: DEC
44482: ST_TO_ADDR
44483: LD_VAR 0 6
44487: PUSH
44488: FOR_TO
44489: IFFALSE 45553
// begin if i > 4 then
44491: LD_VAR 0 8
44495: PUSH
44496: LD_INT 4
44498: GREATER
44499: IFFALSE 44503
// break ;
44501: GO 45553
// case i of 1 :
44503: LD_VAR 0 8
44507: PUSH
44508: LD_INT 1
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44596
44516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44517: LD_ADDR_VAR 0 12
44521: PUSH
44522: LD_VAR 0 18
44526: PPUSH
44527: LD_INT 22
44529: PUSH
44530: LD_VAR 0 16
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 58
44541: PUSH
44542: EMPTY
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: LD_INT 30
44550: PUSH
44551: LD_INT 32
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 30
44560: PUSH
44561: LD_INT 4
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 30
44570: PUSH
44571: LD_INT 5
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: PPUSH
44589: CALL_OW 72
44593: ST_TO_ADDR
44594: GO 44818
44596: LD_INT 2
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44604
44602: GO 44666
44604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44605: LD_ADDR_VAR 0 12
44609: PUSH
44610: LD_VAR 0 18
44614: PPUSH
44615: LD_INT 22
44617: PUSH
44618: LD_VAR 0 16
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 30
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 30
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PPUSH
44659: CALL_OW 72
44663: ST_TO_ADDR
44664: GO 44818
44666: LD_INT 3
44668: DOUBLE
44669: EQUAL
44670: IFTRUE 44674
44672: GO 44736
44674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44675: LD_ADDR_VAR 0 12
44679: PUSH
44680: LD_VAR 0 18
44684: PPUSH
44685: LD_INT 22
44687: PUSH
44688: LD_VAR 0 16
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 30
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 30
44712: PUSH
44713: LD_INT 3
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PPUSH
44729: CALL_OW 72
44733: ST_TO_ADDR
44734: GO 44818
44736: LD_INT 4
44738: DOUBLE
44739: EQUAL
44740: IFTRUE 44744
44742: GO 44817
44744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44745: LD_ADDR_VAR 0 12
44749: PUSH
44750: LD_VAR 0 18
44754: PPUSH
44755: LD_INT 22
44757: PUSH
44758: LD_VAR 0 16
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: LD_INT 30
44772: PUSH
44773: LD_INT 6
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 30
44782: PUSH
44783: LD_INT 7
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 30
44792: PUSH
44793: LD_INT 8
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PPUSH
44810: CALL_OW 72
44814: ST_TO_ADDR
44815: GO 44818
44817: POP
// if i = 1 then
44818: LD_VAR 0 8
44822: PUSH
44823: LD_INT 1
44825: EQUAL
44826: IFFALSE 44937
// begin tmp := [ ] ;
44828: LD_ADDR_VAR 0 19
44832: PUSH
44833: EMPTY
44834: ST_TO_ADDR
// for j in f do
44835: LD_ADDR_VAR 0 9
44839: PUSH
44840: LD_VAR 0 12
44844: PUSH
44845: FOR_IN
44846: IFFALSE 44919
// if GetBType ( j ) = b_bunker then
44848: LD_VAR 0 9
44852: PPUSH
44853: CALL_OW 266
44857: PUSH
44858: LD_INT 32
44860: EQUAL
44861: IFFALSE 44888
// tmp := Insert ( tmp , 1 , j ) else
44863: LD_ADDR_VAR 0 19
44867: PUSH
44868: LD_VAR 0 19
44872: PPUSH
44873: LD_INT 1
44875: PPUSH
44876: LD_VAR 0 9
44880: PPUSH
44881: CALL_OW 2
44885: ST_TO_ADDR
44886: GO 44917
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44888: LD_ADDR_VAR 0 19
44892: PUSH
44893: LD_VAR 0 19
44897: PPUSH
44898: LD_VAR 0 19
44902: PUSH
44903: LD_INT 1
44905: PLUS
44906: PPUSH
44907: LD_VAR 0 9
44911: PPUSH
44912: CALL_OW 2
44916: ST_TO_ADDR
44917: GO 44845
44919: POP
44920: POP
// if tmp then
44921: LD_VAR 0 19
44925: IFFALSE 44937
// f := tmp ;
44927: LD_ADDR_VAR 0 12
44931: PUSH
44932: LD_VAR 0 19
44936: ST_TO_ADDR
// end ; x := personel [ i ] ;
44937: LD_ADDR_VAR 0 13
44941: PUSH
44942: LD_VAR 0 6
44946: PUSH
44947: LD_VAR 0 8
44951: ARRAY
44952: ST_TO_ADDR
// if x = - 1 then
44953: LD_VAR 0 13
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: EQUAL
44962: IFFALSE 45171
// begin for j in f do
44964: LD_ADDR_VAR 0 9
44968: PUSH
44969: LD_VAR 0 12
44973: PUSH
44974: FOR_IN
44975: IFFALSE 45167
// repeat InitHc ;
44977: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44981: LD_VAR 0 9
44985: PPUSH
44986: CALL_OW 266
44990: PUSH
44991: LD_INT 5
44993: EQUAL
44994: IFFALSE 45064
// begin if UnitsInside ( j ) < 3 then
44996: LD_VAR 0 9
45000: PPUSH
45001: CALL_OW 313
45005: PUSH
45006: LD_INT 3
45008: LESS
45009: IFFALSE 45045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45011: LD_INT 0
45013: PPUSH
45014: LD_INT 5
45016: PUSH
45017: LD_INT 8
45019: PUSH
45020: LD_INT 9
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: PUSH
45028: LD_VAR 0 17
45032: ARRAY
45033: PPUSH
45034: LD_VAR 0 4
45038: PPUSH
45039: CALL_OW 380
45043: GO 45062
// PrepareHuman ( false , i , skill ) ;
45045: LD_INT 0
45047: PPUSH
45048: LD_VAR 0 8
45052: PPUSH
45053: LD_VAR 0 4
45057: PPUSH
45058: CALL_OW 380
// end else
45062: GO 45081
// PrepareHuman ( false , i , skill ) ;
45064: LD_INT 0
45066: PPUSH
45067: LD_VAR 0 8
45071: PPUSH
45072: LD_VAR 0 4
45076: PPUSH
45077: CALL_OW 380
// un := CreateHuman ;
45081: LD_ADDR_VAR 0 14
45085: PUSH
45086: CALL_OW 44
45090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45091: LD_ADDR_VAR 0 7
45095: PUSH
45096: LD_VAR 0 7
45100: PPUSH
45101: LD_INT 1
45103: PPUSH
45104: LD_VAR 0 14
45108: PPUSH
45109: CALL_OW 2
45113: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45114: LD_VAR 0 14
45118: PPUSH
45119: LD_VAR 0 9
45123: PPUSH
45124: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45128: LD_VAR 0 9
45132: PPUSH
45133: CALL_OW 313
45137: PUSH
45138: LD_INT 6
45140: EQUAL
45141: PUSH
45142: LD_VAR 0 9
45146: PPUSH
45147: CALL_OW 266
45151: PUSH
45152: LD_INT 32
45154: PUSH
45155: LD_INT 31
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: IN
45162: OR
45163: IFFALSE 44977
45165: GO 44974
45167: POP
45168: POP
// end else
45169: GO 45551
// for j = 1 to x do
45171: LD_ADDR_VAR 0 9
45175: PUSH
45176: DOUBLE
45177: LD_INT 1
45179: DEC
45180: ST_TO_ADDR
45181: LD_VAR 0 13
45185: PUSH
45186: FOR_TO
45187: IFFALSE 45549
// begin InitHc ;
45189: CALL_OW 19
// if not f then
45193: LD_VAR 0 12
45197: NOT
45198: IFFALSE 45287
// begin PrepareHuman ( false , i , skill ) ;
45200: LD_INT 0
45202: PPUSH
45203: LD_VAR 0 8
45207: PPUSH
45208: LD_VAR 0 4
45212: PPUSH
45213: CALL_OW 380
// un := CreateHuman ;
45217: LD_ADDR_VAR 0 14
45221: PUSH
45222: CALL_OW 44
45226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45227: LD_ADDR_VAR 0 7
45231: PUSH
45232: LD_VAR 0 7
45236: PPUSH
45237: LD_INT 1
45239: PPUSH
45240: LD_VAR 0 14
45244: PPUSH
45245: CALL_OW 2
45249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45250: LD_VAR 0 14
45254: PPUSH
45255: LD_VAR 0 1
45259: PPUSH
45260: CALL_OW 250
45264: PPUSH
45265: LD_VAR 0 1
45269: PPUSH
45270: CALL_OW 251
45274: PPUSH
45275: LD_INT 10
45277: PPUSH
45278: LD_INT 0
45280: PPUSH
45281: CALL_OW 50
// continue ;
45285: GO 45186
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45287: LD_VAR 0 12
45291: PUSH
45292: LD_INT 1
45294: ARRAY
45295: PPUSH
45296: CALL_OW 313
45300: PUSH
45301: LD_VAR 0 12
45305: PUSH
45306: LD_INT 1
45308: ARRAY
45309: PPUSH
45310: CALL_OW 266
45314: PUSH
45315: LD_INT 32
45317: PUSH
45318: LD_INT 31
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: IN
45325: AND
45326: PUSH
45327: LD_VAR 0 12
45331: PUSH
45332: LD_INT 1
45334: ARRAY
45335: PPUSH
45336: CALL_OW 313
45340: PUSH
45341: LD_INT 6
45343: EQUAL
45344: OR
45345: IFFALSE 45365
// f := Delete ( f , 1 ) ;
45347: LD_ADDR_VAR 0 12
45351: PUSH
45352: LD_VAR 0 12
45356: PPUSH
45357: LD_INT 1
45359: PPUSH
45360: CALL_OW 3
45364: ST_TO_ADDR
// if not f then
45365: LD_VAR 0 12
45369: NOT
45370: IFFALSE 45388
// begin x := x + 2 ;
45372: LD_ADDR_VAR 0 13
45376: PUSH
45377: LD_VAR 0 13
45381: PUSH
45382: LD_INT 2
45384: PLUS
45385: ST_TO_ADDR
// continue ;
45386: GO 45186
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45388: LD_VAR 0 12
45392: PUSH
45393: LD_INT 1
45395: ARRAY
45396: PPUSH
45397: CALL_OW 266
45401: PUSH
45402: LD_INT 5
45404: EQUAL
45405: IFFALSE 45479
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45407: LD_VAR 0 12
45411: PUSH
45412: LD_INT 1
45414: ARRAY
45415: PPUSH
45416: CALL_OW 313
45420: PUSH
45421: LD_INT 3
45423: LESS
45424: IFFALSE 45460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45426: LD_INT 0
45428: PPUSH
45429: LD_INT 5
45431: PUSH
45432: LD_INT 8
45434: PUSH
45435: LD_INT 9
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: PUSH
45443: LD_VAR 0 17
45447: ARRAY
45448: PPUSH
45449: LD_VAR 0 4
45453: PPUSH
45454: CALL_OW 380
45458: GO 45477
// PrepareHuman ( false , i , skill ) ;
45460: LD_INT 0
45462: PPUSH
45463: LD_VAR 0 8
45467: PPUSH
45468: LD_VAR 0 4
45472: PPUSH
45473: CALL_OW 380
// end else
45477: GO 45496
// PrepareHuman ( false , i , skill ) ;
45479: LD_INT 0
45481: PPUSH
45482: LD_VAR 0 8
45486: PPUSH
45487: LD_VAR 0 4
45491: PPUSH
45492: CALL_OW 380
// un := CreateHuman ;
45496: LD_ADDR_VAR 0 14
45500: PUSH
45501: CALL_OW 44
45505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45506: LD_ADDR_VAR 0 7
45510: PUSH
45511: LD_VAR 0 7
45515: PPUSH
45516: LD_INT 1
45518: PPUSH
45519: LD_VAR 0 14
45523: PPUSH
45524: CALL_OW 2
45528: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45529: LD_VAR 0 14
45533: PPUSH
45534: LD_VAR 0 12
45538: PUSH
45539: LD_INT 1
45541: ARRAY
45542: PPUSH
45543: CALL_OW 52
// end ;
45547: GO 45186
45549: POP
45550: POP
// end ;
45551: GO 44488
45553: POP
45554: POP
// result := result ^ buildings ;
45555: LD_ADDR_VAR 0 7
45559: PUSH
45560: LD_VAR 0 7
45564: PUSH
45565: LD_VAR 0 18
45569: ADD
45570: ST_TO_ADDR
// end else
45571: GO 45714
// begin for i = 1 to personel do
45573: LD_ADDR_VAR 0 8
45577: PUSH
45578: DOUBLE
45579: LD_INT 1
45581: DEC
45582: ST_TO_ADDR
45583: LD_VAR 0 6
45587: PUSH
45588: FOR_TO
45589: IFFALSE 45712
// begin if i > 4 then
45591: LD_VAR 0 8
45595: PUSH
45596: LD_INT 4
45598: GREATER
45599: IFFALSE 45603
// break ;
45601: GO 45712
// x := personel [ i ] ;
45603: LD_ADDR_VAR 0 13
45607: PUSH
45608: LD_VAR 0 6
45612: PUSH
45613: LD_VAR 0 8
45617: ARRAY
45618: ST_TO_ADDR
// if x = - 1 then
45619: LD_VAR 0 13
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: EQUAL
45628: IFFALSE 45632
// continue ;
45630: GO 45588
// PrepareHuman ( false , i , skill ) ;
45632: LD_INT 0
45634: PPUSH
45635: LD_VAR 0 8
45639: PPUSH
45640: LD_VAR 0 4
45644: PPUSH
45645: CALL_OW 380
// un := CreateHuman ;
45649: LD_ADDR_VAR 0 14
45653: PUSH
45654: CALL_OW 44
45658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45659: LD_VAR 0 14
45663: PPUSH
45664: LD_VAR 0 1
45668: PPUSH
45669: CALL_OW 250
45673: PPUSH
45674: LD_VAR 0 1
45678: PPUSH
45679: CALL_OW 251
45683: PPUSH
45684: LD_INT 10
45686: PPUSH
45687: LD_INT 0
45689: PPUSH
45690: CALL_OW 50
// result := result ^ un ;
45694: LD_ADDR_VAR 0 7
45698: PUSH
45699: LD_VAR 0 7
45703: PUSH
45704: LD_VAR 0 14
45708: ADD
45709: ST_TO_ADDR
// end ;
45710: GO 45588
45712: POP
45713: POP
// end ; end ;
45714: LD_VAR 0 7
45718: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45719: LD_INT 0
45721: PPUSH
45722: PPUSH
45723: PPUSH
45724: PPUSH
45725: PPUSH
45726: PPUSH
45727: PPUSH
45728: PPUSH
45729: PPUSH
45730: PPUSH
45731: PPUSH
45732: PPUSH
45733: PPUSH
45734: PPUSH
45735: PPUSH
45736: PPUSH
// result := false ;
45737: LD_ADDR_VAR 0 3
45741: PUSH
45742: LD_INT 0
45744: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45745: LD_VAR 0 1
45749: NOT
45750: PUSH
45751: LD_VAR 0 1
45755: PPUSH
45756: CALL_OW 266
45760: PUSH
45761: LD_INT 32
45763: PUSH
45764: LD_INT 33
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: IN
45771: NOT
45772: OR
45773: IFFALSE 45777
// exit ;
45775: GO 46886
// nat := GetNation ( tower ) ;
45777: LD_ADDR_VAR 0 12
45781: PUSH
45782: LD_VAR 0 1
45786: PPUSH
45787: CALL_OW 248
45791: ST_TO_ADDR
// side := GetSide ( tower ) ;
45792: LD_ADDR_VAR 0 16
45796: PUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: CALL_OW 255
45806: ST_TO_ADDR
// x := GetX ( tower ) ;
45807: LD_ADDR_VAR 0 10
45811: PUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 250
45821: ST_TO_ADDR
// y := GetY ( tower ) ;
45822: LD_ADDR_VAR 0 11
45826: PUSH
45827: LD_VAR 0 1
45831: PPUSH
45832: CALL_OW 251
45836: ST_TO_ADDR
// if not x or not y then
45837: LD_VAR 0 10
45841: NOT
45842: PUSH
45843: LD_VAR 0 11
45847: NOT
45848: OR
45849: IFFALSE 45853
// exit ;
45851: GO 46886
// weapon := 0 ;
45853: LD_ADDR_VAR 0 18
45857: PUSH
45858: LD_INT 0
45860: ST_TO_ADDR
// fac_list := [ ] ;
45861: LD_ADDR_VAR 0 17
45865: PUSH
45866: EMPTY
45867: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45868: LD_ADDR_VAR 0 6
45872: PUSH
45873: LD_VAR 0 1
45877: PPUSH
45878: CALL_OW 274
45882: PPUSH
45883: LD_VAR 0 2
45887: PPUSH
45888: LD_INT 0
45890: PPUSH
45891: CALL 43457 0 3
45895: PPUSH
45896: LD_INT 30
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PPUSH
45906: CALL_OW 72
45910: ST_TO_ADDR
// if not factories then
45911: LD_VAR 0 6
45915: NOT
45916: IFFALSE 45920
// exit ;
45918: GO 46886
// for i in factories do
45920: LD_ADDR_VAR 0 8
45924: PUSH
45925: LD_VAR 0 6
45929: PUSH
45930: FOR_IN
45931: IFFALSE 45956
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45933: LD_ADDR_VAR 0 17
45937: PUSH
45938: LD_VAR 0 17
45942: PUSH
45943: LD_VAR 0 8
45947: PPUSH
45948: CALL_OW 478
45952: UNION
45953: ST_TO_ADDR
45954: GO 45930
45956: POP
45957: POP
// if not fac_list then
45958: LD_VAR 0 17
45962: NOT
45963: IFFALSE 45967
// exit ;
45965: GO 46886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45967: LD_ADDR_VAR 0 5
45971: PUSH
45972: LD_INT 4
45974: PUSH
45975: LD_INT 5
45977: PUSH
45978: LD_INT 9
45980: PUSH
45981: LD_INT 10
45983: PUSH
45984: LD_INT 6
45986: PUSH
45987: LD_INT 7
45989: PUSH
45990: LD_INT 11
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 27
46004: PUSH
46005: LD_INT 28
46007: PUSH
46008: LD_INT 26
46010: PUSH
46011: LD_INT 30
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 43
46022: PUSH
46023: LD_INT 44
46025: PUSH
46026: LD_INT 46
46028: PUSH
46029: LD_INT 45
46031: PUSH
46032: LD_INT 47
46034: PUSH
46035: LD_INT 49
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: PUSH
46051: LD_VAR 0 12
46055: ARRAY
46056: ST_TO_ADDR
// list := list isect fac_list ;
46057: LD_ADDR_VAR 0 5
46061: PUSH
46062: LD_VAR 0 5
46066: PUSH
46067: LD_VAR 0 17
46071: ISECT
46072: ST_TO_ADDR
// if not list then
46073: LD_VAR 0 5
46077: NOT
46078: IFFALSE 46082
// exit ;
46080: GO 46886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46082: LD_VAR 0 12
46086: PUSH
46087: LD_INT 3
46089: EQUAL
46090: PUSH
46091: LD_INT 49
46093: PUSH
46094: LD_VAR 0 5
46098: IN
46099: AND
46100: PUSH
46101: LD_INT 31
46103: PPUSH
46104: LD_VAR 0 16
46108: PPUSH
46109: CALL_OW 321
46113: PUSH
46114: LD_INT 2
46116: EQUAL
46117: AND
46118: IFFALSE 46178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46120: LD_INT 22
46122: PUSH
46123: LD_VAR 0 16
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 35
46134: PUSH
46135: LD_INT 49
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 91
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_INT 10
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: PPUSH
46163: CALL_OW 69
46167: NOT
46168: IFFALSE 46178
// weapon := ru_time_lapser ;
46170: LD_ADDR_VAR 0 18
46174: PUSH
46175: LD_INT 49
46177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46178: LD_VAR 0 12
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: IN
46193: PUSH
46194: LD_INT 11
46196: PUSH
46197: LD_VAR 0 5
46201: IN
46202: PUSH
46203: LD_INT 30
46205: PUSH
46206: LD_VAR 0 5
46210: IN
46211: OR
46212: AND
46213: PUSH
46214: LD_INT 6
46216: PPUSH
46217: LD_VAR 0 16
46221: PPUSH
46222: CALL_OW 321
46226: PUSH
46227: LD_INT 2
46229: EQUAL
46230: AND
46231: IFFALSE 46396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46233: LD_INT 22
46235: PUSH
46236: LD_VAR 0 16
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 35
46250: PUSH
46251: LD_INT 11
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 35
46260: PUSH
46261: LD_INT 30
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 91
46275: PUSH
46276: LD_VAR 0 1
46280: PUSH
46281: LD_INT 18
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: PPUSH
46294: CALL_OW 69
46298: NOT
46299: PUSH
46300: LD_INT 22
46302: PUSH
46303: LD_VAR 0 16
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 30
46317: PUSH
46318: LD_INT 32
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 30
46327: PUSH
46328: LD_INT 33
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 91
46342: PUSH
46343: LD_VAR 0 1
46347: PUSH
46348: LD_INT 12
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: PPUSH
46364: CALL_OW 69
46368: PUSH
46369: LD_INT 2
46371: GREATER
46372: AND
46373: IFFALSE 46396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46375: LD_ADDR_VAR 0 18
46379: PUSH
46380: LD_INT 11
46382: PUSH
46383: LD_INT 30
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_VAR 0 12
46394: ARRAY
46395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46396: LD_VAR 0 18
46400: NOT
46401: PUSH
46402: LD_INT 40
46404: PPUSH
46405: LD_VAR 0 16
46409: PPUSH
46410: CALL_OW 321
46414: PUSH
46415: LD_INT 2
46417: EQUAL
46418: AND
46419: PUSH
46420: LD_INT 7
46422: PUSH
46423: LD_VAR 0 5
46427: IN
46428: PUSH
46429: LD_INT 28
46431: PUSH
46432: LD_VAR 0 5
46436: IN
46437: OR
46438: PUSH
46439: LD_INT 45
46441: PUSH
46442: LD_VAR 0 5
46446: IN
46447: OR
46448: AND
46449: IFFALSE 46703
// begin hex := GetHexInfo ( x , y ) ;
46451: LD_ADDR_VAR 0 4
46455: PUSH
46456: LD_VAR 0 10
46460: PPUSH
46461: LD_VAR 0 11
46465: PPUSH
46466: CALL_OW 546
46470: ST_TO_ADDR
// if hex [ 1 ] then
46471: LD_VAR 0 4
46475: PUSH
46476: LD_INT 1
46478: ARRAY
46479: IFFALSE 46483
// exit ;
46481: GO 46886
// height := hex [ 2 ] ;
46483: LD_ADDR_VAR 0 15
46487: PUSH
46488: LD_VAR 0 4
46492: PUSH
46493: LD_INT 2
46495: ARRAY
46496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46497: LD_ADDR_VAR 0 14
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 5
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: ST_TO_ADDR
// for i in tmp do
46520: LD_ADDR_VAR 0 8
46524: PUSH
46525: LD_VAR 0 14
46529: PUSH
46530: FOR_IN
46531: IFFALSE 46701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46533: LD_ADDR_VAR 0 9
46537: PUSH
46538: LD_VAR 0 10
46542: PPUSH
46543: LD_VAR 0 8
46547: PPUSH
46548: LD_INT 5
46550: PPUSH
46551: CALL_OW 272
46555: PUSH
46556: LD_VAR 0 11
46560: PPUSH
46561: LD_VAR 0 8
46565: PPUSH
46566: LD_INT 5
46568: PPUSH
46569: CALL_OW 273
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46578: LD_VAR 0 9
46582: PUSH
46583: LD_INT 1
46585: ARRAY
46586: PPUSH
46587: LD_VAR 0 9
46591: PUSH
46592: LD_INT 2
46594: ARRAY
46595: PPUSH
46596: CALL_OW 488
46600: IFFALSE 46699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46602: LD_ADDR_VAR 0 4
46606: PUSH
46607: LD_VAR 0 9
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: PPUSH
46616: LD_VAR 0 9
46620: PUSH
46621: LD_INT 2
46623: ARRAY
46624: PPUSH
46625: CALL_OW 546
46629: ST_TO_ADDR
// if hex [ 1 ] then
46630: LD_VAR 0 4
46634: PUSH
46635: LD_INT 1
46637: ARRAY
46638: IFFALSE 46642
// continue ;
46640: GO 46530
// h := hex [ 2 ] ;
46642: LD_ADDR_VAR 0 13
46646: PUSH
46647: LD_VAR 0 4
46651: PUSH
46652: LD_INT 2
46654: ARRAY
46655: ST_TO_ADDR
// if h + 7 < height then
46656: LD_VAR 0 13
46660: PUSH
46661: LD_INT 7
46663: PLUS
46664: PUSH
46665: LD_VAR 0 15
46669: LESS
46670: IFFALSE 46699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46672: LD_ADDR_VAR 0 18
46676: PUSH
46677: LD_INT 7
46679: PUSH
46680: LD_INT 28
46682: PUSH
46683: LD_INT 45
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: PUSH
46691: LD_VAR 0 12
46695: ARRAY
46696: ST_TO_ADDR
// break ;
46697: GO 46701
// end ; end ; end ;
46699: GO 46530
46701: POP
46702: POP
// end ; if not weapon then
46703: LD_VAR 0 18
46707: NOT
46708: IFFALSE 46768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46710: LD_ADDR_VAR 0 5
46714: PUSH
46715: LD_VAR 0 5
46719: PUSH
46720: LD_INT 11
46722: PUSH
46723: LD_INT 30
46725: PUSH
46726: LD_INT 49
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: DIFF
46734: ST_TO_ADDR
// if not list then
46735: LD_VAR 0 5
46739: NOT
46740: IFFALSE 46744
// exit ;
46742: GO 46886
// weapon := list [ rand ( 1 , list ) ] ;
46744: LD_ADDR_VAR 0 18
46748: PUSH
46749: LD_VAR 0 5
46753: PUSH
46754: LD_INT 1
46756: PPUSH
46757: LD_VAR 0 5
46761: PPUSH
46762: CALL_OW 12
46766: ARRAY
46767: ST_TO_ADDR
// end ; if weapon then
46768: LD_VAR 0 18
46772: IFFALSE 46886
// begin tmp := CostOfWeapon ( weapon ) ;
46774: LD_ADDR_VAR 0 14
46778: PUSH
46779: LD_VAR 0 18
46783: PPUSH
46784: CALL_OW 451
46788: ST_TO_ADDR
// j := GetBase ( tower ) ;
46789: LD_ADDR_VAR 0 9
46793: PUSH
46794: LD_VAR 0 1
46798: PPUSH
46799: CALL_OW 274
46803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46804: LD_VAR 0 9
46808: PPUSH
46809: LD_INT 1
46811: PPUSH
46812: CALL_OW 275
46816: PUSH
46817: LD_VAR 0 14
46821: PUSH
46822: LD_INT 1
46824: ARRAY
46825: GREATEREQUAL
46826: PUSH
46827: LD_VAR 0 9
46831: PPUSH
46832: LD_INT 2
46834: PPUSH
46835: CALL_OW 275
46839: PUSH
46840: LD_VAR 0 14
46844: PUSH
46845: LD_INT 2
46847: ARRAY
46848: GREATEREQUAL
46849: AND
46850: PUSH
46851: LD_VAR 0 9
46855: PPUSH
46856: LD_INT 3
46858: PPUSH
46859: CALL_OW 275
46863: PUSH
46864: LD_VAR 0 14
46868: PUSH
46869: LD_INT 3
46871: ARRAY
46872: GREATEREQUAL
46873: AND
46874: IFFALSE 46886
// result := weapon ;
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_VAR 0 18
46885: ST_TO_ADDR
// end ; end ;
46886: LD_VAR 0 3
46890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46891: LD_INT 0
46893: PPUSH
46894: PPUSH
// result := true ;
46895: LD_ADDR_VAR 0 3
46899: PUSH
46900: LD_INT 1
46902: ST_TO_ADDR
// if array1 = array2 then
46903: LD_VAR 0 1
46907: PUSH
46908: LD_VAR 0 2
46912: EQUAL
46913: IFFALSE 46973
// begin for i = 1 to array1 do
46915: LD_ADDR_VAR 0 4
46919: PUSH
46920: DOUBLE
46921: LD_INT 1
46923: DEC
46924: ST_TO_ADDR
46925: LD_VAR 0 1
46929: PUSH
46930: FOR_TO
46931: IFFALSE 46969
// if array1 [ i ] <> array2 [ i ] then
46933: LD_VAR 0 1
46937: PUSH
46938: LD_VAR 0 4
46942: ARRAY
46943: PUSH
46944: LD_VAR 0 2
46948: PUSH
46949: LD_VAR 0 4
46953: ARRAY
46954: NONEQUAL
46955: IFFALSE 46967
// begin result := false ;
46957: LD_ADDR_VAR 0 3
46961: PUSH
46962: LD_INT 0
46964: ST_TO_ADDR
// break ;
46965: GO 46969
// end ;
46967: GO 46930
46969: POP
46970: POP
// end else
46971: GO 46981
// result := false ;
46973: LD_ADDR_VAR 0 3
46977: PUSH
46978: LD_INT 0
46980: ST_TO_ADDR
// end ;
46981: LD_VAR 0 3
46985: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46986: LD_INT 0
46988: PPUSH
46989: PPUSH
// if not array1 or not array2 then
46990: LD_VAR 0 1
46994: NOT
46995: PUSH
46996: LD_VAR 0 2
47000: NOT
47001: OR
47002: IFFALSE 47006
// exit ;
47004: GO 47070
// result := true ;
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_INT 1
47013: ST_TO_ADDR
// for i = 1 to array1 do
47014: LD_ADDR_VAR 0 4
47018: PUSH
47019: DOUBLE
47020: LD_INT 1
47022: DEC
47023: ST_TO_ADDR
47024: LD_VAR 0 1
47028: PUSH
47029: FOR_TO
47030: IFFALSE 47068
// if array1 [ i ] <> array2 [ i ] then
47032: LD_VAR 0 1
47036: PUSH
47037: LD_VAR 0 4
47041: ARRAY
47042: PUSH
47043: LD_VAR 0 2
47047: PUSH
47048: LD_VAR 0 4
47052: ARRAY
47053: NONEQUAL
47054: IFFALSE 47066
// begin result := false ;
47056: LD_ADDR_VAR 0 3
47060: PUSH
47061: LD_INT 0
47063: ST_TO_ADDR
// break ;
47064: GO 47068
// end ;
47066: GO 47029
47068: POP
47069: POP
// end ;
47070: LD_VAR 0 3
47074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47075: LD_INT 0
47077: PPUSH
47078: PPUSH
47079: PPUSH
// pom := GetBase ( fac ) ;
47080: LD_ADDR_VAR 0 5
47084: PUSH
47085: LD_VAR 0 1
47089: PPUSH
47090: CALL_OW 274
47094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47095: LD_ADDR_VAR 0 4
47099: PUSH
47100: LD_VAR 0 2
47104: PUSH
47105: LD_INT 1
47107: ARRAY
47108: PPUSH
47109: LD_VAR 0 2
47113: PUSH
47114: LD_INT 2
47116: ARRAY
47117: PPUSH
47118: LD_VAR 0 2
47122: PUSH
47123: LD_INT 3
47125: ARRAY
47126: PPUSH
47127: LD_VAR 0 2
47131: PUSH
47132: LD_INT 4
47134: ARRAY
47135: PPUSH
47136: CALL_OW 449
47140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47141: LD_ADDR_VAR 0 3
47145: PUSH
47146: LD_VAR 0 5
47150: PPUSH
47151: LD_INT 1
47153: PPUSH
47154: CALL_OW 275
47158: PUSH
47159: LD_VAR 0 4
47163: PUSH
47164: LD_INT 1
47166: ARRAY
47167: GREATEREQUAL
47168: PUSH
47169: LD_VAR 0 5
47173: PPUSH
47174: LD_INT 2
47176: PPUSH
47177: CALL_OW 275
47181: PUSH
47182: LD_VAR 0 4
47186: PUSH
47187: LD_INT 2
47189: ARRAY
47190: GREATEREQUAL
47191: AND
47192: PUSH
47193: LD_VAR 0 5
47197: PPUSH
47198: LD_INT 3
47200: PPUSH
47201: CALL_OW 275
47205: PUSH
47206: LD_VAR 0 4
47210: PUSH
47211: LD_INT 3
47213: ARRAY
47214: GREATEREQUAL
47215: AND
47216: ST_TO_ADDR
// end ;
47217: LD_VAR 0 3
47221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47222: LD_INT 0
47224: PPUSH
47225: PPUSH
47226: PPUSH
47227: PPUSH
// pom := GetBase ( building ) ;
47228: LD_ADDR_VAR 0 3
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 274
47242: ST_TO_ADDR
// if not pom then
47243: LD_VAR 0 3
47247: NOT
47248: IFFALSE 47252
// exit ;
47250: GO 47422
// btype := GetBType ( building ) ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: LD_VAR 0 1
47261: PPUSH
47262: CALL_OW 266
47266: ST_TO_ADDR
// if btype = b_armoury then
47267: LD_VAR 0 5
47271: PUSH
47272: LD_INT 4
47274: EQUAL
47275: IFFALSE 47285
// btype := b_barracks ;
47277: LD_ADDR_VAR 0 5
47281: PUSH
47282: LD_INT 5
47284: ST_TO_ADDR
// if btype = b_depot then
47285: LD_VAR 0 5
47289: PUSH
47290: LD_INT 0
47292: EQUAL
47293: IFFALSE 47303
// btype := b_warehouse ;
47295: LD_ADDR_VAR 0 5
47299: PUSH
47300: LD_INT 1
47302: ST_TO_ADDR
// if btype = b_workshop then
47303: LD_VAR 0 5
47307: PUSH
47308: LD_INT 2
47310: EQUAL
47311: IFFALSE 47321
// btype := b_factory ;
47313: LD_ADDR_VAR 0 5
47317: PUSH
47318: LD_INT 3
47320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47321: LD_ADDR_VAR 0 4
47325: PUSH
47326: LD_VAR 0 5
47330: PPUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 248
47340: PPUSH
47341: CALL_OW 450
47345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47346: LD_ADDR_VAR 0 2
47350: PUSH
47351: LD_VAR 0 3
47355: PPUSH
47356: LD_INT 1
47358: PPUSH
47359: CALL_OW 275
47363: PUSH
47364: LD_VAR 0 4
47368: PUSH
47369: LD_INT 1
47371: ARRAY
47372: GREATEREQUAL
47373: PUSH
47374: LD_VAR 0 3
47378: PPUSH
47379: LD_INT 2
47381: PPUSH
47382: CALL_OW 275
47386: PUSH
47387: LD_VAR 0 4
47391: PUSH
47392: LD_INT 2
47394: ARRAY
47395: GREATEREQUAL
47396: AND
47397: PUSH
47398: LD_VAR 0 3
47402: PPUSH
47403: LD_INT 3
47405: PPUSH
47406: CALL_OW 275
47410: PUSH
47411: LD_VAR 0 4
47415: PUSH
47416: LD_INT 3
47418: ARRAY
47419: GREATEREQUAL
47420: AND
47421: ST_TO_ADDR
// end ;
47422: LD_VAR 0 2
47426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47427: LD_INT 0
47429: PPUSH
47430: PPUSH
47431: PPUSH
// pom := GetBase ( building ) ;
47432: LD_ADDR_VAR 0 4
47436: PUSH
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 274
47446: ST_TO_ADDR
// if not pom then
47447: LD_VAR 0 4
47451: NOT
47452: IFFALSE 47456
// exit ;
47454: GO 47557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47456: LD_ADDR_VAR 0 5
47460: PUSH
47461: LD_VAR 0 2
47465: PPUSH
47466: LD_VAR 0 1
47470: PPUSH
47471: CALL_OW 248
47475: PPUSH
47476: CALL_OW 450
47480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_VAR 0 4
47490: PPUSH
47491: LD_INT 1
47493: PPUSH
47494: CALL_OW 275
47498: PUSH
47499: LD_VAR 0 5
47503: PUSH
47504: LD_INT 1
47506: ARRAY
47507: GREATEREQUAL
47508: PUSH
47509: LD_VAR 0 4
47513: PPUSH
47514: LD_INT 2
47516: PPUSH
47517: CALL_OW 275
47521: PUSH
47522: LD_VAR 0 5
47526: PUSH
47527: LD_INT 2
47529: ARRAY
47530: GREATEREQUAL
47531: AND
47532: PUSH
47533: LD_VAR 0 4
47537: PPUSH
47538: LD_INT 3
47540: PPUSH
47541: CALL_OW 275
47545: PUSH
47546: LD_VAR 0 5
47550: PUSH
47551: LD_INT 3
47553: ARRAY
47554: GREATEREQUAL
47555: AND
47556: ST_TO_ADDR
// end ;
47557: LD_VAR 0 3
47561: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47562: LD_INT 0
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
// result := false ;
47575: LD_ADDR_VAR 0 8
47579: PUSH
47580: LD_INT 0
47582: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47583: LD_VAR 0 5
47587: NOT
47588: PUSH
47589: LD_VAR 0 1
47593: NOT
47594: OR
47595: PUSH
47596: LD_VAR 0 2
47600: NOT
47601: OR
47602: PUSH
47603: LD_VAR 0 3
47607: NOT
47608: OR
47609: IFFALSE 47613
// exit ;
47611: GO 48427
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47613: LD_ADDR_VAR 0 14
47617: PUSH
47618: LD_VAR 0 1
47622: PPUSH
47623: LD_VAR 0 2
47627: PPUSH
47628: LD_VAR 0 3
47632: PPUSH
47633: LD_VAR 0 4
47637: PPUSH
47638: LD_VAR 0 5
47642: PUSH
47643: LD_INT 1
47645: ARRAY
47646: PPUSH
47647: CALL_OW 248
47651: PPUSH
47652: LD_INT 0
47654: PPUSH
47655: CALL 49664 0 6
47659: ST_TO_ADDR
// if not hexes then
47660: LD_VAR 0 14
47664: NOT
47665: IFFALSE 47669
// exit ;
47667: GO 48427
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47669: LD_ADDR_VAR 0 17
47673: PUSH
47674: LD_VAR 0 5
47678: PPUSH
47679: LD_INT 22
47681: PUSH
47682: LD_VAR 0 13
47686: PPUSH
47687: CALL_OW 255
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 30
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 30
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PPUSH
47728: CALL_OW 72
47732: ST_TO_ADDR
// for i = 1 to hexes do
47733: LD_ADDR_VAR 0 9
47737: PUSH
47738: DOUBLE
47739: LD_INT 1
47741: DEC
47742: ST_TO_ADDR
47743: LD_VAR 0 14
47747: PUSH
47748: FOR_TO
47749: IFFALSE 48425
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47751: LD_ADDR_VAR 0 13
47755: PUSH
47756: LD_VAR 0 14
47760: PUSH
47761: LD_VAR 0 9
47765: ARRAY
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: PPUSH
47771: LD_VAR 0 14
47775: PUSH
47776: LD_VAR 0 9
47780: ARRAY
47781: PUSH
47782: LD_INT 2
47784: ARRAY
47785: PPUSH
47786: CALL_OW 428
47790: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47791: LD_VAR 0 14
47795: PUSH
47796: LD_VAR 0 9
47800: ARRAY
47801: PUSH
47802: LD_INT 1
47804: ARRAY
47805: PPUSH
47806: LD_VAR 0 14
47810: PUSH
47811: LD_VAR 0 9
47815: ARRAY
47816: PUSH
47817: LD_INT 2
47819: ARRAY
47820: PPUSH
47821: CALL_OW 351
47825: PUSH
47826: LD_VAR 0 14
47830: PUSH
47831: LD_VAR 0 9
47835: ARRAY
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PPUSH
47841: LD_VAR 0 14
47845: PUSH
47846: LD_VAR 0 9
47850: ARRAY
47851: PUSH
47852: LD_INT 2
47854: ARRAY
47855: PPUSH
47856: CALL_OW 488
47860: NOT
47861: OR
47862: PUSH
47863: LD_VAR 0 13
47867: PPUSH
47868: CALL_OW 247
47872: PUSH
47873: LD_INT 3
47875: EQUAL
47876: OR
47877: IFFALSE 47883
// exit ;
47879: POP
47880: POP
47881: GO 48427
// if not tmp then
47883: LD_VAR 0 13
47887: NOT
47888: IFFALSE 47892
// continue ;
47890: GO 47748
// result := true ;
47892: LD_ADDR_VAR 0 8
47896: PUSH
47897: LD_INT 1
47899: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47900: LD_VAR 0 6
47904: PUSH
47905: LD_VAR 0 13
47909: PPUSH
47910: CALL_OW 247
47914: PUSH
47915: LD_INT 2
47917: EQUAL
47918: AND
47919: PUSH
47920: LD_VAR 0 13
47924: PPUSH
47925: CALL_OW 263
47929: PUSH
47930: LD_INT 1
47932: EQUAL
47933: AND
47934: IFFALSE 48098
// begin if IsDrivenBy ( tmp ) then
47936: LD_VAR 0 13
47940: PPUSH
47941: CALL_OW 311
47945: IFFALSE 47949
// continue ;
47947: GO 47748
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47949: LD_VAR 0 6
47953: PPUSH
47954: LD_INT 3
47956: PUSH
47957: LD_INT 60
47959: PUSH
47960: EMPTY
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: LD_INT 55
47972: PUSH
47973: EMPTY
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PPUSH
47984: CALL_OW 72
47988: IFFALSE 48096
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47990: LD_ADDR_VAR 0 18
47994: PUSH
47995: LD_VAR 0 6
47999: PPUSH
48000: LD_INT 3
48002: PUSH
48003: LD_INT 60
48005: PUSH
48006: EMPTY
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: PUSH
48016: LD_INT 55
48018: PUSH
48019: EMPTY
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PPUSH
48030: CALL_OW 72
48034: PUSH
48035: LD_INT 1
48037: ARRAY
48038: ST_TO_ADDR
// if IsInUnit ( driver ) then
48039: LD_VAR 0 18
48043: PPUSH
48044: CALL_OW 310
48048: IFFALSE 48059
// ComExit ( driver ) ;
48050: LD_VAR 0 18
48054: PPUSH
48055: CALL 72792 0 1
// AddComEnterUnit ( driver , tmp ) ;
48059: LD_VAR 0 18
48063: PPUSH
48064: LD_VAR 0 13
48068: PPUSH
48069: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48073: LD_VAR 0 18
48077: PPUSH
48078: LD_VAR 0 7
48082: PPUSH
48083: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48087: LD_VAR 0 18
48091: PPUSH
48092: CALL_OW 181
// end ; continue ;
48096: GO 47748
// end ; if not cleaners or not tmp in cleaners then
48098: LD_VAR 0 6
48102: NOT
48103: PUSH
48104: LD_VAR 0 13
48108: PUSH
48109: LD_VAR 0 6
48113: IN
48114: NOT
48115: OR
48116: IFFALSE 48423
// begin if dep then
48118: LD_VAR 0 17
48122: IFFALSE 48258
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48124: LD_ADDR_VAR 0 16
48128: PUSH
48129: LD_VAR 0 17
48133: PUSH
48134: LD_INT 1
48136: ARRAY
48137: PPUSH
48138: CALL_OW 250
48142: PPUSH
48143: LD_VAR 0 17
48147: PUSH
48148: LD_INT 1
48150: ARRAY
48151: PPUSH
48152: CALL_OW 254
48156: PPUSH
48157: LD_INT 5
48159: PPUSH
48160: CALL_OW 272
48164: PUSH
48165: LD_VAR 0 17
48169: PUSH
48170: LD_INT 1
48172: ARRAY
48173: PPUSH
48174: CALL_OW 251
48178: PPUSH
48179: LD_VAR 0 17
48183: PUSH
48184: LD_INT 1
48186: ARRAY
48187: PPUSH
48188: CALL_OW 254
48192: PPUSH
48193: LD_INT 5
48195: PPUSH
48196: CALL_OW 273
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48205: LD_VAR 0 16
48209: PUSH
48210: LD_INT 1
48212: ARRAY
48213: PPUSH
48214: LD_VAR 0 16
48218: PUSH
48219: LD_INT 2
48221: ARRAY
48222: PPUSH
48223: CALL_OW 488
48227: IFFALSE 48258
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48229: LD_VAR 0 13
48233: PPUSH
48234: LD_VAR 0 16
48238: PUSH
48239: LD_INT 1
48241: ARRAY
48242: PPUSH
48243: LD_VAR 0 16
48247: PUSH
48248: LD_INT 2
48250: ARRAY
48251: PPUSH
48252: CALL_OW 111
// continue ;
48256: GO 47748
// end ; end ; r := GetDir ( tmp ) ;
48258: LD_ADDR_VAR 0 15
48262: PUSH
48263: LD_VAR 0 13
48267: PPUSH
48268: CALL_OW 254
48272: ST_TO_ADDR
// if r = 5 then
48273: LD_VAR 0 15
48277: PUSH
48278: LD_INT 5
48280: EQUAL
48281: IFFALSE 48291
// r := 0 ;
48283: LD_ADDR_VAR 0 15
48287: PUSH
48288: LD_INT 0
48290: ST_TO_ADDR
// for j = r to 5 do
48291: LD_ADDR_VAR 0 10
48295: PUSH
48296: DOUBLE
48297: LD_VAR 0 15
48301: DEC
48302: ST_TO_ADDR
48303: LD_INT 5
48305: PUSH
48306: FOR_TO
48307: IFFALSE 48421
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48309: LD_ADDR_VAR 0 11
48313: PUSH
48314: LD_VAR 0 13
48318: PPUSH
48319: CALL_OW 250
48323: PPUSH
48324: LD_VAR 0 10
48328: PPUSH
48329: LD_INT 2
48331: PPUSH
48332: CALL_OW 272
48336: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48337: LD_ADDR_VAR 0 12
48341: PUSH
48342: LD_VAR 0 13
48346: PPUSH
48347: CALL_OW 251
48351: PPUSH
48352: LD_VAR 0 10
48356: PPUSH
48357: LD_INT 2
48359: PPUSH
48360: CALL_OW 273
48364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48365: LD_VAR 0 11
48369: PPUSH
48370: LD_VAR 0 12
48374: PPUSH
48375: CALL_OW 488
48379: PUSH
48380: LD_VAR 0 11
48384: PPUSH
48385: LD_VAR 0 12
48389: PPUSH
48390: CALL_OW 428
48394: NOT
48395: AND
48396: IFFALSE 48419
// begin ComMoveXY ( tmp , _x , _y ) ;
48398: LD_VAR 0 13
48402: PPUSH
48403: LD_VAR 0 11
48407: PPUSH
48408: LD_VAR 0 12
48412: PPUSH
48413: CALL_OW 111
// break ;
48417: GO 48421
// end ; end ;
48419: GO 48306
48421: POP
48422: POP
// end ; end ;
48423: GO 47748
48425: POP
48426: POP
// end ;
48427: LD_VAR 0 8
48431: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48432: LD_INT 0
48434: PPUSH
// result := true ;
48435: LD_ADDR_VAR 0 3
48439: PUSH
48440: LD_INT 1
48442: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48443: LD_VAR 0 2
48447: PUSH
48448: LD_INT 24
48450: DOUBLE
48451: EQUAL
48452: IFTRUE 48462
48454: LD_INT 33
48456: DOUBLE
48457: EQUAL
48458: IFTRUE 48462
48460: GO 48487
48462: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48463: LD_ADDR_VAR 0 3
48467: PUSH
48468: LD_INT 32
48470: PPUSH
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 321
48480: PUSH
48481: LD_INT 2
48483: EQUAL
48484: ST_TO_ADDR
48485: GO 48807
48487: LD_INT 20
48489: DOUBLE
48490: EQUAL
48491: IFTRUE 48495
48493: GO 48520
48495: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48496: LD_ADDR_VAR 0 3
48500: PUSH
48501: LD_INT 6
48503: PPUSH
48504: LD_VAR 0 1
48508: PPUSH
48509: CALL_OW 321
48513: PUSH
48514: LD_INT 2
48516: EQUAL
48517: ST_TO_ADDR
48518: GO 48807
48520: LD_INT 22
48522: DOUBLE
48523: EQUAL
48524: IFTRUE 48534
48526: LD_INT 36
48528: DOUBLE
48529: EQUAL
48530: IFTRUE 48534
48532: GO 48559
48534: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48535: LD_ADDR_VAR 0 3
48539: PUSH
48540: LD_INT 15
48542: PPUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 321
48552: PUSH
48553: LD_INT 2
48555: EQUAL
48556: ST_TO_ADDR
48557: GO 48807
48559: LD_INT 30
48561: DOUBLE
48562: EQUAL
48563: IFTRUE 48567
48565: GO 48592
48567: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48568: LD_ADDR_VAR 0 3
48572: PUSH
48573: LD_INT 20
48575: PPUSH
48576: LD_VAR 0 1
48580: PPUSH
48581: CALL_OW 321
48585: PUSH
48586: LD_INT 2
48588: EQUAL
48589: ST_TO_ADDR
48590: GO 48807
48592: LD_INT 28
48594: DOUBLE
48595: EQUAL
48596: IFTRUE 48606
48598: LD_INT 21
48600: DOUBLE
48601: EQUAL
48602: IFTRUE 48606
48604: GO 48631
48606: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48607: LD_ADDR_VAR 0 3
48611: PUSH
48612: LD_INT 21
48614: PPUSH
48615: LD_VAR 0 1
48619: PPUSH
48620: CALL_OW 321
48624: PUSH
48625: LD_INT 2
48627: EQUAL
48628: ST_TO_ADDR
48629: GO 48807
48631: LD_INT 16
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48639
48637: GO 48666
48639: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48640: LD_ADDR_VAR 0 3
48644: PUSH
48645: LD_EXP 49
48649: PPUSH
48650: LD_VAR 0 1
48654: PPUSH
48655: CALL_OW 321
48659: PUSH
48660: LD_INT 2
48662: EQUAL
48663: ST_TO_ADDR
48664: GO 48807
48666: LD_INT 19
48668: DOUBLE
48669: EQUAL
48670: IFTRUE 48680
48672: LD_INT 23
48674: DOUBLE
48675: EQUAL
48676: IFTRUE 48680
48678: GO 48707
48680: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48681: LD_ADDR_VAR 0 3
48685: PUSH
48686: LD_EXP 48
48690: PPUSH
48691: LD_VAR 0 1
48695: PPUSH
48696: CALL_OW 321
48700: PUSH
48701: LD_INT 2
48703: EQUAL
48704: ST_TO_ADDR
48705: GO 48807
48707: LD_INT 17
48709: DOUBLE
48710: EQUAL
48711: IFTRUE 48715
48713: GO 48740
48715: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48716: LD_ADDR_VAR 0 3
48720: PUSH
48721: LD_INT 39
48723: PPUSH
48724: LD_VAR 0 1
48728: PPUSH
48729: CALL_OW 321
48733: PUSH
48734: LD_INT 2
48736: EQUAL
48737: ST_TO_ADDR
48738: GO 48807
48740: LD_INT 18
48742: DOUBLE
48743: EQUAL
48744: IFTRUE 48748
48746: GO 48773
48748: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48749: LD_ADDR_VAR 0 3
48753: PUSH
48754: LD_INT 40
48756: PPUSH
48757: LD_VAR 0 1
48761: PPUSH
48762: CALL_OW 321
48766: PUSH
48767: LD_INT 2
48769: EQUAL
48770: ST_TO_ADDR
48771: GO 48807
48773: LD_INT 27
48775: DOUBLE
48776: EQUAL
48777: IFTRUE 48781
48779: GO 48806
48781: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48782: LD_ADDR_VAR 0 3
48786: PUSH
48787: LD_INT 35
48789: PPUSH
48790: LD_VAR 0 1
48794: PPUSH
48795: CALL_OW 321
48799: PUSH
48800: LD_INT 2
48802: EQUAL
48803: ST_TO_ADDR
48804: GO 48807
48806: POP
// end ;
48807: LD_VAR 0 3
48811: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48812: LD_INT 0
48814: PPUSH
48815: PPUSH
48816: PPUSH
48817: PPUSH
48818: PPUSH
48819: PPUSH
48820: PPUSH
48821: PPUSH
48822: PPUSH
48823: PPUSH
48824: PPUSH
// result := false ;
48825: LD_ADDR_VAR 0 6
48829: PUSH
48830: LD_INT 0
48832: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48833: LD_VAR 0 1
48837: NOT
48838: PUSH
48839: LD_VAR 0 1
48843: PPUSH
48844: CALL_OW 266
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: IN
48859: NOT
48860: OR
48861: PUSH
48862: LD_VAR 0 2
48866: NOT
48867: OR
48868: PUSH
48869: LD_VAR 0 5
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: LD_INT 4
48888: PUSH
48889: LD_INT 5
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: IN
48900: NOT
48901: OR
48902: PUSH
48903: LD_VAR 0 3
48907: PPUSH
48908: LD_VAR 0 4
48912: PPUSH
48913: CALL_OW 488
48917: NOT
48918: OR
48919: IFFALSE 48923
// exit ;
48921: GO 49659
// side := GetSide ( depot ) ;
48923: LD_ADDR_VAR 0 9
48927: PUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 255
48937: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48938: LD_VAR 0 9
48942: PPUSH
48943: LD_VAR 0 2
48947: PPUSH
48948: CALL 48432 0 2
48952: NOT
48953: IFFALSE 48957
// exit ;
48955: GO 49659
// pom := GetBase ( depot ) ;
48957: LD_ADDR_VAR 0 10
48961: PUSH
48962: LD_VAR 0 1
48966: PPUSH
48967: CALL_OW 274
48971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48972: LD_ADDR_VAR 0 11
48976: PUSH
48977: LD_VAR 0 2
48981: PPUSH
48982: LD_VAR 0 1
48986: PPUSH
48987: CALL_OW 248
48991: PPUSH
48992: CALL_OW 450
48996: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48997: LD_VAR 0 10
49001: PPUSH
49002: LD_INT 1
49004: PPUSH
49005: CALL_OW 275
49009: PUSH
49010: LD_VAR 0 11
49014: PUSH
49015: LD_INT 1
49017: ARRAY
49018: GREATEREQUAL
49019: PUSH
49020: LD_VAR 0 10
49024: PPUSH
49025: LD_INT 2
49027: PPUSH
49028: CALL_OW 275
49032: PUSH
49033: LD_VAR 0 11
49037: PUSH
49038: LD_INT 2
49040: ARRAY
49041: GREATEREQUAL
49042: AND
49043: PUSH
49044: LD_VAR 0 10
49048: PPUSH
49049: LD_INT 3
49051: PPUSH
49052: CALL_OW 275
49056: PUSH
49057: LD_VAR 0 11
49061: PUSH
49062: LD_INT 3
49064: ARRAY
49065: GREATEREQUAL
49066: AND
49067: NOT
49068: IFFALSE 49072
// exit ;
49070: GO 49659
// if GetBType ( depot ) = b_depot then
49072: LD_VAR 0 1
49076: PPUSH
49077: CALL_OW 266
49081: PUSH
49082: LD_INT 0
49084: EQUAL
49085: IFFALSE 49097
// dist := 28 else
49087: LD_ADDR_VAR 0 14
49091: PUSH
49092: LD_INT 28
49094: ST_TO_ADDR
49095: GO 49105
// dist := 36 ;
49097: LD_ADDR_VAR 0 14
49101: PUSH
49102: LD_INT 36
49104: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49105: LD_VAR 0 1
49109: PPUSH
49110: LD_VAR 0 3
49114: PPUSH
49115: LD_VAR 0 4
49119: PPUSH
49120: CALL_OW 297
49124: PUSH
49125: LD_VAR 0 14
49129: GREATER
49130: IFFALSE 49134
// exit ;
49132: GO 49659
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49134: LD_ADDR_VAR 0 12
49138: PUSH
49139: LD_VAR 0 2
49143: PPUSH
49144: LD_VAR 0 3
49148: PPUSH
49149: LD_VAR 0 4
49153: PPUSH
49154: LD_VAR 0 5
49158: PPUSH
49159: LD_VAR 0 1
49163: PPUSH
49164: CALL_OW 248
49168: PPUSH
49169: LD_INT 0
49171: PPUSH
49172: CALL 49664 0 6
49176: ST_TO_ADDR
// if not hexes then
49177: LD_VAR 0 12
49181: NOT
49182: IFFALSE 49186
// exit ;
49184: GO 49659
// hex := GetHexInfo ( x , y ) ;
49186: LD_ADDR_VAR 0 15
49190: PUSH
49191: LD_VAR 0 3
49195: PPUSH
49196: LD_VAR 0 4
49200: PPUSH
49201: CALL_OW 546
49205: ST_TO_ADDR
// if hex [ 1 ] then
49206: LD_VAR 0 15
49210: PUSH
49211: LD_INT 1
49213: ARRAY
49214: IFFALSE 49218
// exit ;
49216: GO 49659
// height := hex [ 2 ] ;
49218: LD_ADDR_VAR 0 13
49222: PUSH
49223: LD_VAR 0 15
49227: PUSH
49228: LD_INT 2
49230: ARRAY
49231: ST_TO_ADDR
// for i = 1 to hexes do
49232: LD_ADDR_VAR 0 7
49236: PUSH
49237: DOUBLE
49238: LD_INT 1
49240: DEC
49241: ST_TO_ADDR
49242: LD_VAR 0 12
49246: PUSH
49247: FOR_TO
49248: IFFALSE 49578
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49250: LD_VAR 0 12
49254: PUSH
49255: LD_VAR 0 7
49259: ARRAY
49260: PUSH
49261: LD_INT 1
49263: ARRAY
49264: PPUSH
49265: LD_VAR 0 12
49269: PUSH
49270: LD_VAR 0 7
49274: ARRAY
49275: PUSH
49276: LD_INT 2
49278: ARRAY
49279: PPUSH
49280: CALL_OW 488
49284: NOT
49285: PUSH
49286: LD_VAR 0 12
49290: PUSH
49291: LD_VAR 0 7
49295: ARRAY
49296: PUSH
49297: LD_INT 1
49299: ARRAY
49300: PPUSH
49301: LD_VAR 0 12
49305: PUSH
49306: LD_VAR 0 7
49310: ARRAY
49311: PUSH
49312: LD_INT 2
49314: ARRAY
49315: PPUSH
49316: CALL_OW 428
49320: PUSH
49321: LD_INT 0
49323: GREATER
49324: OR
49325: PUSH
49326: LD_VAR 0 12
49330: PUSH
49331: LD_VAR 0 7
49335: ARRAY
49336: PUSH
49337: LD_INT 1
49339: ARRAY
49340: PPUSH
49341: LD_VAR 0 12
49345: PUSH
49346: LD_VAR 0 7
49350: ARRAY
49351: PUSH
49352: LD_INT 2
49354: ARRAY
49355: PPUSH
49356: CALL_OW 351
49360: OR
49361: IFFALSE 49367
// exit ;
49363: POP
49364: POP
49365: GO 49659
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49367: LD_ADDR_VAR 0 8
49371: PUSH
49372: LD_VAR 0 12
49376: PUSH
49377: LD_VAR 0 7
49381: ARRAY
49382: PUSH
49383: LD_INT 1
49385: ARRAY
49386: PPUSH
49387: LD_VAR 0 12
49391: PUSH
49392: LD_VAR 0 7
49396: ARRAY
49397: PUSH
49398: LD_INT 2
49400: ARRAY
49401: PPUSH
49402: CALL_OW 546
49406: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49407: LD_VAR 0 8
49411: PUSH
49412: LD_INT 1
49414: ARRAY
49415: PUSH
49416: LD_VAR 0 8
49420: PUSH
49421: LD_INT 2
49423: ARRAY
49424: PUSH
49425: LD_VAR 0 13
49429: PUSH
49430: LD_INT 2
49432: PLUS
49433: GREATER
49434: OR
49435: PUSH
49436: LD_VAR 0 8
49440: PUSH
49441: LD_INT 2
49443: ARRAY
49444: PUSH
49445: LD_VAR 0 13
49449: PUSH
49450: LD_INT 2
49452: MINUS
49453: LESS
49454: OR
49455: PUSH
49456: LD_VAR 0 8
49460: PUSH
49461: LD_INT 3
49463: ARRAY
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 8
49470: PUSH
49471: LD_INT 9
49473: PUSH
49474: LD_INT 10
49476: PUSH
49477: LD_INT 11
49479: PUSH
49480: LD_INT 12
49482: PUSH
49483: LD_INT 13
49485: PUSH
49486: LD_INT 16
49488: PUSH
49489: LD_INT 17
49491: PUSH
49492: LD_INT 18
49494: PUSH
49495: LD_INT 19
49497: PUSH
49498: LD_INT 20
49500: PUSH
49501: LD_INT 21
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: IN
49519: NOT
49520: OR
49521: PUSH
49522: LD_VAR 0 8
49526: PUSH
49527: LD_INT 5
49529: ARRAY
49530: NOT
49531: OR
49532: PUSH
49533: LD_VAR 0 8
49537: PUSH
49538: LD_INT 6
49540: ARRAY
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 7
49550: PUSH
49551: LD_INT 9
49553: PUSH
49554: LD_INT 10
49556: PUSH
49557: LD_INT 11
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: IN
49568: NOT
49569: OR
49570: IFFALSE 49576
// exit ;
49572: POP
49573: POP
49574: GO 49659
// end ;
49576: GO 49247
49578: POP
49579: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49580: LD_VAR 0 9
49584: PPUSH
49585: LD_VAR 0 3
49589: PPUSH
49590: LD_VAR 0 4
49594: PPUSH
49595: LD_INT 20
49597: PPUSH
49598: CALL 41605 0 4
49602: PUSH
49603: LD_INT 4
49605: ARRAY
49606: IFFALSE 49610
// exit ;
49608: GO 49659
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49610: LD_VAR 0 2
49614: PUSH
49615: LD_INT 29
49617: PUSH
49618: LD_INT 30
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: IN
49625: PUSH
49626: LD_VAR 0 3
49630: PPUSH
49631: LD_VAR 0 4
49635: PPUSH
49636: LD_VAR 0 9
49640: PPUSH
49641: CALL_OW 440
49645: NOT
49646: AND
49647: IFFALSE 49651
// exit ;
49649: GO 49659
// result := true ;
49651: LD_ADDR_VAR 0 6
49655: PUSH
49656: LD_INT 1
49658: ST_TO_ADDR
// end ;
49659: LD_VAR 0 6
49663: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49664: LD_INT 0
49666: PPUSH
49667: PPUSH
49668: PPUSH
49669: PPUSH
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
49674: PPUSH
49675: PPUSH
49676: PPUSH
49677: PPUSH
49678: PPUSH
49679: PPUSH
49680: PPUSH
49681: PPUSH
49682: PPUSH
49683: PPUSH
49684: PPUSH
49685: PPUSH
49686: PPUSH
49687: PPUSH
49688: PPUSH
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
49693: PPUSH
49694: PPUSH
49695: PPUSH
49696: PPUSH
49697: PPUSH
49698: PPUSH
49699: PPUSH
49700: PPUSH
49701: PPUSH
49702: PPUSH
49703: PPUSH
49704: PPUSH
49705: PPUSH
49706: PPUSH
49707: PPUSH
49708: PPUSH
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
49720: PPUSH
49721: PPUSH
49722: PPUSH
49723: PPUSH
// result = [ ] ;
49724: LD_ADDR_VAR 0 7
49728: PUSH
49729: EMPTY
49730: ST_TO_ADDR
// temp_list = [ ] ;
49731: LD_ADDR_VAR 0 9
49735: PUSH
49736: EMPTY
49737: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49738: LD_VAR 0 4
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: LD_INT 5
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: IN
49769: NOT
49770: PUSH
49771: LD_VAR 0 1
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: IN
49786: PUSH
49787: LD_VAR 0 5
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: IN
49806: NOT
49807: AND
49808: OR
49809: IFFALSE 49813
// exit ;
49811: GO 68204
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49813: LD_VAR 0 1
49817: PUSH
49818: LD_INT 6
49820: PUSH
49821: LD_INT 7
49823: PUSH
49824: LD_INT 8
49826: PUSH
49827: LD_INT 13
49829: PUSH
49830: LD_INT 12
49832: PUSH
49833: LD_INT 15
49835: PUSH
49836: LD_INT 11
49838: PUSH
49839: LD_INT 14
49841: PUSH
49842: LD_INT 10
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: IN
49856: IFFALSE 49866
// btype = b_lab ;
49858: LD_ADDR_VAR 0 1
49862: PUSH
49863: LD_INT 6
49865: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49866: LD_VAR 0 6
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: IN
49885: NOT
49886: PUSH
49887: LD_VAR 0 1
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 6
49906: PUSH
49907: LD_INT 36
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: LD_INT 31
49918: PUSH
49919: LD_INT 32
49921: PUSH
49922: LD_INT 33
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: IN
49938: NOT
49939: PUSH
49940: LD_VAR 0 6
49944: PUSH
49945: LD_INT 1
49947: EQUAL
49948: AND
49949: OR
49950: PUSH
49951: LD_VAR 0 1
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: IN
49966: NOT
49967: PUSH
49968: LD_VAR 0 6
49972: PUSH
49973: LD_INT 2
49975: EQUAL
49976: AND
49977: OR
49978: IFFALSE 49988
// mode = 0 ;
49980: LD_ADDR_VAR 0 6
49984: PUSH
49985: LD_INT 0
49987: ST_TO_ADDR
// case mode of 0 :
49988: LD_VAR 0 6
49992: PUSH
49993: LD_INT 0
49995: DOUBLE
49996: EQUAL
49997: IFTRUE 50001
49999: GO 61454
50001: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50002: LD_ADDR_VAR 0 11
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50195: LD_ADDR_VAR 0 12
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50391: LD_ADDR_VAR 0 13
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50590: LD_ADDR_VAR 0 14
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50786: LD_ADDR_VAR 0 15
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50979: LD_ADDR_VAR 0 16
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51172: LD_ADDR_VAR 0 17
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51402: LD_ADDR_VAR 0 18
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 2
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51632: LD_ADDR_VAR 0 19
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51862: LD_ADDR_VAR 0 20
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52092: LD_ADDR_VAR 0 21
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52322: LD_ADDR_VAR 0 22
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52552: LD_ADDR_VAR 0 23
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52832: LD_ADDR_VAR 0 24
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53108: LD_ADDR_VAR 0 25
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53382: LD_ADDR_VAR 0 26
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53658: LD_ADDR_VAR 0 27
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53938: LD_ADDR_VAR 0 28
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 3
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54220: LD_ADDR_VAR 0 29
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54499: LD_ADDR_VAR 0 30
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 3
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54777: LD_ADDR_VAR 0 31
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55055: LD_ADDR_VAR 0 32
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55333: LD_ADDR_VAR 0 33
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 3
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55612: LD_ADDR_VAR 0 34
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55892: LD_ADDR_VAR 0 35
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56004: LD_ADDR_VAR 0 36
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56116: LD_ADDR_VAR 0 37
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56228: LD_ADDR_VAR 0 38
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56340: LD_ADDR_VAR 0 39
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56452: LD_ADDR_VAR 0 40
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56564: LD_ADDR_VAR 0 41
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56914: LD_ADDR_VAR 0 42
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 3
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 3
57160: PUSH
57161: LD_INT 3
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: LD_INT 3
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57264: LD_ADDR_VAR 0 43
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57612: LD_ADDR_VAR 0 44
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57962: LD_ADDR_VAR 0 45
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 3
58259: NEG
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58312: LD_ADDR_VAR 0 46
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58660: LD_ADDR_VAR 0 47
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58811: LD_ADDR_VAR 0 48
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58958: LD_ADDR_VAR 0 49
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59102: LD_ADDR_VAR 0 50
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59246: LD_ADDR_VAR 0 51
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59393: LD_ADDR_VAR 0 52
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59544: LD_ADDR_VAR 0 53
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59774: LD_ADDR_VAR 0 54
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60004: LD_ADDR_VAR 0 55
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60234: LD_ADDR_VAR 0 56
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60464: LD_ADDR_VAR 0 57
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60694: LD_ADDR_VAR 0 58
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60924: LD_ADDR_VAR 0 59
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61012: LD_ADDR_VAR 0 60
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61100: LD_ADDR_VAR 0 61
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61188: LD_ADDR_VAR 0 62
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61276: LD_ADDR_VAR 0 63
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61364: LD_ADDR_VAR 0 64
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// end ; 1 :
61452: GO 67349
61454: LD_INT 1
61456: DOUBLE
61457: EQUAL
61458: IFTRUE 61462
61460: GO 64085
61462: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61463: LD_ADDR_VAR 0 11
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61507: LD_ADDR_VAR 0 12
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61548: LD_ADDR_VAR 0 13
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61588: LD_ADDR_VAR 0 14
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61629: LD_ADDR_VAR 0 15
61633: PUSH
61634: LD_INT 2
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61673: LD_ADDR_VAR 0 16
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61719: LD_ADDR_VAR 0 17
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: LD_INT 3
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61763: LD_ADDR_VAR 0 18
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: LIST
61803: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61804: LD_ADDR_VAR 0 19
61808: PUSH
61809: LD_INT 3
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 3
61821: PUSH
61822: LD_INT 3
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 3
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61844: LD_ADDR_VAR 0 20
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61885: LD_ADDR_VAR 0 21
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61929: LD_ADDR_VAR 0 22
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: LD_INT 3
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: NEG
61949: PUSH
61950: LD_INT 2
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 3
61960: NEG
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61975: LD_ADDR_VAR 0 23
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 4
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: LD_INT 3
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62019: LD_ADDR_VAR 0 24
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62060: LD_ADDR_VAR 0 25
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: LIST
62099: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62100: LD_ADDR_VAR 0 26
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 4
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 3
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62141: LD_ADDR_VAR 0 27
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 4
62170: NEG
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62185: LD_ADDR_VAR 0 28
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 3
62204: NEG
62205: PUSH
62206: LD_INT 4
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: LD_INT 3
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62231: LD_ADDR_VAR 0 29
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 3
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 4
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 3
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 5
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 5
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 4
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 6
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 6
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 5
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62386: LD_ADDR_VAR 0 30
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 4
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 5
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 5
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 5
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 6
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 6
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62529: LD_ADDR_VAR 0 31
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 4
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 4
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: LD_INT 4
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 5
62596: PUSH
62597: LD_INT 4
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: LD_INT 5
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: LD_INT 5
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 6
62626: PUSH
62627: LD_INT 5
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 6
62636: PUSH
62637: LD_INT 6
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 5
62646: PUSH
62647: LD_INT 6
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62668: LD_ADDR_VAR 0 32
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 4
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 3
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 5
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 5
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 6
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 6
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 5
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62811: LD_ADDR_VAR 0 33
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 4
62863: NEG
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: NEG
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: NEG
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 5
62897: NEG
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 5
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 5
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 6
62931: NEG
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 6
62942: NEG
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62966: LD_ADDR_VAR 0 34
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 3
62985: NEG
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 3
62997: NEG
62998: PUSH
62999: LD_INT 3
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 3
63009: NEG
63010: PUSH
63011: LD_INT 4
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: LD_INT 3
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 4
63033: NEG
63034: PUSH
63035: LD_INT 4
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 4
63045: NEG
63046: PUSH
63047: LD_INT 5
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 5
63057: NEG
63058: PUSH
63059: LD_INT 4
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 5
63069: NEG
63070: PUSH
63071: LD_INT 5
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 5
63081: NEG
63082: PUSH
63083: LD_INT 6
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 6
63093: NEG
63094: PUSH
63095: LD_INT 5
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 6
63105: NEG
63106: PUSH
63107: LD_INT 6
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63129: LD_ADDR_VAR 0 41
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63173: LD_ADDR_VAR 0 42
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63214: LD_ADDR_VAR 0 43
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 3
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63254: LD_ADDR_VAR 0 44
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 3
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63295: LD_ADDR_VAR 0 45
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63339: LD_ADDR_VAR 0 46
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: LD_INT 3
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: NEG
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63385: LD_ADDR_VAR 0 47
63389: PUSH
63390: LD_INT 2
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 3
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63418: LD_ADDR_VAR 0 48
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 2
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63449: LD_ADDR_VAR 0 49
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63478: LD_ADDR_VAR 0 50
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63507: LD_ADDR_VAR 0 51
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63538: LD_ADDR_VAR 0 52
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: LD_INT 2
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63571: LD_ADDR_VAR 0 53
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63615: LD_ADDR_VAR 0 54
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63656: LD_ADDR_VAR 0 55
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63696: LD_ADDR_VAR 0 56
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63737: LD_ADDR_VAR 0 57
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: NEG
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: NEG
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63781: LD_ADDR_VAR 0 58
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: LD_INT 3
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63827: LD_ADDR_VAR 0 59
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: LD_INT 2
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63871: LD_ADDR_VAR 0 60
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63912: LD_ADDR_VAR 0 61
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63952: LD_ADDR_VAR 0 62
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63993: LD_ADDR_VAR 0 63
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: NEG
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64037: LD_ADDR_VAR 0 64
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: ST_TO_ADDR
// end ; 2 :
64083: GO 67349
64085: LD_INT 2
64087: DOUBLE
64088: EQUAL
64089: IFTRUE 64093
64091: GO 67348
64093: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64094: LD_ADDR_VAR 0 29
64098: PUSH
64099: LD_INT 4
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 4
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 5
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 5
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 5
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: LD_INT 3
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 3
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: LD_INT 4
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: LD_INT 4
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 4
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 4
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 5
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 5
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 4
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 5
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: NEG
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 3
64388: NEG
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 4
64433: NEG
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 4
64444: NEG
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 4
64456: NEG
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 4
64479: NEG
64480: PUSH
64481: LD_INT 4
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 4
64491: NEG
64492: PUSH
64493: LD_INT 5
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 3
64503: NEG
64504: PUSH
64505: LD_INT 4
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 3
64515: NEG
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 4
64527: NEG
64528: PUSH
64529: LD_INT 3
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 5
64539: NEG
64540: PUSH
64541: LD_INT 4
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 5
64551: NEG
64552: PUSH
64553: LD_INT 5
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 3
64563: NEG
64564: PUSH
64565: LD_INT 5
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 5
64575: NEG
64576: PUSH
64577: LD_INT 3
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64632: LD_ADDR_VAR 0 30
64636: PUSH
64637: LD_INT 4
64639: PUSH
64640: LD_INT 4
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 4
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 5
64659: PUSH
64660: LD_INT 4
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 5
64669: PUSH
64670: LD_INT 5
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 4
64679: PUSH
64680: LD_INT 5
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: PUSH
64690: LD_INT 4
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 5
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 3
64719: PUSH
64720: LD_INT 5
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 3
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: LD_INT 4
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 4
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: LD_INT 4
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 2
64811: NEG
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 4
64822: NEG
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 4
64833: NEG
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 4
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 5
64878: NEG
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 5
64889: NEG
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 5
64901: NEG
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: LD_INT 3
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 3
64936: NEG
64937: PUSH
64938: LD_INT 4
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: LD_INT 3
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 4
64984: NEG
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 4
64996: NEG
64997: PUSH
64998: LD_INT 4
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: NEG
65009: PUSH
65010: LD_INT 4
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 4
65020: NEG
65021: PUSH
65022: LD_INT 2
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 4
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 5
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 3
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: LD_INT 4
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: NEG
65100: PUSH
65101: LD_INT 5
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: LD_INT 3
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 5
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65179: LD_ADDR_VAR 0 31
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: LD_INT 4
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 5
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 5
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: PUSH
65259: LD_INT 5
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 2
65268: NEG
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 3
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 4
65335: NEG
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 4
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 4
65358: NEG
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 4
65381: NEG
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 4
65393: NEG
65394: PUSH
65395: LD_INT 5
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 3
65405: NEG
65406: PUSH
65407: LD_INT 4
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: NEG
65418: PUSH
65419: LD_INT 3
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 4
65429: NEG
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 5
65441: NEG
65442: PUSH
65443: LD_INT 4
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 5
65453: NEG
65454: PUSH
65455: LD_INT 5
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 3
65465: NEG
65466: PUSH
65467: LD_INT 5
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 5
65477: NEG
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: LD_INT 4
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: NEG
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: LD_INT 4
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: LD_INT 4
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 4
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 5
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 5
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 4
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 3
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 5
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65729: LD_ADDR_VAR 0 32
65733: PUSH
65734: LD_INT 4
65736: NEG
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 3
65759: NEG
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 5
65792: NEG
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 5
65803: NEG
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 5
65815: NEG
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: LD_INT 2
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 3
65838: NEG
65839: PUSH
65840: LD_INT 3
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 3
65850: NEG
65851: PUSH
65852: LD_INT 4
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: LD_INT 3
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: NEG
65875: PUSH
65876: LD_INT 2
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 3
65886: NEG
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 4
65898: NEG
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 4
65910: NEG
65911: PUSH
65912: LD_INT 4
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: LD_INT 4
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 4
65934: NEG
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 4
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: LD_INT 5
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: LD_INT 4
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: LD_INT 3
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: LD_INT 4
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: LD_INT 5
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 5
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 3
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 4
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 4
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 3
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 4
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 4
66151: PUSH
66152: LD_INT 3
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 5
66161: PUSH
66162: LD_INT 4
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: PUSH
66172: LD_INT 5
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 4
66181: PUSH
66182: LD_INT 5
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: PUSH
66192: LD_INT 4
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: LD_INT 3
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 5
66211: PUSH
66212: LD_INT 3
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: LD_INT 5
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66276: LD_ADDR_VAR 0 33
66280: PUSH
66281: LD_INT 4
66283: NEG
66284: PUSH
66285: LD_INT 4
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 4
66295: NEG
66296: PUSH
66297: LD_INT 5
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: NEG
66308: PUSH
66309: LD_INT 4
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: LD_INT 3
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 4
66331: NEG
66332: PUSH
66333: LD_INT 3
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 5
66343: NEG
66344: PUSH
66345: LD_INT 4
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 5
66355: NEG
66356: PUSH
66357: LD_INT 5
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 3
66367: NEG
66368: PUSH
66369: LD_INT 5
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 5
66379: NEG
66380: PUSH
66381: LD_INT 3
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: LD_INT 3
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 4
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: LD_INT 4
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 2
66470: PUSH
66471: LD_INT 2
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: LD_INT 4
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 4
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 5
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 5
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 3
66565: PUSH
66566: LD_INT 2
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 5
66576: PUSH
66577: LD_INT 2
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 3
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 4
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 4
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: LD_INT 3
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: LD_INT 2
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 4
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 2
66666: PUSH
66667: LD_INT 4
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: LD_INT 4
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 5
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 5
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 4
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: LD_INT 3
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: LD_INT 5
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66814: LD_ADDR_VAR 0 34
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: LD_INT 4
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 5
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: LD_INT 4
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 3
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 5
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: LD_INT 3
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 2
66911: NEG
66912: PUSH
66913: LD_INT 5
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 4
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 2
66995: PUSH
66996: LD_INT 2
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 4
67006: PUSH
67007: LD_INT 2
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 4
67016: PUSH
67017: LD_INT 4
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 4
67026: PUSH
67027: LD_INT 3
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 5
67036: PUSH
67037: LD_INT 4
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 5
67046: PUSH
67047: LD_INT 5
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 4
67056: PUSH
67057: LD_INT 5
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 3
67066: PUSH
67067: LD_INT 4
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 3
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 5
67086: PUSH
67087: LD_INT 3
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: LD_INT 5
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 3
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 4
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: LD_INT 4
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 4
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 2
67188: NEG
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 4
67199: NEG
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 4
67210: NEG
67211: PUSH
67212: LD_INT 1
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 3
67233: NEG
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 4
67244: NEG
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 5
67255: NEG
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 5
67266: NEG
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 5
67278: NEG
67279: PUSH
67280: LD_INT 2
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// end ; end ;
67346: GO 67349
67348: POP
// case btype of b_depot , b_warehouse :
67349: LD_VAR 0 1
67353: PUSH
67354: LD_INT 0
67356: DOUBLE
67357: EQUAL
67358: IFTRUE 67368
67360: LD_INT 1
67362: DOUBLE
67363: EQUAL
67364: IFTRUE 67368
67366: GO 67569
67368: POP
// case nation of nation_american :
67369: LD_VAR 0 5
67373: PUSH
67374: LD_INT 1
67376: DOUBLE
67377: EQUAL
67378: IFTRUE 67382
67380: GO 67438
67382: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67383: LD_ADDR_VAR 0 9
67387: PUSH
67388: LD_VAR 0 11
67392: PUSH
67393: LD_VAR 0 12
67397: PUSH
67398: LD_VAR 0 13
67402: PUSH
67403: LD_VAR 0 14
67407: PUSH
67408: LD_VAR 0 15
67412: PUSH
67413: LD_VAR 0 16
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: PUSH
67426: LD_VAR 0 4
67430: PUSH
67431: LD_INT 1
67433: PLUS
67434: ARRAY
67435: ST_TO_ADDR
67436: GO 67567
67438: LD_INT 2
67440: DOUBLE
67441: EQUAL
67442: IFTRUE 67446
67444: GO 67502
67446: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67447: LD_ADDR_VAR 0 9
67451: PUSH
67452: LD_VAR 0 17
67456: PUSH
67457: LD_VAR 0 18
67461: PUSH
67462: LD_VAR 0 19
67466: PUSH
67467: LD_VAR 0 20
67471: PUSH
67472: LD_VAR 0 21
67476: PUSH
67477: LD_VAR 0 22
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: PUSH
67490: LD_VAR 0 4
67494: PUSH
67495: LD_INT 1
67497: PLUS
67498: ARRAY
67499: ST_TO_ADDR
67500: GO 67567
67502: LD_INT 3
67504: DOUBLE
67505: EQUAL
67506: IFTRUE 67510
67508: GO 67566
67510: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67511: LD_ADDR_VAR 0 9
67515: PUSH
67516: LD_VAR 0 23
67520: PUSH
67521: LD_VAR 0 24
67525: PUSH
67526: LD_VAR 0 25
67530: PUSH
67531: LD_VAR 0 26
67535: PUSH
67536: LD_VAR 0 27
67540: PUSH
67541: LD_VAR 0 28
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: PUSH
67554: LD_VAR 0 4
67558: PUSH
67559: LD_INT 1
67561: PLUS
67562: ARRAY
67563: ST_TO_ADDR
67564: GO 67567
67566: POP
67567: GO 68122
67569: LD_INT 2
67571: DOUBLE
67572: EQUAL
67573: IFTRUE 67583
67575: LD_INT 3
67577: DOUBLE
67578: EQUAL
67579: IFTRUE 67583
67581: GO 67639
67583: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67584: LD_ADDR_VAR 0 9
67588: PUSH
67589: LD_VAR 0 29
67593: PUSH
67594: LD_VAR 0 30
67598: PUSH
67599: LD_VAR 0 31
67603: PUSH
67604: LD_VAR 0 32
67608: PUSH
67609: LD_VAR 0 33
67613: PUSH
67614: LD_VAR 0 34
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: PUSH
67627: LD_VAR 0 4
67631: PUSH
67632: LD_INT 1
67634: PLUS
67635: ARRAY
67636: ST_TO_ADDR
67637: GO 68122
67639: LD_INT 16
67641: DOUBLE
67642: EQUAL
67643: IFTRUE 67701
67645: LD_INT 17
67647: DOUBLE
67648: EQUAL
67649: IFTRUE 67701
67651: LD_INT 18
67653: DOUBLE
67654: EQUAL
67655: IFTRUE 67701
67657: LD_INT 19
67659: DOUBLE
67660: EQUAL
67661: IFTRUE 67701
67663: LD_INT 22
67665: DOUBLE
67666: EQUAL
67667: IFTRUE 67701
67669: LD_INT 20
67671: DOUBLE
67672: EQUAL
67673: IFTRUE 67701
67675: LD_INT 21
67677: DOUBLE
67678: EQUAL
67679: IFTRUE 67701
67681: LD_INT 23
67683: DOUBLE
67684: EQUAL
67685: IFTRUE 67701
67687: LD_INT 24
67689: DOUBLE
67690: EQUAL
67691: IFTRUE 67701
67693: LD_INT 25
67695: DOUBLE
67696: EQUAL
67697: IFTRUE 67701
67699: GO 67757
67701: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67702: LD_ADDR_VAR 0 9
67706: PUSH
67707: LD_VAR 0 35
67711: PUSH
67712: LD_VAR 0 36
67716: PUSH
67717: LD_VAR 0 37
67721: PUSH
67722: LD_VAR 0 38
67726: PUSH
67727: LD_VAR 0 39
67731: PUSH
67732: LD_VAR 0 40
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: PUSH
67745: LD_VAR 0 4
67749: PUSH
67750: LD_INT 1
67752: PLUS
67753: ARRAY
67754: ST_TO_ADDR
67755: GO 68122
67757: LD_INT 6
67759: DOUBLE
67760: EQUAL
67761: IFTRUE 67813
67763: LD_INT 7
67765: DOUBLE
67766: EQUAL
67767: IFTRUE 67813
67769: LD_INT 8
67771: DOUBLE
67772: EQUAL
67773: IFTRUE 67813
67775: LD_INT 13
67777: DOUBLE
67778: EQUAL
67779: IFTRUE 67813
67781: LD_INT 12
67783: DOUBLE
67784: EQUAL
67785: IFTRUE 67813
67787: LD_INT 15
67789: DOUBLE
67790: EQUAL
67791: IFTRUE 67813
67793: LD_INT 11
67795: DOUBLE
67796: EQUAL
67797: IFTRUE 67813
67799: LD_INT 14
67801: DOUBLE
67802: EQUAL
67803: IFTRUE 67813
67805: LD_INT 10
67807: DOUBLE
67808: EQUAL
67809: IFTRUE 67813
67811: GO 67869
67813: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67814: LD_ADDR_VAR 0 9
67818: PUSH
67819: LD_VAR 0 41
67823: PUSH
67824: LD_VAR 0 42
67828: PUSH
67829: LD_VAR 0 43
67833: PUSH
67834: LD_VAR 0 44
67838: PUSH
67839: LD_VAR 0 45
67843: PUSH
67844: LD_VAR 0 46
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: PUSH
67857: LD_VAR 0 4
67861: PUSH
67862: LD_INT 1
67864: PLUS
67865: ARRAY
67866: ST_TO_ADDR
67867: GO 68122
67869: LD_INT 36
67871: DOUBLE
67872: EQUAL
67873: IFTRUE 67877
67875: GO 67933
67877: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67878: LD_ADDR_VAR 0 9
67882: PUSH
67883: LD_VAR 0 47
67887: PUSH
67888: LD_VAR 0 48
67892: PUSH
67893: LD_VAR 0 49
67897: PUSH
67898: LD_VAR 0 50
67902: PUSH
67903: LD_VAR 0 51
67907: PUSH
67908: LD_VAR 0 52
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: PUSH
67921: LD_VAR 0 4
67925: PUSH
67926: LD_INT 1
67928: PLUS
67929: ARRAY
67930: ST_TO_ADDR
67931: GO 68122
67933: LD_INT 4
67935: DOUBLE
67936: EQUAL
67937: IFTRUE 67959
67939: LD_INT 5
67941: DOUBLE
67942: EQUAL
67943: IFTRUE 67959
67945: LD_INT 34
67947: DOUBLE
67948: EQUAL
67949: IFTRUE 67959
67951: LD_INT 37
67953: DOUBLE
67954: EQUAL
67955: IFTRUE 67959
67957: GO 68015
67959: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67960: LD_ADDR_VAR 0 9
67964: PUSH
67965: LD_VAR 0 53
67969: PUSH
67970: LD_VAR 0 54
67974: PUSH
67975: LD_VAR 0 55
67979: PUSH
67980: LD_VAR 0 56
67984: PUSH
67985: LD_VAR 0 57
67989: PUSH
67990: LD_VAR 0 58
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: LD_VAR 0 4
68007: PUSH
68008: LD_INT 1
68010: PLUS
68011: ARRAY
68012: ST_TO_ADDR
68013: GO 68122
68015: LD_INT 31
68017: DOUBLE
68018: EQUAL
68019: IFTRUE 68065
68021: LD_INT 32
68023: DOUBLE
68024: EQUAL
68025: IFTRUE 68065
68027: LD_INT 33
68029: DOUBLE
68030: EQUAL
68031: IFTRUE 68065
68033: LD_INT 27
68035: DOUBLE
68036: EQUAL
68037: IFTRUE 68065
68039: LD_INT 26
68041: DOUBLE
68042: EQUAL
68043: IFTRUE 68065
68045: LD_INT 28
68047: DOUBLE
68048: EQUAL
68049: IFTRUE 68065
68051: LD_INT 29
68053: DOUBLE
68054: EQUAL
68055: IFTRUE 68065
68057: LD_INT 30
68059: DOUBLE
68060: EQUAL
68061: IFTRUE 68065
68063: GO 68121
68065: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68066: LD_ADDR_VAR 0 9
68070: PUSH
68071: LD_VAR 0 59
68075: PUSH
68076: LD_VAR 0 60
68080: PUSH
68081: LD_VAR 0 61
68085: PUSH
68086: LD_VAR 0 62
68090: PUSH
68091: LD_VAR 0 63
68095: PUSH
68096: LD_VAR 0 64
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: PUSH
68109: LD_VAR 0 4
68113: PUSH
68114: LD_INT 1
68116: PLUS
68117: ARRAY
68118: ST_TO_ADDR
68119: GO 68122
68121: POP
// temp_list2 = [ ] ;
68122: LD_ADDR_VAR 0 10
68126: PUSH
68127: EMPTY
68128: ST_TO_ADDR
// for i in temp_list do
68129: LD_ADDR_VAR 0 8
68133: PUSH
68134: LD_VAR 0 9
68138: PUSH
68139: FOR_IN
68140: IFFALSE 68192
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68142: LD_ADDR_VAR 0 10
68146: PUSH
68147: LD_VAR 0 10
68151: PUSH
68152: LD_VAR 0 8
68156: PUSH
68157: LD_INT 1
68159: ARRAY
68160: PUSH
68161: LD_VAR 0 2
68165: PLUS
68166: PUSH
68167: LD_VAR 0 8
68171: PUSH
68172: LD_INT 2
68174: ARRAY
68175: PUSH
68176: LD_VAR 0 3
68180: PLUS
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: EMPTY
68187: LIST
68188: ADD
68189: ST_TO_ADDR
68190: GO 68139
68192: POP
68193: POP
// result = temp_list2 ;
68194: LD_ADDR_VAR 0 7
68198: PUSH
68199: LD_VAR 0 10
68203: ST_TO_ADDR
// end ;
68204: LD_VAR 0 7
68208: RET
// export function EnemyInRange ( unit , dist ) ; begin
68209: LD_INT 0
68211: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68212: LD_ADDR_VAR 0 3
68216: PUSH
68217: LD_VAR 0 1
68221: PPUSH
68222: CALL_OW 255
68226: PPUSH
68227: LD_VAR 0 1
68231: PPUSH
68232: CALL_OW 250
68236: PPUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: CALL_OW 251
68246: PPUSH
68247: LD_VAR 0 2
68251: PPUSH
68252: CALL 41605 0 4
68256: PUSH
68257: LD_INT 4
68259: ARRAY
68260: ST_TO_ADDR
// end ;
68261: LD_VAR 0 3
68265: RET
// export function PlayerSeeMe ( unit ) ; begin
68266: LD_INT 0
68268: PPUSH
// result := See ( your_side , unit ) ;
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: LD_OWVAR 2
68278: PPUSH
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 292
68288: ST_TO_ADDR
// end ;
68289: LD_VAR 0 2
68293: RET
// export function ReverseDir ( unit ) ; begin
68294: LD_INT 0
68296: PPUSH
// if not unit then
68297: LD_VAR 0 1
68301: NOT
68302: IFFALSE 68306
// exit ;
68304: GO 68329
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68306: LD_ADDR_VAR 0 2
68310: PUSH
68311: LD_VAR 0 1
68315: PPUSH
68316: CALL_OW 254
68320: PUSH
68321: LD_INT 3
68323: PLUS
68324: PUSH
68325: LD_INT 6
68327: MOD
68328: ST_TO_ADDR
// end ;
68329: LD_VAR 0 2
68333: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68334: LD_INT 0
68336: PPUSH
68337: PPUSH
68338: PPUSH
68339: PPUSH
68340: PPUSH
// if not hexes then
68341: LD_VAR 0 2
68345: NOT
68346: IFFALSE 68350
// exit ;
68348: GO 68498
// dist := 9999 ;
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: LD_INT 9999
68357: ST_TO_ADDR
// for i = 1 to hexes do
68358: LD_ADDR_VAR 0 4
68362: PUSH
68363: DOUBLE
68364: LD_INT 1
68366: DEC
68367: ST_TO_ADDR
68368: LD_VAR 0 2
68372: PUSH
68373: FOR_TO
68374: IFFALSE 68486
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68376: LD_VAR 0 1
68380: PPUSH
68381: LD_VAR 0 2
68385: PUSH
68386: LD_VAR 0 4
68390: ARRAY
68391: PUSH
68392: LD_INT 1
68394: ARRAY
68395: PPUSH
68396: LD_VAR 0 2
68400: PUSH
68401: LD_VAR 0 4
68405: ARRAY
68406: PUSH
68407: LD_INT 2
68409: ARRAY
68410: PPUSH
68411: CALL_OW 297
68415: PUSH
68416: LD_VAR 0 5
68420: LESS
68421: IFFALSE 68484
// begin hex := hexes [ i ] ;
68423: LD_ADDR_VAR 0 7
68427: PUSH
68428: LD_VAR 0 2
68432: PUSH
68433: LD_VAR 0 4
68437: ARRAY
68438: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68439: LD_ADDR_VAR 0 5
68443: PUSH
68444: LD_VAR 0 1
68448: PPUSH
68449: LD_VAR 0 2
68453: PUSH
68454: LD_VAR 0 4
68458: ARRAY
68459: PUSH
68460: LD_INT 1
68462: ARRAY
68463: PPUSH
68464: LD_VAR 0 2
68468: PUSH
68469: LD_VAR 0 4
68473: ARRAY
68474: PUSH
68475: LD_INT 2
68477: ARRAY
68478: PPUSH
68479: CALL_OW 297
68483: ST_TO_ADDR
// end ; end ;
68484: GO 68373
68486: POP
68487: POP
// result := hex ;
68488: LD_ADDR_VAR 0 3
68492: PUSH
68493: LD_VAR 0 7
68497: ST_TO_ADDR
// end ;
68498: LD_VAR 0 3
68502: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68503: LD_INT 0
68505: PPUSH
68506: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68507: LD_VAR 0 1
68511: NOT
68512: PUSH
68513: LD_VAR 0 1
68517: PUSH
68518: LD_INT 21
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 23
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PPUSH
68542: CALL_OW 69
68546: IN
68547: NOT
68548: OR
68549: IFFALSE 68553
// exit ;
68551: GO 68600
// for i = 1 to 3 do
68553: LD_ADDR_VAR 0 3
68557: PUSH
68558: DOUBLE
68559: LD_INT 1
68561: DEC
68562: ST_TO_ADDR
68563: LD_INT 3
68565: PUSH
68566: FOR_TO
68567: IFFALSE 68598
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 250
68578: PPUSH
68579: LD_VAR 0 1
68583: PPUSH
68584: CALL_OW 251
68588: PPUSH
68589: LD_INT 1
68591: PPUSH
68592: CALL_OW 453
68596: GO 68566
68598: POP
68599: POP
// end ;
68600: LD_VAR 0 2
68604: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68605: LD_INT 0
68607: PPUSH
68608: PPUSH
68609: PPUSH
68610: PPUSH
68611: PPUSH
68612: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68613: LD_VAR 0 1
68617: NOT
68618: PUSH
68619: LD_VAR 0 2
68623: NOT
68624: OR
68625: PUSH
68626: LD_VAR 0 1
68630: PPUSH
68631: CALL_OW 314
68635: OR
68636: IFFALSE 68640
// exit ;
68638: GO 69081
// x := GetX ( enemy_unit ) ;
68640: LD_ADDR_VAR 0 7
68644: PUSH
68645: LD_VAR 0 2
68649: PPUSH
68650: CALL_OW 250
68654: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68655: LD_ADDR_VAR 0 8
68659: PUSH
68660: LD_VAR 0 2
68664: PPUSH
68665: CALL_OW 251
68669: ST_TO_ADDR
// if not x or not y then
68670: LD_VAR 0 7
68674: NOT
68675: PUSH
68676: LD_VAR 0 8
68680: NOT
68681: OR
68682: IFFALSE 68686
// exit ;
68684: GO 69081
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68686: LD_ADDR_VAR 0 6
68690: PUSH
68691: LD_VAR 0 7
68695: PPUSH
68696: LD_INT 0
68698: PPUSH
68699: LD_INT 4
68701: PPUSH
68702: CALL_OW 272
68706: PUSH
68707: LD_VAR 0 8
68711: PPUSH
68712: LD_INT 0
68714: PPUSH
68715: LD_INT 4
68717: PPUSH
68718: CALL_OW 273
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_VAR 0 7
68731: PPUSH
68732: LD_INT 1
68734: PPUSH
68735: LD_INT 4
68737: PPUSH
68738: CALL_OW 272
68742: PUSH
68743: LD_VAR 0 8
68747: PPUSH
68748: LD_INT 1
68750: PPUSH
68751: LD_INT 4
68753: PPUSH
68754: CALL_OW 273
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_VAR 0 7
68767: PPUSH
68768: LD_INT 2
68770: PPUSH
68771: LD_INT 4
68773: PPUSH
68774: CALL_OW 272
68778: PUSH
68779: LD_VAR 0 8
68783: PPUSH
68784: LD_INT 2
68786: PPUSH
68787: LD_INT 4
68789: PPUSH
68790: CALL_OW 273
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_VAR 0 7
68803: PPUSH
68804: LD_INT 3
68806: PPUSH
68807: LD_INT 4
68809: PPUSH
68810: CALL_OW 272
68814: PUSH
68815: LD_VAR 0 8
68819: PPUSH
68820: LD_INT 3
68822: PPUSH
68823: LD_INT 4
68825: PPUSH
68826: CALL_OW 273
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_VAR 0 7
68839: PPUSH
68840: LD_INT 4
68842: PPUSH
68843: LD_INT 4
68845: PPUSH
68846: CALL_OW 272
68850: PUSH
68851: LD_VAR 0 8
68855: PPUSH
68856: LD_INT 4
68858: PPUSH
68859: LD_INT 4
68861: PPUSH
68862: CALL_OW 273
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_VAR 0 7
68875: PPUSH
68876: LD_INT 5
68878: PPUSH
68879: LD_INT 4
68881: PPUSH
68882: CALL_OW 272
68886: PUSH
68887: LD_VAR 0 8
68891: PPUSH
68892: LD_INT 5
68894: PPUSH
68895: LD_INT 4
68897: PPUSH
68898: CALL_OW 273
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: ST_TO_ADDR
// for i = tmp downto 1 do
68915: LD_ADDR_VAR 0 4
68919: PUSH
68920: DOUBLE
68921: LD_VAR 0 6
68925: INC
68926: ST_TO_ADDR
68927: LD_INT 1
68929: PUSH
68930: FOR_DOWNTO
68931: IFFALSE 69032
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68933: LD_VAR 0 6
68937: PUSH
68938: LD_VAR 0 4
68942: ARRAY
68943: PUSH
68944: LD_INT 1
68946: ARRAY
68947: PPUSH
68948: LD_VAR 0 6
68952: PUSH
68953: LD_VAR 0 4
68957: ARRAY
68958: PUSH
68959: LD_INT 2
68961: ARRAY
68962: PPUSH
68963: CALL_OW 488
68967: NOT
68968: PUSH
68969: LD_VAR 0 6
68973: PUSH
68974: LD_VAR 0 4
68978: ARRAY
68979: PUSH
68980: LD_INT 1
68982: ARRAY
68983: PPUSH
68984: LD_VAR 0 6
68988: PUSH
68989: LD_VAR 0 4
68993: ARRAY
68994: PUSH
68995: LD_INT 2
68997: ARRAY
68998: PPUSH
68999: CALL_OW 428
69003: PUSH
69004: LD_INT 0
69006: NONEQUAL
69007: OR
69008: IFFALSE 69030
// tmp := Delete ( tmp , i ) ;
69010: LD_ADDR_VAR 0 6
69014: PUSH
69015: LD_VAR 0 6
69019: PPUSH
69020: LD_VAR 0 4
69024: PPUSH
69025: CALL_OW 3
69029: ST_TO_ADDR
69030: GO 68930
69032: POP
69033: POP
// j := GetClosestHex ( unit , tmp ) ;
69034: LD_ADDR_VAR 0 5
69038: PUSH
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_VAR 0 6
69048: PPUSH
69049: CALL 68334 0 2
69053: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69054: LD_VAR 0 1
69058: PPUSH
69059: LD_VAR 0 5
69063: PUSH
69064: LD_INT 1
69066: ARRAY
69067: PPUSH
69068: LD_VAR 0 5
69072: PUSH
69073: LD_INT 2
69075: ARRAY
69076: PPUSH
69077: CALL_OW 111
// end ;
69081: LD_VAR 0 3
69085: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69086: LD_INT 0
69088: PPUSH
69089: PPUSH
69090: PPUSH
// uc_side = 0 ;
69091: LD_ADDR_OWVAR 20
69095: PUSH
69096: LD_INT 0
69098: ST_TO_ADDR
// uc_nation = 0 ;
69099: LD_ADDR_OWVAR 21
69103: PUSH
69104: LD_INT 0
69106: ST_TO_ADDR
// InitHc_All ( ) ;
69107: CALL_OW 584
// InitVc ;
69111: CALL_OW 20
// if mastodonts then
69115: LD_VAR 0 6
69119: IFFALSE 69186
// for i = 1 to mastodonts do
69121: LD_ADDR_VAR 0 11
69125: PUSH
69126: DOUBLE
69127: LD_INT 1
69129: DEC
69130: ST_TO_ADDR
69131: LD_VAR 0 6
69135: PUSH
69136: FOR_TO
69137: IFFALSE 69184
// begin vc_chassis := 31 ;
69139: LD_ADDR_OWVAR 37
69143: PUSH
69144: LD_INT 31
69146: ST_TO_ADDR
// vc_control := control_rider ;
69147: LD_ADDR_OWVAR 38
69151: PUSH
69152: LD_INT 4
69154: ST_TO_ADDR
// animal := CreateVehicle ;
69155: LD_ADDR_VAR 0 12
69159: PUSH
69160: CALL_OW 45
69164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69165: LD_VAR 0 12
69169: PPUSH
69170: LD_VAR 0 8
69174: PPUSH
69175: LD_INT 0
69177: PPUSH
69178: CALL 71321 0 3
// end ;
69182: GO 69136
69184: POP
69185: POP
// if horses then
69186: LD_VAR 0 5
69190: IFFALSE 69257
// for i = 1 to horses do
69192: LD_ADDR_VAR 0 11
69196: PUSH
69197: DOUBLE
69198: LD_INT 1
69200: DEC
69201: ST_TO_ADDR
69202: LD_VAR 0 5
69206: PUSH
69207: FOR_TO
69208: IFFALSE 69255
// begin hc_class := 21 ;
69210: LD_ADDR_OWVAR 28
69214: PUSH
69215: LD_INT 21
69217: ST_TO_ADDR
// hc_gallery :=  ;
69218: LD_ADDR_OWVAR 33
69222: PUSH
69223: LD_STRING 
69225: ST_TO_ADDR
// animal := CreateHuman ;
69226: LD_ADDR_VAR 0 12
69230: PUSH
69231: CALL_OW 44
69235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69236: LD_VAR 0 12
69240: PPUSH
69241: LD_VAR 0 8
69245: PPUSH
69246: LD_INT 0
69248: PPUSH
69249: CALL 71321 0 3
// end ;
69253: GO 69207
69255: POP
69256: POP
// if birds then
69257: LD_VAR 0 1
69261: IFFALSE 69328
// for i = 1 to birds do
69263: LD_ADDR_VAR 0 11
69267: PUSH
69268: DOUBLE
69269: LD_INT 1
69271: DEC
69272: ST_TO_ADDR
69273: LD_VAR 0 1
69277: PUSH
69278: FOR_TO
69279: IFFALSE 69326
// begin hc_class = 18 ;
69281: LD_ADDR_OWVAR 28
69285: PUSH
69286: LD_INT 18
69288: ST_TO_ADDR
// hc_gallery =  ;
69289: LD_ADDR_OWVAR 33
69293: PUSH
69294: LD_STRING 
69296: ST_TO_ADDR
// animal := CreateHuman ;
69297: LD_ADDR_VAR 0 12
69301: PUSH
69302: CALL_OW 44
69306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69307: LD_VAR 0 12
69311: PPUSH
69312: LD_VAR 0 8
69316: PPUSH
69317: LD_INT 0
69319: PPUSH
69320: CALL 71321 0 3
// end ;
69324: GO 69278
69326: POP
69327: POP
// if tigers then
69328: LD_VAR 0 2
69332: IFFALSE 69416
// for i = 1 to tigers do
69334: LD_ADDR_VAR 0 11
69338: PUSH
69339: DOUBLE
69340: LD_INT 1
69342: DEC
69343: ST_TO_ADDR
69344: LD_VAR 0 2
69348: PUSH
69349: FOR_TO
69350: IFFALSE 69414
// begin hc_class = class_tiger ;
69352: LD_ADDR_OWVAR 28
69356: PUSH
69357: LD_INT 14
69359: ST_TO_ADDR
// hc_gallery =  ;
69360: LD_ADDR_OWVAR 33
69364: PUSH
69365: LD_STRING 
69367: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69368: LD_ADDR_OWVAR 35
69372: PUSH
69373: LD_INT 7
69375: NEG
69376: PPUSH
69377: LD_INT 7
69379: PPUSH
69380: CALL_OW 12
69384: ST_TO_ADDR
// animal := CreateHuman ;
69385: LD_ADDR_VAR 0 12
69389: PUSH
69390: CALL_OW 44
69394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69395: LD_VAR 0 12
69399: PPUSH
69400: LD_VAR 0 8
69404: PPUSH
69405: LD_INT 0
69407: PPUSH
69408: CALL 71321 0 3
// end ;
69412: GO 69349
69414: POP
69415: POP
// if apemans then
69416: LD_VAR 0 3
69420: IFFALSE 69543
// for i = 1 to apemans do
69422: LD_ADDR_VAR 0 11
69426: PUSH
69427: DOUBLE
69428: LD_INT 1
69430: DEC
69431: ST_TO_ADDR
69432: LD_VAR 0 3
69436: PUSH
69437: FOR_TO
69438: IFFALSE 69541
// begin hc_class = class_apeman ;
69440: LD_ADDR_OWVAR 28
69444: PUSH
69445: LD_INT 12
69447: ST_TO_ADDR
// hc_gallery =  ;
69448: LD_ADDR_OWVAR 33
69452: PUSH
69453: LD_STRING 
69455: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69456: LD_ADDR_OWVAR 35
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PPUSH
69465: LD_INT 2
69467: PPUSH
69468: CALL_OW 12
69472: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69473: LD_ADDR_OWVAR 31
69477: PUSH
69478: LD_INT 1
69480: PPUSH
69481: LD_INT 3
69483: PPUSH
69484: CALL_OW 12
69488: PUSH
69489: LD_INT 1
69491: PPUSH
69492: LD_INT 3
69494: PPUSH
69495: CALL_OW 12
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: LD_INT 0
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: ST_TO_ADDR
// animal := CreateHuman ;
69512: LD_ADDR_VAR 0 12
69516: PUSH
69517: CALL_OW 44
69521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69522: LD_VAR 0 12
69526: PPUSH
69527: LD_VAR 0 8
69531: PPUSH
69532: LD_INT 0
69534: PPUSH
69535: CALL 71321 0 3
// end ;
69539: GO 69437
69541: POP
69542: POP
// if enchidnas then
69543: LD_VAR 0 4
69547: IFFALSE 69614
// for i = 1 to enchidnas do
69549: LD_ADDR_VAR 0 11
69553: PUSH
69554: DOUBLE
69555: LD_INT 1
69557: DEC
69558: ST_TO_ADDR
69559: LD_VAR 0 4
69563: PUSH
69564: FOR_TO
69565: IFFALSE 69612
// begin hc_class = 13 ;
69567: LD_ADDR_OWVAR 28
69571: PUSH
69572: LD_INT 13
69574: ST_TO_ADDR
// hc_gallery =  ;
69575: LD_ADDR_OWVAR 33
69579: PUSH
69580: LD_STRING 
69582: ST_TO_ADDR
// animal := CreateHuman ;
69583: LD_ADDR_VAR 0 12
69587: PUSH
69588: CALL_OW 44
69592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69593: LD_VAR 0 12
69597: PPUSH
69598: LD_VAR 0 8
69602: PPUSH
69603: LD_INT 0
69605: PPUSH
69606: CALL 71321 0 3
// end ;
69610: GO 69564
69612: POP
69613: POP
// if fishes then
69614: LD_VAR 0 7
69618: IFFALSE 69685
// for i = 1 to fishes do
69620: LD_ADDR_VAR 0 11
69624: PUSH
69625: DOUBLE
69626: LD_INT 1
69628: DEC
69629: ST_TO_ADDR
69630: LD_VAR 0 7
69634: PUSH
69635: FOR_TO
69636: IFFALSE 69683
// begin hc_class = 20 ;
69638: LD_ADDR_OWVAR 28
69642: PUSH
69643: LD_INT 20
69645: ST_TO_ADDR
// hc_gallery =  ;
69646: LD_ADDR_OWVAR 33
69650: PUSH
69651: LD_STRING 
69653: ST_TO_ADDR
// animal := CreateHuman ;
69654: LD_ADDR_VAR 0 12
69658: PUSH
69659: CALL_OW 44
69663: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69664: LD_VAR 0 12
69668: PPUSH
69669: LD_VAR 0 9
69673: PPUSH
69674: LD_INT 0
69676: PPUSH
69677: CALL 71321 0 3
// end ;
69681: GO 69635
69683: POP
69684: POP
// end ;
69685: LD_VAR 0 10
69689: RET
// export function WantHeal ( sci , unit ) ; begin
69690: LD_INT 0
69692: PPUSH
// if GetTaskList ( sci ) > 0 then
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 437
69702: PUSH
69703: LD_INT 0
69705: GREATER
69706: IFFALSE 69776
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69708: LD_VAR 0 1
69712: PPUSH
69713: CALL_OW 437
69717: PUSH
69718: LD_INT 1
69720: ARRAY
69721: PUSH
69722: LD_INT 1
69724: ARRAY
69725: PUSH
69726: LD_STRING l
69728: EQUAL
69729: PUSH
69730: LD_VAR 0 1
69734: PPUSH
69735: CALL_OW 437
69739: PUSH
69740: LD_INT 1
69742: ARRAY
69743: PUSH
69744: LD_INT 4
69746: ARRAY
69747: PUSH
69748: LD_VAR 0 2
69752: EQUAL
69753: AND
69754: IFFALSE 69766
// result := true else
69756: LD_ADDR_VAR 0 3
69760: PUSH
69761: LD_INT 1
69763: ST_TO_ADDR
69764: GO 69774
// result := false ;
69766: LD_ADDR_VAR 0 3
69770: PUSH
69771: LD_INT 0
69773: ST_TO_ADDR
// end else
69774: GO 69784
// result := false ;
69776: LD_ADDR_VAR 0 3
69780: PUSH
69781: LD_INT 0
69783: ST_TO_ADDR
// end ;
69784: LD_VAR 0 3
69788: RET
// export function HealTarget ( sci ) ; begin
69789: LD_INT 0
69791: PPUSH
// if not sci then
69792: LD_VAR 0 1
69796: NOT
69797: IFFALSE 69801
// exit ;
69799: GO 69866
// result := 0 ;
69801: LD_ADDR_VAR 0 2
69805: PUSH
69806: LD_INT 0
69808: ST_TO_ADDR
// if GetTaskList ( sci ) then
69809: LD_VAR 0 1
69813: PPUSH
69814: CALL_OW 437
69818: IFFALSE 69866
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69820: LD_VAR 0 1
69824: PPUSH
69825: CALL_OW 437
69829: PUSH
69830: LD_INT 1
69832: ARRAY
69833: PUSH
69834: LD_INT 1
69836: ARRAY
69837: PUSH
69838: LD_STRING l
69840: EQUAL
69841: IFFALSE 69866
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69843: LD_ADDR_VAR 0 2
69847: PUSH
69848: LD_VAR 0 1
69852: PPUSH
69853: CALL_OW 437
69857: PUSH
69858: LD_INT 1
69860: ARRAY
69861: PUSH
69862: LD_INT 4
69864: ARRAY
69865: ST_TO_ADDR
// end ;
69866: LD_VAR 0 2
69870: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69871: LD_INT 0
69873: PPUSH
69874: PPUSH
69875: PPUSH
69876: PPUSH
// if not base_units then
69877: LD_VAR 0 1
69881: NOT
69882: IFFALSE 69886
// exit ;
69884: GO 69973
// result := false ;
69886: LD_ADDR_VAR 0 2
69890: PUSH
69891: LD_INT 0
69893: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69894: LD_ADDR_VAR 0 5
69898: PUSH
69899: LD_VAR 0 1
69903: PPUSH
69904: LD_INT 21
69906: PUSH
69907: LD_INT 3
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PPUSH
69914: CALL_OW 72
69918: ST_TO_ADDR
// if not tmp then
69919: LD_VAR 0 5
69923: NOT
69924: IFFALSE 69928
// exit ;
69926: GO 69973
// for i in tmp do
69928: LD_ADDR_VAR 0 3
69932: PUSH
69933: LD_VAR 0 5
69937: PUSH
69938: FOR_IN
69939: IFFALSE 69971
// begin result := EnemyInRange ( i , 22 ) ;
69941: LD_ADDR_VAR 0 2
69945: PUSH
69946: LD_VAR 0 3
69950: PPUSH
69951: LD_INT 22
69953: PPUSH
69954: CALL 68209 0 2
69958: ST_TO_ADDR
// if result then
69959: LD_VAR 0 2
69963: IFFALSE 69969
// exit ;
69965: POP
69966: POP
69967: GO 69973
// end ;
69969: GO 69938
69971: POP
69972: POP
// end ;
69973: LD_VAR 0 2
69977: RET
// export function FilterByTag ( units , tag ) ; begin
69978: LD_INT 0
69980: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69981: LD_ADDR_VAR 0 3
69985: PUSH
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_INT 120
69993: PUSH
69994: LD_VAR 0 2
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PPUSH
70003: CALL_OW 72
70007: ST_TO_ADDR
// end ;
70008: LD_VAR 0 3
70012: RET
// export function IsDriver ( un ) ; begin
70013: LD_INT 0
70015: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70016: LD_ADDR_VAR 0 2
70020: PUSH
70021: LD_VAR 0 1
70025: PUSH
70026: LD_INT 55
70028: PUSH
70029: EMPTY
70030: LIST
70031: PPUSH
70032: CALL_OW 69
70036: IN
70037: ST_TO_ADDR
// end ;
70038: LD_VAR 0 2
70042: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70043: LD_INT 0
70045: PPUSH
70046: PPUSH
// list := [ ] ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: EMPTY
70053: ST_TO_ADDR
// case d of 0 :
70054: LD_VAR 0 3
70058: PUSH
70059: LD_INT 0
70061: DOUBLE
70062: EQUAL
70063: IFTRUE 70067
70065: GO 70200
70067: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70068: LD_ADDR_VAR 0 5
70072: PUSH
70073: LD_VAR 0 1
70077: PUSH
70078: LD_INT 4
70080: MINUS
70081: PUSH
70082: LD_VAR 0 2
70086: PUSH
70087: LD_INT 4
70089: MINUS
70090: PUSH
70091: LD_INT 2
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: PUSH
70099: LD_VAR 0 1
70103: PUSH
70104: LD_INT 3
70106: MINUS
70107: PUSH
70108: LD_VAR 0 2
70112: PUSH
70113: LD_INT 1
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: LIST
70120: PUSH
70121: LD_VAR 0 1
70125: PUSH
70126: LD_INT 4
70128: PLUS
70129: PUSH
70130: LD_VAR 0 2
70134: PUSH
70135: LD_INT 4
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: LIST
70142: PUSH
70143: LD_VAR 0 1
70147: PUSH
70148: LD_INT 3
70150: PLUS
70151: PUSH
70152: LD_VAR 0 2
70156: PUSH
70157: LD_INT 3
70159: PLUS
70160: PUSH
70161: LD_INT 5
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: PUSH
70169: LD_VAR 0 1
70173: PUSH
70174: LD_VAR 0 2
70178: PUSH
70179: LD_INT 4
70181: PLUS
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: LIST
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: ST_TO_ADDR
// end ; 1 :
70198: GO 70898
70200: LD_INT 1
70202: DOUBLE
70203: EQUAL
70204: IFTRUE 70208
70206: GO 70341
70208: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70209: LD_ADDR_VAR 0 5
70213: PUSH
70214: LD_VAR 0 1
70218: PUSH
70219: LD_VAR 0 2
70223: PUSH
70224: LD_INT 4
70226: MINUS
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: LIST
70235: PUSH
70236: LD_VAR 0 1
70240: PUSH
70241: LD_INT 3
70243: MINUS
70244: PUSH
70245: LD_VAR 0 2
70249: PUSH
70250: LD_INT 3
70252: MINUS
70253: PUSH
70254: LD_INT 2
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: PUSH
70262: LD_VAR 0 1
70266: PUSH
70267: LD_INT 4
70269: MINUS
70270: PUSH
70271: LD_VAR 0 2
70275: PUSH
70276: LD_INT 1
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: LIST
70283: PUSH
70284: LD_VAR 0 1
70288: PUSH
70289: LD_VAR 0 2
70293: PUSH
70294: LD_INT 3
70296: PLUS
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: LIST
70305: PUSH
70306: LD_VAR 0 1
70310: PUSH
70311: LD_INT 4
70313: PLUS
70314: PUSH
70315: LD_VAR 0 2
70319: PUSH
70320: LD_INT 4
70322: PLUS
70323: PUSH
70324: LD_INT 5
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: ST_TO_ADDR
// end ; 2 :
70339: GO 70898
70341: LD_INT 2
70343: DOUBLE
70344: EQUAL
70345: IFTRUE 70349
70347: GO 70478
70349: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70350: LD_ADDR_VAR 0 5
70354: PUSH
70355: LD_VAR 0 1
70359: PUSH
70360: LD_VAR 0 2
70364: PUSH
70365: LD_INT 3
70367: MINUS
70368: PUSH
70369: LD_INT 3
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: PUSH
70377: LD_VAR 0 1
70381: PUSH
70382: LD_INT 4
70384: PLUS
70385: PUSH
70386: LD_VAR 0 2
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: PUSH
70399: LD_VAR 0 1
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_INT 4
70411: PLUS
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: LIST
70420: PUSH
70421: LD_VAR 0 1
70425: PUSH
70426: LD_INT 3
70428: MINUS
70429: PUSH
70430: LD_VAR 0 2
70434: PUSH
70435: LD_INT 1
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 1
70447: PUSH
70448: LD_INT 4
70450: MINUS
70451: PUSH
70452: LD_VAR 0 2
70456: PUSH
70457: LD_INT 4
70459: MINUS
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: LIST
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: ST_TO_ADDR
// end ; 3 :
70476: GO 70898
70478: LD_INT 3
70480: DOUBLE
70481: EQUAL
70482: IFTRUE 70486
70484: GO 70619
70486: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70487: LD_ADDR_VAR 0 5
70491: PUSH
70492: LD_VAR 0 1
70496: PUSH
70497: LD_INT 3
70499: PLUS
70500: PUSH
70501: LD_VAR 0 2
70505: PUSH
70506: LD_INT 4
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: LD_VAR 0 1
70518: PUSH
70519: LD_INT 4
70521: PLUS
70522: PUSH
70523: LD_VAR 0 2
70527: PUSH
70528: LD_INT 4
70530: PLUS
70531: PUSH
70532: LD_INT 5
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: LIST
70539: PUSH
70540: LD_VAR 0 1
70544: PUSH
70545: LD_INT 4
70547: MINUS
70548: PUSH
70549: LD_VAR 0 2
70553: PUSH
70554: LD_INT 1
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: LIST
70561: PUSH
70562: LD_VAR 0 1
70566: PUSH
70567: LD_VAR 0 2
70571: PUSH
70572: LD_INT 4
70574: MINUS
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: LIST
70583: PUSH
70584: LD_VAR 0 1
70588: PUSH
70589: LD_INT 3
70591: MINUS
70592: PUSH
70593: LD_VAR 0 2
70597: PUSH
70598: LD_INT 3
70600: MINUS
70601: PUSH
70602: LD_INT 2
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: LIST
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: ST_TO_ADDR
// end ; 4 :
70617: GO 70898
70619: LD_INT 4
70621: DOUBLE
70622: EQUAL
70623: IFTRUE 70627
70625: GO 70760
70627: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70628: LD_ADDR_VAR 0 5
70632: PUSH
70633: LD_VAR 0 1
70637: PUSH
70638: LD_VAR 0 2
70642: PUSH
70643: LD_INT 4
70645: PLUS
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: LIST
70654: PUSH
70655: LD_VAR 0 1
70659: PUSH
70660: LD_INT 3
70662: PLUS
70663: PUSH
70664: LD_VAR 0 2
70668: PUSH
70669: LD_INT 3
70671: PLUS
70672: PUSH
70673: LD_INT 5
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: LIST
70680: PUSH
70681: LD_VAR 0 1
70685: PUSH
70686: LD_INT 4
70688: PLUS
70689: PUSH
70690: LD_VAR 0 2
70694: PUSH
70695: LD_INT 4
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: LIST
70702: PUSH
70703: LD_VAR 0 1
70707: PUSH
70708: LD_VAR 0 2
70712: PUSH
70713: LD_INT 3
70715: MINUS
70716: PUSH
70717: LD_INT 3
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: PUSH
70725: LD_VAR 0 1
70729: PUSH
70730: LD_INT 4
70732: MINUS
70733: PUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_INT 4
70741: MINUS
70742: PUSH
70743: LD_INT 2
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: LIST
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: ST_TO_ADDR
// end ; 5 :
70758: GO 70898
70760: LD_INT 5
70762: DOUBLE
70763: EQUAL
70764: IFTRUE 70768
70766: GO 70897
70768: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70769: LD_ADDR_VAR 0 5
70773: PUSH
70774: LD_VAR 0 1
70778: PUSH
70779: LD_INT 4
70781: MINUS
70782: PUSH
70783: LD_VAR 0 2
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: PUSH
70796: LD_VAR 0 1
70800: PUSH
70801: LD_VAR 0 2
70805: PUSH
70806: LD_INT 4
70808: MINUS
70809: PUSH
70810: LD_INT 3
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: LIST
70817: PUSH
70818: LD_VAR 0 1
70822: PUSH
70823: LD_INT 4
70825: PLUS
70826: PUSH
70827: LD_VAR 0 2
70831: PUSH
70832: LD_INT 4
70834: PLUS
70835: PUSH
70836: LD_INT 5
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: LIST
70843: PUSH
70844: LD_VAR 0 1
70848: PUSH
70849: LD_INT 3
70851: PLUS
70852: PUSH
70853: LD_VAR 0 2
70857: PUSH
70858: LD_INT 4
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: PUSH
70866: LD_VAR 0 1
70870: PUSH
70871: LD_VAR 0 2
70875: PUSH
70876: LD_INT 3
70878: PLUS
70879: PUSH
70880: LD_INT 0
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: LIST
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: ST_TO_ADDR
// end ; end ;
70895: GO 70898
70897: POP
// result := list ;
70898: LD_ADDR_VAR 0 4
70902: PUSH
70903: LD_VAR 0 5
70907: ST_TO_ADDR
// end ;
70908: LD_VAR 0 4
70912: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70913: LD_INT 0
70915: PPUSH
70916: PPUSH
70917: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70918: LD_VAR 0 1
70922: NOT
70923: PUSH
70924: LD_VAR 0 2
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: LD_INT 2
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: LD_INT 4
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: IN
70947: NOT
70948: OR
70949: IFFALSE 70953
// exit ;
70951: GO 71045
// tmp := [ ] ;
70953: LD_ADDR_VAR 0 5
70957: PUSH
70958: EMPTY
70959: ST_TO_ADDR
// for i in units do
70960: LD_ADDR_VAR 0 4
70964: PUSH
70965: LD_VAR 0 1
70969: PUSH
70970: FOR_IN
70971: IFFALSE 71014
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70973: LD_ADDR_VAR 0 5
70977: PUSH
70978: LD_VAR 0 5
70982: PPUSH
70983: LD_VAR 0 5
70987: PUSH
70988: LD_INT 1
70990: PLUS
70991: PPUSH
70992: LD_VAR 0 4
70996: PPUSH
70997: LD_VAR 0 2
71001: PPUSH
71002: CALL_OW 259
71006: PPUSH
71007: CALL_OW 2
71011: ST_TO_ADDR
71012: GO 70970
71014: POP
71015: POP
// if not tmp then
71016: LD_VAR 0 5
71020: NOT
71021: IFFALSE 71025
// exit ;
71023: GO 71045
// result := SortListByListDesc ( units , tmp ) ;
71025: LD_ADDR_VAR 0 3
71029: PUSH
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 5
71039: PPUSH
71040: CALL_OW 77
71044: ST_TO_ADDR
// end ;
71045: LD_VAR 0 3
71049: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71050: LD_INT 0
71052: PPUSH
71053: PPUSH
71054: PPUSH
// result := false ;
71055: LD_ADDR_VAR 0 3
71059: PUSH
71060: LD_INT 0
71062: ST_TO_ADDR
// x := GetX ( building ) ;
71063: LD_ADDR_VAR 0 4
71067: PUSH
71068: LD_VAR 0 2
71072: PPUSH
71073: CALL_OW 250
71077: ST_TO_ADDR
// y := GetY ( building ) ;
71078: LD_ADDR_VAR 0 5
71082: PUSH
71083: LD_VAR 0 2
71087: PPUSH
71088: CALL_OW 251
71092: ST_TO_ADDR
// if not building or not x or not y then
71093: LD_VAR 0 2
71097: NOT
71098: PUSH
71099: LD_VAR 0 4
71103: NOT
71104: OR
71105: PUSH
71106: LD_VAR 0 5
71110: NOT
71111: OR
71112: IFFALSE 71116
// exit ;
71114: GO 71208
// if GetTaskList ( unit ) then
71116: LD_VAR 0 1
71120: PPUSH
71121: CALL_OW 437
71125: IFFALSE 71208
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71127: LD_STRING e
71129: PUSH
71130: LD_VAR 0 1
71134: PPUSH
71135: CALL_OW 437
71139: PUSH
71140: LD_INT 1
71142: ARRAY
71143: PUSH
71144: LD_INT 1
71146: ARRAY
71147: EQUAL
71148: PUSH
71149: LD_VAR 0 4
71153: PUSH
71154: LD_VAR 0 1
71158: PPUSH
71159: CALL_OW 437
71163: PUSH
71164: LD_INT 1
71166: ARRAY
71167: PUSH
71168: LD_INT 2
71170: ARRAY
71171: EQUAL
71172: AND
71173: PUSH
71174: LD_VAR 0 5
71178: PUSH
71179: LD_VAR 0 1
71183: PPUSH
71184: CALL_OW 437
71188: PUSH
71189: LD_INT 1
71191: ARRAY
71192: PUSH
71193: LD_INT 3
71195: ARRAY
71196: EQUAL
71197: AND
71198: IFFALSE 71208
// result := true end ;
71200: LD_ADDR_VAR 0 3
71204: PUSH
71205: LD_INT 1
71207: ST_TO_ADDR
// end ;
71208: LD_VAR 0 3
71212: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71213: LD_INT 0
71215: PPUSH
// result := false ;
71216: LD_ADDR_VAR 0 4
71220: PUSH
71221: LD_INT 0
71223: ST_TO_ADDR
// if GetTaskList ( unit ) then
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 437
71233: IFFALSE 71316
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71235: LD_STRING M
71237: PUSH
71238: LD_VAR 0 1
71242: PPUSH
71243: CALL_OW 437
71247: PUSH
71248: LD_INT 1
71250: ARRAY
71251: PUSH
71252: LD_INT 1
71254: ARRAY
71255: EQUAL
71256: PUSH
71257: LD_VAR 0 2
71261: PUSH
71262: LD_VAR 0 1
71266: PPUSH
71267: CALL_OW 437
71271: PUSH
71272: LD_INT 1
71274: ARRAY
71275: PUSH
71276: LD_INT 2
71278: ARRAY
71279: EQUAL
71280: AND
71281: PUSH
71282: LD_VAR 0 3
71286: PUSH
71287: LD_VAR 0 1
71291: PPUSH
71292: CALL_OW 437
71296: PUSH
71297: LD_INT 1
71299: ARRAY
71300: PUSH
71301: LD_INT 3
71303: ARRAY
71304: EQUAL
71305: AND
71306: IFFALSE 71316
// result := true ;
71308: LD_ADDR_VAR 0 4
71312: PUSH
71313: LD_INT 1
71315: ST_TO_ADDR
// end ; end ;
71316: LD_VAR 0 4
71320: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71321: LD_INT 0
71323: PPUSH
71324: PPUSH
71325: PPUSH
71326: PPUSH
// if not unit or not area then
71327: LD_VAR 0 1
71331: NOT
71332: PUSH
71333: LD_VAR 0 2
71337: NOT
71338: OR
71339: IFFALSE 71343
// exit ;
71341: GO 71507
// tmp := AreaToList ( area , i ) ;
71343: LD_ADDR_VAR 0 6
71347: PUSH
71348: LD_VAR 0 2
71352: PPUSH
71353: LD_VAR 0 5
71357: PPUSH
71358: CALL_OW 517
71362: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71363: LD_ADDR_VAR 0 5
71367: PUSH
71368: DOUBLE
71369: LD_INT 1
71371: DEC
71372: ST_TO_ADDR
71373: LD_VAR 0 6
71377: PUSH
71378: LD_INT 1
71380: ARRAY
71381: PUSH
71382: FOR_TO
71383: IFFALSE 71505
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71385: LD_ADDR_VAR 0 7
71389: PUSH
71390: LD_VAR 0 6
71394: PUSH
71395: LD_INT 1
71397: ARRAY
71398: PUSH
71399: LD_VAR 0 5
71403: ARRAY
71404: PUSH
71405: LD_VAR 0 6
71409: PUSH
71410: LD_INT 2
71412: ARRAY
71413: PUSH
71414: LD_VAR 0 5
71418: ARRAY
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71424: LD_VAR 0 7
71428: PUSH
71429: LD_INT 1
71431: ARRAY
71432: PPUSH
71433: LD_VAR 0 7
71437: PUSH
71438: LD_INT 2
71440: ARRAY
71441: PPUSH
71442: CALL_OW 428
71446: PUSH
71447: LD_INT 0
71449: EQUAL
71450: IFFALSE 71503
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71452: LD_VAR 0 1
71456: PPUSH
71457: LD_VAR 0 7
71461: PUSH
71462: LD_INT 1
71464: ARRAY
71465: PPUSH
71466: LD_VAR 0 7
71470: PUSH
71471: LD_INT 2
71473: ARRAY
71474: PPUSH
71475: LD_VAR 0 3
71479: PPUSH
71480: CALL_OW 48
// result := IsPlaced ( unit ) ;
71484: LD_ADDR_VAR 0 4
71488: PUSH
71489: LD_VAR 0 1
71493: PPUSH
71494: CALL_OW 305
71498: ST_TO_ADDR
// exit ;
71499: POP
71500: POP
71501: GO 71507
// end ; end ;
71503: GO 71382
71505: POP
71506: POP
// end ;
71507: LD_VAR 0 4
71511: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71512: LD_INT 0
71514: PPUSH
71515: PPUSH
71516: PPUSH
// if not side or side > 8 then
71517: LD_VAR 0 1
71521: NOT
71522: PUSH
71523: LD_VAR 0 1
71527: PUSH
71528: LD_INT 8
71530: GREATER
71531: OR
71532: IFFALSE 71536
// exit ;
71534: GO 71723
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71536: LD_ADDR_VAR 0 4
71540: PUSH
71541: LD_INT 22
71543: PUSH
71544: LD_VAR 0 1
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 21
71555: PUSH
71556: LD_INT 3
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PPUSH
71567: CALL_OW 69
71571: ST_TO_ADDR
// if not tmp then
71572: LD_VAR 0 4
71576: NOT
71577: IFFALSE 71581
// exit ;
71579: GO 71723
// enable_addtolog := true ;
71581: LD_ADDR_OWVAR 81
71585: PUSH
71586: LD_INT 1
71588: ST_TO_ADDR
// AddToLog ( [ ) ;
71589: LD_STRING [
71591: PPUSH
71592: CALL_OW 561
// for i in tmp do
71596: LD_ADDR_VAR 0 3
71600: PUSH
71601: LD_VAR 0 4
71605: PUSH
71606: FOR_IN
71607: IFFALSE 71714
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71609: LD_STRING [
71611: PUSH
71612: LD_VAR 0 3
71616: PPUSH
71617: CALL_OW 266
71621: STR
71622: PUSH
71623: LD_STRING , 
71625: STR
71626: PUSH
71627: LD_VAR 0 3
71631: PPUSH
71632: CALL_OW 250
71636: STR
71637: PUSH
71638: LD_STRING , 
71640: STR
71641: PUSH
71642: LD_VAR 0 3
71646: PPUSH
71647: CALL_OW 251
71651: STR
71652: PUSH
71653: LD_STRING , 
71655: STR
71656: PUSH
71657: LD_VAR 0 3
71661: PPUSH
71662: CALL_OW 254
71666: STR
71667: PUSH
71668: LD_STRING , 
71670: STR
71671: PUSH
71672: LD_VAR 0 3
71676: PPUSH
71677: LD_INT 1
71679: PPUSH
71680: CALL_OW 268
71684: STR
71685: PUSH
71686: LD_STRING , 
71688: STR
71689: PUSH
71690: LD_VAR 0 3
71694: PPUSH
71695: LD_INT 2
71697: PPUSH
71698: CALL_OW 268
71702: STR
71703: PUSH
71704: LD_STRING ],
71706: STR
71707: PPUSH
71708: CALL_OW 561
// end ;
71712: GO 71606
71714: POP
71715: POP
// AddToLog ( ]; ) ;
71716: LD_STRING ];
71718: PPUSH
71719: CALL_OW 561
// end ;
71723: LD_VAR 0 2
71727: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71728: LD_INT 0
71730: PPUSH
71731: PPUSH
71732: PPUSH
71733: PPUSH
71734: PPUSH
// if not area or not rate or not max then
71735: LD_VAR 0 1
71739: NOT
71740: PUSH
71741: LD_VAR 0 2
71745: NOT
71746: OR
71747: PUSH
71748: LD_VAR 0 4
71752: NOT
71753: OR
71754: IFFALSE 71758
// exit ;
71756: GO 71947
// while 1 do
71758: LD_INT 1
71760: IFFALSE 71947
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71762: LD_ADDR_VAR 0 9
71766: PUSH
71767: LD_VAR 0 1
71771: PPUSH
71772: LD_INT 1
71774: PPUSH
71775: CALL_OW 287
71779: PUSH
71780: LD_INT 10
71782: MUL
71783: ST_TO_ADDR
// r := rate / 10 ;
71784: LD_ADDR_VAR 0 7
71788: PUSH
71789: LD_VAR 0 2
71793: PUSH
71794: LD_INT 10
71796: DIVREAL
71797: ST_TO_ADDR
// time := 1 1$00 ;
71798: LD_ADDR_VAR 0 8
71802: PUSH
71803: LD_INT 2100
71805: ST_TO_ADDR
// if amount < min then
71806: LD_VAR 0 9
71810: PUSH
71811: LD_VAR 0 3
71815: LESS
71816: IFFALSE 71834
// r := r * 2 else
71818: LD_ADDR_VAR 0 7
71822: PUSH
71823: LD_VAR 0 7
71827: PUSH
71828: LD_INT 2
71830: MUL
71831: ST_TO_ADDR
71832: GO 71860
// if amount > max then
71834: LD_VAR 0 9
71838: PUSH
71839: LD_VAR 0 4
71843: GREATER
71844: IFFALSE 71860
// r := r / 2 ;
71846: LD_ADDR_VAR 0 7
71850: PUSH
71851: LD_VAR 0 7
71855: PUSH
71856: LD_INT 2
71858: DIVREAL
71859: ST_TO_ADDR
// time := time / r ;
71860: LD_ADDR_VAR 0 8
71864: PUSH
71865: LD_VAR 0 8
71869: PUSH
71870: LD_VAR 0 7
71874: DIVREAL
71875: ST_TO_ADDR
// if time < 0 then
71876: LD_VAR 0 8
71880: PUSH
71881: LD_INT 0
71883: LESS
71884: IFFALSE 71901
// time := time * - 1 ;
71886: LD_ADDR_VAR 0 8
71890: PUSH
71891: LD_VAR 0 8
71895: PUSH
71896: LD_INT 1
71898: NEG
71899: MUL
71900: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71901: LD_VAR 0 8
71905: PUSH
71906: LD_INT 35
71908: PPUSH
71909: LD_INT 875
71911: PPUSH
71912: CALL_OW 12
71916: PLUS
71917: PPUSH
71918: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71922: LD_INT 1
71924: PPUSH
71925: LD_INT 5
71927: PPUSH
71928: CALL_OW 12
71932: PPUSH
71933: LD_VAR 0 1
71937: PPUSH
71938: LD_INT 1
71940: PPUSH
71941: CALL_OW 55
// end ;
71945: GO 71758
// end ;
71947: LD_VAR 0 5
71951: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71952: LD_INT 0
71954: PPUSH
71955: PPUSH
71956: PPUSH
71957: PPUSH
71958: PPUSH
71959: PPUSH
71960: PPUSH
71961: PPUSH
// if not turrets or not factories then
71962: LD_VAR 0 1
71966: NOT
71967: PUSH
71968: LD_VAR 0 2
71972: NOT
71973: OR
71974: IFFALSE 71978
// exit ;
71976: GO 72285
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71978: LD_ADDR_VAR 0 10
71982: PUSH
71983: LD_INT 5
71985: PUSH
71986: LD_INT 6
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 2
71995: PUSH
71996: LD_INT 4
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 3
72005: PUSH
72006: LD_INT 5
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 24
72020: PUSH
72021: LD_INT 25
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 23
72030: PUSH
72031: LD_INT 27
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 42
72044: PUSH
72045: LD_INT 43
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 44
72054: PUSH
72055: LD_INT 46
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 45
72064: PUSH
72065: LD_INT 47
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: LIST
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: LIST
72081: ST_TO_ADDR
// result := [ ] ;
72082: LD_ADDR_VAR 0 3
72086: PUSH
72087: EMPTY
72088: ST_TO_ADDR
// for i in turrets do
72089: LD_ADDR_VAR 0 4
72093: PUSH
72094: LD_VAR 0 1
72098: PUSH
72099: FOR_IN
72100: IFFALSE 72283
// begin nat := GetNation ( i ) ;
72102: LD_ADDR_VAR 0 7
72106: PUSH
72107: LD_VAR 0 4
72111: PPUSH
72112: CALL_OW 248
72116: ST_TO_ADDR
// weapon := 0 ;
72117: LD_ADDR_VAR 0 8
72121: PUSH
72122: LD_INT 0
72124: ST_TO_ADDR
// if not nat then
72125: LD_VAR 0 7
72129: NOT
72130: IFFALSE 72134
// continue ;
72132: GO 72099
// for j in list [ nat ] do
72134: LD_ADDR_VAR 0 5
72138: PUSH
72139: LD_VAR 0 10
72143: PUSH
72144: LD_VAR 0 7
72148: ARRAY
72149: PUSH
72150: FOR_IN
72151: IFFALSE 72192
// if GetBWeapon ( i ) = j [ 1 ] then
72153: LD_VAR 0 4
72157: PPUSH
72158: CALL_OW 269
72162: PUSH
72163: LD_VAR 0 5
72167: PUSH
72168: LD_INT 1
72170: ARRAY
72171: EQUAL
72172: IFFALSE 72190
// begin weapon := j [ 2 ] ;
72174: LD_ADDR_VAR 0 8
72178: PUSH
72179: LD_VAR 0 5
72183: PUSH
72184: LD_INT 2
72186: ARRAY
72187: ST_TO_ADDR
// break ;
72188: GO 72192
// end ;
72190: GO 72150
72192: POP
72193: POP
// if not weapon then
72194: LD_VAR 0 8
72198: NOT
72199: IFFALSE 72203
// continue ;
72201: GO 72099
// for k in factories do
72203: LD_ADDR_VAR 0 6
72207: PUSH
72208: LD_VAR 0 2
72212: PUSH
72213: FOR_IN
72214: IFFALSE 72279
// begin weapons := AvailableWeaponList ( k ) ;
72216: LD_ADDR_VAR 0 9
72220: PUSH
72221: LD_VAR 0 6
72225: PPUSH
72226: CALL_OW 478
72230: ST_TO_ADDR
// if not weapons then
72231: LD_VAR 0 9
72235: NOT
72236: IFFALSE 72240
// continue ;
72238: GO 72213
// if weapon in weapons then
72240: LD_VAR 0 8
72244: PUSH
72245: LD_VAR 0 9
72249: IN
72250: IFFALSE 72277
// begin result := [ i , weapon ] ;
72252: LD_ADDR_VAR 0 3
72256: PUSH
72257: LD_VAR 0 4
72261: PUSH
72262: LD_VAR 0 8
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: ST_TO_ADDR
// exit ;
72271: POP
72272: POP
72273: POP
72274: POP
72275: GO 72285
// end ; end ;
72277: GO 72213
72279: POP
72280: POP
// end ;
72281: GO 72099
72283: POP
72284: POP
// end ;
72285: LD_VAR 0 3
72289: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72290: LD_INT 0
72292: PPUSH
// if not side or side > 8 then
72293: LD_VAR 0 3
72297: NOT
72298: PUSH
72299: LD_VAR 0 3
72303: PUSH
72304: LD_INT 8
72306: GREATER
72307: OR
72308: IFFALSE 72312
// exit ;
72310: GO 72371
// if not range then
72312: LD_VAR 0 4
72316: NOT
72317: IFFALSE 72328
// range := - 12 ;
72319: LD_ADDR_VAR 0 4
72323: PUSH
72324: LD_INT 12
72326: NEG
72327: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72328: LD_VAR 0 1
72332: PPUSH
72333: LD_VAR 0 2
72337: PPUSH
72338: LD_VAR 0 3
72342: PPUSH
72343: LD_VAR 0 4
72347: PPUSH
72348: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72352: LD_VAR 0 1
72356: PPUSH
72357: LD_VAR 0 2
72361: PPUSH
72362: LD_VAR 0 3
72366: PPUSH
72367: CALL_OW 331
// end ;
72371: LD_VAR 0 5
72375: RET
// export function Video ( mode ) ; begin
72376: LD_INT 0
72378: PPUSH
// ingame_video = mode ;
72379: LD_ADDR_OWVAR 52
72383: PUSH
72384: LD_VAR 0 1
72388: ST_TO_ADDR
// interface_hidden = mode ;
72389: LD_ADDR_OWVAR 54
72393: PUSH
72394: LD_VAR 0 1
72398: ST_TO_ADDR
// end ;
72399: LD_VAR 0 2
72403: RET
// export function Join ( array , element ) ; begin
72404: LD_INT 0
72406: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72407: LD_ADDR_VAR 0 3
72411: PUSH
72412: LD_VAR 0 1
72416: PPUSH
72417: LD_VAR 0 1
72421: PUSH
72422: LD_INT 1
72424: PLUS
72425: PPUSH
72426: LD_VAR 0 2
72430: PPUSH
72431: CALL_OW 1
72435: ST_TO_ADDR
// end ;
72436: LD_VAR 0 3
72440: RET
// export function JoinUnion ( array , element ) ; begin
72441: LD_INT 0
72443: PPUSH
// result := array union element ;
72444: LD_ADDR_VAR 0 3
72448: PUSH
72449: LD_VAR 0 1
72453: PUSH
72454: LD_VAR 0 2
72458: UNION
72459: ST_TO_ADDR
// end ;
72460: LD_VAR 0 3
72464: RET
// export function GetBehemoths ( side ) ; begin
72465: LD_INT 0
72467: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72468: LD_ADDR_VAR 0 2
72472: PUSH
72473: LD_INT 22
72475: PUSH
72476: LD_VAR 0 1
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 31
72487: PUSH
72488: LD_INT 25
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PPUSH
72499: CALL_OW 69
72503: ST_TO_ADDR
// end ;
72504: LD_VAR 0 2
72508: RET
// export function Shuffle ( array ) ; var i , index ; begin
72509: LD_INT 0
72511: PPUSH
72512: PPUSH
72513: PPUSH
// result := [ ] ;
72514: LD_ADDR_VAR 0 2
72518: PUSH
72519: EMPTY
72520: ST_TO_ADDR
// if not array then
72521: LD_VAR 0 1
72525: NOT
72526: IFFALSE 72530
// exit ;
72528: GO 72629
// Randomize ;
72530: CALL_OW 10
// for i = array downto 1 do
72534: LD_ADDR_VAR 0 3
72538: PUSH
72539: DOUBLE
72540: LD_VAR 0 1
72544: INC
72545: ST_TO_ADDR
72546: LD_INT 1
72548: PUSH
72549: FOR_DOWNTO
72550: IFFALSE 72627
// begin index := rand ( 1 , array ) ;
72552: LD_ADDR_VAR 0 4
72556: PUSH
72557: LD_INT 1
72559: PPUSH
72560: LD_VAR 0 1
72564: PPUSH
72565: CALL_OW 12
72569: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72570: LD_ADDR_VAR 0 2
72574: PUSH
72575: LD_VAR 0 2
72579: PPUSH
72580: LD_VAR 0 2
72584: PUSH
72585: LD_INT 1
72587: PLUS
72588: PPUSH
72589: LD_VAR 0 1
72593: PUSH
72594: LD_VAR 0 4
72598: ARRAY
72599: PPUSH
72600: CALL_OW 2
72604: ST_TO_ADDR
// array := Delete ( array , index ) ;
72605: LD_ADDR_VAR 0 1
72609: PUSH
72610: LD_VAR 0 1
72614: PPUSH
72615: LD_VAR 0 4
72619: PPUSH
72620: CALL_OW 3
72624: ST_TO_ADDR
// end ;
72625: GO 72549
72627: POP
72628: POP
// end ;
72629: LD_VAR 0 2
72633: RET
// export function GetBaseMaterials ( base ) ; begin
72634: LD_INT 0
72636: PPUSH
// result := [ 0 , 0 , 0 ] ;
72637: LD_ADDR_VAR 0 2
72641: PUSH
72642: LD_INT 0
72644: PUSH
72645: LD_INT 0
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: ST_TO_ADDR
// if not base then
72656: LD_VAR 0 1
72660: NOT
72661: IFFALSE 72665
// exit ;
72663: GO 72714
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72665: LD_ADDR_VAR 0 2
72669: PUSH
72670: LD_VAR 0 1
72674: PPUSH
72675: LD_INT 1
72677: PPUSH
72678: CALL_OW 275
72682: PUSH
72683: LD_VAR 0 1
72687: PPUSH
72688: LD_INT 2
72690: PPUSH
72691: CALL_OW 275
72695: PUSH
72696: LD_VAR 0 1
72700: PPUSH
72701: LD_INT 3
72703: PPUSH
72704: CALL_OW 275
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: LIST
72713: ST_TO_ADDR
// end ;
72714: LD_VAR 0 2
72718: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72719: LD_INT 0
72721: PPUSH
72722: PPUSH
// result := array ;
72723: LD_ADDR_VAR 0 3
72727: PUSH
72728: LD_VAR 0 1
72732: ST_TO_ADDR
// if size > 0 then
72733: LD_VAR 0 2
72737: PUSH
72738: LD_INT 0
72740: GREATER
72741: IFFALSE 72787
// for i := array downto size do
72743: LD_ADDR_VAR 0 4
72747: PUSH
72748: DOUBLE
72749: LD_VAR 0 1
72753: INC
72754: ST_TO_ADDR
72755: LD_VAR 0 2
72759: PUSH
72760: FOR_DOWNTO
72761: IFFALSE 72785
// result := Delete ( result , result ) ;
72763: LD_ADDR_VAR 0 3
72767: PUSH
72768: LD_VAR 0 3
72772: PPUSH
72773: LD_VAR 0 3
72777: PPUSH
72778: CALL_OW 3
72782: ST_TO_ADDR
72783: GO 72760
72785: POP
72786: POP
// end ;
72787: LD_VAR 0 3
72791: RET
// export function ComExit ( unit ) ; var tmp ; begin
72792: LD_INT 0
72794: PPUSH
72795: PPUSH
// if not IsInUnit ( unit ) then
72796: LD_VAR 0 1
72800: PPUSH
72801: CALL_OW 310
72805: NOT
72806: IFFALSE 72810
// exit ;
72808: GO 72870
// tmp := IsInUnit ( unit ) ;
72810: LD_ADDR_VAR 0 3
72814: PUSH
72815: LD_VAR 0 1
72819: PPUSH
72820: CALL_OW 310
72824: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72825: LD_VAR 0 3
72829: PPUSH
72830: CALL_OW 247
72834: PUSH
72835: LD_INT 2
72837: EQUAL
72838: IFFALSE 72851
// ComExitVehicle ( unit ) else
72840: LD_VAR 0 1
72844: PPUSH
72845: CALL_OW 121
72849: GO 72860
// ComExitBuilding ( unit ) ;
72851: LD_VAR 0 1
72855: PPUSH
72856: CALL_OW 122
// result := tmp ;
72860: LD_ADDR_VAR 0 2
72864: PUSH
72865: LD_VAR 0 3
72869: ST_TO_ADDR
// end ;
72870: LD_VAR 0 2
72874: RET
// export function ComExitAll ( units ) ; var i ; begin
72875: LD_INT 0
72877: PPUSH
72878: PPUSH
// if not units then
72879: LD_VAR 0 1
72883: NOT
72884: IFFALSE 72888
// exit ;
72886: GO 72914
// for i in units do
72888: LD_ADDR_VAR 0 3
72892: PUSH
72893: LD_VAR 0 1
72897: PUSH
72898: FOR_IN
72899: IFFALSE 72912
// ComExit ( i ) ;
72901: LD_VAR 0 3
72905: PPUSH
72906: CALL 72792 0 1
72910: GO 72898
72912: POP
72913: POP
// end ;
72914: LD_VAR 0 2
72918: RET
// export function ResetHc ; begin
72919: LD_INT 0
72921: PPUSH
// InitHc ;
72922: CALL_OW 19
// hc_importance := 0 ;
72926: LD_ADDR_OWVAR 32
72930: PUSH
72931: LD_INT 0
72933: ST_TO_ADDR
// end ;
72934: LD_VAR 0 1
72938: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72939: LD_INT 0
72941: PPUSH
72942: PPUSH
72943: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72944: LD_ADDR_VAR 0 6
72948: PUSH
72949: LD_VAR 0 1
72953: PUSH
72954: LD_VAR 0 3
72958: PLUS
72959: PUSH
72960: LD_INT 2
72962: DIV
72963: ST_TO_ADDR
// if _x < 0 then
72964: LD_VAR 0 6
72968: PUSH
72969: LD_INT 0
72971: LESS
72972: IFFALSE 72989
// _x := _x * - 1 ;
72974: LD_ADDR_VAR 0 6
72978: PUSH
72979: LD_VAR 0 6
72983: PUSH
72984: LD_INT 1
72986: NEG
72987: MUL
72988: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72989: LD_ADDR_VAR 0 7
72993: PUSH
72994: LD_VAR 0 2
72998: PUSH
72999: LD_VAR 0 4
73003: PLUS
73004: PUSH
73005: LD_INT 2
73007: DIV
73008: ST_TO_ADDR
// if _y < 0 then
73009: LD_VAR 0 7
73013: PUSH
73014: LD_INT 0
73016: LESS
73017: IFFALSE 73034
// _y := _y * - 1 ;
73019: LD_ADDR_VAR 0 7
73023: PUSH
73024: LD_VAR 0 7
73028: PUSH
73029: LD_INT 1
73031: NEG
73032: MUL
73033: ST_TO_ADDR
// result := [ _x , _y ] ;
73034: LD_ADDR_VAR 0 5
73038: PUSH
73039: LD_VAR 0 6
73043: PUSH
73044: LD_VAR 0 7
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: ST_TO_ADDR
// end ;
73053: LD_VAR 0 5
73057: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73058: LD_INT 0
73060: PPUSH
73061: PPUSH
73062: PPUSH
73063: PPUSH
// task := GetTaskList ( unit ) ;
73064: LD_ADDR_VAR 0 7
73068: PUSH
73069: LD_VAR 0 1
73073: PPUSH
73074: CALL_OW 437
73078: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73079: LD_VAR 0 7
73083: NOT
73084: PUSH
73085: LD_VAR 0 1
73089: PPUSH
73090: LD_VAR 0 2
73094: PPUSH
73095: CALL_OW 308
73099: NOT
73100: AND
73101: IFFALSE 73105
// exit ;
73103: GO 73223
// if IsInArea ( unit , area ) then
73105: LD_VAR 0 1
73109: PPUSH
73110: LD_VAR 0 2
73114: PPUSH
73115: CALL_OW 308
73119: IFFALSE 73137
// begin ComMoveToArea ( unit , goAway ) ;
73121: LD_VAR 0 1
73125: PPUSH
73126: LD_VAR 0 3
73130: PPUSH
73131: CALL_OW 113
// exit ;
73135: GO 73223
// end ; if task [ 1 ] [ 1 ] <> M then
73137: LD_VAR 0 7
73141: PUSH
73142: LD_INT 1
73144: ARRAY
73145: PUSH
73146: LD_INT 1
73148: ARRAY
73149: PUSH
73150: LD_STRING M
73152: NONEQUAL
73153: IFFALSE 73157
// exit ;
73155: GO 73223
// x := task [ 1 ] [ 2 ] ;
73157: LD_ADDR_VAR 0 5
73161: PUSH
73162: LD_VAR 0 7
73166: PUSH
73167: LD_INT 1
73169: ARRAY
73170: PUSH
73171: LD_INT 2
73173: ARRAY
73174: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73175: LD_ADDR_VAR 0 6
73179: PUSH
73180: LD_VAR 0 7
73184: PUSH
73185: LD_INT 1
73187: ARRAY
73188: PUSH
73189: LD_INT 3
73191: ARRAY
73192: ST_TO_ADDR
// if InArea ( x , y , area ) then
73193: LD_VAR 0 5
73197: PPUSH
73198: LD_VAR 0 6
73202: PPUSH
73203: LD_VAR 0 2
73207: PPUSH
73208: CALL_OW 309
73212: IFFALSE 73223
// ComStop ( unit ) ;
73214: LD_VAR 0 1
73218: PPUSH
73219: CALL_OW 141
// end ;
73223: LD_VAR 0 4
73227: RET
// export function Abs ( value ) ; begin
73228: LD_INT 0
73230: PPUSH
// result := value ;
73231: LD_ADDR_VAR 0 2
73235: PUSH
73236: LD_VAR 0 1
73240: ST_TO_ADDR
// if value < 0 then
73241: LD_VAR 0 1
73245: PUSH
73246: LD_INT 0
73248: LESS
73249: IFFALSE 73266
// result := value * - 1 ;
73251: LD_ADDR_VAR 0 2
73255: PUSH
73256: LD_VAR 0 1
73260: PUSH
73261: LD_INT 1
73263: NEG
73264: MUL
73265: ST_TO_ADDR
// end ;
73266: LD_VAR 0 2
73270: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73271: LD_INT 0
73273: PPUSH
73274: PPUSH
73275: PPUSH
73276: PPUSH
73277: PPUSH
73278: PPUSH
73279: PPUSH
73280: PPUSH
// if not unit or not building then
73281: LD_VAR 0 1
73285: NOT
73286: PUSH
73287: LD_VAR 0 2
73291: NOT
73292: OR
73293: IFFALSE 73297
// exit ;
73295: GO 73523
// x := GetX ( building ) ;
73297: LD_ADDR_VAR 0 4
73301: PUSH
73302: LD_VAR 0 2
73306: PPUSH
73307: CALL_OW 250
73311: ST_TO_ADDR
// y := GetY ( building ) ;
73312: LD_ADDR_VAR 0 6
73316: PUSH
73317: LD_VAR 0 2
73321: PPUSH
73322: CALL_OW 251
73326: ST_TO_ADDR
// d := GetDir ( building ) ;
73327: LD_ADDR_VAR 0 8
73331: PUSH
73332: LD_VAR 0 2
73336: PPUSH
73337: CALL_OW 254
73341: ST_TO_ADDR
// r := 4 ;
73342: LD_ADDR_VAR 0 9
73346: PUSH
73347: LD_INT 4
73349: ST_TO_ADDR
// for i := 1 to 5 do
73350: LD_ADDR_VAR 0 10
73354: PUSH
73355: DOUBLE
73356: LD_INT 1
73358: DEC
73359: ST_TO_ADDR
73360: LD_INT 5
73362: PUSH
73363: FOR_TO
73364: IFFALSE 73521
// begin _x := ShiftX ( x , d , r + i ) ;
73366: LD_ADDR_VAR 0 5
73370: PUSH
73371: LD_VAR 0 4
73375: PPUSH
73376: LD_VAR 0 8
73380: PPUSH
73381: LD_VAR 0 9
73385: PUSH
73386: LD_VAR 0 10
73390: PLUS
73391: PPUSH
73392: CALL_OW 272
73396: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73397: LD_ADDR_VAR 0 7
73401: PUSH
73402: LD_VAR 0 6
73406: PPUSH
73407: LD_VAR 0 8
73411: PPUSH
73412: LD_VAR 0 9
73416: PUSH
73417: LD_VAR 0 10
73421: PLUS
73422: PPUSH
73423: CALL_OW 273
73427: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73428: LD_VAR 0 5
73432: PPUSH
73433: LD_VAR 0 7
73437: PPUSH
73438: CALL_OW 488
73442: PUSH
73443: LD_VAR 0 5
73447: PPUSH
73448: LD_VAR 0 7
73452: PPUSH
73453: CALL_OW 428
73457: PPUSH
73458: CALL_OW 247
73462: PUSH
73463: LD_INT 3
73465: PUSH
73466: LD_INT 2
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: IN
73473: NOT
73474: AND
73475: IFFALSE 73519
// begin ComMoveXY ( unit , _x , _y ) ;
73477: LD_VAR 0 1
73481: PPUSH
73482: LD_VAR 0 5
73486: PPUSH
73487: LD_VAR 0 7
73491: PPUSH
73492: CALL_OW 111
// result := [ _x , _y ] ;
73496: LD_ADDR_VAR 0 3
73500: PUSH
73501: LD_VAR 0 5
73505: PUSH
73506: LD_VAR 0 7
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: ST_TO_ADDR
// exit ;
73515: POP
73516: POP
73517: GO 73523
// end ; end ;
73519: GO 73363
73521: POP
73522: POP
// end ;
73523: LD_VAR 0 3
73527: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73528: LD_INT 0
73530: PPUSH
73531: PPUSH
73532: PPUSH
// result := 0 ;
73533: LD_ADDR_VAR 0 3
73537: PUSH
73538: LD_INT 0
73540: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73541: LD_VAR 0 1
73545: PUSH
73546: LD_INT 0
73548: LESS
73549: PUSH
73550: LD_VAR 0 1
73554: PUSH
73555: LD_INT 8
73557: GREATER
73558: OR
73559: PUSH
73560: LD_VAR 0 2
73564: PUSH
73565: LD_INT 0
73567: LESS
73568: OR
73569: PUSH
73570: LD_VAR 0 2
73574: PUSH
73575: LD_INT 8
73577: GREATER
73578: OR
73579: IFFALSE 73583
// exit ;
73581: GO 73658
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73583: LD_ADDR_VAR 0 4
73587: PUSH
73588: LD_INT 22
73590: PUSH
73591: LD_VAR 0 2
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PPUSH
73600: CALL_OW 69
73604: PUSH
73605: FOR_IN
73606: IFFALSE 73656
// begin un := UnitShoot ( i ) ;
73608: LD_ADDR_VAR 0 5
73612: PUSH
73613: LD_VAR 0 4
73617: PPUSH
73618: CALL_OW 504
73622: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73623: LD_VAR 0 5
73627: PPUSH
73628: CALL_OW 255
73632: PUSH
73633: LD_VAR 0 1
73637: EQUAL
73638: IFFALSE 73654
// begin result := un ;
73640: LD_ADDR_VAR 0 3
73644: PUSH
73645: LD_VAR 0 5
73649: ST_TO_ADDR
// exit ;
73650: POP
73651: POP
73652: GO 73658
// end ; end ;
73654: GO 73605
73656: POP
73657: POP
// end ;
73658: LD_VAR 0 3
73662: RET
// export function GetCargoBay ( units ) ; begin
73663: LD_INT 0
73665: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73666: LD_ADDR_VAR 0 2
73670: PUSH
73671: LD_VAR 0 1
73675: PPUSH
73676: LD_INT 2
73678: PUSH
73679: LD_INT 34
73681: PUSH
73682: LD_INT 12
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: PUSH
73689: LD_INT 34
73691: PUSH
73692: LD_INT 51
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PUSH
73699: LD_INT 34
73701: PUSH
73702: LD_INT 32
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 34
73711: PUSH
73712: LD_EXP 37
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: PPUSH
73728: CALL_OW 72
73732: ST_TO_ADDR
// end ;
73733: LD_VAR 0 2
73737: RET
// export function Negate ( value ) ; begin
73738: LD_INT 0
73740: PPUSH
// result := not value ;
73741: LD_ADDR_VAR 0 2
73745: PUSH
73746: LD_VAR 0 1
73750: NOT
73751: ST_TO_ADDR
// end ;
73752: LD_VAR 0 2
73756: RET
// export function Inc ( value ) ; begin
73757: LD_INT 0
73759: PPUSH
// result := value + 1 ;
73760: LD_ADDR_VAR 0 2
73764: PUSH
73765: LD_VAR 0 1
73769: PUSH
73770: LD_INT 1
73772: PLUS
73773: ST_TO_ADDR
// end ;
73774: LD_VAR 0 2
73778: RET
// export function Dec ( value ) ; begin
73779: LD_INT 0
73781: PPUSH
// result := value - 1 ;
73782: LD_ADDR_VAR 0 2
73786: PUSH
73787: LD_VAR 0 1
73791: PUSH
73792: LD_INT 1
73794: MINUS
73795: ST_TO_ADDR
// end ;
73796: LD_VAR 0 2
73800: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73801: LD_INT 0
73803: PPUSH
73804: PPUSH
73805: PPUSH
73806: PPUSH
73807: PPUSH
73808: PPUSH
73809: PPUSH
73810: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73811: LD_VAR 0 1
73815: PPUSH
73816: LD_VAR 0 2
73820: PPUSH
73821: CALL_OW 488
73825: NOT
73826: PUSH
73827: LD_VAR 0 3
73831: PPUSH
73832: LD_VAR 0 4
73836: PPUSH
73837: CALL_OW 488
73841: NOT
73842: OR
73843: IFFALSE 73856
// begin result := - 1 ;
73845: LD_ADDR_VAR 0 5
73849: PUSH
73850: LD_INT 1
73852: NEG
73853: ST_TO_ADDR
// exit ;
73854: GO 74091
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73856: LD_ADDR_VAR 0 12
73860: PUSH
73861: LD_VAR 0 1
73865: PPUSH
73866: LD_VAR 0 2
73870: PPUSH
73871: LD_VAR 0 3
73875: PPUSH
73876: LD_VAR 0 4
73880: PPUSH
73881: CALL 72939 0 4
73885: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73886: LD_ADDR_VAR 0 11
73890: PUSH
73891: LD_VAR 0 1
73895: PPUSH
73896: LD_VAR 0 2
73900: PPUSH
73901: LD_VAR 0 12
73905: PUSH
73906: LD_INT 1
73908: ARRAY
73909: PPUSH
73910: LD_VAR 0 12
73914: PUSH
73915: LD_INT 2
73917: ARRAY
73918: PPUSH
73919: CALL_OW 298
73923: ST_TO_ADDR
// distance := 9999 ;
73924: LD_ADDR_VAR 0 10
73928: PUSH
73929: LD_INT 9999
73931: ST_TO_ADDR
// for i := 0 to 5 do
73932: LD_ADDR_VAR 0 6
73936: PUSH
73937: DOUBLE
73938: LD_INT 0
73940: DEC
73941: ST_TO_ADDR
73942: LD_INT 5
73944: PUSH
73945: FOR_TO
73946: IFFALSE 74089
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73948: LD_ADDR_VAR 0 7
73952: PUSH
73953: LD_VAR 0 1
73957: PPUSH
73958: LD_VAR 0 6
73962: PPUSH
73963: LD_VAR 0 11
73967: PPUSH
73968: CALL_OW 272
73972: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73973: LD_ADDR_VAR 0 8
73977: PUSH
73978: LD_VAR 0 2
73982: PPUSH
73983: LD_VAR 0 6
73987: PPUSH
73988: LD_VAR 0 11
73992: PPUSH
73993: CALL_OW 273
73997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73998: LD_VAR 0 7
74002: PPUSH
74003: LD_VAR 0 8
74007: PPUSH
74008: CALL_OW 488
74012: NOT
74013: IFFALSE 74017
// continue ;
74015: GO 73945
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74017: LD_ADDR_VAR 0 9
74021: PUSH
74022: LD_VAR 0 12
74026: PUSH
74027: LD_INT 1
74029: ARRAY
74030: PPUSH
74031: LD_VAR 0 12
74035: PUSH
74036: LD_INT 2
74038: ARRAY
74039: PPUSH
74040: LD_VAR 0 7
74044: PPUSH
74045: LD_VAR 0 8
74049: PPUSH
74050: CALL_OW 298
74054: ST_TO_ADDR
// if tmp < distance then
74055: LD_VAR 0 9
74059: PUSH
74060: LD_VAR 0 10
74064: LESS
74065: IFFALSE 74087
// begin result := i ;
74067: LD_ADDR_VAR 0 5
74071: PUSH
74072: LD_VAR 0 6
74076: ST_TO_ADDR
// distance := tmp ;
74077: LD_ADDR_VAR 0 10
74081: PUSH
74082: LD_VAR 0 9
74086: ST_TO_ADDR
// end ; end ;
74087: GO 73945
74089: POP
74090: POP
// end ;
74091: LD_VAR 0 5
74095: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74096: LD_INT 0
74098: PPUSH
74099: PPUSH
// if not driver or not IsInUnit ( driver ) then
74100: LD_VAR 0 1
74104: NOT
74105: PUSH
74106: LD_VAR 0 1
74110: PPUSH
74111: CALL_OW 310
74115: NOT
74116: OR
74117: IFFALSE 74121
// exit ;
74119: GO 74211
// vehicle := IsInUnit ( driver ) ;
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_VAR 0 1
74130: PPUSH
74131: CALL_OW 310
74135: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74136: LD_VAR 0 1
74140: PPUSH
74141: LD_STRING \
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: LD_INT 0
74149: PUSH
74150: LD_INT 0
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: LD_INT 0
74158: PUSH
74159: LD_INT 0
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: LIST
74169: LIST
74170: PUSH
74171: LD_STRING E
74173: PUSH
74174: LD_INT 0
74176: PUSH
74177: LD_INT 0
74179: PUSH
74180: LD_VAR 0 3
74184: PUSH
74185: LD_INT 0
74187: PUSH
74188: LD_INT 0
74190: PUSH
74191: LD_INT 0
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PPUSH
74207: CALL_OW 446
// end ;
74211: LD_VAR 0 2
74215: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74216: LD_INT 0
74218: PPUSH
74219: PPUSH
// if not driver or not IsInUnit ( driver ) then
74220: LD_VAR 0 1
74224: NOT
74225: PUSH
74226: LD_VAR 0 1
74230: PPUSH
74231: CALL_OW 310
74235: NOT
74236: OR
74237: IFFALSE 74241
// exit ;
74239: GO 74331
// vehicle := IsInUnit ( driver ) ;
74241: LD_ADDR_VAR 0 3
74245: PUSH
74246: LD_VAR 0 1
74250: PPUSH
74251: CALL_OW 310
74255: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74256: LD_VAR 0 1
74260: PPUSH
74261: LD_STRING \
74263: PUSH
74264: LD_INT 0
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: LD_INT 0
74272: PUSH
74273: LD_INT 0
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: LD_INT 0
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: PUSH
74291: LD_STRING E
74293: PUSH
74294: LD_INT 0
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: LD_VAR 0 3
74304: PUSH
74305: LD_INT 0
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: LD_INT 0
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PPUSH
74327: CALL_OW 447
// end ;
74331: LD_VAR 0 2
74335: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74336: LD_INT 0
74338: PPUSH
74339: PPUSH
74340: PPUSH
// tmp := [ ] ;
74341: LD_ADDR_VAR 0 5
74345: PUSH
74346: EMPTY
74347: ST_TO_ADDR
// for i in units do
74348: LD_ADDR_VAR 0 4
74352: PUSH
74353: LD_VAR 0 1
74357: PUSH
74358: FOR_IN
74359: IFFALSE 74397
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74361: LD_ADDR_VAR 0 5
74365: PUSH
74366: LD_VAR 0 5
74370: PPUSH
74371: LD_VAR 0 5
74375: PUSH
74376: LD_INT 1
74378: PLUS
74379: PPUSH
74380: LD_VAR 0 4
74384: PPUSH
74385: CALL_OW 256
74389: PPUSH
74390: CALL_OW 2
74394: ST_TO_ADDR
74395: GO 74358
74397: POP
74398: POP
// if not tmp then
74399: LD_VAR 0 5
74403: NOT
74404: IFFALSE 74408
// exit ;
74406: GO 74456
// if asc then
74408: LD_VAR 0 2
74412: IFFALSE 74436
// result := SortListByListAsc ( units , tmp ) else
74414: LD_ADDR_VAR 0 3
74418: PUSH
74419: LD_VAR 0 1
74423: PPUSH
74424: LD_VAR 0 5
74428: PPUSH
74429: CALL_OW 76
74433: ST_TO_ADDR
74434: GO 74456
// result := SortListByListDesc ( units , tmp ) ;
74436: LD_ADDR_VAR 0 3
74440: PUSH
74441: LD_VAR 0 1
74445: PPUSH
74446: LD_VAR 0 5
74450: PPUSH
74451: CALL_OW 77
74455: ST_TO_ADDR
// end ;
74456: LD_VAR 0 3
74460: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74461: LD_INT 0
74463: PPUSH
74464: PPUSH
// task := GetTaskList ( mech ) ;
74465: LD_ADDR_VAR 0 4
74469: PUSH
74470: LD_VAR 0 1
74474: PPUSH
74475: CALL_OW 437
74479: ST_TO_ADDR
// if not task then
74480: LD_VAR 0 4
74484: NOT
74485: IFFALSE 74489
// exit ;
74487: GO 74531
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74489: LD_ADDR_VAR 0 3
74493: PUSH
74494: LD_VAR 0 4
74498: PUSH
74499: LD_INT 1
74501: ARRAY
74502: PUSH
74503: LD_INT 1
74505: ARRAY
74506: PUSH
74507: LD_STRING r
74509: EQUAL
74510: PUSH
74511: LD_VAR 0 4
74515: PUSH
74516: LD_INT 1
74518: ARRAY
74519: PUSH
74520: LD_INT 4
74522: ARRAY
74523: PUSH
74524: LD_VAR 0 2
74528: EQUAL
74529: AND
74530: ST_TO_ADDR
// end ;
74531: LD_VAR 0 3
74535: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74536: LD_INT 0
74538: PPUSH
// SetDir ( unit , d ) ;
74539: LD_VAR 0 1
74543: PPUSH
74544: LD_VAR 0 4
74548: PPUSH
74549: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 2
74562: PPUSH
74563: LD_VAR 0 3
74567: PPUSH
74568: LD_VAR 0 5
74572: PPUSH
74573: CALL_OW 48
// end ;
74577: LD_VAR 0 6
74581: RET
// export function ToNaturalNumber ( number ) ; begin
74582: LD_INT 0
74584: PPUSH
// result := number div 1 ;
74585: LD_ADDR_VAR 0 2
74589: PUSH
74590: LD_VAR 0 1
74594: PUSH
74595: LD_INT 1
74597: DIV
74598: ST_TO_ADDR
// if number < 0 then
74599: LD_VAR 0 1
74603: PUSH
74604: LD_INT 0
74606: LESS
74607: IFFALSE 74617
// result := 0 ;
74609: LD_ADDR_VAR 0 2
74613: PUSH
74614: LD_INT 0
74616: ST_TO_ADDR
// end ;
74617: LD_VAR 0 2
74621: RET
// export function SortByClass ( units , class ) ; var un ; begin
74622: LD_INT 0
74624: PPUSH
74625: PPUSH
// if not units or not class then
74626: LD_VAR 0 1
74630: NOT
74631: PUSH
74632: LD_VAR 0 2
74636: NOT
74637: OR
74638: IFFALSE 74642
// exit ;
74640: GO 74737
// result := [ ] ;
74642: LD_ADDR_VAR 0 3
74646: PUSH
74647: EMPTY
74648: ST_TO_ADDR
// for un in units do
74649: LD_ADDR_VAR 0 4
74653: PUSH
74654: LD_VAR 0 1
74658: PUSH
74659: FOR_IN
74660: IFFALSE 74735
// if GetClass ( un ) = class then
74662: LD_VAR 0 4
74666: PPUSH
74667: CALL_OW 257
74671: PUSH
74672: LD_VAR 0 2
74676: EQUAL
74677: IFFALSE 74704
// result := Insert ( result , 1 , un ) else
74679: LD_ADDR_VAR 0 3
74683: PUSH
74684: LD_VAR 0 3
74688: PPUSH
74689: LD_INT 1
74691: PPUSH
74692: LD_VAR 0 4
74696: PPUSH
74697: CALL_OW 2
74701: ST_TO_ADDR
74702: GO 74733
// result := Replace ( result , result + 1 , un ) ;
74704: LD_ADDR_VAR 0 3
74708: PUSH
74709: LD_VAR 0 3
74713: PPUSH
74714: LD_VAR 0 3
74718: PUSH
74719: LD_INT 1
74721: PLUS
74722: PPUSH
74723: LD_VAR 0 4
74727: PPUSH
74728: CALL_OW 1
74732: ST_TO_ADDR
74733: GO 74659
74735: POP
74736: POP
// end ;
74737: LD_VAR 0 3
74741: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74742: LD_INT 0
74744: PPUSH
74745: PPUSH
74746: PPUSH
74747: PPUSH
74748: PPUSH
74749: PPUSH
74750: PPUSH
// result := [ ] ;
74751: LD_ADDR_VAR 0 4
74755: PUSH
74756: EMPTY
74757: ST_TO_ADDR
// if x - r < 0 then
74758: LD_VAR 0 1
74762: PUSH
74763: LD_VAR 0 3
74767: MINUS
74768: PUSH
74769: LD_INT 0
74771: LESS
74772: IFFALSE 74784
// min_x := 0 else
74774: LD_ADDR_VAR 0 8
74778: PUSH
74779: LD_INT 0
74781: ST_TO_ADDR
74782: GO 74800
// min_x := x - r ;
74784: LD_ADDR_VAR 0 8
74788: PUSH
74789: LD_VAR 0 1
74793: PUSH
74794: LD_VAR 0 3
74798: MINUS
74799: ST_TO_ADDR
// if y - r < 0 then
74800: LD_VAR 0 2
74804: PUSH
74805: LD_VAR 0 3
74809: MINUS
74810: PUSH
74811: LD_INT 0
74813: LESS
74814: IFFALSE 74826
// min_y := 0 else
74816: LD_ADDR_VAR 0 7
74820: PUSH
74821: LD_INT 0
74823: ST_TO_ADDR
74824: GO 74842
// min_y := y - r ;
74826: LD_ADDR_VAR 0 7
74830: PUSH
74831: LD_VAR 0 2
74835: PUSH
74836: LD_VAR 0 3
74840: MINUS
74841: ST_TO_ADDR
// max_x := x + r ;
74842: LD_ADDR_VAR 0 9
74846: PUSH
74847: LD_VAR 0 1
74851: PUSH
74852: LD_VAR 0 3
74856: PLUS
74857: ST_TO_ADDR
// max_y := y + r ;
74858: LD_ADDR_VAR 0 10
74862: PUSH
74863: LD_VAR 0 2
74867: PUSH
74868: LD_VAR 0 3
74872: PLUS
74873: ST_TO_ADDR
// for _x = min_x to max_x do
74874: LD_ADDR_VAR 0 5
74878: PUSH
74879: DOUBLE
74880: LD_VAR 0 8
74884: DEC
74885: ST_TO_ADDR
74886: LD_VAR 0 9
74890: PUSH
74891: FOR_TO
74892: IFFALSE 74993
// for _y = min_y to max_y do
74894: LD_ADDR_VAR 0 6
74898: PUSH
74899: DOUBLE
74900: LD_VAR 0 7
74904: DEC
74905: ST_TO_ADDR
74906: LD_VAR 0 10
74910: PUSH
74911: FOR_TO
74912: IFFALSE 74989
// begin if not ValidHex ( _x , _y ) then
74914: LD_VAR 0 5
74918: PPUSH
74919: LD_VAR 0 6
74923: PPUSH
74924: CALL_OW 488
74928: NOT
74929: IFFALSE 74933
// continue ;
74931: GO 74911
// if GetResourceTypeXY ( _x , _y ) then
74933: LD_VAR 0 5
74937: PPUSH
74938: LD_VAR 0 6
74942: PPUSH
74943: CALL_OW 283
74947: IFFALSE 74987
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74949: LD_ADDR_VAR 0 4
74953: PUSH
74954: LD_VAR 0 4
74958: PPUSH
74959: LD_VAR 0 4
74963: PUSH
74964: LD_INT 1
74966: PLUS
74967: PPUSH
74968: LD_VAR 0 5
74972: PUSH
74973: LD_VAR 0 6
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PPUSH
74982: CALL_OW 1
74986: ST_TO_ADDR
// end ;
74987: GO 74911
74989: POP
74990: POP
74991: GO 74891
74993: POP
74994: POP
// end ;
74995: LD_VAR 0 4
74999: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75000: LD_INT 0
75002: PPUSH
75003: PPUSH
75004: PPUSH
75005: PPUSH
75006: PPUSH
75007: PPUSH
75008: PPUSH
75009: PPUSH
// if not units then
75010: LD_VAR 0 1
75014: NOT
75015: IFFALSE 75019
// exit ;
75017: GO 75530
// result := UnitFilter ( units , [ f_ok ] ) ;
75019: LD_ADDR_VAR 0 3
75023: PUSH
75024: LD_VAR 0 1
75028: PPUSH
75029: LD_INT 50
75031: PUSH
75032: EMPTY
75033: LIST
75034: PPUSH
75035: CALL_OW 72
75039: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75040: LD_ADDR_VAR 0 8
75044: PUSH
75045: LD_VAR 0 1
75049: PUSH
75050: LD_INT 1
75052: ARRAY
75053: PPUSH
75054: CALL_OW 255
75058: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75059: LD_ADDR_VAR 0 10
75063: PUSH
75064: LD_INT 29
75066: PUSH
75067: LD_EXP 40
75071: PUSH
75072: LD_INT 49
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: ST_TO_ADDR
// if not result then
75080: LD_VAR 0 3
75084: NOT
75085: IFFALSE 75089
// exit ;
75087: GO 75530
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75089: LD_ADDR_VAR 0 5
75093: PUSH
75094: LD_INT 81
75096: PUSH
75097: LD_VAR 0 8
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PPUSH
75106: CALL_OW 69
75110: ST_TO_ADDR
// for i in result do
75111: LD_ADDR_VAR 0 4
75115: PUSH
75116: LD_VAR 0 3
75120: PUSH
75121: FOR_IN
75122: IFFALSE 75528
// begin tag := GetTag ( i ) + 1 ;
75124: LD_ADDR_VAR 0 9
75128: PUSH
75129: LD_VAR 0 4
75133: PPUSH
75134: CALL_OW 110
75138: PUSH
75139: LD_INT 1
75141: PLUS
75142: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75143: LD_ADDR_VAR 0 7
75147: PUSH
75148: LD_VAR 0 4
75152: PPUSH
75153: CALL_OW 250
75157: PPUSH
75158: LD_VAR 0 4
75162: PPUSH
75163: CALL_OW 251
75167: PPUSH
75168: LD_INT 6
75170: PPUSH
75171: CALL 74742 0 3
75175: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75176: LD_VAR 0 7
75180: PUSH
75181: LD_VAR 0 4
75185: PPUSH
75186: CALL_OW 264
75190: PUSH
75191: LD_VAR 0 10
75195: IN
75196: NOT
75197: AND
75198: IFFALSE 75237
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75200: LD_VAR 0 4
75204: PPUSH
75205: LD_VAR 0 7
75209: PUSH
75210: LD_INT 1
75212: ARRAY
75213: PUSH
75214: LD_INT 1
75216: ARRAY
75217: PPUSH
75218: LD_VAR 0 7
75222: PUSH
75223: LD_INT 1
75225: ARRAY
75226: PUSH
75227: LD_INT 2
75229: ARRAY
75230: PPUSH
75231: CALL_OW 116
75235: GO 75526
// if path > tag then
75237: LD_VAR 0 2
75241: PUSH
75242: LD_VAR 0 9
75246: GREATER
75247: IFFALSE 75455
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75249: LD_ADDR_VAR 0 6
75253: PUSH
75254: LD_VAR 0 5
75258: PPUSH
75259: LD_INT 91
75261: PUSH
75262: LD_VAR 0 4
75266: PUSH
75267: LD_INT 12
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: LIST
75274: PPUSH
75275: CALL_OW 72
75279: ST_TO_ADDR
// if nearEnemy then
75280: LD_VAR 0 6
75284: IFFALSE 75353
// begin if GetWeapon ( i ) = ru_time_lapser then
75286: LD_VAR 0 4
75290: PPUSH
75291: CALL_OW 264
75295: PUSH
75296: LD_INT 49
75298: EQUAL
75299: IFFALSE 75327
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75301: LD_VAR 0 4
75305: PPUSH
75306: LD_VAR 0 6
75310: PPUSH
75311: LD_VAR 0 4
75315: PPUSH
75316: CALL_OW 74
75320: PPUSH
75321: CALL_OW 112
75325: GO 75351
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75327: LD_VAR 0 4
75331: PPUSH
75332: LD_VAR 0 6
75336: PPUSH
75337: LD_VAR 0 4
75341: PPUSH
75342: CALL_OW 74
75346: PPUSH
75347: CALL_OW 115
// end else
75351: GO 75453
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75353: LD_VAR 0 4
75357: PPUSH
75358: LD_VAR 0 2
75362: PUSH
75363: LD_VAR 0 9
75367: ARRAY
75368: PUSH
75369: LD_INT 1
75371: ARRAY
75372: PPUSH
75373: LD_VAR 0 2
75377: PUSH
75378: LD_VAR 0 9
75382: ARRAY
75383: PUSH
75384: LD_INT 2
75386: ARRAY
75387: PPUSH
75388: CALL_OW 297
75392: PUSH
75393: LD_INT 6
75395: GREATER
75396: IFFALSE 75439
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75398: LD_VAR 0 4
75402: PPUSH
75403: LD_VAR 0 2
75407: PUSH
75408: LD_VAR 0 9
75412: ARRAY
75413: PUSH
75414: LD_INT 1
75416: ARRAY
75417: PPUSH
75418: LD_VAR 0 2
75422: PUSH
75423: LD_VAR 0 9
75427: ARRAY
75428: PUSH
75429: LD_INT 2
75431: ARRAY
75432: PPUSH
75433: CALL_OW 114
75437: GO 75453
// SetTag ( i , tag ) ;
75439: LD_VAR 0 4
75443: PPUSH
75444: LD_VAR 0 9
75448: PPUSH
75449: CALL_OW 109
// end else
75453: GO 75526
// if enemy then
75455: LD_VAR 0 5
75459: IFFALSE 75526
// begin if GetWeapon ( i ) = ru_time_lapser then
75461: LD_VAR 0 4
75465: PPUSH
75466: CALL_OW 264
75470: PUSH
75471: LD_INT 49
75473: EQUAL
75474: IFFALSE 75502
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75476: LD_VAR 0 4
75480: PPUSH
75481: LD_VAR 0 5
75485: PPUSH
75486: LD_VAR 0 4
75490: PPUSH
75491: CALL_OW 74
75495: PPUSH
75496: CALL_OW 112
75500: GO 75526
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75502: LD_VAR 0 4
75506: PPUSH
75507: LD_VAR 0 5
75511: PPUSH
75512: LD_VAR 0 4
75516: PPUSH
75517: CALL_OW 74
75521: PPUSH
75522: CALL_OW 115
// end ; end ;
75526: GO 75121
75528: POP
75529: POP
// end ;
75530: LD_VAR 0 3
75534: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75535: LD_INT 0
75537: PPUSH
75538: PPUSH
75539: PPUSH
// if not unit or IsInUnit ( unit ) then
75540: LD_VAR 0 1
75544: NOT
75545: PUSH
75546: LD_VAR 0 1
75550: PPUSH
75551: CALL_OW 310
75555: OR
75556: IFFALSE 75560
// exit ;
75558: GO 75651
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75560: LD_ADDR_VAR 0 4
75564: PUSH
75565: LD_VAR 0 1
75569: PPUSH
75570: CALL_OW 250
75574: PPUSH
75575: LD_VAR 0 2
75579: PPUSH
75580: LD_INT 1
75582: PPUSH
75583: CALL_OW 272
75587: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75588: LD_ADDR_VAR 0 5
75592: PUSH
75593: LD_VAR 0 1
75597: PPUSH
75598: CALL_OW 251
75602: PPUSH
75603: LD_VAR 0 2
75607: PPUSH
75608: LD_INT 1
75610: PPUSH
75611: CALL_OW 273
75615: ST_TO_ADDR
// if ValidHex ( x , y ) then
75616: LD_VAR 0 4
75620: PPUSH
75621: LD_VAR 0 5
75625: PPUSH
75626: CALL_OW 488
75630: IFFALSE 75651
// ComTurnXY ( unit , x , y ) ;
75632: LD_VAR 0 1
75636: PPUSH
75637: LD_VAR 0 4
75641: PPUSH
75642: LD_VAR 0 5
75646: PPUSH
75647: CALL_OW 118
// end ;
75651: LD_VAR 0 3
75655: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75656: LD_INT 0
75658: PPUSH
75659: PPUSH
// result := false ;
75660: LD_ADDR_VAR 0 3
75664: PUSH
75665: LD_INT 0
75667: ST_TO_ADDR
// if not units then
75668: LD_VAR 0 2
75672: NOT
75673: IFFALSE 75677
// exit ;
75675: GO 75722
// for i in units do
75677: LD_ADDR_VAR 0 4
75681: PUSH
75682: LD_VAR 0 2
75686: PUSH
75687: FOR_IN
75688: IFFALSE 75720
// if See ( side , i ) then
75690: LD_VAR 0 1
75694: PPUSH
75695: LD_VAR 0 4
75699: PPUSH
75700: CALL_OW 292
75704: IFFALSE 75718
// begin result := true ;
75706: LD_ADDR_VAR 0 3
75710: PUSH
75711: LD_INT 1
75713: ST_TO_ADDR
// exit ;
75714: POP
75715: POP
75716: GO 75722
// end ;
75718: GO 75687
75720: POP
75721: POP
// end ;
75722: LD_VAR 0 3
75726: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75727: LD_INT 0
75729: PPUSH
75730: PPUSH
75731: PPUSH
75732: PPUSH
// if not unit or not points then
75733: LD_VAR 0 1
75737: NOT
75738: PUSH
75739: LD_VAR 0 2
75743: NOT
75744: OR
75745: IFFALSE 75749
// exit ;
75747: GO 75839
// dist := 99999 ;
75749: LD_ADDR_VAR 0 5
75753: PUSH
75754: LD_INT 99999
75756: ST_TO_ADDR
// for i in points do
75757: LD_ADDR_VAR 0 4
75761: PUSH
75762: LD_VAR 0 2
75766: PUSH
75767: FOR_IN
75768: IFFALSE 75837
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75770: LD_ADDR_VAR 0 6
75774: PUSH
75775: LD_VAR 0 1
75779: PPUSH
75780: LD_VAR 0 4
75784: PUSH
75785: LD_INT 1
75787: ARRAY
75788: PPUSH
75789: LD_VAR 0 4
75793: PUSH
75794: LD_INT 2
75796: ARRAY
75797: PPUSH
75798: CALL_OW 297
75802: ST_TO_ADDR
// if tmpDist < dist then
75803: LD_VAR 0 6
75807: PUSH
75808: LD_VAR 0 5
75812: LESS
75813: IFFALSE 75835
// begin result := i ;
75815: LD_ADDR_VAR 0 3
75819: PUSH
75820: LD_VAR 0 4
75824: ST_TO_ADDR
// dist := tmpDist ;
75825: LD_ADDR_VAR 0 5
75829: PUSH
75830: LD_VAR 0 6
75834: ST_TO_ADDR
// end ; end ;
75835: GO 75767
75837: POP
75838: POP
// end ;
75839: LD_VAR 0 3
75843: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75844: LD_INT 0
75846: PPUSH
// uc_side := side ;
75847: LD_ADDR_OWVAR 20
75851: PUSH
75852: LD_VAR 0 1
75856: ST_TO_ADDR
// uc_nation := 3 ;
75857: LD_ADDR_OWVAR 21
75861: PUSH
75862: LD_INT 3
75864: ST_TO_ADDR
// vc_chassis := 25 ;
75865: LD_ADDR_OWVAR 37
75869: PUSH
75870: LD_INT 25
75872: ST_TO_ADDR
// vc_engine := engine_siberite ;
75873: LD_ADDR_OWVAR 39
75877: PUSH
75878: LD_INT 3
75880: ST_TO_ADDR
// vc_control := control_computer ;
75881: LD_ADDR_OWVAR 38
75885: PUSH
75886: LD_INT 3
75888: ST_TO_ADDR
// vc_weapon := 59 ;
75889: LD_ADDR_OWVAR 40
75893: PUSH
75894: LD_INT 59
75896: ST_TO_ADDR
// result := CreateVehicle ;
75897: LD_ADDR_VAR 0 5
75901: PUSH
75902: CALL_OW 45
75906: ST_TO_ADDR
// SetDir ( result , d ) ;
75907: LD_VAR 0 5
75911: PPUSH
75912: LD_VAR 0 4
75916: PPUSH
75917: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75921: LD_VAR 0 5
75925: PPUSH
75926: LD_VAR 0 2
75930: PPUSH
75931: LD_VAR 0 3
75935: PPUSH
75936: LD_INT 0
75938: PPUSH
75939: CALL_OW 48
// end ;
75943: LD_VAR 0 5
75947: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75948: LD_INT 0
75950: PPUSH
75951: PPUSH
75952: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75953: LD_ADDR_VAR 0 2
75957: PUSH
75958: LD_INT 0
75960: PUSH
75961: LD_INT 0
75963: PUSH
75964: LD_INT 0
75966: PUSH
75967: LD_INT 0
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75976: LD_VAR 0 1
75980: NOT
75981: PUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: CALL_OW 264
75991: PUSH
75992: LD_INT 12
75994: PUSH
75995: LD_INT 51
75997: PUSH
75998: LD_INT 32
76000: PUSH
76001: LD_EXP 37
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: IN
76012: NOT
76013: OR
76014: IFFALSE 76018
// exit ;
76016: GO 76116
// for i := 1 to 3 do
76018: LD_ADDR_VAR 0 3
76022: PUSH
76023: DOUBLE
76024: LD_INT 1
76026: DEC
76027: ST_TO_ADDR
76028: LD_INT 3
76030: PUSH
76031: FOR_TO
76032: IFFALSE 76114
// begin tmp := GetCargo ( cargo , i ) ;
76034: LD_ADDR_VAR 0 4
76038: PUSH
76039: LD_VAR 0 1
76043: PPUSH
76044: LD_VAR 0 3
76048: PPUSH
76049: CALL_OW 289
76053: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76054: LD_ADDR_VAR 0 2
76058: PUSH
76059: LD_VAR 0 2
76063: PPUSH
76064: LD_VAR 0 3
76068: PPUSH
76069: LD_VAR 0 4
76073: PPUSH
76074: CALL_OW 1
76078: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76079: LD_ADDR_VAR 0 2
76083: PUSH
76084: LD_VAR 0 2
76088: PPUSH
76089: LD_INT 4
76091: PPUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_INT 4
76099: ARRAY
76100: PUSH
76101: LD_VAR 0 4
76105: PLUS
76106: PPUSH
76107: CALL_OW 1
76111: ST_TO_ADDR
// end ;
76112: GO 76031
76114: POP
76115: POP
// end ; end_of_file
76116: LD_VAR 0 2
76120: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76121: LD_VAR 0 1
76125: PUSH
76126: LD_INT 200
76128: DOUBLE
76129: GREATEREQUAL
76130: IFFALSE 76138
76132: LD_INT 299
76134: DOUBLE
76135: LESSEQUAL
76136: IFTRUE 76140
76138: GO 76172
76140: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76141: LD_VAR 0 1
76145: PPUSH
76146: LD_VAR 0 2
76150: PPUSH
76151: LD_VAR 0 3
76155: PPUSH
76156: LD_VAR 0 4
76160: PPUSH
76161: LD_VAR 0 5
76165: PPUSH
76166: CALL 31461 0 5
76170: GO 76249
76172: LD_INT 300
76174: DOUBLE
76175: GREATEREQUAL
76176: IFFALSE 76184
76178: LD_INT 399
76180: DOUBLE
76181: LESSEQUAL
76182: IFTRUE 76186
76184: GO 76248
76186: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76187: LD_VAR 0 1
76191: PPUSH
76192: LD_VAR 0 2
76196: PPUSH
76197: LD_VAR 0 3
76201: PPUSH
76202: LD_VAR 0 4
76206: PPUSH
76207: LD_VAR 0 5
76211: PPUSH
76212: LD_VAR 0 6
76216: PPUSH
76217: LD_VAR 0 7
76221: PPUSH
76222: LD_VAR 0 8
76226: PPUSH
76227: LD_VAR 0 9
76231: PPUSH
76232: LD_VAR 0 10
76236: PPUSH
76237: LD_VAR 0 11
76241: PPUSH
76242: CALL 29103 0 11
76246: GO 76249
76248: POP
// end ;
76249: PPOPN 11
76251: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76252: LD_VAR 0 1
76256: PPUSH
76257: LD_VAR 0 2
76261: PPUSH
76262: LD_VAR 0 3
76266: PPUSH
76267: LD_VAR 0 4
76271: PPUSH
76272: LD_VAR 0 5
76276: PPUSH
76277: CALL 31197 0 5
// end ; end_of_file
76281: PPOPN 5
76283: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76284: LD_VAR 0 1
76288: PPUSH
76289: LD_VAR 0 2
76293: PPUSH
76294: LD_VAR 0 3
76298: PPUSH
76299: LD_VAR 0 4
76303: PPUSH
76304: LD_VAR 0 5
76308: PPUSH
76309: LD_VAR 0 6
76313: PPUSH
76314: CALL 16796 0 6
// end ;
76318: PPOPN 6
76320: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76321: CALL 16771 0 0
// end ;
76325: PPOPN 1
76327: END
